using System.Runtime.InteropServices;

namespace Decima
{
    using int8 = System.SByte;
    using uint8 = System.Byte;
    using int16 = System.Int16;
    using uint16 = System.UInt16;
    using int32 = System.Int32;
    using uint32 = System.UInt32;
    using int64 = System.Int64;
    using uint64 = System.UInt64;

    using wchar = System.Int16;
    using HalfFloat = System.UInt16;

    using MaterialType = System.UInt16;
    using AnimationTagID = System.UInt32;
    using AnimationStateID = System.UInt32;
    using AnimationEventID = System.UInt32;
    using PhysicsCollisionFilterInfo = System.UInt32;

    static partial class GameData
    {
        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9253625679F824B, 0x98)]
        public class AIAgent : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0CCD4893DD4B37C, 0x38)]
        public class AIAlertForEntityMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6EA3ED65407699E, 0x48)]
        public class AIArea : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED9CFA1724DDB7D5, 0x20)]
        public class AIAreaFilter
        {
            WorldPosition CenterPosition;
            float SquaredRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9D51997F32F3996, 0x40)]
        public class AIAreaGraph : CoreObject
        {
            Array<Ref<AIArea>> Areas;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CBCBBCF3490E0A8, 0x80)]
        public class AIAtmosphereBox : WorldNode
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            float VisibilityDistance;
            bool UsedForStealthGrass;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC3D43D192F22E9B, 0x60)]
        public class AIAtmosphereBoxResource : Resource
        {
            Vec3 CenterOffset;
            float Width;
            float Depth;
            float Height;
            float VisibilityDistance;
            bool UsedForStealthGrass;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19FD8E831E5113F5, 0x520)]
        public class AIAttack : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8B50D75E7CD5AB1, 0x70)]
        public class AIAttackResource : Resource
        {
            Ref<BoolProperty> EnabledProperty;
            Ref<FloatProperty> HardCooldownProperty;
            Ref<FloatProperty> SoftCooldownProperty;
            FRange DamageWindow;
            Array<Ref<AIProbabilityDataSetResource>> ProbabilityDataSets;
            Array<Ref<TagProperty>> TargetExclusionTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x440E95D410A6EA03, 0x30)]
        public class AIAuralSensor : AISensor
        {
            float UnitDetectionDistance;
            float Range;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C4D3315BB02FDC9, 0x90)]
        public class AIAuralStimulus : AIStimulus
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9EE6CB149F71778C, 0x60)]
        public class AIAuralStimulusComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x580143F3571265D2, 0x30)]
        public class AIAuralStimulusComponentResource : EntityComponentResource
        {
            Ref<AIAuralStimulusResource> StimulusResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27A2C3A5CE8A243E, 0x58)]
        public class AIAuralStimulusResource : AIStimulusResource
        {
            float Loudness;
            bool DrownsOutOtherAuralStimuli;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF1D70CB25B047A6, 0x60)]
        public class AIAvoidanceComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43DCD4AB09C284B2, 0x40)]
        public class AIAvoidanceComponentResource : EntityComponentResource
        {
            float LookaheadTime;
            Array<BoundingSphere> ShapeSpheres;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E6533FDF6A8641E, 0x120)]
        public class AIBehaviorGroup : ParentWorldNode
        {
            Array<Ref<SpawnpointBase>> SpawnPoints;
            Array<Ref<AIBehaviorGroupMember>> Members;
            Array<Ref<SpawnCommand>> SpawnCommands;
            Array<Ref<EntityComponentResource>> ExtraComponents;
            bool AutoSpawn;
            bool JoinSceneGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8AA4CF170323A31, 0x68)]
        public class AIBehaviorGroupMember : CoreObject
        {
            Ref<SpawnSetupBase> SpawnSetup;
            IRange Amount;
            EAIBehaviorGroupMemberNavmeshPlacmentType NavmeshPlacementType;
            FRange SpawnRange;
            FRange SpawnHeadingRange;
            Array<Ref<EntityComponentResource>> ExtraComponents;
            Array<Ref<SpawnCommand>> SpawnCommands;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF85D0F326A451BE2, 0x78)]
        public class AIBehaviorGroupMemberComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FC5CD2D9485522A, 0x38)]
        public class AIBeingClimbedHtnFactMessage : AIHtnFactMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4A2CF8D25E1F13F, 0x3E0)]
        public class AIBodyComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E47BD665AACF55, 0x28)]
        public class AIBodyComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49A8482B3AD35186, 0x380)]
        public class AIBodyExplosiveLocation : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59AE57751C8E3FDB, 0x28)]
        public class AIBodyGoal : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D6050137609F011, 0xB0)]
        public class AIBodyGoalAimAt : AIBodyGoalTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x834993EFEC0CF246, 0x30)]
        public class AIBodyGoalAnimationAction : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEF99D81FC21FE82, 0xC0)]
        public class AIBodyGoalAttack : AIBodyGoalTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35800A3ADE6B3D34, 0x60)]
        public class AIBodyGoalCloseCombat : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78BA7316C360B18A, 0x50)]
        public class AIBodyGoalContextualSpeech : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCE3A3E43EDB41B9, 0x30)]
        public class AIBodyGoalCustomAction : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC4D46A5A44FA03FF, 0xD0)]
        public class AIBodyGoalFaceTowards : AIBodyGoalTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B60FF37AF4A01FE, 0x30)]
        public class AIBodyGoalFacialExpression : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD88AB485E5F419C2, 0x240)]
        public class AIBodyGoalFly : AIBodyGoalMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73F11223330697C9, 0x50)]
        public class AIBodyGoalGesture : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CE211FBA70E0749, 0xB0)]
        public class AIBodyGoalGlance : AIBodyGoalLookAt
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD582C422A2104E0, 0x48)]
        public class AIBodyGoalHoldEntityAction : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6571EE0023871B91, 0x238)]
        public class AIBodyGoalHover : AIBodyGoalMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x426B6563765FC6DC, 0x38)]
        public class AIBodyGoalImmediateWeaponLoad : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6F4E798B2A34343, 0x80)]
        public class AIBodyGoalLand : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB01598B7C9D830, 0xB0)]
        public class AIBodyGoalListen : AIBodyGoalLookAt
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85E2674761EF6EFB, 0xB0)]
        public class AIBodyGoalLookAt : AIBodyGoalTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5543F5626A9230E9, 0x78)]
        public class AIBodyGoalMotionScatterBlendAnimation : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5E2BE809E0B460D, 0x50)]
        public class AIBodyGoalMountObject : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44D98BFCDBC43F3A, 0x68)]
        public class AIBodyGoalMove : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9969FC0977E0005, 0x28)]
        public class AIBodyGoalPerch : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2350A6C575F8D655, 0x40)]
        public class AIBodyGoalPlayMonitoredAnimation : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBCCA7593743B290, 0x38)]
        public class AIBodyGoalSelectWeapon : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15FE89D16F3453B6, 0x38)]
        public class AIBodyGoalSetDesire : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64381B112410932E, 0xB0)]
        public class AIBodyGoalShieldSelf : AIBodyGoalTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB8D407EA3D771FE, 0x80)]
        public class AIBodyGoalSpecialMove : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x25986E6170881F39, 0x38)]
        public class AIBodyGoalStance : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8E44387F4A3D5CC, 0x30)]
        public class AIBodyGoalStowWeapon : AIBodyGoal
        {
            Ptr<AIBodyInterface> Body;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89342C240793D04B, 0x90)]
        public class AIBodyGoalSwimFlee : AIBodyGoalMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67830E41A118B4B0, 0x68)]
        public class AIBodyGoalSwimWander : AIBodyGoalMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63F000889947C30C, 0x38)]
        public class AIBodyGoalTakeOff : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A5B69600ECD5E43, 0x90)]
        public class AIBodyGoalTalk : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3481969F7A57025, 0xB0)]
        public class AIBodyGoalTarget : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFB714856E9DED18, 0x60)]
        public class AIBodyGoalUnmountObject : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4963F3D6B2B6027, 0x60)]
        public class AIBodyGoalUseAttachableObject : AIBodyGoalUseObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF282BCC719F332, 0x88)]
        public class AIBodyGoalUseInventoryItem : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48CA0E7E78A40FD6, 0x60)]
        public class AIBodyGoalUseObject : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D58B06EEE00F460, 0x218)]
        public class AIBodyGoalWalk : AIBodyGoalMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EAB016020FDA55D, 0x38)]
        public class AIBodyGoalWeaponLoad : AIBodyGoal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28E5DE61B6FAE9D5, 0x3E0)]
        public class AIBodyHumanoid : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF97C394E7640594E, 0x380)]
        public class AIBodyInteractiveEntity : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F596DFC05AE70FA, 0x8)]
        public class AIBodyInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72A06E01C19B745B, 0x350)]
        public class AIBodyInterfaceGame : AIBodyInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE205A59FB716297, 0x28)]
        public class AIBodyPartBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC341ED9726DD3231, 0x28)]
        public class AIBodyPartResource : AIBodyPartBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9074915484E46E4E, 0x38)]
        public class AIBodyPartResourceSet : AIBodyPartBase
        {
            Array<Ref<AIBodyPartResource>> BodyResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FE03842A6E5C5DD, 0x390)]
        public class AIBodyPlayAnimationObject : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E59A1CE13F3921A, 0x3E0)]
        public class AIBodySoldier : AIBodyHumanoid
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9450394489CB5B8, 0x380)]
        public class AIBodyTurret : AIBodyInterfaceGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE37FE42F8C67431E, 0x410)]
        public class AIBodyTurretComponent : AIBodyComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3DBEE534607B2AF0, 0x28)]
        public class AIBodyTurretComponentResource : AIBodyComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD80188BA64A9FF8, 0x40)]
        public class AIBurstBasedWeaponOperationResource : AIWeaponOperationResource
        {
            IRange NormalBurstSize;
            IRange InitialBurstSize;
            int BurstImproveCount;
            bool KeepRunningWhileWeaponIsOperating;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x811ACAAAFDA3CA4F, 0x98)]
        public class AICargoCrabCrateComponent : AIUsableComponent
        {
            float BroadcastDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D4F6277E730BE1, 0x28)]
        public class AICargoCrabCrateComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x459BE2A68EF4257A, 0x48)]
        public class AICloseCombatWeaponInterface : AIInventoryWeaponInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x500700C09B84B51B, 0x48)]
        public class AIColumnMemberFormation : AIMemberFormation
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83662DF6260C8DE2, 0x38)]
        public class AIColumnMemberFormationResource : AIMemberFormationResource
        {
            int MembersPerRow;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7A0C01C5D5B6A42C, 0x28)]
        public class AICombatSituationMessageHandlerResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFA976BF27CB049E, 0x38)]
        public class AICombatSituationMessageHandlerResourceSet : Resource
        {
            Array<Ref<AICombatSituationMessageHandlerResource>> Handlers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x663BFDDB40FB9008, 0xB0)]
        public class AICombatSituationResource : Resource
        {
            float DurationGettingHit;
            float DurationUnderAttack;
            float DurationCombat;
            float DurationThreatsIdentified;
            float DurationPresenceConfirmed;
            float DurationPresenceSuspected;
            EAlertLevel MinimumPropagatedLevel;
            EAlertLevel CorpseAlertLevel;
            float SuspicionBuildupTime;
            float SuspicionFalloffTime;
            float SuspicionMinimumDuration;
            float ConfirmationBuildupTime;
            float ConfirmationFalloffTime;
            float IdentificationBuildupTime;
            float IdentificationFalloffTime;
            Ref<AICombatSituationMessageHandlerResourceSet> MessageHandlerSet;
            float RemovalTime;
            float TpaDurationDeducedExact;
            float TpaDurationDeducedRough;
            float ConfirmedLostRemovalTime;
            bool TpaAlwaysKnowsExactPositions;
            float DamageReceiverRemovalTime;
            float AttackTargetHistoryRemovalTime;
            float AttackerRemovalTime;
            float Damping;
            float IncrementWhenHit;
            float IncrementNearbyImpact;
            float NearbyImpactRadius;
            float FriendlyFireSoundRange;
            bool IsAfraidOfElectricity;
            bool IsAfraidOfFire;
            bool IsAfraidOfExplosion;
            bool IsAfraidOfVehicle;
            bool IsAfraidOfCryo;
            bool IsAfraidOfSequence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD51F4E6C08FA20C7, 0x40)]
        public class AIContextHintResource : AIHintSymbolResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD77445804326DED, 0xB0)]
        public class AIContextResource : Resource
        {
            uint16 SoftObstacleCosts;
            int IgnoreDestructDamage;
            int AvoidDestructDamage;
            bool AvoidDynamicObstacles;
            float MaxObstacleAvoidanceAngle;
            int32 PathDangerAreaCost;
            int32 GameplayAreaCost;
            int32 StealthAreaCost;
            EMoveStanceChoice Stance;
            Ref<AISkillContext> SkillContext;
            FRange SpeedModifier;
            FRange ObstableAvoidanceSpeedModifierRange;
            bool ClampToDestination;
            float MinimumDuration;
            int ClaimCost;
            float SmoothTangentLengthModifier;
            Ref<AIScanContextResource> ScanResource;
            Ref<AIScanContextResource> AttackScanResource;
            bool LowerWeapon;
            Array<Ref<AIPathObjectCategory>> AllowedCategories;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x466B76E2221EC85E, 0x40)]
        public class AIContextResourceSet : Resource
        {
            Array<Ref<AIContextResource>> AIContextResources;
            Ref<AIContextResource> InitialContext;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x848F06107A40C2EF, 0x48)]
        public class AIContextualSpeechEventMap : Resource
        {
            Array<Ref<AIContextualSpeechEventMapPair>> ContextualSpeechEventPairs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3BE52C878B3D211, 0x38)]
        public class AIContextualSpeechEventMapPair : Resource
        {
            String SignalName;
            Ref<ContextualSpeechEvent> ContextualSpeechEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6AF7D2F2F99388C, 0x50)]
        public class AIControlledEntityInterface : AIWeaponInterfaceGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18BF115111921DDD, 0x40)]
        public class AICorpseFoundMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x915E8392DE2FC4CD, 0x38)]
        public class AICorpseFoundMessageResource : AIDynamicDataMessageResource
        {
            String CorpseIdentifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA97F2B6EF0A3A475, 0x28)]
        public class AICorpseMessageHandlerResource : AICombatSituationMessageHandlerResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65707E640DB9B656, 0x48)]
        public class AICoverManager : CoreObject
        {
            Ref<AICoverNodeType> DefaultCoverNodeType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2998476C6193D85E, 0x48)]
        public class AICoverNodeTile : CoreObject
        {
            IVec2 Coordinate;
            Ref<AICoverNodeType> CoverNodeType;
            Ref<AIStaticCoverMap> Prone;
            Ref<AIStaticCoverMap> Crouched;
            Ref<AIStaticCoverMap> Standing;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5FCE7EC146906528, 0x40)]
        public class AICoverNodeType : CoreObject
        {
            String Name;
            Ref<AIStaticCoverMapSettings> Prone;
            Ref<AIStaticCoverMapSettings> Crouched;
            Ref<AIStaticCoverMapSettings> Standing;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEDE8296203C3827, 0x58)]
        public class AICoverPlaneComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEBEEF84CDE8933B, 0x50)]
        public class AICoverPlaneComponentResource : EntityComponentResource
        {
            Vec3 LocalBottomLeft;
            Vec3 LocalTopRight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3FB228AD22D010E, 0x68)]
        public class AIDangerArea : CoreObject
        {
            String Name;
            float ExpiryTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9AF21DDD09E4F26, 0xC0)]
        public class AIDangerAreaBox : AIDangerArea
        {
            WorldOrientedBox Box;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD74E9E455102F7FD, 0xA0)]
        public class AIDangerAreaCapsule : AIDangerArea
        {
            TaperedCapsule Capsule;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9EC221C8AC625D00, 0x88)]
        public class AIDangerAreaSphere : AIDangerArea
        {
            WorldBoundingSphere Sphere;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF299C799A9D8E45C, 0x70)]
        public class AIDarkBox : WorldNode
        {
            float LightIntensity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x149112F396C8A1F4, 0xA0)]
        public class AIDefendArea : ParentWorldNode
        {
            float IdleRadius;
            float AcquisitionIdleRadiusModifier;
            float CombatRadius;
            Array<Ref<AIPatrolPath>> PatrolPaths;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3DA07F69078D2462, 0xA0)]
        public class AIDefendAreaSet : ParentWorldNode
        {
            String Name;
            Array<Ref<AIDefendArea>> Nodes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89C500A0ECDD956A, 0x38)]
        public class AIDiamondGroupFormation : AIGroupFormation
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1551C0945760E58D, 0x40)]
        public class AIDiamondGroupFormationResource : AIGroupFormationResource
        {
            TagPropertyLink FormationCenterTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB09802B75F3306A, 0x120)]
        public class AIDirectableAgent : AIAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71C9578DEBAA1ADB, 0x68)]
        public class AIDynamicCoverManager : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA58CC1140CE77722, 0x28)]
        public class AIDynamicDataMessageResource : AIMessageResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD546CFBBE875CCE, 0x60)]
        public class AIDynamicObstacleCircleResource : AIDynamicObstacleResource
        {
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEB19E7D7AE502DF, 0xD0)]
        public class AIDynamicObstacleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B1CFDEAD479C5B5, 0x60)]
        public class AIDynamicObstacleComponentResource : EntityComponentResource
        {
            Ref<AIDynamicObstacleResource> ObstacleResource;
            bool SmoothAvoidance;
            float AvoidanceAngularAcceleration;
            Vec2 Scale;
            int PathSegments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEC2C53188D06291, 0xC8)]
        public class AIDynamicObstacleEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x270A882F55962F3D, 0x50)]
        public class AIDynamicObstacleEventResource : TimedEventResource
        {
            Ref<LocatorResource> TargetLocatorResource;
            Ref<AIDynamicObstacleCircleResource> ObstacleResource;
            Ref<AIFaction> ObstacleFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC309AF0FE3789EAB, 0x60)]
        public class AIDynamicObstacleRectangleResource : AIDynamicObstacleResource
        {
            Vec2Pack HalfExtent;
            Vec2 Center;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32359BD04593F17A, 0x60)]
        public class AIDynamicObstacleResource : Resource
        {
            int AvoidancePriority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C8C97D244DDCFF8, 0x30)]
        public class AIEventMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95B798AC42B4E45C, 0x38)]
        public class AIEventMessageResource : AIMessageResource
        {
            String EventId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6F317E8E6FA4B46, 0x38)]
        public class AIExportGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BD4914D71201801, 0x8)]
        public class AIExpressor
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x724113B1AC19B92D, 0x68)]
        public class AIExpressorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFB748A0ADAAFE41, 0x28)]
        public class AIExpressorComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA81742D3853236AD, 0x90)]
        public class AIExtraAttackNodesComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19A24F0697477026, 0x40)]
        public class AIExtraAttackNodesComponentResource : EntityComponentResource
        {
            EAIAttackType UserDataAIAttackType;
            Array<String> UserDataAttackNodeBones;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFBBDE5C4AADBDF9, 0x40)]
        public class AIEyeColorHintResource : AIHintSymbolResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8A4E0ECEECC2413, 0x90)]
        public class AIFaction : Resource
        {
            String ShortName;
            RGBAColor Color;
            Array<Ptr<AIFaction>> Enemies;
            Array<Ptr<AIFaction>> FriendlyFactionsExludedForLOFChecks;
            int ClaimGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x761B37EE1E5F8E02, 0x58)]
        public class AIFollowAnimationAimWeaponOperationInstance : AIWeaponOperationInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3393F19806D57915, 0x40)]
        public class AIFollowAnimationAimWeaponOperationResource : AIBurstBasedWeaponOperationResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23E1460EE9FAAD72, 0xA8)]
        public class AIFollowTerrainWeaponOperationInstance : AISniperWeaponOperationInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE78862AE568E0484, 0x68)]
        public class AIFollowTerrainWeaponOperationResource : AISniperWeaponOperationResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C2D70C283BA03CA, 0x30)]
        public class AIFormation : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34DB2B921522CB4D, 0x30)]
        public class AIFormationResource : Resource
        {
            String FormationHint;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5FE345983B70EF33, 0x50)]
        public class AIGameplayArea : NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x286E4489AEC50AAB, 0x28)]
        public class AIGenericEventMessageHandlerResource : AICombatSituationMessageHandlerResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14D16EDBA9CB7774, 0x5A0)]
        public class AIGroup : AIDirectableAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C8D10CB69B2CFF5, 0x30)]
        public class AIGroupCombatCoordinationRolesDistributorResource : AIGroupRolesDistributorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67F66350C8C51525, 0x38)]
        public class AIGroupFormation : AIFormation
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA26859A4BE29431, 0x38)]
        public class AIGroupFormationResource : AIFormationResource
        {
            Ref<AIMemberFormationResource> SubgroupFallBackFormationResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x989013778ADD4AE2, 0x70)]
        public class AIGroupGraphProgramSpawnCommand : SpawnCommand
        {
            Ref<GraphProgramResource> GraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9B12C721D99141D, 0x1550)]
        public class AIGroupHookHtnPlanner : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E614158948FA1CB, 0x30)]
        public class AIGroupHookHtnPlannerResource : Resource
        {
            Ref<AIHTNPlannerResource> PlannerResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27E6D5044E6AAB99, 0x30)]
        public class AIGroupImportanceBasedRolesDistributorResource : AIGroupRolesDistributorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE351ECCFD284337, 0x78)]
        public class AIGroupPath : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C05DC64171E9B69, 0xB0)]
        public class AIGroupResource : Resource
        {
            Ref<AIGroupHookHtnPlannerResource> HookResource;
            Array<Ref<AIGroupRoleDescriptorResource>> RoleDescriptors;
            Array<Ref<AIGroupResource>> InitialGroupHierarchy;
            Ref<AIGroupRolesDistributorResource> EssentialRolesDistributor;
            Ref<AIGroupRolesDistributorResource> OptionalRolesDistributor;
            Ref<AIGroupRolesValidatorResource> RolesValidator;
            Array<String> SupportedBehaviorIDs;
            String GroupID;
            Array<Ref<AIFormationResource>> Formations;
            bool SynchronizesThreatInfo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF3BB36174E9FE3A, 0x38)]
        public class AIGroupRole : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70A5CDDBA2A648EF, 0x68)]
        public class AIGroupRoleDescriptorResource : Resource
        {
            String ID;
            Array<Ref<TagProperty>> InclusionTags;
            Array<Ref<TagProperty>> ExclusionTags;
            int EssentialInstancesCount;
            int OptionalInstancesCount;
            Ref<AIGroupRoleDescriptorResource> InheritTagsFromParent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6C729BC5CF904FC, 0x30)]
        public class AIGroupRolesDistributorResource : Resource
        {
            String Identifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB97F05B34966C174, 0x38)]
        public class AIGroupRolesValidatorResource : Resource
        {
            Array<RoleValidationRule> Rules;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF51D63A8C3C1937, 0x18)]
        public class AIHTNPlannerDaemon : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x519114017B35F90E, 0x20)]
        public class AIHTNPlannerDaemonAgent : AIHTNPlannerDaemon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7F1B2634D8E367D, 0x40)]
        public class AIHTNPlannerDaemonAirMovement : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7AD566E7FB508376, 0x40)]
        public class AIHTNPlannerDaemonAirMovementGame : AIHTNPlannerDaemonAirMovement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B3BD8D10D1634D8, 0x30)]
        public class AIHTNPlannerDaemonAlertLevel : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BED4011F8B4BFA9, 0x28)]
        public class AIHTNPlannerDaemonAquatic : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCFD1030CD03E6B4, 0x40)]
        public class AIHTNPlannerDaemonAquaticResource : AIHTNPlannerDaemonResource
        {
            float DeepWaterMinDepth;
            Array<Vec2> WaterDepthMeasurePoints;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x540AAF758810BAE, 0x40)]
        public class AIHTNPlannerDaemonAttackPicker : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67399D3A09B90F82, 0x50)]
        public class AIHTNPlannerDaemonBodyState : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC46A08B6879671F3, 0x28)]
        public class AIHTNPlannerDaemonCargoCrabCrates : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37CD8CE666A992F3, 0x28)]
        public class AIHTNPlannerDaemonCollective : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1720BD8F07AED644, 0x38)]
        public class AIHTNPlannerDaemonCollectiveResource : AIHTNPlannerDaemonResource
        {
            Array<GroupImportanceEntry> GroupImportances;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE0D8A4A19F96127, 0x78)]
        public class AIHTNPlannerDaemonCombatHistory : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8722385043D53B1C, 0x38)]
        public class AIHTNPlannerDaemonCombatHistoryResource : AIHTNPlannerDaemonResource
        {
            float NearbyThreatsDistance;
            float ThresholdToUnreachable;
            float ThresholdToReachable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF186170D7F7E24D9, 0x40)]
        public class AIHTNPlannerDaemonCoreObjects : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60083161BB886DF3, 0x58)]
        public class AIHTNPlannerDaemonCoreObjectsResource : AIHTNPlannerDaemonResource
        {
            Array<Ref<Resource>> DirectlyLinkedResources;
            Array<UUIDRef<CoreObject>> CoreObjectUUIDRefs;
            Array<String> CoreObjectNames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFEAD8249D4B4C3A, 0x20)]
        public class AIHTNPlannerDaemonDebugDrawUtilities : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB727AF4E0670F974, 0x20)]
        public class AIHTNPlannerDaemonDefendArea : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4888293365100831, 0x28)]
        public class AIHTNPlannerDaemonDestructibles : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC70066841DBE9F65, 0x50)]
        public class AIHTNPlannerDaemonFindAttackLocation : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x219D627223E87A18, 0x28)]
        public class AIHTNPlannerDaemonFindCoverLocation : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D64A7A013F46638, 0x28)]
        public class AIHTNPlannerDaemonFriendlies : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A76966B097EB70F, 0x28)]
        public class AIHTNPlannerDaemonFriendliesGame : AIHTNPlannerDaemonFriendlies
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7ECD019C0F56E1CE, 0x30)]
        public class AIHTNPlannerDaemonFriendliesGameResource : AIHTNPlannerDaemonResource
        {
            BoolPropertyLink CanBeGreetedLink;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x700F143AC80DAAF8, 0x30)]
        public class AIHTNPlannerDaemonGameInfo : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF46E32F0066594AB, 0x30)]
        public class AIHTNPlannerDaemonGameplayArea : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACBBB0214FC3AB9B, 0x28)]
        public class AIHTNPlannerDaemonGroup : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36E1D37187D8BE5, 0xA0)]
        public class AIHTNPlannerDaemonGroupCombatCircle : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xADF24F1D81388F89, 0x28)]
        public class AIHTNPlannerDaemonGroupCombatSituation : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD44F97157D77EBB, 0x50)]
        public class AIHTNPlannerDaemonGroupCoordination : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8B02E9D0AF4D22C, 0x48)]
        public class AIHTNPlannerDaemonGroupCoordinationRequest : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3EB31B9245C42F9, 0x28)]
        public class AIHTNPlannerDaemonGroupHierarchy : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A93671B6847BF72, 0x28)]
        public class AIHTNPlannerDaemonGroupKnownThreats : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2FAAE5A8C45467C4, 0x28)]
        public class AIHTNPlannerDaemonGroupPositioning : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x92871A27445112D9, 0x28)]
        public class AIHTNPlannerDaemonGroupRoles : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB28D4269BA8232F, 0x30)]
        public class AIHTNPlannerDaemonGroupRolesDebug : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6A8FF9585F5C786, 0x38)]
        public class AIHTNPlannerDaemonGroupRolesDebugResource : AIHTNPlannerDaemonResource
        {
            Array<Ref<GroupRolesDebugResource>> RolesDebugInfo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5FDAC50E7A6F167D, 0x38)]
        public class AIHTNPlannerDaemonGroupState : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x384866B90629707F, 0x28)]
        public class AIHTNPlannerDaemonGroupUtils : AIHTNPlannerDaemonGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3F3EC03DF768FB0, 0x28)]
        public class AIHTNPlannerDaemonIndividual : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB89533FBDDD956B, 0x28)]
        public class AIHTNPlannerDaemonInventory : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D8E345DAFDA2413, 0x38)]
        public class AIHTNPlannerDaemonMarkerEntity : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3038BF7F27DF3DFC, 0x30)]
        public class AIHTNPlannerDaemonNavMesh : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96AB1B4DF89A468F, 0x28)]
        public class AIHTNPlannerDaemonOWL : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A96E5559F4BD3BF, 0x30)]
        public class AIHTNPlannerDaemonPathFinder : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC11E9C5C99B61E49, 0x38)]
        public class AIHTNPlannerDaemonPerchPoints : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB4BAC22D8DB3837, 0x20)]
        public class AIHTNPlannerDaemonPlayerInfo : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x927367C5599C4B01, 0x68)]
        public class AIHTNPlannerDaemonPositionPicker : AIHTNPlannerDaemonPositionPickerAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E9E4F2AF7A6E826, 0x38)]
        public class AIHTNPlannerDaemonPositionPickerAgent : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45A338755BAEF2E9, 0x78)]
        public class AIHTNPlannerDaemonPositionPickerGame : AIHTNPlannerDaemonPositionPicker
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF98180FF8A71BA28, 0x30)]
        public class AIHTNPlannerDaemonProbabilitySet : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD21D20E4780CDAA0, 0xA0)]
        public class AIHTNPlannerDaemonProperties : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF7183BAE030073F0, 0x48)]
        public class AIHTNPlannerDaemonPropertiesResource : AIHTNPlannerDaemonResource
        {
            Array<PropertyNameLinkMapEntry> PropertyNameIDMapping;
            Ref<PropertyContainerResource> ContainerResource;
            bool EntityFactsEnabled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD6CE47DBD7A28A4, 0x28)]
        public class AIHTNPlannerDaemonResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1161452F99D4E219, 0x38)]
        public class AIHTNPlannerDaemonResourceSet : Resource
        {
            Array<Ref<AIHTNPlannerDaemonResource>> DaemonResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9F90B1A0A361EBE, 0x28)]
        public class AIHTNPlannerDaemonRobotState : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x219887F2070E44C6, 0x20)]
        public class AIHTNPlannerDaemonRoute : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7E278237DF1C8A4, 0x20)]
        public class AIHTNPlannerDaemonRouteGame : AIHTNPlannerDaemonRoute
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58876FB08FF410CD, 0xA0)]
        public class AIHTNPlannerDaemonSmartObjects : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x745DCE934790B7C2, 0x28)]
        public class AIHTNPlannerDaemonSpecialMoves : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55D916133DBD7167, 0x40)]
        public class AIHTNPlannerDaemonTeamCoordination : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF71EDE4FD467730C, 0x28)]
        public class AIHTNPlannerDaemonTeamMember : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF8362E6905715B4, 0x20)]
        public class AIHTNPlannerDaemonTerrainInfo : AIHTNPlannerDaemonAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x170CD50C0F4835C8, 0x50)]
        public class AIHTNPlannerDaemonTerrainInfoIndividual : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFE81D57D53342C2, 0x28)]
        public class AIHTNPlannerDaemonThreatReappearanceLocation : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0C445539FE119E1, 0x28)]
        public class AIHTNPlannerDaemonUseLocations : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4AE38FCAAE1FCAB0, 0x30)]
        public class AIHTNPlannerDaemonVisibility : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53C5721A0B614AC1, 0x28)]
        public class AIHTNPlannerDaemonWildlife : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD721FC91C48FED2A, 0xA0)]
        public class AIHTNPlannerResource : ProgramResource
        {
            Array<String> DaemonNames;
            Array<Ref<AIHTNPlannerDaemonResource>> DaemonResources;
            Array<Ref<AIHTNPlannerDaemonResourceSet>> DaemonResourceSets;
            String DomainFileName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE4985F240A1537D, 0x10)]
        public class AIHTNPrimitiveTask : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15AC0D61934F92DF, 0x20)]
        public class AIHTNPrimitiveTaskAddBuddy : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E10DF4943CE8DA3, 0x18)]
        public class AIHTNPrimitiveTaskAgent : AIHTNPrimitiveTask
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA94A4A32E555C7DC, 0x88)]
        public class AIHTNPrimitiveTaskAirStrafe : AIHTNPrimitiveTaskFlySegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD3C0778A768FBE0, 0x20)]
        public class AIHTNPrimitiveTaskAlertFor : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA05193F2AD5C8CDB, 0x20)]
        public class AIHTNPrimitiveTaskApplyAntiStealthPatch : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF584C7DC04FB7EB, 0x48)]
        public class AIHTNPrimitiveTaskAssumeAIContext : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x190CCE3CA7C16C22, 0x28)]
        public class AIHTNPrimitiveTaskAssumeStance : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x430856CF575BB9EE, 0x18)]
        public class AIHTNPrimitiveTaskBeginPlan : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD96FB135AAD504E4, 0x18)]
        public class AIHTNPrimitiveTaskBeginSecondaryPlan : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F77823987BA10A7, 0x20)]
        public class AIHTNPrimitiveTaskBehaviorScopeIndividual : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC7A2413E3EBF8C7, 0x18)]
        public class AIHTNPrimitiveTaskBehaviorScopedForget : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x693B380224DFDF99, 0x18)]
        public class AIHTNPrimitiveTaskBehaviorScopedRemember : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x278FB55550D75588, 0x18)]
        public class AIHTNPrimitiveTaskBlackboardForget : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73164C5E7ED44622, 0x18)]
        public class AIHTNPrimitiveTaskBlackboardRemember : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40129E5FBD840EF5, 0x20)]
        public class AIHTNPrimitiveTaskBroadcast : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEEC8448E19BD885, 0x20)]
        public class AIHTNPrimitiveTaskClaimPosition : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9EFA02F0D93D83A2, 0x20)]
        public class AIHTNPrimitiveTaskClearAreaRestrictions : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEED6B0023C359DB2, 0x18)]
        public class AIHTNPrimitiveTaskClearOrder : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34D7944E27FCE22E, 0x20)]
        public class AIHTNPrimitiveTaskClearReservation : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24AA5C7DD0173FC7, 0x38)]
        public class AIHTNPrimitiveTaskCloseCombat : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x954F9DE75305CE4E, 0x20)]
        public class AIHTNPrimitiveTaskConfirmAllThreatsLost : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62A6349D0B7FD32F, 0x20)]
        public class AIHTNPrimitiveTaskConfirmThreatLost : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD05B12049EC5301E, 0x18)]
        public class AIHTNPrimitiveTaskConvertRoleType : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1889C68FC466D26B, 0x18)]
        public class AIHTNPrimitiveTaskCreateSubgroup : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE00E592D873932A6, 0x18)]
        public class AIHTNPrimitiveTaskCreateSubgroupWithMembers : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE616185FD6445DE, 0x20)]
        public class AIHTNPrimitiveTaskDelayDeathCamFade : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC21D54032D32B69, 0x20)]
        public class AIHTNPrimitiveTaskDisableStagger : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37A3AC45F68ED006, 0x48)]
        public class AIHTNPrimitiveTaskDismountObject : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33CD749BCF9F2FEF, 0x88)]
        public class AIHTNPrimitiveTaskDiveRun : AIHTNPrimitiveTaskFlyLine
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3035517DF66426C8, 0x38)]
        public class AIHTNPrimitiveTaskDoAnimationAction : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5429DB15A13DAA4D, 0x28)]
        public class AIHTNPrimitiveTaskDoCustomAction : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1FC1B273A4D77B0, 0x90)]
        public class AIHTNPrimitiveTaskDodgeGame : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10DE06D4C13E2D20, 0x18)]
        public class AIHTNPrimitiveTaskDraw : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54D5344DDFFDBE9C, 0x28)]
        public class AIHTNPrimitiveTaskEmergencyTeleportAbility : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A1DA9E74989CC39, 0x18)]
        public class AIHTNPrimitiveTaskEndCommandSequence : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DE58F3CC4FC06B8, 0x20)]
        public class AIHTNPrimitiveTaskEndCoordinatedBehavior : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x387A465345417BAE, 0x18)]
        public class AIHTNPrimitiveTaskEndPlan : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C07697CD8CD80AB, 0x18)]
        public class AIHTNPrimitiveTaskEndSecondaryPlan : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2AC4797FEC5E110, 0x20)]
        public class AIHTNPrimitiveTaskEntityAction : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7533131A0D460DA, 0x18)]
        public class AIHTNPrimitiveTaskError : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD888714DBD9E834, 0x18)]
        public class AIHTNPrimitiveTaskErrorUnsupportedOrder : AIHTNPrimitiveTaskError
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x93774A2D3711C967, 0x18)]
        public class AIHTNPrimitiveTaskExpandHTNDecomposition : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBD9D3F9D4EEB6A5, 0x30)]
        public class AIHTNPrimitiveTaskFaceTowards : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA553C428784450D, 0x30)]
        public class AIHTNPrimitiveTaskFaceTowardsAndSelectWeapon : AIHTNPrimitiveTaskFaceTowards
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x381B3E56681F68CF, 0x20)]
        public class AIHTNPrimitiveTaskFail : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE65C25CEAFE74C6F, 0x30)]
        public class AIHTNPrimitiveTaskFireBurstAtDestructibilityPart : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEE6EBF40B867C23, 0x48)]
        public class AIHTNPrimitiveTaskFireBurstAtEntities : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32CE11AC5C6A02, 0x28)]
        public class AIHTNPrimitiveTaskFireBurstAtEntity : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x140FEE283D847049, 0x60)]
        public class AIHTNPrimitiveTaskFireBurstAtPosition : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DBD1D5F2A849F1D, 0x28)]
        public class AIHTNPrimitiveTaskFireBurstBlind : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5474512F346A21CB, 0x60)]
        public class AIHTNPrimitiveTaskFireBurstInDirection : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF705CF9B4F312F25, 0x70)]
        public class AIHTNPrimitiveTaskFlyLine : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7166E560AB213083, 0x70)]
        public class AIHTNPrimitiveTaskFlySegment : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x12BE4BEB7D02749A, 0x18)]
        public class AIHTNPrimitiveTaskForget : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF5C891C2DADCB9B, 0x38)]
        public class AIHTNPrimitiveTaskGesture : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B6E2C6EA909DC02, 0xB0)]
        public class AIHTNPrimitiveTaskGlanceAt : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4AA690D135A9F7F, 0xB8)]
        public class AIHTNPrimitiveTaskGlanceAtEntity : AIHTNPrimitiveTaskGlanceAt
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA98F07E3B0D1E80C, 0xB8)]
        public class AIHTNPrimitiveTaskGlanceAtLocator : AIHTNPrimitiveTaskGlanceAt
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B20E59D34DD5FC0, 0xC8)]
        public class AIHTNPrimitiveTaskGlanceAtPosition : AIHTNPrimitiveTaskGlanceAt
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43FFFCBCAA867601, 0x18)]
        public class AIHTNPrimitiveTaskGroup : AIHTNPrimitiveTask
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC4B619D739B4EC7, 0x18)]
        public class AIHTNPrimitiveTaskGroupAssignToGroup : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8BDCD83A6DB4A96, 0x18)]
        public class AIHTNPrimitiveTaskGroupAssignToRole : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x81CDB5F254992E58, 0x18)]
        public class AIHTNPrimitiveTaskGroupMergeToGroup : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D8343BEB1147CEF, 0x18)]
        public class AIHTNPrimitiveTaskGroupMergeToSubgroup : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA312FDD8DB1C7E99, 0x18)]
        public class AIHTNPrimitiveTaskGroupMessageToAllMembers : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF98C9DBED9C488F1, 0x18)]
        public class AIHTNPrimitiveTaskGroupRequestIndividualOwnership : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10241A1AF2B034A7, 0x18)]
        public class AIHTNPrimitiveTaskGroupSetState : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3904C1BB4F255D87, 0x18)]
        public class AIHTNPrimitiveTaskGroupTerminate : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67FE4C0E75352B40, 0x18)]
        public class AIHTNPrimitiveTaskGroupUpdateScriptedIndividuals : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA55FB9EA24DA478B, 0x20)]
        public class AIHTNPrimitiveTaskHoldEntityAction : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D6D39664BF86665, 0x70)]
        public class AIHTNPrimitiveTaskHoverSegment : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66120E7F55AD7A0B, 0x20)]
        public class AIHTNPrimitiveTaskImmediateReloadWeapon : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72E3371A48F2FF59, 0x20)]
        public class AIHTNPrimitiveTaskIndividual : AIHTNPrimitiveTask
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4A44F51B9D9D936, 0x20)]
        public class AIHTNPrimitiveTaskIndividualFireWeapon : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45D386E8874BFED9, 0xA8)]
        public class AIHTNPrimitiveTaskLand : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2E3FDF6E77E9BE5, 0x230)]
        public class AIHTNPrimitiveTaskLandAnimalFlee : AIHTNPrimitiveTaskLandAnimalMovement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCCE24B919B268A, 0x1B0)]
        public class AIHTNPrimitiveTaskLandAnimalMovement : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66A0DB1038419512, 0x1E0)]
        public class AIHTNPrimitiveTaskLandAnimalWander : AIHTNPrimitiveTaskLandAnimalMovement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF3776991A8B0D4B, 0x18)]
        public class AIHTNPrimitiveTaskLog : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71D46575AADADA9, 0x38)]
        public class AIHTNPrimitiveTaskLookAlongHelperNode : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFAC8B69E02D8ADA, 0x28)]
        public class AIHTNPrimitiveTaskLookAlongPath : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F38714F6288D6B7, 0x28)]
        public class AIHTNPrimitiveTaskLowCrouchGame : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20908901D6A553D3, 0x18)]
        public class AIHTNPrimitiveTaskMessage : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7356E5A4393ABE3A, 0x60)]
        public class AIHTNPrimitiveTaskMountObject : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40D4CB591F19EDD7, 0x70)]
        public class AIHTNPrimitiveTaskMove : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9AD753734B426D8F, 0x20)]
        public class AIHTNPrimitiveTaskNotifyRevivingPlayer : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F03AFA421D9A52F, 0x18)]
        public class AIHTNPrimitiveTaskOnAbort : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D37DAF218FA07AA, 0x18)]
        public class AIHTNPrimitiveTaskOnAbortOrFail : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB21CC7E6A655231, 0x18)]
        public class AIHTNPrimitiveTaskOnFail : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x582FB3FADD58AC50, 0x18)]
        public class AIHTNPrimitiveTaskPauseGame : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5114051F4939D6, 0x58)]
        public class AIHTNPrimitiveTaskPerch : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27547C639CB27112, 0x80)]
        public class AIHTNPrimitiveTaskPlaceEntity : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC96F1611D22ED64, 0x28)]
        public class AIHTNPrimitiveTaskPlaceHolder : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA3E2AFA9AF15EF55, 0x18)]
        public class AIHTNPrimitiveTaskPlanScopedForget : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EDBA3FE01F4784F, 0x18)]
        public class AIHTNPrimitiveTaskPlanScopedRemember : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BEBD96452643C61, 0x60)]
        public class AIHTNPrimitiveTaskPlayMonitoredAnimation : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E264EFC770F58BB, 0xD8)]
        public class AIHTNPrimitiveTaskPlayMotionScatterBlendAnimation : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7CCE503F789A286, 0x110)]
        public class AIHTNPrimitiveTaskPlayWarpedAnimation : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B875479FBF2CBAF, 0x20)]
        public class AIHTNPrimitiveTaskRaiseThreatLevel : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74EFDEF8EE420D5C, 0x20)]
        public class AIHTNPrimitiveTaskRegisterAttackExecuted : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA83E15420AEA1EF9, 0x20)]
        public class AIHTNPrimitiveTaskReloadWeapon : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6218E0EBFCFC34EC, 0x18)]
        public class AIHTNPrimitiveTaskRemember : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1774C8CE119C2D9A, 0x18)]
        public class AIHTNPrimitiveTaskRememberOnFail : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5AF57C15AB6A8D8B, 0x20)]
        public class AIHTNPrimitiveTaskRemoveBuddy : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x120544A4CCAB9384, 0x20)]
        public class AIHTNPrimitiveTaskReportThreat : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73E3D50AAEADA03F, 0x20)]
        public class AIHTNPrimitiveTaskRequestCoordinatedBehavior : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99BE202A06D1D49C, 0x30)]
        public class AIHTNPrimitiveTaskRequestHealing : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA732806627396069, 0x20)]
        public class AIHTNPrimitiveTaskRequestResponseToSignal : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63D9E20C27623BD7, 0x20)]
        public class AIHTNPrimitiveTaskRequestResponseToSpeechEvent : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65E6E9E4B8A346D5, 0x20)]
        public class AIHTNPrimitiveTaskReserveObject : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67088B53CFDB92F6, 0x20)]
        public class AIHTNPrimitiveTaskSatisfyDesire : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x540310BFFCDC0F, 0xD0)]
        public class AIHTNPrimitiveTaskScanPositionList : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1EA3459765250F4, 0x38)]
        public class AIHTNPrimitiveTaskScavenge : AIHTNPrimitiveTaskCloseCombat
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA84B30ED42D3BF2C, 0x20)]
        public class AIHTNPrimitiveTaskSelectTarget : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA64058FEACA8E60A, 0x20)]
        public class AIHTNPrimitiveTaskSelectWeapon : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB73EF92DB67F24D4, 0x20)]
        public class AIHTNPrimitiveTaskSendAttackMessage : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65D927398679E742, 0x20)]
        public class AIHTNPrimitiveTaskSendContextualSpeechMessage : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FF12DC010980908, 0x18)]
        public class AIHTNPrimitiveTaskSendEventMessage : AIHTNPrimitiveTaskSendSceneMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0218372C3C5F83E, 0x18)]
        public class AIHTNPrimitiveTaskSendOrderArrivedMessage : AIHTNPrimitiveTaskSendSceneMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5624CA9B7AEF9E97, 0x18)]
        public class AIHTNPrimitiveTaskSendOrderCompletedMessage : AIHTNPrimitiveTaskSendSceneMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC6B9F5E647B8A89, 0x18)]
        public class AIHTNPrimitiveTaskSendOrderFailedMessage : AIHTNPrimitiveTaskSendSceneMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE23B6DA451DEFD10, 0x20)]
        public class AIHTNPrimitiveTaskSendPatrolPathMessage : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x186638C2D8710BC2, 0x18)]
        public class AIHTNPrimitiveTaskSendSceneMessage : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53C6B47DCC7A2257, 0x18)]
        public class AIHTNPrimitiveTaskSendScriptMessageGame : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B8AD3663799CA63, 0x18)]
        public class AIHTNPrimitiveTaskSendSequenceMessage : AIHTNPrimitiveTaskSendSceneMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x474B8933B2A9368E, 0x20)]
        public class AIHTNPrimitiveTaskSetAreaFilter : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A94AA06F880A288, 0x20)]
        public class AIHTNPrimitiveTaskSetAreaRestrictions : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0450E0F83CED4BF, 0x20)]
        public class AIHTNPrimitiveTaskSetCoordinatedBehaviorExpiryTime : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE34EAE0BBF28F0D0, 0x20)]
        public class AIHTNPrimitiveTaskSetDeathCamTarget : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B8AF7C41D38894F, 0x20)]
        public class AIHTNPrimitiveTaskSetDesire : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8AA92801290F3EC, 0x20)]
        public class AIHTNPrimitiveTaskSetEngagementMode : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45A10E00973657F5, 0x18)]
        public class AIHTNPrimitiveTaskSetGroupFormation : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C3BD41C891A7186, 0x18)]
        public class AIHTNPrimitiveTaskSetGroupPath : AIHTNPrimitiveTaskGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90FE46E0B57CD75D, 0x20)]
        public class AIHTNPrimitiveTaskSetLockUser : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE77A2355357FC6CF, 0x20)]
        public class AIHTNPrimitiveTaskSetMarkerEntity : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1162F35D51E51D94, 0x20)]
        public class AIHTNPrimitiveTaskSetPerception : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C4D659AF5C96B91, 0x30)]
        public class AIHTNPrimitiveTaskSignal : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1B937B9E9FD4197, 0x18)]
        public class AIHTNPrimitiveTaskStartCommandSequence : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD3707C9D4FDB14C, 0xA8)]
        public class AIHTNPrimitiveTaskStepAside : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBBC0EFEA4F7A01D4, 0x20)]
        public class AIHTNPrimitiveTaskStopDelayingDeath : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D1C70C0F7E5EACA, 0x20)]
        public class AIHTNPrimitiveTaskStowWeapon : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA3AE23475E7C8A7, 0xA0)]
        public class AIHTNPrimitiveTaskSuppressPositionList : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x449EE17CF945F8EF, 0x78)]
        public class AIHTNPrimitiveTaskSwimFlee : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71C03EEDCEFAEA, 0x70)]
        public class AIHTNPrimitiveTaskSwimWander : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA46279C4A497929B, 0x20)]
        public class AIHTNPrimitiveTaskTakeOff : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE52DD334D7A324AC, 0x40)]
        public class AIHTNPrimitiveTaskTarget : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20A9615C90174165, 0x48)]
        public class AIHTNPrimitiveTaskTargetEntity : AIHTNPrimitiveTaskTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x413EB86AC63FE3B1, 0x48)]
        public class AIHTNPrimitiveTaskTargetHeading : AIHTNPrimitiveTaskTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4BC11AEC19D683A, 0x48)]
        public class AIHTNPrimitiveTaskTargetLocalPitch : AIHTNPrimitiveTaskTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43AA423954D18221, 0x48)]
        public class AIHTNPrimitiveTaskTargetLocator : AIHTNPrimitiveTaskTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A8B7FDFB0C474DD, 0x58)]
        public class AIHTNPrimitiveTaskTargetPoint : AIHTNPrimitiveTaskTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF34DB449071B8E3B, 0x48)]
        public class AIHTNPrimitiveTaskTargetThreat : AIHTNPrimitiveTaskTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51ED6F6E1CA82F3A, 0x20)]
        public class AIHTNPrimitiveTaskTeleport : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BA114D822F45C80, 0xA0)]
        public class AIHTNPrimitiveTaskThrowGrenade : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37A4A706AF2C0A39, 0x18)]
        public class AIHTNPrimitiveTaskUpdateFactMessage : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33097C4166F8C9E, 0x48)]
        public class AIHTNPrimitiveTaskUseAttachableObject : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80C66C956706FA23, 0x30)]
        public class AIHTNPrimitiveTaskUseCover : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36EF519252CF5BA8, 0x28)]
        public class AIHTNPrimitiveTaskUseInventoryItem : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A5A4E4F500561F9, 0x30)]
        public class AIHTNPrimitiveTaskUseItemOnEntity : AIHTNPrimitiveTaskIndividualFireWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3451C1E5BDA358B9, 0xB0)]
        public class AIHTNPrimitiveTaskUseJumpLink : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x621D6673BB121D2E, 0x48)]
        public class AIHTNPrimitiveTaskUseObject : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA569B1A5CD837CA6, 0x48)]
        public class AIHTNPrimitiveTaskUseObjects : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E97D2C3DA246A9C, 0x60)]
        public class AIHTNPrimitiveTaskWait : AIHTNPrimitiveTaskAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7426ECC48AE3636, 0x90)]
        public class AIHTNPrimitiveTaskWalkSegment : AIHTNPrimitiveTaskMove
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB951419E93664B52, 0xA8)]
        public class AIHTNPrimitiveTaskWalkToCloseCombat : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7F7246CAE3E97AD4, 0x98)]
        public class AIHTNPrimitiveTaskWalkToPositionSegment : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7876F7737A8620BD, 0xB0)]
        public class AIHTNPrimitiveTaskWalkToUseLocationSegment : AIHTNPrimitiveTaskWalkSegment
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB2BAE469A2CD17F, 0x30)]
        public class AIHapticSensor : AISensor
        {
            float PositionDetectDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87C2F409348BD0FC, 0x90)]
        public class AIHapticStimulus : AIStimulus
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCCD28A0E452B067D, 0x58)]
        public class AIHapticStimulusResource : AIStimulusResource
        {
            bool AffectsSuppression;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7485CE27D36BC703, 0x40)]
        public class AIHintSymbolResource : Resource
        {
            String Hint;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B96F27763844AFF, 0x38)]
        public class AIHtnFactMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBBB85C7F98FC8EF6, 0x20)]
        public class AIHtnPlannerDaemonAgentCommon : AIHTNPlannerDaemon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x143DEA05C21D9A09, 0x28)]
        public class AIHtnPlannerDaemonBehaviorGroup : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC97024625C0B9883, 0x28)]
        public class AIHtnPlannerDaemonIndividualCallTerms : AIHTNPlannerDaemonIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D4EF0E7F52E26E6, 0x18)]
        public class AIHtnPlannerDaemonUtilityCallTerms : AIHTNPlannerDaemon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3806A187572F98B8, 0x18)]
        public class AIHtnPlannerDaemonUtilityCallTermsGame : AIHTNPlannerDaemon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54E4DF73851745FA, 0x20)]
        public class AIHtnPrimitiveTaskForceAlertLevelNoThreats : AIHTNPrimitiveTaskIndividual
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDCD001F352D64B2, 0x40)]
        public class AIHtnUpdateFactMessage : AIHtnFactMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x561E70C631931BBE, 0x58)]
        public class AIHumanoidSkillContext : AISkillContext
        {
            bool MustSlideDownLadders;
            String UpperBodyPosture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9255325A0AB90335, 0x38B0)]
        public class AIIndividual : AIDirectableAgent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14E5F8A8157FE405, 0x18A0)]
        public class AIIndividualHookHtnPlanner : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88A9183EB45040C0, 0x30)]
        public class AIIndividualHookHtnPlannerResource : Resource
        {
            Ref<AIHTNPlannerResource> PlannerResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FEEB5337B0DD45B, 0xD0)]
        public class AIIndividualResource : Resource
        {
            Ref<AICombatSituationResource> CombatSituationResource;
            Ref<AIPerceptionResource> Perception;
            Ref<AISkillManagerResource> Skills;
            Ref<AIContextResourceSet> ResourceSet;
            Array<Ref<AIWeaponPreference>> Preferences;
            Ref<AIIndividualHookHtnPlannerResource> HookResource;
            bool CommunicateInitialThreatSpotted;
            float MaxCacheTimeForLoaResult;
            float MaxCacheTimeForStanceResult;
            float MaxCacheTimeForLocationResult;
            bool ReceivesThreatInformation;
            float ReportSituationDistance;
            float ReportRoughSituationDistance;
            bool ReportObservedExactThreats;
            float ReportObservedExactThreatsDelay;
            float ReportEnemySpottedDelay;
            Ref<AIStimulusResource> CommunicateThreatInformationStimulusResource;
            Ref<AIStimulusResource> CommunicateDeathStimulusResource;
            float LowAmmo;
            float EngageDistance;
            float AlignBaseDelay;
            float AlignBaseAngle;
            bool ModifiesSignals;
            Array<Ref<AIAttackResource>> AttackResources;
            Ref<AIContextualSpeechEventMap> ContextualSpeechEventMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x682EF184665C5881, 0x50)]
        public class AIInventoryAmmoEjectorInterface : AIInventoryWeaponInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x649B244E347B4F35, 0x48)]
        public class AIInventoryBadgeAbilityInterface : AIInventoryWeaponInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E5634AE28C283A8, 0x50)]
        public class AIInventoryThrowableInterface : AIInventoryWeaponInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38DCAF48C39DE142, 0x48)]
        public class AIInventoryWeaponInterface : AIWeaponInterfaceGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDD0C0A69205E09D, 0x60)]
        public class AIJitterModifier : AIScanModifier
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C0BEF5BB2E3BC4C, 0xA0)]
        public class AIJumpLink : ParentWorldNode
        {
            Ref<WorldNode> Start;
            Ref<WorldNode> End;
            bool Bidirectional;
            Ref<AIPathObjectCategory> Category;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45E4672E3421C23B, 0x58)]
        public class AIJumpLinkObstacle : NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BDD1101041C155D, 0x58)]
        public class AIJumpsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC462D28DC7F295F4, 0x38)]
        public class AIJumpsComponentResource : EntityComponentResource
        {
            Array<Ref<PlayWarpedAnimation>> Animations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6694E5C426C0635, 0xB8)]
        public class AILineWeaponOperationInstance : AIWeaponOperationInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32AE716DBE57D5D, 0x70)]
        public class AILineWeaponOperationResource : AIBurstBasedWeaponOperationResource
        {
            Array<Vec3> AimPoints;
            Ref<CurveResource> TrackingSpring;
            Ref<CurveResource> VelocityAlongLine;
            float StopTrackingAtFraction;
            float MinimumDistanceFromShooter;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11BB7C4FB8A696A4, 0x40)]
        public class AILureCallMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFE2808FD652D7A, 0x39D20)]
        public class AIManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD283BA7C59E533F6, 0x3A630)]
        public class AIManagerGame : AIManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3BEF53E70BFE3FE7, 0x68)]
        public class AIManagerResource : Resource
        {
            Ref<AIGroupResource> CollectiveResource;
            Ref<AITagsMappingResource> AITagsMappingResource;
            Ref<AIHapticStimulusResource> CollisionHapticStimulus;
            Ref<AIAuralStimulusResource> WhizzByAuralStimulus;
            Array<Ref<AIFaction>> Factions;
            Ref<AIFaction> DefaultFaction;
            Ref<AIFaction> NeutralFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB56F56ECB18E26EE, 0x90)]
        public class AIManagerResourceGame : AIManagerResource
        {
            Array<Ref<CurveResource>> AllowedMeleeAttackOverlap;
            Array<Ref<AISupportAttackTicketThresholds>> SupportAttackTicketThresholds;
            TagPropertyLink RobotTagProperty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86D02689FFE844D3, 0x90)]
        public class AIMarker : WorldNode
        {
            String Name;
            float Radius;
            bool ZLocked;
            Ref<PropertyContainerResource> PropertyContainerResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94E5E3CBBF3341CC, 0x68)]
        public class AIMarkerLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16D2546D2E36BDD1, 0x80)]
        public class AIMarkerLocatorResource : LocatorResource
        {
            Ref<AIMarker> AIMarker;
            Mat44 LocalMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC64FD6330FB7CA3E, 0x68)]
        public class AIMeleeWeaponAttackTypeInterface : AIInventoryWeaponInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A771CC90FFD908E, 0x138)]
        public class AIMeleeWeaponComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3669F94AB042EA3, 0x40)]
        public class AIMeleeWeaponComponentResource : EntityComponentResource
        {
            Array<Ref<MeleeWeaponAttackTypeResource>> AIAttacks;
            float HitNoDamageStaggerImpactSeverity;
            float HitWorldFloorAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x193C9E1211DF79CB, 0x50)]
        public class AIMeleeWeaponInterface : AIControlledEntityInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C05E801D4DDBA7, 0x48)]
        public class AIMemberFormation : AIFormation
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E1978D6FBC5D911, 0x30)]
        public class AIMemberFormationResource : AIFormationResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA61F11EE83C89D38, 0x28)]
        public class AIMessage : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC227E08CE0017585, 0x28)]
        public class AIMessageResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7AE86C96EDD846AC, 0x8)]
        public class AIMountableObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x400A3ABA9D657002, 0x520)]
        public class AIMovementAttack : AIAttack
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77086500A70C3E1B, 0x78)]
        public class AIMovementAttackResource : AIAttackResource
        {
            FRange Range;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F38FB294379D400, 0x8)]
        public class AIMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x893870EC3450BDEA, 0x520)]
        public class AIMoverComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53C6096A9BAFACC8, 0x90)]
        public class AIMoverComponentPostureSettings : AIMoverPostureSettings
        {
            bool HasDirectionalStarts;
            bool HasDirectionalStops;
            bool BodyHeadingCanDifferFromMoveHeading;
            bool PrefersToWalkForward;
            bool CanMoveInEveryHeadingDirection;
            bool HasTwoFeetStopping;
            float MoveAngleModifier;
            float MaxMoveAngle;
            float MaxMoveHeading;
            FRange CycleSpeedRange;
            int AnimationHeadingStepsAhead;
            FRange QuickTurnEntrySpeedRange;
            float QuickTurnEntrySpeedRangeModifier;
            float QuickTurnAngleMaxOffset;
            AnimationStateID StartStateID;
            AnimationStateID CycleStateID;
            AnimationStateID StopStateID;
            AnimationStateID TurnStateID;
            AnimationStateID QuickTurnStateID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD92E5F17C4AF4D29, 0x100)]
        public class AIMoverComponentResource : EntityComponentResource
        {
            bool PlaceOnGround;
            bool UseContactNormal;
            float MaxTiltAngle;
            float MaxSpeed;
            float MaxTurnSpeed;
            float TurnAcceleration;
            bool MoveAngleVariableAsRadians_HACK;
            Array<Ref<AIMoverComponentPostureSettings>> Postures;
            Ref<SkinnedModelResource> ModelResource;
            String ActionMove;
            String ActionTurn;
            String ActionJump;
            String ActionStop;
            String ActionQuickTurn;
            String VariableSpeed;
            String VariableDesiredPosture;
            String VariableCurrentPosture;
            String VariableMoveHeading;
            String VariableMoveAngle;
            String VariableStartHeading;
            String VariableTurnAngle;
            String VariableQuickTurnAngle;
            AnimationTagID StartTagID;
            AnimationTagID StopTagID;
            AnimationTagID CycleTagID;
            AnimationTagID TurnTagID;
            AnimationTagID QuickTurnTagID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D57A32E7DCDBDD0, 0x8)]
        public class AIMoverGame : AIMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0BE9459EB27D0B5, 0x48)]
        public class AIMoverPostureSettings : Resource
        {
            String ID;
            String AnimationTag;
            AnimationTagID AnimationTagID;
            bool NeedStartWhenBeingSwitchedTo;
            bool NeedStopWhenBeingSwitchedFrom;
            bool DoesNotPlanAheadWhenAboutToStop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x710CFA972CA1E3CC, 0xB0)]
        public class AINavMeshComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFCB8EA332C1DF13, 0x40)]
        public class AINavMeshComponentResource : EntityComponentResource
        {
            float Radius;
            Ref<NavMeshBuilderSettings> Settings;
            bool UseNavmeshForSpawning;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2FA01ABCF1DDD93B, 0x30)]
        public class AINoiseModifier : AIScanModifier
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D512B7A9DD580CC, 0x50)]
        public class AIOWLSkillContext : AISkillContext
        {
            EOWLMode Mode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB014F124EDEB821D, 0x8)]
        public class AIObserver
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x228D5B2E4643B51E, 0x68)]
        public class AIObserverComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27F7A28FCA26CCB1, 0x28)]
        public class AIObserverComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45F07D41BA2B09E2, 0x8)]
        public class AIObserverGame : AIObserver
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD5E193B8A0FF049, 0xE0)]
        public class AIObstacle : NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F24CCFAA9F1DAD7, 0x28)]
        public class AIPathObjectCategory : CoreObject
        {
            int Cost;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD68576D6B38E39ED, 0x68)]
        public class AIPathObjectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4A46B1FEF1CC639, 0x30)]
        public class AIPathObjectComponentResource : EntityComponentResource
        {
            Ref<AIPathObjectCategory> Category;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35471F43D700D583, 0x60)]
        public class AIPathObjectObstacle : NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2149CB7299CE866, 0xC0)]
        public class AIPatrolPath : Route
        {
            EAIPatrolPathType Type;
            Ref<AIContextHintResource> MovementContext;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94B9F25E246B209D, 0x70)]
        public class AIPatrolPathLookat : WorldNode
        {
            float DelayTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BD86656CCE22B77, 0xC0)]
        public class AIPatrolPathNode : RouteNode
        {
            Array<Ref<AIPatrolPathLookat>> LookAtTargets;
            Array<AIPatrolPathUseObject> UseObjects;
            float ObjectUseChance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A22296429FED71, 0x10)]
        public class AIPatrolPathUseObject
        {
            Ref<EntityPlaceHolder> UseObject;
            float UseTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2271BF346E72A703, 0x70)]
        public class AIPerception : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7F0161639E813FC, 0x48)]
        public class AIPerceptionResource : Resource
        {
            bool IgnoreProjectiles;
            float PerceptionFalloffSpeed;
            Array<Ref<AISensorSetResource>> SensorSets;
            bool DisableRadarSensorsOnInitialize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC81193D93BBA90AA, 0xA0)]
        public class AIPerchMarker : AIMarker
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9916EC968801775, 0x68)]
        public class AIPerchingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2048A2D9CC45D11, 0x38)]
        public class AIPerchingComponentResource : EntityComponentResource
        {
            String PerchedAnimationAction;
            String CanPlayerPerchedStaggerAnimationAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA3035D9A2530BD4, 0x58)]
        public class AIPlayerPerformanceFeedbackResource : Resource
        {
            float BuddyRange;
            float SpreeTimeOut;
            int SmallSpreeSize;
            int BigSpreeSize;
            float BurstTimeOut;
            float BurstVeryGoodScore;
            float BurstGoodScore;
            float BurstOkScore;
            int FriendlyFireMax;
            float FriendlyFireCounterTimeout;
            float FriendlyFireResponseTimeout;
            float PlayerHealthDrop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFE41CBA594D1E72, 0x30)]
        public class AIPositionList : CoreObject
        {
            Array<WorldPosition> Positions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74E962685ECE49BC, 0x50)]
        public class AIProbabilityDataSetResource : Resource
        {
            Ref<FloatProperty> Probability;
            Ref<FloatProperty> DropOffRate;
            Ref<FloatProperty> ResetTime;
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FBA9AD95A0BB958, 0x68)]
        public class AIPropertyFactComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED86AD6C11707C21, 0x40)]
        public class AIPropertyFactComponentResource : EntityComponentResource
        {
            Array<PropertyNameLinkMapEntry> PropertyNameIDMapping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE744E9569299A212, 0x30)]
        public class AIProximitySensor : AISensor
        {
            float ProximityDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4043C6A50E2DAF8B, 0x30)]
        public class AIRadarSensor : AISensor
        {
            float RadarDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE838B9CF1D4B4D79, 0x40)]
        public class AIRememberFactResource : AIHintSymbolResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8542638C3326BDDF, 0x8)]
        public class AIReservedObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6EB891B1ABC3BE3, 0xF0)]
        public class AIRoad : Road
        {
            EAIRoadUsableBy UsableBy;
            Ref<ConditionResource> Condition;
            bool ShowPathInWorldMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D1D4DDF32594A04, 0x88)]
        public class AIRoadManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8D1CE687A3F56F2, 0x40)]
        public class AIRoadManagerResource : Resource
        {
            Ref<ObjectCollection> RoadsObjectCollection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5CCE760BDEBFE14, 0x48)]
        public class AIRobotMountedSkillContext : AISkillContext
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBAE237BA2DFEFF09, 0x48)]
        public class AIRobotSkillContext : AISkillContext
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FFA33884772515, 0x58)]
        public class AIScanContextResource : Resource
        {
            Ref<AIScanMotionResource> AimMotionResource;
            Ref<AIScanMotionResource> LookMotionResource;
            Ref<AIScanExpressionParams> ScanExpressionParams;
            float AimHeadingOffset;
            float AimPitchOffset;
            FRange Heading;
            FRange Pitch;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC9E3DD547F3DBA2, 0x30)]
        public class AIScanExpressionParams : Resource
        {
            float RandomWeight;
            float LookatWeight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FB3F92971745086, 0x78)]
        public class AIScanJitterResource : AIScanMotionResource
        {
            float WaitTime;
            float Speed;
            float RandomRectStartingWidth;
            float RandomRectStartingHeight;
            float RandomRectEndingWidth;
            float RandomRectEndingHeight;
            float TimeFromStartToEndRect;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B6C59DC7788A014, 0x20)]
        public class AIScanModifier : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF689BB01C42B9420, 0x20)]
        public class AIScanMotion
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FAE1D17F9AE165C, 0x58)]
        public class AIScanMotionResource : Resource
        {
            float SmoothFactor;
            ResponseCurve SpeedForAngle;
            FRange ComfortRange;
            FRange ComfortRangeInMovement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3DAE4C3FC9D676D, 0x90)]
        public class AIScanNoiseResource : AIScanMotionResource
        {
            Vec2 NoiseScale;
            Vec2 NoiseClamp;
            Vec2 NoiseSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x869EE9100BD1B2D5, 0x68)]
        public class AIScanSweepResource : AIScanMotionResource
        {
            float MaxSweepAngle;
            float SweepSpeed;
            bool VerticalSweep;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF45E762F1E6EDB38, 0x40)]
        public class AISceneObstacle : NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x270C911F4452498D, 0x28)]
        public class AISensor : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7EAB72CD19D95B6, 0x80)]
        public class AISensorSetResource : Resource
        {
            Array<Ref<AISensor>> Idle;
            Array<Ref<AISensor>> PresenceSuspected;
            Array<Ref<AISensor>> PresenceConfirmed;
            Array<Ref<AISensor>> Alert;
            float UnitImmediateSuspicionDistance;
            float UnitImmediateConfirmationDistance;
            float UnitImmediateIdentificationDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEDD2F1387DB46C6, 0x1158)]
        public class AISignalManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x950DACB8D39F183E, 0x48)]
        public class AISignalResource : Resource
        {
            Ref<AISignalType> SignalType;
            Ref<AISignalSettingsResource> Settings;
            Ref<SentenceGroupResource> SentenceGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD62DD8B908B8A8EB, 0x58)]
        public class AISignalSettingsResource : Resource
        {
            float Priority;
            float Lifetime;
            float Delay;
            String GestureName;
            EGestureDirection GestureDirection;
            ELookDirection LookDirection;
            EFacialExpression FacialExpression;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD58F8061AA8DB9D, 0x20)]
        public class AISignalType : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3BB3AA691C7DB0B, 0x48)]
        public class AISkillAimAt : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9DB03AB8A01913C4, 0x48)]
        public class AISkillAimGame : AISkillAimAt
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35288050B6148214, 0x60)]
        public class AISkillAimTurnInAir : AISkillTurnInAir
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28DBC4614717B23A, 0x50)]
        public class AISkillAimTurnOnSpot : AISkillTurnOnSpotGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79BF42AC1C95A27, 0x48)]
        public class AISkillAnimationAction : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66013E85F78643B2, 0x40)]
        public class AISkillBase : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6DB5DA647FDB7F5F, 0x58)]
        public class AISkillChangeStance : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80922C570C04D9BA, 0x60)]
        public class AISkillCloseCombat : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCADA22787C15A81, 0x48)]
        public class AISkillContext : Resource
        {
            String Posture;
            float LookAheadDistance;
            float HeadingSpeedModifier;
            int SegmentsToSmooth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF20F6CA1B6868DD5, 0x58)]
        public class AISkillContextualSpeech : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD40168F68A222D6C, 0x50)]
        public class AISkillCustomAction : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9EDD4759A5681246, 0x80)]
        public class AISkillDismount : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2EFC345543D6CA08, 0x80)]
        public class AISkillDodge : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF253C84B63D62526, 0x50)]
        public class AISkillFaceGame : AISkillFaceTowards
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD36945C1268839E7, 0x48)]
        public class AISkillFaceInAir : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78A3CDC630817AC4, 0x48)]
        public class AISkillFaceTowards : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC62C3809B5DAFE80, 0x40)]
        public class AISkillFacialExpression : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA09898D674E29E4F, 0x48)]
        public class AISkillFacialExpressionGame : AISkillFacialExpression
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF98D382B37E8BC6, 0xA0)]
        public class AISkillFire : AISkillUseGun
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4AAA437042AB443, 0xA0)]
        public class AISkillFireTurnInAir : AISkillTurnInAir
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0AB00749D3EBCAB, 0x90)]
        public class AISkillFireTurnOnSpot : AISkillTurnOnSpotGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2522B57076D44029, 0x58)]
        public class AISkillFly : AISkillFlyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x953C977B73CC144, 0x58)]
        public class AISkillFlyBase : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF46EB06180426158, 0xB8)]
        public class AISkillGesture : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9AC5375A2B93AE1, 0x40)]
        public class AISkillGestureNotPossible : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1794C32671DF5AC, 0x50)]
        public class AISkillGlance : AISkillLookGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x419440B5D6D9DF05, 0x50)]
        public class AISkillGlanceUpperBody : AISkillLookUpperBody
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC588A40A1325E49, 0x48)]
        public class AISkillHoldEntityAction : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x990932878EEC5279, 0x58)]
        public class AISkillHover : AISkillFlyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BE5A114511850EC, 0x48)]
        public class AISkillImmediateWeaponLoad : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFED78349CDBABAE, 0xA0)]
        public class AISkillLand : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56E72B4BF35F2016, 0x40)]
        public class AISkillLoadWeapon : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC4568F8140A4F0A3, 0x58)]
        public class AISkillLoadWeaponGame : AISkillLoadWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x140E765845DF57D5, 0x48)]
        public class AISkillLookAt : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB28F71F45D86E11, 0x50)]
        public class AISkillLookFullBody : AISkillLookTurnOnSpot
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54CBA5DD8DE3BC37, 0x50)]
        public class AISkillLookGame : AISkillLookAt
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5764511302F46401, 0x58)]
        public class AISkillLookTalk : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F8D23D06CF06645, 0x58)]
        public class AISkillLookTalkGame : AISkillLookTalk
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E04EF6246FC3EA5, 0x60)]
        public class AISkillLookTurnInAir : AISkillTurnInAir
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E8E21E992D73B90, 0x50)]
        public class AISkillLookTurnOnSpot : AISkillTurnOnSpotGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58F43D9F734F487F, 0x50)]
        public class AISkillLookUpperBody : AISkillLookGame
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83D92D076B486510, 0x50)]
        public class AISkillLowCrouch : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A92DE79CF1F29B3, 0x60)]
        public class AISkillManagerResource : Resource
        {
            Array<String> BodyGoals;
            Array<Ref<AISkillResource>> SkillBodyMapping;
            Ref<AIBodyPartResourceSet> AvailableBodyParts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD69B0DACD1A830C, 0x50)]
        public class AISkillMountObject : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x912E9E04CB114012, 0x48)]
        public class AISkillPerch : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38F0A184A7AD50A4, 0x50)]
        public class AISkillPickUp : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC4D782D6132E727, 0x68)]
        public class AISkillPlayMonitoredAnimation : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D34ACA7112B1199, 0x80)]
        public class AISkillPlayMotionScatterBlendAnimation : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x131AF49ABC7D81E0, 0x90)]
        public class AISkillPlayWarpedAnimation : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7B392BD0E964CCF, 0x48)]
        public class AISkillPrepareWalk : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2F08048253BB7A8, 0x38)]
        public class AISkillResource : Resource
        {
            Ref<AIBodyPartBase> BodyPartResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCCC822A08C741ED, 0x48)]
        public class AISkillSetDesire : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA588739FEFCCBFBA, 0x58)]
        public class AISkillSimpleCloseCombat : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1E840D35DAF1815, 0x540)]
        public class AISkillSprint : AISkillWalk
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E5D7AEFE3563F0C, 0x48)]
        public class AISkillStowWeapon : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFEBC53F8726B412B, 0x50)]
        public class AISkillStowWeaponGame : AISkillStowWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68FD3AD6EE7482DF, 0x68)]
        public class AISkillSwimBase : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C9CED3DD180858D, 0xB0)]
        public class AISkillSwimFlee : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B4871F2B6B636E6, 0xC0)]
        public class AISkillSwimWander : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF23DC54EB6072644, 0x48)]
        public class AISkillSwitchWeapon : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3871B095560239D, 0x50)]
        public class AISkillSwitchWeaponGame : AISkillSwitchWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48BA751FAB4289FA, 0x58)]
        public class AISkillTakeOff : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x573075F9269FC772, 0x58)]
        public class AISkillTalk : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC4B293BE38D56CD0, 0x58)]
        public class AISkillTalkGame : AISkillTalk
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74D16492CF7F96E, 0x68)]
        public class AISkillTeleport : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBF9551BF3530EE8, 0x60)]
        public class AISkillTurnInAir : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30EC329E98481C30, 0x48)]
        public class AISkillTurnOnSpot : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBFEBCC1AD5513D47, 0x50)]
        public class AISkillTurnOnSpotGame : AISkillTurnOnSpot
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E4AC48427FDC520, 0xB8)]
        public class AISkillUpperBodyGesture : AISkillGesture
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8616EAE78C21FFCB, 0x60)]
        public class AISkillUseAttachable : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23FDF4C6F3D7669, 0x50)]
        public class AISkillUseExplosiveLocation : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC83C5D7A374686F2, 0x90)]
        public class AISkillUseGun : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA411DA4EFB870063, 0x48)]
        public class AISkillUseInventoryActionAbility : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5293058875C29E0D, 0x48)]
        public class AISkillUseInventoryItem : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA724F2E5F411C1B6, 0x50)]
        public class AISkillUseObject : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA7C4945D0C113EE, 0x68)]
        public class AISkillUsePlayAnimationObject : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B915C642A6A3573, 0x50)]
        public class AISkillUseSwitch : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA82585E40485814, 0x540)]
        public class AISkillWalk : AISkillBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FFA3D0DBC16EE91, 0x30)]
        public class AISmellSensor : AISensor
        {
            float UnitDetectionDistance;
            float SmellCapacity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC02CA918D01B6207, 0x90)]
        public class AISmellStimulus : AIStimulus
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE732F1386F3762F, 0x60)]
        public class AISmellStimulusComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5DE9F309E38D3309, 0x38)]
        public class AISmellStimulusComponentResource : EntityComponentResource
        {
            Ref<AISmellStimulusResource> StimulusResource;
            Ref<AIDynamicDataMessageResource> DynamicAIMessage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D0BEAF67241A825, 0x58)]
        public class AISmellStimulusResource : AIStimulusResource
        {
            float SmellIntensity;
            bool DrownsOutOtherSmellStimuli;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB63B3AC2FDE774B6, 0xA8)]
        public class AISniperWeaponOperationInstance : AIWeaponOperationInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1676425C8A17D9D2, 0x68)]
        public class AISniperWeaponOperationResource : AIBurstBasedWeaponOperationResource
        {
            bool HoldFireUntilAimed;
            float MaximumDistance;
            float MinimumDistance;
            float BestMaximumDistance;
            float BestMinimumDistance;
            float MaximumAngle;
            int ImproveCount;
            float LoseAimTime;
            float LoseAimDistance;
            bool LoseAimAfterReload;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA09F54BF58D847C3, 0xB0)]
        public class AISpreadWeaponOperationInstance : AIWeaponOperationInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89551C503BF6ABB3, 0xB0)]
        public class AISpreadWeaponOperationResource : AIBurstBasedWeaponOperationResource
        {
            float LoseAimTime;
            float LoseAimVelocityDelta;
            bool LoseAimAfterReload;
            float Horizontal_WorstAngle;
            float Horizontal_BestAngle;
            int Horizontal_ImproveCount;
            float Horizontal_MaximumDistance;
            Array<float> Horizontal_StartPositions;
            float Horizontal_StopPosition;
            FRange Horizontal_Velocity;
            float Horizontal_Smoothness;
            float Vertical_WorstAngle;
            float Vertical_BestAngle;
            int Vertical_ImproveCount;
            float Vertical_MaximumDistance;
            Array<float> Vertical_StartPositions;
            float Vertical_StopPosition;
            FRange Vertical_Velocity;
            float Vertical_Smoothness;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BF618EFFCA0173D, 0x70)]
        public class AISpringArmOperationSettings : Resource
        {
            Vec3 StartPoint;
            Vec3 EndPoint;
            Vec3 RandomStartPointOffset;
            Ref<CurveResource> Spring;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31A5220DD6C2B3D0, 0xB8)]
        public class AISpringArmWeaponOperationInstance : AIWeaponOperationInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB68733466E202A08, 0x48)]
        public class AISpringArmWeaponOperationResource : AITimeBasedWeaponOperationResource
        {
            Array<Ref<AISpringArmOperationSettings>> TrackingSpring;
            bool StopOperationAtEndPoint;
            bool TrackThreat;
            bool PerformLosTestWithFriendlies;
            bool PerformLosTestWithWorld;
            bool ClampLineToOrientationRange;
            bool ClampAimToOrientationRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x547D94A5A7385B33, 0x8)]
        public class AIStanceChanger
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1C116567578C461, 0xC0)]
        public partial class AIStaticCoverMap : CoreObject, RTTI.IExtraBinaryDataCallback
        {
            BoundingBox3 ViewCellBounds;
            EAICover LegacyViewCellLOS;
            CoverCompressionDepthTable DepthTable;
            IVec2 UncompressedResolutionFront;
            IVec2 UncompressedResolutionRight;
            IVec2 UncompressedResolutionBack;
            IVec2 UncompressedResolutionLeft;
            IVec2 UncompressedResolutionTop;
            IVec2 UncompressedResolutionBottom;
            Ref<AIPositionList> Positions;
            uint Stride;
            bool IsForObjects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70E5B7F389530D87, 0xD0)]
        public class AIStaticCoverMapSettings : CoreObject
        {
            IVec2 PixelMapResolution;
            bool UseExtendedProjection;
            BoundingBox3 ViewCellBounds;
            EAICover LegacyViewCellLOS;
            IVec2 UncompressedResolutionFront;
            IVec2 UncompressedResolutionRight;
            IVec2 UncompressedResolutionBack;
            IVec2 UncompressedResolutionLeft;
            IVec2 UncompressedResolutionTop;
            IVec2 UncompressedResolutionBottom;
            FRange DepthRange;
            float DepthCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4F39BC42F3BDDE1, 0x70)]
        public class AIStealthArea : NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11F882558AD0BE0E, 0x88)]
        public class AIStimulus : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42E7207D50ABEC5E, 0x50)]
        public class AIStimulusResource : Resource
        {
            float PerceptionSignature;
            EThreatState ImmediateStateChange;
            EThreatState MaximumStateChange;
            float Duration;
            EAlertLevel FriendlyAlertLevel;
            EAlertLevel EnemyAlertLevel;
            Array<Ref<AIMessageResource>> StimulusMessages;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE6BB1354F364476, 0x48)]
        public class AISubmergedAuralSensor : AIAuralSensor
        {
            float SignatureMultiplier;
            float MultiplierDecay;
            bool DeducedExactDetection;
            float MinimumStimulusSignature;
            float MaximumHearingHeight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x208859AC9D03D093, 0x28)]
        public class AISupportAttackTicketThresholds : RTTIRefObject
        {
            int OneTicketPlayerLevelThreshold;
            int TwoTicketsPlayerLevelThreshold;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83A60051AC832D2C, 0x28)]
        public class AISweepModifier : AIScanModifier
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30BF7E9A16F18DFD, 0x40)]
        public class AITagToIdentifierMap : Resource
        {
            String Identifier;
            TagPropertyLink Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1F01CB66FD7DDA4, 0x38)]
        public class AITagsMappingResource : Resource
        {
            Array<Ref<AITagToIdentifierMap>> Mapping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F5B69E8FE7664A3, 0x30)]
        public class AITerrainClaim
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x191E1DBA3FDBE614, 0x78)]
        public class AITerrainManager : CoreObject
        {
            Ref<AICoverManager> Cover;
            Ref<AIAreaGraph> AreaGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B725E7C4931A2C7, 0xB0)]
        public class AIThreatInfoMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1175336481920208, 0x18)]
        public class AIThreatInformationData
        {
            int NumProjectiles;
            float TimePeriod;
            EBehaviorEscalation BehaviorEscalation;
            EAreaOfInvestigation AreaOfInvestigation;
            EAreaOfInvestigation AreaOfInvestigationIfEmitterClose;
            float EmitterCloseDistance;
            float AreaOfInvestigationRadius;
            float AntiStealthPatchRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8522D1417758DBF6, 0x88)]
        public class AIThrowableOriginInfoMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45D71415E312EEA5, 0x50)]
        public class AIThrowableOriginInfoMessageHandlerResource : AICombatSituationMessageHandlerResource
        {
            Ref<AIMessageResource> MessageToHandle;
            Array<AIThreatInformationData> ThreatInformation;
            String EventId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6D9E91B9BFD135C, 0x38)]
        public class AIThrowableOriginInfoMessageResource : AIDynamicDataMessageResource
        {
            String EventId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD45DA3A4ED73633E, 0x30)]
        public class AITimeBasedWeaponOperationResource : AIWeaponOperationResource
        {
            FRange RandomTimeInterval;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1CD0852D84BB5B9, 0x38)]
        public class AIToggleSensorMessage : AIMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x885B3A7A74BD875B, 0x80)]
        public class AITrapObstacle : NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9786CF6F57A18B48, 0x78)]
        public class AIUsableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7171CC98DD4C8C07, 0x78)]
        public class AIUsableInteractiveComponent : AIUsableComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52C0BAD9871B4A16, 0x8)]
        public class AIUsableObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF1F7CFA917C1E002, 0xD8)]
        public class AIUsableSequenceNetworkComponent : AIUsableComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B87E15B0B4DD7BF, 0xB0)]
        public class AIVisualSensor : AISensor
        {
            float DirectUnitDetectionDistance;
            float DirectHeadingAngle;
            float DirectPitchAngle;
            float DirectWidth;
            float DirectHeight;
            Ref<CurveResource> DirectPerpendicularFactor;
            Ref<CurveResource> DirectHeadingSensitivity;
            Ref<CurveResource> DirectPitchSensitivity;
            float TerrainReappearanceWpsMaxDistance;
            float PeripheralUnitDetectionDistance;
            float PeripheralHeadingAngle;
            float PeripheralStimulusSizeModifier;
            Ref<CurveResource> PeripheralPerpendicularFactor;
            Ref<CurveResource> PeripheralHeadingSensitivity;
            Ref<CurveResource> PeripheralPitchSensitivity;
            float LightThreshold;
            float LightInfluence;
            float AtmosphereInfluence;
            float SeeThroughCloakDistance;
            float SeeThroughCloakDistancePeripheral;
            float SeeThroughAtmosphereDistance;
            float SeeThroughAtmosphereDistancePeripheral;
            float NearbyFriendlyDistance;
            float NearbyFriendlyInterval;
            float TPAExactSeeThroughDistanceModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B47ADDA766526E7, 0xB0)]
        public class AIVisualStimulus : AIStimulus
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBF7B4AA8BA4FF05, 0x60)]
        public class AIVisualStimulusComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE33AB08CAEF82747, 0x30)]
        public class AIVisualStimulusComponentResource : EntityComponentResource
        {
            Ref<AIVisualStimulusResource> StimulusResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54CB70860215A9B2, 0x60)]
        public class AIVisualStimulusResource : AIStimulusResource
        {
            float Size;
            float SizeWhenFocusedOn;
            EAlertLevel MaxRelevantAlertLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x218BF163F44EB061, 0x40)]
        public class AIWeaponAccuracyHintResource : AIHintSymbolResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x633362085AC48478, 0x520)]
        public class AIWeaponAttack : AIAttack
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE8985A666DC9D97, 0x88)]
        public class AIWeaponAttackResource : AIAttackResource
        {
            Ref<AIWeaponPreference> WeaponPref;
            Array<Ref<AIWeaponPreference>> WeaponPrefVariants;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59FEDB80F62A5C77, 0x8)]
        public class AIWeaponCarrier
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x528CCF9ED6F178F9, 0x88)]
        public class AIWeaponCarrierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD584ACB407A2F03, 0x28)]
        public class AIWeaponCarrierComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC35D50ABC3E537EB, 0x10)]
        public class AIWeaponCarrierGame : AIWeaponCarrier
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE66CCF2A76D8A1C2, 0x18)]
        public class AIWeaponInterface : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD38FFA0A2B7D31B5, 0x40)]
        public class AIWeaponInterfaceGame : AIWeaponInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DFB177F167BC5C7, 0x48)]
        public class AIWeaponOperationInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x951EA5202DAC7BA5, 0x28)]
        public class AIWeaponOperationResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1AED67F539C1C3A3, 0x50)]
        public class AIWeaponPreference : Resource
        {
            String WeaponId;
            Array<Ref<AIWeaponPreferenceSettings>> Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x240E0DB92F95498D, 0x48)]
        public class AIWeaponPreferenceSettings : Resource
        {
            FRange RecoveryTime;
            FRange FirstAimTime;
            FRange AimTime;
            Ref<AIWeaponOperationResource> Operation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x717C050DC14A158D, 0x60)]
        public class AIWildlifeAnnotation : WorldNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9AB8168EC2E87F7, 0x70)]
        public class AIWildlifeClimbPoint : AIWildlifeAnnotation
        {
            String ClimbAnimation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CAD75C06DB8CFCF, 0x70)]
        public class AIWildlifePerchPoint : AIWildlifeAnnotation
        {
            float MaxWindSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD42063C6110FEE72, 0x20)]
        public class Ability : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42357632CD48544C, 0x48)]
        public class AbilityAnimation : Ability
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B34F08CCC651A6E, 0x70)]
        public class AbilityAnimationResource : AbilityResource
        {
            bool CanBeOverriden;
            float MaxRandomTimeOffset;
            Ref<AnimationManagerResource> AnimationManager;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x725D6A2FD1EB694C, 0x30)]
        public class AbilityPoseDeformer : Ability
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC805A0FA4D88E60, 0x40)]
        public class AbilityPoseDeformerResource : AbilityResource
        {
            Ref<PoseDeformerResource> PoseDeformerResource;
            float PBDLodDist1;
            float PBDLodDist2;
            float PBDLodDist3;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5FDD4E826C2B9FB2, 0x28)]
        public class AbilityResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x124E3EF76D660915, 0x30)]
        public class AbilitySimpleAnimation : Ability
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x212A4E5778F4816E, 0x30)]
        public class AbilitySimpleAnimationResource : AbilityResource
        {
            Ref<SkeletonAnimationResource> DefaultAnimationResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF356545626DFE8A6, 0x58)]
        public class AccuracyImprovementComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E25D6EDCDA9B1C4, 0x40)]
        public class AccuracyImprovementComponentResource : EntityComponentResource
        {
            float HorizontalSpreadReduction;
            float VerticalSpreadReduction;
            float HorizontalRecoilReduction;
            float VerticalRecoilReduction;
            float RandomRecoilReduction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4635E66E8744644E, 0x48)]
        public class AccuracyOverrideResource : Resource
        {
            Ref<AccuracySettings> PrimaryAccuracySettingsSP;
            Ref<AccuracySettings> PrimaryAccuracySettingsMP;
            Ref<AccuracySettings> PrimaryAccuracySettingsAI;
            Ref<AimDeviationResource> AimDeviationResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x385FA874928E0E17, 0x88)]
        public class AccuracySettings : Resource
        {
            Ref<CurveResource> HorizontalSpread;
            Ref<CurveResource> VerticalSpread;
            Ref<CurveResource> HorizontalRecoil;
            Ref<CurveResource> VerticalRecoil;
            Ref<CurveResource> HorizontalSpreadFalloff;
            Ref<CurveResource> VerticalSpreadFalloff;
            Ref<CurveResource> HorizontalRecoilFalloff;
            Ref<CurveResource> VerticalRecoilFalloff;
            float FirstShotSpreadFactor;
            float FirstShotAccuracyMovementMax;
            Ref<CurveResource> RandomRecoilCurveResource;
            float RandomRecoilRecoverSpeed;
            float RandomRecoilRecoverSpeedBlendInTime;
            float CursorRecoilFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B7AA2AB4A1C4341, 0x60)]
        public class Achievement : Resource
        {
            int AddedBonus;
            float MultiplierBonus;
            Array<ScoreStatRequirement> Requirements;
            String LocalizerKey;
            String UnlockLocalizerKey;
            String Icon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6DB81BD82F4AA4E0, 0x40)]
        public class AchievementGroupResource : Resource
        {
            Array<Ref<Achievement>> Achievements;
            String LocalizerKey;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x745ED76D82AEFAA3, 0x48)]
        public class AchievementsResource : Resource
        {
            Array<Ref<AchievementGroupResource>> AchievementGroups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BAE0B7D739D3118, 0x30)]
        public class AcknowledgeMessageDelivered : RTTIRefObject
        {
            Array<String> MessageUUIDs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9690F602F900E8B, 0x28)]
        public class ActionAbilityUseCondition : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10CBD8C1E6152DC6, 0x28)]
        public class ActionAbilityUseConditionRadarNotScrambled : ActionAbilityUseCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36F08086D8E9728E, 0x18)]
        public class ActionPerAnimationEvent
        {
            String EventID;
            Ref<EntityAction> Action;
            bool IsStarted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x357656663AF71A3D, 0x58)]
        public class ActivateByReactionToEpulseComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3272F0EA36BB789, 0x38)]
        public class ActivateByReactionToEpulseComponentResource : EntityComponentResource
        {
            Ref<DamageTypeResource> DamageTypeForEpulseResource;
            Ptr<EntityAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC389A5FDFCA3941, 0x40)]
        public class ActivateRobotStateAction : EntityAction
        {
            Ref<RobotStateComponentResource> RobotState;
            bool Activate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4F08F09191B12CA, 0xA0)]
        public class ActivatingUseLocationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32A3ECE748E9B150, 0x28)]
        public class ActivatingUseLocationComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE6E316B328C4B21, 0x48)]
        public class ActivatorReactsToDamageAction : ConditionalAction
        {
            Ref<DamageTypeResource> DamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2303494057EB497D, 0x30)]
        public class ActivePlaylistInfoRequest : RTTIRefObject
        {
            int PageIndex;
            int PageSize;
            String RequiredTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39395DDF95663B04, 0x30)]
        public class ActiveSnowInteractionRegion
        {
            IVec2 MinTile;
            IVec2 MaxTile;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5009E3555D469790, 0x28)]
        public class ActiveStatModifierResource : StatModifierResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7678AF9A460B8A77, 0x10)]
        public class ActivityFeedEntry
        {
            String Language;
            String Text;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D2C84C9C394E7B6, 0x18)]
        public class ActivityFeedItem
        {
            String ID;
            Array<ActivityFeedEntry> Entries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2286D92A126111F3, 0x38)]
        public class ActivityFeedResourceCollection : Resource
        {
            Array<ActivityFeedItem> Items;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DDD9D523D56125B, 0x70)]
        public class ActivityFeedStatTriggerResource : Resource
        {
            String ActivityFeedMsgID;
            int ActivityFeedStoryID;
            EPlayerScoreStat PlayerStat;
            bool PerPlaylist;
            String ActivityFeedSmallImgUrl;
            String ActivityFeedSmallImgAspect;
            String ActivityFeedLargeImgUrl;
            EActivityFeedTriggerAction ActivityFeedAction;
            String ActivityFeedActionArguments;
            String ActivityFeedActionButtonID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x310E8660CF89DE88, 0x130)]
        public class ActivityFeedSystemResource : Resource
        {
            Array<Ref<ActivityFeedStatTriggerResource>> ActivityFeedTriggers;
            String JoinPlaylistButtonCaptionID;
            String StartMPGameButtonCaptionID;
            String OpenWebsiteGameButonCaptionID;
            String RewardUnlockFeedMsgID;
            String RewardUnlockFeedSmallImgUrl;
            String RewardUnlockFeedSmallImgAspect;
            String RewardUnlockFeedLargeImgUrl;
            String ChallengeFeedMsgID;
            String ChallengeFeedSmallImgUrl;
            String ChallengeFeedSmallImgAspect;
            String ChallengeFeedLargeImgUrl;
            Array<int> ChallengeMilestones;
            String PlayedWithFriendsFeedMsgID;
            String PlayedWithFriendsFeedSmallImgUrl;
            String PlayedWithFriendsFeedSmallImgAspect;
            String PlayedWithFriendsFeedLargeImgUrl;
            String FriendKilledFeedMsgID;
            String FriendKilledFeedSmallImgUrl;
            String FriendKilledFeedSmallImgAspect;
            String FriendKilledFeedLargeImgUrl;
            int FriendKilledMinimumValue;
            String FriendRevivedFeedMsgID;
            String FriendRevivedFeedSmallImgUrl;
            String FriendRevivedFeedSmallImgAspect;
            String FriendRevivedFeedLargeImgUrl;
            int FriendRevivedMinimumValue;
            String PlaylistCreatedFeedMsgID;
            String PlaylistCreatedFeedSmallImgUrl;
            String PlaylistCreatedFeedSmallImgAspect;
            String PlaylistCreatedFeedLargeImgUrl;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0FC34207F3BF3DC, 0x48)]
        public class ActivityMedal : Resource
        {
            Ref<LocalizedTextResource> DisplayName;
            Ref<LocalizedTextResource> DisplayDescription;
            Ref<LocalizedTextResource> StartActivityFailureReason;
            Ref<GraphProgramResource> StartActivityConditionGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x899820101DFC8502, 0x80)]
        public class ActivityMedalQuestReward : QuestReward
        {
            Ref<UITexture> UIIcon;
            Ref<LocalizedTextResource> DisplayName;
            Ref<ActivityMedal> Medal;
            EActivityMedalType MedalType;
            Ref<UITexture> MedalIcon;
            Ref<UITexture> NoMedalIcon;
            String RequirementAmount;
            Ref<LocalizedTextResource> RequirementText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AA2531C4725AA54, 0x70)]
        public class ActorBodyPoseSnapshot : ActorSnapshot
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x509ACED1EBFE02A, 0x30)]
        public class ActorFacePoseSnapshot : ActorSnapshot
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1CD5BC9DEF9BCD32, 0x60)]
        public class ActorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC4DC97C960A3C2E, 0x38)]
        public class ActorResource : LocatorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9003AE099F657412, 0x10)]
        public class ActorSnapshot
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7E45C7916D1FC42, 0x90)]
        public class ActorTransformSnapshot : ActorSnapshot
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73C9F8D48BC307C, 0x38)]
        public class AddHUDElementAction : EntityAction
        {
            Ref<HUDElementResource> HUDElementResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45E94E5E7981F423, 0x38)]
        public class AddHealthSegmentAction : EntityAction
        {
            Ref<HealthSegmentResource> HealthSegment;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x558C42495A36DF65, 0x40)]
        public class AddInventoryItemAction : EntityAction
        {
            Ref<EntityResource> Item;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x204356D8721E8632, 0x50)]
        public class AddItemToInventoryAction : EntityAction
        {
            Ref<EntityResource> EntityResource;
            int Amount;
            Ref<EquipSlotType> EquipInSlot;
            int EquipSlotIndex;
            bool SwitchToItem;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89C640DDE4536D3B, 0x38)]
        public class AddPlaylistRequest : RTTIRefObject
        {
            Ref<PlaylistData> PlaylistData;
            Array<String> Tags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A746A4A8E56830A, 0x28)]
        public class AddPlaylistResult : RTTIRefObject
        {
            String PlaylistID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B79E1A17EF6EEFC, 0x40)]
        public class AddXpAction : EntityAction
        {
            Ref<LevelBasedXpReward> XpReward;
            Ref<LocalizedTextResource> Reason;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45095E959587E826, 0x100)]
        public class AimAssistComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8977E36937177EFB, 0x60)]
        public class AimAssistComponentResource : EntityComponentResource
        {
            EPhysicsCollisionLayerGame AimCollisionLayer;
            int AimCollisionCount;
            float AimCollisionRange;
            float AimCollisionAngle;
            float DampingEnabledIn;
            float DampingEnabledTime;
            float DampingEnabledOut;
            float DampingDisabledOut;
            Ref<CurveResource> DampingOverMoveInputX;
            Ref<CurveResource> DampingOverMoveInputY;
            Ref<CurveResource> DampingOverRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAE7BCE7F839140B, 0x70)]
        public class AimAtEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D8F182A2A397029, 0x50)]
        public class AimAtEventResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            Ref<LocatorResource> TargetLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x206B505D463F66E6, 0xF0)]
        public class AimAtLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE52CF5842260656, 0x48)]
        public class AimAtLocatorResource : LocatorResource
        {
            Ref<LocatorResource> AimTargetLocator;
            Ref<LocatorResource> PositionLocator;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC99BA1AA484FFA27, 0xD0)]
        public class AimDeviation
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EE77D24A495309E, 0xC0)]
        public class AimDeviationResource : Resource
        {
            Ref<CurveResource> HorizontalSway;
            Ref<CurveResource> VerticalSway;
            Ref<CurveResource> MoveSpeedSwayCurve;
            Ref<CurveResource> LookSpeedSwayCurve;
            float CrouchSwayModifier;
            Ref<CurveResource> TriggerPressureSwayCurve;
            ESwayChange SwayOnActivate;
            ESwayChange SwayOnFire;
            ESwayChange SwayOnChangeStance;
            Ref<SpringResource> HeadingSpring;
            Ref<SpringResource> PitchSpring;
            float HeadingMoveAimLagFactor;
            float PitchMoveAimLagFactor;
            float HeadingLookAimLagFactor;
            float PitchLookAimLagFactor;
            Vec2 DynamicRecoil;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69BABC7BCC10E469, 0xA8)]
        public class AimIKComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8F5D82BE328DF85, 0x48)]
        public class AimIKComponentResource : EntityComponentResource
        {
            String AimIKAnimationVariableName_Primary;
            String AimIKWeightAnimationVariableName_Primary;
            String DisableAimIKEvent;
            float IKWeightBlendDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC417EC2F16029195, 0x48)]
        public class AimLagSettings : Resource
        {
            Ref<SpringResource> HeadingSpringResource;
            Ref<SpringResource> PitchSpringResource;
            float HeadingSpringAimForceFactor;
            float HeadingSpringMoveForceFactor;
            float PitchSpringAimForceFactor;
            float PitchSpringMoveForceFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8BC368072B6ADB7, 0x80)]
        public class AimLimitsEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FE28671AD1742C3, 0x58)]
        public class AimLimitsEventResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            FRange HeadingLimits;
            FRange PitchLimits;
            Ref<CurveResource> BlendCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9507855C91C7E74, 0x58)]
        public class AimLockTargetComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D5DB5B471D28A1D, 0x38)]
        public class AimLockTargetComponentResource : EntityComponentResource
        {
            Array<Ref<DestructibilityPart>> LockableDestructibilityParts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1DEAC76356770CB, 0x78)]
        public class AimerWeapon : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8ED73752F16A9B8A, 0x28)]
        public class AimerWeaponResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x370522436963A669, 0xE0)]
        public class AimingMagnetComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8003925C5AA498B, 0x58)]
        public class AimingMagnetComponentResource : EntityComponentResource
        {
            Ref<CameraMagnetTagResource> FixTag;
            float FixWeight;
            float FixStrength;
            Ref<CurveResource> FixStrengthOverTime;
            Ref<CurveResource> FixRangeToStrength;
            EPhysicsCollisionLayerGame AimCollisionLayer;
            float AimCollisionRangeMin;
            float AimCollisionRangeMax;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x558ADBDF7BD1F15F, 0x2D0)]
        public class AirMoverComponent : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0EF9794784A1635, 0x50)]
        public class AirMoverComponentPostureSettings : AIMoverPostureSettings
        {
            AnimationStateID LandingStateID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CBD1C26E8CFBE27, 0x108)]
        public class AirMoverComponentResource : MoverResource
        {
            float MaximumSpeed;
            float MaximumTurnSpeed;
            float MaximumAcceleration;
            float MaximumTurnAcceleration;
            FRange RandomAnimationActionInterval;
            String HoverAnimationAction;
            String LocomotionTag;
            String AdditiveTranslationTag;
            Array<Ref<AirMoverComponentPostureSettings>> Postures;
            String VariableDesiredPosture;
            Ref<AnimationManagerResource> AnimationManager;
            AnimationTagID LandingTagID;
            String VariableBankHeading;
            String AnimVarClimbingStart;
            String AnimVarSpeed;
            String RandomFlyingAnimationAction;
            String QuickTurnAnimationAction;
            String QuickTurnDirectionVariable;
            float HoverPushThreshold;
            String HoverPushAnimationAction;
            String HoverPushDirectionVariable;
            int HoverPushLeftValue;
            int HoverPushRightValue;
            int HoverPushBackwardValue;
            int HoverPushForwardValue;
            int HoverPushDownValue;
            int HoverPushUpValue;
            bool Aquatic;
            float PhysicsCollisionSize;
            bool IsAgentAnOwl;
            float LookAheadTime;
            float QuickTurnAngleThreshold;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E2621C8FA90F01A, 0x38)]
        public class AirNavSettingsResource : Resource
        {
            float CellSize;
            uint32 TileResolution;
            float AgentRadius;
            int InitialPathQueryMipLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5AF32A7A5A225EB3, 0x68)]
        public class AirNavigationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA406E0BCB9CE218, 0x38)]
        public class AirNavigationComponentResource : EntityComponentResource
        {
            Ref<AirNavSettingsResource> Settings;
            float GenerationExtents;
            float RemovalExtents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79B7B65492FDE8B9, 0x58)]
        public class Alert
        {
            AlertPart AlertPart;
            Array<String> ContextStack;
            EAlertType Type;
            EProcessReturnValue ProcessReturnValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28214EFFB71C2F32, 0x38)]
        public class AlertAIAction : EntityAction
        {
            float AIAlertRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D4B5C84C50E03CE, 0x30)]
        public class AlertPart
        {
            Array<String> Attributes;
            Array<AlertPart> Children;
            EAlertPartType Type;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF83A0359993301AD, 0x58)]
        public class AlignToUserComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCA0277F9E8916FB, 0x28)]
        public class AlignToUserComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7E4E30EC364C680, 0x18)]
        public class AlphaPeg : PegBase
        {
            float Alpha;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D8ABC5A43204A3C, 0x38)]
        public class AlwaysActiveActivationPolicy : EntityActivationPolicy
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62F2B6FA212AE84E, 0x40)]
        public class AlwaysLoadedStreamingStrategyInstance : StreamingStrategyInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3C044275D70A124B, 0x78)]
        public class AlwaysLoadedStreamingStrategyResource : StreamingStrategyResource
        {
            StreamingRef<ObjectCollection> ObjectCollection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA1380CF1A34420B, 0x28)]
        public class AmbienceAttributeTrackBase : CoreObject
        {
            String AttributeName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2A0261C73FA6FDA, 0x40)]
        public class AmbienceBiasSettingsTrack : AmbienceSettingsTrack
        {
            Ref<WeatherInfluenceFactor> WeatherInfluenceFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD1853CDCDE8A7D4, 0x38)]
        public class AmbienceColorAttributeTrack : AmbienceAttributeTrackBase
        {
            Ref<Gradient> Gradient;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43CE53EFC4F017D6, 0x10)]
        public class AmbienceColorizeKeyframe
        {
            float Fraction;
            Ref<ColorizeSettingsResource> ColorizeSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA36B54C9460CFD51, 0x30)]
        public class AmbienceColorizeTrack : CoreObject
        {
            Array<AmbienceColorizeKeyframe> Keyframes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE53434777EBA382, 0x10)]
        public class AmbienceCurveAttributeKeyFrame
        {
            Ref<CurveResource> Curve;
            float Fraction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95B8151BD5148207, 0x40)]
        public class AmbienceCurveAttributeTrack : AmbienceAttributeTrackBase
        {
            Array<AmbienceCurveAttributeKeyFrame> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACE2BE5671EF6723, 0x80)]
        public class AmbienceCycle : AmbienceCycleBase
        {
            Ref<CurveResource> SunElevationAngle;
            Ref<CurveResource> SunAzimuthAngle;
            Ref<CurveResource> MoonElevationAngle;
            Ref<CurveResource> MoonAzimuthAngle;
            float MoonDistance;
            Vec4 SunToMoonFadeTimes;
            Ref<SunLightResource> SunLightResource;
            Ref<SunLightResource> MoonLightResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C69689808E79640, 0x30)]
        public class AmbienceCycleBase : CoreObject
        {
            Array<Ref<AmbienceSettingsKeyFrame>> AmbienceKeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x388848394E3B4081, 0x58)]
        public class AmbienceEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC13A4EEBF1A4F4E, 0x40)]
        public class AmbienceEventResource : TimedEventResource
        {
            Ref<AmbienceCycle> AmbienceCycle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BE4EBB1350F1BF8, 0x38)]
        public class AmbienceFloatAttributeTrack : AmbienceAttributeTrackBase
        {
            Ref<CurveResource> CurveResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC58E7D2B8B96F089, 0x60)]
        public class AmbienceGlobalRenderVariableValues : CoreObject
        {
            GlobalRenderVariableValues base_GlobalRenderVariableValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E6FC71CF930A471, 0x14)]
        public class AmbienceLightingSettings
        {
            float SunLightIntensityScale;
            float StaticIndirectScale;
            float SkyLightScale;
            float SkyLightDesaturate;
            float SunBounceScaleColorDesaturate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE65B0664A79919C, 0x38)]
        public class AmbienceLightingSettingsResource : CoreObject
        {
            AmbienceLightingSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B1644EF58E69ED9, 0xA00)]
        public class AmbienceManager : CoreObject
        {
            Ref<AmbienceCycle> BaseCycle;
            Ref<SunLightResource> SunLightResource;
            Ref<SunLightResource> MoonLightResource;
            Ref<StaticMeshInstance> MoonMeshInstance;
            Ref<StaticMeshInstance> NightSkyStarFieldMesh;
            Ref<StaticMeshInstance> NightSkyHorizonMesh;
            float SunFlareLingerTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A5951CD9742520F, 0x80)]
        public class AmbienceSettings : CoreObject
        {
            Ref<ExposureSettingsResource> ExposureSettings;
            Ref<LightShaftSettingsResource> LightShaftSettings;
            Ref<BloomSettingsResource> BloomSettings;
            Ref<AmbienceLightingSettingsResource> LightingSettings;
            Ref<ColorizeSettingsResource> ColorizeSettings;
            Ref<CloudRenderSettingsResource> CloudRenderSettings;
            Ref<AtmosphereSkySettingsResource> AtmosphereSkySettings;
            Ref<AtmosphereHazeSettingsResource> AtmosphereHazeSettings;
            Ref<AtmosphereFogSettingsResource> AtmosphereFogSettings;
            Ref<AmbienceGlobalRenderVariableValues> GlobalRenderVariableValues;
            Ref<RainbowAndSundogSettingsResource> RainbowAndSundogSettings;
            Ref<AuroraSettingsResource> AuroraSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x673511A38AF875B1, 0x30)]
        public class AmbienceSettingsKeyFrame : CoreObject
        {
            Ref<AmbienceSettings> AmbienceSettings;
            float TimeOfDay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9C27FF65DD26346, 0x38)]
        public class AmbienceSettingsTrack : CoreObject
        {
            Ref<AmbienceColorizeTrack> ColorizeTrack;
            Array<Ref<AmbienceAttributeTrackBase>> AttributeTracks;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE056B31F1897B26, 0x2D0)]
        public class AmbienceSetup : CoreObject
        {
            DeprecatedAmbienceSettings Settings;
            Ref<AmbienceSettingsTrack> DayNightCycleSettingsTrack;
            Array<Ref<AmbienceBiasSettingsTrack>> BiasSettingsTracks;
            Ref<SunLightResource> SunLightResource;
            Ref<SunLightResource> MoonLightResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDDA1D8F6E0D2E5D2, 0x30)]
        public class AmbienceSetupCollection : CoreObject
        {
            Array<Ref<AmbienceSetupCollectionEntry>> Entries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4B186647AFBE775, 0x30)]
        public class AmbienceSetupCollectionEntry : CoreObject
        {
            Ref<AmbienceSetup> AmbienceSetup;
            Ref<WeatherInfluenceFactor> WeatherInfluence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9FD059AF0D01C44, 0x58)]
        public class AmbienceSunAndMoonEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60B3ADD988E3489B, 0x68)]
        public class AmbienceSunAndMoonEventResource : TimedEventResource
        {
            Ref<SunLightResource> SunlightOverride;
            bool SunAzimuthAngleOverrideEnabled;
            float SunAzimuthAngleOverride;
            bool SunElevationAngleOverrideEnabled;
            float SunElevationAngleOverride;
            Ref<SunLightResource> MoonlightOverride;
            bool MoonAzimuthAngleOverrideEnabled;
            float MoonAzimuthAngleOverride;
            bool MoonElevationAngleOverrideEnabled;
            float MoonElevationAngleOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37B6BB9D4675CB89, 0x2F0)]
        public class Ammo : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x112E5A1B5F513A6E, 0x28)]
        public class AmmoCraftingViewController : CraftingViewController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF487C017B47BC17, 0x490)]
        public class AmmoEjector : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9EAD61241912D57, 0x1C0)]
        public class AmmoEjectorRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3BAF3F61F3B9F1D, 0x1D0)]
        public class AmmoEjectorResource : WeaponPartResource
        {
            Ref<StatsClassResource> StatsClassResource;
            String WeaponId;
            Ref<AIAuralStimulusResource> FireSoundStimulus;
            String FiringShaderVariableID;
            Ref<CurveResource> FiringShaderVariableCurve;
            int FireRate_BurstSize;
            EWeaponTriggerType TriggerType;
            String FireAnimationAction;
            String ChamberAnimationAction;
            Ref<FireDurationsAnimationReference> FireDurationsAnimReference;
            float FireDuration;
            float ChamberRoundDuration;
            float AfterBurstFiringDuration;
            float AfterBurstDelay;
            float FireRequestHoldDenialTime;
            float FireRequestTapDenialTime;
            bool ResetEjectLocationEveryBurst;
            bool IsAutoHoming;
            bool HomeInOnHumanoids;
            float HomingLockConeAngle;
            float MaximumLockingDistance;
            float KeepLockBehindCoverHeight;
            float MinOffensiveRange;
            float MaxOffensiveRange;
            Ref<ShakeResource> ShakeResource;
            Ref<SoundResource> FireSound;
            Ref<SoundResource> FireLoopSound;
            Ref<RumbleResource> FireRumbleResource;
            Ref<SoundResource> ClickSound;
            Ref<RumbleResource> ClickRumbleResource;
            Ref<SoundResource> ChamberBulletSound;
            float RandomTracerOffset;
            float PredictionFactor;
            float PredictionFactorAI;
            Ref<ParticleSystemResource> FireParticles;
            Ref<ParticleSystemResource> FirstPersonFireParticles;
            Ref<ParticleSystemResource> FirstPersonZoomedFireParticles;
            Ref<ParticleSystemResource> MuzzleSmokeParticles;
            Ref<ParticleSystemResource> FirstPersonMuzzleSmokeParticles;
            Ref<LightResource> FireLight;
            Ref<LightResource> FirstPersonFireLight;
            bool ThirdPersonFireLightIsReversed;
            Ref<CurveResource> FireLightIntensityCurve;
            bool FireLightIsLooping;
            float FireLightLoopingFadeTime;
            Vec3 FirstPersonFireLightRandomOffset;
            Vec3 ThirdPersonFireLightRandomOffset;
            bool ApplyFireLightGunFlare;
            float MuzzleSmokeDelay;
            float MuzzleSmokeDuration;
            Ref<TerrainAimReticuleResource> TerrainAimReticule;
            Ref<TerrainAimReticuleResource> TerrainAimReticuleCanNotFire;
            Ref<TerrainAimReticuleResource> TerrainAimReticuleTargetArea;
            bool ShowTerrainAimReticuleOnlyWhenZoomed;
            int FireRate_AmmoPerShot;
            EAmmoCostType AmmoCostType;
            Ref<ChargedValueInt> Charged_AmmoPerShot;
            Ref<ChargedValueInt> Charged_BurstSize;
            bool IsUpgradedEjector;
            bool PrioritiseAutoAim;
            bool EnableLaserBeamForPlayer;
            bool EnableLaserBeamForAI;
            EForcedToggleType PlayerFlashlightToggleType;
            bool EnableFlashlightForAI;
            Ptr<EntityAction> FireStartedAction;
            Ptr<EntityAction> FireStoppedAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27B95368DF6AAF4, 0x328)]
        public class AmmoEjectorWeapon : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EA2EAA0BF437FCC, 0x70)]
        public class AmmoEjectorWeaponRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x211F58967C9DDB5E, 0x120)]
        public class AmmoEjectorWeaponResource : EntityComponentResource
        {
            Ref<AmmoEjectorResource> EjectorResource;
            Ref<MagazineResource> MagazineResource;
            Ref<AIBodyPartBase> BodyPartResource;
            float FiringPhysicsImpulse;
            float AimRaycastLength;
            int AnimationId;
            bool IsSilenced;
            Ptr<EntityAction> SelectedAction;
            Ptr<EntityAction> DeselectedAction;
            Ptr<EntityAction> SelectedActionOnUser;
            Ptr<EntityAction> DeselectedActionOnUser;
            Array<Ref<EjectLocationResource>> EjectLocations;
            bool ForceThirdPersonEjectLocations;
            Ref<WeaponAccuracyResource> AccuracyResource;
            Ref<WeaponZoomResource> ZoomResource;
            bool RequiresZoomModeToFire;
            bool AllowZoomSwitchDuringFire;
            Ref<WeaponChargeResource> ChargeResource;
            bool CanChargeWhileOverheated;
            Ref<WeaponSpinResource> SpinResource;
            Ref<WeaponOverheatResource> OverheatResource;
            Ref<WeaponCookResource> CookResource;
            Ref<WeaponAmmoTetherResource> AmmoTetherResource;
            Array<Ref<WeaponPartResource>> AdditionalParts;
            float ZoomLockTargetRange;
            String AimFromHelper;
            FRange AimLimitHeading;
            FRange AimLimitPitch;
            float VerticalAimOffsetAngle;
            EWeaponStanceRaiseType StanceRaiseType;
            float RaiseTimeout;
            EWeaponStanceRaiseType AIStanceRaiseType;
            float AIRaiseTimeout;
            EAIBodyAlignmentMode BodyAlignmentMode;
            Ref<AISignalType> IdentifierSignal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55FBB244C44B0C49, 0x38)]
        public class AmmoMutatorResource : Resource
        {
            Ref<AmmoResource> OriginalAmmo;
            Ref<AmmoResource> ReplacementAmmo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF14FC664E566FE96, 0x70)]
        public class AmmoRecipe : ItemRecipe
        {
            Array<Ref<ItemDescriptionComponentResource>> WeaponDescriptionss;
            Ref<LocalizedTextResource> AmmoPouchName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD4FD9BEE9B59DA2, 0x160)]
        public class AmmoResource : EntityResource
        {
            Ref<AmmoType> AmmoType;
            Ref<InventoryWeaponResource> AutoManagedWeaponResource;
            Ref<CurveResource> BurstDamageClampCurve;
            Ref<UITexture> IconTexture;
            FRGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80D7DDEAE673645E, 0x38)]
        public class AmmoSlotResource : Resource
        {
            Ref<AmmoResource> AmmoResource;
            Ref<AmmoEjectorWeaponResource> WeaponMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x744B314A1C3959CD, 0x80)]
        public class AmmoSlotsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1854D03758897F26, 0x38)]
        public class AmmoSlotsComponentResource : EntityComponentResource
        {
            Array<Ref<AmmoSlotResource>> AmmoSlots;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5601AD0182BD8CE0, 0x48)]
        public class AmmoType : Resource
        {
            String ItemName;
            String ItemDescription;
            Ref<Texture> IconTexture;
            Ref<EquipSlotType> EquipSlotType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76E58D35E451F3FF, 0x68)]
        public class AnimatedEntityEventInstance : AnimationEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31003A942EED69D9, 0x70)]
        public class AnimatedEntityEventResource : AnimationEventResource
        {
            Ref<ExternalAnimationConfiguration> AnimationConfiguration;
            Ref<SkeletonAnimationResource> AnimationResource;
            int FeatherBlendInFrames;
            int FeatherBlendOutFrames;
            ERootBoneMode RootBoneMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA48BE52259966F29, 0x58)]
        public class AnimatedLightEventInstance : LightEventInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x502786C44188D56, 0x58)]
        public class AnimatedLightEventResource : LightEventResourceBase
        {
            UUIDRef<Light> Light;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD9EAA8E92F41298, 0xE8)]
        public class AnimatedLocatorInstance : LocatorInstance
        {
            WorldTransform Orientation;
            Ptr<LocatorInstance> ParentLocator;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86D45CAE02A4A643, 0x70)]
        public class AnimatedLocatorResource : LocatorResource
        {
            Ref<LocatorResource> ParentLocator;
            Ref<CurveResource> TranslationX;
            Ref<CurveResource> TranslationY;
            Ref<CurveResource> TranslationZ;
            Ref<CurveResource> RotationX;
            Ref<CurveResource> RotationY;
            Ref<CurveResource> RotationZ;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4647F4BC5B67CE87, 0x58)]
        public class AnimatedMeshEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9209C7F0846E42A, 0x68)]
        public class AnimatedMeshEventResource : ScaleableTimedEventResource
        {
            Ref<LocatorResource> PositionLocatorResource;
            Ref<SkeletonAnimationResource> Animation;
            Ref<SkinnedMeshResource> Mesh;
            Ref<PoseDeformerResource> PoseDeformerResource;
            bool UseRootBoneAnimation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE46EDF7481211260, 0x148)]
        public class AnimatedPlayerCameraEventInstance : CameraActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48FE06D4288BC22E, 0xD0)]
        public class AnimatedPlayerCameraEventResource : CameraActorResource
        {
            Ref<EntityActorResource> PlayerActorResource;
            int SlideInFrames;
            int SlideOutFrames;
            bool SyncPlayerLookAt;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC144AF5B1E98A8B, 0xB0)]
        public class AnimatedPositionLocatorEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E292DC9627836B9, 0x50)]
        public class AnimatedPositionLocatorEventResource : ScaleableTimedEventResource
        {
            Ref<LocatorResource> PositionLocatorResource;
            Ref<PathResource> PathResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB1CF2CCE3E5AB50, 0x58)]
        public class AnimatedRenderZoneEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39692BFCA099CC71, 0x50)]
        public class AnimatedRenderZoneEventResource : TimedEventResource
        {
            UUIDRef<RenderZone> RenderZone;
            Ref<CurveResource> IntensityCurveResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1ACB26F930AC3207, 0x40)]
        public class AnimatedScreenEffectResource : ScreenEffectResource
        {
            Ref<CurveResource> BlendAnimationCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47BFFF0FCAF7866, 0x78)]
        public class AnimatedShaderEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D485685A5F2F6EA, 0x60)]
        public class AnimatedShaderEventResource : TimedEventResource
        {
            String ShaderVariable;
            String ShaderVariableCensored;
            Ref<EntityActorResource> EntityActorResource;
            Ref<CurveResource> CurveResource;
            bool AutoScaleCurve;
            bool ResetOnStop;
            float ResetValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9121314147168300, 0x58)]
        public partial class AnimatedTexture : Texture, RTTI.IExtraBinaryDataCallback
        {
            Array<AnimatedTextureFrame> Frames;
            float TotalDuration;
            bool PausedByDefault;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCAC9874322AC4D6, 0x10)]
        public class AnimatedTextureFrame
        {
            Ref<Texture> Texture;
            float Duration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF764EBAAA8575FAA, 0x68)]
        public class AnimatedTextureManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x214EBE8428F8B8F2, 0x40)]
        public class AnimationAction : EntityAction
        {
            String Animation;
            EAnimationActionAction Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3F6CA628A229C6F, 0x60)]
        public class AnimationActionEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFD3C5DBBCB4E066, 0x48)]
        public class AnimationActionEventResource : TimedEventResource
        {
            String Action;
            Ref<EntityActorResource> AnimatedEntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x688630E525098841, 0x20)]
        public class AnimationBoneMotion
        {
            Array<Vec3Pack> MotionCurve;
            Array<float> RotationCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C19406F42A387DE, 0x58)]
        public class AnimationEventActionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F49818B56957F58, 0x38)]
        public class AnimationEventActionComponentResource : EntityComponentResource
        {
            Array<ActionPerAnimationEvent> ActionsPerEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x888F2D4B94D3FA51, 0x60)]
        public class AnimationEventEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDDB821B42C71C00B, 0x48)]
        public class AnimationEventEventResource : TimedEventResource
        {
            int AnimationEventID;
            Ref<EntityActorResource> AnimatedEntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x218524C6351D83A6, 0x68)]
        public class AnimationEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58FB3FC5CA60A80B, 0x50)]
        public class AnimationEventResource : ScaleableTimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            bool Loop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6C580824ABC2977, 0x40)]
        public class AnimationLinkResource : Resource
        {
            Ref<SkeletonAnimationResource> SkeletonAnimation;
            Ref<ExternalAnimationConfiguration> AnimationConfiguration;
            ERootBoneMode RootBoneMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFB2BFD4AC26A4F5, 0x98)]
        public class AnimationManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B18E58C9D21DA52, 0xA0)]
        public class AnimationManagerResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0EF0D31AA265278, 0xC)]
        public class AnimationMarkUpEvent
        {
            int UserData;
            float Duration;
            float Fraction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x139823C4A0222D7E, 0x18)]
        public class AnimationMarkUpTrack
        {
            int UserData;
            int ID;
            Array<AnimationMarkUpEvent> Events;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA3F15068E6CF99DC, 0x20)]
        public class AnimationMotionBase : BaseResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8086FDB67EBA1FE, 0x60)]
        public class AnimationMotionCurve : AnimationMotionBase
        {
            float Duration;
            float SampleTimeStep;
            HashMap<int_AnimationBoneMotion> BoneMotions;
            AnimationMarkUpTrack SynchEventTrack;
            Array<AnimationMarkUpTrack> EventTracks;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD431C273D67B6175, 0x50)]
        public class AnimationMotionDirectional : AnimationMotionBase
        {
            int AngleIndex;
            Array<float> AngleValues;
            FRange AngleRange;
            Array<Ref<AnimationMotionBase>> Direction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6E8250FE734EC9E, 0x4)]
        public class AnimationPoseMatchingAnimationData
        {
            EAnimationDirection Direction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A4D8C38B3897ED5, 0x20)]
        public class AnimationPoseMatchingBoneData
        {
            Vec3 PositionLs;
            Vec3 VelocityLs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6494543DDCC687AA, 0x60)]
        public class AnimationPoseMatchingConfigData : RTTIRefObject
        {
            Array<int> RelevantBonesIndices;
            Array<float> PositionWeights;
            Array<float> VelocityWeights;
            int AligmentBoneIndex;
            bool FromRagdollSkeleton;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5223DD844810F345, 0x40)]
        public class AnimationPoseMatchingDataBase : RTTIRefObject
        {
            Array<AnimationPoseMatchingPose> PosesDb;
            Array<AnimationPoseMatchingAnimationData> AnimationData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA35EB753BFCD745, 0x60)]
        public class AnimationPoseMatchingPose
        {
            Array<AnimationPoseMatchingBoneData> BonesData;
            int AnimationIndex;
            float AnimationTime;
            Vec3 AligmentBonePositionMs;
            Vec3 AligmentBoneForwardDirectionMs;
            Vec3 RootBoneDeltaTranslation;
            Quat RootBoneDeltaRotation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC5FBECA21EB24144, 0x10)]
        public class AnimationResourceTranslation
        {
            ELanguage Language;
            Ref<SkeletonAnimationResource> Animation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC31F0B0FB4C2E7D2, 0x30)]
        public class AnimationSetMap : CoreObject
        {
            Array<AnimationSetMapEntry> Entries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5930E636BBE27E2, 0x18)]
        public class AnimationSetMapEntry
        {
            AnimationTagSet Tags;
            String AnimationSetName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD02E8F5303DEAA17, 0x60)]
        public class AnimationTagEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6D3A8B02AAFD10B, 0x48)]
        public class AnimationTagEventResource : TimedEventResource
        {
            String AnimationTagName;
            Ref<EntityActorResource> AnimatedEntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF020E4F29DF18A8, 0x10)]
        public class AnimationTagSet
        {
            Array<String> Set;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C7FD04E23AFFAD7, 0x28)]
        public class AnimationTrackBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39F8F3CA357077F1, 0x20)]
        public class AnimationTrackKeyFrame_Quat : AnimationTrackKeyTime
        {
            Quat Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB94BDEDFD4027ED, 0x8)]
        public class AnimationTrackKeyFrame_RGBAColor : AnimationTrackKeyTime
        {
            RGBAColor Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6EB4981A2D43CB20, 0x20)]
        public class AnimationTrackKeyFrame_Vec3 : AnimationTrackKeyTime
        {
            Vec3 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6F8C4C62A2975F7, 0x20)]
        public class AnimationTrackKeyFrame_Vec4 : AnimationTrackKeyTime
        {
            Vec4 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A62DF3110CF9CFB, 0x20)]
        public class AnimationTrackKeyFrame_WorldPosition : AnimationTrackKeyTime
        {
            WorldPosition Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF91D79A68B30B15E, 0x8)]
        public class AnimationTrackKeyFrame_bool : AnimationTrackKeyTime
        {
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49740FA5997C953A, 0x8)]
        public class AnimationTrackKeyFrame_float : AnimationTrackKeyTime
        {
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A6DCC17F2320C90, 0x4)]
        public class AnimationTrackKeyTime
        {
            float Time;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x868BDE3F16FFE97C, 0x38)]
        public class AnimationTrackLinearBool : AnimationTrackBase
        {
            Array<AnimationTrackKeyFrame_bool> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58BF5EF60D7B8171, 0x38)]
        public class AnimationTrackLinearFQuat : AnimationTrackBase
        {
            Array<AnimationTrackKeyFrame_Quat> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B77AF8FC3DB1052, 0x38)]
        public class AnimationTrackLinearFVector3 : AnimationTrackBase
        {
            Array<AnimationTrackKeyFrame_Vec3> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73AF12A13B4B040C, 0x38)]
        public class AnimationTrackLinearFVector4 : AnimationTrackBase
        {
            Array<AnimationTrackKeyFrame_Vec4> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB723206F6CC5EDB7, 0x38)]
        public class AnimationTrackLinearFloat : AnimationTrackBase
        {
            Array<AnimationTrackKeyFrame_float> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC76C1AEA06A1B99, 0x38)]
        public class AnimationTrackLinearRGBAColor : AnimationTrackBase
        {
            Array<AnimationTrackKeyFrame_RGBAColor> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17A7B01A72C76EB1, 0x38)]
        public class AnimationTrackLinearWorldPosition : AnimationTrackBase
        {
            Array<AnimationTrackKeyFrame_WorldPosition> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x101E0E3EECF5411, 0x68)]
        public class AnimationVariableEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8BBA75B30D15B6FA, 0x58)]
        public class AnimationVariableEventResource : TimedEventResource
        {
            String Variable;
            Ref<EntityActorResource> AnimatedEntityActorResource;
            Ref<CurveResource> CurveResource;
            bool AutoScaleCurve;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0BC2593FE09A194, 0x10)]
        public class AnimationVariableFloat
        {
            String Name;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2C0F8006E9DFE74, 0x20)]
        public class AnimationVariableSettings
        {
            Array<AnimationVariableFloat> AnimationVariableFloat;
            Array<String> AnimationAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22152B64743D7211, 0x10)]
        public class AnimationVariableValue
        {
            String Variable;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE95DB563621EFA6, 0xF0)]
        public class AnnotatedRoute : Route
        {
            Ref<AnnotatedRouteDecoration> Decoration;
            Array<EAnnotationPrimitiveTag> AdditionalAnnotationTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6D34BD923B8C571, 0x30)]
        public class AnnotatedRouteAnnotation
        {
            Array<EAnnotationPrimitiveTag> AnnotationTags;
            Vec3 Offset;
            Vec3 Normal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6396179FCABDCF39, 0x38)]
        public class AnnotatedRouteAnnotationCollection : Resource
        {
            Array<AnnotatedRouteAnnotation> Annotations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBB3C4FD016A4977, 0x58)]
        public class AnnotatedRouteDecoration : Resource
        {
            Ref<AnnotatedRouteAnnotationCollection> AnnotationCollection;
            Ref<PrefabResource> RoutePrefabResource;
            Array<AnnotatedRoutePrefabShaderOverride> ScaleShaderOverrides;
            Array<AnnotatedRoutePrefabShaderOverride> OffsetShaderOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE9DF3DF063748CA, 0xA0)]
        public class AnnotatedRouteNode : RouteNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE35989484EFD3FA1, 0x10)]
        public class AnnotatedRoutePrefabShaderOverride
        {
            String VariableID;
            Ref<RTTIRefObject> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E7009C3A25BF111, 0x70)]
        public class AnnotationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53AB4BB544465342, 0x80)]
        public class AnnotationComponentResource : EntityComponentResource
        {
            Array<Ref<AttachedAnnotationResource>> AttachedAnnotations;
            bool OnlyPullUpOntoBalanceBeams;
            bool AllowAutomaticStepOffToOtherObject;
            bool AllowAutomaticStepOnFromOtherObject;
            bool AllowAutomaticStepOffToFloor;
            bool AllowUnguidedJumpOff;
            Array<Vec3> AutomaticStepOffToFloorDetectionOffsetsOverride;
            bool UseProperlyAlignedCheckForAttachment;
            bool UseLinearApproachTrajectory;
            bool OverrideApproachTrajectorySettings;
            HumanoidAirControlCurvedTrajectorySettings CurvedTrajectorySettingsOverride;
            HumanoidAirControlLinearTrajectorySettings LinearTrajectorySettingsOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CB8586C880B78BF, 0x230)]
        public class AnnotationDetectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBBF417E53B378B3, 0xD0)]
        public class AnnotationDetectionComponentResource : EntityComponentResource
        {
            String CharacterCenterHelper;
            float DetectionDepth;
            Vec3 HandPosition;
            Vec3 HandPositionSwimming;
            Vec3 FeetGroundPosition;
            float MaxOnGroundHandsAttachDistance;
            float MaxOnGroundFeetAttachDistance;
            float MaxInAirHandsAttachDistance;
            float MaxInAirFeetAttachDistance;
            float AnnotationsDetectionRadius;
            Vec3 BalanceBeamPullUpDetectionOffset;
            float BalanceBeamPullUpDetectionRadius;
            Vec3 LowerToClimbDetectionOffset;
            float LowerToClimbDetectionRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4299C965002CD118, 0x58)]
        public class AnnotationEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBB8965E108B054D, 0x60)]
        public class AnnotationEventResource : TimedEventResource
        {
            WString Label;
            WString Comment;
            FRGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C3D3357A06AADF, 0x38)]
        public class AnnotationGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x354783393DD1414F, 0x90)]
        public class AnnotationInstance : WorldNode
        {
            Ref<AnnotationResource> Resource;
            Array<Ptr<AnnotationPrimitiveInstance>> PrimitiveInstances;
            bool Enabled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x791ECB779DD33586, 0x50)]
        public class AnnotationPoint : AnnotationPrimitive
        {
            Vec3 Point;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA0697E6A28246D0, 0x50)]
        public class AnnotationPolygon : AnnotationPrimitive
        {
            Array<Vec3> Points;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD7E14E38B1D1EC9, 0x40)]
        public class AnnotationPrimitive : CoreObject
        {
            Array<String> Tags;
            Vec3 Normal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7C4A04D254AE36, 0x70)]
        public class AnnotationPrimitiveInstance : CoreObject
        {
            Ptr<AnnotationPrimitive> Primitive;
            Ref<AnnotationInstance> Instance;
            BoundingBox3 BoundingBox;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE4E6BFA7DF8F91A, 0x38)]
        public class AnnotationPrimitivesGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x460C0C7C64593C5B, 0x38)]
        public class AnnotationResource : Resource
        {
            Array<Ref<AnnotationPrimitive>> Primitives;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36C25B51E5FD32F7, 0x60)]
        public class AnnotationSegment : AnnotationPrimitive
        {
            Vec3 StartPoint;
            Vec3 EndPoint;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5D8B8F112CE5642, 0x11E0)]
        public class Application
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDE52CC3C14227D3, 0x2D0)]
        public class ApplyForceEntity : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5A5F3899E3F94BE, 0x150)]
        public class ApplyForceEntityResource : EntityResource
        {
            Vec3 Force;
            float LifeTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FFB0A546A8F6754, 0x90)]
        public class ApplyPhysicsImpulseAction : EntityAction
        {
            Vec3 Position;
            bool ApplyAtCenterOfMass;
            Vec3 Direction;
            float Force;
            Ref<RandomVectorResource> RandomImpulse;
            bool ForceApplyToSelf;
            bool UpwardsInWorldSpace;
            Array<Ref<DestructibilityPart>> Parts;
            bool Ragdoll;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C32F6E285108A16, 0x2E0)]
        public class ArcComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA55E39C882E8E2BC, 0x28)]
        public class ArcComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3483F3B04337ECD, 0x510)]
        public class ArcEjector : DiscreteAmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D64802ABAD6B185, 0x2A0)]
        public class ArcEjectorResource : DiscreteAmmoEjectorResource
        {
            float Range;
            float Angle;
            int HitCount;
            float ExitVelocity;
            Ref<ChargedValueFloat> RangeScaler;
            Ref<ChargedValueFloat> AngleScaler;
            Ref<ChargedValueInt> HitCountScaler;
            Ref<ChargedValueFloat> DamageScaler;
            Ref<ChargedValueFloat> ImpulseScaler;
            Ref<ChargedValueFloat> SeverityScaler;
            Ref<DamageSettings> DamageSettingsSP;
            Ref<DamageSettings> DamageSettingsMP;
            Ref<DamageSettings> DamageSettingsAI;
            EPhysicsCollisionLayerGame TargetCollisionLayer;
            float TargetCollisionRadius;
            float DummyTargetSpacingMin;
            Ref<EntityResource> ArcEntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70CABA1F5E7F058E, 0x58)]
        public class AreaBasedStreamingStrategyInstance : StreamingStrategyInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1052092F4DA9E877, 0x58)]
        public class AreaBasedStreamingStrategyInstanceGame : AreaBasedStreamingStrategyInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB6B589D3F13DE93, 0x90)]
        public class AreaBasedStreamingStrategyResource : StreamingStrategyResource
        {
            Ref<CollisionTrigger> HintTrigger;
            Ref<CollisionTrigger> ActivateTrigger;
            StreamingRef<ObjectCollection> ObjectCollection;
            bool ExcludeFromInitialChunk;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x921397E07300755A, 0xA8)]
        public class AreaBasedStreamingStrategyResourceGame : AreaBasedStreamingStrategyResource
        {
            Ref<BooleanFact> HintedFact;
            Ref<BooleanFact> ActiveFact;
            Ref<ConditionResource> EnableCondition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5466695C1E69CFF4, 0x70)]
        public class AreaRestrictionSpawnCommand : SpawnCommand
        {
            Array<Ref<NavMeshArea>> Areas;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E289F5C50DD5178, 0x98)]
        public class ArmedPartDamageOnImpactComponent : DamageOnImpactComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F07EAF1ECC127C8, 0x80)]
        public class ArmedPartDamageOnImpactComponentResource : DamageOnImpactComponentResource
        {
            Array<Ref<ModelPartResource>> ArmedModelParts;
            Ref<EffectComponentResource> ArmedEffects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1E162EEB096C14A, 0x38)]
        public class AssertReporterGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8F21D46F9B3D3C5, 0x8)]
        public class AssetPath
        {
            String Path;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CEB807C5F972B43, 0xC0)]
        public class AtmosphereBoxComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DD56BB269BFC1BF, 0x38)]
        public class AtmosphereBoxComponentResource : EntityComponentResource
        {
            Ref<AIAtmosphereBoxResource> Resource;
            String HelperName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA50C2E8059AA1311, 0x80)]
        public class AtmosphereFogSettings
        {
            float FogDensity;
            float FogStartDistance;
            float FogEndDistance;
            float FogDistanceCurvature;
            float FogHeight;
            float FogHeightFallOffRate;
            float HeightMapFogDensity;
            float HeightMapFogStartDistance;
            float HeightMapFogEndDistance;
            float HeightMapFogDistanceCurvature;
            float HeightMapFogHeightBias;
            float HeightMapFogHeightScale;
            FRGBAColor FogColor;
            float FogAmbientAbsorptionRate;
            float FogAmbientMinIntensity;
            float FogAmbientMaxIntensity;
            float FogHenyeyGreenstein;
            float FogGodRayMaxIntensity;
            float FogGodRayAttackRate;
            float FogGodRayAbsorptionRate;
            float RenderQualityForCascade1;
            float RenderQualityForCascade2;
            float RenderQualityForCascade3;
            bool FixSlices;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF74B56C0A4C580F, 0xA0)]
        public class AtmosphereFogSettingsResource : CoreObject
        {
            AtmosphereFogSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90A95FD2A6FAF877, 0xC)]
        public class AtmosphereHazeSettings
        {
            float HazeStartDistance;
            float HazeEndDistance;
            float HazeDensityCurvature;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1FB94E38F592B63, 0x30)]
        public class AtmosphereHazeSettingsResource : CoreObject
        {
            AtmosphereHazeSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD8548CD1BC71911, 0x90)]
        public class AtmosphereSkySettings
        {
            FRGBAColor SkyColor;
            float SkyZenithIntensity;
            float SkyHorizonIntensity;
            float SkyGradientPower;
            float SkyBrightness;
            FRange SkyFadeOffSunAngleRange;
            FRGBAColor SunLightAbsorptionCoefficient;
            float SunColorAbsorptionZenith;
            float SunColorAbsorptionHorizon;
            float SunColorAbsorptionGradientPower;
            FRange SunIntensityAngleFadeRange;
            float SunShapeIntensity;
            float SunShapeSize;
            Vec3 MieScatteringPhases;
            float MieIntensityGradientPower;
            float MieColorAbsorptionZenith;
            float MieColorAbsorptionHorizon;
            float MieColorGradientPower;
            float MieBaseIntensity;
            float MieLightShaftIntensity;
            float SunsetStartAngle;
            float SunsetEndAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC61F7F27B95DBC1, 0xB0)]
        public class AtmosphereSkySettingsResource : CoreObject
        {
            AtmosphereSkySettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DE4A439E1ED6952, 0x120)]
        public class AtmosphericScattingSettings
        {
            FRGBAColor SkyColor;
            float SkyZenithIntensity;
            float SkyHorizonIntensity;
            float SkyGradientPower;
            float SkyBrightness;
            FRange SkyFadeOffSunAngleRange;
            FRGBAColor SunLightAbsorptionCoefficient;
            float SunColorAbsorptionZenith;
            float SunColorAbsorptionHorizon;
            float SunColorAbsorptionGradientPower;
            FRange SunIntensityAngleFadeRange;
            float SunShapeIntensity;
            float SunShapeSize;
            Vec3 MieScatteringIntensity;
            float MieIntensityGradientPower;
            float MieColorAbsorptionZenith;
            float MieColorAbsorptionHorizon;
            float MieColorGradientPower;
            float MieBaseIntensity;
            float MieLightShaftIntensity;
            float SunsetStartAngle;
            float SunsetEndAngle;
            float HazeStartDistance;
            float HazeEndDistance;
            float HazeDensityCurvature;
            float FogDensity;
            float FogStartDistance;
            float FogEndDistance;
            float FogDistanceCurvature;
            float FogHeight;
            float FogHeightFallOffRate;
            float HeightMapFogDensity;
            float HeightMapFogStartDistance;
            float HeightMapFogEndDistance;
            float HeightMapFogDistanceCurvature;
            float HeightMapFogHeightBias;
            float HeightMapFogHeightScale;
            FRGBAColor FogColor;
            float FogAmbientAbsorptionRate;
            float FogAmbientMinIntensity;
            float FogAmbientMaxIntensity;
            float FogHenyeyGreenstein;
            float FogGodRayMaxIntensity;
            float FogGodRayAttackRate;
            float FogGodRayAbsorptionRate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20998B3B7524EAAB, 0x90)]
        public class AttachPhysicsInstanceComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA5D09687FC6FEA5, 0x38)]
        public class AttachPhysicsInstanceComponentResource : EntityComponentResource
        {
            Ref<PhysicsResource> PhysicsResource;
            bool NotifyNavMesh;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C39465BEFD9BFED, 0x140)]
        public class AttachPhysicsRagdollToHelperMover : AttachToHelperMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F9DD57893E3818E, 0xA0)]
        public class AttachPhysicsRagdollToHelperMoverResource : AttachToHelperMoverResource
        {
            int CollisionLayer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4AFD99906458D20D, 0xB0)]
        public class AttachToAimMatrixMover : AttachToEntityMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61B922D78A287369, 0x80)]
        public class AttachToAimMatrixMoverResource : AttachToEntityMoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F2F7E75060F8304, 0xF8)]
        public class AttachToEntityByPConstraintMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CFA2AD3D9ADE545, 0x90)]
        public class AttachToEntityByPConstraintMoverResource : MoverResource
        {
            Array<AttachmentPConstraint> Attachments;
            Mat44 OffsetFromParent;
            bool AttachToRagdoll;
            bool UseParentMover;
            bool UseChildMover;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2880593461DEE3C, 0xB0)]
        public class AttachToEntityMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE47C389A15AA7696, 0x80)]
        public class AttachToEntityMoverResource : MoverResource
        {
            Mat44 LocalMatrix;
            bool AlignToWorld;
            bool MakeKeyframed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF774EB5A85593CB8, 0x120)]
        public class AttachToHelperMover : AttachToEntityMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD314D92D22640ACD, 0x90)]
        public class AttachToHelperMoverResource : AttachToEntityMoverResource
        {
            String Helper;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3022A4CC19B13F5A, 0x190)]
        public class AttachToHelperPositionMover : AttachToEntityMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9052D217C2207A59, 0x90)]
        public class AttachToHelperPositionMoverResource : AttachToEntityMoverResource
        {
            String Helper;
            float Relaxation;
            float Dampening;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4EDC7FB516342A6C, 0xC0)]
        public class AttachToPartMover : AttachToEntityMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA3B6FDE442102B, 0x90)]
        public class AttachToPartMoverResource : AttachToEntityMoverResource
        {
            Ref<DestructibilityPart> DestructibilityPart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B954471F9BC5A08, 0x1F0)]
        public class AttachToSequenceLocatorMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BC2185A2DC95BF1, 0x30)]
        public class AttachToSequenceLocatorMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5ECC1CC7D6E34A6, 0xB0)]
        public class AttachToWorldMatrixMover : AttachToEntityMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1247C0212B6943CA, 0x90)]
        public class AttachToWorldMatrixMoverResource : AttachToEntityMoverResource
        {
            bool AlignUp;
            float Relaxation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E44C8AFA04AD18, 0xC0)]
        public class AttachToWorldMatrixVerticalDampeningMover : AttachToEntityMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C55CAC30642D0DD, 0x90)]
        public class AttachToWorldMatrixVerticalDampeningMoverResource : AttachToEntityMoverResource
        {
            float Relaxation;
            float Dampening;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53FE33000B5FE056, 0x2F0)]
        public class AttachableExplosive : Placeable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD72EDAB3A0DF01EA, 0x160)]
        public class AttachableExplosiveResource : PlaceableResource
        {
            Ref<ExplosionResource> ExplosionResource;
            Vec3 ExplosionOffset;
            String ScriptMessageID;
            float DangerAreaRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE02191E94AFD7841, 0x340)]
        public class AttachableUseLocation : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C9F05000B0EC5C1, 0x240)]
        public class AttachableUseLocationRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2A357F1710D84A1, 0x1D0)]
        public class AttachableUseLocationResource : EntityResource
        {
            Ref<UseLocationResource> ArmUseLocation;
            Ref<UseLocationResource> DisarmUseLocation;
            Vec3 UseLocationOffset;
            Vec3 AIWaypointSearchOffset;
            float MaxUseAngle;
            Ref<AttachableExplosiveResource> AttachableExplosiveResource;
            bool IsEnabled;
            bool ShouldBeRemovedOnUse;
            float ArmTime;
            float ArmResetTime;
            float DisarmTime;
            float DisarmResetTime;
            float AdditionalUserSpeedIncrease;
            bool ShouldBeKilledOnExplode;
            String DefendLocalizerTag;
            String ArmLocalizerTag;
            String DefuseLocalizerTag;
            Ref<FloatProperty> ArmPercentageProperty;
            Ptr<EntityAction> ExplosiveArmedAction;
            Ptr<EntityAction> ExplosiveRemovedAction;
            Ptr<EntityAction> EnabledAction;
            Ptr<EntityAction> DisabledAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD791D036CA09375E, 0x40)]
        public class AttachedAnnotationResource : Resource
        {
            Ref<AnnotationResource> Annotation;
            String HelperName;
            Ref<ModelPartResource> ModelPartResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x261682B60DECDDC2, 0x78)]
        public class AttachedDamageParticlesComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24B716B432B06F68, 0x38)]
        public class AttachedDamageParticlesComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x93FD2405628C82FE, 0x48)]
        public class AttachedDamageParticlesComponentResource : EntityComponentResource
        {
            float LifeTime;
            Ref<DamageAreaResource> DamageAreaResource;
            bool ShouldPreventDamageLoop;
            Ref<BoneAttachedParticleSystemResource> BoneAttachedParticleSystemResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE323EF9BC736226D, 0x30)]
        public class AttachedLightBinding
        {
            String HelperNodeName;
            Ref<LightResource> LightResource;
            float FadeInTime;
            float FadeOutTime;
            bool HideInFirstPersonView;
            Array<String> VisibleToFactions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6AC8F26F7404BDD, 0x90)]
        public class AttachedLightsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B815D99A446C8FB, 0x48)]
        public class AttachedLightsComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16CB996715A74D3E, 0x40)]
        public class AttachedLightsComponentResource : EntityComponentResource
        {
            Array<AttachedLightBinding> LightBindings;
            float MaxLightFadeOutTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD35D3DE36CF830B8, 0xB0)]
        public class AttachmentPConstraint
        {
            String ParentPartName;
            Ref<DestructibilityPart> ParentPart;
            Mat44 ParentLocalMatrix;
            String ChildPartName;
            Ref<DestructibilityPart> ChildPart;
            Mat44 ChildLocalMatrix;
            Ref<PhysicsConstraintResource> PConstraint;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7098C0551DD4A32, 0xE8)]
        public class AttackEventContext : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90204FF5F41AD19F, 0x110)]
        public class AttackEventContextGame : AttackEventContext
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3AA134C4C8B20CDC, 0xA8)]
        public class AttackEventInfo : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBAC6F5BE106EDD76, 0x28)]
        public class AttackEventInfoGame : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95E4F2644C0CC6FA, 0x70)]
        public class AttackEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1111AEF650A98F32, 0x50)]
        public class AttackEventManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x255D322F2BF22263, 0x50)]
        public class AttackEventManagerGame : AttackEventManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD57C8477B0C72983, 0x38)]
        public class AttackEventManagerResource : Resource
        {
            Array<Ref<AttackEventTag>> Tags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x409E5350FB4CECF7, 0x50)]
        public class AttackEventResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            Ref<LocatorResource> TargetLocatorResource;
            IRange BurstSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD8B0862FBC1F90CF, 0x28)]
        public class AttackEventTag : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDDD634D077859F4D, 0x50)]
        public class AttackerToVictimDamageModifier
        {
            String AttackerFactionName;
            bool AttackerIsPlayer;
            String VictimFactionName;
            bool VictimIsPlayer;
            ESelfDamage SelfDamage;
            float DamageModifier;
            Ref<CurveResource> DamageModifierCurve;
            float SeverityModifier;
            Ref<CurveResource> SeverityModifierCurve;
            String WeaponResourceName;
            String VictimResourceName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD495C2EA37FD0F9B, 0xF0)]
        public class AttributeAnimatorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8766C0302CDFA0D0, 0x30)]
        public class AttributeAnimatorComponentResource : EntityComponentResource
        {
            Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF714975BAA9EC85C, 0x88)]
        public class AttributeAnimatorInstance : ObjectAttributeAnimatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF3E0B8381197416, 0x48)]
        public class AttributeAnimatorResourceBase : ObjectAttributeAnimatorResource
        {
            String AttributeGroup;
            String AttributeName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F151610558E89ED, 0x50)]
        public class AttributeBoolAnimatorResource : AttributeAnimatorResourceBase
        {
            Ref<AnimationTrackLinearBool> AnimationTrack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E253C88983CF18E, 0x50)]
        public class AttributeFVector3AnimatorResource : AttributeAnimatorResourceBase
        {
            Ref<AnimationTrackLinearFVector3> AnimationTrack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66EBB31165BBDFC9, 0x50)]
        public class AttributeFVector4AnimatorResource : AttributeAnimatorResourceBase
        {
            Ref<AnimationTrackLinearFVector4> AnimationTrack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A65B60391D00AE1, 0x50)]
        public class AttributeFloatAnimatorResource : AttributeAnimatorResourceBase
        {
            Ref<AnimationTrackLinearFloat> AnimationTrack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E9376622A18B10A, 0xD0)]
        public class AttributeProjMatrixAnimatorInstance : AttributeAnimatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61EE2D4D74836D90, 0x60)]
        public class AttributeProjMatrixAnimatorResource : AttributeAnimatorResourceBase
        {
            Ref<AnimationTrackLinearFVector3> TranslationTrack;
            Ref<AnimationTrackLinearFVector3> ScalingTrack;
            Ref<AnimationTrackLinearFQuat> RotationTrack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1B041866C1C3F95, 0x50)]
        public class AttributeRGBAColorAnimatorResource : AttributeAnimatorResourceBase
        {
            Ref<AnimationTrackLinearRGBAColor> ColorTrack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4B617613A9FCD0B, 0xC8)]
        public class AttributeWorldTransformAnimatorInstance : AttributeAnimatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43864AF5C64F01AC, 0x60)]
        public class AttributeWorldTransformAnimatorResource : AttributeAnimatorResourceBase
        {
            Ref<AnimationTrackLinearFVector3> TranslationTrack;
            Ref<AnimationTrackLinearFVector3> ScalingTrack;
            Ref<AnimationTrackLinearFQuat> RotationTrack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77B87043B7B0EC5D, 0x58)]
        public class AudioEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71050F9BC53C5134, 0x58)]
        public class AudioEventResource : TimedEventResource
        {
            Ref<LocatorResource> PositionLocatorResource;
            float Volume;
            Ref<CurveResource> VolumeCurveResource;
            bool AutoScaleVolumeCurve;
            bool _3D;
            bool SoftFadeOut;
            bool SyncToSequenceWithPitch;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBC13742C8320799, 0xA0)]
        public class AudioPlayerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x704318A23C3BA977, 0x48)]
        public class AudioPlayerComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F2C74892894E98E, 0x50)]
        public class AudioPlayerComponentResource : EntityComponentResource
        {
            bool CanCancelAudioLog;
            bool ShouldPauseWhenWeaponSelectionActive;
            Ref<SoundResource> AudioLogStartingSound;
            Ref<SoundResource> AudioLogEndigSound;
            Ref<ConditionResource> CancelCondition;
            Ref<BooleanFact> IsPlayingAudioLogFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10A5CC7333A234EE, 0x4)]
        public class AuroraSettings
        {
            float Intensity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x863AAA0CE94B7865, 0x28)]
        public class AuroraSettingsResource : CoreObject
        {
            AuroraSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E1D227629C4B406, 0x70)]
        public class AuroraStaticSettings : CoreObject
        {
            FRGBAColor BottomColor;
            FRGBAColor TopColor;
            float AnimationSpeed;
            float ShapeAnimationSpeed;
            float ShapeVariationFrequency;
            float IntensityAnimationSpeed;
            float IntensityVariationFrequency;
            float SharpnessAnimationSpeed;
            float SharpnessVariationFrequency;
            float MinSharpness;
            float MaxSharpness;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC04638DE6CC4997, 0x90)]
        public class AutoAimHull : Resource
        {
            float AutoAimRange;
            float AutoAimHorizontalAngle;
            float AutoAimVerticalAngle;
            float AutoAimConeRange;
            float AutoAimEndRange;
            float AutoAimStartWidth;
            float AutoAimStartHeight;
            ConvexHull InternalHull;
            BoundingBox3 BoundingBox;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF40E4513CDE36208, 0x60)]
        public class AutoManagedWeaponComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC729B3A592D8B68, 0x60)]
        public class AutonomousBehaviorEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88615D2EA3141DD0, 0x40)]
        public class AutonomousBehaviorEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x316158892539C505, 0xB0)]
        public class AwarenessMarkerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7ACD6EBB1E7F6D9, 0x78)]
        public class AwarenessMarkerComponentResource : EntityComponentResource
        {
            Ref<AwarenessStateDisplaySettingsResource> FallbackAwarenessStateDisplaySettings;
            Array<Ref<WeaponMarkerMapping>> WeaponMarkerMap;
            Array<Ref<WeaponMarkerMapping>> TaggedWeaponMarkerMap;
            Array<Ref<WeaponMarkerMapping>> GestureMarkerMap;
            Array<Ref<WeaponMarkerMapping>> TaggedGestureMarkerMap;
            Ref<LocationMarkerResource> LocationMarker;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6325D57E002FF2BA, 0x58)]
        public class AwarenessMarkerDisplaySettings : Resource
        {
            bool OnlyShowWhenPlayerTarget;
            bool VisibleInView;
            float MaxDistance;
            Ref<UITexture> UIIcon;
            Ref<UITexture> UIOverlayImage;
            Ref<UITexture> UIBlinkImage;
            Ref<CurveResource> BlinkCurve;
            bool CanShowTagIcon;
            bool CanShowTypeClassIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BD5A4CDDEBFC757, 0x80)]
        public class AwarenessStateDisplaySettingsResource : Resource
        {
            Ref<AwarenessMarkerDisplaySettings> UndetectedAndHidden;
            Ref<AwarenessMarkerDisplaySettings> UndetectedAndHiddenTransition;
            Ref<AwarenessMarkerDisplaySettings> UndetectedAndPerceived;
            Ref<AwarenessMarkerDisplaySettings> UndetectedAndPerceivedTransition;
            Ref<AwarenessMarkerDisplaySettings> SuspectedAndHidden;
            Ref<AwarenessMarkerDisplaySettings> SuspectedAndHiddenTransition;
            Ref<AwarenessMarkerDisplaySettings> SuspectedAndPerceived;
            Ref<AwarenessMarkerDisplaySettings> SuspectedAndPerceivedTransition;
            Ref<AwarenessMarkerDisplaySettings> IdentifiedToSuspectedTransition;
            Ref<AwarenessMarkerDisplaySettings> IdentifiedAndPerceived;
            Ref<AwarenessMarkerDisplaySettings> Searching;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6ED62073936BADF0, 0x20)]
        public class BakeConfiguration : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1749B682977D8E5D, 0x20)]
        public class BakedInstanceData
        {
            int InstanceCount;
            int ChannelCount;
            Ref<DataBufferResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D8BDCB260D82DE2, 0x40)]
        public class BandwidthMeasurementService : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2C1DA36D73DC46A, 0x20)]
        public class BaseResource : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0EBC7E36E6A95B, 0x18)]
        public class BaselineTimes : RTTIObject
        {
            EDifficulty Difficulty;
            float FastTime;
            float BaselineTime;
            float SlowTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC16EAFAF7B9DEFC, 0x68)]
        public class BasicAnimationEventInstance : AnimationEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2657FC6511B1C392, 0x58)]
        public class BasicAnimationEventResource : AnimationEventResource
        {
            Ref<AnimationLinkResource> AnimationLink;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE6C78D0EC55DD45, 0x180)]
        public class BasicControlledEntityAIController : Controller
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE66770D67FDD0E36, 0x4E0)]
        public class BeamEjector : ContinuousAmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4492E012CB882CB4, 0x1D0)]
        public class BeamEjectorRep : ContinuousAmmoEjectorRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20CC573A77B4C921, 0x270)]
        public class BeamEjectorResource : ContinuousAmmoEjectorResource
        {
            float Range;
            Array<Ref<DamageSettings>> DamageSettingsSP;
            Array<Ref<DamageSettings>> DamageSettingsMP;
            Array<Ref<DamageSettings>> DamageSettingsAI;
            Array<Ref<DamageSettings>> InitialHitDamageSettingsSP;
            Array<Ref<DamageSettings>> InitialHitDamageSettingsMP;
            Array<Ref<DamageSettings>> InitialHitDamageSettingsAI;
            float MaxContinuousDamageDuration;
            bool ShareMaxDurationAcrossAllBeams;
            Ref<LaserBeamResource> LaserBeamResource;
            MaterialType ImpactMaterialType;
            int NumberOfBeams;
            float SeperationAngle;
            EIntersectionMethod IntersectionMethod;
            float BeamCollisionRadius;
            bool UseEjectorDirection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24CF46669C17C89, 0x58)]
        public class BinocularsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4D39D020E3FEF10, 0x30)]
        public class BinocularsComponentResource : EntityComponentResource
        {
            float MaxTagRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x584E1E6E22E6D730, 0x60)]
        public class BinocularsTaggableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB0E78F99C45F812B, 0x38)]
        public class BinocularsTaggableComponentResource : EntityComponentResource
        {
            Array<Ref<EntityComponentResource>> EntityComponents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DA7A336F44776EE, 0x60)]
        public class Biotope : BiotopeBase
        {
            Ref<CurveResource> AltitudeAffinity;
            Ref<CurveResource> SlopeAffinity;
            Ref<CurveResource> MaskAffinity;
            EMaskChannel MaskChannel;
            EHeightChannel HeightChannel;
            Array<Ref<PopulationPlacement>> Placements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB012FF4A2B8BDF53, 0x28)]
        public class BiotopeBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF8B3D4139363277, 0x40)]
        public class BiotopeSet : BiotopeBase
        {
            Array<Ref<BiotopeBase>> Biotopes;
            EMaskChannel MasterMask;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4222E8B92D481A6, 0x10)]
        public class BitstreamData
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x811486F25B793F60, 0x18)]
        public class BlendTargetDeformation
        {
            String Name;
            Array<PrimitiveDeltaDeformation> Deformations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB09B2B3CEFF3F9B1, 0x10)]
        public class BlendedMeshEntry
        {
            Ref<BlendedMeshResource> BlendedMesh;
            float BlendDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37A05F8FDF1DF3C7, 0x70)]
        public class BlendedMeshEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x987E2F8800BB44DE, 0x50)]
        public class BlendedMeshEventResource : ScaleableTimedEventResource
        {
            Ref<LocatorResource> PositionLocatorResource;
            Ref<MultiBlendedMeshResource> MultiBlendedMeshResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CB00C52143851B8, 0xE0)]
        public class BlendedMeshInstance : GeometryObject
        {
            String Name;
            Ref<BlendedMeshResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD8F55E7672174D0, 0xE0)]
        public class BlendedMeshResource : MeshResourceBase
        {
            Array<Ref<RenderingPrimitiveResource>> PrimitivesMeshA;
            Array<Ref<RenderingPrimitiveResource>> PrimitivesMeshB;
            Array<Ref<RenderEffectResource>> RenderEffects;
            Array<int> PrimitiveRenderEffectMapping;
            DrawFlags DrawFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA07F82D615119ABA, 0xB8)]
        public class BlindableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87986F605B454482, 0x48)]
        public class BlindableComponentResource : EntityComponentResource
        {
            Ptr<EntityAction> BlindedAction;
            Ptr<EntityAction> UnBlindedAction;
            float MaxBlindingAngle;
            float BlindableRadius;
            String BlindingHelperName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B602E45F1E03143, 0x48)]
        public class BloodPuddleSettings : Resource
        {
            FRange RandomInterval;
            float BloodPuddleLeadTime;
            IRange Amount;
            float PlacementRadius;
            MaterialType MaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF6619C5DE80E4F, 0x40)]
        public class BloomLookupData : Resource
        {
            Array<FRGBAColor> Data;
            int Stride;
            int Size;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24D06760FA7B8C25, 0x60)]
        public class BloomSettings
        {
            float BlackPoint;
            float WhitePoint;
            float Strength;
            float ILRStrength;
            float ILRSharpStrength;
            uint ILRBlurCount;
            Array<FRGBAColor> ILRElements;
            Array<FRGBAColor> ILRSharpElements;
            EPostProcessBlendMode BlendMode;
            Ref<CurveResource> StrengthScaleOverDistance;
            Ref<CurveResource> BlackPointOverDistance;
            Ref<CurveResource> WhitePointOverDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C30EB580C9FE343, 0x88)]
        public class BloomSettingsResource : Resource
        {
            float BlackPoint;
            float WhitePoint;
            float Strength;
            float ILRStrength;
            float ILRSharpStrength;
            uint ILRBlurCount;
            Array<FRGBAColor> ILRElements;
            Array<FRGBAColor> ILRSharpElements;
            EPostProcessBlendMode BlendMode;
            Ref<CurveResource> StrengthScaleOverDistance;
            Ref<CurveResource> BlackPointOverDistance;
            Ref<CurveResource> WhitePointOverDistance;
            Ref<BloomLookupData> BloomTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36679006F125B45, 0x70)]
        public class BlurSettingsResource : Resource
        {
            Vec2 Position;
            float InnerRadius;
            float OuterRadius;
            float Scale;
            Vec2 MotionBlurScaleCenter;
            float MotionBlurScaleInner;
            float MotionBlurScaleOuter;
            float MotionBlurScaleInnerRadius;
            float MotionBlurScaleOuterRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x861846F318EAE682, 0x10)]
        public class BodyPoseSwitchDisallowBoolProperty
        {
            BoolPropertyLink Link;
            bool TestValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D8153FA54D592C9, 0x58)]
        public class BodyVariantComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE65FFD5C3314FF3, 0x38)]
        public class BodyVariantComponentResource : EntityComponentResource
        {
            Array<StreamingRef<HumanoidBodyVariant>> Variants;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8FB881059F94B41, 0x58)]
        public class BodyVariantHideHeadgearComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC16F3F23211A10B5, 0x38)]
        public class BodyVariantHideHeadgearComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF15A7D85843BD9E1, 0x38)]
        public class BodyVariantHideHeadgearComponentResource : EntityComponentResource
        {
            Array<Ref<LodMeshResource>> LodMeshResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95AA7941391F81DC, 0x118)]
        public class BodyVariantRuntimeComponent : EntityComponent
        {
            StreamingRef<HumanoidBodyVariant> BodyVariant;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD72468DA630C4009, 0x38)]
        public class BodyVariantRuntimeComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE5502C9D51DC41E, 0x30)]
        public class BokehSettings
        {
            int IrisBladeCount;
            float IrisRoundness;
            float IrisRotation;
            float IrisFalloff;
            float SphericalAberrationLevel;
            float SphericalAberrationPower;
            float CatEyeRadius;
            float CatEyeStrength;
            float CatEyeFalloff;
            float NoiseFrequency;
            float NoiseAmplitude;
            float ChromaticAberration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA78C863FAF7791B1, 0x60)]
        public class BokehSettingsResource : Resource
        {
            BokehSettings BokehSettings;
            Ref<Texture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6AED4402EC793C5F, 0x48)]
        public class BoneAttachedParticleSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA6177EF13E56D6F, 0x70)]
        public class BoneAttachedParticleSystemLink
        {
            Ref<ParticleSystemResource> ParticleSystem;
            Ref<LightResource> LightResource;
            Ref<CurveResource> LightIntensityCurve;
            Ref<SoundResource> SoundResource;
            String BoneName;
            bool AlignToWorld;
            Mat44 OffsetMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6965A6BB791D308B, 0x40)]
        public class BoneAttachedParticleSystemResource : Resource
        {
            Array<BoneAttachedParticleSystemLink> AttachedParticleSystems;
            float LifeTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2BFF43EE833B0C, 0x1B0)]
        public class BoneLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49A009BC97F8EE5E, 0x90)]
        public class BoneLocatorResource : LocatorResource
        {
            String BoneName;
            Ref<EntityActorResource> EntityActorResource;
            Mat44 LocalMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x557144C701431B98, 0x8)]
        public class BoneRemapEntry
        {
            int Name;
            bool ParentRemapped;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49DB8ED4D1EB432C, 0x30)]
        public class BoolProperty : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A68CEDDC19C030A, 0x30)]
        public class BoolPropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA676D4C5481CAC93, 0x8)]
        public class BoolPropertyLink : PropertyLinkBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ref<BoolPropertyBase> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA37488DFA8071E29, 0x10)]
        public class BoolPropertyToSoundParameterMapping
        {
            Ref<BoolPropertyBase> Property;
            String SoundParameterName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB40D5D07E49C3282, 0x38)]
        public class BooleanFact : Fact
        {
            bool DefaultValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2959D183D46914D5, 0x58)]
        public class BooleanFactConditionInstance : ConditionInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B93416CB458B82, 0x50)]
        public class BooleanFactConditionResource : ConditionResource
        {
            Array<BooleanFactConditionSettings> Facts;
            EBooleanFactOperator Operator;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x968C5AD618B5C45D, 0x10)]
        public class BooleanFactConditionSettings
        {
            Ref<BooleanFact> Fact;
            bool IsInverted;
            EBooleanFactConditionMode Mode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67EDEF78A9D12E0E, 0x38)]
        public class BooleanFactQuestTrigger : QuestTrigger
        {
            Ref<BooleanFact> Fact;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFB5E8B8B68714EE, 0x30)]
        public class BooleanFactQuestTriggerInstance : FactQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC5A053AF64BD7E42, 0x58)]
        public class BooleanFactSelectEventInstance : SelectEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BCF108CEFD776BD, 0x58)]
        public class BooleanFactSelectEventInstance2 : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D9842A96CA973E, 0x70)]
        public class BooleanFactSelectEventResource : SelectEventResource
        {
            Ref<BooleanFact> Fact;
            ESequenceFactContextType FactContextType;
            Ref<EntityActorResource> EntityActorResource;
            Array<Ref<EventResource>> TrueEvents;
            Array<Ref<EventResource>> FalseEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD74F97AD20DC654E, 0x70)]
        public class BooleanFactSelectEventResource2 : TimedEventResource
        {
            Ref<BooleanFact> Fact;
            ESequenceFactContextType FactContextType;
            Ref<EntityActorResource> EntityActorResource;
            Array<Ref<EventResource>> TrueEvents;
            Array<Ref<EventResource>> FalseEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD8FE12321A28A20, 0x48)]
        public class BotNames : Resource
        {
            Array<WString> IsaNames;
            Array<WString> HghNames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A59ED5CFB766EC3, 0x20)]
        public class BoundingBox2
        {
            Vec2 Min;
            Vec2 Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6CAF73469B380E32, 0x20)]
        public class BoundingBox3
        {
            Vec3 Min;
            Vec3 Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6B136E851D6E31A, 0x18)]
        public class BoundingBox3Pack
        {
            Vec3Pack Min;
            Vec3Pack Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B65EFA55EF18D8, 0x80)]
        public class BoundingBoxBasedActivationPolicy : EntityActivationPolicy
        {
            BoundingBox3 LocalActivationBox;
            BoundingBox3 LocalDeactivationBox;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B2A8945F87FE9E3, 0xF0)]
        public class BoundingBoxVolumetricAnnotation : VolumetricAnnotation
        {
            OrientedBox OrientedBox;
            Mat44 OrientedBoxMatrix;
            Vec3 OrientedBoxMin;
            Vec3 OrientedBoxMax;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9995612305B47C0, 0x10)]
        public class BoundingSphere
        {
            Vec3 Center;
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA91E4E06B14D7B0D, 0x50)]
        public class BoundingSphereVolumetricAnnotation : VolumetricAnnotation
        {
            BoundingSphere BoundingSphere;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64D93B70B2CC886B, 0x60)]
        public class Breadcrumb : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x81122CA70A97FC02, 0x78)]
        public class BuddyComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64091830BA6BAA21, 0x38)]
        public class BuddyComponentResource : EntityComponentResource
        {
            float TeleportThreshold;
            FRange TeleportPositionRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x358A3DFDD9237AB8, 0xB0)]
        public class BuddyContextualOrderResource : ContextualOrderResource
        {
            Ptr<EntityAction> ActionOnBuddy;
            bool CanBeOverruled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7374806C6ED90678, 0x20)]
        public class BuddyManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54600FF3BEBFBF9B, 0x30)]
        public class BuddyModeSwitchAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBBD16E6B9CA29A1, 0x88)]
        public class BuddyOrderComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x980264E5E34C2FF1, 0x40)]
        public class BuddyOrderComponentResource : EntityComponentResource
        {
            Array<Ref<InventoryContextualOrderAbilityResource>> ContextualAbilities;
            Ref<BuddyContextualOrderResource> ReviveOrder;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68483B9E9EBD2BD5, 0x50)]
        public class BuddySequenceEntityVariable : SequenceEntityVariable
        {
            Ref<BuddyComponentResource> BuddyComponentResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6788F68D8A11A9E8, 0x98)]
        public class BuddySequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF07AC1C1EF359E2, 0x1D0)]
        public class BuddySpawnpoint : Spawnpoint
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC35DDE27314C9466, 0x520)]
        public class BulletEjector : DiscreteAmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56006CC0B8D15E7, 0x1E0)]
        public class BulletEjectorRep : DiscreteAmmoEjectorRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35D71CEAE39E838C, 0x2E0)]
        public class BulletEjectorResource : DiscreteAmmoEjectorResource
        {
            Ref<CurveResource> DamageOverDistanceCurveSP;
            Ref<CurveResource> DamageOverDistanceCurveMP;
            Ref<CurveResource> DamageOverDistanceCurveAI;
            Ref<CurveResource> ImpactImpulseOverDistanceCurve;
            Ref<CurveResource> ImpactImpulseOverDistanceCurveForHumanoids;
            Ref<CurveResource> ImpactSeverityOverDistanceCurve;
            Ref<DamageTypeResource> DamageTypeResource;
            int PenetrationPower;
            float ExitVelocitySP;
            float ExitVelocityMP;
            float ExitVelocityAI;
            Ref<AIAuralStimulusResource> ImpactSoundStimulus;
            Ref<AIVisualStimulusResource> ImpactVisualStimulus;
            MaterialType BulletMaterialType;
            Ref<BulletTracerSettings> BulletTracerSettings;
            float VelocityModifier;
            float DamageModifier;
            int MaximumHits;
            float RandomRicochetAngle;
            float ChanceModifier;
            Ptr<EntityAction> Impact_BulletImpactAction;
            Ref<ChargedValueFloat> DamageMultiplier;
            Ref<ChargedValueEntityAction> Charged_BulletImpactAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9F895FD1E6CD893, 0x340)]
        public class BulletSystem : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4220B423F02C6B0C, 0x270)]
        public class BulletSystemRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA853B181FD7FDA7, 0x170)]
        public class BulletSystemResource : EntityResource
        {
            int MaxWhizzSounds;
            Ref<CurveResource> FirstPersonTracerManipulation;
            MaterialType BloodSpatterMaterialType;
            Array<MaterialType> FleshMaterialTypes;
            float StartOffset;
            float EndOffset;
            bool IsRicochetEnabled;
            Ref<BulletTracerSettings> DefaultBulletTracerSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEECD61057C95E215, 0x70)]
        public class BulletTimeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3271CFE9C8016CB, 0x50)]
        public class BulletTimeComponentResource : EntityComponentResource
        {
            int InitialAmountOfSegments;
            float DepletionTime;
            float RechargeTime;
            Ref<SlowMotionSettingResource> SlowMotionSettings;
            Array<PerkDurationMapping> UpgradeMapping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAE61CFF1DD1A1DF, 0x70)]
        public class BulletTracerSettings : Resource
        {
            float CirclePosition;
            Ref<RenderEffectResource> LineRenderEffectsResource;
            Ref<RenderEffectResource> CircleRenderEffectsResource;
            Ref<SoundResource> WhizzSound;
            float TracerLength;
            float TracerWidth;
            RGBAColor TracerColor;
            int TracerInterval;
            int TracerTrailInterval;
            bool RandomTracerInterval;
            float TracerFadeInDistance;
            Ref<ParticleSystemResource> TrailParticleSystemResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27FC5146C5429497, 0x18)]
        public class ButtonIcon
        {
            EIconType Button;
            Ref<UITexture> Texture;
            Ref<UITexture> HoldTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC43E326766CBBCF, 0x38)]
        public class ButtonIconCollection : Resource
        {
            Array<ButtonIcon> ButtonIcons;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7281FF6551E84F47, 0x78)]
        public class ButtonInputEventInstance : PausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6160725BC232E41A, 0x78)]
        public class ButtonInputEventResource : PausableEventResource
        {
            Ref<EntityActorResource> PlayerActorResource;
            Array<EDeviceFunction> Buttons;
            Ref<PlayerNotificationResource> Notification;
            float AISuccessChance;
            bool FailOnWrongButtonPress;
            String SucceededVariable;
            String FailedVariable;
            String ReplicationID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DD373C61862B856, 0x8)]
        public class ButtonPressureOverride
        {
            EButton Button;
            uint8 Pressure;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF98869C1B88849E8, 0x68)]
        public class BuyBackComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23257D0D60E7FE46, 0x48)]
        public class BuyBackComponentResource : EntityComponentResource
        {
            Array<UUIDRef<EntityResource>> BlacklistedItems;
            ELootItemRarity MinimalItemRarity;
            int MaxItemCount;
            float PriceModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16F9F6994A8BDE54, 0x38)]
        public class BuyBackItemRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x527946DBCC42AAD7, 0x30)]
        public class CEffectsSettings : ProjectSettings
        {
            Ref<ImpactEffectSystemSettings> ImpactEffectSystemSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB321730BFFB5DEF2, 0x38)]
        public class CPUProfileWindowGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E17A9CD85FAE366, 0x30)]
        public class CSoundSettings : ProjectSettings
        {
            Ref<GraphProgramResource> GuDaProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84100B92F9A18B35, 0x78)]
        public class CachedHelperLocationsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC75BF38144DCFF43, 0x90)]
        public class Camera : WorldNode
        {
            String Name;
            Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
            bool UseMouse;
            bool UseJoystick;
            bool UseKeyboard;
            float NearPlane;
            float FarPlane;
            float FieldOfView;
            float ViewConeAspect;
            bool Perspective;
            float Zoom;
            bool FOVAspectAdjust;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73C540B6861C9505, 0x128)]
        public class CameraActorInstance : EntityActorInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F2E5F7E4D917DD6, 0xB8)]
        public class CameraActorResource : ActorResource
        {
            Ref<LocatorResource> PositionLocatorResource;
            Ref<CameraEntityResource> CameraEntityResource;
            int InTransitionFrames;
            ECameraTransitionFunction InTransitionFunction;
            int OutTransitionFrames;
            ECameraTransitionFunction OutTransitionFunction;
            float TransitionDistanceThreshold;
            float TransitionAngleThreshold;
            Ref<CurveResource> TransitionAngleToFrames;
            Ref<CurveResource> FOV;
            Ref<LocatorResource> FocalPlaneLocatorResource;
            Ref<CurveResource> NearFuzzy;
            Ref<CurveResource> NearSharp;
            Ref<CurveResource> FarFuzzy;
            Ref<CurveResource> FarSharp;
            Ref<CurveResource> MaxFuzzyNear;
            Ref<CurveResource> MaxFuzzyFar;
            int ClipOffset;
            float ClipSpeed;
            bool UseGameCamera;
            bool UseViewMagnets;
            float WaitToUnbind;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD6A6F250E40F826, 0x20)]
        public class CameraActorSnapshot : ActorSnapshot
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FB637928F5A0FFC, 0x48)]
        public class CameraBlend : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68B298E1F0F857A8, 0xA8)]
        public class CameraBlendBySettings : CameraBlend
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA83C97887CF22AEE, 0x90)]
        public class CameraBlendBySettingsRep : CameraBlendRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC407A3411432286, 0x50)]
        public class CameraBlendDirectControl : CameraBlend
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x369C4B19813ABE29, 0x68)]
        public class CameraBlendDirectControlRep : CameraBlend
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7D2767DFC2697AF, 0x38)]
        public class CameraBlendRep : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59CE72895A9D15C8, 0x20)]
        public class CameraBlendSettings : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9845759059C188AE, 0x28)]
        public class CameraBlendSettingsCurve : CameraBlendSettings
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE04DD1D3A5D29F9D, 0x28)]
        public class CameraBlendSettingsDuration : CameraBlendSettings
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB516E21EB7202AD, 0x80)]
        public class CameraBlendSettingsMorphemeDurationEvent : CameraBlendSettings
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A73DB2DCC9558F, 0x50)]
        public class CameraBlendSettingsMorphemeDurationEventRep : CameraBlendSettings
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8465B788FB6D116B, 0x40)]
        public class CameraCollision : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x25B002BC25C9E204, 0x8)]
        public class CameraCollisionRail
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD0B4ECE48E28AAE, 0x30)]
        public class CameraCollisionResource : Resource
        {
            Ref<CameraCollisionResource> BaseCameraCollisionResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9725CFD25F656ACA, 0x38)]
        public class CameraDoFProperties : CameraPropertiesBase
        {
            float NearFuzzy;
            float NearSharp;
            float FarFuzzy;
            float FarSharp;
            float MaxFuzzyNear;
            float MaxFuzzyFar;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5319D981BC30070D, 0x470)]
        public class CameraEntity : Entity
        {
            float FOV;
            float NearFuzzy;
            float NearSharp;
            float FarFuzzy;
            float FarSharp;
            float MaxFuzzyNear;
            float MaxFuzzyFar;
            float NearPlane;
            float FarPlane;
            float StereoDepth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C513F64C75FA9E8, 0x320)]
        public class CameraEntityRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD0D052D5D73460E, 0x1D8)]
        public class CameraEntityResource : EntityResource
        {
            float CameraShakeMultiplier;
            float FirstPersonNearPlane;
            bool ShowFirstPersonModel;
            float NearPlane;
            float FarPlane;
            float StereoDepth;
            EAAMode AAMode;
            float FOV;
            float Zoom;
            float HorizontalFOV;
            float HorizontalFirstPersonFOV;
            float NearFuzzy;
            float NearSharp;
            float FarFuzzy;
            float FarSharp;
            float MaxFuzzyNear;
            float MaxFuzzyFar;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2244BFD103F6DD3, 0x38)]
        public class CameraGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC510F0CCADF42303, 0x1)]
        public class CameraHelpers : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCADD46066EB49F, 0x68)]
        public class CameraMagnet : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16BB44CA1FEA93D4, 0x118)]
        public class CameraMagnetComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFD506B6259ECF2, 0x80)]
        public class CameraMagnetComponentResource : EntityComponentResource
        {
            Ref<CameraMagnetTagResource> Tag;
            float Weight;
            float Strength;
            String Helper;
            Vec3 Offset;
            Ref<CurveResource> MagnetSpringX;
            Ref<CurveResource> MagnetSpringY;
            Ref<CurveResource> MagnetSpringZ;
            bool CoopShared;
            bool RemoveOnDie;
            MagnetLookAtSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B99C504C192EDB4, 0x50)]
        public class CameraMagnetManager : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A8E521F45991CCA, 0x48)]
        public class CameraMagnetManagerResource : Resource
        {
            Array<Ref<CameraMagnetTagResource>> CameraMagnetTagResources;
            int MagnetPoolBase;
            int MagnetPoolMin;
            int MagnetPoolMax;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9247AF6834B5F11, 0xE8)]
        public class CameraMagnetParmResource : Resource
        {
            Ref<CameraMagnetParmResource> BaseCameraMagnetParmResource;
            Ref<CameraMagnetTagResource> Tag;
            CameraParmFloat Weight;
            CameraParmFloat Strength;
            Ref<CurveResource> ViewRangeToWeight;
            Ref<CurveResource> ViewAngleToWeight;
            Ref<CurveResource> ViewHeadingToWeight;
            Ref<CurveResource> ViewPitchToWeight;
            Ref<CurveResource> OriginRangeToWeight;
            Ref<CurveResource> OriginAngleToWeight;
            Ref<CurveResource> OriginHeadingToWeight;
            Ref<CurveResource> OriginPitchToWeight;
            Ref<CurveResource> ViewRangeToStrength;
            Ref<CurveResource> ViewAngleToStrength;
            Ref<CurveResource> ViewHeadingToStrength;
            Ref<CurveResource> ViewPitchToStrength;
            Ref<CurveResource> OriginRangeToStrength;
            Ref<CurveResource> OriginAngleToStrength;
            Ref<CurveResource> OriginHeadingToStrength;
            Ref<CurveResource> OriginPitchToStrength;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4E3A21BFE1E143F, 0x58)]
        public class CameraMagnetResult
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC32AB6C4047E82BF, 0x28)]
        public class CameraMagnetTagResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD85FD758871F9804, 0x80)]
        public class CameraManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60C0A42F46023EE4, 0x40)]
        public class CameraMiscProperties : CameraPropertiesBase
        {
            float CameraShakeMultiplier;
            float FirstPersonNearPlane;
            bool ShowFirstPersonModel;
            float NearPlane;
            float FarPlane;
            float StereoDepth;
            EAAMode AAMode;
            float LightingFOV;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA49902482E4E0FE, 0x270)]
        public class CameraMode : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x923AB9A3F030680D, 0x1E0)]
        public class CameraModeResource : Resource
        {
            Ref<CameraModeResource> BaseCameraModeResource;
            Ref<CameraCollisionResource> CameraCollisionResource;
            CameraParmMagnetParms LookMagnetParms;
            Ref<CurveResource> LookSpringHeading;
            Ref<CurveResource> LookSpringPitch;
            Ref<CurveResource> FocusHeadingSpeedToLookScaler;
            Ref<CurveResource> FocusPitchSpeedToLookScaler;
            Ref<CurveResource> ViewHeadingSpeedToLookScaler;
            Ref<CurveResource> ViewPitchSpeedToLookScaler;
            CameraParmMagnetParms FrameMagnetParms;
            Ref<CurveResource> FrameSpringHeading;
            Ref<CurveResource> FrameSpringPitch;
            Ref<CurveResource> FocusHeadingSpeedToFrameScaler;
            Ref<CurveResource> FocusPitchSpeedToFrameScaler;
            Ref<CurveResource> ViewHeadingSpeedToFrameScaler;
            Ref<CurveResource> ViewPitchSpeedToFrameScaler;
            Ref<CurveResource> MagnetResetSpringHeading;
            Ref<CurveResource> MagnetResetSpringPitch;
            Ref<CurveResource> FocusHeadingSpeedToMagnetResetScaler;
            Ref<CurveResource> FocusPitchSpeedToMagnetResetScaler;
            Ref<CurveResource> ViewHeadingSpeedToMagnetResetScaler;
            Ref<CurveResource> ViewPitchSpeedToMagnetResetScaler;
            Ref<CurveResource> ViewHeadingToMagnetHeadingMin;
            Ref<CurveResource> ViewHeadingToMagnetHeadingMax;
            Ref<CurveResource> ViewPitchToMagnetPitchMin;
            Ref<CurveResource> ViewPitchToMagnetPitchMax;
            CameraParmBool IsAiming;
            CameraParmMagnetParms HardAimMagnetParms;
            Ref<CurveResource> HardAimSpringHeading;
            Ref<CurveResource> HardAimSpringPitch;
            Ref<CurveResource> FocusHeadingSpeedToHardAimScaler;
            Ref<CurveResource> FocusPitchSpeedToHardAimScaler;
            Ref<CurveResource> ViewHeadingSpeedToHardAimScaler;
            Ref<CurveResource> ViewPitchSpeedToHardAimScaler;
            CameraParmFloat BaseSmoothing;
            CameraParmBool RotateWithBase;
            CameraParmMagnetParms EntityLookAtMagnetParms;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF3E10C5ECD0C19F, 0x28)]
        public class CameraModeScalers : CameraScalers
        {
            Array<Ref<CameraModeResource>> CameraModeResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE694E21530AAA8FD, 0x90)]
        public class CameraModifierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18417AF9D5C52B71, 0x30)]
        public class CameraModifierComponentResource : EntityComponentResource
        {
            Ref<CameraModifierResource> CameraModifierResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAD4389E5E93BE45, 0x60)]
        public class CameraModifierResource : Resource
        {
            float CameraModifierLifeTime;
            Ref<SelectResource> CameraModeSelector;
            CameraScalers CameraScalers;
            Array<CameraModeScalers> CameraModeScalers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB10BEF7193E0B8A, 0x2E0)]
        public class CameraOrbitFollow : CameraMode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20D1DACB4D7E8572, 0x4E0)]
        public class CameraOrbitFollowResource : CameraModeResource
        {
            CameraParmVec3 OriginPosOffset;
            CameraParmVec3 OriginRotAxes;
            CameraParmString OriginHelperName;
            CameraParmBool OriginHelperOnPlayer;
            CameraParmVec3 OriginHelperPosAxes;
            CameraParmVec3 OriginHelperRotAxes;
            CameraParmBool KeepOriginAboveWater;
            CameraParmBool OrientOriginToDestination;
            CameraParmFloat DefaultFocusHeight;
            CameraParmFloat DefaultFocusRange;
            CameraParmFloat DefaultFocusOrbit;
            CameraParmFloat DefaultViewOrbit;
            CameraParmFloat DefaultViewPitch;
            Ref<CurveResource> DefaultSpringFocusHeight;
            Ref<CurveResource> DefaultSpringFocusRange;
            Ref<CurveResource> DefaultSpringFocusOrbit;
            Ref<CurveResource> DefaultSpringViewOrbit;
            Ref<CurveResource> DefaultSpringViewPitch;
            Ref<CurveResource> DefaultSpringViewRoll;
            Ref<CurveResource> FocusSpringX;
            Ref<CurveResource> FocusSpringY;
            Ref<CurveResource> FocusSpringZ;
            Ref<CurveResource> FocusSpringOrbit;
            CameraParmVec3 FocusRangeMax;
            CameraParmVec3 FocusRangeMin;
            Ref<CurveResource> InputToOrbit;
            CameraParmFloat InputAccelOrbitMax;
            CameraParmFloat InputAccelPitchMax;
            CameraParmBool BreakFollowOnInput;
            CameraParmFloat FollowDelay;
            CameraParmFloat FollowDistance;
            CameraParmBool FollowTargetRotation;
            CameraParmFloat FollowOrbitBuffer;
            Ref<CurveResource> FollowSpringOrbit;
            Ref<CurveResource> FollowSpringPitch;
            Ref<CurveResource> FollowSpeedToOrbitScalar;
            Ref<CurveResource> FollowSpeedToPitchScalar;
            CameraParmFloat FollowAccelOrbitMax;
            CameraParmFloat FollowAccelPitchMax;
            Ref<ResourceSelectorBase> FOVSelector;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5443D62A7569AB7D, 0xCF0)]
        public class CameraOrbitHull : CameraCollision
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3B27ECA5CF86A09, 0x1B0)]
        public class CameraOrbitHullResource : CameraCollisionResource
        {
            CameraParmFloat ViewPitchMin;
            CameraParmFloat ViewPitchMax;
            CameraParmFloat ViewRangeScalerMax;
            Ref<CurveResource> ViewHeadingToRangeMax;
            Ref<CurveResource> ViewPitchToRangeMax;
            CameraParmCollisionLayer ViewObstructionLayer;
            CameraParmCollisionLayer ViewCollisionLayer;
            Ref<CurveResource> RotationSpringOrbit;
            CameraParmFloat FocusProbeRadius;
            Ref<CurveResource> FocusProbeSpring;
            Ref<CurveResource> FocusProbeOffsetToRangeScaler;
            CameraParmFloat ViewProbeWidth;
            CameraParmFloat RangeProbeRadius;
            CameraParmInt RangeProbeHeadingSegments;
            CameraParmInt RangeProbePitchSegments;
            Ref<CurveResource> RangeProbeSpringPitch;
            Ref<CurveResource> RangeProbeSpringRange;
            Ref<CurveResource> RangeProbeSpringCollision;
            Ref<CurveResource> SurfaceProbeSpring;
            CameraParmFloat AutoZoomRadius;
            CameraParmVec3 AutoZoomOffset;
            Ref<CurveResource> AutoZoomRangeToScaler;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FD4142C21365BE4, 0x10)]
        public class CameraParm
        {
            bool Override;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF589B3CA07604B74, 0x18)]
        public class CameraParmBool : CameraParm
        {
            bool Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE198C756A7BE1E0D, 0x18)]
        public class CameraParmCollisionLayer : CameraParm
        {
            EPhysicsCollisionLayerGame Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBA01396DD90C8DD, 0x18)]
        public class CameraParmCurve : CameraParm
        {
            Ref<CurveResource> Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF155163BFB210316, 0x18)]
        public class CameraParmFloat : CameraParm
        {
            float Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x369316F4B6BC9992, 0x18)]
        public class CameraParmInt : CameraParm
        {
            int Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58CE091016C1360C, 0x20)]
        public class CameraParmMagnetParms : CameraParm
        {
            Array<Ref<CameraMagnetParmResource>> Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0090F8B7A2E16B8, 0x18)]
        public class CameraParmString : CameraParm
        {
            String Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB955462C8B1B8A19, 0x20)]
        public class CameraParmVec3 : CameraParm
        {
            Vec3 Val;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x980057ABB06796FD, 0x250)]
        public class CameraPredictionManager : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1E15D661B0594BB, 0x20)]
        public class CameraPropertiesBase : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96CCBB83967BF91F, 0x40)]
        public class CameraPropertiesSet : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB9F181672226166, 0x38)]
        public class CameraPropertiesSetResource : Resource
        {
            Array<Ref<CameraPropertiesBase>> Properties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4EA0FF814FBA9EE, 0x14)]
        public class CameraScalers
        {
            float OriginOffsetScaler;
            float OriginOffsetMin;
            float OriginOffsetMax;
            float FocusRangeScaler;
            float ViewRangeScaler;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BB0EFD52E25DA5A, 0x10)]
        public class CameraSettings
        {
            float FNumber;
            float ShutterSpeed;
            float ManualFocusDistance;
            float FrameWidth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E653DD58CCEDA8, 0x38)]
        public class CameraSettingsResource : Resource
        {
            CameraSettings CameraSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1981AB1E7DF88290, 0x60)]
        public class CameraShakeEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x624D0C1C20DFE15D, 0x48)]
        public class CameraShakeEventResource : TimedEventResource
        {
            Ref<ShakeResource> ShakeResource;
            Ref<LocatorResource> PositionLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C1757E4019487C4, 0x1D0)]
        public class CameraState : ViewFrustumInfo
        {
            Frustum BaseFrustum;
            WorldTransform WorldToCamera;
            Mat44 CameraToProjected;
            Mat44 ProjectedToCamera;
            Mat44 WorldToProjected;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A33CDC7490AF210, 0x80)]
        public class CameraVisibilityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9348DF23DA578711, 0x30)]
        public class CameraVisibilityComponentResource : EntityComponentResource
        {
            Ref<ResourceSelectorBase> CylinderSelector;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30D0B276F9C94B4, 0x30)]
        public class CameraVisibilityCylinderResource : Resource
        {
            float Height;
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x815DE4AC7BA4815C, 0x30)]
        public class CameraZoomProperties : CameraPropertiesBase
        {
            float Zoom;
            float FOV;
            float FirstPersonFOV;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC612BB3CC01B11CF, 0x38)]
        public class CancelDelayedActionAction : EntityAction
        {
            Ptr<DelayedAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA8F130D56FFF3D2, 0x30)]
        public class Capsule
        {
            Vec3 From;
            Vec3 To;
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF86FEFEE08C8185E, 0xB0)]
        public class CapsuleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9A0E25CB90F557F, 0x10)]
        public class CapsuleHull
        {
            Array<Capsule> Capsules;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C829761FA2CE00B, 0x5A0)]
        public class CaptureAndHoldArea : SpawnArea
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC68936AA6E23DA2, 0x48)]
        public class CaptureAndHoldAreaFactionSettings : Resource
        {
            Ptr<AIFaction> Faction;
            int CapturePlayerCap;
            int RecapturePlayerCap;
            bool AllowBlockProgress;
            String CaptureAnimationName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64F309D3F86A6787, 0x270)]
        public class CaptureAndHoldAreaRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC479D4872177FEF, 0x298)]
        public class CaptureAndHoldAreaResource : SpawnAreaResource
        {
            Array<Ref<CaptureAndHoldAreaFactionSettings>> FactionSettings;
            int PointsPerTick;
            float TickLength;
            float CaptureDistance;
            String PercentageUpVariableName;
            String DefendLocalizerTag;
            String NeutralizeLocalizerTag;
            String CaptureLocalizerTag;
            RGBAColor FriendlyColor;
            RGBAColor EnemyColor;
            Array<Ref<LightResource>> LightResources;
            Array<Mat44> LocalMatrices;
            Ref<SoundResource> TuningSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE5E66ECB11EBDEB, 0x58)]
        public class CaptureSpeedModifierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9524664857499955, 0x30)]
        public class CaptureSpeedModifierComponentResource : EntityComponentResource
        {
            float Modifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF13CEC40971C404, 0xE8)]
        public class Career : Resource
        {
            ECareer ID;
            Array<Ref<CareerUnlockResource>> PrimaryAbilities;
            Array<Ref<CareerUnlockResource>> SecondaryAbilities;
            Array<Ref<CareerUnlockResource>> TertiaryAbilities;
            Array<Ref<InventoryUnlockResource>> DefaultAbilities;
            Array<Ref<CareerUnlockResource>> BotPrimaryAbilities;
            Array<Ref<CareerUnlockResource>> BotSecondaryAbilities;
            Array<Ref<WeaponUnlockResource>> PrimaryWeapons;
            Array<Ref<WeaponUnlockResource>> SecondaryWeapons;
            Array<Ref<WeaponUnlockResource>> AuxiliaryWeapons;
            Ref<WeaponUnlockResource> FallbackWeapon;
            String CharacterModel;
            Ref<ChallengeGroupResource> ChallengeGroup;
            Array<Ref<CareerLoadout>> DefaultLoadouts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E212152379E91D9, 0x58)]
        public class CareerLoadout : Resource
        {
            String LocalizerNameKey;
            Ref<WeaponUnlockResource> PrimaryWeapon;
            Ref<WeaponUnlockResource> SecondaryWeapon;
            Ref<WeaponUnlockResource> AuxiliaryWeapon;
            Ref<CareerUnlockResource> PrimaryAbility;
            Ref<CareerUnlockResource> SecondaryAbility;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x712CD0FCAC7DFFB1, 0x50)]
        public class CareerUnlockResource : Resource
        {
            String Description;
            bool DefaultUnlock;
            Ref<Texture> IconTexture;
            Ref<ChallengeGroupResource> ChallengeGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70A9D830106A9277, 0x18)]
        public class CareerUnlockSystem : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F1583D8A5ABF02A, 0xA8)]
        public class CareerUnlockSystemResource : Resource
        {
            Array<Ref<Career>> Careers;
            Ref<PlayerCardResource> PlayerCard;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26D0086BD6CECDFA, 0x68)]
        public class CarryComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBCAE204F8C5890C, 0x30)]
        public class CarryComponentResource : EntityComponentResource
        {
            int InventoryID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC08AE0FA48490DC0, 0xB8)]
        public class CenterLocationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84F36D368F91C246, 0x70)]
        public class CenterLocationComponentResource : EntityComponentResource
        {
            String HelperName;
            Mat44 LocalMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB7D2566CF4CF10E, 0x3B0)]
        public class Chaff : Throwable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x799CCAE162C944C1, 0x58)]
        public class ChaffComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16FDBD34C8AD6F0F, 0x30)]
        public class ChaffComponentResource : EntityComponentResource
        {
            float OvershootExplodeRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD35CEFBB63D201CB, 0x280)]
        public class ChaffRep : ThrowableRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5474CD663C06B739, 0x220)]
        public class ChaffResource : ThrowableResource
        {
            Ref<DamageAreaResource> DamageAreaResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC89E4660A4B490F, 0x10)]
        public class Challenge : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95754ADD16DD0F30, 0x18)]
        public class ChallengeAchievement : ChallengeCounted
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF1EDBB4A3B698F3, 0x90)]
        public class ChallengeAchievementResource : ChallengeCountedResource
        {
            String AchievementName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6769ACCA183B0EFB, 0x18)]
        public class ChallengeCounted : Challenge
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8778A2146B9C6964, 0x88)]
        public class ChallengeCountedResource : ChallengeResource
        {
            String ChallengeID;
            int Requirement;
            int TimesInASingleRound;
            bool GGPlaylistOnly;
            String LevelID;
            ECareer Career;
            String Units;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x494D0A1EB1E7206A, 0x28)]
        public class ChallengeGroup : Challenge
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x873414B42FB5354, 0x70)]
        public class ChallengeGroupResource : ChallengeResource
        {
            Array<Ref<ChallengeResource>> Challenges;
            bool DisplayPostGame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x12B04663AA0A6E58, 0x20)]
        public class ChallengeKill : ChallengeCounted
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32B16A4B0BE1AEE9, 0xB0)]
        public class ChallengeKillResource : ChallengeCountedResource
        {
            String StatsClass;
            Array<String> StatsClassPatternTags;
            Array<EPlayerKilledDataBits> KillFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x497E1DA3B2B9A4E2, 0x58)]
        public class ChallengeManagerResource : Resource
        {
            Array<Ref<ChallengeResource>> Challenges;
            Array<Ref<ChallengeGroupResource>> CategorizedChallenges;
            Array<Ref<ChallengeGroupResource>> PlayerIconChallenges;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD54705F1FB4326A0, 0x58)]
        public class ChallengeResource : Resource
        {
            String ChallengeName;
            String LocalizerTagDescription;
            Array<Ref<CareerUnlockResource>> Unlocks;
            Ref<TrophyResource> Trophy;
            Ref<Texture> IconTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75FDE1DED788CC98, 0x18)]
        public class ChallengeStat : ChallengeCounted
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB31C0DDC620F6D3, 0xA8)]
        public class ChallengeStatResource : ChallengeCountedResource
        {
            EPlayerScoreStat Stat;
            EPlayerScoreEntityStat EntityStat;
            String Type;
            Array<String> TypePatternTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x384AB6F85629BBCA, 0x48)]
        public class ChallengesProfile : RTTIRefObject
        {
            HashMap<String_int> ChallengeProgressMap;
            HashMap<String_int> AchievementStatMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x531E56623A1C01F8, 0x68)]
        public class ChangeInvulnerabilityEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F2D5C7DFDDC7282, 0x48)]
        public class ChangeInvulnerabilityEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            bool Invulnerable;
            bool RestoreState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x592FEAFA08E8A867, 0x70)]
        public class ChangeJoystickInputLimitsEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70440E475302D29A, 0x50)]
        public class ChangeJoystickInputLimitsEventResource : TimedEventResource
        {
            Ref<JoystickInputLocatorResource> JoystickInputLocatorResource;
            FRange HeadingLimits;
            FRange PitchLimits;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED194C216B5D9637, 0x40)]
        public class ChangeModelPartAction : EntityAction
        {
            Ref<ModelPartResource> OldModelPart;
            Ref<ModelPartResource> NewModelPart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96FD79F64D1DB0A4, 0x58)]
        public class CharacterDescriptionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36083A5413C37B27, 0x48)]
        public class CharacterDescriptionComponentResource : EntityComponentResource
        {
            Ref<LocalizedTextResource> LocalizedName;
            Ref<LocalizedTextResource> LocalizedDescription;
            Ref<CharacterTypeClass> CharacterTypeClass;
            Ref<UITexture> Icon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9AE67BC0DF6B94D2, 0xA0)]
        public class CharacterProgressionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3788E5D177B43B32, 0x70)]
        public class CharacterProgressionComponentResource : EntityComponentResource
        {
            int InitialLevel;
            int InitialPerkPoints;
            Ref<XpTable> XpTable;
            Ref<PlayerNotificationResource> XpGainedNotification;
            Array<Ref<PerkCategory>> PerkCategories;
            Ref<TrophyResource> AllPerksAcquiredTrophy;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C4EFB2E3479D407, 0x50)]
        public class CharacterProgressionSave : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5241165A20CF2A75, 0x40)]
        public class CharacterTypeClass : Resource
        {
            Ref<AwarenessStateDisplaySettingsResource> AwarenessStateDisplaySettings;
            Ref<UITexture> AwarenesMarkerIcon;
            Ref<UITexture> UIFocusIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABF15720D9BA74AF, 0x58)]
        public class CharacterUpgrade : Resource
        {
            Array<Ref<EntityComponentResource>> Components;
            Ref<UITexture> UIIconTexture;
            Ref<LocalizedTextResource> DisplayName;
            Ref<LocalizedTextResource> DisplayDescription;
            Ptr<CharacterUpgradeSet> Set;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B0317ED49BB618, 0x48)]
        public class CharacterUpgradeRecipe : CraftingRecipe
        {
            Ref<CharacterUpgrade> Upgrade;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB30EB14177502798, 0x38)]
        public class CharacterUpgradeSet : Resource
        {
            Array<Ref<CharacterUpgrade>> Upgrades;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x290CC4F3642EB800, 0x30)]
        public class ChargeAnimationReference : Resource
        {
            float ChargeDuration;
            float AnimatedChargeFraction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE4C023677FD0BB7, 0x38)]
        public class ChargedAmmoResource : Resource
        {
            float ChargeUpTime;
            Ref<EntityProjectileAmmoResource> ProjectileAmmo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B7D8B85546CF1CD, 0x10)]
        public class ChargedThresholdEntityAction
        {
            float RequiredMagnitude;
            Ptr<EntityAction> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x113B054D8CF76A52, 0x8)]
        public class ChargedThresholdFloat
        {
            float RequiredMagnitude;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA29B4FFA8B0D082B, 0x8)]
        public class ChargedThresholdInt
        {
            float RequiredMagnitude;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E14FC1C297C1A17, 0x30)]
        public class ChargedValueCurve : ChargedValueFloat
        {
            Ref<CurveResource> CurveResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60D16FB5BE62E8EA, 0x28)]
        public class ChargedValueEntityAction : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x581D0A8EF43E85D7, 0x28)]
        public class ChargedValueFloat : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA75312912634AD1, 0x28)]
        public class ChargedValueInt : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A97F6A25E0E4C65, 0x30)]
        public class ChargedValueIntCurve : ChargedValueInt
        {
            Ref<CurveResource> CurveResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A18BB8B73305CD0, 0x38)]
        public class ChargedValueThresholdsEntityAction : ChargedValueEntityAction
        {
            Array<ChargedThresholdEntityAction> Thresholds;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF13A87E1A407D2E5, 0x38)]
        public class ChargedValueThresholdsFloat : ChargedValueFloat
        {
            Array<ChargedThresholdFloat> Thresholds;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x680D161D91ED3C6D, 0x38)]
        public class ChargedValueThresholdsInt : ChargedValueInt
        {
            Array<ChargedThresholdInt> Thresholds;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD127084F76FEBD04, 0x38)]
        public class CheckpointAction : EntityAction
        {
            ESaveGameType Type;
            bool DisplayMessage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89A917E78323176A, 0x70)]
        public class ChildEntityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x633E2764C6B231B9, 0x40)]
        public class ChildEntityComponentResource : EntityComponentResource
        {
            Ref<EntityResource> EntityResource;
            Ref<MoverResource> MoverResource;
            String ChildName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9A32EF9E4B053F7, 0x18)]
        public class ChildEntityDescription
        {
            Ref<EntityResource> EntityResource;
            Ref<MoverResource> MoverResource;
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48747790C92947AB, 0x30)]
        public class CinematicVehicleDeathAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1243FB67B964332, 0xF0)]
        public class ClanMatchReportKIN : ServerClanMatchReport
        {
            String PlaylistID;
            String GameID;
            String MapName;
            String ClanTagISA;
            String ClanTagHGH;
            String ClanNameISA;
            String ClanNameHGH;
            EClanMatchOutcome Outcome;
            Array<String> PlayersClanISA;
            Array<String> PlayersClanHGH;
            Array<Ref<ClanMissionReport>> PlayedMissions;
            uint64 EndTime;
            double PrevISAGLobalElo;
            double NewISAGLobalElo;
            double PrevISAPlaylistElo;
            double NewISAPlaylistElo;
            double PrevHGHGLobalElo;
            double NewHGHGLobalElo;
            double PrevHGHPlaylistElo;
            double NewHGHPlaylistElo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD27FA2CC41A5E875, 0x48)]
        public class ClanMatchReportRequest : RTTIRefObject
        {
            String ClanTag;
            String OpponentTag;
            int PageSize;
            uint64 StartTime;
            bool SortDescending;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC99FCC1F783AAABC, 0x70)]
        public class ClanMatchRequestKIN : MatchRequestKIN
        {
            String TargetClan;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5817D45AA4E443DE, 0x28)]
        public class ClanMissionReport : RTTIRefObject
        {
            EMissionType MissionType;
            EClanMatchOutcome Result;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3214C29FFD8ACFB5, 0x38)]
        public class ClanPresence : RTTIRefObject
        {
            String OnlineID;
            String Presence;
            String PresenceData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E560E9078D36C89, 0x38)]
        public class ClanPresenceResult : RTTIRefObject
        {
            bool IsPresenceSet;
            Array<Ref<ClanPresence>> PresenceList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3DF9B7C698B2081, 0x38)]
        public class ClanPresenceUpdateRequest : RTTIRefObject
        {
            String Presence;
            String PresenceData;
            bool ShouldReturnClanMemberPresence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FA22BCCED0E5E61, 0x108)]
        public class ClanService : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC40A81D3639688B, 0x30)]
        public class ClanUpdatedMessage : RTTIRefObject
        {
            String MemberID;
            String ClanTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D866C741FFFFD7F, 0x58)]
        public class ClapperBoardEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x166B5C9EAC3A2F18, 0x70)]
        public class ClapperBoardEventResource : TimedEventResource
        {
            FRGBAColor Color;
            FRGBAColor FontColor;
            String Text;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88972A3870D5E987, 0x38)]
        public class ClearInstigatorFlagAction : EntityAction
        {
            Ref<InstigatorFlagResource> InstigatorFlagResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA453E15339B915E5, 0x30)]
        public class Client2ClientMessage : RTTIRefObject
        {
            String SenderOnlineID;
            Ref<MessageData> MessageData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC525A12F5DE35AB, 0x20)]
        public class ClientConnectMessage : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20B102859D6EA4A0, 0x28)]
        public class ClientDisconnectMessage : RTTIRefObject
        {
            String Reason;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E97D9EC571D6AD7, 0x48)]
        public class Climate : ClimateBase
        {
            Array<Ref<ClimateWeatherState>> WeatherStates;
            Ref<WorldDataType> WorldDataType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38B610271113C2F3, 0x30)]
        public class ClimateBase : CoreObject
        {
            Ref<AmbienceCycle> AmbienceCycle;
            float NightTemperature;
            float DayTemperature;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB81E2B8FA86BCBCD, 0x40)]
        public class ClimateWeatherState : CoreObject
        {
            Ref<WeatherSetup> WeatherSetup;
            FRange DurationInMinutes;
            float TransitionTime;
            float Probability;
            float TimeOfDayStart;
            float TimeOfDayEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD870CBC73C1854, 0x1C)]
        public class CloudRenderSettings
        {
            float Brightness;
            float DirectLightBrightness;
            float CirrusBrightness;
            float SilverLiningSpread;
            float SilverLiningIntensity;
            float PrimaryScatteringPhase;
            float ColorSaturation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4BA7F673610E03D, 0x40)]
        public class CloudRenderSettingsResource : CoreObject
        {
            CloudRenderSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A6BFABCB62E6970, 0x3C0)]
        public class ClusterGrenade : Grenade
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76F3D430BB8F4208, 0x90)]
        public class ClusterGrenadeFragmentResource : Resource
        {
            Ref<EntityResource> EntityResource;
            Ref<RandomVectorResource> RandomPhysicsImpulse;
            Mat44 Offset;
            bool SpawnOffsetAlwaysUp;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44DCE0450C92D32C, 0x240)]
        public class ClusterGrenadeResource : GrenadeResource
        {
            Array<Ref<ClusterGrenadeFragmentResource>> Fragments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4AFAD4269F0A24A5, 0xC0)]
        public class Collectable : CollectableEntryBase
        {
            Ref<CollectableRegion> CollectableRegion;
            UUIDRef<WorldNode> LocationWorldNode;
            UUIDRef<EntityResource> EntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FC18B9283C29687, 0x38)]
        public class CollectableData : RTTIRefObject
        {
            String Name;
            int Available;
            int MaxAmount;
            String TimerID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x406A285877E0DFB2, 0xD8)]
        public class CollectableDataCube : CollectableEntryBase
        {
            Ref<CollectableRegion> CollectableRegion;
            StreamingRef<SentenceGroupResource> AudioEntry;
            Ref<PlayerOpenMenuNotificationResource> AudioDonePlayingNotification;
            UUIDRef<EntityResource> EntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x413D55532E2A0AC3, 0x98)]
        public class CollectableEntryBase : Resource
        {
            Ref<BooleanFact> IsUnlockedFact;
            Ref<LocalizedTextResource> LocalizedName;
            Ref<LocalizedTextResource> LocalizedDescription;
            Ref<LocalizedTextResource> TextEntry;
            StreamingRef<UITexture> IconTexture;
            StreamingRef<UITexture> PreviewIconTexture;
            bool SuppressNotification;
            Ref<PlayerNotificationResource> OverrideNotification;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1174F74B8550B27, 0x70)]
        public class CollectableManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF515CDC6F436A49C, 0x58)]
        public class CollectableManagerResource : Resource
        {
            Ref<CollectableSection> Collectables;
            Ref<CollectableSection> DataCubes;
            Ref<CollectableSection> Catalogue;
            Ref<CollectableSection> BlueGleam;
            Ref<GraphProgramResource> CollectableFoundGraphProgram;
            Ref<TagProperty> CollectableTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA59E6D5D4C6DE17A, 0x38)]
        public class CollectableRegion : Resource
        {
            Ref<LocalizedTextResource> LocalizedName;
            Ref<IntegerFact> FoundCounterFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58FAD935CADEE33D, 0xF0)]
        public class CollectableRobot : CollectableEntryBase
        {
            Array<UUIDRef<EntityResource>> EntityResources;
            Ref<IntegerFact> KillCountFact;
            Ref<RewardComponentResource> RewardComponentResource;
            Ref<UITexture> RobotPageTexture;
            Ref<UITexture> RobotPageTextureHighlighted;
            Ref<StatsDisplayResource> RobotStats;
            Ref<PerkLevel> RobotHackingPerk;
            bool IsMountable;
            ECollectableRobotEntryType Type;
            Array<Ref<MenuCatalogRobotPartResource>> RobotParts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB7CCFF0DAB723BB, 0x58)]
        public class CollectableSection : Resource
        {
            Array<Ref<CollectableTypeContainer>> CollectableTypeContainer;
            Array<Ref<CollectableRegion>> CollectableRegionOrder;
            Ref<IntegerFact> FoundCounterFact;
            Ref<EnumFactValue> CompareQuestToUnlockCollectablesFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CFC3C7AB238E95C, 0x48)]
        public class CollectableStyleMapping : Resource
        {
            UUIDRef<CollectableType> CollectableTypeUUID;
            Ref<MenuStyleClass> CollectableFoundStyleClass;
            Ref<MenuStyleClass> CollectableLockedStyleClass;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31B368F6DDBCB2B0, 0x50)]
        public class CollectableType : Resource
        {
            Ref<LocalizedTextResource> LocalizedName;
            Ref<LocalizedTextResource> LocalizedDescription;
            Ref<IntegerFact> FoundCounterFact;
            Ref<ConditionResource> MapUnlockedCondition;
            EMenuBadgeCategory MenuBadgeCategory;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23C869712CF96BE0, 0x88)]
        public class CollectableTypeContainer : Resource
        {
            Ref<CollectableType> CollectableType;
            Ref<PlayerNotificationResource> DiscoveredNotification;
            bool IsNotificationRepeatable;
            float NotificationDelay;
            Ref<LocationMarkerResource> LocationMarker;
            Ref<LocalizedTextResource> MarkerTitle;
            Array<StreamingRef<CollectableEntryBase>> Collectables;
            Ref<TrophyResource> FirstFoundTrophy;
            Ref<TrophyResource> AllFoundTrophy;
            Ref<EntitlementResource> DLCPackEntitlementKey;
            String MenuTabCategory;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E5FC0A6E8D8704A, 0x100)]
        public class CollectableVantage : Collectable
        {
            StreamingRef<SentenceGroupResource> AudioEntry;
            StreamingRef<UITexture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31AFB9512E94434D, 0x50)]
        public class CollectablesViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC6C5C6278E48B11, 0xF8)]
        public class CollisionActionTrigger : CollisionTrigger
        {
            Ref<EntityAction> EnterAction;
            Ref<EntityAction> ExitAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28344E1E3BB5E1A9, 0x10)]
        public class CollisionGroup
        {
            Array<int> _CollisionGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8285D93A649A8ADA, 0xA0)]
        public class CollisionQuestTrigger : EntityBasedQuestTrigger
        {
            Array<UUIDRef<CollisionTrigger>> CollisionTriggers;
            bool TriggerOnExit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31BF31A96FC4835A, 0x8)]
        public class CollisionQuestTriggerInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB597AD925709D30, 0x38)]
        public class CollisionResource : Resource
        {
            Ref<PhysicsShapeResource> PhysicsShapeResource;
            EPhysicsShapeType ShapeType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1467693833CF2C72, 0x70)]
        public class CollisionResourceBox : CollisionResource
        {
            BoundingBox3 LocalBounds;
            MaterialType MaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4010F973F0254178, 0x40)]
        public class CollisionResourceSphere : CollisionResource
        {
            float Radius;
            MaterialType MaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5B38AE190F649E2, 0xE8)]
        public class CollisionTrigger : PhysicsCollisionInstance
        {
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61E0C8F38F07D6D8, 0x20)]
        public class ColorPeg : PegBase
        {
            FRGBColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x337A9620AED04B23, 0x20)]
        public class ColorScheme
        {
            String Name;
            RGBAColor Friendly;
            RGBAColor Enemy;
            RGBAColor PartyMember;
            RGBAColor Warning;
            RGBAColor FriendlyCrosshair;
            RGBAColor EnemyCrosshair;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8502B1F3974B6CB, 0x40)]
        public class ColorizeSettings
        {
            FRGBAColor BiasColor;
            FRGBAColor MidtoneColor;
            FRGBAColor HighlightColor;
            float BiasScale;
            float MidtoneBoost;
            float HighlightBoost;
            float Depth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE3879ADCABFEC30, 0x110)]
        public class ColorizeSettingsResource : Resource
        {
            Array<ColorizeSettings> ColorizeSettings;
            Array<FogSettings> FogSettings;
            Ref<CurveResource> HueSaturationCurve;
            MasterColorizeSettings MasterColorizeSettings;
            Filename MasterImageTemplate;
            float MasterGamma;
            float MasterGain;
            float MasterLift;
            FRGBAColor CubeMapMultiplier;
            Ref<Texture> ColorizeTexture;
            Ref<Texture> Rgb3dLookupTexture;
            FRGBAColor ForwardRenderingColorizeSettings;
            EColorizeBlendMode BlendMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B653327CF90C97E, 0x68)]
        public class CombatDetectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE6B2B1885D6F10A, 0x48)]
        public class CombatDetectionComponentResource : EntityComponentResource
        {
            Ref<BooleanFact> IsNearEnemies;
            Ref<BooleanFact> IsInCombat;
            FRange NearbyEnemyRange;
            float EnemyThreatDetectionRange;
            float CombatCoolDownTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1AFB5E7F7DCCCAA, 0x48)]
        public class CombatHonorResource : Resource
        {
            String DescriptionTag;
            int XPRequirement;
            String Reward;
            Ref<Texture> IconTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64128C34C82BB628, 0x60)]
        public class CombatHonorsManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4D8032F55B04C40, 0x40)]
        public class CombatHonorsManagerResource : Resource
        {
            int MaxUnlockedCombatHonors;
            Array<Ref<CombatHonorResource>> CombatHonors;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA580520E0DEBBA9F, 0x50)]
        public class CommerceManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF48D9413CEA83423, 0x68)]
        public class ComponentLifetimeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1E42E537D6471A5, 0x30)]
        public class CompoundStatResource
        {
            String Name;
            Array<StatResource> Stats;
            EStatType Comparator;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4379713577D0555, 0x6)]
        public class Compressed16Vector3
        {
            int16 X;
            int16 Y;
            int16 Z;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x391C214A28009A9F, 0x3)]
        public class CompressedUnitVector3B
        {
            int8 X;
            int8 Y;
            int8 Z;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB8BE80F5DE1F95E, 0x50)]
        public class CompressorConfigurationSet : RTTIRefObject
        {
            float FullRangeThresholdInDb;
            float FullRangeRatio;
            float FullRangeAttackTimeInMs;
            float FullRangeReleaseTimeInMs;
            float FullRangeMakeUpGainInDb;
            float FullRangePassThruGainInDb;
            float LFEThresholdInDb;
            float LFERatio;
            float LFEAttackTimeInMs;
            float LFEReleaseTimeInMs;
            float LFEMakeUpGainInDb;
            float LFEPassThruGainInDb;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CEA91BCAD49F327, 0x58)]
        public class ConditionInstance : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x944A9ED06F73A54A, 0x68)]
        public class ConditionListenerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF39342F364F5F518, 0x38)]
        public class ConditionListenerComponentResource : EntityComponentResource
        {
            Array<Ref<ConditionResource>> Conditions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BFF3B12FFAEF6C1, 0x38)]
        public class ConditionResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C60F3A8494EA9A7, 0x40)]
        public class ConditionalAction : EntityAction
        {
            Ptr<EntityAction> Action;
            Ptr<EntityAction> ElseAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E974428FBAFF3C6, 0x18)]
        public class ConditionalHealthBarComponentDisplaySettings
        {
            BoolPropertyLink ConditionalPropertyLink;
            HealthBarComponentDisplaySettings DisplaySettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C4591D4097F9F06, 0xD8)]
        public class ConditionalLookAtEventInstance : ConditionalLookEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E56AAF9E485ACEE, 0x90)]
        public class ConditionalLookAtEventResource : ConditionalLookEventResource
        {
            Ref<LocatorResource> TargetLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14F789294501601E, 0xD0)]
        public class ConditionalLookEventInstance : LookEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA62811ED8E10E853, 0x88)]
        public class ConditionalLookEventResource : LookEventResource
        {
            Ref<LocatorResource> FallbackTargetLocatorResource;
            FRange StartHeadingRange;
            FRange StartPitchRange;
            float StartDistance;
            FRange ContinueHeadingRange;
            FRange ContinuePitchRange;
            float ContinueDistance;
            FRange LookTimeRange;
            FRange CooldownTimeRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77D5824F724E9360, 0x88)]
        public class ConditionalLookEventStateComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C154C18E4390CA6, 0x80)]
        public class ConstructionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x116E950249A7FBE3, 0x40)]
        public class ConstructionComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA85730B900605B74, 0x60)]
        public class ConstructionComponentResource : EntityComponentResource
        {
            float ConstructionTime;
            float DeconstructionTime;
            Ptr<EntityAction> StartConstructionAction;
            Ptr<EntityAction> FinishedConstructionAction;
            Ptr<EntityAction> StartDeconstructionAction;
            Ptr<EntityAction> FinishedDeconstructionAction;
            Ref<SoundResource> ConstructingSoundResource;
            Ref<SoundResource> DeconstructingSoundResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5715A027353CFEDB, 0x68)]
        public class ContactWithEntityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8A6F7CD26EFDF96, 0x30)]
        public class ContactWithEntityComponentResource : EntityComponentResource
        {
            Ptr<EntityAction> OnContactEntityAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDD4F4A43305BBA4, 0x150)]
        public class ContentWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A3C27670CBF1F36, 0x810)]
        public class ContextualActionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6DEE89F04D9C6B5C, 0x40)]
        public class ContextualActionComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F92EEFC01469644, 0xF0)]
        public class ContextualActionComponentResource : EntityComponentResource
        {
            String AnimVarWarpHeadingName;
            String AnimVarWarpPitchName;
            String AnimVarWarpPosName;
            String AnimVarWarpEnabledName;
            String AnimVarVariantName;
            String ContextualActionAnimationTag;
            Array<Ref<AIFaction>> AlwaysEvaluateFactions;
            Array<Ref<ContextualActionResource>> ContextualActions;
            BoundingBox3 EnemySearchBoundingBox;
            float LineOfSightRadius;
            Vec3 DefaultLineOfSightEyeOffset;
            Vec3 ParkourWithHandsBracedLineOfSightEyeOffset;
            Vec3 ParkourWithHandsUnbracedLineOfSightEyeOffset;
            float PrimaryHUDCooldownDuration;
            float SecondaryHUDCooldownDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x134707D61BF1C768, 0x20)]
        public class ContextualActionCondition
        {
            bool OnGround;
            bool Jumping;
            bool Falling;
            bool VaultOff;
            bool Conversation;
            bool ParkouringFoot;
            bool ParkouringHandBraced;
            bool ParkouringHandUnbraced;
            bool Ziplining;
            bool HitResponse;
            bool Mounted;
            bool Combat;
            bool Tools;
            bool HeavyWeaponCarry;
            bool Melee;
            bool RequiresUseLocationForVictim;
            Array<ContextualActionRequiredBoolProperty> RequiredBoolProperties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77CAFB04469C77AC, 0x10)]
        public class ContextualActionRequiredBoolProperty
        {
            BoolPropertyLink Link;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x568F8126F3CD0943, 0x1A0)]
        public class ContextualActionResource : Resource
        {
            ContextualActionCondition Condition;
            Ref<GraphProgramResource> ConditionGraph;
            Ref<GraphProgramResource> MountConditionGraph;
            Ref<GraphProgramResource> StartGraph;
            Ref<GraphProgramResource> UpdateGraph;
            Ref<GraphProgramResource> StopGraph;
            Ref<GraphProgramResource> DelayStopGraph;
            Array<int> AnimationVariantWeights;
            Array<String> AnimationActions;
            Array<AnimationVariableValue> AnimationVariables;
            EContextualActionAnimationActions AnimationActionsTriggerType;
            Ref<LocalizedTextResource> ActionText;
            float CooldownDuration;
            float DelayStop;
            String MountModeIdentifier;
            EContextualActionButtonType Type;
            EContextualActionTriggerAction ActionsTriggerType;
            String ActionTriggerEventID;
            float MaxWarpDistance;
            EContextualActionDeviceFunctionType ContextualActionDeviceFunctionType;
            bool CheckForBlockingCollision;
            float CheckForBlockingCollisionRadius;
            Vec3 CheckForBlockingCollisionUpOffset;
            EContextualActionSwitchToWeapon SwitchToWeapon;
            bool FlinchStopsAction;
            bool StaggerStopsAction;
            bool KnockDownStopsAction;
            Vec3 RelativeOffsetToTarget;
            Array<String> AttackHelpers;
            float MaxDistanceToAttackHelpers;
            bool UseHelperOrientation;
            bool ShouldBlendToOrientation;
            Array<ContextualActionRequiredBoolProperty> RequiredBoolProperties;
            bool RequiresAIIndividual;
            bool VictimShouldDismountFromSequence;
            ContextualActionVictimSettings Settings;
            float MaxSlopeAngle;
            Ref<DamageTypeGroup> IgnoreDamageTypeGroupCausedByVictim;
            float HUDTextDisplayDuration;
            Ref<SoundResource> ProgressSound;
            String ProgressSoundHelperName;
            bool ProgressSoundIs3D;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB44701879096A8D, 0x1D0)]
        public class ContextualActionVictimComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B8344CB4E769414, 0x28)]
        public class ContextualActionVictimComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FE288F832B36C90, 0x18)]
        public class ContextualActionVictimSettings
        {
            bool PlaceOnNavMesh;
            bool PlaceOnGround;
            bool ForceUseContactNormalAsUp;
            bool DisablePerception;
            bool DisableModelUpdate;
            bool UpdateFloorSlope;
            Ref<DamageTypeResource> OnlyAllowedHitResponseDamageType;
            float RestoreAsVictimDelay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B7695C35E54D349, 0x70)]
        public class ContextualEmotion : CoreObject
        {
            String Name;
            int AnimationVarValue;
            float Duration;
            float CooldownDuration;
            int Priority;
            ContextualEmotionCondition Condition;
            Ref<GraphProgramResource> UpdateGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BE5DFEBEAC5211, 0xD0)]
        public class ContextualEmotionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A5BF44AB4E47B2A, 0x98)]
        public class ContextualEmotionComponentResource : EntityComponentResource
        {
            String EmotionAnimationVarName;
            float EmotionCooldownDuration;
            Ref<ThresholdBasedContextualEmotion> Injured_ContextualEmotion;
            Ref<ThresholdBasedContextualEmotion> Alerted_ContextualEmotion;
            Ref<ThresholdBasedContextualEmotion> OutOfBreath_ContextualEmotion;
            Ref<ThresholdBasedContextualEmotion> OutOfWater_ContextualEmotion;
            Ref<ThresholdBasedContextualEmotion> Rainy_ContextualEmotion;
            Ref<ThresholdBasedContextualEmotion> Cold_ContextualEmotion;
            Ref<ThresholdBasedContextualEmotion> Warm_ContextualEmotion;
            Ref<ThresholdBasedContextualEmotion> Windy_ContextualEmotion;
            Array<Ref<PropertyBasedContextualEmotion>> PropertyBased_ContextualEmotion;
            Array<Ref<FactBasedContextualEmotion>> FactBased_ContextualEmotion;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDE2CEBCD82D30B6, 0x30)]
        public class ContextualEmotionCondition
        {
            bool StandIdle;
            bool StandMove;
            bool Sprinting;
            bool CrouchIdle;
            bool CrouchMove;
            bool Starts;
            bool Stops;
            bool Banking;
            bool JumpFall;
            bool Zipline;
            bool ClimbHands;
            bool ClimbFoot;
            bool Swimming;
            bool FreeRunning;
            bool HunterMode;
            bool WieldStow;
            bool Aiming;
            bool Firing;
            bool Hitresponse;
            bool Tools;
            bool Melee;
            bool Mounted;
            bool WeaponCarry;
            bool HeavyWeaponCarry;
            bool ContextualAction;
            Array<String> DisallowTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D704808AB524EA8, 0x60)]
        public class ContextualFactsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCEAE863D5B069E6B, 0x38)]
        public class ContextualFactsComponentResource : EntityComponentResource
        {
            Array<Ref<ResourceSelectorBase>> ContextualFactsSelectors;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36D8A4040B30B95A, 0x58)]
        public class ContextualOrderComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x860F986E5FAAD641, 0x38)]
        public class ContextualOrderComponentResource : EntityComponentResource
        {
            Array<Ref<ContextualOrderResource>> Orders;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3C9DB0472677DD0, 0x68)]
        public class ContextualOrderModeResource : Resource
        {
            Array<Ref<ContextualOrderResource>> EntityOrders;
            Array<Ref<ContextualOrderResource>> WorldOrders;
            Array<Ref<ContextualOrderResource>> SelfOrders;
            Ptr<EntityAction> ActivateAction;
            Ptr<EntityAction> DeactivateAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x488E6AAD21E023F1, 0xA0)]
        public class ContextualOrderResource : Resource
        {
            Ref<GraphProgramResource> ValidityCheckingGraph;
            UIRect IconRect;
            UIRect CancelIconRect;
            float DisabledTimeAfterUse;
            float Range;
            Ref<AISignalType> Signal;
            Ref<AISignalType> CancelSignal;
            bool PreventUseLocations;
            Ref<Texture> RadialMenuTexture;
            String StatusTextID;
            Ptr<EntityAction> ActionOnPlayer;
            Ptr<EntityAction> ActionOnTarget;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB954BE4EB3BEC25F, 0x110)]
        public class ContextualSpeechComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88578FDA8DA887D7, 0x58)]
        public class ContextualSpeechComponentResource : EntityComponentResource
        {
            Array<Ref<ConditionResource>> Conditions;
            Array<Ref<ContextualSpeechEventMappingResource>> Events;
            float MaxListenerDistance;
            bool IsEnabledWhenInSequence;
            bool IsEnabledWhenPlayerIsInSequence;
            bool ShouldStopTalkingInstantlyWhenInSequence;
            float GlobalCooldown;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A3C0AF9D870A59E, 0x28)]
        public class ContextualSpeechEvent : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AE81F307899630C, 0x50)]
        public class ContextualSpeechEventMappingResource : Resource
        {
            Ref<ContextualSpeechEvent> Event;
            Array<Ref<ContextualSpeechRuleResource>> Rules;
            bool IgnoresGlobalCooldown;
            float Cooldown;
            bool IsCooldownGlobal;
            bool CanPlayWhileInSlowMotion;
            bool EnableListenerSearch;
            bool SuppressSubtitles;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3777A746AA40DC42, 0x68)]
        public class ContextualSpeechRuleResource : Resource
        {
            Ref<GraphProgramResource> Condition;
            Array<Ref<ConditionResource>> FactConditions;
            Ref<GraphProgramResource> SideEffect;
            Ref<AISignalType> SignalType;
            Ref<AISignalType> ResponseType;
            int Priority;
            int MaxRepeatCount;
            int ChanceToPlay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47B51A14A44A887, 0x28)]
        public class ContextualSpeechRuleSave : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6942E2F5E5D6D4F, 0x38)]
        public class ContextualSpeechSave : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x353B2D32C58139BA, 0x1E0)]
        public class ContextualTakeDownAttackResource : ContextualActionResource
        {
            float MaximumChangeInVelocity;
            float MaximumTurn;
            float MaxTurnToTargetAngle;
            float ExtraCapsuleRadiusWhileFalling;
            bool ShouldSelectWithCamera;
            Vec3 InitialJumpVelocity;
            String CustomJumpAnimationStateName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C8AF0C07BCF569A, 0x1F0)]
        public class ContextualWarpedAttackResource : ContextualActionResource
        {
            String AnimationState;
            int ContactEventUserData;
            Vec3 ContactPosition;
            Vec3 ContactWarpOffset;
            bool KeepUpdatingOrientation;
            bool KeepUpdatingWarpAnimationVariables;
            Ref<SkinnedModelResource> ModelResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32A0FBEF7F8C800, 0x4B0)]
        public class ContinuousAmmoEjector : AmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABEB0EA4DBEFFC5B, 0x1C0)]
        public class ContinuousAmmoEjectorRep : AmmoEjectorRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x41B4AFECDA65632, 0x1E0)]
        public class ContinuousAmmoEjectorResource : AmmoEjectorResource
        {
            float RoundsPerSecond;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75D6EED0F48C5CDA, 0xB0)]
        public class ControllableZoomComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9525EB6AAAB374EF, 0x30)]
        public class ControllableZoomComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF07C9CE0964A2827, 0x58)]
        public class ControllableZoomComponentResource : EntityComponentResource
        {
            Ref<CameraPropertiesSetResource> MinCameraProperties;
            Ref<CameraPropertiesSetResource> MaxCameraProperties;
            float StartZoomFactor;
            float StartZoomBlendTime;
            float ZoomSpeed;
            float ZoomToTargetBlendTime;
            Ref<HUDCrosshairSettings> Crosshair;
            bool PlayerInvisible;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xADD2CA3346D09DD1, 0x4C0)]
        public class ControlledEntity : Entity
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            float MinAimHeading;
            [RTTI.BrokenReflectionOffset(0x0)]
            float MaxAimHeading;
            [RTTI.BrokenReflectionOffset(0x0)]
            float MinAimPitch;
            [RTTI.BrokenReflectionOffset(0x0)]
            float MaxAimPitch;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x667180E908054C67, 0x270)]
        public class ControlledEntityRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A73EEBA66E662E2, 0x208)]
        public class ControlledEntityResource : EntityResource
        {
            String EyeBone;
            float MinAimHeading;
            float MaxAimHeading;
            float MaxAimHeadingSpeed;
            float MaxAimHeadingAcceleration;
            bool IsAimHeadingFullyRotatable;
            float MinAimPitch;
            float MaxAimPitch;
            float MaxAimPitchSpeed;
            float MaxAimPitchAcceleration;
            bool NoInterpolationOnUpdateAim;
            float CollisionRadius;
            float ThreatPredictionClampRadius;
            String IdentifiedSignalType;
            Ref<CameraEntityResource> CameraResource;
            float CameraActivateDuration;
            float CameraDeactivateDuration;
            Ref<HUDResource> HUDResource;
            EPositionAimMode PreferredPositionAimMode;
            bool ResetAimTargetAfterLoading;
            AnimationTagSet AnimationSetTags;
            Ref<AIIndividualResource> IndividualResource;
            float ClaimVolumeScaleForCombat;
            float ClaimVolumeHeight;
            bool AddToAIManager;
            float MinLinearSpeed;
            float MinimumOffensiveRange;
            float MaximumOffensiveRange;
            float OffensiveCapability;
            float DefensiveCapability;
            bool IncludeInChildLOFCheck;
            Array<String> VisualNodeBones;
            Array<String> LineAttackNodeBones;
            Array<String> BallisticAttackNodeBones;
            bool EffectsAreCharacterBound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AA0015E5A8453E2, 0x218)]
        public class ControlledEntitySpawnInfo : EntitySpawnInfo
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5AC9BF3884F5FF2, 0x4F0)]
        public class ControlledFollowCameraEntity : FollowCameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBFCAF7DBD6873DA1, 0x330)]
        public class ControlledFollowCameraEntityResource : FollowCameraEntityResource
        {
            float TurnSpeed;
            float PitchSpeed;
            float TurnAccelerationFactor;
            float ParentTurnInheritanceFactor;
            float ParentPitchInheritanceFactor;
            Vec3 MinPitchOffset;
            Vec3 CenterPitchOffset;
            Vec3 MaxPitchOffset;
            Vec3 MinHeadingOffset;
            Vec3 CenterHeadingOffset;
            Vec3 MaxHeadingOffset;
            Vec3 PivotOffset;
            Ref<JoystickInputModifierResource> JoystickInputModifierResource;
            bool IgnoreEntityParentHeading;
            Vec3 ForwardOffset;
            Vec3 BackOffset;
            Vec3 LeftOffset;
            Vec3 RightOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4D565FC322D48DA, 0x38)]
        public class ControlledFollowCameraProperties : CameraPropertiesBase
        {
            float TurnSpeed;
            float PitchSpeed;
            float TurnAccelerationFactor;
            float ParentTurnInheritanceFactor;
            float ParentPitchInheritanceFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAC88A9835052A3A, 0x120)]
        public class Controller : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC82E765C7CC99656, 0x70)]
        public class ControllerConfig
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76780B07BDD4C05C, 0xD28)]
        public class ControllerConfigResource : Resource
        {
            int ID;
            Ref<LocalizedTextResource> Title;
            bool IsDefault;
            EControllerScheme ControllerScheme;
            ETriState DefaultZoomToggle;
            ETriState DefaultCrouchToggle;
            bool AllowShoulderSwapping;
            Array<ControllerLegend> Legend;
            ControllerFunction PrimaryFire;
            ControllerFunction SwitchFire;
            ControllerFunction CycleToNextAmmoType;
            ControllerFunction CycleToPreviousAmmoType;
            ControllerFunction MeleePrimaryAttack;
            ControllerFunction MeleeSecondaryAttack;
            ControllerFunction SwitchZooming;
            ControllerFunction SwitchZoomMode;
            ControllerFunction Aim;
            ControllerFunction SprintToggle;
            ControllerFunction Jump;
            ControllerFunction Use;
            ControllerFunction Relocate;
            ControllerFunction Loot;
            ControllerFunction PickupWeapon;
            ControllerFunction QuickThrowGesture;
            ControllerFunction Reload;
            ControllerFunction Crouch;
            ControllerFunction Slide;
            ControllerFunction TakeCover;
            ControllerFunction Vault;
            ControllerFunction DiveRoll;
            ControllerFunction DropWeapon;
            ControllerFunction NextWeapon;
            ControllerFunction SwimUnderWater;
            ControllerFunction FlashlightToggle;
            ControllerFunction SlowMoToggle;
            ControllerFunction CloseCombat;
            ControllerFunction Block;
            ControllerFunction Suicide;
            ControllerFunction LockAim;
            ControllerFunction SkipSequence;
            ControllerFunction SpectatorToggleSpawnMenu;
            ControllerFunction DropFromLedge;
            ControllerFunction DropToLedge;
            ControllerFunction Heal;
            ControllerFunction GrabLeftHand;
            ControllerFunction GrabRightHand;
            ControllerFunction CounterBucking1;
            ControllerFunction CounterBucking2;
            ControllerFunction PrimaryContextualAction;
            ControllerFunction SecondaryContextualAction;
            ControllerFunction TertiaryContextualAction;
            ControllerFunction AAGunPrimaryfire;
            ControllerFunction AAGunSecondaryfire;
            ControllerFunction AAGunSwitchZoom;
            ControllerFunction SelectUp;
            ControllerFunction SelectLeft;
            ControllerFunction SelectRight;
            ControllerFunction CharacterScreenCampaign;
            ControllerFunction CharacterScreenOnline;
            ControllerFunction OptionScreenCampaign;
            ControllerFunction OptionScreenOnline;
            ControllerFunction IngameMainMenu;
            ControllerFunction ShowHud;
            ControllerFunction MountHorse;
            ControllerFunction DismountHorse;
            ControllerFunction DismountHorseSpecial;
            ControllerFunction MountSpeedUp;
            ControllerFunction MountSpeedDown;
            ControllerFunction MountRangedAttack;
            ControllerFunction MountMeleeAttack;
            ControllerFunction MountSecondaryMeleeAttack;
            ControllerFunction HorseCall;
            ControllerFunction InventoryNextweapon;
            ControllerFunction InventoryStowweapon;
            ControllerFunction InventorySelection;
            ControllerFunction InventoryQuickSelection_1;
            ControllerFunction InventoryQuickSelection_2;
            ControllerFunction InventoryQuickSelection_3;
            ControllerFunction InventoryQuickSelection_4;
            ControllerFunction InventorySelectToolNext;
            ControllerFunction InventorySelectToolPrev;
            ControllerFunction InventoryUseTool;
            ControllerFunction Tag;
            ControllerFunction Untag;
            ControllerFunction UntagAll;
            ControllerFunction FocusMode;
            ControllerFunction FocusTagStatusInfo;
            ControllerFunction FocusWeaponSelect;
            ControllerFunction FocusUp;
            ControllerFunction FocusDown;
            ControllerFunction FocusLeft;
            ControllerFunction FocusRight;
            ControllerFunction BulletTime;
            ControllerFunction LureEnemy;
            ControllerFunction AudiologToggle;
            ControllerFunction ManualSave;
            ControllerFunction Keyboard_Movement_Forward;
            ControllerFunction Keyboard_Movement_Backward;
            ControllerFunction Keyboard_Movement_Left;
            ControllerFunction Keyboard_Movement_Right;
            ControllerFunction Keyboard_Run_Walk_Toggle;
            ControllerFunction Keyboard_Heavy_Attack_Toggle;
            ControllerFunction IngameMenuSkill;
            ControllerFunction IngameMenuInventory;
            ControllerFunction IngameMenuCraft;
            ControllerFunction IngameMenuMap;
            ControllerFunction IngameMenuQuests;
            ControllerFunction IngameMenuNotebook;
            ControllerFunction MountSpeedUpPC;
            ControllerFunction JumpPC;
            ControllerFunction RelocatePC;
            ControllerFunction VaultPC;
            ControllerFunction SkipSequencePC;
            ControllerFunction SuicidePC;
            ControllerFunction ProtoCrossPC;
            ControllerFunction FastSwapWeaponUp;
            ControllerFunction FastSwapWeaponDown;
            Ref<StickFunction> StickMove;
            Ref<StickFunction> StickLook;
            Ref<StickFunction> StickInventorySelection;
            Ref<StickFunction> DialogueChoice;
            Ref<StickFunction> StickAnalogZoom;
            Ref<StickFunction> StickMoveMount;
            Ref<StickFunction> DialogueChoiceMouse;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF92E7A253AC47032, 0x18)]
        public class ControllerFunction
        {
            ETriggerType Trigger;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF67CF680A21D856, 0x18)]
        public class ControllerLegend
        {
            EButton Button;
            Ref<LocalizedTextResource> SinglePlayerText;
            Ref<LocalizedTextResource> MultiPlayerText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1715F9C2F886EF8B, 0x20)]
        public class ControllerMapContent
        {
            EGameFunctionGroup FunctionGroup;
            EControllerButtonType ButtonType;
            EMenuInputFunction MenuFunction;
            Array<EButton> Buttons;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AA9BEFB9EAC31A2, 0x20)]
        public class ConvexHull
        {
            Array<Vec3Pack> Vertices;
            Array<ConvexHullTriangle> Triangles;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC62B7B75348625E0, 0x20)]
        public class ConvexHullTriangle
        {
            int Index0;
            int Index1;
            int Index2;
            PlaneEq Plane;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1DFFF577EBCB1A7, 0x280)]
        public class ConvolutionReverbSubmixResource : ReverbSubmixResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x483216B5E6AB16DB, 0x20)]
        public class CoreObject : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BAA181FD4855E8C, 0x188)]
        public partial class CoreScript : CoreObject, RTTI.IExtraBinaryDataCallback
        {
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D6ACA2786C58ADC, 0x1D8)]
        public class CoreTelemetryService : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEF0152AB6376B85, 0x80)]
        public class CorpseStimuliComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3DE14D1E64E1A813, 0x48)]
        public class CorpseStimuliComponentResource : EntityComponentResource
        {
            Ref<AIVisualStimulusResource> VisualStimulus;
            Ref<AISmellStimulusResource> SmellStimulus;
            Ref<AICorpseFoundMessageResource> CorpseFoundMessage;
            float ActivationDelay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6747CCF8804D7CF3, 0x48)]
        public class CountdownTimer : CoreObject
        {
            float Duration;
            bool VisibleOnScreen;
            bool CountingUp;
            bool KeepRunningUp;
            bool Save;
            Ref<IntegerFact> DurationFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6A4D10BC69EFF20, 0x38)]
        public class CountdownTimerManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8596DFD73A58B08, 0x28)]
        public class CountdownTimerSave : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85B2C38935792194, 0x20)]
        public class CoverCompressionDepthTable
        {
            Array<float> DepthValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDD3176F9D6752EA, 0xC0)]
        public class CraftingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59C59F428757ABDB, 0x78)]
        public class CraftingComponentResource : EntityComponentResource
        {
            Array<Ref<CraftingRecipeGroup>> AmmoRecipeGroups;
            Array<Ref<CraftingRecipeGroup>> ToolRecipeGroups;
            Array<Ref<CraftingRecipeGroup>> UpgradeRecipeGroups;
            Array<Ref<CraftingRecipeGroup>> TravelRecipeGroups;
            String QuickCraftGesture;
            Ref<PerkLevel> UpgradedCraftingPerk;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3079DEAD95E34A4E, 0x40)]
        public class CraftingQuestTrigger : QuestTrigger
        {
            Array<Ref<CraftingRecipe>> Recipes;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CA35209BE7C68C2, 0x28)]
        public class CraftingQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC63285A6F697077, 0x40)]
        public class CraftingRecipe : Resource
        {
            Ref<LocalizedTextResource> RecipeDescription;
            Array<Ref<CraftingRecipeIngredient>> Ingredients;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62D14A9D3A7F0770, 0x60)]
        public class CraftingRecipeGroup : Resource
        {
            Ref<LocalizedTextResource> GroupName;
            Ref<LocalizedTextResource> GroupDescription;
            Ref<LocalizedTextResource> GroupCraftingTitle;
            Ref<UITexture> IconTexture;
            Array<Ref<CraftingRecipe>> Recipes;
            bool ShowInMenu;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC68983CB857B9072, 0x38)]
        public class CraftingRecipeIngredient : Resource
        {
            Ref<EntityResource> Item;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x669EFFE7DA052306, 0x58)]
        public class CraftingSave : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E91F539B607235B, 0x28)]
        public class CraftingViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94F6010184FB8A28, 0x38)]
        public class CrashAction : EntityAction
        {
            Ref<CrashMoverResource> CrashMoverResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9035C056DCCBF11B, 0x88)]
        public class CrashComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39554688E33769DD, 0x28)]
        public class CrashComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB373BFC84C9FB836, 0x210)]
        public class CrashMover : PhysicsMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8ABAA09A3587F89, 0xB0)]
        public class CrashMoverResource : PhysicsMoverResource
        {
            float CrashTimeLimit;
            float HomingDelay;
            ECrashMoverTargeting Mode;
            String AutoMarkerPrefix;
            FRange TargetDeviationRange;
            float Velocity;
            float UpImpulseTime;
            float UpImpulseStrength;
            Vec3 AngularImpulseStrength;
            float AngularImpulseTime;
            float AngularVelocityLimit;
            String AIMessage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51E195EBB7CFCB6E, 0x38)]
        public class CreateClanRequest : RTTIRefObject
        {
            String Name;
            String Tag;
            String Description;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEAB04695088558F, 0x40)]
        public class CreateComponentAction : EntityAction
        {
            Ref<EntityComponentResource> ComponentResource;
            bool PreventDuplicate;
            bool AutoRemoveAtTransition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5DFC7CA13990332, 0x38)]
        public class CreateCrowdEventAction : EntityAction
        {
            Ref<CrowdEventResource> EventResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33C93B8901E04BC6, 0x100)]
        public class CreateDamageEntityAction : CreateEntityAction
        {
            EAttackEventLinkType AttackEventLinkType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88898E308BEDD840, 0x40)]
        public class CreateDangerAreaAction : EntityAction
        {
            float Radius;
            float ExpiryTime;
            bool Attach;
            EAIDangerAreaType Type;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD273F8CDA89ADDA7, 0xA0)]
        public class CreateEffectComponentAction : EntityAction
        {
            Ref<EffectComponentResource> EffectComponentResource;
            Mat44 Matrix;
            Vec3 RandomRotation;
            bool AutoRemoveAtTransition;
            bool CreateRelativeToDamageLocation;
            bool CreateRelativeToRoot;
            float AlignWithReflectionVectorFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B3D6E0DE90783D3, 0x50)]
        public class CreateElectricityAction : EntityAction
        {
            Ref<ElectricityEmitNodeResource> ElectricityEmitNodeResource;
            Vec3 Position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B31868F8838BD88, 0xF0)]
        public class CreateEntityAction : EntityAction
        {
            Ref<EntityResource> EntityResource;
            String HelperNode;
            Mat44 Matrix;
            Ref<RandomMatrixResourceBase> RandomMatrix;
            Vec3 RandomRotation;
            bool PassOnDamageImpulse;
            float PassOnDamageImpulseFactor;
            Vec3 InitialPhysicsImpulse;
            Ref<RandomVectorResource> RandomPhysicsImpulse;
            bool PhysicsImpulseUpInWorldSpace;
            bool AutoRemoveAtTransition;
            bool CreateRelativeToDamageLocation;
            bool CreateRelativeToRoot;
            bool IgnoreRelativeRotation;
            float AlignWithReflectionVectorFactor;
            ECreateAsChild CreateAsChild;
            ECreateEntityFactionOverride FactionOverride;
            Ptr<EntityAction> EntityAction;
            ECreateEntityLifetime EntityLifetime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29058E4E70FD6CD3, 0x120)]
        public class CreateEntityActorInstance : EntityActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0A2A87DE45E3502, 0x90)]
        public class CreateEntityActorResource : EntityActorResource
        {
            Ref<EntityResource> EntityResource;
            Ref<SpawnSetupConcrete> SpawnSetup;
            bool LocalActor;
            bool RemoveEntityOnUnBind;
            bool CensorSensitiveContent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC798645815DEE32, 0xA0)]
        public class CreateExplosionAction : EntityAction
        {
            Ref<ExplosionResource> ExplosionResource;
            Mat44 Matrix;
            bool CreateRelativeToDamageLocation;
            bool CopyDamageTypeFlagsFromContext;
            String CreateRelativeToEntityHelper;
            EAttackEventLinkType AttackEventLinkType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F20CDC12022DD1D, 0x40)]
        public class CreateGrenadeTriggerComponentAction : EntityAction
        {
            Ref<GrenadeTriggerComponentResource> ComponentResource;
            bool TriggerWithThisAttackEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73D6D5DEC1294B2C, 0x48)]
        public class CreditsColumn : Resource
        {
            WString Text;
            Ref<MenuStyleClass> TextStyle;
            Ref<MenuStyleClass> ColumnStyle;
            Ref<UITexture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x993D278B65361B3F, 0x50)]
        public class CreditsRow : Resource
        {
            Array<Ref<CreditsColumn>> Columns;
            Ref<MenuStyleClass> RowStyle;
            Ref<UITexture> Texture;
            bool IsPartOfRobotFoundryCredits;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73B1F3C970062210, 0x40)]
        public class CrosshairColor : CoreObject
        {
            String Name;
            FRGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4BCE8D24916B307, 0x60)]
        public class CrowdComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A2221D47ADAAC0D, 0x38)]
        public class CrowdEventResource : Resource
        {
            CrowdEventType EventType;
            float Radius;
            float Duration;
            int Priority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C3A055C2172488F, 0x58)]
        public class CrowdImpostorResource : EntityImpostorResource
        {
            Array<Ref<FactValue>> Facts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48C088C93DC4BB50, 0x30)]
        public class CrowdManagerResource : Resource
        {
            Ref<CrowdSpawnManagerResource> CrowdSpawnManagerResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA45D1D88646B8CF, 0x190)]
        public class CrowdMember : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C27DC28C56F9095, 0x2E0)]
        public class CrowdSequence : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF27AEC8FF5DB328, 0x140)]
        public class CrowdSequenceResource : EntityResource
        {
            Ref<SequenceResource> SequenceResource;
            float Weight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x457E9B4A8F541B4A, 0x150)]
        public class CrowdSpawnManager : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57A180848459C786, 0x50)]
        public class CrowdSpawnManagerResource : Resource
        {
            int MaxEntities;
            SpawnAlgorithmType SpawnAlgorithm;
            String DefaultAIIndividualResourceName;
            float StreamOutDistance;
            Ref<NavMeshBuilderSettings> NavMeshBuilderSettings;
            Ref<EntityImpostorResource> DefaultImpostorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FF97E7063155567, 0x120)]
        public class CrowdZone : NavMeshArea
        {
            Array<CrowdZoneSpawnSetupLink> ConstantCrowdSpawnSetup;
            Ref<SpawnSetupBase> CrowdSpawnSetup;
            int MaxEntityCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0F98C9DD2C4315C, 0xC8)]
        public class CrowdZoneData : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBAE48228F07830A, 0x50)]
        public class CrowdZoneManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE095BA73D80C0A4B, 0x10)]
        public class CrowdZoneSpawnSetupLink
        {
            int Amount;
            Ref<SpawnSetupBase> SpawnSetup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE98C3D5F11474DFF, 0x60)]
        public class CubemapGBuffer : Resource
        {
            Ref<Texture> AlbedoTexture;
            Ref<Texture> NormalTexture;
            Ref<Texture> DepthTexture;
            Vec3 Position;
            float SkyLuminanceScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x505B9269AE3AB18F, 0x230)]
        public class CubemapZone : GeometryObject
        {
            Shape2DExtrusion base_Shape2DExtrusion;
            float FadeDistance;
            bool UseAsGlobal;
            bool DisableRenormalization;
            int Priority;
            float DefaultIntensity;
            int TextureResolution;
            ECubemapZoneDataStorageMode StorageMode;
            float StreamingActivationDistance;
            Ref<Texture> CubemapTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA594FAEE4B26B429, 0xE0)]
        public class CubemapZoneManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CC200D52CE9DC47, 0x38)]
        public class CubemapbakeOnlyGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC668B09FA794005F, 0xA0)]
        public class CurveResource : Resource
        {
            Array<Vec2> Points;
            Array<float> Tangents;
            bool Smooth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40E48BD894F27DD1, 0x58)]
        public class CustomInstigatorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA29CD0A813391689, 0x28)]
        public class CustomInstigatorComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE44EA284E0F6EDA, 0x60)]
        public class CustomQuestReward : QuestReward
        {
            Ref<GraphProgramResource> Graph;
            Ref<Texture> Icon;
            Ref<UITexture> UIIcon;
            Ref<LocalizedTextResource> DisplayName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DF91FD99425A2E1, 0xB0)]
        public class DLCLocationMarkerResource : LocationMarkerResource
        {
            bool AutoDiscoveredWhenFogOfWarIsLifted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4C9AFBFC7F766FA, 0x48)]
        public class DLCManagerGameResource : Resource
        {
            Array<Ref<EntitlementResource>> GOTYEntitlements;
            Array<DLCReviewSaveWithEntitlements> DLCReviewSaves;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x212A6D5D88C9B17A, 0x40)]
        public class DLCProductResource : Resource
        {
            Array<Ref<DLCResource>> Packs;
            String ProductIdSuffix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CE8EF01DC78DD0A, 0x48)]
        public class DLCResource : Resource
        {
            int PackID;
            String PackName;
            String ProductIdSuffix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA92B2C6040AAE55D, 0x48)]
        public class DLCReviewSaveResource : Resource
        {
            Ref<LocalizedTextResource> SaveTitle;
            uint16 LevelID;
            Array<uint8> SaveData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C85034394C90A95, 0x38)]
        public class DLCReviewSaveWithEntitlements
        {
            Ref<LocalizedTextResource> MenuTitleText;
            StreamingRef<DLCReviewSaveResource> ReviewSave;
            Array<Ref<EntitlementResource>> RequiredEntitlements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D54F201A61FA5D1, 0x88)]
        public class DLCVariableActorResource : VariableActorResource
        {
            float Distance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90F9009DD4270C92, 0xA0)]
        public class DLCVoiceComponent : VoiceComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FAF1CA93ABE8D9E, 0x58)]
        public class DLCVoiceComponentResource : VoiceComponentResource
        {
            StreamingRef<VoiceSignalsResource> DLCSignals;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E2555B01102F012, 0x10)]
        public class DRange
        {
            double Min;
            double Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5D50EE24C22D80D, 0x58)]
        public class DamageActorEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD0F710BD89CEFDE7, 0x58)]
        public class DamageActorEventResource : EventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<LocatorResource> SourceLocatorResource;
            Ref<DamageTypeResource> DamageTypeResource;
            float DamageAmount;
            Ref<DestructibilityPart> DamagePart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6368E56B30495DC, 0x4A0)]
        public class DamageArea : Entity
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Vec3 BoxOverrideMin;
            [RTTI.BrokenReflectionOffset(0x0)]
            Vec3 BoxOverrideMax;
            [RTTI.BrokenReflectionOffset(0x0)]
            Vec3 DangerAreaBoxOverrideMin;
            [RTTI.BrokenReflectionOffset(0x0)]
            Vec3 DangerAreaBoxOverrideMax;
            float DamagePerSecondOverride;
            float RadiusOverride;
            float DangerAreaRadiusOverride;
            Ptr<DamageTypeResource> DamageTypeResourceOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA617B06C0F166693, 0x1D0)]
        public class DamageAreaResource : EntityResource
        {
            Array<Ref<DamageSettings>> DamageSettings;
            bool IgnoreAttachedEntities;
            float Interval;
            float MaxContinuousDamageDuration;
            bool IrradiatingDamage;
            float Radius;
            Ref<CurveResource> RadiusOverTime;
            bool RescaleDistanceCurvesToRadius;
            BoundingBox3 Box;
            float LifeTime;
            bool UseParentInstigator;
            bool ForceKill;
            bool CheapCollisionCheck;
            float Density;
            bool OnlyDamageEnemyFaction;
            bool ShouldIgnoreInstigator;
            bool BlockDamageByGeometry;
            bool MergeWithOverlappingAreas;
            bool IsDangerAreaDisabled;
            float DangerAreaRadius;
            BoundingBox3 DangerAreaBox;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F29B84184286E66, 0x68)]
        public class DamageCausedReportComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F10343B959E2947, 0x28)]
        public class DamageCausedReportComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9948C924332BB72F, 0x60)]
        public class DamageDealtModifierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF45513F8D63FE1C6, 0x88)]
        public class DamageDealtModifierComponentResource : EntityComponentResource
        {
            TagPropertyLinkCollection RequiredTags;
            Array<Ref<DamageTypeResource>> DamageTypeResource;
            Array<GGUUID> TargetTypesUUIDs;
            Array<Ref<TagProperty>> DestructibilityPartTags;
            float AmountMultiplier;
            float AmountModifier;
            float SeverityMultiplier;
            float SeverityModifier;
            float AutoExpiryDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38B8AD82B9C1AFA8, 0x58)]
        public class DamageEntityAction : EntityAction
        {
            Array<Ref<DestructibilityPart>> ConvertedParts;
            bool Kill;
            float Amount;
            float ImpactSeverity;
            Ref<DamageTypeResource> DamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA9A91868959E415, 0x60)]
        public class DamageModifierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB33F013B2FAA1AC, 0x60)]
        public class DamageModifierComponentResource : EntityComponentResource
        {
            float DamageTakenModifier;
            float SeverityModifier;
            bool MakeInvulnerable;
            EDamageModifierTypeFilter DamageModifierTypeFilter;
            Array<Ref<DamageTypeResource>> DamageTypeResources;
            Array<Ref<TagProperty>> DestructibilityPartTags;
            EDamageModifierTypeFilter PartTagsTypeFilter;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1548213786666122, 0x58)]
        public class DamageNullifierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB5090840FA709AE, 0x28)]
        public class DamageNullifierComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99B68DA095D88263, 0x78)]
        public class DamageOnImpactComponent : ReactOnImpactComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FB0D41DCB4D9C95, 0x68)]
        public class DamageOnImpactComponentResource : ReactOnImpactComponentResource
        {
            Array<Ref<DamageSettings>> DamageSettingsSP;
            Array<Ref<DamageSettings>> DamageSettingsMP;
            Array<Ref<DamageSettings>> DamageSettingsAI;
            bool ForceKill;
            bool OnlyDamageEnemyFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9DB3011CAB4F1EB2, 0x78)]
        public class DamageOverTimeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE0FD0E13A82E6CB, 0x40)]
        public class DamageOverTimeComponentResource : EntityComponentResource
        {
            Array<Ref<DamageSettings>> DamageSettings;
            float Duration;
            float Interval;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF80FA08F889E5AF0, 0x70)]
        public class DamagePassOnComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53198DE01BEB3E38, 0x30)]
        public class DamagePassOnComponentResource : EntityComponentResource
        {
            bool ShouldPassOnKillDamage;
            bool IgnoreExplosions;
            bool IgnoreAreaDamage;
            bool SendDamageCaused;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x843454FA3D1E4B8B, 0x10)]
        public class DamagePassOnData
        {
            Ref<DestructibilityPart> Part;
            float Multiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAECC0960BB0EA3F, 0x28)]
        public class DamageScoreEvent : RTTIObject
        {
            Array<Ref<DamageTypeResource>> DamageTypeResources;
            EScoreEvent ScoreEvent;
            float TimeOut;
            int Points;
            bool OnKill;
            bool OnAssist;
            bool OnDamage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB3FF56FDBBBDAEA, 0x58)]
        public class DamageSettings : Resource
        {
            Ref<DamageTypeResource> DamageTypeResource;
            float DamageAmount;
            float ImpactSeverity;
            float ImpactImpulse;
            float ImpactImpulseHumanoidFactor;
            Ref<CurveResource> DamageOverDistance;
            Ref<CurveResource> ImpactSeverityOverDistance;
            Ref<CurveResource> ImpactImpulseOverDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6315E1A66AA4F144, 0x40)]
        public class DamageStatDisplayEntry : StatDisplayEntry
        {
            Ref<DamageSettings> DamageSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B08FA713569E932, 0x68)]
        public class DamageStatModifierResource : StatModifierResource
        {
            Array<Ref<TagProperty>> AffectedPartTags;
            Array<Ref<DamageTypeResource>> AffectedDamageTypeResources;
            Ref<DamageTypeGroup> AffectedDamageTypeGroup;
            Ref<CurveResource> RatingToDamageCurve;
            Ref<CurveResource> RatingToSeverityCurve;
            Ref<CurveResource> RatingToImpactImpulseCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED3629B5CED62855, 0x38)]
        public class DamageTypeGroup : Resource
        {
            Array<Ref<DamageTypeResource>> DamageTypeResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x844E0F2D968DBFEA, 0x10)]
        public class DamageTypeMultiplier
        {
            Ref<DamageTypeResource> DamageTypeResource;
            float Multiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15E8608E4DD6F3F4, 0x40)]
        public class DamageTypeResource : Resource
        {
            Ref<DamageTypeResource> BaseDamageTypeResource;
            Ref<AIHapticStimulusResource> HapticStimulus;
            ETriState EligibleForHeadshots;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B9934A6350CE18B, 0x38)]
        public class DamageTypeResourceSettings : Resource
        {
            Ref<DamageTypeResource> DefaultDamageTypeResource;
            Ref<DamageTypeResource> PhysicsDamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB0ACEEACE91FE11, 0x68)]
        public class DamageTypeResourceSettingsGame : DamageTypeResourceSettings
        {
            Array<Ref<DamageTypeResource>> HeadshotDamageTypeResources;
            Array<Ref<DamageTypeResource>> StealthKillDamageTypeResources;
            Array<Ref<DamageTypeResource>> IgnoredByAIDamageTypeResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8746F99529328C00, 0x38)]
        public class DamageTypeStatsDisplayResource : Resource
        {
            Ref<DamageTypeResource> DamageType;
            Ref<StatDisplayEntry> StatDisplayEntry;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB8BB1020A8378B7, 0x18)]
        public class DamageTypeToEntityStatMap
        {
            Array<Ref<DamageTypeResource>> DamageTypeResources;
            EPlayerScoreEntityStat EntityStat;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D78B093306926D5, 0x50)]
        public class DamagerIDAction : ConditionalAction
        {
            Array<int> DamagerIDs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35F78209FCBF8E08, 0xC0)]
        public class DangerAreaCapsuleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DEE132DBB5108A6, 0x48)]
        public class DangerAreaCapsuleComponentResource : DangerAreaComponentResource
        {
            float RadiusBase;
            float Length;
            float RadiusOut;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72E21D71FA56BBAA, 0x38)]
        public class DangerAreaComponentResource : EntityComponentResource
        {
            String HelperName;
            EAIDangerAreaType DangerType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5DB553C071C9887, 0xC0)]
        public class DangerAreaOrientedBoxComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5BC1E69B473AA014, 0x50)]
        public class DangerAreaOrientedBoxComponentResource : DangerAreaComponentResource
        {
            Vec3 Extents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E1ED1803A2B5C3D, 0xC0)]
        public class DangerAreaSphereComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17A177546D66FF8F, 0x40)]
        public class DangerAreaSphereComponentResource : DangerAreaComponentResource
        {
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E09340D7626AFAE, 0x28)]
        public partial class DataBufferResource : BaseResource, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A753008990D4F78, 0x90)]
        public class DataSource : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E9B8DAB2F012294, 0xD0)]
        public class DataSourceAmmoCrafting : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC1DADCED100CE0, 0x128)]
        public class DataSourceAmmoInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x892F179466FD6AC1, 0xC0)]
        public class DataSourceAmmoRecipeGroups : DataSourceRecipeGroups
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7C87F2DB08868F8, 0xA0)]
        public class DataSourceBenchmarkResults : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DE030A9AD0A32F5, 0xD8)]
        public class DataSourceCollectables : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x606158B0DBB9FBD1, 0xB8)]
        public class DataSourceCollectablesResource : DataSourceResource
        {
            Array<Ref<CollectableStyleMapping>> CollectableStyles;
            Ref<MenuStyleClass> MarginRightStyleClass;
            Ref<MenuStyleClass> MarginBottomStyleClass;
            int NumberOfColumsPerRegion;
            UUIDRef<CollectableType> CollectableTypeVantages;
            UUIDRef<CollectableType> CollectableTypeArtifacts;
            UUIDRef<CollectableType> CollectableTypeTrees;
            UUIDRef<CollectableType> CollectableTypePlants;
            UUIDRef<CollectableType> CollectableTypeHolograms;
            UUIDRef<CollectableType> CollectableTypePaints;
            Ref<LocalizedTextResource> CollectablesRegionDescription;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20BD5BFE4F4E5E00, 0x98)]
        public class DataSourceControllerMapping : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88A2FAC97F54F8FC, 0x28)]
        public class DataSourceControllerMappingResource : DataSourceResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x997E8DAAF8C7D38D, 0x90)]
        public class DataSourceCredits : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1725F7AB7E228F8C, 0x38)]
        public class DataSourceCreditsResource : DataSourceResource
        {
            Array<Ref<CreditsRow>> CreditRows;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32FEC1BC94556867, 0xC0)]
        public class DataSourceDataCubes : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0B784D7596166A1, 0x80)]
        public class DataSourceDataCubesResource : DataSourceResource
        {
            Array<Ref<CollectableStyleMapping>> CollectableStyles;
            int NumberOfColumsPerType;
            UUIDRef<CollectableType> CollectableTypeText;
            UUIDRef<CollectableType> CollectableTypeAudio;
            UUIDRef<CollectableType> CollectableTypeHologram;
            UUIDRef<CollectableType> CollectableTypeBook;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6241806C6D08CBD6, 0x90)]
        public class DataSourceDebugLoadingHints : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x854E1FDC962727BF, 0x90)]
        public class DataSourceEntitlements : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BAACA604E63F4E2, 0x30)]
        public class DataSourceEntitlementsResource : DataSourceResource
        {
            Ref<EntitlementResource> DLCPackEntitlementKey;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x222F45A1A9AEF35F, 0x198)]
        public class DataSourceEntityInventory : DataSourceLootableInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBBD12D2659460B6, 0x128)]
        public class DataSourceEquipmentInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46416B30D31629AB, 0x68)]
        public class DataSourceEquipmentInventoryResource : DataSourceResource
        {
            Ref<EnumFactValue> CompareQuestToShowHackingPerkSetsFact;
            Array<Ref<PerkSet>> HackingPerkSets;
            Ref<PerkSet> DLCHackingPerkSet;
            Ref<UITexture> WeaponEquippedIconTop;
            Ref<UITexture> WeaponEquippedIconLeft;
            Ref<UITexture> WeaponEquippedIconBottom;
            Ref<UITexture> WeaponEquippedIconRight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9FCB865A3C92748, 0x90)]
        public class DataSourceFacts : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73C816080D560127, 0x40)]
        public class DataSourceFactsResource : DataSourceResource
        {
            Array<Ref<BooleanFact>> E3HandsOnBooleanFacts;
            Ref<BooleanFact> E3TheatreDemoBooleanFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67C029432BB814F9, 0x90)]
        public class DataSourceFastTravelLoading : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71DD7D1024645C34, 0x90)]
        public class DataSourceGame : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42A8388C0F49133B, 0xB8)]
        public class DataSourceGameLoading : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0A1045C12AFC37F, 0x90)]
        public class DataSourceGameStatistics : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB9442134F0B5AB9, 0x50)]
        public class DataSourceGameStatisticsResource : DataSourceResource
        {
            Array<Ref<GameStatisticsGroup>> ProgressionGroups;
            Ref<GameStatisticsGroupContainer> DLC1ProgressionGroupContainer;
            Array<Ref<GameStatisticsGroup>> StatisticsGroups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33FBEAD79F6CE155, 0x98)]
        public class DataSourceGraphicsDisplayImage : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D3DF1AD09BA8C6D, 0x28)]
        public class DataSourceGraphicsDisplayImageResource : DataSourceResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C928D53A1F7B750, 0x90)]
        public class DataSourceHealthWarning : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF7E9A2CDA43975A6, 0x90)]
        public class DataSourceIntro : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D956FF3500175CC, 0x128)]
        public class DataSourceInventory : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x618027E801B3F59E, 0x98)]
        public class DataSourceInventoryCapacity : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68E288705F8B3E35, 0xE0)]
        public class DataSourceLanguageList : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA7B64D78B942F42, 0xF8)]
        public class DataSourceLanguageListResource : DataSourceResource
        {
            Array<ELanguage> AdditionalLanguagesEurope1;
            Array<ELanguage> AdditionalLanguagesEurope2;
            Array<ELanguage> AdditionalLanguagesEurope3;
            Array<ELanguage> AdditionalLanguagesUS;
            Array<ELanguage> AdditionalLanguagesLatinAmerica;
            Array<ELanguage> AdditionalLanguagesJapan;
            Array<ELanguage> AdditionalLanguagesAsia;
            Array<ELanguage> AdditionalLanguagesChina;
            Array<ELanguage> AdditionalLanguagesUK;
            Array<ELanguage> AdditionalLanguagesGermany;
            Array<ELanguage> AdditionalLanguagesUSCombined;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CE2C9DB45E31D8A, 0x98)]
        public class DataSourceLegend : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C41137691538B28, 0x28)]
        public class DataSourceLegendResource : DataSourceResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1015E0D18440E648, 0x90)]
        public class DataSourceLoading : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8894F9879035B428, 0xA0)]
        public class DataSourceLoadingText : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x217ED8263052EF92, 0x98)]
        public class DataSourceLocationMarker : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF861F112BE6A68E, 0x128)]
        public class DataSourceLootBoxInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7547186285CAAB8, 0x170)]
        public class DataSourceLootPackageInventory : DataSourceLootableInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CDACAB941C3035E, 0x170)]
        public class DataSourceLootableInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC6CB9C072AA849C, 0x90)]
        public class DataSourceMapIconFilter : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69A855A23A35919B, 0x30)]
        public class DataSourceMapIconFilterResource : DataSourceResource
        {
            Ref<LocalizedTextResource> UnrevealedText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65EDA09952D3C70B, 0x98)]
        public class DataSourceMapZone : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACD0C471AFA6371B, 0x98)]
        public class DataSourceMenuBadgeCount : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B7846A180AD2232, 0x90)]
        public class DataSourceMenuFade : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FFA973E4B647D48, 0x108)]
        public class DataSourceMerchant : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x251E4B7926DFEC6, 0x40)]
        public class DataSourceMerchantResource : DataSourceResource
        {
            Array<MenuInventorySortOrder> MerchantInventorySortOrder;
            Ref<BooleanFact> ErrandsEnabledFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4576D691F3FEF49, 0x128)]
        public class DataSourceModificationInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD39AD4F7326EEE6A, 0x140)]
        public class DataSourceModify : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2D4DDBE39D8C383, 0x30)]
        public class DataSourceModifyResource : DataSourceResource
        {
            Ref<PerkLevel> ModificationRecyclerPerk;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EE91A81E9667030, 0x98)]
        public class DataSourceMonitor : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2013DBC3B00C0217, 0x28)]
        public class DataSourceMonitorResource : DataSourceResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57B247D384EF3465, 0x90)]
        public class DataSourceMovie : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB581E2DCF698ECA7, 0x90)]
        public class DataSourceNPManager : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6D3CE44E2223DDC, 0xA8)]
        public class DataSourceNetManager : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x732E65957682F922, 0x90)]
        public class DataSourceNetworkError : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD610931C057A20EB, 0x128)]
        public class DataSourceOutfitInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB3AD669D1DE31CC, 0x38)]
        public class DataSourceOutfitInventoryResource : DataSourceResource
        {
            Ref<LocalizedTextResource> CannotChangeOutfitDescription;
            Ref<BooleanFact> AloyHasDisguiseOn;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2318ED78CE0AD775, 0x128)]
        public class DataSourceOutfitSlot : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C87F89D1440F9C7, 0x138)]
        public class DataSourcePhotoMode : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBDF69C42E0B3F9B, 0x90)]
        public class DataSourcePlayGo : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55420A8CEA21E4B0, 0xA0)]
        public class DataSourcePlayerCharacterPerks : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18206CEF1D24FA57, 0xA0)]
        public class DataSourcePlayerCharacterPerksResource : DataSourceResource
        {
            UUIDRef<PerkCategory> PerkCategoryProwler;
            UUIDRef<PerkCategory> PerkCategoryBrave;
            UUIDRef<PerkCategory> PerkCategoryForager;
            UUIDRef<PerkCategory> PerkCategoryDLC;
            Ref<MenuStyleClass> PerkTreeStyleProwler;
            Ref<MenuStyleClass> PerkTreeStyleBrave;
            Ref<MenuStyleClass> PerkTreeStyleForager;
            Ref<MenuStyleClass> PerkTreeStyleDLC;
            Ref<MenuStyleClass> PerkStyleAcquirable;
            Ref<MenuStyleClass> PerkStyleHidden;
            Ref<MenuStyleClass> PerkStyleLocked;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F7F246E821E3C0A, 0x98)]
        public class DataSourcePlusCheck : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8E84A367B5C2507, 0xB8)]
        public class DataSourceProcessSlotInfo : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1115C30968C96D5, 0x28)]
        public class DataSourceProcessSlotInfoResource : DataSourceResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3968CBADD7B97564, 0xA8)]
        public class DataSourceQuests : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5946F8AF642F75B0, 0x88)]
        public class DataSourceQuestsResource : DataSourceResource
        {
            Ref<QuestCategory> ErrandQuestCategory;
            Ref<QuestCategory> SideQuestCategory;
            Ref<QuestCategory> MainQuestCategory;
            Ref<QuestCategory> ActivityHuntingGroundCategory;
            int DifficultyOffset;
            Ref<EnumFactValue> CompareQuestToUnlockCategoriesFact;
            Array<Ref<MedalQuestRewardDisplayEntry>> HuntingGroundQuestRewards;
            Array<Ref<MedalQuestRewardDisplayEntry>> DLCHuntingGroundQuestRewards;
            Ref<MenuStyleClass> HuntingGroundTrialCompletedStyleClass;
            Ref<HuntingGroundTrialLog> DLCHuntingGroundTrialLog;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5DF72126C00E45D, 0x38)]
        public class DataSourceRandomBackgroundResource : DataSourceResource
        {
            Array<StreamingRef<UITexture>> TextureList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3DB840B2007DC48, 0xC0)]
        public class DataSourceRecipeGroups : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72E1EAB64CB30BFC, 0x98)]
        public class DataSourceRegion : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFB58C7D183DAE2B, 0xA8)]
        public class DataSourceRegionResource : DataSourceResource
        {
            Ref<LocalizedTextResource> LegalLineEurope;
            Ref<LocalizedTextResource> LegalLineAmerica;
            Ref<LocalizedTextResource> LegalLineEnglishGlobal;
            Ref<LocalizedTextResource> LegalLineAsia;
            Ref<LocalizedTextResource> LegalLineJapan;
            Ref<LocalizedTextResource> LegalLineChina;
            bool ShowTradeMarkEurope;
            bool ShowTradeMarkUS;
            bool ShowTradeMarkAmerica;
            bool ShowTradeMarkAsia;
            bool ShowTradeMarkJapan;
            bool ShowTradeMarkChina;
            Ref<UITexture> GGLogoEurope;
            Ref<UITexture> GGLogoAmerica;
            Ref<UITexture> GGLogoAsia;
            Ref<UITexture> GGLogoJapan;
            Ref<UITexture> GGLogoChina;
            Ref<UITexture> DLC1LogoTM;
            Ref<UITexture> DLC1LogoNoTM;
            Ref<UITexture> DLC1LogoJapan;
            Ref<UITexture> DLC1LogoChina;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CE8E0A9257DFA3B, 0x28)]
        public class DataSourceResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BF3BEB1001FE27E, 0x128)]
        public class DataSourceResourceInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85C7D522A84828E8, 0x50)]
        public class DataSourceResourceInventoryResource : DataSourceResource
        {
            Ref<LocalizedTextResource> RarityAscName;
            Ref<LocalizedTextResource> RarityDescName;
            Ref<LocalizedTextResource> ItemSellValueAscName;
            Ref<LocalizedTextResource> ItemSellValueDescName;
            Ref<LocalizedTextResource> ItemCategoryName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF17BE8362AB2C5A8, 0xF0)]
        public class DataSourceRobotCatalogue : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC18E71E3C977B0F3, 0x50)]
        public class DataSourceRobotCatalogueResource : DataSourceResource
        {
            Ref<PerkLevel> GenericHackingPerk;
            Array<Ref<DamageTypeStatsDisplayResource>> DamageTypeStatsDisplayResources;
            Array<Ref<PerkSet>> HackingPerkSets;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8024425D8CEA3565, 0x98)]
        public class DataSourceSaveGame : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63675A2352CF3255, 0xA8)]
        public class DataSourceSettings : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4056E4BAD83660F7, 0x68)]
        public class DataSourceSettingsResource : DataSourceResource
        {
            Array<float> MusicVolumeValues;
            Array<float> SpeechVolumeValues;
            Array<float> SFXVolumeValues;
            Array<float> GammaValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5796879C2FDF27EF, 0x90)]
        public class DataSourceSkipSequence : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3EBAE499C09DFFE, 0x128)]
        public class DataSourceSpecialItemInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD07CD81F6EFAD365, 0x98)]
        public class DataSourceStats : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x590C18058E521C5E, 0x98)]
        public class DataSourceTermsAndConditions : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4549706E9B3D69BA, 0x30)]
        public class DataSourceTermsAndConditionsResource : DataSourceResource
        {
            Ref<LocalizedTextResource> EULAText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0CE28D35A1A7B82, 0xB8)]
        public class DataSourceToolCrafting : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0DA2B6574228F32, 0x128)]
        public class DataSourceToolInventory : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E57460E6D739513, 0xC0)]
        public class DataSourceToolRecipeGroups : DataSourceRecipeGroups
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4ABCAB8ECE0B50C, 0x138)]
        public class DataSourceToolSlots : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE83C11F8AE1145F, 0x98)]
        public class DataSourceTrial : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD13BC6316CC8A22E, 0x90)]
        public class DataSourceTrophyCheck : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F249E765C51BF2A, 0xA8)]
        public class DataSourceUpgradeCrafting : DataSource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0B102AB42E4D844, 0xC0)]
        public class DataSourceUpgradeRecipeGroups : DataSourceRecipeGroups
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23DA7CE9A514679A, 0x128)]
        public class DataSourceWeaponAmmo : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x789380D1FDA25C07, 0x138)]
        public class DataSourceWeaponSlots : DataSourceInventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5250712E41A65729, 0x78)]
        public class DataTag : Tag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA185718C9CC7933, 0x8)]
        public class DataTrackedQuestTriggerInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9FFD9CEB906C7D7, 0x38)]
        public class DeactivateInventoryEntityAction : EntityAction
        {
            Ref<InventoryEntityResource> AbilityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72832C4E167296B3, 0x470)]
        public class DeathCameraEntity : CameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE20C9C0D7D6BBAD, 0x330)]
        public class DeathCameraEntityRep : CameraEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x12F85A524B22F0E0, 0x1E0)]
        public class DeathCameraEntityResource : CameraEntityResource
        {
            float ActivateBlendTime;
            float DeactivateBlendTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4132A13E50B0177, 0x50)]
        public class DebugFlagAction : ConditionalAction
        {
            String DebugFlag;
            EDebugFlagDefault NonRuntimeDebugDefault;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13BF1953598CF27A, 0x40)]
        public class DebugSettings : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88CEE0AC20403135, 0x38)]
        public class DebugToolGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE647628DADF179A5, 0x180)]
        public class DecalManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x962A66A74541B42C, 0xA8)]
        public class DecalResource : Resource
        {
            int MaxDecals;
            int DecalThreshold;
            bool RandomRotation;
            float MinSize;
            float MaxSize;
            float FadeInTime;
            float FadeTime;
            bool FadeZeroToOne;
            bool ClipDecal;
            float MaxUpClipAngle;
            float OverlapRatio;
            bool AllowStretching;
            bool HeightInfoInColor;
            EDecalAlignment Alignment;
            EDecalProjectionMode ProjectionMode;
            DrawableCullInfo CullInfo;
            Ref<RenderEffectResource> RenderEffectsResource;
            int mFrameCountU;
            int mFrameCountV;
            Ref<StaticMeshResource> MeshResource;
            float MeshSizeRescale;
            float MeshVisualRadius;
            bool MeshUsingWorldData;
            Array<DecalShaderVariable> MeshShaderVariables;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7EA5BF5FFAAEFBC4, 0x18)]
        public class DecalShaderVariable
        {
            EDecalVariableSource Source;
            uint32 VariableIDHash;
            float Default;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB36F74417118DABC, 0x30)]
        public class DeconstructEntityAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8361D451D55F5EB6, 0x80)]
        public class DefendAreaUserComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57105BDC7F56C798, 0x70)]
        public class DefendSpawnCommand : SpawnCommand
        {
            Ref<AIDefendAreaSet> DefendAreaSet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FE71499CB6354EB, 0x60)]
        public class DelayGravityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD47FB1B710B3DFE1, 0x30)]
        public class DelayGravityComponentResource : EntityComponentResource
        {
            float DelayTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E7E4997B8ACAE8A, 0x40)]
        public class DelayedAction : EntityAction
        {
            Ptr<EntityAction> Action;
            float Delay;
            float RandomDelay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x112F385AE3432DED, 0x100)]
        public class DelayedDeathComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87517769AFC48527, 0x38)]
        public class DelayedDeathComponentResource : EntityComponentResource
        {
            String DelayDeathAnimationTag;
            String DelayDeathAnimationAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF33406203296F83E, 0x60)]
        public class DelayedRemoveEntityComponent : EntityComponent
        {
            float Delay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BEFD921A5517EAF, 0x30)]
        public class DelayedRemoveEntityComponentResource : EntityComponentResource
        {
            float Delay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58DB3CE83A473653, 0x70)]
        public class DelayedScriptMessage : ScriptMessage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFEB100F7E49548AE, 0xB0)]
        public class DensityGraphProgram : RTTIRefObject
        {
            uint64 WorldDataUsageMask;
            uint64 TextureUsageMask;
            Ref<ShaderResource> BakedShader;
            EDensityJobType BakedShaderJobType;
            MurmurHashValue Hash;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6169F1E9C1EB8DDE, 0x28)]
        public class DensityNodeBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x629F0CA246CF8BF9, 0x280)]
        public class DeprecatedAmbienceSettings
        {
            AtmosphericScattingSettings AtmosphereSettings;
            ExposureSettings ExposureSettings;
            LightShaftSettings LightShaftSettings;
            BloomSettings BloomSettings;
            CloudRenderSettings CloudRenderSettings;
            float SunLightIntensityScale;
            float StaticIndirectScale;
            float SkyLightScale;
            float SkyLightDesaturate;
            float SunElevationAngle;
            float SunAzimuthAngle;
            float MoonElevationAngle;
            float MoonAzimuthAngle;
            float MoonDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26CC7024E816E5F9, 0x1C)]
        public class DepthOfFieldSettings
        {
            float NearFuzzy;
            float NearSharp;
            float FarSharp;
            float FarFuzzy;
            float MaxFuzzyNear;
            float MaxFuzzyFar;
            EPostProcessBlendMode BlendMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1CBE4058F5BF1D48, 0x48)]
        public class DepthOfFieldSettingsResource : Resource
        {
            DepthOfFieldSettings DepthOfFieldSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE61496B143A7948F, 0x38)]
        public class DerivedStatResource : Resource
        {
            Array<CompoundStatResource> DerivedStats;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6AE0A296C3FA208, 0x40)]
        public class DestroyComponentAction : EntityAction
        {
            Ref<EntityComponentResource> ComponentResource;
            bool DestroyMultiple;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B26248B33CBB837, 0x150)]
        public class Destructibility : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D6A6EA3B4BBD6CB, 0x58)]
        public class DestructibilityConstraint : Resource
        {
            bool Enabled;
            Ref<DestructibilityPart> PartA;
            Ref<DestructibilityPart> PartB;
            Ref<PhysicsConstraintResource> Resource;
            Ptr<EntityAction> BrokenAction;
            String ReferenceFrameHelperNode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAEFD2965A2FEF44, 0x30)]
        public class DestructibilityConstraintState : RTTIRefObject
        {
            Ref<DestructibilityConstraint> Constraint;
            bool Enabled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88830A1231924841, 0xA0)]
        public class DestructibilityHitReaction : CoreObject
        {
            Array<Ref<DamageTypeResource>> ReactOnDamageTypeResources;
            Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
            float DamageModifier;
            float CoreDamageModifier;
            Ptr<EntityAction> HitAction;
            Ref<GraphProgramResource> HitProgram;
            Ref<OverrideGraphProgramResource> HitOverrideProgram;
            Ptr<EntityAction> TransitionAction;
            Ref<GraphProgramResource> TransitionProgram;
            Ref<OverrideGraphProgramResource> TransitionOverrideProgram;
            Ref<DestructibilityPartStateResource> TransitionPartState;
            bool SkipExecutionOnThroughTransition;
            Ref<EntityResource> DebrisEntityResource;
            Ref<GraphProgramResource> DebrisEntitySpawnProgram;
            Ref<OverrideGraphProgramResource> DebrisEntitySpawnOverrideProgram;
            float DebrisSpawnProbability;
            float PassOnDamageImpulseFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3A071B36219C695, 0xB0)]
        public class DestructibilityPart : DestructibilityPartBase
        {
            bool Enabled;
            float Health;
            bool DamageSponge;
            float DamageToEntityMultiplier;
            bool ClampCoreDamageToPartHealth;
            bool LimitMaxCoreHealth;
            String BoneName;
            Mat44 LocalMatrix;
            Ref<RandomMatrixResourceBase> RandomLocalMatrix;
            Ref<DestructibilityPartStateResource> InitialState;
            Array<Ref<TagProperty>> TagProperties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF6A72DD01D7D4A9, 0x28)]
        public class DestructibilityPartBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67127788D5B7EA94, 0x90)]
        public class DestructibilityPartState : RTTIRefObject
        {
            Ref<DestructibilityPart> Part;
            float Health;
            bool Enabled;
            Ref<DestructibilityPartStateResource> Resource;
            Mat44 OffsetMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA6D1D22741BEE33, 0xF0)]
        public class DestructibilityPartStateResource : Resource
        {
            Ref<ModelPartResource> ModelPartResource;
            float MinimumHealth;
            float MinimumHealthFraction;
            float MaximumHealth;
            float MaximumHealthFraction;
            Array<Ref<DestructibilityHitReaction>> HitReactions;
            Mat44 OffsetMatrix;
            bool HasLockPosition;
            bool IsShootable;
            float ReceivedDamageFactor;
            float ReceivedImpulseFactor;
            float MinReceivedDamage;
            float AppliedDamageFactor;
            float AppliedImpulseFactor;
            float MinDamagerColliderMass;
            float MaxAppliedDamage;
            Ptr<EntityAction> ActivateAction;
            Ptr<EntityAction> MaximumHealthAction;
            String HealthShaderVariableName;
            Ref<CurveResource> HealthShaderVariableCurve;
            bool ApplyHealthShaderOnPart;
            Array<Vec3> ElectricityConnectionPositions;
            Ptr<EntityAction> HealthChangedAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D5B6FEF9A52CBB2, 0x40)]
        public class DestructibilityRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC294F29914483371, 0x150)]
        public class DestructibilityResource : EntityComponentResource
        {
            bool Invulnerable;
            float InitialHealth;
            bool DieAtZeroHealth;
            Array<Ref<DestructibilityState>> InitialStates;
            Array<Ref<DestructibilityPart>> ConvertedParts;
            Ref<DestructibilityPart> DefaultDamagePart;
            Ref<DestructibilityPart> MainPhysicsPart;
            Array<Ref<DestructibilityConstraint>> Constraints;
            Array<Ref<AIFaction>> InvulnerableToFactions;
            bool CanOnlyBeDamagedByPlayer;
            bool RemoveWhenDead;
            float RemoveWhenDeadDelay;
            bool KillChildsOnDestruction;
            Ref<DamageTypeResource> KillChildsDamageTypeResource;
            float ReceivedDamageFactor;
            float ReceivedImpulseFactor;
            float MinReceivedDamage;
            float AppliedDamageFactor;
            float AppliedImpulseFactor;
            float MinDamagerColliderMass;
            float MaxAppliedDamage;
            float LifeTime;
            float DamageTickTime;
            float DamagePerTick;
            float SelfDestructHealthLimit;
            Ptr<EntityAction> DeathAction;
            Ptr<EntityAction> HealthChangedAction;
            bool UseSimpleNetworkReplication;
            float FallDamageRange;
            float ExplosionRange;
            float LightRange;
            String TargetSignal;
            Array<Ref<ModelPartMeshReplacementResource>> PartMeshReplacements;
            Array<Ref<MeshResourceBase>> PartMeshResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x480D63C26C58C6D0, 0x50)]
        public class DestructibilityState : Resource
        {
            float Health;
            Array<Ref<DestructibilityPartState>> PartStates;
            Array<Ref<DestructibilityConstraintState>> ConstraintStates;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA40BCB547CDBDC6D, 0x18)]
        public class DestructibilityTimeLineKey
        {
            float Time;
            float RandomTimeOffset;
            Array<Ptr<EntityAction>> Actions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AD5F6CC87581E91, 0x40)]
        public class DestructibilityTimeLineResource : EntityAction
        {
            Array<DestructibilityTimeLineKey> Keys;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B4D1AEEC20ABD53, 0x10)]
        public class DestructiblePartToHitLocationMapping
        {
            Ref<DestructibilityPart> Part;
            EHitLocation HitLocation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62ECA74A718A222A, 0x40)]
        public class DeviceInfo : RTTIRefObject
        {
            String DeviceType;
            String Manufacturer;
            String ModelName;
            String ModelNumber;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53C57490F535E605, 0x30)]
        public class DieAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AA711CDB8223FE7, 0x28)]
        public class DifficultyManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79B44FB79B8E3722, 0xB8)]
        public class DifficultyManagerResource : Resource
        {
            Array<Ref<DifficultyRangeResource>> DifficultyRanges;
            Array<Ref<ParTimeLevelInfo>> LevelParTimes;
            Ref<GlobalDamageModifier> Campaign;
            Ref<GlobalDamageModifier> Coop;
            Ref<GlobalDamageModifier> OnlineFriendlyFireOn;
            Ref<GlobalDamageModifier> OnlineFriendlyFireOff;
            Array<BaselineTimes> BaselineTimes;
            float SumOfAllNodeTimes;
            float ReviveDeathWeight;
            Ref<EnumFact> DifficultyFact;
            Ref<EnumFactValue> VeryEasyDifficultyValue;
            Ref<EnumFactValue> EasyDifficultyValue;
            Ref<EnumFactValue> MediumDifficultyValue;
            Ref<EnumFactValue> HardDifficultyValue;
            Ref<EnumFactValue> UltraHardDifficultyValue;
            Ref<EnumFactValue> ImpossibleDifficultyValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA86FBDA101D89, 0x40)]
        public class DifficultyRangeResource : Resource
        {
            EDifficulty Difficulty;
            float FastDifficulty;
            float BaselineDifficulty;
            float SlowDifficulty;
            float InitialConstrict;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A7BF359F143DA55, 0x60)]
        public class DisableAnimationEventsEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13D751AF91097309, 0x40)]
        public class DisableAnimationEventsEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB79EBF73063229F7, 0x48)]
        public class DisableConstraintsAction : EnableConstraintsAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39662D1A769BA3A7, 0x68)]
        public class DisableEntityCollisionEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16B2B50B9D567165, 0x40)]
        public class DisableEntityCollisionEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65512E999BFA9B4, 0x78)]
        public class DisableIKEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4F949213FF811FE8, 0x48)]
        public class DisableIKEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            bool DisablePredictiveTerrain;
            bool DisableHipIK;
            bool DisableMoverTerrainCorrection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B1080D71A3601EC, 0x70)]
        public class DisableInventoryComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66D731EE628E355C, 0x48)]
        public class DisableInventoryEntityAction : EntityAction
        {
            bool Enable;
            String EntityName;
            float CooldownDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51F1A07A2738E392, 0x50)]
        public class DisableInventoryItemAction : EntityAction
        {
            EDisableItem Slot1;
            EDisableItem Slot2;
            EDisableItem Slot3;
            EDisableItem Slot4;
            EDisableItem Slot5;
            EDisableItem WeaponSwitching;
            EDisableItem QuickThrow;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5EC85D609D532BE7, 0x38)]
        public class DisablePoseDeformerAction : EntityAction
        {
            bool Disable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x41D36A93074BA886, 0x60)]
        public class DisableSensorsInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA62F1BEC000E967, 0x48)]
        public class DisableSensorsResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            bool DisableAural;
            bool DisableVisual;
            bool DisableHaptic;
            bool DisableRadar;
            bool DisableProximity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44E900755E224BE6, 0x58)]
        public class DisassembleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC22DFAA420824559, 0x30)]
        public class DisassembleComponentResource : EntityComponentResource
        {
            float ConversionModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x844244137695CEEF, 0x2E0)]
        public class DiscRocketMover : ThrowableMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F992CED789461FF, 0x150)]
        public class DiscRocketMoverResource : ThrowableMoverResource
        {
            float LaunchDelay;
            float LaunchRange;
            float LaunchHeight;
            float LaunchBuffer;
            Ref<CurveResource> LaunchSpringSpeed;
            bool DynamicTargeting;
            float TargetingDuration;
            Ref<CurveResource> TargetingSpringHeading;
            Ref<CurveResource> TargetingSpringPitch;
            EPhysicsCollisionLayerGame TargetingCollisionLayer;
            Ref<LaserBeamResource> TargetingLaserResource;
            float AttackBuffer;
            Ref<CurveResource> AttackSpringSpeed;
            Ptr<EntityAction> AttackAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8E9455A448365E3, 0x220)]
        public class DiscoverableArea : ParentWorldNode
        {
            String Name;
            UUIDRef<Spawnpoint> EntitySpawnpoint;
            EDiscoveryState InitialState;
            Ref<DiscoverableAreaResource> Resource;
            Ref<CollisionTrigger> DiscoveryTrigger;
            int Level;
            float LeavingDistance;
            float NearbyDistance;
            Ref<FogOfWarRevealArea> FogOfWarRevealArea;
            Array<Ref<DiscoverableAreaStateManipulator>> IndicatedManipulators;
            Array<Ref<DiscoverableAreaStateManipulator>> DiscoveredManipulators;
            Array<Ref<DiscoverableAreaStateManipulator>> CompletedManipulators;
            Ref<ConditionResource> EnableCondition;
            DiscoverableAreaStateSettings Undiscovered;
            DiscoverableAreaStateSettings Indicated;
            DiscoverableAreaStateSettings Discovered;
            DiscoverableAreaStateSettings Completed;
            Ref<MappedInterior> Interior;
            Ref<LocalizedTextResource> LocalizedDescription;
            EMapZoomLevel VisibilityZoomLevel;
            bool AutoDiscoverAreasInsideMyTrigger;
            bool EnableDiscoveryTrigger;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D44706143F6364F, 0x230)]
        public class DiscoverableAreaDLC : DiscoverableArea
        {
            bool ForceShowOnWorldmap;
            bool IgnoreSceneActivationCondition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35721663569699DF, 0x50)]
        public class DiscoverableAreaInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5EEA637EEBC3627, 0xA8)]
        public class DiscoverableAreaPlayerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFB216CC6CF53DAC, 0xA0)]
        public class DiscoverableAreaPlayerComponentResource : EntityComponentResource
        {
            DiscoverableAreaSharedStateSettings Undiscovered;
            DiscoverableAreaSharedStateSettings Indicated;
            DiscoverableAreaSharedStateSettings Discovered;
            DiscoverableAreaSharedStateSettings Completed;
            Ref<PlayerNotificationResource> EnteredNotification;
            Ref<PlayerNotificationResource> ExitedNotification;
            Ref<LocalizedTextResource> CompletedAreaText;
            Ref<EnumFact> StateFact;
            float AreaEnteredExitedNotificationTimer;
            float Nearby;
            float Factor;
            float Leaving;
            float LeavingFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33420DAC13027FB, 0x148)]
        public class DiscoverableAreaResource : Resource
        {
            int Level;
            float NearbyDistance;
            float LeavingDistance;
            Ref<LocalizedTextResource> Type;
            Ref<LocalizedTextResource> LocalizedDescription;
            DiscoverableAreaStateSettings Undiscovered;
            DiscoverableAreaStateSettings Indicated;
            DiscoverableAreaStateSettings Discovered;
            DiscoverableAreaStateSettings Completed;
            bool ShowsEnteredExitedNotification;
            bool ShowCompletedDescription;
            Array<Ref<CollectableRobot>> CollectableRobots;
            Ref<LocationMarkerResource> QuestMarker;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6BB34BB00563454, 0x10)]
        public class DiscoverableAreaSharedStateSettings
        {
            Ref<PlayerNotificationResource> Notification;
            Ref<EnumFactValue> FactValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE59611F9B10492F1, 0x40)]
        public class DiscoverableAreaStateManipulator : Resource
        {
            Ref<ConditionResource> Condition;
            bool ShowUIMessages;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89AD96709B7DEF57, 0x38)]
        public class DiscoverableAreaStateSettings
        {
            Ref<LocationMarkerResource> Marker;
            Ref<LocalizedTextResource> LocalizedMessage;
            Ref<LocalizedTextResource> LocalizedDetailedDescription;
            Ref<LevelBasedXpReward> XpReward;
            Ref<LocalizedTextResource> XpReason;
            Ref<AIMarker> FastTravelLocation;
            Ref<FastTravelSettingsResource> FastTravelSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x531E08EC4E463A7D, 0x510)]
        public class DiscreteAmmoEjector : AmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF84485FE82E746B2, 0x1E0)]
        public class DiscreteAmmoEjectorRep : AmmoEjectorRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E5141542811093C, 0x230)]
        public class DiscreteAmmoEjectorResource : AmmoEjectorResource
        {
            Ptr<EntityAction> Logic_EjectAction;
            Ref<ParticleSystemResource> CaseEjectParticles;
            Ref<ParticleSystemResource> FirstPersonCaseEjectParticles;
            Ref<ParticleSystemResource> FirstPersonZoomedCaseEjectParticles;
            float CaseEjectParticlesDelay;
            Ref<ChargedValueEntityAction> Charged_EjectAction;
            Ref<ChargedValueFloat> ExitVelocityMultiplier;
            bool ScatterBurst;
            float ScatterBurstRadius;
            float ScatterBurstAngleOffset;
            float ScatterBurstAngleMin;
            float ScatterBurstAngleMax;
            bool FindWorldIfNoTarget;
            EPhysicsCollisionLayerGame FindWorldCollisionLayer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AE3198D6A024FDE, 0x38)]
        public class DismountAction : EntityAction
        {
            bool Immediate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86737CEDA19AE3D, 0x68)]
        public class DismountEventInstance : PausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x128285468232E340, 0x48)]
        public class DismountEventResource : PausableEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            bool DismountImmediately;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2788AB993F177AE9, 0x68)]
        public class DismountMode : MountDismountMode
        {
            bool IsFallbackDismountMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59B3E1A852C695CE, 0x38)]
        public class DispensableCategoryResource : Resource
        {
            int MaximumEntities;
            float NearRange;
            float FarRange;
            float MinimumTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A4D7C5745E3FE58, 0x78)]
        public class DispensableEntityManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4296FF249E6F0BAD, 0x40)]
        public class DispensableEntityManagerSettings : Resource
        {
            Ref<DispensableCategoryResource> DefaultCategory;
            Array<Ref<DispensableCategoryResource>> Categories;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD74AED10A484D11D, 0x48)]
        public class DisplayStatDefinition : Resource
        {
            Ref<UITexture> UIStatIcon;
            Ref<UITexture> UIStatIconLarge;
            Ref<LocalizedTextResource> StatName;
            Ref<LocalizedTextResource> Description;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEF889DA55D8AD45, 0x48)]
        public class DoFApertureSettings : Resource
        {
            Ref<CurveResource> FocusBracketCurve;
            Ref<CurveResource> FocusFalloffCurve;
            Ref<CurveResource> MaxFuzzyNearCurve;
            Ref<CurveResource> MaxFuzzyFarCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x493CD012F2A7339F, 0x70)]
        public class DoubleKillComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8DBE61E0B5283D3A, 0x28)]
        public class DoubleKillComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1752E0F75EA5FB53, 0x4)]
        public class DrawFlags
        {
            uint32 Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56958D1D4960FF90, 0x4)]
        public class DrawableCullInfo
        {
            uint32 Flags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC9DED418B4201BB, 0x4C)]
        public class DrawableObjectInstance
        {
            DrawableCullInfo CullInfo;
            float LodDistanceScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D01AAF21D702BD0, 0x70)]
        public class DropListComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x259B2A1DF2852B55, 0x60)]
        public class DropListComponentResource : EntityComponentResource
        {
            Array<Ref<EntityResource>> InitialItems;
            bool Enabled;
            String SpawnHelperName;
            Vec3 SpawnOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87B595960424C13, 0x30)]
        public class DropSearchAndRetrieveObjectAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31FB5727743986D, 0x1D0)]
        public class DynamicHelperLocatorInstance : BoneLocatorInstance
        {
            Array<Ptr<LocatorInstance>> DependentLocators;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC590E34DB289228, 0x90)]
        public class DynamicHelperLocatorResource : BoneLocatorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68587408F392E7FA, 0x58)]
        public class DynamicLibrary : Resource
        {
            Filename Filename;
            Array<uint8> Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10330CF2842C237, 0x60)]
        public class DynamicQuestManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20A7A5E087E59B87, 0x48)]
        public class DynamicSequenceEntityVariable : SequenceEntityVariable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA8CF2E64FB641A0, 0x98)]
        public class DynamicSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8574E68B0BB8A30, 0x40)]
        public class DynamicSpawnEcotopeSetup : Resource
        {
            bool NeedsNavmesh;
            float Density;
            float SpawnRadius;
            float DespawnRadius;
            Ref<SpawnSetupNonPlaceholder> SpawnSetup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E141D4E3F12C88A, 0x40)]
        public class DynamicSpawnManagerResource : Resource
        {
            Array<Ref<DynamicSpawnEcotopeSetup>> DynamicSpawnEcotopeSetups;
            Ref<ConditionResource> EnableCondition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13EDCF2488EFC5E4, 0x28)]
        public class DynamicSpawnStruct : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBC7330A00301795, 0x8)]
        public class EPlayerScoreStat_int
        {
            EPlayerScoreStat Key;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B4EC93B64D65AE1, 0x68)]
        public class EchoScanComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA823B355AD4A5A5, 0x30)]
        public class EchoScanComponentResource : EntityComponentResource
        {
            float AntiStealthPatchRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CD5756431C8A131, 0x40)]
        public class Ecotope : Resource
        {
            uint8 EcotopeIndex;
            Ref<PlacementBase> PlacementRoot;
            Ref<TerrainMaterial> TerrainMaterial;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B178A532F4FD277, 0x38)]
        public class EcotopeMapping : Resource
        {
            Ref<Ecotope> Ecotope;
            Ref<WorldDataType> EcotopeMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD02FCA5F3628AA2E, 0x58)]
        public class EcotopeOverrideComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1B023395575AAD9, 0x30)]
        public class EcotopeOverrideComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3E3A18B4730665A, 0x30)]
        public class EcotopeOverrideComponentResource : EntityComponentResource
        {
            int8 EcotopeIndexOverrideValue;
            float EcotopeEffectOverrideValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBAFCC185DEB0307B, 0x40)]
        public class EcotopeTile : Resource
        {
            IVec2 GridCoordinates;
            Array<Ref<EcotopeMapping>> Ecotopes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8E4B3F4AA98E1BE, 0x20)]
        public class EditorMetaData : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8B0BA70D70CBABE, 0x100)]
        public class EffectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5446936E8B9B51E, 0x1F0)]
        public class EffectComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E81A5C898F63BE7, 0x130)]
        public class EffectComponentResource : EntityComponentResource
        {
            String HelperNodeName;
            Mat44 LocalMatrix;
            bool AlignToWorld;
            float LifeTime;
            bool AutoDestroy;
            bool AutoDestroyEntity;
            Ref<SoundResource> SoundResource;
            bool SoundIs3D;
            float SoundPreDelay;
            float SoundPreDelayRandom;
            Ref<SoundMixStateResource> SoundMixStateResource;
            bool ShowInFirstPersonView;
            bool ShowInThirdPersonView;
            Ref<ParticleSystemResource> ParticleResource;
            float ParticlePreDelay;
            float ParticlePreDelayRandom;
            bool ParticlesLoseOwnershipOnDie;
            Ref<ForceFieldResource> ForceFieldResource;
            Ref<ShakeResource> ShakeResource;
            Ref<LightResource> LightResource;
            Vec3 LightForward;
            Vec3 LightPosition;
            Ref<CurveResource> LightIntensityCurve;
            Ref<CurveResource> LightRangeCurve;
            bool LightIsLooping;
            float LightVisibleThreshold;
            Ref<RumbleResource> RumbleResource;
            Ref<ScreenEffectResource> ScreenEffectResource;
            bool ScreenEffectIsGlobal;
            bool MustBeReplicated;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCDD805004D91620, 0x98)]
        public class EjectEffectsLocationResource : Resource
        {
            String MuzzleFlashTP;
            String MuzzleFlashFP;
            String MuzzleSmokeTP;
            String MuzzleSmokeFP;
            String ChargeTP;
            String ChargeFP;
            String ChargeSoundTP;
            String ChargeSoundFP;
            String FireLightTP;
            String FireLightFP;
            String FireSoundTP;
            String FireSoundFP;
            String ReloadTP;
            String ReloadFP;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB53BA2C0033A8EA1, 0x80)]
        public class EjectLocationResource : Resource
        {
            String DirectionHelper;
            String BulletPlayer;
            String BulletAI;
            String TracerTP;
            String TracerFP;
            String CaseEjectTP;
            String CaseEjectFP;
            String PilotLightTP;
            String PilotLightFP;
            Array<Ref<EjectEffectsLocationResource>> EffectsLocations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x354327426D79A1E4, 0x1B0)]
        public class ElectricityBeam : GeometryObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBFDF39DFDB2F5E1B, 0x180)]
        public class ElectricityBeamComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CE62FA07985E07, 0x38)]
        public class ElectricityBeamComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7EA20BBB8C595B4E, 0x60)]
        public class ElectricityBeamComponentResource : EntityComponentResource
        {
            Ref<ElectricityBeamResource> ElectricityBeamResource;
            float BeamSpeed;
            float MaxRange;
            float BreakBeamOnDistanceTreshold;
            String HelperName;
            String TargetHelperName;
            Ptr<EntityAction> OnBeamConnectedTargetAction;
            Ptr<EntityAction> OnBeamBrokenTargetAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54A9A89636F8DA91, 0x38)]
        public class ElectricityBeamResource : Resource
        {
            Ref<RenderEffectResource> LineRenderEffectsResource;
            Ref<ElectricityDrawSettings> ElectricityDrawSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x870228C5DBC2FCCA, 0x88)]
        public class ElectricityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD6FD3A809E9017B, 0x40)]
        public class ElectricityComponentResource : EntityComponentResource
        {
            Ref<ElectricityNodeResource> ElectricityNodeResource;
            Array<Ref<ElectricitySpawnEntityResource>> SpawnResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD2522156BBB708, 0x48)]
        public class ElectricityDrawSettings : Resource
        {
            int FPS;
            float LowFrequencyAmplitude;
            float HighFrequencyAmplitude;
            float SegmentsPerMeter;
            float LineWidth;
            int FrameStep;
            int TextureTileCount;
            float MotionBlurShift;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34D6E1A567124C71, 0x38)]
        public class ElectricityDrawSettingsModifierResource : Resource
        {
            int Priority;
            float Width;
            RGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC6A6407B4DF52BE, 0x570)]
        public class ElectricityEjector : ContinuousAmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF32C1DF30D3487BC, 0x298)]
        public class ElectricityEjectorRep : ContinuousAmmoEjectorRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEED7DBB2CBA4C848, 0x290)]
        public class ElectricityEjectorResource : ContinuousAmmoEjectorResource
        {
            Ref<ElectricityNodeResource> EmitNode_NodeResource;
            Ref<ElectricityEmitSettings> EmitNode_EmitSettings;
            Ref<ElectricityNodeResource> EmitSubNode_NodeResource;
            Ref<ElectricityEmitSettings> EmitSubNode_EmitSettings;
            float FiringDangerAreaStartOffset;
            float FiringDangerAreaDefaultLength;
            float FiringDangerAreaRadius;
            float FiringDangerAreaDuration;
            float AimNoiseFactor;
            float AimNoiseSpeed;
            float AimConeAngle;
            Array<Ref<ElectricityDrawSettings>> ElectricityDrawSettings;
            Ref<ParticleSystemResource> ParticleSystemResource;
            Ref<ParticleSystemResource> NoTargetParticleSystemResource;
            Ref<ParticleSystemResource> ParticleSystemTPResource;
            Ref<ParticleSystemResource> NoTargetParticleSystemTPResource;
            Ref<LightResource> TargetLightResource;
            float LightJitterRadius;
            float LightJitterInterval;
            float MinSubNodeDistance;
            int MaxSubNodes;
            float MinSubNodeStartOffset;
            Ref<SoundResource> TargetFireSound;
            Ref<RenderEffectResource> LineRenderEffectsResource;
            Ref<DamageTypeResource> DamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6001AA82C8FDBDB, 0xE0)]
        public class ElectricityEmitNode : ElectricityNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x160982BEB1DB958, 0x50)]
        public class ElectricityEmitNodeResource : ElectricityNodeResource
        {
            Ref<ElectricityEmitSettings> EmitSettings;
            float EmitTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE47739E128410055, 0x78)]
        public class ElectricityEmitSettings : Resource
        {
            Array<float> DamageSet;
            Array<float> JumpDistanceSet;
            float ChargePerSecond;
            FRange ImpulseFrequencyRange;
            Array<float> ImpulseSet;
            Array<float> ImpactSeveritySet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A0A296568D3A18C, 0x2F0)]
        public class ElectricityEntity : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA4316B5B047E39A, 0xE8)]
        public class ElectricityEntityNode : ElectricityNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F0A7F1E3DE429D3, 0x80)]
        public class ElectricityEntityNodeResource : ElectricityNodeResource
        {
            Array<Vec3> ConnectionPositions;
            Ref<DestructibilityPart> DamagePart;
            Array<String> ConnectionBones;
            Vec3 PositionOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80F65F0EE1BDA5C8, 0x140)]
        public class ElectricityEntityResource : EntityResource
        {
            Array<Ref<ElectricitySpawnEntityResource>> SpawnResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8450A706AFD7DF3D, 0x3E0)]
        public class ElectricityGrenade : Throwable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD984D84C2759627F, 0x290)]
        public class ElectricityGrenadeRep : ThrowableRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF72B2C19F4A1B419, 0x240)]
        public class ElectricityGrenadeResource : ThrowableResource
        {
            float DetonateTime;
            float ElectricityTime;
            Ref<ElectricityEmitSettings> EmitSettings;
            Ref<EffectComponentResource> EffectComponentResource;
            Ref<SoundResource> DetonateTimeSoundResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18682AEB0E015885, 0x300)]
        public class ElectricityGrid : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5889CB5087642EA1, 0xE0)]
        public class ElectricityGridNode : ElectricityNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14AF94FCEE0A326D, 0xB0)]
        public class ElectricityGridNodeResource : ElectricityNodeResource
        {
            Array<Vec3> ConnectionPositions;
            String ConnectedEntity;
            int NodeID;
            Array<int> ConnectedNodes;
            Vec3 Position;
            Quat Rotation;
            bool HasInvisibleConnections;
            Ref<EntityResource> JunctionEntity;
            bool DrawConnectionsAsElectricity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1AFEC99651A707F2, 0x30)]
        public class ElectricityGridProperties : Resource
        {
            Ref<RenderEffectResource> CableRenderEffectsResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAB5A27710EF414, 0x1700)]
        public class ElectricityGridRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCEE842008C7C8E5, 0x140)]
        public class ElectricityGridResource : EntityResource
        {
            Array<Ref<ElectricityGridNodeResource>> Nodes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD87AC2C0590FD8BE, 0xB8)]
        public class ElectricityNode : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x769C4D7A1EB58682, 0x370)]
        public class ElectricityNodeManager : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30EA89B53A34532D, 0x1750)]
        public class ElectricityNodeManagerRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B9B429AD7EE2B54, 0x188)]
        public class ElectricityNodeManagerResource : EntityResource
        {
            Ref<DamageTypeResource> DamageTypeResource;
            Ref<RenderEffectResource> LineRenderEffectsResource;
            Ref<ElectricityDrawSettings> ElectricityDrawSettings;
            Ref<LightResource> ConnectionLight;
            int MaxConnectionLights;
            Ref<ParticleSystemResource> ConnectionParticleEffect;
            int MaxConnectionParticleEffects;
            float LightJitterRadius;
            float LightJitterInterval;
            float LightOffset;
            FRange FlickerOffTimeRange;
            FRange FlickerOnTimeRange;
            Ref<SoundResource> BeamSoundResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFF4F39F33916B02, 0x40)]
        public class ElectricityNodeResource : Resource
        {
            int MaxConnections;
            bool CanJumpTo;
            bool CanJumpFrom;
            int GroupID;
            Ref<ElectricityDrawSettingsModifierResource> DrawSettingsModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9C42F2F38AC45C6, 0x38)]
        public class ElectricitySetCanJumpFromAction : EntityAction
        {
            bool CanJumpFrom;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16707D09384C6B21, 0x38)]
        public class ElectricitySetCanJumpToAction : EntityAction
        {
            bool CanJumpTo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2ED07ADCD252E25A, 0x40)]
        public class ElectricitySpawnEntityResource : Resource
        {
            Ref<DestructibilityPart> Part;
            bool WhenElectricityIsActive;
            Ref<EntityResource> EntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97336D70DD4AFFBC, 0x38)]
        public class EmbeddedFileResource : Resource
        {
            Array<uint8> Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA915C0F88AA2A35A, 0x40)]
        public class EmitElectricityAction : EntityAction
        {
            Ref<ElectricityEmitSettings> EmitSettings;
            float EmitTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1CA0220A5B22688B, 0x18)]
        public class EmitterMeshShapeData
        {
            Array<EmitterVertex> Position;
            Ref<StaticMeshResource> Mesh;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA6B6813C125614C, 0x20)]
        public class EmitterVertex
        {
            Vec3 Position;
            Vec3 Direction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CF5995AA39F60FA, 0x38)]
        public class EmptyPickUpAnimationTypeResource : PickUpAnimationTypeResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71BA12FA75F89E8B, 0x38)]
        public class EnableAttachedLightsAction : EntityAction
        {
            bool Enable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58C4349416113F73, 0x48)]
        public class EnableConstraintsAction : EntityAction
        {
            Array<Ref<DestructibilityConstraint>> Constraints;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE6D97CF58F29F7C, 0x70)]
        public class EnableContextualSpeechEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EE6D2C4430450DD, 0x48)]
        public class EnableContextualSpeechEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            bool EnableSpeech;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x153BFBE0E10B0F68, 0x38)]
        public class EnableEntityAction : EntityAction
        {
            bool Enable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6825DCA93F30E1B, 0x40)]
        public class EnableExtraArmorAction : EntityAction
        {
            Ref<ExtraArmorComponentResource> ExtraArmorComponent;
            bool Enable;
            bool Reset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CB31782A997E5EE, 0x38)]
        public class EnableInteractiveEntityAction : EntityAction
        {
            bool Enable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49E2635AE28F4093, 0x40)]
        public class EnableMaterialLayerAction : EntityAction
        {
            String MaterialLayerName;
            bool Enable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FB31DA03A3DB4C9, 0x48)]
        public class EnablePartsAction : EntityAction
        {
            Array<Ref<DestructibilityPart>> ConvertedParts;
            bool Enable;
            bool InitiallyActive;
            bool ActOnCurrentPart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71D29D308E1478E0, 0x38)]
        public class EnablePlayerControllerAction : EntityAction
        {
            bool Enable;
            EControlType Type;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8AEF6D9E4ED2FB8, 0x38)]
        public class EnableShadowsAction : EntityAction
        {
            bool Enable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9BBFA6EDBB991A6, 0x38)]
        public class EnableSoundPostProcessingAction : EntityAction
        {
            bool EnablePostProcessing;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBBB86E119F6ACA1, 0x40)]
        public class EncounterDifficultyModifier : CoreObject
        {
            String Name;
            float TimeToStart;
            int NumDeathsSP;
            int NumDeathsCoop;
            bool BothTimeAndDeathsNeeded;
            float DifficultyChange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6DF9D9BE43843AF, 0x40)]
        public class EnemyFactionAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8CD825376B1B6AB6, 0x68)]
        public class EntitlementComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BB025C4A1A03CE8, 0x38)]
        public class EntitlementComponentResource : EntityComponentResource
        {
            Ref<EntitlementResource> Entitlement;
            Ref<GraphProgramResource> GraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF75174187BC7C7A, 0x30)]
        public class EntitlementResource : Resource
        {
            String UnifiedEntitlementKey;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B5B170F51665F08, 0x2C0)]
        public class Entity : CoreObject
        {
            String Name;
            WorldTransform Orientation;
            StreamingRef<EntityResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE88A878937E8724D, 0x30)]
        public class EntityAction : Resource
        {
            bool IsThreadSafe;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B00A534ABC852C, 0x30)]
        public class EntityActionContext : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3954672E9DFDE836, 0x38)]
        public class EntityActionContextActivator : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6B6E943A86B9612, 0x28)]
        public class EntityActionContextAttackEvent : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD93D198E2361303D, 0x30)]
        public class EntityActionContextComponentResource : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1256E35533CA08F, 0x30)]
        public class EntityActionContextDamageType : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x503E1DE0D7DC1D17, 0x20)]
        public class EntityActionContextElement : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x592E5D836FCD9958, 0x60)]
        public class EntityActionContextInstigator : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47F0D4E59A7C7575, 0x28)]
        public class EntityActionContextModelPartIndex : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA11F5B7CD040BE03, 0x30)]
        public class EntityActionContextNormal : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77334FDB3A99187A, 0x30)]
        public class EntityActionContextPhysicsImpulse : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD61DEEDF59638FDD, 0x38)]
        public class EntityActionContextPosition : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CF9CA266A2F1828, 0x28)]
        public class EntityActionContextRandomGenerator : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C81BD70A28CAF42, 0x40)]
        public class EntityActionContextStreamingRef : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD1B12C20090DDB3, 0x60)]
        public class EntityActionContextTransform : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85A725334E7263AC, 0x30)]
        public class EntityActionContextTrigger : EntityActionContextElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEF3968C39BFE279, 0x88)]
        public class EntityActionEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x617F8BFEB57CAF30, 0x60)]
        public class EntityActionEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<EntityActorResource> InstigatorActorResource;
            Ref<EntityActorResource> ActivatorActorResource;
            Ref<EntityAction> EntityActionStart;
            Ref<EntityAction> EntityActionStop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3BC8EA0B84A61BC5, 0x38)]
        public class EntityActivationPolicy : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B5A3BFB434AEB2E, 0x120)]
        public class EntityActorInstance : EntityActorInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC29E7F82E0785E8, 0xD8)]
        public class EntityActorInstanceBase : ActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95B662CEDC487B87, 0x78)]
        public class EntityActorResource : ActorResource
        {
            String EntityName;
            bool Invulnerable;
            bool StopSequenceWhenEntityDies;
            bool UnBindActorWhenEntityDies;
            Ref<LocatorResource> PositionLocatorResource;
            Ref<AbilityAnimationResource> AbilityAnimation;
            Array<Ref<EntityComponentResource>> EntityComponentResources;
            int WaitUntilBindDuration;
            bool UnBindActorOnDamage;
            bool DismountActorOnBind;
            bool DismountActorOnUnBind;
            bool MakeIgnoredByAI;
            bool EndOnFinalTransform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDC68C923BEB6CBF, 0x68)]
        public class EntityArrayComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57D3293C7FACF8A4, 0x28)]
        public class EntityArrayComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB16DAB67B1C6DB1E, 0x48)]
        public class EntityAwarenessQuestTrigger : EntityListQuestTrigger
        {
            EAwarenessType AwarenessType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBB197D85E6F36F3, 0x58)]
        public class EntityAwarenessQuestTriggerInstance : EntityListQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6EB4DF82FDAB524, 0x80)]
        public class EntityBasedQuestTrigger : QuestTrigger
        {
            Array<GGUUID> EntityTypeUUIDs;
            Array<GGUUID> SpawnSetupUUID;
            Array<GGUUID> SpawnSourceUUIDs;
            int Amount;
            bool MustHaveBeenSpawnedThroughGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11068012818867F2, 0x58)]
        public class EntityComponent : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x586A4426CAD07C0B, 0x20)]
        public class EntityComponentContainer
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x268C5ABD3EAEC98E, 0x30)]
        public class EntityComponentRep : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BD816AB5285B17C, 0x28)]
        public class EntityComponentResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46C897AF96D832B3, 0x68)]
        public class EntityComponentSet : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA03C0DF215502A71, 0x40)]
        public class EntityComponentSetResource : EntityComponentResource
        {
            Array<Ref<EntityComponentResource>> ComponentResources;
            EEntityComponentSetMode Mode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBE082E3CB54027A, 0x88)]
        public class EntityDeathQuestTrigger : EntityBasedQuestTrigger
        {
            bool PerformInitialCheck;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1F7EA88B4636B8A, 0x70)]
        public class EntityGraphProgramSpawnCommand : SpawnCommand
        {
            Ref<GraphProgramResource> GraphProgram;
            Ref<OverrideGraphProgramResource> OverrideGraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F9CE9A892562421, 0x98)]
        public class EntityGroupComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B7436C3D07E816, 0x38)]
        public class EntityGroupComponentResource : EntityComponentResource
        {
            Array<Ref<EntityGroupMemberResource>> GroupMembers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63B53F9410F90D4F, 0x60)]
        public class EntityGroupMemberComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64A86DD0634E89AE, 0x60)]
        public class EntityGroupMemberResource : Resource
        {
            StreamingRef<EntityResource> EntityResource;
            int Amount;
            FRange SpawnRange;
            FRange SpawnHeadingRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A9A16EC28D42406, 0x48)]
        public class EntityImpostorResource : Resource
        {
            Ref<StaticMeshResource> MeshResource;
            float Speed;
            float MaxDrawDistance;
            bool AlignUpWithWorld;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x803240E973893502, 0x48)]
        public class EntityImpostorResourceDLC : EntityImpostorResource
        {
            Ref<BooleanFact> VisibilityFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51AEAF4694A59EBE, 0x28)]
        public class EntityInstanceCollisionQuestTriggerInstance : SpawnSetupQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB12E138DAE953323, 0x28)]
        public class EntityInstanceDeathQuestTriggerInstance : SpawnSetupQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9556C23A5F8A7F04, 0x28)]
        public class EntityInstanceHitReactionQuestTriggerInstance : SpawnSetupQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA415C773E82B61B, 0x28)]
        public class EntityInstanceObtainedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDE6BC0CF6C1D42, 0x30)]
        public class EntityInstanceProperty : EntityInstancePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16BAF4FD2F34EA86, 0x30)]
        public class EntityInstancePropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1649A9D3812323B1, 0x30)]
        public class EntityInstancePropertyValue : PropertyValue
        {
            Ref<EntityInstancePropertyBase> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4290130A3A220D98, 0x28)]
        public class EntityInstanceScannedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE90500672E78BFD5, 0x28)]
        public class EntityInstanceSpottedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x453B5A3B7663E2B9, 0x28)]
        public class EntityInstanceUsedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x92C781073468D251, 0x18)]
        public class EntityInventoryViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BDAE88F0020F703, 0x10)]
        public class EntityLifetime
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28A9149C2EAEFDA2, 0x38)]
        public class EntityLifetimeGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F4DB879803C0A5B, 0x40)]
        public class EntityListQuestTrigger : QuestTrigger
        {
            Array<UUIDRef<SpawnSetupNonPlaceholder>> SpawnSetups;
            bool TriggerForAnyEntity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9915B0E4B7E729CA, 0x58)]
        public class EntityListQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A59393D674DAD8A, 0xC0)]
        public class EntityPlaceHolder : WorldNode
        {
            String Name;
            Ref<EntityResource> EntityResource;
            Array<Ref<EntityComponentResource>> EntityComponentResources;
            Array<Ref<FactValue>> Facts;
            int8 DestructibilityState;
            EFactContextLifetime FactsLifetime;
            EPhysicsInitMode PhysicsInitMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71C254683E13FE36, 0x68)]
        public class EntityPlaceHolderSequenceEntityVariable : SequenceEntityVariable
        {
            StreamingRef<EntityPlaceHolder> EntityPlaceHolder;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF332BC88FE08592D, 0x98)]
        public class EntityPlaceHolderSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27F02D493A9B9886, 0x58)]
        public class EntityPlacementPositionCheckerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24D1A98A87BF3B26, 0x48)]
        public class EntityPlacementPositionCheckerComponentResource : EntityComponentResource
        {
            float CollisionRadius;
            float CornerCollisionRadius;
            float CornerCollisionOffset;
            float MinPlacementHeight;
            float MaxPlacementHeight;
            float PlacementDistance;
            float MaxFloorHeightDifference;
            bool PlaceOnPlacerPosition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB6DC8CC0CFF5808, 0x120)]
        public class EntityPlacerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4DFE49F68F3536C, 0x58)]
        public class EntityPlacerComponentResource : EntityComponentResource
        {
            Ref<EntityPlacementPositionCheckerComponentResource> PositionChecker;
            Ref<PlayerConstructedEntityComponentResource> ConstructedComponentResource;
            Ref<EntityResource> PlacedEntity;
            Ref<EntityResource> PreviewEntity;
            String PreviewShader;
            bool LifeSpanClientOnly;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9B2A0734E7EE12C, 0x200)]
        public class EntityProjectileAmmoResource : AmmoResource
        {
            Ref<EntityResource> ProjectileResource;
            Ref<GraphProgramResource> ProjectileDecoratorGraph;
            Ref<OverrideGraphProgramResource> ProjectileDecoratorGraphOverride;
            Ref<EntityResource> PreviewProjectileResource;
            Ref<GraphProgramResource> PreviewDecoratorGraph;
            Ref<OverrideGraphProgramResource> PreviewDecoratorGraphOverride;
            Ref<GraphProgramResource> PreviewAbortedGraph;
            Ref<OverrideGraphProgramResource> PreviewAbortedGraphOverride;
            Ref<CurveResource> ExitVelocityCurve;
            float InitialOffsetAngle;
            float OverwriteImpactRadius;
            Ref<PhysicsCollisionResource> FirstPhysicsCollisionResource;
            ETrajectorySolveMethod SolveMethod;
            bool UseLinearTargetReachableCheck;
            float TrajectorySimLength;
            float TrajectorySimAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFAEF08C0232ECBBE, 0x48)]
        public class EntityProximityQuestTrigger : EntityListQuestTrigger
        {
            float Distance;
            bool TriggerWhenOutside;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2B3440DA49DC68F, 0x58)]
        public class EntityProximityQuestTriggerInstance : EntityListQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D6B5E7805A46F7A, 0x28)]
        public class EntityQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE34DC0AE565D77DE, 0x240)]
        public class EntityRep : RTTIObject
        {
            DrawableObjectInstance base_DrawableObjectInstance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78C2D25A923D336D, 0x130)]
        public class EntityResource : Resource
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            bool Lockable;
            [RTTI.BrokenReflectionOffset(0x0)]
            bool ZoomLockable;
            Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
            EEntityUpdateFrequency UpdateFrequency;
            Ref<EntityActivationPolicy> ActivationPolicy;
            Ref<MoverResource> MoverResource;
            Ref<ModelResource> ModelResource;
            Ref<DestructibilityResource> DestructibilityResource;
            Ref<StatsClassResource> StatsClassResource;
            Array<ChildEntityDescription> ChildEntityResources;
            bool MustBeReplicated;
            bool SlideOffFrom;
            bool JumpableFrom;
            Ref<AIFaction> DefaultFaction;
            bool SkipUpdateWhenRepNotVisible;
            float MaxUpdateDistance;
            bool DisableCollisionWithParent;
            Ptr<EntityAction> InitialAction;
            Ptr<EntityAction> ContactAction;
            Array<Ref<EntityComponentResource>> EntityComponentResources;
            float EcotopeEffectOverrideValue;
            int8 EcotopeIndexOverrideValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5C409CFC4245A9E, 0x30)]
        public class EntityResourceProperty : EntityResourcePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x139EBEAA813053F7, 0x30)]
        public class EntityResourcePropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C6C16E97487BF07, 0x38)]
        public class EntityResourcePropertyValue : PropertyValue
        {
            Ref<EntityResourcePropertyBase> Property;
            Ref<EntityResource> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB325D25327269594, 0x28)]
        public class EntityResourceQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5642C6A8DEFC3AE6, 0x8)]
        public class EntityResourceQuestTriggerInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x542907D494C1E03B, 0x60)]
        public class EntityResourceSequenceEntityVariable : SequenceEntityVariable
        {
            Ref<EntityResource> EntityResource;
            Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF7FC77DBEDF3898, 0x98)]
        public class EntityResourceSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2338A4AAC097EFB, 0x88)]
        public class EntityScannedQuestTrigger : EntityBasedQuestTrigger
        {
            bool PerformInitialCheck;
            bool AllowDoubleScanning;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7934948450D1E68E, 0x18)]
        public class EntityScoreSettings : RTTIObject
        {
            Ref<StatsClassResource> StatsClass;
            int PointsPerKill;
            bool ApplyMultipliers;
            bool AllowKillAssists;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75AB10BBDFEDC74E, 0x58)]
        public class EntitySkinDescriptionResource : Resource
        {
            String DisplayNameId;
            String DescriptionId;
            Ref<EntitySkinResource> EntitySkinResource;
            String PreviewTexture;
            String IconTexture;
            Ref<EntitlementResource> Entitlement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A6CFD279AF4A97A, 0x48)]
        public class EntitySkinManagerResource : Resource
        {
            Array<Ref<EntitySkinDescriptionResource>> SkinsSP;
            Array<Ref<EntitySkinDescriptionResource>> SkinsMP;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D6F386F2D622A29, 0x40)]
        public class EntitySkinResource : Resource
        {
            String DisplayNameId;
            Array<EntitySkinTextureAssignment> TextureAssignments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8FF32938D45E3CDC, 0x10)]
        public class EntitySkinTextureAssignment
        {
            Ref<SkinnableComponentResource> SkinnableObject;
            Ref<Texture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BBD32FEFA0F39C6, 0x38)]
        public class EntitySoundGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83E02FC6FE87C60A, 0x40)]
        public class EntitySoundNodeStateInstance : StateObjectInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D65C0CE10CEE6CD, 0x20)]
        public class EntitySoundNodeStateResource : StateObjectResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65199E7E9FEAD387, 0x210)]
        public class EntitySpawnInfo : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F7DFEC3F7C9FE6A, 0x28)]
        public class EntitySpawnedCollisionQuestTriggerInstance : SpawnSourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC308D5EA7861C6C, 0x28)]
        public class EntitySpawnedDeathQuestTriggerInstance : SpawnSourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D32C57A4794F7DF, 0x28)]
        public class EntitySpawnedHitReactionQuestTriggerInstance : SpawnSourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A0AB8EEE38C30AF, 0x28)]
        public class EntitySpawnedObtainedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2C2E23F94E1AAF9, 0x28)]
        public class EntitySpawnedScannedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1ACF59F515F850FD, 0x28)]
        public class EntitySpawnedSpottedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59B4AE756118613D, 0x28)]
        public class EntitySpawnedUsedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6ADB6E7A5B4D298, 0x98)]
        public class EntitySpottedQuestTrigger : EntityBasedQuestTrigger
        {
            bool PerformInitialCheck;
            UUIDRef<SpottableComponentResource> SpottableComponent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5300A41A9B05FC2C, 0x38)]
        public class EntityState : Resource
        {
            Ptr<EntityAction> EnterStateAction;
            Ptr<EntityAction> ExitStateAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x245D8067EEFC5F97, 0x50)]
        public class EntityStateAction : ConditionalAction
        {
            Ptr<EntityStateMachineResource> StateMachineResource;
            Ptr<EntityState> State;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x631F31B85B383DC1, 0x68)]
        public class EntityStateMachine : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38502CEFE2306425, 0x30)]
        public class EntityStateMachineResource : EntityComponentResource
        {
            Ref<EntityState> InitialState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9583550F29FF2D6, 0x8)]
        public class EntityStatistic
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3DD4FB52EF2F5E6, 0x150)]
        public class EntitySticker : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C3ECEE7F66F8797, 0x90)]
        public class EntityStickerResource : EntityComponentResource
        {
            Vec3 StickNormal;
            float StickOffset;
            bool AlignWithSurface;
            float ReleaseTime;
            bool ShouldBeDestroyedOnAutoRelease;
            bool CanStickOnce;
            bool CanStickToWorld;
            bool CanStickToHumans;
            bool CanStickToEntities;
            bool CanStickToFriendlies;
            bool ShouldBeDispensableAfterStick;
            Ref<DispensableCategoryResource> DispensableCategory;
            Ref<SoundResource> StickSoundResource;
            Ptr<EntityAction> StuckAction;
            Ptr<EntityAction> StickIgnoredAction;
            Ref<GraphProgramResource> StickConditionProgram;
            bool HasCollisionWhileStuck;
            Ref<MoverResource> UnstickMoverResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEFF76C9046F3C7A, 0x28)]
        public class EntityTypeCollisionQuestTriggerInstance : EntityResourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF6347251B018C09, 0x28)]
        public class EntityTypeDeathQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2208B2CD9013090, 0x28)]
        public class EntityTypeHitReactionQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x136DC434B7999A2F, 0x38)]
        public class EntityTypeObtainedQuestTriggerInstance : EntityResourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB13FBBAB90A8066, 0x28)]
        public class EntityTypeScannedQuestTriggerInstance : EntityResourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46A76491C8C4AE9B, 0x28)]
        public class EntityTypeSpottedQuestTriggerInstance : EntityResourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC552CA2BB65F0B3E, 0x28)]
        public class EntityTypeUsedQuestTriggerInstance : EntityResourceQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8BDD8244FF1B6899, 0x88)]
        public class EntityUsedQuestTrigger : EntityBasedQuestTrigger
        {
            bool PerformInitialCheck;
            bool AllowDoubleUse;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99A6ADD1BD056154, 0x40)]
        public class EnumFact : Fact
        {
            Ref<EnumFactValue> DefaultValue;
            Ref<EnumFactDefinition> EnumDefinition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x346C6A49DC185594, 0x38)]
        public class EnumFactDefinition : Resource
        {
            Array<Ref<EnumFactValue>> EnumValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x686542DF43A30E52, 0x40)]
        public class EnumFactQuestTrigger : QuestTrigger
        {
            Ref<EnumFact> Fact;
            Ref<EnumFactValue> Value;
            bool Not;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FBE9A32D71B94B6, 0x30)]
        public class EnumFactQuestTriggerInstance : FactQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB57725E85A124BC7, 0x28)]
        public class EnumFactValue : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4E899CB6A14AA76, 0x80)]
        public class EnvironmentSound : CoreObject
        {
            Ref<SoundResource> Sound;
            int MinInstanceCount;
            int MaxInstanceCount;
            float MinElevation;
            float MaxElevation;
            float RespawnDistance;
            float RespawnPoint;
            float MinDistance;
            BoundingBox3 Bounds;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x654683B0D8461761, 0x38)]
        public class EnvironmentSoundGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9EE17CAF8F1A061, 0x38)]
        public class EquipSlot : Resource
        {
            Ref<EquipSlotType> SlotType;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x493539AB6EDE943D, 0x30)]
        public class EquipSlotType : Resource
        {
            EEquipSlotType SlotType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDA45A7287F473A3, 0x80)]
        public class EquipmentModificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCA6E8E2D9EFF53, 0x48)]
        public class EquipmentModificationComponentResource : EntityComponentResource
        {
            Array<Ref<EquipmentModificationSocketResource>> DisplayedSockets;
            Array<Ref<EntityResource>> PreSocketedModificationItems;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CA01FA6C5339D29, 0x68)]
        public class EquipmentModificationItemComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B2047B2B98BE259, 0x70)]
        public class EquipmentModificationItemComponentResource : EntityComponentResource
        {
            Array<Ref<StatModificationTypeCandidate>> StatCandidates;
            Ref<CurveResource> RatingSpread;
            float SingleStatWeight;
            float SecondaryStatWeight;
            float TertiaryStatWeight;
            float SingleStatRatingThreshold;
            float TripleStatRatingThreshold;
            float PrimaryRatingMultiplierOnSecondary;
            float PrimaryRatingMultiplierOnTertiary;
            float SecondaryRatingMultiplier;
            float SecondaryRatingMultiplierOnTertiary;
            float TertiaryRatingMultiplier;
            EEquipmentModificationItemCategory Category;
            bool UseGeneratedName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3185CCEF016C6B7, 0x38)]
        public class EquipmentModificationSocketResource : Resource
        {
            Array<Ref<StatModificationSocketType>> AllowedSocketTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7B8DE55F2C5236C, 0x88)]
        public class EquipmentSlotComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63C259DFEF41C5D0, 0x38)]
        public class EquipmentSlotComponentResource : EntityComponentResource
        {
            Array<Ref<EquipSlot>> EquipSlots;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC955309C308A2033, 0x28)]
        public class EquipmentStatsDisplaySystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57113800667B8C94, 0xC8)]
        public class EquipmentStatsDisplaySystemResource : Resource
        {
            Ref<DamageTypeResource> Fire;
            Ref<DamageTypeResource> Cryo;
            Ref<DamageTypeResource> Shock;
            Ref<DamageTypeResource> Poison;
            Ref<DamageTypeResource> Tear;
            Ref<DisplayStatDefinition> DamageEffectiveness;
            Ref<DisplayStatDefinition> TearEffectiveness;
            Ref<DisplayStatDefinition> FireEffectiveness;
            Ref<DisplayStatDefinition> CryoEffectiveness;
            Ref<DisplayStatDefinition> ShockEffectiveness;
            Ref<DisplayStatDefinition> PoisonEffectiveness;
            Ref<DisplayStatDefinition> RangedDamageResistance;
            Ref<DisplayStatDefinition> MeleeDamageResistance;
            Ref<DisplayStatDefinition> FireResistance;
            Ref<DisplayStatDefinition> CryoResistance;
            Ref<DisplayStatDefinition> ShockResistance;
            Ref<DisplayStatDefinition> PoisonResistance;
            Ref<DisplayStatDefinition> Stealth;
            Ref<DisplayStatDefinition> Handling;
            int ModificationBarSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87EA50B4E837636F, 0xF0)]
        public class EquipmentViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6CF80B13DAD48D74, 0x28)]
        public class ErrorMessage : RTTIRefObject
        {
            int ErrorCode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34164433A92D6D58, 0x38)]
        public class EventDrivenStateMachineResource : Resource
        {
            Array<Ref<EventHandlerDefinition>> GlobalEventHandlers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8246B4FCB5303D4, 0x18)]
        public class EventFunctionMapping
        {
            int FunctionIndex;
            String EventRTTIName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE5972CD6243DCB2, 0x40)]
        public class EventHandlerDefinition : CoreObject
        {
            String MessageType;
            EventHandlerNeedsUpdate NeedsUpdate;
            Ref<GraphProgramResource> GraphProgram;
            Ref<OverrideGraphProgramResource> OverrideGraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB96D13CDF1CB8EB, 0x58)]
        public class EventInstance : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32B5878C517EF584, 0x30)]
        public class EventResource : Resource
        {
            bool Enabled;
            int StartFrame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x217D7693267DD212, 0x80)]
        public class ExclusionArea : ParentWorldNode
        {
            Ref<TerrainHull> Hull;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90C97CE9854A7E59, 0x48)]
        public class ExecuteNodeGraphAction : EntityAction
        {
            Ref<GraphProgramResource> GraphProgram;
            Ref<OverrideGraphProgramResource> OverrideGraphProgram;
            bool AllowMultiThreadedExecution;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4EA95333E7CEFFB0, 0x38)]
        public class ExecuteOnActivatorAction : EntityAction
        {
            Ptr<EntityAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x517D35221E1A2A17, 0x40)]
        public class ExecuteOnChildAction : EntityAction
        {
            Ptr<EntityAction> Action;
            bool Recursive;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB28BBB7765FC94B9, 0x38)]
        public class ExecuteOnInstigatorAction : EntityAction
        {
            Ptr<EntityAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC56B8810D9EB04FA, 0x38)]
        public class ExecuteOnParentAction : EntityAction
        {
            Ptr<EntityAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x366A9A19F76C0869, 0x38)]
        public class ExecuteOnSequenceAction : EntityAction
        {
            Ptr<EntityAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10284AFC8095BA8A, 0x48)]
        public class ExertionAnimationEvent : Resource
        {
            String EventID;
            EExertionAnimationEventTriggerType TriggerType;
            Ref<GraphProgramResource> GraphProgram;
            float CooldownDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35BCC8A8E2F6A341, 0x68)]
        public class ExertionEventComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFE13B29159E5217, 0x38)]
        public class ExertionEventComponentResource : EntityComponentResource
        {
            Array<Ref<ExertionAnimationEvent>> Events;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE74377AEF4C13D8E, 0x70)]
        public class ExplorationSystemResource : Resource
        {
            float FogOfWarRevealDistance;
            float ExplorationStepTime;
            float FogOfWarRevealTime;
            Ref<LocationMarkerResource> CustomMarker;
            Ref<LocalizedTextResource> CustomMarkerTitle;
            Ref<WorldDataType> TerrainHeightMapDataType;
            Ref<WorldDataType> ObjectHeightMapDataType;
            float CustomMarkerRemovalDistance;
            float MarkerHighlightTime;
            Array<Ref<MapIconFilter>> MapIconFilters;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA15022A3A2B34160, 0x380)]
        public class Explosion : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCC8EC267F6808F4, 0x78)]
        public class ExplosionOnContactComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF2839005FE128A3, 0x1D0)]
        public class ExplosionResource : EntityResource
        {
            MaterialType ExplosionMaterialType;
            MaterialType ExplosionContactMaterialType;
            float ExplosionMaterialTypeRadius;
            bool LineExplosion;
            Vec3 Start;
            Vec3 End;
            Array<Ref<DamageSettings>> DamageSettingsSP;
            Array<Ref<DamageSettings>> DamageSettingsMP;
            Array<Ref<DamageSettings>> DamageSettingsAI;
            float ShockWaveSpeed;
            float ShockWaveImpactSpeed;
            bool AlignWithCollisionNormal;
            float SurfaceOffset;
            Ref<AIAuralStimulusResource> ExplosionSoundStimulus;
            Ref<AIThrowableOriginInfoMessageResource> OriginInfoMessage;
            Ref<CurveResource> ExplosionShapeCurve;
            bool ShapedExplosionIsHorizontal;
            bool OnlyDamageEnemyFaction;
            bool IgnoreInstigator;
            bool AlwaysCollapseEntityHits;
            EAIDangerAreaType AIDangerAreaType;
            bool SetInstigatorOnPerceptionEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8DA9DF2581DF1253, 0x6E0)]
        public class ExplosiveLocation : MountableEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9DCB897FA30BCA01, 0x1C0)]
        public class ExplosiveLocationAiController : ExplosiveLocationController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x388134753435FA54, 0x1B0)]
        public class ExplosiveLocationController : InteractiveEntityController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0494B800B19C3A7, 0x18)]
        public class ExplosiveLocationIndicatorLight
        {
            String HelperNodeName;
            Ref<LightResource> LightResource;
            String ShaderVariableID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5DAE56D6F82FEFF1, 0x200)]
        public class ExplosiveLocationJoystickController : ExplosiveLocationController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8371B48E4BD7334, 0x340)]
        public class ExplosiveLocationRep : InteractiveEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FBD81770FB5EE4E, 0x410)]
        public class ExplosiveLocationResource : MountableEntityResource
        {
            float MinAngle;
            float MaxAngle;
            float MaxRotationSpeed;
            bool CanBeDisarmed;
            Ref<ModelPartResource> ExplosiveModelPartResource;
            Ref<ModelPartResource> HandleModelPartResource;
            Ref<ModelPartResource> PlaceHolderModelPartResource;
            Vec3 PlaceHolderPosition;
            Ref<ExplosionResource> ExplosionResource;
            Mat44 ExplosionOffset;
            Array<FRange> ArmRanges;
            float ArmStepTime;
            float AutoDetachTime;
            Array<String> ArmShaderVariableIDs;
            Array<String> HandleShaderVariableIDs;
            Ref<CurveResource> UnarmedShaderVariableCurve;
            float BlinkFrequency;
            Ref<SoundResource> LightSound;
            Ref<SoundResource> ArmStepSound;
            Ref<SoundResource> ArmedSound;
            Ref<SoundResource> DisarmedSound;
            Ref<RumbleResource> ArmStepRumble;
            Array<ExplosiveLocationIndicatorLight> IndicatorLights;
            Ref<CurveResource> IndicatorBlinkCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E7854BAA3D9673F, 0x68)]
        public class ExplosiveTimerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C4C14739E1D9FAE, 0x30)]
        public class ExplosiveTimerComponentResource : EntityComponentResource
        {
            float CountdownDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1907E58DBE672BF7, 0x38)]
        public class ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x91BB0344AA2A5EB, 0x40)]
        public class ExportedSymbols
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8841E6C1706FC65, 0x10)]
        public class ExposedEntityActionInfo
        {
            String Identifier;
            Ptr<EntityAction> EntityAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6044E40CAC978735, 0x58)]
        public class ExposedEntityActionsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C5A695D4546BA74, 0x38)]
        public class ExposedEntityActionsComponentResource : EntityComponentResource
        {
            Array<ExposedEntityActionInfo> ExposedEntityActions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E01EDEF8C591126, 0x18)]
        public class ExposedEventAttribute
        {
            Ref<EventResource> EventResource;
            String AttributeName;
            String ExposedName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46A932284DEA1A32, 0x10)]
        public class ExposedEventAttributeList
        {
            Array<ExposedEventAttribute> ExposedEventAttributes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x987751596455762E, 0x10)]
        public class ExposedEventMapping
        {
            String ExposedName;
            Ref<EventResource> EventResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD324C2628BB62C10, 0x70)]
        public class ExposureSettings
        {
            Vec2 ToneMappingCurveTangents;
            Vec2 ToneMappingCurveTangentStrengths;
            Vec2 ToneMappingRange;
            float MinExposureValue;
            float MaxExposureValue;
            float MaxExposureIncrease;
            float MaxExposureDecrease;
            float OverExposureValue;
            float ExposureIncreaseRate;
            float ExposureDecreaseRate;
            FRect ExposureMeteringRectangle;
            float WhiteBalanceStrength;
            float WhiteBalanceMaxOutlier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CC51DA11B2925, 0xA0)]
        public class ExposureSettingsResource : Resource
        {
            Vec2 ToneMappingCurveTangents;
            Vec2 ToneMappingCurveTangentStrengths;
            Vec2 ToneMappingRange;
            float MinExposureValue;
            float MaxExposureValue;
            float MaxExposureIncrease;
            float MaxExposureDecrease;
            float OverExposureValue;
            float ExposureIncreaseRate;
            float ExposureDecreaseRate;
            FRect ExposureMeteringRectangle;
            float WhiteBalanceStrength;
            float WhiteBalanceMaxOutlier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EAE42D7009F298E, 0x120)]
        public class ExternalAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6C5B733326C84E6, 0x48)]
        public class ExternalAnimationComponentResource : EntityComponentResource
        {
            Array<Ref<ExternalAnimationConfiguration>> PoseConfigurations;
            Ref<SkeletonAnimationResource> DefaultAnimationResource;
            bool LoopDefaultAnimation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC8B315698D8C5E0, 0x40)]
        public class ExternalAnimationConfiguration : Resource
        {
            String StartSequenceVariableName;
            String PartialBlendWeightName;
            bool DisableAnimationManager;
            bool DisableAnimationManagerOnLOD;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF7855AB11CB86BF, 0x58)]
        public class ExtraAmmoComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65C3E53A2A530EDC, 0x38)]
        public class ExtraAmmoComponentResource : EntityComponentResource
        {
            Array<Ref<ExtraAmmoModifier>> ExtraAmmoModifiers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FDFF095F0C7AACF, 0x38)]
        public class ExtraAmmoModifier : CoreObject
        {
            int ExtraRoundsPerMagazine;
            int ExtraRoundsTotal;
            Ref<AmmoType> AmmoType;
            TagPropertyLink RequiredTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB630F8ED483329FA, 0x68)]
        public class ExtraArmorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7697DE19A7295FF9, 0x50)]
        public class ExtraArmorComponentResource : EntityComponentResource
        {
            float ExtraArmor;
            float DepletionDelay;
            float DepletionRate;
            Ptr<EntityAction> DepletedAction;
            Array<Ref<DamageTypeResource>> ExcludedDamageTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA49B6149AB6A511B, 0x60)]
        public class ExtraHealthComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD5BD37B80B2CBA7, 0x30)]
        public class ExtraHealthComponentResource : EntityComponentResource
        {
            float ExtraHealth;
            bool StartFilled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42D7495C1012D2BC, 0x98)]
        public class EyeLookAtEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FD346ADF245E7E4, 0x48)]
        public class EyeLookAtEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<LocatorResource> TargetLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C4618B7FFF50B99, 0x8)]
        public class FArc
        {
            FOrientation Start;
            FOrientation End;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8797159F1A749F0, 0x4)]
        public class FOrientation
        {
            float Angle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD93A3080511263D, 0x10)]
        public class FRGBAColor
        {
            float R;
            float G;
            float B;
            float A;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6C28FAA559677E0, 0xC)]
        public class FRGBColor
        {
            float R;
            float G;
            float B;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD246FA10D3F617C6, 0x8)]
        public class FRange
        {
            float Min;
            float Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x167B336446D5999B, 0x10)]
        public class FRect
        {
            float Left;
            float Top;
            float Right;
            float Bottom;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x352CF045DF137051, 0x8)]
        public class FSize
        {
            float Width;
            float Height;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F860DD22AFE03DD, 0x70)]
        public class FaceTowardsEventInstance : AimAtEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1ABB56D369FA6EEF, 0x58)]
        public class FaceTowardsEventResource : AimAtEventResource
        {
            float AlignBaseDelay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7A61596707A1D872, 0x60)]
        public class FacialAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99B1E8F267D60181, 0x240)]
        public class FacialAnimationComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35E56B79353B320F, 0xA0)]
        public class FacialAnimationComponentResource : EntityComponentResource
        {
            Ref<MeshResourceBase> FacialMesh;
            Ref<Skeleton> FacialSkeleton;
            Ref<SkinnedMeshBoneBoundingBoxes> BoneBoundingBoxes;
            Ref<SkeletonAnimationResource> FacialAnimation;
            Array<FacialAnimationLOD> LODs;
            Ref<PoseDeformerResource> PoseDeformer;
            String HeadOrientationBone;
            Vec3 HeadOrientationForward;
            float HeadMaxVisibleAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4885D73C8856D0, 0x60)]
        public class FacialAnimationEventInstance : FacialAnimationEventInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10ACD3BD9B8ABA84, 0x60)]
        public class FacialAnimationEventInstanceBase : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E3A49471A175B8C, 0x60)]
        public class FacialAnimationEventResource : FacialAnimationEventResourceBase
        {
            Ref<SkeletonAnimationResource> AnimationResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3DC19CB49E3B5C3C, 0x58)]
        public class FacialAnimationEventResourceBase : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            int ClipOffset;
            Ref<CurveResource> BlendCurveResource;
            int BlendOutAfterEventNumFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFF66B0048B438D2, 0xC0)]
        public class FacialAnimationLOD
        {
            float Distance;
            Ref<FacialAnimationProgramResource> ProgramResource;
            Ref<GraphProgramResource> OverrideAnimGraphProgramResource;
            bool DisablePoseDeformer;
            Array<int> CorrespondingJoints;
            Array<int> CorrespondingControls;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75E46F96B977064F, 0x50)]
        public class FacialAnimationProgramResource : ProgramResource
        {
            Filename ProceduralRigSourceFile;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9821D63AB7F998C1, 0x30)]
        public class FacialEmotionAnimationResource : Resource
        {
            Ref<SkeletonAnimationResource> AnimationResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19278DA4E26E7110, 0x60)]
        public class FacialEmotionEventInstance : FacialAnimationEventInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED01E02542247261, 0x58)]
        public class FacialEmotionEventResource : FacialAnimationEventResourceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2CFE22509B6A809, 0x58)]
        public class FacialExpressionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B9E6DFD3A70291B, 0x30)]
        public class FacialExpressionComponentResource : EntityComponentResource
        {
            EFacialExpression FacialExpression;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4F1049FB332624BA, 0x58)]
        public class FacialPaintComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39BE8AF6C0F264DC, 0x38)]
        public class FacialPaintComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9EFC8EF30BEEAB1, 0x30)]
        public class FacialPaintComponentResource : EntityComponentResource
        {
            Ref<RenderEffectShaderOverridesResource> DefaultShaderOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BDB7EDC9BE618C8, 0x30)]
        public class Fact : Resource
        {
            bool Persistent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CF202A1F85B6A9E, 0x78)]
        public class FactBasedContextualEmotion : ContextualEmotion
        {
            Ref<BooleanFact> Fact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD90A29AFF238E628, 0x48)]
        public class FactCollectionResource : Resource
        {
            Array<Ref<FactValue>> Facts;
            Array<Ref<FactCollectionResource>> FactCollections;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A7D008CFEDA40F7, 0x100)]
        public class FactCollisionTrigger : CollisionTrigger
        {
            Ref<BooleanFact> Fact;
            Array<Ref<BooleanFact>> Facts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64F0B9394F4E27A8, 0x30)]
        public class FactContextDescription : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3835A4A06E1473D, 0x88)]
        public class FactDatabase : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67D4A915838B87EC, 0x20)]
        public class FactDatabaseGlobalContext : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CC735E7A0B7281, 0x38)]
        public class FactDatabaseResource : Resource
        {
            Ref<BooleanFact> IsDeadFact;
            Ref<BooleanFact> IsBenchmarkingFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB82BD855EC5EB3BB, 0x18)]
        public class FactMapping : RTTIObject
        {
            Ref<IntegerFact> Fact;
            String Key;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD83BD3456F45DBEF, 0x30)]
        public class FactMusicPreset
        {
            String PresetName;
            String ExitPresetName;
            Ref<EnumFactValue> FactValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E4BA0BBB05BBC7F, 0x38)]
        public class FactMusicPresetCollection : CoreObject
        {
            Array<FactMusicPreset> MusicPresets;
            Ref<EnumFact> Fact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCA921F937AB408, 0x60)]
        public class FactPauseEventInstance : PauseEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A23DBA497A59C2F, 0x48)]
        public class FactPauseEventResource : PauseEventResource
        {
            ESequenceFactContextType FactContextType;
            Ref<EntityActorResource> EntityActorResource;
            Ref<BooleanFact> UnpauseFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C02733D8C130263, 0x30)]
        public class FactQuestTriggerInstance : SystemQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x356B8FD7711192EF, 0x30)]
        public class FactValue : CoreObject
        {
            FactValueBase base_FactValueBase;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD5EE84747BD695C, 0x10)]
        public class FactValueBase
        {
            Ref<Fact> Fact;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1041574294AFE4F7, 0x48)]
        public class FactionAction : ConditionalAction
        {
            String FactionName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1881B57671D028B, 0x10)]
        public class FactionOverride
        {
            Ref<AIFaction> FromFaction;
            Ref<AIFaction> ToFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1291C147E502DAF, 0x70)]
        public class FactionOverrideComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x223C6B30B340C4C6, 0x38)]
        public class FactionOverrideComponentResource : EntityComponentResource
        {
            Array<FactionOverride> FactionOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1D8499A01E9B5C7, 0x70)]
        public class FactionScore : NetReplicatedObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC215F9215D1A7A02, 0x50)]
        public class FactionSwitchRequestKIN : MatchRequest
        {
            String PlaylistID;
            String GameId;
            String TargetFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB67F63C4BCFD3284, 0x58)]
        public class FastTravelSettingsResource : Resource
        {
            Ref<GraphProgramResource> AllowCondition;
            Ref<OverrideGraphProgramResource> AllowOverrideCondition;
            Ref<BooleanFact> ConsumeItemsFact;
            Ref<EntityResource> ConsumedItemResource;
            int ConsumedItemCount;
            float MinimalTravelDistance;
            bool UseSafePlacement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49553B95EA6D8865, 0x160)]
        public class FastTravelSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1379206266B4BC63, 0x78)]
        public class FastTravelSystemResource : Resource
        {
            Ref<GraphProgramResource> StartedFastTravelGraph;
            Ref<GraphProgramResource> FinishedFastTravelGraph;
            Ref<LocalizedTextResource> LocalizedDayText;
            Ref<BooleanFact> HUDDisplayFact;
            float HUDDisplayTime;
            float MinimalFastTravelDistance;
            Ref<CurveResource> LoadingTimeOverDistance;
            Ref<CurveResource> ZoomLevelOverDistance;
            Ref<CurveResource> MovementOffsetCurve;
            Ref<IntegerFact> FastTravelCountFact;
            Ref<BooleanFact> IsUsingFastTravelFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3CDBB757D43BBFD, 0x38)]
        public class FireDurationsAnimationReference : Resource
        {
            float FireDuration;
            float ChamberRoundDuration;
            float AfterBurstFiringDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75780D8C3E0708D7, 0x30)]
        public class FireSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A8B42CCED094E6A, 0x88)]
        public class FireWeaponEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96650BF0FBE2F0F4, 0x70)]
        public class FireWeaponEventResource : TimedEventResource
        {
            Ref<ScriptedWeaponResource> ScriptedWeaponResource;
            Ref<LocatorResource> PositionLocatorResource;
            String PositionHelperNode;
            Ref<LocatorResource> TargetLocatorResource;
            String TargetHelperNode;
            Ref<LocatorResource> TracePositionLocatorResource;
            ENoProjectileTraceType NoProjectileTraceType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x208D23D5ED87DC10, 0x470)]
        public class FirstPersonCameraEntity : CameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70B42419A8014173, 0x320)]
        public class FirstPersonCameraEntityRep : CameraEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBA76068AC867BD1, 0x1D8)]
        public class FirstPersonCameraEntityResource : CameraEntityResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42C1AA88380AC494, 0x5D0)]
        public class FirstPersonDeathCameraEntity : DeathCameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38329E9F5648BDCA, 0x330)]
        public class FirstPersonDeathCameraEntityRep : DeathCameraEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE73424BC671841C6, 0x248)]
        public class FirstPersonDeathCameraEntityResource : DeathCameraEntityResource
        {
            float HeadSize;
            float MinimalSpeed;
            float MaximumSpeed;
            float MaximumUpwardSpeed;
            float HitImpulseFactor;
            float GravityFactor;
            float BounceRestitution;
            bool LookAtKiller;
            float LookAtKillerDelay;
            float SideTiltAngle;
            float ForwardTiltAngle;
            float BackwardTiltAngle;
            Ref<CurveResource> TiltCurve;
            Ref<CurveResource> LookAtCurve;
            Ref<CurveResource> StopLookAtCurve;
            float LookAtSmoothness;
            bool FollowAnimationWhenFalling;
            float VerticalPlacementOffset;
            bool HidePlayer;
            bool SuspendController;
            Ref<PathResource> GetUpCameraPath;
            bool DisableHealthEffect;
            bool LookUp;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC1AEBAD624F1E82, 0x68)]
        public class FirstPersonHitEffectsResource : Resource
        {
            Array<Ref<ShakeResource>> HitResponseShakes;
            Ref<CurveResource> HitEffectDistanceFactorCurve;
            Ref<CurveResource> HitEffectDamageFactorCurve;
            Ref<AnimatedScreenEffectResource> HitBloodScreenEffectResource;
            int Priority;
            bool IdenticalPriorityOverrides;
            float WeaponSpringVelocityAddition;
            Ref<RumbleResource> RumbleResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55758C5A3093F356, 0xA0)]
        public class FixedPositionMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x639772DAF130C8D8, 0x30)]
        public class FixedPositionMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54D308E9BFD39065, 0x500)]
        public class FlameThrowerEjector : ContinuousAmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x98017CAE62479440, 0x240)]
        public class FlameThrowerEjectorRep : ContinuousAmmoEjectorRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD3C7325D61FAC28, 0x2D0)]
        public class FlameThrowerEjectorResource : ContinuousAmmoEjectorResource
        {
            Array<Ref<DamageSettings>> DamageSettings;
            float OwnerImmuneTime;
            Ref<GraphProgramResource> GroundFireSelectionGraph;
            Ref<OverrideGraphProgramResource> GroundFireSelectionOverrideGraph;
            Ref<DamageAreaResource> DamageAreaResource;
            float InactiveLifeTime;
            int ParticlesRequired;
            float MinParticleLifeTime;
            float BlockedFireDuration;
            float ExitVelocity;
            Vec3 FiringDangerAreaStartOffset;
            float FiringDangerAreaStartRadius;
            Vec3 FiringDangerAreaEndOffset;
            float FiringDangerAreaEndRadius;
            float FiringDangerAreaDuration;
            Ref<SimpleParticleSystemResource> SimpleParticleSystemResource;
            Ref<ParticleSystemResource> FirstPersonParticleSystemResource;
            Ref<ParticleSystemResource> ParticleSystemResource;
            bool AlignParticlesWithAim;
            ESortOrder SortOrder;
            ESortMode SortMode;
            PilotLightSettings PilotLightSettings;
            PilotLightSettings FirstPersonPilotLightSettings;
            MaterialType ImpactMaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D9054716CCC885F, 0x48)]
        public class FlickerLight : CoreObject
        {
            float JitterFactor;
            bool SineWave;
            float MinIntensity;
            float MaxIntensity;
            float SineFrequency;
            float SineAmplitude;
            float SineBase;
            bool SmoothInterpolate;
            float UpdateFrequency;
            uint RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6DD282742FF6474, 0x38)]
        public class FloatFact : Fact
        {
            float DefaultValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9F5FCEA3D0B2243, 0x40)]
        public class FloatFactQuestTrigger : QuestTrigger
        {
            Ref<FloatFact> Fact;
            float Value;
            EFloatFactComparisonLogic CompareLogic;
            float NotifyMin;
            float NotifyMax;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5BFB7EA1CE528325, 0x30)]
        public class FloatFactQuestTriggerInstance : FactQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5D856AEEC225E8A, 0x30)]
        public class FloatProperty : FloatPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EFFB7F768AC70A0, 0x30)]
        public class FloatPropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60622C1AE0B56501, 0x8)]
        public class FloatPropertyLink : PropertyLinkBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ref<FloatPropertyBase> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8DB5833407F1C222, 0x320)]
        public class FloorSlopeDetectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29A7527905280363, 0x78)]
        public class FloorSlopeDetectionComponentResource : EntityComponentResource
        {
            String LongitudinalSlopeAngleAnimVarName;
            String LateralSlopeAngleAnimVarName;
            EFloorSlopeDetectionMethod DetectionMethod;
            FloorSlopeDetectionProbeSettings ProbeSettings;
            FRange AllowedLongitudinalAngleRange;
            FRange AllowedLateralAngleRange;
            bool UseAmphibiousCollisionLayer;
            bool ExcludeCollisionGroupEntity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x212642190826C0BF, 0x24)]
        public class FloorSlopeDetectionProbeSettings
        {
            float ProbeRadius;
            float PlaneExtension;
            bool AlignProbesToCollisionCapsule;
            float ProbeDistanceFront;
            float ProbeDistanceBack;
            float ProbeDistanceLeft;
            float ProbeDistanceRight;
            FRange ProbeVerticalRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0B629D334E83D22, 0x80)]
        public class FlowPuzzleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC46FF414C693092, 0xA0)]
        public class FlowPuzzleNodeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF7F978705F623CB8, 0x58)]
        public class FlowPuzzleNodeComponentResource : EntityComponentResource
        {
            Array<FlowPuzzleNodeSocket> Sockets;
            bool IsBroken;
            float Range;
            Ref<EntityResource> ChildEntityResourceToRotate;
            float RotateSpeed;
            float ConnectTime;
            bool SetToSolvedWhenPuzzleIsSolved;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C28A24692110493, 0x8)]
        public class FlowPuzzleNodeSocket
        {
            bool ProvidesFlow;
            bool IsEndpoint;
            int RelativeOrientation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B948DB34A7B6136, 0x80)]
        public class FlowPuzzleSettings : Resource
        {
            Ref<EnumFact> NodeStateFact;
            Ref<EnumFactValue> OffStateFactValue;
            Ref<EnumFactValue> OnStateFactValue;
            Ref<EnumFactValue> HalfConnectedStateFactValue;
            Ref<EnumFactValue> ConnectedStateFactValue;
            Ref<EnumFactValue> SolvedStateFactValue;
            Ref<IntegerFact> OrientationFact;
            Ref<IntegerFact> DistanceToBrokenNodeFact;
            Ref<IntegerFact> FlowDirectionFact;
            Ref<IntegerFact> TotalNodeCountFact;
            Ref<IntegerFact> ConnectedNodeCountFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF29CAFE34DBCAFA0, 0x550)]
        public class FlyoverCameraEntity : CameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17A2A6106BD66CAB, 0x320)]
        public class FlyoverCameraEntityRep : CameraEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x93632BD2DE8F4099, 0x200)]
        public class FlyoverCameraEntityResource : CameraEntityResource
        {
            float ForwardSpeed;
            float StrafeSpeed;
            float UpDownSpeed;
            float HeadingSpeed;
            float PitchSpeed;
            float MinPitch;
            float MaxPitch;
            float RollSpeed;
            float MinRoll;
            float MaxRoll;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3766878D3CB9C3CC, 0x510)]
        public class FlyoverDeathCameraEntity : DeathCameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA88623A70B0D41F6, 0x330)]
        public class FlyoverDeathCameraEntityRep : DeathCameraEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74D4997FC49137B3, 0x230)]
        public class FlyoverDeathCameraEntityResource : DeathCameraEntityResource
        {
            float PlayerScreenPosition;
            float TargetScreenPosition;
            float DistanceFromPlayer;
            float VerticalAngleIfSuicide;
            bool TrackTargetWhenNotVisible;
            float CameraSmoothness;
            float GetUpCameraSmoothness;
            float CameraCollisionRadius;
            float MinHeightAbovePlayer;
            Ref<CurveResource> GetUpDistanceCurve;
            Array<String> LookAtTargetTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29C1FE20A6F2C6BE, 0xD0)]
        public class FocusAlertSignal : WorldNode
        {
            Array<Ref<FocusScannedInfo>> FocusScannedInfo;
            float DetectionRange;
            UUIDRef<Spawnpoint> Spawnpoint;
            Vec3 EntityOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76390CEE7A9253CE, 0x70)]
        public class FocusAlertSignalManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6EBF5E50F281FC7E, 0xE8)]
        public class FocusCollisionTrigger : CollisionTrigger
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5150CC78CBF57994, 0x310)]
        public class FocusComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0BA167BD107650F, 0x108)]
        public class FocusComponentResource : EntityComponentResource
        {
            Ref<EntityResource> OutlineEntityResource;
            float OutlineEntityRemoveDelay;
            Ref<FocusOutlineColorSettings> OutlineColorSettings;
            Ref<EntityAction> Activate;
            Ref<EntityAction> Deactivate;
            Ref<BooleanFact> ActiveFact;
            Ref<SoundResource> TaggedSoundEffect;
            Ref<SoundResource> UnTaggedSoundEffect;
            float LookInputTreshHold;
            float MaxActivationDelay;
            String AnimAction;
            Ref<HUDCrosshairSettings> Crosshair;
            float FocusTargetAngle;
            float FocusPatternSpeed;
            int FocusPatternRings;
            float FocusPatternTime;
            float FocusAimDistanceWeight;
            float FocusAimAngleWeight;
            float ScanningDelay;
            float TaggedPatrolPathRange;
            float FocusModeTagRange;
            float FocusModeTagFadeDistance;
            float TrackingRange;
            Ref<BooleanFact> IsTracksVisibleFact;
            Ref<BooleanFact> IsFocusAllowedInSequencesFact;
            Ref<SoundResource> SignalAlertSound;
            String SignalAlertSoundHelperName;
            float SignalScanningRadius;
            float SignalScanningDuration;
            Ref<BooleanFact> SignalScannedFact;
            Ref<ParticleSystemResource> SignalParticleSystemResource;
            Ref<ParticleSystemResource> SignalScannedParticleSystemResource;
            Ref<HUDLogicGroupResource> WorldIconHUDLogicGroup;
            Ref<BooleanFact> WorldIconsHiddenFact;
            float WorldIconsVisibleTimer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB34C6905E3270841, 0x68)]
        public class FocusLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x957CFE66184EE208, 0x40)]
        public class FocusLocatorResource : LocatorResource
        {
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34528F330C52C56, 0x78)]
        public class FocusOcclusionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F6586A8929DB0EB, 0x38)]
        public class FocusOcclusionComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D5F522C052B0FFF, 0x28)]
        public class FocusOcclusionComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x98127895582262CE, 0x40)]
        public class FocusOutlineColorSet
        {
            String FillColorShaderVariableName;
            FRGBAColor FillColor;
            String OutlineColorShaderVariableName;
            FRGBAColor OutlineColor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7C8010A5E0E62E3, 0x230)]
        public class FocusOutlineColorSettings : Resource
        {
            FocusOutlineColorSet Value1;
            FocusOutlineColorSet Value2;
            FocusOutlineColorSet Value3;
            FocusOutlineColorSet Value4;
            FocusOutlineColorSet Value5;
            FocusOutlineColorSet Value6;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F7580AECE030BD2, 0x58)]
        public class FocusOutlineComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26CC983033EAC59D, 0x38)]
        public class FocusOutlineComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3BCE79AEF602F315, 0x38)]
        public class FocusOutlineComponentResource : EntityComponentResource
        {
            Ref<FocusOutlineSettings> OutlineSettings;
            String TaggedMaterialName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94827E7034DDFCB, 0x70)]
        public class FocusOutlineSettings : Resource
        {
            EFocusTargetOutlineType Value;
            EFocusTargetOutlineType TaggedValue;
            FocusOutlineColorSet HighlightColorSet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD02D0FF27750DD02, 0x60)]
        public class FocusScannableBase : Resource
        {
            Ref<LocalizedTextResource> LocalizerResource;
            bool VulnerableToAllDamage;
            Array<Ref<DamageTypeResource>> Vulnerabilities;
            bool ResistantToAllDamage;
            Array<Ref<DamageTypeResource>> Resistances;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EB7C8D78E0A9B36, 0x70)]
        public class FocusScannableBody : FocusScannableBase
        {
            Ref<UITexture> UIDisplayIcon;
            Ref<UITexture> UIHighlightedIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9564FAF31AEA1EAC, 0x68)]
        public class FocusScannableCategory : Resource
        {
            Ref<LocalizedTextResource> LocalizerResource;
            Array<Ref<FocusScannableObject>> ScannableObject;
            Ref<FocusOutlineSettings> OutlineSettings;
            Ref<UITexture> UIDisplayIcon;
            Ref<UITexture> UIDestroyedIcon;
            Ref<UITexture> UIHighlightedIcon;
            Ref<UITexture> UIHiddenIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBB442DCFD67907C, 0x70)]
        public class FocusScannableObject : FocusScannableBase
        {
            Ref<ConditionResource> DisplayCondition;
            Ref<TagProperty> TagProperty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B89DD5C0B129C0A, 0x80)]
        public class FocusScannedInfo : Resource
        {
            Ref<LocalizedTextResource> ScannedTitle;
            Ref<LocalizedTextResource> ScannedSubTitle;
            Ref<LocalizedTextResource> Description;
            Ref<FocusTargetType> FocusTargetType;
            Array<Ref<FocusScannableCategory>> ScannableCategories;
            Ref<FocusScannableBody> ScannableBody;
            Ref<FocusOutlineSettings> OutlineSettings;
            Array<Ref<TagProperty>> OcclusionCullingDisabledTags;
            Ref<ConditionResource> ConditionResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27FF98552A16D985, 0x100)]
        public class FocusTargetComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6FC41E982818491, 0x70)]
        public class FocusTargetComponentResource : EntityComponentResource
        {
            Ref<BooleanFact> FocusTargetInvalidFact;
            bool IsTargetWhenFriendly;
            bool IsTargetWhenDead;
            bool IsTargetWhenLootable;
            bool IsPlayerInSameFocusTriggerRequired;
            float FocusTargetOverrideDistance;
            float ScanningDuration;
            Ref<CameraMagnetTagResource> ScanningPartCameraMagnetTagResource;
            Ref<FocusScannedInfo> DefaultScannedInfo;
            Array<Ref<FocusScannedInfo>> ConditionalScannedInfo;
            bool Taggable;
            Ref<TrackingPathSettings> TrackingPathSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBAE164D488660B15, 0x70)]
        public class FocusTargetType : Resource
        {
            Ref<LocalizedTextResource> FriendlyName;
            Ref<LocalizedTextResource> HostileName;
            Ref<LocalizedTextResource> CorruptedName;
            Ref<LocalizedTextResource> DeadName;
            Ref<UITexture> UIIcon;
            FRGBAColor Color;
            Ref<LocalizedTextResource> DeadDescription;
            bool ShowModifiersWhenAlive;
            bool FriendlyLevelShown;
            bool EnemyLevelShown;
            bool FriendlyTypeIndicatorShown;
            bool EnemyTypeIndicatorShown;
            bool FactionIndicatorShown;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC660CFC7926122B7, 0x80)]
        public class FogOfWarRevealArea : ParentWorldNode
        {
            Ref<CollisionTrigger> Area;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD95CE46E2BD1395, 0x20)]
        public class FogSettings
        {
            FRGBAColor Color;
            float Brightness;
            float Depth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C8CFA72B4357AEF, 0xC)]
        public class FoliageMaterial
        {
            FRGBColor TranslucencyIntensity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA42A96A9C70C6B26, 0x4A0)]
        public class FollowCameraEntity : CameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3DB2B1C1B50D1AF9, 0x230)]
        public class FollowCameraEntityResource : CameraEntityResource
        {
            Vec3 LocalCameraPosition;
            float CollisionMovementSpeedIn;
            float CollisionMovementSpeedOut;
            float CollisionMovementDelay;
            float CameraCollisionRadius;
            float CameraKeepADistanceOf;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8D99D0FD322DE6D, 0x40)]
        public class FollowCameraProperties : CameraPropertiesBase
        {
            Vec3 LocalCameraPosition;
            float CollisionMovementSpeedIn;
            float CollisionMovementSpeedOut;
            float CollisionMovementDelay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB9EFAA168519219, 0x40)]
        public class FontCharGlyphInfo : FontCharInfo
        {
            GlyphContourList GlyphContourList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB07FA204C489C9E7, 0x10)]
        public class FontCharInfo
        {
            FontGlyphMetrics GlyphMetrics;
            wchar Char;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47478D0384CA6A4A, 0xC)]
        public class FontGlyphMetrics
        {
            Vec2Pack Bearing;
            float AdvanceWidth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43F4E395F9CE4BA4, 0x8)]
        public class FontKerningPair
        {
            wchar First;
            wchar Second;
            float Kerning;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B2A73E2413BA60E, 0x70)]
        public class FontResource : Resource
        {
            FontResourceData FontResourceData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96C487035331AED2, 0x48)]
        public class FontResourceData
        {
            String TypefaceName;
            FontTextMetrics TextMetrics;
            Array<FontCharGlyphInfo> CharInfo;
            Array<FontKerningPair> KerningPairs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD772C0C6D53FCAB5, 0x10)]
        public class FontTextMetrics
        {
            float Height;
            float Ascent;
            float Descent;
            float EmHeight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2BC23844A70F90B, 0x70)]
        public class FootPlacementComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BB4BCE9B52E9CC8, 0x38)]
        public class FootPlacementComponentResource : EntityComponentResource
        {
            String HipIKVariableName;
            String PredictiveTerrainName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BCD7EE0AA9A0D62, 0x38)]
        public class FootstepAuralStimulusResource : Resource
        {
            float MinimumSpeed;
            float MaximumSpeed;
            Ref<AIAuralStimulusResource> AIAuralStimulusResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87131808C2E9AB07, 0x78)]
        public class ForceFieldEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B2C2AA0CCC32C68, 0x48)]
        public class ForceFieldEventResource : TimedEventResource
        {
            Ref<ForceFieldResource> ForceFieldResource;
            Ref<LocatorResource> PositionLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC5311C73AF2FA3F, 0x2E0)]
        public class ForceFieldInstance : WorldNode
        {
            Ref<ForceFieldResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8011BE208F9D254, 0x590)]
        public class ForceFieldManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BEAB563291FF330, 0x30)]
        public class ForceFieldManagerSettings : CoreObject
        {
            Ref<WorldDataType> WaterHeightDataType;
            Ref<WorldDataType> WaterFlowDataType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1000A1FABAEBDA8E, 0x210)]
        public class ForceFieldResource : Resource
        {
            ForceFieldSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CE2335A82FDBD2, 0x1E0)]
        public class ForceFieldSettings
        {
            EForceFieldShape Shape;
            uint8 EffectiveAxes;
            EForceBehaviour ForceBehaviour;
            EForceType ForceType;
            EForceFieldFlowDriver FlowDriver;
            Mat44 Transform;
            Quat ForceOrientation;
            float FadeRange;
            float Strength;
            float TurbulenceAnimationSpeed;
            float TurbulenceSpatialVariation;
            float TurbulenceAmount;
            float TurbulenceShaping;
            float TurbulenceVerticalAnimation;
            uint8 Priority;
            float FlowAnimationSpeed;
            float MaxFlowSpeed;
            float MinFlowSpeed;
            float FlowSpatialVariation;
            float MinFlowSpeedClamp;
            EForceFieldFilter Filter;
            bool DirectionMapUseWorldSpaceBounds;
            BoundingBox2 DirectionMapWorldSpaceBounds;
            Ref<Texture> DirectionMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7A3F8ECBD70E197, 0xB0)]
        public class ForceFieldSpringSettings : Resource
        {
            SpringAttr Special;
            SpringAttr Grass;
            SpringAttr Plant;
            SpringAttr Tree;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A487A35CFADDF1C, 0x58)]
        public class ForceMinimumLodComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2F0817458645647, 0x30)]
        public class ForceMinimumLodComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCEA5EBDC26D7B94, 0x30)]
        public class ForceMinimumLodComponentResource : EntityComponentResource
        {
            int MinimumLodIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x665DBECFBF35D711, 0x60)]
        public class ForceSmartObjectAreaToHighLoDEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x275E06DCD2F26447, 0x48)]
        public class ForceSmartObjectAreaToHighLoDEventResource : TimedEventResource
        {
            UUIDRef<SmartObjectArea> SmartObjectArea;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E52D287531635AB, 0x38)]
        public class ForgetFactAction : MemoryFactActionBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA926AE648E0A4A61, 0x70)]
        public class Frustum
        {
            PlaneEq Plane0;
            PlaneEq Plane1;
            PlaneEq Plane2;
            PlaneEq Plane3;
            PlaneEq Plane4;
            PlaneEq Plane5;
            int PlaneCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x525CF4860A368A14, 0xA8)]
        public class FullBodyAnimationEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15216F5542D69403, 0x70)]
        public class FullBodyAnimationEventResource : FullBodyAnimationEventResourceBase
        {
            Ref<SkeletonAnimationResource> AnimationResource;
            Ref<CurveResource> BlendCurve;
            ERootBoneMode RootBoneMode;
            bool NoMorpheme;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x889CDA4F667DF51, 0x58)]
        public class FullBodyAnimationEventResourceBase : ScaleableTimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<CurveResource> TimeCurve;
            bool Loop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28AEBFB60C98A91F, 0x38)]
        public class GCoreGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2950759F9745945, 0x80)]
        public class GCoreSettings : ProjectSettings
        {
            Ref<FactDatabaseResource> FactDatabaseResource;
            Ref<DispensableEntityManagerSettings> DispensableEntityManagerSettings;
            Ref<PhysicsContactEffectSystemSettings> PhysicsContactEffectSystemSettings;
            Ref<AttachToWorldMatrixMoverResource> AttachToWorldMatrixMover;
            Ref<AttachToWorldMatrixMoverResource> AttachToWorldPositionMover;
            Ref<AttachToPartMoverResource> AttachToPartMover;
            Ref<AttachToHelperMoverResource> AttachToHelperMover;
            Ref<MounterMoverResource> MounterMover;
            Ref<SimplePathMoverResource> SimplePathMover;
            Ref<AttachPhysicsRagdollToHelperMoverResource> AttachPhysicsRagdollToHelperMover;
            Ref<AttachToHelperPositionMoverResource> AttachToHelperPositionMover;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x211FDC8FD3395464, 0x10)]
        public class GGUUID
        {
            uint8 Data0;
            uint8 Data1;
            uint8 Data2;
            uint8 Data3;
            uint8 Data4;
            uint8 Data5;
            uint8 Data6;
            uint8 Data7;
            uint8 Data8;
            uint8 Data9;
            uint8 Data10;
            uint8 Data11;
            uint8 Data12;
            uint8 Data13;
            uint8 Data14;
            uint8 Data15;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72751DB098EF99A1, 0x20)]
        public class GGUUID_GGUUID
        {
            GGUUID Key;
            GGUUID Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9204812C99E73E79, 0x28)]
        public class GGUUID_SceneEntityImpostorInfo
        {
            GGUUID Key;
            SceneEntityImpostorInfo Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3C9DC719450B961, 0x68)]
        public class GSequenceSettings : ProjectSettings
        {
            Ref<SequenceResourceBase> SubSequenceResource15Hz;
            Ref<SequenceResourceBase> SubSequenceResource30Hz;
            Ref<SequenceEntityResource> SequenceEntityResource15Hz;
            Ref<SequenceEntityResource> SequenceEntityResource30Hz;
            Ref<EntityResource> ModelActorEntityResource;
            Ref<AttachToSequenceLocatorMoverResource> AttachToSequenceLocatorMoverResource;
            Ref<DoFApertureSettings> DoFApertureSettings;
            Ref<FacialEmotionAnimationResource> FacialEmotionAnimationDefault;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x656D54EEADBE2E74, 0x38)]
        public class GStreamingSettings : ProjectSettings
        {
            Array<Ref<EntityActivationPolicy>> ActivationPolicies;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A3C7DB790214B9C, 0x90)]
        public class Game : CoreObject
        {
            Array<Ref<LevelGroup>> LevelGroups;
            StreamingRef<ObjectCollection> SystemAssets;
            StreamingRef<ObjectCollection> ApplicationAssets;
            Array<StreamingRef<ProjectSettings>> ProjectSettingsList;
            Array<Ref<VirtualRTTIResource>> VirtualRTTIDefinitions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56F25CE35265439A, 0x38)]
        public class GameEventAction : EntityAction
        {
            String GameEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1513E0E54460428, 0x78)]
        public class GameEventManagerResource : Resource
        {
            Array<InstigatorFlagStatMap> InstigatorFlagStatMaps;
            Array<VictimPropertyStatMap> VictimPropertyStatMaps;
            Array<DamageTypeToEntityStatMap> DamageTypeToEntityStatMaps;
            Ref<StatsClassResource> PlayerStatsClass;
            Ref<StatsClassResource> BaseCampGunStatsClass;
            float RecentlyKilledFriendliesRememberTime;
            Ref<InstigatorFlagResource> ZipLiningInstigatorFlag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96F8DE85203B82C7, 0x38)]
        public class GameGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x310A176D13DCF34F, 0x50)]
        public class GameInputJoystickResource : Resource
        {
            uint8 ButtonPressureForPress;
            Array<ButtonPressureOverride> ButtonPressureOverrides;
            int MaxHistoryCount;
            int RequiredHistoryCount;
            float HorizontalDistanceThreshold;
            float VerticalDistanceThreshold;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x549BAE0D8F988495, 0xD8)]
        public class GameLibSettings : ProjectSettings
        {
            Ref<DLCManagerGameResource> DLCManagerResource;
            Ref<BulletSystemResource> BulletSystemResource;
            Ref<RewardManagerResource> RewardManagerResource;
            Ref<PhotoModeResource> PhotoModeResource;
            Ref<FontResource> PreRenderedMovieSubtitleFont;
            float PreRenderedMovieSubtitleSize;
            Ref<InteractiveMoverResource> InteractiveMover;
            Ref<LocalizedTextResource> SequenceNetworkAlreadyBoundMessage;
            Ref<LocalizedTextResource> AutomaticSaveGameText;
            Ref<LocalizedTextResource> ManualSaveGameText;
            Ref<LocalizedTextResource> QuickSaveGameText;
            Ref<LocalizedTextResource> NewGamePlusSaveGameText;
            Ref<LocalizedTextResource> NewGamePlusStartPointSaveGameText;
            Ref<LocalizedTextResource> UserProfileText;
            Ref<LocalizedTextResource> SaveGameForNewerVersionText;
            Ref<LocalizedTextResource> SaveGameForMissingDLCText;
            Ref<BooleanFact> InCinematicFact;
            Ref<InGameMenuResource> InGameMenuResource;
            Ref<SoundMixStateResource> ManualSaveMixState;
            Array<Ref<EntitlementResource>> DLCEntitlements;
            Ref<FlowPuzzleSettings> FlowPuzzleSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA81AE12E1E23B127, 0x50)]
        public class GameModeAction : ConditionalAction
        {
            Array<EGameMode> GameModes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CFC62664867B046, 0xA80)]
        public class GameModule : Module
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6DF02CC6DD205981, 0x68)]
        public class GameMovie : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5DC9F1A184AF1D32, 0x28)]
        public class GameRoundSettings : CoreObject
        {
            String LevelID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4E64447FE66250F, 0xA0)]
        public class GameSchedule : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDC1E21F42169D2A, 0x28)]
        public class GameScheduleEntry : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF320A31FAFA88ECD, 0x38)]
        public class GameScheduleEntryResource : Resource
        {
            float StartTime;
            float StartTimeVariation;
            int StartDay;
            float ContinuousPlanWaitTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E0FB5BBBB64A605, 0x40)]
        public class GameScheduleResource : Resource
        {
            Array<Ref<GameScheduleEntryResource>> Entries;
            bool Continuous;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD734459B8E0B143, 0x198)]
        public class GameScript : CoreScript
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E58751A666F12C7, 0x160)]
        public class GameSettings : PlaylistData
        {
            int VersionNumber;
            String Name;
            String Description;
            String Creator;
            int64 CreatedTimestamp;
            bool LateJoinersAllowed;
            Array<Ref<GameRoundSettings>> RoundSettings;
            Array<MissionSettings> MissionSetting;
            bool EndGameWhenWinnerDecided;
            int SpawnLives;
            bool UseSpawnWaves;
            float DeathCamTime;
            int RespawnTimer;
            int GracePeriod;
            int InactivityKickTime;
            int TimeBetweenMissions;
            int BodycountQuota;
            int CaHCaptureTime;
            int CaCCaptureTimeInner;
            int CaCCaptureTimeMiddle;
            int CaCCaptureTimeOuter;
            int CaSCaptureTime;
            int ExplosivePlacing;
            int ExplosiveDefusing;
            int ExplosiveDetonationTime;
            bool FriendlyFireEnabled;
            ECloseCombatSettings CloseCombatSettings;
            bool ShowEnemiesOnRadar;
            bool ShowAmmoCounter;
            EAmmoSettings AmmoSettings;
            int MaxPlayerCount;
            int MaxPlayerSpectatorCount;
            int MaxAdminSpectatorCount;
            int MinClientCount;
            int ClansMinPlayerCount;
            int ClansForfeitTimer;
            EPlayerHealthSettings PlayerHealthSettings;
            EHealthRegenerationSettings HealthRegenerationSettings;
            int MaxBotCount;
            EFaction BotFaction;
            bool SplitScreenGame;
            EGameMode GameMode;
            bool BotzoneGame;
            bool PracticeGame;
            bool ClanGame;
            bool IsCustomGame;
            bool IsAdminCreatedGame;
            bool CampaignScoringEnabled;
            Array<ECareerSettings> CareerSettings;
            Array<String> DisabledUnlockResources;
            bool CombatHonorsEnabled;
            Array<String> TrackedLeaderboardStats;
            String PlaylistPassword;
            String SelectedChallengeRequirements;
            bool TeamVoiceChat;
            bool PartiesAllowed;
            int PreGameLobbyWaitTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F57C34CE7EEBAC4, 0x378)]
        public class GameSettingsResource : Resource
        {
            int VersionNumber;
            EDifficulty DefaultDifficulty;
            Array<EDifficulty> DifficultySelection;
            bool DefaultLateJoinersAllowed;
            Array<MissionSettings> MissionSettings;
            Array<int> MissionTimeLimitSelection;
            bool DefaultMustEndGameWhenWinnerDecided;
            float DefaultDeathCamTime;
            int DefaultSpawnLives;
            Array<int> DefaultSpawnLiveSelection;
            bool UseSpawnWaves;
            int DefaultRespawnTimer;
            int DefaultGracePeriod;
            int DefaultInactivityKickTime;
            Array<int> RespawnTimerSelection;
            int DefaultTimeBetweenMissions;
            bool DefaultRankGroupEnabled;
            int DefaultRankGroup;
            Array<int> SearchAndDestroyChargesSelection;
            Array<int> CaptureAndHoldWinPointsSelection;
            Array<int> CaptureAndSecureWinPointsSelection;
            Array<int> SearchAndSafeguardPointsSelection;
            Array<int> SearchAndRetrieveObjectReturnCountSelection;
            Array<int> InfiltrateAndRetrieveObjectReturnCountSelection;
            Array<int> BodycountSelection;
            int DefaultBodycountQuota;
            int DefaultCaHCaptureTime;
            Array<int> CaHCaptureTimeSelection;
            int DefaultCaCCaptureTimeInner;
            int DefaultCaCCaptureTimeMiddle;
            int DefaultCaCCaptureTimeOuter;
            int DefaultCaSCaptureTime;
            int DefaultExplosivePlacing;
            Array<int> ExplosivePlacingSelection;
            int DefaultExplosiveDefusing;
            Array<int> ExplosiveDefusingSelection;
            int DefaultExplosiveDetonationTime;
            Array<int> ExplosiveDetonationTimeSelection;
            int DefaultPreGameLobbyWaitTime;
            Array<int> PreGameLobbyWaitTimeSelection;
            int DefaultPostGameLobbyWaitTime;
            int SentryTurretAmount;
            int SentryTurretLifeTime;
            int SentryTurretDisabledTime;
            int BoostDisabledTime;
            int CaptureSpawnPointType1Speed;
            int CaptureSpawnPointType2Speed;
            int ReviveDisabledTime;
            int ReviveDamageDisabledTime;
            int HealthPackDisabledTime;
            bool DefaultFriendlyFireEnabled;
            bool ShowEnemiesOnRadar;
            bool ShowAmmoCounter;
            EAmmoSettings AmmoSettings;
            Array<int> WarzoneMaxPlayerCountSelection;
            Array<int> OperationsMaxPlayerCountSelection;
            int DefaultMaxPlayerSpectatorCount;
            int DefaultMaxAdminSpectatorCount;
            int DefaultMinClientCount;
            int DefaultClansMinPlayerCount;
            int DefaultOperationsMaxPlayerCount;
            int DefaultSkirmishMaxPlayerCount;
            int DefaultWarzoneMaxPlayerCount;
            int DefaultClansForfeitTimer;
            EPlayerHealthSettings DefaultPlayerHealthSettings;
            EHealthRegenerationSettings DefaultHealthRegenerationSettings;
            int DefaultMaxBotCount;
            Array<int> MaxBotCountSelection;
            EDifficulty DefaultBotDifficulty;
            Array<EDifficulty> BotDifficultySelection;
            bool DefaultSplitScreenGame;
            bool DefaultBotzoneGame;
            bool DefaultPracticeGame;
            EGameMode DefaultGameMode;
            bool DefaultIsCustomGame;
            bool DefaultIsAdminCreatedGame;
            bool DefaultCampaignScoringEnabled;
            float PlayerAssistTimeOut;
            float TimeEnemiesVisibleAfterFiring;
            int TimeOut;
            ECloseCombatSettings CloseCombatSettings;
            float EarlyDeathDetectionDuration;
            int EarlyDeathPreventionDeathCount;
            int MaxCoopPlayerCount;
            Array<ECareer> DisabledCareers;
            Array<String> DefaultDisabledUnlockResources;
            bool DefaultCombatHonorsEnabled;
            float NewObjectiveIconBlinkDuration;
            String FeaturedPlaylistTag;
            String GGPlaylistTag;
            String ClanTag;
            String NewbieTag;
            String LastPlayedTag;
            String RecentlyPlayedTag;
            String PopularTag;
            int MaxPlaylistLeaderboardStats;
            Array<EPlayerScoreStat> SelectableLeaderboardStats;
            Array<String> DefaultChallengeRequirements;
            Array<ColorScheme> ColorSchemes;
            RGBAColor NeutralColor;
            bool DefaultPartiesAllowed;
            int FactionSwitchingMinPlayerDifference;
            bool AllowSaveGames;
            String SpawnMarker;
            String BenchmarkSpawnMarkerName;
            Array<Ref<FactValue>> InitialFacts;
            Ref<NewGamePlusSettingsResourceGame> NewGamePlusSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD58AE1B21EDC043, 0xC0)]
        public class GameState : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x93C7D673C0BD7D5D, 0x48)]
        public class GameStatisticsCategory : Resource
        {
            Ref<LocalizedTextResource> CategoryName;
            Array<Ref<GameStatisticsWeightedEntry>> Entries;
            EGameStatisticShowState ShowState;
            bool DisplayedAsTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFE2E186168A91D8, 0x28)]
        public class GameStatisticsEntryBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D5C5B07E4CE8E34, 0x30)]
        public class GameStatisticsEntryBooleanFact : GameStatisticsEntryBase
        {
            Ref<BooleanFact> BooleanFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C4ACEDD57B7F78E, 0x38)]
        public class GameStatisticsEntryCollectableContainer : GameStatisticsEntryBase
        {
            UUIDRef<CollectableTypeContainer> CollectableTypeContainer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBCFCA48FB3E84C6, 0x28)]
        public class GameStatisticsEntryDiscoverableAreas : GameStatisticsEntryBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53D2F23E96C0B41, 0x40)]
        public class GameStatisticsEntryEnumFact : GameStatisticsEntryBase
        {
            Ref<EnumFact> EnumFact;
            Ref<EnumFactValue> EnumFactValue;
            bool AllowGreaterValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF78DD4DE99807E98, 0x30)]
        public class GameStatisticsEntryIntegerFact : GameStatisticsEntryBase
        {
            Ref<IntegerFact> IntegerFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9362D903F7D4D6F0, 0x38)]
        public class GameStatisticsEntryIntegerFactValue : GameStatisticsEntryBase
        {
            Ref<IntegerFact> IntegerFact;
            int Value;
            bool IncludeBiggerValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7915206A56A7192D, 0x38)]
        public class GameStatisticsEntryItem : GameStatisticsEntryBase
        {
            UUIDRef<EntityResource> Item;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73EAA802EDDE2C60, 0x38)]
        public class GameStatisticsEntryOneOfItems : GameStatisticsEntryBase
        {
            Array<UUIDRef<EntityResource>> Items;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CC69BF88B8CFEA3, 0x30)]
        public class GameStatisticsEntryQuestCategory : GameStatisticsEntryBase
        {
            Ref<QuestCategory> QuestCategory;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A659CE0F9432DBD, 0x28)]
        public class GameStatisticsEntryTimePlayed : GameStatisticsEntryBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CD9AF983C5B087D, 0x40)]
        public class GameStatisticsGroup : Resource
        {
            Ref<LocalizedTextResource> GroupName;
            Array<Ref<GameStatisticsCategory>> Categories;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6826CF76216B6DEF, 0x40)]
        public class GameStatisticsGroupContainer : Resource
        {
            Ref<EntitlementResource> Entitlement;
            Array<Ref<GameStatisticsGroup>> Groups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC69C16310765B1A, 0x40)]
        public class GameStatisticsWeightedEntry : Resource
        {
            Array<Ref<GameStatisticsEntryBase>> Entries;
            float TotalEntryWeight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3D9531329483844, 0x68)]
        public class GameStatsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AA9A759B13A756E, 0x40)]
        public class GameStatsComponentResource : EntityComponentResource
        {
            float MultiKillDuration;
            Array<GameStatsLootItemRarityToFactMapping> LootItemRartiyToCounterFacts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D84D246662B56D4, 0x120)]
        public class GameStatsDamageEntry : GameStatsEntryBase
        {
            Array<Ref<TagProperty>> PlayerProperties;
            Array<Ref<BooleanFact>> PlayerFacts;
            Array<Ref<StatsClassResource>> DamagerStatsClass;
            Array<Ref<DamageTypeResource>> DamageTypes;
            Array<Ref<DamageTypeResource>> ExcludeDamageTypes;
            HashSet<GGUUID> WeaponUUIDs;
            HashSet<GGUUID> WeaponModeUUIDs;
            Array<EDamageFlagsGameExported> DamageFlags;
            Array<Ref<TagProperty>> VictimEntityProperties;
            Array<Ref<BooleanFact>> VictimFacts;
            Array<Ref<TagProperty>> VictimDestructibilityTags;
            Array<Ref<TagProperty>> VictimTransitionDestructibilityTags;
            Array<UUIDRef<HitReactionResource>> VictimHitReactions;
            bool TriggerOnPinDown;
            bool TriggerOnEntityStuckTo;
            int TriggerOnKillCount;
            bool TriggerOncePerAttack;
            String ExposedActionTrigger;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40B96B090474FA60, 0x38)]
        public class GameStatsEntryBase : Resource
        {
            Ref<BooleanFact> IsTrackedFact;
            Ref<IntegerFact> CounterFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE367B7C06592732, 0x10)]
        public class GameStatsLootItemRarityToFactMapping
        {
            Ref<IntegerFact> CounterFact;
            ELootItemRarity ItemRarity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19D89C8897AF24CA, 0x58)]
        public class GameStatsTrackingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C93B424CACD581A, 0x98)]
        public class GameStatsTrackingComponentResource : EntityComponentResource
        {
            Array<Ref<GameStatsDamageEntry>> KillStats;
            Array<Ref<GameStatsDamageEntry>> DamageStats;
            Array<Ref<GameStatsDamageEntry>> HitReactionStats;
            Array<Ref<GameStatsDamageEntry>> TransitionStats;
            Array<Ref<GameStatsDamageEntry>> PinDownStats;
            Array<Ref<GameStatsDamageEntry>> EntityStuckToStats;
            Array<Ref<GameStatsDamageEntry>> ExposedActionStats;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB55E502C67F0F189, 0x350)]
        public class GameView : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27F7C81A60506B7D, 0xEC0)]
        public class GameViewGame : GameView
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3D7E5CA0EE686D2, 0x138)]
        public class GameViewResource : Resource
        {
            Ref<HUDResource> DefaultHUDResource;
            RGBAColor TargetDefaultColor;
            RGBAColor TargetFriendlyColor;
            RGBAColor TargetEnemyColor;
            RGBAColor TargetUnreachableColor;
            Ref<ScreenEffectResource> HealthScreenEffectResource;
            Ref<CurveResource> HealthScreenEffectVisibilityCurve;
            float HealthScreenEffectFadeOutDuration;
            float HealthScreenEffectFadeOutDelay;
            float HealthLowRumblePct;
            Ref<RumbleResource> HealthLowRumbleResource;
            Ref<ScreenEffectResource> MissionFailedScreenEffectResource;
            Ref<AnimatedScreenEffectResource> FadeOutScreenEffectResource;
            Ref<AnimatedScreenEffectResource> FadeInScreenEffectResourceWhite;
            Ref<AnimatedScreenEffectResource> FadeInScreenEffectResourceBlack;
            Ref<AnimatedScreenEffectResource> LoadingToGameFadeEffectResource;
            Ref<AnimatedScreenEffectResource> MenuToGameScreenEffectResource;
            Ref<AnimatedScreenEffectResource> SequenceFadeScreenEffectResource;
            Ref<CurveResource> HealthLowPassSoundAmountCurve;
            Ref<CurveResource> HealthDistortionDriveCurve;
            Ref<CurveResource> HealthDistortionGainCurve;
            float HealthLowPassFactorSpeed;
            float HealthDistortionDriveFactorSpeed;
            float HealthDistortionGainFactorSpeed;
            float MissionFailedLowPassSoundAmount;
            float MissionFailedLowPassFactorSpeed;
            float MissionFailedDistortionDrive;
            float MissionFailedDistortionDriveFactorSpeed;
            float MissionFailedDistortionGain;
            float MissionFailedDistortionGainFactorSpeed;
            float RadioMessageRandomDelaySize;
            Ref<SoundResource> ProximityRadioMessageStartSound;
            Ref<SoundResource> ProximityRadioMessageBackgroundSound;
            Ref<SoundResource> ProximityRadioMessageStopSound;
            Ref<SoundMixStateResource> ProximityRadioMessageSoundMixState;
            Ref<SoundResource> PathPlanningSound;
            RGBAColor MapCaptureAndHoldColorNeutral;
            RGBAColor MapCaptureAndHoldColorFriendly;
            RGBAColor MapCaptureAndHoldColorEnemy;
            float HorizontalReferenceFOV;
            Ref<CurveResource> StereoModifierDistanceCurve;
            Ref<CurveResource> RayLengthCurve;
            float AngleX;
            float AngleZ;
            int RaycastsHorizontal;
            int RaycastsVertical;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E95ED7DDD0C513, 0x58)]
        public class GearMovementSoundComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1247D2C1F9DBC09, 0x68)]
        public class GearMovementSoundComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE0D7C5189A1825C, 0x38)]
        public class GearMovementSoundComponentResource : EntityComponentResource
        {
            Ref<SoundResource> GearMovementSound;
            String GearMovementSoundHelperName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE6A681538FF72D6, 0x40)]
        public class GenerateLootAction : EntityAction
        {
            Array<Ref<LootSlot>> LootSlots;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7520F5D9A86D15E3, 0x110)]
        public class GeneratedQuestSave : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA34221D70353BA4, 0xA0)]
        public class GenericInstance : ParentWorldNode
        {
            RTTIRefObjectSet base_RTTIRefObjectSet;
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8672C6DC27BCD824, 0xC0)]
        public class GeometryObject : WorldNode
        {
            DrawableObjectInstance base_DrawableObjectInstance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4EFBC295B3A0C1A6, 0x28)]
        public class Gesture
        {
            String Name;
            int GestureType;
            FRange HeadingRange;
            EGestureBodyParts BodyParts;
            GestureUsageMask UsageMask;
            bool RequiredForSignal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCAA4A55BF25E4B4, 0x38)]
        public class GestureCollectionResource : Resource
        {
            Array<Gesture> Gestures;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7D257645421AE52, 0xB0)]
        public class GestureComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB598E2629C748C18, 0x30)]
        public class GestureComponentResource : EntityComponentResource
        {
            Ref<GestureCollectionResource> Gestures;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B82C49A2E69E1F6, 0x70)]
        public class GestureEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16F0D9064893825F, 0x50)]
        public class GestureEventResource : TimedEventResource
        {
            String GestureName;
            Ref<EntityActorResource> ControlledEntityActorResource;
            Ref<LocatorResource> LocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66747C202885E54, 0x4)]
        public class GestureUsageMask
        {
            int32 _GestureUsageMask;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33E2A7F9128E11E2, 0x48)]
        public class GiveAmmoAction : EntityAction
        {
            Ref<InventoryWeaponResource> WeaponResource;
            Ref<EntityProjectileAmmoResource> AmmoResource;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C26F03EDFF51BEE, 0xA8)]
        public class GliderControllerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6F237F3A7E9F655, 0x58)]
        public class GliderControllerComponentResource : EntityComponentResource
        {
            float HeadingSpeed;
            float PitchSpeed;
            float RollSpeed;
            float HorizontalRestoreSpeed;
            float StallNoseDownSpeed;
            bool InvertYAxis;
            Ref<CameraEntityResource> Camera;
            float CameraActivationDuration;
            float CameraDeactivationDuration;
            bool AllowPreviousEntityControl;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D066C66F37A15B8, 0xB0)]
        public class GliderMover : PhysicsMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E309E60A1A1ECB5, 0x90)]
        public class GliderMoverResource : PhysicsMoverResource
        {
            float LiftFactor;
            Vec3 DragFactor;
            float MaxSpeed;
            float Gravity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1128DFAA3CFA4B0, 0x88)]
        public class GlobalDamageModifier : CoreObject
        {
            String Name;
            Array<PlayerDamageModifierForDamageType> SpecificPlayerDamageDealtSettings;
            PlayerDamageModifier PlayerDamageDealtSettings;
            PlayerDamageModifier PlayerDamageTakenSettings;
            Array<AttackerToVictimDamageModifier> FactionSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB1E881E3642E927, 0x10)]
        public class GlobalRenderVariableInfo
        {
            String Name;
            float DefaultValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83AADF670FAE7536, 0x120)]
        public class GlobalRenderVariableInfoSet : CoreObject
        {
            //GlobalRenderVariableInfo_GLOBAL_RENDER_VAR_COUNT<GlobalRenderVariableInfo> Variables;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x317FB0D3952A647E, 0x40)]
        public class GlobalRenderVariableValues
        {
            //float_GLOBAL_RENDER_VAR_COUNT<float> Values;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3791E11136078110, 0x20)]
        public class GlyphContour
        {
            Array<GlyphContourCmd> CommandList;
            Array<Vec2Pack> Points;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7A8F545B73783111, 0x1)]
        public class GlyphContourCmd
        {
            uint8 CmdData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC61E3BC02AB02FE3, 0x30)]
        public class GlyphContourList
        {
            BoundingBox2 Bounds;
            Array<GlyphContour> GlyphContours;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x218556E0E9C20AB2, 0x60)]
        public class GrabableObjectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD73BDB9C99DBF77, 0x40)]
        public class GrabableObjectComponentResource : EntityComponentResource
        {
            String GrabHelperName;
            int GrabObjectAnimationVariable;
            Ptr<EntityAction> ThrowAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8298F67758EC033, 0x70)]
        public class Gradient : Resource
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            int StartColorPegID;
            [RTTI.BrokenReflectionOffset(0x0)]
            int EndColorPegID;
            [RTTI.BrokenReflectionOffset(0x0)]
            int StartAlphaPegID;
            [RTTI.BrokenReflectionOffset(0x0)]
            int EndAlphaPegID;
            Array<ColorPeg> ColorPegs;
            Array<AlphaPeg> AlphaPegs;
            int NumberOfSamples;
            uint16 NextPegId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CB657FF65834E3, 0x38)]
        public class GrainSettingsResource : Resource
        {
            float Size;
            Ref<TextureLUT> IntensityLUT;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32352B2A3C55B24C, 0x58)]
        public class GraphConditionAction : ConditionalAction
        {
            Ref<GraphProgramResource> Condition;
            Ref<OverrideGraphProgramResource> OverrideCondition;
            bool AllowMultiThreadedExecution;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BCFE2A5DC4FA5A7, 0x60)]
        public class GraphConditionInstance : ConditionInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5283947471E4C9E, 0x40)]
        public class GraphConditionResource : ConditionResource
        {
            Ref<GraphProgramResource> GraphProgramResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA732382298EDF87, 0xD0)]
        public class GraphProgramInstance : ProgramInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C32BA3FF974EB98, 0xB8)]
        public class GraphProgramResource : ProgramResource
        {
            Array<ProgramParameter> StateParameters;
            Array<Ref<StateObjectResource>> StateResources;
            Ref<NodeConstantsResource> ExposedDataResource;
            Array<EventFunctionMapping> EventFunctionIndexMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x532C86021F40DEF4, 0x40)]
        public class GraphProgramStreamingStrategyInstance : StreamingStrategyInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x128E0047198766FE, 0x68)]
        public class GraphProgramStreamingStrategyResource : StreamingStrategyResource
        {
            Array<Ref<StreamingProgramResource>> StreamingPrograms;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62D78F032F897A8, 0x38)]
        public class GraphPropertyGameGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97E3F649EF66C446, 0x38)]
        public class GraphPropertyGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x991CF4C03BE48D87, 0x10)]
        public class GraphSoundEvent
        {
            String Name;
            float Time;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DC039FD4B2482EB, 0x38)]
        public class GraphSoundGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x81658D0FD9903226, 0x320)]
        public class GraphSoundInstance : SoundInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAF9BDA916835480, 0x2C0)]
        public class GraphSoundResource : SoundResource
        {
            uint8 VoiceLimit;
            Ref<GraphProgramResource> GraphProgram;
            Array<GraphSoundEvent> Events;
            EGraphSoundUpdateRate UpdateRate;
            bool SaveVoiceStateOnSuspend;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A2252FC00AD5DDD, 0xF0)]
        public class GraphTag : TextureTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD66880CC9D45D757, 0x2A0)]
        public class GraphWidget : TextureWidget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37F0977B501460E7, 0x38)]
        public class GraphicsGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BF1ACC54DA4B706, 0x440)]
        public class GrapplingHook : Throwable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C17C2981464097C, 0x130)]
        public class GrapplingHookComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86BC57321DEA9BAA, 0x98)]
        public class GrapplingHookComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C2C834495057BFE, 0x90)]
        public class GrapplingHookComponentResource : EntityComponentResource
        {
            float MaxDistance;
            float ReelVelocity;
            float ReelEmptyVelocity;
            float ReelForce;
            float GrappleDamage;
            Ref<DamageTypeResource> GrappleDamageTypeResource;
            String EjectLocationHelper;
            float GrappledHumanoidRotationSpeed;
            float GrappledHumanoidAimHeadingAngle;
            Vec3 MovementModifier;
            float RopeWidth;
            float RopeTextureRepeat;
            RGBAColor RopeColor;
            Ref<RenderEffectResource> RopeRenderEffectResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA72E8080772BB05C, 0x520)]
        public class GrapplingHookEjector : GrenadeEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1ED435675B95A97, 0x2C0)]
        public class GrapplingHookEjectorResource : GrenadeEjectorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x92811B50EFFD1E16, 0x300)]
        public class GrapplingHookRep : ThrowableRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88BC4D7D4160CFA3, 0x280)]
        public class GrapplingHookResource : ThrowableResource
        {
            float MaxDistance;
            float ReelVelocity;
            float ReelEmptyVelocity;
            float ReelForce;
            float GrappleDamage;
            Ref<DamageTypeResource> GrappleDamageTypeResource;
            String EjectLocationHelper;
            float GrappledHumanoidRotationSpeed;
            float GrappledHumanoidAimHeadingAngle;
            Vec3 MovementModifier;
            bool ForceReelingGrappler;
            float ElectricityBuildUpSpeed;
            Ref<LightResource> ElectricityLightResource;
            float ElectricityLightJitterInterval;
            FRange ElectricityLightJitterIntensity;
            Ref<ElectricityBeamResource> ElectricityBeamResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40CB38089B2806DB, 0x58)]
        public class GrapplingHookTargetComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9ED6B8F372A85AF, 0x30)]
        public class GrapplingHookTargetComponentResource : EntityComponentResource
        {
            EEntityReelType ReelType;
            bool AutoUse;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6742F36D6233B45, 0x280)]
        public class Grass : GeometryObject
        {
            FRange HeightRange;
            ETextureChannel GrassMaskChannel;
            float MaskTreshold;
            Ref<GrassResource> Resource;
            uint32 NumVisibleLod;
            FRange MappedHeightRange;
            IVec2 Dimensions;
            BoundingBox3 DrawBounds;
            Array<GrassNode> Nodes;
            Array<GrassDrawInstance> DrawInstances;
            Array<uint8> GrassHeight;
            ISize GrassMaskSize;
            Array<GrassTextureOverride> TextureOverrides;
            MeshHierachyShaderOverrides MeshShaderOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A58F25E0976FECA, 0x8)]
        public class GrassDrawInstance
        {
            Compressed16Vector3 Offset;
            uint16 ObjectIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x223E0772BAFA71B9, 0x68)]
        public class GrassManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE689E5EDFFC46D33, 0x10)]
        public class GrassNode
        {
            uint64 NodeData;
            int GrassPropertyOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x148A7C6E0FB25189, 0x10)]
        public class GrassPatch
        {
            Ref<MeshResourceBase> Mesh;
            float MaxDistance;
            int MaxInstance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28B0014290DEB443, 0xC0)]
        public class GrassResource : Resource
        {
            GrassPatch Patch2x2;
            GrassPatch Patch4x4;
            GrassPatch Patch8x8;
            GrassPatch Patch16x16;
            GrassPatch Patch32x32;
            GrassPatch Patch64x64;
            GrassPatch Patch128x128;
            GrassPatch Patch256x256;
            GrassPatch Patch512x512;
            bool ApplyPatchRotation;
            bool ProvidesCoverData;
            float MaxGrassCoverHeight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68995F9DEB870C18, 0x30)]
        public class GrassTextureOverride
        {
            String Sampler;
            Ref<Texture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EB62174D857517E, 0x2D0)]
        public class GravityPocket : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40DA86B34D26AAEB, 0x138)]
        public class GravityPocketResource : EntityResource
        {
            Ref<PhysicsGravityPocketResource> PhysicsGravityPocketResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6EDA0446DD37B93B, 0x3C0)]
        public class Grenade : Throwable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F340F6694686E3F, 0x520)]
        public class GrenadeEjector : DiscreteAmmoEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4781051EFC3E52C0, 0x2C0)]
        public class GrenadeEjectorResource : DiscreteAmmoEjectorResource
        {
            float InitialOffsetAngle;
            Vec3 InitialOrientation;
            Vec3 RandomInitialOrientation;
            bool UseEjectorDirection;
            float RandomImpactSphereRadius;
            bool IgnoreOwnerVelocity;
            bool FiredStraightUp;
            Ref<CurveResource> PitchMappingCurve;
            float MinRadius;
            EAIAttackType AttackType;
            float TrajectoryAssistMaxAdjustmentAngle;
            Ref<CurveResource> TrajectoryAssistRadiusOverDistance;
            Ref<ChargedValueFloat> TrajectoryAssistRadiusMultiplier;
            Ref<TagProperty> TrajectoryAssistHighValuePartTag;
            Ref<TagProperty> TrajectoryAssistIgnoreFactionPartTag;
            float TrajectoryAssistHighValueRadiusModifier;
            Ref<GraphProgramResource> TrajectoryAssistRadiusMultiplierGraph;
            float TrajectoryAssistRadiusMultiplierForHumanoids;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6021BBDC44F74D90, 0x290)]
        public class GrenadeRep : ThrowableRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48E5B03DAFCF332B, 0x230)]
        public class GrenadeResource : ThrowableResource
        {
            float DetonateTime;
            float DetonateTimeVariation;
            Ref<SoundResource> DetonateTimeSoundResource;
            bool ExplodeOnControlledEntityContact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x978E9B224B6AE3A7, 0xE0)]
        public class GrenadeTriggerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF99A5DB6782E2E4F, 0x38)]
        public class GrenadeTriggerComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4370FBBF01D377BE, 0x40)]
        public class GrenadeTriggerComponentResource : EntityComponentResource
        {
            float DetonateTime;
            float DetonateTimeVariation;
            Ref<SoundResource> DetonateTimeSoundResource;
            bool ExplodeOnControlledEntityContact;
            ETimerStartType TimerStartType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB93D07251648B94E, 0xD0)]
        public class GridPanelCellTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE35E9131A90A13EB, 0x140)]
        public class GridPanelCellWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9104B007633580B0, 0xD8)]
        public class GridPanelTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x369A970E14461387, 0x170)]
        public class GridPanelWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x50EA917DD67488DE, 0x80)]
        public class GriefManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8CE5AAAB935FE9E8, 0x18)]
        public class GriefReason : RTTIObject
        {
            int reasonId;
            String reasonText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94CFD79BE483B7E, 0x40)]
        public class GriefReasons : RTTIRefObject
        {
            Array<GriefReason> behaviorReasons;
            Array<GriefReason> contentReasons;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4315073073F0A0E, 0x60)]
        public class GriefReportItem : RTTIRefObject
        {
            int reason;
            String consoleId;
            String contentId;
            String reportLanguageCode;
            int64 creationDate;
            String owner;
            String description;
            String extraInfo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC891D782F7A2C44D, 0x1A0)]
        public class GroundProjectileMover : ThrowableMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x225A821F8A50D9F3, 0x110)]
        public class GroundProjectileMoverResource : ThrowableMoverResource
        {
            Ref<CurveResource> DistanceOverTime;
            float GroundCheckRange;
            EPhysicsCollisionLayerGame GroundCheckLayer;
            float HeightOffGround;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40072979FEE279AE, 0xE0)]
        public class GroundToAirTransitionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66C05A1306C1F900, 0xA8)]
        public class GroundToAirTransitionComponentResource : EntityComponentResource
        {
            Ref<MoverResource> GroundMoverResource;
            Ref<AirMoverComponentResource> AirMoverResource;
            Array<Ref<EntityComponentSetResource>> LandingConfigurations;
            Array<Ref<EntityComponentSetResource>> TakeOffConfigurations;
            String InAirAnimationAction;
            String TakeOffAnimationAction;
            String LandingAnimationAction;
            String LandingPositionAnimVarName;
            String LandingAngleAnimVarName;
            String LandingOrientationAnimVarName;
            String AnimTagOnGround;
            String AnimTagInAir;
            int AirSpawnStateID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2046768F847F1A3, 0x14)]
        public class GroupImportanceEntry
        {
            UUIDRef<AIGroupResource> AIGroupResource;
            int Importance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x565C2389C42F5ACA, 0x38)]
        public class GroupRolesDebugResource : Resource
        {
            Ref<AIGroupRoleDescriptorResource> RoleDescriptors;
            RGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x347AC87ECD0A595B, 0x40)]
        public class GroupSubmixRoutingResource : Resource
        {
            Array<ESoundMasterVolumeGroup> Groups;
            Ref<SubmixResource> Destination;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x498C8AC6CB92DFD2, 0x78)]
        public class GuaranteedHitProjectileComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D37B884D513E166, 0x28)]
        public class GuaranteedHitProjectileComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x374C4E3384A8393D, 0x4B0)]
        public class HUD : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65638D468FE011A1, 0xA8)]
        public class HUDAIStateLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA467512FE4A670E, 0x78)]
        public class HUDAIStateLogicResource : HUDLogicResource
        {
            Ref<HUDImageResource> HidingImage;
            Ref<HUDImageResource> VisibleImage;
            Array<HUDLoudnessMapping> HUDLoudnessMappings;
            Ref<BoolPropertyBase> StealthProperty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB54A87C64A8FAA7F, 0xE0)]
        public class HUDActionPromptLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27C568FEFD09C50C, 0xA0)]
        public class HUDActionPromptLogicResource : HUDLogicResource
        {
            Ref<HUDImageResource> BackgroundElement;
            Ref<HUDImageResource> ButtonElement;
            Ref<HUDShaderResource> HoldIndicatorElement;
            Ref<HUDTextResource> ButtonPromptElement;
            String HoldProgressShaderVariableName;
            FRGBAColor FailedPromptColor;
            float FailedPromptIconOpacity;
            Ref<SoundResource> HoldIndicationSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF21D8595D8A48CB3, 0x78)]
        public class HUDAudiologPlayerLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE420640C8F7AFC2, 0x50)]
        public class HUDAudiologPlayerLogicResource : HUDLogicResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83B2C2AFA29AD022, 0xB0)]
        public class HUDBarLogic : HUDBarLogicBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCEE2DFBC8354072B, 0xA0)]
        public class HUDBarLogicBase : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2953B0C4F90B479, 0x130)]
        public class HUDBarLogicBaseResource : HUDLogicResource
        {
            Ref<HUDImageResource> FrontBarImage;
            Ref<HUDImageResource> BackBarImage;
            EScaleBehaviour FrontScaleBehaviour;
            float FrontScaleTime;
            float FrontScaleDelayTime;
            EScaleBehaviour BackScaleBehaviour;
            float BackScaleTime;
            float BackScaleDelayTime;
            bool OnIncrease;
            float OnIncreaseTime;
            FRGBAColor OnIncreaseColor;
            bool OnDecrease;
            float OnDecreaseTime;
            FRGBAColor OnDecreaseColor;
            float BelowPercentage;
            float BelowPercentageTime;
            FRGBAColor BelowPercentageColor;
            float AbovePercentage;
            float AbovePercentageTime;
            FRGBAColor AbovePercentageColor;
            Ref<CurveResource> OnIncreaseCurve;
            Ref<CurveResource> OnDecreaseCurve;
            Ref<CurveResource> BelowPercentageCurve;
            Ref<CurveResource> AbovePercentageCurve;
            Ref<CurveResource> BackScaleCurve;
            Ref<CurveResource> FrontScaleCurve;
            bool HideWhenFull;
            bool HideWhenEmpty;
            float DynamicVisibilityThreshold;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54140D370AE90BF1, 0x140)]
        public class HUDBarLogicResource : HUDBarLogicBaseResource
        {
            Ref<GraphProgramResource> GraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A9188C50CBCCB0, 0x70)]
        public class HUDBreadcrumbHelper : HUDHelper
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5C9460E07985AF1, 0x90)]
        public class HUDBulletTimeIndicatorLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x917E9D02821A7832, 0x70)]
        public class HUDBulletTimeIndicatorLogicResource : HUDLogicResource
        {
            Ref<HUDImageResource> BackgroundBarImage;
            Ref<HUDImageResource> ForegroundBarImage;
            Ref<CurveResource> FailedFlashCurve;
            float ChargingOpacity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14201C00E26DBEE4, 0x170)]
        public class HUDCompassMarkerLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1E5DCA2F792B93E, 0xD0)]
        public class HUDCompassMarkerLogicResource : HUDLogicResource
        {
            float CompassWidth;
            float HeightDifferenceThreshold;
            IVec2 StickOffset;
            Ref<HUDImageResource> TemplateElement;
            Ref<HUDTextResource> TextElement;
            Array<Ref<HUDTextResource>> Cardinals;
            Ref<CurveResource> CardinalFadeCurve;
            Array<Ref<HUDElementResource>> NearbyColoredElements;
            Ref<HUDLogicTimelineResource> NearbyIndicatorAppearTimeline;
            Ref<HUDLogicTimelineResource> NearbyIndicatorDisappearTimeline;
            Array<Ref<HUDElementResource>> LeavingAreaBlinkingElements;
            Ref<CurveResource> LeavingAreaBlinkingCurve;
            Ref<CurveResource> ColorChangeCurve;
            Ref<CurveResource> NewMarkerBlinkCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A7C069E7A3D5659, 0x88)]
        public class HUDCountdownTimerLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x846E0A48ADD1E3E8, 0x60)]
        public class HUDCountdownTimerLogicResource : HUDLogicResource
        {
            float EllpiseRadiusX;
            float EllpiseRadiusY;
            Ref<HUDTimerSettings> Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF40AD19BBDDEE95D, 0x58)]
        public class HUDCrosshairBulletIndicatorSettings : Resource
        {
            ECrosshairBulletIndicatorType BulletIndicatorType;
            Array<Ref<HUDImageResource>> BulletAvailableHUDImages;
            Array<Ref<HUDImageResource>> BulletUnavailableHUDImages;
            Ref<CurveResource> BulletEjectedScaleCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0E402D3DB254A19, 0x58)]
        public class HUDCrosshairChargeLevelIndicatorSettings : Resource
        {
            Array<Ref<HUDImageResource>> ChargeAvailableHUDImages;
            Array<Ref<HUDImageResource>> ChargeUnavailableHUDImages;
            Ref<CurveResource> ChargeAvailableScaleCurve;
            Ref<CurveResource> RetainingChargeScaleCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47DF8CF0AD14D2FE, 0x100)]
        public class HUDCrosshairLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0FBF965D454D93A, 0x88)]
        public class HUDCrosshairLogicResource : HUDLogicResource
        {
            Ref<HUDCrosshairSettings> DefaultCrosshairSettings;
            Ref<CrosshairColor> FriendlyColor;
            Ref<CrosshairColor> EnemyColor;
            Ref<CrosshairColor> NeutralColor;
            float MaxSpreadSpeed;
            float MaxDistanceExpandSpeed;
            float MaxTargetIdentificationDistance;
            Ref<HUDElementResource> RootElement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA3EA1201F9BD55B, 0x60)]
        public class HUDCrosshairPart : Resource
        {
            Ref<HUDElementResource> HUDElement;
            Array<Ref<HUDCrosshairPartTimelineAnimationSettings>> TimelineAnimations;
            Ref<HUDCrosshairPartSpreadAnimationSettings> SpreadAnimationSettings;
            Ref<HUDCrosshairPartChargeAnimationSettings> ChargeAnimationSettings;
            IVec2 Offset;
            bool FactionColorChange;
            ECrosshairPartAnimationTrigger DefaultAnimationTrigger;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDF2F93F281CDB01, 0x50)]
        public class HUDCrosshairPartChargeAnimationSettings : Resource
        {
            float Factor;
            float Orientation;
            Ref<CurveResource> BlendCurve;
            Ref<CurveResource> ScaleCurve;
            Ref<CurveResource> AmmoChargeBlendCurve;
            Ref<CurveResource> AmmoChargeScaleCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3736B4C39D25767A, 0x40)]
        public class HUDCrosshairPartSpreadAnimationSettings : Resource
        {
            float Factor;
            float Orientation;
            Ref<CurveResource> BlendCurve;
            Ref<CurveResource> ScaleCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE32C02F54FBF300, 0x38)]
        public class HUDCrosshairPartTimelineAnimationSettings : Resource
        {
            ECrosshairPartAnimationTrigger AnimationTrigger;
            bool DoesLoop;
            Ref<HUDLogicTimelineResource> AnimationTimeLine;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5838B510D6ECCAE3, 0x60)]
        public class HUDCrosshairSettings : Resource
        {
            Array<Ref<HUDCrosshairPart>> Parts;
            Ref<HUDCrosshairBulletIndicatorSettings> BulletIndicatorSettings;
            Ref<HUDCrosshairChargeLevelIndicatorSettings> ChargeLevelIndicatorSettings;
            bool AlwaysDisplay;
            bool ShowWhenUnableToFire;
            bool HideOnHighDifficulty;
            int MaxSpreadToPixelMapping;
            int MaxChargeToPixelMapping;
            Ref<CurveResource> ChargeAnimationProgressionCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDF46515879786F2, 0xC0)]
        public class HUDDamageNumbersDisplaySettingsResource : Resource
        {
            Ref<HUDTextResource> DefaultTextResource;
            Array<Ref<HUDDamageTypeToColorResource>> DamageTypeToColorResources;
            Ref<HUDTextResource> VulnerableHUDTextResource;
            Ref<HUDImageResource> VulnerableIcon;
            Array<Ref<TagProperty>> VulnerableTagProperties;
            Ref<HUDTextResource> ResistanceHUDTextResource;
            Ref<HUDImageResource> ResistanceIcon;
            Array<Ref<TagProperty>> ResistanceTagProperties;
            Ref<BooleanFact> FrozenFact;
            Array<Ref<DamageTypeResource>> FrozenDamageTypes;
            Ref<CurveResource> MoveCurve;
            FRange DisplayTimeRange;
            FRange InitalOffsetRange;
            FRange MoveRange;
            FRange AngleRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9465A69948AD087, 0x78)]
        public class HUDDamageNumbersLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1841D9354ABE76B, 0x60)]
        public class HUDDamageNumbersLogicResource : HUDLogicResource
        {
            Array<Ref<HUDDamageNumbersMergeSettingsResource>> MergeSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F7801D6B142A131, 0x48)]
        public class HUDDamageNumbersMergeSettingsResource : Resource
        {
            Ref<HUDDamageNumbersDisplaySettingsResource> DisplaySettings;
            Array<Ref<DamageTypeResource>> DamageTypeResources;
            float TextMergeTimer;
            float TextMergeDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C33611E08562FE3, 0x10)]
        public class HUDDamageResistanceTimer
        {
            Ref<HUDShaderResource> TimerShader;
            Ref<DamageModifierComponentResource> DamageModifierComponent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA356C82FC1F66C2, 0x40)]
        public class HUDDamageTypeToColorResource : Resource
        {
            Ref<DamageTypeResource> DamageType;
            FRGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x82A29B16BA9FE28D, 0x70)]
        public class HUDDisclaimerLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39DA1C381635916F, 0x50)]
        public class HUDDisclaimerLogicResource : HUDLogicResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76AA2EEF43433069, 0x20)]
        public class HUDEffectSettings
        {
            Ref<ScreenEffectResource> ScreenEffect;
            Ref<CurveResource> ScreenEffectCurve;
            Ref<CurveResource> ZoomCurve;
            Ref<CurveResource> FOVCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D64885E4A6C6B1E, 0x170)]
        public class HUDElement : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACFA423195395E74, 0xB0)]
        public class HUDElementResource : Resource
        {
            EHUDSnap Type;
            EHUDUnits UnitsPositionX;
            EHUDUnits UnitsPositionY;
            EHUDUnits UnitsSizeX;
            EHUDUnits UnitsSizeY;
            Vec3 Position;
            ISize Size;
            float FadeInTime;
            float FadeOutTime;
            bool IsShown;
            bool UseTRCScreenArea;
            Array<Ref<HUDElementResource>> ChildElements;
            FRGBAColor Color;
            Vec3 Rotation;
            EHUDSnap RotationalPivot;
            bool IsOnForeground;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E9AC50AB81C0975, 0x80)]
        public class HUDEnemyHealthBarLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FE5CA6F923FA94E, 0xB0)]
        public class HUDEnemyHealthBarLogicResource : HUDLogicResource
        {
            float MaxHealthBarDistance;
            float DisplayTimer;
            bool DisplayHealthWhenFull;
            String HelperName;
            Vec3 DefaultHelperOffset;
            int SortPosition;
            Ref<HUDElementResource> BarRootElement;
            Ref<CurveResource> HealingBlinkCurve;
            FRGBAColor HealingColor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9F0DE9E76C980AE, 0x100)]
        public class HUDEntityHelper : HUDHelper
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAB22713619C4B8, 0x68)]
        public class HUDFastTravelLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x406294B4195F6328, 0x58)]
        public class HUDFastTravelLogicResource : HUDLogicResource
        {
            Ref<HUDTextResource> LocationTextElement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA13E6A5224FBB1CA, 0x18)]
        public class HUDFocusDamageModifierRepresentation
        {
            Ref<DamageTypeResource> DamageTypeResource;
            Ref<UITexture> UIIconTexture;
            bool IsAllDamageTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC99ABF6279FAD1EF, 0x20)]
        public class HUDFocusLevelDifferenceColor
        {
            Ref<UITexture> UIIconTexture;
            int LevelDifference;
            FRGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC9901619E3325B, 0x1A8)]
        public class HUDFocusLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC5B0871BF704897, 0x1B0)]
        public class HUDFocusLogicResource : HUDLogicResource
        {
            Ref<HUDShaderResource> ScanningProgressIndicator;
            String ScanningProgressShaderVariableName;
            Array<HUDFocusLevelDifferenceColor> LevelDifferenceColors;
            Ref<HUDElementResource> FriendlyFactionElement;
            Ref<HUDElementResource> HostileFactionElement;
            Ref<RumbleResource> ScanningRumble;
            Array<HUDFocusDamageModifierRepresentation> DamageModifiers;
            Ref<HUDElementResource> ScannedInfoElement;
            Ref<HUDTextResource> TargetTitle;
            Ref<HUDImageResource> TargetLevelIcon;
            Ref<HUDTextResource> TargetLevelText;
            Ref<HUDImageResource> TargetTypeIcon;
            Ref<HUDTextResource> TargetType;
            Ref<HUDImageResource> BodyHackPerkIconElement;
            Ref<HUDImageResource> HackableIndicatorElement;
            Ref<UITexture> UIBodyHackableIndicatorCorruptedTexture;
            Ref<UITexture> UIBodyHackableIndicatorHackableTexture;
            Ref<UITexture> UIBodyHackableIndicatorCCTexture;
            Ref<UITexture> UIBodyHackableIndicatorInvalidTexture;
            Ref<BoolProperty> IsCorruptedProperty;
            Ref<BooleanFact> IsCauldronControlledFact;
            Ref<LocalizedTextResource> CauldronControlledTypeName;
            Ref<HUDElementResource> BodyDescriptionElement;
            Ref<HUDTextResource> BodyDescriptionText;
            Ref<HUDElementResource> PartsElement;
            Ref<HUDElementResource> PartsIcons;
            Ref<HUDImageResource> PartsIconTemplate;
            int DistanceBetweenPartIcons;
            Ref<HUDElementResource> PartsInfo;
            bool HideScannedInfoPartInfoWhenEmpty;
            Array<Ref<HUDImageResource>> PartVulnerabilityIcons;
            Array<Ref<HUDImageResource>> PartResistanceIcons;
            Ref<HUDTextResource> PartDescription;
            Ref<HUDTextResource> PartBodyDescriptionText;
            Ref<HUDTextResource> TagTargetTextPrompt;
            Ref<LocalizedTextResource> TagTargetLocalizedText;
            Ref<LocalizedTextResource> UnTagTargetLocalizedText;
            Ref<HUDTextResource> TagPatrolPathTextPrompt;
            Ref<LocalizedTextResource> TagTrackLocalizedText;
            Ref<LocalizedTextResource> UnTagTrackLocalizedText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16BE783AC6675D37, 0x11)]
        public class HUDGroupShowOption
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D40754F54C28D97, 0xE0)]
        public class HUDHealthStatusLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22841A319D0E1E9, 0xA8)]
        public class HUDHealthStatusLogicResource : HUDLogicResource
        {
            Ref<HUDTextResource> HealthValueText;
            Ref<HUDImageResource> FullHealthBucketIconTemplate;
            Ref<CurveResource> FullHealthBucketIconScaleCurve;
            Array<Ref<HUDLogicGroupResource>> LogicGroupsToShowOnPoisoned;
            Ref<HUDElementResource> PoisonedRoot;
            Ref<HUDImageResource> PoisonBuildupMeterForeground;
            Ref<HUDShaderResource> ActiveDurationMeter;
            Ref<DamageTypeResource> PoisonDamageType;
            Array<HUDDamageResistanceTimer> ResistanceTimers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABCBA3C6A41FBFDD, 0x38)]
        public class HUDHelper : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F54319A08F0812C, 0x90)]
        public class HUDHitReactionLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31D65F01A3A2A761, 0xF8)]
        public class HUDHitReactionLogicResource : HUDLogicResource
        {
            Ref<HUDElementResource> HitReactionsRoot;
            HitReactionMeterTemplate HitReactionMeterTemplate;
            HitReactionMeterTemplate TiedownMeterTemplate;
            HitReactionMeterTemplate OverheatMeterTemplate;
            Ref<HUDShaderResource> HackedDurationMeter;
            Ref<HUDShaderResource> MortallyWoundedDurationMeter;
            String HelperName;
            int HelperSortPosition;
            int DistanceBetweenHitReactionMeters;
            FloatPropertyLink HackedTimeLeftFactorProperty;
            float HackedIconHideTime;
            Ref<HUDEnemyHealthBarLogicResource> EnemyHealthBarLogic;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC6788ED692E3EB6, 0x200)]
        public class HUDImage : HUDElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40D2331341554A93, 0xD0)]
        public class HUDImageResource : HUDElementResource
        {
            EHUDImageMode Mode;
            Ref<UITexture> UITexture;
            Ref<Texture> MaskTexture;
            bool FlipHorizontal;
            bool FlipVertical;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF827A62EE695514C, 0x8)]
        public class HUDLanguageFontSizeOverride
        {
            ELanguage Language;
            int FontSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x282205EAB0E6FEE0, 0x170)]
        public class HUDLayer : HUDElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCEE0F2CCAAAF251, 0xC0)]
        public class HUDLayerResource : HUDElementResource
        {
            EHUDLayer Layer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4152C38E28079491, 0xA8)]
        public class HUDLogLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84E0245DB68BA802, 0xA0)]
        public class HUDLogLogicResource : HUDLogicResource
        {
            Ref<HUDQuestObjectiveLogicResource> QuestLogicResource;
            Ref<HUDImageResource> TemplateElement;
            float FadeDuration;
            float SlideSpeed;
            Array<HUDLogNotification> NotificationTypes;
            float EntryDisplayTime;
            float EntryDisplayDelay;
            int SpacingBetweenEntries;
            int MaxLogEntries;
            float TimeBetweenAdds;
            ETickerAlignment TickerAlignment;
            bool DisplayEachEntryForFullDuration;
            Array<Ref<UITexture>> UIBackgroundTextureArray;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC12FED6FDA1D825A, 0x50)]
        public class HUDLogNotification : RTTIObject
        {
            Ref<HUDNotificationType> Type;
            Ref<UITexture> UIIconTexture;
            FRGBAColor IconColor;
            FRGBAColor TextColor;
            Ref<SoundResource> Sound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B09028777794CAF, 0x38)]
        public class HUDLogicElementExpander : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD403ADC2C79BAF2, 0x48)]
        public class HUDLogicElementExpanderResource : HUDLogicTimelineItemResource
        {
            EHUDLogicElementExpanderPivot Pivot;
            EHUDLogicElementExpanderAxes Axes;
            Ref<CurveResource> ScaleCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD54F6B35B915A226, 0x38)]
        public class HUDLogicElementFader : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8B093EFB8F86CF7, 0x50)]
        public class HUDLogicElementFaderResource : HUDLogicTimelineItemResource
        {
            EHUDLogicElementFaderMode Mode;
            bool RecurseChildrenToo;
            Ref<CurveResource> FadeCurve;
            bool OnlyFadeOutIfShown;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4C08A99BB2D95B5, 0x38)]
        public class HUDLogicElementRotator : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1EB849DCBAB32EB, 0x48)]
        public class HUDLogicElementRotatorResource : HUDLogicTimelineItemResource
        {
            float RotationAmount;
            float InitialRotation;
            Ref<CurveResource> RotationCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x901F91BA113E4F73, 0x38)]
        public class HUDLogicElementSlider : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B76BFD037F3DBAC, 0x58)]
        public class HUDLogicElementSliderResource : HUDLogicTimelineItemResource
        {
            IVec2 SlideAmount;
            IVec2 Offset;
            Ref<CurveResource> HorizontalSlideAmountCurve;
            Ref<CurveResource> VerticalSlideAmountCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC473EC926846C90, 0x38)]
        public class HUDLogicGroupContainerResource : Resource
        {
            Array<Ref<HUDLogicGroupResource>> HUDLogicGroupResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9408365ACA5F3F81, 0x80)]
        public class HUDLogicGroupResource : Resource
        {
            EHUDShowOption DefaultShowOption;
            EHUDShowOption DefaultShowOptionNewGamePlus;
            Ref<LocalizedTextResource> ListName;
            EDifficulty ForceAlwaysOffDifficulty;
            bool DynamicAble;
            bool AlwaysOnAble;
            bool AlwaysOffAble;
            bool FocusOnlyAble;
            float VisibilityTimer;
            float FadeTime;
            bool ShowOnTouch;
            Array<HUDShowDeviceMapping> ShowDeviceMappings;
            Ref<CurveResource> HighlightCurveResource;
            FRGBAColor HighlightColor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC19537EFE7A2686C, 0x60)]
        public class HUDLogicInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63D61DF54A199953, 0x50)]
        public class HUDLogicResource : Resource
        {
            Array<Ref<ConditionResource>> DisplayConditions;
            bool WhenAlive;
            bool WhenDead;
            bool InPartialHUD;
            Ref<HUDElementResource> RootElement;
            Ref<HUDLogicGroupResource> LogicGroupResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD259337D4C2AB66B, 0x40)]
        public class HUDLogicShaderVariableAnimator : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3ADBF9AD890CC0E7, 0x48)]
        public class HUDLogicShaderVariableAnimatorResource : HUDLogicTimelineItemResource
        {
            String VariableName;
            Ref<CurveResource> Curve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD4A90C8AD701443, 0x38)]
        public class HUDLogicSoundItem : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45B276EE7EB8FDE, 0x40)]
        public class HUDLogicSoundItemResource : HUDLogicTimelineItemResource
        {
            Ref<SoundResource> Sound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x685A8C6E43080A67, 0x38)]
        public class HUDLogicTextFontSizer : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB139296C6CC53D77, 0x40)]
        public class HUDLogicTextFontSizerResource : HUDLogicTimelineItemResource
        {
            Ref<CurveResource> Curve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6543C5012496623F, 0x48)]
        public class HUDLogicTimeline : HUDLogicTimelineItem
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA2B76F5CE2902B8, 0x38)]
        public class HUDLogicTimelineItem : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA9F298BEEBB3664, 0x38)]
        public class HUDLogicTimelineItemResource : Resource
        {
            Ref<HUDElementResource> Element;
            float Duration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4AA22EA7519CC65D, 0x38)]
        public class HUDLogicTimelineKey : Resource
        {
            float StartTime;
            Ref<HUDLogicTimelineItemResource> Item;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD5AE8D9F3B857B0, 0x48)]
        public class HUDLogicTimelineResource : HUDLogicTimelineItemResource
        {
            Array<Ref<HUDLogicTimelineKey>> Keys;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F990271CDBD00A0, 0x10)]
        public class HUDLogicTimerGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C59D53B87FA638, 0x10)]
        public class HUDLoudnessMapping
        {
            float LoudnessLevel;
            Ref<HUDImageResource> LoudnessImage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DC8DFC03106187C, 0x80)]
        public class HUDMarkerHelper : HUDHelper
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2079D003574734D5, 0xA0)]
        public class HUDNameComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB31903ADD45FF367, 0x90)]
        public class HUDNameComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4531C7D00D46D04E, 0x50)]
        public class HUDNameComponentResource : EntityComponentResource
        {
            Ref<LocalizedTextResource> LocalizedName;
            String PositionHelperName;
            bool ShowInSequence;
            float MaxFriendlyDrawDistance;
            float MaxEnemyDrawDistance;
            ENameExposureType EnemyExposure;
            ENameExposureType FriendlyExposure;
            bool HideWhenObscured;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A6ACFFC86FC7F31, 0x40)]
        public class HUDNotificationType : Resource
        {
            Ref<LocalizedTextResource> TitleResource;
            Ref<LocalizedTextResource> TextResource;
            Ref<LocalizedTextResource> PromptResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F5604E50C5D6434, 0xA8)]
        public class HUDObjectIconsLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xADB946D8B2E76997, 0x90)]
        public class HUDObjectIconsLogicResource : HUDLogicResource
        {
            Ref<HUDTextResource> DistanceTextElementResource;
            Ref<HUDImageResource> ImageElementResource;
            Ref<HUDImageResource> WaypointElementResource;
            String HelperName;
            Vec3 BreadcrumbIconOffset;
            int HelperSortPosition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57864698F6CFBE0B, 0x70)]
        public class HUDObjectInfoPositionerLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB93E26CC80A28C93, 0x60)]
        public class HUDObjectInfoPositionerLogicResource : HUDLogicResource
        {
            Ref<HUDElementResource> HelperElement;
            float IconStackOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43E52758497BF6A4, 0x88)]
        public class HUDObjectNamesLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5EBC76B02B4E477F, 0x60)]
        public class HUDObjectNamesLogicResource : HUDLogicResource
        {
            String ElementName;
            Ref<HUDElementResource> PlayerNameTemplate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFFA54481D9F86849, 0x20)]
        public class HUDPerkAbilityTemplate
        {
            EPerkAbility PerkAbility;
            Ref<UITexture> UIIconTexture;
            Ref<UITexture> UIInactiveIconTexture;
            Ref<LocalizedTextResource> LocalizedItemName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7F9473063B223441, 0xA8)]
        public class HUDPlayerChoiceLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42CBEBBA603D9256, 0xA0)]
        public class HUDPlayerChoiceLogicResource : HUDLogicResource
        {
            Ref<HUDTextResource> TitleText;
            Ref<HUDPlayerChoiceOption> TopRightOption;
            Ref<HUDPlayerChoiceOption> MiddleRightOption;
            Ref<HUDPlayerChoiceOption> BottomRightOption;
            Ref<HUDPlayerChoiceOption> BottomLeftOption;
            Ref<HUDPlayerChoiceOption> MiddleLeftOption;
            Ref<HUDPlayerChoiceOption> TopLeftOption;
            float OptionFadeTime;
            Ref<HUDImageResource> BackgroundImage;
            Ref<HUDImageResource> OptionMarkImage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32AE1EDE38B439B2, 0x40)]
        public class HUDPlayerChoiceOption : Resource
        {
            Ref<HUDPlayerChoiceOptionState> ChosenOption;
            Ref<HUDPlayerChoiceOptionState> NormalOption;
            Ref<HUDPlayerChoiceOptionState> SelectedOption;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x900765226EF3BAEC, 0x38)]
        public class HUDPlayerChoiceOptionState : Resource
        {
            Ref<HUDImageResource> ImageElement;
            Ref<HUDTextResource> TextElement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x913A3A5B48FE0104, 0x80)]
        public class HUDPopupLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15B1905D84D2266, 0x60)]
        public class HUDPopupLogicResource : HUDLogicResource
        {
            Array<Ref<HUDPopupMappingResource>> PopupMappings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B201D86A85F99D8, 0x78)]
        public class HUDPopupMapping
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE875EEE67432004B, 0xD8)]
        public class HUDPopupMappingResource : Resource
        {
            Ref<HUDElementResource> ParentElement;
            Ref<HUDTextResource> TitleElement;
            Ref<HUDTextResource> TextElement;
            Ref<HUDTextResource> PromptElement;
            Ref<HUDImageResource> IconElement;
            Ref<HUDImageResource> RewardsBackground;
            Ref<HUDTextResource> RewardDescriptionTemplate;
            Ref<HUDImageResource> RewardIconTemplate;
            Ref<HUDElementResource> RewardSlideAnimationRootTemplate;
            Ref<HUDImageResource> RewardHighlightTemplate;
            float RewardRevealAnimationTime;
            Ref<CurveResource> RewardSlideAnimationCurve;
            Ref<CurveResource> RewardHighlightAnimationCurve;
            ERewardStackingDirection RewardStacking;
            Ref<HUDElementResource> RewardParentElementTemplate;
            Array<Ref<HUDNotificationType>> NotificationTypes;
            Ref<SoundResource> FadeInSound;
            Ref<SoundResource> RewardSound;
            Ref<SoundResource> PromptSound;
            Ref<SoundResource> CombinedPromptAndFadeInSound;
            bool InvertRewardSlideCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x541C96595D5C3FF9, 0x108)]
        public class HUDQuestObjectiveLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A080D1585CD5E23, 0x1C0)]
        public class HUDQuestObjectiveLogicResource : HUDLogicResource
        {
            Ref<HUDTextResource> TitleText;
            Ref<HUDTextResource> TrackerTitleText;
            Ref<HUDElementResource> ObjectiveTemplate;
            Ref<HUDTextResource> ObjectiveText;
            Ref<HUDTextResource> ObjectiveStatusText;
            Ref<HUDElementResource> ObjectiveHintTemplate;
            Ref<HUDTextResource> ObjectiveHintText;
            Ref<HUDImageResource> ObjectiveAddedImage;
            Ref<HUDImageResource> ObjectiveUpdateImage;
            Ref<HUDImageResource> ObjectiveCompletedImage;
            Ref<HUDImageResource> ObjectiveFailedImage;
            Ref<HUDElementResource> SubObjectiveTemplate;
            Ref<HUDTextResource> SubObjectiveText;
            Ref<HUDTextResource> SubObjectiveStatusText;
            Ref<HUDElementResource> SubObjectiveHintTemplate;
            Ref<HUDTextResource> SubObjectiveHintText;
            Ref<HUDImageResource> SubObjectiveAddedImage;
            Ref<HUDImageResource> SubObjectiveUpdateImage;
            Ref<HUDImageResource> SubObjectiveCompletedImage;
            Ref<HUDImageResource> SubObjectiveFailedImage;
            Ref<HUDElementResource> Prompt;
            Ref<SoundResource> ObjectiveChangeSound;
            Ref<SoundResource> ObjectiveCompleteSound;
            Ref<SoundResource> ObjectiveFailSound;
            Ref<SoundResource> NewObjectiveSound;
            Ref<CurveResource> ShowFadeCurve;
            Ref<CurveResource> ShowSlideCurve;
            Ref<CurveResource> HideFadeCurve;
            Ref<CurveResource> HideSlideCurve;
            Ref<CurveResource> CompletedFlashCurve;
            Ref<CurveResource> CompletedFadeCurve;
            Ref<CurveResource> FailedFlashCurve;
            Ref<CurveResource> FailedFadeCurve;
            Ref<CurveResource> HideElementFadeCurve;
            Ref<CurveResource> NewFlashCurve;
            Ref<CurveResource> NewFadeCurve;
            Ref<CurveResource> NewSlideCurve;
            Ref<CurveResource> UpdatedFlash;
            Ref<CurveResource> VerticalAlignSpeedCurve;
            bool ShowActiveQuest;
            bool ShouldShowCompletedObjectives;
            bool ShouldShowFailedObjectives;
            float VisibleDuration;
            float ObjectiveHorizontalOffset;
            float SubObjectiveHorizontalOffset;
            float OffsetTrackedUntracked;
            float StatusObjectiveSpaceSize;
            Ref<HUDQuestObjectiveLogicResource> DependencyResource;
            Array<Ref<QuestType>> ForceVisibleQuestTypes;
            Ref<LocalizedTextResource> OptionalPostfix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70665AE1D795F64C, 0xF8)]
        public class HUDRepairLogic : HUDBarLogic
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD92C8FAC3E6DD361, 0x150)]
        public class HUDRepairLogicResource : HUDBarLogicResource
        {
            Ref<GraphProgramResource> RepairCostGraphProgram;
            Ref<HUDTextResource> CurrentShardsElement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A15FB27BEADEF2B, 0x98)]
        public class HUDResource : Resource
        {
            Array<Ref<HUDElementResource>> Elements;
            Ref<HUDElementResource> RootElement;
            Array<Ref<HUDLogicResource>> Logic;
            Ref<ButtonIconCollection> ButtonIconCollection;
            Ref<ImageMap> TextImageMap;
            Ref<ImageMap> DLCTextImageMap;
            Ref<ShaderResource> Shader;
            Ref<ShaderResource> BlurShader;
            float FOV;
            Ref<EntitlementResource> DLCPackEntitlementKey;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30A261BB4EC4684F, 0x38)]
        public class HUDRestoreState : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB17A935CC4E8230, 0x130)]
        public class HUDRoadRouteHelper : HUDHelper
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CE7BAFDFB7F3182, 0x68)]
        public class HUDSavingLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCC2FA6587A1077A, 0x60)]
        public class HUDSavingLogicResource : HUDLogicResource
        {
            Ref<HUDImageResource> SavingIcon;
            float RotationSpeedPerSec;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE08BB1DF251AF3D, 0xE0)]
        public class HUDSceneObjectHelper : HUDHelper
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x81322EA36D54B899, 0x200)]
        public class HUDShader : HUDElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23D86F8D5DCB3C9D, 0xC0)]
        public class HUDShaderResource : HUDElementResource
        {
            Ref<UIEffectResource> Effect;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3588DAAF4DB95EF7, 0x8)]
        public class HUDShowDeviceMapping
        {
            EDeviceFunction DeviceFunction;
            EHUDDeviceShowOption HUDShowOption;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5AEA1F2E64723BD9, 0x90)]
        public class HUDSplashScreenLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF96219CD82A9044, 0x58)]
        public class HUDSplashScreenLogicResource : HUDLogicResource
        {
            Ref<HUDImageResource> ImageElement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B7BC08C5FDC84E6, 0xB0)]
        public class HUDStaminaBarLogic : HUDBarLogic
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCEAAC268EF295EC, 0x140)]
        public class HUDStaminaBarLogicResource : HUDBarLogicResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B634B098DAE4699, 0xB8)]
        public class HUDSubtitlesLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFD5E9B043C30B24, 0x18)]
        public class HUDSubtitlesLogicNameRemapEntry
        {
            Ref<ConditionResource> Condition;
            Ref<LocalizedTextResource> DisplayNameTrue;
            Ref<LocalizedTextResource> DisplayNameFalse;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66BD515879D59D5F, 0x88)]
        public class HUDSubtitlesLogicResource : HUDLogicResource
        {
            Array<Ref<HUDTextResource>> TextLines;
            Ref<HUDElementResource> Background;
            ISize BackgroundMargin;
            Array<HUDSubtitlesLogicNameRemapEntry> RemappedNames;
            float MaxDistanceToSpeakerRatio;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE604AC707A0C0312, 0x270)]
        public class HUDText : HUDElement
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF86DA7059C57198D, 0x78)]
        public class HUDTextLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4976EE17528A0206, 0x68)]
        public class HUDTextLogicResource : HUDLogicResource
        {
            Ref<HUDTextResource> TextElement;
            bool HideWhenEmpty;
            Ref<GraphProgramResource> GraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x518A204BAF9BD2D1, 0xF0)]
        public class HUDTextResource : HUDElementResource
        {
            Ref<LocalizedTextResource> LocalizedText;
            WString Text;
            Ref<Typeface> Typeface;
            String Style;
            int FontSize;
            Array<HUDLanguageFontSizeOverride> FontSizeOverrides;
            EHUDTextMode Mode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1964FF4F3BE11B5, 0x70)]
        public class HUDTexturePanLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFB095830B5356BF, 0x60)]
        public class HUDTexturePanLogicResource : HUDLogicResource
        {
            Ref<GraphProgramResource> XDeltaProgram;
            Ref<GraphProgramResource> YDeltaProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B3F184B461E2B40, 0x88)]
        public class HUDTimelineBasedLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCF9742CB57DDF5, 0x60)]
        public class HUDTimelineBasedLogicResource : HUDLogicResource
        {
            Ref<HUDLogicTimelineResource> AppearTimeline;
            Ref<HUDLogicTimelineResource> DisappearTimeline;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73EF36F6B5E253D7, 0x70)]
        public class HUDTimerSettings : Resource
        {
            FRGBAColor Text;
            FRGBAColor TextBlink;
            FRGBAColor TextFinished;
            float BlinkStartTime;
            float BlinkInterval;
            float OnFinishDrawTime;
            bool ShowMilliseconds;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA03AF57BE8562359, 0x270)]
        public class HUDToolSelectionLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBAD4D6D5EC3A856, 0x148)]
        public class HUDToolSelectionLogicResource : HUDLogicResource
        {
            Ref<EquipSlotType> SlotType;
            Ref<HUDElementResource> CurrentToolRoot;
            Ref<HUDElementResource> ToolListRoot;
            Ref<HUDImageResource> NormalHealthIcon;
            Ref<HUDImageResource> LowHealthBlinkIcon;
            Ref<HUDImageResource> HealingFailedIcon;
            Ref<CurveResource> LowHealthBlinkingCurve;
            float HealthFactorThreshold;
            float BucketFactorThreshold;
            Array<Ref<HUDLogicGroupResource>> LogicGroupsToShowOnLowHealth;
            Ref<HUDImageResource> IconImageResource;
            Ref<HUDImageResource> PreviousIconImageResource;
            Ref<HUDImageResource> NextIconImageResource;
            Ref<HUDImageResource> PreviousDummyIconImageResource;
            Ref<HUDImageResource> NextDummyIconImageResource;
            Ref<HUDTextResource> AmountTextResource;
            Ref<CurveResource> UseItemBlinkCurve;
            Ref<HUDImageResource> UseFailedImageResource;
            Ref<CurveResource> ActionFailedFadeCurve;
            Ref<HUDElementResource> CancelToolPrompt;
            Ref<HUDLogicTimelineResource> CyclePrevious2Timeline;
            Ref<HUDLogicTimelineResource> CyclePrevious3Timeline;
            Ref<HUDLogicTimelineResource> CycleNext2Timeline;
            Ref<HUDLogicTimelineResource> CycleNext3Timeline;
            Ref<HUDTextResource> Text;
            Ref<HUDImageResource> Icon;
            Ref<HUDImageResource> Cursor;
            float IconSpacing;
            float HealthBucketEmptyOpacity;
            float SelectionAnimationDuration;
            float SelectionAnimationScale;
            Array<HUDPerkAbilityTemplate> Abilities;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87752A2A0691B9AE, 0x80)]
        public class HUDVitalMessageAreaLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65AADBF866EF33EB, 0x78)]
        public class HUDVitalMessageAreaLogicResource : HUDLogicResource
        {
            Ref<HUDTextResource> VitalStatusHUDText;
            Ref<HUDTextResource> VitalMessageHUDText;
            float VitalMessageDisplayTime;
            Ref<CurveResource> BlinkCurve;
            Ref<HUDLogicGroupResource> WeaponHUDLogicGroupResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60E83F20D3D703B3, 0x78)]
        public class HUDVitalStatusComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DCA93EDC412C9CF, 0x50)]
        public class HUDVitalStatusComponentResource : EntityComponentResource
        {
            float DisplayTime;
            Ref<LocalizedTextResource> LowAmmoMessage;
            Ref<LocalizedTextResource> NoAmmoMessage;
            Ref<LocalizedTextResource> DropOnWieldMessage;
            Ref<TagProperty> IgnoreAmmoTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x535619C56909900C, 0x60)]
        public class HUDWeaponChargeBarLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2FE2D0717C7D4A02, 0x50)]
        public class HUDWeaponChargeBarLogicResource : HUDLogicResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC597E39AD73B80A4, 0x270)]
        public class HUDWeaponSelectionLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF3685CC0C45A38C, 0x230)]
        public class HUDWeaponSelectionLogicResource : HUDLogicResource
        {
            Ref<HUDElementResource> WeaponSelectClosedRoot;
            Ref<HUDElementResource> WeaponSelectOpenRoot;
            Ref<HUDImageResource> ClosedSelectedWeaponImageResource;
            Ref<HUDElementResource> ClosedSelectedAmmoImageResource;
            Ref<HUDElementResource> WeaponSelectOpenValidWeaponRoot;
            Ref<HUDElementResource> WeaponSelectOpenNoWeaponRoot;
            Ref<HUDImageResource> OpenSelectedWeaponImageResource;
            Ref<HUDTextResource> OpenSelectedWeaponNameTextResource;
            Ref<HUDTextResource> OpenSelectedAmmoNameTextResource;
            Array<Ref<HUDImageResource>> StatBarRootElements;
            Array<Ref<HUDTextResource>> StatValueTextElements;
            Array<Ref<HUDElementResource>> ModificationElements;
            Array<HUDWeaponSlotTemplate> WeaponSlots;
            Ref<HUDTextResource> QuickCraftingHeader;
            Ref<HUDTextResource> QuickCraftingText;
            Ref<HUDImageResource> QuickCraftingButton;
            Ref<HUDShaderResource> QuickCraftingProgress;
            Ref<HUDImageResource> QuickCraftingIngredientSlotTemplate;
            Ref<HUDElementResource> KeyboardNavigationRoot;
            Ref<HUDImageResource> KeyboardNavigationUp;
            Ref<HUDImageResource> KeyboardNavigationDown;
            Ref<HUDImageResource> KeyboardNavigationLeft;
            Ref<HUDImageResource> KeyboardNavigationRight;
            Ref<HUDLogicTimelineResource> AppearTimeline;
            Ref<HUDLogicTimelineResource> DisappearTimeline;
            Ref<CurveResource> AmmoSelectedScaleCurve;
            Ref<CurveResource> AmmoDeselectedScaleCurve;
            Ref<CurveResource> AmmoCraftedScaleCurve;
            Ref<CurveResource> AmmoCraftedFadeCurve;
            Ref<CurveResource> CanCraftFadeCurve;
            FRGBAColor AmmoCraftedBlinkColor;
            Ref<LocalizedTextResource> AmmoCraftedMessage;
            Ref<LocalizedTextResource> AmmoCraftingHeader;
            Ref<LocalizedTextResource> AmmoCraftingUnavailableMessage;
            Ref<LocalizedTextResource> AmmoCraftingCapacityUpgradeAvailable;
            Ref<LocalizedTextResource> CraftingDisabled;
            float CraftingNotAvailableOpacity;
            float AmmoBackgroundOpacity;
            float AmmoIconNotSelectedOpacity;
            int SpaceBetweenCraftingIngredients;
            FRGBAColor OutOfAmmoIconColor;
            FRGBAColor StatIncreaseColor;
            FRGBAColor StatDecreaseColor;
            FRGBAColor RarityCommonColor;
            FRGBAColor RarityUncommonColor;
            FRGBAColor RarityRareColor;
            FRGBAColor RarityVeryRareColor;
            Ref<BooleanFact> ChildAloyFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE89D0232F6AE741, 0x70)]
        public class HUDWeaponSlotTemplate
        {
            Ref<HUDImageResource> AmmoSlotsTripleBackground;
            Ref<HUDImageResource> AmmoSlotsDoubleBackground;
            Ref<HUDImageResource> AmmoSlotsSingleBackground;
            Ref<HUDImageResource> AmmoSlotsNoneBackground;
            Ref<HUDImageResource> AmmoSlotsTripleSelected;
            Ref<HUDImageResource> AmmoSlotsDoubleSelected;
            Ref<HUDImageResource> AmmoSlotsSingleSelected;
            Ref<HUDImageResource> AmmoSlotsNoneSelected;
            Array<Ref<HUDElementResource>> AmmoIconsTriple;
            Array<Ref<HUDElementResource>> AmmoIconsDouble;
            Ref<HUDElementResource> AmmoIconsSingle;
            Ref<HUDLogicTimelineResource> SelectAnimation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61CA2EF7E375D819, 0x78)]
        public class HUDXpGainedLogic : HUDLogicInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4653D3FA13816FFF, 0x80)]
        public class HUDXpGainedLogicResource : HUDLogicResource
        {
            String ElementName;
            Ref<HUDTextResource> HUDTextXpGainedResource;
            Ref<LocalizedTextResource> TotalXPText;
            float DisplayDelay;
            float DelayBetweenXpNumbers;
            Ref<CurveResource> MoveYCurve;
            Ref<CurveResource> FadeCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB973D6131ECA799B, 0x178)]
        public class HUDXpLogic : HUDBarLogicBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6AE729438EA6AC6, 0x1D0)]
        public class HUDXpLogicResource : HUDBarLogicBaseResource
        {
            Ref<UITexture> FrontBarTexture;
            Ref<UITexture> BackBarTexture;
            Ref<UITexture> BackgroundTexture;
            EXpBarVisibility Visibility;
            float VisibilityTimerXPGain;
            float VisibilityTimerLevelGain;
            float VisibilityLevelPercentageThreshold;
            Ref<HUDImageResource> Background;
            Ref<HUDTextResource> CurrentLevel;
            Ref<HUDTextResource> NextLevel;
            Ref<HUDTextResource> XpProgressionText;
            Ref<HUDElementResource> TickerRootElement;
            Ref<HUDElementResource> TickerTemplateElement;
            Ref<CurveResource> VerticalSlideCurve;
            Ref<CurveResource> VerticalExitCurve;
            Ref<CurveResource> HorizontalEnterCurve;
            float EntryDisplayTime;
            float FirstEntryDisplayTime;
            bool DisplayTimeOnlyForTopElement;
            float EntryDisplayDelay;
            int SpacingBetweenEntries;
            int MaxTickerEntries;
            float TimeBetweenAdds;
            Array<HUDXpTickerNotification> NotificationTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8DE8EDAEEB46D729, 0x60)]
        public class HUDXpTickerNotification : RTTIObject
        {
            Ref<LevelBasedXpReward> EventType;
            Ref<LocalizedTextResource> Text;
            Ref<UITexture> UIIconTexture;
            FRGBAColor IconColor;
            FRGBAColor TextColor;
            Ref<SoundResource> Sound;
            Array<Ref<HUDNotificationType>> AfterNotificationTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75D20F1932187C29, 0x58)]
        public class HackableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF5802D764DE7DDD0, 0x30)]
        public class HackableComponentResource : EntityComponentResource
        {
            Ref<PerkLevel> RequiredPerkLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x902E3A4D6D02C0B3, 0x18)]
        public class HairBundle
        {
            Array<HairStrand> Strands;
            int Material;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B488DB5C8F52183, 0xE00)]
        public class HairInstance : GeometryObject
        {
            String Name;
            Ref<HairResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CC0FAD06E456315, 0x30)]
        public class HairMaterial
        {
            FRGBColor SpecularColor;
            Vec2 AnisoRoughnessModifier;
            float TangentShift;
            float ConeAngleMultiplier;
            float SpecularIntensity;
            float SpecularParameter;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED253242DEC0B14B, 0x58)]
        public class HairModelComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0BE0A4B2F64AD04, 0xF40)]
        public class HairModelComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF7A87BD63D37B20, 0x30)]
        public class HairModelComponentResource : EntityComponentResource
        {
            Ref<HairResource> HairResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB8D6B2203079D12, 0x10)]
        public class HairPose
        {
            Array<HairBundle> Bundles;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13712B5B1D9DD934, 0x1B0)]
        public class HairResource : MeshResourceBase
        {
            Array<HairPose> Poses;
            Ref<HairSimMaterialList> MaterialList;
            BoundingBox3 BoundingBox;
            Mat44 LocalMatrix;
            bool ReduceNumVertices;
            int NumFollowStrands;
            float MaxFollowRadius;
            Array<BoundingSphere> Spheres;
            Array<Capsule> Capsules;
            HairSimulationSettings SimulationSettings;
            Array<Ref<DataBufferResource>> InitialHairPositionsDataBufferResources;
            Ref<DataBufferResource> HairStrandTypeDataBufferResource;
            Ref<DataBufferResource> FollowHairRootOffsetDataBufferResource;
            Ref<DataBufferResource> HairRestLengthDataBuffer;
            Ref<DataBufferResource> HairRefVecsInLocalFrameDataBuffer;
            Ref<DataBufferResource> GlobalRotationsDataBuffer;
            Array<HairSkinnedMeshLod> MeshLods;
            Array<float> LODMeshDistances;
            DrawFlags DrawFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x232362224937E3C1, 0x10)]
        public class HairSimMaterial
        {
            float Damping;
            float LocalStiffness;
            float GlobalStiffness;
            float GlobalMatchRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FF285658BAD75F0, 0x38)]
        public class HairSimMaterialList : CoreObject
        {
            Array<HairSimMaterial> Materials;
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94C99B301B4BC83B, 0x18)]
        public class HairSimulationSettings
        {
            bool IntegrationEnabled;
            bool LocalConstraintsEnabled;
            bool LengthConstraintsEnabled;
            bool CollisionDetectionEnabled;
            bool GuidesEnabled;
            int NumLocalShapeIterations;
            int NumLengthConstraintIterations;
            float Gravity;
            float WindInfluence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x282E4F4C1900089B, 0x1E0)]
        public class HairSkinnedMesh
        {
            Ref<RenderEffectResource> SkinnedRenderEffectResource;
            Ref<VertexArrayResource> SkinnedVertexArray;
            Ref<IndexArrayResource> SkinnedIndexArray;
            Ref<DataBufferResource> SkinnedPositionDataBufferResource;
            Ref<DataBufferResource> SkinnedBlendIndicesDataBufferResource;
            Ref<DataBufferResource> SkinnedBlendWeightsDataBufferResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D5B8F8532A613E6, 0x30)]
        public class HairSkinnedMeshLod
        {
            Array<HairSkinnedMesh> SkinnedMeshes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF49A88A27352C1CB, 0x18)]
        public class HairStrand
        {
            Array<Vec4> Vertices;
            bool IsGuide;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B149F6870025D5D, 0x30)]
        public class HandleClanInviteRequest : RTTIRefObject
        {
            bool Accept;
            String Tag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33D947975C8BBD2E, 0xB0)]
        public class HandleParentAnimationEventComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFECF4DB69ACE1B4, 0x40)]
        public class HandleParentAnimationEventComponentResource : EntityComponentResource
        {
            Array<ActionPerAnimationEvent> ActionsPerEvent;
            Ref<EntityAction> OnDetachFromParentAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x768BF9D9D44368F6, 0x58)]
        public class HarvesterComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x714B150A19EFC2A9, 0x28)]
        public class HarvesterComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC21F07F5B540564, 0x50)]
        public class HasComponentAction : ConditionalAction
        {
            Ref<EntityComponentResource> EntityComponentResource;
            bool OnlyCheckType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2717772F7BB6FD50, 0x40)]
        public class HasFirstPersonCameraAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C198EB5FE2D120C, 0x90)]
        public class HeadGestureEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9375927C7420C7B1, 0x48)]
        public class HeadGestureEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<HeadGestureSettings> HeadGestureSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE234556245A3F05, 0x50)]
        public class HeadGestureSettings : Resource
        {
            AnimationVariableSettings AnimationVariableSettings;
            float GestureDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x671E7994BB015CED, 0x98)]
        public class HeadLookAtEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D0F781A2539E10C, 0x50)]
        public class HeadLookAtEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<LocatorResource> TargetLocatorResource;
            Ref<LookSpeedSettings> LookSpeedSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A00D1F7BD8C4699, 0x40)]
        public class HeadshotAllowedAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9AC42A1DD72D537A, 0x48)]
        public class HealEntityAction : EntityAction
        {
            float Amount;
            Ref<DestructibilityPart> Part;
            bool ActOnCurrentPart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5EC4F26C0315490C, 0x68)]
        public class HealOverTimeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD8987BAE8914195E, 0x78)]
        public class HealthBarComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAC3CAE3ED639183, 0x10)]
        public class HealthBarComponentDisplaySettings
        {
            float MaxDisplayDistance;
            bool DisplayOnlyWhenHostile;
            bool HideWhenFullHealth;
            bool DisplayInCombat;
            bool DisplayOnDamage;
            float DisplayOnDamageTimer;
            bool DisplayWhenTargeted;
            bool DisplayByDefault;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC28BF50FD263255B, 0x58)]
        public class HealthBarComponentResource : EntityComponentResource
        {
            float FadeOutDelay;
            Ref<HUDImageResource> HealthBarImageResource;
            HealthBarComponentDisplaySettings DefaultDisplaySettings;
            Array<ConditionalHealthBarComponentDisplaySettings> ConditionalDisplaySettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFA59B098E76A33F, 0x88)]
        public class HealthBucketComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBBBA1D69032468C, 0x50)]
        public class HealthBucketComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C485F13DECE352C, 0x68)]
        public class HealthBucketComponentResource : EntityComponentResource
        {
            Ref<SoundResource> HealSoundResource;
            String HealGesture;
            Ref<PlayerNotificationResource> HealthAddedNotification;
            Array<int> LevelableCapacities;
            Ref<GraphProgramResource> CapacityModifierProgram;
            Ref<GraphProgramResource> ConversionRateGraphProgram;
            Ref<GraphProgramResource> HealingRateGraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6DA3F3CFB37B1BC, 0x30)]
        public class HealthBucketRestoreState : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1AB431020AAE8AB, 0x68)]
        public class HealthHUDNotificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x933F4BD2AB48A4BA, 0x40)]
        public class HealthHUDNotificationComponentResource : EntityComponentResource
        {
            Ref<PlayerNotificationResource> HealedNotification;
            Ref<PlayerNotificationResource> DamagedNotification;
            Ref<PlayerNotificationResource> FullHealthNotification;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2433612D14A7264, 0x80)]
        public class HealthRegenerationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0BCB6A7B8180FAD, 0x38)]
        public class HealthRegenerationComponentResource : EntityComponentResource
        {
            float Threshold;
            Ref<HealthRegenerationParamsBase> DefaultRegeneration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D12DA6AB8EE6320, 0x38)]
        public class HealthRegenerationDurationParams : HealthRegenerationParamsBase
        {
            float Duration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x169E4AC80EE1FED5, 0x40)]
        public class HealthRegenerationParams : HealthRegenerationParamsBase
        {
            float InitialSpeed;
            float MaximumSpeed;
            float Acceleration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DFD72403213636A, 0x30)]
        public class HealthRegenerationParamsBase : Resource
        {
            float Delay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA1B572CC362359F, 0x70)]
        public class HealthSegmentResource : Resource
        {
            float CriticalHealth;
            float NormalHealth;
            Ref<SoundResource> LostSound;
            Ref<SoundResource> CriticalSound;
            Ref<SoundResource> RecoverySound;
            Ref<HealthRegenerationParams> RegenerationParams;
            bool LimitRegenerationWhenLost;
            bool ResetRegenerationWhenGained;
            float HealthPackRechargeTime;
            Ptr<EntityAction> ActivateAction;
            Ptr<EntityAction> DeactivateAction;
            Ref<SoundMixStateResource> SoundMixState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB93EF831C401EA28, 0x58)]
        public class HealthbucketConsumableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FC26E8595F5D09A, 0x30)]
        public class HealthbucketConsumableComponentResource : EntityComponentResource
        {
            bool GoesStraightToHealthBucket;
            float MaxPlayerHealthPercentage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x82F2D9EE84E47714, 0x80)]
        public class HideActorEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A2115A503663678, 0x48)]
        public class HideActorEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            bool HideMesh;
            bool DisableCollision;
            bool IncludeChildEntities;
            bool DisableActorSounds;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB64D883BD5F8D9FF, 0x58)]
        public class HideAllPlayersEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD629F973CC7D11B, 0x38)]
        public class HideAllPlayersEventResource : TimedEventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3390BEEA6064111, 0x38)]
        public class HideHUDAction : EntityAction
        {
            Ref<HUDElementResource> HUDElementResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9A204B634EF2FB4, 0x58)]
        public class HideHUDEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C3B28FD23B8F6C9, 0x50)]
        public class HideHUDEventResource : TimedEventResource
        {
            Array<String> ExcludeElements;
            float FadeInDuration;
            float FadeOutDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA545F4BF8D6F5BD, 0x68)]
        public class HideInventoryItemsEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CFEA9018C4BB1C8, 0x40)]
        public class HideInventoryItemsEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66D899E3378CFC53, 0x60)]
        public class HideMultiMeshPartEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBBF17A3E4EAFE2B, 0x50)]
        public class HideMultiMeshPartEventResource : TimedEventResource
        {
            Ref<MultiMeshActorResource> MultiMeshActorResource;
            Array<int> PartIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x675496BD6B943A2B, 0x60)]
        public class HighPriorityStreamingEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x872C0CA2BF6660AC, 0x40)]
        public class HighPriorityStreamingEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DCA958FBF8EA68A, 0x78)]
        public class HighestActivityFeedStatTriggerResource : ActivityFeedStatTriggerResource
        {
            int MinimumValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74F43E9FDB0516C7, 0x10)]
        public class HintedLightProbeCreationProperties
        {
            bool CreateLightProbeOnFloorBelow;
            float FloorLightProbeZOffset;
            bool CreateLightProbeOnSurface;
            bool CreateLightProbeOnCeilingAbove;
            float CeilingLightProbeZOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6ACC32B77494605B, 0x8)]
        public class HitLocationMapping
        {
            EHitLocation Source;
            EHitLocation Target;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47C80688B2018F21, 0x108)]
        public class HitReactionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA3753006F84EAF6, 0xA8)]
        public class HitReactionComponentResource : EntityComponentResource
        {
            Array<Ref<HitReactionPartResource>> Parts;
            Array<Ref<HitReactionSeverityModifier>> DefaultModifiers;
            Ref<GraphProgramResource> HitReactionSelectionProgram;
            Ref<OverrideGraphProgramResource> HitReactionSelectionOverrideProgram;
            Array<Ref<HitReactionSet>> ReactionSets;
            HashMap<GGUUID_GGUUID> DestructToReactionPart;
            HashMap<String_GGUUID> JointNameToReactoinPart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90855BC54DE730F3, 0x8)]
        public class HitReactionCooldown
        {
            float LockedCooldown;
            float EscalationTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC53D68CC5824DF3D, 0x40)]
        public class HitReactionCooldownResource : Resource
        {
            Array<HitReactionCooldown> CooldownSequence;
            int SharedCooldownId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x105E7C40636CBFB5, 0x50)]
        public class HitReactionDisplaySettingsResource : Resource
        {
            FRGBAColor HUDColor;
            Ref<UITexture> UIHUDTexture;
            bool OnlyShowDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA5C717E1F57373C, 0x20)]
        public class HitReactionMeterTemplate
        {
            Ref<HUDImageResource> HitReactionIcon;
            Ref<HUDImageResource> SeverityBuildupMeterBackground;
            Ref<HUDImageResource> SeverityBuildupMeterForeground;
            Ref<HUDShaderResource> ActiveDurationMeter;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7756728B0905BD7B, 0x50)]
        public class HitReactionPartResource : Resource
        {
            Array<String> JointNames;
            Array<Ref<DestructibilityPart>> DestructibilityParts;
            int HitLocation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10B04C9F827395CA, 0x90)]
        public class HitReactionQuestTrigger : EntityBasedQuestTrigger
        {
            Array<GGUUID> HitReactionUUIDs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE59A0166E7245EF7, 0xB0)]
        public class HitReactionResource : Resource
        {
            float ReactionLimit;
            float ReactionLimitFactor;
            float ReactionLimitHealthFactor;
            float DecayLimitFactor;
            float ReactionThreshold;
            int ReactionPriority;
            float ReactionDuration;
            bool DisallowAccumulationWhileActive;
            Ref<HitReactionCooldownResource> ReactionCooldown;
            float CancellationDamageThreshold;
            bool RememberReactionOnPriorityCancel;
            EReactionPassThroughType ReactionPassThroughType;
            Ref<GraphProgramResource> CheckAllowedGraphProgram;
            Ref<OverrideGraphProgramResource> CheckAllowedGraphOverrideProgram;
            Ref<GraphProgramResource> GraphProgram;
            Ref<OverrideGraphProgramResource> OverrideGraphProgram;
            Ref<GraphProgramResource> StopGraphProgram;
            Ref<OverrideGraphProgramResource> OverrideStopGraphProgram;
            Array<Ref<DamageTypeResource>> ThresholdIgnoredDamageTypes;
            bool SpawnDestructibilityDebris;
            Ref<DamageTypeResource> DebrisSpawnDamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEED4768740F54CFA, 0x98)]
        public class HitReactionSeries : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD678DE4170F453BB, 0x88)]
        public class HitReactionSeriesResource : Resource
        {
            Array<Ref<DamageTypeResource>> ReactOnDamageTypeResources;
            Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
            Array<Ref<HitReactionResource>> HitReactions;
            EHitReactionCycleMode HitReactionCycleMode;
            Ref<HitReactionSeverityProperty> SeverityAccumulationProperty;
            Array<Ref<HitReactionPartResource>> Parts;
            bool IgnoreInconsequentialParts;
            bool UsePartMultipliers;
            EHitReactionAccumulationType AccumulationType;
            bool AllowReactionOnDeadPart;
            bool AllowReactionPostMortem;
            Ref<HitReactionDisplaySettingsResource> DisplaySettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB3C1A4EE1726435, 0x38)]
        public class HitReactionSet : Resource
        {
            Array<Ref<HitReactionSeriesResource>> HitReactionSeries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7A73D327B1E7ADD6, 0x70)]
        public class HitReactionSeverityModifier : Resource
        {
            float Multiplier;
            Array<Ref<HitReactionPartResource>> ApplicableParts;
            Array<Ref<DamageTypeResource>> ApplicableDamageTypeResources;
            Ref<DamageTypeGroup> ApplicableDamageTypeGroup;
            float Duration;
            Array<Ref<HitReactionSeriesResource>> RestrictedToSeries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABD69A7A43EEF520, 0x50)]
        public class HitReactionSeverityProperty : Resource
        {
            float DecayRate;
            String AccumulationShaderVariableID;
            float DecayDelay;
            Array<Ref<HitReactionSeverityProperty>> LinkedDecaySeverityProperties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8525AE089BBFB14D, 0x38)]
        public class HitReactionsGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79A4DAF85E28198B, 0x240)]
        public class HitResponse : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF83479BB671C0194, 0x40)]
        public class HitResponseAction : EntityAction
        {
            float ImpactSeverity;
            Ref<DamageTypeResource> DamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D4E8356D88EE47, 0x78)]
        public class HitResponseBehaviour : Resource
        {
            HitResponseBehaviourInput Input;
            Ref<HitResponseBehaviourOutput> Output;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47E719BD40DEA04A, 0x48)]
        public class HitResponseBehaviourInput
        {
            bool IsLethal;
            bool MortallyWounded;
            float MinImpactSeverity;
            Ref<DamageTypeGroup> DamageTypeGroup;
            Array<EHitDirection> HitDirections;
            FArc HitDirectionAngle;
            Array<EHitLocation> HitLocations;
            EMountedState MountedState;
            FRange HealthRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8FC6D2972C71664, 0x98)]
        public class HitResponseBehaviourOutput : Resource
        {
            EHitResponseType HitResponseType;
            EAnimationDamageType AnimationReactionType;
            Array<int> AnimationVariants;
            int AnimationHitStrength;
            float Duration;
            float ImpulseFactor;
            float OverridingImpulse;
            float RotateAimSpeedFactor;
            float RotateAimSpeedRecoverFactor;
            EPointOfAimRotation PointOfAimRotation;
            float FallOffRate;
            float KeepOutputTime;
            bool AllowMoreSevereResponses;
            Ref<HumanoidDeadStateResource> CustomDeadStateResource;
            Ref<AISignalType> AISignalType;
            Ref<FirstPersonHitEffectsResource> FirstPersonHitEffectsResource;
            Ref<AttachedDamageParticlesComponentResource> AttachedParticlesResource;
            bool Force3rdPersonHitReaction;
            bool ForceStagger;
            bool AlignToImpact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22D21CAC871669F7, 0xC0)]
        public class HitResponseResource : EntityComponentResource
        {
            Array<Ref<HitResponseBehaviour>> Behaviours;
            float FallOffRate;
            float RotateAimSpeedFallOff;
            float MaxImpactSeverity;
            float MaxImpulseLimit;
            float MaxRagdollError;
            float MaxDistanceToCamera;
            Array<DestructiblePartToHitLocationMapping> DestructiblePartToHitLocationMapping;
            Array<EHitLocation> MappedHitLocations;
            Ref<HumanoidDeadStateResource> DeadStateResource;
            Ref<HumanoidCinematicDeathSystemResource> CinematicDeathSystemResource;
            Ref<DamageTypeGroup> DisableZoomDamageTypeGroup;
            float DisableZoomTime;
            float MortallyWoundedChance;
            float MortallyWoundedMinTimeBetween;
            FRange MortallyWoundedDistanceRange;
            float MovingThreshold;
            bool UseRagdoll;
            String StaggerDisabledAnimationTag;
            String HitResponseDisabledAnimationTag;
            Ref<DamageTypeGroup> IgnoredDamageTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FA7714F345C47, 0x168)]
        public class HorseCallComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF16E1C0C91D1F1FA, 0xE0)]
        public class HorseCallComponentResource : EntityComponentResource
        {
            Ref<AIAuralStimulusResource> StimulusResource;
            Ref<AISignalType> CallSignal;
            Ref<GraphProgramResource> SpawnGraphProgramResource;
            Ref<LocalizedTextResource> NoSpawnLocationFoundText;
            Ref<LocalizedTextResource> InNoHorseAllowedAreaText;
            Ref<LocationMarkerComponentResource> CallableHorseMarker;
            float CallableHorseMarkerWaitTime;
            Array<StreamingRef<EntityResource>> Spawn_HorseEntityResources;
            FRange SpawnRange;
            float MinimumTeleportCloserDistance;
            Ref<NavMeshBuilderSettings> NavMeshSettings;
            Array<Ref<NavMeshAreaTag>> HorseNotAllowedNavMeshAreaTags;
            Ref<DispensableCategoryResource> Despawn_HorseEntityResources;
            Ref<PerkLevel> CallPerk;
            Ref<PerkLevel> HackPerk;
            Array<Ref<BooleanFact>> DisallowedFacts;
            Array<Ref<BooleanFact>> DisallowedGlobalFacts;
            Array<Ref<BoolProperty>> DisallowedProperties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E70A2CDAF755790, 0xB0)]
        public class HorseCallRestoreState : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F4AF3462D4A00B0, 0x64BB0)]
        public class HorseControllerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7840B87C7C16086, 0x140)]
        public class HorseControllerComponentResource : EntityComponentResource
        {
            float WaterSlowdownDepth;
            float WaterDismountDepth;
            float ExtraNavMeshBubbleRadius;
            bool EnableRelativeToCamera;
            int RiderSpeedUpCount;
            int RiderSpeedDownCount;
            float RiderSpeedInputTimeout;
            float RiderPostureToCurrentPostureSlowdownTime;
            int RiderPickUpMaximumPosture;
            BoundingBox3 RiderUseBox;
            float RiderUseBoxMoveAheadTime;
            Ref<PerkLevel> RiderPickUpAllowedPerk;
            int MaxAimPosture;
            float SlowdownStartTime;
            float SlowdownCycleTime;
            float MoveMinimumStickThreshold;
            Array<Ref<NavMeshAreaTag>> HorseNotAllowedNavMeshAreaTags;
            float HorseNotAllowedTriggerTextDistance;
            Ref<LocalizedTextResource> HorseNotAllowedInAreaText;
            Array<Ref<HorseJumpResource>> JumpResources;
            Array<Ref<PostureInfo>> Postures;
            float MaxLookAheadDistanceAllPostures;
            float BlendToRoadSegmentTime;
            float BlendToRoadHeadingTime;
            float OnRoadFactorBlendTime;
            Ref<AIDynamicObstacleResource> ObstacleAvoidanceResource;
            Ref<DismountMode> DismountMode;
            Ref<DismountMode> MovingDismountMode;
            int MovingDismountModePosture;
            Ref<DismountMode> InWaterDismountMode;
            float InWaterDismountModeDepth;
            Ref<DismountMode> SpecialDismountMode;
            Ref<DismountMode> EmergencyDismountMode;
            BoolPropertyLink InCityPropertyLink;
            Ref<BooleanFact> ReduceMountSpeedFact;
            Ref<SoundResource> AutomaticSlowdownSound;
            String AutomaticSlowdownSoundHelperName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC2F556E77E451FB, 0xD0)]
        public class HorseJumpResource : Resource
        {
            Ref<WarpedAnimation> Animation;
            Ref<WarpedAnimation> PreAnimation;
            Ref<WarpedAnimation> PostAnimation;
            FRange AllowedWarpDistanceUp;
            FRange AllowedWarpDistanceForward;
            FRange AllowedWarpDistanceRight;
            int MaxPosture;
            int MinPosture;
            ERequiredJumpMovementState RequiredMovementState;
            float CollisionRadius;
            float CollisionCapsuleLength;
            bool CheckForObstacleCollision;
            Array<Vec3> Trajectory;
            Vec3 TrajectoryCollisionMidPoint;
            float TrajectoryCollisionMidPointTimeFactor;
            Vec3 GroundContactAtTakeOff;
            Vec3 GroundContactAtLanding;
            float EarlyJumpStartDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5710E2F0EBB12F72, 0x50)]
        public class HorseSequenceEntityVariable : SequenceEntityVariable
        {
            EPlayerNumber RiderPlayerNumber;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x506AF8E7A21A00CF, 0xB8)]
        public class HorseSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA7207BF03CC8086, 0x18)]
        public class HtnAtom
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65F723DB4C1CFC97, 0x50)]
        public class HtnFactAssignment : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C89783D1D589BB6, 0x1060)]
        public class HtnFactDatabase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3AF70DD4EE2E947A, 0x8)]
        public class HtnSymbol
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2EDD0E2D605BDFE, 0xA0)]
        public class HulledMesh : Resource
        {
            Ref<PhysicsCollisionResource> Collider;
            Ref<WorldNode> AtmosphereBox;
            Ref<MeshResourceBase> MeshResource;
            CapsuleHull MeshHull;
            InstanceList Instances;
            float SkyDomeAttenuation_RadiusXY;
            float SkyDomeAttenuation_Height;
            Vec3 SkyDomeAttenuation_AverageVisiblePos;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD31CA8A6175A040B, 0x8C0)]
        public class Humanoid : ControlledEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77804E28F76AF37B, 0x2A0)]
        public class HumanoidAIFallState : HumanoidFallState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A36D4284837A533, 0x98)]
        public class HumanoidAIFallStateResource : HumanoidFallStateResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBD2BF7AF5514F19, 0xA0)]
        public class HumanoidAIWalkState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD692BB2239F2DFA, 0x88)]
        public class HumanoidAIWalkStateResource : HumanoidSubStateResource
        {
            Array<HumanoidPostureToStanceCarryMapEntry> PostureToStanceCarryMap;
            float SprintThreshold;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x692136F4B57B5690, 0x3C0)]
        public class HumanoidAirControlComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF02AC68BC63DD71, 0x90)]
        public class HumanoidAirControlComponentResource : EntityComponentResource
        {
            float DetectionDurationAfterApex;
            float TrajectorySampleTimeStep;
            String JumpTakeOffStateName;
            HumanoidAirControlCurvedTrajectorySettings ParkourableCurvedTrajectorySettings;
            HumanoidAirControlCurvedTrajectorySettings ZiplineCurvedTrajectorySettings;
            HumanoidAirControlLinearTrajectorySettings LinearTrajectorySettings;
            float DistanceToInitialTrajectoryWeight;
            float DistanceToInitialTakeOffWeight;
            float AngleBetweenTakeOffAndTargetWeight;
            float ScaleRatioWeight;
            bool AutoSnapToTarget;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3ED33FC4E888E1C1, 0x1C)]
        public class HumanoidAirControlCurvedTrajectorySettings
        {
            FRange MaxChangeInVelocity;
            FRange MaxChangeInVelocitySprinting;
            FRange MaxDistanceBetweenOrignalTrajectoryAndTarget;
            float MaxChangeInTurnSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF63554768CE24A31, 0xC)]
        public class HumanoidAirControlLinearTrajectorySettings
        {
            float MinMoveSpeed;
            float MaxTargetDistance;
            float MaxTargetTurnAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD081C4DA2ED4B34D, 0x110)]
        public class HumanoidBodyVariant : HumanoidBodyVariantInterface
        {
            Ref<ModelPartResource> ModelPartResource;
            Ref<AbilityPoseDeformerResource> AbilityPoseDeformerResource;
            Array<Ref<EntityComponentResource>> EntityComponentResources;
            Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
            Array<Ref<RenderEffectShaderOverridesResource>> ShaderOverrides;
            Pose BindPose;
            float DisablePoseDeformerOverride;
            Array<Ref<FactValue>> Facts;
            AnimationTagSet AnimationSetTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F7C6A1C78AF4DB7, 0x38)]
        public class HumanoidBodyVariantGroup : HumanoidBodyVariantInterface
        {
            Array<Ref<HumanoidBodyVariant>> Variants;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD86809BA42AB7A06, 0x28)]
        public class HumanoidBodyVariantInterface : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x975BA269FD390AD5, 0x110)]
        public class HumanoidCinematicDeathSystem : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36DB0D3E3DE90EEA, 0x38)]
        public class HumanoidCinematicDeathSystemResource : EntityComponentResource
        {
            bool UsableByPlayer;
            Ref<HumanoidDirectionalStaggerStateResource> DirectionalStaggerStateResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4503B20E53604F1E, 0x200)]
        public class HumanoidController : Controller
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77D2E597D6F17A80, 0xC0)]
        public class HumanoidDeadState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF35690769A072D9B, 0x70)]
        public class HumanoidDeadStateResource : HumanoidSubStateResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA06A14BFAB1E342E, 0xC0)]
        public class HumanoidDirectionalStaggerState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D70B89F06FE4CA, 0x78)]
        public class HumanoidDirectionalStaggerStateResource : HumanoidSubStateResource
        {
            float TimeOut;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF1BB5C8BF520840B, 0x78)]
        public class HumanoidDismountMode : DismountMode
        {
            EStance Stance;
            EHumanoidDismountMovement HumanoidDismountMovement;
            EStance AnimationEndStance;
            bool HasCollision;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1444484E1633F720, 0x270)]
        public class HumanoidFallState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB10ACCC0C628651B, 0x98)]
        public class HumanoidFallStateResource : HumanoidSubStateResource
        {
            float JumpPitchBlendDuration;
            float IncomingMomentumDeceleration;
            FRange SprintForwardAngularRange;
            FRange WalkForwardAngularRange;
            AnimationTagID AnimTagDiveRoll;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90B8621E82505CE3, 0x1A8)]
        public class HumanoidInventory : Inventory
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3668B1B142384D9E, 0x68)]
        public class HumanoidInventoryResource : InventoryResource
        {
            Ref<EquipSlotType> DefaultSlotTypeToDrop;
            EOnDeathDropLogic OnDeathDropLogic;
            Array<Ref<TagProperty>> InvalidDropTags;
            Ref<ConditionResource> CanDropCondition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F2070AE47C00D54, 0x460)]
        public class HumanoidJoystickWalkState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A79D45D4E1AFF7F, 0x230)]
        public class HumanoidJoystickWalkStateResource : HumanoidSubStateResource
        {
            Ref<CurveResource> WalkTurnSpeedByVelocityCurve;
            Ref<CurveResource> CrouchTurnSpeedByVelocityCurve;
            Ref<CurveResource> CombatTurnSpeedByVelocityCurve;
            Ref<CurveResource> CombatJumpingTurnSpeedByVelocityCurve;
            Ref<CurveResource> MovementDirectionBlendStrengthCurve;
            Ref<CurveResource> TorsoAngleBlendStrengthCurve;
            Ref<CurveResource> BankTurnVelocityCurve;
            Ref<CurveResource> BankSpeedFactorCurve;
            float BankValueGain;
            FRange SprintForwardAngularRange;
            FRange WalkForwardAngularRange;
            FRange AimRotationComfortRange;
            AnimationTagID AnimTagIdle;
            AnimationTagID AnimTagStart;
            AnimationTagID AnimTagStartDirection;
            AnimationTagID AnimTagCycle;
            AnimationTagID AnimTagSprint;
            AnimationTagID AnimTagStop;
            AnimationTagID AnimTagCrouch;
            AnimationTagID AnimTagCombat;
            AnimationTagID AnimTagIsAimed;
            AnimationTagID AnimTagTurning;
            AnimationTagID AnimTagTurn180;
            AnimationTagID AnimTagJump;
            AnimationTagID AnimTagDiveRoll;
            AnimationTagID AnimTagSliding;
            AnimationTagID AnimTagTacticalToCombat;
            AnimationStateID DefaultStandIdleAnimationState;
            AnimationStateID DefaultCrouchIdleAnimationState;
            float StartSmoothTime;
            float StopSmoothTime;
            float StartToMoveSmoothTime;
            float TurnspeedWhileStarting;
            float MaxCrouchWaterHeight;
            Ref<PerkLevel> ExtendedDiveRollPerk;
            String ExtendedDiveRollAnimName;
            Array<int> JumpAnimationVariantWeights;
            float BumpMaxAngleBetweenNormalAndInput;
            float BumpMinTimeToStopMove;
            float BumpMinTimeDiffBetweenActualAndDesiredVelocity;
            float BumpVerticalEpsilon;
            float BumpForwardDistance;
            float SlideMinDiffBetweenActualAndDesiredVelocity;
            float SlideMinTimeDiffBetweenActualAndDesiredVelocity;
            float SlideMinHeight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4D6527D7B03E913, 0x160)]
        public class HumanoidKnockDownState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0E75E20ECE8AE36, 0xB0)]
        public class HumanoidKnockDownStateResource : HumanoidSubStateResource
        {
            bool AttachGunBoneToHandBone;
            Ref<DamageTypeResource> FallingDamageTypeResource;
            AnimationTagID AnimTagFallingOver;
            AnimationTagID AnimTagGettingUp;
            AnimationTagID AnimTagWounded;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC27B8A3428CB957F, 0x70)]
        public class HumanoidMountMode : MountMode
        {
            EStance Stance;
            bool HasCollisionDuringMounting;
            bool HasCollisionDuringMounted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2E18A1DF71E8EB8, 0x1D0)]
        public class HumanoidMountState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CCC655B8CE037B4, 0x20)]
        public class HumanoidMountStateRep : HumanoidSubStateRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2ACAFE047286A508, 0x78)]
        public class HumanoidMountStateResource : HumanoidSubStateResource
        {
            TagPropertyLink DisallowWeaponUseProperty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FC51B7D00E8C9C9, 0x280)]
        public class HumanoidMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99C900E696796015, 0x40)]
        public class HumanoidMoverResource : MoverResource
        {
            float MaxFallSpeed;
            bool Vip;
            float LeavingOnGroundStateDelay;
            bool CompensateForwardVelocityOnUphillSlope;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE16277C0E5531C9, 0x68)]
        public class HumanoidParkourDismountMode : DismountMode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD326401AEDE1FF77, 0x3A0)]
        public class HumanoidParkourState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2162FB1B367D482, 0x98)]
        public class HumanoidParkourStateResource : HumanoidSubStateResource
        {
            String PerchedWalkStateName;
            AnimationTagID TurningTagID;
            AnimationTagID ParkouringTagID;
            float AttachmentCoolDownDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51DBA86B0A566375, 0xB8)]
        public class HumanoidParkourTransition : Resource
        {
            HumanoidParkourTransitionCondition Pre;
            HumanoidParkourTransitionCondition Post;
            EParkourTransitionType TransitionType;
            Ref<EnumFactValue> TransitionTypeFactValue;
            String TransitionAnnotationTag;
            Ref<WarpedAnimation> WarpedAnimation;
            Ref<WarpedAnimation> WarpedAnimationAlternative;
            Ref<WarpedAnimation> UnchainedPostAnimation;
            Ref<WarpedAnimation> ChainedJumpPostAnimation;
            FRange AllowedWarpDistanceUp;
            FRange AllowedWarpDistanceForward;
            FRange AllowedWarpDistanceRight;
            FRange AllowedWarpAngleDifference;
            bool OrientEntityTowardsDestination;
            bool RequiresJumpButtonPress;
            RGBAColor DebugColor;
            bool ShowInJumpTransitionsWindow;
            EAnimationTransitionCollisionPath CollisionPathType;
            int CollisionPathAnimTrackUserData;
            int CollisionPathAnimEventUserData;
            Ref<CameraModeResource> CameraMode;
            float AdditionalSearchScore;
            bool IgnorePostDisplacementEventMotionForMetrics;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC891D09185DD5439, 0xA)]
        public class HumanoidParkourTransitionCondition
        {
            bool OnFoot_Point;
            bool OnFoot_Bar_Perpendicular;
            bool OnFoot_Bar_Parallel;
            bool OnFoot_Ground_Standing;
            bool OnFoot_Ground_Crouched;
            bool Hanging_With_FootSupport;
            bool Hanging_Without_FootSupport;
            bool OnLadder_With_FootSupport;
            bool OnLadder_Without_FootSupport;
            bool IsAiming;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE9D904679E092EB, 0x70)]
        public class HumanoidParkourTransitionMetrics
        {
            Mat44 TotalTransform;
            float TotalHeadingDelta;
            Array<Vec3> CollisionCapsulePath;
            Vec3 CollisionCapsulePathEndOffsetFromRootBone;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C110924E9910EAF, 0x18)]
        public class HumanoidPostureToStanceCarryMapEntry
        {
            String PostureID;
            EStance Stance;
            ECarryModes CarryMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A9CF49EAFE8AE81, 0x500)]
        public class HumanoidRep : ControlledEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A51083F9FDA40A5, 0x650)]
        public class HumanoidResource : ControlledEntityResource
        {
            String HeadBone;
            String ChestBone;
            String NeckBone;
            String NeckRootBone;
            String PelvisBone;
            String WalkLeftBone;
            String WalkRightBone;
            String SlideFootBone;
            String LeftHandIKAttachBone;
            String RightHandIKAttachBone;
            String LeftHandIKChannelName;
            String RightHandIKChannelName;
            String GunBone;
            String HandBoneName;
            String LeftLowerLegBoneName;
            String RightLowerLegBoneName;
            int RootBoneIndex;
            int HeadBoneIndex;
            int NeckBoneIndex;
            int NeckRootBoneIndex;
            int HandBoneIndex;
            Ref<DestructibilityPart> HeadPart;
            Ref<DestructibilityPart> HelmetPart;
            bool IsHeadshotAllowed;
            float HeadshotDamageModifier;
            float HeadshotMaxSpread;
            Array<Ref<ModelPartResource>> BrokenHeadModelPartResources;
            Array<Ref<DestructibilityPart>> LegParts;
            float MaxStamina;
            float InitialStamina;
            float MinimalStaminaRequiredForSprint;
            float StaminaIncrease;
            float StaminaDecreaseSprint;
            float SprintMaxWaterDepth;
            float LandPredictionTime;
            float JumpStaminaCost;
            float JumpStaminaNeeded;
            float JumpOnForce;
            float JumpOnLaunchTime;
            float JumpMinForwardSpeed;
            float JumpMaxWaterDepth;
            bool CanFireWhileJumping;
            float DiveRollStaminaCost;
            Ref<StaminaUsageType> SprintStaminaUsageType;
            Ref<StaminaUsageType> JumpStaminaUsageType;
            Ref<StaminaUsageType> DiveRollStaminaUsageType;
            float LandDuration;
            float MaxWalkSlope;
            float MaxStepHeight;
            float StopSprintTime;
            float AimNoiseFactor;
            float SprintAimSpeedFactor;
            float MaxAngleBetweenGunAndAimCos;
            float MovementAcceleration;
            float MovementDeceleration;
            float HeadingAcceleration;
            float SlideToMountPositionSpeed;
            Vec3 StandingEyePosition;
            Vec3 CrouchEyePosition;
            Vec3 StandAimOffset;
            Vec3 CrouchAimOffset;
            Ref<PhysicsCharacterMoverResource> PhysicsCharacterMoverResource;
            float StanceSwitchDurationDown;
            float StanceSwitchDurationUp;
            float TurnSpeed;
            float StandingSprintSpeed;
            float StandingForwardSpeed;
            float StandingBackwardSpeed;
            float StandingStrafeSpeed;
            float CrouchForwardSpeed;
            float CrouchBackwardSpeed;
            float CrouchStrafeSpeed;
            float CombatStandingForwardSpeed;
            float CombatStandingBackwardSpeed;
            float CombatStandingStrafeSpeed;
            float CombatCrouchForwardSpeed;
            float CombatCrouchBackwardSpeed;
            float CombatCrouchStrafeSpeed;
            float MaxForwardSpeed;
            float MaxBackwardSpeed;
            float MaxStrafeSpeed;
            float MaxSprintSpeed;
            float MinStandingSpeedPlayer;
            float MinCrouchSpeedPlayer;
            bool CanWalkAndAim;
            bool HasInfiniteAmmo;
            BoundingBox3 CrouchUseBox;
            float PickupUseAngle;
            Array<Ref<HumanoidSubStateResource>> SubStates;
            float HorizontalCatchUpGain;
            float MaxCatchUpHorizontalDisplacement;
            float VerticalGain;
            Ref<SoundResource> StowSound;
            Ref<SoundResource> GearMovementSound;
            Ref<SoundResource> InventoryUseChargeSound;
            float FootstepTriggerHeight;
            MaterialType FootstepDownMaterialType;
            MaterialType FootstepUpMaterialType;
            float SlowFootstepVelocityThreshold;
            MaterialType SlowFootstepDownMaterialType;
            MaterialType SlowFootstepUpMaterialType;
            MaterialType SprintFootstepDownMaterialType;
            MaterialType SprintFootstepUpMaterialType;
            MaterialType CrouchFootstepDownMaterialType;
            MaterialType CrouchFootstepUpMaterialType;
            MaterialType FootstepDragMaterialType;
            MaterialType JumpMaterialType;
            MaterialType LandMaterialType;
            MaterialType FootSlideImpactMaterialType;
            Ref<SoundResource> SlowBreathingSound;
            Ref<SoundResource> MediumBreathingSound;
            Ref<SoundResource> FastBreathingSound;
            Ref<SoundResource> SpawnOnPartyMemberSound;
            Ref<CurveResource> ImpactDamagePerMeterPerSecondCurve;
            Ref<CurveResource> ImpactDamagePerFallingHeightCurve;
            float MinDamageLinearVelocity;
            float MinDamageAngularVelocity;
            float MinDamageMass;
            float ImpactImpulseHumanoidScale;
            float DamageFactor;
            float MinTimeForWalkingDamage;
            float WalkingDamageFactor;
            float WalkingDamageEndDelay;
            float DefaultAimDistance;
            Ref<AISignalType> DeathSignalType;
            Ref<AISignalType> HeadshotSignalType;
            Ref<AISignalType> FallSignalType;
            Ref<AISignalType> FallStopSignalType;
            Ref<AIVisualStimulusResource> VisualStimulus;
            Ref<GraphProgramResource> VisualStimulusSelectorProgramResource;
            Ref<GraphProgramResource> FootstepStimulusSelectorProgramResource;
            Ref<AIAuralStimulusResource> FootStepSoundStimulus;
            float FootStepSoundStimulusCrouchModifier;
            float QuietFootStepSoundStimulusModifier;
            float FootstepMinSpeed;
            float FootstepMaxSpeed;
            Ref<AIAuralStimulusResource> HitScreamSoundStimulus;
            Ref<AIAuralStimulusResource> DeathScreamSoundStimulus;
            Ref<AIAuralStimulusResource> SilentKillSoundStimulus;
            Ref<AIAuralStimulusResource> SprintFootStepSoundStimulus;
            Ref<AIAuralStimulusResource> DropDownSoundStimulus;
            float DropDownSoundStimulusTriggerAtSpeed;
            Array<Ref<HumanoidBodyVariant>> BodyVariants;
            int AnimationCharacterType;
            float Deceleration;
            float EarlyStopDistance;
            EStance LowestAllowedStance;
            bool PlayStowAnimations;
            Ref<HitResponseResource> HitResponseResource;
            Array<DestructiblePartToHitLocationMapping> DestructiblePartToHitLocationMapping;
            String AnimTagDeadName;
            Ref<BloodPuddleSettings> BloodPuddleSettings;
            Ref<DamageTypeResource> SlideDamageTypeResource;
            float SlideDamage;
            float SlideImpulse;
            float SlideImpulseHumanoidFactor;
            float SlideImpactSeverity;
            float MaxSlideIncline;
            float FPCameraOffsetWhenCrouching;
            float FPCameraOffsetRelaxation;
            float FPCameraOffsetGunLowered;
            float GravityOverride;
            float DragLowGravity;
            float MovementModifierLowGravity;
            Ref<DamageTypeResource> ImpactDamageTypeResource;
            float MinSpeedForImpact;
            bool StopReplicationWhenDead;
            float PlayerMaxAirTurnAngleInDegrees;
            Ref<CurveResource> PlayerMaxTurnSpeedWhileJumpingCurve;
            Ref<CurveResource> PlayerMaxTurnSpeedWhileJumpingHeadFirstCurve;
            bool PlayerUseAnimationDrivenJumping;
            bool PlayerKeepForwardMomentum;
            float PlayerAirFriction;
            float PlayerAirBrakeAngleInDegrees;
            float PlayerAirBrakeFactor;
            float PlayerMinTakeOffForwardSpeed;
            float WaterDepthForWalkingToSwimmingTransition;
            float WaterDepthForSwimmingToWalkingTransition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8884980DA1C6C65E, 0xA0)]
        public class HumanoidRopePullingState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11C85BAA50BD0337, 0x78)]
        public class HumanoidRopePullingStateResource : HumanoidSubStateResource
        {
            float MaxFallTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4CA6E57B394F0AB, 0x70)]
        public class HumanoidRunningSlideState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB82D865C49A37DA1, 0x20)]
        public class HumanoidRunningSlideStateRep : HumanoidSubStateRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x140929C275689223, 0xD8)]
        public class HumanoidRunningSlideStateResource : HumanoidSubStateResource
        {
            Ref<CurveResource> TurnSpeedByVelocityCurve;
            Ref<CurveResource> CombatTurnSpeedByVelocityCurve;
            float MinSlideSpeed;
            float InitialSlideSpeed;
            Ref<CurveResource> DecelerationCurve;
            float AbortSpeedThreshold;
            bool UseAnimationDrivenDeceleration;
            AnimationTagID AnimTagSliding;
            Ref<CurveResource> SlideBrakeCurve;
            float SlideBrakeAngle;
            Ref<CurveResource> BankTurnVelocityCurve;
            Ref<CurveResource> BankSpeedFactorCurve;
            float BankValueGain;
            FRange ValidAimRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC4DF6D25B82B6BF7, 0x80)]
        public class HumanoidSlideState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7FAA0E9863AD322, 0xC8)]
        public class HumanoidSlideStateResource : HumanoidSubStateResource
        {
            Ref<CurveResource> WalkTurnSpeedByVelocityCurve;
            Ref<CurveResource> CrouchTurnSpeedByVelocityCurve;
            Ref<CurveResource> AccelerationBySlopeAngelCurve;
            float ActivateSlopeAngle;
            float DeactivateSlopeAngle;
            float MinSpeed;
            float MaxSpeed;
            float ActivateDuration;
            float DeactivateDuration;
            float SpeedBlendFactor;
            float CollisionOffsetForward;
            float CollisionRadius;
            Array<EPhysicsCollisionLayerGame> DisallowedCollisionLayers;
            bool AllowCloseCombat;
            bool AllowDiveRoll;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D3264AF1710D92C, 0x228)]
        public class HumanoidSpawnInfo : ControlledEntitySpawnInfo
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC12FBD0227B56559, 0x80)]
        public class HumanoidSpreadSettings : SpreadSettings
        {
            Ref<CurveResource> MoveSpeedSpreadCurve;
            Ref<CurveResource> ZoomedMoveSpeedSpreadCurve;
            Ref<CurveResource> LookSpeedSpreadCurve;
            Ref<CurveResource> ZoomOverTimeSpreadCurve;
            float StanceCrouchSpread;
            float StanceStandSpread;
            float StanceCrouchZoomedSpread;
            float StanceStandZoomedSpread;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4AAD3921FA6C3FBF, 0xD0)]
        public class HumanoidStaggerState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B91DB9D9BB085BF, 0x80)]
        public class HumanoidStaggerStateResource : HumanoidSubStateResource
        {
            Array<String> AnimationStateNames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x319B3A8C6D714F01, 0x48)]
        public class HumanoidSubState : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8FAF6036E7B9255F, 0x230)]
        public class HumanoidSubStatePoseOverriddenByInteractiveEntity : HumanoidSubStateUsingInteractiveEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40FD1C1578DC4C19, 0x88)]
        public class HumanoidSubStatePoseOverriddenByInteractiveEntityResource : HumanoidSubStateUsingInteractiveEntityResource
        {
            Ref<Skeleton> UserSkeleton;
            String SubSkeletonName;
            bool TransferControlToInteractiveEntity;
            bool UseDefaultStance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1394B2A3A7D4DA32, 0x20)]
        public class HumanoidSubStateRep : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC873F3927FF191D8, 0x70)]
        public class HumanoidSubStateResource : Resource
        {
            bool SupportsStandIdle;
            bool SupportsStandTactical;
            bool SupportsStandCombat;
            bool SupportsCrouchIdle;
            bool SupportsCrouchTactical;
            bool SupportsCrouchCombat;
            bool SupportsLCrouchIdle;
            bool SupportsLCrouchTactical;
            bool SupportsLCrouchCombat;
            Ptr<EntityAction> ActivateAction;
            Ptr<EntityAction> DeactivateAction;
            Ref<SkinnedModelResource> ModelResource;
            EFacialExpression FacialExpression;
            bool OverrideHumanoidFacialExpression;
            Ref<SoundMixStateResource> SoundMixStateResource;
            Array<HumanoidSubStateSupportedStanceCarryMapEntry> SupportedStanceCarryMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DC75985E7C1DC6B, 0x8)]
        public class HumanoidSubStateSupportedStanceCarryMapEntry
        {
            EStance Stance;
            ECarryModes CarryMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB06DC5AE572E5A0, 0x130)]
        public class HumanoidSubStateUsingInteractiveEntity : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x393ED75DA01C9B2F, 0x38)]
        public class HumanoidSubStateUsingInteractiveEntityRep : HumanoidSubStateRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B22E97113DE1160, 0x70)]
        public class HumanoidSubStateUsingInteractiveEntityResource : HumanoidSubStateResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBAC589EBFE886A0, 0x1C0)]
        public class HumanoidSwimState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D46705E44FAC189, 0x130)]
        public class HumanoidSwimStateResource : HumanoidSubStateResource
        {
            float SwimSpeed;
            float SprintSwimSpeed;
            float UnderWaterSwimDepth;
            Ref<PerkLevel> SprintSwimPerk;
            Array<SwimStatePerkMapping> PerkMapping;
            Ref<CurveResource> SpeedToMaxVelocityChangeCurve;
            float MaxTurnAcceleration;
            Ref<CurveResource> SwimForwardSpeedToHeadingSpeedModifierCurve;
            Ref<CurveResource> SwimSprintForwardSpeedToHeadingSpeedModifierCurve;
            float UnderWaterMinStamina;
            float UnderwaterBreathingTime;
            float UnderWaterDamagePerSecond;
            float CurrentsBlendDuration;
            Vec3 SwimmingCollisionCapsuleOffset;
            Vec3 IdleCollisionCapsuleOffset;
            Ref<StaminaUsageType> UnderWaterStaminaUsageType;
            Ref<CurveResource> BankTurnVelocityCurve;
            Ref<DamageTypeResource> DrowningDamageType;
            String TransitionToSwimAnimationTagName;
            String SwimmingAnimationTagName;
            float WaterFallSlopeAngle;
            float WaterFallBlendInDuration;
            float WaterFallBlendOutDuration;
            Ref<BooleanFact> DisableMaxWaterCurrentClampFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6E234E0F71195E9, 0x8F0)]
        public class HumanoidVaultState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6252F4617FC94931, 0x70)]
        public class HumanoidVaultStateResource : HumanoidSubStateResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6A0DBB66F3D7915, 0x140)]
        public class HumanoidVaultTransition : Resource
        {
            Ref<LocalizedTextResource> HUDText;
            Ref<HumanoidVaultTransitionCondition> Condition;
            float OverrideTurnSpeed;
            bool AllowWield;
            Ref<WarpedAnimation> StartAnimation;
            Ref<WarpedAnimation> MidAnimation;
            Ref<WarpedAnimation> EndAnimation;
            Vec3 VaultContactPosition;
            Vec3 VaultMidDisplacement;
            Mat44 VaultMidTurn;
            Vec3 VaultObjectDepth;
            Vec3 VaultEndDisplacement;
            Vec3 VaultLandDisplacement;
            Vec3 VaultContactWarpOffset;
            Array<Vec3> CollisionCapsulePath;
            EAnimationTransitionCollisionPath CollisionPathType;
            int CollisionPathAnimTrackUserData;
            int CollisionPathAnimEventUserData;
            Ref<BooleanFact> DisallowFact;
            Ref<CameraModeResource> CameraMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66605C5CEEC84FD4, 0x90)]
        public class HumanoidVaultTransitionCondition : Resource
        {
            EVaultObstacleType VaultObstacleType;
            EVaultType VaultType;
            EDeviceFunction VaultButton;
            bool NeedsLineOfSight;
            bool RequiresSprinting;
            bool RequiresSwimming;
            EStance RequiredStance;
            ECarryModes RequiredCarryMode;
            bool EndInFall;
            bool EndInSwimming;
            bool EndInParkour;
            EVaultEndInParkourType EndParkourType;
            EVaultEndInParkourAnnotationDirection EndParkourAnnotationDirection;
            bool Cancelable;
            float MaxAngle;
            FRange MovementStickInput;
            FRange SpeedRange;
            FRange MaxHeightDifference;
            FRange MaxDisplacementDifferenceForward;
            FRange MaxDisplacementDifferenceRight;
            FRange MaxDisplacementDifferenceUp;
            FRange MaxLandingHeightDifference;
            float MinimumWaterDepth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68EF776F46EB92C5, 0x2E0)]
        public class HumanoidZiplineState : HumanoidSubState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x690FF6C502B3DF52, 0xE0)]
        public class HumanoidZiplineStateResource : HumanoidSubStateResource
        {
            bool AllowControlDuringZipline;
            String ZiplineAnimationVarName;
            float MaxZiplineSpeed;
            float MaxZiplineTurnSpeed;
            float ZiplineAcceleration;
            float ZiplineBrakeFriction;
            float ZiplineBrakeAngle;
            float ZiplineAccelerateInputAngle;
            float ZiplineAccelerateInputStickFactor;
            float MinZiplineBrakeSpeed;
            float AttachmentCoolDownDuration;
            float ZiplineDeactivateBoostFactor;
            float ZiplineDeactivateDistance;
            float ZiplineDeactivateSpeedDifference;
            AnimationTagID ZiplineMountTag;
            AnimationTagID ZiplineDismountTag;
            Ref<CurveResource> ZiplineFrictionPerAngleCurve;
            Ref<InventoryEntityResource> ZiplineIventoryItem;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64939CF29A9E038D, 0x58)]
        public class HuntingGroundTrialLog : Resource
        {
            UUIDRef<QuestResource> StartQuest;
            UUIDRef<QuestResource> TrialQuest;
            Array<UUIDRef<ActivityMedal>> Trials;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B866DFDFDA8F700, 0x8)]
        public class HwBindingHandle
        {
            uint64 Handle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2FE8B1F70AFC6AA, 0x4)]
        public class HwSamplerData
        {
            uint32 PackedData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE75611FCC703A298, 0x4)]
        public class IBLUsageFlags
        {
            uint32 Flags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33D63CF0BA1A833B, 0x8)]
        public class IObjectActivationSet
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85C95C43A2B391D2, 0x8)]
        public class IParticleSysVar
        {
            int Value;
            int Variation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD5617F78F37CA04, 0x8)]
        public class IRange
        {
            int Min;
            int Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x403C6E2CF1C15C81, 0x10)]
        public class IRect
        {
            int Left;
            int Top;
            int Right;
            int Bottom;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD640C6671A9F54E9, 0x8)]
        public class ISize
        {
            int Width;
            int Height;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD010735A1623DE72, 0x8)]
        public class IVec2
        {
            int X;
            int Y;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7A44EC1A57770EFF, 0xC)]
        public class IVec3
        {
            int X;
            int Y;
            int Z;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7C0DB4F7320249B, 0x58)]
        public class IgnoreCollisionByDamageTypeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB257F9ECCCE83378, 0x38)]
        public class IgnoreCollisionByDamageTypeComponentResource : EntityComponentResource
        {
            Array<Ref<DamageTypeResource>> DamageTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF205F8C411CB8D68, 0x68)]
        public class IgnoreCollisionWithEntitiesComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA15BF43D1BDBD5ED, 0x38)]
        public class IgnoreCollisionWithEntitiesComponentResource : EntityComponentResource
        {
            Array<Ptr<EntityResource>> EntityResourcesToIgnore;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16AF386833567ADE, 0x60)]
        public class IgnoreEntityEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F782EF649EC068E, 0x40)]
        public class IgnoreEntityEventResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5DC1E5622460EBFD, 0x38)]
        public class ImageMap : Resource
        {
            Array<ImageMapEntry> Entries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51C07CE310588882, 0x10)]
        public class ImageMapEntry
        {
            String ID;
            Ref<UITexture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46A52A09E738AF11, 0x80)]
        public class ImpactEffectAction : EntityAction
        {
            MaterialType MaterialType;
            String HelperNode;
            bool AlignToEntity;
            Vec3 StartOffset;
            Vec3 EndOffset;
            EPhysicsCollisionLayerGame CollisionLayer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF690E249646B38B6, 0x58)]
        public class ImpactEffectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2A3F0BAAA2DF908, 0xD0)]
        public class ImpactEffectComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11567B1FE84E3F04, 0x70)]
        public class ImpactEffectComponentResource : EntityComponentResource
        {
            MaterialType MaterialType;
            EContactType ContactType;
            String HelperNode;
            Vec3 StartOffset;
            Vec3 EndOffset;
            bool AlignToWorld;
            float ContactForce;
            Ref<CurveResource> RaycastFrequencyOverDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF5F94FED31A7D6C, 0x140)]
        public class ImpactEffectEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x166B3FE4EF64894D, 0x58)]
        public class ImpactEffectEventResource : TimedEventResource
        {
            Ref<LocatorResource> PositionLocatorResource;
            MaterialType MaterialType;
            float EffectMass;
            float RayCastOffset;
            float RayCastLength;
            EContactType ContactType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9308EB5C421A963, 0x18)]
        public class ImpactEffectLight
        {
            Ref<LightResource> LightResource;
            Ref<CurveResource> IntensityCurve;
            bool IsLooping;
            float Offset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B68C058D61D7155, 0x1AC0)]
        public class ImpactEffectOverrideBox : WorldNode
        {
            String Name;
            int Priority;
            EImpactEffectOverrideMode Mode;
            Ref<ImpactEffectResourceCollection> Collection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x664257B614CF9AD, 0x18)]
        public class ImpactEffectParticles
        {
            Ref<ParticleSystemResource> ParticleSystem;
            float MaxLifeTime;
            float AlignToReflectionVectorFactor;
            Ref<CurveResource> CurveEmitterRatioResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15CAEAE3C90CF614, 0x20)]
        public class ImpactEffectRegionOverride
        {
            Array<ERegion> Regions;
            Array<ImpactEffectVariation> Variations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDBEA8EB6E1B7109, 0x60)]
        public class ImpactEffectResource : Resource
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            bool UsableForCollidingAndResting;
            [RTTI.BrokenReflectionOffset(0x0)]
            bool UsableForCollidingAndBouncing;
            [RTTI.BrokenReflectionOffset(0x0)]
            bool UsableForSliding;
            [RTTI.BrokenReflectionOffset(0x0)]
            bool UsableForRolling;
            MaterialType MaterialA;
            MaterialType MaterialB;
            bool OverridesSound;
            bool OverridesParticles;
            bool OverridesDecal;
            bool OverridesLight;
            bool OverridesCameraShake;
            bool OverridesRumble;
            bool OverridesForceField;
            float MaxDistanceToCamera;
            Array<ImpactEffectVariation> Variations;
            Array<ImpactEffectRegionOverride> RegionOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x507DD1C102D671B5, 0x70)]
        public class ImpactEffectResourceCollection : Resource
        {
            Array<Ref<ImpactEffectResource>> Effects;
            Array<Ref<ImpactEffectResourceCollection>> Collections;
            Array<SerializableDecalMaterialTypeMask> DecalMaterialTypeMaskMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE79DCC87FECC455, 0x20)]
        public class ImpactEffectSound
        {
            Array<Ref<SoundResource>> SoundResources;
            float VolumeFactor;
            float MassRangeLight;
            float MassRangeHeavy;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB48D90AC96498C17, 0x38)]
        public class ImpactEffectSystemSettings : Resource
        {
            float ImpulseFactor;
            float ForceFactor;
            float VelocityFactor;
            float AngularVelocityFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11F891A69F4D7E8F, 0x40)]
        public class ImpactEffectSystemSettingsGame : ImpactEffectSystemSettings
        {
            MaterialType AirMaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26E7A9DAEB8AF531, 0x68)]
        public class ImpactEffectVariation
        {
            ImpactEffectSound Sound;
            Array<ImpactEffectParticles> ParticleEffects;
            Ref<DecalResource> Decal;
            ImpactEffectLight Light;
            Ref<ShakeResource> CameraShakeResource;
            Ref<RumbleResource> RumbleResource;
            Ref<ForceFieldResource> ForceFieldResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F81E22CF5AB9D56, 0x58)]
        public class ImpactMaterialTypeRemapComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A1EF4B2B14E6BE3, 0x40)]
        public class ImpactMaterialTypeRemapComponentResource : EntityComponentResource
        {
            Array<MaterialTypeReplacement> MaterialTypeReplacements;
            bool OnlyReplaceFirstPerson;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48E6FCAD0B746D61, 0x48)]
        public class ImpulseResponseResource : Resource
        {
            Array<uint8> Data;
            int NoiseFloorThreshold;
            int RMSNormalizationLevel;
            bool ForReverbPreset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC8F686C89534770, 0x10)]
        public class InGameIDToTextResource
        {
            String InGameID;
            Ref<LocalizedTextResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D5A264D81BDA5D0, 0x230)]
        public class InGameMenuResource : MenuResource
        {
            Ref<ButtonIconCollection> ButtonIconCollection;
            Ref<ImageMap> TextImageMap;
            Ref<ImageMap> DLCTextImageMap;
            Ref<SoundMixStateResource> GamePausedSoundMix;
            Ref<SoundMixStateResource> GameRunningSoundMix;
            Ref<SoundMixStateResource> MenuCollectableSoundMix;
            Ref<SoundMixStateResource> MenuBinkSoundMix;
            Ref<EntityAction> SaveGameAction;
            Ref<MovieResource> MainMenuBackgroundMovie;
            Array<MenuPageScreenEffect> MenuPageScreenEffects;
            Ref<ConditionResource> CanOpenInGameMainMenuCondition;
            Ref<EnumFactValue> ShowPlayGoLoadingMenuQuest;
            Ref<BooleanFact> CreditsDoneFact;
            Ref<MenuDLCAnimateItemRarityResource> MenuDLCAnimateItemRarityResource;
            Ref<MenuPageBase> StartupIntro;
            Ref<MenuPageBase> BasicLoading;
            Ref<MenuPageBase> CampaignLoading;
            Ref<MenuPageBase> FirstTimeBootupLoadingPage;
            Ref<MenuPageBase> FirstTimeBootupIntroPage;
            Ref<MenuPageBase> Movie;
            Ref<MenuPageBase> SkipSequence;
            Ref<MenuPageBase> IngameMainMenu;
            Ref<MenuPageBase> IngameOptions;
            Ref<MenuPageBase> IngameMerchant;
            Ref<MenuPageBase> IngameLoot;
            Ref<MenuPageBase> IngameCrafting;
            Ref<MenuPageBase> IngamePerks;
            Ref<MenuPageBase> IngameNotebook;
            Ref<MenuPageBase> EndCredits;
            Ref<MenuPageBase> Robot;
            Ref<MenuPageBase> SkippedSequenceLoading;
            Ref<MenuPageBase> IngameSaveProcess;
            Ref<MenuPageBase> IngameMenuSkills;
            Ref<MenuPageBase> IngameMenuInventory;
            Ref<MenuPageBase> IngameMenuCrafting;
            Ref<MenuPageBase> IngameMenuQuests;
            Ref<MenuPageBase> IngameMenuNotebook;
            Ref<MenuPageBase> QuitConfirmationDialog;
            Ref<MenuPageBase> BenchmarkResults;
            Ref<MenuPageBase> MainMenuSettings;
            Ref<EntitlementResource> DLCPackEntitlementKey;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76AFF683FE30C8BB, 0xC0)]
        public class InactiveEntity : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x188B73067DAD2994, 0x50)]
        public class IncapacitateWeaponAction : EntityAction
        {
            bool Incapacitate;
            Ref<EntityComponentResource> WeaponComponentResource;
            Ref<EjectLocationResource> EjectLocation;
            Ref<EjectEffectsLocationResource> EffectsLocation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC172B3BCE560603, 0x40)]
        public class IncreaseFloatPropertyAction : EntityAction
        {
            String PropertyName;
            float ValueToAdd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8AA4894AD325A61, 0x48)]
        public class IncreaseIntPropertyAction : EntityAction
        {
            String PropertyName;
            IntPropertyLink Property;
            int ValueToAdd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA94A831CA5252531, 0x38)]
        public partial class IndexArrayResource : BaseResource, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9556EC2BA3456EE7, 0x120)]
        public class IndirectLightingBakeZone : GeometryObject
        {
            Shape2DExtrusion base_Shape2DExtrusion;
            String Name;
            ELightbakeZoneRestriction LightbakeZoneRestriction;
            ELightbakeZoneQuality LightbakeZoneQuality;
            ELightbakeZoneOrientation LightbakeZoneOrientation;
            ELightmapEncodeColorScale LightmapEncodeColorScale;
            float CompositeOrder;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE92D2611FF95B30A, 0x38)]
        public class IndoorClimate : ClimateBase
        {
            float OutdoorWindInfluence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3BB2216FF6F56111, 0x10)]
        public class InitialPropertyValue
        {
            String Property;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E3748664BA4F2B9, 0x10)]
        public class InitialTemplateVariable
        {
            String Variable;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9B9A5296138F926, 0x30)]
        public class InstanceList
        {
            Array<Mat34> Transforms;
            Array<Vec4Pack> Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16B760D43B4B39FB, 0xF0)]
        public partial class InstancedMeshInstance : GeometryObject, RTTI.IExtraBinaryDataCallback
        {
            String Name;
            Ref<InstancedMeshResource> Resource;
            int MeshInstanceTreeSize;
            int MeshInstanceTreeDrawableSetupSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5ED50DC10EEC66B, 0xC0)]
        public class InstancedMeshResource : MeshResourceBase
        {
            Array<Ref<MeshResourceBase>> Meshes;
            DrawFlags DrawFlags;
            BakedInstanceData BakedInstanceData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F2B9D617DF7FDA6, 0x40)]
        public class InstigatorData
        {
            WeakPtr<Player> Player;
            WeakPtr<Entity> Entity;
            Ptr<AIFaction> Faction;
            uint8 Flags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4239E16B2D09247C, 0x30)]
        public class InstigatorFlagResource : Resource
        {
            int ID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FCF54914C7D1CF1, 0x20)]
        public class InstigatorFlagStatMap
        {
            EPlayerScoreStat Stat;
            Ref<InstigatorFlagResource> InstigatorFlag;
            Ref<ScoreResource> ScoreEvent;
            EPlayerKilledDataBits KillFlag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x252E115A17D06766, 0x38)]
        public class InstigatorFlagsResource : Resource
        {
            Array<Ref<InstigatorFlagResource>> InstigatorFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF902BC82CA35F060, 0x30)]
        public class IntProperty : IntPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3AC6A282FDB1892E, 0x30)]
        public class IntPropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA7055AEE6B45BEC, 0x8)]
        public class IntPropertyLink : PropertyLinkBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ref<IntPropertyBase> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD83841E650139F0B, 0x38)]
        public class IntegerFact : Fact
        {
            int DefaultValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE025D78F8F9FA01D, 0x48)]
        public class IntegerFactQuestTrigger : QuestTrigger
        {
            bool MustBeTracked;
            Ref<IntegerFact> Fact;
            int Value;
            EIntegerFactComparisonLogic CompareLogic;
            int NotifyMin;
            int NotifyMax;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72F68B75FB1124EE, 0x38)]
        public class IntegerFactQuestTriggerInstance : FactQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x836650FEDF2BC6CF, 0x70)]
        public class InteractionEffectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6840B1ED08366BC, 0x48)]
        public class InteractionEffectComponentResource : EntityComponentResource
        {
            Ref<EntityAction> CreateEffectAction;
            Ref<EntityAction> DeleteEffectAction;
            Array<Ref<UseLocationResource>> UseLocations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB267D45434578E2, 0x620)]
        public class InteractiveEntity : ControlledEntity
        {
            WorldTransform Origin;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE06FBD06A4E954A8, 0x120)]
        public class InteractiveEntityActorInstance : EntityActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5BF17462DCFEC74, 0x78)]
        public class InteractiveEntityActorResource : EntityActorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8114F4D7736E9A1F, 0x1A0)]
        public class InteractiveEntityController : Controller
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF19783E114DC9F40, 0x18)]
        public class InteractiveEntityIKTargetInfo
        {
            String ChannelName;
            int BoneIndex;
            String BoneName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD65F11B8D1016232, 0x2E0)]
        public class InteractiveEntityRep : ControlledEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DC1B0D9CB16A1E1, 0x298)]
        public class InteractiveEntityResource : ControlledEntityResource
        {
            Array<UseLocationInfo> UseLocations;
            bool StartEnabled;
            bool AlignToCameraOnDismount;
            bool FullUserPoseOverride;
            float MaxUseAngle;
            Array<InteractiveEntityIKTargetInfo> IKTargets;
            bool HeadIKEnabledByDefault;
            float PoseOverrideBlendDuration;
            float AttachBlendDuration;
            float DetachBlendDuration;
            bool HidesUser;
            bool HidesUserFromAI;
            bool HidesUserPhysicsVolume;
            bool PlayerInvulnerableInSinglePlayer;
            bool AllowUsageWhenParentOrChildOfEnemyFaction;
            Array<UserModeInfo> UserExitModes;
            Array<Ref<HumanoidSubStateUsingInteractiveEntityResource>> HumanoidSubStateUsingInteractiveEntityResources;
            String UserPlacementJointName;
            bool MustStowWeapons;
            bool MustResetLook;
            bool CanUserBeMortallyWounded;
            Ptr<EntityAction> StartAttachAction;
            Ptr<EntityAction> StopDetachAction;
            bool OverridesUserName;
            EHitResponse HitResponse;
            bool UseLocomotion;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x525297166C439F92, 0x30)]
        public class InteractiveEntityScriptEnableEvent : RequestOwnershipEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70F51840F1AE25AF, 0xA0)]
        public class InteractiveMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF13CE80EEE7D215F, 0x30)]
        public class InteractiveMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDED882D095904B70, 0x58)]
        public class InterruptEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B5CD205DABEC57A, 0x38)]
        public class InterruptEventResource : TimedEventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE52DB546E2DD30D1, 0x58)]
        public class InvalidatePhysicsContactsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3B3EF8C76D0408C, 0x28)]
        public class InvalidatePhysicsContactsComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB0DF86759B274DC, 0xD0)]
        public class Inventory : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4420EE38E447A321, 0x330)]
        public class InventoryActionAbility : InventoryEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD5D67CD4B8C9CE9, 0x280)]
        public class InventoryActionAbilityResource : InventoryEntityResource
        {
            Ptr<EntityAction> UseAction;
            Ptr<EntityAction> DeactivateAction;
            Ptr<EntityAction> OnDamageReceivedAction;
            Ptr<EntityAction> OnPlayerKilledAction;
            float Duration;
            Ref<FloatProperty> EndTimeProperty;
            bool AutoUse;
            bool SingleShot;
            bool UseAgainToDeactivate;
            Ref<ActionAbilityUseCondition> UseCondition;
            Ref<GraphProgramResource> EnabledGraphProgram;
            bool SingleUse;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0C0DAAF7E5DAF7B, 0x9D0)]
        public class InventoryAmmoEjector : InventoryWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FD3F79582E3567F, 0x5C0)]
        public class InventoryAmmoEjectorRep : InventoryWeaponRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D8070027F38A962, 0x410)]
        public class InventoryAmmoEjectorResource : InventoryWeaponResource
        {
            Ref<CameraPropertiesSetResource> ReloadCameraProperties;
            Ref<LightResource> LightResource;
            Ref<LightResource> BlindingLightResource;
            Ref<LightResource> LightResourceFP;
            Ref<ParticleSystemResource> ParticleSystemResource;
            String BoneFP;
            String BoneTP;
            Vec3 BoneOffsetFP;
            Vec3 BoneOffsetTP;
            Vec3 AILightShape;
            float BlindingAngle;
            float BlindingDistance;
            bool CanBlindFriendlies;
            Ptr<EntityAction> UserTurnsFlashLightOnAction;
            Ptr<EntityAction> UserTurnsFlashLightOffAction;
            float FireModeSwitchDuration;
            bool ShouldUnloadWeaponOnModeSwitch;
            int ScopeAnimationId;
            Ref<ModelPartResource> OriginalScopePart;
            Ref<ModelPartResource> ScopeReplacementPart;
            float ScopeReplacementThreshold;
            Ref<ModelPartResource> DotLaserPart;
            bool HideDotLaserDuringReload;
            bool FindTargetByRayCollision;
            bool HasRecoverableRecoil;
            Ref<LaserBeamResource> LaserBeam;
            String LaserHelperFP;
            String LaserHelperTP;
            float LaserBeamMaxLength;
            float LaserBeamMaxLengthFirstPerson;
            float LaserBeamFalloffLengthFirstPerson;
            bool AlignLaserWithAim;
            Ref<SoundResource> HoldThrowSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF168258AD7F858A0, 0x98)]
        public class InventoryCapacityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B3DAB8E924881D1, 0xE0)]
        public class InventoryCapacityComponentResource : EntityComponentResource
        {
            int WeaponsCapacity;
            int ToolsCapacity;
            int ModificationsCapacity;
            int OutfitsCapacity;
            int ResourcesCapacity;
            bool ToolsSingleSlotRestriction;
            bool ResourcesSingleSlotRestriction;
            Array<Ref<TagProperty>> IgnoreTags;
            Ref<LocalizedTextResource> WeaponInventoryFullDescription;
            Ref<LocalizedTextResource> ToolInventoryFullDescription;
            Ref<LocalizedTextResource> AmmoPouchInventoryFullDescription;
            Ref<LocalizedTextResource> ModificationInventoryFullDescription;
            Ref<LocalizedTextResource> OutfitInventoryFullDescription;
            Ref<LocalizedTextResource> ResourceInventoryFullDescription;
            Ref<LocalizedTextResource> WeaponCategoryName;
            Ref<LocalizedTextResource> ToolCategoryName;
            Ref<LocalizedTextResource> AmmoCategoryName;
            Ref<LocalizedTextResource> ModificationCategoryName;
            Ref<LocalizedTextResource> OutfitCategoryName;
            Ref<LocalizedTextResource> ResourceCategoryName;
            Ref<LocalizedTextResource> SpecialCategoryName;
            Ref<LocalizedTextResource> LootBoxCategoryName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x738F650722ED4E09, 0x58)]
        public class InventoryCapacityModificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF8789B5770E5AFA, 0x58)]
        public class InventoryCapacityModificationComponentResource : EntityComponentResource
        {
            int WeaponsCapacityIncrease;
            int ToolsCapacityIncrease;
            int ModificationsCapacityIncrease;
            int OutfitsCapacityIncrease;
            int ResourcesCapacityIncrease;
            Ref<PerkLevel> ModifierPerk;
            float ModifierValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88346EC71F50AE25, 0x38)]
        public class InventoryCollection : Resource
        {
            Array<Ref<InventoryCollectionEquippableItemBase>> Items;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8737C387AC9D5771, 0x38)]
        public class InventoryCollectionEquippableAmmoItem : InventoryCollectionItemBase
        {
            Ref<AmmoResource> EntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x892F42836F56D0CD, 0x40)]
        public class InventoryCollectionEquippableItem : InventoryCollectionEquippableItemBase
        {
            Ref<EntityResource> EntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3FD66F3A3BF66F1, 0x38)]
        public class InventoryCollectionEquippableItemBase : InventoryCollectionItemBase
        {
            bool ShouldBeEquipped;
            int EquipInSlot;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE13FBB1FB564F049, 0x48)]
        public class InventoryCollectionEquippableWeaponItem : InventoryCollectionEquippableItemBase
        {
            Ref<InventoryWeaponResource> EntityResource;
            Ref<InventoryCollectionEquippableAmmoItem> AmmoType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5ABF6FE4C570479, 0x30)]
        public class InventoryCollectionItemBase : Resource
        {
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3B0619E3AD4016E, 0x40)]
        public class InventoryCollectionMerchantFreeTradingItem : InventoryCollectionMerchantTradingItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5177576DEF488272, 0x60)]
        public class InventoryCollectionMerchantTradingItem : InventoryCollectionMerchantTradingItemBase
        {
            Array<Ref<InventoryCollectionMerchantTradingItemTradeListItem>> TradingItems;
            Array<Ref<MerchantTradeCostMultiplier>> TradeCostMultipliers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F576065F2B4CFA, 0x40)]
        public class InventoryCollectionMerchantTradingItemBase : InventoryCollectionItemBase
        {
            Ref<EntityResource> EntityResource;
            EMerchantSupplySettings SupplySettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A48A808702D0C75, 0x38)]
        public class InventoryCollectionMerchantTradingItemTradeListItem : InventoryCollectionItemBase
        {
            Ref<EntityResource> EntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48FFBD94F42C9F29, 0x60)]
        public class InventoryCollectionPackageComponent : InventoryPackageComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA2E4E031321B009, 0x38)]
        public class InventoryCollectionPackageComponentResource : InventoryPackageComponentResource
        {
            Ref<InventoryCollection> PackageCollection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B3FBD0BBA0EBF8D, 0x3F0)]
        public class InventoryContextualOrderAbility : InventoryEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C6CA70EB86CC622, 0x280)]
        public class InventoryContextualOrderAbilityRep : InventoryEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66DE8E7B596BD6FC, 0x280)]
        public class InventoryContextualOrderAbilityResource : InventoryEntityResource
        {
            float DefaultRange;
            UIRect GenericDisabledIconRect;
            Array<Ref<ContextualOrderModeResource>> Modes;
            Ref<ContextualOrderModeResource> DefaultMode;
            float WaypointFindRadius;
            float WaypointFindElevation;
            bool DisplayIgnoresCrosshair;
            float EntityTargetingConeAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F964885902638D, 0x1A0)]
        public class InventoryController : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE955F3A9E850F46B, 0x78)]
        public class InventoryControllerRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x91B3373162191C0E, 0x138)]
        public class InventoryControllerResource : EntityComponentResource
        {
            Ref<RumbleResource> RumbleResource;
            Ref<ScreenEffectResource> ScreenEffectResource;
            Ref<EquipSlotType> ToolsSlotType;
            Ref<EquipSlotType> WeaponsSlotType;
            Ref<EquipSlotType> MeleeSlotType;
            Ref<EquipSlotType> HeavySlotType;
            Ref<EquipSlotType> TorsoSlotType;
            Ref<EquipSlotType> UncategorisedSlotType;
            Ref<SoundResource> SelectionActivatedSound;
            Ref<SoundResource> SelectionChangedSound;
            Ref<SoundResource> WeaponOrAmmoSwitchSound;
            Ref<SoundResource> ToolSwitchSound;
            Ref<SoundResource> ToolUseFailedSound;
            Ref<SoundResource> QuickCraftSucceededSound;
            Ref<SoundResource> QuickCraftFailedSound;
            Ref<SoundResource> QuickCraftingSound;
            Ref<SoundMixStateResource> SelectionSoundMixState;
            Ref<ContextualSpeechEvent> InventoryFullSpeechEvent;
            String RelaxedAnimationTag;
            Ref<ConditionResource> InputAllowedCondition;
            Ref<HUDLogicGroupResource> ToolSelectionHUDGroup;
            float DPadStopMovementTime;
            float ToolAimCameraDelay;
            Ref<BooleanFact> UseAimCameraForToolFact;
            float QuickCraftHoldTime;
            bool IsQuickCraftingEnabled;
            float SelectionTimeScale;
            float SelectionTimeScaleBlendInDuration;
            float SelectionTimeScaleBlendOutDuration;
            float AngularDeadzonePerSlot;
            float WeaponOperationTimeout;
            float WeaponAutoWieldMinimumTime;
            float WeaponStowDelayAfterAutoWield;
            float AutoStowSlopeAngleThreshold;
            float WeaponAutoWieldCoolDown;
            Ref<ConditionResource> AutoWieldCondition;
            Ref<BooleanFact> InventorySelectionActiveFact;
            Ref<BooleanFact> ChildAloyFact;
            Array<Ref<PerkLevel>> UnlockableAbilities;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC67CA6941BC4D93, 0x310)]
        public class InventoryEntity : ViewDependentEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD0E4034EC88208E0, 0x280)]
        public class InventoryEntityRep : ViewDependentEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FDA539BFDFB1D56, 0x230)]
        public class InventoryEntityResource : ViewDependentEntityResource
        {
            Ref<HUDCrosshairSettings> Crosshair;
            Array<Ref<EquipSlotType>> EquipSlotTypes;
            int InventoryId;
            AnimationTagSet AnimationSetTags;
            String AIInventoryId;
            float StowTime;
            float QuickStowTime;
            float NormalWieldTime;
            float QuickWieldTime;
            String AdditionalWieldAnimation;
            float StowedScale;
            Ptr<EntityAction> WieldAction;
            Ptr<EntityAction> StowAction;
            Ptr<EntityAction> StartAimingAction;
            Ptr<EntityAction> StopAimingAction;
            Ptr<EntityAction> RemovedAction;
            float Time;
            Vec3 StandAimOffset;
            Vec3 CrouchAimOffset;
            bool AttachAimToCamera;
            String GunBoneOverride;
            Ref<MoverResource> StowMoverResource;
            String GunAimOverrideHelperName;
            bool NeedsAimAlignment;
            bool DisablesInventorySelection;
            bool KeepWhenDead;
            Ref<SoundResource> ActiveSound;
            float ButtonActivationTime;
            bool CanQuickThrow;
            bool QuickThrowForDeployment;
            bool AllowsMoving;
            bool AllowMovingWhileOperating;
            bool AllowsCrouching;
            bool AllowsJumping;
            bool AllowsDiveRolling;
            bool AllowsVaulting;
            bool AllowsSliding;
            bool AllowsSprinting;
            bool StowOnExtendedMovement;
            bool CanActivateWhileFallingAndJumping;
            bool CanWieldWhileMounted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x554991CAA024CCEA, 0x400)]
        public class InventoryGrenade : InventoryThrowable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD79D3B2EEE7468D, 0x2D0)]
        public class InventoryGrenadeRep : InventoryThrowableRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x233BD3842F2FED76, 0x390)]
        public class InventoryGrenadeResource : InventoryThrowableResource
        {
            float PlayerPullPinDetonateTime;
            Ref<SoundResource> PinPulledSound;
            Ref<RumbleResource> PinPulledRumble;
            float PinPulledRumbleDelay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD75253005A4278F2, 0x58)]
        public class InventoryHUDNotificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D6352C7E19BB43B, 0x58)]
        public class InventoryHUDNotificationComponentResource : EntityComponentResource
        {
            Ref<PlayerNotificationResource> ItemAddedNotification;
            Ref<PlayerNotificationResource> ItemRemovedNotification;
            Ref<PlayerNotificationResource> ItemEquippedNotification;
            Ref<PlayerNotificationResource> ItemUnequippedNotification;
            Ref<PlayerNotificationResource> ItemConstructedNotification;
            Ref<PlayerNotificationPriority> NotificationPriority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96722FECBCC851BC, 0x70)]
        public class InventoryItemComponent : ItemDescriptionComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7EAD4DC913259B73, 0xD8)]
        public class InventoryItemComponentResource : ItemDescriptionComponentResource
        {
            Array<Ref<EquipSlotType>> EquipSlotTypes;
            bool IsDroppable;
            bool UseSafePlacementForDrop;
            Array<Ref<EntityComponentResource>> DroppedComponents;
            Ref<GraphProgramResource> DroppedComponentCondition;
            Array<Ref<EntityComponentResource>> PickedUpOnlyComponents;
            Ref<SoundResource> PickUpSound;
            Ref<EquipSlotType> AutoEquipSlotType;
            bool MustBeWieldedOrDropped;
            bool PreventSaveToInventory;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x940BA760435C346F, 0x70)]
        public class InventoryLootPackageComponent : InventoryPackageComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x784C39DB2503AD65, 0x48)]
        public class InventoryLootPackageComponentResource : InventoryPackageComponentResource
        {
            Array<Ref<LootSlot>> LootSlots;
            Ref<InventoryItemComponentResource> OpenedItemDescriptionComponent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57CB219ADE97E25A, 0x30)]
        public class InventoryLootPackageViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3DC81ECDAE8E48AF, 0x68)]
        public class InventoryNodeGraphPackageComponent : InventoryPackageComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1995F4B3A5033213, 0x40)]
        public class InventoryNodeGraphPackageComponentResource : InventoryPackageComponentResource
        {
            Ref<GraphProgramResource> UnpackGraphProgram;
            Ref<OverrideGraphProgramResource> UnpackOverrideGraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC31CDCC14AC963F6, 0x370)]
        public class InventoryNothing : InventoryWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BAFC581BF3D10C1, 0x320)]
        public class InventoryNothingResource : InventoryWeaponResource
        {
            String WeaponId;
            FRange OffensiveRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECB2ED16803B5C3, 0x60)]
        public class InventoryPackageComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4411D314F95034A9, 0x30)]
        public class InventoryPackageComponentResource : EntityComponentResource
        {
            bool ShouldBeAutoUnpacked;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x489DEDD06C6557EB, 0x330)]
        public class InventoryPlaceEntityAbility : InventoryEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1B7BF89118D5ED9, 0x240)]
        public class InventoryPlaceEntityAbilityResource : InventoryEntityResource
        {
            bool IsDisabledWhilePlacedObjectActive;
            bool DestructWhenPlayerIsDead;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4857DF33ED456937, 0x40)]
        public class InventoryResource : EntityComponentResource
        {
            Ref<InventoryCollection> InitialItemCollection;
            Ref<DispensableCategoryResource> DroppedItemDispensableCategory;
            bool DroppingEnabled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FFB7202B0778038, 0x58)]
        public class InventoryRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43EDCD5797C9C9A0, 0x420)]
        public class InventoryReviveAbility : InventoryWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AC0CA82CDDB7E5F, 0x450)]
        public class InventoryReviveAbilityRep : InventoryWeaponRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D218AA452C9298, 0x3A0)]
        public class InventoryReviveAbilityResource : InventoryWeaponResource
        {
            float HealDistance;
            float AimRadius;
            Ref<DamageTypeResource> DamageTypeResource;
            float Damage;
            float ImpactImpulse;
            float ImpactSeverity;
            float ReviveHealthPercentage;
            bool CanHealFriends;
            Array<ReviveAmmoSettings> AmmoSettings;
            Ref<RenderEffectResource> LineRenderEffectsResource;
            Ref<ElectricityDrawSettings> ElectricityDrawSettings;
            String EffectHelperNodeNameTP;
            String EffectHelperNodeNameFP;
            float EffectDuration;
            Ref<ParticleSystemResource> NoTargetParticleSystemResource;
            String WeaponId;
            float ParticleEmitTime;
            Ref<ParticleSystemResource> FirstPersonMuzzleFlash;
            Ref<ParticleSystemResource> ThirdPersonMuzzleFlash;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x495894243B51EC4, 0x4D0)]
        public class InventoryReviveDroneAbility : InventoryEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBACD8A45A1226220, 0x250)]
        public class InventoryReviveDroneAbilityResource : InventoryEntityResource
        {
            Ref<CurveResource> AimShapeCurve;
            Ref<EntityResource> ReviveEntity;
            Ptr<EntityAction> OnReviveAcceptedAction;
            float RemoveReviveEntityTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46634CA260D10E55, 0x3F0)]
        public class InventoryThrowable : InventoryWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD78ED84A62B63630, 0x2C0)]
        public class InventoryThrowableRep : InventoryWeaponRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44301399D76AD33C, 0x370)]
        public class InventoryThrowableResource : InventoryWeaponResource
        {
            bool PullPin;
            FRange ReleaseTime;
            float PullPinDuration;
            bool AutoRemoveOnUnequipWhenNoAmmo;
            float PredictionFactor;
            float PredictionFactorAI;
            Ref<SoundResource> ThrowSound;
            Ref<SoundResource> PullPinSound;
            Ref<CurveResource> ThrowTypeCurve;
            Ref<CurveResource> ThrowForceChargeCurve;
            Ref<CurveResource> FirePressedSpreadCurve;
            float SpinAnimationSpeed;
            bool SwitchWeaponAfterThrowing;
            bool CanUseGrabableObjects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6CC1A58AC52A361, 0x60)]
        public class InventoryUnlockResource : CareerUnlockResource
        {
            String Item;
            bool IsShared;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFC5DDA781803ADF, 0x360)]
        public class InventoryWeapon : InventoryEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6372C6B62AAD7E9E, 0x2B0)]
        public class InventoryWeaponRep : InventoryEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA69F36438B8E6B11, 0x310)]
        public class InventoryWeaponResource : InventoryEntityResource
        {
            Ref<AutoAimHull> AimHull;
            Ref<CurveResource> AimShapeCurve;
            bool ShouldRotateToAim;
            bool CanBeUsedInfinitely;
            bool ResetWeaponModeOnStow;
            float CarrySpeedModifier;
            String CloseCombatWeaponId;
            bool DropOnFireLastRound;
            bool Enabled;
            Ref<JoystickInputModifierResource> JoystickInputModifierResource;
            Ref<AimLagSettings> AimLagSettings;
            Ref<AimDeviationResource> AimDeviationResource;
            float GestureRefocusTime;
            float ToCombatSwitchTime;
            bool CanOnlyFireAtHostiles;
            Ref<RandomFireResource> OnDieRandomFireResource;
            Mat44 HandBoneOffsetMatrix;
            bool CanUseAimLock;
            bool CanUseCrosshairLock;
            float ZoomLockZoomDistanceOverride;
            float ZoomLockUnzoomDistanceOverride;
            Ref<ContextualSpeechEvent> WeaponContextualSpeechEvent;
            bool IsSuitableForStaggerFire;
            bool RequiresCombatToFire;
            bool AllowHipFire;
            Ref<HUDCrosshairSettings> CombatCrosshair;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DFB6AA524DE622C, 0x68)]
        public class InverseWarpMountMode : MountMode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A92864D1CAA8F61, 0x50)]
        public class IsActivatorOfTypeAction : ConditionalAction
        {
            String EntityType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4F9CB851980B1F12, 0x48)]
        public class IsDamageTypeAction : ConditionalAction
        {
            Ref<DamageTypeResource> DamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8ADA94C16BE3BB5, 0x40)]
        public class IsDeadAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64F939EBE0D29215, 0x40)]
        public class IsEnemyOfInstigatorAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF818D0CC407945C, 0x40)]
        public class IsInteractiveEntityEnabledAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x208144B59CCA80BD, 0x40)]
        public class IsMortallyWoundedAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF951C29DE65A8247, 0x40)]
        public class IsOwnerAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9961DC4C6235F4F6, 0x48)]
        public class IsPartDeadAction : ConditionalAction
        {
            Ref<DestructibilityPart> Part;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13006153E80DBC12, 0x40)]
        public class IsPlayerAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF004E9F7765E65D2, 0x70)]
        public class IsSpecifiedEntityAction : ConditionalAction
        {
            GGUUID EntityResourceUUID;
            String EntityName;
            String EntityType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x359B8490CB4D2179, 0x40)]
        public class IsTrackingObjectiveAction : ConditionalAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9F1CC1AD078C37A, 0x78)]
        public class IssueData : RTTIRefObject
        {
            String Key;
            WString Assignee;
            WString Summary;
            WString Status;
            WString Priority;
            WorldPosition Location;
            WString Resolution;
            WString IssueType;
            WString CustomType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6FF6796892286D4, 0x48)]
        public class IssuePriorityMetadata : RTTIRefObject
        {
            RGBAColor StatusColor;
            Array<uint8> IconPNG;
            WString Name;
            int ID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x663849A65E983BB5, 0x28)]
        public class IssueTrackingSettings : RTTIRefObject
        {
            String BaseAddress;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6BED8092FAD44D4, 0x40)]
        public class IssueTrackingUser : RTTIRefObject
        {
            String Name;
            String EmailAddress;
            WString DisplayName;
            bool Active;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6025BD5E0E3C0B5, 0x58)]
        public class ItemDescriptionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF4EF524BCFB1A68, 0x80)]
        public class ItemDescriptionComponentResource : EntityComponentResource
        {
            Ref<LocalizedTextResource> LocalizedItemName;
            Ref<LocalizedTextResource> LocalizedItemDescription;
            Ref<ItemPriceInfo> PriceInfo;
            int ItemWeight;
            Ref<UITexture> UIIconTexture;
            Ref<UITexture> UIIconInactiveTexture;
            UUIDRef<UITexture> PreviewTexture;
            Ref<LootItemDescriptionResource> LootItemDescriptionResource;
            Ref<StatsDisplayResource> StatsDisplayResource;
            Ref<MovieResource> Movie;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB4EA2690F974E8E, 0x48)]
        public class ItemListRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83858BF1F03965F7, 0x58)]
        public class ItemOverrideComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF94B7DDD3C5EE7F8, 0x28)]
        public class ItemOverrideComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0CEA726B9DF97B7, 0x30)]
        public class ItemPriceInfo : Resource
        {
            int BuyPrice;
            int SellPrice;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C6F25D2EE5C4B04, 0x50)]
        public class ItemQuestReward : QuestReward
        {
            Ref<EntityResource> Item;
            int Amount;
            bool AllowOverflow;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D668F6CB69C6AA3, 0x58)]
        public class ItemRecipe : CraftingRecipe
        {
            Ref<EntityResource> Item;
            int Amount;
            int UpgradedAmount;
            Ref<MovieResource> Movie;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDDDD9EEC6EBBF96, 0xB0)]
        public class ItemRestoreState : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAC9E6ADA9204DB, 0x48)]
        public class JobQuestReward : QuestReward
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99ED739351ED78EF, 0x50)]
        public class JoinGameRequestKIN : MatchRequest
        {
            String BuildID;
            String PlaylistID;
            String GameID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A836ECFD45C9C13, 0x48)]
        public class JoinPlayerRequest : MatchRequest
        {
            String TargetOnlineID;
            bool MustJoinGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7BC5E37D4EECD22, 0x50)]
        public class JoinPlayerRequestKIN : JoinPlayerRequest
        {
            String BuildID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2333DE2EA1E43DAD, 0x28)]
        public class JoinPlaylistMessage : RTTIRefObject
        {
            String PlaylistID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E45DAC5C8E62ADD, 0x18)]
        public class Joint
        {
            String Name;
            String Parent;
            int16 ParentIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB02A7BEE57269290, 0x70)]
        public class JoystickActionsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABAEC6ADDDCB6754, 0x38)]
        public class JoystickActionsComponentResource : EntityComponentResource
        {
            Array<JoystickActionsPerFunction> JoystickActionsPerFunction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x421CDA66390EC210, 0x20)]
        public class JoystickActionsPerFunction
        {
            EDeviceFunction Function;
            Ptr<EntityAction> PressAction;
            Ptr<EntityAction> ReleaseAction;
            ESetFunctionHandled SetHandled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA767EA87AEFC3A9, 0x110)]
        public class JoystickInputLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE2A3398FD2EBB9A2, 0x60)]
        public class JoystickInputLocatorResource : LocatorResource
        {
            Ref<EntityActorResource> PlayerActorResource;
            Ref<LocatorResource> PositionLocatorResource;
            float HeadingSpeed;
            FRange HeadingLimits;
            float PitchSpeed;
            FRange PitchLimits;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE40190A4BFA15E9, 0x960)]
        public class JoystickInputModifier : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61D0F98395FFF541, 0xA0)]
        public class JoystickInputModifierResource : Resource
        {
            float SoftlockConeAngle;
            float SoftlockConeAngleOffset;
            Ref<CurveResource> SoftlockDistanceCurve;
            Ref<CurveResource> SoftlockLookSpeedCurve;
            float SoftlockPitchModifier;
            Ref<CurveResource> DelayCurve;
            Ref<CurveResource> AimAssistDistanceCurve;
            Ref<CurveResource> AimAssistSpeedCurve;
            float AimConeAngle;
            float AimConeAngleOffset;
            float ConeAngle;
            float ConeAngleOffset;
            Ref<CurveResource> ShootAssist_AssistCurve;
            Ref<CurveResource> ZoomAssist_AssistCurve;
            Ref<CurveResource> AimShapeCurve;
            float MaxAimAssistFactorAcceleration;
            float MaxSoftLockFactorAcceleration;
            float MinimalLookSpeedForAimAssist;
            float UnaimedRange;
            float AimedRange;
            float LockTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x494E29BE191ED06C, 0x58)]
        public class JumpEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7770B9303364364, 0x50)]
        public class JumpEventResource : TimedEventResource
        {
            Ref<LabelEventResource> JumpLabelResource;
            Ref<LabelEventResource> ReturnLabelResource;
            int BlendFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7790D2FF99295E86, 0x88)]
        public class KeyboardMappingViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4BF7CC72DB52AAD, 0x40)]
        public class KickPlayerRequest : MatchMessage
        {
            String TargetID;
            String GameID;
            bool CancelVote;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5EEDE64ECC7617A5, 0x48)]
        public class KickPlayerRequestKIN : KickPlayerRequest
        {
            String PlaylistID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFEB6DDDA03F788C8, 0xA0)]
        public class KickVotingManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE475C09892E8627A, 0x38)]
        public class KillEntityAction : EntityAction
        {
            bool Suicide;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE2A48CBEC31ADED9, 0x60)]
        public class KillEventResource : RemoveActorEventResource
        {
            Ref<DamageTypeResource> DamageTypeResource;
            Ref<DestructibilityPart> Part;
            bool ShowEffects;
            Ref<LocatorResource> SourceLocatorResource;
            float ImpulseModule;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA690CC0B8AFCCEFD, 0x50)]
        public class KillPartsAction : EntityAction
        {
            Array<Ref<DestructibilityPart>> ConvertedParts;
            bool OverrideDamageType;
            Ref<DamageTypeResource> DamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8CA56F90AA624EA5, 0x68)]
        public class KnockDownDismountMode : DismountMode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x646E269B3B24F112, 0x88)]
        public class KnockDownStateComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30F8029A0A88A5FD, 0x40)]
        public class KnockDownStateComponentResource : EntityComponentResource
        {
            String AnimationTag;
            String GetUpAnimationTag;
            Ref<KnockDownStateEntryResource> DefaultKnockDown;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x648ED53C5964B709, 0x18)]
        public class KnockDownStateEntry
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x341E8E74D962F01E, 0x50)]
        public class KnockDownStateEntryResource : Resource
        {
            bool DisablePerception;
            String Animation;
            float DamageThreshold;
            float ActivationTimeOut;
            Array<Ref<KnockDownStateEntryResource>> AllowedTransitions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3A8E97DAEAD5932, 0x30)]
        public class LabelEventResource : EventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC9035D76544E33B, 0x250)]
        public class LaserBeamInstance : GeometryObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1CAF6F346E931154, 0x68)]
        public class LaserBeamResource : Resource
        {
            float BeamWidth;
            float DotRadius;
            Ref<CurveResource> FadeOverDistanceCurve;
            Ref<CurveResource> FadeOverDistanceCurveFirstPerson;
            String RangeShaderVariable;
            float RangeShaderThreshold;
            Ref<RenderEffectResource> BeamRenderEffectsResource;
            Ref<RenderEffectResource> DotRenderEffectsResource;
            RGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9259C287E2FE1674, 0x1E0)]
        public class LaserTriggerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86D7F8C62C0C464A, 0xB0)]
        public class LaserTriggerComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9464FE6E52276094, 0xE0)]
        public class LaserTriggerComponentResource : EntityComponentResource
        {
            Ref<LaserBeamResource> LaserBeamResource;
            Ref<LightResource> LaserLightResource;
            Ref<LightResource> BlindingLaserLightResource;
            Ref<LaserBeamResource> FriendlyLaserBeamResource;
            Ref<LightResource> FriendlyLaserLightResource;
            Ref<LightResource> FriendlyBlindingLaserLightResource;
            float MaxLaserLength;
            float LaserFalloffLength;
            Vec3 LaserDirection;
            Vec3 LaserOffset;
            float SafetyTime;
            Ptr<EntityAction> TriggerAction;
            Ptr<EntityAction> TriggerActionOnTriggerer;
            bool TriggeredByDeadEntities;
            bool OnlyTriggeredByEnemies;
            Array<String> OnlyTriggeredByEntityTypes;
            float CoolDowntime;
            String HelperName;
            bool CanBlindFriendlies;
            MaterialType ImpactMaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36F087322F622F92, 0x40)]
        public class LayerGroupMask
        {
            //uint64_PLACEMENT_LAYER_MASK_SIZE<uint64> MaskData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC07752A8176B520, 0x88)]
        public class LayerTag : Tag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBB7D4FF9A3A8388, 0xB0)]
        public class LayeredIrradianceData : CoreObject
        {
            LightCollectionIdentifier Identifier;
            BoundingBox3 Bounds;
            Ref<Texture> ProbeAxis;
            Array<float> HeightDeltaRange;
            Ref<Texture> ProbeColorAleph;
            Ref<Texture> ProbeColorBeth;
            Vec3 ProbeColorReconstructionScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C495FE1CA4D4894, 0x130)]
        public class LayeredIrradianceDataForRegion : CoreObject
        {
            ELightbakeZoneRestriction LightbakeZoneRestriction;
            BoundingBox3 Region;
            WorldTransform WorldToLocal;
            WorldTransform LocalToWorld;
            BoundingBox3 LocalBounds;
            float CompositeOrder;
            Array<Ref<LayeredIrradianceData>> IrradianceDataList;
            Ref<Texture> SharedSkyVis;
            Ref<Texture> SharedProbeHeightDelta;
            Array<float> SharedHeightDeltaRange;
            float ColumnSpacing;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C400B44F1B90B56, 0x30)]
        public class LayeredIrradianceDataForTile : CoreObject
        {
            Array<Ref<LayeredIrradianceDataForRegion>> LayeredIrradianceDataForRegionList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC5AFA4C8FD5DBB74, 0x230)]
        public class LeadingMagnetComponent : CameraMagnetComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63871501C8117484, 0xC0)]
        public class LeadingMagnetComponentResource : CameraMagnetComponentResource
        {
            Ref<CurveResource> HeadingToRangeScaler;
            Ref<CurveResource> PitchToRangeScaler;
            Ref<CurveResource> SpeedToRangeScaler;
            Ref<CurveResource> HeadingToHeightScaler;
            Ref<CurveResource> PitchToHeightScaler;
            Ref<CurveResource> SpeedToHeightScaler;
            EPhysicsCollisionLayerGame ElevationCollisionLayer;
            float MaxElevationOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x143C887474B6EEB5, 0x40)]
        public class LegendIcon
        {
            ELegendButton Button;
            Ref<MenuTextureResource> Texture;
            Ref<MenuTextureResource> PressAndHoldTexture;
            EFloating Alignment;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6991490159C0C003, 0xE0)]
        public class LegendTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A0443B5BE0812E2, 0x2D0)]
        public class LegendWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD0F253D126FA1987, 0x38)]
        public class LensFlareApertureSettings
        {
            EApertureShape Type;
            String TextureName;
            float Orientation;
            float OrientationRandom;
            int PolygonSides;
            float PolygonRoundness;
            float BladeNotching;
            float Smoothness;
            float SmoothnessRandom;
            float OutlineIntensity;
            float OutlineThickness;
            float OutlineFeathering;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DC16885E68E025C, 0x14)]
        public class LensFlareCompletionSettings
        {
            float Completion;
            float Feathering;
            float Rotation;
            ECompletionAutoRotate AutoRotate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EC86A08DACE3202, 0x3A0)]
        public class LensFlareElementResource : Resource
        {
            LensFlareSettings GlobalSettings;
            LensFlareElementSettings Settings;
            LensFlareTriggerSettings TriggerSettings;
            LensFlareCompletionSettings CompletionSettings;
            uint PointCount;
            Ref<ShaderResource> Shader;
            Array<uint32> ColorTableData;
            Ref<Texture> NoiseTable;
            Ref<Texture> ColorTable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1971EC80A72F7906, 0xC0)]
        public class LensFlareElementSettings
        {
            float Brightness;
            float Scale;
            Vec2 Stretch;
            Vec2 Distance;
            float Rotation;
            EElementAutoRotate AutoRotate;
            Vec2 Offset;
            EElementTranslation Translation;
            Vec2 CustomTranslation;
            float AspectRatio;
            EElementColor ColorSource;
            FRGBAColor Color1;
            FRGBAColor Color2;
            float GradientLoops;
            float GradientOffset;
            bool ReverseGradient;
            float ColorRandom;
            bool IgnoreGlobalBrightness;
            bool IgnoreGlobalScale;
            bool IgnoreGlobalRotation;
            bool Ignore3DPerspective;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D404AF0B8437F42, 0x3C0)]
        public class LensFlareGlintResource : LensFlareElementResource
        {
            LensFlareGlintSettings GlintSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1F532571E86FA9, 0x1C)]
        public class LensFlareGlintSettings
        {
            int Complexity;
            float Length;
            float LengthRandom;
            float Thickness;
            float SpacingRandom;
            float Orientation;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C348DAA983F6589, 0x3B0)]
        public class LensFlareGlowResource : LensFlareElementResource
        {
            LensFlareGlowSettings GlowSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69330A82C538A4CA, 0x4)]
        public class LensFlareGlowSettings
        {
            float Gamma;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3285C16420FEF38B, 0x3C0)]
        public class LensFlareHoopResource : LensFlareElementResource
        {
            LensFlareHoopSettings HoopSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x632748574D0E17AD, 0x1C)]
        public class LensFlareHoopSettings
        {
            int Complexity;
            bool Continuous;
            float Detail;
            float Length;
            float LineThickness;
            float LineSpacing;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5BF9D13EC30DC6A4, 0xE0)]
        public class LensFlareInstance : WorldNode
        {
            Ref<LensFlareResource> Resource;
            Ptr<Light> Following;
            float Brightness;
            bool Background;
            Vec3 Offset;
            FRGBAColor Tint;
            float Scale;
            float VisibilityConeInnerAngle;
            float VisibilityConeOuterAngle;
            float OffscreenFadeInner;
            float OffscreenFadeOuter;
            float OcclusionSize;
            float DepthBias;
            bool UseLightColor;
            Vec2 VisibilityConeScaleBias;
            Vec2 OffscreenFadeScaleBias;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24359949D42E2619, 0x410)]
        public class LensFlareIrisResource : LensFlareElementResource
        {
            LensFlareIrisSettings IrisSettings;
            LensFlareApertureSettings ApertureSettings;
            bool Singular;
            Ref<Texture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A58091EECF1077C, 0x20)]
        public class LensFlareIrisSettings
        {
            int ObjectCount;
            float Spread;
            float SpreadRandom;
            float ScaleRandom;
            float BrightnessRandom;
            float RotationRandom;
            float OffsetRandom;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65A69DA01B48EFE5, 0x80)]
        public class LensFlareManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52DE84B2EA55ADB, 0x90)]
        public class LensFlareResource : Resource
        {
            LensFlareSettings Settings;
            Array<Ref<LensFlareElementResource>> Elements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9646D07855017E2, 0x3B0)]
        public class LensFlareRingResource : LensFlareElementResource
        {
            LensFlareRingSettings RingSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA06441991E6788DE, 0x10)]
        public class LensFlareRingSettings
        {
            float Thickness;
            float InsideFeathering;
            float OutsideFeathering;
            int DummyToFixEditor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC7A242870EF9B2E, 0x50)]
        public class LensFlareSettings
        {
            float Scale;
            float AspectRatio;
            FRGBAColor Color;
            int Seed;
            int MatteBoxShape;
            float MatteBoxStart;
            float MatteBoxFade;
            float Brightness;
            float OffscreenFadeInner;
            float OffscreenFadeOuter;
            float VisibilityConeInnerAngle;
            float VisibilityConeOuterAngle;
            float OcclusionSize;
            float DepthBias;
            bool UseLightColor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7832CC4E169AC5B, 0x3B0)]
        public class LensFlareShimmerResource : LensFlareElementResource
        {
            LensFlareShimmerSettings ShimmerSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1FAB9D9FECDBCBD, 0x10)]
        public class LensFlareShimmerSettings
        {
            int Complexity;
            float Detail;
            float Orientation;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22114FCB99B88A, 0x3D0)]
        public class LensFlareSparkleResource : LensFlareElementResource
        {
            LensFlareSparkleSettings SparkleSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x912A883CA5BA8862, 0x2C)]
        public class LensFlareSparkleSettings
        {
            int Complexity;
            float Length;
            float LengthRandom;
            float Thickness;
            float ThicknessRandom;
            float BrightnessRandom;
            float Spread;
            float SpreadRandom;
            float SpacingRandom;
            float ShapeOrientation;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE07848EA01CCC566, 0x3D0)]
        public class LensFlareSpikeBallResource : LensFlareElementResource
        {
            LensFlareSpikeBallSettings SpikeBallSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x661E1B1BC0E82E47, 0x24)]
        public class LensFlareSpikeBallSettings
        {
            int Complexity;
            float Length;
            float LengthRandom;
            float Thickness;
            float ThicknessRandom;
            float BrightnessRandom;
            float SpacingRandom;
            float Orientation;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BE462083026FD67, 0x3D0)]
        public class LensFlareStreakResource : LensFlareElementResource
        {
            LensFlareStreakSettings StreakSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48FCC62C2D25854C, 0x2C)]
        public class LensFlareStreakSettings
        {
            float Length;
            float Thickness;
            float CoreIntensity;
            float Symmetry;
            float FanEnds;
            float FanFeathering;
            int ReplicatorCopies;
            float ReplicatorAngle;
            float ScaleRandom;
            float SpacingRandom;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D2905DDC96AB72, 0x80)]
        public class LensFlareTriggerSettings
        {
            bool EnableTrigger;
            float BrightnessOffset;
            float ScaleOffset;
            Vec2 StretchOffset;
            float RotationOffset;
            FRGBAColor ColorShift;
            ELensFlareTriggerType TriggerType;
            ELensFlareTriggerMode TriggerMode;
            bool InvertTrigger;
            float BorderWidth;
            float Expansion;
            float InnerFalloffRange;
            float OuterFalloffRange;
            ELensFlareTriggerFalloff FalloffType;
            Vec2 TriggerStretch;
            Vec2 TriggerOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EE8B64CC2B58D30, 0xA0)]
        public class Level : CoreObject
        {
            String Name;
            EEntityUpdateFrequency UpdateFrequency;
            float BroadPhaseSize;
            int MaxPhysicsBodies;
            int MaxPhysicsMotions;
            WorldPosition BroadPhaseOrigin;
            WorldBoundingBox3 WorldBounds;
            StreamingRef<LevelData> LevelData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x619D58A19F15144, 0x38)]
        public class LevelBasedXpReward : Resource
        {
            Array<int> XpPerLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70540C4A1D6A2F97, 0x68)]
        public class LevelData : CoreObject
        {
            Ref<CollisionTrigger> InitialArea;
            Ref<CollisionTrigger> HighDetailArea;
            Array<Ref<StreamingStrategyResource>> StrategyResources;
            Array<Ref<StreamingStrategyResource>> StrategyResourcesNonDLC1;
            Array<Ref<StreamingStrategyResource>> StrategyResourcesDLC1;
            Ref<GraphProgramResource> DLCProgramResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x403AEDA2FF627F90, 0x38)]
        public class LevelGroup : Resource
        {
            Array<Ref<Level>> Levels;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74EC162A809DB5B, 0x110)]
        public class LevelSettings : Resource
        {
            Array<PlayerCharacterEntry> PlayerCharacters;
            Ref<WorldStateResource> WorldState;
            Ref<CollectableManagerResource> CollectableManager;
            Ref<EmbeddedFileResource> SessionImage;
            float Heading;
            float PreMissionDelay;
            float PostMissionDelay;
            Ref<PostProcessSettingsResource> Settings;
            float ShoulderBoost;
            float ShoulderSat;
            float ShoulderMaxSat;
            Ref<ScreenEffectResource> HealthScreenEffectResource;
            Ref<ScreenEffectResource> MissionFailedScreenEffectResource;
            Ref<AnimatedScreenEffectResource> FadeOutScreenEffectResource;
            Ref<AnimatedScreenEffectResource> FadeInScreenEffectResource;
            Ref<AnimatedScreenEffectResource> FellThroughWorldEffectResource;
            Ref<AnimatedScreenEffectResource> LoadingFadeInEffectResource;
            Ref<ImpactEffectResourceCollection> ImpactEffectResourceCollection;
            Ref<AuroraStaticSettings> AuroraSettings;
            float SplitscreenLODMultOverride;
            Ref<Texture> FogHeightMap;
            BoundingBox3 FogHeightMapBounds;
            Ref<ForceFieldSpringSettings> SpringSettings;
            Ref<ForceFieldManagerSettings> ForcefieldManagerSettings;
            Ref<SnowInteractionSettings> SnowInteractionSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD64646B44888B663, 0x60)]
        public class LevelingCareerUnlockResource : CareerUnlockResource
        {
            Array<Ref<CareerUnlockResource>> CareerUnlockLevels;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2DA9E5EEA363172, 0x1B0)]
        public class Light : GeometryObject
        {
            String Name;
            FRGBAColor LightColor;
            float Intensity;
            ELayerOperation LayerOp;
            bool CastShadows;
            ECastingShadowQuality CastingShadowQuality;
            EForwardShadowCastMode ForwardShadowCastMode;
            bool UsePreciseRendering;
            bool AffectFirstPersonOnly;
            EFalloffType FalloffType;
            ELightInfluenceAccuracy InfluenceAccuracy;
            Vec4 AreaLightParams;
            Ref<LightResource> Resource;
            Ref<LensFlareInstance> LensFlare;
            float VolumeLightAmount;
            float VolumeLightAmountMinScale;
            int VolumeLightSampleCount;
            float VolumeHenyeyGreensteinG;
            FRange DistanceFadeRange;
            FRange NearFadeRange;
            bool RenderToLightSamplingBuffer;
            FRange LightSamplingFadeRange;
            Ref<FlickerLight> FlickerLight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48E57196775CC9D1, 0x40)]
        public class LightBakeOnlyVisible : CoreObject
        {
            Array<String> _LightBakeOnlyVisible;
            Array<Ref<StaticMeshResource>> StaticMeshResourceList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8BAB9E5649D3239, 0x18)]
        public class LightCollectionIdentifier
        {
            ELightCollectionIdentifierMode Mode;
            String Identifier;
            float TimeOfDay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7AB790CD01A15BEF, 0x78)]
        public class LightEventInstance : LightEventInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED5952FE62A33302, 0x58)]
        public class LightEventInstanceBase : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E9A0949EA847991, 0x70)]
        public class LightEventResource : LightEventResourceBase
        {
            Ref<LightResource> LightResource;
            Ref<LocatorResource> PositionLocatorResource;
            Vec3 LightForward;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6398A930A39205EB, 0x48)]
        public class LightEventResourceBase : TimedEventResource
        {
            Ref<CurveResource> IntensityCurveResource;
            bool LoopIntensity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E6D2F00E15CE2E7, 0xC0)]
        public class LightProbe
        {
            Vec3 Position;
            SHVector4x9 SHCoeffs;
            FRGBAColor Modifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B8B7E53E16D038C, 0x110)]
        public class LightProbeExcludeZone : GeometryObject
        {
            Shape2DExtrusion base_Shape2DExtrusion;
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32B0424D3A1854D, 0x120)]
        public class LightProbeHintSurface : GeometryObject
        {
            Shape2DExtrusion base_Shape2DExtrusion;
            String Name;
            HintedLightProbeCreationProperties HintedLightProbeCreationProperties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28B9804A836B4177, 0xA0)]
        public class LightProbeSetResource : Resource
        {
            ELightProbeSetType SetType;
            Array<uint8> ProbeTreeData;
            Array<uint8> ProbeShData;
            Ref<Texture> ProbeShTexture;
            Array<Vec3> ProbePosList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD535B1D23822CE9E, 0x190)]
        public class LightResource : Resource
        {
            Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
            ELightAreaType LightAreaType;
            Vec4 AreaLightParams;
            FRGBAColor LightColor;
            float Intensity;
            ELayerOperation LayerOp;
            bool EmitDiffuse;
            bool EmitSpecular;
            bool CastShadows;
            ECastingShadowQuality CastingShadowQuality;
            EForwardShadowCastMode ForwardShadowCastMode;
            bool UsePreciseRendering;
            bool AffectFirstPersonOnly;
            ELightInfluenceAccuracy InfluenceAccuracy;
            EFalloffType FalloffType;
            Vec3 CoronaOffset;
            Ref<LensFlareResource> LensFlare;
            float VolumeLightAmount;
            float VolumeLightAmountMinScale;
            int VolumeLightSampleCount;
            float VolumeHenyeyGreensteinG;
            FRange DistanceFadeRange;
            FRange NearFadeRange;
            bool RenderToLightSamplingBuffer;
            FRange LightSamplingFadeRange;
            Ref<FlickerLight> FlickerLight;
            String IntensityGlobalRenderVariableName;
            Ref<RenderEffectResource> RenderEffectsResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6A67C103CCE0902, 0x210)]
        public class LightShadowed : Light
        {
            int ShadowMapSize;
            int FilterSamplesCount;
            float DepthBias;
            float FilterSize;
            float ScreenSizeThreshold;
            float ShadowMapSizeThreshold;
            Vec2 StopShadowCastingSizeRange;
            Vec2 StopShadowCastingDistanceRange;
            Vec4 ShadowMapSizeLODDistances;
            EShadowmapCacheForStaticGeometry ShadowmapCacheMethod;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE01A1F890E4D6C62, 0x1F0)]
        public class LightShadowedResource : LightResource
        {
            int ShadowMapSize;
            int FilterSamplesCount;
            float DepthBias;
            float FilterSize;
            float ScreenSizeThreshold;
            float ShadowMapSizeThreshold;
            Vec2 StopShadowCastingSizeRange;
            Vec2 StopShadowCastingDistanceRange;
            Vec4 ShadowMapSizeLODDistances;
            EShadowmapCacheForStaticGeometry ShadowmapCacheMethod;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F241F51DDEC97A6, 0x50)]
        public class LightShaftSettings
        {
            bool Enabled;
            bool UseAngularOffsetsDirectly;
            bool UseTemporalFilter;
            float HorizontalAngularOffset;
            float VerticalAngularOffset;
            float MaskPower;
            float Intensity;
            float FalloffAnglePower;
            FRGBAColor BlendColor;
            FRGBAColor MultiplyColor;
            float Decay;
            float DistanceMultiplier;
            float Weight;
            float AttenuationMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EAE8F56D7DA3B86, 0x80)]
        public class LightShaftSettingsResource : Resource
        {
            LightShaftSettings LightShaftSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC8D9E71E69077CA, 0x38)]
        public class LightbakeOnlyGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC00942BB68CBCBC, 0xB0)]
        public class LightingManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1077BB46BCF959E, 0x58)]
        public class LightingRigComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF52E716681972C64, 0x90)]
        public class LightingRigComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD83E678C6A3D40D4, 0x38)]
        public class LightingRigComponentResource : EntityComponentResource
        {
            Ref<LightResource> LightResource;
            Ref<OverrideGraphProgramResource> OverrideLightRepPropertiesGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA77AA8910B2526EE, 0x70)]
        public class LimitConcurrentEntitiesComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA41A83B55B0DE53, 0x38)]
        public class LimitConcurrentEntitiesComponentResource : EntityComponentResource
        {
            String Group;
            int MaxAmount;
            bool LimitIsPerPlayer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFAC54C35DEC29500, 0x90)]
        public class LinearLUT_8
        {
            Vec3 Sample0;
            Vec3 Sample1;
            Vec3 Sample2;
            Vec3 Sample3;
            Vec3 Sample4;
            Vec3 Sample5;
            Vec3 Sample6;
            Vec3 Sample7;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A2D47F82DC49805, 0x18)]
        public class LinkToEventInReferencedSequence
        {
            Ref<EventResource> EventResource;
            String AttributeName;
            Ref<EventResource> ReferencedEventResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6440DE701C7804E3, 0x78)]
        public class LinkedSoundParameterComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF919609437AE662E, 0x38)]
        public class LinkedSoundParameterComponentResource : EntityComponentResource
        {
            Array<Ref<LinkedSoundParameterGroup>> Groups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD29232A09AD17E48, 0x60)]
        public class LinkedSoundParameterGroup : RTTIRefObject
        {
            Array<NameToSoundParameterMapping> AnimationEventToSoundParameterMapping;
            Array<NameToSoundParameterMapping> AnimationTagToSoundParameterMapping;
            Array<BoolPropertyToSoundParameterMapping> BoolPropertyToSoundParameterMapping;
            String AnythingSetSoundParameterName;
            String AnythingNotSetSoundParameterName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DDA22A1A162EF6F, 0x68)]
        public class LinkedUUIDComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9AAFCC7241715BC8, 0xD8)]
        public class ListItemTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54BA1CB780AFED7D, 0x140)]
        public class ListItemWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1022144B630DEBE6, 0xE0)]
        public class ListTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x21D8D83BFE98566F, 0x1B0)]
        public class ListWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED3FF02F571EB2BF, 0x50)]
        public class LoadingHint : Resource
        {
            Ref<LocalizedTextResource> Hint;
            Ref<LocalizedTextResource> Hint_keyboard;
            Ref<LoadingHintConditionBase> Condition;
            float DisplayTime;
            int Cooldown;
            bool IsDLCOnly;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF641FAFAB86C35, 0x38)]
        public class LoadingHintConditionAnd : LoadingHintConditionBase
        {
            Array<Ref<LoadingHintConditionBase>> LoadingHintConditions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x774863ACFC2ECD52, 0x28)]
        public class LoadingHintConditionBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0F79C7A5D6B5A7, 0x30)]
        public class LoadingHintConditionBooleanFact : LoadingHintConditionBase
        {
            Ref<BooleanFact> BooleanFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAEAE9125075AEE8B, 0x58)]
        public class LoadingHintConditionCauseOfDeath : LoadingHintConditionBase
        {
            Array<UUIDRef<DamageTypeResource>> DamageTypeResources;
            Array<UUIDRef<EntityResource>> KillerEntityResources;
            Array<UUIDRef<EntityResource>> KillerWeaponResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8329472C15B92F74, 0x30)]
        public class LoadingHintConditionEntitlement : LoadingHintConditionBase
        {
            Ref<EntitlementResource> Entitlement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB855FA3260EFAA00, 0x40)]
        public class LoadingHintConditionEnumFact : LoadingHintConditionBase
        {
            Ref<EnumFact> EnumFact;
            Ref<EnumFactValue> EnumFactValue;
            bool AllowGreaterValues;
            bool AllowSmallerValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5514C9437F5A743, 0x38)]
        public class LoadingHintConditionItemAcquired : LoadingHintConditionBase
        {
            UUIDRef<EntityResource> Item;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2C6ABEA06E2D5A6, 0x28)]
        public class LoadingHintConditionNewGamePlus : LoadingHintConditionBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF7ED9B3912E1FDDB, 0x38)]
        public class LoadingHintConditionOr : LoadingHintConditionBase
        {
            Array<Ref<LoadingHintConditionBase>> LoadingHintConditions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59DF073CFC432910, 0x48)]
        public class LoadingHintGroup : Resource
        {
            Array<Ref<LoadingHint>> LoadingHints;
            int Priority;
            int MaxDisplayCountPerLoadingScreen;
            int Cooldown;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC2686B4DD02F6AC, 0x88)]
        public class LoadingHintSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1250FBFC6BD354AF, 0x40)]
        public class LoadingHintSystemResource : Resource
        {
            Array<Ref<LoadingHintGroup>> LoadingHintGroups;
            float TimeBetweenHints;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9C898F780BD3294, 0x30)]
        public class LocalizedAnimationResource : ResourceWithoutLegacyName
        {
            Array<AnimationResourceTranslation> Animations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD522203CD5B7178F, 0x58)]
        public class LocalizedShaderVariableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x598A61E32D7DF003, 0x38)]
        public class LocalizedShaderVariableComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2B2460A38E0669A, 0x40)]
        public class LocalizedShaderVariableComponentResource : EntityComponentResource
        {
            Array<ELanguage> Languages;
            String LanguageShaderVariable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF73C79417552568E, 0x130)]
        public partial class LocalizedSimpleSoundResource : SimpleSoundResource, RTTI.IExtraBinaryDataCallback
        {
            Ref<SoundMixStateResource> SoundMixState;
            Ref<LocalizedSoundPreset> Preset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77CBAE4136D6E19C, 0x88)]
        public class LocalizedSoundPreset : CoreObject
        {
            float DefaultVolume;
            float DefaultLfeVolume;
            float WetLevel;
            float MinDist;
            float MaxDist;
            float PressureLevel;
            float AttenuationLinearity;
            float AttenuationSlope;
            ESoundMasterVolumeGroup MasterVolumeGroup;
            bool UsesHDRSystem;
            bool AffectedByTimeScale;
            float InitialRMS;
            float WetMinRange;
            float WetMaxRange;
            float WetLevelBias;
            float PanModificationDistance;
            float OcclusionFactor;
            float ObstructionFactor;
            float DopplerFactor;
            float MaxAzimuthDelta;
            bool ProximityRadio;
            bool ShouldAlsoPanToCenter;
            Ref<SoundMixStateResource> SoundMixState;
            EWaveDataEncodingHint DesiredEncoding;
            EWaveDataEncodingQuality EncodingQuality;
            float ObstructionRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB89A596B420BB2E2, 0x38)]
        public partial class LocalizedTextResource : ResourceWithoutLegacyName, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4890C7C94E2DEF9, 0xA8)]
        public class LocalizedTextSuggestionResource : Resource
        {
            String QAChangeID;
            String RecordType;
            String RecordKey;
            String RecordLanguage;
            WString OriginalSourceText;
            WString NewText;
            WString NewAnnotation;
            ETranslationStatus NewApproved;
            String DevTrackNr;
            String QACreatedOn;
            String QACreatedBy;
            int GGHandled;
            String GGHandledOn;
            String GGHandledBy;
            String GGHandledReason;
            Ref<LocalizedTextResource> Record;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42328F43C04745A1, 0x28)]
        public class LocalizerCategory : CoreObject
        {
            bool ExportForTranslation;
            int OrderIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79B8AA048490B047, 0x28)]
        public class LocalizerLevel : CoreObject
        {
            bool ExportForTranslation;
            int OrderIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E31C7CEB4FD3E1E, 0x18)]
        public class LocationAndUUID
        {
            String Location;
            GGUUID UUID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95BA8ACFBED51E39, 0xC0)]
        public class LocationMarker : ParentWorldNode
        {
            Ref<LocationMarkerResource> Resource;
            Ref<CollisionTrigger> Area;
            float AreaBufferSize;
            Vec2 AreaImageLocalOffset;
            Vec2 AreaImageSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x91313635D2D5F84B, 0x50)]
        public class LocationMarkerBreadcrumbingSettings : Resource
        {
            Ref<BooleanFact> Fact;
            float ApproachDistance;
            float SeekDistance;
            float MinDistance;
            float PortalMarkerHeight;
            float RoadMarkerHeight;
            float AngleTestMinimumDistance;
            float MaxRoadSegmentAngle;
            float MaxPlayerToNodeAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7F4BF20FD8A09F29, 0x60)]
        public class LocationMarkerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE4F763C6A2E6635, 0x40)]
        public class LocationMarkerComponentResource : EntityComponentResource
        {
            Ref<LocationMarkerResource> LocationMarker;
            Ref<LocalizedTextResource> MarkerText;
            bool ShowWhenDead;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE4DB6653C1A5508, 0x50)]
        public class LocationMarkerDiscovererSettings : Resource
        {
            Ref<LocalizedTextResource> IndicatedText;
            float IndicatedDistance;
            float DefaultDiscoveryDistance;
            Ref<LocationMarkerState> Undiscovered;
            Ref<LocationMarkerState> Indicated;
            Ref<LocationMarkerState> Discovered;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC65948F0A40DFD08, 0x110)]
        public class LocationMarkerEntityInstance : LocationMarkerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x388B6921AC37C313, 0x40)]
        public class LocationMarkerIconData : CoreObject
        {
            Ref<UITexture> UIIcon;
            Ref<UITexture> UIAreaIcon;
            float MaxDistance;
            bool Breadcrumb;
            int Index;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A6190D03BD9F6AE, 0xD8)]
        public class LocationMarkerInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD8A42A5E5D5A2DA0, 0x58)]
        public class LocationMarkerInstanceStack : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34C334F5B7898842, 0x150)]
        public class LocationMarkerManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x717839D71DB5F7AD, 0xE0)]
        public class LocationMarkerMarkerInstance : LocationMarkerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A6EFB938901BBFE, 0x10)]
        public class LocationMarkerPriority
        {
            int Priority;
            Ref<LocationMarkerState> State;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC882793700A4F0DC, 0x30)]
        public class LocationMarkerRep : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB8B0AEF2843CCB5, 0x58)]
        public class LocationMarkerRepCompass : LocationMarkerRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30454D0967331462, 0x60)]
        public class LocationMarkerRepCompassResource : LocationMarkerRepResource
        {
            int SortOrder;
            bool IsSticky;
            bool DisplayInsideAreaIndicator;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F60D54ACF5D81BB, 0x68)]
        public class LocationMarkerRepHUD : LocationMarkerRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3725E1995EAEE094, 0xD8)]
        public class LocationMarkerRepHUDAwareness : LocationMarkerRepHUD
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16FEF2CDA82B3A9C, 0xE0)]
        public class LocationMarkerRepHUDAwarenessResource : LocationMarkerRepHUDResource
        {
            Ref<HUDElementResource> RootElement;
            Ref<HUDImageResource> BackgroundImage;
            Ref<HUDImageResource> TaggedImage;
            Ref<HUDImageResource> TypeImage;
            Ref<HUDImageResource> OverlayImage;
            Ref<HUDImageResource> BlinkImage;
            Ref<HUDShaderResource> SearchTimeShader;
            Ref<HUDLogicGroupResource> LogicGroupResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A6A09D45F407B33, 0xA0)]
        public class LocationMarkerRepHUDResource : LocationMarkerRepResource
        {
            Ref<HUDLogicGroupResource> HUDLogicGroup;
            bool ShowInSequence;
            Vec3 DefaultHelperPosition;
            bool ShowDistance;
            bool VisibleInView;
            bool HideWhenNotInView;
            Array<Ref<LocationMarkerState>> ForceShowOnBreadcrumbStates;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D48D4469F49A91A, 0x310)]
        public class LocationMarkerRepMap : LocationMarkerRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EB43F54E7F59187, 0x310)]
        public class LocationMarkerRepMapFastTravel : LocationMarkerRepMap
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB14EE070349A5, 0xE0)]
        public class LocationMarkerRepMapFastTravelResource : LocationMarkerRepMapResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC09D125DE791A94, 0xE0)]
        public class LocationMarkerRepMapResource : LocationMarkerRepResource
        {
            int DrawOrder;
            float FadeTime;
            Ref<MapRoadRenderSettingsResource> RoadSettings;
            Ref<UITexture> UIHighlightTexture;
            FRGBAColor HighlightColorLineair;
            Ref<CurveResource> HighlightCurve;
            float VerticalTextOffset;
            bool HasOrientation;
            bool CanBeSelected;
            bool UseExplorationQueueToReveal;
            Array<Ref<LocationMarkerState>> DisplayWhenOffscreenOptionStates;
            Ref<CurveResource> AnimationScaleCurve;
            Ref<MapIconFilter> MapIconFilter;
            Array<Ref<LocationMarkerState>> StatesThatIgnoreFilter;
            bool ShouldRevealIconFilter;
            Array<Ref<MapIconFilter>> AdditionallyRevealedFilters;
            int MinimumScreenAreaSize;
            EMapZoomLevel ZoomVisibilityLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x171A9F86584C72DF, 0x58)]
        public class LocationMarkerRepResource : Resource
        {
            Ref<UITexture> UIWaypointIcon;
            Array<Ref<MarkerRepState>> WaypointedStates;
            Array<Ref<MarkerRepState>> States;
            bool ShouldBeDisplayedWhenFar;
            bool ShouldBeDisplayedWhenNear;
            bool ShouldBeDisplayedWhenInside;
            bool HideFarMarkerWhenInvisible;
            bool HideNearMarkerWhenInvisible;
            bool HideInsideMarkerWhenInvisible;
            bool HideWhenDead;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9AED97E87FCAE2FE, 0xA0)]
        public class LocationMarkerResource : Resource
        {
            Array<LocationMarkerPriority> Priorities;
            Array<Ref<LocationMarkerRepResource>> Representations;
            Vec2 AreaSizeOverride;
            Ref<ConditionResource> VisibilityConditionResource;
            bool DefaultEnabled;
            bool CanBeWaypointed;
            Array<Ref<LocationMarkerState>> BreadcrumbingStates;
            Array<Ref<LocationMarkerState>> DrawAreaStates;
            Ref<LocationMarkerState> DefaultState;
            bool HideWhenInDifferentMapZone;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56E3049AA7D38496, 0xB0)]
        public class LocationMarkerResourceWithBreadcrumbingOverride : LocationMarkerResource
        {
            Ref<LocationMarkerBreadcrumbingSettings> BreadcrumbingOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73D1E858416176A, 0x28)]
        public class LocationMarkerState : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD543BBC7EFD91F3A, 0x50)]
        public class LocationMarkerUpdaterSettings : Resource
        {
            Ref<LocationMarkerState> TrackedMarkerState;
            UUIDRef<HUDLogicGroupResource> QuestTracker;
            Array<Ref<LocationMarkerBreadcrumbingSettings>> BreadcrumbingSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE864CD45B0FFBCA, 0x40)]
        public class LocationProximityQuestTrigger : QuestTrigger
        {
            float Distance;
            bool TriggerWhenOutside;
            UUIDRef<WorldNode> Node;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA365DBA88BD3C3, 0x40)]
        public class LocationProximityQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E9A7005A31FBE5C, 0x60)]
        public class LocatorInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE33F184DF34C5C95, 0x38)]
        public class LocatorResource : TimedEventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34F5FA1B43A8DDE0, 0x70)]
        public class LockableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x926BCAA4B72583B6, 0x58)]
        public class LockableComponentResource : EntityComponentResource
        {
            Array<String> KindOF;
            Array<String> Names;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33AFF1FE57D90632, 0x130)]
        public class LocomotionMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69600FC0DF4C4651, 0x30)]
        public class LocomotionMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA534187C4B49615E, 0x8)]
        public class LocomotionProviderInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x744B5A860EEA956A, 0x58)]
        public class LodDistanceOverrideComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x893E98CA35D94DBB, 0x30)]
        public class LodDistanceOverrideComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4EF897CCBA267EFA, 0x30)]
        public class LodDistanceOverrideComponentResource : EntityComponentResource
        {
            float LodDistanceScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F5D6D208C0B35B4, 0xB0)]
        public class LodMeshResource : MeshResourceBase
        {
            float MaxDistance;
            Array<LodMeshResourcePart> Meshes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCB11F6F37633EF3, 0x20)]
        public class LodMeshResourcePart
        {
            Ref<MeshResourceBase> Mesh;
            float Distance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC61EBD08E833AE3, 0x310)]
        public class LookAtComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C82F6AC836B5044, 0x68)]
        public class LookAtEntitiesComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84935EE838FB8910, 0x50)]
        public class LookAtEntitiesComponentResource : EntityComponentResource
        {
            Ptr<EntityAction> StartedLookingAtEntityAction;
            Ptr<EntityAction> StoppedLookingAtEntityAction;
            String EntityType;
            float Range;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F0D594522A89FC1, 0xD0)]
        public class LookAtEntitiesEventInstance : ConditionalLookEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BB904A51759E927, 0x90)]
        public class LookAtEntitiesEventResource : ConditionalLookEventResource
        {
            bool LookAtHumanoids;
            bool LookAtPlayers;
            bool LookAtAmbientEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77AE824F29E1FB73, 0xC8)]
        public class LookAtEventInstance : LookEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B98B766BD2876DC, 0x50)]
        public class LookAtEventResource : LookEventResource
        {
            Ref<LocatorResource> TargetLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2811AC765656E4E, 0xC8)]
        public class LookAtTargetEventInstance : LookAtEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB3D89389FB48E2B, 0x50)]
        public class LookAtTargetEventResource : LookAtEventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27C656889E14FADD, 0xC0)]
        public class LookEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6973A8B06E73AEC, 0x48)]
        public class LookEventResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            bool JustGlance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2488889CBC55BF54, 0x1D0)]
        public class LookIKComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7675985B0BCC0A8E, 0xB0)]
        public class LookIKComponentResource : EntityComponentResource
        {
            bool LookHeadingFullyRotational;
            FRange LookHeadingRange;
            float LookHeadingAcceleration;
            float LookHeadingSpeed;
            FRange LookPitchRange;
            float LookPitchAcceleration;
            float LookPitchSpeed;
            String LookAtAnimVarName;
            String LookIKTargetAnimVarName;
            String LookIKWeightAnimVarName;
            String LookPitchAnimVarName;
            String LookHeadingAnimVarName;
            Ref<GraphProgramResource> GraphProgramResource;
            float IKWeightBlendDuration;
            float IKWeightBlendOutDuration;
            String RootIKBone;
            String EndIKBone;
            FRange MaxIKHeadingRange;
            FRange MaxIKPitchRange;
            String DisableLookIKAnimationTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FCBFC0EB0707995, 0x38)]
        public class LookSpeedSettings : Resource
        {
            float MaxRotationSpeed;
            float MaxRotationAcceleration;
            float RotationSpeedDamping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B7397C556844497, 0x48)]
        public class LootContainerRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B9DD34BD83ADB76, 0x50)]
        public class LootData : LootDataInterface
        {
            Array<Ref<LootDataInterface>> LootItems;
            int Amount;
            bool ItemsShouldBeUnique;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF07C5A99F746F89, 0x38)]
        public class LootDataInterface : Resource
        {
            float Probability;
            Ref<LootDataSettings> DataSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0331A764211BE8F, 0x38)]
        public class LootDataSettings : Resource
        {
            int RollBufferCount;
            float IncrementPercentage;
            ELootDataIncrementType IncrementType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC56221C313345FD9, 0x40)]
        public class LootItem : LootDataInterface
        {
            Ref<EntityResource> ItemResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1FE86E6E5A6F2E8, 0x70)]
        public class LootItemDescriptionResource : Resource
        {
            Array<Ref<LocalizedTextResource>> LootItemLocation;
            Array<Ref<LocalizedTextResource>> LootItemUse;
            ELootItemRarity LootItemRarity;
            ELootItemCategory LootItemCategory;
            Array<Ref<LocalizedTextResource>> AdditionalLootItemLocation;
            Array<Ref<LocalizedTextResource>> AdditionalLootItemUse;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC13D714D24C8A14, 0x50)]
        public class LootItemRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A45F279A53A5931, 0xC0)]
        public class LootPackageRestoreState : ItemRestoreState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA19AA6E50BD842C7, 0x40)]
        public class LootSlot : Resource
        {
            Array<Ref<LootDataInterface>> LootData;
            Ref<LootSlotSettings> Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD176199F0A8289F1, 0x18)]
        public class LootSlotPerkSettings : RTTIObject
        {
            Ref<PerkLevel> PerkLevel;
            float PercentageChance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x252ECBC40EBD406C, 0x40)]
        public class LootSlotSettings : Resource
        {
            Array<LootSlotPerkSettings> LootSlotPerkSettings;
            float DefaultPercentageChance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD0EBFF3E8812F562, 0x250)]
        public class LureEnemyComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE684591CC639E427, 0x38)]
        public class LureEnemyComponentResource : EntityComponentResource
        {
            Ref<AISignalType> LureGestureSignal;
            float TargetConeAngle;
            float MaxDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDDAF96126EBCD671, 0x100)]
        public class Magazine : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A04EC2D21FC5F98, 0xC8)]
        public class MagazineRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8FE07830BBFD7FA4, 0xC0)]
        public class MagazineResource : WeaponPartResource
        {
            bool InfiniteAmmo;
            bool AlwaysFullMagOnLoad;
            bool InfiniteReserves;
            int RoundsPerMagazine;
            bool ShouldAddAmmoToCurrentMag;
            Ref<AmmoType> AmmoType;
            Ref<AmmoResource> DefaultAmmoResource;
            Array<Ref<AmmoMutatorResource>> AmmoMutators;
            int AmmoLowWarningAmount;
            int InitialAmmo;
            float RoundsPerCycle;
            Ref<ReloadDurationSettings> ReloadDurationsNormal;
            Ref<ReloadDurationSettings> ReloadDurationsRaised;
            bool OneCyclePerReload;
            Ref<ReloadDurationsAnimationReference> ReloadDurationsAnimationReference;
            String ReloadAnimationTag;
            Ref<SoundResource> ReloadStartSound;
            Ref<SoundResource> ReloadCycleSound;
            Ref<SoundResource> ReloadFinishSound;
            Ref<ParticleSystemResource> ReloadParticles;
            Ref<ParticleSystemResource> FirstPersonReloadParticles;
            float ReloadParticlesDelay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A468BCA6C6EF6F0, 0xC)]
        public class MagnetLookAtSettings
        {
            bool Apply;
            float Duration;
            float CooldownTimer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78B2BFED07F2636A, 0x38)]
        public class MapIconFilter : Resource
        {
            Ref<LocalizedTextResource> Description;
            Ref<UITexture> Icon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x238BBD033CC286E7, 0x620)]
        public class MapInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2AA804FB8FBB115, 0x50)]
        public class MapMarkerFontSettings
        {
            FRGBAColor FontColor;
            FRGBAColor ShadowColor;
            Vec2 ShadowOffset;
            Ref<FontResource> Font;
            int FontSize;
            float ShadowOutlineOffset;
            ELanguage Language;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55954E63D9B7F482, 0x40)]
        public class MapProjectionSettings : Resource
        {
            Ref<CurveResource> DepthScale;
            float DepthBias;
            float MaxDepth;
            float StoredDepthScale;
            float RenderPlaneZ;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA71A1D3CBB1DC912, 0x1D0)]
        public class MapResource : Resource
        {
            Ref<CurveResource> Selection_ZoomSpeed;
            float DeadZone;
            float MaxZoom;
            float InitialZoom;
            bool AlwaysUseInitialZoom;
            FRange InteriorMapZoom;
            Ref<CurveResource> ScrollSpeed;
            float ScrollDampeningFactor;
            Ref<UITexture> SelectionImage;
            float SelectionScale;
            float SelectionRadius;
            Ref<CurveResource> SelectionMagnetStrengthForSpeedCurve;
            Ref<CurveResource> Touchpad_ZoomSpeed;
            Ref<CurveResource> HorizontalScrollSpeed;
            Ref<CurveResource> TouchVerticalScrollSpeed;
            float WidthInWorldCoords;
            Ref<Texture> OffscreenMarkerTexture;
            int OffscreenMarkerBorderWidth;
            Ref<Texture> MarkerShadowBlobTexture;
            float MarkerShadowBlobSize;
            Ref<ShaderResource> MapAreaSDFShader;
            Ref<ShaderResource> MapRoadShader;
            float PanningSpeed;
            Ref<CurveResource> ZoomLevelForDistance;
            Ref<CurveResource> ShowOnMapZoomLevelTrajectory;
            Ref<CurveResource> ShowOnMapDistanceTrajectory;
            float Medium;
            float High;
            MapMarkerFontSettings TitleFontSettings;
            Array<MapMarkerFontSettings> TitleFontSettingsOverrides;
            MapMarkerFontSettings DetailsFontSettings;
            Array<MapMarkerFontSettings> DetailsFontSettingsOverrides;
            float OnDifferentMapOpacity;
            float MarkerIconShadowSize;
            float MarkerIconShadowOpacity;
            Ref<UITexture> StairwellIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CDE2E32AC4E5B88, 0x40)]
        public class MapRoadRenderSettingsResource : Resource
        {
            Ref<UITexture> RoadTexture;
            float RoadWidth;
            float DistanceBetweenRoadSteps;
            float Smoothness;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE54BAD505ED0D6D4, 0xD0)]
        public class MapTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5FE983D44570D433, 0x10)]
        public class MapTextureTile
        {
            Ref<Texture> ColorTexture;
            Ref<Texture> DepthTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59EBC7AD0DBB2E62, 0x10)]
        public class MapTextureTileRow
        {
            Array<MapTextureTile> Textures;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DDC990284016C88, 0x10)]
        public class MapViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF0EF24E4AE853DD, 0x150)]
        public class MapWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24EAC7C7ECFC6743, 0xB0)]
        public class MapZone : MapZoneBase
        {
            GGUUID OriginalUUID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B204677E2C11E3A, 0x70)]
        public class MapZoneBase : ParentWorldNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BECF2413418709C, 0xB0)]
        public class MapZoneManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA9F00058A38BF8F, 0x80)]
        public class MapZonePortal : MapZoneBase
        {
            Ref<MapZonePortalSide> SideA;
            Ref<MapZonePortalSide> SideB;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCCF13B499F134BF1, 0xD0)]
        public class MapZonePortalSide : WorldNode
        {
            Vec3 MarkerOffset;
            Ref<ConditionResource> Lock;
            UUIDRef<MapZone> Zone;
            float ExtraTraversalCost;
            bool IgnoreDistanceCost;
            bool CanBeEnteredFromThisSide;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8945CAABB315AA0F, 0xA0)]
        public class MapZoneRevealArea : ParentWorldNode
        {
            Array<Ref<CollisionTrigger>> AreaTriggers;
            EMapZoneRevealAreaMode TriggerMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB668A7CE7940B841, 0xD0)]
        public class MapZoneSection : MapZone
        {
            Array<Ref<MapZoneRevealArea>> RevealAreas;
            bool IsStairwell;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA511CD441527484E, 0x90)]
        public class MappedExterior : ParentWorldNode
        {
            Array<Ref<MapZoneSection>> Sections;
            Array<Ref<MapZonePortal>> Portals;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9AF0971ACA8A853E, 0xC0)]
        public class MappedFloor : ParentWorldNode
        {
            bool UpdateFogOfWar;
            Array<Ref<MapZoneSection>> Sections;
            Array<MappedFloorTextureRect> Textures;
            GGUUID OriginalUUID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6AA52D89F80EABF, 0x30)]
        public class MappedFloorTextureRect
        {
            FRect Rectangle;
            StreamingRef<Texture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C110F8F1071C598, 0xB0)]
        public class MappedInterior : ParentWorldNode
        {
            Array<Ref<MappedFloor>> Floors;
            Array<Ref<MapZonePortal>> Portals;
            int MapInitialFloorIndex;
            EFloorNrDirection FloorIndexOrder;
            Ref<AmbienceCycle> BakeOverrideCycle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC5C5F307EF02A00, 0x50)]
        public class MarkerRepState : Resource
        {
            Ref<LocationMarkerState> MarkerState;
            Array<Ref<LocationMarkerIconData>> Icons;
            FRGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCCC7A7CA13D57149, 0x38)]
        public class MasterBusSettings : Resource
        {
            Array<Ref<SoundMasterParametersResource>> SoundMasterParameters;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC21A91B0F3EB4D5D, 0x50)]
        public class MasterColorizeSettings
        {
            FRGBAColor ShadowColor;
            FRGBAColor MidtoneColor;
            FRGBAColor HighlightColor;
            float Contrast;
            float Brightness;
            float Gain;
            float Gamma;
            float Depth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB95C6811B59F0376, 0x30)]
        public class Mat34
        {
            Vec4Pack Row0;
            Vec4Pack Row1;
            Vec4Pack Row2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16FC45E819F7E789, 0x40)]
        public class Mat44
        {
            Vec4 Col0;
            Vec4 Col1;
            Vec4 Col2;
            Vec4 Col3;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9BE1AA610ED5830, 0x40)]
        public class MatchAssignment : RTTIRefObject
        {
            String RequestUUID;
            String OriginRequestUUID;
            int64 Version;
            String GameID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDA947D77E942C1A, 0xC8)]
        public class MatchAssignmentHandler : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x299FDCB0B0894A2, 0x78)]
        public class MatchAssignmentKIN : MatchAssignment
        {
            Ref<TurbineContext> TurbineContext;
            String Faction;
            String BuildID;
            String PlaylistID;
            int PlaylistVersion;
            int CurrentRound;
            int64 GameCreationTime;
            bool IsSpectator;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x92A8B515FEF6082B, 0x30)]
        public class MatchCancelRequest : MatchMessage
        {
            String TargetUUID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71C2CA99CB86388D, 0x38)]
        public class MatchCancelRequestKIN : MatchCancelRequest
        {
            String Playlist;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C9DB5FBD5D3A41A, 0x48)]
        public class MatchGame : RTTIRefObject
        {
            String GameID;
            int64 Version;
            int64 CreationTime;
            Array<Ref<MatchPlayerGroup>> PlayerGroups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA617656FCA4C4BF, 0x88)]
        public class MatchGameKIN : MatchGame
        {
            String BuildID;
            Ref<TurbineContext> TurbineContext;
            int CurrentRound;
            String PlaylistID;
            int MaxPlayerCount;
            int CurrentRunTime;
            int ExpectedTimeRemaining;
            int NextRoundIndex;
            Array<Ref<MatchPlayerKIN>> Spectators;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x520F724384ED266E, 0x30)]
        public class MatchGameUpdate : MatchMessage
        {
            Ref<MatchGame> Game;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC66BBB3485CA79B2, 0x40)]
        public class MatchGameUpdateKIN : MatchGameUpdate
        {
            String ClanISA;
            String ClanHGH;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37BC07626563BA99, 0x28)]
        public class MatchMessage : RTTIRefObject
        {
            String UUID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2F42296DF13874D, 0x28)]
        public class MatchPlayer : RTTIRefObject
        {
            WString AccountID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC60E8F8CA64B455C, 0x38)]
        public class MatchPlayerGroup : RTTIRefObject
        {
            String RequestID;
            Array<Ref<MatchPlayer>> Players;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1858627B8C480B3F, 0x68)]
        public class MatchPlayerKIN : MatchPlayer
        {
            MatchSkillRating SkillRating;
            String Faction;
            int GameJoinTimeMs;
            int XpEarned;
            Array<Ref<PingTime>> PingTimes;
            WString ClanTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9F04EA354B78C15, 0x38)]
        public class MatchRequest : MatchMessage
        {
            Array<Ref<MatchPlayer>> Players;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD9A889ACF70B218, 0x68)]
        public class MatchRequestKIN : MatchRequest
        {
            String BuildID;
            Array<String> PreferredMaps;
            Array<String> AvailableMaps;
            String Playlist;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28B02D0EF041C76F, 0x50)]
        public class MatchRequestResult : MatchResult
        {
            String RequestUUID;
            float Progress;
            HashMap<String_double> Attributes;
            Array<Ref<MatchAssignment>> Assignments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6168EE4BD26923, 0x20)]
        public class MatchResult : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x628864AFD54D3503, 0x18)]
        public class MatchSkillRating : RTTIObject
        {
            double Value;
            double RD;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10434921AB3D9C5B, 0x90)]
        public class MaterialLightingResource : Resource
        {
            HairMaterial HairMaterial;
            SkinMaterial SkinMaterial;
            FoliageMaterial FoliageMaterial;
            bool UseGGX;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC24706D0392977E, 0x4)]
        public class MaterialTypeReplacement
        {
            MaterialType MaterialType;
            MaterialType Replacement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2063933A503A2FCB, 0x40)]
        public class MaterialTypeResource : Resource
        {
            MaterialType MaterialType;
            MaterialType BaseMaterialType;
            RGBAColor DebugColor;
            EMaterialDebugType DebugType;
            bool BlocksVision;
            bool BlocksAIBulletFireTest;
            float TransmissionLoss;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EEA66852C8E3960, 0x60)]
        public class MaterialTypeResourceGame : MaterialTypeResource
        {
            float StandSpeedModifier;
            float CrouchSpeedModifier;
            float FrictionModifier;
            int BlockingPower;
            float Hardness;
            bool BlocksExplosion;
            Ref<CurveResource> RicochetProbabilityCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A7314DFB4ECA7DB, 0x40)]
        public class MedalQuestRewardDisplayEntry : Resource
        {
            Ref<UITexture> MedalIcon;
            Ref<UITexture> RewardIcon;
            Ref<LocalizedTextResource> RewardName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3782A93C151632C0, 0x78)]
        public class MeleeAttackEventInstance : PausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B5AE9CBE7CBF281, 0x48)]
        public class MeleeAttackEventResource : PausableEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            Ref<LocatorResource> TargetLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAAD429257E4D054, 0xA0)]
        public class MeleeDamageBox : MeleeDamageShapeType
        {
            BoundingBox3 Box;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x406486774E331849, 0x70)]
        public class MeleeDamageComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x251D622FC835A97B, 0x30)]
        public class MeleeDamageComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78AD26FD3F3BDC8A, 0x100)]
        public class MeleeDamageComponentResource : EntityComponentResource
        {
            Array<Ref<MeleeDamageShapeResource>> DamageShapes;
            Ref<AIAuralStimulusResource> AuralStimulusOnImpact;
            String DamageLocationHelper;
            Mat44 LocalMatrix;
            Ref<MeleeDamageShapeType> Shape;
            bool UseSweptDamage;
            bool CanHitWorld;
            Array<Ref<DamageSettings>> DamageSettings;
            EMeleeDamageImpulseDirectionType ImpulseDirectionType;
            Vec3 EntityImpulseDirection;
            MaterialType DamageMaterialType;
            bool ApplyImpactAnimationOnParent;
            float ImpactAnimationSpeed;
            float ImpactAnimationDuration;
            float TargetImpactAnimationSpeed;
            float TargetImpactAnimationDuration;
            Ptr<EntityAction> DamageAction;
            Ref<GraphProgramResource> ModifyDamageGraphResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F79FDB609389E3C, 0xB0)]
        public class MeleeDamageDirectionalShapeCurve : MeleeDamageShapeType
        {
            Ref<CurveResource> ShapeCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9F339901FCE886C, 0xA0)]
        public class MeleeDamageShapeResource : Resource
        {
            Array<Ref<MeleeDamageShapeType>> ShapeTypes;
            bool UseSweptDamage;
            bool CanHitWorld;
            Array<Ref<DamageSettings>> DamageSettings;
            EMeleeDamageImpulseDirectionType ImpulseDirectionType;
            Vec3 EntityImpulseDirection;
            MaterialType DamageMaterialType;
            bool ApplyImpactAnimationOnParent;
            float ImpactAnimationSpeed;
            float ImpactAnimationDuration;
            float TargetImpactAnimationSpeed;
            float TargetImpactAnimationDuration;
            Ptr<EntityAction> DamageAction;
            Ref<GraphProgramResource> ModifyDamageGraphResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9DF9FF5CC76E807, 0x70)]
        public class MeleeDamageShapeType : Resource
        {
            String DamageLocationHelper;
            Mat44 LocalMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB7E843F033D9D87, 0x80)]
        public class MeleeDamageSphere : MeleeDamageShapeType
        {
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBFAFFEA324751C2C, 0x90)]
        public class MeleeWeaponAnimation : Resource
        {
            Ref<SkinnedModelResource> ModelResource;
            String AnimationStateName;
            String AnimationNodeName;
            Array<AnimationVariableValue> AnimationVariables;
            int UserEventID;
            String HitContactJointName;
            Vec3 HitContactPosition;
            Vec3 HitContactWarpOffset;
            float OverrideTurnSpeed;
            AnimationStateID StateID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA5B754746919E7C, 0x150)]
        public class MeleeWeaponAttackTypeResource : Resource
        {
            float StrikeQueuedMoveTimeout;
            float StrikeRequestDuration;
            Array<String> StrikeChargeSuccessAnimationActions;
            Array<String> StrikeAnimationActions;
            String StrikeAnimationTag;
            Ref<EntityComponentResource> DamageComponent;
            Array<Ref<AIFaction>> AlwaysEvaluateFactions;
            Ref<CurveResource> DistanceAutoAimAngleCurve;
            float MaxAutoAimDistance;
            FRange MaxHeightDifference;
            float WarpDistanceFromTarget;
            float InAirMeleeStrikeRadius;
            Vec3 InAirMeleeStrikeOffset;
            BoolPropertyLink AllowedPropertyLink;
            Ptr<EntityAction> StartAttackAction;
            Ptr<EntityAction> StopAttackAction;
            Array<Ref<MeleeWeaponAnimation>> MeleeWeaponAnimations;
            Array<Ref<RobotMeleeWeaponExitState>> AnimationExitStates;
            Ref<WarpedAnimation> WarpedAnimation;
            Array<Ref<WarpedAnimation>> WarpedAnimations;
            String AIAttackId;
            Vec3 DamagePosition;
            float DamageRadius;
            Array<Ref<VolumetricAnnotation>> TriggerVolumes;
            Array<Ref<VolumetricAnnotation>> ExclusionVolumes;
            float MeleeMoveMaxTurnSpeed;
            float MeleeMoveSpeedModifier;
            float AdditionalCollisionRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB73A32D715CCFFB, 0x190)]
        public class MeleeWeaponComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D3C201DF582276D, 0x30)]
        public class MeleeWeaponComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6B4AEECCDF27F8C, 0xA0)]
        public class MeleeWeaponComponentResource : EntityComponentResource
        {
            Array<Ref<MeleeWeaponModeResource>> Modes;
            float ModeSwitchDuration;
            Ptr<EntityAction> StartBlockAction;
            Ptr<EntityAction> StopBlockAction;
            float MeleeMoveMaxTurn;
            float HitNoDamageStaggerImpactSeverity;
            float HitWorldFloorAngle;
            String BlockTag;
            String DirectionalAttackTag;
            float MinRange;
            float MaxRange;
            float DirectionalAttackMovementOverride;
            float DirectionalAttackMovementOverrideDuration;
            String MeleeSwingIndexAnimName;
            String MeleeSkillLevelAnimVarName;
            Array<Ref<PerkLevel>> MeleeSkillLevelPerks;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE37F3F8E428D167F, 0x58)]
        public class MeleeWeaponModeResource : Resource
        {
            int AnimationId;
            BoolPropertyLink EnabledPropertyLink;
            Ref<MeleeWeaponAttackTypeResource> Primary;
            Ref<MeleeWeaponAttackTypeResource> Secondary;
            Array<Ref<MeleeWeaponAttackTypeResource>> AIAttacks;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6205CE39B718BD9, 0x38)]
        public class MemoryFactActionBase : EntityAction
        {
            String Fact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C54FD878518FBA5, 0x110)]
        public class Menu : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7A70953AE74288, 0x60)]
        public class MenuActionBackToPage : MenuActionOpenPage
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57A985DA89250045, 0x20)]
        public class MenuActionDisableNavigation : MenuActionResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEBCFD916B25EA47, 0x20)]
        public class MenuActionEnableNavigation : MenuActionResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CD13F2B83628D7E, 0x28)]
        public class MenuActionHideElement : MenuActionTagProperty
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F008BA6D91CA1C, 0x60)]
        public class MenuActionOpenPage : MenuActionResource
        {
            UUIDRef<MenuPageBase> Page;
            Array<OpenMenuParameter> Parameters;
            Ptr<MenuElementResource> TargetElement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE06614234C9BB106, 0x38)]
        public class MenuActionOpenVKB : MenuActionResource
        {
            Ref<LocalizedTextResource> Label;
            Ref<LocalizedTextResource> DefaultText;
            int MaxCharLength;
            int VKBOptions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BF86215E86CC5B1, 0x20)]
        public class MenuActionQuitMenu : MenuActionResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD7E56567A67D7F6, 0x20)]
        public class MenuActionResource : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FB5B5B09684CEB9, 0x48)]
        public class MenuActionScriptFunction : MenuActionResource
        {
            Ptr<MenuScriptResource> Script;
            String ScriptName;
            String Function;
            Array<String> Arguments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D677C2F2304814B, 0x38)]
        public class MenuActionSetFocus : MenuActionResource
        {
            EMenuActionFocusType Type;
            Ptr<MenuVisualResource> TargetElement;
            bool FindTargetInChildElements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x532CE6EFBD3C7A76, 0x28)]
        public class MenuActionShowElement : MenuActionTagProperty
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F1C65443F513F48, 0x28)]
        public class MenuActionTagProperty : MenuActionResource
        {
            Ptr<MenuVisualResource> TargetElement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF44A1D77CFB1785F, 0x60)]
        public class MenuAnimationInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A0D0023BABBE405, 0x38)]
        public class MenuAnimationKeyFrame : Resource
        {
            int FrameNumber;
            float Value;
            Ref<CurveResource> Curve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x305BB3297BB8885A, 0x58)]
        public class MenuAnimationResource : Resource
        {
            EMenuAnimationTrigger Trigger;
            bool TriggerInverseAnimation;
            ELoopMode LoopMode;
            EMenuAnimationUpdateFrequency Frequency;
            int Blendtime;
            Array<Ref<MenuElementAnimationResource>> PropertyAnimations;
            Ref<MenuActionResource> OnAnimationStart;
            Ref<MenuActionResource> OnAnimationEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C242F6D4D4621BA, 0x30)]
        public class MenuArrayBinding : MenuDataBinding
        {
            Array<Ref<MenuDataBinding>> Elements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB18FAD2ABAD4F96, 0x1D8)]
        public class MenuBadgeManager : StateObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59DB56AA6D033B21, 0x28)]
        public class MenuBoolBinding : MenuDataBinding
        {
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1CC182DB21D8DC1C, 0x50)]
        public class MenuCatalogRobotPartResource : Resource
        {
            Ref<LocalizedTextResource> Name;
            Ref<LocalizedTextResource> Description;
            Ref<UITexture> Texture;
            Ref<UITexture> PreviewTexture;
            Ref<FocusScannableBase> PartScannableBase;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAFC54D8307C3422, 0x38)]
        public class MenuDLCAnimateItemRarityResource : Resource
        {
            Array<UUIDRef<LootItemDescriptionResource>> LootItemDescriptionResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6998361730921B3, 0x20)]
        public class MenuDataBinding : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8607CF8018ED0A24, 0x48)]
        public class MenuDataResource : MenuElementResource
        {
            Ref<DataSourceResource> DataSourceResource;
            int RefreshTimeMs;
            int CacheExpiryMs;
            bool Static;
            bool KeepAlive;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3DC2BBC36BE6CD7, 0x30)]
        public class MenuDataSourceBinding : MenuDataBinding
        {
            String XPath;
            Ptr<MenuDataResource> DataResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9661FDCBA33DF375, 0x30)]
        public class MenuElementAnimationInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71D7D4066DA8C4C7, 0x28)]
        public class MenuElementAnimationResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA32184657A95EEF, 0x30)]
        public class MenuElementResource : Resource
        {
            bool Ignored;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF43B3894CDDB2341, 0x30)]
        public class MenuEventBinding : CoreObject
        {
            EMenuEvent Event;
            Ref<MenuActionResource> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40B0D789D6A859CD, 0x28)]
        public class MenuGraphDataBinding : MenuObjectBinding
        {
            Ref<UIGraphData> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x631D061CDEA4988D, 0x138)]
        public class MenuGraphResource : MenuTextureResource
        {
            Ref<MenuDataBinding> GraphData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA19DF8E894201107, 0x120)]
        public class MenuGridPanelCellResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            Ref<MenuDataBinding> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x781DB886E9902EB7, 0x150)]
        public class MenuGridPanelResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            WString DefaultValue;
            Ref<MenuDataBinding> ColumnCount;
            int RowCount;
            int ScrollTopOffset;
            int ScrollBottomOffset;
            int ScrollRightOffset;
            int ScrollLeftOffset;
            int HorizontalScrollbarOffset;
            float ScrollSpeedX;
            float ScrollSpeedY;
            bool VerticalCycling;
            bool ScrollFading;
            bool LockScroll;
            bool ShowScrollbar;
            bool SkipDisabledCells;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF94975EFA8B18C9F, 0x38)]
        public class MenuGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B42E5A0E3D31BC0, 0x40)]
        public class MenuImageLoaderSystemResource : Resource
        {
            Array<Ref<MenuStreamingTexturesResource>> StreamingTextures;
            Ref<UITexture> FallbackTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC16E9801962ADE93, 0x10)]
        public class MenuInventorySortOrder
        {
            EMenuInventorySortOrder SortOrder;
            Ref<LocalizedTextResource> LegendLabelText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BD81AB6682A9C77, 0x50)]
        public class MenuLayerResource : MenuElementResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            Ptr<MenuElementResource> DefaultFocus;
            bool ShowLegend;
            bool HideMessage;
            float RotationY;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF2321B3B965DE03, 0x40)]
        public class MenuLegendLabelResource : CoreObject
        {
            ELegendButton Button;
            Ref<MenuDataBinding> Text;
            Ptr<MenuLegendResource> TargetLegend;
            Ref<MenuDataBinding> Enabled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66D30B21089AEA49, 0x118)]
        public class MenuLegendResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAD720EAC4A0CBE8, 0x128)]
        public class MenuListItemResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            Ref<MenuDataBinding> Selectable;
            Ref<MenuDataBinding> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9590CEF26F90E8D, 0x138)]
        public class MenuListResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            Ref<MenuDataBinding> DefaultValue;
            float ScrollSpeed;
            bool ShowScrollBar;
            float ScrollUpAreaRatio;
            float ScrollDownAreaRatio;
            bool Wrapping;
            bool ScrollFading;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4995F333EA41CBA8, 0x38)]
        public class MenuLocalizedTextBinding : MenuDataBinding
        {
            Ref<LocalizedTextResource> LocalizedText;
            Array<MenuLocalizedTextParameter> Parameters;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDB35CACB4F736A6, 0x10)]
        public class MenuLocalizedTextParameter
        {
            String ParameterName;
            Ref<MenuDataBinding> ParameterValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB476D16950ECFE62, 0x38)]
        public class MenuLocalizerResource : Resource
        {
            Array<InGameIDToTextResource> InGameIDToResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE6CB9633B182FCB, 0x120)]
        public class MenuMapResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            Ref<MenuDataBinding> ShowSelector;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFB13832875A30C0, 0x640)]
        public class MenuModule : Module
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE94DD731194B391A, 0x60)]
        public class MenuMovieEventInstance : PauseEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FEBA9CAA64A128, 0x40)]
        public class MenuMovieEventResource : PauseEventResource
        {
            String MovieName;
            String MovieStartFrame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8969235F78A2C8E, 0x140)]
        public class MenuMovieResource : MenuVisualResource
        {
            Ref<MenuDataBinding> Source;
            Ref<MenuDataBinding> StartFrame;
            Ref<MenuDataBinding> LoopFrame;
            bool FullScreen;
            bool StartFromLastKeyFrame;
            Array<MovieFrameMenuActionBinding> FrameActions;
            Ref<MenuActionResource> OnMovieEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84E546FF49DB0D2F, 0x38)]
        public class MenuNode : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x171E72F055CDCB30, 0x20)]
        public class MenuObjectBinding : MenuDataBinding
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8980D8745A46C84, 0x70)]
        public class MenuPage : MenuPageBase
        {
            String GUMFile;
            Ref<MenuLayerResource> PageRoot;
            bool HasCursor;
            bool HasErrorHandler;
            bool CanCloseMenu;
            bool DisplayHUD;
            EHAlign HUDHorizontalAlign;
            Array<OpenMenuParameter> Parameters;
            bool ForceOpaque;
            float FadeInDuration;
            float FadeOutDuration;
            Ref<SoundResource> GameToMenuTransitionSound;
            int TargetFrameRateOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47ADA9725CEBB9E3, 0x28)]
        public class MenuPageBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29F0EDC06D0EA471, 0x38)]
        public class MenuPagePlatformSpecific : MenuPageBase
        {
            Ref<MenuPage> PagePS4;
            Ref<MenuPage> PagePC;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3690418877A32CC, 0x18)]
        public class MenuPageScreenEffect
        {
            UUIDRef<MenuPageBase> MenuPage;
            Ref<ScreenEffectResource> ScreenEffect;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BA12BBD3C90D5E8, 0x128)]
        public class MenuPanelResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            bool Scrollable;
            EPanelScrollType ScrollType;
            bool ScrollbarAutoHide;
            bool AdjustToSafeArea;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9D8FDAE064E8E86, 0x60)]
        public class MenuPlatformSpecificElementResource : MenuElementResource
        {
            Array<Ref<MenuElementResource>> ChildElementsPS4;
            Array<Ref<MenuElementResource>> ChildElementsPC;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD6E2A0321B1BA9F, 0x178)]
        public class MenuProgressBarBlockResource : MenuProgressBarResource
        {
            Ref<MenuStyleClass> BarFilledPositive;
            Ref<MenuStyleClass> BarFilledNegative;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2399E2C5E76FC3E, 0x168)]
        public class MenuProgressBarResource : MenuSliderResource
        {
            Ref<MenuDataBinding> CompareValue;
            Ref<MenuDataBinding> BarFillTime;
            bool ProgressTextVisible;
            Ref<MenuStyleClass> Background;
            Ref<MenuStyleClass> BarEmpty;
            Ref<MenuStyleClass> BarFilled;
            Ref<MenuStyleClass> BarNotch;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA1EFBA69ABF91E0, 0x58)]
        public class MenuProjectionResource : Resource
        {
            float Distance;
            float FOV;
            float PanAreaSize;
            float MaxPanX;
            float MaxPanY;
            float PanSpeed;
            float RotStrength;
            float MaxRot;
            float RotSpeed;
            float FixedRot;
            float DepthMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC526FD5552A3F0CE, 0x38)]
        public class MenuPropertyAnimationResource : Resource
        {
            Array<Ref<MenuAnimationKeyFrame>> KeyFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66D212783F6B923D, 0x28)]
        public class MenuQuestTrigger : QuestTrigger
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6E0F0FF000C963, 0x28)]
        public class MenuQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE51FA67D2AAE898, 0x120)]
        public class MenuRadialSectorResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            int StartAngle;
            int EndAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x584E1A6B271CCC6B, 0x118)]
        public class MenuRadialWheelResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD6693F9BA33EEB8, 0xE0)]
        public class MenuResource : Resource
        {
            ISize ScreenSize;
            Ref<MenuLegendResource> DefaultLegend;
            Ref<MenuToastMessageResource> DefaultToastMessage;
            Ref<MenuToastMessageResource> TopRightToastMessage;
            String GUMSourcePath;
            Ref<MenuImageLoaderSystemResource> ImageLoaderResource;
            Ref<MenuProjectionResource> ProjectionResource;
            Array<Ref<MenuStyleClass>> StyleCollection;
            Ref<MenuLocalizerResource> MenuLocalizerResource;
            int PressAndHoldTime;
            Ref<RumbleResource> PressAndHoldRumble;
            Ref<LocalizedTextResource> CensoredToastMessage;
            Ref<LocalizedTextResource> SanitizedToastMessage;
            Array<Ref<SoundResource>> SoundResources;
            Ref<ReverbPresetResource> ReverbPreset;
            Ref<MenuPageBase> StartPage;
            Ref<MenuPageBase> ErrorPage;
            Array<Ref<MenuPageBase>> Pages;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEA988D7B2BF1F38, 0x18)]
        public class MenuSaveDataDialog : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B5D2F4D8AB6C07A, 0x40)]
        public class MenuScriptResource : MenuElementResource
        {
            String ConvertedSourceCode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D80FD81435F69E, 0x128)]
        public class MenuScrollingPanelResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            float ScrollingSpeed;
            Ref<MenuActionResource> OnScrollingFinished;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC92EC9A4F23F65E5, 0x120)]
        public class MenuSelectViewItemResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            Ref<MenuDataBinding> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66263FAE7A9CC36F, 0x140)]
        public class MenuSelectViewResource : MenuListItemResource
        {
            Ref<MenuDataBinding> DefaultValue;
            bool Wrapping;
            Ref<MenuActionResource> OnChange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C7CB89CD645F5D0, 0x28)]
        public class MenuSentenceGroupResourceBinding : MenuObjectBinding
        {
            Ref<SentenceGroupResource> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x82A3887CE83918A2, 0x40)]
        public class MenuShaderPropertyAnimationResource : MenuPropertyAnimationResource
        {
            String TargetShaderVariable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9473F4191DA04C6, 0x130)]
        public class MenuSliderResource : MenuVisualResource
        {
            Ref<MenuDataBinding> MinValue;
            Ref<MenuDataBinding> MaxValue;
            Ref<MenuDataBinding> CurrentValue;
            Ref<MenuDataBinding> Step;
            Ref<MenuActionResource> OnChange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD563BD9B4D901308, 0x128)]
        public class MenuSpeechResource : MenuVisualResource
        {
            Ref<MenuDataBinding> Source;
            Ref<MenuDataBinding> SubtitleClass;
            Ref<MenuDataBinding> ShowSubtitles;
            Ref<MenuActionResource> OnSpeechEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9AE3585A18B3D4D3, 0x28)]
        public class MenuStreamingTexture
        {
            String TextureName;
            StreamingRef<Texture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAC27C79B4B476C, 0x40)]
        public class MenuStreamingTexturesResource : Resource
        {
            Array<MenuStreamingTexture> MenuStreamingTextures;
            bool IsDLCOnly;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC29CF1087461E4D5, 0x28)]
        public class MenuStringBinding : MenuDataBinding
        {
            WString Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A398A27908B91D6, 0x1D8)]
        public class MenuStyle : Resource
        {
            String Selector;
            String ElementType;
            bool AppliedOnFocus;
            bool AppliedOnDisabled;
            bool AppliedOnMouseHover;
            bool AppliedOnNoFocus;
            Array<Ref<MenuStyle>> BaseStyles;
            MenuStyleAttributeRGBAColor Color;
            MenuStyleAttributeFloat opacity;
            EOpacityMode opacity_mode;
            MenuStyleAttributeFloat top;
            MenuStyleAttributeFloat left;
            EVerticalAlignment vertical_align;
            EFloating _float;
            EStacking stacking;
            MenuStyleAttributeInt margin_top;
            MenuStyleAttributeInt margin_left;
            MenuStyleAttributeInt margin_right;
            MenuStyleAttributeInt margin_bottom;
            MenuStyleAttributeInt padding_top;
            MenuStyleAttributeInt padding_left;
            MenuStyleAttributeInt padding_right;
            MenuStyleAttributeInt padding_bottom;
            MenuStyleAttributeFloat width;
            MenuStyleAttributeFloat height;
            MenuStyleAttributeInt border_width;
            MenuStyleAttributeRGBAColor border_color;
            ETextureRepeat background_repeat_mm;
            Ref<UITexture> background_texture_tl;
            Ref<UITexture> background_texture_tm;
            Ref<UITexture> background_texture_tr;
            Ref<UITexture> background_texture_ml;
            Ref<UITexture> background_texture_mm;
            Ref<UITexture> background_texture_mr;
            Ref<UITexture> background_texture_bl;
            Ref<UITexture> background_texture_bm;
            Ref<UITexture> background_texture_br;
            IVec2 background_image_tl_off;
            IVec2 background_image_tm_off;
            IVec2 background_image_tr_off;
            IVec2 background_image_ml_off;
            IVec2 background_image_mm_off;
            IVec2 background_image_mr_off;
            IVec2 background_image_bl_off;
            IVec2 background_image_bm_off;
            IVec2 background_image_br_off;
            MenuStyleAttributeFloat background_depth_offset;
            MenuStyleAttributeRGBAColor background_overlay_image_color;
            ELayerOperation blend_mode;
            ELayerOperation text_blend_mode;
            EWidgetLayer target_layer;
            bool persp_projection;
            MenuStyleAttributeFloat depth_offset;
            MenuStyleAttributeFloat blur_amount;
            EChildrenClipMode children_clip;
            Ref<UIEffectResource> Shader;
            Ref<MenuStyleSound> sounds;
            Array<Ref<MenuAnimationResource>> Animations;
            bool ForceFullScreen;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FF75850BDB78986, 0x8)]
        public class MenuStyleAttributeFloat
        {
            bool IsSet;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6DB4F85652BFF5E, 0x8)]
        public class MenuStyleAttributeInt
        {
            bool IsSet;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC33884ADAB9D4A83, 0x8)]
        public class MenuStyleAttributeRGBAColor
        {
            bool IsSet;
            RGBAColor Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA97CFBF2788C8450, 0x40)]
        public class MenuStyleClass : Resource
        {
            String ClassName;
            Array<Ref<MenuStyle>> Styles;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF091F703CAD2BB99, 0x28)]
        public class MenuStyleClassBinding : MenuObjectBinding
        {
            Ref<MenuStyleClass> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF0013360BF79017, 0x1D8)]
        public class MenuStyleGraph : MenuStyle
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE21F03B27A03B577, 0x218)]
        public class MenuStyleLegend : MenuStyle
        {
            MenuStyleAttributeFloat LabelTextureSpacing;
            MenuStyleAttributeFloat ElementSpacing;
            String PressAndHoldVariable;
            Ref<UIEffectResource> PressAndHoldShader;
            MenuStyleAttributeRGBAColor LabelTextureEnabledColor;
            MenuStyleAttributeRGBAColor LabelTextureDisabledColor;
            Array<LegendIcon> LegendIcons;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B124617E7F2B0EE, 0x210)]
        public class MenuStyleProgressBarBlock : MenuStyle
        {
            MenuStyleAttributeFloat OffsetX;
            Array<ProgressBarBlock> BlockTextures;
            MenuStyleAttributeRGBAColor PositiveColor;
            MenuStyleAttributeRGBAColor NegativeColor;
            MenuStyleAttributeRGBAColor NeutralColor;
            MenuStyleAttributeRGBAColor EmptyColor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71194EE5559CC2, 0x200)]
        public class MenuStyleSelectView : MenuStyle
        {
            Ref<UITexture> PreviousItemTexture;
            MenuStyleAttributeInt PreviousItemWidth;
            Ref<UITexture> NextItemTexture;
            MenuStyleAttributeInt NextItemWidth;
            MenuStyleAttributeInt ItemChangeScrollTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3A6BA837E0DE0A4, 0x18)]
        public class MenuStyleSelector
        {
            String TypeName;
            String ClassName;
            bool OnFocus;
            bool OnDisabled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACF98493369558AB, 0x158)]
        public class MenuStyleSound : Resource
        {
            Ref<SoundResource> accept_handled;
            Ref<SoundResource> accept_unhandled;
            Ref<SoundResource> cancel_handled;
            Ref<SoundResource> cancel_unhandled;
            Ref<SoundResource> left_handled;
            Ref<SoundResource> left_unhandled;
            Ref<SoundResource> right_handled;
            Ref<SoundResource> right_unhandled;
            Ref<SoundResource> up_handled;
            Ref<SoundResource> up_unhandled;
            Ref<SoundResource> down_handled;
            Ref<SoundResource> down_unhandled;
            Ref<SoundResource> dpad_left_handled;
            Ref<SoundResource> dpad_left_unhandled;
            Ref<SoundResource> dpad_right_handled;
            Ref<SoundResource> dpad_right_unhandled;
            Ref<SoundResource> dpad_up_handled;
            Ref<SoundResource> dpad_up_unhandled;
            Ref<SoundResource> dpad_down_handled;
            Ref<SoundResource> dpad_down_unhandled;
            Ref<SoundResource> tableft_handled;
            Ref<SoundResource> tableft_unhandled;
            Ref<SoundResource> tabright_handled;
            Ref<SoundResource> tabright_unhandled;
            Ref<SoundResource> square_handled;
            Ref<SoundResource> square_unhandled;
            Ref<SoundResource> triangle_handled;
            Ref<SoundResource> triangle_unhandled;
            Ref<SoundResource> start_handled;
            Ref<SoundResource> start_unhandled;
            Ref<SoundResource> ingame_intel_handled;
            Ref<SoundResource> ingame_intel_unhandled;
            Ref<SoundResource> pressandhold_handled;
            Ref<SoundResource> pressandhold_unhandled;
            Ref<SoundResource> cursor_enter_handled;
            Ref<SoundResource> cursor_cursor_left_down_handled;
            Ref<SoundResource> cursor_cursor_left_click_handled;
            Ref<SoundResource> cursor_cursor_left_click_unhandled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECA6C0CF33F621D, 0x1E0)]
        public class MenuStyleTabHeader : MenuStyle
        {
            MenuStyleAttributeFloat TabMargin;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D2A0646E91F9571, 0x220)]
        public class MenuStyleText : MenuStyle
        {
            Ref<Typeface> Family;
            ETextHAlignment Alignment;
            ETextOrientation Orientation;
            MenuStyleAttributeFloat Size;
            MenuStyleAttributeFloat CJKSize;
            MenuStyleAttributeFloat ArabicSize;
            MenuStyleAttributeFloat MinimumSize;
            bool AutoAdjustSizeForSafeArea;
            float Leading;
            bool AdjustLineHeightForTextIcons;
            ETextWhiteSpace Whitespace;
            ETextOverflow Overflow;
            ETextTransform Transform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x333C169EA3788F04, 0x130)]
        public class MenuTabHeaderResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            IRect TabRect;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x802109BC3E01FA07, 0x120)]
        public class MenuTabResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            Ref<MenuDataBinding> Label;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FC13886E696B4D4, 0x140)]
        public class MenuTabboxResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            EMenuInputFunction PrevTabFunction;
            EMenuInputFunction NextTabFunction;
            Ref<Texture> PreviousTabIcon;
            Ref<Texture> NextTabIcon;
            Ref<MenuActionResource> OnNextTab;
            Ref<MenuActionResource> OnPreviousTab;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56C09A07FE73B107, 0x128)]
        public class MenuTabpaneResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
            bool DefaultPane;
            Ptr<MenuVisualResource> DefaultFocus;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40F2C51C32600B16, 0x50)]
        public class MenuTemplateResource : MenuElementResource
        {
            Ref<MenuDataResource> DataSource;
            String XPath;
            Array<Ref<MenuElementResource>> TemplateElements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68089960BF1C9F23, 0x128)]
        public class MenuTextResource : MenuVisualResource
        {
            Ref<MenuDataBinding> Text;
            ETextHAlignment HorizontalAlign;
            float ScrollVelocity;
            float ScrollPreDelay;
            float ScrollPostDelay;
            float ScrollFadeDuration;
            bool ForceLeftToRightTextRendering;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CC409385C3BA075, 0x28)]
        public class MenuTextureBinding : MenuObjectBinding
        {
            Ref<UITexture> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC04406BE2F6192A5, 0x130)]
        public class MenuTextureResource : MenuVisualResource
        {
            Ref<MenuDataBinding> Source;
            Ref<MenuDataBinding> Texture;
            Ref<UITexture> SourceLoading;
            Ref<UITexture> SourceFailed;
            float Scale;
            bool MaintainAspectRatio;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F99661FFCB95671, 0x40)]
        public class MenuTimerResource : MenuElementResource
        {
            int Countdown;
            bool ResetOnInput;
            bool StartPaused;
            Ref<MenuActionResource> OnTimerEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75780A5BB966EAE7, 0x118)]
        public class MenuToastMessageResource : MenuVisualResource
        {
            Array<Ref<MenuElementResource>> ChildElements;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB761937E45527A3B, 0x108)]
        public class MenuVisualResource : MenuElementResource
        {
            Ref<MenuDataBinding> Enabled;
            Ref<MenuDataBinding> StyleClassNames;
            Ref<MenuDataBinding> StyleClasses;
            Ref<MenuDataBinding> Visible;
            Ref<MenuDataBinding> AppearDisabled;
            Ref<UIEffectResource> Shader;
            int X;
            int Y;
            int Width;
            bool AutoWidth;
            int MaxWidth;
            int Height;
            bool AutoHeight;
            int MaxHeight;
            bool AutoSizeParent;
            bool EnableMouseHold;
            EFloating Align;
            EVerticalAlignment Valign;
            Ptr<MenuElementResource> FollowFocus;
            bool EnableTemplateFollow;
            Array<Ptr<MenuVisualResource>> VisibleOnFocus;
            Ptr<MenuElementResource> FollowMouseHover;
            Array<Ptr<MenuVisualResource>> VisibleOnMouseHover;
            bool ForceDrawMenuOnTheCenter;
            bool ForceDrawMenuOnTheTop;
            String TemplateParent;
            Array<Ref<MenuEventBinding>> EventHandlers;
            Array<Ref<MenuLegendLabelResource>> Labels;
            Array<Ref<MenuAnimationResource>> Animations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2ADC138E1116268E, 0x40)]
        public class MenuWidgetPropertyAnimationResource : MenuPropertyAnimationResource
        {
            EMenuAnimatableProperty TargetProperty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB323E67279393FA, 0x38)]
        public class MenuXPathAnimationInstance : MenuElementAnimationInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x150A064C5279067E, 0x50)]
        public class MenuXPathAnimationResource : MenuElementAnimationResource
        {
            String XPath;
            Array<Ref<MenuPropertyAnimationResource>> PropertyAnimations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4FDA57B0A0C8D5E, 0x50)]
        public class MerchantCollectionRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB0761D99D0DC5A, 0xA0)]
        public class MerchantComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x12F3957F23DEFCA3, 0xA0)]
        public class MerchantComponentResource : EntityComponentResource
        {
            Ref<LocalizedTextResource> Title;
            Ref<UITexture> Banner;
            int MaxSellPrice;
            int MaxMoney;
            Array<Ref<MerchantPriceModifier>> BuyModifiers;
            Array<Ref<MerchantPriceModifier>> SellModifiers;
            Array<Ref<TagProperty>> SellingWhiteListTags;
            Array<Ref<TagProperty>> SellingBlacklistListTags;
            int BulkSellAmount;
            int MoneyRegenerationTimer;
            int MoneyRegenerationAmount;
            float MoneyRegenerationRandomFactor;
            Array<Ref<MerchantTradingCollection>> TradingCollections;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BF4E36AD71E510D, 0x18)]
        public class MerchantInventoryManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60A8A6AF899A569, 0x50)]
        public class MerchantItemRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73F33AF9E3255F6D, 0x48)]
        public class MerchantPriceModifier : Resource
        {
            Array<Ref<TagProperty>> TagProperties;
            float PriceModifier;
            Ref<ConditionResource> EnabledCondition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AF865384C4F2C80, 0x78)]
        public class MerchantRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7C20981C6EFE1A2, 0x38)]
        public class MerchantStockInfo : Resource
        {
            Array<Ref<InventoryCollectionMerchantTradingItem>> MerchantItems;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1115762952DBAF7, 0x38)]
        public class MerchantTradeCostMultiplier : Resource
        {
            EDifficulty Difficulty;
            float CurrencyMultiplier;
            float TradeItemsMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4116723C65BD0BD, 0x48)]
        public class MerchantTradingCollection : Resource
        {
            Ref<ConditionResource> EnabledCondition;
            int RestockTimer;
            Array<Ref<InventoryCollectionMerchantTradingItemBase>> Items;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5092F757FEA658D7, 0x50)]
        public class MerchantViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC94E612392F34B3A, 0x70)]
        public class MeshExportRegion : WorldNode
        {
            float MinimumLodDistance;
            float PlacementLodDistance;
            bool ExportTerrainGeometry;
            bool TerrainVertexColors;
            bool ExportSceneGeometry;
            bool ExportPlacementGeometry;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC16AF83BCBB6E287, 0x10)]
        public class MeshHierachyShaderOverrides
        {
            Array<MeshShaderOverrides> MeshOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE42C90195DC81520, 0x10)]
        public class MeshHierarchyInfo
        {
            uint32 MITNodeSize;
            uint32 PrimitiveCount;
            uint16 MeshCount;
            uint16 StaticMeshCount;
            uint16 LodMeshCount;
            uint16 PackedData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x200FBDA847816F63, 0x20)]
        public class MeshInstanceLOD
        {
            Ref<MeshResourceBase> Mesh;
            int PrimitiveCount;
            int TriangleCount;
            float MaxDistance;
            uint MaxCellSize;
            uint MaxCellCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38D33C0BCD71DEDB, 0x200)]
        public class MeshInstanceManager : GeometryObject
        {
            Array<MeshInstanceLOD> LODs;
            BoundingBox3 RootBounds;
            BoundingBox3 CullBounds;
            BoundingBox3 MeshBounds;
            BoundingBox3 MeshExtents;
            Array<float> LODDistances;
            BakedInstanceData InstanceData;
            Array<QuadTreeCell> InstanceTree;
            Array<uint32> InstanceRemapTable;
            int DrawableSetupBlockSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB24DA8D1E0CB09D5, 0x80)]
        public class MeshResourceBase : Resource
        {
            BoundingBox3 BoundingBox;
            DrawableCullInfo CullInfo;
            MeshHierarchyInfo MeshHierarchyInfo;
            uint StaticDataBlockSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB50020360172905, 0x1)]
        public class MeshResourceOverrides
        {
            bool DisableStaticDecals;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE8A7BB17A246379, 0x18)]
        public class MeshResourcePathStorage
        {
            Ref<MeshResourceBase> RootMeshResource;
            Array<int> ChildPathIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EACD2E697C650FC, 0x38)]
        public class MeshShaderOverrides
        {
            MeshResourcePathStorage MeshResourcePath;
            int32 MITNodeHandle;
            Array<RenderEffectShaderOverrides> FxOverrides;
            MeshResourceOverrides MeshResourceOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B67F715C7276055, 0x20)]
        public class MessageData : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1961FEC7AAB09690, 0x80)]
        public class MilestoneActivityFeedStatTriggerResource : ActivityFeedStatTriggerResource
        {
            Array<int> Milestones;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x873DB29E2A03B4E, 0x350)]
        public class Mine : Placeable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4A537972F2A03DA, 0x260)]
        public class MineRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90DFCECA42BBD41F, 0x1B0)]
        public class MineResource : PlaceableResource
        {
            Ref<ExplosionResource> ExplosionResource;
            float SafetyTime;
            float ExplosionDelay;
            Vec3 ExplosionOffset;
            Ref<UseLocationResource> TriggerUseLocation;
            Ref<UseLocationResource> DisarmUseLocation;
            float TripwireDangerAreaRadius;
            Ref<SoundResource> TriggerSound;
            EMineMode Mode;
            float MaxTriggerLength;
            Vec3 LaserOffset;
            Ref<LaserBeamResource> LaserBeam;
            bool ShapedExplosion;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EBDA67F3268AE36, 0x310)]
        public class MissileSilo : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD48536CBB9A64B6E, 0x40)]
        public class MissileSiloEjectAction : EntityAction
        {
            String TargetName;
            bool PlayerIsTarget;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D0DACAB678FE87C, 0x138)]
        public class MissileSiloResource : EntityResource
        {
            Ref<AmmoEjectorWeaponResource> MissileWeaponResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x529D2FF08C14D08C, 0xD8)]
        public class Mission : NetReplicatedObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD53D00F9CE60B3A1, 0xE0)]
        public class MissionBodyCount : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BA272457DBB8AD6, 0xB0)]
        public class MissionBodyCountResource : MissionResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3475EE94BCDD454, 0xE8)]
        public class MissionCampaign : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44BC2E895361984B, 0xD0)]
        public class MissionCampaignResource : MissionResource
        {
            float DefaultDelay;
            float MaxDelay;
            bool EndWhenAllPlayersAreDead;
            String InitFunction;
            String ExitFunction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62F2FD14E99A3BD6, 0x128)]
        public class MissionCaptureAndConnect : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3081FE173B3D1979, 0xD0)]
        public class MissionCaptureAndConnectResource : MissionResource
        {
            Array<String> Objectives;
            Array<String> ObjectiveLineNames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x361CBE46956167C0, 0x138)]
        public class MissionCaptureAndHold : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFC9FF0897C8421E, 0x100)]
        public class MissionCaptureAndHoldResource : MissionResource
        {
            Array<String> Objectives;
            Array<ObjectiveCount> ObjectivesPerPlayerCount;
            int PointsPerTick;
            float Tick;
            String MissionObjectivesCallback;
            Array<MissionEvent> MissionScoreEvents;
            Array<MissionEvent> CounterMissionScoreEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x438D82F326D4E1E5, 0x140)]
        public class MissionCaptureAndSecure : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3FBF22572543AC1, 0xD0)]
        public class MissionCaptureAndSecureResource : MissionResource
        {
            Array<String> Objectives;
            float ObjectiveActiveTime;
            int PointsPerTick;
            float TickLength;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE023313DED2A4AE, 0xD8)]
        public class MissionCoop : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE629582CFF963DEB, 0xD0)]
        public class MissionCoopResource : MissionResource
        {
            float DefaultDelay;
            float MaxDelay;
            bool EndWhenAllPlayersAreDead;
            String InitFunction;
            String ExitFunction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x371C4B873595BD64, 0x10)]
        public class MissionEvent
        {
            int Value;
            String Event;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AE17D9B29AD2D2F, 0x210)]
        public class MissionInfiltrateAndRetrieve : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3AF44251FEF138BE, 0x110)]
        public class MissionInfiltrateAndRetrieveResource : MissionResource
        {
            Ref<SearchAndRetrieveObjectResource> FlagResource;
            Ref<SearchAndRetrieveObjectResource> CounterFlagResource;
            String FlagSpawnPoint;
            String CounterFlagSpawnPoint;
            String Base;
            String BaseTrigger;
            String CounterBase;
            String CounterBaseTrigger;
            int MissionPointsPerFlag;
            float RespawnDelay;
            float MissionTime;
            Ref<CurveResource> FriendlyTargetArrowFadeCurve;
            Ref<CurveResource> EnemyTargetArrowFadeCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78BBE6075A712774, 0x390)]
        public class MissionManager : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC85E1B50F815F1F5, 0x178)]
        public class MissionManagerResource : EntityResource
        {
            bool StopOnFirstLostMission;
            bool EnableRandomMissionSelection;
            String WinMessage;
            String LoseMessage;
            String DrawMessage;
            float FactionWinDisplayTime;
            String EndSequence;
            String EndSequenceMarker;
            Array<Ref<MissionResource>> Missions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB223E0E5F0073077, 0xB0)]
        public class MissionResource : Resource
        {
            float TimeLimit;
            int ObjectiveLimit;
            Array<MissionEvent> TimeLeftEvents;
            Ref<AIFaction> Faction;
            String MissionWinMessageTag;
            String MissionLossMessageTag;
            String MissionInitialSpawnPoint;
            Ref<AIFaction> CounterFaction;
            String CounterMissionWinMessageTag;
            String CounterMissionLossMessageTag;
            String CounterMissionInitialSpawnPoint;
            String MissionDrawMessageTag;
            String MissionTimeLeftCallback;
            Array<MissionEvent> FriendlyScoreEvents;
            Array<MissionEvent> EnemyScoreEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9C22143F6F98E86, 0x100)]
        public class MissionSearchAndDestroy : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5083BEE0A6D42D9E, 0xD8)]
        public class MissionSearchAndDestroyResource : MissionResource
        {
            Array<String> Attachables;
            Array<MissionEvent> AttachablesArmedEvents;
            String ObjectivesLeftEventTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A592BFDA98A675D, 0x1E0)]
        public class MissionSearchAndRetrieve : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85C7341CCA17EF7B, 0x108)]
        public class MissionSearchAndRetrieveResource : MissionResource
        {
            Ref<SearchAndRetrieveObjectResource> SearchObjectResource;
            Array<String> ObjectSpawnPoints;
            String Base;
            String BaseTrigger;
            String CounterBase;
            String CounterBaseTrigger;
            int MissionPointsPerFlag;
            float SpawnDelay;
            float MissionTime;
            EHomeBaseVisibility HomeBaseVisibility;
            Ref<CurveResource> FriendlyTargetArrowFadeCurve;
            Ref<CurveResource> EnemyTargetArrowFadeCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1738F191BF56277, 0x168)]
        public class MissionSearchAndSafeguard : Mission
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF586163FD8A75E56, 0xE8)]
        public class MissionSearchAndSafeguardResource : MissionResource
        {
            Ref<SearchAndRetrieveObjectResource> SearchObjectResource;
            Array<String> ObjectSpawnPoints;
            float TimeUnit;
            int MissionPointsPerTimeUnit;
            float SpawnDelay;
            float MissionTime;
            Ref<CurveResource> FriendlyTargetArrowFadeCurve;
            Ref<CurveResource> EnemyTargetArrowFadeCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96AAE0EC4A77AB0E, 0x18)]
        public class MissionSettings : RTTIObject
        {
            EMissionType Type;
            float TimeLimit;
            int ObjectiveLimit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x532A0095526928DD, 0x110)]
        public class MissionTest : MissionCampaign
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC5494CCDFB10A82D, 0xD0)]
        public class MissionTestResource : MissionCampaignResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCEA0113C5DE20465, 0x178)]
        public class Model : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x73B10A2FA84116DB, 0x120)]
        public class ModelActorInstance : EntityActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CD339819583ED2D, 0x78)]
        public class ModelActorResource : EntityActorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCB6B7FC96C45283, 0x78)]
        public class ModelLodBiasEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4554B3490354B78E, 0x58)]
        public class ModelLodBiasEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Array<String> MeshInstances;
            float LodDistanceScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C76313C0EFF4AA0, 0x58)]
        public class ModelPartMeshReplacementResource : Resource
        {
            Array<Ref<MeshResourceBase>> MeshResources;
            Ref<MeshResourceBase> ReplacementMeshResource;
            String HelperName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EA288ABF194DBD2, 0x60)]
        public class ModelPartResource : Resource
        {
            Ref<MeshResourceBase> MeshResource;
            Ref<SkinnedMeshBoneBoundingBoxes> BoneBoundingBoxes;
            Ref<PhysicsCollisionResource> PhysicsResource;
            bool IsSkinned;
            EPhysicsMotionType PartMotionType;
            String HelperNode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5EC82045AD132E4, 0x1A8)]
        public class ModelProxy : Model
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x900C886D84ACD803, 0x10)]
        public class ModelProxyRemapEntry
        {
            String From;
            String To;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA6E0DADFD2561C8, 0x188)]
        public class ModelProxyRep : ModelRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D11D8ACDA527964, 0x88)]
        public class ModelProxyResource : ModelResource
        {
            Ref<ModelResource> TargetModelResource;
            Array<ModelProxyRemapEntry> ActionRemapTable;
            Array<ModelProxyRemapEntry> VariableRemapTable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6EAE3B68E1795A0, 0x180)]
        public class ModelRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1154CA654E2ABFCB, 0x60)]
        public class ModelResource : EntityComponentResource
        {
            Array<Ref<ModelPartResource>> ModelPartResources;
            EViewLayer ViewLayer;
            EActiveView ActiveView;
            Array<Ref<SkeletonHelpers>> Helpers;
            String LocationProviderID;
            String HelperName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x92962878FBAF5729, 0xC0)]
        public class ModificationItemRestoreState : ItemRestoreState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF638C7D767B8FD5A, 0x68)]
        public class ModificationViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCE2F0227E8281C4, 0x50)]
        public class ModifierStatDisplayEntry : StatDisplayEntryBase
        {
            Ref<CurveResource> StatModifierCurve;
            float DesiredMinimumMultiplier;
            Ref<LocalizedTextResource> ModifierName;
            Ref<LocalizedTextResource> ModifierDescription;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D5F6675467E6B19, 0x28)]
        public class Module : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBFEDBE357DED36BB, 0x50)]
        public class MoneyQuestReward : SummableQuestReward
        {
            Array<int> Money;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC76E18321B7BB409, 0x88)]
        public class MonitoredAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF84C13B84F93927D, 0x38)]
        public class MonitoredAnimationComponentResource : EntityComponentResource
        {
            Array<Ref<MonitoredAnimationResource>> Animations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD777E4483774C2B4, 0x88)]
        public class MonitoredAnimationResource : Resource
        {
            String FriendlyName;
            String AnimationAction;
            Array<AnimationVariableValue> AnimationVariables;
            String AnimationTag;
            int DurationEventUserData;
            bool NeedsTargetDependency;
            Ref<GraphProgramResource> OnStartGraph;
            Ref<OverrideGraphProgramResource> OnStartGraphOverride;
            Ref<GraphProgramResource> OnStopGraph;
            Ref<OverrideGraphProgramResource> OnStopGraphOverride;
            Ref<GraphProgramResource> OnActiveUpdateGraph;
            Ref<OverrideGraphProgramResource> OnActiveUpdateGraphOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F1A3D44EC3B742, 0xD0)]
        public class MorphemeAnimationManager : AnimationManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8E67CB4A1B96187, 0xC8)]
        public class MorphemeAnimationManagerResource : AnimationManagerResource
        {
            Ref<MorphemeNetworkDefResource> MorphemeNetworkDef;
            Ref<AnimationSetMap> AnimationSetMap;
            int DefaultAnimationSet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x985D2CD65C07569F, 0x30)]
        public partial class MorphemeAnimationResource : ResourceWithoutLegacyName, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEE268C550A7F960, 0x28)]
        public class MorphemeAnimationTargetMapping
        {
            String AnimationTarget;
            String SkeletonPrefix;
            Ref<Skeleton> Skeleton;
            Array<MorphemeAnimationTargetOffsetSizeCouple> Offsets;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6660B3713DB4A678, 0x8)]
        public class MorphemeAnimationTargetOffsetSizeCouple
        {
            uint32 Offset;
            uint32 Length;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3292F00C1E66A832, 0x20)]
        public class MorphemeAsset
        {
            Array<uint8> Data;
            uint32 AssetID;
            int32 AssetType;
            int64 AssetSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x344F9419F90D8E41, 0x88)]
        public class MorphemeEventMappingsResource : Resource
        {
            Array<MorphemeTextEventMapping> TextEventMappings;
            Array<MorphemeSoundEventMapping> SoundEventMappings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CB9B02442258EFD, 0x148)]
        public class MorphemeNetworkDefResource : Resource
        {
            Array<String> NodeNames;
            Array<MorphemeAsset> MorphemeAssets;
            Array<String> ControlParameters;
            Array<String> Messages;
            Array<Ref<MorphemeAnimationResource>> Animations;
            HashMap<String_int> AnimationTags;
            Ref<MorphemeEventMappingsResource> Mappings;
            Ref<SkeletonTargetTree> SkeletonTargetTree;
            Array<MorphemeAnimationTargetMapping> AnimationTargetMap;
            Array<MorphemeAnimationTargetOffsetSizeCouple> DefaultOffsets;
            int AnimSetNodeID;
            HashMap<String_int> NodeNameIDMap;
            bool EnableUpdateTrajectory;
            bool EnableUpdateSampledEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29FD4FBCAD73775E, 0x18)]
        public class MorphemeSoundEventMapping
        {
            AnimationEventID ID;
            Ref<SoundResource> Sound;
            String HelperName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8561A1708E2C015, 0x68)]
        public class MorphemeSoundEventRemapComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC85D28D17C10854D, 0x38)]
        public class MorphemeSoundEventRemapComponentResource : EntityComponentResource
        {
            Array<MorphemeSoundEventMapping> RemapMorphemeSoundEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x442C8FE6C6BEF519, 0x10)]
        public class MorphemeTextEventMapping
        {
            AnimationEventID ID;
            String Text;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2EEAB514E2EF58CE, 0x108)]
        public class MortallyWoundedComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB52CAB4C2A7CA040, 0xC0)]
        public class MortallyWoundedComponentResource : EntityComponentResource
        {
            float Chance;
            float MinTimeBetween;
            FRange AllowedDistanceToPlayer;
            float AcceptReviveDelay;
            bool AllowMortallyWoundedOnHeadshot;
            bool AllowMortallyWoundedOnSuicide;
            bool NeedReviverToGoMortallyWounded;
            float MaxReviverDetectionDistance;
            float ReviveTime;
            Ref<UseLocationResource> ReviveUseLocation;
            Vec3 ReviveUseLocationOffset;
            int MaxReviveCount;
            bool ReviveIconHiddenForMedic;
            Array<Ref<DamageTypeResource>> InvalidDamageTypes;
            float MinWoundedTimeBeforeSuicide;
            bool CanBeMercyKilled;
            float MercyKillDelay;
            String LocalizedMortallyWoundedSoundName;
            String LocalizedWantsHealthSoundName;
            bool AutoWantHealthWhenWounded;
            bool AutoAcceptsRevive;
            bool IsInvulnerableWhileStandingUp;
            bool PlayAnimation;
            Ptr<EntityAction> OnMortallyWoundedAction;
            Ptr<EntityAction> OnReviveAction;
            float AutoReviveTime;
            float ReviveHealTarget;
            float ReviveRegenTarget;
            float ReviveRegenTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9AAE2B4E08AD3DC, 0x2F0)]
        public class MortarStrike : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19C3261E01A76252, 0x240)]
        public class MortarStrikeRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x98667314BBDE550D, 0x160)]
        public class MortarStrikeResource : EntityResource
        {
            float LeadTime;
            float StrikeRadius;
            Ref<ExplosionResource> ExplosionResource;
            int NumberOfImpacts;
            float ImpactMinDelay;
            float ImpactMaxDelay;
            Ref<SoundResource> WhistleSound;
            float WhistleSoundDuration;
            float WhistleSoundHeightOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14A0C9AC19095672, 0x68)]
        public class MotionTableContentsGenerationResource : Resource
        {
            Array<String> ControlParameterNames;
            Array<String> AnimationStates;
            String SampleTag;
            Array<String> AdditionalBoneNames;
            bool ForceSampleFrequency30Hz;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE0FA244CA3EC77F, 0x90)]
        public class MotionTableResource : Resource
        {
            Ref<MotionTableContentsGenerationResource> MotionTableContentGenerationResource;
            Array<String> HashKeysMotionTableEntry;
            Array<Ref<AnimationMotionBase>> MotionArray;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x908E98E470231F61, 0x60)]
        public class MountDismountMode : Resource
        {
            String Identifier;
            Array<Ref<MountVariableRange>> MountVariableRanges;
            String DisplacementEventName;
            Array<MountPoint> MountPoints;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x12A64F895DA71C18, 0x80)]
        public class MountEventInstance : MoveToEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC9E4B0BC0FFA9ED, 0x78)]
        public class MountEventResource : MoveToEventResource
        {
            String UseLocationName;
            bool ImmediateMount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EB76C783C68B529, 0x68)]
        public class MountMode : MountDismountMode
        {
            float MaxWarpDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2E3C88969846B60, 0x98)]
        public class MountPlayAnimationObjectEventInstance : MoveToEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC039EEF080A69CC0, 0x78)]
        public class MountPlayAnimationObjectEventResource : MoveToEventResource
        {
            String UseLocationName;
            bool ImmediateMount;
            bool ImmediateAction;
            bool SkipMountAnimation;
            bool KillControlledEntityActor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34BBB779F76C4B18, 0xB0)]
        public class MountPoint
        {
            Mat44 Transform;
            Mat44 RootTransform;
            Array<float> AnimationVariableValues;
            Array<Vec3> Trajectory;
            float DisplacementStartTime;
            float DisplacementEndTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD52A71D0B0F6CC00, 0x60)]
        public class MountRiderComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC34110A4ED7FD1, 0x70)]
        public class MountUseLocationsComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x582EED89D375E4A3, 0x48)]
        public class MountUseLocationsComponentResource : EntityComponentResource
        {
            Ref<UseLocationResource> UseLocationResource;
            Ref<UseLocationConditionSet> UseLocationConditionSet;
            Ref<MountMode> MountMode;
            bool RequestNetOwnership;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BB95FAD33CEBB29, 0x40)]
        public class MountVariableRange : Resource
        {
            String VariableName;
            FRange VariableRange;
            float VariableStep;
            bool IsControlledByMountableComponent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8195BD80471DE208, 0x130)]
        public class MountableComponent : AIUsableComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5960F294AA6410A7, 0x100)]
        public class MountableComponentResource : EntityComponentResource
        {
            Ref<SkinnedModelResource> SkinnedModelResource;
            Ref<Skeleton> MounterSkeleton;
            AnimationTagSet AnimationSetTags;
            String MounterStateTag;
            Ref<MounterComponentResource> MounterComponentResource;
            String MountAnimation;
            String MountStateAnimationVariable;
            String AttachHelper;
            AnimationMountStateLogic AnimationMountStateLogic;
            String MountingAnimationLogicName;
            String MountedAnimationLogicName;
            String DismountingAnimationLogicName;
            String DismountedAnimationLogicName;
            String BreakOutDismountAnimationEventName;
            Array<Ref<MountMode>> MountModes;
            Array<Ref<DismountMode>> DismountModes;
            Ref<DismountMode> MounterDeathDismountMode;
            Ptr<EntityAction> StartMountAction;
            Ptr<EntityAction> StopMountAction;
            Ptr<EntityAction> StartDismountAction;
            Ptr<EntityAction> StopDismountAction;
            TagPropertyLinkCollection TagProperties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3612FA8373BA7EF7, 0x660)]
        public class MountableEntity : InteractiveEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8BC3C1A51D0C003D, 0x2F0)]
        public class MountableEntityResource : InteractiveEntityResource
        {
            Ref<CameraEntityResource> MountCameraResource;
            float DismountCollisionTime;
            bool ResetAnimationAfterDetach;
            Ref<HUDCrosshairSettings> Crosshair;
            Array<UserDamageModifier> UserDamageModifiers;
            bool MountDismountAnimation;
            Ref<AISkillManagerResource> MountedUserSkills;
            bool AllowDismountAlways;
            Ptr<EntityAction> StopAttachAction;
            Ptr<EntityAction> StartDetachAction;
            bool CanSwitchInventoryItem;
            bool CanUserReload;
            bool DoCollisionCheckOnMountPositions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x591B6CECE878BDAF, 0x50)]
        public class MountableEntityScriptMountEvent : RequestOwnershipEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB71DDB14560B92BD, 0xE0)]
        public class MounterComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90677C75DAA75DBD, 0xE0)]
        public class MounterComponentGame : MounterComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63B354695F948B85, 0x50)]
        public class MounterComponentGameResource : MounterComponentResource
        {
            bool IsContextualActionAllowed;
            bool ShouldUpdateNearbyAnnotations;
            bool IsVaultingAllowed;
            bool IsVegetationCoverAllowed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7858094AF3C4E895, 0x48)]
        public class MounterComponentResource : EntityComponentResource
        {
            Ptr<EntityAction> StartMountAction;
            Ptr<EntityAction> StopMountAction;
            Ptr<EntityAction> StartDismountAction;
            Ptr<EntityAction> StopDismountAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB378391BC0268369, 0x160)]
        public class MounterMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE6ABC244F8C56F2, 0x30)]
        public class MounterMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA160D9785CD7102, 0x38)]
        public class MouseToolSettings : Resource
        {
            Array<UUIDRef<EntityResource>> SelectBlackList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E55093B8E465318, 0x78)]
        public class MoveToEventInstance : SubGoalPausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D8503DE55DF7E88, 0x68)]
        public class MoveToEventResource : SubGoalPausableEventResource
        {
            Ref<LocatorResource> TargetLocatorResource;
            Ref<EntityActorResource> ControlledEntityActorResource;
            Array<Ref<LocatorResource>> TargetLocatorResources;
            Ref<AIContextHintResource> MoveContext;
            bool PauseUntilArrival;
            bool StopExactlyAtDestination;
            bool FaceToTargetRotation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD67720A04DE6F05, 0x60)]
        public class Mover : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8675EC902B98C6A3, 0x30)]
        public class MoverResource : EntityComponentResource
        {
            bool SupportsDynamicParts;
            bool ShouldApplyImpulseOnRemote;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69F5EE5C1668CECA, 0x14)]
        public class MovieFade
        {
            int FadeFrame;
            int FadeDuration;
            int FadeDownDuration;
            int FadeUpDuration;
            EMovieFadePurpose FadePurpose;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76D21F26190C1956, 0x10)]
        public class MovieFrameMenuActionBinding
        {
            int FrameNumber;
            Ref<MenuActionResource> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76C45BC783701DD1, 0x40)]
        public class MovieListResource : Resource
        {
            EMovieListType Type;
            Array<Ref<MovieResource>> Movies;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15C3AA3D8BB35A59, 0x88)]
        public class MovieResource : Resource
        {
            Array<MovieSkipLocation> SkipLocations;
            Ref<SubtitlesResource> Subtitles;
            Array<MovieFade> Fades;
            bool Looping;
            bool IsLoadingMovie;
            bool CanBeSkipped;
            bool ShouldRunIn30Hz;
            String MovieFile;
            float MasterVolume;
            float MandS_FrontLeftRightVolume;
            float MandS_CenterVolume;
            float MandS_LfeVolume;
            float MandS_SurroundLeftRightVolume;
            float VoiceVolume;
            bool Has3DVariant;
            bool TryPreloadAll;
            EMovieMemoryType MemoryType;
            bool ControlGameSoundFade;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4049C609F349EC75, 0xC)]
        public class MovieSkipLocation
        {
            ESkipLocationType Type;
            int FrameOffset;
            int EndFrame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8CF457B8F836EE8, 0xF0)]
        public class MovieTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7F5749E333EAE96, 0x160)]
        public class MovieWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB039A7B8AFECD78, 0x40)]
        public class MsgAI : MsgScene
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ptr<Entity> Sender;
            String MessageId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72FCDF0F7684C7A5, 0x50)]
        public class MsgAIAlertLevelChanged : MsgAI
        {
            EAlertLevel AlertLevel;
            EAlertLevel OldAlertLevel;
            bool HasAlertLevelIncreased;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D740E12D5105E2E, 0x60)]
        public class MsgAIAttack : MsgScene
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ptr<Entity> Sender;
            [RTTI.BrokenReflectionOffset(0x0)]
            Ptr<Entity> Target;
            EMsgAIAttackState State;
            Ref<AIWeaponPreference> Weapon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2910E70EB1C247F4, 0x48)]
        public class MsgAIEvent : MsgAI
        {
            String CustomData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67D2B8544C982C77, 0x28)]
        public class MsgAIGroupSpawned : MsgScene
        {
            Ref<AIBehaviorGroup> AIBehaviorGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97CD52398BFCACDD, 0x40)]
        public class MsgAIOrderArrived : MsgAI
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DC840B5A67819ED, 0x40)]
        public class MsgAIOrderCompleted : MsgAI
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40FAC4EC331545F5, 0x40)]
        public class MsgAIOrderFailed : MsgAI
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4E9F2DE3E0D6CF1, 0x30)]
        public class MsgAIPatrolPathChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2DC73160525ADD8, 0x48)]
        public class MsgAISequenceEvent : MsgAI
        {
            String EventData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA0F8CA55A56BA31, 0x50)]
        public class MsgAcquireIKTarget : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFA43BA4E09C9818, 0x18)]
        public class MsgActiveViewportsChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x574DCE225A5A7401, 0x38)]
        public class MsgAddCameraModifier : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F1D1B447FEAA4C5, 0x20)]
        public class MsgAddComponent : MsgBase
        {
            Ptr<EntityComponent> Component;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC215F6890BF3D16F, 0x28)]
        public class MsgAddHapticStimulus : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB790CD37C22BE9F, 0x18)]
        public class MsgAddedToEntityManager : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A1DB3EC49FDC8B6, 0x28)]
        public class MsgAddedToHealthBucket : MsgBase
        {
            float NewContent;
            float Capacity;
            float AddedAmount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDCA0939DD6B7AC9, 0x38)]
        public class MsgAddedToInventory : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x538A426C54BC231E, 0x20)]
        public class MsgAdjustImpactProperties : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EECE4F58C2927CC, 0x30)]
        public class MsgAmmoChargeLevelChanged : MsgWeaponModeBase
        {
            int CurrentCharge;
            int PreviousCharge;
            bool IsOvercharged;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7ACC6C03B2025DDD, 0x28)]
        public class MsgAnimationEvent : MsgBase
        {
            String ID;
            bool IsDurationEvent;
            bool IsStarted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8CBD7CDF36AC34BB, 0x38)]
        public class MsgAnimationSoundEvent : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83DD78D1981257BA, 0x20)]
        public class MsgAnyObjectChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x600F16101640CEE5, 0x70)]
        public class MsgArcComplete : MsgBase
        {
            WorldPosition To;
            WorldPosition From;
            WorldPosition Current;
            EArcTargetType ToType;
            EArcTargetType FromType;
            EArcTargetType CurrentType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7FC3387C5A18, 0xB0)]
        public class MsgArcHit : MsgBase
        {
            WorldPosition To;
            WorldPosition From;
            WorldPosition Current;
            EArcTargetType ToType;
            EArcTargetType FromType;
            EArcTargetType CurrentType;
            WorldPosition Position;
            Vec3 Normal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x127544289A69B3A1, 0x70)]
        public class MsgArcJump : MsgBase
        {
            WorldPosition To;
            WorldPosition From;
            WorldPosition Current;
            EArcTargetType ToType;
            EArcTargetType FromType;
            EArcTargetType CurrentType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48E7A0733DA06C9F, 0x70)]
        public class MsgArcStart : MsgBase
        {
            WorldPosition To;
            WorldPosition From;
            WorldPosition Current;
            EArcTargetType ToType;
            EArcTargetType FromType;
            EArcTargetType CurrentType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3EE3E2F36242232, 0x70)]
        public class MsgArcUpdate : MsgBase
        {
            WorldPosition To;
            WorldPosition From;
            WorldPosition Current;
            EArcTargetType ToType;
            EArcTargetType FromType;
            EArcTargetType CurrentType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x283021EB44EFF4A6, 0x30)]
        public class MsgAttachToEntity : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1016A7FF9F71CCE, 0x18)]
        public class MsgAttachedToInteractiveEntity : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8381E39F78B95495, 0x48)]
        public class MsgAudioLogStartedPlaying : MsgSceneEntityBase
        {
            UUIDRef<SentenceGroupResource> SentenceGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7081AAD89774F43A, 0x50)]
        public class MsgAudioLogStoppedPlaying : MsgSceneEntityBase
        {
            UUIDRef<SentenceGroupResource> SentenceGroup;
            bool Aborted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4365D2FC747FA5C3, 0x18)]
        public class MsgBase : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6620E8FFA3F188CB, 0x38)]
        public class MsgBooleanFactChanged : MsgFactChangedBase
        {
            Ptr<BooleanFact> Fact;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4F49B0E233D11DFC, 0x38)]
        public class MsgBuildMeshHierarchy : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49D60EA9C6059277, 0x78)]
        public class MsgCameraActorActivate : MsgCameraActorUpdate
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F0B903E85F204C1, 0x80)]
        public class MsgCameraActorDeactivate : MsgCameraActorActivate
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA06DF13375F5D08, 0x70)]
        public class MsgCameraActorUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC87BF054A30AC16, 0x20)]
        public class MsgCanBeResurrected : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2DB8B4BD2B3805B, 0x28)]
        public class MsgCanExpressGesture : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA3C3D8882629AD4, 0x20)]
        public class MsgCanReceiveDamage : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86E7D3A468890928, 0x38)]
        public class MsgCanSetCameraVisibility : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE88A8F43A40A4297, 0x20)]
        public class MsgChildEntityAdded : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19657199C9328A2E, 0x20)]
        public class MsgCombatHonorUnlocked : MsgBase
        {
            String RewardName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47909C5D9A0DBDDF, 0x50)]
        public class MsgConditionChanged : MsgSceneEntityBase
        {
            UUIDRef<ConditionResource> ConditionResource;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55750B6ECBB4795A, 0x18)]
        public class MsgConstructionFinished : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC95C34981AFA8C67, 0x48)]
        public class MsgContactPoint : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90F726CAE205563B, 0x110)]
        public class MsgContactPointAdded : MsgContactPoint
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34F6C334F7E5FD85, 0x100)]
        public class MsgContactPointProcess : MsgContactPoint
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D5BBD71C05E0A50, 0xD0)]
        public class MsgContactPointRemoved : MsgContactPoint
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x608BDE1E58167BB1, 0x28)]
        public class MsgContactPointValidate : MsgContactPoint
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F2D6F8C7B471EDC, 0x28)]
        public class MsgCountdownTimer : MsgScene
        {
            Ptr<CountdownTimer> Timer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1431C4EC6B0B071, 0x28)]
        public class MsgCountdownTimerLapsed : MsgCountdownTimer
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA868CA7CAB1056F9, 0x28)]
        public class MsgCountdownTimerPaused : MsgCountdownTimer
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53755E3F850AC014, 0x28)]
        public class MsgCountdownTimerStarted : MsgCountdownTimer
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C35514E4873C205, 0x18)]
        public class MsgCreateCollisionVolume : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC11541A901B2393, 0x20)]
        public class MsgCreateComponent : MsgBase
        {
            Ref<EntityComponentResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD693CD2D0BD152F5, 0xF0)]
        public class MsgDamage : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6309E3D5BD0D39A, 0xD0)]
        public class MsgDamageCaused : MsgBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            EDamageFlags DamageFlags;
            Vec3 ImpactImpulse;
            float ImpactImpulseHumanoidFactor;
            float ImpactSeverity;
            Vec3 Normal;
            int ModelPartIndex;
            float DamageDone;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2EE350056F9ACD2, 0x40)]
        public class MsgDamageCausedReport : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6191F5CF5DE7A245, 0x20)]
        public class MsgDamageReceivedThisFrame : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8CE378143B71F880, 0x38)]
        public class MsgDeconstructPlacedEntity : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F4BE6DD48EB0F67, 0x18)]
        public class MsgDestroyCollisionVolume : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE708EC64A75162B, 0x28)]
        public class MsgDestructibilityPartHealthChanged : MsgBase
        {
            int ModelPartIndex;
            float OldHealth;
            float NewHealth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD9CFE809A403C0D, 0x40)]
        public class MsgDestructibilityPartHit : MsgSceneEntityBase
        {
            int ModelPartIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF914232B873E1CB, 0xC0)]
        public class MsgDestructibilityPartTransition : MsgBase
        {
            int ModelPartIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF10CC90F8C26F58A, 0x20)]
        public class MsgDetachFromEntity : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E90410835EC7E4C, 0x18)]
        public class MsgDetachedFromInteractiveEntity : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC00C0ABDBDCF08F, 0x38)]
        public class MsgDisableModelPartCollision : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67CB0270279E4B8A, 0x20)]
        public class MsgDrawFirstPersonInWorldSpace : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x520B2E35334A27A3, 0x30)]
        public class MsgDropped : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC896133F1742F4B1, 0x20)]
        public class MsgEnableAttachedLights : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38A9EA7ED1FD000F, 0x38)]
        public class MsgEnableModelPart : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C1F105808B87D9, 0x38)]
        public class MsgEnableModelPartCollision : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF92B32620AEF31B, 0x20)]
        public class MsgEnabledChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A7EAB29D5091794, 0x50)]
        public class MsgEndUseSmartObject : MsgUseSmartObjectBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F6C7899BB8F555D, 0x28)]
        public class MsgEntityActivationPolicyChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x406A46319D7B7836, 0x48)]
        public class MsgEntityAddedToScene : MsgSceneEntityBase
        {
            Ptr<WorldNode> Source;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DAE0EFC4D684633, 0x18)]
        public class MsgEntityDelayedRemove : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D1BBA432A9E8FB6, 0xF0)]
        public class MsgEntityDie : MsgSceneEntityBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFE3C6EAF5A2D13D, 0x30)]
        public class MsgEntityEjected : MsgWeaponModeBase
        {
            Ptr<Entity> EntityProjectile;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39FD18843D085070, 0x18)]
        public class MsgEntityEnterState : MsgStateMachineEnterState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17AAC9F270797304, 0x18)]
        public class MsgEntityInit : MsgBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            bool IsInitMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x544584E18BAD2023, 0xD0)]
        public class MsgEntityKilled : MsgBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            EDamageFlags DamageFlags;
            Vec3 ImpactImpulse;
            float ImpactImpulseHumanoidFactor;
            float ImpactSeverity;
            Vec3 Normal;
            int ModelPartIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4198348FE2F4BF90, 0x18)]
        public class MsgEntityLeaveState : MsgStateMachineLeaveState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B7E174A45FB29B5, 0x18)]
        public class MsgEntityLive : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15E6A3921B23A4DD, 0x18)]
        public class MsgEntityOwnershipChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74742F5DBD42F4E4, 0x50)]
        public class MsgEntityPlaced : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FAA2D7CCA9052BA, 0x28)]
        public class MsgEntityPostUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE27E54B50C03BE63, 0x28)]
        public class MsgEntityPreUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4469B9AE6412816, 0x38)]
        public class MsgEntityRemovedFromScene : MsgSceneEntityBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7ECE5C4AB9FA86EA, 0x60)]
        public class MsgEntityRepTeleported : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABF46CB647087657, 0x58)]
        public class MsgEntityRepUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE16D3887B6686FD4, 0x80)]
        public class MsgEntityRepUpdateVisualBounds : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x551F8A8DD70F9CF, 0x38)]
        public class MsgEntitySpawnCanceled : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B429EE1A3CFFB26, 0x40)]
        public class MsgEntitySpotted : MsgBase
        {
            UUIDRef<SpottableComponentResource> SpottableComponentResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2CDA2E3032CB1F2, 0x28)]
        public class MsgEntityStartSpawning : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE263DDEA782BC2FB, 0x28)]
        public class MsgEntityStuckTo : MsgBase
        {
            Ptr<Entity> StickerEntity;
            MaterialType MaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC342B957572E3EC1, 0x28)]
        public class MsgEntityTeleported : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D2DABBBAB41CD26, 0x20)]
        public class MsgEntityUnboundFromSequenceNetwork : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43CEB43B053F0E1B, 0x28)]
        public class MsgEntityUpdate : MsgBase
        {
            float DeltaTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6DEA60135670818, 0x80)]
        public class MsgEntityUpdateVisualBounds : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5616E26F0E7E7327, 0x18)]
        public class MsgEntityVisualBoundsChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2249A2324D7A7838, 0x40)]
        public class MsgEnumFactChanged : MsgFactChangedBase
        {
            Ptr<EnumFact> Fact;
            GGUUID Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26C3E39135B9484B, 0x30)]
        public class MsgEquipped : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4494186422ADEC7, 0x28)]
        public class MsgEstimateTimeOfDeath : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD29991D717CB9541, 0x28)]
        public class MsgFactChangedBase : MsgBase
        {
            GGUUID Context;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6C0B700C6CA1A09, 0x20)]
        public class MsgFactionChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B3AAD13C575EAFC, 0x40)]
        public class MsgFinishedLooting : MsgSceneEntityBase
        {
            bool IsEmpty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x516BF504AE3EC0F3, 0x30)]
        public class MsgFinishedStow : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7DA7E969FB517B7, 0x30)]
        public class MsgFinishedWield : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A01519921DBBD24, 0x38)]
        public class MsgFloatFactChanged : MsgFactChangedBase
        {
            Ptr<FloatFact> Fact;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30F07CB60F5AF8A2, 0x30)]
        public class MsgFocusAlertSignalScanned : MsgScene
        {
            Ptr<FocusAlertSignal> FocusAlertSignal;
            bool FirstTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD8C457111C9063EC, 0x20)]
        public class MsgFocusCollisionTriggerUpdatesRequired : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC34697FA60D07CA4, 0x40)]
        public class MsgFocusHasAlertSignal : MsgScene
        {
            bool HasAlertSignal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAECAF158A13D027F, 0x20)]
        public class MsgFocusModeDeactivated : MsgBase
        {
            bool IsVantageFocusActivated;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA574F28D4E38C00A, 0x38)]
        public class MsgFocusScanning : MsgBase
        {
            bool IsScanned;
            bool IsBeingScanned;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3BEABD07DF0C7E4, 0x38)]
        public class MsgFocusStartScanningPart : MsgBase
        {
            bool ModelPartIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CBA716C28A3D558, 0x20)]
        public class MsgFocusTargetHighlighted : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x586ED3F0A5DF62B0, 0x58)]
        public class MsgFocusTargetIsBeingScanned : MsgScene
        {
            bool IsBeingScanned;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B185F07F48D0B5B, 0x40)]
        public class MsgFocusTargetScanned : MsgScene
        {
            bool IsScanned;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E24E53443221231, 0x30)]
        public class MsgFocusTrackingPathFocused : MsgScene
        {
            Ptr<TrackingPath> TrackingPath;
            bool IsFocused;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D91013092F8455C, 0x18)]
        public class MsgFocusVantageActivated : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D9EE1DEA1A9A943, 0x20)]
        public class MsgGainHealthSegment : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE01A786F579574FA, 0x30)]
        public class MsgGetAdditiveCameraRotation : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFADF53FF5B2830EB, 0x20)]
        public class MsgGetAimAssist : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD57023BC1015D0CE, 0x60)]
        public class MsgGetAimParms : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEA71CE74B59D2CF, 0x20)]
        public class MsgGetArmor : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94D428B814FF3D4D, 0x20)]
        public class MsgGetAttachedUser : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E155B04DFF41DE, 0x20)]
        public class MsgGetConstructor : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0A2564A7416C458, 0x20)]
        public class MsgGetCullInfo : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0A9ED6406B6D09E, 0x20)]
        public class MsgGetDisguise : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEC9E5FF77CF9029, 0x20)]
        public class MsgGetEntityLocationProvider : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2258C433A485F4D1, 0x48)]
        public class MsgGetEntityMatrixProvider : MsgGetEntityLocationProvider
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC498D6B2BF295B29, 0x48)]
        public class MsgGetEntityRepMatrixProvider : MsgGetEntityLocationProvider
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9570BDADB0491C5, 0x48)]
        public class MsgGetEntityRepTransformProvider : MsgGetEntityLocationProvider
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95007F34FEA7D7CA, 0x48)]
        public class MsgGetEntityTransformProvider : MsgGetEntityLocationProvider
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x25A8F3208F7FAB34, 0x40)]
        public class MsgGetExtraNodePosition : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3ED8B09FECF7870, 0x20)]
        public class MsgGetExtraNodesAttackNodeCount : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32C52C374E2708D8, 0x20)]
        public class MsgGetHUD : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9D976F839A2147D, 0x20)]
        public class MsgGetHUDName : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42B080A50F5F9E0D, 0x20)]
        public class MsgGetHUDTransparency : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B81EF9183768B14, 0xA0)]
        public class MsgGetLineExplosion : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99D7DEC95C7DEA52, 0x28)]
        public class MsgGetLootableItems : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60C49F6D1FD37B12, 0x20)]
        public class MsgGetMaxWaitingQueueSlots : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5334F12D5F03304F, 0x40)]
        public class MsgGetModelAbilities : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA10726585F5C0DA, 0x38)]
        public class MsgGetMountPosition : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97EDB21288D7175B, 0x50)]
        public class MsgGetPushResponse : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x522B1E75A4E14EDC, 0x20)]
        public class MsgGetQuest : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CBCBA9545FC38EA, 0x38)]
        public class MsgGetUsability : MsgBase
        {
            Ptr<Entity> User;
            Ptr<UseLocation> UseLocation;
            bool IsUsable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAAB598D334D6789, 0x30)]
        public class MsgGetUsabilityForUser : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFED0F4F3C5EF7DB, 0x28)]
        public class MsgGetUseLocationByIndex : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFC9AB9955104E88, 0x28)]
        public class MsgGetUseLocationBySectionName : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x125758E24F257D93, 0x28)]
        public class MsgGetUseLocations : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF073EB4CFB53B06, 0x70)]
        public class MsgGetUsePrecondition : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A49E16291F628F6, 0x38)]
        public class MsgGetWaitingQueueLocation : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA54254E811B5FCB4, 0x20)]
        public class MsgGetXpLevel : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x975EF86FE903D517, 0x20)]
        public class MsgGetZoomVisibilityLevel : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1DD2DB283D40CA8, 0x28)]
        public class MsgGotPickedUp : MsgBase
        {
            Ptr<Entity> User;
            Ptr<PickUpComponentBase> PickUpComponentBase;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10AE4F6CAF4CCF88, 0xB0)]
        public class MsgGroupMemberDied : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF35456808A89C177, 0x18)]
        public class MsgHUDHidePopup : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61D6074DD49C12CD, 0xA0)]
        public class MsgHUDShowNotification : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB638AB7399E0C41D, 0xB8)]
        public class MsgHUDShowPopup : MsgHUDShowNotification
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D9A55C669688254, 0x20)]
        public class MsgHUDUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48953A8478120A7F, 0x28)]
        public class MsgHackIsDisabled : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10B8FDE6BB7819E0, 0x20)]
        public class MsgHandleInput : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18404AF0F536E26C, 0x88)]
        public class MsgHeal : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5216F5C53966225, 0x18)]
        public class MsgHealthBucketRegenStarted : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x588C9BD802A800F, 0xF0)]
        public class MsgHitReactionTriggered : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77D3C502F276271A, 0xD0)]
        public class MsgIncomingDelayedDamage : MsgBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ptr<Entity> Damager;
            [RTTI.BrokenReflectionOffset(0x0)]
            Ptr<DamageTypeResource> DamageTypeResource;
            float Delay;
            WorldPosition Origin;
            Ptr<AttackEventContext> AttackEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5A29750053924A1, 0x18)]
        public class MsgInit : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57BB520DC9BFDA4E, 0x28)]
        public class MsgInitMeshHierarchy : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7D25CF1512E86F6, 0x30)]
        public class MsgInitModel : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB7A4E4358302D7B, 0x20)]
        public class MsgInitMover : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BC94A18D86C3F43, 0x18)]
        public class MsgInitSymbols : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BA908276DA9A979, 0x30)]
        public class MsgInput : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9927E6FB7F7E42EE, 0x18)]
        public class MsgInstigatorFactionChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A160CFB9D02BA53, 0x38)]
        public class MsgIntegerFactChanged : MsgFactChangedBase
        {
            Ptr<IntegerFact> Fact;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE53FD3B6595D833A, 0x18)]
        public class MsgInterruptGesture : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x944C9FA50CBF73CE, 0x20)]
        public class MsgInventoryEntityActivated : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDD2B2915D3244EB, 0x20)]
        public class MsgInventoryEntityDeactivated : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB81084FB4E8EBB5D, 0x30)]
        public class MsgInventoryFull : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9DA4D808C02B081, 0x30)]
        public class MsgInventoryItemBase : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x713633B6556A455F, 0x28)]
        public class MsgIsAimAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3546AF366228DFF0, 0x20)]
        public class MsgIsAllowedBase : MsgBase
        {
            bool Disallow;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFB28FCA27182C28, 0x20)]
        public class MsgIsAllowedWithRequiredComponentBase : MsgBase
        {
            bool HasRequiredComponent;
            bool Disallow;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA84019A10178C85, 0x20)]
        public class MsgIsAttackingAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB190867B369CE1F, 0x20)]
        public class MsgIsBreakOutOfDismountRequested : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5121064626D0B79E, 0x20)]
        public class MsgIsCombatAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x324E66F5C756DEE0, 0x20)]
        public class MsgIsContextualActionAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3779094D888AF476, 0x28)]
        public class MsgIsContextualSpeechAllowed : MsgIsAllowedWithRequiredComponentBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2ABC53370BDFF59, 0x28)]
        public class MsgIsControllerMovementAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB63950BE52AE80E, 0x20)]
        public class MsgIsDisabled : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECAE7E788FE14DCE, 0x20)]
        public class MsgIsDiveRollAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8303474E7BAFF3B9, 0x20)]
        public class MsgIsEntityDataStreamingIn : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA1C1518F5E7C64A, 0x20)]
        public class MsgIsEntityLootable : MsgBase
        {
            bool IsLootable;
            bool HasRemainingLoot;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F1806A5FFCB4E73, 0x28)]
        public class MsgIsFocusAllowed : MsgIsAllowedWithRequiredComponentBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0D1F5915E913006, 0x28)]
        public class MsgIsInventoryActionDisabled : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9640EE9E59D036FF, 0x28)]
        public class MsgIsInventoryItemSwitchAllowed : MsgIsAllowedBase
        {
            Ptr<Entity> Item;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x393E7A778BE39AB6, 0x20)]
        public class MsgIsJumpAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x98729FAD888C8085, 0x20)]
        public class MsgIsLookIKAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x516F598E504D42B2, 0x20)]
        public class MsgIsMeleeAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32DF50A18D4629CB, 0x28)]
        public class MsgIsMountingAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5269114061B70590, 0x20)]
        public class MsgIsOperating : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F590F6A415249DE, 0x20)]
        public class MsgIsPerkAbilityAvailable : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEBF39D20F6BD45C, 0x28)]
        public class MsgIsPerkLevelUnlocked : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x528E49DB222C6A6, 0x20)]
        public class MsgIsPushResponseAllowed : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE604F188DF7447D, 0x20)]
        public class MsgIsPushResponseTriggered : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEF8687C394AC45D, 0x20)]
        public class MsgIsReloadAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55360FBBA0D510E2, 0x20)]
        public class MsgIsRotationWhileClaimingUseLocationAllowed : MsgIsAllowedWithRequiredComponentBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFABCB6260643D0C3, 0x28)]
        public class MsgIsSprintAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD0BB3D6600AB1441, 0x28)]
        public class MsgIsStanceChangeAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x313303701FE7B146, 0x20)]
        public class MsgIsUseLocationClaimAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x785FF78C69E6A8FB, 0x20)]
        public class MsgIsVaultingAllowed : MsgIsAllowedBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD71CF502B4DDBC8E, 0x68)]
        public class MsgItemAddedToInventory : MsgSceneInventoryItemBase
        {
            int Amount;
            EInventoryItemAddType Type;
            bool Silent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF318692250EE14B9, 0x18)]
        public class MsgItemFirstTimeInInventory : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1AA7834608986F24, 0x60)]
        public class MsgItemRemovedFromInventory : MsgSceneInventoryItemBase
        {
            int RemovedAmount;
            int RemainingAmount;
            EInventoryItemRemoveType Type;
            bool Silent;
            bool WasInventoryFull;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA91C4BAE14B8FE7, 0x38)]
        public class MsgItemScavenged : MsgItemTransferred
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8466B323EAF8A166, 0x38)]
        public class MsgItemTransferred : MsgBase
        {
            Ptr<Entity> Source;
            Ptr<Entity> Target;
            Ptr<Entity> Item;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22DC62B70916FD10, 0x190)]
        public class MsgJoystick : MsgInput
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DCD9EE9D9CD572A, 0x40)]
        public class MsgKeyboard : MsgInput
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C35ECC67BE8494E, 0x18)]
        public class MsgKnockedDown : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83F6C1BAD09CA70F, 0xC0)]
        public class MsgLethalDamageApplied : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFEC69A4E0A21683, 0x20)]
        public class MsgLevelChanged : MsgBase
        {
            int Level;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D2E3ED0AACDB4AF, 0x28)]
        public class MsgLevelUp : MsgBase
        {
            int Level;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x41A69433D666C15D, 0x38)]
        public class MsgLoseHealthSegment : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2DCB17EB45264E9, 0x70)]
        public class MsgMarkerCanFastTravel : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB0E95AE998759CA, 0x20)]
        public class MsgMarkerGetMappedInterior : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC2D83F8B352D098, 0x30)]
        public class MsgMarkerOnStateChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x300D32A4634E0672, 0x70)]
        public class MsgMeleeDamageHitEffects : MsgBase
        {
            Ptr<Entity> Entity;
            WorldPosition HitPosition;
            Vec3 HitDirection;
            Vec3 HitNormal;
            int HitMaterialType;
            float DamageAmount;
            Ptr<DamageTypeResource> DamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7200A3770951DC92, 0x28)]
        public class MsgMeleeDamageHitResult : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x888631FB183C4384, 0x38)]
        public class MsgModelChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF88C51545B2E3B43, 0x38)]
        public class MsgModelPartsChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7657E742266548C1, 0x18)]
        public class MsgModelPartsWillBeChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x792FF60A690910EC, 0x38)]
        public class MsgModelResourceChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x463FF740BAD55B8F, 0x30)]
        public class MsgModificationSocketed : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD67FCCBB428EB45D, 0x28)]
        public class MsgModifyActiveViews : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9E12F2644975AF, 0x40)]
        public class MsgModifyAnimatedPose : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E13971BFAF6947, 0x20)]
        public class MsgModifyDamage : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x407F55476654CC21, 0x20)]
        public class MsgModifyDamageFlags : MsgBase
        {
            EDamageFlagsGameExported DamageFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9DF8F8DD9F2433C, 0x50)]
        public class MsgModifyHumanoidMovement : MsgBase
        {
            Vec3 Movement;
            float TurnSpeed;
            bool ResetVerticalVelocity;
            Ptr<Humanoid> Humanoid;
            float DeltaTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89FBA3266DE7EB40, 0x80)]
        public class MsgModifyHumanoidMovementSpace : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDE6DEFB901C5A80, 0x30)]
        public class MsgModifyLookAngleLimits : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2516822FFBF4D6CC, 0x30)]
        public class MsgModifyLookAngles : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14A199CB5935A70B, 0x30)]
        public class MsgModifyMaxLocalMovementSpeed : MsgBase
        {
            float ForwardSpeed;
            float SprintSpeed;
            float BackwardSpeed;
            float StrafeSpeed;
            Ptr<Entity> Entity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4465B461E8B3BCD, 0x28)]
        public class MsgModifyModelLOD : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7209EBD89930D33E, 0x30)]
        public class MsgModifyModelRepLOD : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA693C7B91D0855B, 0x28)]
        public class MsgModifyOrientationSpeed : MsgBase
        {
            float HeadingSpeed;
            float PitchSpeed;
            Ptr<Entity> Entity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62787B3B643EE45A, 0x20)]
        public class MsgModifyReloadSpeed : MsgBase
        {
            float ReloadSpeedModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E22E7687DF19452, 0x50)]
        public class MsgMountBase : MsgSceneEntityBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47F4FE9D9575A372, 0x28)]
        public class MsgMountBlockedFromArea : MsgBase
        {
            Ptr<Entity> Rider;
            Ptr<Entity> Mount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6CC824042DB23A97, 0x20)]
        public class MsgMountIsSlowingDownForSlope : MsgBase
        {
            int Posture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76E9F526A1DF33BB, 0x50)]
        public class MsgMounterBase : MsgSceneEntityBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2229E58CDDCEFE6B, 0x18)]
        public class MsgMounterDetachedDuringDismount : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE19C2407675228F6, 0x60)]
        public class MsgMounterStartDismount : MsgMounterBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E6709793E42FDD, 0x58)]
        public class MsgMounterStartMount : MsgMounterBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC5137E413C76815, 0x58)]
        public class MsgMounterStopDismount : MsgMounterBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E8A880D28D4765E, 0x58)]
        public class MsgMounterStopMount : MsgMounterBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAD71A8B38875F3B, 0x78)]
        public class MsgMouse : MsgInput
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76A3933C8B5CE523, 0x38)]
        public class MsgMoverArrived : MsgSceneEntityBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3765F49072024416, 0x28)]
        public class MsgNoAmmoWarning : MsgBase
        {
            Ptr<AmmoResource> AmmoResource;
            bool CanCraftAmmo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF44A22959B80E1E6, 0x20)]
        public class MsgObjectChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F8F483E90175F05, 0x28)]
        public class MsgOnCraft : MsgBase
        {
            Ptr<CraftingRecipe> Recipe;
            int Amount;
            bool Succeeded;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD48E1814D2094F00, 0x50)]
        public class MsgOnSentenceGroupFinished : MsgSceneEntityBase
        {
            UUIDRef<SentenceGroupResource> SentenceGroup;
            bool Aborted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC5ADBD39532BCA0, 0x20)]
        public class MsgOutsideBroadPhase : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1CB4533DEE0EAE4A, 0x60)]
        public class MsgOverrideObserverTransform : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x406C4A6379B25200, 0x28)]
        public class MsgOverridePose : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAEC8FB928C6AFBD, 0x18)]
        public class MsgPBDReset : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6F18D5E007CBF15, 0x48)]
        public class MsgParentChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE986F1D2ED4EAFD7, 0x20)]
        public class MsgPatrolPathTagged : MsgBase
        {
            bool IsTagged;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x21A375B05A52D864, 0x20)]
        public class MsgPerkLevelUnlocked : MsgBase
        {
            Ptr<PerkLevel> Perk;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE4799796A4FA499, 0x30)]
        public class MsgPickedUp : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22FA09B2AB26DE87, 0x20)]
        public class MsgPickedUpEntity : MsgBase
        {
            Ptr<PickUpComponentBase> PickUpComponentBase;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D5A31F9203755BA, 0x20)]
        public class MsgPinDownStarted : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB214A51F4AC85C1, 0x20)]
        public class MsgPlayerEquippedWithInventory : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65148D07BBC7BCBC, 0x28)]
        public class MsgPlayerFactionChanged : MsgBase
        {
            Ptr<Player> Player;
            Ptr<AIFaction> OldFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDDAF08476D21607F, 0x50)]
        public class MsgPlayerKilled : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBD1C6E7BFD1F820, 0x28)]
        public class MsgPlayerSpawned : MsgBase
        {
            Ptr<Entity> SpawnedEntity;
            int Wave;
            bool IsFirstSpawn;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8E2DB70C1C814BA, 0x38)]
        public class MsgPostAnimationManagerUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54F78564D7E5463, 0x18)]
        public class MsgPostLoad : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE2550815148A3A8, 0x20)]
        public class MsgPostSpawnHumanoid : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2B786E14BDF3C0D, 0x20)]
        public class MsgPrepareForRemoval : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13A90BCDA8FAEEF6, 0x58)]
        public class MsgProjectileExploded : MsgBase
        {
            WorldTransform WorldTransform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C94E76A85CCE1B5, 0x18)]
        public class MsgPropertiesUpdated : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BFD5F7314C32A76, 0x38)]
        public class MsgQueryTentativeQueueSlot : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3553C6F86BF30ABC, 0x38)]
        public class MsgQuestObjectiveUpdated : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35256F82321BB6CF, 0x28)]
        public class MsgQuestProgress : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FC1B3986F163F20, 0x20)]
        public class MsgQuestRewound : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CDB4C5CC4B433EC, 0x28)]
        public class MsgReadBinary : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE13A43E4AA4867BD, 0x38)]
        public class MsgRemoveCameraModifier : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B98A5D178BC1959, 0x20)]
        public class MsgRemoveComponent : MsgBase
        {
            Ptr<EntityComponent> Component;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3B7B6D9A4A6BA05, 0x20)]
        public class MsgRemoveEntityGroupMember : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x665241C537B3BD23, 0x38)]
        public class MsgRemovedFromInventory : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF1804F5CED97FEBB, 0x48)]
        public class MsgRequestGesture : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B7EF8224DE12B33, 0x50)]
        public class MsgReserveQueueSlot : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33ECF508278A79A3, 0x18)]
        public class MsgResetAimAssist : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DA827AA533256F4, 0x18)]
        public class MsgResetAimMagnets : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3675DB2EF370EE37, 0x18)]
        public class MsgResetPlayerCamera : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D708CFD2CABC16C, 0x40)]
        public class MsgResolveBoolProperty : MsgResolvePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4AB0C75112803D85, 0x40)]
        public class MsgResolveCoreObject : MsgResolvePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7775E0A0A5B61BBF, 0x40)]
        public class MsgResolveFloatProperty : MsgResolvePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53A36D14C3B912D5, 0x40)]
        public class MsgResolveIntProperty : MsgResolvePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10A6787ECE247821, 0x18)]
        public class MsgResolvePropertyBase : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x429D2C7C05504D73, 0x40)]
        public class MsgResolveStringProperty : MsgResolvePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x249C836A4924A6D8, 0x40)]
        public class MsgResolveVec3Property : MsgResolvePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3AD26EEE3F4557AB, 0x40)]
        public class MsgResolveWorldPositionProperty : MsgResolvePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DF0440A303C0FE4, 0x28)]
        public class MsgRestockMerchantCollection : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C23579638502E76, 0x38)]
        public class MsgRopeAnchorAttached : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA74DB5151F29B9A, 0x20)]
        public class MsgRopeAnchorBase : MsgBase
        {
            Ptr<Entity> Anchor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5BB4A1772FD0434D, 0x28)]
        public class MsgRopeAnchorBreakFreeStart : MsgRopeAnchorBase
        {
            bool SingleShot;
            bool WillBePinned;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x315F0AE459CE596B, 0x20)]
        public class MsgRopeAnchorBreakFreeStop : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x524C7F50366818B3, 0x20)]
        public class MsgRopeAnchorBreakImminent : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD92F0E1278F5AF50, 0x40)]
        public class MsgRopeAnchorConnected : MsgBase
        {
            Vec3 Direction;
            float Length;
            bool SuccessfulConnection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x954A0FAE92A8A86D, 0x18)]
        public class MsgRopeAnchorInvalid : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E15ED83C98983EA, 0x20)]
        public class MsgRopeAnchorMissed : MsgBase
        {
            bool FiredAtTarget;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CAC3D9861601EB7, 0x28)]
        public class MsgRopeAnchorPinned : MsgRopeAnchorBase
        {
            float PinnedTimeRemaining;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC8874C0ABEBF27B, 0x30)]
        public class MsgRopeAnchorPullback : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB527550968BBB50D, 0x20)]
        public class MsgRopeBroken : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7719E1D63D9A14E9, 0x18)]
        public class MsgRopeConnected : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x712A8CB5C9382A7, 0x38)]
        public class MsgRopePathCreated : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49F8D933A1F4E24, 0x20)]
        public class MsgRoundEnded : MsgBase
        {
            int State;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8681CB0E7F826449, 0x90)]
        public class MsgSayContextualSpeech : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61DBB3A104830EAB, 0x40)]
        public class MsgSayContextualSpeechResponse : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DA1D323EE599A32, 0x20)]
        public class MsgScene : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88C7D90E31AF6FD9, 0x30)]
        public class MsgSceneCustom : MsgScene
        {
            Ptr<SceneInstance> Sender;
            String ID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x378F76BE63A6F26, 0x20)]
        public class MsgSceneDoneSpawning : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC535915197B153C9, 0x18)]
        public class MsgSceneEnterState : MsgStateMachineEnterState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA70297EB71A83824, 0x38)]
        public class MsgSceneEntityBase : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48EF3253C4A84DAC, 0x50)]
        public class MsgSceneEntitySpotted : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7F3CEAE06FA1CF5, 0x28)]
        public class MsgSceneEntityUpdate : MsgSceneUpdate
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE71F918DDF7815C, 0x50)]
        public class MsgSceneInventoryItemBase : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34E07207FCECE3CA, 0x28)]
        public class MsgSceneIsStartableChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCBCDF849709F429, 0x18)]
        public class MsgSceneLeaveState : MsgStateMachineLeaveState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26AF834B06AF54EB, 0x20)]
        public class MsgSceneMoved : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15BCC9E8DF6466FA, 0x28)]
        public class MsgSceneUpdate : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF97A34DD80E32FD0, 0x18)]
        public class MsgSelectedFocusModelChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67BE2C936D5340F6, 0x28)]
        public class MsgSequenceMessageStart : MsgScene
        {
            String Message;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x349D3224D158A234, 0x28)]
        public class MsgSequenceMessageStop : MsgScene
        {
            String Message;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD892B94E3BCBB52, 0x18)]
        public class MsgSequenceNetworkFinished : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCBF2979C393E7C4, 0x20)]
        public class MsgSequenceNetworkNodeBase : MsgBase
        {
            Ptr<SequenceNetworkNodeInstance> Node;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x322050FBA4AAC8CD, 0x18)]
        public class MsgSequenceNetworkNodeFinished : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFEAD28E0AC8821A9, 0x20)]
        public class MsgSequenceNetworkNodeReached : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE87C08D93D7FC3DD, 0x18)]
        public class MsgSequenceNetworkNodeStarted : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18DDB360C201AF42, 0x18)]
        public class MsgSequenceNetworkStarted : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x795E4036AF2243A8, 0x20)]
        public class MsgSequenceNetworkUseLocationActivated : MsgSequenceNetworkNodeBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x41B93B91147CDAF9, 0x20)]
        public class MsgSequenceNetworkUseLocationDeactivated : MsgSequenceNetworkNodeBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE5890B926D9206, 0x38)]
        public class MsgSetCameraVisibility : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x225F2C34191A3C39, 0x20)]
        public class MsgSetFactorModelUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17E8FB4F3004461C, 0x28)]
        public class MsgSetFloatValue : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13AE02C3E9EDCEB4, 0x20)]
        public class MsgShadowCastingChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23DE7C14C7037A12, 0x18)]
        public class MsgShieldActivated : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D1264F979F48479, 0x20)]
        public class MsgShieldDeactivated : MsgBase
        {
            Ptr<DamageTypeResource> LastReceivedDamageTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97D07C33B230EC82, 0x38)]
        public class MsgShowPlayerNotification : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FA9CC1A73319FF, 0x40)]
        public class MsgShowSplashScreen : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4ECBCFC84E1590E, 0x18)]
        public class MsgSpawnedWave : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x286ECC9D16358CAF, 0x18)]
        public class MsgSpeedModifierRemoved : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1373FD09784B629F, 0x38)]
        public class MsgSpotAndMarkDetectedEntity : MsgBase
        {
            Ptr<Entity> DetectedEntity;
            Ptr<SpottableComponent> DetectedSpottableComponent;
            Ptr<Entity> SpotterEntity;
            float MaxDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB87680435832ADD, 0x20)]
        public class MsgStaggered : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EDA925BBE5F51, 0x20)]
        public class MsgStartAttach : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6A2317CF0522F0F, 0x18)]
        public class MsgStartContextualEmotion : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA688C756C55623A, 0x28)]
        public class MsgStartDetach : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89AB7C2E68317B24, 0x58)]
        public class MsgStartDismount : MsgMountBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F431749E8457A62, 0x58)]
        public class MsgStartMount : MsgMountBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF855AAB0F5875A4, 0x50)]
        public class MsgStartUseSmartObject : MsgUseSmartObjectBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE14EA597D3B1F97D, 0x20)]
        public class MsgStartedHealthRegeneration : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83C312A472E045F9, 0x58)]
        public class MsgStartedLooting : MsgSceneEntityBase
        {
            ELootItemRarity ItemRarity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6EB602ED6249034E, 0x30)]
        public class MsgStartedStow : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF492780683734DB8, 0x30)]
        public class MsgStartedWield : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90779E03E911C05B, 0x18)]
        public class MsgStateMachineEnterState : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D16F32DA793259C, 0x18)]
        public class MsgStateMachineLeaveState : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFF9A3CCE03B9A8A, 0x80)]
        public class MsgStick : MsgBase
        {
            Ptr<Entity> ContactEntity;
            MaterialType MaterialType;
            WorldTransform WorldTransform;
            Vec3 Normal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C9E09508F14D161, 0x28)]
        public class MsgStickIgnored : MsgBase
        {
            Ptr<Entity> IgnoredEntity;
            MaterialType MaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA30F2A3DB218851F, 0x20)]
        public class MsgStopBlending : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9142C3FB40438C5, 0x58)]
        public class MsgStopDismount : MsgMountBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65186560939BEB6A, 0x58)]
        public class MsgStopMount : MsgMountBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x152C7EE2518DC6A8, 0x18)]
        public class MsgStopPlayerTool : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7DAB4890481168, 0x20)]
        public class MsgStoppedHealthRegeneration : MsgBase
        {
            bool FinishedRegeneration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF7BD2D2D296A98AA, 0x20)]
        public class MsgStunnedStatus : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95F72BC93EF7C09A, 0x38)]
        public class MsgTagged : MsgBase
        {
            bool IsTagged;
            bool IsTaggedByFocusMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58AFA99D239993EF, 0x30)]
        public class MsgThreat : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB72040AFCD3448FB, 0x30)]
        public class MsgThreatIdentified : MsgThreat
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF620E29B358F3EA2, 0x30)]
        public class MsgThreatSuspected : MsgThreat
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AA94A675CD40513, 0x40)]
        public class MsgTrigger : MsgSceneEntityBase
        {
            Ref<CollisionTrigger> Trigger;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC8D3794EAF57AFA7, 0x20)]
        public class MsgTriggerCustomEvent : MsgBase
        {
            String Identifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC8765ADF908BE10, 0x40)]
        public class MsgTriggerEntered : MsgTrigger
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FCEB8C61CF01888, 0x40)]
        public class MsgTriggerExited : MsgTrigger
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17680B1C1B9E9F0D, 0x30)]
        public class MsgTriggerExposedAction : MsgTriggerCustomEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC890C024B46037B, 0x20)]
        public class MsgTriggerPerkAbility : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC23227A0E93D035, 0x40)]
        public class MsgTriggerRemoved : MsgTrigger
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x347993D0DD561509, 0x30)]
        public class MsgUnequipped : MsgInventoryItemBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9E5E3C988332AE4, 0x18)]
        public class MsgUnstick : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB87B633BCE338A2, 0x30)]
        public class MsgUpdate : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB2A0F454C07685B, 0x20)]
        public class MsgUpdateAINodeHelpers : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5AB5B225D34B556D, 0x1A0)]
        public class MsgUpdateAimAssist : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E21DB0A3DD1C438, 0x1A0)]
        public class MsgUpdateAimMagnets : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB877FF349FCB4F17, 0xA0)]
        public class MsgUpdateBaseTransform : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB97231CEA47BE46F, 0x58)]
        public class MsgUpdateBlending : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC1639A0DFC50B7F, 0x30)]
        public class MsgUpdateGestureTarget : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x295A043D8F46EAD9, 0xC0)]
        public class MsgUpdateMeshHierarchy : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAAE7D9AE96C167C, 0x30)]
        public class MsgUse : MsgBase
        {
            Ptr<Entity> User;
            bool IsUsed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD46B921A60225940, 0x18)]
        public class MsgUseAttemptFailed : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43B79DF649806F57, 0x48)]
        public class MsgUseCancelled : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80867CE632211724, 0x20)]
        public class MsgUseHealthBucket : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42E94DB0B904E918, 0x20)]
        public class MsgUseHealthPack : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE01E477B9366CD82, 0x28)]
        public class MsgUseInventoryItem : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9B5CC472BD8B0EC, 0x68)]
        public class MsgUseLocationClaimed : MsgSceneEntityBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ptr<Entity> User;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96A09B4328EFA00D, 0x30)]
        public class MsgUseLocationClaimedReleased : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84DAB5BD3AC23F96, 0x20)]
        public class MsgUseLocationOwnershipFailed : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9299AF7A845629EF, 0x20)]
        public class MsgUseLocationReleaseClaim : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2560736137EFC18C, 0x20)]
        public class MsgUsePlayerTool : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1593F1B87BC90466, 0x50)]
        public class MsgUseSmartObjectBase : MsgScene
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAA76C6F772923C8, 0x20)]
        public class MsgUsedEntity : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7975E373FCCAF1DB, 0x50)]
        public class MsgUserEndUseSmartObject : MsgUseSmartObjectBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6599990BD59F5847, 0x50)]
        public class MsgUserStartUseSmartObject : MsgUseSmartObjectBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3C3DE295F5479EA2, 0x18)]
        public class MsgVisibilityChanged : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x341D6BD3DF3FFCFD, 0x20)]
        public class MsgWeaponChargeAborted : MsgWeaponModeBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA14A34E78BF04287, 0x28)]
        public class MsgWeaponFired : MsgBase
        {
            Ptr<Entity> Weapon;
            bool Silenced;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x796CBA37A04344CF, 0x20)]
        public class MsgWeaponModeBase : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x905B9148B8FB68A5, 0x60)]
        public class MsgXpChange : MsgBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88452E9E6ECC11AA, 0x20)]
        public class MsgZoomIndexUpdated : MsgBase
        {
            int CurrentZoomIndex;
            int PreviousZoomIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20D06AAD59600257, 0x40)]
        public class MultiAction : EntityAction
        {
            Array<Ptr<EntityAction>> Actions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B6BFAEAEC9A86D7, 0x140)]
        public class MultiBlendedMeshInstance : GeometryObject
        {
            String Name;
            Ref<MultiBlendedMeshResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4574FA6543DB1BF, 0x48)]
        public class MultiBlendedMeshResource : Resource
        {
            Array<BlendedMeshEntry> BlendedMeshes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E5B9ADDE8F1FD9B, 0x80)]
        public class MultiMeshActorResource : ModelActorResource
        {
            Ref<SkinnedModelResource> SkinnedModelResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB57FDC03AEE67814, 0x60)]
        public class MultiMeshAnimationEventResource : FullBodyAnimationEventResourceBase
        {
            Ref<SkeletonAnimationResource> AnimationResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6174587B926EDAD5, 0xA0)]
        public class MultiMeshResource : MeshResourceBase
        {
            Array<MultiMeshResourcePart> Parts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x467B9AC953B5146A, 0x48)]
        public class MultiMeshResourcePart
        {
            Ref<MeshResourceBase> Mesh;
            WorldTransform Transform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6635F9C24240C5B2, 0x190)]
        public class MultiSpawnpoint : SpawnpointBase
        {
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x736A0CB40CCBCFBF, 0x10)]
        public class MurmurHashValue
        {
            uint8 Data0;
            uint8 Data1;
            uint8 Data2;
            uint8 Data3;
            uint8 Data4;
            uint8 Data5;
            uint8 Data6;
            uint8 Data7;
            uint8 Data8;
            uint8 Data9;
            uint8 Data10;
            uint8 Data11;
            uint8 Data12;
            uint8 Data13;
            uint8 Data14;
            uint8 Data15;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x91F611CBBC3FED32, 0x30)]
        public class MusicFactValue : EnumFactValue
        {
            String ExitPresetName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33171B80F1A09BC1, 0x58)]
        public class MusicPresetEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB689571D88581935, 0x38)]
        public class MusicPresetEventResource : EventResource
        {
            String PresetName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x873D69111E6F7262, 0x88)]
        public partial class MusicResource : Resource, RTTI.IExtraBinaryDataCallback
        {
            Array<uint32> StreamingDataHash;
            int BitRate;
            bool StripSilence;
            int StripSilenceThreshold;
            Array<MusicSubmixBinding> SubmixBindings;
            Array<String> StreamingBankNames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBB96BDA4F16E127, 0x10)]
        public class MusicSubmixBinding
        {
            String TrackName;
            Ref<SubmixResource> Submix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5BF264F0651F3F3, 0xB0)]
        public class MusicSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x428F6D6124F730A1, 0xB0)]
        public class NPCSchedule : GameSchedule
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FA53DF9BD05686C, 0x28)]
        public class NPCScheduleActivity : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61131A40106D38F0, 0x48)]
        public class NPCScheduleActivityResource : Resource
        {
            Ptr<EntityAction> StartAction;
            Ptr<EntityAction> StopAction;
            bool IsImmediateAction;
            Ref<SmartObjectDesireComponentResource> SmartObjectDesireComponent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE4A1F344A68CC2D, 0x68)]
        public class NPCScheduleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x428D72E128404785, 0x30)]
        public class NPCScheduleComponentResource : EntityComponentResource
        {
            Ref<NPCScheduleResource> NPCSchedule;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4F303CC74F4A9BA, 0x38)]
        public class NPCScheduleEntry : GameScheduleEntry
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9A3A2B5286FB158, 0x48)]
        public class NPCScheduleEntryResource : GameScheduleEntryResource
        {
            Ref<NPCScheduleLocationResource> Location;
            Ref<NPCScheduleActivityResource> Activity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E96B5863A38847, 0x18)]
        public class NPCScheduleLocation : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F85349231976D66, 0x50)]
        public class NPCScheduleLocationArea : NPCScheduleLocation
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCCADFDAF8A6BAE07, 0x30)]
        public class NPCScheduleLocationAreaResource : NPCScheduleLocationResource
        {
            Ref<SmartObjectArea> Area;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x327716D77DF31C7E, 0x28)]
        public class NPCScheduleLocationResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D9C0437E52DB856, 0xA0)]
        public class NPCScheduleManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA48C750704CB82AC, 0x40)]
        public class NPCScheduleResource : GameScheduleResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6482632D995712F2, 0x30)]
        public class NPCScheduleResourceProperty : NPCScheduleResourcePropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA805A18E60515B9A, 0x30)]
        public class NPCScheduleResourcePropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1382E5F23F5036F1, 0x38)]
        public class NPCScheduleResourcePropertyValue : PropertyValue
        {
            Ref<NPCScheduleResourcePropertyBase> Property;
            Ref<NPCScheduleResource> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3ADEDA239F6CB7DD, 0x10)]
        public class NameToSoundParameterMapping
        {
            String Name;
            String SoundParameterName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F56195C745AAEE8, 0x30)]
        public class NamedDataSourceResource : DataSourceResource
        {
            String DataSourceName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E8C7DA194DFF0BA, 0x80)]
        public class NavMesh : CoreObject
        {
            Array<NavMeshTileInfo> TileInfoMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x25F0102A35613A4B, 0x90)]
        public class NavMeshArea : ParentWorldNode
        {
            String AreaName;
            Ref<TerrainHull> Hull;
            Array<Ref<NavMeshAreaTag>> AreaTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78A2ECB8FF63BDFB, 0x28)]
        public class NavMeshAreaTag : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15AF90DEDCADE25D, 0x1D8)]
        public class NavMeshBuilder : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E890C65053642C5, 0x48)]
        public class NavMeshBuilderSettings : CoreObject
        {
            String Name;
            float CharacterRadius;
            float CharacterHeight;
            float WalkableClimbWorld;
            float VoxelSize;
            int TileSize;
            float ShallowWaterLevel;
            bool CanSwim;
            bool EnableDetailMesh;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA267DC0F3F997799, 0x18)]
        public class NavMeshObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC624327DCF08C22B, 0x18)]
        public class NavMeshObjectAreaList
        {
            Array<int> AreaList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23086C3E6A3C3B6B, 0x10)]
        public class NavMeshTileInfo
        {
            Array<NavMeshObjectAreaList> ObjectAreaList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA5CF06310676470, 0x88)]
        public class NearDeathModeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E306A99E473CAE0, 0x58)]
        public class NearDeathModeComponentResource : EntityComponentResource
        {
            float Duration;
            float HealthThreshold;
            float TimeScale;
            Ptr<EntityAction> ActivateAction;
            Ptr<EntityAction> DeactivateAction;
            Ref<CameraPropertiesSetResource> CameraOverride;
            float CameraInterpolationDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4F12B1A0BDD73EA6, 0x1A0)]
        public class NetAttachableUseLocation : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x770EB30373D5DF63, 0x1B0)]
        public class NetCaptureAndHoldArea : NetSpawnArea
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD60339D719002A17, 0x190)]
        public class NetControlledEntity : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7A9E426ACC0C904, 0x190)]
        public class NetElectricityGrenade : NetThrowable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB402AE31106D85DD, 0x190)]
        public class NetEntity : NetReplicatedObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2FA3045B01273CE7, 0x38)]
        public class NetErrorHandlerGame : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED5B1C08E13F8697, 0x190)]
        public class NetExplosion : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63B57CDC16EE648B, 0x190)]
        public class NetExplosiveLocation : NetMountableEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24DDF654DA3026DC, 0x1A0)]
        public class NetHumanoid : NetControlledEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18261FD4A2B34EC4, 0x190)]
        public class NetInteractiveEntity : NetControlledEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD175D676AE4EBE65, 0x1B0)]
        public class NetInventoryEntity : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC197BFB4E13BBB76, 0x78)]
        public class NetManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA35FA17871EB1762, 0x160)]
        public class NetManagerGame : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FCD8E693B2FABF8, 0x190)]
        public class NetMine : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x824F2495740E510E, 0x1D0)]
        public class NetMissionManager : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x651483FED83544B4, 0x190)]
        public class NetMountableEntity : NetInteractiveEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96519E38468DEC3D, 0x58)]
        public class NetMutex : NetReplicatedObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF5760F6AE3A45E5, 0x48)]
        public class NetNpManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A044B6CB34D0C95, 0x70)]
        public class NetPartyManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB099862CD9B9C93, 0x190)]
        public class NetPlayAnimationObject : NetMountableEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54F0FA566E6B2FA5, 0x90)]
        public class NetPlayer : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6E1464491D82295, 0x90)]
        public class NetPlayerGame : NetPlayer
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BCE956A0BF86C87, 0x68)]
        public class NetPlayerManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD16D3EB96EEBB7D, 0x40)]
        public class NetReplicatedObject : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38EB6FE07C422B68, 0x190)]
        public class NetRespawnEntity : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7138219B241B13B7, 0x190)]
        public class NetSearchAndRetrieveObject : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E657D9BF73D7B0A, 0x1B0)]
        public class NetSequence : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69F719F3C1EAAA99, 0x58)]
        public class NetSessionManager : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AF8A8A4310411E, 0x190)]
        public class NetSignalGrenade : NetThrowable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3A186130434784B, 0x1A0)]
        public class NetSoldier : NetHumanoid
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5210462C7ED8D4B7, 0x1A0)]
        public class NetSpawnArea : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE63D8DA33F1DB06, 0x190)]
        public class NetSwitch : NetInteractiveEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF07B684CD5FBF9, 0x190)]
        public class NetThrowable : NetEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x762F407286ECA7B5, 0x1A0)]
        public class NetTurret : NetControlledEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x932BA43E1EA21EB9, 0x190)]
        public class NetValve : NetMountableEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD330460F48989BBD, 0x40)]
        public class NetworkLink : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B1F38CACED6C823, 0x48)]
        public class NewGamePlusSettingsResource : Resource
        {
            Array<Ref<Fact>> SavedFacts;
            Array<Ref<FactValue>> GlobalFactValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFE611C889BC101A, 0xA0)]
        public class NewGamePlusSettingsResourceGame : NewGamePlusSettingsResource
        {
            Ref<LocalizedTextResource> SaveGameTitle;
            Ref<AIMarker> SaveMarker;
            Array<Ref<PerkLevel>> PerksToUnlearn;
            Ref<IntegerFact> GameCompletionCountFact;
            Ref<BooleanFact> DenyNewGamePlusSaveFact;
            Array<Ref<TagProperty>> IgnoreInventoryItemTags;
            bool SaveBuyBackItems;
            Array<Ref<QuestType>> SupressNotificationsForQuestTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45D966D5F2DB23D9, 0x40)]
        public class NodeConstantsInstance
        {
            Ref<NodeConstantsResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7363AD8DC3B1FCF, 0x60)]
        public class NodeConstantsResource : RTTIRefObject
        {
            Array<ProgramParameter> Parameters;
            Array<int> ExposedObjectsIndices;
            Array<int> ExposedUUIDRefIndices;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2687FDEFCF449366, 0x30)]
        public class NodeGraphAIBehaviorGroupVariableOverride : NodeGraphVariableOverride
        {
            Ref<AIBehaviorGroup> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5FBABF1E859E99AA, 0x38)]
        public class NodeGraphAdvancedTypesGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D689EB697F00BEE, 0x30)]
        public class NodeGraphAttachedLightsComponentResourceVariableOverride : NodeGraphVariableOverride
        {
            Ref<AttachedLightsComponentResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C4EF3D25F4B052D, 0x30)]
        public class NodeGraphBoolVariableOverride : NodeGraphVariableOverride
        {
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBAE529286D23DBC, 0x30)]
        public class NodeGraphBooleanFactVariableOverride : NodeGraphVariableOverride
        {
            Ref<BooleanFact> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F3212A42325B422, 0x70)]
        public class NodeGraphComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8DFB48FACF4FBFE3, 0x70)]
        public class NodeGraphComponentLegacy : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8207E038821AAEDF, 0x48)]
        public class NodeGraphComponentResource : EntityComponentResource
        {
            Ref<GraphProgramResource> GraphProgramResource;
            Ref<OverrideGraphProgramResource> OverrideGraphProgramResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BB1E1C5229DA05D, 0x30)]
        public class NodeGraphComponentResourceLegacy : EntityComponentResource
        {
            Ref<EventDrivenStateMachineResource> StateMachineResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA8DD7FCABB51F4E, 0x1)]
        public class NodeGraphControlFlow
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC0C78A16F42D0F5, 0x38)]
        public class NodeGraphCraftingRecipeUUIDRefVariableOverride : NodeGraphVariableOverride
        {
            UUIDRef<CraftingRecipe> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x706C561E5C2A9E0C, 0x30)]
        public class NodeGraphCurveResourceVariableOverride : NodeGraphVariableOverride
        {
            Ref<CurveResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x92204D02A5F24FB1, 0x30)]
        public class NodeGraphDamageSettingsVariableOverride : NodeGraphVariableOverride
        {
            Ref<DamageSettings> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC742362198048D12, 0x30)]
        public class NodeGraphDestructibilityPartVariableOverride : NodeGraphVariableOverride
        {
            Ref<DestructibilityPart> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x598538348FBD6558, 0x30)]
        public class NodeGraphEffectComponentResourceVariableOverride : NodeGraphVariableOverride
        {
            Ref<EffectComponentResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59663636CBF70636, 0x30)]
        public class NodeGraphEntityComponentResourceVariableOverride : NodeGraphVariableOverride
        {
            Ref<EntityComponentResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x250971FB56A2E037, 0x30)]
        public class NodeGraphEntityPlaceHolderVariableOverride : NodeGraphVariableOverride
        {
            Ref<EntityPlaceHolder> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x113407851FCE810, 0x38)]
        public class NodeGraphEntityResourceUUIDRefVariableOverride : NodeGraphVariableOverride
        {
            UUIDRef<EntityResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECB95A128A34F66A, 0x30)]
        public class NodeGraphEntityResourceVariableOverride : NodeGraphVariableOverride
        {
            Ref<EntityResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6702F143C038C6CC, 0x30)]
        public class NodeGraphEnumFactVariableOverride : NodeGraphVariableOverride
        {
            Ref<EnumFact> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90F285C5EE01620E, 0x40)]
        public class NodeGraphFRGBAColorVariableOverride : NodeGraphVariableOverride
        {
            FRGBAColor Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x972C0CDFBE90F955, 0x30)]
        public class NodeGraphFloatFactVariableOverride : NodeGraphVariableOverride
        {
            Ref<FloatFact> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7F19E0722DB661B, 0x30)]
        public class NodeGraphFloatVariableOverride : NodeGraphVariableOverride
        {
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA71769B7A68DE169, 0x38)]
        public class NodeGraphGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF1803EDBDD6B8476, 0x38)]
        public class NodeGraphHumanoidBodyVariantInterfaceUUIDRefVariableOverride : NodeGraphVariableOverride
        {
            UUIDRef<HumanoidBodyVariantInterface> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB53519292C393EA, 0x38)]
        public class NodeGraphHumanoidBodyVariantUUIDRefVariableOverride : NodeGraphVariableOverride
        {
            UUIDRef<HumanoidBodyVariant> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E110D2854135813, 0x30)]
        public class NodeGraphIntVariableOverride : NodeGraphVariableOverride
        {
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBB19A86CD4129C5, 0x30)]
        public class NodeGraphIntegerFactVariableOverride : NodeGraphVariableOverride
        {
            Ref<IntegerFact> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F291541B8D33C68, 0x70)]
        public class NodeGraphMat44VariableOverride : NodeGraphVariableOverride
        {
            Mat44 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD8486928A913EC44, 0x38)]
        public class NodeGraphMemoryGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1C3062F5F5C6F99, 0x30)]
        public class NodeGraphModelPartResourceVariableOverride : NodeGraphVariableOverride
        {
            Ref<ModelPartResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D1BF9157436F40C, 0x40)]
        public class NodeGraphQuatVariableOverride : NodeGraphVariableOverride
        {
            Quat Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3DB348AC55D0A13B, 0x30)]
        public class NodeGraphResourceVariableOverride : NodeGraphVariableOverride
        {
            Ref<BaseResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6D857E70B2A19AB, 0x30)]
        public class NodeGraphSentenceGroupVariableOverride : NodeGraphVariableOverride
        {
            Ref<SentenceGroupResource> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF505E901914933E, 0x30)]
        public class NodeGraphSpawnpointVariableOverride : NodeGraphVariableOverride
        {
            Ref<Spawnpoint> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF10D3FFB13F214E3, 0x30)]
        public class NodeGraphStringVariableOverride : NodeGraphVariableOverride
        {
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38ED6FA6DD903D01, 0x28)]
        public class NodeGraphVariableOverride : BaseResource
        {
            String VariableId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD4F5E4B6EA80D88, 0x40)]
        public class NodeGraphVec3VariableOverride : NodeGraphVariableOverride
        {
            Vec3 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FD32962DAFA41B8, 0x40)]
        public class NodeGraphVec4VariableOverride : NodeGraphVariableOverride
        {
            Vec4 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42BBA679A6F5D6E4, 0x40)]
        public class NodeGraphWorldPositionVariableOverride : NodeGraphVariableOverride
        {
            WorldPosition Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6AA2D288FA1B1B7, 0x1)]
        public class NotAllowedInTemplate
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB803878204CD13A, 0x38)]
        public class ObjectAttributeAnimatorInstance : CoreObject
        {
            Ref<ObjectAttributeAnimatorResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE67B66092B9E9796, 0x68)]
        public class ObjectAttributeAnimatorManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x98E5E00BE8ADC451, 0x38)]
        public class ObjectAttributeAnimatorResource : ObjectAttributeAnimatorResourceBase
        {
            ELoopMode LoopMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFF118CB857CEFF0, 0x30)]
        public class ObjectAttributeAnimatorResourceBase : Resource
        {
            float AnimationDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55B8687CEDB33B9B, 0x48)]
        public class ObjectAttributeAnimatorSetInstance : ObjectAttributeAnimatorInstance
        {
            Array<Ref<ObjectAttributeAnimatorInstance>> ObjectAttributeAnimators;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF82B6113402BEE7, 0x48)]
        public class ObjectAttributeAnimatorSetResource : ObjectAttributeAnimatorResource
        {
            Array<Ref<ObjectAttributeAnimatorResource>> ObjectAttributeAnimators;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA97082C73B2BC4BB, 0x48)]
        public class ObjectCollection : CoreObject
        {
            RTTIRefObjectSet base_RTTIRefObjectSet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB0DE2ADBC9DA5AE, 0x8)]
        public class ObjectEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD807A33BA76DA009, 0x68)]
        public class ObjectManager : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33A514A2A9AF579E, 0x8)]
        public class ObjectiveCount
        {
            int PlayerCount;
            int _ObjectiveCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x719178DC1A5C0766, 0x70)]
        public class ObjectiveResource : Resource
        {
            String BriefActiveDescription;
            String FullActiveDescription;
            String BriefCompletedDescription;
            String FullCompletedDescription;
            String BriefFailedDescription;
            String FullFailedDescription;
            String Identifier;
            Ref<StoryArc> StoryArc;
            int CompletedByNode;
            bool IsStoryObjective;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47155A72ECFDD414, 0x80)]
        public class ObjectiveSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDD6D72C77E1B8D, 0x70)]
        public class ObjectiveTargetArrowComponent : TargetArrowComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x145B0472256B2A68, 0x38)]
        public class ObjectiveTargetArrowComponentResource : TargetArrowComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF3443EB0931EF7B, 0xA8)]
        public class ObstacleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5BE0822DDD5BC9D3, 0x60)]
        public class ObstacleComponentResource : EntityComponentResource
        {
            EObstacleType ObstacleType;
            EObstacleShape ObstacleShape;
            BoundingBox3 LocalBoundingBox;
            int SoftObstacleDestructDamage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7624B28D962C4F05, 0x88)]
        public class ObtainItemsQuestTrigger : EntityBasedQuestTrigger
        {
            bool MakeQuestItem;
            bool PerformInitialCheck;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD86B01618CA0925C, 0x70)]
        public class Occluder
        {
            SimplePolygon Polygon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF7C866489336816D, 0x250)]
        public class OmniLight : LightShadowed
        {
            float FadeRatio;
            float Radius;
            float ShadowConeAngle;
            float ShadowHotspotAngle;
            float ShadowNearPlane;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x747A582F11B17577, 0x210)]
        public class OmniLightResource : LightShadowedResource
        {
            float FadeRatio;
            float Radius;
            float ShadowConeAngle;
            float ShadowHotspotAngle;
            float ShadowNearPlane;
            bool OmniShadows;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4861C2F5071BA07A, 0x38)]
        public class OnlineLoadout : RTTIObject
        {
            int ID;
            String Name;
            int CareerID;
            int PrimaryWeapon;
            int SecondaryWeapon;
            int AuxiliaryWeapon;
            int PrimaryAbility;
            int SecondaryAbility;
            int TertiaryAbility;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC65F2B79E827A4F7, 0x38)]
        public class OpenCloseTurretAction : EntityAction
        {
            bool Open;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA877FCCCC773252, 0x58)]
        public class OpenMenuAction : EntityAction
        {
            UUIDRef<MenuPageBase> MenuPage;
            Array<OpenMenuParameter> Parameters;
            bool PauseGame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC70D49793BE72032, 0x10)]
        public class OpenMenuParameter
        {
            String Name;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE17BC94E52C3A23, 0x38)]
        public class OpenMenuParameters : Resource
        {
            Array<OpenMenuParameter> Parameters;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E53F3B8916885D2, 0x50)]
        public class OpenMenuSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52D9C814286CB69B, 0x110)]
        public class OrbitCameraActorInstance : EntityActorInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71156D53995488B7, 0xC0)]
        public class OrbitCameraActorResource : ActorResource
        {
            Ref<CameraEntityResource> CameraEntityResource;
            Ref<LocatorResource> PrimaryLookAt;
            Ref<LocatorResource> SecondaryLookAt;
            Ref<LocatorResource> PrimaryOrientation;
            Vec3 TargetOffset;
            Ref<CurveResource> Factor;
            float SmoothTime;
            Ref<CurveResource> Distance;
            Ref<CurveResource> OrbitAngle;
            Ref<CurveResource> VerticalOrbitAngle;
            Ref<CurveResource> LookAtBias;
            Ref<CurveResource> FOV;
            Ref<CurveResource> ViewOffsetX;
            Ref<CurveResource> ViewOffsetY;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23CFDA50594FA13, 0x50)]
        public class OrientationHelper
        {
            Mat44 Matrix;
            String Name;
            int Index;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8420DA0BF05ADA3, 0x50)]
        public class OrientedBox
        {
            Mat44 Matrix;
            Vec3 Extents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC20911490B57207, 0x68)]
        public class OtherEntityLifetimeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB221C212AC160F6C, 0x18)]
        public class OutOfBoundsAreaTag
        {
            Ref<NavMeshAreaTag> NavMeshAreaTag;
            Ref<ConditionResource> ActiveCondition;
            bool AllowContextualSpeech;
            bool AllowTeleportWhenConditionChanged;
            bool AllowSuspendButtonInput;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6CA84CDCA47AA2FA, 0xA0)]
        public class OutOfBoundsNavMeshArea : NavMeshArea
        {
            Ref<LocalizedTextResource> NotAllowedInAreaText;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x288CB323E997A4DC, 0x88)]
        public class OutOfBoundsQueryComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC610664544CEDA9, 0x40)]
        public class OutOfBoundsQueryComponentResource : EntityComponentResource
        {
            Array<OutOfBoundsAreaTag> OutOfBoundsAreaTags;
            Ref<ContextualSpeechEvent> ContextualSpeechEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D7A39DC5F540184, 0x30)]
        public class OutfitCraftingViewController : CraftingViewController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA94A63D73771CEF0, 0x58)]
        public class OverrideAirSceneRestrictionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B6210AE84579AEE, 0x48)]
        public class OverrideAirSceneRestrictionComponentResource : EntityComponentResource
        {
            WorldPosition Position;
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9E83879D88A3476, 0x68)]
        public class OverrideAutoContextInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9EA3404334F8505F, 0x48)]
        public class OverrideAutoContextResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            Ref<AIContextHintResource> ContextHint;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1661CF7D668C00B, 0x60)]
        public class OverrideCameraDoFEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x867A26B5D5C92319, 0x50)]
        public class OverrideCameraDoFEventResource : TimedEventResource
        {
            Ref<CameraActorResource> CameraActorResource;
            Ref<CurveResource> Aperture;
            Ref<CurveResource> FocusDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0A738449ACBF3CD, 0x58)]
        public class OverrideCrosshairColorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63D8F6B034D35C5B, 0x48)]
        public class OverrideCrosshairColorComponentResource : EntityComponentResource
        {
            Ref<CrosshairColor> FriendlyLockedColor;
            Ref<CrosshairColor> EnemyLockedColor;
            Ref<CrosshairColor> NoLockColor;
            float IgnoreDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9DF8B53E0D5153C3, 0x40)]
        public class OverrideDeathCamAction : EntityAction
        {
            Ref<DeathCameraEntityResource> DeathCam;
            bool UseDeathCamOnce;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF42C07B6AA789456, 0x60)]
        public class OverrideEyeColorEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70DA20762EC279DB, 0x48)]
        public class OverrideEyeColorEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<AIEyeColorHintResource> EyeColorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE27D23D67B441C37, 0x50)]
        public class OverrideGraphProgramResource : BaseResource
        {
            Ref<GraphProgramResource> GraphProgramResource;
            Array<Ref<NodeGraphVariableOverride>> VariableOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE90D340F3C32CB65, 0x38)]
        public class OverrideInventoryMainItemAction : EntityAction
        {
            Ptr<InventoryEntityResource> InventoryEntity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51197D9790B4BE75, 0x58)]
        public class OverrideMovementEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C1D53ADF42B9C6D, 0x58)]
        public class OverrideMovementEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<LocatorResource> TargetLocatorResource;
            String TargetHelperNode;
            bool DoCollision;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE1B242BEAE9AAD4, 0x48)]
        public class PBDBlastWaveAction : EntityAction
        {
            String HelperNode;
            float BlastSpeed;
            float BlastRadius;
            float BlastForce;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x857DAE34C091FEC4, 0x70)]
        public class PBDBodyResource : Resource
        {
            Array<PBDVertexDesc> Vertices;
            Array<PBDConstraintDesc> Constraints;
            Array<uint16> TriangleIndexList;
            float GlobalMotionDamping;
            float ForceFieldInfluence;
            float Drag;
            float Lift;
            int ConstraintSizeRT;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2E40518E68C0161, 0x10)]
        public class PBDConstraintDesc
        {
            EPBDConstraintDescType Type;
            float Stiffness;
            uint16 VtxIndex0;
            uint16 VtxIndex1;
            uint16 VtxIndex2;
            uint16 VtxIndex3;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BFC9D1246825F3C, 0x48)]
        public class PBDDeformedSkinnedMesh : BaseResource
        {
            Ref<PBDBodyResource> PBDBodyResource;
            Ref<RegularSkinnedMeshResourceBase> SkinnedMesh;
            PBDPoseMapper PoseMapper;
            Ref<SkinnedPointsResource> SkinAttachedPoints;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6D8C48A6A618499, 0xB8)]
        public class PBDEffectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F5BE5506780A184, 0x38)]
        public class PBDEffectComponentResource : EntityComponentResource
        {
            float SphereRadius;
            String HelperNode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A97E759F9A00E66, 0x18)]
        public class PBDGraphExtInput
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8DC6BBEC41D623E, 0x38)]
        public class PBDGraphGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF699AF60AB3476E, 0x28)]
        public class PBDGraphSimBody
        {
            Ref<PBDBodyResource> Body;
            Array<PBDVertexTopologyDesc> VtxTopologyList;
            Array<PBDVtxSkinBinding> VtxSkinBindingListRT;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9D8A583E4C98D29, 0x70)]
        public class PBDNodeStateInstance : StateObjectInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40D6E0DEF72B527, 0x68)]
        public class PBDNodeStateResource : StateObjectResource
        {
            int SolverIterations;
            float SolverUpdateFreq;
            float Friction;
            float Restitution;
            bool WorldMotionLimitEnabled;
            float WorldMotionLimit;
            float WorldMotionInfluence;
            Array<PBDGraphSimBody> BodyList;
            Ref<Skeleton> Skeleton;
            Array<Mat44> InvBindMatrices;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63D4A4DF6C4B7DA5, 0x10)]
        public class PBDPoseMapper
        {
            Array<float> VtxToMatrixMapping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3848124A4B784C75, 0x20)]
        public class PBDVertexDesc
        {
            Vec3 Position;
            float Mass;
            float Area;
            float MaxDistance;
            float Backstop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9D1F83283770E2E, 0x10)]
        public class PBDVertexTopologyDesc
        {
            Array<uint16> IdxList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6714FF0562C796B0, 0xC)]
        public class PBDVtxSkinBinding
        {
            //uint16_PBD_MAX_SKIN_WEIGHTS<uint16> InflIdx;
            //uint8_PBD_MAX_SKIN_WEIGHTS<uint8> Weights;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x591428E700F463F0, 0x38)]
        public class PCoreFuncGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22CAF9094B56FE0C, 0x38)]
        public class PCoreGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBE1144154AAC80A, 0x38)]
        public class PGeometryGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6F65A45EC61DAFA, 0x38)]
        public class PMathGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC02B7EC91CB8B08D, 0x38)]
        public class PMathGroupGlobals : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6F65B5A11A5F783, 0x8)]
        public class PODVariant
        {
            EPODVariantType Type;
            uint32 BinaryValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x649D196A09A3A7CB, 0x38)]
        public class POSFuncGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2252C14BDBB64E1C, 0x1E0)]
        public class PadMappingViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58A2A822D8FDF7EE, 0x30)]
        public class PaintJob
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9B94E742C1A54F, 0xC8)]
        public class PanelTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD58BFBB02392C95B, 0x140)]
        public class PanelWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB4DB2D5D96DD474, 0x38)]
        public class ParTimeLevelInfo : RTTIRefObject
        {
            String LevelName;
            Array<ParTimeNodeInfo> NodeTimes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED509A75EF5E9FFB, 0x20)]
        public class ParTimeNodeInfo : RTTIObject
        {
            float Time;
            int NodeID;
            Array<float> RescaledTimes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27E3DA3ED61AE22C, 0x38)]
        public class ParametricEqResource : Resource
        {
            ESoundFilterMode Mode;
            float Gain;
            float Frequency;
            float QValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2E2F386990599D5, 0x70)]
        public class ParentWorldNode : WorldNode
        {
            bool ChildTransformsRelative;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9332098620ECA520, 0xB30)]
        public class ParkourComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD88356F1CE06A1E, 0x6D0)]
        public class ParkourComponentResource : EntityComponentResource
        {
            Ref<CurveResource> PerchedWalkSpeedCurve;
            float PerchedWalkAcceleration;
            float PerchedWalkDeceleration;
            float PerchedSprintSpeedMultiplier;
            String ClimbIdleWithFootSupportStateName;
            String ClimbIdleWithoutFootSupportStateName;
            Vec3 ClimbIdleWithFootSupportOffset;
            Vec3 ClimbIdleWithoutFootSupportOffset;
            ParkourTransitionDetectionLimits TransitionLimitsOnFootToOnFootPerched;
            ParkourTransitionDetectionLimits TransitionLimitsOnFootToOnFootOnGround;
            ParkourTransitionDetectionLimits TransitionLimitsOnFootToWithHands;
            ParkourTransitionDetectionLimits TransitionLimitsWithHandsWithFootSupport;
            ParkourTransitionDetectionLimits TransitionLimitsWithHandsWithoutFootSupport;
            float MaxAngleBetweenInputAndJumpOnFoot;
            float MaxAngleBetweenInputAndJumpWithHands;
            Vec3 CollisionCapsuleOffsetOnFoot;
            Vec3 CollisionCapsuleOffsetWithHands;
            Vec3 ReachOriginOffsetOnFoot;
            Vec3 ReachOriginOffsetWithHands;
            float CollisionTestOffsetBelowHangMoving;
            float CollisionTestOffsetBelowHangIdle;
            FRange AimComfortRangeIdleRadians;
            FRange AimComfortRangeMovingRadians;
            Array<Ref<HumanoidParkourTransition>> Transitions;
            Array<HumanoidParkourTransitionMetrics> TransitionMetrics;
            Ref<HumanoidParkourTransition> DefaultClimbEntryTransitionWithFootSupport;
            Ref<HumanoidParkourTransition> DefaultClimbEntryTransitionWithoutFootSupport;
            HumanoidParkourTransitionMetrics DefaultClimbEntryTransitionWithFootSupportMetrics;
            HumanoidParkourTransitionMetrics DefaultClimbEntryTransitionWithoutFootSupportMetrics;
            Array<String> AutoTraversableAnnotationTags;
            Ref<AIHapticStimulusResource> ClimbingHapticStimulus;
            Array<String> ParkourVisualNodeBones;
            float LookDistance;
            FRange StepOffAllowedHeightDifference;
            float StepOffReattachmentPreventionRadius;
            Array<Vec3> JumpOffTargetCollisionCheckStartOffsets;
            float JumpOffTargetMaxHeight;
            float JumpOffTargetScorePenalty;
            float JumpOffTargetMaxForwardAngle;
            float PullUpToGroundScorePenalty;
            float PullUpToGroundAdditionalAllowedExtraHeight;
            Ref<WarpedAnimation> ClimbLedgeWithFootSupportStandingAnimation;
            Ref<WarpedAnimation> ClimbLedgeWithFootSupportCrouchedAnimation;
            Ref<WarpedAnimation> ClimbLedgeWithoutFootSupportStandingAnimation;
            Ref<WarpedAnimation> ClimbLedgeWithoutFootSupportCrouchedAnimation;
            ParkourLimbOffset LeftFootOffsetInIdle;
            ParkourLimbOffset RightFootOffsetInIdle;
            FRange FeetPushDistanceRange;
            float FootSupportDetectionRadius;
            float SecondaryFootSupportOffset;
            ParkourLimbOffset LeftHandOffsetInIdleWithFootSupport;
            ParkourLimbOffset RightHandOffsetInIdleWithFootSupport;
            ParkourLimbOffset LeftHandOffsetInIdleWithoutFootSupport;
            ParkourLimbOffset RightHandOffsetInIdleWithoutFootSupport;
            Vec3 LeftHandSupportCollisionCheckStartWithFootSupport;
            Vec3 RightHandSupportCollisionCheckStartWithFootSupport;
            Vec3 LeftHandSupportCollisionCheckEndWithFootSupport;
            Vec3 RightHandSupportCollisionCheckEndWithFootSupport;
            Vec3 LeftHandSupportCollisionCheckStartWithoutFootSupport;
            Vec3 RightHandSupportCollisionCheckStartWithoutFootSupport;
            Vec3 LeftHandSupportCollisionCheckEndWithoutFootSupport;
            Vec3 RightHandSupportCollisionCheckEndWithoutFootSupport;
            Vec3 HandSupportLeftFingersOffset;
            Vec3 HandSupportRightFingersOffset;
            float HandSupportDetectionRadius;
            Ref<SkinnedModelResource> ModelResource;
            Array<Ref<DamageTypeResource>> IgnoredDamageTypesCausedByParkourableEntity;
            float DeviationAngleSearchWeight;
            Ref<PerkLevel> AimWhileParkouringPerk;
            Ref<CurveResource> ViewAngleTransitionScoreCurve;
            float PerchedOnPointMinTurnAngle;
            float PerchedOnSegmentTurnAngleThreshold;
            float MaxLedgeClimbOverDropHeight;
            float MaxLedgeClimbOverSlopeAngle;
            float LedgeClimbOverCapsuleZOffset;
            float AutoDetachFromClimbDistanceIntoWater;
            float AutoDetachFromPerchedDistanceIntoWater;
            Ref<BooleanFact> IsTransitioningFact;
            Ref<EnumFact> TransitionTypeFact;
            Ref<CameraModeResource> DefaultCameraModeWithHandsWithFootSupport;
            Ref<CameraModeResource> DefaultCameraModeWithHandsWithoutFootSupport;
            Ref<CameraModeResource> DefaultCameraModeOnFoot;
            float MaxClimbCollisionOnStaticAnnotationPushAwayDistance;
            float MaxClimbCollisionOnMovingAnnotationPushAwayDistance;
            float DetachWithHandsFlinchSeverity;
            ParkourInitialAttachmentSettings DisplacementSmoothAttachmentSettings;
            ParkourInitialAttachmentSettings TurnSmoothAttachmentSettings;
            float FacingDirectionSmoothFactor;
            Vec3 ClimbCornerEndOffsetWithoutFootSupportInnerLeft;
            Vec3 ClimbCornerEndOffsetWithFootSupportInnerLeft;
            Vec3 ClimbCornerEndOffsetWithoutFootSupportOuterLeft;
            Vec3 ClimbCornerEndOffsetWithFootSupportOuterLeft;
            Vec3 ClimbCornerEndOffsetWithoutFootSupportInnerRight;
            Vec3 ClimbCornerEndOffsetWithFootSupportInnerRight;
            Vec3 ClimbCornerEndOffsetWithoutFootSupportOuterRight;
            Vec3 ClimbCornerEndOffsetWithFootSupportOuterRight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A7B714A7EFB9B90, 0x10)]
        public class ParkourInitialAttachmentSettings
        {
            float DurationOnFoot;
            float DurationWithHandsWithFootSupport;
            float DurationWithHandsWithoutFootSupport;
            float FactorStrength;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x222450B01165F882, 0x20)]
        public class ParkourLimbOffset
        {
            String JointName;
            Vec3 ResolvedOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B4D7F67F258E013, 0x50)]
        public class ParkourTransitionDetectionLimits
        {
            Array<Vec2> MeshVertices;
            EParkourTransitionLimitAxis MeshAxisX;
            EParkourTransitionLimitAxis MeshAxisY;
            Array<Triangle2D> MeshTriangles;
            EParkourTransitionLimitSimpleShape SimpleShapeType;
            Vec2 SimpleShapeRadius;
            EParkourTransitionLimitAxis SimpleShapeAxisX;
            EParkourTransitionLimitAxis SimpleShapeAxisY;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6DE84BF21FFEE51, 0xA0)]
        public class PartialAnimationEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC61CE7391586C96C, 0x68)]
        public class PartialAnimationEventResource : ScaleableTimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<SkeletonAnimationResource> AnimationResource;
            Ref<CurveResource> BlendCurve;
            Ref<PartialAnimationSettings> PartialAnimationSettings;
            bool Loop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE21F303C4F35D7AE, 0x50)]
        public class PartialAnimationSettings : Resource
        {
            AnimationVariableSettings BoneSetSettings;
            Ref<ExternalAnimationConfiguration> AnimationConfiguration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E92B19674193568, 0x20)]
        public class ParticleControlledAttribute
        {
            Ref<CurveResource> Curve;
            EParticleControlledAttributeSource SourceValue;
            String AttributeName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFF7297B2B7EA598, 0x1B0)]
        public class ParticleEmitter : Resource
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            EEmitterShape Shape;
            [RTTI.BrokenReflectionOffset(0x0)]
            bool EmitOnSurface;
            EEmitAxis EmitAxis;
            EParticleEmitRateUnits ParticleRateUnit;
            int NumberOfStartParticles;
            IParticleSysVar NumberOfStartParticlesVar;
            ParticleSysVar OffAxisVariable;
            ParticleSysVar OffPlaneVariable;
            ParticleSysVar ParticleRateVariable;
            float Delay;
            float DelayVar;
            float Burst;
            float BurstVar;
            float Pause;
            float PauseVar;
            float Duration;
            float DurationVar;
            ParticleSysVar EmitterLengthVar;
            ParticleSysVar EmitterWidthVar;
            ParticleSysVar EmitterHeightVar;
            ParticleSysVar PositionX;
            ParticleSysVar PositionY;
            ParticleSysVar PositionZ;
            ParticleSysVar RotationX;
            ParticleSysVar RotationY;
            ParticleSysVar RotationZ;
            float VelocityFactor;
            bool EmitInversed;
            Vec2 ClipRangeMinMax;
            Array<EmitterVertex> MeshEmitterVertices;
            EMeshEmitterSpawnOrder MeshEmitterSpawnOrder;
            Ref<StaticMeshResource> MeshEmitterMesh;
            Ref<SoundResource> SoundResource;
            Ref<GraphProgramResource> GraphProgramResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAFE7AE50E2404A3, 0x78)]
        public class ParticleEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF572848775C32E91, 0x68)]
        public class ParticleEventResource : TimedEventResource
        {
            Ref<ParticleSystemResource> ParticleSystemResource;
            Ref<ParticleSystemResource> ParticleSystemResourceCensored;
            Ref<LocatorResource> PositionLocatorResource;
            int FadeOutOffset;
            bool SoftFadeOut;
            Array<ParticleEventVirtualEmitter> VirtualEmitters;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x651D7F830A39485, 0x50)]
        public class ParticleEventVirtualEmitter
        {
            int FrameOffset;
            Mat44 LocalMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B0C728BA1FF71DD, 0x190)]
        public class ParticleModifierSettings
        {
            uint ActiveModifiers;
            Ref<CurveResource> SizeCurve;
            Ref<Gradient> ColorGradient;
            bool ModulateExternalColor;
            ParticleSysVar RotationSpeedPitch;
            ParticleSysVar RotationSpeedRoll;
            ParticleSysVar RotationSpeedYaw;
            float RotationFriction;
            Vec3 Gravity;
            ParticleSysValue Friction;
            bool UseFrictionCurve;
            float ForceFieldInfluence;
            float UseSurfaceRoundness;
            bool WaterInteractionEnabled;
            float WaterBuoyancyFactor;
            float WaterCollisionRadius;
            bool MoveWithCamera;
            ParticleSysValue BrownianMotion;
            float BrownianMotionFrequency;
            Vec3 BrownianMotionScale;
            EParticleCollisionMode CollisionMode;
            ParticleSysVar CollisionBounce;
            ParticleSysVar CollisionSlide;
            bool StickOnImpact;
            bool DieOnImpact;
            float CollisionRadiusScale;
            float CollisionDelay;
            float CollisionHardness;
            float CollisionDisableRange;
            MaterialType CollisionMaterialType;
            int16 CollisionMask;
            bool SpawnImpactEffects;
            float ImpactEffectVelocityThreshold;
            Vec3 BoxSize;
            float DepthOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B8BD40B7690CE4E, 0x120)]
        public class ParticlePropertySettings
        {
            bool IsHighPriority;
            EAxisType AxisLock;
            ParticleSysVar LifeSpawn;
            ParticleSysVar Velocity;
            ParticleSysVar SizeSpawn;
            ParticleSysVar AngleSpawnZ;
            ParticleSysVar AngleSpawnX;
            ParticleSysVar AngleSpawnY;
            FRGBAColor BaseColor;
            Array<Ref<ParticleSystemResource>> SpawningParticleSystems;
            Array<Ref<PostProcessEffectorResource>> PostProcessEffectors;
            Array<Ref<ForceFieldResource>> SpawningForceFields;
            Array<Ref<StaticMeshResource>> SpawningMeshes;
            Array<ParticleControlledAttribute> SpawnedMeshShaderVariables;
            bool SpawnLights;
            bool LightsEmitSpecular;
            float LightRangeScale;
            float LightIntensity;
            float LightColorSaturation;
            bool Spawn2DParticles;
            EParticleShape Shape;
            EParticlePivotAligment PivotAlignment;
            float Roundedness;
            float AspectRatio;
            bool VertexLighting;
            ESelfShadowMode SelfShadowMode;
            float SelfShadowStrength;
            ESortMode PerParticleSortMode;
            float LightingSaturation;
            float ParticleTranslucency;
            int MeshSubDivisions;
            EParticleFadeMode FadeMode;
            float FadeStartNear;
            float FadeStartFar;
            float FadeEndNear;
            float FadeEndFar;
            bool UseObjectSpace;
            float MotionVectorScaleFactor;
            Array<ParticleControlledAttribute> ParticleVertexAttributes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29E99D0D6B9F221D, 0x10)]
        public class ParticleShaderVariable
        {
            String VariableID;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x163173D109A3C0AB, 0x10)]
        public class ParticleSysValue
        {
            float Value;
            Ref<CurveResource> Curve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x194294658B1F0803, 0x8)]
        public class ParticleSysVar
        {
            float Value;
            float Variation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C24817FF9D1EC2B, 0x410)]
        public class ParticleSystemInstance : GeometryObject
        {
            String Name;
            bool Active;
            Ref<ParticleSystemResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD6660C40BA8CEBE, 0x430)]
        public class ParticleSystemInstanceGame : ParticleSystemInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDBC784DD444B87D0, 0x80EA0)]
        public class ParticleSystemManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0EE855368DC3B93, 0xCC0)]
        public class ParticleSystemResource : Resource
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            ESortOrder SortOrder;
            [RTTI.BrokenReflectionOffset(0x0)]
            ESortMode SortMode;
            ParticlePropertySettings PropertySettings;
            ParticleModifierSettings ModifierSettings;
            Array<Ref<ParticleSystemResource>> Resources;
            bool SingleShot;
            bool UseOcclusionCulling;
            EParticleSystemUpdateMode UpdateMode;
            float ClipDistance;
            float ClipDistanceNotVisible;
            Array<Ref<ParticleEmitter>> Emitters;
            bool Stretch;
            bool RandomFlipU;
            bool RandomFlipV;
            float StretchFactor;
            bool UseConstantStretchFactor;
            bool UseScreenSpaceVelocityStretch;
            float TrailTextureScaleU;
            Ref<LightResource> LightResource;
            String LightIntensityGlobalRenderVarName;
            Ref<RenderEffectResource> RenderEffectResource;
            Ref<RenderEffectResource> LightSamplingRenderEffectRes;
            Array<ParticleShaderVariable> ShaderVariables;
            int DeltaU;
            int DeltaV;
            float SubTexAnimFreq;
            bool SubTexAnimRandom;
            int SubTexAnimStartFrame;
            EParticleSubTexAnimationSrc SubTexAnimAnimationSource;
            bool SubTexAnimUseSingleRow;
            int SubTexAnimSingleRowIndex;
            Mat44 Orientation;
            float LodDistanceQuarterHalf;
            float LodDistanceHalfFull;
            DrawableCullInfo CullInfo;
            bool UseLightSamplingBuffer;
            ELightSamplingResolution LightSamplingResolution;
            Ref<WeatherInfluenceFactor> WeatherInfluenceFactor;
            Ref<GraphProgramResource> ProgramResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BA912A130FEF65C, 0x60)]
        public class ParticleSystemSpeedModifierEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD41E2539E0DD04AF, 0x40)]
        public class ParticleSystemSpeedModifierEventResource : TimedEventResource
        {
            Ref<CurveResource> CurveResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7ED0B32DDF73E51, 0xB8)]
        public class PartyMatchmakingInfo : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD3205E84C7E92AB, 0x90)]
        public class PartyMatchmakingService : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FA5FD2436C4D8C0, 0x40)]
        public class PatchCollisionVolume : RTTIRefObject
        {
            int NotBeforeBuildNumber;
            int NotAfterBuildNumber;
            String LevelID;
            int CollisionLayer;
            String Transform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9817BFA8FD400E68, 0x60)]
        public class PatchedSpeakEventResource : SpeakEventResource
        {
            Ref<SkeletonAnimationResource> OverrideAnimationResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6A41D771A49E379, 0x30)]
        public class PathElement
        {
            Vec3Pack Position;
            float Time;
            Quat Rotation;
            Vec3Pack Scaling;
            float Distance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD505769BB928ACB1, 0x88)]
        public class PathHelperNodeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED2C5C5AB45843FF, 0x58)]
        public class PathHelperNodeComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAEC97CD5FF5830DF, 0x40)]
        public class PathHelperNodeComponentResource : EntityComponentResource
        {
            Array<Ref<PathHelperNodeResource>> PathHelpers;
            String LocationProviderID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDC4122A059A4F3F, 0x48)]
        public class PathHelperNodeResource : Resource
        {
            String ParentHelperName;
            Ref<PathResource> PathResource;
            EPathMode PathMode;
            float Speed;
            bool Looping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1444F7EEF3566A91, 0x140)]
        public class PathLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8F3AE8DC4026BA6, 0x58)]
        public class PathLocatorResource : LocatorResource
        {
            Ref<LocatorResource> PositionLocator;
            Ref<PathResource> PathResource;
            int ClipOffset;
            float ClipSpeed;
            bool RelativeToSequence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C985D672FA0E4CD, 0x118)]
        public class PathMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A896588287245F0, 0x48)]
        public class PathMoverResource : MoverResource
        {
            Ref<PathResource> PathResource;
            EPathMode PathMode;
            bool Looping;
            float Speed;
            bool HighSyncFreq;
            bool AlignUpWithWorld;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D41A2831E1730D2, 0x38)]
        public class PathResource : Resource
        {
            Array<PathElement> Samples;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x486853BF8468A050, 0x70)]
        public class PatrolSpawnCommand : SpawnCommand
        {
            Ref<AIPatrolPath> PatrolPath;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE0E45E2F3D604E0, 0x60)]
        public class PausableEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65F976982A0CAA4B, 0x38)]
        public class PausableEventResource : EventResource
        {
            int PauseFrame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45B492401100B1A3, 0x60)]
        public class PauseEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF25303766FC61A10, 0x30)]
        public class PauseEventResource : EventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F05302D40DD71B0, 0x10)]
        public class PegBase
        {
            uint16 ID;
            float Position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65B2A4FDC9AEA118, 0x50)]
        public class PerTileVolumeSampler : CoreObject
        {
            BoundingBox3 Bounds;
            Ref<Texture> DistanceField;
            Ref<Texture> UpperLowerHeightField;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6574758A107629BF, 0x40)]
        public class Perk : Resource
        {
            Ref<PerkLevel> FirstPerkLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA858273D85DAB8C, 0x48)]
        public class PerkCategory : Resource
        {
            Ref<LocalizedTextResource> DisplayName;
            Array<Ref<Perk>> Perks;
            bool Visible;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B6285C7F5D67D23, 0x18)]
        public class PerkDurationMapping : RTTIObject
        {
            Ref<PerkLevel> PerkLevel;
            int AdditionalSegments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6E62803A5B65E3B, 0xB8)]
        public class PerkLevel : Resource
        {
            int RequiredLevel;
            int Tier;
            int Cost;
            Array<Ref<EntityComponentResource>> ComponentResources;
            Ref<EntitlementResource> RequiredEntitlement;
            Array<Ref<PerkLevel>> RequiredPerks;
            Array<Ref<PerkLevel>> NextPerkLevel;
            Ref<PerkLevel> ReplacedByPerkLevel;
            Ref<LocalizedTextResource> DisplayName;
            Ref<LocalizedTextResource> DisplayDescription;
            Ref<UITexture> UIIconTexture;
            Ref<UITexture> UIFoundryIconLocked;
            Ref<UITexture> UIFoundryIconUnlocked;
            Ref<MovieResource> Movie;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68CAE47293B7ED70, 0x48)]
        public class PerkPointQuestReward : SummableQuestReward
        {
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBBB431F58ABB51F9, 0x48)]
        public class PerkQuestReward : QuestReward
        {
            Ref<PerkLevel> Perk;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC65CD85E7DA9EA62, 0x38)]
        public class PerkRewardGroup : Resource
        {
            Array<Ptr<PerkSet>> PerkSets;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D195DD329FF7055, 0x78)]
        public class PerkSet : Resource
        {
            Ref<LocalizedTextResource> DisplayName;
            Ref<Texture> IconNewlyObtained;
            Ref<Texture> IconObtained;
            Ref<Texture> IconNotObtained;
            Ref<UITexture> UIIconNewlyObtained;
            Ref<UITexture> UIIconObtained;
            Ref<UITexture> UIIconNotObtained;
            Array<Ref<PerkLevel>> Perks;
            Ref<PerkRewardGroup> Group;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x262F39CA748E1874, 0x50)]
        public class PerkSetQuestReward : QuestReward
        {
            Ref<PerkSet> PerkSet;
            Ref<QuestRewardSet> QuestRewardSetForPerks;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17A6848376D08B5D, 0x58)]
        public class PerkUpgradeItemComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F0271B60AB40FC2, 0x38)]
        public class PerkUpgradeItemComponentResource : EntityComponentResource
        {
            Ref<Perk> Perk;
            int Levels;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE6AB40F783F0495, 0x480)]
        public class PhotoMode : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BD7E9F7967EDA63, 0x30)]
        public class PhotoModeBodyPoseLookAtSettings : CoreObject
        {
            bool LookAtAllowed;
            float WeightSpine;
            float WeightNeck;
            float WeightHead;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26381693D2218D04, 0x10)]
        public class PhotoModeBodyPoseRequiredBooleanFact
        {
            Ref<BooleanFact> Fact;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77C7986FEA06FA82, 0x50)]
        public class PhotoModeBodyPoseSettings
        {
            Ref<LocalizedTextResource> OptionName;
            Ref<SkeletonAnimationResource> BodyAnimation;
            float Time;
            float Duration;
            float PlaybackSpeed;
            bool Loop;
            bool PingPong;
            int RepeatCount;
            float EndTime;
            Array<PhotoModeBodyPoseRequiredBooleanFact> Facts;
            float LookAtNeutralHeadingOffset;
            Ref<PhotoModeBodyPoseLookAtSettings> LookAtSettings;
            bool AlignWithSlopeNormal;
            float MaxSlopeAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF548D7DBD57B0A5, 0x28)]
        public class PhotoModeColorizeSettings
        {
            Ref<LocalizedTextResource> OptionName;
            StreamingRef<ColorizeSettingsResource> ColorizeSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x444386566CBDC0EE, 0x10)]
        public class PhotoModeDepthOfFieldApertureSettings
        {
            Ref<LocalizedTextResource> OptionName;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C1728DAA22D0913, 0x18)]
        public class PhotoModeFacialExpressionSettings
        {
            Ref<LocalizedTextResource> OptionName;
            Ref<SkeletonAnimationResource> FacialAnimation;
            int Frame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFEC2FF4D4468EF3, 0x10)]
        public class PhotoModeLogoSettings
        {
            Ref<LocalizedTextResource> OptionName;
            String MenuVisibilityFlag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4936379A1F81899, 0x170)]
        public class PhotoModeResource : Resource
        {
            Ref<ConditionResource> CanControlCameraCondition;
            Ref<BooleanFact> InPhotoModeFact;
            FRange PanXRange;
            float PanXSpeed;
            FRange PanZRange;
            float PanZSpeed;
            IRange FOVRange;
            int FOVIncrement;
            IRange ViewRollRange;
            int ViewRollIncrement;
            FRange ViewRangeScaleMultiplierRange;
            float ViewRangeScaleChangePerSecond;
            int TimeOfDayIncrement;
            Ref<CurveResource> TimeOfDayChangeCurve;
            Array<PhotoModeTextureSettings> OverlayTextures;
            Array<PhotoModeTextureSettings> BorderTextures;
            Array<PhotoModeLogoSettings> SmallLogoSettings;
            Array<PhotoModeColorizeSettings> ColorizeSettings;
            Array<PhotoModeVignetteSizeSettings> VignetteSizeSettings;
            Array<PhotoModeDepthOfFieldApertureSettings> ApertureSettings;
            IRange FocusDistanceRange;
            int FocusDistanceIncrement;
            Ref<CurveResource> FocusBracketCurve;
            Ref<CurveResource> FocusFalloffCurve;
            Ref<CurveResource> MaxFuzzyNearCurve;
            Ref<CurveResource> MaxFuzzyFarCurve;
            Ref<GrainSettingsResource> GrainSettings;
            Ref<GrainSettingsResource> EmptyGrainSettings;
            Array<PhotoModeBodyPoseSettings> BodyPoses;
            Array<BodyPoseSwitchDisallowBoolProperty> DisallowBodyPoseSwitchProperties;
            Array<PhotoModeFacialExpressionSettings> FacialExpressions;
            Ref<GraphProgramResource> GreetingsTextGraphResource;
            Ref<LocalizedTextResource> GreetingsText;
            Ref<LocalizedTextResource> FallbackGreetingsText;
            Ref<LocalizedTextResource> DiscoverableAreaType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF77F4336379430F6, 0xB0)]
        public class PhotoModeTextureSettings
        {
            Ref<LocalizedTextResource> OptionName;
            StreamingRef<UITexture> Texture_16_9;
            StreamingRef<UITexture> Texture_1_1;
            StreamingRef<UITexture> Texture_4_3;
            StreamingRef<UITexture> Texture_21_9;
            StreamingRef<UITexture> Texture_32_9;
            Ref<MenuStyleClass> Style;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA63860725DDB3FE4, 0x8)]
        public class PhotoModeVignetteSizeSettings
        {
            float InnerRadius;
            float OuterRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x297F2449ECFFB2F6, 0x50)]
        public class PhysicsBallAndSocketConstraintResource : PhysicsConstraintResource
        {
            Vec3 Pivot;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD52FFEC1D11EFF84, 0x90)]
        public class PhysicsBoxPhantom : PhysicsPhantom
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC841483BB9029400, 0xE0)]
        public class PhysicsCharacterMover : PhysicsInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E050B88CE1B9024, 0x130)]
        public class PhysicsCharacterMoverProxy : PhysicsCharacterMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7039BCE138C2FF0, 0x68)]
        public class PhysicsCharacterMoverResource : PhysicsResource
        {
            float StandingHeight;
            float CrouchingHeight;
            float MiniHeight;
            float Radius;
            float Mass;
            float Strength;
            float InnerScale;
            float ParkourRadius;
            float ParkourHeight;
            float SwimmingRadius;
            float SwimmingHeight;
            MaterialType MaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x915079FE4B6A3DB7, 0x110)]
        public class PhysicsCharacterMoverRigidBody : PhysicsCharacterMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x614101C23E96EF20, 0xD0)]
        public class PhysicsCollapsedCollisionResource : PhysicsCollisionResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA549AC01B52DFEE, 0x38)]
        public class PhysicsCollisionGroupsResource : Resource
        {
            Array<CollisionGroup> CollisionGroups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E05F1859F9877E4, 0xE0)]
        public class PhysicsCollisionInstance : PhysicsInstance
        {
            WorldTransform Orientation;
            bool Active;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x325766D1175671D7, 0xC0)]
        public class PhysicsCollisionResource : PhysicsResource
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            PhysicsCollisionFilterInfo CollisionFilterInfo;
            EPhysicsShapeType ShapeType;
            EPhysicsQualityType QualityType;
            Vec3 CenterOfMass;
            float Mass;
            float Density;
            float Restitution;
            float Friction;
            float LinearDamping;
            float AngularDamping;
            float BuoyancyFactor;
            float DragFactor;
            float GravityFactor;
            Vec3 CenterOfMassOffset;
            float MaxAngularVelocity;
            float MaxLinearVelocity;
            float MaxContactImpulse;
            Ref<PhysicsShapeResource> PhysicsShapeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53E69BD64F1838A5, 0xF0)]
        public class PhysicsConstraintInstance : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD71F073AF69D2F1F, 0x40)]
        public class PhysicsConstraintResource : PhysicsResource
        {
            float BreakThreshold;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC22CE9FC510147B, 0x40)]
        public class PhysicsContactEffectSystemSettings : Resource
        {
            int MaxObjectPairs;
            float MinBounceImpulse;
            float ContactTimeUntilResting;
            float MinDelayAfterBounce;
            int MaxSlidingContacts;
            int MaxRollingContacts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8FCFFE974C1A5DF, 0x10)]
        public class PhysicsDamageImpulseModifier
        {
            Ref<DamageTypeResource> DamageTypeResource;
            float ImpulseModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB2761AF63663C6C, 0x40)]
        public class PhysicsFixedConstraintResource : PhysicsConstraintResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15911E4F0DFC63A5, 0x88)]
        public class PhysicsGravityPocket : PhysicsInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57FF97DE870A3A86, 0x70)]
        public class PhysicsGravityPocketResource : PhysicsResource
        {
            bool CentricGravity;
            Vec3 Gravity;
            Vec3 GravityCenterLocalOffset;
            bool Repulsive;
            bool InteractWithRestingObjects;
            bool UsePocketOrientation;
            Ref<PhysicsCollisionResource> CollisionResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F071987468350E, 0xD0)]
        public partial class PhysicsHeightMapOffsetCollisionResource : PhysicsCollisionResource, RTTI.IExtraBinaryDataCallback
        {
            Ref<PhysicsCollisionResource> MapCollisionResource;
            float Offset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70984C2CF4D62844, 0x60)]
        public class PhysicsHingeConstraintResource : PhysicsConstraintResource
        {
            Vec3 Pivot;
            Vec3 Axis;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3239B41FF86D328, 0x58)]
        public class PhysicsImpulseEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF716D383DD08706, 0x48)]
        public class PhysicsImpulseEventResource : EventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<LocatorResource> SourceLocatorResource;
            float ImpulseModule;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF5B8B4F74AD083D3, 0x80)]
        public class PhysicsInstance : CoreObject
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            PhysicsCollisionFilterInfo CollisionFilterInfo;
            Ref<PhysicsResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FBBD90194186A97, 0x80)]
        public class PhysicsLimitedHingeConstraintResource : PhysicsConstraintResource
        {
            Vec3 Pivot;
            Vec3 Axis;
            float MaxFrictionTorque;
            float MinAngularLimit;
            float MaxAngularLimit;
            float AngularLimitsTauFactor;
            Ref<PhysicsMotorResource> PhysicsMotorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2EA16422CA9F6C4, 0xE8)]
        public class PhysicsModelMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3CAB9B75E0AE4232, 0x30)]
        public class PhysicsModelMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8360B8245BE5C66, 0x38)]
        public class PhysicsMotorResource : PhysicsResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E3542BF417F04A3, 0xA0)]
        public class PhysicsMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CBC4466E0309A0A, 0x60)]
        public class PhysicsMoverResource : MoverResource
        {
            bool InitiallyActive;
            float IgnoreLimit;
            float ImpulseLimit;
            float AngleIgnoreLimit;
            float AngleImpulseLimit;
            float InterpolatedTeleportLimit;
            Array<PhysicsDamageImpulseModifier> DamageImpulseModifiers;
            String BoneToReset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F3D405D0A0D40BF, 0x40)]
        public class PhysicsMultiShapeResource : PhysicsShapeResource
        {
            Array<Ref<PhysicsShapeResource>> Parts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD370414E55629CF0, 0x8)]
        public class PhysicsPhantom
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x203A0B65B2653DF, 0x50)]
        public class PhysicsPositionMotorResource : PhysicsMotorResource
        {
            float MinForce;
            float MaxForce;
            float Tau;
            float Damping;
            float ProportionalRecoveryVelocity;
            float ConstantRecoveryVelocity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF58709ED2647E665, 0x80)]
        public class PhysicsPrismaticConstraintResource : PhysicsConstraintResource
        {
            Vec3 Pivot;
            Vec3 Axis;
            float MinLinearLimit;
            float MaxLinearLimit;
            float MaxFrictionForce;
            Ref<PhysicsMotorResource> PhysicsMotorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCE5CEABA3B1BE47, 0xB0)]
        public class PhysicsRagdollConstraintResource : PhysicsConstraintResource
        {
            Vec3 Pivot;
            Vec3 PlaneAxis;
            float PlaneMinAngularLimit;
            float PlaneMaxAngularLimit;
            Ref<PhysicsMotorResource> PlanePhysicsMotorResource;
            Vec3 TwistAxis;
            float TwistMinAngularLimit;
            float TwistMaxAngularLimit;
            Ref<PhysicsMotorResource> TwistPhysicsMotorResource;
            float ConeMin;
            float ConeMax;
            Ref<PhysicsMotorResource> ConePhysicsMotorResource;
            float MaxFrictionTorque;
            float AngularLimitsTauFactor;
            float MaxLinearImpulse;
            float MaxAngularImpulse;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF272AFA6F0D1920, 0xC8)]
        public class PhysicsRagdollInstance : PhysicsInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FCEBC6413D208FD, 0xB0)]
        public partial class PhysicsRagdollResource : PhysicsResource, RTTI.IExtraBinaryDataCallback
        {
            float BuoyancyFactor;
            float DragFactor;
            float ImpulseFactor;
            MaterialType MaterialType;
            Ref<PhysicsSkeleton> PhysicsSkeleton;
            Array<int> BodiesTriggeringContactPoints;
            int CollisionLayer;
            Ref<PhysicsCollisionGroupsResource> CollisionGroups;
            float MaxAngularVelocity;
            float MaxLinearVelocity;
            float MaxContactImpulse;
            int PoolSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE547B6B54FE8B479, 0x38)]
        public class PhysicsResource : Resource
        {
            float TimeItTakesToRefloat;
            float TimeStaysAfloat;
            float TimeToSink;
            float FactorForceFields;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E897AA8B1F6FC19, 0x30)]
        public partial class PhysicsShapeResource : BaseResource, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10703F68DACEEA67, 0x50)]
        public class PhysicsSkeleton : PhysicsResource
        {
            Array<PhysicsSkeletonBone> Bones;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48AEB53E8C327D72, 0x50)]
        public class PhysicsSkeletonBone
        {
            String Name;
            int ParentIndex;
            Mat44 ReferencePose;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B657A5EE9B4D076, 0x60)]
        public class PhysicsStiffSpringConstraintResource : PhysicsConstraintResource
        {
            Vec3 Pivot;
            float Length;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x397794A6F3EA56B0, 0x40)]
        public class PhysicsVelocityMotorResource : PhysicsMotorResource
        {
            float Tau;
            float VelocityTarget;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59E945C542F9EA8B, 0x110)]
        public class PhysicsWaterPool : PhysicsWaterPoolBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5015F1A1603817EC, 0xD0)]
        public class PhysicsWaterPoolBase : PhysicsInstance
        {
            WorldTransform WorldTransform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE8795117F111BB2, 0x50)]
        public class PhysicsWaterPoolBaseResource : PhysicsResource
        {
            float Buoyancy;
            float FluidDensity;
            float DragCoefficient;
            Ref<PhysicsCollisionResource> CollisionResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD347A4AF0FFD597, 0x140)]
        public class PhysicsWaterPoolFromHeightMap : PhysicsWaterPoolBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8984B2BEDA77C1E2, 0x50)]
        public class PhysicsWaterPoolFromHeightMapResource : PhysicsWaterPoolBaseResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF26340358E9246D, 0x50)]
        public class PhysicsWaterPoolResource : PhysicsWaterPoolBaseResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6442AE87FFA13D2F, 0x370)]
        public class PhysicsWorld : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5B574D30E6F542C, 0x38)]
        public class PickUpAnimationAction : EntityAction
        {
            Ref<PickUpAnimationTypeResource> PickUpAnimationTypeResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6321CDF85C595BEE, 0xB0)]
        public class PickUpAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD6946A34C7E9DE0, 0x68)]
        public class PickUpAnimationComponentResource : EntityComponentResource
        {
            String PickUpAnimationName;
            String PickUpAngleAnimationName;
            String PickUpHeightAnimationName;
            String PickUpAnimationTag;
            String PickUpTypeAnimationName;
            String PickUpEventName;
            float PickUpEventTimeout;
            Ref<BooleanFact> IsLootingFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64E7610B724CFA1A, 0x38)]
        public class PickUpAnimationTypeResource : Resource
        {
            int PickUpType;
            bool IsPickUpWhileSwimmingAllowed;
            bool IsPickUpWhileRidingMountAllowed;
            EPickUpAnimationWieldDirective WieldDirective;
            float MinimumPlayAnimationTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA9D54E0A33F4C39, 0x158)]
        public class PickUpComponent : PickUpComponentBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67DE99E4DDCC33E0, 0x148)]
        public class PickUpComponentBase : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC834A53857E5D03, 0x48)]
        public class PickUpComponentBaseRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x412B1FD5A4DABC11, 0xA0)]
        public class PickUpComponentBaseResource : EntityComponentResource
        {
            Ref<UseLocationResource> UseLocationResource;
            Vec3 UseLocationWSOffset;
            Vec3 PickUpPositionLSOffsetForAnimation;
            bool StowWeaponOnUse;
            String HelperName;
            Ref<EffectComponentResource> PickupEffectComponentResource;
            Ref<PickUpAnimationTypeResource> PickUpAnimationTypeResource;
            bool MustPlayPickUpAnimation;
            Ref<SoundResource> PickupSoundResource;
            Array<Ref<EntityComponentResource>> EnabledEntityComponentResources;
            float MaxUnderwaterDepth;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB56E7147F8D2976A, 0xD0)]
        public class PickUpComponentResource : PickUpComponentBaseResource
        {
            Ref<EntityResource> Item;
            int Amount;
            Ref<LocalizedTextResource> FullFailureMessage;
            Ref<GraphProgramResource> PickUpAmountModifierGraphProgramResource;
            Ref<PickUpReactivationType> ReactivationType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x98063835E1CA7FFB, 0x68)]
        public class PickUpControllerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53236A50A4D544F8, 0x38)]
        public class PickUpControllerComponentResource : EntityComponentResource
        {
            Ref<PerkLevel> HeavyPickUpPerk;
            Ref<ConditionResource> ShowAllPickupEffectsConditionResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCC397B393A92CD9, 0x188)]
        public class PickUpGraphComponent : PickUpComponentBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB8F9747DEE824BB, 0xD0)]
        public class PickUpGraphComponentResource : PickUpComponentBaseResource
        {
            Ref<GraphProgramResource> EnabledGraph;
            Ref<OverrideGraphProgramResource> OverrideEnabledGraph;
            Ref<GraphProgramResource> UsabilityGraph;
            Ref<OverrideGraphProgramResource> OverrideUsabilityGraph;
            Ref<GraphProgramResource> UseGraph;
            Ref<OverrideGraphProgramResource> OverrideUseGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1A5F879197F364D, 0x40)]
        public class PickUpItemAction : EntityAction
        {
            Ref<EquipSlotType> EquipInSlot;
            int EquipSlotIndex;
            bool UniqueEquiped;
            bool SwitchToItem;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x780EDD9B4E832B98, 0x30)]
        public class PickUpReactivationType : Resource
        {
            int ReactivationTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A383F926B96314B, 0x58)]
        public class PickupDatabaseComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC15D793E47B69B0, 0x18)]
        public class PilotLightSettings
        {
            Ref<ParticleSystemResource> ParticleSystemResource;
            Ref<SoundResource> SoundResource;
            Ref<LightResource> LightResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3A96D416297A908, 0x150)]
        public class PinDownComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCEFD588149C95BA7, 0xF8)]
        public class PinDownComponentResource : EntityComponentResource
        {
            float CombinedAnchorStrengthToPin;
            Array<Ref<CurveResource>> RequiredAnchorStrengthToPinCurves;
            float AnchorStrengthThreshold;
            Ptr<EntityAction> AnchorAddedAction;
            Ptr<EntityAction> TieDownAction;
            Ptr<EntityAction> TieDownReleaseAction;
            String DelayTiedownAnimationTag;
            String PinnedControlParameter;
            String PinnedAnimationTag;
            float PinnedDuration;
            Ref<CurveResource> PinnedDurationDifficultyCurve;
            bool IgnoreTieDownWhileKnockedDown;
            float BreakFreeDuration;
            int BreakFreeShortEventUserData;
            int BreakFreeEventUserDataLeft;
            int BreakFreeEventUserDataRight;
            int BreakFreeRopesPerEvent;
            float BreakFreeStartDelay;
            float AddedBreakFreeDelayPerRope;
            float ClampDelayOnFinalRope;
            String PullbackControlParameter;
            String PullbackAnimationTag;
            Array<AnimationVariableValue> PullbackAdditionalAnimationVariables;
            int NumPullbacksToStartBreak;
            String BreakFreeControlParameter;
            String BreakFreeAnimationTag;
            float BreakFreeDamageThreshold;
            float AIDamageThresholdMultiplier;
            float WaitForPinnedAnimationTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0495F56C0701E10, 0x30)]
        public class PingListResult : RTTIRefObject
        {
            Array<Ref<ServerLocation>> Locations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E09F4FDCDEEDF89, 0x120)]
        public class PingService : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDC7C82B0433BF5E, 0x30)]
        public class PingTime : RTTIRefObject
        {
            String Location;
            uint16 AverageTimeMs;
            uint8 LossPercentage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x525040EDDCB45216, 0x4B0)]
        public class PivotFollowCameraEntity : FollowCameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69C61E5697CC0C6D, 0x250)]
        public class PivotFollowCameraEntityResource : FollowCameraEntityResource
        {
            Vec3 LocalPivotPosition;
            float MinPitch;
            float MaxPitch;
            float PitchSpeed;
            float YawSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB95065CE91125B1E, 0x68)]
        public class PlacableMesh : Resource
        {
            Ref<MeshResourceBase> Mesh;
            Ref<PhysicsCollisionResource> Collider;
            Ref<WorldNode> AtmosphereBox;
            float RelativeDensity;
            float FootprintClampMin;
            float FootprintClampMax;
            float Footprint;
            CapsuleHull CapsuleHull;
            EPlacementPrecision Precision;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FFB299EFFE06D7, 0x68)]
        public class PlaceOnLocatorEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4035FB6EDB2ADCC2, 0x50)]
        public class PlaceOnLocatorEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<LocatorResource> PositionLocatorResource;
            float BlendInDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1CFCC7C24B6B6B1C, 0x2E0)]
        public class Placeable : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C395570E6B9D1F8, 0x138)]
        public class PlaceableResource : EntityResource
        {
            float MinOffensiveRange;
            float MaxOffensiveRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB13ECB06B9F256D0, 0x58)]
        public class PlacementBakeData : RTTIRefObject
        {
            Ref<PrefabBaseResource> Target;
            IVec2 TileIndex;
            Array<Mat34> Instances;
            Array<PlacementJobBakeLookup> Indices;
            EPlacementChunkSizeSetting ChunkSize;
            float PlacementDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C4ABBC0D390AC01, 0x50)]
        public class PlacementBakePrefabCollection : CoreObject
        {
            Array<Ref<PlacementLayer>> BakedLayers;
            EPlacementChunkSizeSetting ChunkSize;
            float PlacementDistance;
            IVec2 TargetTile;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C1E7105F74CEAE2, 0x30)]
        public class PlacementBase : Resource
        {
            Ref<DensityNodeBase> DensityGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1915623F271FFF58, 0xC)]
        public class PlacementJobBakeLookup
        {
            PlacementJobIndex JobIndex;
            int InstanceStartIndex;
            int InstanceCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2C666EB19EFCB95, 0x4)]
        public class PlacementJobIndex
        {
            uint32 Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE605F6EC1EE0979D, 0x80)]
        public class PlacementLayer : RTTIRefObject
        {
            float PlacementDistance;
            int CreationOrder;
            ELayerGroupingMask GroupingFlags;
            Ref<PlacementBakeData> BakedData;
            Ref<PlacementProceduralData> ProcData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8CA36C539F8A3DAE, 0xB0)]
        public class PlacementLayerGroup : Resource
        {
            Ref<PlacementResourceRegister> Register;
            Array<Ref<PlacementLayer>> Layers;
            Array<PlacementTriggerRange> TriggerRanges;
            Ref<PlacementTile> ParentTile;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B9D634C4B5A2EBA, 0x60)]
        public class PlacementProceduralData : RTTIRefObject
        {
            Ref<DensityGraphProgram> DensityProgram;
            Ref<PlacementBase> Placement;
            EPlacementChunkSizeSetting ChunkSizeSetting;
            EPlacementUsageMask UsageMask;
            bool UseBlendedShadows;
            float StencilScale;
            float DensityScale;
            Ref<WorldDataType> HeightWorldDataType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5733810CC0E68F4, 0x70)]
        public class PlacementResourceRegister : Resource
        {
            Array<Ref<Texture>> Textures;
            Array<Ref<CurveResource>> Curves;
            Array<FRange> CurveRanges;
            Ref<Texture> CurveTexture;
            Ref<WorldDataPacking> WorldDataPacking;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x237D267A7E2E4B60, 0xC0)]
        public class PlacementTile : WorldNode
        {
            Ref<WorldDataType> HeightWorldData;
            Ref<PlacementLayerGroup> LayerGroup;
            Array<Ref<Texture>> LocalMaps;
            Ref<EcotopeTile> EcotopeTile;
            Ref<PlacementBase> Placement;
            Array<Ref<WorldDataPlacementMap>> GeneratedMaps;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2EC83B61996A3D9A, 0x48)]
        public class PlacementTriggerRange
        {
            LayerGroupMask Mask;
            float Range;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7074167B7A3DB8ED, 0x10)]
        public class PlaneEq
        {
            Vec3 Normal;
            float Constant;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBBBA6AB487292B6, 0x60)]
        public class PlatformSpecificElementTag : Tag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99E5A886085895C2, 0x690)]
        public class PlayAnimationObject : MountableEntity
        {
            float Height;
            float Distance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45DD34DE2FD49719, 0x120)]
        public class PlayAnimationObjectActorInstance : InteractiveEntityActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB09282AD969DDF6E, 0x80)]
        public class PlayAnimationObjectActorResource : InteractiveEntityActorResource
        {
            Ref<PlayAnimationObjectResource> PlayAnimationObjectResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18FD37F0795A2975, 0x1B0)]
        public class PlayAnimationObjectAiController : InteractiveEntityController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D4029486778CBD1, 0x1A0)]
        public class PlayAnimationObjectJoystickController : InteractiveEntityController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC63ACC39BB5BAA8, 0x2E0)]
        public class PlayAnimationObjectRep : InteractiveEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF46708F2371E7559, 0x328)]
        public class PlayAnimationObjectResource : MountableEntityResource
        {
            bool AutoStartAction;
            FRange HeightRange;
            float Height;
            float Distance;
            float ExitModeHeightDirection;
            float DisabledAfterAnimationTime;
            float MinDistanceToPlayer;
            bool IsPathAnimation;
            bool IsDeathAnimation;
            float InstantAttachRange;
            bool KillUserOnDismount;
            EHitDirection RequiredHitDirection;
            float FallScreamTime;
            bool AlwaysCreateModel;
            bool MustCreateModelAtInit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90A7AC330E0F29F6, 0x38)]
        public class PlayGoManagerGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD03650896F09DCD2, 0x70)]
        public class PlayScatterBlendAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49F213D11AF248C5, 0x38)]
        public class PlayScatterBlendAnimationComponentResource : EntityComponentResource
        {
            Array<Ref<ScatterBlendAnimation>> ScatterBlendAnimations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F4CF0710139356E, 0x40)]
        public class PlayWarpedAnimation : CoreObject
        {
            String Identifier;
            Ref<WarpedAnimation> WarpedAnimation;
            bool HasMovingEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC61536FAAC6ADE1, 0xA8)]
        public class PlayWarpedAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9F5EB82FA655AA2, 0x38)]
        public class PlayWarpedAnimationComponentResource : EntityComponentResource
        {
            Array<Ref<PlayWarpedAnimation>> WarpedAnimations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5722BF878192B6A3, 0x128)]
        public class Player : NetReplicatedObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x212C1D125FE78503, 0x148)]
        public class PlayerActorInstance : EntityActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB392F2AA62D6539F, 0x90)]
        public class PlayerActorResource : EntityActorResource
        {
            EPlayerNumber PlayerNumber;
            String PlayerName;
            bool BindPlayerEntity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7B144A16B6AA9D5, 0x40)]
        public class PlayerCardResource : Resource
        {
            Array<Ref<PlayerCardUnlockResource>> Icons;
            Ref<PlayerCardUnlockResource> DefaultIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5EBAFDECF57BF37, 0x58)]
        public class PlayerCardUnlockResource : CareerUnlockResource
        {
            EPlayerCardUnlockTier Tier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x666E2BC33B0EE63C, 0x18)]
        public class PlayerCharacterEntry
        {
            String ID;
            Ref<HumanoidResource> Character;
            Ref<ConditionResource> Condition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB9309ED4189CD477, 0x48)]
        public class PlayerCollisionQuestTrigger : QuestTrigger
        {
            Array<UUIDRef<CollisionTrigger>> CollisionTriggers;
            bool TriggerOnExit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9763EDCB921411C, 0x28)]
        public class PlayerCollisionQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB552C5DDF9746F0, 0xA8)]
        public class PlayerConstructedEntityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE26A289D50CBC8A, 0x30)]
        public class PlayerConstructedEntityComponentResource : EntityComponentResource
        {
            float TimeLimit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAFA680DD986824C, 0x58)]
        public class PlayerConversationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFEE21D403DD2C82E, 0x30)]
        public class PlayerConversationComponentResource : EntityComponentResource
        {
            Ref<BooleanFact> IsActiveFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE80AF16EC90B6492, 0x20)]
        public class PlayerDamageModifier
        {
            float DamageModifier;
            Ref<CurveResource> DamageModifierCurve;
            float SeverityModifier;
            Ref<CurveResource> SeverityModifierCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1E17A1F27B969D1, 0x38)]
        public class PlayerDamageModifierForDamageType
        {
            Array<Ref<DamageTypeResource>> DamageTypes;
            Ref<DamageTypeGroup> DamageTypeGroup;
            PlayerDamageModifier DamageModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96C62803CC5314B, 0x380)]
        public class PlayerGame : Player
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1AFAC5C2DE57366, 0x60)]
        public class PlayerInputQueryComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90523D7869710725, 0x38)]
        public class PlayerInputQueryComponentResource : EntityComponentResource
        {
            Array<PlayerInputQueryOption> Options;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7A12A18B8DF887A7, 0x10)]
        public class PlayerInputQueryOption
        {
            String Description;
            Ptr<EntityAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64F6B911D2F6CD41, 0xE8)]
        public class PlayerInteractiveNotification : PlayerNotification
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x545B140F4DA24B37, 0x68)]
        public class PlayerInteractiveNotificationResource : PlayerNotificationResource
        {
            EDeviceFunction Function;
            EStickFunction StickFunction;
            float StickAngle;
            float StickRange;
            float StickValue;
            float InputActiveTime;
            Ref<GraphProgramResource> InteractionGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D8A99666BCC65A3, 0xB8)]
        public class PlayerLookAtPointLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DB65B81636FA670, 0x48)]
        public class PlayerLookAtPointLocatorResource : LocatorResource
        {
            EPlayerNumber PlayerNumber;
            String PlayerName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D271AA9FBBA4994, 0x60)]
        public class PlayerLookAtTargetEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB01FD2C28A7AD9AD, 0x50)]
        public class PlayerLookAtTargetEventResource : TimedEventResource
        {
            Ref<EntityActorResource> PlayerActorResource;
            Ref<AIMarkerLocatorResource> AIMarkerLocatorResource;
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E95624A1903D4D3, 0xE0)]
        public class PlayerNotification : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD79E6DE91BAA3334, 0xB0)]
        public class PlayerNotificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x547540CF79E84EDF, 0x58)]
        public class PlayerNotificationComponentResource : EntityComponentResource
        {
            float PopupDelay;
            Array<Ref<ConditionResource>> DisplayConditions;
            Array<Ref<PlayerNotificationPriority>> PlayerNotificationPriorities;
            Ref<HUDLogicGroupResource> TutorialHUDLogicGroupResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x579AEB216B51814E, 0x28)]
        public class PlayerNotificationPriority : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9E22EC2B9B214F7, 0x48)]
        public class PlayerNotificationResource : Resource
        {
            Ref<HUDNotificationType> Notification;
            Ref<HUDNotificationType> Notification_keyboard;
            float DisplayTime;
            float LogCacheDuration;
            bool DisplaysPopup;
            bool HideWhileInSequence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D06801044AECD94, 0xF8)]
        public class PlayerOpenMenuNotification : PlayerInteractiveNotification
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x571AE9355D35814B, 0x90)]
        public class PlayerOpenMenuNotificationResource : PlayerInteractiveNotificationResource
        {
            UUIDRef<MenuPageBase> MenuPage;
            Array<OpenMenuParameter> Parameters;
            bool PauseGame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5707B352A14696EB, 0x110)]
        public class PlayerParams
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2338A09D7A170015, 0x6E8)]
        public class PlayerProfile : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD39D261760EC21E1, 0x2E8)]
        public class PlayerProfileOnline : RTTIRefObject
        {
            OnlineLoadout CareerLoadout0;
            OnlineLoadout CareerLoadout1;
            OnlineLoadout CareerLoadout2;
            OnlineLoadout CareerLoadout3;
            OnlineLoadout CareerLoadout4;
            OnlineLoadout CareerLoadout5;
            OnlineLoadout CareerLoadout6;
            OnlineLoadout CareerLoadout7;
            OnlineLoadout CareerLoadout8;
            OnlineLoadout CareerLoadout9;
            OnlineLoadout CareerLoadout10;
            OnlineLoadout CareerLoadout11;
            int32 LoadoutID;
            HashMap<String_int> ChallengesCompletedMap;
            int32 PlayerCardIconID;
            int AutomataSkinID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDC26A352E141FD2, 0x40)]
        public class PlayerRank
        {
            int RankGroup;
            int Score;
            String Title;
            uint8 UnlockPoints;
            Ref<Texture> Texture;
            int LoadingHintGroup;
            Array<int> LoadingHints;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE93CA5F4B788EB87, 0x50)]
        public class PlayerRanksResource : Resource
        {
            Array<PlayerRank> PlayerRanks;
            Ref<Texture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x377C15B7E2CC5D19, 0x130)]
        public class PlayerRepellingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80F08C941E50D0B8, 0x60)]
        public class PlayerRepellingComponentResource : EntityComponentResource
        {
            BoundingBox3 BoundingBox;
            String HelperName;
            float RepelSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CC7A51E24AA578, 0x110)]
        public class PlayerRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5DCB46BD9D53802, 0x208)]
        public class PlayerScore : NetReplicatedObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E3121EE87D71446, 0x50)]
        public class PlayerSequenceEntityVariable : SequenceEntityVariable
        {
            EPlayerNumber PlayerNumber;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3D212C2FEFB2929, 0x98)]
        public class PlayerSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCB22D4568350F9C, 0x78)]
        public class PlayerSoundMixComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BDBDC186F34216D, 0x50)]
        public class PlayerSoundMixComponentResource : EntityComponentResource
        {
            Ref<SoundMixStateResource> MortallyWoundedSoundMixState;
            Ref<SoundMixStateResource> DeathSoundMixState;
            Ref<SoundMixStateResource> SprintSoundMixState;
            Ref<SoundMixStateResource> ZoomedWeaponSoundMixState;
            Ref<SoundMixStateResource> ReloadingWeaponSoundMixState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6261B858664ED7E9, 0x60)]
        public class PlayerTargetMarkerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x12E05A4706C801B9, 0x30)]
        public class PlayerTargetMarkerComponentResource : EntityComponentResource
        {
            float MaxMarkerDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3C64CA65D60EC3B, 0x88)]
        public class PlayerToolComponent : SimpleAnimationItemOverrideComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80764FDEFE565019, 0x70)]
        public class PlayerToolComponentResource : SimpleAnimationItemOverrideComponentResource
        {
            float UseAnimationTimeout;
            String UseToolActivateEvent;
            String StowActiveWeaponIfAttachedToHelper;
            bool UseAnimationEventToTriggerFire;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x968CE7BF78D6D75F, 0x30)]
        public class Playlist : RTTIRefObject
        {
            String ID;
            Ref<PlaylistData> Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1647B0069170A141, 0x30)]
        public class PlaylistBuilder : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84EA7D8ED4102E92, 0x28)]
        public class PlaylistData : RTTIRefObject
        {
            int Version;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x21AF0ACE4F6E0F77, 0x30)]
        public class PlaylistDataVersionRequest : RTTIRefObject
        {
            String PlaylistID;
            int Version;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6CBDBFAB14482C7, 0x30)]
        public class PlaylistFilter : RTTIRefObject
        {
            Array<Ref<PlaylistFilterPredicate>> Predicates;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAFA5509E1DDC2A5, 0x20)]
        public class PlaylistFilterBuilder : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29B66E1F303C1E6D, 0x40)]
        public class PlaylistFilterPredicate : RTTIRefObject
        {
            String Key;
            EPlaylistFilterOperation Operation;
            Array<String> Values;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33D2C5D31B4B274, 0x38)]
        public class PlaylistHistory : RTTIRefObject
        {
            String PlaylistID;
            int64 StartTime;
            int64 EndTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17E7D4C414CAF3ED, 0x48)]
        public class PlaylistHistoryProfile : RTTIRefObject
        {
            Array<Ref<PlaylistHistory>> PlaylistHistory;
            Array<Ref<PlaylistHistory>> ClanPlaylistHistory;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84C2E34BE737E481, 0x30)]
        public class PlaylistIDList : RTTIRefObject
        {
            Array<String> PlaylistIDs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32DDFFF5685EB50E, 0x40)]
        public class PlaylistInfo : RTTIRefObject
        {
            String ID;
            Array<Ref<PlaylistTag>> Tags;
            int PlayerCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BA60FCE77F0E78B, 0x38)]
        public class PlaylistInfoByFilterRequest : RTTIRefObject
        {
            Ref<PlaylistFilter> Filter;
            int PageIndex;
            int PageSize;
            String RequiredTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B78F305576FDF4D, 0x38)]
        public class PlaylistInfoByTagsRequest : RTTIRefObject
        {
            Array<String> Tags;
            String RequiredTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E7091C96A127C16, 0x38)]
        public class PlaylistInfoResult : RTTIRefObject
        {
            Array<Ref<PlaylistInfo>> PlaylistInfo;
            int TotalPlaylists;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76B1CE4D9CB8156F, 0x48)]
        public class PlaylistLoader : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A10BF287F638126, 0x30)]
        public class PlaylistTag : RTTIRefObject
        {
            String Tag;
            int CreationTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF447FE18AD47E441, 0x30)]
        public class PlaylistsResult : RTTIRefObject
        {
            Array<Ref<Playlist>> Playlists;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2BCB63F5BED479F, 0x80)]
        public class PopulationPlacement : Resource
        {
            Ref<CurveResource> SizeByDensityCurve;
            Ref<CurveResource> SizeByMaskCurve;
            EMaskChannel SizeMaskChannel;
            Array<Ref<PlacableMesh>> PlacableMesh;
            float Density;
            ERotationType RotationType;
            float WanderingStrength;
            float BaseElevation;
            float ElevationVariance;
            float RandomTiltFactor;
            float UpTiltFactor;
            float TerrainTiltFactor;
            float Size;
            float SizeVariance;
            ECollisionType CollisionType;
            int RandomSeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4D707BD70A00AB, 0x90)]
        public class Portal
        {
            SimplePolygon Polygon;
            float CullingDistance;
            Ptr<Zone> FrontZone;
            Ptr<Zone> BackZone;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9505B4C80665853, 0x60)]
        public partial class Pose : RTTI.IExtraBinaryDataCallback
        {
            Ref<Skeleton> Skeleton;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x91B21498B7B65AD6, 0xC)]
        public class PoseDeformerBindingInfo
        {
            uint32 BindingHandle;
            uint32 BindingType;
            int BindingIdx;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x646F248B7BB6BE11, 0x60)]
        public class PoseDeformerResource : Resource
        {
            Ref<Skeleton> Skeleton;
            Ref<GraphProgramResource> DeformerProgram;
            bool IsUsingPBD;
            Array<PoseDeformerBindingInfo> InputBindings;
            Array<PoseDeformerBindingInfo> OutputBindings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAD9E26A3AC96CFA, 0x60)]
        public class PositionLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x545362855EB8CB5D, 0x80)]
        public class PositionLocatorResource : LocatorResource
        {
            WorldTransform WorldMatrix;
            bool RelativeToSequence;
            bool IsFixed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17800ABBBAE04003, 0x80)]
        public class PostProcessEffectorInstance : WorldNode
        {
            Ref<PostProcessEffectorResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9D0A113523DE42A4, 0x78)]
        public class PostProcessEffectorManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C845E31A02C9891, 0x58)]
        public class PostProcessEffectorResource : Resource
        {
            Ref<PostProcessSettingsResource> PostProcessSettings;
            float FadeRange;
            float DistanceFactor;
            float LookAtFactor;
            float LookAtPower;
            float LookIntoFactor;
            float LookIntoPower;
            int Priority;
            bool UseScreenVisibilityQuery;
            int ScreenVisibilityQuerySize;
            float MinScreenVisibilityFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD44E0532329DBBE1, 0x70)]
        public class PostProcessMotionBlurScaleEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A3F23A67B009DD9, 0x48)]
        public class PostProcessMotionBlurScaleEventResource : TimedEventResource
        {
            Ref<CurveResource> CurveResource;
            bool AutoScaleCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97EF6AD9E7284B50, 0x80)]
        public class PostProcessSettingsResource : Resource
        {
            Ref<ColorizeSettingsResource> ColorizeSettings;
            Ref<GrainSettingsResource> GrainSettings;
            Ref<BlurSettingsResource> BlurSettings;
            Ref<BloomSettingsResource> BloomSettings;
            Ref<DepthOfFieldSettingsResource> DepthOfFieldSettings;
            Ref<VignetteSettingsResource> VignetteSettings;
            Ref<ExposureSettingsResource> ExposureSettings;
            Ref<SSAOSettingsResource> SSAOSettings;
            Ref<BokehSettingsResource> BokehSettings;
            Ref<CameraSettingsResource> CameraSettings;
            Ref<LightShaftSettingsResource> SunShaftSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB457104E844EC55E, 0x90)]
        public class PostureEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88AD2FC71580BE72, 0x48)]
        public class PostureEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<PostureSettings> PostureSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFFAE269AC152D8A6, 0x70)]
        public class PostureInfo : Resource
        {
            String Posture;
            float Speed;
            float LookAheadDistance;
            float UsePathInsteadOfJumpAngle;
            float PathSearchAngle;
            float AngularAcceleration;
            float MaxAngularVelocity;
            Ref<CurveResource> TurnAngleInputCurve;
            float AngularDrag;
            bool AllowInCity;
            bool AllowInWater;
            bool AllowedWithRecudedSpeed;
            bool AllowInFocus;
            bool OnlyAllowedOnRoad;
            float MaxFloorSlopeAngle;
            float MaxFloorSlopeCosAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB341820941F959C3, 0x48)]
        public class PostureSettings : Resource
        {
            AnimationVariableSettings AnimationVariableSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D84C61A5D547C21, 0x68)]
        public class PostureSwitchEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB556E0BB5F24D77F, 0x48)]
        public class PostureSwitchEventResource : TimedEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            String TargetPosture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43B55EB2F028C666, 0xC0)]
        public class PotentialParkourTarget : PotentialTrajectoryTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26CC49132FC832E5, 0xB0)]
        public class PotentialTakeDownTarget : PotentialTrajectoryTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE019DDD24FA3492B, 0xA0)]
        public class PotentialTrajectoryTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCA54DF07F8ABFE75, 0xC0)]
        public class PotentialZiplineTarget : PotentialTrajectoryTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A939946345314D9, 0xB0)]
        public class PrefabBaseInstance : ParentWorldNode
        {
            Array<PrefabObjectOverrides> Overrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x170A6DB0CCD35089, 0x20)]
        public class PrefabBaseResource : BaseResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F60BF4DB3485DA2, 0xC0)]
        public class PrefabInstance : PrefabBaseInstance
        {
            Ref<PrefabResource> Prefab;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BD0B5C85A150531, 0x80)]
        public class PrefabObjectOverrides
        {
            GGUUID RuntimeObject;
            Mat44 Orientation;
            bool IsRemoved;
            bool IsTransformOverridden;
            Array<PrefabPODAttributeOverride> AttributeOverrides;
            Array<PrefabShaderOverride> ShaderOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F19EAD8D34AB82A, 0x18)]
        public class PrefabPODAttributeOverride
        {
            String Group;
            String Name;
            PODVariant Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB34641EA545AAD3, 0x28)]
        public class PrefabResource : PrefabBaseResource
        {
            Ref<ObjectCollection> ObjectCollection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x152A5417A7B22E74, 0x30)]
        public class PrefabShaderOverride
        {
            String VariableID;
            int ElementCount;
            Vec4 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11A497DF175CC438, 0x1)]
        public class PreferredInTemplate
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF34A76FAD0A1E0D7, 0x50)]
        public class PrefetchList : CoreObject
        {
            Array<AssetPath> Files;
            Array<int32> Sizes;
            Array<int32> Links;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xADD0540B17F76140, 0x58)]
        public class PresenceScrambleComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4BCE592FD6D020E, 0x38)]
        public class PresenceScrambleComponentResource : EntityComponentResource
        {
            int MinRequiredSpotAndMarkLevel;
            bool ShowOnRadarWhenFiring;
            bool ShowOnRadarWhenInVehicle;
            bool ShowOnRadarWhenInExo;
            bool InvisibleToAutomata;
            bool PreventTracking;
            float ScrambleRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED67C83830947576, 0x58)]
        public class PriceModificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x421F04D81816CF9D, 0x40)]
        public class PriceModificationComponentResource : EntityComponentResource
        {
            float Modification;
            EPriceModificationType Type;
            Array<Ref<EntityResource>> ItemResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5B07AA8BF828CC, 0x10)]
        public class PrimitiveBlendShapeMask
        {
            uint32 Mask0;
            uint32 Mask1;
            uint32 Mask2;
            uint32 Mask3;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAA8DF11F21BD936, 0x10)]
        public class PrimitiveDeltaDeformation
        {
            Array<VertexDeltaDeformation> Deformations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA70CC86694634CD, 0x80)]
        public class PrimitiveResource : BaseResource
        {
            PrimitiveResourceFlags Flags;
            Ref<VertexArrayResource> VertexArray;
            Ref<IndexArrayResource> IndexArray;
            BoundingBox3 BoundingBox;
            int IndexOffset;
            Ref<SKDTreeResource> SKDTree;
            int StartIndex;
            int EndIndex;
            uint32 Hash;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99BF87A938B7B813, 0x4)]
        public class PrimitiveResourceFlags
        {
            uint32 Flags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D40A3C29B1437F7, 0x48)]
        public class PrimitiveSkinInfo
        {
            EPrimitiveSkinInfoType Type;
            ESkinnedVtxType SkinVtxTypes;
            PrimitiveBlendShapeMask BlendShapeMask;
            int VertexCount;
            int VertexComputeNbtCount;
            Ref<DataBufferResource> VtxTriListBuffer;
            Array<VertexSkin> VerticesSkin;
            Array<VertexSkinNBT> VerticesSkinNBT;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x48344705B4F939AA, 0x38)]
        public class PrimitivesGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4954769C9EC68EFD, 0x48)]
        public class ProbabilityAction : ConditionalAction
        {
            float Probability;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9547DE1A86AF381, 0x40)]
        public class ProcessRobotActionAction : EntityAction
        {
            Ref<RobotActionResource> RobotActionResource;
            bool Start;
            bool SingleShot;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37415BFBE4F969C2, 0x38)]
        public class ProfileOwnerData : RTTIRefObject
        {
            String UUID;
            String ProfileOwnerName;
            Ref<RTTIRefObject> ProfileData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD58E119E091D4026, 0x40)]
        public class ProfileStatus : ProfileOwnerData
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8788FBEBD3642A4E, 0x28)]
        public class ProfileUpdatedMessage : RTTIRefObject
        {
            String ProfileOwner;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96D3715F988812DC, 0x58)]
        public class ProgramInstance : CoreObject
        {
            Ref<ProgramResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBFF0671A1C6A631, 0x68)]
        public class ProgramParameter
        {
            String Name;
            String TypeName;
            Array<uint8> DefaultData;
            Ref<RTTIRefObject> DefaultObject;
            UUIDRef<RTTIRefObject> DefaultObjectUUID;
            EDefaultDataStorageType DefaultDataStorageType;
            bool IsEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6C386BFCE83A05, 0x48)]
        public class ProgramResource : BaseResource
        {
            Array<ProgramResourceEntryPoint> EntryPointsData;
            uint64 StorageHash;
            bool CompileRuntimeDebug;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76F814256AD281F7, 0x50)]
        public class ProgramResourceEntryPoint
        {
            Array<ProgramParameter> InputParameters;
            Array<ProgramParameter> OutputParameters;
            String EntryPoint;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22435212BD4C7C0E, 0x10)]
        public class ProgressBarBlock
        {
            Ref<UITexture> BlockTexture;
            IVec2 BlockTextureOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A5D7EA46BC64FC8, 0x170)]
        public class ProgressBarBlockWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7BB7BEBF48F05F4, 0xF8)]
        public class ProgressBarTag : SliderTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F3AEF249CD67C7C, 0x180)]
        public class ProgressBarWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9923672542311E38, 0x28)]
        public class ProjectSettings : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B7956C150ECEABB, 0x120)]
        public class ProjectedMeshInstance : GeometryObject
        {
            Ref<MeshResourceBase> Resource;
            float ProjectionRange;
            float MaxProjectionAngle;
            RGBAColor ProjectionColor;
            EProjColorOperation ProjColorOperation;
            bool OverrideSortOrder;
            ESortOrder SortOrder;
            int MeshInstanceTreeSize;
            int MeshInstanceTreeDrawableSetupSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA020D7C4DA16894D, 0x180)]
        public class ProjectileTrailComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF1F1AF21F8B85E42, 0x80)]
        public class ProjectileTrailComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCF2CFD94F18AC88, 0x40)]
        public class ProjectileTrailComponentResource : EntityComponentResource
        {
            String HelperNodeName;
            float LifeTime;
            bool DestroyOnContact;
            bool DestroyOnStick;
            bool DestroyOnStickIgnored;
            bool DestroyOnExplode;
            Ref<ParticleSystemResource> ParticleResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAED89755C1E93DE, 0x30)]
        public class Property : BaseResource
        {
            String Name;
            uint32 Flags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x435B613DDED13EB2, 0x78)]
        public class PropertyBasedContextualEmotion : ContextualEmotion
        {
            BoolPropertyLink Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FCFD4622A2FFB9C, 0x30)]
        public class PropertyBoxAtmosphereFactor : FloatPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x219D45037A96655C, 0x30)]
        public class PropertyCanMove : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45893922D5C9253E, 0x30)]
        public class PropertyCanPlaceEntity : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99C6BFF95C5A4389, 0xD8)]
        public class PropertyComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x401ADA16F179A2C3, 0x30)]
        public class PropertyComponentResource : EntityComponentResource
        {
            Ref<PropertyContainerResource> ContainerResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x41FC62A6BF66B788, 0x78)]
        public class PropertyContainer
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCBC0371334E8B207, 0x38)]
        public class PropertyContainerData
        {
            Array<uint8> POD;
            Array<String> StringTable;
            Array<Ref<CoreObject>> CoreObjects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x87EB67D308A068B6, 0x8)]
        public class PropertyContainerMapEntry
        {
            uint32 UID;
            int Offset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC6A0CF50CB8E73F, 0x78)]
        public class PropertyContainerResource : CoreObject
        {
            Array<PropertyContainerMapEntry> Map;
            PropertyContainerData Data;
            uint32 ReplicatedDataSize;
            uint32 PersistentDataStart;
            uint32 PersistentDataSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33843DD2B0053238, 0x30)]
        public class PropertyElectricityStamina : FloatPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC8E3C6B4858F4C5, 0x30)]
        public class PropertyFlashLightEnabled : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F6A9CFF72BAB426, 0x30)]
        public class PropertyFloorMaterial : IntPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D996A643E5DB186, 0x30)]
        public class PropertyGrassHeight : FloatPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97FFC11EDDA3F591, 0x30)]
        public class PropertyInCombat : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7045483040115610, 0x30)]
        public class PropertyIsAiming : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x343E8802B8DBAF7B, 0x30)]
        public class PropertyIsCrouching : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB073BB0078B51B24, 0x30)]
        public class PropertyIsCurrentlyIdentifiedByHumanoid : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC43CAA0AB638C8F1, 0x30)]
        public class PropertyIsCurrentlyIdentifiedThreat : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37423057F848ED32, 0x30)]
        public class PropertyIsDiveRolling : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13B5BE107D676077, 0x30)]
        public class PropertyIsFalling : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17B553167812F8B3, 0x30)]
        public class PropertyIsInBulletTime : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC53499DCF12479D, 0x30)]
        public class PropertyIsInGrass : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9883422684D9698D, 0x30)]
        public class PropertyIsInParkourReaching : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E4BB8AD90FD7658, 0x30)]
        public class PropertyIsInParkourTransition : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B0122B3B40EF538, 0x30)]
        public class PropertyIsInStealth : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA9D2BFF89EE671F, 0x30)]
        public class PropertyIsInVegetation : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36105B279E1FE7FD, 0x30)]
        public class PropertyIsJumping : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAC7AB3A50E81E75, 0x30)]
        public class PropertyIsMeleeing : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F0A84C5F1A90C91, 0x30)]
        public class PropertyIsMoving : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE75E323DBCDF3AC1, 0x30)]
        public class PropertyIsParkouring : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x291CA2BFC7581A6, 0x30)]
        public class PropertyIsParkouringBraced : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79AD4D916A85E4F, 0x30)]
        public class PropertyIsParkouringOnFoot : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB90D20A5F6DCE9B1, 0x30)]
        public class PropertyIsPerformingContextualAction : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x953AB78EC16EA196, 0x30)]
        public class PropertyIsPerformingTakeDown : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A796A525CB9ECC7, 0x30)]
        public class PropertyIsScannedUsingFocus : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74FC569156147470, 0x30)]
        public class PropertyIsSliding : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A4CFB12A048F328, 0x30)]
        public class PropertyIsSlidingToUseLocation : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79C5D0DC8E1983C0, 0x30)]
        public class PropertyIsSprinting : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x760EBA6AA9836A0, 0x30)]
        public class PropertyIsSwimming : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE65426BAF8E14DBE, 0x30)]
        public class PropertyIsSwimmingUnderWater : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x82B4805259790FAE, 0x30)]
        public class PropertyIsUsingFocusMode : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69499B9076C119E0, 0x30)]
        public class PropertyIsUsingHeavyWeapon : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1D3EEF6FFA4B814, 0x30)]
        public class PropertyIsUsingPlayerTool : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x41DD13954B1D8F35, 0x30)]
        public class PropertyIsVaulting : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD14F45FCD53415D3, 0x30)]
        public class PropertyIsVictimOfContextualAction : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF54D23F0352A1C5B, 0x30)]
        public class PropertyIsZiplining : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40FFFB73A5EB78B1, 0x30)]
        public class PropertyIsZooming : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A29707FBCCE2C1D, 0x30)]
        public class PropertyLastLandingHeight : FloatPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3520738F61B917BE, 0x8)]
        public class PropertyLinkBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2499648EAEE2A22, 0x10)]
        public class PropertyLinkCollectionBase
        {
            Array<uint32> UIDs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE7FA1E6BDDD2E42, 0x30)]
        public class PropertyMaxUsersPerLocation : IntPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x329B7CBA1843924F, 0x30)]
        public class PropertyMountableIsMounted : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFC40DA9EBFE18F7A, 0x30)]
        public class PropertyMounterIsMounted : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B8E3D077F6EEACA, 0x20)]
        public class PropertyNameLinkMapEntry
        {
            int Type;
            Ref<Property> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54B2CE982D2BE351, 0x30)]
        public class PropertyRadius : FloatPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CEA6AC1F32349C, 0x30)]
        public class PropertyStamina : FloatPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2992434B7C29B86, 0x28)]
        public class PropertyValue : CoreObject
        {
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x494014BD9CD1F641, 0x30)]
        public class PropertyVaultType : IntPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3EA91B817895706, 0x68)]
        public class ProximityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAB30CD4A52A5524, 0x120)]
        public class ProximityComponentResource : EntityComponentResource
        {
            OrientedBox OrientedBox;
            bool AlignToWorld;
            bool IsSpherical;
            Ptr<EntityAction> EnterAction;
            Ptr<EntityAction> ExitAction;
            bool ExcludeAI;
            bool ExcludePlayer;
            Ptr<EntityAction> EnterActionOnTriggerer;
            Ptr<EntityAction> ExitActionOnTriggerer;
            bool TriggerAlways;
            String EntityType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3424711F1598A173, 0x60)]
        public class ProximityIndicatorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x21030E6E7737358D, 0x38)]
        public class ProximityIndicatorComponentResource : EntityComponentResource
        {
            float MaxRange;
            float IgnoreInstigatorDuration;
            bool OnlyShowIfObserverCanBeDamagedByEntity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97937B77CBB80C17, 0x88)]
        public class PushResponseComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31F6F0FF129A56EF, 0x50)]
        public class PushResponseComponentResource : EntityComponentResource
        {
            float HorizontalPadding;
            float VerticalPadding;
            EPhysicsCollisionLayerGame CollisionLayer;
            int MaxHits;
            Ref<DamageTypeResource> DamageTypeResource;
            EHitLocation HitLocation;
            float Severity;
            float MaxFrequency;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCC4FC022A0456E1, 0x58)]
        public class PushTriggerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28E57DDAF05A42DB, 0x28)]
        public class PushTriggerComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x384BE9B29478C1A3, 0x10)]
        public class QuadTreeCell
        {
            uint128 Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x648796B00C99723E, 0x10)]
        public class Quat
        {
            float X;
            float Y;
            float Z;
            float W;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBECFDB1C94DD8E32, 0x58)]
        public class QueryTriggersComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E2F9A3E8958495B, 0x28)]
        public class QueryTriggersComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FD22C39A7724712, 0x78)]
        public class QuestCategory : Resource
        {
            Ref<UITexture> ActiveIcon;
            Ref<UITexture> InactiveIcon;
            Ref<LocalizedTextResource> CategoryName;
            Ref<LocalizedTextResource> OpenQuestsTitle;
            Ref<LocalizedTextResource> NoQuestsTitle;
            Ref<LocalizedTextResource> CompletedQuestsTitle;
            Ref<LocalizedTextResource> NewNotificationTitle;
            Ref<LocalizedTextResource> UpdatedNotificationTitle;
            Ref<LocalizedTextResource> CompletedNotificationTitle;
            Ref<LocalizedTextResource> FailedNotificationTitle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF58504FEA66B236, 0x40)]
        public class QuestDebugInitializer : Resource
        {
            Ref<GraphProgramResource> Program;
            Ref<LocationMarker> Location;
            Ref<QuestSection> QuestStart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x941B53E40EBA740F, 0xD8)]
        public class QuestEntityObjective : QuestMarkerObjective
        {
            Array<GGUUID> SpawnSetupUUID;
            bool MustHaveBeenSpawnedThroughGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF761742046EE926B, 0x90)]
        public class QuestEntityObjectiveInstance : QuestMarkerObjectiveInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86B64BB939ED7E15, 0xA0)]
        public class QuestGenerationSettings : Resource
        {
            Ref<LocalizedTextResource> CraftObjectiveText;
            Ref<LocalizedTextResource> ObtainObjectiveText;
            Ref<LocalizedTextResource> ReturnToMerchantObjectiveText;
            Ref<LocalizedTextResource> MoneyObjectiveText;
            Ref<LocalizedTextResource> DefaultStatusText;
            Ref<LocalizedTextResource> CraftingJobName;
            Ref<LocalizedTextResource> CraftingJobDescription;
            Ref<LocalizedTextResource> PurchaseJobName;
            Ref<LocalizedTextResource> PurchaseJobDescription;
            Ref<LocalizedTextResource> TradeJobName;
            Ref<LocalizedTextResource> TradeJobDescription;
            Ref<LocalizedTextResource> GatherItemsObejctiveText;
            Ref<LocalizedTextResource> GatherMoneyObjectiveText;
            Ref<QuestType> DynamicQuestType;
            Ref<QuestCategory> JobQuestCategory;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D0DE42857FF7B14, 0x178)]
        public class QuestInstance : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4FA5E8B82BCA09A0, 0x68)]
        public class QuestItemComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E3D3F55F5AFE843, 0x38)]
        public class QuestItemComponentResource : EntityComponentResource
        {
            UUIDRef<QuestResource> Quest;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE776709228218F23, 0xC8)]
        public class QuestItemTrackingObjective : QuestObjective
        {
            Ref<EntityResource> ItemType;
            int Amount;
            bool PutMarker;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF4392E832569BD7, 0xA8)]
        public class QuestItemTrackingObjectiveInstance : QuestMarkerObjectiveInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x296D57D5058E0F11, 0x100)]
        public class QuestLocationObjective : QuestMarkerObjective
        {
            Array<GGUUID> WorldNodeUUIDs;
            Vec2 AreaOffset;
            Vec2 AreaSize;
            float AreaHeight;
            float AreaBuffer;
            Ref<LocationMarkerResource> MarkerResourceOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C0DF43BAD716F10, 0x88)]
        public class QuestLocationObjectiveInstance : QuestMarkerObjectiveInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36D59A78CB751FF1, 0xC0)]
        public class QuestMarkerObjective : QuestObjective
        {
            bool RemoveMarkersWhenTriggered;
            bool CountMarkers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE117E536CC3B1811, 0x88)]
        public class QuestMarkerObjectiveInstance : QuestObjectiveInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB3AF251819F7BA2, 0x28)]
        public class QuestMessageHandler : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5811F32E7BCD7B06, 0xC0)]
        public class QuestMoneyTrackingObjective : QuestObjective
        {
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x670D7B71533C7010, 0x78)]
        public class QuestMoneyTrackingObjectiveInstance : QuestObjectiveInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB92E807A0EE39F8, 0xB8)]
        public class QuestObjective : Resource
        {
            Ref<LocalizedTextResource> UIName;
            Ref<LocalizedTextResource> UIStatusText;
            Ref<LocalizedTextResource> UIDescription;
            Ref<LocalizedTextResource> Hint;
            Ref<LocalizedTextResource> Popup;
            EQuestObjectiveType Type;
            bool ShowCompleted;
            bool ShowFailed;
            bool Notify;
            EObjectiveUIVisibility UIVisibility;
            EBehaviourOnHide BehaviourOnHide;
            Ref<GraphProgramResource> ShowCondition;
            EObjectiveCompleteFailLogic CompleteFailLogic;
            EParentObjectiveVisibilityLogic ParentObjectiveLogic;
            Array<Ptr<QuestSection>> QuestSections;
            Array<Ptr<QuestObjective>> SubObjectives;
            int Index;
            int SectionIndex;
            Array<FactMapping> ParserFacts;
            bool UpdateOnlyWhenTracked;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCDCE020AD9DC3C, 0x70)]
        public class QuestObjectiveInstance : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C26D94E566AEE61, 0x48)]
        public class QuestObjectiveSave : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E501D5746BE3AF8, 0x38)]
        public class QuestProgressedQuestTrigger : QuestTrigger
        {
            Array<UUIDRef<QuestSection>> QuestSections;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF716ABFFA84CEC8, 0x30)]
        public class QuestProgressedQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BDDDE268BE70D0E, 0xD0)]
        public class QuestResource : Resource
        {
            Array<Ref<QuestDebugInitializer>> DebugInitializers;
            Ref<GraphProgramResource> PatchProgram;
            Ref<GraphProgramResource> GraphProgramResource;
            Ref<LocalizedTextResource> UIName;
            Ref<LocalizedTextResource> UIDescription;
            int Priority;
            Ref<QuestType> QuestType;
            Array<Ref<QuestSection>> StartSections;
            Ref<UITexture> UIIconTexture;
            bool InitiallyAvailable;
            Array<Ref<QuestCategory>> Categories;
            Ref<EnumFact> QuestStateFact;
            Ref<IntegerFact> RepeatCounterFact;
            int Version;
            bool IsCountedForGameCompletion;
            int Level;
            Ref<SceneInstance> Scene;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2185E7B59E041D19, 0x40)]
        public class QuestReward : Resource
        {
            Ref<QuestRewardSet> RewardSet;
            Ref<GraphProgramResource> ConditionGraph;
            bool Revealed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x213CAC1964203935, 0x50)]
        public class QuestRewardSet : Resource
        {
            Ref<PlayerNotificationResource> Rewards_Notification;
            Ref<PlayerNotificationPriority> Rewards_Priority;
            Ref<PlayerNotificationResource> Celebration_Notification;
            Ref<PlayerNotificationPriority> Celebration_Priority;
            Ref<LocalizedTextResource> SetName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B616D6260E90151, 0x60)]
        public class QuestSave : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x572FFE2229081FD2, 0x110)]
        public class QuestSection : Resource
        {
            Ref<QuestTrigger> Trigger;
            Array<Ref<QuestSection>> NextSections;
            Array<Ptr<QuestSection>> BlockSections;
            Array<Ref<QuestSection>> SubSections;
            EQuestSectionCompletionType CompleteLogic;
            EQuestSectionCompletionType BlockLogic;
            EQuestSectionType SectionType;
            Ref<GraphProgramResource> ActivateCondition;
            Ref<GraphProgramResource> OnActivateExecute;
            Ref<GraphProgramResource> CompleteCondition;
            Ref<GraphProgramResource> OnCompleteExecute;
            Ref<GraphProgramResource> BlockCondition;
            Ref<GraphProgramResource> OnBlockExecute;
            Ref<GraphProgramResource> GraphProgramResource;
            Ref<LocalizedTextResource> UILogEntry;
            Ref<LocalizedTextResource> UIBlockedLogEntry;
            Array<Ref<QuestReward>> Rewards;
            Ref<LocalizedTextResource> UICurrentQuestGoalTitle;
            Ref<LocalizedTextResource> UIQuestGoalDescription;
            Array<Ref<QuestObjective>> Objectives;
            Ref<EnumFact> QuestSectionStateFact;
            Ptr<QuestResource> Quest;
            bool SaveOnComplete;
            bool ReuseLastSaveLocation;
            Ref<AIMarker> RespawnMarker;
            bool Repeat;
            bool Required;
            bool SupressNotification;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F3345395ECBDE3D, 0xC8)]
        public class QuestSectionInstance : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85E7DE0D8178BE5C, 0xB0)]
        public class QuestSectionUpdateQueue : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8856458E7579B20F, 0x1C0)]
        public class QuestSystem : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA3BEF2B6072CDC70, 0x160)]
        public class QuestSystemResource : Resource
        {
            Ref<EnumFactValue> QuestUnavailableEnumValue;
            Ref<EnumFactValue> QuestAvailableEnumValue;
            Ref<EnumFactValue> QuestInProgressEnumValue;
            Ref<EnumFactValue> QuestSucceededEnumValue;
            Ref<EnumFactValue> QuestFailedEnumValue;
            Ref<EnumFactValue> QuestSectionUnavailableEnumValue;
            Ref<EnumFactValue> QuestSectionAvailableEnumValue;
            Ref<EnumFactValue> QuestSectionCompletedEnumValue;
            Ref<EnumFactValue> QuestSectionBlockedEnumValue;
            Ref<LocalizedTextResource> MoneyRewardText;
            Ref<LocalizedTextResource> XpRewardText;
            Ref<LocalizedTextResource> PerkPointRewardText;
            Ref<LocalizedTextResource> RewardText;
            Ref<UITexture> UIMoneyRewardIcon;
            Ref<UITexture> UIXpRewardIcon;
            Ref<UITexture> UIPerkPointRewardIcon;
            Ref<QuestGenerationSettings> QuestGenerationSettings;
            Ref<PlayerNotificationResource> PopupNotification;
            Array<Ref<QuestCategory>> QuestCategories;
            Ref<EnumFact> ActivityRewardFact;
            Ref<EnumFactValue> ActivityGoldenMedal;
            Ref<EnumFactValue> ActivitySilverMedal;
            Ref<EnumFactValue> ActivityBronzeMedal;
            Ref<EnumFactValue> ActivityNoMedal;
            Ref<EnumFact> MainQuestProgressFact;
            Ref<QuestCategory> MainQuestCategory;
            Ref<BooleanFact> PerkSetFact;
            Array<Ref<QuestType>> TrackingPriorityTypes;
            Array<Ref<HuntingGroundTrialLog>> HuntingGroundTrialLogs;
            Ref<LocationMarkerState> UndiscoveredMarkerState;
            Ref<LocationMarkerState> DefaultMarkerState;
            Ref<LocationMarkerState> TrackedMarkerState;
            Ref<LocalizedTextResource> NewQuestMarkerText;
            UUIDRef<MenuPageBase> PostQuestMenu;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1F17BA1B57E72D0, 0xE8)]
        public class QuestTrackingPathObjective : QuestObjective
        {
            GGUUID TrackingPathUUID;
            Array<GGUUID> NodeUUIDs;
            float AreaRadius;
            float AreaHeight;
            float AreaBuffer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44B94B350181807A, 0x98)]
        public class QuestTrackingPathObjectiveInstance : QuestObjectiveInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F8A6C686424689E, 0x30)]
        public class QuestTrackingQuestTrigger : QuestTrigger
        {
            bool Tracked;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB12E9BB5C049E5F4, 0x30)]
        public class QuestTrackingQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB79AEC34480C8A6, 0x60)]
        public class QuestTrackingRepresentationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6826FF96CDB9A875, 0x58)]
        public class QuestTrackingRepresentationComponentResource : EntityComponentResource
        {
            EDeviceFunction Function;
            Ref<MenuPageBase> QuestMenu;
            Array<Ref<PlayerNotificationResource>> QuestStartedNotifications;
            Array<Ref<PlayerNotificationResource>> QuestEndedNotifications;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20E373902C2351BD, 0x28)]
        public class QuestTrigger : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x91BEA680A6EA9865, 0x28)]
        public class QuestTriggerInstance : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE21F991F815812A8, 0xF8)]
        public class QuestType : Resource
        {
            bool VisibleInMenu;
            bool Repeatable;
            bool Unique;
            bool ClearLogOnRepeat;
            bool CanBeAbandoned;
            bool TrackingOnlyInsideArea;
            bool ForceTrackingOnStart;
            bool AllowAutoTrack;
            bool OnlyShowAreaNotificationsWhenTracked;
            bool Tracked;
            bool ShowPostQuestMenu;
            bool MarkItemsInMenu;
            Array<int> RepeatCooldown;
            Ref<PlayerNotificationResource> ActiveStartedNotification;
            Ref<PlayerNotificationResource> InactiveStartedNotification;
            Ref<PlayerNotificationResource> CompletedNotification;
            Ref<PlayerNotificationResource> FailedNotification;
            Ref<PlayerNotificationResource> ActiveProgressedNotification;
            Ref<PlayerNotificationResource> InactiveProgressedNotification;
            Ref<PlayerNotificationResource> LeavingAreaNotification;
            Ref<PlayerNotificationResource> EnteredAreaNotification;
            Ref<PlayerNotificationResource> LeftAreaNotification;
            Ref<PlayerNotificationResource> DefaultRewardNotification;
            Ref<PlayerNotificationPriority> FinishedNotificationPriority;
            Ref<PlayerNotificationPriority> ProgressedNotificationPriority;
            Ref<PlayerNotificationPriority> StartedNotificationPriority;
            Ref<PlayerNotificationPriority> ObjectivePopupNotificationPriority;
            Ref<PlayerNotificationPriority> RewardNotificationPriority;
            Ref<PlayerNotificationPriority> AreaNotificationPriority;
            Ref<LocationMarkerResource> StartMarker;
            Ref<LocationMarkerResource> ProgressMarker;
            Ref<LocationMarkerResource> EndMarker;
            float LeavingAreaSize;
            bool UseGoalForTracking;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2CB0B5D732194C2, 0x10)]
        public class QuestsViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A22E2E2260094E2, 0x60)]
        public class QuickTimeEventComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC588EAA03743F88, 0x50)]
        public class QuickTimeEventComponentResource : EntityComponentResource
        {
            float MinimumButtonPressesPerSecond;
            float MaximumButtonPressesPerSecond;
            int NumDesiredPresses;
            Ptr<EntityAction> SucceedAction;
            Ptr<EntityAction> FailAction;
            Ptr<EntityAction> ButtonPressedAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1DABEE5BA19826, 0x4)]
        public class RGBAColor
        {
            uint8 B;
            uint8 G;
            uint8 R;
            uint8 A;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBA75946B4D0BB48C, 0x4)]
        public class RGBAColorRev
        {
            uint8 R;
            uint8 G;
            uint8 B;
            uint8 A;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D753D7A6E243709, 0x28)]
        public class RTTIBool : RTTIPrimitive
        {
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D861BBFD01B10B4, 0x28)]
        public class RTTIDouble : RTTIPrimitive
        {
            double Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFB1369719142F5F, 0x28)]
        public class RTTIFloat : RTTIPrimitive
        {
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13CD9A978CFD5778, 0x28)]
        public class RTTIInt : RTTIPrimitive
        {
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78D1DE9110FD327A, 0x28)]
        public class RTTIInt64 : RTTIPrimitive
        {
            int64 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x69F066DDC22139DB, 0x8)]
        public class RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDB0F042B8B5F2C1, 0x38)]
        public class RTTIObjectTweak : RTTIRefObject
        {
            int NotBeforeBuildNumber;
            int NotAfterBuildNumber;
            Array<Ref<RTTIObjectTweakValue>> Values;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x768CC4FD58A828B6, 0x48)]
        public class RTTIObjectTweakValue : CoreObject
        {
            UUIDRef<RTTIRefObject> RootObject;
            String RootUUID;
            String Path;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CCB282F88BB5684, 0x20)]
        public class RTTIPrimitive : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD6F59DFC154E3B73, 0x20)]
        public class RTTIRefObject : RTTIObject
        {
            GGUUID ObjectUUID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34C865BF4CC0C671, 0x28)]
        public class RTTIRefObjectSet
        {
            Array<Ref<RTTIRefObject>> Objects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x793E1D23D6AAE237, 0x28)]
        public class RTTIString : RTTIPrimitive
        {
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2CF29C8F8B02F84, 0x68)]
        public class RadarDomeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7F7D0B90AF283F82, 0x38)]
        public class RadarDomeComponentResource : EntityComponentResource
        {
            float PulseLength;
            Ptr<EntityAction> ActivatedAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE537C1418E7F21F2, 0xC8)]
        public class RadialSectorTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56080317867338FB, 0x140)]
        public class RadialSectorWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED3187E3A63A87F1, 0xD8)]
        public class RadialWheelTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DD3BA1A91423589, 0x140)]
        public class RadialWheelWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8789A01EC6B9D662, 0xE8)]
        public class RagdollComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC925950080D6D771, 0x68)]
        public class RagdollComponentResource : EntityComponentResource
        {
            Ref<PhysicsRagdollResource> RagdollResource;
            Ref<Skeleton> Skeleton;
            Ref<PhysicsSkeleton> AnimatedPhysicsSkeleton;
            float StressThreshold;
            Array<String> AttachableHelpers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x521D26386546061F, 0x68)]
        public class RagdollMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE4C983ECDBFC11A1, 0x30)]
        public class RagdollMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA6650AC7210DD9F, 0x8)]
        public class RainbowAndSundogSettings
        {
            float RainbowIntensity;
            float SundogIntensity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78B335100ACBF351, 0x28)]
        public class RainbowAndSundogSettingsResource : CoreObject
        {
            RainbowAndSundogSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB0A61DDA9BFDE4E5, 0x40)]
        public class RandomAction : EntityAction
        {
            Array<Ptr<EntityAction>> ActionsToChooseFrom;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F88A0AC6BF70D2D, 0x50)]
        public class RandomFireResource : Resource
        {
            int Chance;
            FRange StartDelayTimeRange;
            FRange DelayRange;
            FRange FireTimeRange;
            float MaxTotalTime;
            bool OnlyWhenAlreadyFiring;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B34BB2B4D998E1A, 0x38)]
        public class RandomMatrixListResource : RandomMatrixResourceBase
        {
            Array<Mat44> Matrices;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97DFA46ED09411B, 0x38)]
        public class RandomMatrixResource : RandomMatrixResourceBase
        {
            Ref<RandomVectorResource> Position;
            Ref<RandomVectorResource> Orientation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3856DBC8855EE62B, 0x28)]
        public class RandomMatrixResourceBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39BEDFB75815DA0, 0x140)]
        public class RandomSimpleSoundResource : SimpleSoundResource
        {
            Array<Ref<WaveResource>> Waves;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49D8876C1BD4C98E, 0x50)]
        public class RandomVectorResource : Resource
        {
            Vec3 Min;
            Vec3 Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FAF1A22A07AEAB2, 0x60)]
        public class RangeFinderComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x321E82778637EA67, 0x30)]
        public class RangeFinderComponentResource : EntityComponentResource
        {
            float MaxRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB685DD1A2F67CD7E, 0x58)]
        public class ReactOnImpactComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2FD2743C641852, 0x30)]
        public class ReactOnImpactComponentResource : EntityComponentResource
        {
            float MinVelocity;
            bool RemoveAfterImpact;
            bool IgnoreCollisionWithInstigatorEntity;
            MaterialType MaterialType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7353160B2F4BC5C8, 0x58)]
        public class RecordAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71C858F1C9AEAE70, 0x58)]
        public class ReduceIncomingAIDamageComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23FEACCF4DAF508C, 0x60)]
        public class ReduceIncomingAIDamageComponentResource : EntityComponentResource
        {
            Ref<CurveResource> DamageMultiplierOverHealth;
            Ref<CurveResource> SeverityMultiplierOverHealth;
            bool DenyKillingBlow;
            Array<Ref<AIFaction>> ExcludeFactions;
            Array<Ref<AIFaction>> IncludeFactions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B7BF56868139C11, 0x68)]
        public class ReferencedSequenceEventResource : EventResource
        {
            Ref<SequenceResource> ReferencedSequenceResource;
            Array<ExposedEventMapping> ExposedEventMapping;
            Array<Ref<EventResource>> DisabledEventResources;
            Array<LinkToEventInReferencedSequence> LinksToEventsInReferencedSequence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32FB1D71C008E84, 0x50)]
        public class RegionalAction : ConditionalAction
        {
            Array<ERegion> Regions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x98681A4BAF459D6E, 0x130)]
        public class RegularSkinnedMeshResource : RegularSkinnedMeshResourceBase
        {
            Vec3 PositionBoundsScale;
            Vec3 PositionBoundsOffset;
            Ref<RegularSkinnedMeshResourceSkinInfo> SkinInfo;
            Array<Ref<PrimitiveResource>> Primitives;
            Array<Ref<RenderEffectResource>> RenderFxResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96C53EF50E874D62, 0xC0)]
        public class RegularSkinnedMeshResourceBase : SkinnedMeshResource
        {
            DrawFlags DrawFlags;
            ESkinningDeformerType DeformerType;
            Ref<SkinnedMeshBoneBindings> SkinnedMeshBoneBindings;
            Ref<SkinnedMeshBoneBoundingBoxes> SkinnedMeshBoneBoundingBoxes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x451DBFC72F454971, 0x40)]
        public class RegularSkinnedMeshResourceSkinInfo : BaseResource
        {
            Array<PrimitiveSkinInfo> Parts;
            Array<BlendTargetDeformation> BlendTargetDeforms;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F8FA93958766428, 0x18)]
        public class RelativeGroupFader
        {
            ESoundMasterVolumeGroup Group;
            int Volume;
            int WetVolume;
            float Pitch;
            float Occlusion;
            bool IsDominant;
            bool IsLocked;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECF47D1990F55FEA, 0x68)]
        public class RelativePositionLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13C7DC737B195A31, 0x80)]
        public class RelativePositionLocatorResource : LocatorResource
        {
            Ref<LocatorResource> ParentLocatorResource;
            Mat44 LocalMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD579F9D62E9052BE, 0x40)]
        public class RelativeSoundMixResource : Resource
        {
            Array<RelativeGroupFader> Faders;
            bool IsSuperDominant;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3A417AC432DC7AE, 0x30)]
        public class ReliableMessage : RTTIRefObject
        {
            String UUID;
            Ref<RTTIRefObject> Message;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x994D33C4AAB96225, 0x38)]
        public class ReloadDurationSettings : Resource
        {
            float StartDuration;
            float FirstCycleDuration;
            float CycleDuration;
            float FinishDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x50544BE8425B3371, 0x38)]
        public class ReloadDurationsAnimationReference : Resource
        {
            Ref<ReloadDurationSettings> ReloadDurationsNormal;
            Ref<ReloadDurationSettings> ReloadDurationsRaised;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17C0B7119F2FE993, 0x40)]
        public class RememberFactAction : MemoryFactActionBase
        {
            float Duration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBB3BEE3CD05BD94, 0x30)]
        public class RemoteUseAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0EFE4F835AFFE20, 0x58)]
        public class RemoveActorEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C925304E78CDC46, 0x38)]
        public class RemoveActorEventResource : EventResource
        {
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB53C6CB3699CE8C, 0x58)]
        public class RemoveEntitiesEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x314D1F61DF414D96, 0x38)]
        public class RemoveEntitiesEventResource : EventResource
        {
            bool RemoveDeadHumanoids;
            bool RemoveExcessPickups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD02BDF61E2AF3993, 0x30)]
        public class RemoveEntityAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEC01F0450506FEF, 0x38)]
        public class RemoveHUDElementAction : EntityAction
        {
            Ref<HUDElementResource> HUDElementResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E6E58D0723B566E, 0x30)]
        public class RemoveHealthSegmentAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF92FA63800181D9, 0x48)]
        public class RemoveInventoryItemAction : EntityAction
        {
            bool DropPickUp;
            Ref<EntityResource> EntityResource;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFEF5BD4CBCB567E4, 0x58)]
        public class RenderDataStreamingHintData : RTTIRefObject
        {
            ERenderDataHintDataType DataType;
            Array<RenderDataStreamingHintObject> HintObjects;
            Array<RenderDataStreamingHintDataEntry> Entries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6974273844D9605, 0x100)]
        public class RenderDataStreamingHintDataArea : RTTIRefObject
        {
            Array<Vec3> SampleLocations;
            WorldTransform Orientation;
            Shape2DExtrusion InputDataArea;
            int MaxSampleLocations;
            BoundingBox3 FinalDataArea;
            Ref<RenderDataStreamingHintData> HintData;
            Array<RenderDataStreamingHintDataKdtreeNode> KdTreeNodes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32CA922B6E402BDF, 0x48)]
        public class RenderDataStreamingHintDataAreaResource : Resource
        {
            String Name;
            String BinaryPath;
            Array<Ref<RenderDataStreamingHintDataArea>> Areas;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6F9113693B3D3036, 0x30)]
        public class RenderDataStreamingHintDataEntry
        {
            Vec3 Location;
            uint32 StreamingMemorySize;
            uint32 ObjectCount;
            Array<uint16> LODData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEFC089177439132, 0x10)]
        public class RenderDataStreamingHintDataKdtreeNode
        {
            Vec3Pack Position;
            int32 PackedData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23E955DC696576C6, 0x18)]
        public class RenderDataStreamingHintObject
        {
            MurmurHashValue DataHash;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6F006CC5BF1574D, 0x50)]
        public class RenderEffectResource : Resource
        {
            Array<RenderTechniqueSet> TechniqueSets;
            ESortMode SortMode;
            ESortOrder SortOrder;
            ERenderEffectType EffectType;
            bool MakeAccumulationBufferCopy;
            VertexElementSet BaseElementSet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46B0C2E627814397, 0x28)]
        public class RenderEffectShaderOverrides
        {
            int PrimitiveIndex;
            Array<ShaderTextureBinding> ShaderTextureOverrides;
            Array<ShaderVariableBinding> ShaderVariableOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F789D3CF16BFCCE, 0x50)]
        public class RenderEffectShaderOverridesResource : Resource
        {
            RenderEffectShaderOverrides ShaderOverrides;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB35237763F8D9424, 0x38)]
        public class RenderEffectSwapEntry
        {
            Ref<RenderEffectResource> OriginalRenderEffectResource;
            Ref<RenderEffectResource> NewRenderEffectResource;
            Array<GGUUID> UUIDsToSwap;
            ERegion Region;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD1DAF00F291C5D2, 0x68)]
        public class RenderEffectSwapperResource : Resource
        {
            Array<RenderEffectSwapEntry> Entries;
            Array<TextureStreamingHighLODSkipSet> TextureSkipEntries;
            Array<SequenceHighLODSkipSet> SequenceSkipEntries;
            Array<TerrainMaterialSwapEntry> TerrainMaterialSwapEntries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x239F7B6CFAED0C5E, 0xB0)]
        public class RenderTechnique
        {
            RenderTechniqueState RenderTechniqueState;
            SRTBindingCache SRTBindingCache;
            ERenderTechniqueType TechniqueType;
            uint64 WorldDataBingingMask;
            bool GPUSkinned;
            bool WriteGlobalVertexCache;
            bool InitiallyEnabled;
            uint32 MaterialLayerID;
            Array<SamplerBindingWithHandle> SamplerBindings;
            Array<TextureBindingWithHandle> TextureBindings;
            Array<VariableBindingWithHandle> VariableBindings;
            Ref<ShaderResource> Shader;
            RenderTechniqueID ID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x93A72255DEFBFD0A, 0x8)]
        public class RenderTechniqueID
        {
            uint64 Hash;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x475F2D20E321421B, 0x58)]
        public class RenderTechniqueSet
        {
            Array<RenderTechnique> RenderTechniques;
            ERenderTechniqueSetType Type;
            ERenderEffectType EffectType;
            uint32 AvailableTechniquesMask;
            uint32 InitiallyEnabledTechniquesMask;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72869318817B0B97, 0x8)]
        public class RenderTechniqueState
        {
            uint16 PackedData;
            HalfFloat PackedDepthBias;
            uint32 PackedColorMask;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB56261CAB46329F, 0x1C0)]
        public class RenderZone : WorldNode
        {
            Shape2DExtrusion base_Shape2DExtrusion;
            float FarPlane;
            float FadeDistance;
            ERenderZoneFadeRegion FadeRegion;
            int Priority;
            float DefaultIntensity;
            Ref<Texture> CubemapTexture;
            Ref<CubemapGBuffer> CubemapGBuffer;
            bool SkipStreamingHighLODs;
            Vec4 ReflectionCubeIntensity;
            bool ForceSunlightDisable;
            EIndirectLightingHint IndirectLightingHint;
            Vec3 SecondaryCompartmentShadowDetectionBoxExtents;
            Vec3 MaxSecondaryCompartmentShadoxBoxExtents;
            Ref<PostProcessSettingsResource> PostProcessSettings;
            ExposureSettings ExposureSettings;
            float ExposureSettingsWeight;
            Array<RenderZoneParticleEffect> ParticleEffects;
            Ref<ClimateBase> Climate;
            float MinSkyvisValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8827034D60A9ABD, 0x98)]
        public class RenderZoneManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F217FB9DD6EE3FD, 0x10)]
        public class RenderZoneParticleEffect
        {
            Ref<ParticleSystemResource> ParticleSystem;
            float EmitRate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF32E55727166F8EC, 0x90)]
        public class RenderingPrimitiveResource : PrimitiveResource
        {
            Ref<RenderEffectResource> RenderEffects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C87025AA4FF7E32, 0x30)]
        public class ReplenishLoadoutAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF469AD94938B77B, 0x28)]
        public class RequestOwnershipEvent : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5BC20068B324214C, 0x38)]
        public class ResetDelayedActionAction : EntityAction
        {
            Ptr<DelayedAction> Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38CE3651C24FFDF, 0x38)]
        public class ResistanceStatModifierResource : ActiveStatModifierResource
        {
            Ref<DamageModifierComponentResource> DamageModifierComponent;
            Ref<CurveResource> RatingToResistanceCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83E784D26B042AC8, 0x28)]
        public class Resource : BaseResource
        {
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7AD4715C9D351C5, 0x40)]
        public class ResourceSelectorBase : Resource
        {
            Ref<Resource> Resource;
            Array<Ref<ResourceSelectorBase>> Selectors;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6633274CEC82D32, 0x20)]
        public class ResourceWithoutLegacyName : BaseResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67414DABD18E86DC, 0x2F0)]
        public class RespawnEntity : Entity
        {
            float RespawnDelay;
            int RespawnCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31CC25951F4BFD35, 0x158)]
        public class RespawnEntityResource : EntityResource
        {
            float Delay;
            Ref<EntityResource> Entity;
            String SpawnFunction;
            bool NeedsAI;
            int Count;
            Ref<EntityResource> MayaSpawnEntity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58F591361AF10C5E, 0x2F0)]
        public class RespawnEntityWithBoundingBox : RespawnEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD8C2C3BC17CB394C, 0x180)]
        public class RespawnEntityWithBoundingBoxResource : RespawnEntityResource
        {
            BoundingBox3 BoundingBox;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15EFD1BF2759BAA0, 0x18)]
        public class ResponseCurve
        {
            float LowerInput;
            float Range;
            Array<float> Samples;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7ABD0B09D6C1DC6, 0x58)]
        public class ReturnEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49A2CD34914298AE, 0x38)]
        public class ReturnEventResource : EventResource
        {
            int BlendFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C014BCC50EA25F5, 0x128)]
        public class ReverbPresetResource : Resource
        {
            bool EnableMfdnReverb;
            bool EnableConvolutionReverb;
            float EffectLevel;
            float EarlyReflectionsDelay;
            float EarlyReflectionsTimeFactor;
            float EarlyReflectionsLevel;
            float EarlyReflectionsSlapback;
            float EarlyReflectionsHFRatio;
            float DecayTime;
            float DecayLevel;
            float DecayHFRatio;
            float DecayDiffusion;
            float DiffuseTailHfReference;
            float EffectLowPassCutoff;
            float EffectHighPassCutoff;
            float EarlyReflectionsDelayMod;
            float EarlyReflectionsTimeFactorMod;
            float EarlyReflectionsLevelMod;
            float EarlyReflectionsSlapbackMod;
            float EarlyReflectionsHFRatioMod;
            Ref<ImpulseResponseResource> ImpulseResponse;
            bool Reverse;
            float StartOffset;
            float StopOffset;
            float Gain;
            float AttackTime;
            int AttackAlpha;
            float SustainTime;
            float ReleaseTime;
            int ReleaseAlpha;
            float MaxAbsolutePitchDeviation;
            float LowPassCoefficient;
            EDelayLineTapIndex FeedbackTap;
            bool UseZeroDelayTap;
            float InputGain;
            float OutputGain;
            float FeedbackGain;
            float FeedforwardGain;
            float DelayTimeTap0;
            float DelayTimeTap1;
            float DelayTimeTap2;
            float DelayTimeTap3;
            Ref<ParametricEqResource> Filter1Tap0;
            Ref<ParametricEqResource> Filter1Tap1;
            Ref<ParametricEqResource> Filter1Tap2;
            Ref<ParametricEqResource> Filter1Tap3;
            Ref<ParametricEqResource> Filter2Tap0;
            Ref<ParametricEqResource> Filter2Tap1;
            Ref<ParametricEqResource> Filter2Tap2;
            Ref<ParametricEqResource> Filter2Tap3;
            bool RotateWithListener;
            float Focus;
            float FadeTime;
            bool SuppressDrySignal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF95E20E79B207A1, 0x280)]
        public class ReverbSubmixResource : SubmixResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB8D647965BC45D8, 0x2E0)]
        public class ReviveAbilityWeapon : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAA0135F14D28E40, 0x30)]
        public class ReviveAbilityWeaponRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3ACFE96046D0A3D8, 0x58)]
        public class ReviveAbilityWeaponResource : EntityComponentResource
        {
            Ref<AIBodyPartBase> BodyPartResource;
            float FiringPhysicsImpulse;
            float AimRaycastLength;
            float PredictionFactor;
            float PredictionFactorAI;
            float Range;
            float ReviveHealthPercentage;
            String WeaponId;
            Ref<CurveResource> AimShapeCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C81A1F51D34C083, 0x10)]
        public class ReviveAmmoSettings
        {
            String Weapon;
            int Ammo;
            bool IsAuxiliaryWeapon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCB13D20171DF91C, 0x40)]
        public class RewardBonusRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61F86C24082B1AE8, 0x170)]
        public class RewardComponent : PickUpComponentBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17B1BB6FF63D797E, 0xF0)]
        public class RewardComponentResource : PickUpComponentBaseResource
        {
            bool IsLootPersistent;
            bool IsLoootingAllowedWhileAlive;
            bool IsAdditionalLootRollsAllowed;
            bool ClearInventoryWhenAddingLoot;
            float AutoMenuCloseBufferDistance;
            UUIDRef<MenuPageBase> MenuPage;
            Array<Ref<LootSlot>> LootSlots;
            Ref<LevelBasedXpReward> XpReward;
            Ref<LocalizedTextResource> Reason;
            Array<RewardDestructibilityTagToLootItemMapping> LootableParts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7DCEAFA497CD3DC, 0x10)]
        public class RewardDestructibilityTagToLootItemMapping
        {
            Ref<TagProperty> TagProperty;
            Ref<EntityResource> LootItem;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB268303462054031, 0x60)]
        public class RewardManagerResource : Resource
        {
            Array<Ref<UnlockableFacePaint>> UnlockableFacePaints;
            Ref<LocalizedTextResource> NoFacePaintMenuText;
            Array<Ref<UnlockableFocusModel>> UnlockableFocusModels;
            Ref<PlayerNotificationResource> RewardsUnlockedNotification;
            Ref<PlayerNotificationPriority> RewardsUnlockedNotificationPriority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6EB73AF078CD9447, 0x50)]
        public class RewardManagerRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7C86A01F71C50E5, 0x70)]
        public class RingSegmentVolumetricAnnotation : VolumetricAnnotation
        {
            FRange DistanceRange;
            FRange DistanceRangeSquared;
            float MaxAbsHeading;
            float MaxAbsHeadingCos;
            FRange HeightRange;
            float ReferenceHeading;
            Quat ReferenceRotation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x461A4B399D5A4B17, 0xD0)]
        public class Road : Route
        {
            FRGBAColor DebugColor;
            ERoadBakeDataMode BakeMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA14E7A972EA5BE9C, 0x10)]
        public class RoadConnection
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BE3DF7E861C422, 0x30)]
        public class RoadJunction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2219E73D2D02CBD8, 0x28)]
        public class RoadLink : RoadConnection
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D176B79ED6EB855, 0x100)]
        public class RoadNode : RouteNode
        {
            float Width;
            float HeightFalloff;
            float ProfileScale;
            float Mask0Tiling;
            float Mask1Tiling;
            float MaskHeightScale;
            float MaskBreakUpScale;
            ERoadNodeProfileType ProfileType;
            ERoadNodeSnapMode SnapMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52348AAD245CDE28, 0x48)]
        public class RobotAction : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC925CB6DDB2865C5, 0x78)]
        public class RobotActionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34FAAE49A306B440, 0x38)]
        public class RobotActionComponentResource : EntityComponentResource
        {
            Array<Ref<RobotActionResource>> Actions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEAC2C74E0F307C53, 0x48)]
        public class RobotActionResource : Resource
        {
            String ActionID;
            EStaminaType StaminaType;
            float StaminaCost;
            float StaminaCostPerSecond;
            Ref<StaminaUsageType> StaminaUsageType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD26EF7DD2788C12, 0x88)]
        public class RobotFuriousStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8ED079C38041659, 0x88)]
        public class RobotFuriousStateComponentResource : RobotStateComponentResource
        {
            float StateCoolDownDuration;
            Ref<StaminaModifier> StaminaDepletedModifier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDE7D9F9F690099D, 0x80)]
        public class RobotInjuredStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13D29A33A5A62D43, 0x80)]
        public class RobotInjuredStateComponentResource : RobotStateComponentResource
        {
            float CriticallyInjuredHealthFactor;
            float RecoveredHealthFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC4DB887023084667, 0x88)]
        public class RobotLowStabilityStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76763600C8B4E96B, 0x78)]
        public class RobotLowStabilityStateComponentResource : RobotStateComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE67F115F75E4FD, 0x20)]
        public class RobotMeleeWeaponAnimationInfoBase : BaseResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5ABD2CB812FE5D0, 0x48)]
        public class RobotMeleeWeaponAnimationInfoDirectional : RobotMeleeWeaponAnimationInfoBase
        {
            String AnimationVariableName;
            Array<RobotMeleeWeaponAnimationInfoValuePair> AttackValuePairs;
            bool Switch;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4878BA049FA7768, 0x80)]
        public class RobotMeleeWeaponAnimationInfoSource : RobotMeleeWeaponAnimationInfoBase
        {
            float Duration;
            float UpdateTargetDuration;
            float UpdateTargetOverrideDuration;
            float PrimaryDamageTime;
            Vec3 PrimaryDamageBonePosition;
            Vec3 PrimaryDamagePosition;
            float PrimaryDamageRotation;
            float EndOfAllDamageTime;
            Vec3 PostDamageDisplacement;
            bool HasSupportForMovingEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x123642BF1289E67, 0x10)]
        public class RobotMeleeWeaponAnimationInfoValuePair
        {
            Ref<RobotMeleeWeaponAnimationInfoBase> AttackInfo;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE2E27FF10193A40, 0x70)]
        public class RobotMeleeWeaponAttackState : Resource
        {
            String StateName;
            int StateID;
            int AnimationEndSyncEvent;
            int AnimationMovingEndDurationEventID;
            String PrimaryDamageHelper;
            Vec3 PrimaryDamageOffset;
            int PrimaryDamageAnimationEvent;
            bool PlansAheadWhenAboutToStop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7EE04367F5BF816, 0x210)]
        public class RobotMeleeWeaponComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC15E4479C4B55D49, 0x1A0)]
        public class RobotMeleeWeaponComponentResource : EntityComponentResource
        {
            String AnimationAction;
            String BreakoutAnimationAction;
            String SuccessAnimationAction;
            float AnimationActionDuration;
            String AnimationVariable;
            float AnimationVariableValue;
            Array<Ref<RobotMeleeWeaponAttackState>> AnimationAttackStates;
            Array<Ref<RobotMeleeWeaponAnimationInfoBase>> AnimationInfo;
            Ref<SkinnedModelResource> ModelResource;
            String AnimationTag;
            String DirectionAnimationVariable;
            String DistanceAnimationVariable;
            String MovingEnterAnimationVariable;
            Ptr<EntityAction> StartAction;
            Ptr<EntityAction> StopAction;
            Ptr<EntityAction> StartActionOnTarget;
            Ptr<EntityAction> StopActionOnTarget;
            Ptr<EntityAction> HitAction;
            Array<Ref<RobotMeleeWeaponDamageEvent>> DamageEvents;
            float DamageClamp;
            float DurationOverride;
            FRange DistanceClamp;
            Ref<WarpedAnimation> WarpedAnimation;
            String ForcedMountTag;
            String ForcedMountSuccessfulAnimation;
            String ForcedMountBoxHelper;
            BoundingBox3 ForcedMountBox;
            Ref<MountMode> ForcedMountMode;
            String WeaponId;
            float DamageRadius;
            Array<Ref<VolumetricAnnotation>> TriggerVolumes;
            Array<Ref<VolumetricAnnotation>> ExclusionVolumes;
            Array<Ref<VolumetricAnnotation>> MeleeLimitationVolumes;
            bool AllowManualInterrupt;
            bool CanAttackCorpses;
            String AttachTargetToHelperOnHit;
            EAttackNodePolicy AttackMode;
            float CollisionRadiusOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8556B850ED35363A, 0x50)]
        public class RobotMeleeWeaponDamageEvent : Resource
        {
            Ptr<EntityAction> StartDamageAction;
            Ptr<EntityAction> StopDamageAction;
            Array<Ref<EntityComponentResource>> DamageComponents;
            String AnimationEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DDE4D639B8CAB25, 0x40)]
        public class RobotMeleeWeaponExitState : Resource
        {
            String StateName;
            int StateID;
            float Duration;
            int SyncEventIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27552FC80397B46F, 0x80)]
        public class RobotMountedStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C387242B7210B33, 0x78)]
        public class RobotMountedStateComponentResource : RobotStateComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78E1D638B962E7, 0x90)]
        public class RobotMountedWeaponComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A821757234F9EB8, 0x48)]
        public class RobotMountedWeaponComponentResource : EntityComponentResource
        {
            Array<Ref<RobotMountedWeaponDescriptionResource>> RangedWeapons;
            Array<Ref<RobotMountedWeaponInputMappingResource>> MeleeWeapons;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAF6991E1DC4DF85, 0x40)]
        public class RobotMountedWeaponDescriptionResource : Resource
        {
            Ref<EntityComponentResource> WeaponComponentResource;
            String Name;
            Ref<Texture> IconTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x950E14D6672AE91C, 0x58)]
        public class RobotMountedWeaponInputMappingResource : Resource
        {
            EMountDeviceFunction DeviceFunction;
            EMountControlDirection RequiredControlDirection;
            EMountMovementState RequiredMoveState;
            IRange RequiredPostureRange;
            Ref<EntityComponentResource> WeaponComponentResource;
            bool StandStillDuringAttack;
            Ref<CurveResource> MeleeAimAssistAngleDistanceCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBADF24D99447AC9, 0x10)]
        public class RobotNotebookViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDE21FBE7A646841, 0x88)]
        public class RobotPermaBlindStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6A4DC39E2A10D89, 0x80)]
        public class RobotPermaBlindStateComponentResource : RobotStateComponentResource
        {
            int NumberOfEyes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCEDB21CFC83526D1, 0x88)]
        public class RobotReplenishingStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x527A7389CA083452, 0x80)]
        public class RobotReplenishingStateComponentResource : RobotStateComponentResource
        {
            float StaminaRegenerationDelay;
            EStaminaType StaminaType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x474B526A0D6EFA62, 0x80)]
        public class RobotStateComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x673D12ABBCAE2749, 0x78)]
        public class RobotStateComponentResource : EntityComponentResource
        {
            String StateSymbol;
            Array<String> AdditionalSymbols;
            float Duration;
            float StateEntryFactDuration;
            float StateExitFactDuration;
            Ref<GraphProgramResource> ActivationGraph;
            Ref<GraphProgramResource> DeactivationGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5DE351F53D0469F1, 0x80)]
        public class RobotTempBlindStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16395198E7A2FF8D, 0x78)]
        public class RobotTempBlindStateComponentResource : RobotStateComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D224F47010674D0, 0x88)]
        public class RobotTiredStateComponent : RobotStateComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6540E04E065F4648, 0x80)]
        public class RobotTiredStateComponentResource : RobotStateComponentResource
        {
            EStaminaType StaminaType;
            float DamageThreshold;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A7EA5CD9CA082DE, 0x78)]
        public class RobotTrackingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA178393BB0932748, 0x40)]
        public class RobotTrackingComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x82CFE8E8CAA45EAA, 0x60)]
        public class RobotTrackingComponentResource : EntityComponentResource
        {
            Ref<SoundResource> TrackingSound;
            Ref<CurveResource> SoundVolumeOverDistance;
            Ref<CurveResource> SoundFrequencyOverDistance;
            Ref<CurveResource> SoundVolumePerAngle;
            Ref<CurveResource> SoundFrequencyPerAngle;
            String ShaderVariableName;
            Ref<CurveResource> ShaderVariableAnimationCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6CBFDFB6E5480E67, 0x3F0)]
        public class Rocket : Throwable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x670B844F352777DB, 0x558)]
        public class RocketLauncherWeapon : AmmoEjectorWeapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9F5BA6CA96BA8E7F, 0x90)]
        public class RocketLauncherWeaponRep : AmmoEjectorWeaponRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BE42BC399B7CB97, 0x158)]
        public class RocketLauncherWeaponResource : AmmoEjectorWeaponResource
        {
            bool UseAimTargetForHoming;
            bool ZoomIsHoming;
            float TimeToEnableHoming;
            bool HomeInOnHumanoids;
            float HomingLockConeAngle;
            bool AutomaticLocking;
            bool RequiresLockTargetToFire;
            Ref<SoundResource> LockingActiveSound;
            Ref<SoundResource> LockingTargetFoundSound;
            Ref<SoundResource> LockedSound;
            Ref<SoundResource> TargetAcquiredSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7640FC726D68CE44, 0x1E0)]
        public class RocketMover : ThrowableMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CE1B57A91DEC26A, 0x110)]
        public class RocketMoverResource : ThrowableMoverResource
        {
            float Acceleration;
            float MaxVelocity;
            float BurnoutTime;
            bool Enable;
            float ActivationTime;
            float FallToHomeTime;
            float OvershootExplodeRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67D610652514EE, 0x290)]
        public class RocketRep : ThrowableRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF8F42160041322, 0x240)]
        public class RocketResource : ThrowableResource
        {
            float FuseTime;
            Ref<EffectComponentResource> IgnitionEffectComponent;
            float MinimumDistanceToTarget;
            float BounceAngleOffset;
            float NoExplosionRemoveTime;
            Ref<LaserBeamResource> TargetLaser;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13BD910BD0D4D9C5, 0x38)]
        public class RoleValidationRule : RTTIObject
        {
            Ref<AIGroupRoleDescriptorResource> RoleToValidate;
            String ReasonIdentifier;
            EToReassignRoleType DestinationRoleType;
            Ref<AIGroupRoleDescriptorResource> DestinationRole;
            EHierarchyLevelToReassignTo DestinationHierarchyLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB3A53130811FEE4, 0x28)]
        public class RootDevice : RTTIRefObject
        {
            Ref<DeviceInfo> DeviceInfo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F6663CE2FC7D265, 0x210)]
        public class RopeAmmoResource : EntityProjectileAmmoResource
        {
            Ref<RopeAnchorComponentResource> RopeAnchorComponentResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA509DB02A870F5CB, 0x98)]
        public class RopeAnchorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC816EFD4B260F6CB, 0x60)]
        public class RopeAnchorComponentResource : EntityComponentResource
        {
            float PullbackSlack;
            float BreakSlack;
            float TensileStrength;
            ERopeMode RopeMode;
            float AutoFireSecondAnchorTime;
            float AutoFireForwardOffset;
            float TripwireLifeTime;
            Ref<RopeManagerComponentResource> ConnectedRopeManager;
            Array<Ref<DamageSettings>> BreakingDamageSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6085E45346A8D2A0, 0x570)]
        public class RopeAnchorEjector : GrenadeEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2678586E6245BBD0, 0x1E8)]
        public class RopeAnchorEjectorRep : DiscreteAmmoEjectorRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70625687084B49FF, 0x2E0)]
        public class RopeAnchorEjectorResource : GrenadeEjectorResource
        {
            float RetrievalTimeout;
            float RetrievalSpeed;
            Ref<RumbleResource> RetrievalRumble;
            Ref<RopePullingComponentResource> PullingComponent;
            Ref<GraphProgramResource> EvaluateTargetGraphResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBAC91BEF277E1E37, 0xE8)]
        public class RopeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD725973B698892A, 0x1A8)]
        public class RopeManagerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6233CCD75F8A0ECA, 0xB8)]
        public class RopeManagerComponentResource : EntityComponentResource
        {
            bool DispensableOnBroken;
            String HelperNodeFirstEnd;
            String HelperNodeSecondEnd;
            float PullStrength;
            float ForceStretchLength;
            float MaxLength;
            float DamageStretchLength;
            float DamageAmount;
            Ref<DamageTypeResource> DamageTypeResource;
            Ptr<EntityAction> FirstRopeEndContactAction;
            Ptr<EntityAction> SecondRopeEndContactAction;
            Ref<GraphProgramResource> FirstRopeEndBreakProgram;
            Ref<GraphProgramResource> SecondRopeEndBreakProgram;
            Ref<GraphProgramResource> FirstRopeEndRemoveProgram;
            Ref<GraphProgramResource> SecondRopeEndRemoveProgram;
            Ref<EntityResource> RopeEntityResource;
            bool ExcludeInstigatorFromCollision;
            bool OnlyCollideWithHostiles;
            bool AutoConnectByInstigator;
            bool BreakOnCollision;
            Ref<SoundResource> TensionSoundResource;
            Ref<PhysicsCollisionResource> PhysicsCollisionResource;
            float PhysicsCollisionThickness;
            float PhysicsCollisionHeight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7FD194A48B696CDA, 0x190)]
        public class RopeMesh : GeometryObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6AC3EDA3EEC0C3C7, 0x170)]
        public class RopePathPointComponent : PickUpComponentBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5584ADF336889D9F, 0xE0)]
        public class RopePathPointComponentResource : PickUpComponentBaseResource
        {
            Ref<AmmoType> RequiredAmmoType;
            Ref<TagProperty> RopeLauncherTag;
            Ref<RopeManagerComponentResource> RopeManagerComponentResource;
            Ref<LocalizedTextResource> RopeLauncherNotFoundFailMessage;
            Ref<LocalizedTextResource> RopeLauncherNotEquippedFailMessage;
            float AutoDetachRadius;
            float MinimumZiplineAngle;
            float RopeThickness;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x134AF5D5F4671858, 0x88)]
        public class RopePathProgressComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD944DF71B9E0AC3A, 0xA0)]
        public class RopePullingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED35935185611AAB, 0x28)]
        public class RopePullingComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC0E251CE6C81D04D, 0x24)]
        public class RotMatrix
        {
            Vec3Pack Col0;
            Vec3Pack Col1;
            Vec3Pack Col2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD0904F997A91048, 0xB0)]
        public class Route : WorldDataShape
        {
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7DC247BCF3E467CE, 0x90)]
        public class RouteNode : WorldDataShapeNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27F41FB4AB352766, 0x60)]
        public class RumbleEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5E6999DC6CD9A568, 0x48)]
        public class RumbleEventResource : TimedEventResource
        {
            Ref<RumbleResource> RumbleResource;
            Ref<LocatorResource> PositionLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x544EFDD1292F0B3D, 0x80)]
        public class RumbleResource : Resource
        {
            float Duration;
            Ref<CurveResource> SmallMotorCurve;
            Ref<CurveResource> BigMotorCurve;
            float FirstPointTime;
            bool Is3D;
            FRange Range;
            bool IsLooping;
            bool DoOcclusion;
            float SmallMotorOcclusionMultiplier;
            Ref<CurveResource> SmallMotorOcclusionCurve;
            float BigMotorOcclusionMultiplier;
            Ref<CurveResource> BigMotorOcclusionCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1140D335C0BB1E8E, 0x90)]
        public class SHVector4x9
        {
            Vec4 SHVec0;
            Vec4 SHVec1;
            Vec4 SHVec2;
            Vec4 SHVec3;
            Vec4 SHVec4;
            Vec4 SHVec5;
            Vec4 SHVec6;
            Vec4 SHVec7;
            Vec4 SHVec8;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5F1EFC59AB0CF86, 0x30)]
        public class SKDTree
        {
            BoundingBox3 Bounds;
            Array<SKDTreeNode> TreeData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66534260304788CD, 0xC)]
        public class SKDTreeNode
        {
            float MaxLo;
            float MaxHi;
            uint16 PackedData0;
            uint16 PackedData1;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB6E3877EA37A4B5, 0x50)]
        public class SKDTreeResource : BaseResource
        {
            SKDTree SKDTree;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3AE672EAD07A0FA7, 0x38)]
        public class SPStatistics : StateObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x196468A4AE1E221B, 0x30)]
        public class SRTBindingCache
        {
            uint8 TextureBindingMask;
            uint16 BindingDataMask;
            uint64 SRTEntriesMask;
            Array<uint16> BindingDataIndices;
            Array<HwBindingHandle> SRTEntryHandles;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD337994F0FD85FD, 0x30)]
        public class SRTElement
        {
            String Name;
            String SubSetName;
            int ResourceIndex;
            int16 Offset;
            int16 ArrayCount;
            ESRTElementType Type;
            ESRTElementFormat Format;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B7F49A1BC6FC850, 0x28)]
        public class SRTEntry
        {
            String Name;
            String ElementDescSetName;
            Array<SRTElement> Elements;
            uint8 ArrayCount;
            ESRTUpdateFrequency UpdateFrequency;
            ESRTStorageMode StorageMode;
            EProgramTypeMask ProgramTypeMask;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC014F55E3EC563CA, 0xB0)]
        public class SSAOSettingsResource : Resource
        {
            float Intensity;
            float Directionality;
            Vec3 Direction;
            int RayNumber;
            int RayStepsCount;
            float Thickness;
            float BakedAOFactor;
            Vec2 CosineWeightDistances;
            Array<TextureLUTEntry> RadiusSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x306C9A21CAC918C3, 0x60)]
        public class SamplePatternResource : Resource
        {
            Array<Vec3> SamplePoints;
            Vec3 Range;
            Array<float> Distances;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67A1923D7EBBD719, 0x10)]
        public class SamplerBindingWithHandle : ShaderSamplerBinding
        {
            HwBindingHandle SamplerBindingHandle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA873825F09AC4C22, 0xB0)]
        public class SavePoint : AIMarker
        {
            Ref<ConditionResource> Condition;
            Ref<DiscoverableArea> DiscoverableArea;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDFB4D0A138B00CAF, 0x18)]
        public class SaveSystemViewController : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9407FD84F13C791, 0x68)]
        public class ScaleEntityFromAnimationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72B62F492658C554, 0x38)]
        public class ScaleEntityFromAnimationComponentResource : EntityComponentResource
        {
            String ScaleMessageName;
            String ScaleMessagePresetName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x46D13DFB608B40C8, 0x40)]
        public class ScaleableTimedEventResource : TimedEventResource
        {
            int ClipOffset;
            float ClipSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F7C913D2E06A4B0, 0x60)]
        public class ScatterBlendAnimation : Resource
        {
            String Identifier;
            String AnimationState;
            Array<String> AnimationActions;
            Array<String> AnimationVariableNames;
            Ref<SkinnedModelResource> ModelResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7FA4F27F70AAD51, 0x68)]
        public class ScavengeHelperComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8CA9B344177F16BA, 0x38)]
        public class ScavengeHelperComponentResource : EntityComponentResource
        {
            Array<Ref<ScavengeHelperResource>> Helpers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDB0FFF6B11650D8, 0x38)]
        public class ScavengeHelperResource : Resource
        {
            String HelperName;
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B963072C97B9C67, 0xF0)]
        public class SceneActivationCollisionTrigger : CollisionTrigger
        {
            ESceneActivationTriggerType TriggerType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C8C2FD75FC5D3F7, 0x88)]
        public class SceneComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCCD92EC857811E85, 0x30)]
        public class SceneComponentResource : EntityComponentResource
        {
            bool BroadcastToAllScenes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30508B1FA9C8B251, 0x18)]
        public class SceneEntityImpostorInfo
        {
            Ref<EntityImpostorResource> ImpostorResource;
            Ref<AIRoad> ImpostorRoute;
            EEntityImpostorDirection ImpostorRouteDirection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x878AE2623FBCF50C, 0x8)]
        public class SceneEventListener
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA59DE4F11A25009F, 0x310)]
        public class SceneInstance : PrefabBaseInstance
        {
            String Name;
            Array<SpawnSetupOverride> SpawnSetupOverrides;
            Array<SpawnFactOverride> SpawnFactOverrides;
            Ref<SceneResource> Prefab;
            bool AutoStart;
            bool ResetStartedOutsideActivationRadius;
            EFactContextLifetime FactsLifetime;
            Array<Ref<FactValue>> Facts;
            bool NeedsCollision;
            float EncounterRadius;
            float ActivationRadius;
            ESceneActivationType ActivationType;
            EActivateConditionRelation ResourceActivateConditionRelation;
            Ref<ConditionResource> StreamingCondition;
            Ref<ConditionResource> ActivateCondition;
            bool ExcludeFromInitialChunk;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86C0C590A4DED32D, 0xE0)]
        public class SceneManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABE0D6FFA740D4E, 0xE0)]
        public class SceneManagerGame : SceneManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4631256C425F8F09, 0x58)]
        public class SceneMarkerData : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19EFE33B18722F33, 0x40)]
        public class SceneObjectInfo : CoreObject
        {
            Array<SceneObjectInfoEntry> ObjectInfos;
            HashMap<GGUUID_SceneEntityImpostorInfo> EntityImpostors;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C701AB04870D0D6, 0x50)]
        public class SceneObjectInfoEntry
        {
            GGUUID UUID;
            Mat44 LocalTransform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D1712112362E2B4, 0xF0)]
        public class SceneObjectLocationMarker : LocationMarkerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9D989EB92239C2C, 0x78)]
        public class SceneObjectLocationMarkerUpdater : SceneEventListener
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75C9A1574E012D84, 0x40)]
        public class SceneRemovalActivationPolicy : EntityActivationPolicy
        {
            float DeactivationRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BDCF662A3A5FB55, 0xB0)]
        public class SceneResource : PrefabBaseResource
        {
            Ref<ConditionResource> ActivateCondition;
            Array<Ref<SceneInstance>> SubScenes;
            Ref<ObjectCollection> NonStreamingObjectCollection;
            StreamingRef<ObjectCollection> ObjectCollection;
            StreamingRef<GraphProgramResource> GraphProgramResource;
            StreamingRef<OverrideGraphProgramResource> OverrideGraphProgramResource;
            Ref<SceneObjectInfo> GeneratedObjectInfo;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x93330B705251C8E4, 0xA8)]
        public class SceneSchedule : GameSchedule
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15B0706D7C346B24, 0x38)]
        public class SceneScheduleEntry : GameScheduleEntry
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DBB3867F2201D41, 0x48)]
        public class SceneScheduleEntryResource : GameScheduleEntryResource
        {
            Ref<AIMarker> StartLocation;
            Ref<AIMarker> EndLocation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E485171B26AEF87, 0x48)]
        public class SceneScheduleResource : GameScheduleResource
        {
            float SimulatedMovementSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC995E61D4927E488, 0x3F0)]
        public class ScheduledSceneInstance : SceneInstance
        {
            Ref<SceneScheduleResource> Schedule;
            EAIRoadUsableBy UsesRoads;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD27CD7E2A63A0E1B, 0x38)]
        public class ScorePointsMap : Resource
        {
            Ref<ScoreResource> ScoreResource;
            int Points;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9CE3642995CF0EDB, 0x30)]
        public class ScoreResource : Resource
        {
            EScoreEvent ScoreEvent;
            EPlayerScoreStat PlayerScoreStat;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE2BB2E72F378030D, 0x20)]
        public class ScoreStatRequirement
        {
            EPlayerScoreStat ScoreStat;
            EPlayerScoreEntityStat EntityStat;
            String DerivedStat;
            EComparator Comparator;
            int CompareValue;
            String Type;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1313F40BA85C758C, 0x200)]
        public class ScoringResource : Resource
        {
            int SuicidePenalty;
            int SuicideBaseGunPenalty;
            int TeamkillPenalty;
            int DoubleKill;
            int TripleKill;
            int MultiKill;
            int TwinKill;
            int ManyKill;
            int KillStreakThree;
            int KillStreakFive;
            int KillStreakTen;
            int KillStreakFifteen;
            int KillStreakTwenty;
            int KillStreakStopper;
            int KillStreakThreeCount;
            int KillStreakFiveCount;
            int KillStreakTenCount;
            int KillStreakFifteenCount;
            int KillStreakTwentyCount;
            int MultiKillTimer;
            int CaptureAndHoldPerFlagCaptured;
            int CaptureAndHoldPerFlagCapturedPerPlayer;
            int CaptureAndHoldPerFlagNeutralized;
            int CaptureAndHoldPerFlagNeutralizedPerPlayer;
            int CaptureAndHoldDefenderKill;
            int CaptureAndHoldAttackerKill;
            int CaptureAndSecurePerFlagCaptured;
            int CaptureAndSecurePerFlagCapturedPerPlayer;
            int CaptureAndSecurePerFlagNeutralized;
            int CaptureAndSecurePerFlagNeutralizedPerPlayer;
            int CaptureAndSecureDefenderKill;
            int CaptureAndSecureAttackerKill;
            int CaptureAndConnectPerFlagCaptured;
            int CaptureAndConnectPerFlagCapturedPerPlayer;
            int CaptureAndConnectPerFlagNeutralized;
            int CaptureAndConnectPerFlagNeutralizedPerPlayer;
            int CaptureAndConnectDefenderKill;
            int CaptureAndConnectAttackerKill;
            int SearchAndRetrievePerFlagPickedUp;
            int SearchAndRetrievePerFlagRetrieved;
            int SearchAndRetrieveFlagCarrying;
            int SearchAndRetrieveDefenderKill;
            int SearchAndRetrieveAttackerKill;
            int SearchAndRetrieveCarrierKilled;
            int SearchAndRetrieveCarrierSavior;
            int InfiltrateAndRetrievePerFlagPickedUp;
            int InfiltrateAndRetrievePerFlagRetrieved;
            int InfiltrateAndRetrievePerFlagReturned;
            int InfiltrateAndRetrieveFlagCarrying;
            int InfiltrateAndRetrieveDefenderKill;
            int InfiltrateAndRetrieveAttackerKill;
            int InfiltrateAndRetrieveCarrierKilled;
            int InfiltrateAndRetrieveCarrierSavior;
            int SearchAndSafeGuardPerFlagPickedUp;
            int SearchAndSafeGuardFlagCarrying;
            int SearchAndSafeGuardCarrierKilled;
            int SearchAndSafeGuardCarrierSavior;
            int SearchAndDestroyDemolitionMan;
            int SearchAndDestroyDemolitionExpert;
            int SearchAndDestroyPerArmedC4;
            int SearchAndDestroyPerDisarmedC4;
            int SearchAndDestroyDefenderKill;
            int SearchAndDestroyAttackerKill;
            int BodyCountPerKill;
            int DisguisedKill;
            int CoverKill;
            int ThroughShieldKill;
            int SaviorKill;
            int RevengeKill;
            int PaybackKill;
            int ZipLineKill;
            int StunKill;
            int StunKillAssist;
            int SpawnAssist;
            int EnemyDeconstruction;
            int Repair;
            int Revive;
            int Hack;
            int LevelEvent;
            int FirstBlood;
            int KnockOut;
            int MissionWin;
            int LifeRemaining;
            int LastPlayerRemaining;
            float AssistTimeout;
            float RevengeTimeout;
            float SaviorTimeout;
            float ManyKillTimeout;
            float FlagCarryingInterval;
            float ArmadilloTimeout;
            float DefaultBodyshotKillMultiplier;
            float DefaultHeadshotKillMultiplier;
            float DefaultMeleeKillMultiplier;
            float DefaultExplosiveKillMultiplier;
            float DefaultKillAssistMultiplier;
            float DefaultMeleeKillAssistMultiplier;
            float MercyKillMultiplier;
            Array<WeaponScoreMultipliers> WeaponMultipliers;
            Array<EntityScoreSettings> EntityScoreSettings;
            Array<UsedEntityScoreSettings> UsedEntityScoreSettings;
            Array<DamageScoreEvent> DamageScoreEventSettings;
            Array<Ref<ScorePointsMap>> ScorePointsMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA86A48C46C6A0BF, 0x58)]
        public class ScreenEffectEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8DD7CDD707C905C0, 0x58)]
        public class ScreenEffectEventResource : TimedEventResource
        {
            Ref<ScreenEffectResource> ScreenEffectResource;
            float BlendWeight;
            Ref<CurveResource> BlendWeightCurveResource;
            bool AutoScaleCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95F3A07434ABEAE0, 0x38)]
        public class ScreenEffectResource : Resource
        {
            Ref<PostProcessSettingsResource> PostProcessSettingsResource;
            float BlendWeight;
            int Priority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAEEA23E8B097756D, 0x1C0)]
        public class ScreenSpaceQueryResource : Resource
        {
            Ref<RenderEffectResource> RenderEffectsResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22F9D24046A917EB, 0x60)]
        public class ScreenSpaceVisibilityComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1D81511EB3BB7D0, 0x38)]
        public class ScreenSpaceVisibilityComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F92327E6F42FBB8, 0x2A0)]
        public class ScreenSpaceVisibilityManager : RTTIObject
        {
            DrawableObjectInstance base_DrawableObjectInstance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D171B14B16F707, 0x10)]
        public class ScriptGameGlobal
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE231D5411AFA6F5, 0x20)]
        public class ScriptInterface : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF31526A1FED56D7, 0x68)]
        public class ScriptMessage : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5757296D86AF4E58, 0x60)]
        public class ScriptMessageQueue : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE33C05B63006748F, 0x60)]
        public class ScriptPauseEventInstance : PauseEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55E68DFC46CD7BAB, 0x38)]
        public class ScriptPauseEventResource : PauseEventResource
        {
            String Message;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1ACAA2901D923287, 0x50)]
        public class ScriptPropertyAction : ConditionalAction
        {
            String PropertyName;
            String PropertyValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16D036CEAFEBAE55, 0xC8)]
        public class ScriptPropertyComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB0A77A0A26FD615C, 0x38)]
        public class ScriptPropertyComponentResource : EntityComponentResource
        {
            Array<InitialPropertyValue> InitialProperties;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7C81740A212275D, 0x38)]
        public class ScriptPropertyGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14BE20723C681D07, 0x68)]
        public class ScriptTag : Tag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68978EBB5F453ACB, 0x300)]
        public class ScriptedWeapon : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFFAEE9117B46880, 0x138)]
        public class ScriptedWeaponResource : EntityResource
        {
            bool InfiniteReserves;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E9CFA44A1D303E6, 0x1B0)]
        public class ScrollbarWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28FF030E38824DBE, 0xD8)]
        public class ScrollingPanelTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66CC57B89A8522F6, 0x160)]
        public class ScrollingPanelWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43D3E3F71F6B34DB, 0x2E0)]
        public class SearchAndRetrieveBase : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94357EEF44949D38, 0x240)]
        public class SearchAndRetrieveBaseRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7B2A9017DC309C0F, 0x158)]
        public class SearchAndRetrieveBaseResource : EntityResource
        {
            Ref<UseLocationResource> UseLocation;
            float DeliveredObjectLifeTime;
            Array<String> ObjectHelperNodes;
            String DefendLocalizerTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF172CB4F86C05F, 0x340)]
        public class SearchAndRetrieveObject : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C1009A809033C79, 0x250)]
        public class SearchAndRetrieveObjectRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9BAC498774C87E8D, 0x148)]
        public class SearchAndRetrieveObjectResource : EntityResource
        {
            Ref<UseLocationResource> UseLocation;
            Ref<ModelResource> AttachedModelResource;
            float AntiCheatDropTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF8B4363E8F072E69, 0x58)]
        public class SecondaryCompartmentShadowEnablerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D1D3DE6CD46A36E, 0x30)]
        public class SecondaryCompartmentShadowEnablerComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3873AF015A99DAD, 0x28)]
        public class SecondaryCompartmentShadowEnablerComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3235CC2C287B465B, 0x78)]
        public class SegmentedHealthComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55F5BDD2292C763E, 0x40)]
        public class SegmentedHealthComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15E07AE3C74C3B7B, 0x38)]
        public class SegmentedHealthComponentResource : EntityComponentResource
        {
            Array<Ref<HealthSegmentResource>> Segments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6657F1D4B7491F77, 0x58)]
        public class SelectEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7924AECA94C202CB, 0x38)]
        public class SelectEventResource : TimedEventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22C8F6CBE8097AB5, 0x40)]
        public class SelectResource : ResourceSelectorBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E27EA3FE08B5F02, 0x58)]
        public class SelectResourceByAnimTag : SelectResource
        {
            ESelectByPropertyContext Context;
            Array<SelectResourceByAnimTagTest> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD972F021063609D5, 0x8)]
        public class SelectResourceByAnimTagTest
        {
            String Tag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB8C48D97E044FB6, 0x58)]
        public class SelectResourceByBool : SelectResourceByProperty
        {
            Array<SelectResourceByBoolTest> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF941A479EC496E5, 0x58)]
        public class SelectResourceByBoolFact : SelectResourceByFact
        {
            Array<SelectResourceByBoolFactTest> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD80FDC3E9A23A6A6, 0x10)]
        public class SelectResourceByBoolFactTest
        {
            Ref<BooleanFact> Link;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF3D78BB02769DFC, 0x10)]
        public class SelectResourceByBoolTest
        {
            BoolPropertyLink Link;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA51B753871322881, 0x50)]
        public class SelectResourceByCondition : SelectResource
        {
            Array<Ref<ConditionResource>> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9682A71BDF9848D, 0x58)]
        public class SelectResourceByEnumFact : SelectResourceByFact
        {
            Array<SelectResourceByEnumFactTest> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC54E9C98E65C91BA, 0x10)]
        public class SelectResourceByEnumFactTest
        {
            Ref<EnumFact> Link;
            Ref<EnumFactValue> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD69FD369294521B, 0x48)]
        public class SelectResourceByFact : SelectResource
        {
            ESelectByFactContext Context;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3479ECE7DB5857BD, 0x58)]
        public class SelectResourceByFloat : SelectResourceByProperty
        {
            Array<SelectResourceByFloatTest> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CCB380808AD691D, 0x10)]
        public class SelectResourceByFloatTest
        {
            FloatPropertyLink Link;
            EComparator Compare;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5CA181DFB064F0CF, 0x50)]
        public class SelectResourceByGraphProgram : SelectResource
        {
            Array<Ref<GraphProgramResource>> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB459817AAD447BC, 0x58)]
        public class SelectResourceByInt : SelectResourceByProperty
        {
            Array<SelectResourceByIntTest> Tests;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6465622CBC272F02, 0x10)]
        public class SelectResourceByIntTest
        {
            IntPropertyLink Link;
            EComparator Compare;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A2E2B88442F27C2, 0x48)]
        public class SelectResourceByProperty : SelectResource
        {
            ESelectByPropertyContext Context;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x81F83FA281BE7913, 0xD0)]
        public class SelectViewItemTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1C174AB710C6EC69, 0x140)]
        public class SelectViewItemWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C0F5F788D6FF30F, 0xE8)]
        public class SelectViewTag : ListItemTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4B075A966D9EE8, 0x180)]
        public class SelectViewWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE6810C929758B783, 0x58)]
        public class SendMessageEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA184C9ED847DF32, 0x40)]
        public class SendMessageEventResource : TimedEventResource
        {
            String Message;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x635A01611FD069BB, 0x38)]
        public class SendMessageToClientsRequest : RTTIRefObject
        {
            Array<String> RecipientOnlineIDs;
            Ref<MessageData> MessageData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6ED60911B6764A1E, 0x40)]
        public class SendScoreEventAction : EntityAction
        {
            Ref<ScoreResource> ScoreResource;
            bool SendToDamager;
            bool SendToConstructor;
            bool IgnoreSelf;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECFA6AAA28B3E78C, 0x68)]
        public class SentenceGroupResource : Resource
        {
            ESentenceGroupType Type;
            Array<Ref<SentenceResource>> Sentences;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3BB874B04410B7C, 0x58)]
        public class SentenceResource : Resource
        {
            ESentenceDelivery Delivery;
            float PostDelay;
            bool ShowSubtitles;
            Ref<LocalizedSimpleSoundResource> SimpleSound;
            Ref<LocalizedAnimationResource> Animation;
            Ref<LocalizedTextResource> Text;
            Ref<VoiceResource> Voice;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80EDBF3802C714A4, 0x4C0)]
        public class Sequence : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF411C34B852C4636, 0x58)]
        public class SequenceActionEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE7F1CEFFC778775, 0x48)]
        public class SequenceActionEventResource : TimedEventResource
        {
            Ref<EntityAction> EntityActionStart;
            Ref<EntityAction> EntityActionStop;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4B6DCE94FB34562, 0x4)]
        public class SequenceBlendSettings
        {
            int BlendFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96CAA6263881A58, 0x500)]
        public class SequenceCameraEntity : CameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD816C3000DED19C2, 0x320)]
        public class SequenceCameraEntityRep : CameraEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x36F9E09F1CB5E7AB, 0x1F8)]
        public class SequenceCameraEntityResource : CameraEntityResource
        {
            float HeadingSpeed;
            float MinHeading;
            float MaxHeading;
            float PitchSpeed;
            float MinPitch;
            float MaxPitch;
            bool ThirdPerson;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E0167E5EB50F194, 0x80)]
        public class SequenceComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6DD1C13EE7758CC3, 0x2F0)]
        public class SequenceEntity : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47CC7D25CFC437D4, 0x240)]
        public class SequenceEntityRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F64FDB53491B8, 0x130)]
        public class SequenceEntityResource : EntityResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E1F820FD5E26364, 0x48)]
        public class SequenceEntityVariable : CoreObject
        {
            bool StopOnDeath;
            bool StopOnDamage;
            bool StopOnAlerted;
            bool DismountOnAlertedOrDamage;
            Array<Ref<BooleanFact>> IsActiveFacts;
            Array<Ref<EntityComponentResource>> ExtraComponents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7AC9BFDD2D95D507, 0x98)]
        public class SequenceEntityVariableInstance : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC820FB5306198F7, 0x60)]
        public class SequenceHideBehaviorComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88BA4EC2DF31D79B, 0x30)]
        public class SequenceHideBehaviorComponentResource : EntityComponentResource
        {
            ESequenceHideBehavior HideBehavior;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59A154B127DE919B, 0x20)]
        public class SequenceHighLODSkipSet
        {
            Array<GGUUID> UUIDs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x670D2D3AB32DAA7E, 0x30)]
        public class SequenceInfoMission : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA341468B31E71CF, 0x20)]
        public class SequenceInfoPlayer : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71F1EF138DA559AF, 0x38)]
        public class SequenceMessageAction : EntityAction
        {
            String Message;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B8730D3C5CA9639, 0x38)]
        public class SequenceNetworkAIObstacle : Resource
        {
            Ref<AIDynamicObstacleCircleResource> ObstacleResource;
            Ref<AIFaction> ObstacleFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E233DAE0E91AADD, 0x40)]
        public class SequenceNetworkBooleanFactNode : SequenceNetworkNode
        {
            Ref<BooleanFact> Fact;
            ESequenceNetworkFactContextType FactContextType;
            Ref<SequenceNetworkNode> TrueNode;
            Ref<SequenceNetworkNode> FalseNode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE339A8941E3C664, 0x28)]
        public class SequenceNetworkBooleanFactNodeInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E4550372AF212CC, 0x38)]
        public class SequenceNetworkBranch : SequenceNetworkNode
        {
            Array<Ptr<SequenceNetworkNode>> Nodes;
            ESequenceNetworkBranchSelectionMode NodeSelectionMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E5AAE8EF28B846A, 0x30)]
        public class SequenceNetworkBranchInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x621321B2ABD0AD57, 0x60)]
        public class SequenceNetworkComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE34B33F0ED166B86, 0x30)]
        public class SequenceNetworkComponentResource : EntityComponentResource
        {
            Ref<SequenceNetworkResource> SequenceNetwork;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9B76C33E60BB634, 0x38)]
        public class SequenceNetworkCondition : SequenceNetworkConditionBase
        {
            Ptr<GraphProgramResource> Condition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65D2A04856117249, 0x30)]
        public class SequenceNetworkConditionBase : SequenceNetworkNode
        {
            Ptr<SequenceNetworkNode> True;
            Ptr<SequenceNetworkNode> False;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x612ED5B314822B18, 0x28)]
        public class SequenceNetworkConditionBaseInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBDF2CB4800EED822, 0x38)]
        public class SequenceNetworkConditionInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40F65F13B6D7DE73, 0x58)]
        public class SequenceNetworkCrateCarryingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE0281867B4E1E6E, 0x48)]
        public class SequenceNetworkCrateCarryingComponentResource : EntityComponentResource
        {
            Ref<SequenceNetworkNode> WithCrateNode;
            Ref<SequenceNetworkNode> WithoutCrateNode;
            Ref<EntityResource> CrateResource;
            Ref<BooleanFact> CrateCarryingFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B4FFDEC05A8E9ED, 0x78)]
        public class SequenceNetworkDismountMode
        {
            Ref<SequenceEntityVariable> Variable;
            WorldTransform DismountTransform;
            bool DismountTransformIsRelative;
            HashSet<GGUUID> ReachableFromNodes;
            HashSet<GGUUID> DismountingNodes;
            String Name;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA197F6B7E90AAC21, 0x40)]
        public class SequenceNetworkEnumFactNode : SequenceNetworkNode
        {
            Ref<EnumFact> Fact;
            ESequenceNetworkFactContextType FactContextType;
            Array<Ref<SequenceNetworkEnumFactValueToNode>> ValuesToNodes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A1D4C6A73F0C29A, 0x28)]
        public class SequenceNetworkEnumFactNodeInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1924224E93E57E1A, 0x30)]
        public class SequenceNetworkEnumFactValueToNode : RTTIRefObject
        {
            Ref<EnumFactValue> Value;
            Ref<SequenceNetworkNode> Node;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB30A6DF7782C5B81, 0x1E8)]
        public class SequenceNetworkInstance : RTTIRefObject
        {
            Ptr<SequenceNetworkResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E8DCB60203290EA, 0x38)]
        public class SequenceNetworkInterruptHandler : Resource
        {
            Ref<InterruptEventResource> InterruptEvent;
            Ptr<SequenceNetworkNode> Node;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD172170165C02B0, 0x20)]
        public class SequenceNetworkNode : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88C1DCFA71106733, 0x30)]
        public class SequenceNetworkNodeGraphNode : SequenceNetworkNode
        {
            Ref<GraphProgramResource> GraphProgramResource;
            Ptr<SequenceNetworkNode> NextNode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA82AA12869D3D18, 0x28)]
        public class SequenceNetworkNodeGraphNodeInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79A8370286D70445, 0x28)]
        public class SequenceNetworkNodeInstance : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3ABAF71D1AF524F1, 0x48)]
        public class SequenceNetworkOwnerSequenceEntityVariable : SequenceEntityVariable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3852778338F75950, 0xA0)]
        public class SequenceNetworkOwnerSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3BAC118D86D5D42D, 0x38)]
        public class SequenceNetworkPlayerChoiceEntry : RTTIRefObject
        {
            Ref<LocalizedTextResource> DisplayLabel;
            Ptr<SequenceNetworkNode> Node;
            bool MarkWhenChosen;
            EPlayerChoiceLocation Location;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4948C394678E3872, 0x88)]
        public class SequenceNetworkPlayerChoiceNode : SequenceNetworkSequenceNodeBase
        {
            Array<Ref<SequenceNetworkPlayerChoiceEntry>> Entries;
            Ref<LocalizedTextResource> DisplayTitle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x41C12C0886A6071B, 0x40)]
        public class SequenceNetworkPlayerChoiceNodeInstance : SequenceNetworkSequenceNodeBaseInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7A63F5ADAC9DB37F, 0xD0)]
        public class SequenceNetworkPlayerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A59443BCFFF2B0C, 0x48)]
        public class SequenceNetworkPlayerComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x982E7E2EA82AAFA8, 0x30)]
        public class SequenceNetworkPlayerComponentResource : EntityComponentResource
        {
            Ref<SoundResource> SelectionChangedSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FF8669C2650EBCE, 0x40)]
        public class SequenceNetworkQuestTrigger : QuestTrigger
        {
            Array<GGUUID> NodeUUIDs;
            int AmountRequired;
            bool PerformInitialCheck;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8FE1414C8A6A206A, 0x28)]
        public class SequenceNetworkQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD8188CDA83E1EE0, 0x90)]
        public class SequenceNetworkResource : Resource
        {
            Ref<SequenceNetworkNode> RootNode;
            Array<Ref<SequenceNetworkNode>> Nodes;
            ESequenceNetworkFactContextType NodeFactContext;
            Array<Ref<SequenceEntityVariable>> EntityVariables;
            Array<Ref<SharedPositionVariable>> SharedPositions;
            bool AutoStart;
            bool ResetWhenAborted;
            Ref<SequenceNetworkAIObstacle> AIObstacle;
            Ref<GraphProgramResource> GraphProgramResource;
            Array<SequenceNetworkDismountMode> DismountModes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x35BD8359FB6AAD06, 0x78)]
        public class SequenceNetworkSequenceNode : SequenceNetworkSequenceNodeBase
        {
            Ptr<SequenceNetworkNode> NextNode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90ADCBA0BD4C5F8D, 0x70)]
        public class SequenceNetworkSequenceNodeBase : SequenceNetworkNode
        {
            Ref<SequenceResource> Sequence;
            bool PlayOnce;
            uint16 CameraPredictionQuality;
            float CameraPredictionDistance;
            Ref<BooleanFact> Fact;
            Ref<GraphProgramResource> GraphProgramResource;
            Ptr<SequenceNetworkNode> InterruptNode;
            Array<Ref<SequenceNetworkInterruptHandler>> InterruptHandlers;
            Array<Ref<SequenceNetworkTransition>> Transitions;
            bool NeedSequenceAdaptionHandle;
            bool ForceFarPlaneWhenCameraCut;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB72C9AC68679E43B, 0x30)]
        public class SequenceNetworkSequenceNodeBaseInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E0719DD5751F76C, 0x30)]
        public class SequenceNetworkSequenceNodeInstance : SequenceNetworkSequenceNodeBaseInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6323B42607322607, 0x30)]
        public class SequenceNetworkTeleportPlayerNode : SequenceNetworkNode
        {
            Ptr<SequenceNetworkNode> NextNode;
            Ref<WorldNode> TeleportLocation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA3FEABEF50EC94DE, 0x28)]
        public class SequenceNetworkTeleportPlayerNodeInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3C7766A599222BFC, 0x48)]
        public class SequenceNetworkTransition : RTTIRefObject
        {
            SequenceNetworkTransitionTarget Target;
            SequenceNetworkTransitionSource Source;
            SequenceBlendSettings Settings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7ACFCA8CA76D6A73, 0x10)]
        public class SequenceNetworkTransitionSource
        {
            ESequenceNetworkTransitionSourceType Type;
            Ref<RTTIRefObject> Object;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7197E2C12F6941E3, 0x10)]
        public class SequenceNetworkTransitionTarget
        {
            ESequenceNetworkTransitionTargetType Type;
            Ref<SequenceNetworkSequenceNodeBase> SequenceNode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1542C84A7817E52D, 0x160)]
        public class SequenceNetworkUseLocation : SequenceNetworkNode
        {
            Ref<UseLocationResource> UseLocationResource;
            Mat44 LocalMatrix;
            Ptr<SequenceNetworkNode> Node;
            Ptr<SequenceNetworkNode> ImmediateNode;
            Ref<SequenceEntityVariable> UserEntityVariable;
            Ref<SequenceEntityVariable> Owner;
            bool PlaceOnOwner;
            String PlaceOnOwnerHelper;
            bool MoveSequenceNetworkToOwner;
            bool PlaceOnAnimationStart;
            Ref<SmartObjectComponentResource> SmartObjectComponentResource;
            String SectionName;
            bool AllowWhenMoving;
            uint32 MountCost;
            Ref<SequenceNetworkUseLocationGroup> Group;
            ECrowdImpostorAnimationState ImpostorStance;
            WorldTransform AnimationStartTransform;
            bool AnimationStartIsRelative;
            WorldTransform ImmediateAnimationStartTransform;
            bool ImmediateAnimationStartIsRelative;
            bool HasImmediateAnimationStartTransform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB691E5DE29F337CF, 0x28)]
        public class SequenceNetworkUseLocationGroup : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23769953A32C993F, 0xD8)]
        public class SequenceNetworkUseLocationInstance : SequenceNetworkNodeInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCB0A6288D480B40, 0x68)]
        public class SequenceNetworkVariableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6832AAA128C186BE, 0x40)]
        public class SequenceNetworkWantsDismountNode : SequenceNetworkConditionBase
        {
            Ref<SequenceEntityVariable> EntityVariable;
            int DismountModeIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB946BC90078988F, 0x28)]
        public class SequenceNetworkWantsDismountNodeInstance : SequenceNetworkConditionBaseInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A23B33182524A1, 0x270)]
        public class SequenceRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9094E282C7DA3267, 0x228)]
        public class SequenceResource : SequenceResourceBase
        {
            bool SyncFrameCounter;
            ESequenceLoopMode LoopMode;
            bool AutoStart;
            bool AutoDestroy;
            bool GenerateStreamingHintData;
            Array<Ref<EventResource>> Events;
            Array<Ref<LocatorResource>> Locators;
            Array<Ref<ActorResource>> Actors;
            ExposedEventAttributeList ExposedEventAttributeList;
            int StopFrame;
            Array<Ref<SortedEvent>> SortedEvents;
            Array<Ptr<SetGlobalLodBiasEventResource>> GlobalLodEvents;
            Array<Ptr<SortedEvent>> EntityActorEvents;
            bool SuppressUpdates;
            Array<InitialTemplateVariable> InitialTemplateVariable;
            Array<Ref<SequenceEntityVariable>> EntityVariables;
            Ref<RenderDataStreamingHintData> StreamingHintData;
            String StreamingHintDataPath;
            String SecondPlayerStartMarker;
            String SecondPlayerStopMarker;
            Ref<GraphProgramResource> FrameSource;
            float DurationOverrideInSec;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAEBE8FDA527B5635, 0x130)]
        public class SequenceResourceBase : EntityResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45E8F7D93A560477, 0x40)]
        public class SequenceTemplateVariableAction : EntityAction
        {
            String Variable;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x66B9EAD8481C4E9, 0x30)]
        public class SerializableDecalMaterialTypeMask
        {
            Ref<DecalResource> DecalResource;
            MaterialType MaterialTypeA;
            SerializableGeometryMaterialTypeMask MaterialTypeMask;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB8A06C37859B657, 0x20)]
        public class SerializableGeometryMaterialTypeMask
        {
            uint32 Field0;
            uint32 Field1;
            uint32 Field2;
            uint32 Field3;
            uint32 Field4;
            uint32 Field5;
            uint32 Field6;
            uint32 Field7;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA35956924F3A12A, 0x30)]
        public class ServerAddress : RTTIRefObject
        {
            String IP;
            int Port;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EB84BA9EADEADD7, 0x58)]
        public class ServerClan : RTTIRefObject
        {
            String Tag;
            String Name;
            int MaxSize;
            uint64 CreationTime;
            Array<Ref<ServerClanMember>> Members;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE80F77FD38DCBF05, 0x40)]
        public class ServerClanInvite : RTTIRefObject
        {
            String InviterID;
            String TargetID;
            String ClanTag;
            int64 CreationDate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E3EB2BD6F666EA0, 0x30)]
        public class ServerClanInviteList : RTTIRefObject
        {
            Array<Ref<ServerClanInvite>> Invites;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEFB528DB1348E9FE, 0x30)]
        public class ServerClanList : RTTIRefObject
        {
            Array<Ref<ServerClan>> Clan;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B84C908A709D9DD, 0x38)]
        public class ServerClanMatchReport : RTTIRefObject
        {
            String ClanTag;
            String OpponentTag;
            uint64 StartTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE35558CAE87AD02, 0x30)]
        public class ServerClanMatchReportResponse : RTTIRefObject
        {
            Array<Ref<ServerClanMatchReport>> Reports;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D2099C49F894123, 0x30)]
        public class ServerClanMember : RTTIRefObject
        {
            String ID;
            ClanRole Role;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77548F754C0E88FC, 0x30)]
        public class ServerClanMemberTag : RTTIRefObject
        {
            String MemberID;
            String ClanTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8C213CFB74C6930, 0x30)]
        public class ServerClanMemberTagList : RTTIRefObject
        {
            Array<Ref<ServerClanMemberTag>> Tags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76576DDEBC10B2E3, 0x38)]
        public class ServerClanResponse : RTTIRefObject
        {
            Array<String> Errors;
            ClanStatus Status;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE1F2AF6464341E1, 0x38)]
        public class ServerCollectableResponse : RTTIRefObject
        {
            bool Success;
            Array<Ref<CollectableData>> Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9472615CBA73F57, 0x38)]
        public class ServerCollectableTimer : RTTIRefObject
        {
            String TimerID;
            int64 StartTime;
            int64 Interval;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3464987846610F77, 0x38)]
        public class ServerCollectableTimerResponse : RTTIRefObject
        {
            uint64 CurrentServerTimeInMs;
            Array<Ref<ServerCollectableTimer>> Timers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3C55C2307808CFE9, 0x30)]
        public class ServerCollection : RTTIRefObject
        {
            Array<Ref<RTTIRefObject>> Items;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFF27EF76C1F2E98F, 0x48)]
        public class ServerConnectionRule : RTTIRefObject
        {
            String ID;
            Array<int> RetryIntervals;
            int RetryMax;
            int ConnectTimeout;
            int ResponseTimeout;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF74B4B33751C37B, 0x20)]
        public class ServerHeartBeat : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D8188C21973F4A0, 0x68)]
        public class ServerInfo : RTTIRefObject
        {
            String Environment;
            EServerType ServerType;
            String ServerVersion;
            String ServerBuildNumber;
            String ServerBuildDate;
            String SystemSettingsVersion;
            String SystemSettingsClientVersion;
            uint64 ClusterID;
            uint64 Timestamp;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15785F765C1CA7E2, 0x38)]
        public class ServerLocation : RTTIRefObject
        {
            String Location;
            Array<Ref<ServerAddress>> Servers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9EE3DB6536ACCF11, 0x40)]
        public class ServerProfileOwnerList : RTTIRefObject
        {
            Array<Ref<ProfileOwnerData>> Profile;
            HashMap<String_String> LogContext;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BD512AEE84853A2, 0x38)]
        public class ServerProfileUpdateResult : RTTIRefObject
        {
            String ProfileOwner;
            String UUID;
            EProfileUpdateStatus StatusCode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x502D95E717798884, 0x38)]
        public class ServerSetting : RTTIRefObject
        {
            String Key;
            Ref<RTTIRefObject> Value;
            int64 Version;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD80002D73721311, 0x30)]
        public class ServerSettingVersion : RTTIRefObject
        {
            int64 KnownVersion;
            int64 TargetVersion;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6A71967E7E40B64, 0x38)]
        public class ServerSettingsList : RTTIRefObject
        {
            Array<Ref<ServerSetting>> Entry;
            int64 Version;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC011BC8CD0A8D9E, 0x28)]
        public class ServerSystemSettingsVersionMessage : RTTIRefObject
        {
            int64 Version;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCCB04EFCB9243FF9, 0x28)]
        public class ServerTimeUnit : RTTIRefObject
        {
            int64 TimeMs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x258E01447F5664B3, 0x48)]
        public class ServerURN : RTTIRefObject
        {
            String ID;
            String Rule;
            String URN;
            String ContentType;
            EHTTPRequestMethod Method;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D2905427528B4, 0x38)]
        public class SetAiStimuliModifierAction : EntityAction
        {
            float Modifer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52242A9F234E6EB5, 0x48)]
        public class SetAnimationVariableAction : EntityAction
        {
            String AnimationVariableName;
            float Value;
            Ref<CurveResource> ValuePerDamageCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x201E828918D8323B, 0x48)]
        public class SetBoolPropertyAction : EntityAction
        {
            String PropertyName;
            BoolPropertyLink Property;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x168BF0880BC936E6, 0x40)]
        public class SetBooleanFactAction : EntityAction
        {
            Ref<BooleanFact> Fact;
            bool Value;
            bool Global;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7830AF5E1FDF4E4, 0x38)]
        public class SetCloakAiBodyVisualStimuliAction : EntityAction
        {
            bool Enable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAE5450BB1F13BCE0, 0x48)]
        public class SetEnumFactAction : EntityAction
        {
            Ref<EnumFact> Fact;
            Ref<EnumFactValue> Value;
            bool Global;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7F531230A4AD5885, 0x58)]
        public class SetFacialEmotionEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76A830E8FD6327DD, 0x40)]
        public class SetFacialEmotionEventResource : EventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<FacialEmotionAnimationResource> FacialEmotionAnimation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2620E6B538BB0B8E, 0x78)]
        public class SetFactEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D0235C5306C3E37, 0x60)]
        public class SetFactEventResource : TimedEventResource
        {
            ESequenceFactContextType FactContextType;
            Ref<EntityActorResource> EntityActorResource;
            Array<FactValueBase> Facts;
            bool RestoreFacts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x373FFA1D2371C66B, 0x70)]
        public class SetFactSpawnCommand : SpawnCommand
        {
            String Fact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x450C9E6E67BE5802, 0x40)]
        public class SetFactionAction : EntityAction
        {
            String FactionName;
            EFactionSetMode FactionSetMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA434A70DDF91E2E, 0x40)]
        public class SetFloatFactAction : EntityAction
        {
            Ref<FloatFact> Fact;
            float Value;
            bool Global;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B76A4B555D1BEB1, 0x70)]
        public class SetFloatFactEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B824312C1116EC7, 0x60)]
        public class SetFloatFactEventResource : TimedEventResource
        {
            ESequenceFactContextType FactContextType;
            Ref<EntityActorResource> EntityActorResource;
            Ref<FloatFact> FloatFact;
            Ref<CurveResource> CurveResource;
            bool RestoreFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F25B4EB24ED5EB4, 0x48)]
        public class SetFloatPropertyAction : EntityAction
        {
            String PropertyName;
            FloatPropertyLink Property;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38F6CF09F31EF288, 0x68)]
        public class SetFocusEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8856BBF4EDBADB97, 0x48)]
        public class SetFocusEventResource : TimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            bool Active;
            bool RestoreState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x107EFC338AD4F424, 0x58)]
        public class SetGlobalLodBiasEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7B27ED426D6D169, 0x40)]
        public class SetGlobalLodBiasEventResource : TimedEventResource
        {
            float LodDistanceScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x829359324D409732, 0x38)]
        public class SetInstigatorFlagAction : EntityAction
        {
            Ref<InstigatorFlagResource> InstigatorFlagResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x879537E1B2CFFE28, 0x48)]
        public class SetIntPropertyAction : EntityAction
        {
            String PropertyName;
            IntPropertyLink Property;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC8B20678746EC4E, 0x40)]
        public class SetIntegerFactAction : EntityAction
        {
            Ref<IntegerFact> Fact;
            int Value;
            bool Global;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x338B6F9B338DA771, 0x40)]
        public class SetMoverAction : EntityAction
        {
            Ref<MoverResource> Mover;
            EMoverActionParentLinking ParentLinking;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD56E2D065711222, 0xA0)]
        public class SetPartsLocalOffsetAction : EntityAction
        {
            Array<Ref<DestructibilityPart>> Parts;
            bool ActOnCurrentPart;
            Mat44 Matrix;
            Ref<RandomMatrixResourceBase> RandomMatrix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5045A409CA27C670, 0x58)]
        public class SetPathHelperNodeAction : EntityAction
        {
            Ref<PathHelperNodeComponentResource> ComponentResource;
            String Name;
            Ref<PathResource> PathResource;
            float Speed;
            float AccelerationTime;
            bool Looping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x29E792B7AB9C8FA0, 0x38)]
        public class SetPoseDeformerPropertiesAction : EntityAction
        {
            float WorldMotionLimitMultiplier;
            float WorldMotionInfluenceMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58C57D6F96585D3E, 0x40)]
        public class SetScriptPropertyAction : EntityAction
        {
            String PropertyName;
            String PropertyValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x815E9E86726F9522, 0x68)]
        public class SetShaderVariableAction : EntityAction
        {
            Array<Ref<DestructibilityPart>> ConvertedParts;
            bool ActOnCurrentPart;
            String ShaderVariableID;
            float Value;
            FRange RandomValue;
            ERandomShaderVariableType Randomization;
            float BlendUnitsPerSecond;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A1308DB8A4893D0, 0x40)]
        public class SetShaderVariableFromDamageAction : EntityAction
        {
            String VariableName;
            Ref<CurveResource> ValuePerDamageCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19A58B137A07FECB, 0x38)]
        public class SetSpawnAreaEnabledAction : EntityAction
        {
            bool IsEnabled;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x421E9A2C8FFE3EF6, 0x48)]
        public class SetStringPropertyAction : EntityAction
        {
            String PropertyName;
            StringPropertyLink Property;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x38ACA7AB216AAF5A, 0x38)]
        public class SetSwitchStateAction : EntityAction
        {
            bool State;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BEE2BBD30A2521C, 0x58)]
        public class SetTemplateVariableEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB10A1BC45626BA68, 0x40)]
        public class SetTemplateVariableEventResource : EventResource
        {
            String Variable;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57DE0AD19A78EEFF, 0x60)]
        public class SetTimeOfDayEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C848F4BA715F248, 0x48)]
        public class SetTimeOfDayEventResouce : TimedEventResource
        {
            int Hour;
            int Minute;
            bool SetTimeOfDay;
            bool PauseTimeOfDay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7D1C3116E124950, 0x50)]
        public class SetVec3PropertyAction : EntityAction
        {
            String PropertyName;
            Vec3PropertyLink Property;
            Vec3 Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD39B4B333ABA6E79, 0x38)]
        public class SetVisibilityAction : EntityAction
        {
            bool Visible;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B9726B06CA61BEA, 0x58)]
        public class SetVolumeEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8E4C0C15B0FB8FF, 0x38)]
        public class SetVolumeEventResource : EventResource
        {
            float Volume;
            float Duration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE1C8904952BF6AF, 0x58)]
        public class SetWorldPositionPropertyAction : EntityAction
        {
            String PropertyName;
            WorldPositionPropertyLink Property;
            WorldPosition Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEABA9EF793191484, 0x40)]
        public class SeverityStatDisplayEntry : StatDisplayEntry
        {
            Ref<DamageSettings> DamageSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9391772857671AB, 0x68)]
        public class ShaderAnimationAction : EntityAction
        {
            Array<Ref<DestructibilityPart>> ConvertedParts;
            bool ActOnCurrentPart;
            String ShaderVariableID;
            Ref<CurveResource> ShaderAnimationCurve;
            bool IsLooping;
            float BlendUnitsPerSecond;
            bool AnimateInRealTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4AF2C370AAC1596A, 0x550)]
        public class ShaderDataDesc
        {
            ERenderPlatform RenderPlatform;
            EProgramTypeMask ProgramTypeMask;
            EShaderInstancingMode ShaderInstancingMode;
            ESRTCreationMode SRTCreationMode;
            int RenderTargetCount;
            Array<SRTEntry> SRTEntries;
            Array<VertexStreamBindingDesc> VertexStreamBindingsDescs;
            Array<StreamOutDesc> StreamOutDescs;
            EProgramTypeMask FunctionShaderTableProgramTypeMask;
            ShaderResourceValidationSet ValidationFlags;
            Array<uint32> UsedComputeBindings;
            Array<uint32> UsedGeometryBindings;
            Array<uint32> UsedVertexBindings;
            Array<uint32> UsedPixelBindings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1377902FA471CD4, 0x30)]
        public class ShaderFromFileResource : ShaderResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x832F091C38ED5E7C, 0x38)]
        public class ShaderFromGraphResource : ShaderResource
        {
            EComputeThreadDistribution ThreadDistribuation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DA05DAED1D3A692, 0x20)]
        public class ShaderProgramResourceSet
        {
            uint128 Buffers;
            uint16 CBuffers;
            uint16 Samplers;
            uint16 RWBuffers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D2EE6C0D0D06791, 0x30)]
        public partial class ShaderResource : Resource, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5A3C77C8C860D1, 0x480)]
        public class ShaderResourceValidationSet
        {
            //ShaderProgramResourceSet_36<ShaderProgramResourceSet> ResourceSet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2A3A244CBB8033F, 0x8)]
        public class ShaderSamplerBinding
        {
            uint32 BindingNameHash;
            HwSamplerData SamplerData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2708527D470A1428, 0x18)]
        public class ShaderTextureBinding
        {
            uint32 BindingNameHash;
            uint32 BindingSwizzleNameHash;
            uint32 SamplerNameHash;
            uint32 PackedData;
            Ref<Resource> TextureResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9BC388938FC94E6, 0x20)]
        public class ShaderVariableBinding
        {
            uint32 BindingNameHash;
            uint32 VariableIDHash;
            EShaderVariableType VariableType;
            uint32 VariableData0;
            uint32 VariableData1;
            uint32 VariableData2;
            uint32 VariableData3;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF785F8F8F2AC45B6, 0x70)]
        public class ShaderVariableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x91E9203115FFA9C7, 0x80)]
        public class ShaderVariableComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9083B428DCA2DB47, 0x30)]
        public class ShaderVariableComponentResource : EntityComponentResource
        {
            Ref<GraphProgramResource> GraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD7C8C7CCC247272, 0x88)]
        public class ShakeResource : Resource
        {
            float Duration;
            bool LoopingMode;
            ELocationType LocationType;
            float MinDistance;
            float MaxDistance;
            Ref<CurveResource> DistanceIntensityCurve;
            Ref<CurveResource> DirectionDotProductIntensityCurve;
            Ref<CurveResource> LifetimeIntensityCurve;
            float PositionMultiplier;
            float AngularMultiplier;
            float TimeMultiplier;
            Array<Ref<ObjectAttributeAnimatorResource>> Animators;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA90726A941372A93, 0x30)]
        public class Shape2D
        {
            Array<Vec2Pack> Points;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7766D39511088450, 0x40)]
        public class Shape2DExtrusion : Shape2D
        {
            float Height;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40EDC9A08B3535DC, 0x20)]
        public class SharedObjectiveSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1F27DF70D3151FC, 0x60)]
        public class SharedPositionLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D9EF04FE8009F85, 0x40)]
        public class SharedPositionLocatorResource : LocatorResource
        {
            Ref<SharedPositionVariable> Variable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70F4B4C2F50559A3, 0x70)]
        public class SharedPositionVariable : Resource
        {
            WorldTransform WorldMatrix;
            bool RelativeToSequence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x232AFE8457D7C4DC, 0xB0)]
        public class ShieldComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x43B6314B511706E4, 0xE0)]
        public class ShieldComponentResource : EntityComponentResource
        {
            float Health;
            float VeryEasyHealthModifier;
            float EasyHealthModifier;
            float MediumHealthModifier;
            float HardHealthModifier;
            float VeryHardHealthModifier;
            float ImpossibleHealthModifier;
            float Delay;
            float Speed;
            float MaxSpeed;
            float Acceleration;
            float SeverityFactor;
            bool RemoveOnDepletion;
            float DepletionCooldownDuration;
            Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
            Array<Ref<DamageTypeResource>> ExcludedDamageTypes;
            Array<DamageTypeMultiplier> DamageTypeMultipliers;
            Array<Ref<AttackEventTag>> DamageOnDepletionAttackEventTags;
            String EnabledShaderVariableName;
            String HealthFactorShaderVariableName;
            String CooldownFactorShaderVariableName;
            Ref<BooleanFact> ActiveFact;
            Ref<FloatFact> HealthFact;
            Ref<IntegerFact> DisabledGameTimeFact;
            Ref<IntegerFact> LastDamageGameTimeFact;
            Ref<FloatFact> RegenerationSpeedFact;
            Ref<IntegerFact> LastRegenerationGameTimeFact;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x803FA437F1A8FD76, 0x520)]
        public class ShotGunEjector : BulletEjector
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E476E0505FA36EF, 0x300)]
        public class ShotGunEjectorResource : BulletEjectorResource
        {
            int NumberOfPellets;
            float HorizontalPelletSpread;
            float VerticalPelletSpread;
            Ref<CurveResource> SpreadCurve;
            bool OnlyDamageOncePerBurst;
            MaterialType AlternateBulletMaterialType;
            int AlternateBulletMaterialTypeCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3BC837314311BFE8, 0x38)]
        public class ShowHUDAction : EntityAction
        {
            Ref<HUDElementResource> HUDElementResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDE0FF0894BFCBEA, 0x58)]
        public class ShowHUDOverlayEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7FC6E0D0A404B50, 0x48)]
        public class ShowHUDOverlayEventResource : TimedEventResource
        {
            String HUDElement;
            Ref<UITexture> UITexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E40E3C45DBB43B2, 0x3E0)]
        public class SignalGrenade : Throwable
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4EAB698FD1C6452, 0x230)]
        public class SignalGrenadeResource : ThrowableResource
        {
            Ref<EffectComponentResource> SmokeEffectComponent;
            Ref<DamageAreaResource> DamageArea;
            float DetonateTime;
            float SmokeTime;
            String SmokeMessageId;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE2F2F5F6416E3243, 0x78)]
        public class SimpleAnimatedEntityEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70CA02AB7F95D3F1, 0x58)]
        public class SimpleAnimatedEntityEventResource : ScaleableTimedEventResource
        {
            Ref<EntityActorResource> EntityActorResource;
            Ref<SkeletonAnimationResource> AnimationResource;
            ERootBoneMode RootBoneMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD3A21997D7484EF, 0x48)]
        public class SimpleAnimatedKeyframe
        {
            int Frame;
            WorldTransform WorldTransform;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BD559772E69062A, 0xE8)]
        public class SimpleAnimatedLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x223AACCB41897578, 0x50)]
        public class SimpleAnimatedLocatorResource : LocatorResource
        {
            Ref<LocatorResource> ParentLocator;
            Array<SimpleAnimatedKeyframe> LocatorKeyframes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1386CF6249CD780E, 0x2C0)]
        public class SimpleAnimatingSkinnedMeshInstance : SkinnedMeshInstance
        {
            Ref<SkeletonAnimationResource> DefaultAnimation;
            Ref<PoseDeformerResource> PoseDeformer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A63811AE9E10A4F, 0x70)]
        public class SimpleAnimationItemOverrideComponent : ItemOverrideComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68CA403693114837, 0x50)]
        public class SimpleAnimationItemOverrideComponentResource : ItemOverrideComponentResource
        {
            String AnimationControlParameter;
            String AbortAnimationControlParameter;
            String AnimationTag;
            String ItemIDAnimationVariableName;
            bool ReplicateControlParameterToChildAnimationNetwork;
            bool FullOverride;
            bool ImmediateOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA20D9FF62C31688, 0x170)]
        public class SimpleGeneratedMesh : GeometryObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40AB964F45509C64, 0x78)]
        public class SimpleParticleSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2AB0D16DE1CFE77, 0x70)]
        public class SimpleParticleSystemResource : Resource
        {
            Vec3 SpawnOffset;
            float ParticlesPerSecond;
            float ParticleRadius;
            float CoreCollisionRadius;
            Ref<CurveResource> ParticleGrowthCurve;
            float LifeTime;
            float LifeTimeAfterCollision;
            float ExitVelocity;
            float ParticleSpread;
            float GravityInfluence;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B826F7B7191530C, 0xE8)]
        public class SimplePathMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62200A3EB3C5D482, 0x30)]
        public class SimplePathMoverResource : MoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF339FECBEE432A7E, 0x50)]
        public class SimplePolygon
        {
            Array<Vec3Pack> Points;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x180CEF29ED81C7E5, 0x210)]
        public class SimpleSoundInstance : SoundInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1207AD12ADF8E7ED, 0x100)]
        public class SimpleSoundResource : SoundResource
        {
            Ref<WaveResource> Wave;
            bool ProximityRadio;
            bool ShouldAlsoPanToCenter;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF071DFC11C33E1F0, 0x38)]
        public class SimpleStatModifierResource : StatModifierResource
        {
            EModifiableStat ModifiedStat;
            Ref<CurveResource> RatingToValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7289D0B501DEF01, 0x80)]
        public class Skeleton : Resource
        {
            Array<Joint> Joints;
            HashMap<String_int> JointNameToIndexMap;
            Array<SkeletonAnimChannel> AnimationChannels;
            HashMap<String_int> AnimChannelNameToHandleMap;
            uint32 SkeletonLayoutHash;
            uint32 SkeletonChannelLayoutHash;
            Array<uint8> EdgeAnimSkeleton;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1AE45EB04AFF5FE, 0x8)]
        public class SkeletonAnimChannel
        {
            String AnimChannelName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83C802AE207FAC4B, 0x50)]
        public class SkeletonAnimationResource : ResourceWithoutLegacyName
        {
            Ref<Skeleton> Skeleton;
            Array<uint8> EdgeAnimAnimation;
            float Duration;
            ELoopMode LoopMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5783A47975078DCB, 0x58)]
        public class SkeletonHelpers : Resource
        {
            Array<OrientationHelper> Helpers;
            Array<uint> NameHashes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC388D632C2C36510, 0x70)]
        public class SkeletonHelpersComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF87F289C0B963979, 0x48)]
        public class SkeletonHelpersComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D348E881626DA9C, 0x50)]
        public class SkeletonHelpersComponentResource : EntityComponentResource
        {
            String LocationProviderID;
            bool MustHaveModel;
            Ref<Skeleton> Skeleton;
            Array<Ref<SkeletonHelpers>> Helpers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA17A6430CA0883AF, 0x10)]
        public class SkeletonTargetDesc
        {
            String TargetName;
            Ref<Skeleton> Skeleton;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3711AB01A537FD08, 0x20)]
        public class SkeletonTargetLink
        {
            SkeletonTargetDesc Target;
            String ParentTarget;
            String ParentLink;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42CE14CBA473D76E, 0x38)]
        public class SkeletonTargetTree : CoreObject
        {
            String Name;
            Array<SkeletonTargetLink> Tree;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x172934AD09285313, 0x14)]
        public class SkinMaterial
        {
            FRGBColor TranslucencyColor;
            float ForwardSpecularWeight;
            float CubemapRoughnessMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34C9A16E39BAE01F, 0x68)]
        public class SkinnableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6CD9BA7393C20E4F, 0x40)]
        public class SkinnableComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3260286A5C95732, 0x30)]
        public class SkinnableComponentResource : EntityComponentResource
        {
            String TextureBindingName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33885CF170B7D2C, 0x60)]
        public class SkinnedMeshBoneBindings : BaseResource
        {
            Array<String> BoneNames;
            Array<uint16> JointIndexList;
            Array<Mat44> InverseBindMatrices;
            MurmurHashValue DataHash;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x13C80F973C99A5E2, 0x48)]
        public class SkinnedMeshBoneBoundingBoxes : BaseResource
        {
            Array<BoundingBox3> BoneBoundingBoxes;
            Array<uint16> Indices;
            bool UsesIndices;
            bool Initialized;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x88BB43B0CFD14FA2, 0x280)]
        public class SkinnedMeshInstance : GeometryObject
        {
            String Name;
            Ref<MeshResourceBase> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5B5C4D610891564, 0x90)]
        public class SkinnedMeshResource : MeshResourceBase
        {
            Ref<Skeleton> Skeleton;
            Ref<SkeletonHelpers> OrientationHelpers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA89315959DF4E322, 0x370)]
        public class SkinnedModel : Model
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6DD45001EE9528D0, 0xC)]
        public class SkinnedModelLOD
        {
            float Distance;
            bool DisableHipsIK;
            bool DisableTerrainPredictionFootIK;
            bool DisableHeadIK;
            bool DisablePoseDeformer;
            bool DisableForceFields;
            bool LowDetailTerrainDetection;
            bool DisableAnimationManagerOnExternalAnimation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBB3F2CCF38951A72, 0x10)]
        public class SkinnedModelPBDTeleportSettings
        {
            String JointName;
            float MaxPositionDelta;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACAF13FFAD18AF5F, 0x2E0)]
        public class SkinnedModelRep : ModelRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D5A13C6B1CD1C2E, 0x140)]
        public class SkinnedModelResource : ModelResource
        {
            Ref<Skeleton> Skeleton;
            Array<SkinnedModelLOD> LODs;
            bool DisableCollision;
            bool UpdateEntityWhilePlayingAnimation;
            Ref<AbilityAnimationResource> AbilityAnimationResource;
            Ref<AbilitySimpleAnimationResource> AbilitySimpleAnimation;
            Array<Ref<AbilityResource>> AbilityResources;
            Pose InitialPose;
            BoundingBox3 InitialPoseBounds;
            Ref<Skeleton> InitialRepresentationSkeleton;
            Array<SkinnedModelPBDTeleportSettings> PBDTeleportSettings;
            Ref<MotionTableResource> MotionTableResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4599C370ADA6912F, 0x30)]
        public class SkinnedPoint
        {
            Vec3 Point;
            int UserIndex;
            float Weight0;
            float Weight1;
            float Weight2;
            uint16 BoneIndex0;
            uint16 BoneIndex1;
            uint16 BoneIndex2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC148CE5C19C0C2F8, 0x38)]
        public class SkinnedPointsResource : BaseResource
        {
            Array<SkinnedPoint> Points;
            Ref<Skeleton> Skeleton;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC50D295F91EC15, 0x68)]
        public class SkipSequenceEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23608681E8E8C9C1, 0x40)]
        public class SkipSequenceEventResource : TimedEventResource
        {
            ESkipBehavior SkipBehavior;
            bool SkipConfirmationRequired;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53713C114170D776, 0xC0)]
        public class SlideThroughWorldMover : Mover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5278D262ABB9BFAE, 0x90)]
        public class SlideThroughWorldMoverJoystickControllerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA1BF0CA107E7D0C, 0x38)]
        public class SlideThroughWorldMoverJoystickControllerComponentResource : EntityComponentResource
        {
            float MaxSpeed;
            int SpeedSteps;
            bool AllowPreviousEntityControl;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1AB4A8B035EB9E55, 0x60)]
        public class SlideThroughWorldMoverResource : MoverResource
        {
            float MaxSlopeAngle;
            float MaxStepHeight;
            float Gravity;
            Vec3 JumpVelocity;
            bool KeepOrientationWhenJumping;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7404F6379D2D863C, 0xE8)]
        public class SliderTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0CF4AF6124F74D5, 0x180)]
        public class SliderWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9B38D7454331E2F0, 0x70)]
        public class SlowMotionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6155F8F3D7F1582C, 0x30)]
        public class SlowMotionComponentResource : EntityComponentResource
        {
            Ref<GraphProgramResource> UpdateGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5720F165D74D511, 0x60)]
        public class SlowMotionEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBC4083B0D246F0E, 0x48)]
        public class SlowMotionEventResource : TimedEventResource
        {
            float TimeScale;
            float CameraTimeScale;
            float BlendInTransitionTime;
            float BlendOutTransitionTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7CB9157A72A4C880, 0x38)]
        public class SlowMotionSettingResource : Resource
        {
            float TimeScale;
            float CameraTimeScale;
            float BlendInTime;
            float BlendOutTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5A329BCE88C913E, 0xF0)]
        public class SmartObjectArea : NavMeshArea
        {
            Ref<AIMarker> CenterMarker;
            Ref<GraphSoundResource> AreaSound;
            Vec3 SoundOffset;
            SoundShape SoundShape;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8941B1CE9D26EEF1, 0xC8)]
        public class SmartObjectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD236DAB1C71060A, 0x78)]
        public class SmartObjectComponentResource : EntityComponentResource
        {
            float Radius;
            Array<Ptr<SmartObjectDesireInfluence>> DesireInfluences;
            float UseTime;
            float CooldownTime;
            TagPropertyLinkCollection RequiredTags;
            TagPropertyLinkCollection DisallowedTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFADE3EE0217861CB, 0x30)]
        public class SmartObjectDesire : Resource
        {
            bool IsInvisibleActivity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2E4EC7A7A1F804C4, 0x88)]
        public class SmartObjectDesireComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB794E6EA5E3FEED, 0x38)]
        public class SmartObjectDesireComponentResource : EntityComponentResource
        {
            Array<SmartObjectDesireSetting> Desires;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF5A2BE94A79CAAC, 0x30)]
        public class SmartObjectDesireInfluence : CoreObject
        {
            Ref<SmartObjectDesire> Desire;
            float InfluenceValue;
            bool IsSideDesire;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2FBDBDDE4129A94E, 0x18)]
        public class SmartObjectDesireSetting
        {
            Ref<SmartObjectDesire> Desire;
            float TimeUntilDesired;
            bool RemoveAfterSatisfaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BE10575B07805A5, 0x68)]
        public class SmartObjectQueueComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5633F93AEA2B361B, 0x28)]
        public class SmartObjectQueueComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC9460BB4964EAFB9, 0x60)]
        public class SmartObjectTimedInteractionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F28B8DC21BCDAF2, 0x30)]
        public class SmartObjectTimedInteractionComponentResource : EntityComponentResource
        {
            float AnimationDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x686BBF10840E0FD7, 0x70)]
        public class SmartObjectUsageArbiterComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A3E2E35C8A1EE47, 0x30)]
        public class SmartObjectUsageArbiterComponentResource : EntityComponentResource
        {
            float ReserveTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AB590ED366CCD61, 0x108)]
        public class SmoothAimLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD0531D7113C06228, 0x80)]
        public class SmoothAimLocatorResource : LocatorResource
        {
            Ref<LocatorResource> AimTargetLocator;
            Ref<LocatorResource> PositionLocator;
            FRect HardLimits;
            FRect SoftLimits;
            IRange MinMaxDelayFrames;
            float SoftLimitsCompensationFactorMax;
            float SoftLimitsCompensationFactorIncrement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x661A6B4EF0A78175, 0x48)]
        public class SmoothedSoundState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x149EFD3B367C406, 0x58)]
        public class SnowClearEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC519FE5A370D92F5, 0x38)]
        public class SnowClearEventResource : TimedEventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE3A2BCFD6A3FD42B, 0xD0)]
        public class SnowDetectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD51BEDBA0F9FED6A, 0x38)]
        public class SnowDetectionComponentResource : EntityComponentResource
        {
            String SnowDepthAnimationVariableName;
            float MaxValidBelowTerrainSampleDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEBD64E47EAFEECA, 0x58)]
        public class SnowInteractionDisablerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D612E5CF6FBE2D2, 0x30)]
        public class SnowInteractionDisablerComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB264A8512D8FC807, 0x28)]
        public class SnowInteractionDisablerComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9AF609E8318BB0A, 0x60)]
        public class SnowInteractionPositionEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD84399F09FD8D4AB, 0x40)]
        public class SnowInteractionPositionEventResource : TimedEventResource
        {
            Ref<LocatorResource> OverridePosition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58A3A8ACE5F5DF4, 0x60)]
        public class SnowInteractionSettings : CoreObject
        {
            float MaxSnowDepth;
            float TemporalFilterFactor;
            float SnowRefill;
            int WorldSize;
            float InteractionAreaFactor;
            int MaxNumObjects;
            float PixelJitterFactor;
            float NonUniformExponent;
            Array<ActiveSnowInteractionRegion> ActiveWorldRegions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x645E95E67F9FB99D, 0x58)]
        public class SocketedModificationItemRestoreState : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFAD61D654F166B52, 0x910)]
        public class Soldier : Humanoid
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99B2E6C77557257A, 0x310)]
        public class SoldierAIController : SoldierController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA112D232C9E9C94F, 0x230)]
        public class SoldierController : HumanoidController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2715C1FBDA57F254, 0x600)]
        public class SoldierJoystickController : SoldierController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2936603BE33B0E0, 0x530)]
        public class SoldierRep : HumanoidRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB23C23725A6DAFB, 0x6D0)]
        public class SoldierResource : HumanoidResource
        {
            Ref<InventoryReviveAbilityResource> AutoReviveResource;
            float MinHealthAfterRespawn;
            Ref<CurveResource> LookAtSpeedCurveResource;
            float LookAtSpeedFallOffAngle;
            float LookAtJoystickResistanceThreshold;
            Ref<SoundResource> HealthLowSound;
            float HealthSoundTriggerValue;
            Ref<FirstPersonHitEffectsResource> FirstPersonBulletWhizzEffects;
            Ref<JoystickInputModifierResource> JoystickInputModifierResource;
            float GunLowerDistance;
            Ref<AnimatedScreenEffectResource> FlashScreenEffectResource;
            HUDEffectSettings SprintEffect;
            float SpawnInvulnerabilityTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B52EC195CECCFC4, 0x238)]
        public class SoldierSpawnInfo : HumanoidSpawnInfo
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2FAEFBCD7C0E951B, 0x180)]
        public class SonicStunComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE12C5E7EEC14CE2E, 0x30)]
        public class SonicStunComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96219C9336E3988C, 0x48)]
        public class SonicStunComponentResource : EntityComponentResource
        {
            MaterialType MaterialType;
            float StartRadius;
            float ConeAngle;
            Array<Ref<DamageSettings>> DamageSettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE27729D271FFEC58, 0x78)]
        public class SortedEvent : RTTIRefObject
        {
            int GroupIndex;
            bool Participate;
            Ref<EventResource> EventResource;
            GGUUID OriginalUUID;
            Array<Ptr<SortedEvent>> DependentOn;
            Array<Ptr<SortedEvent>> DependentBy;
            Array<Ptr<SortedEvent>> DependentByHideEvents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58333E1A58CC01A, 0x98)]
        public class SoundComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2437FBC297E0DCA, 0x50)]
        public class SoundComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4E500182CA939FD, 0x48)]
        public class SoundComponentResource : EntityComponentResource
        {
            Array<SoundParameterPODVariant> ConstantSoundParameters;
            Array<SoundParameterPODVariant> ImpactSoundParameters;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4346DF5BB1950013, 0x88)]
        public class SoundEnvironment : WorldEnvironment
        {
            Array<Ref<EnvironmentSound>> Sounds;
            float SoundSpawnThreshold;
            float SoundSpawnInterval;
            float SoundSpawnCountFactor;
            float MaxSoundsPerSpawnPoint;
            Ref<GraphProgramResource> SoundSpawnLogic;
            Array<IRange> SpawnPointRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB9F379E932DCBAE, 0x58)]
        public class SoundEventInstance : AudioEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10D7713CF573FD50, 0x60)]
        public class SoundEventResource : AudioEventResource
        {
            Ref<SoundResource> SoundResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA272CC76032E44E9, 0x10)]
        public class SoundFilterParameters
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9B57066F3030739, 0x28)]
        public class SoundGroup
        {
            ESoundMasterVolumeGroup Group;
            bool PauseWhenGameIsPaused;
            int Priority;
            int InstanceLimit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B411A82B8EDAA47, 0x2C8)]
        public class SoundGroupSettingsResource : Resource
        {
            Array<SoundGroup> GroupPriorities;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8D802DFF17C04F6A, 0x200)]
        public class SoundInstance : SoundInstanceBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BC84AF3C51426DA, 0x120)]
        public class SoundInstanceBase : WorldNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2809551D3FAC570F, 0xF0)]
        public class SoundListener : WorldNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3C4DDDA269C55302, 0x70)]
        public class SoundListenerOverrideEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB43B1C00214E16DF, 0x40)]
        public class SoundListenerOverrideEventResource : TimedEventResource
        {
            Ref<LocatorResource> PositionLocatorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1AF2A0F37D36B193, 0x4670)]
        public class SoundManager : ObjectManager
        {
            bool NoSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x999D64F52DC440C3, 0x280)]
        public class SoundMasterBusResource : SubmixResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x910E0851ABBC4785, 0x158)]
        public class SoundMasterParametersResource : Resource
        {
            bool Default;
            float PreAmpGain;
            float Gain;
            float OutputGain_LfeGain;
            ESoundFilterMode Band1Mode;
            float Band1Gain;
            float Band1Frequency;
            float Band1QValue;
            ESoundFilterMode Band2Mode;
            float Band2Gain;
            float Band2Frequency;
            float Band2QValue;
            ESoundFilterMode Band3Mode;
            float Band3Gain;
            float Band3Frequency;
            float Band3QValue;
            ESoundFilterMode Band4Mode;
            float Band4Gain;
            float Band4Frequency;
            float Band4QValue;
            bool Enabled;
            float LookAheadInMs;
            Ref<CompressorConfigurationSet> CompressorBand1;
            float CrossOverFrequencyBand1Band2;
            Ref<CompressorConfigurationSet> CompressorBand2;
            float CrossOverFrequencyBand2Band3;
            Ref<CompressorConfigurationSet> CompressorBand3;
            float CrossOverFrequencyBand3Band4;
            Ref<CompressorConfigurationSet> CompressorBand4;
            bool UltraMaximizerEnabled;
            bool UltraMaximizerAutoRelease;
            float UltraMaximizerThresholdInDb;
            float UltraMaximizerOutputCeilingInDb;
            float UltraMaximizerReleaseTimeInMs;
            float UltraMaximizerLfeThresholdInDb;
            float UltraMaximizerLfeOutputCeilingInDb;
            float UltraMaximizerLfeReleaseTimeInMs;
            bool EqualizerEnabled;
            float EqualizerGain1;
            float EqualizerGain2;
            float EqualizerGain3;
            float EqualizerGain4;
            float EqualizerGain5;
            float EqualizerGain6;
            float EqualizerGain7;
            float EqualizerGain8;
            float EqualizerGain9;
            float EqualizerGain10;
            float EqualizerGain11;
            float EqualizerGain12;
            float EqualizerGain13;
            float EqualizerGain14;
            float EqualizerGain15;
            float EqualizerGain16;
            float EqualizerGain17;
            float EqualizerGain18;
            float EqualizerGain19;
            float EqualizerGain20;
            float EqualizerGain21;
            float EqualizerGain22;
            float EqualizerGain23;
            float EqualizerGain24;
            float CenterGain;
            float LeftFrontGain;
            float LeftSurroundGain;
            float LeftBackSurroundGain;
            float RightBackSurroundGain;
            float RightSurroundGain;
            float RightFrontGain;
            float SpeakerGains_LfeGain;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65AA7E40FA4EE5A7, 0x58)]
        public class SoundMixEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x706B775A451BD826, 0x48)]
        public class SoundMixEventResource : TimedEventResource
        {
            Ref<SoundMixResource> SoundMix;
            float FadeInTime;
            float FadeOutTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EAB42946C3588F3, 0x8)]
        public class SoundMixFader
        {
            ESoundMasterVolumeGroup Group;
            float Gain;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61FBC879FDB6AB66, 0x38)]
        public class SoundMixResource : Resource
        {
            Array<SoundMixFader> Faders;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x15A2BB7887164CCA, 0x30)]
        public class SoundMixStateActivateRequest : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF85FCA50D3CFE649, 0x60)]
        public class SoundMixStateEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9DA4CE3A3485846, 0x40)]
        public class SoundMixStateEventResource : TimedEventResource
        {
            Ref<SoundMixStateResource> SoundMixState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x524CE93ED8B7E592, 0xF90)]
        public class SoundMixStateManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x833B531A77302828, 0x50)]
        public class SoundMixStateResource : Resource
        {
            Ref<RelativeSoundMixResource> RelativeMix;
            Array<Ref<SubmixPresetResource>> SubmixPresets;
            float AttackTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C990B89CB43890, 0x280)]
        public class SoundPadSpeakerMasterBusResource : SubmixResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD7FA385E6881250, 0x40)]
        public class SoundPadSpeakerMasterParametersResource : Resource
        {
            float Gain;
            float MixedToMainOutputGain;
            bool UltraMaximizerEnabled;
            bool UltraMaximizerAutoRelease;
            float UltraMaximizerThresholdInDb;
            float UltraMaximizerOutputCeilingInDb;
            float UltraMaximizerReleaseTimeInMs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74746FE0E251B23A, 0x10)]
        public class SoundParameterPODVariant
        {
            String SoundParameterName;
            PODVariant Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34AAC502DC844CE0, 0x108)]
        public class SoundProgramContext
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37F25E537618CCA0, 0xF0)]
        public class SoundResource : Resource
        {
            float DefaultVolume;
            float DefaultLfeVolume;
            float DefaultAngle;
            float DefaultFrequencyFactor;
            SoundShape Shape;
            float WetLevel;
            float MinDist;
            float PressureLevel;
            float AttenuationLinearity;
            float AttenuationSlope;
            ESoundMasterVolumeGroup MasterVolumeGroup;
            bool DefaultLooping;
            bool UsesHDRSystem;
            bool UsesRaycast;
            bool AffectedByTimeScale;
            ESoundInstanceLimitMode InstanceLimitMode;
            uint8 InstanceLimit;
            float InitialRMS;
            float WetMinRange;
            float WetMaxRange;
            float WetLevelBias;
            float PanModificationDistance;
            float OcclusionFactor;
            float ObstructionFactor;
            float DopplerFactor;
            float MaxAzimuthDelta;
            float MaxDist;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA133C6E1AB9B1276, 0x20)]
        public class SoundShape
        {
            Vec3 BoxSize;
            float ConeInnerAngle;
            float ConeOuterAngle;
            float ConeOuterGainMultiplier;
            float SphereRadius;
            ESoundShape ShapeType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A09F0848187A02B, 0x78)]
        public class SoundSystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB1945F95504E245, 0x38)]
        public class SoundSystemGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9558A0386EA2885, 0x110)]
        public class SoundSystemSettings : Resource
        {
            float SoundMixFadeTime;
            float ElevationFactor;
            float ElevationFactorForAmbisonics;
            float OcclusionVolumeFactor;
            float OcclusionStrength;
            float ObstructionVolumeFactor;
            float ObstructionStrength;
            float SmallInstanceObstructionBoost;
            float SmallInstanceObstructionBoostSlope;
            float HighpassMinCutoffFrequency;
            float HighpassMaxCutoffFrequency;
            float HighpassFilterQValue;
            float HighpassFilterGain;
            float HighpassMinDistance;
            float HighpassMaxDistance;
            float DopplerFactor;
            float WallProximityMaxDistance;
            float ProximityRadioActivationDistancePercent;
            float ProximityRadioActivationFadeTime;
            float RadioFilterCenterFrequency;
            float RadioFilterBandwidth;
            float RadioDistortionDrive;
            float MasterVolumeSFX;
            float MasterVolumeMusic;
            float MasterVolumeSpeech;
            float MasterVolumeFMV;
            float HDRWindowRange;
            float HDRWindowCompressor;
            float HDRWindowAttackTime;
            float HDRWindowReleaseTime;
            float HDRSoundLowRMSThreshold;
            int AudibleSoundInstanceLimit;
            int DynamicAudibleInstanceLimitMin;
            float MaxDynamicBrbLoad;
            float MinimumAmbientFadeTime;
            float DefaultAmbientFadeTime;
            int FrontLeftSpeakerAngle;
            int FrontRightSpeakerAngle;
            int SideLeftSpeakerAngle;
            int SideRightSpeakerAngle;
            int BackLeftSpeakerAngle;
            int BackRightSpeakerAngle;
            float DialogReverbOutputGain;
            float DialogReverbSendGain;
            Ref<ReverbPresetResource> DialogReverbDefaultPreset;
            float OcclusionFilter_MinFrequency;
            float OcclusionFilter_MaxFrequency;
            float OcclusionFilter_MinGain;
            float OcclusionFilter_MaxGain;
            float OcclusionFilter_Slope;
            float ObstructionFilter_MinFrequency;
            float ObstructionFilter_MaxFrequency;
            float ObstructionFilter_MinGain;
            float ObstructionFilter_MaxGain;
            float ObstructionFilter_Slope;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE82650396659496B, 0x58)]
        public class SoundZoneDeactivationEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAE3AC966A1A71B9, 0x48)]
        public class SoundZoneDeactivationEventResource : TimedEventResource
        {
            Ref<SoundZoneResource> SoundZoneResource;
            bool KeepDeactivated;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD574C33449C48A9C, 0x90)]
        public class SoundZoneInstance : WorldNode
        {
            Ref<SoundZoneResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54D5DCC3D873A05B, 0xE0)]
        public class SoundZoneResource : Resource
        {
            int Priority;
            ESoundZoneShapeType ShapeType;
            bool Is3D;
            bool Active;
            bool OverridesDistances;
            bool RetriggerOnEnter;
            float SoundInstanceGain;
            float RelativeSoundPressure;
            bool AutoSizeZoneInstance;
            bool OverrideAttenuationLinearity;
            bool OverridePanModDistance;
            bool OverrideMinDistance;
            float SoundAttenuationLinearity;
            float SoundPanModDistance;
            float SoundMinDistance;
            Ref<SoundResource> Sound;
            float InsideAngle;
            float OutsideAngle;
            float OutsideGain;
            Vec3 InnerBoundsMax;
            Vec3 InnerBoundsMin;
            float InnerFraction;
            String AmbientStreamName;
            float AmbientStreamGain;
            Ref<ReverbPresetResource> ReverbPreset;
            float ReverbGain;
            String MusicPresetName;
            Ref<SoundMixResource> SoundMix;
            Ref<SubmixPresetResource> SubmixPreset;
            Ref<ReverbPresetResource> DialogReverbPreset;
            bool OverrideInsideness;
            bool IsInside;
            RGBAColor DrawColor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x417A4CD8341ABAC7, 0x40)]
        public class SparseSoundMixResource : SoundMixResource
        {
            Ref<SoundMixResource> ParentMix;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D86EEEFDA3A0BC0, 0x60)]
        public class SpawnAppearancePosition : WorldNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4AA98C41FB73085, 0x530)]
        public class SpawnArea : ControlledEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB16C6E5F8613DE17, 0x228)]
        public class SpawnAreaResource : ControlledEntityResource
        {
            bool IsEnabled;
            bool EnableSpawning;
            bool CanChangeFaction;
            bool IsBaseCampArea;
            Ref<CameraEntityResource> CameraEntityResource;
            Ref<EntityAction> SpawnAction;
            float CamDistance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77BDB80E63B758B1, 0x60)]
        public class SpawnCommand : WorldNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF77D7A75F26D6C15, 0x20)]
        public class SpawnFactOverride
        {
            UUIDRef<WorldNode> SpawnSource;
            Array<Ref<FactValue>> FactValues;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD3725F42A39347A4, 0xC0)]
        public class SpawnSetup : SpawnSetupConcrete
        {
            Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
            Ref<InventoryCollection> InventoryInitialItemsCollection;
            Ref<AIIndividualResource> AIIndividualResource;
            Ref<HumanoidBodyVariantInterface> BodyVariant;
            Ref<PropertyContainerResource> PropertyContainerResource;
            Ref<AIPropertyFactComponentResource> AIPropertyFactComponentResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4D27E41BF9D92D6F, 0x28)]
        public class SpawnSetupBase : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8C0776969A4FF37E, 0x68)]
        public class SpawnSetupComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E4322955A1385B3, 0x88)]
        public class SpawnSetupConcrete : SpawnSetupNonPlaceholder
        {
            Ref<EntityResource> EntityResource;
            Ref<GraphProgramResource> GraphProgramResource;
            Ref<AIFaction> AIFaction;
            Array<Ref<EntityComponentResource>> ExtraComponentResources;
            Array<Ref<FactValue>> Facts;
            ETriState Invulnerable;
            ETriState DieAtZeroHealth;
            int MaxHealth;
            Ref<DestructibilityState> InitialDestructibilityState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD00F2C3F0A240623, 0x48)]
        public class SpawnSetupGroup : SpawnSetupNonPlaceholder
        {
            Array<SpawnSetupLink> SpawnSetupList;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x31ACC16E1F0702FD, 0x10)]
        public class SpawnSetupLink
        {
            float Weight;
            Ref<SpawnSetupBase> SpawnSetup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76108279E7736291, 0x38)]
        public class SpawnSetupNonPlaceholder : SpawnSetupBase
        {
            Ref<ConditionResource> Condition;
            Ref<EntityImpostorResource> Impostor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10776C770C53A952, 0x30)]
        public class SpawnSetupOverride
        {
            UUIDRef<SpawnSetupPlaceholder> SpawnSetupPlaceholder;
            StreamingRef<SpawnSetupNonPlaceholder> SpawnSetupConcrete;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE21AFE1CFF74847D, 0x28)]
        public class SpawnSetupPlaceholder : SpawnSetupBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72A812D37D0AC3A4, 0x28)]
        public class SpawnSetupQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD72209E75E93592, 0x8)]
        public class SpawnSetupQuestTriggerInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D1B4D66CD47D9C1, 0x50)]
        public class SpawnSetupSequenceEntityVariable : SequenceEntityVariable
        {
            Ref<SpawnSetupNonPlaceholder> SpawnSetup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0A4AFFDD1ED15F4, 0xA8)]
        public class SpawnSetupSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF7F19299DA4B23A, 0x40)]
        public class SpawnSoundNodeStateInstance : StateObjectInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52953E9FA61BAA70, 0x20)]
        public class SpawnSoundNodeStateResource : StateObjectResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B3A8436B7A680E4, 0x28)]
        public class SpawnSourceQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD1CDC55E403EC3DA, 0x8)]
        public class SpawnSourceQuestTriggerInterface
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44CF9D1A90CCE51E, 0x1A0)]
        public class Spawnpoint : SpawnpointBase
        {
            EEntityImpostorType ImpostorType;
            Ref<AIRoad> ImpostorRoute;
            EEntityImpostorDirection ImpostorRouteDirection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40D2C85D85E2C7CA, 0x160)]
        public class SpawnpointBase : ParentWorldNode
        {
            String Name;
            Ref<SpawnSetupBase> SpawnSetup;
            Ref<EntityAction> InitialAction;
            Array<Ref<SpawnCommand>> SpawnCommands;
            EFactContextLifetime FactsLifetime;
            bool AutoSpawn;
            float Radius;
            float DespawnRadius;
            Array<Ref<EntityComponentResource>> ExtraComponents;
            Array<Ref<FactValue>> Facts;
            ESpawnpointNavmeshPlacmentType NavMeshPlacementType;
            FRange NavMeshPlacementRange;
            bool PrepareNavmeshForSpawn;
            Array<Ref<SpawnAppearancePosition>> AppearancePositions;
            bool PickAppearancePositionOutsidePlayerView;
            Ref<CurveResource> AppearancePositionScoreOverDistance;
            Ref<ConditionResource> SpawnCondition;
            Ref<GraphProgramResource> SceneScript;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9A67B7355712BB5, 0x1D0)]
        public class SpawnpointGame : Spawnpoint
        {
            Ref<NPCScheduleResource> ScheduleResource;
            Ref<EntityResource> StartSequenceNetwork;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBEBE7A8D95C8BD49, 0x70)]
        public class SpawnpointManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBD417998BDC88ABE, 0x68)]
        public class SpawnpointSequenceEntityVariable : SequenceEntityVariable
        {
            StreamingRef<Spawnpoint> Spawnpoint;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2DCCFB6AED8F643, 0x98)]
        public class SpawnpointSequenceEntityVariableInstance : SequenceEntityVariableInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7EFB587CCF6BBA59, 0x98)]
        public class SpeakEventInstance : PausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F7BAE28BB56499C, 0x58)]
        public class SpeakEventResource : PausableEventResource
        {
            Ref<LocatorResource> ControlledEntityActorResource;
            Ref<SentenceResource> SentenceResource;
            bool PausingEnabled;
            int BlendInNumFrames;
            int BlendOutNumFrames;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA2E8D9E25A8928B1, 0x500)]
        public class SpectatorCameraEntity : CameraEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2056517B9D7ED8B, 0x220)]
        public class SpectatorCameraEntityResource : CameraEntityResource
        {
            float HeadingSpeed;
            float StrafeSpeed;
            float VerticalSpeed;
            float PitchSpeed;
            float YawSpeed;
            FRange PitchRange;
            float YawRange;
            Vec3 FollowOffset;
            Ref<HUDResource> HUD;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x285A2B22006CD02E, 0xE0)]
        public class SpeechTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFE9A4DB9FD014A3A, 0x180)]
        public class SpeechWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5703A96D734146E, 0x60)]
        public class SpeedModifierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C6C2F943195563F, 0x38)]
        public class SpeedModifierComponentResource : EntityComponentResource
        {
            float MovementModifier;
            float PitchModifier;
            float HeadingModifier;
            bool SlowMoCompensationMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42C932E14894A748, 0x40)]
        public class SphereBasedActivationPolicy : EntityActivationPolicy
        {
            float ActivationRadius;
            float DeactivationRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC4A3AEEECE730EE8, 0x90)]
        public class SplashScreenNode : WorldNode
        {
            Ref<UITexture> SplashScreenImage;
            Ref<ConditionResource> Condition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x110E823D0061452E, 0x270)]
        public class SpotLight : LightShadowed
        {
            float ConeAngle;
            float HotspotAngle;
            float NearRange;
            float FarRange;
            float DepthFadeRatio;
            bool FarRangeOverride;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB95C330362CE47D5, 0x220)]
        public class SpotLightResource : LightShadowedResource
        {
            float ConeAngle;
            float HotspotAngle;
            float NearRange;
            float FarRange;
            float DepthFadeRatio;
            bool FarRangeOverride;
            Ref<Texture> ProjectorTexture;
            Ref<Texture> AreaDiffuseTexture;
            Ref<Texture> AreaSpecularTexture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8923EAFCF7E3FA5C, 0x78)]
        public class SpottableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86B5295F117FB660, 0x38)]
        public class SpottableComponentResource : EntityComponentResource
        {
            FSize VisibleScreenSpacePercentage;
            float MaxSpottingDistance;
            bool AutoRemoveWhenSpotted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA849C380CDF5E2E0, 0x50)]
        public class SpreadSettings : Resource
        {
            float SpreadFalloffSpeed;
            float SpreadIncrementSpeed;
            float MaximumSpread;
            Ref<CurveResource> FirePressedSpreadCurve;
            Ref<CurveResource> ChargeSpreadCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3DAE68C2A21811A, 0x38)]
        public class Spring : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DA2F6EB579C40DE, 0x20)]
        public class SpringAttr
        {
            float Stiffness;
            float Drag;
            float Mass;
            float Scale;
            float Clamp;
            int MaxPriority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF64CE173603523C, 0x38)]
        public class SpringResource : Resource
        {
            float Frequency;
            float Damping;
            float MaximumStretch;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF350E807F0E80236, 0x60)]
        public class StackableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D3F929B93F5EA4E, 0x38)]
        public class StackableComponentResource : EntityComponentResource
        {
            int DefaultAmount;
            bool DropStackAsSingleObject;
            int StackLimit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD41976A5E7458D9, 0x90)]
        public class StageActorResource : CreateEntityActorResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9D879D9F4B896F7, 0xE0)]
        public class StageCameraActorResource : CameraActorResource
        {
            ECameraShotType CameraShotType;
            Ref<EntityActorResource> EntityActorResource;
            EGender Gender;
            Ref<EntityActorResource> SecondaryActorResource;
            EGender SecondaryActorGender;
            bool LeftOfTarget;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB1A94C160C89EBB, 0x70)]
        public class StaggerStateComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1BEF68E33F654121, 0x48)]
        public class StaggerStateComponentResource : EntityComponentResource
        {
            String Animation;
            Array<String> AnimationStates;
            String AnimationTag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA87A9C1259353C3, 0x38)]
        public class StaminaAnimationCost : Resource
        {
            String AnimationTag;
            float InstantCost;
            float StaminaPerSecondWhileActive;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x648824B11198EAA2, 0x80)]
        public class StaminaComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5F0C17FA1990D055, 0x48)]
        public class StaminaComponentResource : EntityComponentResource
        {
            EStaminaType Type;
            int InitialStamina;
            int MaxStamina;
            float RegenerationRate;
            Array<Ref<StaminaAnimationCost>> AnimationCosts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA129C6C9ED39A080, 0x58)]
        public class StaminaModificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF756958B680FE3F, 0x40)]
        public class StaminaModificationComponentResource : EntityComponentResource
        {
            Array<Ref<StaminaModifier>> StaminaModifiers;
            EStaminaType StaminaType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA523887E53346FA4, 0x58)]
        public class StaminaModifier : Resource
        {
            float StaminaPerSecond;
            float CostRateMultiplier;
            float BoostRateMultiplier;
            float RegenRateMultiplier;
            float DrainRateMultiplier;
            float AdditionalMax;
            bool AdditionalMaxIsTransient;
            bool RefillToMax;
            float Duration;
            String Identifier;
            Ref<StaminaUsageType> StaminaUsageType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B2A2C2407EB7EEF, 0x40)]
        public class StaminaModifierAction : EntityAction
        {
            Ref<StaminaModifier> StaminaModifier;
            bool Add;
            EStaminaType Type;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D46B3760A01F6D6, 0x28)]
        public class StaminaUsageType : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCEFA230A3191DB7, 0x58)]
        public class StartAndStopSceneEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB2E62560941820EC, 0x48)]
        public class StartAndStopSceneEventResource : TimedEventResource
        {
            UUIDRef<SceneInstance> SceneInstance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80EA03D865C7B4D3, 0x110)]
        public class StartAudiologNotification : PlayerInteractiveNotification
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC6CB285EC0B860F, 0x68)]
        public class StartAudiologNotificationResource : PlayerInteractiveNotificationResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD71BC73355136437, 0x58)]
        public class StartSceneEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CE81C155BDAE373, 0x40)]
        public class StartSceneEventResource : EventResource
        {
            UUIDRef<SceneInstance> SceneInstance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD27F9B634BED8B5, 0x58)]
        public class StartSequenceEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68E7BFAC947663A4, 0x40)]
        public class StartSequenceEventResource : EventResource
        {
            Ref<SequenceResource> SequenceResource;
            Ref<AIMarker> Marker;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x84C1C86675B99B8B, 0x38)]
        public class StatDisplayEntry : StatDisplayEntryBase
        {
            int StatBarValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7452273FBD2FB5B2, 0x30)]
        public class StatDisplayEntryBase : Resource
        {
            EDisplayStatType DisplayStatType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27C9E16EDA623743, 0x20)]
        public class StatModification : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7484DA64F7EB4A5, 0x98)]
        public class StatModificationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x97422E97C7A661D2, 0x38)]
        public class StatModificationResource : Resource
        {
            Array<Ref<StatModifierResource>> Modifiers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE940250BC190B1E3, 0x38)]
        public class StatModificationSocketType : Resource
        {
            Ref<StatModificationSocketType> ParentType;
            Ref<UITexture> Icon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x59447BCF53008891, 0x68)]
        public class StatModificationTypeCandidate : Resource
        {
            Ref<StatModificationTypeResource> PrimaryType;
            Array<Ref<StatModificationTypeResource>> SecondaryTypes;
            Array<Ref<StatModificationTypeResource>> TertiaryTypes;
            float SelectionWeight;
            Ref<GraphProgramResource> ConditionGraph;
            Ref<UITexture> ItemOverrideIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FE2FA1BF49E38, 0x40)]
        public class StatModificationTypeResource : Resource
        {
            Ref<StatModificationResource> ModificationResource;
            Ref<ModifierStatDisplayEntry> StatDisplayEntry;
            Ref<StatModificationSocketType> RequiredSocketType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDDDA3EB7F5D8DBD8, 0x28)]
        public class StatModifierResource : Resource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A7F345C24C372CE, 0x20)]
        public class StatResource
        {
            String Type;
            EPlayerScoreStat Stat;
            EPlayerScoreEntityStat EntityStat;
            EOperator Operator;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB51048A14D18A118, 0x148)]
        public class StateInGame : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99869032BB746F4C, 0x140)]
        public class StateMatchmaking : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA015E71AC646AA37, 0x8)]
        public class StateObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B934E9E7CC4F7A0, 0x28)]
        public class StateObjectInstance : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B63E58333404267, 0x20)]
        public class StateObjectResource : BaseResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5B434468F879C93, 0x48)]
        public class StaticConditionAction : ConditionalAction
        {
            bool Condition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8E1EEE047712137, 0x80)]
        public class StaticMeshActorResource : ModelActorResource
        {
            Ref<StaticModelResource> StaticModelResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B945C8073AA4A01, 0x1D0)]
        public class StaticMeshInstance : GeometryObject
        {
            String Name;
            Ref<MeshResourceBase> Resource;
            MeshHierachyShaderOverrides MeshShaderOverrides;
            int MeshInstanceTreeSize;
            int MeshInstanceTreeDrawableSetupSize;
            Array<uint8> RangedStreamingData;
            uint16 RangedStreamingObjectCount;
            uint16 StreamingResourceCount;
            uint16 StreamingHandleCount;
            uint32 PackedData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC711C9C5BD00A78, 0xE0)]
        public class StaticMeshResource : MeshResourceBase
        {
            DrawFlags DrawFlags;
            Array<Ref<PrimitiveResource>> Primitives;
            Array<Ref<RenderEffectResource>> RenderEffects;
            Ref<SkeletonHelpers> OrientationHelpers;
            Ref<StaticMeshSimulationInfo> SimulationInfo;
            bool SupportsInstanceRendering;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x736AFE97D3999282, 0x78)]
        public class StaticMeshSimulationInfo : Resource
        {
            Array<StaticMeshSimulationModelPoint> ModelPoints;
            Array<StaticMeshSimulationModelLink> ModelLinks;
            float WeightInertia;
            float WeightStiffness;
            float WeightCollider;
            float WeightOldOrientation;
            float WeightTurnToNeighbours;
            float WeightMatchOrientation;
            float Gravity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x597F9A8DA554599A, 0x20)]
        public class StaticMeshSimulationModelLink
        {
            int IndexA;
            int IndexB;
            Vec3 Vector;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28FB792A7D2E103E, 0x30)]
        public class StaticMeshSimulationModelPoint
        {
            Quat Orientation;
            Vec3 Position;
            float ColliderInfluence;
            float OrientationSnap;
            float InvMass;
            float MoveScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA6B2140E7E7DFC4F, 0x178)]
        public class StaticModel : Model
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x378E027AE93541CC, 0x80)]
        public class StaticModelActorResource : ModelActorResource
        {
            Ref<StaticModelResource> StaticModelResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDADD3E3430BB836, 0x180)]
        public class StaticModelRep : ModelRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BD3CB18F9D0C33, 0x60)]
        public class StaticModelResource : ModelResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7C388E6B00260D4, 0x40)]
        public class StatsClassResource : Resource
        {
            String StatsClass;
            Array<String> StatsClassTags;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x741C6EA0E5BC3F4B, 0x38)]
        public class StatsDisplayResource : Resource
        {
            Array<Ref<StatDisplayEntry>> Stats;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x144172AC44D6C05A, 0x60)]
        public class StatsProfile : RTTIRefObject
        {
            HashMap<EPlayerScoreStat_int> ScoreStatMap;
            HashMap<EPlayerScoreStat_int> ActivityFeedStatMap;
            HashMap<String_int> EntityStatMap;
            float SkillRating;
            float SkillRD;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9B0914E019B21AA, 0x60)]
        public class StealthComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x25FD3A2821FA9665, 0x28)]
        public class StealthComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB0404EABC4556DE8, 0x58)]
        public class StencilBufferComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5AFA85D1C2603E, 0x30)]
        public class StencilBufferComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA47C5904436F50F3, 0x30)]
        public class StencilBufferComponentResource : EntityComponentResource
        {
            EStencilBufferValue StencilBufferValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7B616E18AA460F, 0x40)]
        public class StickFunction : Resource
        {
            EStick Stick;
            Ref<CurveResource> StickCurve;
            Ref<CurveResource> DeadzoneCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9033E5EC15A3353C, 0x30)]
        public class StopEmitElectricityAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCAFE8FCACD66BAE, 0x58)]
        public class StopSceneEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAF42001FBEDCEE42, 0x40)]
        public class StopSceneEventResource : EventResource
        {
            UUIDRef<SceneInstance> SceneInstance;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B95FD68D3EB6E7B, 0x58)]
        public class StopSequenceEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5430E3F11BEBAC35, 0x30)]
        public class StopSequenceEventResource : EventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x70DDECB5743C9A59, 0x48)]
        public class Story : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x67090F9210738844, 0x40)]
        public class StoryArc : Resource
        {
            String DisplayName;
            int Priority;
            String DescriptionID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3222B76DA88E1586, 0x10)]
        public class StreamOutDesc
        {
            String Desc;
            EProgramType ProgramType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32D0935DA22500AA, 0x48)]
        public class StreamingHintAction : EntityAction
        {
            String SectionName;
            String SpawnArea;
            String SpawnMarker;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB4B0A9858D71E9C, 0x48)]
        public class StreamingProgramResource : CoreObject
        {
            Ref<GraphProgramResource> ActiveProgram;
            StreamingRef<ObjectCollection> ObjectCollection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0BED228EC4DEF71, 0x10)]
        public class StreamingRefTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BE3172218BB86EF, 0x28)]
        public class StreamingStrategyInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x63E59CE81CF859F, 0x58)]
        public class StreamingStrategyResource : Resource
        {
            Array<String> BlacklistedTypes;
            Array<String> WhitelistedTypes;
            Array<UUIDRef<RTTIRefObject>> WhitelistedObjects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4EC23BA299C51BCE, 0x48)]
        public class StreamingTileLODResource : CoreObject
        {
            EStreamingLODLevel LODLevel;
            StreamingRef<ObjectCollection> ObjectCollection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDA6B57CA4988B635, 0x38)]
        public class StreamingTileResource : CoreObject
        {
            IVec2 Coordinates;
            Array<Ref<StreamingTileStateResource>> States;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD45D0D5AB1E9F962, 0x30)]
        public class StreamingTileStateResource : CoreObject
        {
            Array<Ref<StreamingTileLODResource>> LODs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x119BADFD4A56C7FF, 0x30)]
        public class StringProperty : StringPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64C53340B02F6ABB, 0x30)]
        public class StringPropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90E2B278F0AF1B49, 0x8)]
        public class StringPropertyLink : PropertyLinkBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ref<StringPropertyBase> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE86F39E978DCD8D4, 0x1)]
        public class StringToolsGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED2DDF5E1671D631, 0x18)]
        public class String_GGUUID
        {
            String Key;
            GGUUID Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E46CF03F14FE330, 0x10)]
        public class String_String
        {
            String Key;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x60DC74B13859AB4B, 0x10)]
        public class String_double
        {
            String Key;
            double Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A251B5C42DFAE17, 0x10)]
        public class String_int
        {
            String Key;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5C2F2D3EB687E231, 0x58)]
        public class StunnedComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x531CFBE689BF3613, 0x38)]
        public class StunnedComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3C5CB8A3D436488B, 0x40)]
        public class StunnedComponentResource : EntityComponentResource
        {
            Ref<BoneAttachedParticleSystemResource> StunParticleSystem;
            String StunAnimation;
            bool DeactivateMoverOnStun;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0BB3A607344B17D, 0x68)]
        public class SubGoalPausableEventInstance : PausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24543191D38923D7, 0x38)]
        public class SubGoalPausableEventResource : PausableEventResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F15F93AA15F0AB6, 0x58)]
        public class SubmixPresetEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDCCD689BEA93863F, 0x40)]
        public class SubmixPresetEventResource : TimedEventResource
        {
            Ref<SubmixPresetResource> SubmixPreset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5DE301D1481E433C, 0x150)]
        public class SubmixPresetResource : Resource
        {
            Array<Ref<SubmixResource>> AffectedSubMixBusses;
            Ref<SubmixResource> SideChainInput;
            bool IsDominant;
            float PreAmpGain;
            float TotalVolume;
            float LFEVolume;
            float Azimuth;
            float Focus;
            ESoundFilterMode Band1Mode;
            float Band1Gain;
            float Band1Frequency;
            float Band1QValue;
            ESoundFilterMode Band2Mode;
            float Band2Gain;
            float Band2Frequency;
            float Band2QValue;
            ESoundFilterMode Band3Mode;
            float Band3Gain;
            float Band3Frequency;
            float Band3QValue;
            ESoundFilterMode Band4Mode;
            float Band4Gain;
            float Band4Frequency;
            float Band4QValue;
            bool Compressor_Enabled;
            bool UseSideChainInput;
            bool UseChannelLinking;
            uint8 BandCount;
            float LookAheadInMs;
            Ref<CompressorConfigurationSet> CompressorBand1;
            float CrossOverFrequencyBand1Band2;
            Ref<CompressorConfigurationSet> CompressorBand2;
            float CrossOverFrequencyBand2Band3;
            Ref<CompressorConfigurationSet> CompressorBand3;
            float CrossOverFrequencyBand3Band4;
            Ref<CompressorConfigurationSet> CompressorBand4;
            bool TubeAmp_Enabled;
            float TriodeDrive;
            float PentodeDrive;
            bool WaveShaperDistortion_Enabled;
            float Drive;
            float PositiveInputSaturation;
            float NegativeInputSaturation;
            float PositiveOutputSaturation;
            float NegativeOutputSaturation;
            float CoefficientA;
            float CoefficientB;
            float CoefficientC;
            float CoefficientD;
            Ref<ImpulseResponseResource> ImpulseResponse;
            bool Reverse;
            float StartOffset;
            float StopOffset;
            float Gain;
            float AttackTime;
            int AttackAlpha;
            float SustainTime;
            float ReleaseTime;
            int ReleaseAlpha;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DBEC3DB96B688B4, 0x280)]
        public class SubmixResource : Resource
        {
            Ref<SubmixResource> Destination;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7BA2FC3AF9C0F3D, 0x10)]
        public class SubtitleEvent
        {
            WString SubtitleText;
            int FrameStart;
            int FrameEnd;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33C1C418B1E8576B, 0x18)]
        public class SubtitleLanguageEvents
        {
            ELanguage Language;
            Array<SubtitleEvent> Events;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A3ECD4ADA693D7F, 0x40)]
        public class SubtitlesResource : Resource
        {
            Array<SubtitleLanguageEvents> SubtitleEvents;
            bool ForceSubtitles;
            ESubtitlePosition Position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB87386E71EE93D60, 0x40)]
        public class SummableQuestReward : QuestReward
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A3A0A827144CC60, 0x58)]
        public class SunCascadeOccluderComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x76282341EADF501E, 0x30)]
        public class SunCascadeOccluderComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF8ACD7B4A4BB540, 0x28)]
        public class SunCascadeOccluderComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1B498B599F8CFA02, 0x64)]
        public class SunCascadeResourceSettings : SunCascadeSettings
        {
            int FilterTapCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x870CCD90934982F1, 0x30)]
        public class SunCascadeScalabilitySettings
        {
            float ScalabilityCascadeDistanceLow;
            float ScalabilityCascadeDistanceMedium;
            float ScalabilityCascadeDistanceHigh;
            float ScalabilityCascadeDistanceUltra;
            float ScalabilityCascadeResolutionLow;
            float ScalabilityCascadeResolutionMedium;
            float ScalabilityCascadeResolutionHigh;
            float ScalabilityCascadeResolutionUltra;
            float ScalabilityCascadeOverrideLODDistanceLow;
            float ScalabilityCascadeOverrideLODDistanceMedium;
            float ScalabilityCascadeOverrideLODDistanceHigh;
            float ScalabilityCascadeOverrideLODDistanceUltra;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3198260A4E5B1A99, 0x60)]
        public class SunCascadeSettings
        {
            float FilterSize;
            float ViewRelativeNearPlane;
            float ViewRelativeFarPlane;
            float DepthBias;
            float MinimumObjectScreenSize;
            float MinimumObjectShadowSize;
            int VolumetricsSampleCount;
            ESunCascadeShadowmapOverride SunCascadeShadowmapOverride;
            bool EnableCascadeDistanceScalability;
            bool EnableCascadeResolutionScalability;
            bool EnableCascadeLODDistanceOverrideScalability;
            float OverrideLODDistance;
            float Distance;
            int ShadowMapSize;
            SunCascadeScalabilitySettings SunCascadeScalabilitySettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB3470DF3CBE711E2, 0x60)]
        public class SunDamageComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x525848D22F1351CA, 0x28)]
        public class SunDamageComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14314DDC645D24F7, 0x100)]
        public class SunExposureComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x622542E33B5B640, 0x40)]
        public class SunExposureComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5318E120185F7F95, 0x58)]
        public class SunExposureComponentResource : EntityComponentResource
        {
            float DamagePerSecond;
            Ref<DamageTypeResource> DamageTypeResource;
            float HeatIncreaseRate;
            float HeatDissipationRate;
            int ExposurePhysicsLayer;
            Ref<SoundResource> HeatSound;
            Ref<SoundResource> DamageSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA948FBD46C88BD67, 0x540)]
        public class SunLight : Light
        {
            SunCascadeSettings CascadeSettings0;
            SunCascadeSettings CascadeSettings1;
            SunCascadeSettings CascadeSettings2;
            SunCascadeSettings CascadeSettings3;
            SunCascadeSettings CascadeSettings4;
            SunCascadeSettings CompartmentSettings;
            SunCascadeSettings CompartmentSettingsSecondary;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2F7AFFB2B6AC1299, 0x4B0)]
        public class SunLightResource : LightResource
        {
            int CascadeCount;
            SunCascadeResourceSettings CascadeSettings0;
            SunCascadeResourceSettings CascadeSettings1;
            SunCascadeResourceSettings CascadeSettings2;
            SunCascadeResourceSettings CascadeSettings3;
            SunCascadeResourceSettings CascadeSettings4;
            bool EnableCompartmentShadows;
            int CompartmentCount;
            SunCascadeResourceSettings CompartmentSettings;
            SunCascadeResourceSettings CompartmentSettingsSecondary;
            Vec3 SecondaryCompartmentEntityDetectionBoxExtents;
            Vec3 MaxSecondaryCompartmentShadowBoundingBoxExtents;
            bool UseSecondaryCompartmentShadowBoundingBoxLimit;
            SunLongDistanceShadowSettings LongDistanceShadowSettings;
            Ref<Texture> LongDistanceShadowMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x546679A70E4042D2, 0x18)]
        public class SunLongDistanceShadowSettings
        {
            Array<BoundingSphere> ShadowBounds;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DC790F48620CF56, 0x80)]
        public class SunShieldComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBCCCAE0994A9E438, 0x38)]
        public class SunShieldComponentResource : EntityComponentResource
        {
            FRange AllowedShieldRotationRange;
            float FlipShieldRotationThreshold;
            float ShieldRotationMaxSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1A46C3E12DC98C, 0x120)]
        public class SunlightMover : AttachToHelperMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E9625DA9AABD559, 0x90)]
        public class SunlightMoverResource : AttachToHelperMoverResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51B76B2E985C3D87, 0xC)]
        public class SurfaceFormat
        {
            int Width;
            int Height;
            EPixelFormat PixelFormat;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BF1A2FD82F3F531, 0x60)]
        public class SusceptibleToDamageComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8ACA75C3B1509B4E, 0x58)]
        public class SusceptibleToDamageComponentResource : EntityComponentResource
        {
            Array<Ref<DamageTypeResource>> DamageTypeResources;
            Ptr<EntityAction> Action;
            bool OnlyFromEnemies;
            bool OnlyFromPlayer;
            bool SendTelemetry;
            float DamageAmount;
            bool FilterDamageByHeading;
            float FilterDamageByHeadingAngle;
            float FilterDamageByHeadingRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E8E151A9853197F, 0x60)]
        public class SuspendPlayerControlEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6E778B972E04AC9, 0x58)]
        public class SuspendPlayerControlEventResource : TimedEventResource
        {
            Ref<EntityActorResource> PlayerActorResource;
            Array<EControlType> ControlTypes;
            bool Crouch;
            bool StowWeapon;
            bool SuspendMenu;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEC43C54E1998059, 0x18)]
        public class SwimStatePerkMapping : RTTIObject
        {
            Ref<PerkLevel> PerkLevel;
            float AdditionalBreathingTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB84683AEC76B5D2, 0x6A0)]
        public class Switch : InteractiveEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B04B451D08B9AC5, 0x48)]
        public class SwitchEntityStateAction : EntityAction
        {
            Ref<EntityStateMachineResource> StateMachineResource;
            Ref<EntityState> FromState;
            Ref<EntityState> ToState;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28522102D7329142, 0x40)]
        public class SwitchInventoryEntityAction : EntityAction
        {
            Ptr<InventoryEntityResource> InventoryEntity;
            bool Immediate;
            bool ForceSwitch;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AEB6ED41BCAA542, 0x38)]
        public class SwitchObstacleTypeAction : EntityAction
        {
            EObstacleType ObstacleType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA7372EC4BFD9881, 0x300)]
        public class SwitchRep : InteractiveEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x322EEB5C01D2EA1E, 0x330)]
        public class SwitchResource : InteractiveEntityResource
        {
            String EnabledShaderVariableID;
            Array<String> CustomShaderVariableIDs;
            Ref<LightResource> SwitchOnLightResource;
            Ref<LightResource> SwitchOffLightResource;
            Ref<LightResource> SwitchDisabledLightResource;
            Ref<LightResource> SwitchDeadLightResource;
            Mat44 LightOrientation;
            bool AwardPoints;
            bool DisableAfterUse;
            Ref<ElectricityEmitSettings> ElectricityEmitSettings;
            Ptr<EntityAction> SwitchOnAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7ECC3C6767F87062, 0x30)]
        public class SwitchScriptSwitchOnEvent : RequestOwnershipEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EAB7F1CC8DFCFFF, 0x40)]
        public class SwitchStateAction : EntityAction
        {
            Array<Ref<DestructibilityPartStateResource>> RandomNextStates;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2C2E2FB7B9D988D5, 0x198)]
        public class SystemParams
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x105214CAB14D8AF9, 0x28)]
        public class SystemQuestTrigger : QuestTrigger
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A39895C0D852C8F, 0x28)]
        public class SystemQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE77A48BA47C630AE, 0xD0)]
        public class TabHeaderTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB10A90F25E3439BE, 0x150)]
        public class TabHeaderWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B20F2BCDB6AD74A, 0xD0)]
        public class TabTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4292FC863A5108DD, 0x150)]
        public class TabWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7400C93A0641CA6, 0xD8)]
        public class TabboxTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6C74526B0064D93, 0x160)]
        public class TabboxWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEE9D55E6B1B9C87, 0xD0)]
        public class TabpaneTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4873633949A22D2, 0x150)]
        public class TabpaneWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6231F44FD58D7E6F, 0x60)]
        public class Tag : MenuNode
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52B557A4CB1CDA70, 0x20)]
        public class TagEvent : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE10B783ED34C3DAA, 0x30)]
        public class TagEventButtonPressAndHoldFinish : TagEventInput
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC31046C2810590F, 0x28)]
        public class TagEventButtonPressAndHoldStart : TagEventInput
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96EC8067FD0C9D4A, 0x20)]
        public class TagEventChildrenUpdated : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5EB9DE69D05CCABE, 0x20)]
        public class TagEventControllerTypeChanged : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3B9F54AFF7F1EED6, 0x28)]
        public class TagEventCreate : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7C09A1B63CE84F1B, 0x50)]
        public class TagEventCursor : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD921F19495D4A7DB, 0x28)]
        public class TagEventDataInvalidate : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8DFB9DFB6313794D, 0x30)]
        public class TagEventDataUpdate : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA676DAC9D3A0A8EA, 0x20)]
        public class TagEventDeinitialize : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA32651B79A57FDE, 0x20)]
        public class TagEventDownloadComplete : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB8F5A75AF6C81DC, 0x20)]
        public class TagEventFocusOff : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x22A067646203ADAC, 0x20)]
        public class TagEventFocusOn : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF07E92767FF6F15F, 0x20)]
        public class TagEventInitialize : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x712C2F1740B770A6, 0x28)]
        public class TagEventInput : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C61A9F10A51D9C, 0x20)]
        public class TagEventKeyBindFinished : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DDC2DD149BA92F7, 0x28)]
        public class TagEventMenuStateChanged : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x89C112B0956554FB, 0x20)]
        public class TagEventMouseHoverIn : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5228268DD5EE483, 0x20)]
        public class TagEventPageOff : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6FDA31B00A2A2144, 0x20)]
        public class TagEventPageOn : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2D153B2950B34DD, 0x28)]
        public class TagEventPlayUnhandledSound : TagEventInput
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7228C6CFF77166A4, 0x20)]
        public class TagEventUnpluggedMonitor : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x81830657DAFD5E00, 0x28)]
        public class TagEventValueChanged : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1ABB0DDA33FDEC79, 0x20)]
        public class TagEventWindowMoved : TagEvent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8363DE3F10CA3486, 0x30)]
        public class TagProperty : BoolPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E5A2094D434FDDA, 0x8)]
        public class TagPropertyLink : PropertyLinkBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ref<TagProperty> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF48DDC4A84B0E781, 0x18)]
        public class TagPropertyLinkCollection : PropertyLinkCollectionBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1D10FC8FC6946502, 0xB8)]
        public class TalkComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D4CD21AC1AB7603, 0x58)]
        public class TalkComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x920580544F5B9C89, 0x30)]
        public class TalkPriority : Resource
        {
            float Priority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71E49D24478F77C5, 0x30)]
        public class TaperedCapsule
        {
            Vec3 From;
            Vec3 To;
            float FromRadius;
            float ToRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37967630E9A385A, 0x100)]
        public class TargetArrow : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1DE21386678B77E6, 0x70)]
        public class TargetArrowComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A8BA6E93E1C3707, 0x38)]
        public class TargetArrowComponentResource : EntityComponentResource
        {
            ETargetArrowType Type;
            RGBAColor Color;
            bool ShowDistance;
            float Lifetime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2589EB5D1356659D, 0x88)]
        public class TargetSelectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x914982BCE0D5A59B, 0x28)]
        public class TargetSelectionComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6621F6773B7EAF7B, 0x78)]
        public class TargetableTargetArrowComponent : TargetArrowComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF8D42D6167F50A3, 0x50)]
        public class TargetableTargetArrowComponentResource : TargetArrowComponentResource
        {
            Ptr<EntityAction> TargetedAction;
            Ptr<EntityAction> EndTargetedAction;
            float TargetingDuration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40258F6511713292, 0x70)]
        public class TelemetryAddedToHealthBucket : TelemetryGameBase
        {
            String item_name;
            float amount_added;
            float new_total_amount;
            Vec3 position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x146143BA0755BE3C, 0x50)]
        public class TelemetryAlert : RTTIRefObject
        {
            int type;
            String title;
            String message;
            String context;
            String filename;
            int line_number;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85EB8209358B2FF8, 0x80)]
        public class TelemetryAssert : TelemetryGameBase
        {
            String filename;
            int line_number;
            String condition;
            String message;
            String extra_info;
            Array<String> call_stack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3D6198452D469D, 0x70)]
        public class TelemetryBootStart : RTTIRefObject
        {
            String title_name;
            String issuer_id;
            String platform;
            String device_type;
            String build_version;
            bool is_trial;
            String build_type;
            int play_go_source;
            String host_name;
            String command_line;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7B2C0DF54D5CA4B, 0x70)]
        public class TelemetryBootStartGame : TelemetryBootStart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A6B672F9DB1DA79, 0x28)]
        public class TelemetryBrowseProduct : RTTIRefObject
        {
            String ProductLabel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8B48BDE1D1FF58C2, 0x58)]
        public class TelemetryCharacterUpgrade : TelemetryGameBase
        {
            String UpgradeName;
            int PlayerLevel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEA9489EB96F5365, 0x70)]
        public class TelemetryCollectableUnlocked : TelemetryGameBase
        {
            String name;
            String type;
            int total_unlocked;
            Vec3 position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC7DA31D464A47041, 0xD0)]
        public class TelemetryComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1763A96099EA3CA, 0x40)]
        public class TelemetryComponentResource : EntityComponentResource
        {
            bool SpawnEvent;
            bool KillEvent;
            bool PositionUpdates;
            float MinTimeBetweenPositionUpdates;
            float MinDistanceBetweenPositionUpdates;
            ETelemetryDamageTracking IncomingDamageTracking;
            float CombatTimeout;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA05C95C51826FB02, 0x120)]
        public class TelemetryCorruptedFactDatabase : TelemetryGameBase
        {
            String type;
            String context;
            int context_length;
            int context_written_length;
            int float_length;
            int float_non_persistent_length;
            int float_written_length;
            Array<String> float_fact_values;
            Array<String> float_non_persistent_facts;
            int int_length;
            int int_non_persistent_length;
            int int_written_length;
            Array<String> int_fact_values;
            Array<String> int_non_persistent_facts;
            int bool_length;
            int bool_non_persistent_length;
            int bool_written_length;
            Array<String> bool_fact_values;
            Array<String> bool_non_persistent_facts;
            int enum_length;
            int enum_non_persistent_length;
            int enum_written_length;
            Array<String> enum_fact_values;
            Array<String> enum_non_persistent_facts;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x26A3CE1543BA7FD2, 0x70)]
        public class TelemetryCraft : TelemetryInventoryItemsBase
        {
            String crafter_entity_id;
            String crafted_item_uuid;
            int crafted_amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x82C1431EF1F3335A, 0xD0)]
        public class TelemetryCrash : TelemetryGamePositions
        {
            String error;
            String executable_name;
            Array<String> callstack;
            String register_content;
            String cpu_revision;
            String context;
            String asset_memory_layout;
            String log;
            String assertions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E00B04A9A8AE346, 0x50)]
        public class TelemetryDifficultyChanged : TelemetryGameBase
        {
            EDifficulty difficulty;
            EDifficulty previous_difficulty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD66E382C13A2D6C, 0x90)]
        public class TelemetryDiscoverableAreaStateSwitch : TelemetryGameBase
        {
            String AreaName;
            String AreaType;
            WorldPosition AreaPosition;
            WorldPosition PlayerPosition;
            EDiscoveryState State;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9070B62F8E23F938, 0x70)]
        public class TelemetryEntityDamageSummary : TelemetryGameBase
        {
            String entity_id;
            String damage_type_name;
            String weapon_id;
            String weapon_name;
            float part_damage_multiplier;
            float health_lost;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CFA3C54FD1EE9F1, 0x60)]
        public class TelemetryEntityFellThroughWorld : TelemetryGameBase
        {
            String EntityID;
            Vec3 Position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC444A5D8A9AE578, 0x100)]
        public class TelemetryEntityKilled : TelemetryGameBase
        {
            String entity_id;
            String entity_name;
            String entity_instance_id;
            Vec3 position;
            String resource_uuid;
            String resource_name;
            String spawn_setup_uuid;
            String killer_entity_id;
            String killer_entity_name;
            String killer_entity_instance_id;
            String killer_faction;
            Vec3 killer_position;
            String killer_spawn_setup_uuid;
            String weapon_resource_uuid;
            String weapon_name;
            String ComponentName;
            String damage_type_resource_uuid;
            bool headshot;
            bool zoomed;
            bool Crouched;
            float time_since_first_damage;
            float non_combat_time_since_first_damage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4F9DF2EDFCD4418D, 0xA0)]
        public class TelemetryEntityPosition : TelemetryGameBase
        {
            String entity_id;
            String entity_name;
            String entity_instance_id;
            String resource_name;
            String resource_uuid;
            Vec3 position;
            Vec3 prev_position;
            float heading;
            double prev_game_time;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8FC668C2684284CD, 0x90)]
        public class TelemetryEntitySpawn : TelemetryGameBase
        {
            String EntityID;
            Vec3 Pos;
            float Heading;
            String EntityName;
            String ResourceName;
            String SpawnSetupID;
            String ClassName;
            String EntityFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF7158F9C49B99803, 0x60)]
        public class TelemetryEntityUsed : TelemetryGameBase
        {
            String ResourceName;
            Vec3 Position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA54ED0A315DB510, 0xE8)]
        public class TelemetryErrorEvent : TelemetryNetworkStats
        {
            int error_code;
            String error_type;
            String error_message;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E9D49B0355EC62, 0x30)]
        public class TelemetryEvent : RTTIRefObject
        {
            Ref<TelemetryHeader> Header;
            Ref<RTTIRefObject> Data;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD464E3F0D121C74, 0x48)]
        public class TelemetryEventAction : EntityAction
        {
            String Event;
            String Parameter1;
            String Parameter2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x71998371386200FF, 0x80)]
        public class TelemetryEventActionData : TelemetryGameBase
        {
            String entity_id;
            Vec3 position;
            String event_name;
            String parameter1;
            String parameter2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99598652025A8EFD, 0x38)]
        public class TelemetryEventList : RTTIRefObject
        {
            int Count;
            Array<Ref<TelemetryEvent>> Events;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x92A5CB01621C097A, 0x80)]
        public class TelemetryFastTravel : TelemetryGameBase
        {
            Vec3 start_position;
            Vec3 end_position;
            float travel_time;
            float travel_distance;
            bool has_skipped_to_destination;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE3656EDC401E173, 0x90)]
        public class TelemetryFrameStats : TelemetryGameBase
        {
            String LevelID;
            int ActivePlayerCount;
            int MinHeapFree;
            int MaxHeapFree;
            Vec3 PlayerPosition;
            float PlayerZDegrees;
            float scene_static_memory_pct;
            int scene_total_static_setups;
            int scene_total_dynamic_setups;
            int scene_visible_setups;
            int scene_sun_shadow_setups;
            float scene_query_time;
            float scene_sun_shadow_query_time;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5B37178A8EA6F2, 0x48)]
        public class TelemetryGameBase : RTTIRefObject
        {
            String game_id;
            String level_uuid;
            String active_quest_uuid;
            String branch_id;
            double game_time;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0397C2A35035A6F, 0x70)]
        public class TelemetryGameEnd : TelemetryGameBase
        {
            String end_reason;
            String mode;
            String level_id;
            int local_player_count;
            int player_count;
            int duration_secs;
            bool is_completed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEAA130E70D75C1B, 0x70)]
        public class TelemetryGameEndGame : TelemetryGameEnd
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x191731B98A22BF66, 0x78)]
        public class TelemetryGamePositions : TelemetryGameBase
        {
            WorldPosition player_position;
            WorldPosition camera_position;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDF223C9FD5FAE251, 0x108)]
        public class TelemetryGameSettings : TelemetryGameBase
        {
            bool use_breadcrumbing;
            bool use_breadcrumbing_for_way_point;
            bool show_headgear;
            String hud_visibility_master_switch;
            bool show_hud_when_touching_touchpad;
            bool inverted_look_x_axis;
            bool inverted_look_y_axis;
            bool inverted_flight_y_axis;
            float look_sensitivity_x_axis;
            float look_sensitivity_y_axis;
            float mouse_look_sensitivity_x_axis;
            float mouse_look_sensitivity_y_axis;
            bool aim_assist_enabled;
            bool horse_follows_roads_enabled;
            bool sprint_toggle;
            int controller_config_id;
            float music_volume;
            float speech_volume;
            float sfx_volume;
            int sound_master_type;
            bool show_subtitles;
            String written_language;
            String spoken_language;
            String display_resoultion;
            int filed_of_view;
            int adaptive_fps;
            int fps_limit;
            float render_scare;
            bool v_sync;
            float view_brightness;
            bool hdr_enabled;
            float gamma_correction;
            String texture_level;
            String model_quality;
            String anisotropic_filter;
            String reflection_level;
            String shadow_level;
            String clouds_level;
            String AALevel;
            bool motion_blur_enable;
            String ambient_occlusion;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x836A3EB7E8E7167B, 0x68)]
        public class TelemetryGameStart : TelemetryGameBase
        {
            String mode;
            String level_id;
            String WrittenLanguage;
            String SpokenLanguage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9956678DAE4ACD9C, 0x68)]
        public class TelemetryGameStartGame : TelemetryGameStart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF4F605B75146234, 0x48)]
        public class TelemetryHardwareProfile : RTTIRefObject
        {
            String openpsid;
            int language_setting;
            String tv_resolution;
            bool capable_3d;
            bool capable_hdr;
            int refresh_rate;
            int hardware_revision;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC810D870AD48C8D4, 0x58)]
        public class TelemetryHardwareProfileGame : TelemetryHardwareProfile
        {
            String graphical_setting;
            bool hdr_setting;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47642D8E041FFD9E, 0x60)]
        public class TelemetryHeader : RTTIRefObject
        {
            String user_id;
            String psn_account;
            String title_id;
            uint64 client_timestamp;
            int client_timezone;
            String session_id;
            String environment;
            String build_version;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA71A729B7C1AB7D0, 0xB0)]
        public class TelemetryInventoryAdded : TelemetryGameBase
        {
            String item_resource_uuid;
            String item_name;
            String item_origin_uuid;
            String item_origin;
            int amount;
            int new_total_amount;
            int max_fit_amount;
            int inventory_slots_left;
            EInventoryCategory category;
            EInventoryItemAddType Reason;
            Vec3 location;
            int player_level;
            String quest_uuid;
            String QuestName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x610BA1F2A12F4FC8, 0x58)]
        public class TelemetryInventoryEntityActivation : TelemetryGameBase
        {
            String InventoryEntityResourceName;
            bool Activated;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5611B66E264E45C2, 0x10)]
        public class TelemetryInventoryItemAmount
        {
            String item_uuid;
            int amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD45F7D2F5EA385F, 0x18)]
        public class TelemetryInventoryItemSummaryInfo
        {
            String ItemResourceUUID;
            int CurrentAmount;
            int AmountAddedSinceLastSummary;
            int AmountRemovedSinceLastSummary;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BB69D17912CA282, 0x58)]
        public class TelemetryInventoryItemsBase : TelemetryGameBase
        {
            Array<TelemetryInventoryItemAmount> items;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0B4E6A8F94EA888, 0x70)]
        public class TelemetryInventorySummary : TelemetryGameBase
        {
            String EntityID;
            String EntityInstanceID;
            String Reason;
            Array<TelemetryInventoryItemSummaryInfo> Infos;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0D3C04D616FC7D9, 0x90)]
        public class TelemetryKillLagSample : TelemetryGameBase
        {
            String ServerIp;
            String ServerRegion;
            String KillerRegion;
            int KillerRttMs;
            String VictimRegion;
            int VictimRttMs;
            String KillerOnlineID;
            String VictimOnlineID;
            int KillLagMs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2CD5407F24578798, 0x28)]
        public class TelemetryLaunchAction : RTTIRefObject
        {
            String LaunchAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB1C309A719931FD, 0x88)]
        public class TelemetryLoadGame : TelemetryGamePositions
        {
            String save_id;
            String old_branch_id;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79B89CF31F0BF47, 0xA0)]
        public class TelemetryLoadingScreen : TelemetryGamePositions
        {
            String level;
            String event_uuid;
            String instigator;
            String cause;
            float loading_time_before_stall;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x667AC996CFA51B31, 0x70)]
        public class TelemetryLootDrop : TelemetryGameBase
        {
            String ItemName;
            String ItemOrigin;
            int Amount;
            Vec3 Location;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6349914EBE6EE55, 0x50)]
        public class TelemetryMenuDuration : TelemetryMenuScreen
        {
            float Duration;
            String TabID;
            String PreviousTabID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5B1C9AE31DA74860, 0x38)]
        public class TelemetryMenuScreen : RTTIRefObject
        {
            String menu_screen;
            String referrer_menu;
            String referrer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCB39667DE8FDC362, 0x78)]
        public class TelemetryModificationItemApplied : TelemetryGameBase
        {
            String AppliedToItemName;
            String ModificationItemName;
            String PrimaryStat;
            String SecondaryStat;
            String TertiaryStat;
            bool Removed;
            bool ReplacedExisting;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x42980A9775262B6A, 0xD0)]
        public class TelemetryNetworkStats : TelemetryGameBase
        {
            String mac_address;
            String router_manufacturer;
            String router_model_name;
            String router_model_number;
            uint server_ip;
            int nat_type;
            bool wifi;
            int wifi_percentage;
            int wifi_security;
            int upstream_bandwith;
            int downstream_bandwith;
            int mtu;
            int rtt;
            int reliable_messages_out;
            int unreliable_messages_out;
            int messages_in;
            int reliable_bytes_out;
            int unreliable_bytes_out;
            int bytes_in;
            int upd_packets_out;
            int upd_packets_in;
            int udp_bytes_out;
            int udp_bytes_in;
            int udp_retransmits;
            int udp_reliable_packets_out;
            int udp_reliable_bytes_out;
            float used_buffer_ratio;
            float server_buffer_ratio;
            float server_resend_ratio;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD1A90D21C221121, 0x50)]
        public class TelemetryNewGamePlusStarted : TelemetryGameBase
        {
            EDifficulty difficulty;
            int player_level;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA9A0C497176478A, 0x28)]
        public class TelemetryNpPlus : RTTIRefObject
        {
            bool IsEligible;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4EFF044FE46E0C7, 0x70)]
        public class TelemetryObjectPlaced : TelemetryGameBase
        {
            String EntityID;
            String Object;
            Vec3 ObjectPosition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8639DCFF67FE8292, 0x68)]
        public class TelemetryPerkGained : TelemetryGameBase
        {
            String perk_uuid;
            String perk_name;
            int perk_cost;
            int perk_points_remaining;
            int perk_points_total_spent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3EACDC67C2B9BC35, 0x98)]
        public class TelemetryPerkPointsGained : TelemetryGamePositions
        {
            EPerkPointGainReason reason;
            String reason_details;
            int perk_points_gained;
            int perk_points_available;
            int perk_points_total_spent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8E00F3ADC5203AC7, 0x90)]
        public class TelemetryPhysicsStats : TelemetryGameBase
        {
            String LevelID;
            bool CollapseDisabled;
            Vec3 PlayerPosition;
            int PeakStepMemory;
            int PeakPersistentMemory;
            int MaxBodies;
            uint32 MaxBroadPhaseNodes;
            int MaxActiveBodies;
            int MaxRagdolls;
            int MaxRaycastsPerUpdate;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E4D455F1F6CE844, 0x60)]
        public class TelemetryPlayerDoubleHit : TelemetryGameBase
        {
            String PSNAccount;
            float Angle;
            float TimeDiff;
            float Suspicion;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x947ADB22697878CA, 0x60)]
        public class TelemetryPlayerJoin : TelemetryGameBase
        {
            String psn_account;
            String player_type;
            bool is_using_3d;
            bool is_using_remote_play;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40A7AEC0D31B62DD, 0x60)]
        public class TelemetryPlayerJoinGame : TelemetryPlayerJoin
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD35350AD7EB7E1A1, 0x80)]
        public class TelemetryPlayerJump : TelemetryGameBase
        {
            Vec3 Position;
            Vec3 Velocity;
            Vec2 InputDirection;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD2B3FCFA6DC6218, 0xE0)]
        public class TelemetryPlayerKilled : TelemetryGameBase
        {
            String entity_id;
            String entity_name;
            String entity_instance_id;
            Vec3 position;
            String killer_entity_id;
            String killer_entity_name;
            String killer_entity_instance_id;
            String killer_faction;
            Vec3 killer_position;
            String killer_scene_uuid;
            String weapon_resource_uuid;
            String weapon_name;
            String ComponentName;
            bool headshot;
            bool Crouched;
            String quest_uuid;
            String QuestName;
            String killer_spawn_setup_uuid;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7F50CDFF2A9083DE, 0x70)]
        public class TelemetryPlayerLeave : TelemetryGameBase
        {
            String level_id;
            int duration_secs;
            String psn_account;
            String mode;
            int player_count;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2AE79CD8DDB5CF89, 0x70)]
        public class TelemetryPlayerLeaveGame : TelemetryPlayerLeave
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCEFFAD7B34AE1FA8, 0x50)]
        public class TelemetryPlayerLeveledUp : TelemetryGameBase
        {
            int player_level;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x604FB3CF0A023D5D, 0x58)]
        public class TelemetryPlayerMuted : TelemetryGameBase
        {
            String TargetID;
            bool Muted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE48B26EA7672AABD, 0x70)]
        public class TelemetryPlayerNearDeath : TelemetryGameBase
        {
            Vec3 Position;
            uint8 Health;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7ADF7A60E4EE3CD1, 0xB0)]
        public class TelemetryPlayerPosition : TelemetryEntityPosition
        {
            bool is_riding_mount;
            bool is_swimming;
            bool is_underwater;
            bool is_parkouring_with_hands;
            bool is_parkouring_with_feet;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8FE5CAF5E1F74A3, 0x80)]
        public class TelemetryPlayerSpawn : TelemetryGameBase
        {
            String EntityID;
            Vec3 Position;
            float Heading;
            String Faction;
            Array<String> InventoryItems;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E93395CFBC35BE, 0x28)]
        public class TelemetryPrivacySettings : RTTIRefObject
        {
            bool enable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC604CFF6CE262721, 0xB0)]
        public class TelemetryQuestProgressed : TelemetryGameBase
        {
            String quest_uuid;
            String QuestName;
            String quest_section_uuid;
            String QuestSectionName;
            String quest_type_uuid;
            String QuestType;
            String section_type;
            String progression_type;
            int time_from_quest_start;
            int time_from_game_start;
            int time_from_last_progress;
            int number_of_completed_sections;
            int number_of_blocked_sections;
            int total_number_of_sections;
            int amount_of_quests_in_progress;
            int amount_of_quests_completed;
            int amount_of_quests_failed;
            int player_level;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE856D1AE561AC9EA, 0x88)]
        public class TelemetrySaveGame : TelemetryGamePositions
        {
            String save_id;
            int size;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF6BED874800DE4B0, 0x80)]
        public class TelemetrySequenceNetwork : TelemetryGameBase
        {
            String name;
            String network_uuid;
            String partner_uuid;
            String partner;
            int line_skip_count;
            int line_played_count;
            int sequence_played_count;
            float sequence_network_duration;
            bool is_skipped;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x879F26E93AF3E304, 0x68)]
        public class TelemetryShopSellTransaction : TelemetryGameBase
        {
            String merchant_spawn_source_uuid;
            String item_resource_uuid;
            String sell_type;
            int amount;
            int price;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4CD4812806048EE1, 0x68)]
        public class TelemetryShopTradeTransaction : TelemetryInventoryItemsBase
        {
            String merchant_spawn_source_uuid;
            String trading_definition_uuid;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB88807C14697CBCC, 0x68)]
        public class TelemetryStartupStats : RTTIRefObject
        {
            bool started_ok;
            double time_app_init;
            double time_conversion;
            double time_loading;
            double time_init;
            double time_game;
            double time_menu;
            double time_system_ui;
            double time_startup_total;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB96C0B655DAD10A0, 0x58)]
        public class TelemetrySwitchFaction : TelemetryGameBase
        {
            String OldFaction;
            String NewFaction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9FD7F8E8F7D14A08, 0x58)]
        public class TelemetryTrophyUnlock : TelemetryGameBase
        {
            int trophy_id;
            int total_unlock_count;
            bool platinum_unlock;
            int return_code;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6C488B149AFE664, 0x50)]
        public class TelemetryUserProfile : RTTIRefObject
        {
            String np_online_id;
            uint64 np_account_id;
            bool restrict_chat;
            bool restrict_ugm;
            String region;
            String language;
            String issuer_id;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75EB9500199E6A23, 0x68)]
        public class TelemetryVoiceChatStats : TelemetryGameBase
        {
            bool HasEnabledVoiceChat;
            int LocalTalkTimeMs;
            int LocalTimesTalked;
            bool HasMutedAllPlayers;
            int NumPlayersMuted;
            int RemoteTalkTimeMs;
            int RemoteTimesTalked;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x831A8C9F40175616, 0x68)]
        public class TelemetryWeaponFireSummary : TelemetryGameBase
        {
            String entity_id;
            String weapon_name;
            String ammo_name;
            int ammo_fired;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6C1B422ABC8603AA, 0x60)]
        public class TelemetryWeaponStats : TelemetryGameBase
        {
            String WeaponName;
            Array<int> Stats;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2399EAE32D46046, 0x90)]
        public class TelemetryWorldEncounterBase : TelemetryGameBase
        {
            String collection_name;
            String encounter_name;
            Vec3 encounter_position;
            Vec3 player_position;
            int player_level;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF3DA488410FC3017, 0x90)]
        public class TelemetryWorldEncounterSelected : TelemetryWorldEncounterBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x64F1D97A4DDC802A, 0x90)]
        public class TelemetryWorldEncounterSpawned : TelemetryWorldEncounterBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAB8532092131511, 0x80)]
        public class TelemetryXpGained : TelemetryGameBase
        {
            String xp_reason_uuid;
            String xp_trigger_resource_uuid;
            String xp_trigger_name;
            Vec3 position;
            int xp_gained_amount;
            int total_xp_amount;
            int golden_xp_gained_amount;
            int total_golden_xp_amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9EB2C20D1AD2CFCC, 0x30)]
        public class TeleportToAIProvidedPositionAction : EntityAction
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E1225F9EFB134D3, 0x40)]
        public class TeleportToPlayerAction : EntityAction
        {
            float LowPriorityRange;
            String HighPriorityTrigger;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFDBEC2C6FFE2A5C1, 0x98)]
        public class TemplateTag : Tag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74B3858807F45015, 0x1560)]
        public class Terrain : GeometryObject
        {
            Array<TerrainDataNode> TerrainDataNodes;
            FRange TerrainHeightRange;
            int TileCount;
            IVec2 TileStart;
            TerrainRenderPassSetup ShadingPassSetup;
            TerrainRenderPassSetup ShadowPassSetup;
            TerrainRenderPassSetup OcclusionPassSetup;
            TerrainRenderPassSetup DebugPassSetup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE0E1A40F0813819D, 0x40)]
        public class TerrainAimReticuleResource : Resource
        {
            Ref<SpotLightResource> SpotLightResource;
            float LightOffset;
            float LightRotationSpeed;
            Ref<ModelPartResource> ModelPartResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x68F2743553CF38AC, 0x6)]
        public class TerrainDataNode
        {
            uint16 PackedData0;
            uint16 PackedData1;
            uint16 PackedData2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9C41710A636E13F, 0x130)]
        public class TerrainHull : WorldNode
        {
            String Name;
            ETerrainHullShape HullType;
            Array<Vec3> Vertices;
            RGBAColor DebugColor;
            Shape2DExtrusion Shape2d;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39C5497B896E09BE, 0x30)]
        public class TerrainMaterial : Resource
        {
            Ref<RenderEffectResource> MaskRenderEffect;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB09133A7CDA7E441, 0x30)]
        public class TerrainMaterialSwapEntry
        {
            Array<Ref<RenderEffectResource>> NewTerrainRER;
            Array<GGUUID> UUIDs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA1AB5B01618BEF30, 0x8)]
        public class TerrainRenderPassLODDistanceSettings
        {
            float LODDistance;
            int MaterialLayerIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB0564622B99564A5, 0x1A0)]
        public class TerrainRenderPassMaterialLayer
        {
            ETerrainMaterialLODType MinimumTerrainLODType;
            Ref<RenderEffectResource> RenderEffectResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x95E591FDD4C98345, 0x60)]
        public class TerrainRenderPassSetup
        {
            int VertexGridSize;
            DrawFlags DrawFlags;
            ESortOrder SortOrder;
            ETerrainBorderStitchingMode BorderStitchingMode;
            ETerrainTileCullingMode TileCullingMode;
            Array<TerrainRenderPassLODDistanceSettings> LODDistances;
            Array<TerrainRenderPassMaterialLayer> MaterialLayers;
            Array<float> LodDistancesSquared;
            Ref<VertexArrayResource> VertexArray;
            Array<Ref<IndexArrayResource>> IndexArrays;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF45C6BA16B2A4F32, 0x140)]
        public class TerrainTileData : Resource
        {
            IVec2 GridCoordinates;
            int MinimumNodeSize;
            ETerrainMaterialLODType MaterialLODType;
            int MaterialLODCount;
            TerrainTileMaterialData TerrainMaterialData;
            Array<BoundingBox2> HoleBBoxes;
            Ref<DataBufferResource> HoleDataBuffer;
            FRange MappedHeightRange;
            Array<TerrainDataNode> TileDataNodes;
            BoundingBox3 BoundingBox;
            Ref<RenderDataStreamingHintData> StreamingHintData;
            Array<Ref<RenderEffectResource>> OriginalMaskRenderEffects;
            Array<Ref<RenderEffectResource>> BakedMaskRenderEffects;
            Array<Ref<RenderEffectResource>> RuntimeMergedMaskRenderEffects;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xABA5CDE6A8DB2762, 0x1A0)]
        public class TerrainTileGeometryObject : GeometryObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDC38808F4645E0E4, 0x40)]
        public class TerrainTileMaterialData
        {
            String LookupDataPath;
            int LookupDataBlockSize;
            Ref<DataBufferResource> LookupValueBuffer;
            Vec4 LookupDataOffsets;
            Ref<DataBufferResource> LookupDataBuffer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x907FE59301ABC93A, 0x50)]
        public class TestBoolPropertyAction : ConditionalAction
        {
            String PropertyName;
            BoolPropertyLink Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x975C0EEB87D0B72D, 0x58)]
        public class TestFloatPropertyAction : ConditionalAction
        {
            String PropertyName;
            FloatPropertyLink Property;
            EComparator Comparator;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11E82F7D9394DF95, 0x58)]
        public class TestIntPropertyAction : ConditionalAction
        {
            String PropertyName;
            IntPropertyLink Property;
            EComparator Comparator;
            int Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF7268D5693AEC3D, 0x58)]
        public class TestStringPropertyAction : ConditionalAction
        {
            String PropertyName;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB182E6ECFCB2A0CB, 0x80)]
        public class TetherComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99C49B50E10EF27C, 0x78)]
        public class TetheredAmmoPileComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96A3DFCE8C6D736B, 0x40)]
        public class TetheredAmmoPileComponentResource : EntityComponentResource
        {
            float TetherRadius;
            Ref<CurveResource> RoundsOverTime;
            int TotalRoundsAvailable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BA24E0C47017AFF, 0x10)]
        public class TetraFaceShadowMap
        {
            Array<float> ShadowMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE69271564963387, 0x80)]
        public class TetrahedronShadowMap
        {
            TetraFaceShadowMap F0;
            TetraFaceShadowMap F1;
            TetraFaceShadowMap F2;
            TetraFaceShadowMap F3;
            Vec3 Pos0;
            Vec3 Pos1;
            Vec3 Pos2;
            Vec3 Pos3;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2750C93B92E363A2, 0xD0)]
        public class TextTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x605E956DFC9458AD, 0x280)]
        public class TextWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF2E1AFB7052B3866, 0x38)]
        public partial class Texture : Resource, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAC885AE064457499, 0x28)]
        public class TextureBindingWithHandle : ShaderTextureBinding
        {
            HwBindingHandle TextureBindingHandle;
            HwBindingHandle SwizzleBindingHandle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x292BBE12033D3857, 0x50)]
        public class TextureLUT : Resource
        {
            Array<TextureLUTEntry> Entries;
            float KeyRange;
            Array<RGBAColor> LookupData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6639770FCBD64DAE, 0x8)]
        public class TextureLUTEntry
        {
            float Key;
            float Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x321F4B133D40A266, 0x38)]
        public partial class TextureList : Resource, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA520F22B82BBF9A4, 0x18)]
        public class TextureMatrix
        {
            Vec2Pack Col0;
            Vec2Pack Col1;
            Vec2Pack Col2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE02735CED4F1CDF, 0x50)]
        public class TextureSet : Resource
        {
            Array<TextureSetEntry> Entries;
            ETexAddress MipMapAddressMode;
            Array<TextureSetTextureDesc> TextureDesc;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED2405F58FDC7F09, 0x18)]
        public class TextureSetEntry
        {
            uint32 PackingInfo;
            int TextureType;
            ETexColorSpace ColorSpace;
            EImageCompressionMethod CompressMethod;
            bool CreateMipMaps;
            Ref<Resource> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF187D835B8BCB293, 0x40)]
        public class TextureSetTextureDesc
        {
            ETextureSetType TextureType;
            String Path;
            bool Active;
            bool GammaSpace;
            ETextureSetStorageType StorageType;
            ETextureSetQualityType QualityType;
            EImageCompressionMethod CompressionMethod;
            int Width;
            int Height;
            FRGBAColor DefaultColor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE05961F4A1C12C45, 0x30)]
        public class TextureStreamingHighLODSkipSet
        {
            Array<GGUUID> UUIDsToSkip;
            Array<int> MipsToSkip;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4FB763DC1700CE4, 0xE8)]
        public class TextureTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x408CD6FFAF39440E, 0x280)]
        public class TextureWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x18EA237A50653B5, 0x1)]
        public class Texture_2D_ReadWrite_HalfFloat
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x37322E994237A239, 0x1)]
        public class Texture_2D_ReadWrite_RGBAColorRev
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1FEE64C748590328, 0x1)]
        public class Texture_2D_ReadWrite_Vec4
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7DEB6FF30029A1E, 0x1)]
        public class Texture_2D_ReadWrite_float
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5938089775F53690, 0x1)]
        public class Texture_2D_ReadWrite_uint16
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x33035529F7B828E, 0x1)]
        public class Texture_2D_ReadWrite_uint8
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC2001CD77C11F7CA, 0x1)]
        public class Texture_2D_Read_HalfFloat
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x392FDF3DE7BD3B35, 0x1)]
        public class Texture_2D_Read_RGBAColorRev
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF2CE506F5383A66, 0x1)]
        public class Texture_2D_Read_Vec4
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEA472BC327364179, 0x1)]
        public class Texture_2D_Read_float
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44FB9A072BB046DE, 0x1)]
        public class Texture_2D_Read_uint16
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE92A46F4FE82D19C, 0x1)]
        public class Texture_2D_Read_uint8
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9977B2D93018036E, 0x38)]
        public class ThirdPersonCameraFOV : Resource
        {
            Ref<CurveResource> FOVSpring;
            float FOV;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x53E1DF87625D6048, 0x270)]
        public class ThirdPersonPlayerCameraComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x80B7B5154FE94F8A, 0x58)]
        public class ThirdPersonPlayerCameraComponentResource : EntityComponentResource
        {
            float InputZeroDelay;
            Ref<CurveResource> LookDampingCurveAfterBlock;
            int LookInputBuffer;
            Ref<CurveResource> LookInputDeltaToVelocity;
            Ref<CurveResource> LookSensitivityToHeadingScaler;
            Ref<CurveResource> LookSensitivityToPitchScaler;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x28C57FCAA542DF3A, 0x88)]
        public class ThresholdBasedContextualEmotion : ContextualEmotion
        {
            float Threshold;
            Ref<GraphProgramResource> StartGraph;
            Ref<GraphProgramResource> StopGraph;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC914D1B2D8D19199, 0x3B0)]
        public class Throwable : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x221D97FBFED34665, 0x190)]
        public class ThrowableMover : PhysicsMover
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8491C63E4EE267D6, 0xF0)]
        public class ThrowableMoverResource : PhysicsMoverResource
        {
            bool AlignToPath;
            Vec3 ForwardOverride;
            Vec3 InitialSpin;
            Vec3 RandomInitialSpin;
            float ApproximateCollisionRadius;
            Vec3 RandomConstantSpin;
            bool UseSimpleBallisticPhysics;
            bool ReportWaterImpactAsContactPoint;
            float GravityFactorPostContact;
            bool DynamicHoming;
            float DynamicHomingActivationTime;
            bool StaticHoming;
            float MaxHomingRotationSpeed;
            float VelocityHomingBarrier;
            float HomingAimOffset;
            float HomingVerticalAimOffset;
            bool CanBecomeDumb;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44A55874C3E98370, 0x280)]
        public class ThrowableRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFA22816E51EA382C, 0x210)]
        public class ThrowableResource : EntityResource
        {
            Ref<EffectComponentResource> TrailEffectComponent;
            bool RemoveTrailOnDestroy;
            Ref<AIAuralStimulusResource> BounceSoundStimulus;
            Ref<AIHapticStimulusResource> ContactHapticStimulus;
            Ref<AIVisualStimulusResource> VisualStimulus;
            Ref<AIThrowableOriginInfoMessageResource> ThrowableOriginInfoMessage;
            Ref<AIThrowableOriginInfoMessageResource> ThrowableOriginInfoMessageOnImpact;
            Ref<AIThrowableOriginInfoMessageResource> ThrowableOriginInfoMessageOnContact;
            bool CreateHapticStimuliOnce;
            bool CreateBounceSoundStimuliOnce;
            bool CreateWhizzByStimulus;
            bool IsVisualStimulusEmitter;
            String IdentifiedSignalType;
            bool EnableDangerArea;
            bool IsEnemyToAll;
            bool AdoptEmitterFaction;
            float OffensiveCapability;
            float ReachableRadius;
            float PerceivedDamageRadius;
            bool ExplodeWhenDead;
            bool EnableTrajectoryDangerArea;
            float TrajectoryDangerAreaRadius;
            Ref<ExplosionResource> ExplosionResource;
            bool ActivateOnUse;
            float LifeTime;
            float LifeTimeAfterExplode;
            float RemovalDistance;
            bool Enabled;
            float TimeToStart;
            float FallAcceleration;
            float LateralAcceleration;
            Vec3 RotationSpeed;
            bool CanBeDistractedByChaff;
            float ChaffConeAngle;
            float ChaffConeRange;
            float VisualPathOffsetBlendTime;
            Ref<SoundResource> FlySoundResource;
            bool RequiresContactPointValidate;
            Ptr<EntityAction> ActionWhenExplode;
            bool ExplodeOnLastCollisionPosition;
            float BounceSpeedLimiter;
            bool BounceFromHumanoids;
            bool IgnoreCollisionWithPhysicsCapsules;
            float ThreatRemovalTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECE1EF0CD1E0229C, 0x38)]
        public class TieRopeAction : EntityAction
        {
            Ref<RopeManagerComponentResource> RopeManagerComponentResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8FB0349003667A31, 0x110)]
        public class TileBasedStreamingStrategyInstance : StreamingStrategyInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x58834E044E7D8AA2, 0x88)]
        public class TileBasedStreamingStrategyResource : StreamingStrategyResource
        {
            bool HintAllTiles;
            int TileSize;
            int TileBorder;
            ISize GridSize;
            Array<Ref<StreamingTileResource>> Tiles;
            int HighLODDiameter;
            int LowLODDiameter;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA5ECD8A589C1004C, 0x38)]
        public class TimeOfDayQuestTrigger : QuestTrigger
        {
            int Hour;
            int Minute;
            bool TriggerImmediatelyIfLater;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA54CB0F7375EF758, 0x30)]
        public class TimeOfDayQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C8913A1822CF416, 0x58)]
        public class TimedEventInstance : EventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32283560F9D7F57B, 0x38)]
        public class TimedEventResource : EventResource
        {
            int StopFrame;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DC078D5775B97F1, 0x30)]
        public class TimerQuestTrigger : QuestTrigger
        {
            float Duration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3F6729D8F142C67F, 0x28)]
        public class TimerQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4ADAA6E6E72D9C3A, 0xB0)]
        public class TimerTag : Tag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB4876E1FE0966DA, 0xD8)]
        public class ToastMessageTag : VisualTag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFD1F346C87AB8C7D, 0x150)]
        public class ToastMessageWidget : Widget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x829DB24DC968A63, 0x28)]
        public class ToolCraftingViewController : CraftingViewController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x93177A694025DBD, 0xB0)]
        public class ToolRestoreState : ItemRestoreState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5303AA2B039AE562, 0x78)]
        public class TrackDamageOverTimeComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC60729B51DED36C, 0x48)]
        public class TrackDamageOverTimeComponentResource : EntityComponentResource
        {
            float Time;
            float Damage;
            Ptr<EntityAction> ExceededAction;
            Array<Ref<DamageTypeResource>> IgnoredDamageTypes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD91AF0EB764D42D9, 0x38)]
        public class TrackObjectiveAction : EntityAction
        {
            bool EnableTracking;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3C276F9A49895990, 0xB0)]
        public class TrackableComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBA8965FC544469A, 0x30)]
        public class TrackableComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9284CDCCB2739DC, 0x48)]
        public class TrackableComponentResource : EntityComponentResource
        {
            Ref<EntityResource> TrackEntityResource;
            float DistanceBetweenTrailPoints;
            float InitialTrackLength;
            float InitialTrackSpeed;
            float TrackEntityViewDistance;
            float TrackLifetime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x77B1590C6BAE49F9, 0x58)]
        public class TrackingComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44AD8FD459EA8D79, 0x28)]
        public class TrackingComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD9BA327E8A0154B, 0x120)]
        public class TrackingPath : Route
        {
            Ref<ConditionResource> DisplayCondition;
            Ref<TrackingPathSettings> PathSettings;
            Ref<GraphProgramResource> TaggedGraphProgram;
            Array<TrackingPathSegment> TrackingPathSegments;
            WorldBoundingBox3 BoundingBox;
            float PathLength;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE4B0BA87921D83, 0xB0)]
        public class TrackingPathNode : RouteNode
        {
            Ref<TrackingPathSettings> OverridePathSettings;
            Array<Ref<TrackingPathSpecificFootstep>> SpecificFootsteps;
            bool GeneratePath;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC3A49FE3D204CB4E, 0x40)]
        public class TrackingPathQuestTrigger : QuestTrigger
        {
            GGUUID TrackingPathUUID;
            float CompletionRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1641791AB9B0746, 0x28)]
        public class TrackingPathQuestTriggerInstance : EntityQuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A0DB639E5CBC85E, 0x60)]
        public class TrackingPathSegment
        {
            Array<WorldPosition> PositionSamples;
            Array<TrackingPathSegmentTrail> TrailData;
            WorldBoundingBox3 BoundingBox;
            float Length;
            float DistanceFromStart;
            bool Isconnected;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B83833773F57EA, 0x10)]
        public class TrackingPathSegmentTrail
        {
            Array<WorldTransform> FootstepTransforms;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE193C5B74D86566F, 0x50)]
        public class TrackingPathSettings : Resource
        {
            Ref<SoundResource> TagSound;
            Ref<SoundResource> UnTagSound;
            Array<Ref<TrackingPathTrailBaseResource>> Trails;
            float Smoothness;
            float MaxViewRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x39D76F5477894941, 0x70)]
        public class TrackingPathSpecificFootstep : WorldNode
        {
            Ref<EntityResource> FootstepResource;
            bool IsShownOutsideFocus;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52D9A103B65CAD9A, 0xE0)]
        public class TrackingPathTrailBaseResource : Resource
        {
            Mat44 Matrix;
            FRange DistanceBetweenFootsteps;
            FRange HorizontalRotationAngle;
            ETrackingPathUpBlendType UpBlendingType;
            float UpBlendingFactor;
            float StartDistanceOffset;
            bool SnapToGround;
            bool IsShownOutsideFocus;
            float OffsetForBackAndForthPatrol;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xECF612AB47D30723, 0x100)]
        public class TrackingPathTrailEntityResource : TrackingPathTrailBaseResource
        {
            Array<Ref<EntityResource>> FootStepResources;
            String VariableNamePathLength;
            String VariableNameDistanceFromStart;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBE8C712186F920DC, 0xF0)]
        public class TrackingPathTrailMeshResource : TrackingPathTrailBaseResource
        {
            Array<Ref<StaticMeshResource>> Meshes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24691484AAD7A2AC, 0x100)]
        public class TrackingPathTrailPrefabResource : TrackingPathTrailBaseResource
        {
            Array<Ref<PrefabResource>> Prefabs;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAC15A37495E0223, 0x50)]
        public class TradeItemsQuestTrigger : QuestTrigger
        {
            Array<Ref<EntityResource>> Items;
            Array<GGUUID> TraderSpawnSetupUUIDs;
            int Amount;
            bool GiveItems;
            bool MustHaveBeenSpawnedThroughGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E00E295A4F0DCF9, 0x28)]
        public class TradeItemsQuestTriggerInstance : QuestTriggerInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x10F83C0D54924456, 0x60)]
        public class TrapComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x16D5FB1AA8AE1A68, 0x28)]
        public class TrapComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E80A04120371492, 0x28)]
        public class TravelArea : CoreObject
        {
            Ref<TerrainHull> Hull;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3A3B759CEA6D701F, 0x90)]
        public class TraversalGroup : ParentWorldNode
        {
            String Name;
            Array<Ref<PrefabInstance>> Children;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA4D617BBD772C207, 0x80)]
        public class Triangle2D
        {
            Vec2 V0;
            Vec2 V1;
            Vec2 V2;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4E6D1D50B63062A, 0x38)]
        public class TriggerExposedActionAction : EntityAction
        {
            String Action;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE1030E4AF8D4AD2E, 0x40)]
        public class TriggerSoundMixAction : EntityAction
        {
            Ref<SoundMixResource> SoundMixResource;
            bool OverrideMixZones;
            float FadeTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA19538A907880072, 0x40)]
        public class TrophyResource : Resource
        {
            int ID;
            Ref<EntitlementResource> Entitlement;
            Ref<ConditionResource> UnlockCondition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B72B6C3FD5396B8, 0x60)]
        public class TrophySystem : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x738DBDFF5BC418A4, 0x60)]
        public class TrophySystemResource : Resource
        {
            Array<Ref<TrophyResource>> Trophies;
            Ref<TrophyResource> EquipmentModificationTrophy;
            Ref<TrophyResource> SpearEquipmentModificationTrophy;
            Ref<TrophyResource> AllDLCPerksAcquiredTrophy;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD01B7C6605DB3540, 0x58)]
        public class TurbineContext : RTTIRefObject
        {
            String RegionID;
            String NodeID;
            String InstanceID;
            int GameID;
            String EncryptionKey;
            String ServerIP;
            int ServerPort;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x726763E4627853A2, 0x5B0)]
        public class Turret : ControlledEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5191C0A15C435CB, 0x1D0)]
        public class TurretAiController : TurretController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x74BAAA68DEBDE1A4, 0x130)]
        public class TurretController : Controller
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3E020DED669C39C9, 0x290)]
        public class TurretRep : ControlledEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA11C961C12BE4198, 0x238)]
        public class TurretResource : ControlledEntityResource
        {
            bool InitiallyClosed;
            bool SelfDestructWhenAmmoEmpty;
            bool GuessAITargetEntity;
            Ref<AIVisualStimulusResource> VisualStimulus;
            String AimHelper;
            Ref<SoundResource> AimRotationSound;
            Ref<TurretTargetingLasersResource> TurretTargetingLasersResource;
            bool HidePhysicsWhenClosed;
            bool SkipModelUpdateWhenClosed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7F9897B52252FC15, 0x50)]
        public class TurretTargetingLasersResource : Resource
        {
            Ref<LaserBeamResource> LaserBeamResource;
            int NumLasers;
            float ScanningLength;
            bool UseMaxTargetingLength;
            float MaxTargetingLength;
            float TargetingFollowFactor;
            float TargetingFollowAcceleration;
            float TargetingFollowDeceleration;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EAEDD40CB4CD8AE, 0xB0)]
        public class TwoJointIkBendConfig
        {
            Mat44 BaseBindMatrix;
            Vec3 FixedVtx0;
            Vec3 FixedVtx1;
            Vec3 FixedVtx2;
            Vec3 FixedVtx3;
            int16 JointIdx0;
            int16 JointIdx1;
            int16 JointIdx2;
            float RelativeUpperExtent;
            float LowerBendRatio;
            float MotionDamping;
            float Stiffness;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3885AF02C86A71F0, 0x40)]
        public class Typeface : Resource
        {
            Array<Ref<TypefaceStyle>> Styles;
            float Tracking;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF791ABF590F3ABB2, 0x80)]
        public class TypefaceStyle : Resource
        {
            Vec2 Offset;
            FRGBAColor General_Color;
            FRGBAColor Shadow_Color;
            Ref<FontResource> Font;
            String StyleName;
            float FontSize;
            float BlurSize;
            float Strength;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1303AE560875873A, 0x80)]
        public class UIEffect : RTTIObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAD2E81EBBB1CD54A, 0x70)]
        public class UIEffectResource : Resource
        {
            Ref<RenderEffectResource> RenderEffectResource;
            RGBAColor Color;
            FRect UVRect;
            Array<UITextureBindingOverride> Textures;
            Array<ShaderVariableBinding> ShaderVariables;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B39192B72338131, 0x40)]
        public class UIGraphData : RTTIRefObject
        {
            Array<float> GraphData;
            float MinYView;
            float MaxYView;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x81850A88CA7D2FF9, 0x10)]
        public class UIRect : IRect
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9C78E9FDC6042A60, 0x50)]
        public partial class UITexture : Resource, RTTI.IExtraBinaryDataCallback
        {
            String TextureName;
            ISize Size;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCD294018F2E7822B, 0x10)]
        public class UITextureBindingOverride
        {
            String TextureName;
            Ref<UITexture> Texture;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17621276907D7EB1, 0x40)]
        public class UnlockableFacePaint : Resource
        {
            Ref<LocalizedTextResource> MenuText;
            Ref<RenderEffectShaderOverridesResource> ShaderOverrides;
            EDifficulty NewGamePlusCompletedDifficulty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x668B3C91CEA3F738, 0x38)]
        public class UnlockableFocusModel : Resource
        {
            Ref<LocalizedTextResource> MenuText;
            EDifficulty NewGamePlusCompletedDifficulty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x273D17A8F79FE68B, 0xA0)]
        public class UnmountEventInstance : PausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1A68EBFADF859943, 0x50)]
        public class UnmountEventResource : PausableEventResource
        {
            Ref<EntityActorResource> InteractiveEntityActorResource;
            bool MoveAfterDismount;
            String PostureAfterDismount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x811807D43222F32F, 0x28)]
        public class UpdateClanRequest : RTTIRefObject
        {
            String Description;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x807E13D42439A2D1, 0x70)]
        public class UpgradableStackableComponent : StackableComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x740369B64007CE80, 0x50)]
        public class UpgradableStackableComponentResource : StackableComponentResource
        {
            Ref<IntegerFact> UpgradeLevelFact;
            Array<int> UpgradedLimits;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF0DC14C8DC72CA7E, 0x28)]
        public class UpgradeCraftingViewController : CraftingViewController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC6355B9420CC3CA6, 0x58)]
        public class UpgradeRecipe : ItemRecipe
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9DE0569F4D1CD95B, 0x40)]
        public class UseInteractiveEntityAction : EntityAction
        {
            bool Immediate;
            String UseLocation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24EEAB700C50B1D3, 0x110)]
        public class UseLocation : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4441FA418BE132B5, 0xC8)]
        public class UseLocationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x909C1EE966539B74, 0x70)]
        public class UseLocationComponentResource : EntityComponentResource
        {
            bool IgnoreOwnership;
            bool DisableAfterUse;
            Ref<UseLocationResource> UseLocationResource;
            String HelperName;
            Ref<UseLocationConditionSet> UseLocationConditionSet;
            Ptr<EntityAction> UseAction;
            Ptr<EntityAction> UseActionOnUser;
            Ptr<EntityAction> OnClaimedAction;
            Ptr<EntityAction> OnClaimedActionOnUser;
            Ptr<EntityAction> OnReleaseClaimAction;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA0F039EB2C51454C, 0x30)]
        public class UseLocationCondition : Resource
        {
            Ref<LocalizedTextResource> FailMessage;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x545F2169921C394D, 0x30)]
        public class UseLocationConditionCanPickUpExclusiveWieldItems : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD37F373399AA2679, 0x40)]
        public class UseLocationConditionFitsInInventory : UseLocationCondition
        {
            Ref<EntityResource> EntityResource;
            int Amount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDAC2DF2FB8AE3A93, 0x40)]
        public class UseLocationConditionHasBoolProperty : UseLocationCondition
        {
            BoolPropertyLink PropertyLink;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCAF3AFADDB751595, 0x40)]
        public class UseLocationConditionHasBooleanFact : UseLocationCondition
        {
            Ref<BooleanFact> Fact;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BD8DE154D858321, 0x48)]
        public class UseLocationConditionHasInventoryItem : UseLocationCondition
        {
            String Name;
            Ptr<InventoryEntityResource> Resource;
            ECheckQuestItems CheckQuestItems;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE9BB79A72ADD226A, 0x40)]
        public class UseLocationConditionHasScriptProperty : UseLocationCondition
        {
            String Name;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54DB86AD22D838BA, 0x38)]
        public class UseLocationConditionInventoryEmpty : UseLocationCondition
        {
            bool Empty;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72C7825A72E36FA8, 0x30)]
        public class UseLocationConditionIsAi : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA8D4350F1690FF43, 0x40)]
        public class UseLocationConditionIsAttachedToAnnotationWithTag : UseLocationCondition
        {
            String Tag;
            bool UsableEntityMustBeAnnotationOwner;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD7B80C74B7D1988C, 0x30)]
        public class UseLocationConditionIsEnemy : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A8C67F7B66E4396, 0x30)]
        public class UseLocationConditionIsEntityReachable : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EFBFD785A1EBC62, 0x30)]
        public class UseLocationConditionIsEntityVisible : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x79ADE02949BA729A, 0x30)]
        public class UseLocationConditionIsHumanoid : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55AECEE728B2D784, 0x30)]
        public class UseLocationConditionIsInstigator : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x19D89BC95A6B81A2, 0x50)]
        public class UseLocationConditionIsLookingAtLocation : UseLocationCondition
        {
            Vec3 LookAtPoint;
            float LookAtAngle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFFFE04CA09A8DCE1, 0x30)]
        public class UseLocationConditionIsPlayer : UseLocationCondition
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFB653AA93B5938A0, 0x38)]
        public class UseLocationConditionIsSpecifiedEntity : UseLocationCondition
        {
            Ref<EntityResource> EntityResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x78026BEDFDB14FAE, 0x48)]
        public class UseLocationConditionSet : Resource
        {
            Array<Ref<UseLocationCondition>> RequiredConditions;
            Array<Ref<UseLocationCondition>> DisallowedConditions;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1AAD591A3F43BCED, 0x40)]
        public class UseLocationConditionUserHasBoolProperty : UseLocationCondition
        {
            BoolPropertyLink PropertyLink;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x654C3AC4887B0B53, 0x40)]
        public class UseLocationConditionUserHasBooleanFact : UseLocationCondition
        {
            Ref<BooleanFact> Fact;
            bool Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB250325EADBFB212, 0x40)]
        public class UseLocationConditionUserHasEnumFact : UseLocationCondition
        {
            Ref<EnumFact> Fact;
            Ref<EnumFactValue> Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x303E92F79DF606E0, 0x40)]
        public class UseLocationConditionUserHasScriptProperty : UseLocationCondition
        {
            String Name;
            String Value;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72911C6071B1A9FB, 0x38)]
        public class UseLocationCondtionIsMounted : UseLocationCondition
        {
            bool FullyMounted;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x282F68B102473ADC, 0x110)]
        public class UseLocationGame : UseLocation
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDD0BA540079B10F, 0x60)]
        public class UseLocationGraphCondition : UseLocationCondition
        {
            Ref<GraphProgramResource> Condition;
            Ref<OverrideGraphProgramResource> OverrideCondition;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4EA28B51044715A3, 0xD0)]
        public class UseLocationInfo
        {
            String Name;
            Ref<UseLocationConditionSet> ConditionSet;
            Ptr<EntityAction> UseAction;
            Ptr<EntityAction> UseActionOnUser;
            Ref<UseLocationResource> Resource;
            ERelativeUseLocationPosition RelativePosition;
            Vec3 Offset;
            Mat44 UseBoxMatrix;
            Array<UserModeInfo> UserModes;
            bool HasLookAtPoint;
            Vec3 LookAtPoint;
            bool UsableByPlayer;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x358E7BF4D49CB3E5, 0x70)]
        public class UseLocationLocatorInstance : LocatorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x86688CD6745AA531, 0x48)]
        public class UseLocationLocatorResource : LocatorResource
        {
            String UseLocationName;
            Ref<EntityActorResource> EntityActorResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCFF8782B967C48AE, 0x30)]
        public class UseLocationPriority : Resource
        {
            int Priority;
            bool Exclusive;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17B0370E7A281416, 0xA0)]
        public class UseLocationResource : Resource
        {
            BoundingBox3 Bounds;
            Ref<UseLocationPriority> UsePriority;
            bool IsUsableByPlayer;
            bool IsUsableByAI;
            Ref<UseLocationConditionSet> ConditionSet;
            bool AutoUsePlayer;
            bool AutoUseAi;
            EUseLocationSelectionSortType SelectionSortType;
            float UseTime;
            bool IsUsableWhenInvisible;
            float MaxUseAngle;
            FRange MaxHeightDifference;
            bool ShowInHud;
            Ref<Texture> ActionIconTexture;
            Ref<LocalizedTextResource> DisplayText;
            bool WalkToUseLocation;
            float MinWalkToUseLocationSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB140DD9E513D42E1, 0xD0)]
        public class UseLocationResourceGame : UseLocationResource
        {
            bool IsSpherical;
            bool IsOnlyUsableByHumanoids;
            bool NeedsToBeInFrontOfPlayer;
            bool NeedsLineOfSight;
            bool InterruptUseOnDamage;
            EUseLocationType Type;
            bool MustDismount;
            bool MustStowWeapons;
            bool WhenStowingDoItImmediate;
            EStance UseStance;
            EDeviceFunction UseFunction;
            BoolPropertyLink AllowUseOverrideProperty;
            Ref<SoundResource> UseDoneSound;
            bool ShowBusyIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4A2DE7A671ADDA9F, 0x58)]
        public class UseSpeedModifierComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x843C120756096BA9, 0x40)]
        public class UseSpeedModifierComponentResource : EntityComponentResource
        {
            float UseSpeedModifier;
            Array<Ref<UseLocationResource>> UseLocations;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFBE1E5F4D3DBED3F, 0x18)]
        public class UsedEntityScoreSettings : RTTIObject
        {
            Ref<StatsClassResource> StatsClass;
            int PointsPerKill;
            int PointsPerKillAssist;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x54B32F659E7DEAF7, 0x130)]
        public class UserComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x27E9CB5FA7ABA6B4, 0x50)]
        public class UserComponentResource : EntityComponentResource
        {
            BoundingBox3 UseBox;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x962D59A0E14D867B, 0x10)]
        public class UserDamageModifier
        {
            Ref<DamageTypeResource> DamageTypeResource;
            float DamageFactor;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x30B6DB126F493687, 0x80)]
        public class UserModeInfo
        {
            ECarryModes Carry;
            EStance Stance;
            bool Moving;
            bool Falling;
            String AnimationState;
            String AnimationTag;
            bool ForceToAnimState;
            int MountPosition;
            Mat44 AnimationMatrix;
            EMountDismountLocation Location;
            uint32 PathCost;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BF789B795CB64E6, 0x40)]
        public class ValueStatDisplayEntry : StatDisplayEntry
        {
            int StatNumberValue;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9E2F48BBD378DBB3, 0x680)]
        public class Valve : MountableEntity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x710138314E5B3295, 0x1B0)]
        public class ValveAiController : ValveController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBAA307AC249A5851, 0x1B0)]
        public class ValveController : InteractiveEntityController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23BA2936BE43CB4C, 0x1C0)]
        public class ValveJoystickController : ValveController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD813E5730153A88F, 0x360)]
        public class ValveRep : InteractiveEntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE5D0078AAAE07716, 0x348)]
        public class ValveResource : MountableEntityResource
        {
            float MinAngle;
            float MaxAngle;
            float InitialAngle;
            float MinHandAngle;
            float MaxHandAngle;
            float MaxRotationSpeed;
            String ValveBoneName;
            float DisableValue;
            float RepresentationMinHandAngle;
            float RepresentationMaxHandAngle;
            Ref<SoundResource> RotationSound;
            Ref<RumbleResource> RotationRumble;
            Ref<RumbleResource> EndRumble;
            Ref<CurveResource> RumblePerValueCurve;
            String ValueShaderVariableID;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x85086DAF59FF8BDA, 0x78)]
        public class VantageComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD60F03CB22A8B1E5, 0x60)]
        public class VantageComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB34064332C1EE620, 0x50)]
        public class VantageComponentResource : EntityComponentResource
        {
            Ref<UseLocationResource> UseLocationResource;
            Ref<Texture> VantageTextureOverride;
            Ref<WorldNode> VantagePointOfInterest;
            Vec3 VantageOffset;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x934401FAAE8B0367, 0x128)]
        public class VariableActorInstance : EntityActorInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC26D6704B3133F98, 0x80)]
        public class VariableActorResource : EntityActorResource
        {
            Ref<SequenceEntityVariable> EntityVariable;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB1976373A887B95B, 0x30)]
        public class VariableBindingWithHandle : ShaderVariableBinding
        {
            HwBindingHandle VarBindingHandle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x75E82001792C4123, 0x1080)]
        public class VaultDetectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDB7813D4E82DB654, 0x90)]
        public class VaultDetectionComponentResource : EntityComponentResource
        {
            Ref<SkinnedModelResource> ModelResource;
            Array<Ref<HumanoidVaultTransition>> Transitions;
            Ref<VaultSurfaceDetectionSettings> WalkJogVaultSurfaceDetectionSettings;
            Ref<VaultSurfaceDetectionSettings> SprintVaultSurfaceDetectionSettings;
            Ref<VaultSurfaceDetectionSettings> CrouchedVaultSurfaceDetectionSettings;
            Ref<VaultSurfaceDetectionSettings> SwimmingVaultSurfaceDetectionSettings;
            TagPropertyLink DisallowVaultableTagProperty;
            bool AllowVaultingOverDeadControlledEntities;
            Array<MaterialType> DisallowMaterials;
            bool AllowChainedVaults;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF4648A55975DD022, 0x80)]
        public class VaultSurfaceDetectionSettings : Resource
        {
            float VerticalCollisionDetectionRadius;
            float HorizontalCollisionDetectionRadius;
            float CollisionAboveDetectionRadius;
            float MaxDifferenceWithInitialContact;
            FRange CollisionDetectionHeightRange;
            float VerticalCornerCollisionRadius;
            float VerticalCornerCollisionOffset;
            float HorizontalCornerCollisionRadius;
            float HorizontalCornerCollisionOffset;
            Ref<CurveResource> VerticalCollisionCheckDistance;
            Ref<CurveResource> HorizontalCollisionCheckDistance;
            Ref<CurveResource> VaultOffCollisionCheckDistance;
            float LandingCollisionDetectionRadius;
            Ref<CurveResource> LandingFloorCheckForwardDistanceCurve;
            float MinFloorHeightDifference;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEF5867B44F765A66, 0x10)]
        public class Vec2
        {
            float X;
            float Y;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B85BFAEC422A57E, 0x8)]
        public class Vec2Pack
        {
            float X;
            float Y;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4760E98FA8545BCF, 0x10)]
        public class Vec3
        {
            float X;
            float Y;
            float Z;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96958ADF649DC40C, 0xC)]
        public class Vec3Pack
        {
            float X;
            float Y;
            float Z;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40C0A682D38DA690, 0x30)]
        public class Vec3Property : Vec3PropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x90E1D4F93D4496D5, 0x30)]
        public class Vec3PropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9418F74B748365DE, 0x8)]
        public class Vec3PropertyLink : PropertyLinkBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ref<Vec3PropertyBase> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA82D9E5C7F57270, 0x10)]
        public class Vec4
        {
            float X;
            float Y;
            float Z;
            float W;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x938A0B7F8332D194, 0x10)]
        public class Vec4Pack
        {
            float X;
            float Y;
            float Z;
            float W;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4B792B94DD853565, 0xB0)]
        public class VegetationCollisionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDE7726E094BD47E1, 0x70)]
        public class VegetationCollisionComponentResource : EntityComponentResource
        {
            String HelperNode;
            Vec3 StartOffset;
            Vec3 EndOffset;
            float Radius;
            Ref<CurveResource> RadiusByVelocityCurve;
            bool AlignToEntity;
            bool AttachToCamera;
            bool UseHmanoidCapsule;
            bool ApplyDownForce;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x481DCE5CC99F176D, 0xE0)]
        public class VegetationCoverComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF94DEF7AB4B4960E, 0x70)]
        public class VegetationCoverComponentResource : EntityComponentResource
        {
            bool DisableFootstepStimuliWhenHidden;
            bool DisableBodyVisualStimuliWhenHidden;
            Ptr<EntityAction> OnActivateStealthAction;
            Ptr<EntityAction> OnDeactivateStealthAction;
            Ref<GraphProgramResource> StealthCondition;
            float EnterStealthAtmosphereRadius;
            float ExitStealthAtmosphereRadius;
            String HelperName;
            bool ShouldAlignLineChecksWithWorld;
            Array<String> LoweredVisualNodeBones;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x14495130261966AC, 0xB0)]
        public class VegetationInstance : WorldNode
        {
            RTTIRefObjectSet base_RTTIRefObjectSet;
            Ref<VegetationResource> Resource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x469ECEBE245DC115, 0x600)]
        public class VegetationResource : Resource
        {
            Array<Ref<BiotopeBase>> Biotopes;
            bool FlipMasks;
            BoundingBox3 Bounds;
            Array<Ref<HulledMesh>> CreatedMeshes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBBAB0E0254767A94, 0x28)]
        public partial class VertexArrayResource : BaseResource, RTTI.IExtraBinaryDataCallback
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB32D8C5365EF516B, 0x10)]
        public class VertexDeltaDeformation
        {
            Vec3 DeltaPos;
            uint8 DeltaNrmX;
            uint8 DeltaNrmY;
            uint8 DeltaNrmZ;
            uint8 VertexIndex;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2765F3E5860613A8, 0x4)]
        public class VertexElementSet
        {
            uint32 SetData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x47C11FFCA2C84300, 0x20)]
        public class VertexSkin
        {
            int16 X;
            int16 Y;
            int16 Z;
            uint8 Weight1;
            uint8 Weight2;
            uint8 Weight3;
            uint8 Weight4;
            uint8 Weight5;
            uint8 Weight6;
            uint8 Weight7;
            CompressedUnitVector3B N;
            uint16 Bone0;
            uint16 Bone1;
            uint16 Bone2;
            uint16 Bone3;
            uint16 Bone4;
            uint16 Bone5;
            uint16 Bone6;
            uint16 Bone7;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x692152594647BDB7, 0x26)]
        public class VertexSkinNBT
        {
            int16 X;
            int16 Y;
            int16 Z;
            uint8 Weight1;
            uint8 Weight2;
            uint8 Weight3;
            uint8 Weight4;
            uint8 Weight5;
            uint8 Weight6;
            uint8 Weight7;
            CompressedUnitVector3B N;
            uint16 Bone0;
            uint16 Bone1;
            uint16 Bone2;
            uint16 Bone3;
            uint16 Bone4;
            uint16 Bone5;
            uint16 Bone6;
            uint16 Bone7;
            CompressedUnitVector3B B;
            CompressedUnitVector3B T;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x56C994DC52D6F42C, 0x18)]
        public class VertexStreamBindingDesc
        {
            String Name;
            String SemanticName;
            EVertexElement VertexElement;
            ESRTElementFormat DataFormat;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A166AFA9C1066AC, 0x20)]
        public class VictimPropertyStatMap
        {
            EPlayerScoreStat Stat;
            BoolPropertyLink Property;
            Ref<ScoreResource> ScoreEvent;
            EPlayerKilledDataBits KillFlag;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDEF332645422FE2F, 0x2C0)]
        public class ViewDependentEntity : Entity
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF83C9F219E46AD1C, 0x260)]
        public class ViewDependentEntityRep : EntityRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A3D54D6C88C30FB, 0x130)]
        public class ViewDependentEntityResource : EntityResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7423E54FD9054BAE, 0x60)]
        public class ViewFrustumInfo
        {
            WorldTransform WorldTransform;
            float Near;
            float Far;
            float Top;
            float Bottom;
            float Left;
            float Right;
            EProjectionMode ProjectionMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF9B4734E45899331, 0x50)]
        public class ViewportSetup
        {
            String Name;
            float FOVMultiplier;
            float FPFOVMultiplier;
            Array<IRect> Viewports;
            Array<IRect> Clearports;
            float AspectRatioMultiplier;
            bool LODFadingEnabled;
            float LODDistanceMultiplier;
            float TextureMipMapBias;
            float LightingFOVScale;
            float LightingFOVBias;
            float MotionVectorScale;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF1595FBD10A4412C, 0x38)]
        public class ViewportSetupsResource : Resource
        {
            Array<ViewportSetup> ViewportSetups;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC06C5EBC4440BE84, 0x50)]
        public class VignetteSettingsResource : Resource
        {
            float InnerRadius;
            float OuterRadius;
            FRGBAColor Color;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x292296F1E282F5AC, 0x38)]
        public class VirtualRTTIAttribute : CoreObject
        {
            String AttributeName;
            String Type;
            String Group;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD468A2EBDDFB6383, 0x40)]
        public class VirtualRTTIResource : Resource
        {
            Array<Ref<VirtualRTTIAttribute>> Attributes;
            String BaseClass;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x729C1ECA8813A4C7, 0xC8)]
        public class VisualTag : Tag
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC207409291D4B52F, 0x78)]
        public class VoiceComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA689B798C425CB52, 0x38)]
        public class VoiceComponentResource : EntityComponentResource
        {
            Array<Ref<VoiceSignalsResource>> Signals;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x945D109E1FBA43B6, 0x38)]
        public class VoiceResource : Resource
        {
            int VoiceID;
            EGender Gender;
            Ref<LocalizedTextResource> NameResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAB22C29E4E06E8D3, 0x40)]
        public class VoiceSignalsResource : Resource
        {
            Ref<VoiceResource> Voice;
            Array<Ref<AISignalResource>> AISignals;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC7F6C5220FC37E3, 0x38)]
        public class VolumetricAnnotation : Resource
        {
            String Identifier;
            EVolumetricAnnotationGroup AnnotationGroup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE74CE21F70F9C918, 0x60)]
        public class VolumetricAnnotationComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x61DF10A4F679474A, 0x38)]
        public class VolumetricAnnotationComponentResource : EntityComponentResource
        {
            Array<Ref<VolumetricAnnotation>> Volumes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB3A230C69CAD12B, 0xB0)]
        public class WalkAndTalkPath : Route
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCDDE45093954ABE7, 0x90)]
        public class WalkAndTalkPathEventInstance : SubGoalPausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7D3AE170B2CE4B79, 0x90)]
        public class WalkAndTalkPathEventResource : SubGoalPausableEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            UUIDRef<WalkAndTalkPath> WalkAndTalkPath;
            UUIDRef<WalkAndTalkPathNode> FromNode;
            UUIDRef<WalkAndTalkPathNode> ToNode;
            float IdealDistance;
            float ContinueDistance;
            float StopDistance;
            bool WalkIfPlayerIsAhead;
            bool PauseUntilArrival;
            bool StopExactlyAtDestination;
            Ref<AIContextHintResource> MoveHint;
            Ref<AISignalResource> AttractSignal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BB67C0222A38CDE, 0xA0)]
        public class WalkAndTalkPathNode : RouteNode
        {
            String Label;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F61C1B999BCD8F4, 0x70)]
        public class WalletComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD459E5F809AA1F8, 0x30)]
        public class WalletComponentResource : EntityComponentResource
        {
            Ref<EntityResource> CurrencyEntity;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x57F7E9BC3F71B7D, 0x110)]
        public class WarpedAnimation : Resource
        {
            String AnimationState;
            Array<String> AnimationActions;
            Array<AnimationVariableValue> AnimationVariables;
            EWarpedAnimationActions AnimationActionsTriggerType;
            int DisplacementTrackUserData;
            int DisplacementEventUserData;
            int StaticExitTrackUserData;
            int StaticExitEventUserData;
            WarpedAnimationMetrics Metrics;
            Ref<SkinnedModelResource> ModelResource;
            String DynamicAnimationVariableName;
            EWarpedAnimationDynamicVariableSource DynamicAnimationVariableSource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCE2F48C1703FA4B3, 0x80)]
        public class WarpedAnimationMetrics
        {
            Mat44 RootTrajectory;
            float RootHeadingDelta;
            float Duration;
            float DisplacementStartTime;
            float DisplacementEndTime;
            Vec3 AverageDisplacementVelocity;
            Vec3 PreBlendDisplacement;
            Vec3 PostBlendDisplacement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2D8C5D2871DDB9F2, 0xA0)]
        public class WaterDetectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5ADF990A2B0FC638, 0x30)]
        public class WaterDetectionComponentResource : EntityComponentResource
        {
            Ref<CurveResource> DepthToMovementModifierCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA9109C9656B2B669, 0x58)]
        public class WaterEffectComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6719E7B93A853BB2, 0x60)]
        public class WaterEffectComponentRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1F8238712B625EAB, 0x40)]
        public class WaterEffectComponentResource : EntityComponentResource
        {
            float MaxDistance;
            Array<WaterEffectResource> WaterEffectResources;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC1F0CBA2D62F6D30, 0x60)]
        public class WaterEffectResource
        {
            MaterialType MaterialType;
            String StartHelper;
            String EndHelper;
            Vec3 StartOffset;
            Vec3 EndOffset;
            float EffectForce;
            float WaterSystemImpulseStrength;
            float WaterSystemImpulseRadius;
            float WaterSystemImpulseInterval;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEB7E079366700C74, 0x150)]
        public partial class WaterInstance : GeometryObject, RTTI.IExtraBinaryDataCallback
        {
            Ref<WaterResource> Resource;
            BoundingBox3 LocalBounds;
            float MaxWaterDepth;
            float Amplitude;
            float CullingDistance;
            int MeshInstanceTreeSize;
            int MeshInstanceTreeDrawableSetupSize;
            Ref<WaterSystemResource> WaterSystemResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A386DEA4E50B40C, 0x40)]
        public class WaterResource : Resource
        {
            Ref<RenderEffectResource> NearRenderEffectsResource;
            Ref<RenderEffectResource> FarRenderEffectsResource;
            ESortMode SortMode;
            ESortOrder SortOrder;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8AE77AA93A675D28, 0xB8)]
        public class WaterSystemManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A49B2FF4CCBDB45, 0x38)]
        public partial class WaterSystemResource : Resource, RTTI.IExtraBinaryDataCallback
        {
            int MaxInteractiveTiles;
            int WaterSystemDataSize;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34EFD4D6DB36E7C6, 0xA0)]
        public class WaveNodeParameters
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBED1AB1BB7215208, 0x50)]
        public class WaveNodeStateInstance : StateObjectInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC50B7E670666293C, 0x20)]
        public class WaveNodeStateResource : StateObjectResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x685DC980BBF316E3, 0x70)]
        public partial class WaveResource : Resource, RTTI.IExtraBinaryDataCallback
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            public bool IsStreaming;
            [RTTI.BrokenReflectionOffset(0x0)]
            public bool UseVBR;
            [RTTI.BrokenReflectionOffset(0x0)]
            public EWaveDataEncodingQuality EncodingQuality;
            public Array<uint8> WaveData;
            public uint WaveDataSize;
            public int SampleRate;
            public uint8 ChannelCount;
            public EWaveDataEncoding Encoding;
            public uint16 BitsPerSample;
            public uint32 BitsPerSecond;
            public uint16 BlockAlignment;
            public uint16 FormatTag;
            public uint16 FrameSize;
            public int SampleCount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE65E360322A6C90B, 0x10)]
        public class WeakPtrTarget
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x536BE8A55B5CF344, 0x10)]
        public class Weapon
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A71F58CF8E6B54B, 0x100)]
        public class WeaponAccuracy : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x45C9A253332DF79, 0x58)]
        public class WeaponAccuracyResource : WeaponPartResource
        {
            Ref<AccuracySettings> AccuracySettingsSP;
            Ref<AccuracySettings> AccuracySettingsMP;
            Ref<AccuracySettings> AccuracySettingsAI;
            Ref<SpreadSettings> SpreadSettingsSP;
            Ref<SpreadSettings> SpreadSettingsAI;
            Ref<ChargedValueFloat> RecoilRoundsMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6A06B8B2ACC7F9ED, 0xA0)]
        public class WeaponAimArc : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3FC5160830BC3FD6, 0x50)]
        public class WeaponAimArcRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x472F0891A4E34F41, 0xA0)]
        public class WeaponAimArcResource : WeaponPartResource
        {
            EShowArcType ShowArcType;
            bool ShowArcWhenUnableToFire;
            Ref<RenderEffectResource> AimArcRenderEffectResource;
            float AimArcLength;
            float AimArcWidth;
            float AimArcTextureLength;
            RGBAColor AimArcColor;
            float AimArcFadeInDistance;
            float AimArcFadeOutDistance;
            Ref<RenderEffectResource> AimArcDepthHelpersRenderEffectResource;
            float AimArcDepthHelpersWidth;
            float AimArcDepthHelpersHeight;
            float AimArcDepthHelpersInitialDistance;
            float AimArcDepthHelpersInterval;
            RGBAColor AimArcDepthHelpersColor;
            Ref<RenderEffectResource> AimArcTargetRenderEffectResource;
            float AimArcTargetSize;
            float AimArcTargetOffset;
            RGBAColor AimArcTargetColor;
            Ref<EntityResource> EndPointEntityResource;
            Vec3 EndPointEntityAlignNormal;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x32B5F6CC86557167, 0xA8)]
        public class WeaponAmmoCharger : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x9A571FBC107A353C, 0xD0)]
        public class WeaponAmmoChargerRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x55797A7D8C9A0A26, 0xC8)]
        public class WeaponAmmoChargerResource : WeaponPartResource
        {
            float RetainChargeDuration;
            float DischargeDuration;
            float RetainOverchargeDuration;
            float EmergencyDischargeDuration;
            float RequiredChargedTime;
            Array<Ref<ChargedAmmoResource>> ChargedAmmoResources;
            int MaxSafeCharges;
            int ForcedDischargeCharges;
            String ChargeLevelAnimVariableName;
            String OverchargeAnimActionName;
            String ChargeMagnitudeAnimVariableName;
            Array<Ref<DamageSettings>> OverchargeDamage;
            Ref<SoundResource> ChargeSound;
            Ref<SoundResource> DischargeSound;
            Ref<ParticleSystemResource> ChargingParticles;
            Ref<ParticleSystemResource> FirstPersonChargingParticles;
            String RechargeShaderVariableID;
            Ref<RumbleResource> ChargeRumbleResource;
            Ref<RumbleResource> RetainChargeRumbleResource;
            Ref<RumbleResource> MaxChargeRumbleResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBC50DFA469AB1E44, 0x128)]
        public class WeaponAmmoTether : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x52EDFDA88FD2D675, 0x78)]
        public class WeaponAmmoTetherRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x62C9C195FBEE61A1, 0x50)]
        public class WeaponAmmoTetherResource : WeaponPartResource
        {
            Ref<GraphProgramResource> TetherGraph;
            String TetherControlParameter;
            Ref<ParticleSystemResource> TetherParticles;
            Ref<SoundResource> TetherSound;
            Ref<RumbleResource> TetherRumble;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DA1DF58DE9766C0, 0x68)]
        public class WeaponAttachmentUnlockResource : CareerUnlockResource
        {
            EAttachmentType Type;
            String LocalizerName;
            Ref<StatsClassResource> StatsClass;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x642F580128E6F1A6, 0xF0)]
        public class WeaponBowString : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCF3914CE476FDD59, 0x58)]
        public class WeaponBowStringRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6D3D6070FA5620DE, 0x60)]
        public class WeaponBowStringResource : WeaponPartResource
        {
            String BowStringJoint;
            String HandHelper;
            String BowStringAnimationVariable;
            FRange BowStringAnimationRange;
            String HoldStringAnimationTag;
            String DrawStringAnimationTag;
            Ref<SoundResource> TensionSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7FE0A25EBADC5D6, 0xD8)]
        public class WeaponCharge : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8EF30651165FADD6, 0xF0)]
        public class WeaponChargeRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAAB194EE53B3DD7A, 0x100)]
        public class WeaponChargeResource : WeaponPartResource
        {
            float InitialChargeMagnitude;
            float MaximumChargeMagnitude;
            float MinimumChargeToFire;
            float AutoFireOnChargeMagnitude;
            bool AutoChargeUp;
            bool ChargeToMinOnFireRequest;
            float ChargeUpRate;
            float ChargeDissipationRate;
            float ChargeAbortTime;
            float MaxChargeHoldTime;
            bool FireOnHoldTimeout;
            float ChargeDelay;
            bool ChargeUpWhileFiring;
            float PrepareFireTime;
            EDischargeMethod DischargeMethod;
            float DischargeTime;
            bool AbortChargeOnCancel;
            bool DelayDischargeToFireEnd;
            bool KeepChargeWhileFireRequested;
            Ref<SoundResource> ChargeSound;
            Ref<SoundResource> DischargeSound;
            Ref<SoundResource> AbortSound;
            bool ContinueParticlesWhileCharged;
            Ref<ParticleSystemResource> ChargingParticles;
            Ref<ParticleSystemResource> FirstPersonChargingParticles;
            String RechargeShaderVariableID;
            Ref<RumbleResource> ChargeRumbleResource;
            Ref<RumbleResource> MaxChargeRumbleResource;
            String ChargeAnimationAction;
            Array<AnimationVariableValue> ChargeAnimationVariables;
            String ChargeMagnitudeAnimVariable;
            EAIBodyAlignmentMode BodyAlignmentMode;
            String PrepareFireAnimationAction;
            int DurationEventUserData;
            Ref<ChargeAnimationReference> ChargeAnimReference;
            Ref<GraphProgramResource> OnStartChargingGraphProgram;
            Ref<GraphProgramResource> OnAbortChargingGraphProgram;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB6DC829CB99ABCB3, 0x70)]
        public class WeaponCombinationUnlockResource : InventoryUnlockResource
        {
            Array<Ref<WeaponAttachmentUnlockResource>> Attachments;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2DD0DCC05554FE41, 0x78)]
        public class WeaponCook : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x34F0B38BD50A34DE, 0x60)]
        public class WeaponCookRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x20C6AE39C5D49878, 0x30)]
        public class WeaponCookResource : WeaponPartResource
        {
            Ref<SoundResource> CookSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDA616AF04C1F80C, 0x30)]
        public class WeaponCraftingViewController : CraftingViewController
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8F687D76221B1C72, 0x30)]
        public class WeaponMarkerMapping : CoreObject
        {
            String WeaponId;
            Ref<AwarenessMarkerDisplaySettings> DisplaySettings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24B341D8E2633A5E, 0x80)]
        public class WeaponModificationComponent : EquipmentModificationComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE302A0110F9CB013, 0x48)]
        public class WeaponModificationComponentResource : EquipmentModificationComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEE5236670D78C30, 0x70)]
        public class WeaponOverheat : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEBD878C61C1303D4, 0xB8)]
        public class WeaponOverheatRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x191E14B9EA032DB9, 0x80)]
        public class WeaponOverheatResource : WeaponPartResource
        {
            float OverheatTemperature;
            float CooldownTemperature;
            float TemperaturePerRound;
            float TemperaturePerSecondWhileOperating;
            float OverheatPenalty;
            float TemperatureFalloff;
            bool MustReleaseTriggerWhenOverheated;
            float DamageOnOverheatFactor;
            float DamageWhenOverheating;
            Ref<SoundResource> OverheatedSound;
            Ref<SoundResource> OverheatedFireSound;
            String TemperatureShaderVariableID;
            Ref<CurveResource> TemperatureShaderVariableCurve;
            Ref<ParticleSystemResource> FirstPersonOverheatedFireParticles;
            Ref<ParticleSystemResource> OverheatedFireParticles;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E60FF7514AAB2E7, 0x60)]
        public class WeaponPart : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1AACC032065CF472, 0x38)]
        public class WeaponPartRep : EntityComponentRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6B3AC0FB1F44E2D0, 0x28)]
        public class WeaponPartResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB60F059F1002E9C2, 0xB8)]
        public class WeaponPreviewProjectile : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5977BEBFAB2B984E, 0x48)]
        public class WeaponPreviewProjectileResource : WeaponPartResource
        {
            Ref<AttachToHelperMoverResource> PrimaryAttachToWeaponMover;
            Ref<AttachToHelperMoverResource> SecondaryAttachToWeaponMover;
            EPreviewProjectileCreateMode PreviewProjectileCreateMode;
            bool ReloadPrimaryPreviewOnWield;
            bool KeepPreviewInHand;
            int LoadPreviewInHandEventUserData;
            int ChamberPreviewInHandEventUserData;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBF970392EB703359, 0x2F0)]
        public class WeaponRack : Entity
        {
            String ItemOne;
            String ItemTwo;
            String ItemThree;
            String ItemFour;
            String ItemFive;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1E5FA156D80DAD1B, 0x38)]
        public class WeaponRackItem : Resource
        {
            String EntityResourceName;
            String HelperNodeName;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE997FC585392B5, 0x140)]
        public class WeaponRackResource : EntityResource
        {
            Array<Ref<WeaponRackItem>> Items;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8EAD34905343F08, 0xB8)]
        public class WeaponRestoreState : ItemRestoreState
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD5FAD53DD588ED5F, 0x20)]
        public class WeaponScoreMultipliers : RTTIObject
        {
            Ref<StatsClassResource> StatsClass;
            float BodyshotKillMultiplier;
            float HeadshotKillMultiplier;
            float ExplosiveKillMultiplier;
            float KillAssistMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD20A9F70E3713E47, 0x88)]
        public class WeaponSpin : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x94B284FDE5A7B051, 0x60)]
        public class WeaponSpinRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96BF2F1C4AE5D2A9, 0x70)]
        public class WeaponSpinResource : WeaponPartResource
        {
            FRange FireDuration;
            float MinSpinRateBeforeFiring;
            Ref<CurveResource> SpinUpCurve;
            Ref<CurveResource> SpinDownCurve;
            float SpinAnglePerSecond;
            Array<float> SpinStopAngles;
            float SpinStopAnglePerSecond;
            Ref<SoundResource> SpinSound;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB023D82E193B55D9, 0x70)]
        public class WeaponSwitchEventInstance : PausableEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x794936A0834AAA6D, 0x58)]
        public class WeaponSwitchEventResource : PausableEventResource
        {
            Ref<EntityActorResource> ControlledEntityActorResource;
            bool SwitchImmediately;
            String SwitchWeaponName;
            Ref<AIWeaponPreference> SwitchWeaponPreference;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xCC61BFE9C1B667B4, 0x88)]
        public class WeaponUnlockResource : InventoryUnlockResource
        {
            Array<Ref<WeaponCombinationUnlockResource>> Combinations;
            Array<Ref<WeaponAttachmentUnlockResource>> DefaultAttachments;
            Ref<StatsClassResource> StatsClass;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEDFD164A15D109B, 0xF0)]
        public class WeaponZoom : WeaponPart
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA467B345A15BD68, 0xB0)]
        public class WeaponZoomRep : WeaponPartRep
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5C19CFF86CAA013, 0x80)]
        public class WeaponZoomResource : WeaponPartResource
        {
            Array<Ref<ZoomSetting>> ZoomSettings;
            Ref<CurveResource> AnimationCurve;
            Ref<CurveResource> TransitionCurve;
            Ref<SoundResource> ZoomedSound;
            Ref<SoundResource> TargetSound;
            Ref<SoundResource> TransitionSound;
            String ZoomInEvent;
            String ZoomOutEvent;
            String ZoomShaderVariableID;
            bool PlayerInvisible;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xED7657B9C9246227, 0x8)]
        public class WeaponsContainer
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF5C8B16B550F807B, 0x130)]
        public class WeaponsContainerComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFEEBCD0E7D6DC202, 0x28)]
        public class WeaponsContainerComponentResource : EntityComponentResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8A4D31ADB461F239, 0x30)]
        public class WeatherAmbienceCycle : AmbienceCycleBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x649FB2EE77E323DF, 0x58)]
        public class WeatherEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF12376B213EBAD39, 0x40)]
        public class WeatherEventResource : TimedEventResource
        {
            Ref<WeatherSetup> WeatherSetup;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7EE235438E4FFB2, 0x38)]
        public class WeatherGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB5034A71A2803089, 0x58)]
        public class WeatherInfluenceFactor : CoreObject
        {
            String Name;
            Ref<CurveResource> TimeOfDayFactorCurve;
            Ref<CurveResource> CloudDensityCurve;
            Ref<CurveResource> PrecipitationFactorCurve;
            Ref<CurveResource> WetnessCurve;
            Ref<CurveResource> TemperatureCurve;
            Ref<CurveResource> HumidityCurve;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EC78E733B565116, 0x58)]
        public class WeatherLimitsEventInstance : TimedEventInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA51AEE13FF59C0F1, 0x40)]
        public class WeatherLimitsEventResource : TimedEventResource
        {
            float SpeedLimit;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x794E767E98ADBB40, 0xD0)]
        public class WeatherSetup : CoreObject
        {
            String Name;
            WeatherSetupSettings Settings;
            Ref<WeatherAmbienceCycle> AmbienceCycle;
            Ref<Texture> CustomWeatherMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x99A49AFDD138EF81, 0x88)]
        public class WeatherSetupSettings
        {
            float CloudCoverage;
            float CloudCoverageVariation;
            float CloudCoverageVariationFrequency;
            float CloudCoverageNoise1Amplitude;
            float CloudCoverageNoise1Frequency;
            float CloudCoverageNoise2Amplitude;
            float CloudCoverageNoise2Frequency;
            float CloudConnectivity;
            float CloudDensityExponent;
            float CloudDensityScale;
            float CloudType;
            float CloudTypeVariation;
            float CloudTypeVariationFrequency;
            float CloudScrollSpeed;
            float CloudAnvilAmount;
            float CloudAnvilSkew;
            float CloudCustomWindDirectionBlendFactor;
            float CloudCustomWindDirection;
            float CloudCustomWindSpeed;
            float CloudHeightOffset;
            float CloudNoiseFrequency;
            float Precipitation;
            float PrecipitationVariation;
            float PrecipitationVariationFrequency;
            float RainbowIntensity;
            float SundogIntensity;
            float CirrusCloudDensity;
            float Humidity;
            FRange WindSpeed;
            FRange WindDirectionAngle;
            FRange TemperatureLimits;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x72F1332BB459B417, 0x400)]
        public class WeatherSystem : CoreObject
        {
            Ref<RenderEffectResource> SimulationRenderEffectResource;
            Array<WindSimulationForceField> WindSimulationForceFields;
            BoundingBox3 WorldBounds;
            FRange TemperatureRange;
            float WetnessDryingTime;
            float WetnessSaturationTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x173E0C16E86C8BD0, 0x140)]
        public class Widget : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x632B782993D7A050, 0xE0)]
        public class WindBox : WorldNode
        {
            String Name;
            int Priority;
            float Heading;
            float HeadingDeviation;
            float Pitch;
            float MovementModifierAlong;
            float MovementModifierInto;
            float MovementImpact;
            float VisualImpact;
            float AnimationImpact;
            int WindGustID;
            Ref<SoundResource> Sound;
            bool MustBeReplicated;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACF0C0B46D9F5ECB, 0x38)]
        public class WindGust : CoreObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xC32D9850D64B4EC1, 0x90)]
        public class WindGustResource : Resource
        {
            int ID;
            float Heading;
            float Velocity;
            FRange Duration;
            float FadeInTime;
            float FadeOutTime;
            FRange Delay;
            FRange MovementMultiplier;
            FRange PhysicsImpactMultiplier;
            FRange RagdollImpactMultiplier;
            FRange VisualImpactMultiplier;
            FRange AnimationImpactMultiplier;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF578FB253A166409, 0xC0)]
        public class WindManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE59C9EB9DB2F5FD, 0x10)]
        public class WindSimulationForceField
        {
            Ref<ForceFieldResource> ForceFieldResource;
            float WindSpeed;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAFC13D1D2E565B0E, 0x30)]
        public class WorldBoundingBox3
        {
            WorldPosition Min;
            WorldPosition Max;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3D444A3E341AA67C, 0x20)]
        public class WorldBoundingSphere
        {
            WorldPosition Position;
            float Radius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2A430B95FBB2BA45, 0x90)]
        public class WorldDataArea : WorldDataShape
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xFCC70F7D776AEAB9, 0x30)]
        public class WorldDataAreaGroup : WorldDataAreaGroupBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7176D0C787CA1FDA, 0x30)]
        public class WorldDataAreaGroupBase : CoreObject
        {
            Array<Ref<RTTIRefObject>> Stack;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4C038D96B49D3794, 0x38)]
        public class WorldDataAreaStack : WorldDataAreaGroupBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF5DCE21987BAE3CB, 0x38)]
        public class WorldDataBakeOnly : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7359066B18A65205, 0x50)]
        public class WorldDataBakeSettings : Resource
        {
            bool ReadsPreviousLayers;
            EPixelFormat DataFormat;
            EPixelFormat OpacityFormat;
            String BakeShaderName;
            String RotateShaderName;
            EWorldDataBakeBlendMode DataBlendMode;
            EWorldDataBakeBlendMode OpacityBlendMode;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEEEA1EBEBDA3D8B2, 0x50)]
        public class WorldDataEcotopeIndexMapEntry : WorldDataGeneratedMapEntry
        {
            Ref<WorldDataMap> EcotopeABCDMap;
            Ref<WorldDataMap> EcotopeEFGHMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE10D08F90D56AA3A, 0x10)]
        public class WorldDataEcotopeIndexMapping
        {
            int32 EcotopeIndex;
            Ref<WorldDataType> WorldDataType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x8BB588A1C83DBDD1, 0x30)]
        public class WorldDataEcotopeIndexTable : CoreObject
        {
            Array<WorldDataEcotopeIndexMapping> Mappings;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xA7C6EE3FEECCD751, 0x78)]
        public class WorldDataGeneratedMap : WorldDataTextureMap
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x40CAA762F3FB8954, 0x38)]
        public class WorldDataGeneratedMapEntry : WorldDataTextureMapEntry
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7BD580D2BB3EF26B, 0x38)]
        public class WorldDataGroup : ExportedSymbolGroup
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3255B47FE22B3C6B, 0x30)]
        public class WorldDataMap : Resource
        {
            IVec2 GridCoordinates;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44700C323D0B4475, 0x40)]
        public class WorldDataPacking : CoreObject
        {
            Array<WorldDataPackingMap> Maps;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4BC4144FE531C434, 0x30)]
        public class WorldDataPackingMap
        {
            EPixelFormat TargetFormat;
            ISize TargetResolution;
            bool HasMipMaps;
            int StreamingMipCount;
            EImageCompressionMethod CompressionMethod;
            bool GammaSpace;
            int ActiveLODMask;
            Array<WorldDataPackingMapEntry> Entries;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xADA6AF969417E6AC, 0x10)]
        public class WorldDataPackingMapEntry
        {
            String Type;
            ETextureChannel Channel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD152CF32FAAFF667, 0xA0)]
        public class WorldDataPlacementMap : WorldDataGeneratedMap
        {
            Ref<DensityGraphProgram> DensityProgram;
            Ref<PlacementResourceRegister> PlacementRegister;
            Ref<PlacementTile> PlacementTile;
            Ref<WorldDataType> HeightDataType;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x7E3AC03C4232A0A6, 0x78)]
        public class WorldDataSampleRequestStateInstance : StateObjectInstance
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xDD6FE0DE05A962E0, 0x20)]
        public class WorldDataSampleRequestStateResource : StateObjectResource
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA218DDB881FD77F, 0x90)]
        public class WorldDataShape : ParentWorldNode
        {
            Array<Ref<WorldDataShapeNode>> Nodes;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x6BBD6E38842638E8, 0x90)]
        public class WorldDataShapeNode : ParentWorldNode
        {
            Vec3 Tangent;
            Vec2 UV;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x17E7CBD936DCC47E, 0x40)]
        public class WorldDataTerrainNormalMapEntry : WorldDataGeneratedMapEntry
        {
            Ref<WorldDataMap> TerrainHeightMap;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1026D74A58C61D2C, 0x70)]
        public class WorldDataTextureMap : WorldDataMap
        {
            Ref<Texture> ResultTexture;
            Array<Ref<WorldDataTextureMapEntry>> Entries;
            Array<uint8> SurfaceCacheData;
            EPixelFormat SurfaceCacheFormat;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x203BC181D32F2A52, 0x38)]
        public class WorldDataTextureMapEntry : Resource
        {
            Ref<WorldDataType> Type;
            ETextureChannel Channel;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB4C445271685049C, 0x38)]
        public class WorldDataTile
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x44153A852F9B775A, 0xA0)]
        public class WorldDataType : Resource
        {
            EWorldDataRttiType RttiType;
            EWorldDataAccessMode AccessMode;
            EWorldDataDecodingMode DecodingMode;
            EWorldDataTileBorderMode TileBorderMode;
            ELayerBlendOperation BlendMode;
            String DefaultValue;
            FRange Range;
            Ref<Texture> DefaultTexture;
            EPixelFormat PaintPixelFormat;
            bool GenerateProbeTexture;
            int ProbeTextureRange;
            Array<WorldDataTypeInputLayer> InputLayers;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xD4CEEE57098EDD7E, 0x48)]
        public class WorldDataTypeInputLayer
        {
            String Name;
            EWorldDataSourceDataMode SourceDataMode;
            EWorldDataInputLayerApplyMode ApplyMode;
            String DataPath;
            ETextureChannel DataChannel;
            bool DataGammaSpace;
            String OpacityPath;
            Ref<WorldDataBakeSettings> BakeSettings;
            String UIName;
            String UIDescription;
            String UIIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE7058BFB9ACA35FC, 0x580)]
        public class WorldDrawableMap : CoreObject
        {
            Ref<UIEffectResource> TileRenderEffect;
            Ref<UIEffectResource> NoGoAreaRenderEffect;
            MapTextureTile EmptyTileTextures;
            IVec2 Map_TopLeftTile;
            IVec2 Map_BottomRightTile;
            IVec2 Selection_TopLeftTile;
            IVec2 Selection_BottomRightTile;
            Array<MapTextureTileRow> MapTextureTiles;
            Ref<Texture> CloudsTexture;
            Ref<Texture> VignetteTexture;
            Ref<Texture> BorderTexture;
            Ref<Texture> CameraElevationTexture;
            Array<float> CameraElevation;
            float MaxUnZoomAmount;
            float HighestFogParallaxFactor;
            Ref<MapProjectionSettings> ProjectionSettings;
            Array<Ref<Texture>> AdditionalTextures;
            Ref<WorldMapZone> WorldZone;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE8AC94DABDE73641, 0xD0)]
        public class WorldEncounter : ParentWorldNode
        {
            String Name;
            Array<Ref<SceneInstance>> Scenes;
            float Weight;
            Array<Ref<WorldEncounterCategory>> Categories;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x96D804B315D4BF33, 0x40)]
        public class WorldEncounterCategory : Resource
        {
            Ref<ConditionResource> ConditionResource;
            float TheSameEncounter;
            float Encounters;
            float Weight;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB8B0067CA0F67231, 0x60)]
        public class WorldEncounterCategoryInstance : RTTIRefObject
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x24DDCC4009224548, 0xA0)]
        public class WorldEncounterCollection : ParentWorldNode
        {
            String Name;
            Ref<ConditionResource> ConditionResource;
            Ref<ConditionResource> DespawnConditionResource;
            bool StopOnConditionFail;
            Array<Ref<WorldEncounter>> WorldEncounters;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x1EF6CB2A7BC832CB, 0x170)]
        public class WorldEncounterManager : ObjectManager
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5A9836D86C7B209A, 0x40)]
        public class WorldEncounterManagerResource : Resource
        {
            Ref<ConditionResource> ActivateCondition;
            Ref<ConditionResource> DespawnCondition;
            float EncounterDenialRange;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xF76E2A5789499B8E, 0x40)]
        public class WorldEnvironment : Resource
        {
            Ref<WorldEnvironment> Parent;
            Ref<WorldDataType> WorldDataType;
            bool OverrideParent;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x49B0C4595AC806FC, 0xD0)]
        public class WorldMapZone : MapZone
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x929BCA2B5557865F, 0x60)]
        public class WorldNode : CoreObject
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            WorldTransform Orientation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xBBAA509D25D82AA5, 0x50)]
        public class WorldOrientedBox
        {
            WorldTransform WorldTransform;
            Vec3 Extents;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xB7FA97B1A5E636C9, 0x18)]
        public class WorldPosition
        {
            double X;
            double Y;
            double Z;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xEE48361B489F504B, 0x30)]
        public class WorldPositionProperty : WorldPositionPropertyBase
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2B2D2B68AB246D3D, 0x30)]
        public class WorldPositionPropertyBase : Property
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x51A2D4713C9F3619, 0x8)]
        public class WorldPositionPropertyLink : PropertyLinkBase
        {
            [RTTI.BrokenReflectionOffset(0x0)]
            Ref<WorldPositionPropertyBase> Property;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3723258333B81F86, 0xB8)]
        public class WorldState : RTTIRefObject
        {
            float TimeOfDay;
            bool EnableDayNightCycle;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x463EBB73980462A4, 0x40)]
        public class WorldStateResource : Resource
        {
            Ref<PropertyContainerResource> ContainerResource;
            float InitialTimeOfDay;
            float DurationOfOneDayInSeconds;
            bool InitialEnableDayNightCycle;
            bool RandomizeTimeOfDay;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x23C32AD4512B105E, 0x40)]
        public class WorldTransform
        {
            WorldPosition Position;
            RotMatrix Orientation;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x4DF16A9905F97F44, 0x38)]
        public class XpMultiplier : Resource
        {
            float Multiplier;
            Ref<LocalizedTextResource> Description;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xE137FE0D4D6C43F9, 0x50)]
        public class XpQuestReward : SummableQuestReward
        {
            Ref<LevelBasedXpReward> XpReward;
            Ref<LocalizedTextResource> XpReason;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x11C00604E952B814, 0x80)]
        public class XpRepresentationController : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x3BC176677135CC2, 0x88)]
        public class XpRepresentationControllerResource : EntityComponentResource
        {
            Ref<PlayerNotificationResource> LevelUpNotification;
            Ref<PlayerNotificationResource> MaxLevelUpNotification;
            Ref<PlayerNotificationResource> GoldenLevelIntroductionNotification;
            Ref<PlayerNotificationResource> LevelUpRewardsWithPerksNotification;
            Ref<PlayerNotificationResource> LevelUpRewardsWithoutPerksNotification;
            Ref<PlayerNotificationPriority> LevelUpNotificationPriority;
            Ref<PlayerNotificationPriority> RewardNotificationPriority;
            Ref<PlayerNotificationPriority> GoldenLevelIntroductionNotificationPriority;
            Ref<LocalizedTextResource> PerkRewardText;
            Ref<LocalizedTextResource> HealthRewardText;
            Ref<UITexture> UIPerkRewardIcon;
            Ref<UITexture> UIHealthRewardIcon;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5D8856595D7C935C, 0x40)]
        public class XpTable : Resource
        {
            Array<Ref<XpTableEntry>> Entries;
            int MaxLevelNoEntitlements;
            int GoldenLevelXPAmount;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x65D5AF959762A59, 0x40)]
        public class XpTableEntry : CoreObject
        {
            int RequiredXp;
            int PerkPoints;
            Array<Ref<EntityComponentResource>> Components;
            Ref<EntitlementResource> Entitlement;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xAA90848A8D921AA3, 0x200)]
        public class ZiplineDetectionComponent : EntityComponent
        {
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0xACB2E430A71FC0C3, 0x50)]
        public class ZiplineDetectionComponentResource : EntityComponentResource
        {
            Vec3 HandOffset;
            float DetectionRadius;
            float CollisionRadius;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x83C66C736757EE67, 0xE0)]
        public class Zone
        {
            Array<Ptr<Zone>> ExcludedZones;
            OrientedBox Volume;
            BoundingBox3 Boundingbox;
            int Priority;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x5854994E1E6DB174, 0xC8)]
        public class ZoomSetting : Resource
        {
            Ref<CameraPropertiesSetResource> CameraProperties;
            Ref<HUDCrosshairSettings> Crosshair;
            float CrosshairAppearDelay;
            float CrosshairZoomThreshold;
            float MoveModifierWhenZoomed;
            float LookModifierWhenZoomed;
            float LookModifierWhenZoomedMP;
            float MoveModifierWhenFiring;
            float LookModifierWhenFiring;
            float LookModifierWhenFiringMP;
            float AimNoiseFactor;
            float AimLagAimFactor;
            float AimLagMoveFactor;
            bool EnabledAutoAim;
            Ref<AutoAimHull> AimHull;
            Ref<CurveResource> AimShapeCurve;
            float DelayBeforeReloading;
            float FirstPersonHitEffectFactor;
            float InterpolationDuration;
            float ActivationDelay;
            Ref<JoystickInputModifierResource> JoystickInputModifierResource;
            float SixaxisHorizontalAimCorrection;
            float SixaxisVerticalAimCorrection;
            float SixaxisHorizontalAimEdge;
            float SixaxisVerticalAimEdge;
            float SixaxisHorizontalAimEdgeSpeed;
            float SixaxisVerticalAimEdgeSpeed;
            Ref<ScreenEffectResource> ScreenEffect;
            float ZoomShaderVariable;
            ETriState MotionControlUseTetheredPitch;
            ETriState UsesSightForAiming;
            bool UsesScope;
            Ref<AccuracyOverrideResource> AccuracyOverrideResource;
        }

        [StructLayout(LayoutKind.Sequential)]
        [RTTI.Serializable(0x2BA0CF27122ABF15, 0x28)]
        public class int_AnimationBoneMotion
        {
            int Key;
            AnimationBoneMotion Value;
        }

    }
}
