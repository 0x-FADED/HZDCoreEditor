using System;
using System.IO;

#pragma warning disable CS0649 // warning CS0649: 'member' is never assigned to, and will always have its default value 'value'.
#pragma warning disable CS0108 // warning CS0108: 'class' hides inherited member 'member'. Use the new keyword if hiding was intended.

namespace Decima.DS
{
    using int8 = System.SByte;
    using uint8 = System.Byte;
    using int16 = System.Int16;
    using uint16 = System.UInt16;
    using int32 = System.Int32;
    using uint32 = System.UInt32;
    using int64 = System.Int64;
    using uint64 = System.UInt64;

    using wchar = System.Int16;
    using ucs4 = System.Int32;

    using HalfFloat = System.UInt16;
    using LinearGainFloat = System.Single;
    using MusicTime = System.UInt64;

    using MaterialType = System.UInt16;
    using AnimationNodeID = System.UInt16;
    using AnimationTagID = System.UInt32;
    using AnimationSet = System.UInt32;
    using AnimationEventID = System.UInt32;
    using PhysicsCollisionFilterInfo = System.UInt32;

    [RTTI.Serializable(0xCDB1E170C53916BB, GameType.DS)]
    public class AAResolverSystemAssets : SystemAssets
    {
        [RTTI.Member(6, 0x20, "Shaders")] public Ref<ShaderResource> PostFXAAShader;
        [RTTI.Member(7, 0x28, "Shaders")] public Ref<ShaderResource> PostCheckerboardColorSpaceShader;
        [RTTI.Member(8, 0x30, "Shaders")] public Ref<ShaderResource> PostCheckerboardResolveShader;
        [RTTI.Member(9, 0x38, "Shaders")] public Ref<ShaderResource> PostCheckerboardFXAAShader;
        [RTTI.Member(10, 0x40, "Shaders")] public Ref<ShaderResource> PostTAAFXAAShader;
        [RTTI.Member(11, 0x48, "Shaders")] public Ref<ShaderResource> PostTAAResolveShader;
        [RTTI.Member(15, 0x50, "Shaders")] public Ref<ShaderResource> PostSMAAEdgeDetectShaders1xHigh;
        [RTTI.Member(12, 0x58, "Shaders")] public Ref<ShaderResource> PostSMAAEdgeDetectShaders1xCustom;
        [RTTI.Member(16, 0x60, "Shaders")] public Ref<ShaderResource> PostSMAABlendingWeightsShaders1xHigh;
        [RTTI.Member(13, 0x68, "Shaders")] public Ref<ShaderResource> PostSMAABlendingWeightsShaders1xCustom;
        [RTTI.Member(17, 0x70, "Shaders")] public Ref<ShaderResource> PostSMAANeighborhoodBlendingShaders1xHigh;
        [RTTI.Member(14, 0x78, "Shaders")] public Ref<ShaderResource> PostSMAANeighborhoodBlendingShaders1xCustom;
        [RTTI.Member(3, 0x80, "Textures")] public Ref<Texture> PostSMAAAreaTexture;
        [RTTI.Member(4, 0x88, "Textures")] public Ref<Texture> PostSMAASearchTexture;
        [RTTI.Member(18, 0x90, "Shaders")] public Ref<ShaderResource> CompositeMovieShader;
    }

    [RTTI.Serializable(0x4DF9506FD3BAD0D6, GameType.DS)]
    public class AIAgent : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB17FFBE269218CF7, GameType.DS)]
    public class AIAgentResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Behaviour")] public Ref<AIHTNPlannerResource> PlannerResource;
    }

    [RTTI.Serializable(0x49A54001B67A8CD5, GameType.DS)]
    public class AIAgentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA41A82781384EC82, GameType.DS)]
    public class AIAirMover : Mover
    {
    }

    [RTTI.Serializable(0x40D1235FC14331F7, GameType.DS)]
    public class AIAirMoverPostureSettings : AIMoverPostureBaseSettings
    {
        [RTTI.Member(6, 0x28)] public AnimationNodeID LandingAnimStateNode;
    }

    [RTTI.Serializable(0x6CC09524CA544F8C, GameType.DS)]
    public class AIAirMoverResource : MoverResource
    {
        [RTTI.Member(16, 0x28, "Animation")] public Ref<AnimationManagerResource> AnimationManager;
        [RTTI.Member(7, 0x30, "Logic")] public float MaximumSpeed;
        [RTTI.Member(8, 0x34, "Logic")] public float MaximumTurnSpeed;
        [RTTI.Member(9, 0x38, "Logic")] public float MaximumAcceleration;
        [RTTI.Member(10, 0x3C, "Logic")] public float MaximumTurnAcceleration;
        [RTTI.Member(11, 0x40, "Logic")] public float PathLookAheadDistance;
        [RTTI.Member(12, 0x44, "Logic")] public float QuickTurnAngleThreshold;
        [RTTI.Member(28, 0x48, "Animation")] public FRange RandomAnimationActionInterval;
        [RTTI.Member(20, 0x50, "Animation")] public Array<AIAirMoverPostureSettings> Postures;
        [RTTI.Member(17, 0x60, "Animation")] public String HoverAnimVarName;
        [RTTI.Member(18, 0x68, "Animation")] public String LocomotionAnimTagName;
        [RTTI.Member(19, 0x70, "Animation")] public String AdditiveTranslationAnimTagName;
        [RTTI.Member(21, 0x78, "Animation")] public String DesiredPostureAnimVarName;
        [RTTI.Member(22, 0x80, "Animation", true)] public String LandingAnimTagName;
        [RTTI.Member(23, 0x88, "Animation")] public AnimationTagID LandingAnimTag;
        [RTTI.Member(24, 0x90, "Animation")] public String BankHeadingAnimVarName;
        [RTTI.Member(25, 0x98, "Animation")] public String ClimbingStartAnimVarName;
        [RTTI.Member(26, 0xA0, "Animation")] public String SpeedAnimVarName;
        [RTTI.Member(27, 0xA8, "Animation")] public String RandomFlyingAnimationActionAnimVarName;
        [RTTI.Member(29, 0xB0, "Animation")] public String QuickTurnAnimVarName;
        [RTTI.Member(30, 0xB8, "Animation")] public String QuickTurnDirectionAnimVarName;
        [RTTI.Member(32, 0xC0, "HoverPushAnimation")] public float HoverPushThreshold;
        [RTTI.Member(33, 0xC8, "HoverPushAnimation")] public String HoverPushAnimVarName;
        [RTTI.Member(34, 0xD0, "HoverPushAnimation")] public String HoverPushDirectionAnimVarName;
        [RTTI.Member(35, 0xD8, "HoverPushAnimation")] public int HoverPushLeftValue;
        [RTTI.Member(36, 0xDC, "HoverPushAnimation")] public int HoverPushRightValue;
        [RTTI.Member(37, 0xE0, "HoverPushAnimation")] public int HoverPushBackwardValue;
        [RTTI.Member(38, 0xE4, "HoverPushAnimation")] public int HoverPushForwardValue;
        [RTTI.Member(39, 0xE8, "HoverPushAnimation")] public int HoverPushDownValue;
        [RTTI.Member(40, 0xEC, "HoverPushAnimation")] public int HoverPushUpValue;
        [RTTI.Member(13, 0xF0, "Logic")] public bool Aquatic;
        [RTTI.Member(14, 0xF4, "Logic")] public float PhysicsCollisionSize;
    }

    [RTTI.Serializable(0xAF9A2B8F5E23B956, GameType.DS)]
    public class AIAlertForEntityMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x39A0478C329485A6, GameType.DS)]
    public class AIAlertForEntityMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0x7948687A67F3D58D, GameType.DS)]
    public class AIAlertForEntityMessageHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0xA91D12DAE1A14450, GameType.DS)]
    public class AIAreaManager : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<NavMeshArea>> Areas;
    }

    [RTTI.Serializable(0xA55C2B912C18FCE9, GameType.DS)]
    public class AIAtmosphereBox : WorldNode
    {
        [RTTI.Member(5, 0x0, "General")] public float VisibilityDistance;
        [RTTI.Member(6, 0x74, "General")] public bool UsedForStealthGrass;
    }

    [RTTI.Serializable(0x9374F1811990584D, GameType.DS)]
    public class AIAtmosphereBoxResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Vec3 CenterOffset;
        [RTTI.Member(4, 0x30, "General")] public float Width;
        [RTTI.Member(5, 0x34, "General")] public float Depth;
        [RTTI.Member(6, 0x38, "General")] public float Height;
        [RTTI.Member(7, 0x3C, "General")] public float VisibilityDistance;
        [RTTI.Member(8, 0x40, "General")] public bool UsedForStealthGrass;
    }

    [RTTI.Serializable(0xC1FB0DC82133DAB8, GameType.DS)]
    public class AIAttack : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x1184E3F54E5DC57B, GameType.DS)]
    public class AIAttackPicker : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xA58ACCB2ACDAD5FD, GameType.DS)]
    public class AIAttackResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Properties")] public Ref<BooleanFact> EnabledProperty;
        [RTTI.Member(6, 0x30, "Properties")] public Ref<FloatFact> HardCooldownProperty;
        [RTTI.Member(7, 0x38, "Properties")] public Ref<FloatFact> SoftCooldownProperty;
        [RTTI.Member(8, 0x48, "Properties")] public FRange DamageWindow;
        [RTTI.Member(13, 0x50, "Properties")] public FRange AvailableAtHealthRange;
        [RTTI.Member(9, 0x58, "Properties")] public Array<Ref<TagProperty>> TargetExclusionTags;
        [RTTI.Member(10, 0x68, "Properties")] public Array<Ref<VolumetricAnnotation>> TriggerVolumes;
        [RTTI.Member(11, 0x78, "Properties")] public Array<Ref<VolumetricAnnotation>> EmergencyTriggerVolumes;
        [RTTI.Member(12, 0x88, "Properties")] public Array<Ref<VolumetricAnnotation>> ExclusionVolumes;
        [RTTI.Member(15, 0x98, "FollowUp")] public Array<Ref<AIAttackResource>> FollowUpAttacks;
    }

    [RTTI.Serializable(0x1D856F4B148D8484, GameType.DS)]
    public class AIAttackSet : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Logic")] public Array<Ref<AIAttackSetEntry>> Entries;
    }

    [RTTI.Serializable(0xD07A699D921D710C, GameType.DS)]
    public class AIAttackSetEntry : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AIAttackResource> AttackResource;
        [RTTI.Member(4, 0x28, "Logic")] public int NumberOfTokens;
    }

    [RTTI.Serializable(0xF4AADABA5C10B9DB, GameType.DS)]
    public class AIAttackSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDC14F52B5E4BB0C4, GameType.DS)]
    public class AIAuralSensor : AISensor
    {
        [RTTI.Member(3, 0x20, "Hearing")] public float UnitDetectionDistance;
        [RTTI.Member(4, 0x24, "Hearing")] public float Range;
    }

    [RTTI.Serializable(0x8C4D3315BB02FDC9, GameType.DS)]
    public class AIAuralStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0x6C4A0EC0242F3144, GameType.DS)]
    public class AIAuralStimulusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAF3FFF6E0D2A09EE, GameType.DS)]
    public class AIAuralStimulusComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AIAuralStimulusResource> StimulusResource;
    }

    [RTTI.Serializable(0x5F5D601C38F48D39, GameType.DS)]
    public class AIAuralStimulusResource : AIStimulusResource
    {
        [RTTI.Member(9, 0x40, "General")] public float Loudness;
        [RTTI.Member(10, 0x44, "General")] public bool DrownsOutOtherAuralStimuli;
        [RTTI.Member(11, 0x45, "General")] public EDSAuralStimulusType AuralStimulusType;
    }

    [RTTI.Serializable(0xE078D3615E14E08A, GameType.DS)]
    public class AIAuralStimulusResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB0B8E01084C84E84, GameType.DS)]
    public class AIBehaviorGroup : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "General")] public Array<Ref<SpawnpointBase>> SpawnPoints;
        [RTTI.Member(8, 0x80, "General")] public Array<Ref<AIBehaviorGroupMember>> Members;
        [RTTI.Member(9, 0x90, "General")] public Array<Ref<SpawnCommand>> SpawnCommands;
        [RTTI.Member(10, 0xA0, "General")] public Array<Ref<EntityComponentResource>> ExtraComponents;
        [RTTI.Member(11, 0xB0, "General")] public bool AutoSpawn;
        [RTTI.Member(12, 0xB1, "General")] public bool JoinSceneGroup;
    }

    [RTTI.Serializable(0xB2E286E6C5A2B028, GameType.DS)]
    public class AIBehaviorGroupMember : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<SpawnSetupBase> SpawnSetup;
        [RTTI.Member(3, 0x28)] public IRange Amount;
        [RTTI.Member(4, 0x30)] public EAIBehaviorGroupMemberNavmeshPlacmentType NavmeshPlacementType;
        [RTTI.Member(5, 0x34)] public FRange SpawnRange;
        [RTTI.Member(6, 0x3C)] public FRange SpawnHeadingRange;
        [RTTI.Member(7, 0x48)] public Array<Ref<EntityComponentResource>> ExtraComponents;
        [RTTI.Member(8, 0x58)] public Array<Ref<SpawnCommand>> SpawnCommands;
    }

    [RTTI.Serializable(0x7D582BB4A4E1DAEC, GameType.DS)]
    public class AIBehaviorGroupMemberComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5AD2118416F4EC1F, GameType.DS)]
    public class AIBehaviorGroupMemberComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC8817107AB15A563, GameType.DS)]
    public class AIBehaviorGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEB0C58578D22E33D, GameType.DS)]
    public class AIBehaviorStateResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0x7FCC2E37DF60BA9E, GameType.DS)]
    public class AIBeingClimbedHtnFactMessage : AIHtnFactMessage
    {
    }

    [RTTI.Serializable(0x2EE53C2713BD06BE, GameType.DS)]
    public class AIBodyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD7B9E6470B4F8E76, GameType.DS)]
    public class AIBodyComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x14B12C357308A73E, GameType.DS)]
    public class AIBodyGoal : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x786BA7FF9474B74, GameType.DS)]
    public class AIBodyGoalAimAt : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x56081DF3FBE3D7C4, GameType.DS)]
    public class AIBodyGoalAttack : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x510B0E53947E8058, GameType.DS)]
    public class AIBodyGoalBlock : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x972BD84D5FEA9F54, GameType.DS)]
    public class AIBodyGoalCloseCombat : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x4655A32785C57CE3, GameType.DS)]
    public class AIBodyGoalContextualSpeech : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x78C340263232359B, GameType.DS)]
    public class AIBodyGoalCustomAction : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x7E086E6822ED38F3, GameType.DS)]
    public class AIBodyGoalDSAction : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x1E5D0D8E6F4BC068, GameType.DS)]
    public class AIBodyGoalDSAction2 : AIBodyGoalDSAction
    {
    }

    [RTTI.Serializable(0xD32F42DB1F8758EF, GameType.DS)]
    public class AIBodyGoalDSCover : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xE17EED886B210541, GameType.DS)]
    public class AIBodyGoalDSDummy : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x56285A9B96EF1588, GameType.DS)]
    public class AIBodyGoalDSJump : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x9D8D73235B0B70AA, GameType.DS)]
    public class AIBodyGoalDSPatrolAction : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x736EC373FFD50EF, GameType.DS)]
    public class AIBodyGoalDSTraverseLadder : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x6DFC8B424954D09D, GameType.DS)]
    public class AIBodyGoalDSTurn : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xE13815BFB0A89C8, GameType.DS)]
    public class AIBodyGoalDSVehicleMove : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x87CC96D8A2AACEF, GameType.DS)]
    public class AIBodyGoalDSVoice : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x879D46F23ED1C745, GameType.DS)]
    public class AIBodyGoalDSVoice2 : AIBodyGoalDSVoice
    {
    }

    [RTTI.Serializable(0xD2EE8709566D2951, GameType.DS)]
    public class AIBodyGoalDSWait : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x1C35B29B44481C10, GameType.DS)]
    public class AIBodyGoalDSWalk : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xE0AD3BC6A2593CC8, GameType.DS)]
    public class AIBodyGoalFaceTowards : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x2EA4B6C3A9499464, GameType.DS)]
    public class AIBodyGoalFly : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x82F8FEAEAA3F6BC3, GameType.DS)]
    public class AIBodyGoalGesture : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x4018970818B6CEC3, GameType.DS)]
    public class AIBodyGoalGlance : AIBodyGoalLookAt
    {
    }

    [RTTI.Serializable(0x362C9E6062A823DD, GameType.DS)]
    public class AIBodyGoalHover : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0xA006BD08B81DAB8E, GameType.DS)]
    public class AIBodyGoalImmediateWeaponLoad : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xC011569D54C3B20C, GameType.DS)]
    public class AIBodyGoalLand : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x8CA3E4D840FBD453, GameType.DS)]
    public class AIBodyGoalListen : AIBodyGoalLookAt
    {
    }

    [RTTI.Serializable(0xF3751AE7DB5C0A27, GameType.DS)]
    public class AIBodyGoalLookAt : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x2D132CE3CF3EBA31, GameType.DS)]
    public class AIBodyGoalMountObject : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xC36C9C789BC50918, GameType.DS)]
    public class AIBodyGoalMove : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xFF70FD55FD453DB4, GameType.DS)]
    public class AIBodyGoalPerch : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x2D8ECD53C2DE3AEA, GameType.DS)]
    public class AIBodyGoalPlayMonitoredAnimation : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x82340DDAD6825177, GameType.DS)]
    public class AIBodyGoalSelectWeapon : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xA545A95A6525BEBB, GameType.DS)]
    public class AIBodyGoalSetDesire : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x406A4E9821BD2A5E, GameType.DS)]
    public class AIBodyGoalSpecialMove : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x405CC3269B359C3C, GameType.DS)]
    public class AIBodyGoalStance : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x2B6F36346CD764C2, GameType.DS)]
    public class AIBodyGoalStowWeapon : AIBodyGoal
    {
        [RTTI.Member(2, 0x28)] public CPtr<AIBodyInterface> Body;
    }

    [RTTI.Serializable(0x5EF7485373B317CF, GameType.DS)]
    public class AIBodyGoalSwimFlee : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0xDD2CD796C2A2F116, GameType.DS)]
    public class AIBodyGoalSwimToTarget : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x746DFC7D85F3F55A, GameType.DS)]
    public class AIBodyGoalSwimWander : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x7CEBB328BDB1D0AD, GameType.DS)]
    public class AIBodyGoalTakeOff : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x97129B3440A229DB, GameType.DS)]
    public class AIBodyGoalTalk : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xC444264ABCF8EC0A, GameType.DS)]
    public class AIBodyGoalTarget : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x88E8A5EF0788AF95, GameType.DS)]
    public class AIBodyGoalUnmountObject : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xBF9B19C439BED88A, GameType.DS)]
    public class AIBodyGoalUseObject : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xC63A9A819DD22823, GameType.DS)]
    public class AIBodyGoalWalk : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x13F43B915FD471DF, GameType.DS)]
    public class AIBodyGoalWeaponLoad : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xC9A9F1994A59DE38, GameType.DS)]
    public class AIBodyHumanoid : EntityComponent
    {
    }

    [RTTI.Serializable(0x2F1A7F2A886E74E7, GameType.DS)]
    public class AIBodyHumanoidComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x6F596DFC05AE70FA, GameType.DS)]
    public class AIBodyInterface
    {
    }

    [RTTI.Serializable(0x72A06E01C19B745B, GameType.DS)]
    public class AIBodyInterfaceGame : AIBodyInterface
    {
    }

    [RTTI.Serializable(0x84AA689770935507, GameType.DS)]
    public class AIBodyPartBase : Resource
    {
    }

    [RTTI.Serializable(0x12825E0AEFEF9585, GameType.DS)]
    public class AIBodyPartResource : AIBodyPartBase
    {
    }

    [RTTI.Serializable(0x6A485ABA0526A0F6, GameType.DS)]
    public class AIBodyPartResourceSet : AIBodyPartBase
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<AIBodyPartResource>> BodyResources;
    }

    [RTTI.Serializable(0x196A6773183985A6, GameType.DS)]
    public class AIBurstBasedWeaponOperationResource : AIWeaponOperationResource
    {
        [RTTI.Member(3, 0x20, "General")] public IRange NormalBurstCount;
        [RTTI.Member(4, 0x28, "General")] public IRange InitialBurstCount;
        [RTTI.Member(5, 0x30, "General")] public int BurstImproveCount;
        [RTTI.Member(6, 0x34, "General")] public bool KeepRunningWhileWeaponIsOperating;
    }

    [RTTI.Serializable(0x1F7CAF772B467D00, GameType.DS)]
    public class AICargoCrabCrateComponent : AIUsableComponent
    {
        [RTTI.Member(5, 0x70)] public float BroadcastDistance;
    }

    [RTTI.Serializable(0x992E0FC54F6743B9, GameType.DS)]
    public class AICargoCrabCrateComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x3E3C9E692C01C2E4, GameType.DS)]
    public class AIColumnMemberFormation : AIMemberFormation
    {
    }

    [RTTI.Serializable(0x81531B13BA192C7A, GameType.DS)]
    public class AIColumnMemberFormationResource : AIMemberFormationResource
    {
        [RTTI.Member(12, 0x40, "Layout")] public int MembersPerRow;
        [RTTI.Member(13, 0x44, "Layout")] public float MemberSpacingMultiplier;
    }

    [RTTI.Serializable(0x357B1505D086854A, GameType.DS)]
    public class AICombatSituationResource : Resource
    {
        [RTTI.Member(3, 0x20, "AlertLevels")] public float DurationGettingHit;
        [RTTI.Member(4, 0x24, "AlertLevels")] public float DurationUnderAttack;
        [RTTI.Member(5, 0x28, "AlertLevels")] public float DurationCombat;
        [RTTI.Member(6, 0x2C, "AlertLevels")] public float DurationThreatsIdentified;
        [RTTI.Member(7, 0x30, "AlertLevels")] public float DurationPresenceConfirmed;
        [RTTI.Member(8, 0x34, "AlertLevels")] public float DurationPresenceSuspected;
        [RTTI.Member(9, 0x38, "AlertLevels")] public EAlertLevel MinimumPropagatedLevel;
        [RTTI.Member(10, 0x3C, "AlertLevels")] public EAlertLevel CorpseAlertLevel;
        [RTTI.Member(12, 0x40, "Threats")] public float SuspicionBuildupTime;
        [RTTI.Member(13, 0x44, "Threats")] public float SuspicionFalloffTime;
        [RTTI.Member(14, 0x48, "Threats")] public float SuspicionMinimumDuration;
        [RTTI.Member(15, 0x4C, "Threats")] public float ConfirmationBuildupTime;
        [RTTI.Member(16, 0x50, "Threats")] public float ConfirmationFalloffTime;
        [RTTI.Member(17, 0x54, "Threats")] public float IdentificationBuildupTime;
        [RTTI.Member(18, 0x58, "Threats")] public float IdentificationFalloffTime;
        [RTTI.Member(35, 0x60, "MessageHandlers")] public Ref<AIMessageHandlerResourceSet> MessageHandlerSet;
        [RTTI.Member(19, 0x68, "Threats")] public float RemovalTime;
        [RTTI.Member(20, 0x6C, "Threats")] public float TpaDurationDeducedExact;
        [RTTI.Member(21, 0x70, "Threats")] public float TpaDurationDeducedRough;
        [RTTI.Member(22, 0x74, "Threats")] public float ConfirmedLostRemovalTime;
        [RTTI.Member(23, 0x78, "Threats")] public bool TpaAlwaysKnowsExactPositions;
        [RTTI.Member(24, 0x7C, "Threats")] public float DamageReceiverRemovalTime;
        [RTTI.Member(25, 0x80, "Threats")] public float AttackTargetHistoryRemovalTime;
        [RTTI.Member(26, 0x84, "Threats")] public float AttackerRemovalTime;
        [RTTI.Member(28, 0x88, "DangerAreas")] public bool IsAfraidOfElectricity;
        [RTTI.Member(29, 0x89, "DangerAreas")] public bool IsAfraidOfFire;
        [RTTI.Member(30, 0x8A, "DangerAreas")] public bool IsAfraidOfExplosion;
        [RTTI.Member(31, 0x8B, "DangerAreas")] public bool IsAfraidOfVehicle;
        [RTTI.Member(32, 0x8C, "DangerAreas")] public bool IsAfraidOfCryo;
        [RTTI.Member(33, 0x8D, "DangerAreas")] public bool IsAfraidOfSequence;
    }

    [RTTI.Serializable(0xC62C5A9272481554, GameType.DS)]
    public class AIContextHintResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0x218AE92F71017555, GameType.DS)]
    public class AIContextHintResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8C0FB188E4BB941E, GameType.DS)]
    public class AIContextResource : Resource
    {
        [RTTI.Member(17, 0x28, "Obstacles")] public uint16 SoftObstacleCosts;
        [RTTI.Member(15, 0x2C, "Obstacles")] public int IgnoreDestructDamage;
        [RTTI.Member(16, 0x30, "Obstacles")] public int AvoidDestructDamage;
        [RTTI.Member(18, 0x34, "Obstacles")] public bool AvoidDynamicObstacles;
        [RTTI.Member(20, 0x38, "Obstacles")] public float MaxObstacleAvoidanceAngle;
        [RTTI.Member(22, 0x3C, "DangerAreaAvoidance")] public int32 PathDangerAreaCost;
        [RTTI.Member(24, 0x40, "GameplayAvoidance")] public int32 GameplayAreaCost;
        [RTTI.Member(26, 0x44, "StealthAreaAvoidance")] public int32 StealthAreaCost;
        [RTTI.Member(5, 0x48, "Movement")] public EMoveStanceChoice Stance;
        [RTTI.Member(6, 0x50, "Movement")] public Ref<AISkillContext> SkillContext;
        [RTTI.Member(7, 0x58, "Movement")] public FRange SpeedRangeOverride;
        [RTTI.Member(19, 0x60, "Obstacles")] public FRange ObstableAvoidanceSpeedModifierRange;
        [RTTI.Member(8, 0x68, "Movement")] public bool ClampToDestination;
        [RTTI.Member(9, 0x6C, "Movement")] public float MinimumDuration;
        [RTTI.Member(10, 0x70, "Movement")] public int ClaimCost;
        [RTTI.Member(11, 0x74, "Movement")] public float SmoothTangentLengthModifier;
        [RTTI.Member(28, 0x78, "Aiming")] public Ref<AIScanContextResource> ScanResource;
        [RTTI.Member(29, 0x80, "Aiming")] public Ref<AIScanContextResource> AttackScanResource;
        [RTTI.Member(31, 0x88, "Carry")] public bool LowerWeapon;
        [RTTI.Member(13, 0x90, "PathObjects")] public Array<Ref<AIPathObjectCategory>> AllowedCategories;
        [RTTI.Member(3, 0xA0, "General")] public String Identifier;
        [RTTI.Member(33, 0xA8, "NavMeshArea")] public Array<Ref<NavMeshAreaTag>> NavMeshAreaTagWhitelist;
        [RTTI.Member(34, 0xB8, "NavMeshArea")] public Array<Ref<NavMeshAreaTag>> NavMeshAreaTagBlacklist;
    }

    [RTTI.Serializable(0xA6C37010C73F3445, GameType.DS)]
    public class AIContextResourceSet : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<AIContextResource>> AIContextResources;
        [RTTI.Member(4, 0x30, "General")] public Ref<AIContextResource> InitialContext;
    }

    [RTTI.Serializable(0xA6AF7D2F2F99388C, GameType.DS)]
    public class AIControlledEntityInterface : AIWeaponInterfaceGame
    {
    }

    [RTTI.Serializable(0xA15433A412C3906, GameType.DS)]
    public class AICorpseFoundMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xB52814B2DCC8A87C, GameType.DS)]
    public class AICorpseFoundMessageResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String CorpseIdentifier;
    }

    [RTTI.Serializable(0x8B2FCC178FBA43DF, GameType.DS)]
    public class AICorpseMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0xC0C74ED9209F9882, GameType.DS)]
    public class AICorpseMessageHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0x6521C241BB957EA6, GameType.DS)]
    public class AICoverPlaneComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1372ACAF1E131FEA, GameType.DS)]
    public class AICoverPlaneComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Vec3 LocalBottomLeft;
        [RTTI.Member(4, 0x30, "General")] public Vec3 LocalTopRight;
    }

    [RTTI.Serializable(0x2600952686EE19E1, GameType.DS)]
    public class AIDaemonMarker : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x8195E564EBFF0FBF, GameType.DS)]
    public class AIDangerArea : RTTIRefObject
    {
        [RTTI.Member(3, 0x50, "General")] public float ExpiryTime;
    }

    [RTTI.Serializable(0x39C614A80EBFF623, GameType.DS)]
    public class AIDangerAreaBox : AIDangerArea
    {
        [RTTI.Member(4, 0x80)] public WorldOrientedBox Box;
    }

    [RTTI.Serializable(0xDF4FA960AD6A52D6, GameType.DS)]
    public class AIDangerAreaCapsule : AIDangerArea
    {
        [RTTI.Member(4, 0x80)] public TaperedCapsule Capsule;
    }

    [RTTI.Serializable(0x5B0CAF3ABB3CD11F, GameType.DS)]
    public class AIDangerAreaSphere : AIDangerArea
    {
        [RTTI.Member(4, 0x80)] public WorldBoundingSphere Sphere;
    }

    [RTTI.Serializable(0x5D86F419E4B1610B, GameType.DS)]
    public class AIDefendArea : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "Logic")] public float IdleRadius;
        [RTTI.Member(8, 0x74, "Logic")] public float AcquisitionIdleRadiusModifier;
        [RTTI.Member(9, 0x78, "Logic")] public float CombatRadius;
        [RTTI.Member(10, 0x80, "Logic")] public Array<Ref<AIPatrolPath>> PatrolPaths;
    }

    [RTTI.Serializable(0xD38CFC0FB8FF361C, GameType.DS)]
    public class AIDefendAreaSet : ParentWorldNode
    {
        [RTTI.Member(7, 0x80, "Logic")] public Array<Ref<AIDefendArea>> Nodes;
    }

    [RTTI.Serializable(0xA4DF0C862CC2F1FD, GameType.DS)]
    public class AIDefendAreaSetSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x96C301C305F07437, GameType.DS)]
    public class AIDefendAreaSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE202720FC5A1CF8B, GameType.DS)]
    public class AIDiamondGroupFormation : AIGroupFormation
    {
    }

    [RTTI.Serializable(0x6FA2F3ADE0ADB010, GameType.DS)]
    public class AIDiamondGroupFormationResource : AIGroupFormationResource
    {
        [RTTI.Member(16, 0x50, "TagProperties")] public Ref<EnumFactEntry> CenterGroupValue;
        [RTTI.Member(17, 0x58, "TagProperties")] public Ref<EnumFactEntry> FrontGuardValue;
        [RTTI.Member(18, 0x60, "TagProperties")] public Ref<EnumFactEntry> LeftFlankValue;
        [RTTI.Member(19, 0x68, "TagProperties")] public Ref<EnumFactEntry> RightFlankValue;
        [RTTI.Member(20, 0x70, "TagProperties")] public Ref<EnumFactEntry> RearGuardValue;
        [RTTI.Member(21, 0x78, "TagProperties")] public Ref<EnumFactEntry> UnspecifiedPositionValue;
    }

    [RTTI.Serializable(0x115384522A001B9B, GameType.DS)]
    public class AIDirectableAgent : AIAgent
    {
    }

    [RTTI.Serializable(0xC0A662D086058AE7, GameType.DS)]
    public class AIDirectableAgentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFFBEE2290639270C, GameType.DS)]
    public class AIDotProductLine
    {
    }

    [RTTI.Serializable(0x8411E58D5406B16, GameType.DS)]
    public class AIDynamicCoverManager : CoreObject
    {
    }

    [RTTI.Serializable(0x361C6BEA5D1BD6C5, GameType.DS)]
    public class AIDynamicObstacleCircleResource : AIDynamicObstacleResource
    {
        [RTTI.Member(5, 0x24, "Shape")] public float Radius;
        [RTTI.Member(6, 0x2C, "Shape")] public float Height;
    }

    [RTTI.Serializable(0xD74A8E1A7CCEF678, GameType.DS)]
    public class AIDynamicObstacleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA39E25C15CA43EEE, GameType.DS)]
    public class AIDynamicObstacleComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AIDynamicObstacleResource> ObstacleResource;
        [RTTI.Member(5, 0x30, "DangerArea")] public Vec2 Scale;
        [RTTI.Member(6, 0x40, "DangerArea")] public int PathSegments;
    }

    [RTTI.Serializable(0x3110131682911D2E, GameType.DS)]
    public class AIDynamicObstacleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xAB716432CF0989C1, GameType.DS)]
    public class AIDynamicObstacleEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<AIDynamicObstacleCircleResource> ObstacleResource;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<AIFaction> ObstacleFaction;
    }

    [RTTI.Serializable(0xB9C4755274CE2AC9, GameType.DS)]
    public class AIDynamicObstacleRectangleResource : AIDynamicObstacleResource
    {
        [RTTI.Member(5, 0x24, "Shape")] public Vec2Pack HalfExtent;
        [RTTI.Member(7, 0x2C, "Shape")] public float Height;
        [RTTI.Member(6, 0x30, "Shape")] public Vec2 Center;
    }

    [RTTI.Serializable(0xAC2BC36CE72F4079, GameType.DS)]
    public class AIDynamicObstacleResource : Resource
    {
        [RTTI.Member(3, 0x40, "General")] public int AvoidancePriority;
    }

    [RTTI.Serializable(0xF9323F37C2B38E76, GameType.DS)]
    public class AIEventMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xEDBD9815F80B152, GameType.DS)]
    public class AIEventMessageResource : AIStaticMessageResource
    {
        [RTTI.Member(3, 0x20, "General")] public String EventId;
    }

    [RTTI.Serializable(0x1A9E61B391B1EE9A, GameType.DS)]
    public class AIEventReactionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1266A63545250389, GameType.DS)]
    public class AIEventReactionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<AIEventReactionDescription>> Reactions;
    }

    [RTTI.Serializable(0xD74D42DCEC0B87E1, GameType.DS)]
    public class AIEventReactionDescription : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AIEventMessageResource> Event;
        [RTTI.Member(4, 0x28, "General")] public float MininumEventStrength;
        [RTTI.Member(6, 0x2C, "InitialReaction")] public float InitialReaction_UpperBodyLookAtTime;
        [RTTI.Member(7, 0x30, "InitialReaction")] public float InitialReaction_FullBodyLookAtTime;
        [RTTI.Member(8, 0x38, "InitialReaction")] public Ref<GestureResource> InitialReaction_UpperBodyGesture;
        [RTTI.Member(9, 0x40, "InitialReaction")] public Ref<GestureResource> InitialReaction_FullBodyGesture;
        [RTTI.Member(10, 0x48, "InitialReaction")] public Ref<ContextualSpeechEvent> InitialReaction_Speech;
        [RTTI.Member(12, 0x50, "RecidivismReaction")] public float RecidivismReaction_UpperBodyLookAtTime;
        [RTTI.Member(13, 0x54, "RecidivismReaction")] public float RecidivismReaction_FullBodyLookAtTime;
        [RTTI.Member(14, 0x58, "RecidivismReaction")] public Ref<GestureResource> RecidivismReaction_UpperBodyGesture;
        [RTTI.Member(15, 0x60, "RecidivismReaction")] public Ref<GestureResource> RecidivismReaction_FullBodyGesture;
        [RTTI.Member(16, 0x68, "RecidivismReaction")] public Ref<ContextualSpeechEvent> RecidivismReaction_Speech;
        [RTTI.Member(18, 0x70, "FedUpReaction")] public int TriggerCount;
        [RTTI.Member(19, 0x78, "FedUpReaction")] public String BehaviourId;
    }

    [RTTI.Serializable(0x339AEDFD1735F06B, GameType.DS)]
    public class AIExplosionEventHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0xDD1978E9346B940A, GameType.DS)]
    public class AIExplosionEventHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0x723472ABF044DE4C, GameType.DS)]
    public class AIExplosionEventMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xEC25BE948AB05320, GameType.DS)]
    public class AIExportGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4BD4914D71201801, GameType.DS)]
    public class AIExpressor
    {
    }

    [RTTI.Serializable(0x2676B7854AB28AB0, GameType.DS)]
    public class AIExpressorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF0A5D2E0DC49D68D, GameType.DS)]
    public class AIExpressorComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xCF0044FFD94F69DD, GameType.DS)]
    public class AIEyeColorHintResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0x43E6498465300DA5, GameType.DS)]
    public class AIFaction : ResourceWithName
    {
        [RTTI.Member(5, 0x30, "General")] public String ShortName;
        [RTTI.Member(6, 0x40, "General")] public RGBAColor Color;
        [RTTI.Member(7, 0x48, "General")] public Array<CPtr<AIFaction>> Enemies;
        [RTTI.Member(8, 0x58, "General")] public Array<CPtr<AIFaction>> FriendlyFactionsExludedForLOFChecks;
        [RTTI.Member(9, 0x68, "General")] public int ClaimGroup;
    }

    [RTTI.Serializable(0xFC10FD50D94E8F1F, GameType.DS)]
    public class AIFactionSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2CEEDF4845A33004, GameType.DS)]
    public class AIFollowAnimationAimWeaponOperationInstance : AIWeaponOperationInstanceGame
    {
    }

    [RTTI.Serializable(0xF31779CA65A6CD79, GameType.DS)]
    public class AIFollowAnimationAimWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
    }

    [RTTI.Serializable(0xE3B17C45A50AEEF1, GameType.DS)]
    public class AIFollowTerrainWeaponOperationInstance : AISniperWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0xE5B436BE896C1BE3, GameType.DS)]
    public class AIFollowTerrainWeaponOperationResource : AISniperWeaponOperationResource
    {
    }

    [RTTI.Serializable(0x79648E4059A654DB, GameType.DS)]
    public class AIFormation : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD846E1ED310C51C2, GameType.DS)]
    public class AIFormationResource : Resource
    {
        [RTTI.Member(3, 0x20, "SubGroups")] public String FormationHint;
        [RTTI.Member(5, 0x28, "Path")] public float PathTargetAdvanceDistance;
        [RTTI.Member(6, 0x2C, "Path")] public float PathApproachDistance;
        [RTTI.Member(7, 0x30, "Path")] public bool AutoStartPathUpdate;
        [RTTI.Member(8, 0x31, "Path")] public bool ClearPathAtEnd;
    }

    [RTTI.Serializable(0x5FE345983B70EF33, GameType.DS)]
    public class AIGameplayArea : NavMeshObject
    {
    }

    [RTTI.Serializable(0x564348F0ACC11EE8, GameType.DS)]
    public class AIGenericEventMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0xCC4C6F98BEC1E189, GameType.DS)]
    public class AIGenericEventMessageHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0xF0C854BC450C6DE, GameType.DS)]
    public class AIGroup : AIDirectableAgent
    {
    }

    [RTTI.Serializable(0x4C00E6933A051A19, GameType.DS)]
    public class AIGroupFormation : AIFormation
    {
    }

    [RTTI.Serializable(0x7C4CB2583E97B095, GameType.DS)]
    public class AIGroupFormationResource : AIFormationResource
    {
        [RTTI.Member(10, 0x38, "SubGroups")] public Ref<AIMemberFormationResource> SubgroupFallBackFormationResource;
        [RTTI.Member(12, 0x40, "Facts")] public Ref<EnumFact> FormationSlotEnumTag;
        [RTTI.Member(14, 0x48, "Avoidance")] public Ref<AIDynamicObstacleRectangleResource> ObstacleResource;
    }

    [RTTI.Serializable(0x2195C4EB423CE90F, GameType.DS)]
    public class AIGroupGraphProgramSpawnCommand : SpawnCommand
    {
        [RTTI.Member(4, 0x60)] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0x8C1C6180B0138637, GameType.DS)]
    public class AIGroupPath : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xFDF899B099A2C5A2, GameType.DS)]
    public class AIGroupResource : AIAgentResource
    {
        [RTTI.Member(11, 0x30, "Roles")] public Array<Ref<AIGroupRoleDescriptorResource>> RoleDescriptors;
        [RTTI.Member(12, 0x40, "Roles")] public Ref<AIGroupRolesDistributorResource> RolesDistributor;
        [RTTI.Member(9, 0x48, "Behaviour")] public Array<String> SupportedBehaviorIDs;
        [RTTI.Member(7, 0x70, "General")] public String GroupID;
        [RTTI.Member(14, 0x78, "GroupMovement")] public Array<Ref<AIFormationResource>> Formations;
        [RTTI.Member(16, 0x88, "Perception")] public bool SynchronizesThreatInfo;
    }

    [RTTI.Serializable(0xF1FF8A81DE7C979C, GameType.DS)]
    public class AIGroupRoleDescriptorResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String ID;
        [RTTI.Member(5, 0x28, "Tags")] public Array<Ref<TagProperty>> InclusionTags;
        [RTTI.Member(6, 0x38, "Tags")] public Array<Ref<TagProperty>> ExclusionTags;
        [RTTI.Member(8, 0x50, "ParentDescriptor")] public Ref<AIGroupRoleDescriptorResource> InheritTagsFromParent;
    }

    [RTTI.Serializable(0xC5DA3AFE97E9B8E1, GameType.DS)]
    public class AIGroupRoleDescriptorResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE383F7FE2193B7B2, GameType.DS)]
    public class AIGroupRolesDistributorResource : Resource
    {
        [RTTI.Member(2, 0x20)] public String Identifier;
        [RTTI.Member(5, 0x30, "Union")] public bool PreventReuseOfEmptyUnion;
        [RTTI.Member(4, 0x31, "Union")] public bool AutoJoinNewUnionMembers;
    }

    [RTTI.Serializable(0x5D224180A260E996, GameType.DS)]
    public class AIGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA560667127A2E922, GameType.DS)]
    public class AIGroupTicketDescriptor : RTTIObject
    {
        [RTTI.Member(1, 0x10)] public int MaxTickets;
        [RTTI.Member(0, 0x18)] public String ID;
    }

    [RTTI.Serializable(0xFF51D63A8C3C1937, GameType.DS)]
    public class AIHTNPlannerDaemon : RTTIObject
    {
    }

    [RTTI.Serializable(0x519114017B35F90E, GameType.DS)]
    public class AIHTNPlannerDaemonAgent : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0xC7F1B2634D8E367D, GameType.DS)]
    public class AIHTNPlannerDaemonAirMovement : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x7AD566E7FB508376, GameType.DS)]
    public class AIHTNPlannerDaemonAirMovementGame : AIHTNPlannerDaemonAirMovement
    {
    }

    [RTTI.Serializable(0x1B3BD8D10D1634D8, GameType.DS)]
    public class AIHTNPlannerDaemonAlertLevel : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x9BED4011F8B4BFA9, GameType.DS)]
    public class AIHTNPlannerDaemonAquatic : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x312256C837091DD0, GameType.DS)]
    public class AIHTNPlannerDaemonAquaticResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(3, 0x20, "DeepWater")] public float DeepWaterMinDepth;
        [RTTI.Member(4, 0x28, "DeepWater")] public Array<Vec2> WaterDepthMeasurePoints;
    }

    [RTTI.Serializable(0x540AAF758810BAE, GameType.DS)]
    public class AIHTNPlannerDaemonAttackPicker : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xCC701ADDCD573C99, GameType.DS)]
    public class AIHTNPlannerDaemonAttackPickerGame : AIHTNPlannerDaemonAttackPicker
    {
    }

    [RTTI.Serializable(0xFD545F51A17ECF76, GameType.DS)]
    public class AIHTNPlannerDaemonAttackPickerGameResource : AIHTNPlannerDaemonAttackPickerResource
    {
    }

    [RTTI.Serializable(0x634664822103317, GameType.DS)]
    public class AIHTNPlannerDaemonAttackPickerResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<AIAttackSet>> AttackSets;
    }

    [RTTI.Serializable(0x67399D3A09B90F82, GameType.DS)]
    public class AIHTNPlannerDaemonBodyState : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC46A08B6879671F3, GameType.DS)]
    public class AIHTNPlannerDaemonCargoCrabCrates : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x37CD8CE666A992F3, GameType.DS)]
    public class AIHTNPlannerDaemonCollective : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xEE0D8A4A19F96127, GameType.DS)]
    public class AIHTNPlannerDaemonCombatHistory : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x11D7F4DCB952B442, GameType.DS)]
    public class AIHTNPlannerDaemonCombatHistoryResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float NearbyThreatsDistance;
        [RTTI.Member(4, 0x24, "Logic")] public float ThresholdToUnreachable;
        [RTTI.Member(5, 0x28, "Logic")] public float ThresholdToReachable;
    }

    [RTTI.Serializable(0xF186170D7F7E24D9, GameType.DS)]
    public class AIHTNPlannerDaemonCoreObjects : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x3EB91607374A1EC7, GameType.DS)]
    public class AIHTNPlannerDaemonCoreObjectsResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<RTTIRefObject>> DirectlyLinkedCoreObjects;
        [RTTI.Member(4, 0x30, "Logic")] public Array<String> DirectlyLinkedObjectNames;
        [RTTI.Member(5, 0x40, "Logic")] public Array<UUIDRef<RTTIRefObject>> CoreObjectUUIDRefs;
        [RTTI.Member(6, 0x50, "Logic")] public Array<String> UUIDRefNames;
    }

    [RTTI.Serializable(0xDFEAD8249D4B4C3A, GameType.DS)]
    public class AIHTNPlannerDaemonDebugDrawUtilities : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xB727AF4E0670F974, GameType.DS)]
    public class AIHTNPlannerDaemonDefendArea : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x4888293365100831, GameType.DS)]
    public class AIHTNPlannerDaemonDestructibles : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC70066841DBE9F65, GameType.DS)]
    public class AIHTNPlannerDaemonFindAttackLocation : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x219D627223E87A18, GameType.DS)]
    public class AIHTNPlannerDaemonFindCoverLocation : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x9D64A7A013F46638, GameType.DS)]
    public class AIHTNPlannerDaemonFriendlies : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x4A76966B097EB70F, GameType.DS)]
    public class AIHTNPlannerDaemonFriendliesGame : AIHTNPlannerDaemonFriendlies
    {
    }

    [RTTI.Serializable(0xEF98A1F08FA8DD32, GameType.DS)]
    public class AIHTNPlannerDaemonFriendliesGameResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(3, 0x20, "Properties")] public Ref<BoolProperty> CanBeGreetedLink;
    }

    [RTTI.Serializable(0x700F143AC80DAAF8, GameType.DS)]
    public class AIHTNPlannerDaemonGameInfo : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF46E32F0066594AB, GameType.DS)]
    public class AIHTNPlannerDaemonGameplayArea : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xACBBB0214FC3AB9B, GameType.DS)]
    public class AIHTNPlannerDaemonGroup : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x36E1D37187D8BE5, GameType.DS)]
    public class AIHTNPlannerDaemonGroupCombatCircle : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xADF24F1D81388F89, GameType.DS)]
    public class AIHTNPlannerDaemonGroupCombatSituation : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xBD44F97157D77EBB, GameType.DS)]
    public class AIHTNPlannerDaemonGroupCoordination : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xA8B02E9D0AF4D22C, GameType.DS)]
    public class AIHTNPlannerDaemonGroupCoordinationRequest : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xF3EB31B9245C42F9, GameType.DS)]
    public class AIHTNPlannerDaemonGroupHierarchy : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x3A93671B6847BF72, GameType.DS)]
    public class AIHTNPlannerDaemonGroupKnownThreats : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x2FAAE5A8C45467C4, GameType.DS)]
    public class AIHTNPlannerDaemonGroupPositioning : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x92871A27445112D9, GameType.DS)]
    public class AIHTNPlannerDaemonGroupRoles : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x5FDAC50E7A6F167D, GameType.DS)]
    public class AIHTNPlannerDaemonGroupState : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x384866B90629707F, GameType.DS)]
    public class AIHTNPlannerDaemonGroupUtils : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xB3F3EC03DF768FB0, GameType.DS)]
    public class AIHTNPlannerDaemonIndividual : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xBFB7119E101CE83, GameType.DS)]
    public class AIHTNPlannerDaemonIndividualCallTermsGame : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x55FFA333016B7116, GameType.DS)]
    public class AIHTNPlannerDaemonIndividualCallTermsGameResource : AIHTNPlannerDaemonResource
    {
    }

    [RTTI.Serializable(0x1D8E345DAFDA2413, GameType.DS)]
    public class AIHTNPlannerDaemonMarkerEntity : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x3038BF7F27DF3DFC, GameType.DS)]
    public class AIHTNPlannerDaemonNavMesh : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x3A96E5559F4BD3BF, GameType.DS)]
    public class AIHTNPlannerDaemonPathFinder : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC11E9C5C99B61E49, GameType.DS)]
    public class AIHTNPlannerDaemonPerchPoints : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x221B9A913B64B007, GameType.DS)]
    public class AIHTNPlannerDaemonPerchPointsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCB4BAC22D8DB3837, GameType.DS)]
    public class AIHTNPlannerDaemonPlayerInfo : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x927367C5599C4B01, GameType.DS)]
    public class AIHTNPlannerDaemonPositionPicker : AIHTNPlannerDaemonPositionPickerAgent
    {
    }

    [RTTI.Serializable(0x2E9E4F2AF7A6E826, GameType.DS)]
    public class AIHTNPlannerDaemonPositionPickerAgent : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x45A338755BAEF2E9, GameType.DS)]
    public class AIHTNPlannerDaemonPositionPickerGame : AIHTNPlannerDaemonPositionPicker
    {
    }

    [RTTI.Serializable(0xEE032A0220969381, GameType.DS)]
    public class AIHTNPlannerDaemonPositionPickerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEEBC8252F1F42198, GameType.DS)]
    public class AIHTNPlannerDaemonProperties : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x7A0E917879990DDE, GameType.DS)]
    public class AIHTNPlannerDaemonPropertiesResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<Fact>> Properties;
    }

    [RTTI.Serializable(0x4BF7849BDE249EB6, GameType.DS)]
    public class AIHTNPlannerDaemonResource : Resource
    {
    }

    [RTTI.Serializable(0xAB0A05CCC16DD7D4, GameType.DS)]
    public class AIHTNPlannerDaemonResourceSet : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<AIHTNPlannerDaemonResource>> DaemonResources;
    }

    [RTTI.Serializable(0xC9F90B1A0A361EBE, GameType.DS)]
    public class AIHTNPlannerDaemonRobotState : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x219887F2070E44C6, GameType.DS)]
    public class AIHTNPlannerDaemonRoute : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xE7E278237DF1C8A4, GameType.DS)]
    public class AIHTNPlannerDaemonRouteGame : AIHTNPlannerDaemonRoute
    {
    }

    [RTTI.Serializable(0x58876FB08FF410CD, GameType.DS)]
    public class AIHTNPlannerDaemonSmartObjects : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x745DCE934790B7C2, GameType.DS)]
    public class AIHTNPlannerDaemonSpecialMoves : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x79AB1FB584ECB7CA, GameType.DS)]
    public class AIHTNPlannerDaemonSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x55D916133DBD7167, GameType.DS)]
    public class AIHTNPlannerDaemonTeamCoordination : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF71EDE4FD467730C, GameType.DS)]
    public class AIHTNPlannerDaemonTeamMember : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xEF8362E6905715B4, GameType.DS)]
    public class AIHTNPlannerDaemonTerrainInfo : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x170CD50C0F4835C8, GameType.DS)]
    public class AIHTNPlannerDaemonTerrainInfoIndividual : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xAFE81D57D53342C2, GameType.DS)]
    public class AIHTNPlannerDaemonThreatReappearanceLocation : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF0C445539FE119E1, GameType.DS)]
    public class AIHTNPlannerDaemonUseLocations : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x4AE38FCAAE1FCAB0, GameType.DS)]
    public class AIHTNPlannerDaemonVisibility : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x7404CFDBB5A84AEE, GameType.DS)]
    public class AIHTNPlannerDaemonWeapons : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x97E0E80B9D2DE733, GameType.DS)]
    public class AIHTNPlannerDaemonWeaponsResource : AIHTNPlannerDaemonResource
    {
    }

    [RTTI.Serializable(0x53C5721A0B614AC1, GameType.DS)]
    public class AIHTNPlannerDaemonWildlife : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF617C0FE6F6DF93A, GameType.DS)]
    public class AIHTNPlannerResource : ProgramResource
    {
        [RTTI.Member(7, 0x68, "General")] public Array<String> DaemonNames;
        [RTTI.Member(8, 0x78, "General")] public Array<Ref<AIHTNPlannerDaemonResource>> DaemonResources;
        [RTTI.Member(9, 0x88, "General")] public Array<Ref<AIHTNPlannerDaemonResourceSet>> DaemonResourceSets;
        [RTTI.Member(10, 0x98, "General")] public String DomainFileName;
    }

    [RTTI.Serializable(0xEE4985F240A1537D, GameType.DS)]
    public class AIHTNPrimitiveTask : RTTIObject
    {
    }

    [RTTI.Serializable(0x15AC0D61934F92DF, GameType.DS)]
    public class AIHTNPrimitiveTaskAddBuddy : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6541E8CFE5889D18, GameType.DS)]
    public class AIHTNPrimitiveTaskAddPassport : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6E10DF4943CE8DA3, GameType.DS)]
    public class AIHTNPrimitiveTaskAgent : AIHTNPrimitiveTask
    {
    }

    [RTTI.Serializable(0xFD3C0778A768FBE0, GameType.DS)]
    public class AIHTNPrimitiveTaskAlertFor : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA05193F2AD5C8CDB, GameType.DS)]
    public class AIHTNPrimitiveTaskApplyAntiStealthPatch : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x68803D3F5C5339C1, GameType.DS)]
    public class AIHTNPrimitiveTaskAssumeAIContext : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x190CCE3CA7C16C22, GameType.DS)]
    public class AIHTNPrimitiveTaskAssumeStance : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x430856CF575BB9EE, GameType.DS)]
    public class AIHTNPrimitiveTaskBeginPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xD96FB135AAD504E4, GameType.DS)]
    public class AIHTNPrimitiveTaskBeginSecondaryPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x1F77823987BA10A7, GameType.DS)]
    public class AIHTNPrimitiveTaskBehaviorScopeIndividual : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xEC7A2413E3EBF8C7, GameType.DS)]
    public class AIHTNPrimitiveTaskBehaviorScopedForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x693B380224DFDF99, GameType.DS)]
    public class AIHTNPrimitiveTaskBehaviorScopedRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x278FB55550D75588, GameType.DS)]
    public class AIHTNPrimitiveTaskBlackboardForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x73164C5E7ED44622, GameType.DS)]
    public class AIHTNPrimitiveTaskBlackboardRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xCC126B3F8D2935A6, GameType.DS)]
    public class AIHTNPrimitiveTaskBlockAttack : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x40129E5FBD840EF5, GameType.DS)]
    public class AIHTNPrimitiveTaskBroadcast : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xEED6B0023C359DB2, GameType.DS)]
    public class AIHTNPrimitiveTaskClearOrder : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x34D7944E27FCE22E, GameType.DS)]
    public class AIHTNPrimitiveTaskClearReservation : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x24AA5C7DD0173FC7, GameType.DS)]
    public class AIHTNPrimitiveTaskCloseCombat : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x954F9DE75305CE4E, GameType.DS)]
    public class AIHTNPrimitiveTaskConfirmAllThreatsLost : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x62A6349D0B7FD32F, GameType.DS)]
    public class AIHTNPrimitiveTaskConfirmThreatLost : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x1889C68FC466D26B, GameType.DS)]
    public class AIHTNPrimitiveTaskCreateSubgroup : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xF683A9A032B657D, GameType.DS)]
    public class AIHTNPrimitiveTaskCreateUnion : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xFC21D54032D32B69, GameType.DS)]
    public class AIHTNPrimitiveTaskDisableStagger : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x37A3AC45F68ED006, GameType.DS)]
    public class AIHTNPrimitiveTaskDismountObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x33CD749BCF9F2FEF, GameType.DS)]
    public class AIHTNPrimitiveTaskDiveRun : AIHTNPrimitiveTaskFlyLine
    {
    }

    [RTTI.Serializable(0x5429DB15A13DAA4D, GameType.DS)]
    public class AIHTNPrimitiveTaskDoCustomAction : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x10DE06D4C13E2D20, GameType.DS)]
    public class AIHTNPrimitiveTaskDraw : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x4DE58F3CC4FC06B8, GameType.DS)]
    public class AIHTNPrimitiveTaskEndCoordinatedBehavior : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x387A465345417BAE, GameType.DS)]
    public class AIHTNPrimitiveTaskEndPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x2C07697CD8CD80AB, GameType.DS)]
    public class AIHTNPrimitiveTaskEndSecondaryPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xF2AC4797FEC5E110, GameType.DS)]
    public class AIHTNPrimitiveTaskEntityAction : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE7533131A0D460DA, GameType.DS)]
    public class AIHTNPrimitiveTaskError : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xBD888714DBD9E834, GameType.DS)]
    public class AIHTNPrimitiveTaskErrorUnsupportedOrder : AIHTNPrimitiveTaskError
    {
    }

    [RTTI.Serializable(0x93774A2D3711C967, GameType.DS)]
    public class AIHTNPrimitiveTaskExpandHTNDecomposition : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xEBD9D3F9D4EEB6A5, GameType.DS)]
    public class AIHTNPrimitiveTaskFaceTowards : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x381B3E56681F68CF, GameType.DS)]
    public class AIHTNPrimitiveTaskFail : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x15FB3B9C72C12EA1, GameType.DS)]
    public class AIHTNPrimitiveTaskFailIf : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE65C25CEAFE74C6F, GameType.DS)]
    public class AIHTNPrimitiveTaskFireBurstAtDestructibilityPart : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x32CE11AC5C6A02, GameType.DS)]
    public class AIHTNPrimitiveTaskFireBurstAtEntity : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x140FEE283D847049, GameType.DS)]
    public class AIHTNPrimitiveTaskFireBurstAtPosition : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x4DBD1D5F2A849F1D, GameType.DS)]
    public class AIHTNPrimitiveTaskFireBurstBlind : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x5474512F346A21CB, GameType.DS)]
    public class AIHTNPrimitiveTaskFireBurstInDirection : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0xF705CF9B4F312F25, GameType.DS)]
    public class AIHTNPrimitiveTaskFlyLine : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x7166E560AB213083, GameType.DS)]
    public class AIHTNPrimitiveTaskFlySegment : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x12BE4BEB7D02749A, GameType.DS)]
    public class AIHTNPrimitiveTaskForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xAF5C891C2DADCB9B, GameType.DS)]
    public class AIHTNPrimitiveTaskGesture : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x4B6E2C6EA909DC02, GameType.DS)]
    public class AIHTNPrimitiveTaskGlanceAt : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xF4AA690D135A9F7F, GameType.DS)]
    public class AIHTNPrimitiveTaskGlanceAtEntity : AIHTNPrimitiveTaskGlanceAt
    {
    }

    [RTTI.Serializable(0xA98F07E3B0D1E80C, GameType.DS)]
    public class AIHTNPrimitiveTaskGlanceAtLocator : AIHTNPrimitiveTaskGlanceAt
    {
    }

    [RTTI.Serializable(0x9B20E59D34DD5FC0, GameType.DS)]
    public class AIHTNPrimitiveTaskGlanceAtPosition : AIHTNPrimitiveTaskGlanceAt
    {
    }

    [RTTI.Serializable(0x43FFFCBCAA867601, GameType.DS)]
    public class AIHTNPrimitiveTaskGroup : AIHTNPrimitiveTask
    {
    }

    [RTTI.Serializable(0xA312FDD8DB1C7E99, GameType.DS)]
    public class AIHTNPrimitiveTaskGroupMessageToAllMembers : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x10241A1AF2B034A7, GameType.DS)]
    public class AIHTNPrimitiveTaskGroupSetState : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x3904C1BB4F255D87, GameType.DS)]
    public class AIHTNPrimitiveTaskGroupTerminate : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x2D6D39664BF86665, GameType.DS)]
    public class AIHTNPrimitiveTaskHoverSegment : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x66120E7F55AD7A0B, GameType.DS)]
    public class AIHTNPrimitiveTaskImmediateReloadWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x72E3371A48F2FF59, GameType.DS)]
    public class AIHTNPrimitiveTaskIndividual : AIHTNPrimitiveTask
    {
    }

    [RTTI.Serializable(0xF4A44F51B9D9D936, GameType.DS)]
    public class AIHTNPrimitiveTaskIndividualFireWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x45D386E8874BFED9, GameType.DS)]
    public class AIHTNPrimitiveTaskLand : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0xB2E3FDF6E77E9BE5, GameType.DS)]
    public class AIHTNPrimitiveTaskLandAnimalFlee : AIHTNPrimitiveTaskLandAnimalMovement
    {
    }

    [RTTI.Serializable(0xFCCE24B919B268A, GameType.DS)]
    public class AIHTNPrimitiveTaskLandAnimalMovement : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x66A0DB1038419512, GameType.DS)]
    public class AIHTNPrimitiveTaskLandAnimalWander : AIHTNPrimitiveTaskLandAnimalMovement
    {
    }

    [RTTI.Serializable(0xCF3776991A8B0D4B, GameType.DS)]
    public class AIHTNPrimitiveTaskLog : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xAFAC8B69E02D8ADA, GameType.DS)]
    public class AIHTNPrimitiveTaskLookAlongPath : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x20908901D6A553D3, GameType.DS)]
    public class AIHTNPrimitiveTaskMessage : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x7356E5A4393ABE3A, GameType.DS)]
    public class AIHTNPrimitiveTaskMountObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x40D4CB591F19EDD7, GameType.DS)]
    public class AIHTNPrimitiveTaskMove : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x9F03AFA421D9A52F, GameType.DS)]
    public class AIHTNPrimitiveTaskOnAbort : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x8D37DAF218FA07AA, GameType.DS)]
    public class AIHTNPrimitiveTaskOnAbortOrFail : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xEB21CC7E6A655231, GameType.DS)]
    public class AIHTNPrimitiveTaskOnFail : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x582FB3FADD58AC50, GameType.DS)]
    public class AIHTNPrimitiveTaskPauseGame : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xA5114051F4939D6, GameType.DS)]
    public class AIHTNPrimitiveTaskPerch : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA3E2AFA9AF15EF55, GameType.DS)]
    public class AIHTNPrimitiveTaskPlanScopedForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x8EDBA3FE01F4784F, GameType.DS)]
    public class AIHTNPrimitiveTaskPlanScopedRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x6BEBD96452643C61, GameType.DS)]
    public class AIHTNPrimitiveTaskPlayMonitoredAnimation : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xB7CCE503F789A286, GameType.DS)]
    public class AIHTNPrimitiveTaskPlayWarpedAnimation : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x7B875479FBF2CBAF, GameType.DS)]
    public class AIHTNPrimitiveTaskRaiseThreatLevel : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x74EFDEF8EE420D5C, GameType.DS)]
    public class AIHTNPrimitiveTaskRegisterAttackExecuted : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA83E15420AEA1EF9, GameType.DS)]
    public class AIHTNPrimitiveTaskReloadWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6218E0EBFCFC34EC, GameType.DS)]
    public class AIHTNPrimitiveTaskRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x1774C8CE119C2D9A, GameType.DS)]
    public class AIHTNPrimitiveTaskRememberOnFail : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x5AF57C15AB6A8D8B, GameType.DS)]
    public class AIHTNPrimitiveTaskRemoveBuddy : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xB0BAD8834691556E, GameType.DS)]
    public class AIHTNPrimitiveTaskRemovePassport : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x120544A4CCAB9384, GameType.DS)]
    public class AIHTNPrimitiveTaskReportThreat : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x73E3D50AAEADA03F, GameType.DS)]
    public class AIHTNPrimitiveTaskRequestCoordinatedBehavior : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x63D9E20C27623BD7, GameType.DS)]
    public class AIHTNPrimitiveTaskRequestResponseToSpeechEvent : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x65E6E9E4B8A346D5, GameType.DS)]
    public class AIHTNPrimitiveTaskReserveObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x67088B53CFDB92F6, GameType.DS)]
    public class AIHTNPrimitiveTaskSatisfyDesire : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x540310BFFCDC0F, GameType.DS)]
    public class AIHTNPrimitiveTaskScanPositionList : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xD1EA3459765250F4, GameType.DS)]
    public class AIHTNPrimitiveTaskScavenge : AIHTNPrimitiveTaskCloseCombat
    {
    }

    [RTTI.Serializable(0xA84B30ED42D3BF2C, GameType.DS)]
    public class AIHTNPrimitiveTaskSelectTarget : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA64058FEACA8E60A, GameType.DS)]
    public class AIHTNPrimitiveTaskSelectWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xB73EF92DB67F24D4, GameType.DS)]
    public class AIHTNPrimitiveTaskSendAttackMessage : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x65D927398679E742, GameType.DS)]
    public class AIHTNPrimitiveTaskSendContextualSpeechMessage : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x7FF12DC010980908, GameType.DS)]
    public class AIHTNPrimitiveTaskSendEventMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0xF0218372C3C5F83E, GameType.DS)]
    public class AIHTNPrimitiveTaskSendOrderArrivedMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0x5624CA9B7AEF9E97, GameType.DS)]
    public class AIHTNPrimitiveTaskSendOrderCompletedMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0xCC6B9F5E647B8A89, GameType.DS)]
    public class AIHTNPrimitiveTaskSendOrderFailedMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0xE23B6DA451DEFD10, GameType.DS)]
    public class AIHTNPrimitiveTaskSendPatrolPathMessage : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x186638C2D8710BC2, GameType.DS)]
    public class AIHTNPrimitiveTaskSendSceneMessage : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x5B8AD3663799CA63, GameType.DS)]
    public class AIHTNPrimitiveTaskSendSequenceMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0xF0450E0F83CED4BF, GameType.DS)]
    public class AIHTNPrimitiveTaskSetCoordinatedBehaviorExpiryTime : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xB51CFB35E8D0F9, GameType.DS)]
    public class AIHTNPrimitiveTaskSetEnumFactValue : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x45A10E00973657F5, GameType.DS)]
    public class AIHTNPrimitiveTaskSetGroupFormation : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x5C3BD41C891A7186, GameType.DS)]
    public class AIHTNPrimitiveTaskSetGroupPath : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xE77A2355357FC6CF, GameType.DS)]
    public class AIHTNPrimitiveTaskSetMarkerEntity : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x1162F35D51E51D94, GameType.DS)]
    public class AIHTNPrimitiveTaskSetPerception : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x35781B3E7265CE5F, GameType.DS)]
    public class AIHTNPrimitiveTaskStartGroupPathUpdate : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xBBC0EFEA4F7A01D4, GameType.DS)]
    public class AIHTNPrimitiveTaskStopDelayingDeath : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x5D1C70C0F7E5EACA, GameType.DS)]
    public class AIHTNPrimitiveTaskStowWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x449EE17CF945F8EF, GameType.DS)]
    public class AIHTNPrimitiveTaskSwimFlee : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x64B721CA242CE5C9, GameType.DS)]
    public class AIHTNPrimitiveTaskSwimToTarget : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x71C03EEDCEFAEA, GameType.DS)]
    public class AIHTNPrimitiveTaskSwimWander : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0xA46279C4A497929B, GameType.DS)]
    public class AIHTNPrimitiveTaskTakeOff : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE52DD334D7A324AC, GameType.DS)]
    public class AIHTNPrimitiveTaskTarget : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x20A9615C90174165, GameType.DS)]
    public class AIHTNPrimitiveTaskTargetEntity : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x413EB86AC63FE3B1, GameType.DS)]
    public class AIHTNPrimitiveTaskTargetHeading : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0xA4BC11AEC19D683A, GameType.DS)]
    public class AIHTNPrimitiveTaskTargetLocalPitch : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x43AA423954D18221, GameType.DS)]
    public class AIHTNPrimitiveTaskTargetLocator : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x4A8B7FDFB0C474DD, GameType.DS)]
    public class AIHTNPrimitiveTaskTargetPoint : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0xF34DB449071B8E3B, GameType.DS)]
    public class AIHTNPrimitiveTaskTargetThreat : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x51ED6F6E1CA82F3A, GameType.DS)]
    public class AIHTNPrimitiveTaskTeleport : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x37A4A706AF2C0A39, GameType.DS)]
    public class AIHTNPrimitiveTaskUpdateFactMessage : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x3451C1E5BDA358B9, GameType.DS)]
    public class AIHTNPrimitiveTaskUseJumpLink : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x621D6673BB121D2E, GameType.DS)]
    public class AIHTNPrimitiveTaskUseObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x3E97D2C3DA246A9C, GameType.DS)]
    public class AIHTNPrimitiveTaskWait : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x7426ECC48AE3636, GameType.DS)]
    public class AIHTNPrimitiveTaskWalkSegment : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0xB951419E93664B52, GameType.DS)]
    public class AIHTNPrimitiveTaskWalkToCloseCombat : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x7F7246CAE3E97AD4, GameType.DS)]
    public class AIHTNPrimitiveTaskWalkToPositionSegment : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x7876F7737A8620BD, GameType.DS)]
    public class AIHTNPrimitiveTaskWalkToUseLocationSegment : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x434893E5EF73C2B5, GameType.DS)]
    public class AIHapticSensor : AISensor
    {
        [RTTI.Member(3, 0x20, "Touch")] public float PositionDetectDistance;
    }

    [RTTI.Serializable(0x87C2F409348BD0FC, GameType.DS)]
    public class AIHapticStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0xF89D665C11837E2D, GameType.DS)]
    public class AIHapticStimulusResource : AIStimulusResource
    {
        [RTTI.Member(9, 0x40, "General")] public bool AffectsSuppression;
    }

    [RTTI.Serializable(0xCE98793B2E1F0187, GameType.DS)]
    public class AIHelperComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x43D6899FEB3CE201, GameType.DS)]
    public class AIHelperComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<String> VisualNodeBones;
        [RTTI.Member(4, 0x30, "Logic")] public Array<String> LineAttackNodeBones;
        [RTTI.Member(5, 0x40, "Logic")] public Array<String> BallisticAttackNodeBones;
    }

    [RTTI.Serializable(0x323EBD46616B5A12, GameType.DS)]
    public class AIHintSymbolResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String Hint;
    }

    [RTTI.Serializable(0x85C090E0EFD90A36, GameType.DS)]
    public class AIHintSymbolResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x67E3EC080F3FCDDF, GameType.DS)]
    public class AIHtnFactMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xB8B3A7E97D036FE, GameType.DS)]
    public class AIHtnFactMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0x9B8ADCC0791A6D5C, GameType.DS)]
    public class AIHtnPlannerDaemonAgentCommon : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x143DEA05C21D9A09, GameType.DS)]
    public class AIHtnPlannerDaemonBehaviorGroup : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC97024625C0B9883, GameType.DS)]
    public class AIHtnPlannerDaemonIndividualCallTerms : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x1D4EF0E7F52E26E6, GameType.DS)]
    public class AIHtnPlannerDaemonUtilityCallTerms : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0x3806A187572F98B8, GameType.DS)]
    public class AIHtnPlannerDaemonUtilityCallTermsGame : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0x54E4DF73851745FA, GameType.DS)]
    public class AIHtnPrimitiveTaskForceAlertLevelNoThreats : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xBE4AE6E5F07363FD, GameType.DS)]
    public class AIHtnUpdateFactMessage : AIHtnFactMessage
    {
    }

    [RTTI.Serializable(0x32FF3A0922A21E01, GameType.DS)]
    public class AIHtnUpdateFactMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0x7E4680DAAF71DB69, GameType.DS)]
    public class AIHumanoidSkillContext : AISkillContext
    {
        [RTTI.Member(8, 0x40, "General")] public String UpperBodyPosture;
        [RTTI.Member(9, 0x48, "General")] public Array<Ref<SelectResource>> AnimationVariables;
    }

    [RTTI.Serializable(0xC4C911FE6DF95F1B, GameType.DS)]
    public class AIIndividual : AIDirectableAgent
    {
    }

    [RTTI.Serializable(0x7B062FDE894EB788, GameType.DS)]
    public class AIIndividualComponent : EntityComponent
    {
        [RTTI.Member(6, 0x50, "Logic", true)] public Ref<AIIndividual> AIIndividual;
        [RTTI.Member(7, 0x58, "Logic", true)] public bool AiIndividualAdded;
    }

    [RTTI.Serializable(0x5C55769F971BFE0B, GameType.DS)]
    public class AIIndividualComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AIIndividualResource> AIIndividualResource;
    }

    [RTTI.Serializable(0xF0D3416AE4A2C92E, GameType.DS)]
    public class AIIndividualComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x47990B34608D3DCF, GameType.DS)]
    public class AIIndividualResource : AIAgentResource
    {
        [RTTI.Member(7, 0x30, "General")] public Ref<AICombatSituationResource> CombatSituationResource;
        [RTTI.Member(9, 0x38, "Perception")] public Ref<AIPerceptionResource> Perception;
        [RTTI.Member(11, 0x40, "Skills")] public Ref<AISkillManagerResource> Skills;
        [RTTI.Member(13, 0x48, "Context")] public Ref<AIContextResourceSet> ResourceSet;
        [RTTI.Member(15, 0x50, "Weapons")] public Array<Ref<AIWeaponPreference>> Preferences;
        [RTTI.Member(25, 0x60, "Communication")] public bool CommunicateInitialThreatSpotted;
        [RTTI.Member(17, 0x64, "FindAttackLocationDaemon")] public float MaxCacheTimeForLoaResult;
        [RTTI.Member(18, 0x68, "FindAttackLocationDaemon")] public float MaxCacheTimeForLocationResult;
        [RTTI.Member(20, 0x6C, "Communication")] public float ReportSituationDistance;
        [RTTI.Member(21, 0x70, "Communication")] public bool ReportObservedExactThreats;
        [RTTI.Member(22, 0x74, "Communication")] public float ReportObservedExactThreatsDelay;
        [RTTI.Member(23, 0x78, "Communication")] public float ReportEnemySpottedDelay;
        [RTTI.Member(24, 0x80, "Communication")] public Ref<AIStimulusResource> CommunicateThreatInformationStimulusResource;
        [RTTI.Member(26, 0x88, "Communication")] public Ref<AIStimulusResource> CommunicateDeathStimulusResource;
        [RTTI.Member(28, 0x98, "Attacks")] public Array<Ref<AIAttackResource>> AttackResources;
    }

    [RTTI.Serializable(0x589B9492CB451064, GameType.DS)]
    public class AIIndividualSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x682EF184665C5881, GameType.DS)]
    public class AIInventoryAmmoEjectorInterface : AIInventoryWeaponInterface
    {
    }

    [RTTI.Serializable(0x38DCAF48C39DE142, GameType.DS)]
    public class AIInventoryWeaponInterface : AIWeaponInterfaceGame
    {
    }

    [RTTI.Serializable(0xF83DF6A50511AA23, GameType.DS)]
    public class AIJumpLink : ParentWorldNode
    {
        [RTTI.Member(9, 0x70)] public Ref<AIPathObjectCategory> Category;
        [RTTI.Member(6, 0x78)] public Ref<WorldNode> Start;
        [RTTI.Member(7, 0x80)] public Ref<WorldNode> End;
        [RTTI.Member(8, 0x88)] public bool Bidirectional;
    }

    [RTTI.Serializable(0x2348FF1244BD31B2, GameType.DS)]
    public class AIJumpLinkAnimation : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<PlayWarpedAnimation> PlayWarpedAnimation;
        [RTTI.Member(3, 0x28)] public float MaxWarpDistance;
    }

    [RTTI.Serializable(0x2E8733EEA77DFBC5, GameType.DS)]
    public class AIJumpLinkComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCDD38AECAEFB7321, GameType.DS)]
    public class AIJumpLinkComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<AIJumpLinkAnimation>> JumpAnimations;
        [RTTI.Member(3, 0x30)] public Ref<AIPathObjectCategory> Category;
    }

    [RTTI.Serializable(0x45E4672E3421C23B, GameType.DS)]
    public class AIJumpLinkObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x4C0336ABAA9D1C0B, GameType.DS)]
    public class AILineWeaponOperationInstance : AIWeaponOperationInstanceGame
    {
    }

    [RTTI.Serializable(0x673C9FDCF12B320B, GameType.DS)]
    public class AILineWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
        [RTTI.Member(8, 0x38, "General")] public Array<Vec3> AimPoints;
        [RTTI.Member(9, 0x48, "General")] public Ref<CurveResource> TrackingSpring;
        [RTTI.Member(10, 0x50, "General")] public Ref<CurveResource> VelocityAlongLine;
        [RTTI.Member(11, 0x58, "General")] public float StopTrackingAtFraction;
        [RTTI.Member(12, 0x5C, "General")] public float MinimumDistanceFromShooter;
    }

    [RTTI.Serializable(0x9BA49E24ED58B20B, GameType.DS)]
    public class AILureCallMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x870A89B5F72184B2, GameType.DS)]
    public class AILureCallMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0x96EF8F88E0E484D5, GameType.DS)]
    public class AILureCallMessageHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0xCFE2808FD652D7A, GameType.DS)]
    public class AIManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xD283BA7C59E533F6, GameType.DS)]
    public class AIManagerGame : AIManager
    {
    }

    [RTTI.Serializable(0x41EDB6B2F0DFB3E5, GameType.DS)]
    public class AIManagerGameSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3DB37DDBFA8F360F, GameType.DS)]
    public class AIManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AIGroupResource> CollectiveResource;
        [RTTI.Member(4, 0x28, "General")] public Array<Ref<AIGroupResource>> AIGroups;
        [RTTI.Member(5, 0x38, "General")] public Array<Ref<AIIndividualResource>> AIIndividuals;
        [RTTI.Member(6, 0x48, "General")] public Ref<AITagsMappingResource> AITagsMappingResource;
        [RTTI.Member(8, 0x50, "Stimuli")] public Ref<AIHapticStimulusResource> CollisionHapticStimulus;
        [RTTI.Member(9, 0x58, "Stimuli")] public Ref<AIAuralStimulusResource> WhizzByAuralStimulus;
        [RTTI.Member(11, 0x60, "Factions")] public Array<Ref<AIFaction>> Factions;
        [RTTI.Member(12, 0x70, "Factions")] public Ref<AIFaction> DefaultFaction;
        [RTTI.Member(13, 0x78, "Factions")] public Ref<AIFaction> NeutralFaction;
        [RTTI.Member(14, 0x80, "Factions")] public Ref<AIFaction> EnemyToAllFaction;
        [RTTI.Member(16, 0x88, "Scenarios")] public Ref<AIScenarioManagerResource> ScenarioManager;
        [RTTI.Member(18, 0x90, "DynamicCover")] public Ref<AIContextResource> CoverSearchContext;
    }

    [RTTI.Serializable(0x1409398B44B4EC69, GameType.DS)]
    public class AIManagerResourceGame : AIManagerResource
    {
        [RTTI.Member(20, 0x98, "General")] public Ref<AIPlayerPerformanceFeedbackResource> PlayerPerformanceFeedback;
        [RTTI.Member(22, 0xA0, "CombatDifficulty")] public Ref<CurveResource> AllowedMeleeAttackOverlap;
        [RTTI.Member(24, 0xA8, "TagProperties")] public Ref<TagProperty> RobotTagProperty;
        [RTTI.Member(26, 0xB0, "Factions")] public Ref<AIFaction> WildlifeFaction;
    }

    [RTTI.Serializable(0xCBC7BA9DB815C2BC, GameType.DS)]
    public class AIManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA140D96207B9B16C, GameType.DS)]
    public class AIMarker : WorldMarker
    {
    }

    [RTTI.Serializable(0x6B1A383FF111DE13, GameType.DS)]
    public class AIMarkerLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x18A0E973F9069B81, GameType.DS)]
    public class AIMarkerLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<AIMarker> AIMarker;
        [RTTI.Member(9, 0x40, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0x8C6DE0656BCD390, GameType.DS)]
    public class AIMarkerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC64FD6330FB7CA3E, GameType.DS)]
    public class AIMeleeWeaponAttackTypeInterface : AIInventoryWeaponInterface
    {
    }

    [RTTI.Serializable(0x193C9E1211DF79CB, GameType.DS)]
    public class AIMeleeWeaponInterface : AIControlledEntityInterface
    {
    }

    [RTTI.Serializable(0x1569EDE34803A7, GameType.DS)]
    public class AIMemberFormation : AIFormation
    {
    }

    [RTTI.Serializable(0x1B8507D0BA99C860, GameType.DS)]
    public class AIMemberFormationResource : AIFormationResource
    {
        [RTTI.Member(10, 0x38, "Persistence")] public bool MaintainSlotAssignments;
    }

    [RTTI.Serializable(0xC9DC45432232971F, GameType.DS)]
    public class AIMessage : CoreObject
    {
    }

    [RTTI.Serializable(0x56A0217C6DAF8B85, GameType.DS)]
    public class AIMessageHandler : RTTIObject
    {
    }

    [RTTI.Serializable(0x4D2F38D4425F7C, GameType.DS)]
    public class AIMessageHandlerResource : Resource
    {
    }

    [RTTI.Serializable(0x4E67E3B7FA272EDC, GameType.DS)]
    public class AIMessageHandlerResourceSet : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<AIMessageHandlerResource>> Handlers;
    }

    [RTTI.Serializable(0x7AE86C96EDD846AC, GameType.DS)]
    public class AIMountableObject
    {
    }

    [RTTI.Serializable(0x838E01C0DF52EBAE, GameType.DS)]
    public class AIMovementAttack : AIAttack
    {
    }

    [RTTI.Serializable(0x248AE2CB0F860573, GameType.DS)]
    public class AIMovementAttackResource : AIAttackResource
    {
        [RTTI.Member(17, 0xA8, "Settings")] public FRange Range;
    }

    [RTTI.Serializable(0xF62C45668E227806, GameType.DS)]
    public class AIMover : Mover
    {
    }

    [RTTI.Serializable(0x1DE773DD4DAF1C3F, GameType.DS)]
    public class AIMoverInterface
    {
    }

    [RTTI.Serializable(0x328C3C7E3D7146BA, GameType.DS)]
    public class AIMoverPostureBaseSettings : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String ID;
        [RTTI.Member(1, 0x18)] public String IsActiveAnimTagName;
        [RTTI.Member(2, 0x20)] public AnimationTagID IsActiveAnimTag;
        [RTTI.Member(3, 0x24)] public bool NeedStartWhenBeingSwitchedTo;
        [RTTI.Member(4, 0x25)] public bool NeedStopWhenBeingSwitchedFrom;
        [RTTI.Member(5, 0x26)] public bool DoesNotPlanAheadWhenAboutToStop;
    }

    [RTTI.Serializable(0xE1969A6295667A06, GameType.DS)]
    public class AIMoverPostureSettings : AIMoverPostureBaseSettings
    {
        [RTTI.Member(8, 0x28)] public bool HasDirectionalStarts;
        [RTTI.Member(9, 0x30)] public bool HasDirectionalStops;
        [RTTI.Member(6, 0x31)] public bool BodyHeadingCanDifferFromMoveHeading;
        [RTTI.Member(7, 0x32)] public bool PrefersToWalkForward;
        [RTTI.Member(10, 0x33)] public bool CanMoveInEveryHeadingDirection;
        [RTTI.Member(11, 0x34)] public bool HasTwoFeetStopping;
        [RTTI.Member(12, 0x38)] public float MoveAngleModifier;
        [RTTI.Member(13, 0x3C)] public float MaxMoveAngle;
        [RTTI.Member(14, 0x40)] public float MaxMoveHeading;
        [RTTI.Member(15, 0x44)] public FRange CycleSpeedRange;
        [RTTI.Member(16, 0x4C)] public int AnimationHeadingStepsAhead;
        [RTTI.Member(17, 0x50)] public FRange QuickTurnEntrySpeedRange;
        [RTTI.Member(18, 0x58)] public float QuickTurnEntrySpeedRangeModifier;
        [RTTI.Member(19, 0x5C)] public float QuickTurnAngleMaxOffset;
        [RTTI.Member(20, 0x60)] public AnimationNodeID StartAnimStateNode;
        [RTTI.Member(21, 0x62)] public AnimationNodeID CycleAnimStateNode;
        [RTTI.Member(22, 0x64)] public AnimationNodeID StopAnimStateNode;
        [RTTI.Member(23, 0x66)] public AnimationNodeID TurnAnimStateNode;
        [RTTI.Member(24, 0x68)] public AnimationNodeID QuickTurnStopAnimStateNode;
        [RTTI.Member(25, 0x6A)] public AnimationNodeID QuickTurnStartAnimStateNode;
    }

    [RTTI.Serializable(0x22565D1156994FC1, GameType.DS)]
    public class AIMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "General")] public bool PlaceOnGround;
        [RTTI.Member(8, 0x29, "General")] public bool UseContactNormal;
        [RTTI.Member(9, 0x2C, "General")] public float MaxTiltAngle;
        [RTTI.Member(10, 0x30, "General")] public float MaxTurnSpeed;
        [RTTI.Member(11, 0x34, "General")] public float TurnAcceleration;
        [RTTI.Member(12, 0x38, "General")] public bool MoveAngleVariableAsRadians_HACK;
        [RTTI.Member(16, 0x40, "Animation")] public Array<AIMoverPostureSettings> Postures;
        [RTTI.Member(14, 0x50, "Animation")] public Ref<MorphemeAnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(15, 0x58, "Animation", true)] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(17, 0x60, "Animation")] public String MoveAnimVarName;
        [RTTI.Member(18, 0x68, "Animation")] public String TurnAnimVarName;
        [RTTI.Member(19, 0x70, "Animation")] public String JumpAnimVarName;
        [RTTI.Member(20, 0x78, "Animation")] public String StopAnimVarName;
        [RTTI.Member(21, 0x80, "Animation")] public String QuickTurnAnimVarName;
        [RTTI.Member(22, 0x88, "Animation")] public String SpeedAnimVarName;
        [RTTI.Member(23, 0x90, "Animation")] public String DesiredPostureAnimVarName;
        [RTTI.Member(24, 0x98, "Animation")] public String CurrentPostureAnimVarName;
        [RTTI.Member(25, 0xA0, "Animation")] public String MoveHeadingAnimVarName;
        [RTTI.Member(26, 0xA8, "Animation")] public String MoveAngleAnimVarName;
        [RTTI.Member(27, 0xB0, "Animation")] public String StartHeadingAnimVarName;
        [RTTI.Member(28, 0xB8, "Animation")] public String TurnAngleAnimVarName;
        [RTTI.Member(29, 0xC0, "Animation")] public String QuickTurnAngleAnimVarName;
        [RTTI.Member(30, 0xC8, "Animation", true)] public String StartAnimTagName;
        [RTTI.Member(31, 0xD0, "Animation", true)] public String CycleAnimTagName;
        [RTTI.Member(32, 0xD8, "Animation", true)] public String StopAnimTagName;
        [RTTI.Member(33, 0xE0, "Animation", true)] public String TurnAnimTagName;
        [RTTI.Member(34, 0xE8, "Animation", true)] public String QuickTurnAnimTagName;
        [RTTI.Member(35, 0xF0, "Animation", true)] public String QuickTurnStopAnimTagName;
        [RTTI.Member(36, 0xF8, "Animation", true)] public String QuickTurnStartAnimTagName;
        [RTTI.Member(37, 0x100, "Animation")] public AnimationTagID StartAnimTag;
        [RTTI.Member(38, 0x104, "Animation")] public AnimationTagID CycleAnimTag;
        [RTTI.Member(39, 0x108, "Animation")] public AnimationTagID StopAnimTag;
        [RTTI.Member(40, 0x10C, "Animation")] public AnimationTagID TurnAnimTag;
        [RTTI.Member(41, 0x110, "Animation")] public AnimationTagID QuickTurnAnimTag;
        [RTTI.Member(42, 0x114, "Animation")] public AnimationTagID QuickTurnStopAnimTag;
        [RTTI.Member(43, 0x118, "Animation")] public AnimationTagID QuickTurnStartAnimTag;
    }

    [RTTI.Serializable(0x930269783C3DDC92, GameType.DS)]
    public class AIMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2EB2BA22EC9407BA, GameType.DS)]
    public class AINavMeshComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC54F6A048777B700, GameType.DS)]
    public class AINavMeshComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Radius;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<NavMeshBuilderSettings> Settings;
        [RTTI.Member(5, 0x30, "Logic")] public bool UseNavmeshForSpawning;
    }

    [RTTI.Serializable(0xC5A98B54EC233210, GameType.DS)]
    public class AINavMeshComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB014F124EDEB821D, GameType.DS)]
    public class AIObserver
    {
    }

    [RTTI.Serializable(0x8BF73197ABD57D5D, GameType.DS)]
    public class AIObserverComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x477FA56A8FABFC58, GameType.DS)]
    public class AIObserverComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xA06E4185672B7980, GameType.DS)]
    public class AIObserverComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x45F07D41BA2B09E2, GameType.DS)]
    public class AIObserverGame : AIObserver
    {
    }

    [RTTI.Serializable(0xCD5E193B8A0FF049, GameType.DS)]
    public class AIObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0xD07DDAC75035E3F3, GameType.DS)]
    public class AIPathObjectCategory : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public int Cost;
        [RTTI.Member(4, 0x24, "General")] public int EntryCost;
    }

    [RTTI.Serializable(0x595053EBE7F86D09, GameType.DS)]
    public class AIPathObjectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3718E1CE953E3AB9, GameType.DS)]
    public class AIPathObjectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AIPathObjectCategory> Category;
    }

    [RTTI.Serializable(0x35471F43D700D583, GameType.DS)]
    public class AIPathObjectObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0xF736DFBB1B811687, GameType.DS)]
    public class AIPatrolPath : Route
    {
        [RTTI.Member(9, 0xB0, "Logic")] public EAIPatrolPathType Type;
        [RTTI.Member(10, 0xB8, "Logic")] public Ref<AIPatrolPathAlertContextHintResource> AlertContext;
        [RTTI.Member(11, 0xC0, "Logic")] public Ref<AIContextHintResource> MovementContext;
    }

    [RTTI.Serializable(0x3E5DF3A8EF142315, GameType.DS)]
    public class AIPatrolPathAlertContextHintResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0x5F018A2685B8C224, GameType.DS)]
    public class AIPatrolPathLookat : WorldNode
    {
        [RTTI.Member(5, 0x60, "Logic")] public float DelayTime;
    }

    [RTTI.Serializable(0x1386571FB3A7CADD, GameType.DS)]
    public class AIPatrolPathNode : RouteNode
    {
        [RTTI.Member(12, 0xC0, "Logic")] public Array<Ref<AIPatrolPathLookat>> LookAtTargets;
        [RTTI.Member(13, 0xD0, "Logic")] public Array<AIPatrolPathUseObject> UseObjects;
        [RTTI.Member(14, 0xE0, "Logic")] public float ObjectUseChance;
    }

    [RTTI.Serializable(0x192A1C1AD88B9E79, GameType.DS)]
    public class AIPatrolPathSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2A22296429FED71, GameType.DS)]
    public class AIPatrolPathUseObject
    {
        [RTTI.Member(1, 0x0, "Logic")] public Ref<EntityPlaceHolder> UseObject;
        [RTTI.Member(2, 0x8, "Logic")] public float UseTime;
    }

    [RTTI.Serializable(0x149C7D545B7C0A13, GameType.DS)]
    public class AIPerception : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x13E5053CBFEF9B4B, GameType.DS)]
    public class AIPerceptionResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public bool IgnoreProjectiles;
        [RTTI.Member(4, 0x24, "General")] public float PerceptionFalloffSpeed;
        [RTTI.Member(5, 0x28, "General")] public Array<Ref<AISensorSet>> SensorSets;
        [RTTI.Member(6, 0x38, "General")] public bool DisableRadarSensorsOnInitialize;
    }

    [RTTI.Serializable(0x8705ACD7936262C5, GameType.DS)]
    public class AIPerchMarker : AIMarker
    {
    }

    [RTTI.Serializable(0x79E80DEB9FBE239D, GameType.DS)]
    public class AIPerchMarkerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE6F9124BB33CCB2A, GameType.DS)]
    public class AIPerchingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB4B4104BD848DA82, GameType.DS)]
    public class AIPerchingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Animation")] public String PerchedAnimVarName;
        [RTTI.Member(4, 0x28, "Animation")] public String CanPlayPerchedStaggerAnimVarName;
    }

    [RTTI.Serializable(0x30CCDFE60257E554, GameType.DS)]
    public class AIPlayerPerformanceFeedbackResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float BuddyRange;
        [RTTI.Member(4, 0x24, "General")] public float SpreeTimeOut;
        [RTTI.Member(5, 0x28, "General")] public int SmallSpreeSize;
        [RTTI.Member(6, 0x2C, "General")] public int BigSpreeSize;
        [RTTI.Member(7, 0x30, "General")] public float BurstTimeOut;
        [RTTI.Member(8, 0x34, "General")] public float BurstVeryGoodScore;
        [RTTI.Member(9, 0x38, "General")] public float BurstGoodScore;
        [RTTI.Member(10, 0x3C, "General")] public float BurstOkScore;
        [RTTI.Member(11, 0x40, "General")] public int FriendlyFireMax;
        [RTTI.Member(12, 0x44, "General")] public float FriendlyFireCounterTimeout;
        [RTTI.Member(13, 0x48, "General")] public float FriendlyFireResponseTimeout;
        [RTTI.Member(14, 0x4C, "General")] public float PlayerHealthDrop;
    }

    [RTTI.Serializable(0xD3658919A40C3A4A, GameType.DS)]
    public class AIProjectileImpactMessage : AIProjectileMessage
    {
    }

    [RTTI.Serializable(0x746F1005B69DDCFA, GameType.DS)]
    public class AIProjectileImpactMessageHandler : AIProjectileMessageHandler
    {
    }

    [RTTI.Serializable(0x1B0259589ABC1A2E, GameType.DS)]
    public class AIProjectileImpactMessageHandlerResource : AIProjectileMessageHandlerResource
    {
    }

    [RTTI.Serializable(0x9202D93226DCFE3E, GameType.DS)]
    public class AIProjectileImpactMessageResource : AIProjectileMessageResource
    {
    }

    [RTTI.Serializable(0x6CF32112F2D49116, GameType.DS)]
    public class AIProjectileInfoMessage : AIProjectileMessage
    {
    }

    [RTTI.Serializable(0x20CE0437C3226DC, GameType.DS)]
    public class AIProjectileInfoMessageHandler : AIProjectileMessageHandler
    {
    }

    [RTTI.Serializable(0x6FEF8F649AF5449A, GameType.DS)]
    public class AIProjectileInfoMessageHandlerResource : AIProjectileMessageHandlerResource
    {
    }

    [RTTI.Serializable(0x4364A5A81304FA80, GameType.DS)]
    public class AIProjectileInfoMessageResource : AIProjectileMessageResource
    {
    }

    [RTTI.Serializable(0x3C65E31BD5FC6C11, GameType.DS)]
    public class AIProjectileMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x8E185B42B7CAA057, GameType.DS)]
    public class AIProjectileMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0x15FA899F5E8AD480, GameType.DS)]
    public class AIProjectileMessageHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0x9A9E2870AF74A9F0, GameType.DS)]
    public class AIProjectileMessageResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String EventId;
    }

    [RTTI.Serializable(0xEA1E65EA26C200DB, GameType.DS)]
    public class AIPropertyFactComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x509535230F711CB5, GameType.DS)]
    public class AIPropertyFactComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<PropertyNameLinkMapEntry> PropertyNameIDMapping;
    }

    [RTTI.Serializable(0xF1A41DD8BB75648, GameType.DS)]
    public class AIProximitySensor : AISensor
    {
        [RTTI.Member(3, 0x20, "Proximity")] public float ProximityDistance;
    }

    [RTTI.Serializable(0x2D39B2341B70F034, GameType.DS)]
    public class AIRadarSensor : AISensor
    {
        [RTTI.Member(3, 0x20, "Radar")] public float RadarDistance;
    }

    [RTTI.Serializable(0x7EC17FD46392628C, GameType.DS)]
    public class AIRememberFactResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0xD81A2FE2379329E3, GameType.DS)]
    public class AIRememberFactResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8542638C3326BDDF, GameType.DS)]
    public class AIReservedObject
    {
    }

    [RTTI.Serializable(0xF9A726302872910D, GameType.DS)]
    public class AIRoad : Road
    {
        [RTTI.Member(12, 0xD8, "Logic")] public EAIRoadUsableBy UsableBy;
        [RTTI.Member(13, 0xE0, "Logic")] public Ref<ConditionResource> Condition;
        [RTTI.Member(14, 0xE9, "Logic")] public bool ShowPathInWorldMap;
    }

    [RTTI.Serializable(0x4D1D4DDF32594A04, GameType.DS)]
    public class AIRoadManager
    {
    }

    [RTTI.Serializable(0xD43BC4497FDE022D, GameType.DS)]
    public class AIRoadManagerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<ObjectCollection> RoadsObjectCollection;
    }

    [RTTI.Serializable(0x4F98A7A872451B9F, GameType.DS)]
    public class AIRoadSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAC6803A69FAFC528, GameType.DS)]
    public class AIRobotMountedSkillContext : AISkillContext
    {
    }

    [RTTI.Serializable(0x28FB34B5B879542, GameType.DS)]
    public class AIRobotSkillContext : AISkillContext
    {
    }

    [RTTI.Serializable(0xA720BE1511F598F5, GameType.DS)]
    public class AIScanContextResource : Resource
    {
        [RTTI.Member(3, 0x20, "ScanSpeed")] public Ref<IKRotationSpeedSettings> AimSpeedSettings;
        [RTTI.Member(4, 0x28, "ScanSpeed")] public Ref<IKRotationSpeedSettings> LookSpeedSettings;
        [RTTI.Member(12, 0x30, "Visual")] public Ref<AIScanExpressionParams> ScanExpressionParams;
        [RTTI.Member(6, 0x38, "AimTargetWhenLooking")] public float AimHeadingOffset;
        [RTTI.Member(7, 0x3C, "AimTargetWhenLooking")] public float AimPitchOffset;
        [RTTI.Member(9, 0x40, "ScanRange")] public FRange Heading;
        [RTTI.Member(10, 0x48, "ScanRange")] public FRange Pitch;
    }

    [RTTI.Serializable(0x41D3087ECB4DEB8A, GameType.DS)]
    public class AIScanExpressionParams : Resource
    {
        [RTTI.Member(2, 0x20)] public float RandomWeight;
        [RTTI.Member(3, 0x24)] public float LookatWeight;
    }

    [RTTI.Serializable(0x3462B88A0916196B, GameType.DS)]
    public class AIScanExpressionParamsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2A3C37E210BFE647, GameType.DS)]
    public class AIScenario : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x67E5B971BD96CE8E, GameType.DS)]
    public class AIScenarioActor : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Constraints")] public Array<Ref<AIScenarioActorConstraint>> Constraints;
        [RTTI.Member(5, 0x30, "SequenceEntityVariable")] public Ref<DynamicSequenceEntityVariable> SequenceEntityVariable;
        [RTTI.Member(6, 0x38, "SequenceEntityVariable")] public Ref<SequenceNetworkUseLocation> UseLocation;
    }

    [RTTI.Serializable(0x7AF762AD8527B36, GameType.DS)]
    public class AIScenarioActorConstraint : Resource
    {
    }

    [RTTI.Serializable(0xD4AB3716BFB19BC0, GameType.DS)]
    public class AIScenarioBehaviorDescriptionConstraint : AIScenarioActorConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public EHighLevelBehaviorDescription BehaviorDescription;
        [RTTI.Member(4, 0x21, "General")] public bool InBehavior;
    }

    [RTTI.Serializable(0x8B0732A0FA0687BC, GameType.DS)]
    public class AIScenarioBooleanFactConstraint : AIScenarioActorConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<BooleanFact> Fact;
        [RTTI.Member(4, 0x28, "General")] public bool Value;
    }

    [RTTI.Serializable(0x99E2D4D967311B33, GameType.DS)]
    public class AIScenarioCategory : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xEA79088FF1EFEA90, GameType.DS)]
    public class AIScenarioCollection : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Scenarios")] public Array<Ref<AIScenarioResource>> Scenarios;
    }

    [RTTI.Serializable(0xEFA01445B7E8775F, GameType.DS)]
    public class AIScenarioConstraint : Resource
    {
    }

    [RTTI.Serializable(0x5DEEA243D834DAD2, GameType.DS)]
    public class AIScenarioEnumFactConstraint : AIScenarioActorConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<EnumFact> Fact;
        [RTTI.Member(4, 0x28, "General")] public Ref<EnumFactEntry> Value;
        [RTTI.Member(5, 0x30, "General")] public EFactConditionCompareOperator CompareType;
    }

    [RTTI.Serializable(0xFA288004F416E2D5, GameType.DS)]
    public class AIScenarioHeadingConstraint : AIScenarioConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public float Heading;
        [RTTI.Member(4, 0x24, "General")] public float HeadingRange;
        [RTTI.Member(5, 0x28, "General")] public Ref<AIScenarioActor> Actor;
    }

    [RTTI.Serializable(0xA9A2D225CE17AE7F, GameType.DS)]
    public class AIScenarioIsMovingConstraint : AIScenarioActorConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public bool IsMoving;
    }

    [RTTI.Serializable(0x1D38C5F32023E83E, GameType.DS)]
    public class AIScenarioManager : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xF98BE59E3E662DAF, GameType.DS)]
    public class AIScenarioManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Scenarios")] public Array<Ref<AIScenarioResource>> Scenarios;
        [RTTI.Member(4, 0x30, "Scenarios")] public Ref<BooleanFact> ParticipateInScenariosFact;
    }

    [RTTI.Serializable(0xBE46049AD1E60E21, GameType.DS)]
    public class AIScenarioNavMeshConstraint : AIScenarioConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public BoundingBox2 BoundingBox;
    }

    [RTTI.Serializable(0x4E3AC417284A680F, GameType.DS)]
    public class AIScenarioNearUseLocationConstraint : AIScenarioConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public float Radius;
        [RTTI.Member(4, 0x28, "General")] public Ref<AIScenarioActor> Actor;
    }

    [RTTI.Serializable(0xF12042EC6CC776AA, GameType.DS)]
    public class AIScenarioPositionConstraint : AIScenarioConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public Vec3 Position;
        [RTTI.Member(4, 0x30, "General")] public float Radius;
        [RTTI.Member(5, 0x38, "General")] public Ref<AIScenarioActor> Actor;
    }

    [RTTI.Serializable(0x2798E5E88B117036, GameType.DS)]
    public class AIScenarioResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public EScenarioInstancingRule Instancing;
        [RTTI.Member(4, 0x24, "General")] public float Cooldown;
        [RTTI.Member(5, 0x28, "General")] public Ref<AIScenarioCategory> Category;
        [RTTI.Member(7, 0x30, "Actors")] public Array<Ref<AIScenarioActor>> Actors;
        [RTTI.Member(9, 0x40, "Constraints")] public Array<Ref<AIScenarioConstraint>> Constraints;
        [RTTI.Member(11, 0x50, "SequenceNetwork")] public Ref<EntityResource> SequenceEntity;
    }

    [RTTI.Serializable(0x9FD94E047C053F72, GameType.DS)]
    public class AIScenarioTagConstraint : AIScenarioActorConstraint
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<TagProperty> Tag;
    }

    [RTTI.Serializable(0x8A756CBF1A6AB0D4, GameType.DS)]
    public class AIScenarioUseLocationConditionsConstraint : AIScenarioActorConstraint
    {
    }

    [RTTI.Serializable(0xF45E762F1E6EDB38, GameType.DS)]
    public class AISceneObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x7F9E306172C01A99, GameType.DS)]
    public class AISensor : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x64EB343747EDE9E0, GameType.DS)]
    public class AISensorSet : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public String Identifier;
        [RTTI.Member(4, 0x30, "General")] public Array<Ref<AISensor>> Sensors;
        [RTTI.Member(5, 0x40, "General")] public float UnitImmediateSuspicionDistance;
        [RTTI.Member(6, 0x44, "General")] public float UnitImmediateConfirmationDistance;
        [RTTI.Member(7, 0x48, "General")] public float UnitImmediateIdentificationDistance;
    }

    [RTTI.Serializable(0xDEDD2F1387DB46C6, GameType.DS)]
    public class AISignalManager
    {
    }

    [RTTI.Serializable(0x3C57F371B587EE0B, GameType.DS)]
    public class AISignalResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public Ref<AISignalType> SignalType;
        [RTTI.Member(6, 0x30, "General")] public Ref<AISignalSettingsResource> Settings;
        [RTTI.Member(7, 0x38, "General")] public Ref<SentenceGroupResource> SentenceGroup;
    }

    [RTTI.Serializable(0x845B3E2EED564516, GameType.DS)]
    public class AISignalSettingsResource : Resource
    {
        [RTTI.Member(3, 0x28, "General")] public float Priority;
        [RTTI.Member(4, 0x2C, "General")] public float Lifetime;
        [RTTI.Member(5, 0x30, "General")] public float Delay;
        [RTTI.Member(6, 0x38, "General")] public String GestureName;
        [RTTI.Member(7, 0x40, "General")] public EGestureDirection GestureDirection;
        [RTTI.Member(8, 0x44, "General")] public ELookDirection LookDirection;
    }

    [RTTI.Serializable(0x42CCC1C898751F96, GameType.DS)]
    public class AISignalType : CoreObject
    {
    }

    [RTTI.Serializable(0x2955F77EB877771, GameType.DS)]
    public class AISkillAimAt : AISkillBase
    {
    }

    [RTTI.Serializable(0xEEE02C8CED2E1872, GameType.DS)]
    public class AISkillAimGame : AISkillAimAt
    {
    }

    [RTTI.Serializable(0x2EBB600E270CBE75, GameType.DS)]
    public class AISkillAimTurnInAir : AISkillTurnInAir
    {
    }

    [RTTI.Serializable(0xBEBEE9737AB571B6, GameType.DS)]
    public class AISkillAimTurnOnSpot : AISkillTurnOnSpotGame
    {
    }

    [RTTI.Serializable(0x319F6DD0BB63A6B2, GameType.DS)]
    public class AISkillBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x1CDCF1F832B7B984, GameType.DS)]
    public class AISkillBlock : AISkillBase
    {
    }

    [RTTI.Serializable(0xCE066E1CAB050D79, GameType.DS)]
    public class AISkillChangeStance : AISkillBase
    {
    }

    [RTTI.Serializable(0xD521D4584C25191D, GameType.DS)]
    public class AISkillContext : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String Posture;
        [RTTI.Member(4, 0x30, "General")] public float LookAheadDistance;
        [RTTI.Member(5, 0x34, "General")] public float HeadingSpeedModifier;
        [RTTI.Member(6, 0x38, "General")] public int SegmentsToSmooth;
    }

    [RTTI.Serializable(0x81E95AB2FAE7AF80, GameType.DS)]
    public class AISkillContextualSpeech : AISkillBase
    {
    }

    [RTTI.Serializable(0x9673A4A8A8867119, GameType.DS)]
    public class AISkillCustomAction : AISkillBase
    {
    }

    [RTTI.Serializable(0xE12DB71212F2880B, GameType.DS)]
    public class AISkillDSAction : AISkillBase
    {
    }

    [RTTI.Serializable(0x231F6567A76F5896, GameType.DS)]
    public class AISkillDSAction2 : AISkillDSAction
    {
    }

    [RTTI.Serializable(0x26B5681F4E7EA3BA, GameType.DS)]
    public class AISkillDSCover : AISkillBase
    {
    }

    [RTTI.Serializable(0x741A51E632526D9A, GameType.DS)]
    public class AISkillDSGazerWalk : AISkillDSWalkBase
    {
    }

    [RTTI.Serializable(0x83447444E7EA0B2A, GameType.DS)]
    public class AISkillDSJump : AISkillBase
    {
    }

    [RTTI.Serializable(0xA79F1BCAE6C91D50, GameType.DS)]
    public class AISkillDSPatrolAction : AISkillBase
    {
    }

    [RTTI.Serializable(0x86F5CC1D1E8CC258, GameType.DS)]
    public class AISkillDSQuadWalk : AISkillDSWalk
    {
    }

    [RTTI.Serializable(0xF8E86A0148B220E5, GameType.DS)]
    public class AISkillDSTeleport : AISkillBase
    {
    }

    [RTTI.Serializable(0x237D797881022E7A, GameType.DS)]
    public class AISkillDSTraverseLadder : AISkillBase
    {
    }

    [RTTI.Serializable(0xABA907DA5AA0417B, GameType.DS)]
    public class AISkillDSTurn : AISkillBase
    {
    }

    [RTTI.Serializable(0xB59D61E4C37E3C51, GameType.DS)]
    public class AISkillDSVehicleMove : AISkillBase
    {
    }

    [RTTI.Serializable(0x9E0761731BB3668C, GameType.DS)]
    public class AISkillDSVoice : AISkillBase
    {
    }

    [RTTI.Serializable(0x50DA3D2C62828C78, GameType.DS)]
    public class AISkillDSVoice2 : AISkillDSVoice
    {
    }

    [RTTI.Serializable(0x93456794534D1FA0, GameType.DS)]
    public class AISkillDSWait : AISkillBase
    {
    }

    [RTTI.Serializable(0xAC710C6706636DF4, GameType.DS)]
    public class AISkillDSWalk : AISkillDSWalkBase
    {
    }

    [RTTI.Serializable(0x7E77A815AABB30F2, GameType.DS)]
    public class AISkillDSWalkBase : AISkillBase
    {
    }

    [RTTI.Serializable(0xCDFA9F732A6910E8, GameType.DS)]
    public class AISkillDismount : AISkillBase
    {
    }

    [RTTI.Serializable(0xA955CE37FFA3C2DB, GameType.DS)]
    public class AISkillFaceGame : AISkillFaceTowards
    {
    }

    [RTTI.Serializable(0x9DC2F600BAAD2350, GameType.DS)]
    public class AISkillFaceInAir : AISkillBase
    {
    }

    [RTTI.Serializable(0xAD4928A96AC85888, GameType.DS)]
    public class AISkillFaceTowards : AISkillBase
    {
    }

    [RTTI.Serializable(0x729A69D3F5074840, GameType.DS)]
    public class AISkillFire : AISkillUseGun
    {
    }

    [RTTI.Serializable(0x88251F936ABE63C1, GameType.DS)]
    public class AISkillFireTurnInAir : AISkillTurnInAir
    {
    }

    [RTTI.Serializable(0x88A224E824A3E482, GameType.DS)]
    public class AISkillFireTurnOnSpot : AISkillTurnOnSpotGame
    {
    }

    [RTTI.Serializable(0xB3D10C14A554F6BD, GameType.DS)]
    public class AISkillFly : AISkillFlyBase
    {
    }

    [RTTI.Serializable(0x7C0BAB76DE27FACA, GameType.DS)]
    public class AISkillFlyBase : AISkillBase
    {
    }

    [RTTI.Serializable(0xD43F694C47CBD184, GameType.DS)]
    public class AISkillGesture : AISkillBase
    {
    }

    [RTTI.Serializable(0x71211A7CD9443999, GameType.DS)]
    public class AISkillGestureNotPossible : AISkillBase
    {
    }

    [RTTI.Serializable(0x6EB4B048EF856EF8, GameType.DS)]
    public class AISkillGlance : AISkillLookGame
    {
    }

    [RTTI.Serializable(0xD1BCA9DFFB4F560E, GameType.DS)]
    public class AISkillGlanceUpperBody : AISkillLookUpperBody
    {
    }

    [RTTI.Serializable(0xDA7A3311799E9FF4, GameType.DS)]
    public class AISkillHover : AISkillFlyBase
    {
    }

    [RTTI.Serializable(0x3E2EC525DDFD01C1, GameType.DS)]
    public class AISkillImmediateWeaponLoad : AISkillBase
    {
    }

    [RTTI.Serializable(0xD6E4B4F9D40A5CCE, GameType.DS)]
    public class AISkillLand : AISkillBase
    {
    }

    [RTTI.Serializable(0x8B6C3704159FF017, GameType.DS)]
    public class AISkillLoadWeaponGame : AISkillBase
    {
    }

    [RTTI.Serializable(0xCD84DEC63C1E9772, GameType.DS)]
    public class AISkillLookAt : AISkillBase
    {
    }

    [RTTI.Serializable(0xD7040936F31EF19B, GameType.DS)]
    public class AISkillLookFullBody : AISkillLookTurnOnSpot
    {
    }

    [RTTI.Serializable(0xEE5B35590894F9DA, GameType.DS)]
    public class AISkillLookGame : AISkillLookAt
    {
    }

    [RTTI.Serializable(0x83E9662BD4E19EE2, GameType.DS)]
    public class AISkillLookTalk : AISkillBase
    {
    }

    [RTTI.Serializable(0xFD4971E31DEF070F, GameType.DS)]
    public class AISkillLookTalkGame : AISkillLookTalk
    {
    }

    [RTTI.Serializable(0x1795F07AC4CAC88E, GameType.DS)]
    public class AISkillLookTurnInAir : AISkillTurnInAir
    {
    }

    [RTTI.Serializable(0xFE789D56F7760371, GameType.DS)]
    public class AISkillLookTurnOnSpot : AISkillTurnOnSpotGame
    {
    }

    [RTTI.Serializable(0x3FDE652423D706CD, GameType.DS)]
    public class AISkillLookUpperBody : AISkillLookGame
    {
    }

    [RTTI.Serializable(0xAB18F0F987F6DCE3, GameType.DS)]
    public class AISkillManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<String> BodyGoals;
        [RTTI.Member(4, 0x30, "General")] public Array<Ref<AISkillResource>> SkillBodyMapping;
        [RTTI.Member(5, 0x40, "General")] public Ref<AIBodyPartResourceSet> AvailableBodyParts;
    }

    [RTTI.Serializable(0x9D5D26DBD5381D2C, GameType.DS)]
    public class AISkillMountObject : AISkillBase
    {
    }

    [RTTI.Serializable(0x95F74F58E54719D0, GameType.DS)]
    public class AISkillPerch : AISkillBase
    {
    }

    [RTTI.Serializable(0x4BB1A0FD6DA57686, GameType.DS)]
    public class AISkillPickUp : AISkillBase
    {
    }

    [RTTI.Serializable(0x1523B4F3D7074232, GameType.DS)]
    public class AISkillPlayMonitoredAnimation : AISkillBase
    {
    }

    [RTTI.Serializable(0x648CE2D03BCA5C05, GameType.DS)]
    public class AISkillPlayWarpedAnimation : AISkillBase
    {
    }

    [RTTI.Serializable(0x7FE75BCC1F60687E, GameType.DS)]
    public class AISkillPrepareWalk : AISkillBase
    {
    }

    [RTTI.Serializable(0xD792EB504A50CC4, GameType.DS)]
    public class AISkillResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public Ref<AIBodyPartBase> BodyPartResource;
    }

    [RTTI.Serializable(0xB45D9688C9F02280, GameType.DS)]
    public class AISkillSetDesire : AISkillBase
    {
    }

    [RTTI.Serializable(0x295F74B68EC76311, GameType.DS)]
    public class AISkillSimpleCloseCombat : AISkillBase
    {
    }

    [RTTI.Serializable(0x3DF7392B6A2AB989, GameType.DS)]
    public class AISkillStowWeapon : AISkillBase
    {
    }

    [RTTI.Serializable(0xB3A9AE128ABB5F30, GameType.DS)]
    public class AISkillStowWeaponGame : AISkillStowWeapon
    {
    }

    [RTTI.Serializable(0x86DA02F4C0786D7A, GameType.DS)]
    public class AISkillSwimBase : AISkillBase
    {
    }

    [RTTI.Serializable(0x2C35324D0372E87D, GameType.DS)]
    public class AISkillSwimFlee : AISkillSwimBase
    {
    }

    [RTTI.Serializable(0x6FFDF8BD1F6AA6E3, GameType.DS)]
    public class AISkillSwimToTarget : AISkillSwimBase
    {
    }

    [RTTI.Serializable(0x1356DA977B8944E0, GameType.DS)]
    public class AISkillSwimWander : AISkillSwimBase
    {
    }

    [RTTI.Serializable(0x880A7A8FAECFC84, GameType.DS)]
    public class AISkillSwitchWeaponGame : AISkillBase
    {
    }

    [RTTI.Serializable(0xAB889F01149F18C4, GameType.DS)]
    public class AISkillTakeOff : AISkillBase
    {
    }

    [RTTI.Serializable(0xE9F7C89CB0EA1238, GameType.DS)]
    public class AISkillTalk : AISkillBase
    {
    }

    [RTTI.Serializable(0xB9E328120ED35057, GameType.DS)]
    public class AISkillTalkGame : AISkillTalk
    {
    }

    [RTTI.Serializable(0x8DC6F49BC5DD2F56, GameType.DS)]
    public class AISkillTeleport : AISkillBase
    {
    }

    [RTTI.Serializable(0xE9BA54A94DBBF0C4, GameType.DS)]
    public class AISkillTurnInAir : AISkillBase
    {
    }

    [RTTI.Serializable(0x8B6BC12BAE34F91D, GameType.DS)]
    public class AISkillTurnOnSpot : AISkillBase
    {
    }

    [RTTI.Serializable(0x97C61C372A939C8C, GameType.DS)]
    public class AISkillTurnOnSpotGame : AISkillTurnOnSpot
    {
    }

    [RTTI.Serializable(0xBEA81EC5F149F297, GameType.DS)]
    public class AISkillUpperBodyGesture : AISkillGesture
    {
    }

    [RTTI.Serializable(0x2E3A1173692AB5D5, GameType.DS)]
    public class AISkillUseGun : AISkillBase
    {
    }

    [RTTI.Serializable(0xF77B9928D8A00DB7, GameType.DS)]
    public class AISkillUseObject : AISkillBase
    {
    }

    [RTTI.Serializable(0x6680936D4ADE2002, GameType.DS)]
    public class AISkillWalk : AISkillBase
    {
    }

    [RTTI.Serializable(0xB12B29B1FB0F12C, GameType.DS)]
    public class AISmellSensor : AISensor
    {
        [RTTI.Member(3, 0x20, "Smell")] public float UnitDetectionDistance;
        [RTTI.Member(4, 0x24, "Smell")] public float SmellCapacity;
    }

    [RTTI.Serializable(0xC02CA918D01B6207, GameType.DS)]
    public class AISmellStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0xF954EB476F2BDB0E, GameType.DS)]
    public class AISmellStimulusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC0BA1935C2D2F1CE, GameType.DS)]
    public class AISmellStimulusComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AISmellStimulusResource> StimulusResource;
    }

    [RTTI.Serializable(0x568C2EB14FC026A2, GameType.DS)]
    public class AISmellStimulusResource : AIStimulusResource
    {
        [RTTI.Member(9, 0x40, "General")] public float SmellIntensity;
        [RTTI.Member(10, 0x44, "General")] public bool DrownsOutOtherSmellStimuli;
    }

    [RTTI.Serializable(0x9B348028D7067C9, GameType.DS)]
    public class AISniperWeaponOperationInstance : AIWeaponOperationInstanceGame
    {
    }

    [RTTI.Serializable(0x9AC03C5E524EFCA2, GameType.DS)]
    public class AISniperWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
        [RTTI.Member(8, 0x38, "General")] public bool HoldFireUntilAimed;
        [RTTI.Member(9, 0x3C, "General")] public float MaximumDistance;
        [RTTI.Member(10, 0x40, "General")] public float MinimumDistance;
        [RTTI.Member(11, 0x44, "General")] public float BestMaximumDistance;
        [RTTI.Member(12, 0x48, "General")] public float BestMinimumDistance;
        [RTTI.Member(13, 0x4C, "General")] public float MaximumAngle;
        [RTTI.Member(14, 0x50, "General")] public int ImproveCount;
        [RTTI.Member(15, 0x54, "General")] public float LoseAimTime;
        [RTTI.Member(16, 0x58, "General")] public float LoseAimDistance;
        [RTTI.Member(17, 0x5C, "General")] public bool LoseAimAfterReload;
    }

    [RTTI.Serializable(0x1D6C3231C6DAADBE, GameType.DS)]
    public class AISpreadWeaponOperationInstance : AIWeaponOperationInstanceGame
    {
    }

    [RTTI.Serializable(0x423C41C233D1CF25, GameType.DS)]
    public class AISpreadWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
        [RTTI.Member(8, 0x38, "General")] public float LoseAimTime;
        [RTTI.Member(9, 0x3C, "General")] public float LoseAimVelocityDelta;
        [RTTI.Member(10, 0x40, "General")] public bool LoseAimAfterReload;
        [RTTI.Member(12, 0x44, "Horizontal")] public float Horizontal_WorstAngle;
        [RTTI.Member(13, 0x48, "Horizontal")] public float Horizontal_BestAngle;
        [RTTI.Member(14, 0x4C, "Horizontal")] public int Horizontal_ImproveCount;
        [RTTI.Member(15, 0x50, "Horizontal")] public float Horizontal_MaximumDistance;
        [RTTI.Member(16, 0x58, "Horizontal")] public Array<float> Horizontal_StartPositions;
        [RTTI.Member(17, 0x68, "Horizontal")] public float Horizontal_StopPosition;
        [RTTI.Member(18, 0x6C, "Horizontal")] public FRange Horizontal_Velocity;
        [RTTI.Member(19, 0x74, "Horizontal")] public float Horizontal_Smoothness;
        [RTTI.Member(21, 0x78, "Vertical")] public float Vertical_WorstAngle;
        [RTTI.Member(22, 0x7C, "Vertical")] public float Vertical_BestAngle;
        [RTTI.Member(23, 0x80, "Vertical")] public int Vertical_ImproveCount;
        [RTTI.Member(24, 0x84, "Vertical")] public float Vertical_MaximumDistance;
        [RTTI.Member(25, 0x88, "Vertical")] public Array<float> Vertical_StartPositions;
        [RTTI.Member(26, 0x98, "Vertical")] public float Vertical_StopPosition;
        [RTTI.Member(27, 0x9C, "Vertical")] public FRange Vertical_Velocity;
        [RTTI.Member(28, 0xA4, "Vertical")] public float Vertical_Smoothness;
    }

    [RTTI.Serializable(0x914D4CED39D9CA13, GameType.DS)]
    public class AISpringArmOperationSettings : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Vec3 StartPoint;
        [RTTI.Member(4, 0x30, "General")] public Vec3 EndPoint;
        [RTTI.Member(5, 0x40, "General")] public Vec3 RandomStartPointOffset;
        [RTTI.Member(6, 0x50, "General")] public Ref<CurveResource> Spring;
    }

    [RTTI.Serializable(0x90AE22BFD54049E, GameType.DS)]
    public class AISpringArmWeaponOperationInstance : AIWeaponOperationInstanceGame
    {
    }

    [RTTI.Serializable(0x1B3C7F449AB11A16, GameType.DS)]
    public class AISpringArmWeaponOperationResource : AITimeBasedWeaponOperationResource
    {
        [RTTI.Member(5, 0x28, "General")] public Array<Ref<AISpringArmOperationSettings>> TrackingSpring;
        [RTTI.Member(6, 0x38, "General")] public bool StopOperationAtEndPoint;
        [RTTI.Member(7, 0x39, "General")] public bool TrackThreat;
        [RTTI.Member(8, 0x3A, "General")] public bool PerformLosTestWithFriendlies;
        [RTTI.Member(9, 0x3B, "General")] public bool PerformLosTestWithWorld;
        [RTTI.Member(10, 0x3C, "General")] public bool ClampLineToOrientationRange;
        [RTTI.Member(11, 0x3D, "General")] public bool ClampAimToOrientationRange;
    }

    [RTTI.Serializable(0x547D94A5A7385B33, GameType.DS)]
    public class AIStanceChanger
    {
    }

    [RTTI.Serializable(0xDC76F2434FD5CB02, GameType.DS)]
    public class AIStaticMessageResource : Resource
    {
    }

    [RTTI.Serializable(0xA4F39BC42F3BDDE1, GameType.DS)]
    public class AIStealthArea : NavMeshObject
    {
    }

    [RTTI.Serializable(0x11F882558AD0BE0E, GameType.DS)]
    public class AIStimulus : RTTIObject
    {
    }

    [RTTI.Serializable(0x45C252D4FE53BFAC, GameType.DS)]
    public class AIStimulusResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float PerceptionSignature;
        [RTTI.Member(4, 0x24, "General")] public EThreatState ImmediateStateChange;
        [RTTI.Member(5, 0x28, "General")] public EThreatState MaximumStateChange;
        [RTTI.Member(6, 0x2C, "General")] public float Duration;
        [RTTI.Member(7, 0x30, "General")] public Array<Ref<AIStaticMessageResource>> StimulusMessages;
    }

    [RTTI.Serializable(0x91AE60DD7EFDE408, GameType.DS)]
    public class AISubmergedAuralSensor : AIAuralSensor
    {
        [RTTI.Member(6, 0x28, "LoudnessAmplifier")] public float SignatureMultiplier;
        [RTTI.Member(7, 0x2C, "LoudnessAmplifier")] public float MultiplierDecay;
        [RTTI.Member(8, 0x30, "LoudnessAmplifier")] public bool DeducedExactDetection;
        [RTTI.Member(10, 0x34, "LoudnessFilter")] public float MinimumStimulusSignature;
        [RTTI.Member(11, 0x38, "LoudnessFilter")] public float MaximumHearingHeight;
    }

    [RTTI.Serializable(0x2BA9FF0B363F1E, GameType.DS)]
    public class AISupportAttackTicketThresholds : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int OneTicketPlayerLevelThreshold;
        [RTTI.Member(3, 0x24)] public int TwoTicketsPlayerLevelThreshold;
    }

    [RTTI.Serializable(0xA5F4968B4CBD0F3C, GameType.DS)]
    public class AITagsMappingResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x30, "General")] public Array<Ref<TagProperty>> TagProperties;
    }

    [RTTI.Serializable(0x6F5B69E8FE7664A3, GameType.DS)]
    public class AITerrainClaim
    {
    }

    [RTTI.Serializable(0x474D0D0A7B1C2B03, GameType.DS)]
    public class AIThreatInfoMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xE032EFC2B859B0A2, GameType.DS)]
    public class AIThreatInfoMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0xBADEF850949E1E5B, GameType.DS)]
    public class AIThreatInfoMessageHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0xF743B886B2CDAA79, GameType.DS)]
    public class AITimeBasedWeaponOperationResource : AIWeaponOperationResource
    {
        [RTTI.Member(3, 0x20, "General")] public FRange RandomTimeInterval;
    }

    [RTTI.Serializable(0x8714E7D5E39FCC8, GameType.DS)]
    public class AIToggleSensorMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x96E04B519EA8F00F, GameType.DS)]
    public class AIToggleSensorMessageHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0xEA18088E7CFA04C, GameType.DS)]
    public class AIToggleSensorMessageHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0xDB4E3A8B936E0C29, GameType.DS)]
    public class AITrapMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x885B3A7A74BD875B, GameType.DS)]
    public class AITrapObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x7D4D14F8B8B3863F, GameType.DS)]
    public class AITrapsEventHandler : AIMessageHandler
    {
    }

    [RTTI.Serializable(0x7585290D93739DFF, GameType.DS)]
    public class AITrapsEventHandlerResource : AIMessageHandlerResource
    {
    }

    [RTTI.Serializable(0xDDF34D49EACA494F, GameType.DS)]
    public class AIUsableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x45F0286EDD1D852A, GameType.DS)]
    public class AIUsableComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x52C0BAD9871B4A16, GameType.DS)]
    public class AIUsableObject
    {
    }

    [RTTI.Serializable(0xA51CFA4E13CC52C, GameType.DS)]
    public class AIUsableSequenceNetworkComponent : AIUsableComponent
    {
    }

    [RTTI.Serializable(0x84511731C3DEE44A, GameType.DS)]
    public class AIVisualSensor : AISensor
    {
        [RTTI.Member(3, 0x20, "Vision")] public float DirectUnitDetectionDistance;
        [RTTI.Member(4, 0x24, "Vision")] public float DirectViewThreshold;
        [RTTI.Member(5, 0x28, "Vision")] public float DirectHeadingAngle;
        [RTTI.Member(6, 0x30, "Vision")] public float DirectPitchAngle;
        [RTTI.Member(7, 0x38, "Vision")] public float DirectWidth;
        [RTTI.Member(8, 0x3C, "Vision")] public float DirectHeight;
        [RTTI.Member(11, 0x40, "Vision")] public Ref<CurveResource> DirectPerpendicularFactor;
        [RTTI.Member(9, 0x48, "Vision")] public Ref<CurveResource> DirectHeadingSensitivity;
        [RTTI.Member(10, 0x50, "Vision")] public Ref<CurveResource> DirectPitchSensitivity;
        [RTTI.Member(12, 0x58, "Vision")] public float PeripheralUnitDetectionDistance;
        [RTTI.Member(13, 0x5C, "Vision")] public float PeripheralThreshold;
        [RTTI.Member(14, 0x60, "Vision")] public float PeripheralHeadingAngle;
        [RTTI.Member(15, 0x64, "Vision")] public float PeripheralStimulusSizeModifier;
        [RTTI.Member(18, 0x68, "Vision")] public Ref<CurveResource> PeripheralPerpendicularFactor;
        [RTTI.Member(16, 0x70, "Vision")] public Ref<CurveResource> PeripheralHeadingSensitivity;
        [RTTI.Member(17, 0x78, "Vision")] public Ref<CurveResource> PeripheralPitchSensitivity;
        [RTTI.Member(19, 0x80, "Vision")] public float LightThreshold;
        [RTTI.Member(20, 0x84, "Vision")] public float LightInfluence;
        [RTTI.Member(21, 0x88, "Vision")] public float AtmosphereInfluence;
        [RTTI.Member(24, 0x8C, "Vision")] public float SeeThroughCloakDistance;
        [RTTI.Member(25, 0x90, "Vision")] public float SeeThroughCloakDistancePeripheral;
        [RTTI.Member(26, 0x94, "Vision")] public float SeeThroughAtmosphereDistance;
        [RTTI.Member(27, 0x98, "Vision")] public float SeeThroughAtmosphereDistancePeripheral;
        [RTTI.Member(22, 0x9C, "Vision")] public float NearbyFriendlyDistance;
        [RTTI.Member(23, 0xA0, "Vision")] public float NearbyFriendlyInterval;
        [RTTI.Member(28, 0xA4, "Vision")] public float TPAExactSeeThroughDistanceModifier;
    }

    [RTTI.Serializable(0x3B47ADDA766526E7, GameType.DS)]
    public class AIVisualStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0x4A9AD9128E2686B3, GameType.DS)]
    public class AIVisualStimulusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC4A3842113D2D3F3, GameType.DS)]
    public class AIVisualStimulusComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AIVisualStimulusResource> StimulusResource;
    }

    [RTTI.Serializable(0x9E3522968804B828, GameType.DS)]
    public class AIVisualStimulusResource : AIStimulusResource
    {
        [RTTI.Member(9, 0x40, "General")] public float Size;
        [RTTI.Member(10, 0x44, "General")] public float SizeWhenFocusedOn;
        [RTTI.Member(11, 0x48, "General")] public EAlertLevel MaxRelevantAlertLevel;
        [RTTI.Member(12, 0x4C, "General")] public float HeightOffset;
    }

    [RTTI.Serializable(0xCCB92FC7065A2AAA, GameType.DS)]
    public class AIVisualStimulusResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBEB12381E6975777, GameType.DS)]
    public class AIWeaponAccuracyHintResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0x38BD046BFA7955F9, GameType.DS)]
    public class AIWeaponAccuracyHintResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAC45A2327067979A, GameType.DS)]
    public class AIWeaponAttack : AIAttack
    {
    }

    [RTTI.Serializable(0x2A651269533F4D3E, GameType.DS)]
    public class AIWeaponAttackResource : AIAttackResource
    {
        [RTTI.Member(17, 0xA8, "Weapon")] public Ref<AIWeaponPreference> WeaponPref;
        [RTTI.Member(18, 0xB0, "Weapon")] public Array<Ref<AIWeaponPreference>> WeaponPrefVariants;
    }

    [RTTI.Serializable(0x59FEDB80F62A5C77, GameType.DS)]
    public class AIWeaponCarrier
    {
    }

    [RTTI.Serializable(0xC35D50ABC3E537EB, GameType.DS)]
    public class AIWeaponCarrierGame : AIWeaponCarrier
    {
    }

    [RTTI.Serializable(0xE66CCF2A76D8A1C2, GameType.DS)]
    public class AIWeaponInterface : RTTIObject
    {
    }

    [RTTI.Serializable(0xD38FFA0A2B7D31B5, GameType.DS)]
    public class AIWeaponInterfaceGame : AIWeaponInterface
    {
    }

    [RTTI.Serializable(0x8C54280539955BC2, GameType.DS)]
    public class AIWeaponOperationInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB98A6953FF4712B7, GameType.DS)]
    public class AIWeaponOperationInstanceGame : AIWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0x7C54D1E6E4397E77, GameType.DS)]
    public class AIWeaponOperationResource : Resource
    {
    }

    [RTTI.Serializable(0xBAF3BFA285AF6A94, GameType.DS)]
    public class AIWeaponPreference : ResourceWithName
    {
        [RTTI.Member(5, 0x38, "General")] public String WeaponId;
        [RTTI.Member(6, 0x40, "General")] public FRange RecoveryTime;
        [RTTI.Member(7, 0x48, "General")] public FRange FirstAimTime;
        [RTTI.Member(8, 0x50, "General")] public FRange AimTime;
        [RTTI.Member(9, 0x58, "General")] public Ref<AIWeaponOperationResource> Operation;
    }

    [RTTI.Serializable(0x8945FA9CB379844E, GameType.DS)]
    public class AIWeaponPreferenceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x71D69EF73E2D2F53, GameType.DS)]
    public class AIWildlifeAnnotation : WorldNode
    {
    }

    [RTTI.Serializable(0xBCAA26441E1EE3D9, GameType.DS)]
    public class AIWildlifeClimbPoint : AIWildlifeAnnotation
    {
        [RTTI.Member(4, 0x60)] public String ClimbAnimation;
    }

    [RTTI.Serializable(0x87D1C2F89BDEBFF0, GameType.DS)]
    public class AIWildlifePerchPoint : AIWildlifeAnnotation
    {
        [RTTI.Member(4, 0x60)] public float MaxWindSpeed;
    }

    [RTTI.Serializable(0x588A4103168723BA, GameType.DS)]
    public class AbilityAnimationResource : AbilityResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool CanBeOverriden;
        [RTTI.Member(4, 0x24, "Logic")] public float MaxRandomTimeOffset;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<AnimationManagerResource> AnimationManager;
    }

    [RTTI.Serializable(0xF88DAA48A8047107, GameType.DS)]
    public class AbilityLogicalPoseDeformerResource : AbilityResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PoseDeformerResource> PoseDeformerResource;
    }

    [RTTI.Serializable(0xB3DAB6E6B4B12717, GameType.DS)]
    public class AbilityPoseDeformerResource : AbilityResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PoseDeformerResource> PoseDeformerResource;
        [RTTI.Member(5, 0x28, "PBDLod")] public float PBDLodDist1;
        [RTTI.Member(6, 0x2C, "PBDLod")] public float PBDLodDist2;
        [RTTI.Member(7, 0x30, "PBDLod")] public float PBDLodDist3;
    }

    [RTTI.Serializable(0xC3088058D35166A9, GameType.DS)]
    public class AbilityResource : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xA4914524CAFFA5DA, GameType.DS)]
    public class AbsoluteTimeCurveResource : CurveResource
    {
    }

    [RTTI.Serializable(0x427263629AA4A0E0, GameType.DS)]
    public class AccuracyImprovementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x96E87AC80D837B6F, GameType.DS)]
    public class AccuracyImprovementComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float HorizontalSpreadReduction;
        [RTTI.Member(4, 0x24, "Logic")] public float VerticalSpreadReduction;
        [RTTI.Member(5, 0x28, "Logic")] public float HorizontalRecoilReduction;
        [RTTI.Member(6, 0x2C, "Logic")] public float VerticalRecoilReduction;
        [RTTI.Member(7, 0x30, "Logic")] public float RandomRecoilReduction;
    }

    [RTTI.Serializable(0x3F5022FBE7BE17A, GameType.DS)]
    public class AccuracyOverrideResource : Resource
    {
        [RTTI.Member(3, 0x20, "Accuracy")] public Ref<AccuracySettings> PrimaryAccuracySettingsSP;
        [RTTI.Member(4, 0x28, "Accuracy")] public Ref<AccuracySettings> PrimaryAccuracySettingsMP;
        [RTTI.Member(5, 0x30, "Accuracy")] public Ref<AccuracySettings> PrimaryAccuracySettingsAI;
        [RTTI.Member(6, 0x38, "Accuracy")] public Ref<AimDeviationResource> AimDeviationResource;
    }

    [RTTI.Serializable(0xD4EFF5524969FAD4, GameType.DS)]
    public class AccuracySettings : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<CurveResource> HorizontalSpread;
        [RTTI.Member(4, 0x28, "General")] public Ref<CurveResource> VerticalSpread;
        [RTTI.Member(5, 0x30, "General")] public Ref<CurveResource> HorizontalRecoil;
        [RTTI.Member(6, 0x38, "General")] public Ref<CurveResource> VerticalRecoil;
        [RTTI.Member(7, 0x40, "General")] public Ref<CurveResource> HorizontalSpreadFalloff;
        [RTTI.Member(8, 0x48, "General")] public Ref<CurveResource> VerticalSpreadFalloff;
        [RTTI.Member(9, 0x50, "General")] public Ref<CurveResource> HorizontalRecoilFalloff;
        [RTTI.Member(10, 0x58, "General")] public Ref<CurveResource> VerticalRecoilFalloff;
        [RTTI.Member(11, 0x60, "General")] public float FirstShotSpreadFactor;
        [RTTI.Member(12, 0x64, "General")] public float FirstShotAccuracyMovementMax;
        [RTTI.Member(13, 0x68, "General")] public Ref<CurveResource> RandomRecoilCurveResource;
        [RTTI.Member(14, 0x70, "General")] public float RandomRecoilRecoverSpeed;
        [RTTI.Member(15, 0x74, "General")] public float RandomRecoilRecoverSpeedBlendInTime;
        [RTTI.Member(16, 0x78, "General")] public float CursorRecoilFactor;
    }

    [RTTI.Serializable(0x945E1BA6F61F47D9, GameType.DS)]
    public class AcknowledgeMessageDelivered : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> MessageUUIDs;
    }

    [RTTI.Serializable(0x128060CB0D76D3CC, GameType.DS)]
    public class ActionAbilityUseCondition : Resource
    {
    }

    [RTTI.Serializable(0xBE6C20E9D1D79829, GameType.DS)]
    public class ActionAbilityUseConditionRadarNotScrambled : ActionAbilityUseCondition
    {
    }

    [RTTI.Serializable(0x96EC0A987EBB646F, GameType.DS)]
    public class ActionPerAnimationEvent
    {
        [RTTI.Member(0, 0x0)] public String AnimEventText;
        [RTTI.Member(1, 0x8)] public Ref<EntityAction> Action;
        [RTTI.Member(2, 0x10)] public bool IsStarted;
    }

    [RTTI.Serializable(0x64FDE9F8A1F9C588, GameType.DS)]
    public class ActiveInteractionRegion
    {
        [RTTI.Member(0, 0x0)] public IVec2 MinTile;
        [RTTI.Member(1, 0x0)] public IVec2 MaxTile;
    }

    [RTTI.Serializable(0x9A2C15435FA3852, GameType.DS)]
    public class ActivePlaylistInfoRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int PageIndex;
        [RTTI.Member(3, 0x24)] public int PageSize;
        [RTTI.Member(4, 0x28)] public String RequiredTag;
    }

    [RTTI.Serializable(0xE1832E520CA1F48E, GameType.DS)]
    public class ActiveStatModifierResource : StatModifierResource
    {
    }

    [RTTI.Serializable(0x4FD248397FE040C, GameType.DS)]
    public class ActiveStateMachineState
    {
    }

    [RTTI.Serializable(0xB87F01513D113DE9, GameType.DS)]
    public class ActiveStatesQueue
    {
        [RTTI.Member(0, 0x0)] public Array<ActiveStateMachineState> mQueue;
    }

    [RTTI.Serializable(0x7678AF9A460B8A77, GameType.DS)]
    public class ActivityFeedEntry
    {
        [RTTI.Member(0, 0x0)] public String Language;
        [RTTI.Member(1, 0x8)] public String Text;
    }

    [RTTI.Serializable(0x8D2C84C9C394E7B6, GameType.DS)]
    public class ActivityFeedItem
    {
        [RTTI.Member(0, 0x0)] public String ID;
        [RTTI.Member(1, 0x8)] public Array<ActivityFeedEntry> Entries;
    }

    [RTTI.Serializable(0xCB43432E74E2ACAC, GameType.DS)]
    public class ActivityFeedResourceCollection : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<ActivityFeedItem> Items;
    }

    [RTTI.Serializable(0xDD66788D88F41DF8, GameType.DS)]
    public class ActivityMedal : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LocalizedTextResource> DisplayDescription;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<LocalizedTextResource> StartActivityFailureReason;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<GraphProgramResource> StartActivityConditionGraph;
    }

    [RTTI.Serializable(0x8B75110CB8521C5A, GameType.DS)]
    public class ActivityMedalQuestReward : QuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<UITexture> UIIcon;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(9, 0x48, "Logic")] public Ref<ActivityMedal> Medal;
        [RTTI.Member(10, 0x50, "Logic")] public EActivityMedalType MedalType;
        [RTTI.Member(11, 0x58, "Logic")] public Ref<UITexture> MedalIcon;
        [RTTI.Member(12, 0x60, "Logic")] public Ref<UITexture> NoMedalIcon;
        [RTTI.Member(13, 0x68, "Logic")] public String RequirementAmount;
        [RTTI.Member(14, 0x70, "Logic")] public Ref<LocalizedTextResource> RequirementText;
    }

    [RTTI.Serializable(0x2AA2531C4725AA54, GameType.DS)]
    public class ActorBodyPoseSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0x509ACED1EBFE02A, GameType.DS)]
    public class ActorFacePoseSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0x958EFBE9596DF558, GameType.DS)]
    public class ActorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x8472115B861FB787, GameType.DS)]
    public class ActorResource : LocatorResource
    {
    }

    [RTTI.Serializable(0x9003AE099F657412, GameType.DS)]
    public class ActorSnapshot
    {
    }

    [RTTI.Serializable(0xC7E45C7916D1FC42, GameType.DS)]
    public class ActorTransformSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0xEA910C50C2EA4162, GameType.DS)]
    public class AddInventoryItemAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EntityResource> Item;
        [RTTI.Member(5, 0x30, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x145C04D1AF6A0789, GameType.DS)]
    public class AddItemToInventoryAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(5, 0x30, "Logic")] public int Amount;
        [RTTI.Member(6, 0x34, "Logic")] public bool MustEquip;
        [RTTI.Member(7, 0x38, "Logic")] public int EquipSlotIndex;
        [RTTI.Member(8, 0x3C, "Logic")] public bool SwitchToItem;
    }

    [RTTI.Serializable(0x985F68F84D9EC9D4, GameType.DS)]
    public class AddPlaylistRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<PlaylistData> PlaylistData;
        [RTTI.Member(3, 0x28)] public Array<String> Tags;
    }

    [RTTI.Serializable(0xDB8C86C1FBEAE576, GameType.DS)]
    public class AddPlaylistResult : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String PlaylistID;
    }

    [RTTI.Serializable(0x729CA8821A3D3E2B, GameType.DS)]
    public class AdjustFloorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD8C07F0CA3523C10, GameType.DS)]
    public class AdjustFloorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x842CBA600147BDCE, GameType.DS)]
    public class AimAssistComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA06FC4858BFA3150, GameType.DS)]
    public class AimAssistComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Collision")] public EPhysicsCollisionLayerGame AimCollisionLayer;
        [RTTI.Member(4, 0x24, "Collision")] public int AimCollisionCount;
        [RTTI.Member(5, 0x28, "Collision")] public float AimCollisionRange;
        [RTTI.Member(6, 0x2C, "Collision")] public float AimCollisionAngle;
        [RTTI.Member(8, 0x30, "Damping")] public float DampingEnabledIn;
        [RTTI.Member(9, 0x34, "Damping")] public float DampingEnabledTime;
        [RTTI.Member(10, 0x38, "Damping")] public float DampingEnabledOut;
        [RTTI.Member(11, 0x3C, "Damping")] public float DampingDisabledOut;
        [RTTI.Member(12, 0x40, "Damping")] public Ref<CurveResource> DampingOverMoveInputX;
        [RTTI.Member(13, 0x48, "Damping")] public Ref<CurveResource> DampingOverMoveInputY;
        [RTTI.Member(14, 0x50, "Damping")] public Ref<CurveResource> DampingOverRange;
    }

    [RTTI.Serializable(0xBBCBCFF0D3EFCE21, GameType.DS)]
    public class AimAtEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xFEC805580AD3F129, GameType.DS)]
    public class AimAtEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0x2F83E0C00237512D, GameType.DS)]
    public class AimAtLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x1B193E0705A01638, GameType.DS)]
    public class AimAtLocatorResource : LocatorResource
    {
        [RTTI.Member(9, 0x30, "Logic")] public Ref<LocatorResource> AimTargetLocator;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<LocatorResource> PositionLocator;
    }

    [RTTI.Serializable(0x73B1DA121EE280E2, GameType.DS)]
    public class AimCacheComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA968F25609432619, GameType.DS)]
    public class AimCacheComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float AimOffsetUp;
        [RTTI.Member(3, 0x24)] public float AimOffsetForward;
        [RTTI.Member(4, 0x28)] public float SquatAimOffsetUp;
        [RTTI.Member(5, 0x2C)] public float SquatAimOffsetForward;
        [RTTI.Member(6, 0x30)] public HashMap<EDSWeaponId_AimCacheSpecificSetting> WeaponSettingsInternal;
        [RTTI.Member(7, 0x40)] public float MaxCacheTime;
        [RTTI.Member(8, 0x48)] public Ref<DSNpcAimResource> AimResource;
    }

    [RTTI.Serializable(0x57E85639A00E1B60, GameType.DS)]
    public class AimCacheSpecificSetting
    {
        [RTTI.Member(0, 0x0)] public float AimOffsetUp;
        [RTTI.Member(1, 0x4)] public float AimOffsetForward;
        [RTTI.Member(2, 0x8)] public float SquatAimOffsetUp;
        [RTTI.Member(3, 0xC)] public float SquatAimOffsetForward;
    }

    [RTTI.Serializable(0xC99BA1AA484FFA27, GameType.DS)]
    public class AimDeviation
    {
    }

    [RTTI.Serializable(0xDAD5FFDC36B363C6, GameType.DS)]
    public class AimDeviationResource : Resource
    {
        [RTTI.Member(3, 0x20, "Sway")] public Ref<CurveResource> HorizontalSway;
        [RTTI.Member(4, 0x28, "Sway")] public Ref<CurveResource> VerticalSway;
        [RTTI.Member(5, 0x30, "Sway")] public Ref<CurveResource> MoveSpeedSwayCurve;
        [RTTI.Member(6, 0x38, "Sway")] public Ref<CurveResource> LookSpeedSwayCurve;
        [RTTI.Member(7, 0x40, "Sway")] public float CrouchSwayModifier;
        [RTTI.Member(8, 0x48, "Sway")] public Ref<CurveResource> TriggerPressureSwayCurve;
        [RTTI.Member(9, 0x50, "Sway")] public ESwayChange SwayOnActivate;
        [RTTI.Member(10, 0x54, "Sway")] public ESwayChange SwayOnFire;
        [RTTI.Member(11, 0x58, "Sway")] public ESwayChange SwayOnChangeStance;
        [RTTI.Member(13, 0x60, "AimLag")] public Ref<SpringResource> HeadingSpring;
        [RTTI.Member(14, 0x68, "AimLag")] public Ref<SpringResource> PitchSpring;
        [RTTI.Member(15, 0x70, "AimLag")] public float HeadingMoveAimLagFactor;
        [RTTI.Member(16, 0x74, "AimLag")] public float PitchMoveAimLagFactor;
        [RTTI.Member(17, 0x78, "AimLag")] public float HeadingLookAimLagFactor;
        [RTTI.Member(18, 0x7C, "AimLag")] public float PitchLookAimLagFactor;
        [RTTI.Member(19, 0x80, "AimLag")] public Vec2 DynamicRecoil;
    }

    [RTTI.Serializable(0x1AE5FFB8752B47B1, GameType.DS)]
    public class AimIKComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA0A0B8A49EBD23B4, GameType.DS)]
    public class AimIKComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public FRange HeadingRange;
        [RTTI.Member(5, 0x28, "Logic")] public FRange PitchRange;
        [RTTI.Member(4, 0x30, "Logic")] public bool IsAimHeadingFullyRotational;
        [RTTI.Member(6, 0x34, "Logic")] public float MaxAcceleration;
        [RTTI.Member(7, 0x38, "Logic")] public float MaxSpeed;
        [RTTI.Member(8, 0x3C, "Logic")] public bool ShouldInterpolateAim;
        [RTTI.Member(9, 0x40, "Logic")] public String AimIKAnimationVariableName_Primary;
        [RTTI.Member(10, 0x48, "Logic")] public String AimIKWeightAnimationVariableName_Primary;
        [RTTI.Member(11, 0x50, "Logic")] public String DisableAimIKAnimEventText;
        [RTTI.Member(12, 0x58, "Logic")] public float IKWeightBlendDuration;
    }

    [RTTI.Serializable(0x50DAE577FC637649, GameType.DS)]
    public class AimingMagnetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9B9B1C67C58C33AD, GameType.DS)]
    public class AimingMagnetComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "FixAim")] public Ref<CameraMagnetTagResource> FixTag;
        [RTTI.Member(4, 0x28, "FixAim")] public float FixWeight;
        [RTTI.Member(5, 0x2C, "FixAim")] public float FixStrength;
        [RTTI.Member(6, 0x30, "FixAim")] public Ref<CurveResource> FixStrengthOverTime;
        [RTTI.Member(7, 0x38, "FixAim")] public Ref<CurveResource> FixRangeToStrength;
        [RTTI.Member(9, 0x40, "Collision")] public EPhysicsCollisionLayerGame AimCollisionLayer;
        [RTTI.Member(10, 0x44, "Collision")] public float AimCollisionRangeMin;
        [RTTI.Member(11, 0x48, "Collision")] public float AimCollisionRangeMax;
    }

    [RTTI.Serializable(0x9AAF8B7D38132613, GameType.DS)]
    public class AirNavSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float CellSize;
        [RTTI.Member(4, 0x24, "General")] public uint32 TileResolution;
        [RTTI.Member(5, 0x28, "General")] public float AgentRadius;
        [RTTI.Member(6, 0x2C, "General")] public int InitialPathQueryMipLevel;
    }

    [RTTI.Serializable(0x71C54D0255DA9E3F, GameType.DS)]
    public class AirNavigationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE29B28313FE44158, GameType.DS)]
    public class AirNavigationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AirNavSettingsResource> Settings;
        [RTTI.Member(4, 0x28, "General")] public float GenerationExtents;
        [RTTI.Member(5, 0x2C, "General")] public float RemovalExtents;
    }

    [RTTI.Serializable(0xB54F110066BD17A2, GameType.DS)]
    public class Alert
    {
        [RTTI.Member(0, 0x0)] public AlertPart AlertPart;
        [RTTI.Member(1, 0x30)] public Array<String> ContextStack;
        [RTTI.Member(2, 0x40)] public EAlertType Type;
        [RTTI.Member(3, 0x54)] public EProcessReturnValue ProcessReturnValue;
    }

    [RTTI.Serializable(0x3D4B5C84C50E03CE, GameType.DS)]
    public class AlertPart
    {
        [RTTI.Member(0, 0x0)] public Array<String> Attributes;
        [RTTI.Member(1, 0x10)] public Array<AlertPart> Children;
        [RTTI.Member(2, 0x20)] public EAlertPartType Type;
        [RTTI.Member(3, 0x28)] public String Value;
    }

    [RTTI.Serializable(0xD8BDE478E1A856F8, GameType.DS)]
    public class AlignToUserComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC68BDB64743D3417, GameType.DS)]
    public class AlignToUserComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xD7E4E30EC364C680, GameType.DS)]
    public class AlphaPeg : PegBase
    {
        [RTTI.Member(4, 0x10, "General")] public float Alpha;
    }

    [RTTI.Serializable(0x5A0F614B5A57DEDB, GameType.DS)]
    public class AlwaysActiveActivationPolicy : EntityActivationPolicy
    {
    }

    [RTTI.Serializable(0xE88FC57A4FE368B9, GameType.DS)]
    public class AlwaysLoadedStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0x8DE8B57AF6F66A59, GameType.DS)]
    public class AlwaysLoadedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(7, 0x50, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0x524C45F403B869A3, GameType.DS)]
    public class AmbienceCycle : AmbienceCycleBase
    {
        [RTTI.Member(3, 0x30)] public Ref<CurveResource> SunElevationAngle;
        [RTTI.Member(4, 0x38)] public Ref<CurveResource> SunAzimuthAngle;
        [RTTI.Member(5, 0x40)] public Ref<CurveResource> MoonElevationAngle;
        [RTTI.Member(6, 0x48)] public Ref<CurveResource> MoonAzimuthAngle;
        [RTTI.Member(7, 0x50)] public float MoonDistance;
        [RTTI.Member(8, 0x60)] public Vec4 SunToMoonFadeTimes;
        [RTTI.Member(9, 0x70)] public Ref<SunLightResource> SunLightResource;
        [RTTI.Member(10, 0x78)] public Ref<SunLightResource> MoonLightResource;
        [RTTI.Member(11, 0x80)] public Ref<Texture> CubemapTexture;
    }

    [RTTI.Serializable(0xF403ACD343244E46, GameType.DS)]
    public class AmbienceCycleBase : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<AmbienceSettingsKeyFrame>> AmbienceKeyFrames;
    }

    [RTTI.Serializable(0xC69293A3D12EEEA9, GameType.DS)]
    public class AmbienceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7647ACC6468D8837, GameType.DS)]
    public class AmbienceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "General")] public Ref<AmbienceCycle> AmbienceCycle;
        [RTTI.Member(9, 0x38, "General")] public Ref<CurveResource> BlendWeightCurveResource;
    }

    [RTTI.Serializable(0x5880382C214F8FCE, GameType.DS)]
    public class AmbienceGlobalAppRenderVariableValues : CoreObject
    {
        [RTTI.BaseClass(0x20)] public GlobalAppRenderVariableValues @GlobalAppRenderVariableValues;
    }

    [RTTI.Serializable(0x2F4B7FE4D5FA8F54, GameType.DS)]
    public class AmbienceGlobalRenderVariableValues : CoreObject
    {
        [RTTI.BaseClass(0x20)] public GlobalRenderVariableValues @GlobalRenderVariableValues;
    }

    [RTTI.Serializable(0x38CDC1435128313E, GameType.DS)]
    public class AmbienceLightingSettings
    {
        [RTTI.Member(0, 0x0)] public float SunLightIntensityScale;
        [RTTI.Member(1, 0x4)] public float SunLightGroundIntensityScale;
        [RTTI.Member(2, 0x8)] public float StaticIndirectScale;
        [RTTI.Member(3, 0xC)] public float SkyLightScale;
        [RTTI.Member(4, 0x10)] public float SkyLightDesaturate;
        [RTTI.Member(5, 0x14)] public float SunBounceScale;
        [RTTI.Member(6, 0x18)] public float SunBounceScaleColorDesaturate;
    }

    [RTTI.Serializable(0x1CADD7C057A3275A, GameType.DS)]
    public class AmbienceLightingSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public AmbienceLightingSettings Settings;
    }

    [RTTI.Serializable(0x8B3A2598DA4DC36B, GameType.DS)]
    public class AmbienceManager : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<AmbienceCycle> BaseCycle;
        [RTTI.Member(3, 0x30)] public Ref<SunLightResource> SunLightResource;
        [RTTI.Member(4, 0x38)] public Ref<SunLightResource> MoonLightResource;
        [RTTI.Member(5, 0x40)] public Ref<StaticMeshInstance> MoonMeshInstance;
        [RTTI.Member(6, 0x48)] public Ref<StaticMeshInstance> NightSkyStarFieldMesh;
        [RTTI.Member(7, 0x50)] public Ref<StaticMeshInstance> NightSkyHorizonMesh;
        [RTTI.Member(8, 0xB8)] public float SunFlareLingerTime;
    }

    [RTTI.Serializable(0xE96C16D69D8AA986, GameType.DS)]
    public class AmbienceSettings : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<ExposureSettingsResource> ExposureSettings;
        [RTTI.Member(3, 0x28)] public Ref<LightShaftSettingsResource> LightShaftSettings;
        [RTTI.Member(4, 0x30)] public Ref<BloomSettingsResource> BloomSettings;
        [RTTI.Member(5, 0x38)] public Ref<AmbienceLightingSettingsResource> LightingSettings;
        [RTTI.Member(6, 0x40)] public Ref<ColorizeSettingsResource> ColorizeSettings;
        [RTTI.Member(7, 0x48)] public Ref<CloudRenderSettingsResource> CloudRenderSettings;
        [RTTI.Member(8, 0x50)] public Ref<AtmosphereSkySettingsResource> AtmosphereSkySettings;
        [RTTI.Member(9, 0x58)] public Ref<AtmosphereHazeSettingsResource> AtmosphereHazeSettings;
        [RTTI.Member(10, 0x60)] public Ref<AtmosphereFogSettingsResource> AtmosphereFogSettings;
        [RTTI.Member(14, 0x68)] public Ref<AmbienceGlobalRenderVariableValues> GlobalRenderVariableValues;
        [RTTI.Member(15, 0x70)] public Ref<AmbienceGlobalAppRenderVariableValues> GlobalAppRenderVariableValues;
        [RTTI.Member(16, 0x78)] public Ref<RainbowAndSundogSettingsResource> RainbowAndSundogSettings;
        [RTTI.Member(17, 0x80)] public Ref<AuroraSettingsResource> AuroraSettings;
        [RTTI.Member(11, 0x88)] public Ref<PrecomputedAtmosphereSettingsResource> PrecomputedAtmosphereSettings;
        [RTTI.Member(12, 0x90)] public Ref<KJPFogSettingsResource> KJPFogSettings;
        [RTTI.Member(13, 0x98)] public Ref<KJPCascadeShadowSettingsResource> KJPCascadeShadowSettings;
    }

    [RTTI.Serializable(0x213DB79713566127, GameType.DS)]
    public class AmbienceSettingsKeyFrame : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<AmbienceSettings> AmbienceSettings;
        [RTTI.Member(3, 0x28)] public float TimeOfDay;
    }

    [RTTI.Serializable(0xB2D13B3E97A01E1B, GameType.DS)]
    public class AmbienceSunAndMoonEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6D4CC4DB573B026C, GameType.DS)]
    public class AmbienceSunAndMoonEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "General")] public Ref<SunLightResource> SunlightOverride;
        [RTTI.Member(11, 0x38, "General")] public bool SunAzimuthAngleOverrideEnabled;
        [RTTI.Member(12, 0x3C, "General")] public float SunAzimuthAngleOverride;
        [RTTI.Member(9, 0x40, "General")] public bool SunElevationAngleOverrideEnabled;
        [RTTI.Member(10, 0x44, "General")] public float SunElevationAngleOverride;
        [RTTI.Member(13, 0x48, "General")] public Ref<SunLightResource> MoonlightOverride;
        [RTTI.Member(16, 0x50, "General")] public bool MoonAzimuthAngleOverrideEnabled;
        [RTTI.Member(17, 0x54, "General")] public float MoonAzimuthAngleOverride;
        [RTTI.Member(14, 0x58, "General")] public bool MoonElevationAngleOverrideEnabled;
        [RTTI.Member(15, 0x5C, "General")] public float MoonElevationAngleOverride;
        [RTTI.Member(18, 0x60, "General")] public Ref<CurveResource> KjpSunElevationAngleCurve;
        [RTTI.Member(19, 0x68, "General")] public Ref<CurveResource> KjpSunAzimuthAngleCurve;
    }

    [RTTI.Serializable(0x348DFD6946B9B001, GameType.DS)]
    public class AmbientVolume : WorldNode
    {
        [RTTI.BaseClass(0x60)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(9, 0xA0)] public Ref<AmbientVolumeResource> Resource;
    }

    [RTTI.Serializable(0x19901ACFE572628C, GameType.DS)]
    public class AmbientVolumeBinding
    {
        [RTTI.Member(0, 0x0)] public String HelperNodeName;
        [RTTI.Member(1, 0x8)] public WorldTransform LocationOffset;
        [RTTI.Member(2, 0x48)] public Ref<AmbientVolumeResource> AmbientVolumeResource;
    }

    [RTTI.Serializable(0x40E6A998946BDE1D, GameType.DS)]
    public class AmbientVolumeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8EA27D9ACA5BC1B8, GameType.DS)]
    public class AmbientVolumeComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x8EBD7272B46C3347, GameType.DS)]
    public class AmbientVolumeComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<AmbientVolumeBinding> AmbientVolumeBindings;
    }

    [RTTI.Serializable(0x2300FE41281BF908, GameType.DS)]
    public class AmbientVolumeManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xE86C45EF5B2D1A6E, GameType.DS)]
    public class AmbientVolumeResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Vec3 PositiveFadeIn;
        [RTTI.Member(3, 0x30)] public Vec3 NegativeFadeIn;
        [RTTI.Member(4, 0x40)] public int Priority;
        [RTTI.Member(5, 0x44)] public float AOScale;
        [RTTI.Member(6, 0x48)] public float OverrideScale;
        [RTTI.Member(9, 0x4C)] public EVOLUME_LODLevel LODFadeLevel;
        [RTTI.Member(7, 0x50)] public Vec2 InitialBoxSize;
        [RTTI.Member(8, 0x60)] public float InitialBoxHeight;
    }

    [RTTI.Serializable(0x112E5A1B5F513A6E, GameType.DS)]
    public class AmmoCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0x9088607A865638ED, GameType.DS)]
    public class AmmoEjector : WeaponPart
    {
    }

    [RTTI.Serializable(0xAD5E2EFC95A9CCC6, GameType.DS)]
    public class AmmoEjectorItemRuntimeData : InventoryItemRuntimeData
    {
    }

    [RTTI.Serializable(0x63DB3E2272E26762, GameType.DS)]
    public class AmmoEjectorItemRuntimeDataRestoreState : InventoryItemRuntimeDataRestoreState
    {
        [RTTI.Member(2, 0x28)] public Array<WeaponModeRestoreData> WeaponModeData;
        [RTTI.Member(3, 0x38)] public int SelectedWeaponModeIndex;
    }

    [RTTI.Serializable(0x9389DE58E93BD378, GameType.DS)]
    public class AmmoEjectorRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x819CB3E446F1C209, GameType.DS)]
    public class AmmoEjectorResource : WeaponPartResource
    {
        [RTTI.Member(34, 0x28, "AI")] public Ref<AIAuralStimulusResource> FireSoundStimulus;
        [RTTI.Member(56, 0x30, "VisualEffects")] public String FiringShaderVariableID;
        [RTTI.Member(57, 0x38, "VisualEffects")] public Ref<CurveResource> FiringShaderVariableCurve;
        [RTTI.Member(9, 0x40, "FireRate")] public int FireRate_BurstSize;
        [RTTI.Member(10, 0x44, "FireRate")] public EWeaponTriggerType TriggerType;
        [RTTI.Member(25, 0x48, "Animation")] public String FireAnimVarName;
        [RTTI.Member(26, 0x50, "Animation")] public String ChamberAnimVarName;
        [RTTI.Member(27, 0x58, "Animation")] public Ref<FireDurationsAnimationReference> FireDurationsAnimReference;
        [RTTI.Member(11, 0x60, "FireRate")] public float FireDuration;
        [RTTI.Member(12, 0x64, "FireRate")] public float ChamberRoundDuration;
        [RTTI.Member(13, 0x68, "FireRate")] public float AfterBurstFiringDuration;
        [RTTI.Member(14, 0x6C, "FireRate")] public float AfterBurstDelay;
        [RTTI.Member(15, 0x70, "FireRate")] public float FireRequestHoldDenialTime;
        [RTTI.Member(16, 0x74, "FireRate")] public float FireRequestTapDenialTime;
        [RTTI.Member(17, 0x78, "FireRate")] public bool ResetEjectLocationEveryBurst;
        [RTTI.Member(19, 0x79, "Homing")] public bool IsAutoHoming;
        [RTTI.Member(20, 0x7A, "Homing")] public bool HomeInOnHumanoids;
        [RTTI.Member(21, 0x7C, "Homing")] public float HomingLockConeAngle;
        [RTTI.Member(22, 0x80, "Homing")] public float MaximumLockingDistance;
        [RTTI.Member(23, 0x84, "Homing")] public float KeepLockBehindCoverHeight;
        [RTTI.Member(35, 0x88, "AI")] public float MinOffensiveRange;
        [RTTI.Member(36, 0x8C, "AI")] public float MaxOffensiveRange;
        [RTTI.Member(41, 0x90, "VisualEffects")] public Ref<ShakeResource> ShakeResource;
        [RTTI.Member(29, 0x98, "SoundEffects")] public Ref<SoundResource> FireSound;
        [RTTI.Member(30, 0xA0, "SoundEffects")] public Ref<SoundResource> FireLoopSound;
        [RTTI.Member(42, 0xA8, "VisualEffects")] public Ref<RumbleResource> FireRumbleResource;
        [RTTI.Member(31, 0xB0, "SoundEffects")] public Ref<SoundResource> ClickSound;
        [RTTI.Member(43, 0xB8, "VisualEffects")] public Ref<RumbleResource> ClickRumbleResource;
        [RTTI.Member(32, 0xC0, "SoundEffects")] public Ref<SoundResource> ChamberBulletSound;
        [RTTI.Member(44, 0xC8, "VisualEffects")] public float RandomTracerOffset;
        [RTTI.Member(38, 0xCC, "TrajectoryPrediction")] public float PredictionFactor;
        [RTTI.Member(39, 0xD0, "TrajectoryPrediction")] public float PredictionFactorAI;
        [RTTI.Member(52, 0xD8, "VisualEffects")] public Ref<ParticleSystemResource> FireParticles;
        [RTTI.Member(53, 0xE0, "VisualEffects")] public Ref<ParticleSystemResource> MuzzleSmokeParticles;
        [RTTI.Member(45, 0xE8, "VisualEffects")] public Ref<LightResource> FireLight;
        [RTTI.Member(47, 0xF0, "VisualEffects")] public bool ThirdPersonFireLightIsReversed;
        [RTTI.Member(48, 0xF8, "VisualEffects")] public Ref<CurveResource> FireLightIntensityCurve;
        [RTTI.Member(46, 0x100, "VisualEffects")] public bool FireLightIsLooping;
        [RTTI.Member(49, 0x104, "VisualEffects")] public float FireLightLoopingFadeTime;
        [RTTI.Member(50, 0x110, "VisualEffects")] public Vec3 ThirdPersonFireLightRandomOffset;
        [RTTI.Member(51, 0x120, "VisualEffects")] public bool ApplyFireLightGunFlare;
        [RTTI.Member(54, 0x124, "VisualEffects")] public float MuzzleSmokeDelay;
        [RTTI.Member(55, 0x128, "VisualEffects")] public float MuzzleSmokeDuration;
        [RTTI.Member(7, 0x12C, "FireRate")] public int FireRate_AmmoPerShot;
        [RTTI.Member(8, 0x130, "FireRate")] public EAmmoCostType AmmoCostType;
        [RTTI.Member(59, 0x138, "Charged")] public Ref<ChargedValueInt> Charged_AmmoPerShot;
        [RTTI.Member(60, 0x140, "Charged")] public Ref<ChargedValueInt> Charged_BurstSize;
        [RTTI.Member(3, 0x148, "Logic")] public bool IsUpgradedEjector;
        [RTTI.Member(4, 0x150, "Logic")] public CPtr<EntityAction> FireStartedAction;
        [RTTI.Member(5, 0x158, "Logic")] public CPtr<EntityAction> FireStoppedAction;
    }

    [RTTI.Serializable(0xFDDEDD5D56C603D1, GameType.DS)]
    public class AmmoMutatorResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AmmoResource> OriginalAmmo;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<AmmoResource> ReplacementAmmo;
    }

    [RTTI.Serializable(0x3EE3A16442D18355, GameType.DS)]
    public class AmmoRecipe : ItemRecipe
    {
        [RTTI.Member(14, 0x70, "Logic")] public Array<Ref<InventoryItemComponentResource>> WeaponDescriptionss;
        [RTTI.Member(15, 0x80, "Logic")] public Ref<LocalizedTextResource> AmmoPouchName;
    }

    [RTTI.Serializable(0xEBE4D171AF40842D, GameType.DS)]
    public class AmmoResolverComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBD7F14E96E90071F, GameType.DS)]
    public class AmmoResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Logic")] public Ref<AmmoType> AmmoType;
        [RTTI.Member(32, 0x108, "Logic")] public Ref<CurveResource> BurstDamageClampCurve;
        [RTTI.Member(34, 0x110, "Menu")] public Ref<UITexture> IconTexture;
        [RTTI.Member(36, 0x120, "HUD")] public FRGBAColor Color;
    }

    [RTTI.Serializable(0xDB80DEBED75387A7, GameType.DS)]
    public class AmmoResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDE4C4447A22EFF77, GameType.DS)]
    public class AmmoSlotResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AmmoResource> AmmoResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<RangedWeaponModeResource> WeaponMode;
    }

    [RTTI.Serializable(0x1D041DD4BF0EC872, GameType.DS)]
    public class AmmoSlotsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x422A877BDD3C314F, GameType.DS)]
    public class AmmoSlotsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<AmmoSlotResource>> AmmoSlots;
    }

    [RTTI.Serializable(0xC4356CC5A0E61628, GameType.DS)]
    public class AmmoType : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String ItemName;
        [RTTI.Member(4, 0x28, "Logic")] public String ItemDescription;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<Texture> IconTexture;
    }

    [RTTI.Serializable(0xA7644A4EA5E1B2FB, GameType.DS)]
    public class AndFactConditionResource : FactConditionResource
    {
        [RTTI.Member(3, 0x30, "Logic")] public Array<Ref<FactConditionResource>> Conditions;
        [RTTI.Member(4, 0x40, "Logic")] public bool IsInverted;
    }

    [RTTI.Serializable(0x6D695A4D693AF700, GameType.DS)]
    public class AnimatableValue
    {
        [RTTI.Member(0, 0x8)] public Ref<CurveResource> AnimatedValue;
        [RTTI.Member(1, 0x10)] public float FixedValue;
    }

    [RTTI.Serializable(0x9B72D72C7FEF03F4, GameType.DS)]
    public class AnimatedLightEventInstance : LightEventInstanceBase
    {
    }

    [RTTI.Serializable(0x915201A652657426, GameType.DS)]
    public class AnimatedLightEventResource : LightEventResourceBase
    {
        [RTTI.Member(17, 0x68, "Logic")] public UUIDRef<Light> Light;
        [RTTI.Member(18, 0x78, "Logic")] public OptionalAnimatableValue AnimatableEmitSpecular;
    }

    [RTTI.Serializable(0x727C0E8587302C6, GameType.DS)]
    public class AnimatedLocatorInstance : LocatorInstance
    {
        [RTTI.Member(3, 0x60, "General")] public WorldTransform Orientation;
        [RTTI.Member(4, 0x120, "General")] public CPtr<LocatorInstance> ParentLocator;
    }

    [RTTI.Serializable(0x69083CB62FE38203, GameType.DS)]
    public class AnimatedLocatorResource : LocatorResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<LocatorResource> ParentLocator;
        [RTTI.Member(13, 0x48, "Logic")] public AnimatableValue TranslateX;
        [RTTI.Member(14, 0x60, "Logic")] public AnimatableValue TranslateY;
        [RTTI.Member(15, 0x78, "Logic")] public AnimatableValue TranslateZ;
        [RTTI.Member(16, 0x90, "Logic")] public AnimatableValue RotateX;
        [RTTI.Member(17, 0xA8, "Logic")] public AnimatableValue RotateY;
        [RTTI.Member(18, 0xC0, "Logic")] public AnimatableValue RotateZ;
    }

    [RTTI.Serializable(0x998409071026D3E6, GameType.DS)]
    public class AnimatedMeshEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x600196E228C8839, GameType.DS)]
    public class AnimatedMeshEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(14, 0x48, "Logic")] public Ref<SkeletonAnimationResource> Animation;
        [RTTI.Member(15, 0x50, "Logic")] public Ref<SkinnedMeshResource> Mesh;
        [RTTI.Member(16, 0x58, "Logic")] public Ref<PoseDeformerResource> PoseDeformerResource;
        [RTTI.Member(13, 0x60, "Logic")] public bool UseRootBoneAnimation;
    }

    [RTTI.Serializable(0xF2DCFF373BC308DE, GameType.DS)]
    public class AnimatedPositionLocatorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB04552AADE8D2A46, GameType.DS)]
    public class AnimatedPositionLocatorEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(13, 0x48, "Logic")] public Ref<PathResource> PathResource;
    }

    [RTTI.Serializable(0x31282A188CE32656, GameType.DS)]
    public class AnimatedRenderZoneEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xEDE16315B4F30AA3, GameType.DS)]
    public class AnimatedRenderZoneEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public UUIDRef<RenderZone> RenderZone;
        [RTTI.Member(13, 0x50, "Logic")] public AnimatableValue Intensity;
    }

    [RTTI.Serializable(0xD9827533F7EF5B32, GameType.DS)]
    public class AnimatedScreenEffectResource : ScreenEffectResource
    {
        [RTTI.Member(5, 0x30)] public Ref<CurveResource> BlendAnimationCurve;
    }

    [RTTI.Serializable(0x6607251A56151BA, GameType.DS)]
    public class AnimatedShaderEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5C8CBDDD3F05FEDE, GameType.DS)]
    public class AnimatedShaderEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(13, 0x48, "Logic")] public String ShaderVariable;
        [RTTI.Member(14, 0x50, "Logic")] public String ShaderVariableCensored;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(15, 0x60, "Logic")] public Ref<CurveResource> CurveResource;
        [RTTI.Member(16, 0x68, "Logic")] public bool AutoScaleCurve;
        [RTTI.Member(17, 0x69, "Logic")] public bool ResetOnStop;
        [RTTI.Member(18, 0x6C, "Logic")] public float ResetValue;
    }

    [RTTI.Serializable(0x73CBE9DEB3D007E1, GameType.DS)]
    public class AnimatedStaticMeshInstance : StaticMeshInstance
    {
    }

    [RTTI.Serializable(0x914A2FACAC078D1, GameType.DS)]
    public class AnimatedStaticMeshResource : StaticMeshResource
    {
        [RTTI.Member(22, 0x120, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
    }

    [RTTI.Serializable(0x74A4B46C8EE5D34D, GameType.DS)]
    public class AnimationAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public String AnimVarName;
        [RTTI.Member(5, 0x30, "Logic")] public EAnimationActionAction Action;
    }

    [RTTI.Serializable(0x8E1735744A4967DC, GameType.DS)]
    public class AnimationAttackEventComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7C05C0BA30B3BB82, GameType.DS)]
    public class AnimationAttackEventComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EAttackEventSource EventSource;
        [RTTI.Member(4, 0x21, "Logic")] public EAnimationTriggerType StartTriggerType;
        [RTTI.Member(5, 0x22, "Logic")] public EAnimationTriggerType StopTriggerType;
        [RTTI.Member(6, 0x28, "Logic")] public String StartAnimationEventOrTagName;
        [RTTI.Member(7, 0x30, "Logic")] public String StopAnimationEventOrTagName;
        [RTTI.Member(8, 0x38, "Logic")] public EAttackEventLinkType ActiveEventLinkType;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<CurveResource> DamageClampCurve;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<GraphProgramResource> StartGraph;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<OverrideGraphProgramResource> StartOverrideGraph;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<OverrideGraphProgramResource> UpdateOverrideGraph;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<GraphProgramResource> StopGraph;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<OverrideGraphProgramResource> StopOverrideGraph;
    }

    [RTTI.Serializable(0x688630E525098841, GameType.DS)]
    public class AnimationBoneMotion
    {
        [RTTI.Member(0, 0x0)] public Array<Vec3Pack> MotionCurve;
        [RTTI.Member(1, 0x10)] public Array<float> RotationCurve;
    }

    [RTTI.Serializable(0xAACAF281BAF57AEC, GameType.DS)]
    public class AnimationData
    {
        [RTTI.Member(0, 0x0)] public CPtr<int> DataDef;
        [RTTI.Member(1, 0x8)] public CPtr<int> DataState;
        [RTTI.Member(2, 0x10)] public CPtr<int> TransformBuffer;
        [RTTI.Member(3, 0x18)] public CPtr<int> SyncTrack;
        [RTTI.Member(4, 0x20)] public CPtr<int> PhysicsJoints;
        [RTTI.Member(5, 0x38)] public float Duration;
    }

    [RTTI.Serializable(0xE318A44CDAB20F8E, GameType.DS)]
    public class AnimationDataGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x19222F0061E97A4D, GameType.DS)]
    public class AnimationDataState
    {
        [RTTI.Member(0, 0x0)] public float TimeCurrent;
        [RTTI.Member(1, 0x4)] public float TimeLastFrame;
        [RTTI.Member(2, 0x8)] public uint32 LastFrameActive;
        [RTTI.Member(3, 0xC)] public bool IsEventTimeSpace;
        [RTTI.Member(4, 0xD)] public bool ControlsEventMatching;
        [RTTI.Member(5, 0xE)] public bool IsInActivationFrame;
        [RTTI.Member(6, 0xF)] public bool InLastFrame;
    }

    [RTTI.Serializable(0x6DCF9E642BA4ABDB, GameType.DS)]
    public class AnimationEventActionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x384D21043F92B21E, GameType.DS)]
    public class AnimationEventActionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<ActionPerAnimationEvent> ActionsPerEvent;
    }

    [RTTI.Serializable(0x584F598D00C2AE11, GameType.DS)]
    public class AnimationEventEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC24ED334194F3357, GameType.DS)]
    public class AnimationEventEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public AnimationEventID AnimEvent;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<EntityActorResource> AnimatedEntityActorResource;
    }

    [RTTI.Serializable(0x52B71620111949DC, GameType.DS)]
    public class AnimationManager : EntityComponent
    {
    }

    [RTTI.Serializable(0xEC8B659C7963A361, GameType.DS)]
    public class AnimationManagerResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x40, "Logic")] public Pose InitialPose;
        [RTTI.Member(4, 0xB0, "Logic")] public bool ForceContinuousEntityUpdates;
    }

    [RTTI.Serializable(0xFA673FE7BBD0E004, GameType.DS)]
    public class AnimationManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE7720CEF83E00B99, GameType.DS)]
    public class AnimationMotionBase : Resource
    {
    }

    [RTTI.Serializable(0xD52CD66C11D50543, GameType.DS)]
    public class AnimationMotionCurve : AnimationMotionBase
    {
        [RTTI.Member(2, 0x20)] public float Duration;
        [RTTI.Member(3, 0x24)] public float SampleTimeStep;
        [RTTI.Member(6, 0x28)] public HashMap<int_AnimationBoneMotion> BoneMotions;
        [RTTI.Member(4, 0x38)] public SampledAnimationEventTrack SyncEventTrack;
        [RTTI.Member(5, 0x60)] public Array<SampledAnimationEventTrack> EventTracks;
    }

    [RTTI.Serializable(0xDCDF2EF8EC7B77DD, GameType.DS)]
    public class AnimationMotionDirectional : AnimationMotionBase
    {
        [RTTI.Member(2, 0x20)] public int AngleIndex;
        [RTTI.Member(3, 0x28)] public Array<float> AngleValues;
        [RTTI.Member(5, 0x38)] public FRange AngleRange;
        [RTTI.Member(4, 0x40)] public Array<Ref<AnimationMotionBase>> Direction;
    }

    [RTTI.Serializable(0x9A7855F3ED5453FF, GameType.DS)]
    public class AnimationNodeProceduralLookGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB6E8250FE734EC9E, GameType.DS)]
    public class AnimationPoseMatchingAnimationData
    {
        [RTTI.Member(0, 0x0)] public EAnimationDirection Direction;
    }

    [RTTI.Serializable(0x3A4D8C38B3897ED5, GameType.DS)]
    public class AnimationPoseMatchingBoneData
    {
        [RTTI.Member(0, 0x0)] public Vec3 PositionLs;
        [RTTI.Member(1, 0x10)] public Vec3 VelocityLs;
    }

    [RTTI.Serializable(0xF4EA1FFCAA476561, GameType.DS)]
    public class AnimationPoseMatchingConfigData : Resource
    {
        [RTTI.Member(6, 0x20, "Internal")] public Array<int> RelevantBonesIndices;
        [RTTI.Member(3, 0x30, "Logic")] public Array<float> PositionWeights;
        [RTTI.Member(4, 0x40, "Logic")] public Array<float> VelocityWeights;
        [RTTI.Member(7, 0x50, "Internal")] public int AligmentBoneIndex;
        [RTTI.Member(8, 0x54, "Internal")] public bool FromRagdollSkeleton;
    }

    [RTTI.Serializable(0xD0B926002CEBD60B, GameType.DS)]
    public class AnimationPoseMatchingDataBase : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<AnimationPoseMatchingPose> PosesDb;
        [RTTI.Member(3, 0x30)] public Array<AnimationPoseMatchingAnimationData> AnimationData;
    }

    [RTTI.Serializable(0xBA35EB753BFCD745, GameType.DS)]
    public class AnimationPoseMatchingPose
    {
        [RTTI.Member(0, 0x0)] public Array<AnimationPoseMatchingBoneData> BonesData;
        [RTTI.Member(1, 0x10)] public int AnimationIndex;
        [RTTI.Member(2, 0x14)] public float AnimationTime;
        [RTTI.Member(3, 0x20)] public Vec3 AligmentBonePositionMs;
        [RTTI.Member(4, 0x30)] public Vec3 AligmentBoneForwardDirectionMs;
        [RTTI.Member(5, 0x40)] public Vec3 RootBoneDeltaTranslation;
        [RTTI.Member(6, 0x50)] public Quat RootBoneDeltaRotation;
    }

    [RTTI.Serializable(0xD986E0DA657CA64E, GameType.DS)]
    public class AnimationResourceTranslation
    {
        [RTTI.Member(0, 0x0)] public ELanguage Language;
        [RTTI.Member(1, 0x8)] public Ref<SkeletonAnimationResource> Animation;
    }

    [RTTI.Serializable(0x4E680438CF38BA7D, GameType.DS)]
    public class AnimationSetMap : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<AnimationSetMapEntry> Entries;
    }

    [RTTI.Serializable(0x6965D25262B61D6E, GameType.DS)]
    public class AnimationSetMapEntry
    {
        [RTTI.Member(0, 0x0)] public Array<String> Tags;
        [RTTI.Member(1, 0x10)] public String AnimationSetName;
    }

    [RTTI.Serializable(0x3DFEB0BAEB99D1E6, GameType.DS)]
    public class AnimationSet_Array_MountPoint
    {
        [RTTI.Member(0, 0x0)] public AnimationSet Key;
        [RTTI.Member(1, 0x8)] public Array<MountPoint> Value;
    }

    [RTTI.Serializable(0x3135F39422E12EAA, GameType.DS)]
    public class AnimationStateMachineEvaluationContext
    {
        [RTTI.Member(0, 0x0)] public CPtr<ActiveStatesQueue> ActiveStatesQueue;
    }

    [RTTI.Serializable(0xF286DA23B431C95A, GameType.DS)]
    public class AnimationStreamingActorResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Quat> LastPoseRotations;
        [RTTI.Member(6, 0x40, "Logic")] public Array<Vec3> LastPoseTranslations;
    }

    [RTTI.Serializable(0x24BF1BC7260A33CF, GameType.DS)]
    public class AnimationStreamingCoverActorResource : AnimationStreamingActorResource
    {
        [RTTI.Member(7, 0x50)] public EDSCoverAndAnimModelPartType ModelRegion;
    }

    [RTTI.Serializable(0x19675F54FD6F1F40, GameType.DS)]
    public class AnimationStreamingCustomSetting : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public bool Enabled;
        [RTTI.Member(3, 0x24)] public uint32 BlockFrameLength;
    }

    [RTTI.Serializable(0x6BBDA18FA1A0B077, GameType.DS)]
    public class AnimationStreamingEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x2958D802A1D8464D, GameType.DS)]
    public class AnimationStreamingFullBodyActorResource : AnimationStreamingActorResource
    {
        [RTTI.Member(7, 0x50)] public ERootBoneMode RootBoneMode;
        [RTTI.Member(8, 0x54)] public bool NoMorpheme;
    }

    [RTTI.Serializable(0xA35A1D8C690B1519, GameType.DS)]
    public class AnimationStreamingSkipBlockInfo
    {
        [RTTI.Member(0, 0x0)] public uint64 Position;
        [RTTI.Member(1, 0x8)] public uint32 Size;
        [RTTI.Member(2, 0xC)] public int32 SkipFrame;
    }

    [RTTI.Serializable(0xD9D69C14384040F3, GameType.DS)]
    public class AnimationTrackBase : Resource
    {
    }

    [RTTI.Serializable(0x39F8F3CA357077F1, GameType.DS)]
    public class AnimationTrackKeyFrame_Quat : AnimationTrackKeyTime
    {
        [RTTI.Member(1, 0x10)] public Quat Value;
    }

    [RTTI.Serializable(0x1F71F4B1B3469871, GameType.DS)]
    public class AnimationTrackKeyFrame_RGBAColor : AnimationTrackKeyTime
    {
        [RTTI.Member(1, 0x10)] public RGBAColor Value;
    }

    [RTTI.Serializable(0x6EB4981A2D43CB20, GameType.DS)]
    public class AnimationTrackKeyFrame_Vec3 : AnimationTrackKeyTime
    {
        [RTTI.Member(1, 0x10)] public Vec3 Value;
    }

    [RTTI.Serializable(0xF6F8C4C62A2975F7, GameType.DS)]
    public class AnimationTrackKeyFrame_Vec4 : AnimationTrackKeyTime
    {
        [RTTI.Member(1, 0x10)] public Vec4 Value;
    }

    [RTTI.Serializable(0x6A62DF3110CF9CFB, GameType.DS)]
    public class AnimationTrackKeyFrame_WorldPosition : AnimationTrackKeyTime
    {
        [RTTI.Member(1, 0x10)] public WorldPosition Value;
    }

    [RTTI.Serializable(0xF91D79A68B30B15E, GameType.DS)]
    public class AnimationTrackKeyFrame_bool : AnimationTrackKeyTime
    {
        [RTTI.Member(1, 0x10)] public bool Value;
    }

    [RTTI.Serializable(0x49740FA5997C953A, GameType.DS)]
    public class AnimationTrackKeyFrame_float : AnimationTrackKeyTime
    {
        [RTTI.Member(1, 0x10)] public float Value;
    }

    [RTTI.Serializable(0x9A6DCC17F2320C90, GameType.DS)]
    public class AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x8)] public float Time;
    }

    [RTTI.Serializable(0x26BC71684F3A4836, GameType.DS)]
    public class AnimationTrackLinearBool : AnimationTrackBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public Array<AnimationTrackKeyFrame_bool> KeyFrames;
    }

    [RTTI.Serializable(0x1D4DFD46B850EB1B, GameType.DS)]
    public class AnimationTrackLinearFQuat : AnimationTrackBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public Array<AnimationTrackKeyFrame_Quat> KeyFrames;
    }

    [RTTI.Serializable(0x2B43AF3B33DBAB60, GameType.DS)]
    public class AnimationTrackLinearFVector3 : AnimationTrackBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public Array<AnimationTrackKeyFrame_Vec3> KeyFrames;
    }

    [RTTI.Serializable(0x97DC08C28A568F7E, GameType.DS)]
    public class AnimationTrackLinearFVector4 : AnimationTrackBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public Array<AnimationTrackKeyFrame_Vec4> KeyFrames;
    }

    [RTTI.Serializable(0x6D0AF19090588545, GameType.DS)]
    public class AnimationTrackLinearFloatGame : AnimationTrackBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public Array<AnimationTrackKeyFrame_float> KeyFrames;
    }

    [RTTI.Serializable(0xDCF1AD1BECC05A8, GameType.DS)]
    public class AnimationTrackLinearRGBAColor : AnimationTrackBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public Array<AnimationTrackKeyFrame_RGBAColor> KeyFrames;
    }

    [RTTI.Serializable(0x7B4F2264319DF647, GameType.DS)]
    public class AnimationTrackLinearWorldPosition : AnimationTrackBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public Array<AnimationTrackKeyFrame_WorldPosition> KeyFrames;
    }

    [RTTI.Serializable(0xA0BC2593FE09A194, GameType.DS)]
    public class AnimationVariableFloat
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0xB2C0F8006E9DFE74, GameType.DS)]
    public class AnimationVariableSettings
    {
        [RTTI.Member(1, 0x0, "Logic")] public Array<AnimationVariableFloat> AnimationVariableFloat;
        [RTTI.Member(2, 0x10, "Logic")] public Array<String> AnimationAction;
    }

    [RTTI.Serializable(0x69757697A5DB1656, GameType.DS)]
    public class AnimationVariablesResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<FloatAnimationVariableValue> FloatAnimVars;
    }

    [RTTI.Serializable(0xFBADD1816000726F, GameType.DS)]
    public class AnnotatedRoute : Route
    {
        [RTTI.Member(8, 0xB0)] public Ref<AnnotatedRouteDecoration> Decoration;
        [RTTI.Member(9, 0xD8)] public Array<EAnnotationPrimitiveTag> AdditionalAnnotationTags;
    }

    [RTTI.Serializable(0xA6D34BD923B8C571, GameType.DS)]
    public class AnnotatedRouteAnnotation
    {
        [RTTI.Member(0, 0x0)] public Array<EAnnotationPrimitiveTag> AnnotationTags;
        [RTTI.Member(1, 0x10)] public Vec3 Offset;
        [RTTI.Member(2, 0x20)] public Vec3 Normal;
    }

    [RTTI.Serializable(0x15AD64F554500D88, GameType.DS)]
    public class AnnotatedRouteAnnotationCollection : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<AnnotatedRouteAnnotation> Annotations;
    }

    [RTTI.Serializable(0xCEAE196112013FB1, GameType.DS)]
    public class AnnotatedRouteDecoration : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AnnotatedRouteAnnotationCollection> AnnotationCollection;
        [RTTI.Member(5, 0x28, "Visuals")] public Ref<PrefabResource> RoutePrefabResource;
        [RTTI.Member(6, 0x30, "Visuals")] public Array<AnnotatedRoutePrefabShaderOverride> ScaleShaderOverrides;
        [RTTI.Member(7, 0x40, "Visuals")] public Array<AnnotatedRoutePrefabShaderOverride> OffsetShaderOverrides;
    }

    [RTTI.Serializable(0xAFDCD2BFCE1956F9, GameType.DS)]
    public class AnnotatedRouteNode : RouteNode
    {
    }

    [RTTI.Serializable(0xE35989484EFD3FA1, GameType.DS)]
    public class AnnotatedRoutePrefabShaderOverride
    {
        [RTTI.Member(1, 0x0, "Logic")] public String VariableID;
        [RTTI.Member(2, 0x8, "Logic")] public Ref<RTTIRefObject> Object;
    }

    [RTTI.Serializable(0x7A9684634B5D3350, GameType.DS)]
    public class AnnotationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x63D55CDD2A06EC87, GameType.DS)]
    public class AnnotationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<AttachedAnnotationResource>> AttachedAnnotations;
        [RTTI.Member(5, 0x30, "Parkour")] public bool OnlyPullUpOntoBalanceBeams;
        [RTTI.Member(6, 0x31, "Parkour")] public bool AllowAutomaticStepOffToOtherObject;
        [RTTI.Member(7, 0x32, "Parkour")] public bool AllowAutomaticStepOnFromOtherObject;
        [RTTI.Member(8, 0x33, "Parkour")] public bool AllowAutomaticStepOffToFloor;
        [RTTI.Member(9, 0x34, "Parkour")] public bool AllowUnguidedJumpOff;
        [RTTI.Member(10, 0x38, "Parkour")] public Array<Vec3> AutomaticStepOffToFloorDetectionOffsetsOverride;
        [RTTI.Member(11, 0x48, "Parkour")] public bool UseProperlyAlignedCheckForAttachment;
        [RTTI.Member(12, 0x49, "Parkour")] public bool UseLinearApproachTrajectory;
        [RTTI.Member(13, 0x4A, "Parkour")] public bool OverrideApproachTrajectorySettings;
        [RTTI.Member(14, 0x4C, "Parkour")] public HumanoidAirControlCurvedTrajectorySettings CurvedTrajectorySettingsOverride;
        [RTTI.Member(15, 0x68, "Parkour")] public HumanoidAirControlLinearTrajectorySettings LinearTrajectorySettingsOverride;
    }

    [RTTI.Serializable(0x2DF61D1E42783722, GameType.DS)]
    public class AnnotationComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC3FBCA77DAF840CC, GameType.DS)]
    public class AnnotationDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3C1A266E702DE549, GameType.DS)]
    public class AnnotationDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String CharacterCenterHelper;
        [RTTI.Member(4, 0x28, "Logic")] public float DetectionDepth;
        [RTTI.Member(5, 0x30, "Logic")] public Vec3 HandPosition;
        [RTTI.Member(6, 0x40, "Logic")] public Vec3 HandPositionSwimming;
        [RTTI.Member(7, 0x50, "Logic")] public Vec3 FeetGroundPosition;
        [RTTI.Member(8, 0x60, "Logic")] public float MaxOnGroundHandsAttachDistance;
        [RTTI.Member(9, 0x64, "Logic")] public float MaxOnGroundFeetAttachDistance;
        [RTTI.Member(10, 0x68, "Logic")] public float MaxInAirHandsAttachDistance;
        [RTTI.Member(11, 0x6C, "Logic")] public float MaxInAirFeetAttachDistance;
        [RTTI.Member(12, 0x70, "Logic")] public float AnnotationsDetectionRadius;
        [RTTI.Member(13, 0x80, "Logic")] public Vec3 BalanceBeamPullUpDetectionOffset;
        [RTTI.Member(14, 0x90, "Logic")] public float BalanceBeamPullUpDetectionRadius;
        [RTTI.Member(15, 0xA0, "Logic")] public Vec3 LowerToClimbDetectionOffset;
        [RTTI.Member(16, 0xB0, "Logic")] public float LowerToClimbDetectionRadius;
    }

    [RTTI.Serializable(0xDEDDD3C671E2D336, GameType.DS)]
    public class AnnotationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3C6E52DBBC82A00D, GameType.DS)]
    public class AnnotationEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public WString Label;
        [RTTI.Member(8, 0x38)] public WString Comment;
        [RTTI.Member(9, 0x40)] public FRGBAColor Color;
    }

    [RTTI.Serializable(0x6446D5DD5E1FEF04, GameType.DS)]
    public class AnnotationInstance : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public Ref<AnnotationResource> Resource;
        [RTTI.Member(6, 0x68, "General")] public Array<CPtr<AnnotationPrimitiveInstance>> PrimitiveInstances;
        [RTTI.Member(8, 0x80, "Logic")] public bool Enabled;
    }

    [RTTI.Serializable(0xF1C270152953B25D, GameType.DS)]
    public class AnnotationInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE4F9BF4B93181AC4, GameType.DS)]
    public class AnnotationLinkNode : WorldNode
    {
    }

    [RTTI.Serializable(0x6984EA649312F431, GameType.DS)]
    public class AnnotationPoint : AnnotationPrimitive
    {
        [RTTI.Member(6, 0x40, "General")] public Vec3 Point;
    }

    [RTTI.Serializable(0x402C15C1D789DE7A, GameType.DS)]
    public class AnnotationPolygon : AnnotationPrimitive
    {
        [RTTI.Member(6, 0x40, "General")] public Array<Vec3> Points;
    }

    [RTTI.Serializable(0x120136647C9CCDAD, GameType.DS)]
    public class AnnotationPrimitive : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<String> Tags;
        [RTTI.Member(4, 0x30, "General")] public Vec3 Normal;
    }

    [RTTI.Serializable(0x4AE1CA12B389D035, GameType.DS)]
    public class AnnotationPrimitiveInstance : CoreObject
    {
        [RTTI.Member(3, 0x40, "General")] public CPtr<AnnotationPrimitive> Primitive;
        [RTTI.Member(4, 0x48, "General")] public Ref<AnnotationInstance> Instance;
        [RTTI.Member(5, 0x50, "General")] public BoundingBox3 BoundingBox;
    }

    [RTTI.Serializable(0xCF9E66BAD308DA74, GameType.DS)]
    public class AnnotationPrimitiveInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3687255088C1E390, GameType.DS)]
    public class AnnotationPrimitiveSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC1DC7F63A41120F, GameType.DS)]
    public class AnnotationResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<AnnotationPrimitive>> Primitives;
    }

    [RTTI.Serializable(0xCC039B75D8CF69DC, GameType.DS)]
    public class AnnotationResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2C53DB9405B65179, GameType.DS)]
    public class AnnotationSegment : AnnotationPrimitive
    {
        [RTTI.Member(6, 0x40, "General")] public Vec3 StartPoint;
        [RTTI.Member(7, 0x50, "General")] public Vec3 EndPoint;
    }

    [RTTI.Serializable(0xB5D8B8F112CE5642, GameType.DS)]
    public class Application
    {
    }

    [RTTI.Serializable(0xBD4B58F9A2BB5B2F, GameType.DS)]
    public class ApplicationSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBB247F1DE89C809D, GameType.DS)]
    public class ApplyPhysicsImpulseAction : EntityAction
    {
        [RTTI.Member(4, 0x30, "Logic")] public Vec3 Position;
        [RTTI.Member(5, 0x40, "Logic")] public bool ApplyAtCenterOfMass;
        [RTTI.Member(6, 0x50, "Logic")] public Vec3 Direction;
        [RTTI.Member(7, 0x60, "Logic")] public float Force;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<RandomVectorResource> RandomImpulse;
        [RTTI.Member(9, 0x70, "Logic")] public bool ForceApplyToSelf;
        [RTTI.Member(10, 0x71, "Logic")] public bool UpwardsInWorldSpace;
        [RTTI.Member(11, 0x78, "Logic")] public Array<Ref<DestructibilityPart>> Parts;
        [RTTI.Member(12, 0x88, "Logic")] public bool Ragdoll;
    }

    [RTTI.Serializable(0x26056C8892BE8D30, GameType.DS)]
    public class ArcComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD278A33AB2A7EFCA, GameType.DS)]
    public class ArcComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xABDED467BF9580D3, GameType.DS)]
    public class ArcComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x40DD550900DF7605, GameType.DS)]
    public class ArcEjector : DiscreteAmmoEjector
    {
    }

    [RTTI.Serializable(0x5C4DAADEA049E4B6, GameType.DS)]
    public class ArcEjectorResource : DiscreteAmmoEjectorResource
    {
        [RTTI.Member(79, 0x1A0, "Default")] public float Range;
        [RTTI.Member(80, 0x1A4, "Default")] public float Angle;
        [RTTI.Member(82, 0x1A8, "Default")] public int HitCount;
        [RTTI.Member(81, 0x1AC, "Default")] public float ExitVelocity;
        [RTTI.Member(84, 0x1B0, "Charged")] public Ref<ChargedValueFloat> RangeScaler;
        [RTTI.Member(85, 0x1B8, "Charged")] public Ref<ChargedValueFloat> AngleScaler;
        [RTTI.Member(86, 0x1C0, "Charged")] public Ref<ChargedValueInt> HitCountScaler;
        [RTTI.Member(87, 0x1C8, "Charged")] public Ref<ChargedValueFloat> DamageScaler;
        [RTTI.Member(88, 0x1D0, "Charged")] public Ref<ChargedValueFloat> ImpulseScaler;
        [RTTI.Member(89, 0x1D8, "Charged")] public Ref<ChargedValueFloat> SeverityScaler;
        [RTTI.Member(91, 0x1E0, "Damage")] public Ref<DamageSettings> DamageSettings;
        [RTTI.Member(93, 0x1E8, "Targeting")] public EPhysicsCollisionLayerGame TargetCollisionLayer;
        [RTTI.Member(94, 0x1EC, "Targeting")] public float TargetCollisionRadius;
        [RTTI.Member(95, 0x1F0, "Targeting")] public float DummyTargetSpacingMin;
        [RTTI.Member(97, 0x1F8, "Arc")] public Ref<EntityResource> ArcEntityResource;
    }

    [RTTI.Serializable(0x2CA18315C40F9C43, GameType.DS)]
    public class AreaBasedStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0x309A02BBD614BF5A, GameType.DS)]
    public class AreaBasedStreamingStrategyInstanceGame : AreaBasedStreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0xE5E6DE375C5D63E, GameType.DS)]
    public class AreaBasedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(7, 0x50, "General")] public Ref<CollisionTrigger> HintTrigger;
        [RTTI.Member(8, 0x58, "General")] public Ref<CollisionTrigger> ActivateTrigger;
        [RTTI.Member(9, 0x60, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
        [RTTI.Member(11, 0x68, "PlayGo")] public bool ExcludeFromInitialChunk;
    }

    [RTTI.Serializable(0x2F3F24569FD5F784, GameType.DS)]
    public class AreaBasedStreamingStrategyResourceGame : AreaBasedStreamingStrategyResource
    {
        [RTTI.Member(13, 0x70, "General")] public Ref<BooleanFact> HintedFact;
        [RTTI.Member(14, 0x78, "General")] public Ref<BooleanFact> ActiveFact;
        [RTTI.Member(15, 0x80, "General")] public Ref<ConditionResource> EnableCondition;
    }

    [RTTI.Serializable(0x323CC6393C789097, GameType.DS)]
    public class AreaLandmark : Landmark
    {
        [RTTI.Member(7, 0x80)] public Ref<PositionLandmark> MapIcon;
    }

    [RTTI.Serializable(0xFA0669232A7E198D, GameType.DS)]
    public class AreaRestrictionSpawnCommand : SpawnCommand
    {
        [RTTI.Member(5, 0x60, "Logic")] public Array<Ref<NavMeshArea>> Areas;
    }

    [RTTI.Serializable(0xC492F61F2E142080, GameType.DS)]
    public class AreaTargetingSettings : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public ETargetQueryDetail QueryDetail;
        [RTTI.Member(5, 0x21, "QueryShape")] public EAreaTargetShapeType ShapeType;
        [RTTI.Member(6, 0x24, "QueryShape")] public float Radius;
        [RTTI.Member(7, 0x30, "QueryShape")] public BoundingBox3 Box;
        [RTTI.Member(8, 0x50, "QueryShape")] public Vec3 CapsuleOffsetStart;
        [RTTI.Member(9, 0x60, "QueryShape")] public Vec3 CapsuleOffsetEnd;
        [RTTI.Member(10, 0x70, "QueryShape")] public Ref<CurveResource> ShapeCurve;
        [RTTI.Member(11, 0x78, "QueryShape")] public EShapeCurveSource ShapeCurveSource;
        [RTTI.Member(13, 0x79, "TargetFiltering")] public bool OnlyTargetHostileFaction;
        [RTTI.Member(14, 0x7A, "TargetFiltering")] public bool IgnoreInstigator;
    }

    [RTTI.Serializable(0xA1793AFF77D1350F, GameType.DS)]
    public class ArmedPartDamageOnImpactComponent : DamageOnImpactComponent
    {
    }

    [RTTI.Serializable(0xE553FE335A889F30, GameType.DS)]
    public class ArmedPartDamageOnImpactComponentResource : DamageOnImpactComponentResource
    {
        [RTTI.Member(13, 0x48, "Logic")] public Array<Ref<ModelPartResource>> ArmedModelParts;
        [RTTI.Member(15, 0x58, "VisualEffects")] public Ref<EffectComponentResource> ArmedEffects;
    }

    [RTTI.Serializable(0x96F3F5E79C8C6B46, GameType.DS)]
    public class ArtPartsAnimationResource : ResourceWithNameHash
    {
        [RTTI.Member(5, 0x28, "Skeleton")] public Ref<SkeletonAnimComponentResource> SkeletonAnimationResource;
        [RTTI.Member(7, 0x30, "Shader")] public Ref<ShaderAnimComponentResource> ShaderAnimationResource;
        [RTTI.Member(9, 0x38, "Sound")] public Ref<SoundResource> SoundResource;
        [RTTI.Member(10, 0x40, "Sound")] public String AttachHelper;
        [RTTI.Member(12, 0x48, "Control")] public bool IsSyncLoop;
        [RTTI.Member(13, 0x49, "Control")] public bool IsRandomStart;
        [RTTI.Member(14, 0x4C, "Control")] public float RandomStartTimeRate;
    }

    [RTTI.Serializable(0xD475D79839354FF8, GameType.DS)]
    public class ArtPartsCoverAndAnimResource : ArtPartsCoverModelResource
    {
        [RTTI.Member(6, 0x40, "General")] public EDSCoverAndAnimModelPartType ModelRegion;
        [RTTI.Member(7, 0x48, "General")] public Array<uint32> MaterialHashArray;
        [RTTI.Member(8, 0x58, "General")] public Array<ChannelAndShapeMap> FacialChannelAndShapeMap;
        [RTTI.Member(9, 0x68, "General")] public Array<uint32> NoUpdateFacialChannelsInGame;
        [RTTI.Member(12, 0x78, "General")] public Ref<Skeleton> FacialRigSkeleton;
        [RTTI.Member(13, 0x80, "General")] public Array<Vec4> SubtractData;
        [RTTI.Member(14, 0x90, "General")] public uint32 OffsetToMultiplier;
        [RTTI.Member(15, 0x98, "General")] public Array<uint32> GameFacialMappingTable;
        [RTTI.Member(17, 0xA8, "General")] public uint32 EyeBallRIndex;
        [RTTI.Member(16, 0xAC, "General")] public uint32 EyeBallLIndex;
        [RTTI.Member(18, 0xB0, "General")] public int32 TongIndex;
        [RTTI.Member(34, 0xB4, "General")] public uint32 EyeBallParentIndex;
        [RTTI.Member(10, 0xB8, "General")] public int32 LeftEyeCloseChannelIndex;
        [RTTI.Member(11, 0xBC, "General")] public int32 RightEyeCloseChannelIndex;
        [RTTI.Member(19, 0xC0, "General")] public float FacialGazeUpInversionUp;
        [RTTI.Member(20, 0xC4, "General")] public float FacialGazeUpFactor;
        [RTTI.Member(21, 0xC8, "General")] public float FacialGazeLeftLRadian;
        [RTTI.Member(22, 0xCC, "General")] public float FacialGazeLeftLFactor;
        [RTTI.Member(23, 0xD0, "General")] public float FacialGazeLeftRRadian;
        [RTTI.Member(24, 0xD4, "General")] public float FacialGazeLeftRFactor;
        [RTTI.Member(25, 0xD8, "General")] public float FacialGazeDownLInversion;
        [RTTI.Member(26, 0xDC, "General")] public float FacialGazeDownLFactor;
        [RTTI.Member(27, 0xE0, "General")] public float FacialGazeDownRInversion;
        [RTTI.Member(28, 0xE4, "General")] public float FacialGazeDownRFactor;
        [RTTI.Member(29, 0xE8, "General")] public float FacialGazeRightLRadian;
        [RTTI.Member(30, 0xEC, "General")] public float FacialGazeRightLFactor;
        [RTTI.Member(31, 0xF0, "General")] public float FacialGazeRightRRadian;
        [RTTI.Member(32, 0xF4, "General")] public float FacialGazeRightRFactor;
        [RTTI.Member(33, 0xF8, "General")] public float BlinkAdjustWeight;
        [RTTI.Member(35, 0xFC, "General")] public bool DefaultFacialLODAEnable;
        [RTTI.Member(36, 0xFD, "General")] public bool IsLogic;
        [RTTI.Member(37, 0xFE, "General")] public bool IsOneTong;
        [RTTI.Member(38, 0xFF, "General")] public bool IsEyeXAxisInverse;
    }

    [RTTI.Serializable(0x8FB6D1083030A794, GameType.DS)]
    public class ArtPartsCoverModelResource : ArtPartsSubModelExtraResource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Quat> DefaultPoseRotations;
        [RTTI.Member(4, 0x30, "General")] public Array<Vec3> DefaultPoseTranslations;
    }

    [RTTI.Serializable(0x58A79833FD58F506, GameType.DS)]
    public class ArtPartsData : EntityComponent
    {
    }

    [RTTI.Serializable(0x22105C35921E8D26, GameType.DS)]
    public class ArtPartsDataResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<ModelPartResource> RootModel;
        [RTTI.Member(4, 0x28, "General")] public Ref<SkeletonHelpers> RootHelperResource;
        [RTTI.Member(5, 0x30, "General")] public Ref<SkinnedModelPoseDeformerResource> SkinnedModelPoseDeformerResource;
        [RTTI.Member(6, 0x38, "General")] public Ref<SkinnedModelPoseDeformerResource> LogicalSkinnedModelPoseDeformerResource;
        [RTTI.Member(7, 0x40, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(8, 0x48, "General")] public Ref<Skeleton> RepresentationSkeleton;
        [RTTI.Member(9, 0x50, "General")] public Array<Ref<ArtPartsEffectResourceBase>> EffectArray;
        [RTTI.Member(10, 0x60, "General")] public Array<Ref<ArtPartsAnimationResource>> AnimationArray;
        [RTTI.Member(11, 0x70, "General")] public Array<Ref<ArtPartsExtraResource>> ExtraObjectArray;
        [RTTI.Member(20, 0x80, "General")] public Ref<Texture> PaintMaskTexture;
        [RTTI.Member(12, 0x88, "General")] public Array<Quat> DefaultPoseRotations;
        [RTTI.Member(13, 0x98, "General")] public Array<Vec3> DefaultPoseTranslations;
        [RTTI.Member(14, 0xB0, "General")] public BoundingBox3 DefaultPoseBounds;
        [RTTI.Member(15, 0xD0, "General")] public Array<Ref<ArtPartsSubModelWithChildrenResource>> SubModelPartResources;
        [RTTI.Member(16, 0xE0, "General")] public HashMap<uint32_int32> ModelNameHandleMap;
        [RTTI.Member(17, 0xF0, "General")] public HashMap<uint32_int32> ModelNameCoverModelPreComputedResourceMap;
        [RTTI.Member(18, 0x100, "General")] public Array<Ref<DSCoverModelPreComputedResource>> CoverModelPreComputedResources;
        [RTTI.Member(19, 0x110, "General")] public Array<Ref<SkeletonHelpers>> OrientationHelpers;
        [RTTI.Member(21, 0x120, "General")] public uint32 MeshResourceNum;
        [RTTI.Member(22, 0x124, "General")] public bool IsRotatedRootModel;
    }

    [RTTI.Serializable(0x57E3D08B07F51ADD, GameType.DS)]
    public class ArtPartsDataSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1B54B9F409372DB1, GameType.DS)]
    public class ArtPartsEffectGroupResource : ArtPartsEffectResourceBase
    {
        [RTTI.Member(8, 0x80, "General")] public Array<Ref<ArtPartsEffectResource>> EffectResources;
    }

    [RTTI.Serializable(0xCDA4700F4DA7B2FF, GameType.DS)]
    public class ArtPartsEffectResource : ArtPartsEffectResourceBase
    {
        [RTTI.Member(8, 0x80, "General")] public Ref<EffectComponentResource> EffectResource;
    }

    [RTTI.Serializable(0x872D73015F0BF925, GameType.DS)]
    public class ArtPartsEffectResourceBase : ResourceWithNameHash
    {
        [RTTI.Member(5, 0x30, "General")] public Mat44 LocalOffsetMatrix;
        [RTTI.Member(6, 0x70, "General")] public String HelperNode;
    }

    [RTTI.Serializable(0xF3AEED3F35ACEE67, GameType.DS)]
    public class ArtPartsExtraResource : ResourceWithNameHash
    {
        [RTTI.Member(5, 0x28, "General")] public Ref<Resource> ExtraObject;
    }

    [RTTI.Serializable(0x822DB465D2678958, GameType.DS)]
    public class ArtPartsPreviewEntity : Entity
    {
    }

    [RTTI.Serializable(0x250937561F91F48A, GameType.DS)]
    public class ArtPartsPreviewEntityResource : EntityResource
    {
        [RTTI.Member(33, 0x100, "ChildEntity")] public Ref<AttachChildEntitiesResource> AttachChildEntitiesResouce;
        [RTTI.Member(35, 0x108, "Facial")] public Ref<SkeletonAnimationResource> FacialGameRigAnimationResource;
        [RTTI.Member(36, 0x110, "Facial")] public Ref<SkeletonAnimationResource> FacialGameSkeletonAnimationResource;
        [RTTI.Member(37, 0x118, "Facial")] public Ref<SkeletonAnimationResource> FacialBlendShapeParameterAnimationResource;
        [RTTI.Member(41, 0x120, "Hair")] public Ref<SkeletonAnimationResource> HairAnimationResource;
        [RTTI.Member(43, 0x128, "Cloth")] public Ref<SkeletonAnimationResource> ClothAnimationResource;
        [RTTI.Member(45, 0x130, "Sentence")] public Ref<SentenceGroupResource> SentenceGroupResource;
        [RTTI.Member(46, 0x138, "Sentence")] public Array<Ref<SentenceResource>> SentenceResources;
        [RTTI.Member(31, 0x148, "General")] public Ref<ArtPartsVariationResource> ArtPartsVariationResouce;
        [RTTI.Member(38, 0x150, "Facial")] public bool EnableFacialEyeBlink;
        [RTTI.Member(39, 0x151, "Facial")] public bool EnableFacialEyeSaccade;
    }

    [RTTI.Serializable(0x1AD0F62DE000E0A6, GameType.DS)]
    public class ArtPartsShaderVariableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7BEB34B3D6E42E92, GameType.DS)]
    public class ArtPartsShaderVariableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3602A284B924B5D3, GameType.DS)]
    public class ArtPartsSubModelExtraResource : Resource
    {
    }

    [RTTI.Serializable(0x2ED3FA0EE459E5AC, GameType.DS)]
    public class ArtPartsSubModelResource : ModelPartResource
    {
        [RTTI.Member(13, 0x78, "General")] public Ref<SkeletonHelpers> HelperResource;
        [RTTI.Member(14, 0x80, "General")] public Ref<SkinnedModelPoseDeformerResource> SkinnedModelPoseDeformerResource;
        [RTTI.Member(15, 0x88, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(16, 0x90, "General")] public Mat44 LocalOffsetMatrix;
        [RTTI.Member(19, 0xD0, "General")] public Ref<ArtPartsSubModelExtraResource> ExtraResource;
        [RTTI.Member(18, 0xD8, "General")] public EArtPartsSubModelKind ModelKind;
        [RTTI.Member(17, 0xDC, "General")] public bool IsHideDefault;
    }

    [RTTI.Serializable(0x5D1FB9F0D8EA70F4, GameType.DS)]
    public class ArtPartsSubModelWithChildrenResource : ResourceWithNameHash
    {
        [RTTI.Member(6, 0x28, "General")] public Array<Ref<ArtPartsSubModelWithChildrenResource>> Children;
        [RTTI.Member(7, 0x38, "General")] public Ref<ArtPartsSubModelResource> ArtPartsSubModelPartResource;
        [RTTI.Member(5, 0x40, "General")] public bool IsHideDefault;
    }

    [RTTI.Serializable(0x46FEED3400D68DBC, GameType.DS)]
    public class ArtPartsVariation : EntityComponent
    {
    }

    [RTTI.Serializable(0xEC5570F67AE57973, GameType.DS)]
    public class ArtPartsVariationEffectProxyResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "DS")] public uint32 ProxyNameHash;
        [RTTI.Member(4, 0x24, "DS")] public uint32 TargetNameHash;
    }

    [RTTI.Serializable(0x8ABBEAC19EFDCB8C, GameType.DS)]
    public class ArtPartsVariationReplaceTextureSetResource : RTTIRefObject, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<TextureSet> TextureSet;
        [RTTI.Member(4, 0x28, "DS")] public String NodeName;
        [RTTI.Member(5, 0x30, "DS")] public Ref<TextureSet> OriginalTextureSet;
        [RTTI.Member(6, 0x38, "DS")] public Array<Ref<ResourceWithNameHash>> TargetModelParts;

        public void DeserializeExtraData(BinaryReader reader) => throw new NotImplementedException();
        public void SerializeExtraData(BinaryWriter writer) => throw new NotImplementedException();
    }

    [RTTI.Serializable(0xE355E47A83F8524E, GameType.DS)]
    public class ArtPartsVariationResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public Array<Ref<ArtPartsVariationReplaceTextureSetResource>> ReplaceTextureSet;
        [RTTI.Member(4, 0x30, "DS")] public Array<Ref<ArtPartsVariationShaderVariableResource>> ReplaceShaderVariable;
        [RTTI.Member(5, 0x40, "DS")] public Array<Ref<ArtPartsSubModelWithChildrenResource>> OnMesh;
        [RTTI.Member(6, 0x50, "DS")] public Array<Ref<ArtPartsSubModelWithChildrenResource>> OffMesh;
        [RTTI.Member(8, 0x60, "DS")] public Array<Ref<ArtPartsVariationEffectProxyResource>> EffectProxy;
        [RTTI.Member(7, 0x70, "DS")] public bool IgnoreMeshPathCheck;
    }

    [RTTI.Serializable(0xC02439F8B6F9B8BA, GameType.DS)]
    public class ArtPartsVariationResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE677D749F9509532, GameType.DS)]
    public class ArtPartsVariationShaderVariableResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "DS")] public String TargetVariable;
        [RTTI.Member(4, 0x28, "DS")] public float Value;
        [RTTI.Member(5, 0x30, "DS")] public Vec3 VecValue;
        [RTTI.Member(7, 0x40, "DS")] public Array<Ref<ResourceWithNameHash>> TargetModelParts;
        [RTTI.Member(6, 0x50, "DS")] public bool UseVecValue;
    }

    [RTTI.Serializable(0x1A4DA585E497E69D, GameType.DS)]
    public class ArtPartsVariationSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBAE429C283D97922, GameType.DS)]
    public class AssertReporterGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA8F21D46F9B3D3C5, GameType.DS)]
    public class AssetPath
    {
        [RTTI.Member(0, 0x0)] public String Path;
    }

    [RTTI.Serializable(0x33B41D61937E27DA, GameType.DS)]
    public class AtmosphereBoxComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x66C0ECC641A5A73, GameType.DS)]
    public class AtmosphereBoxComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AIAtmosphereBoxResource> Resource;
        [RTTI.Member(4, 0x28, "Logic")] public String HelperName;
    }

    [RTTI.Serializable(0xEA68C3570E16F849, GameType.DS)]
    public class AtmosphereFogSettings
    {
        [RTTI.Member(1, 0x0, "GlobalFog")] public float FogDensity;
        [RTTI.Member(2, 0x4, "GlobalFog")] public float FogStartDistance;
        [RTTI.Member(3, 0x8, "GlobalFog")] public float FogEndDistance;
        [RTTI.Member(4, 0xC, "GlobalFog")] public float FogDistanceCurvature;
        [RTTI.Member(5, 0x10, "GlobalFog")] public float FogHeight;
        [RTTI.Member(6, 0x14, "GlobalFog")] public float FogHeightFallOffRate;
        [RTTI.Member(8, 0x18, "HeightmapFog")] public float HeightMapFogDensity;
        [RTTI.Member(9, 0x1C, "HeightmapFog")] public float HeightMapFogStartDistance;
        [RTTI.Member(10, 0x20, "HeightmapFog")] public float HeightMapFogEndDistance;
        [RTTI.Member(11, 0x24, "HeightmapFog")] public float HeightMapFogDistanceCurvature;
        [RTTI.Member(12, 0x28, "HeightmapFog")] public float HeightMapFogHeightBias;
        [RTTI.Member(13, 0x2C, "HeightmapFog")] public float HeightMapFogHeightScale;
        [RTTI.Member(15, 0x30, "GeneralFogSettings")] public FRGBAColor FogColor;
        [RTTI.Member(16, 0x40, "GeneralFogSettings")] public float FogAmbientAbsorptionRate;
        [RTTI.Member(17, 0x44, "GeneralFogSettings")] public float FogAmbientMinIntensity;
        [RTTI.Member(18, 0x48, "GeneralFogSettings")] public float FogAmbientMaxIntensity;
        [RTTI.Member(19, 0x4C, "GeneralFogSettings")] public float FogHenyeyGreenstein;
        [RTTI.Member(20, 0x50, "GeneralFogSettings")] public float FogGodRayMaxIntensity;
        [RTTI.Member(21, 0x54, "GeneralFogSettings")] public float FogGodRayAttackRate;
        [RTTI.Member(22, 0x58, "GeneralFogSettings")] public float FogGodRayAbsorptionRate;
    }

    [RTTI.Serializable(0xB1D28B8F90146A66, GameType.DS)]
    public class AtmosphereFogSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public AtmosphereFogSettings Settings;
    }

    [RTTI.Serializable(0x90A95FD2A6FAF877, GameType.DS)]
    public class AtmosphereHazeSettings
    {
        [RTTI.Member(0, 0x0)] public float HazeStartDistance;
        [RTTI.Member(1, 0x4)] public float HazeEndDistance;
        [RTTI.Member(2, 0x8)] public float HazeDensityCurvature;
    }

    [RTTI.Serializable(0xCD0A7BB0A7BEBE4A, GameType.DS)]
    public class AtmosphereHazeSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public AtmosphereHazeSettings Settings;
    }

    [RTTI.Serializable(0x4CC11038D48360A4, GameType.DS)]
    public class AtmosphereRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Shaders")] public Ref<ShaderResource> AtmospherePrePassShader;
    }

    [RTTI.Serializable(0x267E6410D575EA3B, GameType.DS)]
    public class AtmosphereSkySettings
    {
        [RTTI.Member(1, 0x0, "Sky")] public FRGBAColor SkyColor;
        [RTTI.Member(2, 0x10, "Sky")] public float SkyZenithIntensity;
        [RTTI.Member(3, 0x14, "Sky")] public float SkyHorizonIntensity;
        [RTTI.Member(4, 0x18, "Sky")] public float SkyGradientPower;
        [RTTI.Member(5, 0x1C, "Sky")] public float SkyBrightness;
        [RTTI.Member(6, 0x20, "Sky")] public FRange SkyFadeOffSunAngleRange;
        [RTTI.Member(7, 0x28, "Sky")] public FRGBColor AmbientSpaceColor;
        [RTTI.Member(8, 0x34, "Sky")] public float AmbientSpaceIntensity;
        [RTTI.Member(10, 0x40, "Sunlight")] public FRGBAColor SunLightAbsorptionCoefficient;
        [RTTI.Member(11, 0x50, "Sunlight")] public float SunColorAbsorptionZenith;
        [RTTI.Member(12, 0x54, "Sunlight")] public float SunColorAbsorptionHorizon;
        [RTTI.Member(13, 0x58, "Sunlight")] public float SunColorAbsorptionGradientPower;
        [RTTI.Member(14, 0x5C, "Sunlight")] public FRange SunIntensityAngleFadeRange;
        [RTTI.Member(15, 0x64, "Sunlight")] public float SunShapeIntensity;
        [RTTI.Member(16, 0x68, "Sunlight")] public float SunShapeSize;
        [RTTI.Member(18, 0x70, "MieScattering")] public Vec3 MieScatteringPhases;
        [RTTI.Member(19, 0x80, "MieScattering")] public float MieIntensityGradientPower;
        [RTTI.Member(20, 0x84, "MieScattering")] public float MieColorAbsorptionZenith;
        [RTTI.Member(21, 0x88, "MieScattering")] public float MieColorAbsorptionHorizon;
        [RTTI.Member(22, 0x8C, "MieScattering")] public float MieColorGradientPower;
        [RTTI.Member(23, 0x90, "MieScattering")] public float MieBaseIntensity;
        [RTTI.Member(24, 0x94, "MieScattering")] public float MieLightShaftIntensity;
        [RTTI.Member(26, 0x98, "SunsetControl")] public float SunsetStartAngle;
        [RTTI.Member(27, 0x9C, "SunsetControl")] public float SunsetEndAngle;
    }

    [RTTI.Serializable(0x896047C08B536FDD, GameType.DS)]
    public class AtmosphereSkySettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public AtmosphereSkySettings Settings;
    }

    [RTTI.Serializable(0x3D5EF8B09DD77399, GameType.DS)]
    public class AttachChildEntitiesResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<AttachChildEntityDescription> ChildEntityResources;
    }

    [RTTI.Serializable(0xB579B900CCD539D8, GameType.DS)]
    public class AttachChildEntityDescription
    {
        [RTTI.Member(0, 0x0)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x8)] public String AttachName;
    }

    [RTTI.Serializable(0xD761109784059225, GameType.DS)]
    public class AttachPhysicsInstanceComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEB3210EE9EE8EB51, GameType.DS)]
    public class AttachPhysicsInstanceComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PhysicsResource> PhysicsResource;
        [RTTI.Member(4, 0x28, "Logic")] public bool NotifyNavMesh;
    }

    [RTTI.Serializable(0x633EB7594F564411, GameType.DS)]
    public class AttachPhysicsRagdollToHelperMover : AttachToHelperMover
    {
    }

    [RTTI.Serializable(0xEEB1D2097560E1C6, GameType.DS)]
    public class AttachPhysicsRagdollToHelperMoverResource : AttachToHelperMoverResource
    {
        [RTTI.Member(13, 0x90, "Logic")] public int CollisionLayer;
    }

    [RTTI.Serializable(0xD596DFEE1FB68DA9, GameType.DS)]
    public class AttachPhysicsRagdollToHelperMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCAA7BFC8887966EB, GameType.DS)]
    public class AttachToAimMatrixMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x67CBF7F827827A22, GameType.DS)]
    public class AttachToAimMatrixMoverResource : AttachToEntityMoverResource
    {
    }

    [RTTI.Serializable(0xA73474790A4A2C39, GameType.DS)]
    public class AttachToEntityByPConstraintMover : Mover
    {
    }

    [RTTI.Serializable(0x759154A663302AEA, GameType.DS)]
    public class AttachToEntityByPConstraintMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "Physics")] public Array<AttachmentPConstraint> Attachments;
        [RTTI.Member(8, 0x40, "Physics")] public Mat44 OffsetFromParent;
        [RTTI.Member(9, 0x80, "Physics")] public bool AttachToRagdoll;
        [RTTI.Member(10, 0x81, "Physics")] public bool UseParentMover;
        [RTTI.Member(11, 0x82, "Physics")] public bool UseChildMover;
    }

    [RTTI.Serializable(0x18535044EE2DC9A5, GameType.DS)]
    public class AttachToEntityMover : Mover
    {
    }

    [RTTI.Serializable(0xB803E257FDFC6190, GameType.DS)]
    public class AttachToEntityMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Mat44 LocalMatrix;
        [RTTI.Member(8, 0x70, "Logic")] public bool AlignToWorld;
        [RTTI.Member(9, 0x71, "Logic")] public bool MakeKeyframed;
    }

    [RTTI.Serializable(0xB388A0F5F39EC3C8, GameType.DS)]
    public class AttachToEntityMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3D3D0CBAF2269B13, GameType.DS)]
    public class AttachToHelperMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x7CE8A0F742553BAC, GameType.DS)]
    public class AttachToHelperMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(11, 0x80, "Logic")] public String Helper;
    }

    [RTTI.Serializable(0xE623EF65E7CEF1C7, GameType.DS)]
    public class AttachToHelperMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x545626DA601B2586, GameType.DS)]
    public class AttachToHelperPositionMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0xE6418147125A059A, GameType.DS)]
    public class AttachToHelperPositionMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(11, 0x80, "Logic")] public String Helper;
        [RTTI.Member(12, 0x88, "Logic")] public float Relaxation;
        [RTTI.Member(13, 0x8C, "Logic")] public float Dampening;
    }

    [RTTI.Serializable(0x49F962556462B2B5, GameType.DS)]
    public class AttachToHelperPositionMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9F3D333730B28D48, GameType.DS)]
    public class AttachToPartMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x495ECB7FDA60CC0C, GameType.DS)]
    public class AttachToPartMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(11, 0x80, "Logic")] public Ref<DestructibilityPart> DestructibilityPart;
    }

    [RTTI.Serializable(0xA02F8231EBCCEC42, GameType.DS)]
    public class AttachToSequenceLocatorMover : Mover
    {
    }

    [RTTI.Serializable(0x229553F397B24674, GameType.DS)]
    public class AttachToSequenceLocatorMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xBC801721DA64D547, GameType.DS)]
    public class AttachToWorldMatrixMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x7E43EDFC6960DE00, GameType.DS)]
    public class AttachToWorldMatrixMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(11, 0x80, "Logic")] public bool AlignUp;
        [RTTI.Member(12, 0x84, "Logic")] public float Relaxation;
    }

    [RTTI.Serializable(0xC513EFB6BB2754DC, GameType.DS)]
    public class AttachToWorldMatrixVerticalDampeningMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0xAA9878E0F16D65C0, GameType.DS)]
    public class AttachToWorldMatrixVerticalDampeningMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(11, 0x80, "Logic")] public float Relaxation;
        [RTTI.Member(12, 0x84, "Logic")] public float Dampening;
    }

    [RTTI.Serializable(0xAAEE6C6B3D9D2E11, GameType.DS)]
    public class AttachedAnnotationResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AnnotationResource> Annotation;
        [RTTI.Member(4, 0x28, "Logic")] public String HelperName;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<ModelPartResource> ModelPartResource;
    }

    [RTTI.Serializable(0x65D604ECCA1A3ACC, GameType.DS)]
    public class AttachedDamageParticlesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9630F6D6DA7F9434, GameType.DS)]
    public class AttachedDamageParticlesComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x9E0A54E7A38DB5E, GameType.DS)]
    public class AttachedDamageParticlesComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float LifeTime;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<DamageAreaComponentResource> DamageAreaComponentResource;
        [RTTI.Member(5, 0x30, "Logic")] public bool ShouldPreventDamageLoop;
        [RTTI.Member(7, 0x38, "Representation")] public Ref<BoneAttachedParticleSystemResource> BoneAttachedParticleSystemResource;
    }

    [RTTI.Serializable(0xCECBAD6E2B17138, GameType.DS)]
    public class AttachedLightBinding
    {
        [RTTI.Member(0, 0x0)] public String HelperNodeName;
        [RTTI.Member(1, 0x8)] public WorldTransform LocationOffset;
        [RTTI.Member(2, 0x48)] public bool UseLocationOffset;
        [RTTI.Member(3, 0x50)] public Ref<LightResource> LightResource;
        [RTTI.Member(4, 0x58)] public float FadeInTime;
        [RTTI.Member(5, 0x5C)] public float FadeOutTime;
        [RTTI.Member(6, 0x60)] public Array<String> VisibleToFactions;
    }

    [RTTI.Serializable(0x51EE651064EF74D3, GameType.DS)]
    public class AttachedLightsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x602BF66E9C863EF4, GameType.DS)]
    public class AttachedLightsComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x933F6E0480737901, GameType.DS)]
    public class AttachedLightsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Lights")] public Array<AttachedLightBinding> LightBindings;
        [RTTI.Member(4, 0x30, "Lights")] public float MaxLightFadeOutTime;
    }

    [RTTI.Serializable(0xE68E0569D99FE02F, GameType.DS)]
    public class AttachedLightsComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD35D3DE36CF830B8, GameType.DS)]
    public class AttachmentPConstraint
    {
        [RTTI.Member(0, 0x0)] public String ParentPartName;
        [RTTI.Member(1, 0x8)] public Ref<DestructibilityPart> ParentPart;
        [RTTI.Member(2, 0x10)] public Mat44 ParentLocalMatrix;
        [RTTI.Member(3, 0x50)] public String ChildPartName;
        [RTTI.Member(4, 0x58)] public Ref<DestructibilityPart> ChildPart;
        [RTTI.Member(5, 0x60)] public Mat44 ChildLocalMatrix;
        [RTTI.Member(6, 0xA0)] public Ref<PhysicsConstraintResource> PConstraint;
    }

    [RTTI.Serializable(0x66D1CE7D218E5C4C, GameType.DS)]
    public class AttackEventContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB7975E735930848D, GameType.DS)]
    public class AttackEventContextGame : AttackEventContext
    {
    }

    [RTTI.Serializable(0x76AC8DF8D82FAF96, GameType.DS)]
    public class AttackEventContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3AA134C4C8B20CDC, GameType.DS)]
    public class AttackEventInfo : RTTIObject
    {
    }

    [RTTI.Serializable(0xBAC6F5BE106EDD76, GameType.DS)]
    public class AttackEventInfoGame : RTTIObject
    {
    }

    [RTTI.Serializable(0x623336495C0127B5, GameType.DS)]
    public class AttackEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB2B0F09BEA77E79F, GameType.DS)]
    public class AttackEventLink : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x6F13E5558D650DE7, GameType.DS)]
    public class AttackEventLinkSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1111AEF650A98F32, GameType.DS)]
    public class AttackEventManager
    {
    }

    [RTTI.Serializable(0x255D322F2BF22263, GameType.DS)]
    public class AttackEventManagerGame : AttackEventManager
    {
    }

    [RTTI.Serializable(0x7BD7FE56AA1D16AC, GameType.DS)]
    public class AttackEventManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<AttackEventTag>> Tags;
    }

    [RTTI.Serializable(0x7CAF8D19895E3431, GameType.DS)]
    public class AttackEventManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC8FDB6E760F3F05C, GameType.DS)]
    public class AttackEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(10, 0x48, "Logic")] public IRange BurstSize;
    }

    [RTTI.Serializable(0xE68A19B5CBA51965, GameType.DS)]
    public class AttackEventTag : Resource
    {
    }

    [RTTI.Serializable(0xD0AED99B13DCCF64, GameType.DS)]
    public class AttackEventTagSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE37861BD2E05F810, GameType.DS)]
    public class AttackerToVictimDamageModifier : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<AIFaction>> AttackerFactions;
        [RTTI.Member(3, 0x30)] public bool AttackerIsPlayer;
        [RTTI.Member(4, 0x34)] public EVictimFactionType VictimFactionType;
        [RTTI.Member(5, 0x38)] public Array<Ref<AIFaction>> SpecificVictimFactions;
        [RTTI.Member(6, 0x48)] public bool VictimIsPlayer;
        [RTTI.Member(7, 0x4C)] public ESelfDamage SelfDamage;
        [RTTI.Member(10, 0x50)] public float DamageModifier;
        [RTTI.Member(11, 0x58)] public Ref<CurveResource> DamageModifierCurve;
        [RTTI.Member(12, 0x60)] public float SeverityModifier;
        [RTTI.Member(13, 0x68)] public Ref<CurveResource> SeverityModifierCurve;
        [RTTI.Member(8, 0x70)] public Array<UUIDRef<EntityResource>> WeaponResources;
        [RTTI.Member(9, 0x80)] public Array<UUIDRef<EntityResource>> VictimResources;
    }

    [RTTI.Serializable(0xDB1FE0B41A859164, GameType.DS)]
    public class AttributeAnimatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAF6296C1FCF01897, GameType.DS)]
    public class AttributeAnimatorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
    }

    [RTTI.Serializable(0xFA355ED5E6A52FF8, GameType.DS)]
    public class AttributeAnimatorInstance : ObjectAttributeAnimatorInstance
    {
    }

    [RTTI.Serializable(0x9ED02F331E302518, GameType.DS)]
    public class AttributeAnimatorResourceBase : ObjectAttributeAnimatorResource
    {
        [RTTI.Member(7, 0x30, "Animator")] public String AttributeGroup;
        [RTTI.Member(8, 0x38, "Animator")] public String AttributeName;
    }

    [RTTI.Serializable(0x7D243421E9285151, GameType.DS)]
    public class AttributeBoolAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(9, 0x40)] public Ref<AnimationTrackLinearBool> AnimationTrack;
    }

    [RTTI.Serializable(0x8AD1D6DCF740B626, GameType.DS)]
    public class AttributeFVector3AnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(10, 0x40, "Animator")] public Ref<AnimationTrackLinearFVector3> AnimationTrack;
    }

    [RTTI.Serializable(0x91DF1CB88A2B7794, GameType.DS)]
    public class AttributeFVector4AnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(10, 0x40, "Animator")] public Ref<AnimationTrackLinearFVector4> AnimationTrack;
    }

    [RTTI.Serializable(0xF90DACE9342326F, GameType.DS)]
    public class AttributeFloatAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(10, 0x40, "Animator")] public Ref<AnimationTrackLinearFloatGame> AnimationTrackGame;
    }

    [RTTI.Serializable(0xCBC9ECF912949C27, GameType.DS)]
    public class AttributeProjMatrixAnimatorInstance : AttributeAnimatorInstance
    {
    }

    [RTTI.Serializable(0x46DBEE72370A93A4, GameType.DS)]
    public class AttributeProjMatrixAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(10, 0x40, "Animator")] public Ref<AnimationTrackLinearFVector3> TranslationTrack;
        [RTTI.Member(11, 0x48, "Animator")] public Ref<AnimationTrackLinearFVector3> ScalingTrack;
        [RTTI.Member(12, 0x50, "Animator")] public Ref<AnimationTrackLinearFQuat> RotationTrack;
    }

    [RTTI.Serializable(0xBAD019C16E6E6F61, GameType.DS)]
    public class AttributeRGBAColorAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(10, 0x40, "Animator")] public Ref<AnimationTrackLinearRGBAColor> ColorTrack;
    }

    [RTTI.Serializable(0xE63C4E8E06CF5807, GameType.DS)]
    public class AttributeWorldTransformAnimatorInstance : AttributeAnimatorInstance
    {
    }

    [RTTI.Serializable(0x7B12643E6C0B244C, GameType.DS)]
    public class AttributeWorldTransformAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(10, 0x40, "Animator")] public Ref<AnimationTrackLinearFVector3> TranslationTrack;
        [RTTI.Member(11, 0x48, "Animator")] public Ref<AnimationTrackLinearFVector3> ScalingTrack;
        [RTTI.Member(12, 0x50, "Animator")] public Ref<AnimationTrackLinearFQuat> RotationTrack;
    }

    [RTTI.Serializable(0x9D50D2EE53FA0005, GameType.DS)]
    public class AudioEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xEE37B299CEB4471E, GameType.DS)]
    public class AudioEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(9, 0x38, "Logic")] public AnimatableValue AnimatableVolume;
        [RTTI.Member(10, 0x50, "Logic")] public bool AutoScaleVolumeCurve;
        [RTTI.Member(11, 0x51, "Logic")] public bool _3D;
        [RTTI.Member(12, 0x52, "Logic")] public bool SoftFadeOut;
        [RTTI.Member(13, 0x53, "Logic")] public bool SyncToSequenceWithPitch;
    }

    [RTTI.Serializable(0x3A16A24D34AE15C7, GameType.DS)]
    public class AudioPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4753ABAE5C1C5EA7, GameType.DS)]
    public class AudioPlayerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF3AAC7B4F5D7762, GameType.DS)]
    public class AudioPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Logic")] public bool CanCancelAudioLog;
        [RTTI.Member(3, 0x21, "Logic")] public bool ShouldPauseWhenWeaponSelectionActive;
        [RTTI.Member(6, 0x28, "Logic")] public Ref<SoundResource> AudioLogStartingSound;
        [RTTI.Member(7, 0x30, "Logic")] public Ref<SoundResource> AudioLogEndigSound;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<ConditionResource> CancelCondition;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<BooleanFact> IsPlayingAudioLogFact;
    }

    [RTTI.Serializable(0x4AE70AC51C701654, GameType.DS)]
    public class AudioPlayerComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x17D895BE45819E61, GameType.DS)]
    public class AuroraRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Textures")] public Ref<Texture> NoiseTexture;
        [RTTI.Member(5, 0x28, "Shaders")] public Ref<ShaderResource> RenderingShader;
        [RTTI.Member(6, 0x30, "Shaders")] public Ref<ShaderResource> BlurShader;
    }

    [RTTI.Serializable(0x10A5CC7333A234EE, GameType.DS)]
    public class AuroraSettings
    {
        [RTTI.Member(1, 0x0, "General")] public float Intensity;
    }

    [RTTI.Serializable(0x452186467CC7A27C, GameType.DS)]
    public class AuroraSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public AuroraSettings Settings;
    }

    [RTTI.Serializable(0xEB6BE256BC722402, GameType.DS)]
    public class AuroraStaticSettings : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public FRGBAColor BottomColor;
        [RTTI.Member(4, 0x30, "General")] public FRGBAColor TopColor;
        [RTTI.Member(5, 0x40, "General")] public float AnimationSpeed;
        [RTTI.Member(7, 0x44, "Shape")] public float ShapeAnimationSpeed;
        [RTTI.Member(8, 0x48, "Shape")] public float ShapeVariationFrequency;
        [RTTI.Member(10, 0x4C, "Intensity")] public float IntensityAnimationSpeed;
        [RTTI.Member(11, 0x50, "Intensity")] public float IntensityVariationFrequency;
        [RTTI.Member(13, 0x54, "Sharpness")] public float SharpnessAnimationSpeed;
        [RTTI.Member(14, 0x58, "Sharpness")] public float SharpnessVariationFrequency;
        [RTTI.Member(15, 0x5C, "Sharpness")] public float MinSharpness;
        [RTTI.Member(16, 0x60, "Sharpness")] public float MaxSharpness;
    }

    [RTTI.Serializable(0x468428A45B619B4E, GameType.DS)]
    public class AutonomousBehaviorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB9F3AD3584EF325E, GameType.DS)]
    public class AutonomousBehaviorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x91E96DE6CEFDDDDD, GameType.DS)]
    public class AwarenessMarkerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6FAE624A81060795, GameType.DS)]
    public class AwarenessMarkerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Icons")] public Ref<AwarenessStateDisplaySettingsResource> FallbackAwarenessStateDisplaySettings;
        [RTTI.Member(4, 0x28, "Icons")] public Array<Ref<WeaponMarkerMapping>> WeaponMarkerMap;
        [RTTI.Member(5, 0x38, "Icons")] public Ref<AwarenessMarkerResource> AwarenessMarker;
    }

    [RTTI.Serializable(0x7E253C8CC73F36C2, GameType.DS)]
    public class AwarenessMarkerDisplaySettings : Resource
    {
        [RTTI.Member(2, 0x20)] public float MaxDistance;
        [RTTI.Member(3, 0x28)] public Ref<UITexture> SafeIcon;
        [RTTI.Member(4, 0x30)] public Ref<UITexture> CautionIcon;
        [RTTI.Member(5, 0x38)] public Ref<UITexture> DangerIcon;
        [RTTI.Member(6, 0x40)] public Ref<UITexture> UIBlinkImage;
    }

    [RTTI.Serializable(0xBB62BA53FD03775A, GameType.DS)]
    public class AwarenessMarkerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<UIMarkerTag> MarkerType;
        [RTTI.Member(3, 0x28)] public Ref<UIMarkerTag> ClassIconBinding;
        [RTTI.Member(4, 0x30)] public Ref<UIMarkerTag> GestureIconBinding;
        [RTTI.Member(5, 0x38)] public Ref<UIMarkerTag> GestureBlinkIconBinding;
        [RTTI.Member(6, 0x40)] public Ref<UIMarkerTag> IsGestureVisibleInViewBinding;
        [RTTI.Member(7, 0x48)] public Ref<UIMarkerTag> SafeIconBinding;
        [RTTI.Member(8, 0x50)] public Ref<UIMarkerTag> CautionIconBinding;
        [RTTI.Member(9, 0x58)] public Ref<UIMarkerTag> DangerIconBinding;
        [RTTI.Member(10, 0x60)] public Ref<UIMarkerTag> CautionValueBinding;
        [RTTI.Member(11, 0x68)] public Ref<UIMarkerTag> DangerValueBinding;
        [RTTI.Member(12, 0x70)] public Ref<UIMarkerTag> CautionSpeedBinding;
        [RTTI.Member(13, 0x78)] public Ref<UIMarkerTag> DangerSpeedBinding;
        [RTTI.Member(14, 0x80)] public Ref<UIMarkerTag> BlinkIconBinding;
        [RTTI.Member(15, 0x88)] public Ref<UIMarkerTag> AttackIconBinding;
        [RTTI.Member(16, 0x90)] public Ref<UIMarkerTag> AttackBlinkIconBinding;
        [RTTI.Member(17, 0x98)] public Ref<UIMarkerTag> SearchProgressBinding;
        [RTTI.Member(18, 0xA0)] public Ref<UITexture> ClassIcon;
        [RTTI.Member(19, 0xA8)] public Ref<UIMarkerStackGroupType> StackGroupType;
    }

    [RTTI.Serializable(0x6081EAD3BAAC80EE, GameType.DS)]
    public class AwarenessStateDisplaySettingsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<AwarenessMarkerDisplaySettings> PlayerHidden;
        [RTTI.Member(3, 0x28)] public Ref<AwarenessMarkerDisplaySettings> PlayerPerceived;
    }

    [RTTI.Serializable(0x1254CF7D0E4F30CD, GameType.DS)]
    public class BackpackCustomizePaintManagementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9B4C2E031EA80846, GameType.DS)]
    public class BackpackCustomizePaintManagementComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x1749B682977D8E5D, GameType.DS)]
    public class BakedInstanceData
    {
        [RTTI.Member(1, 0x4, "General")] public int InstanceCount;
        [RTTI.Member(2, 0x8, "General")] public int ChannelCount;
        [RTTI.Member(3, 0x18, "General")] public Ref<DataBufferResource> Resource;
    }

    [RTTI.Serializable(0x6D8BDCB260D82DE2, GameType.DS)]
    public class BandwidthMeasurementService : RTTIObject
    {
    }

    [RTTI.Serializable(0x90A15CAC0FEE46BE, GameType.DS)]
    public class BasicControlledEntityAIController : Controller
    {
    }

    [RTTI.Serializable(0x482129DBB8B16C1, GameType.DS)]
    public class BatteryColorResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Vec3 DisplayColorRed;
        [RTTI.Member(4, 0x30, "General")] public Vec3 DisplayColorYellow;
        [RTTI.Member(5, 0x40, "General")] public Vec3 DisplayColorBlue;
        [RTTI.Member(6, 0x50, "General")] public Vec3 DisplayColorGreen;
        [RTTI.Member(7, 0x60, "General")] public float DisplayBlinkCycleTime;
        [RTTI.Member(8, 0x70, "General")] public Vec3 IntensityRGB;
    }

    [RTTI.Serializable(0xFF671C66CBAD10CB, GameType.DS)]
    public class BeatTime
    {
        [RTTI.Member(0, 0x0)] public int64 Value;
    }

    [RTTI.Serializable(0x811486F25B793F60, GameType.DS)]
    public class BlendTargetDeformation
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public Array<PrimitiveDeltaDeformation> Deformations;
    }

    [RTTI.Serializable(0xB09B2B3CEFF3F9B1, GameType.DS)]
    public class BlendedMeshEntry
    {
        [RTTI.Member(1, 0x0, "General")] public Ref<BlendedMeshResource> BlendedMesh;
        [RTTI.Member(2, 0x8, "General")] public float BlendDuration;
    }

    [RTTI.Serializable(0x13E64FB3C3C98B94, GameType.DS)]
    public class BlendedMeshEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5874300EBCD5A939, GameType.DS)]
    public class BlendedMeshEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(13, 0x48, "Logic")] public Ref<MultiBlendedMeshResource> MultiBlendedMeshResource;
    }

    [RTTI.Serializable(0x8510F14B23F66A89, GameType.DS)]
    public class BlendedMeshInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC0, "General")] public Ref<BlendedMeshResource> Resource;
    }

    [RTTI.Serializable(0x30DFEBFC071E8F9, GameType.DS)]
    public class BlendedMeshResource : MeshResourceBase
    {
        [RTTI.Member(8, 0x80, "General")] public Array<Ref<PrimitiveResource>> PrimitivesMeshA;
        [RTTI.Member(9, 0x90, "General")] public Array<Ref<PrimitiveResource>> PrimitivesMeshB;
        [RTTI.Member(7, 0xA0, "General")] public Array<Ref<ShadingGroup>> ShadingGroups;
        [RTTI.Member(10, 0xB8, "General")] public DrawFlags DrawFlags;
    }

    [RTTI.Serializable(0x3585C9507FE15168, GameType.DS)]
    public class BloomLookupData : Resource
    {
        [RTTI.Member(3, 0x20, "Data")] public Array<FRGBAColor> Data;
        [RTTI.Member(4, 0x30, "Data")] public int Stride;
        [RTTI.Member(5, 0x34, "Data")] public int Size;
    }

    [RTTI.Serializable(0xE03A24A02B6F452C, GameType.DS)]
    public class BloomSettingsInstance : BloomSettingsResource
    {
    }

    [RTTI.Serializable(0x8BB7C53C5FC8EA24, GameType.DS)]
    public class BloomSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public float BlackPoint;
        [RTTI.Member(4, 0x24, "Settings")] public float WhitePoint;
        [RTTI.Member(5, 0x28, "Settings")] public float Strength;
        [RTTI.Member(6, 0x2C, "Settings")] public float SuppressFireflies;
        [RTTI.Member(7, 0x30, "Settings")] public float ILRStrength;
        [RTTI.Member(8, 0x34, "Settings")] public float ILRSharpStrength;
        [RTTI.Member(9, 0x38, "Settings")] public uint ILRBlurCount;
        [RTTI.Member(10, 0x40, "Settings")] public Array<FRGBAColor> ILRElements;
        [RTTI.Member(11, 0x50, "Settings")] public Array<FRGBAColor> ILRSharpElements;
        [RTTI.Member(12, 0x70, "Settings")] public EPostProcessBlendMode BlendMode;
        [RTTI.Member(13, 0x78, "Settings")] public Ref<CurveResource> StrengthScaleOverDistance;
        [RTTI.Member(14, 0x80, "Settings")] public Ref<CurveResource> BlackPointOverDistance;
        [RTTI.Member(15, 0x88, "Settings")] public Ref<CurveResource> WhitePointOverDistance;
        [RTTI.Member(16, 0x90, "Settings")] public Ref<BloomLookupData> BloomTexture;
    }

    [RTTI.Serializable(0xB3B901D61BDA68FA, GameType.DS)]
    public class BlurSettingsInstance : BlurSettingsResource
    {
    }

    [RTTI.Serializable(0xF9E433CA8E67A5BD, GameType.DS)]
    public class BlurSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public Vec2 Position;
        [RTTI.Member(4, 0x30, "Settings")] public float InnerRadius;
        [RTTI.Member(5, 0x34, "Settings")] public float OuterRadius;
        [RTTI.Member(6, 0x38, "Settings")] public float Scale;
        [RTTI.Member(7, 0x40, "Settings")] public Vec2 MotionBlurScaleCenter;
        [RTTI.Member(8, 0x50, "Settings")] public float MotionBlurScaleInner;
        [RTTI.Member(9, 0x54, "Settings")] public float MotionBlurScaleOuter;
        [RTTI.Member(10, 0x58, "Settings")] public float MotionBlurScaleInnerRadius;
        [RTTI.Member(11, 0x5C, "Settings")] public float MotionBlurScaleOuterRadius;
        [RTTI.Member(12, 0x60, "Settings")] public float MotionBlurMaxBokeValue;
    }

    [RTTI.Serializable(0x78FE71845F65CE06, GameType.DS)]
    public class BodyPoseSwitchDisallowBoolProperty
    {
        [RTTI.Member(0, 0x0)] public Ref<BoolProperty> Link;
        [RTTI.Member(1, 0x8)] public bool TestValue;
    }

    [RTTI.Serializable(0x1F3CAE09F29C5FB4, GameType.DS)]
    public class BodyVariant : BodyVariantInterface
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(11, 0x38, "Logic")] public Ref<ModelPartResource> ModelPartResource;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<SkinnedModelPoseDeformerResource> SkinnedModelPoseDeformerResource;
        [RTTI.Member(8, 0x48, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
        [RTTI.Member(9, 0x58, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
        [RTTI.Member(10, 0x68, "Logic")] public Array<Ref<RenderEffectShaderOverridesResource>> ShaderOverrides;
        [RTTI.Member(12, 0x80, "Logic")] public Pose BindPose;
        [RTTI.Member(13, 0xF0, "Logic")] public float DisablePoseDeformerOverride;
        [RTTI.Member(14, 0xF8, "Logic")] public Array<Ref<FactValueBase>> Facts;
        [RTTI.Member(15, 0x108, "Logic")] public Array<String> AnimationSetTags;
        [RTTI.Member(7, 0x118, "Logic")] public Ref<AbilityPoseDeformerResource> AbilityPoseDeformerResource;
    }

    [RTTI.Serializable(0x153552E260A8037, GameType.DS)]
    public class BodyVariantComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCA35C4DA616FEEEC, GameType.DS)]
    public class BodyVariantComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<StreamingRef<BodyVariant>> Variants;
    }

    [RTTI.Serializable(0x6F344F38BED77ABE, GameType.DS)]
    public class BodyVariantGroup : BodyVariantInterface
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<BodyVariant>> Variants;
    }

    [RTTI.Serializable(0xED48F1C34AC26A82, GameType.DS)]
    public class BodyVariantInterface : Resource
    {
    }

    [RTTI.Serializable(0x87B69322A0EC2B99, GameType.DS)]
    public class BodyVariantInterfaceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA157B8EF7257197A, GameType.DS)]
    public class BodyVariantRuntimeComponent : EntityComponent
    {
        [RTTI.Member(5, 0x58)] public StreamingRef<BodyVariant> BodyVariant;
    }

    [RTTI.Serializable(0x9FE45682A3CFF711, GameType.DS)]
    public class BodyVariantRuntimeComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE183D9A4B24B8C6B, GameType.DS)]
    public class BodyVariantRuntimeComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC3208C4EF6297385, GameType.DS)]
    public class BodyVariantSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDE5502C9D51DC41E, GameType.DS)]
    public class BokehSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public int IrisBladeCount;
        [RTTI.Member(2, 0x4, "Settings")] public float IrisRoundness;
        [RTTI.Member(3, 0x8, "Settings")] public float IrisRotation;
        [RTTI.Member(4, 0xC, "Settings")] public float IrisFalloff;
        [RTTI.Member(5, 0x10, "Settings")] public float SphericalAberrationLevel;
        [RTTI.Member(6, 0x14, "Settings")] public float SphericalAberrationPower;
        [RTTI.Member(7, 0x18, "Settings")] public float CatEyeRadius;
        [RTTI.Member(8, 0x1C, "Settings")] public float CatEyeStrength;
        [RTTI.Member(9, 0x20, "Settings")] public float CatEyeFalloff;
        [RTTI.Member(10, 0x24, "Settings")] public float NoiseFrequency;
        [RTTI.Member(11, 0x28, "Settings")] public float NoiseAmplitude;
        [RTTI.Member(12, 0x2C, "Settings")] public float ChromaticAberration;
    }

    [RTTI.Serializable(0x8612307C322A69BE, GameType.DS)]
    public class BokehSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public BokehSettings BokehSettings;
        [RTTI.Member(4, 0x50, "Settings")] public Ref<Texture> Texture;
    }

    [RTTI.Serializable(0x26D148426DDBEA76, GameType.DS)]
    public class BoneAttachedParticleSystem : CoreObject
    {
    }

    [RTTI.Serializable(0xFA6177EF13E56D6F, GameType.DS)]
    public class BoneAttachedParticleSystemLink
    {
        [RTTI.Member(0, 0x0)] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(1, 0x8)] public Ref<LightResource> LightResource;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> LightIntensityCurve;
        [RTTI.Member(3, 0x18)] public Ref<SoundResource> SoundResource;
        [RTTI.Member(4, 0x20)] public String BoneName;
        [RTTI.Member(5, 0x28)] public bool AlignToWorld;
        [RTTI.Member(6, 0x30)] public Mat44 OffsetMatrix;
    }

    [RTTI.Serializable(0x796AD218279D6131, GameType.DS)]
    public class BoneAttachedParticleSystemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<BoneAttachedParticleSystemLink> AttachedParticleSystems;
        [RTTI.Member(4, 0x30, "Logic")] public float LifeTime;
    }

    [RTTI.Serializable(0x687B14190B846824, GameType.DS)]
    public class BoneLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xF322608964D40101, GameType.DS)]
    public class BoneLocatorResource : LocatorResource
    {
        [RTTI.Member(9, 0x30, "Logic")] public String BoneName;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(10, 0x40, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0x557144C701431B98, GameType.DS)]
    public class BoneRemapEntry
    {
        [RTTI.Member(0, 0x0)] public int Name;
        [RTTI.Member(1, 0x4)] public bool ParentRemapped;
    }

    [RTTI.Serializable(0x8B47161CBC5A968A, GameType.DS)]
    public class BoolFactConditionResource : FactConditionResource
    {
        [RTTI.Member(4, 0x30, "Logic")] public Ref<BooleanFact> BooleanFact;
        [RTTI.Member(3, 0x38, "Logic")] public EFactConditionContextMode ContextMode;
        [RTTI.Member(5, 0x39, "Logic")] public bool IsInverted;
    }

    [RTTI.Serializable(0x428E8746AB42E923, GameType.DS)]
    public class BoolProperty : BoolPropertyBase
    {
        [RTTI.Member(11, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x60023A13CA969BD3, GameType.DS)]
    public class BoolPropertyBase : BooleanFact
    {
    }

    [RTTI.Serializable(0xC7556A3AD2A76436, GameType.DS)]
    public class BoolPropertyToSoundParameterMapping
    {
        [RTTI.Member(0, 0x0)] public Ref<BoolProperty> Property;
        [RTTI.Member(1, 0x8)] public String SoundParameterName;
    }

    [RTTI.Serializable(0xE8C3FC7E10C11421, GameType.DS)]
    public class BoolPropertyValue : PropertyValue
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<BoolPropertyBase> Property;
        [RTTI.Member(4, 0x28, "General")] public bool Value;
    }

    [RTTI.Serializable(0xF3BA66D1703DDED2, GameType.DS)]
    public class BooleanFact : Fact
    {
        [RTTI.Member(9, 0x30, "Logic")] public bool DefaultValue;
    }

    [RTTI.Serializable(0x9FDFC050378E2417, GameType.DS)]
    public class BooleanFactSelectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xBB0814535E6EC00D, GameType.DS)]
    public class BooleanFactSelectEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x38)] public Ref<BooleanFact> Fact;
        [RTTI.Member(8, 0x40)] public ESequenceFactContextType FactContextType;
        [RTTI.Member(9, 0x48)] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(10, 0x50)] public Array<Ref<EventResource>> TrueEvents;
        [RTTI.Member(11, 0x60)] public Array<Ref<EventResource>> FalseEvents;
    }

    [RTTI.Serializable(0xA7677488CE0C7F1F, GameType.DS)]
    public class BooleanFactToSoundParameterMapping
    {
        [RTTI.Member(0, 0x0)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x8)] public String SoundParameterName;
    }

    [RTTI.Serializable(0x733971EAD0ABA917, GameType.DS)]
    public class BooleanFactValue : FactValueBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<BooleanFact> TypedFact;
        [RTTI.Member(4, 0x28, "Logic")] public bool TypedValue;
    }

    [RTTI.Serializable(0x9ED7363A04C8A171, GameType.DS)]
    public class BoostMeshStreamingForArtPartsDataComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x524089FACA1FF521, GameType.DS)]
    public class BoostMeshStreamingForArtPartsDataResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public float MinLodDistance;
        [RTTI.Member(5, 0x24, "General")] public int MipLevel;
        [RTTI.Member(4, 0x28, "General")] public ERenderDataStreamingObjectBoostMode BoostMode;
    }

    [RTTI.Serializable(0xCAA68E34D538CE13, GameType.DS)]
    public class BoostStreamingForMultiArtPartsDataComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x86FCC1D690E763DC, GameType.DS)]
    public class BoostStreamingForMultiArtPartsDataResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<ArtPartsDataResource>> BoostArtPartsList;
        [RTTI.Member(4, 0x30, "General")] public float MinLodDistance;
        [RTTI.Member(6, 0x34, "General")] public int MipLevel;
        [RTTI.Member(5, 0x38, "General")] public ERenderDataStreamingObjectBoostMode BoostMode;
    }

    [RTTI.Serializable(0xFAA51C7534CC91BB, GameType.DS)]
    public class BotNames : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<WString> PlayerGroup1Names;
        [RTTI.Member(4, 0x30, "Logic")] public Array<WString> PlayerGroup2Names;
    }

    [RTTI.Serializable(0x9A59ED5CFB766EC3, GameType.DS)]
    public class BoundingBox2
    {
        [RTTI.Member(0, 0x0)] public Vec2 Min;
        [RTTI.Member(1, 0x10)] public Vec2 Max;
    }

    [RTTI.Serializable(0x6CAF73469B380E32, GameType.DS)]
    public class BoundingBox3
    {
        [RTTI.Member(0, 0x0)] public Vec3 Min;
        [RTTI.Member(1, 0x10)] public Vec3 Max;
    }

    [RTTI.Serializable(0xC6B136E851D6E31A, GameType.DS)]
    public class BoundingBox3Pack
    {
        [RTTI.Member(0, 0x0)] public Vec3Pack Min;
        [RTTI.Member(1, 0xC)] public Vec3Pack Max;
    }

    [RTTI.Serializable(0x9008BC5A8B3850E0, GameType.DS)]
    public class BoundingBoxBasedActivationPolicy : EntityActivationPolicy
    {
        [RTTI.Member(5, 0x40, "Logic")] public BoundingBox3 LocalActivationBox;
        [RTTI.Member(6, 0x60, "Logic")] public BoundingBox3 LocalDeactivationBox;
    }

    [RTTI.Serializable(0x84BC04212E08C3D7, GameType.DS)]
    public class BoundingBoxVolumetricAnnotation : VolumetricAnnotation
    {
        [RTTI.Member(6, 0x40, "Logic")] public OrientedBox OrientedBox;
        [RTTI.Member(7, 0x90, "Logic")] public Mat44 OrientedBoxMatrix;
        [RTTI.Member(8, 0xD0, "Logic")] public Vec3 OrientedBoxMin;
        [RTTI.Member(9, 0xE0, "Logic")] public Vec3 OrientedBoxMax;
    }

    [RTTI.Serializable(0xD9995612305B47C0, GameType.DS)]
    public class BoundingSphere
    {
        [RTTI.Member(0, 0x0)] public Vec3 Center;
        [RTTI.Member(1, 0xC)] public float Radius;
    }

    [RTTI.Serializable(0xC2D42AD772F536EC, GameType.DS)]
    public class BoundingSphereVolumetricAnnotation : VolumetricAnnotation
    {
        [RTTI.Member(6, 0x40, "Logic")] public BoundingSphere BoundingSphere;
    }

    [RTTI.Serializable(0x649B597805259C3A, GameType.DS)]
    public class BuddyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x46B00705BF2E3632, GameType.DS)]
    public class BuddyComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float TeleportThreshold;
        [RTTI.Member(4, 0x24, "Logic")] public FRange TeleportPositionRange;
    }

    [RTTI.Serializable(0xD393A7E504A412CB, GameType.DS)]
    public class BuddyComponentResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x51373756B189B5A, GameType.DS)]
    public class BuddyComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x286298CF1A7A0ED6, GameType.DS)]
    public class BuddyManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2DA3C028C6C939C3, GameType.DS)]
    public class BuddySequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public Ref<BuddyComponentResource> BuddyComponentResource;
    }

    [RTTI.Serializable(0x8DA77ABC29819513, GameType.DS)]
    public class BuddySequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xAAAB49F8B4D265B4, GameType.DS)]
    public class BuddySpawnpoint : Spawnpoint
    {
    }

    [RTTI.Serializable(0x132B0A4AC5B24416, GameType.DS)]
    public class BuddySpawnpointSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x788B70C542783FCC, GameType.DS)]
    public class BulletSystem : Entity
    {
    }

    [RTTI.Serializable(0x17F2299CBD871047, GameType.DS)]
    public class BulletSystemRep : EntityRep
    {
    }

    [RTTI.Serializable(0x6FC4EA4AAA9B6B96, GameType.DS)]
    public class BulletSystemResource : EntityResource
    {
        [RTTI.Member(33, 0x100, "Representation")] public int MaxWhizzSounds;
        [RTTI.Member(34, 0x108, "Representation")] public Ref<MaterialTypeResource> BloodSpatterMaterialTypeResource;
        [RTTI.Member(35, 0x110, "Representation")] public Array<Ref<MaterialTypeResource>> FleshMaterialTypeResources;
        [RTTI.Member(37, 0x120, "PostFleshHit")] public float StartOffset;
        [RTTI.Member(38, 0x124, "PostFleshHit")] public float EndOffset;
        [RTTI.Member(31, 0x128, "Logic")] public bool IsRicochetEnabled;
    }

    [RTTI.Serializable(0x54141A139D841853, GameType.DS)]
    public class BulletTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEFEC75FBB528FF35, GameType.DS)]
    public class BulletTimeComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Duration")] public int InitialAmountOfSegments;
        [RTTI.Member(4, 0x24, "Duration")] public float DepletionTime;
        [RTTI.Member(5, 0x28, "Duration")] public float RechargeTime;
        [RTTI.Member(8, 0x30, "SlowMotion")] public Ref<SlowMotionSettingResource> SlowMotionSettings;
        [RTTI.Member(6, 0x38, "Duration")] public Array<PerkDurationMapping> UpgradeMapping;
    }

    [RTTI.Serializable(0x46D0527DA4A1A250, GameType.DS)]
    public class BulletTimeComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1CC03E5D983F9FE0, GameType.DS)]
    public class BulletTracerSettings : Resource
    {
        [RTTI.Member(12, 0x20, "Representation")] public float CirclePosition;
        [RTTI.Member(10, 0x28, "Representation")] public Ref<RenderEffectResource> LineRenderEffectsResource;
        [RTTI.Member(11, 0x30, "Representation")] public Ref<RenderEffectResource> CircleRenderEffectsResource;
        [RTTI.Member(13, 0x38, "Representation")] public Ref<SoundResource> WhizzSound;
        [RTTI.Member(3, 0x40, "Representation")] public float TracerLength;
        [RTTI.Member(4, 0x44, "Representation")] public float TracerWidth;
        [RTTI.Member(5, 0x48, "Representation")] public RGBAColor TracerColor;
        [RTTI.Member(6, 0x4C, "Representation")] public int TracerInterval;
        [RTTI.Member(7, 0x50, "Representation")] public int TracerTrailInterval;
        [RTTI.Member(8, 0x54, "Representation")] public bool RandomTracerInterval;
        [RTTI.Member(9, 0x58, "Representation")] public float TracerFadeInDistance;
        [RTTI.Member(14, 0x60, "Representation")] public Ref<ParticleSystemResource> TrailParticleSystemResource;
    }

    [RTTI.Serializable(0xC34BAA9B2E53BFB6, GameType.DS)]
    public class ButtonIcon
    {
        [RTTI.Member(0, 0x0)] public EIconType Button;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> Texture;
        [RTTI.Member(2, 0x10)] public Ref<UITexture> HoldTexture;
    }

    [RTTI.Serializable(0x5E1202BF51ADF427, GameType.DS)]
    public class ButtonIconCollection : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<ButtonIcon> ButtonIcons;
    }

    [RTTI.Serializable(0x1A41237E109355AB, GameType.DS)]
    public class ButtonPressureOverride
    {
        [RTTI.Member(0, 0x0)] public EButton Button;
        [RTTI.Member(1, 0x4)] public uint8 Pressure;
    }

    [RTTI.Serializable(0xC363BE9568F1447F, GameType.DS)]
    public class BuyBackComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x923A880E08B6FE75, GameType.DS)]
    public class BuyBackComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<UUIDRef<EntityResource>> BlacklistedItems;
        [RTTI.Member(4, 0x30, "Logic")] public EInventoryItemRarity MinimalItemRarity;
        [RTTI.Member(5, 0x34, "Logic")] public int MaxItemCount;
        [RTTI.Member(6, 0x38, "Logic")] public float PriceModifier;
    }

    [RTTI.Serializable(0x8E6D6EFBB0D307B5, GameType.DS)]
    public class BuyBackItemRestoreState : RTTIRefObject
    {
        [RTTI.Member(3, 0x28, "StateSaving", true)] public Ref<InventoryItem> Item;
        [RTTI.Member(4, 0x30, "StateSaving", true)] public int TotalSellPrice;
    }

    [RTTI.Serializable(0xE3881A4D3029DA4E, GameType.DS)]
    public class CEffectsSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ImpactEffectSystemSettings> ImpactEffectSystemSettings;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> DecalCullingShader;
    }

    [RTTI.Serializable(0xCFEB5B42EED071D7, GameType.DS)]
    public class CKJPEffectsSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> DynamicPrecipitationShader;
    }

    [RTTI.Serializable(0x1797F25856490023, GameType.DS)]
    public class CNavMeshSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<NavMeshBuilderSettings>> NavMeshBuilderSettings;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<NavMeshBuilderSettings> RenderDataStreamingHintDataAreaBuilderSettings;
    }

    [RTTI.Serializable(0x370B9F32D4428F35, GameType.DS)]
    public class CPUProfileWindowGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x18B7CF506F76ED8E, GameType.DS)]
    public class CPhysicsSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<PhysicsMaterialTypeResourceMap> PhysicsMaterialTypeResourceMap;
        [RTTI.Member(3, 0x28)] public Ref<MaterialTypeResource> DefaultMaterial;
        [RTTI.Member(4, 0x30)] public Ref<MaterialConfigResourceMap> MaterialConfigResourceMap;
        [RTTI.Member(5, 0x38)] public float ForceFieldRange;
    }

    [RTTI.Serializable(0x3F4AB8DF1FE2CD20, GameType.DS)]
    public class CRenderGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCEBD0ED83D6D7D4F, GameType.DS)]
    public class CRenderSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<TextureSet> DefaultTextureSet;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> BlitLinearToPerceptualNonRECTShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> BlitPerceptualToLinearNonRECTShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> BlitComposePerceptualNonRECTShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> BlitTextureNonRECTShader;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> JitterUpscaleShader;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> IconCopyShader;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> JitterUpscaleHiPrecisionShader;
        [RTTI.Member(10, 0x60)] public Ref<Texture> LayeredIrradianceBlackTexture;
        [RTTI.Member(11, 0x68)] public Ref<Texture> LayeredIrradianceAxisTexture;
        [RTTI.Member(12, 0x70)] public Ref<ShaderResource> AmdCasShader;
        [RTTI.Member(13, 0x78)] public Ref<GlobalRenderVariableInfoSet> GlobalRenderVariableInfoSet;
    }

    [RTTI.Serializable(0x444769BF6D902A09, GameType.DS)]
    public class CSoundSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<SoundSystemSettings> SoundSystemSettings;
        [RTTI.Member(3, 0x28)] public Ref<ObjectCollection> SubmixResources;
        [RTTI.Member(4, 0x30)] public Ref<WaveResource> SineWave;
        [RTTI.Member(5, 0x38)] public Ref<WaveResource> WhiteNoiseWave;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> SoundObstructionShader;
        [RTTI.Member(7, 0x48)] public Ref<MasterBusSettings> MasterBusSettings;
        [RTTI.Member(8, 0x50)] public Ref<SoundPadSpeakerMasterParametersResource> PadMasterParameters;
    }

    [RTTI.Serializable(0xFD543DED484BFC55, GameType.DS)]
    public class CachedHelperLocationsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB7760653583A0B98, GameType.DS)]
    public class CachedHelperLocationsComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA5FEBBA88A69CBFB, GameType.DS)]
    public class Camera : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        [RTTI.Member(7, 0x68, "Input")] public bool UseMouse;
        [RTTI.Member(8, 0x69, "Input")] public bool UseJoystick;
        [RTTI.Member(9, 0x6A, "Input")] public bool UseKeyboard;
        [RTTI.Member(11, 0x6C, "Frustum")] public float NearPlane;
        [RTTI.Member(12, 0x70, "Frustum")] public float FarPlane;
        [RTTI.Member(13, 0x74, "Frustum")] public float FieldOfView;
        [RTTI.Member(14, 0x78, "Frustum")] public float ViewConeAspect;
        [RTTI.Member(15, 0x7C, "Frustum")] public bool Perspective;
        [RTTI.Member(16, 0x80, "Frustum")] public float Zoom;
        [RTTI.Member(17, 0x84, "Frustum")] public bool FOVAspectAdjust;
    }

    [RTTI.Serializable(0x724724DD68B8A108, GameType.DS)]
    public class CameraActorInstance : EntityActorInstanceBase
    {
    }

    [RTTI.Serializable(0xF405947D1ED2FD56, GameType.DS)]
    public class CameraActorResource : ActorResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(13, 0x48, "Logic")] public Ref<CameraEntityResource> CameraEntityResource;
        [RTTI.Member(14, 0x50, "Logic")] public int InTransitionFrames;
        [RTTI.Member(15, 0x54, "Logic")] public ECameraTransitionFunction InTransitionFunction;
        [RTTI.Member(16, 0x58, "Logic")] public int OutTransitionFrames;
        [RTTI.Member(17, 0x5C, "Logic")] public ECameraTransitionFunction OutTransitionFunction;
        [RTTI.Member(18, 0x60, "Logic")] public float TransitionDistanceThreshold;
        [RTTI.Member(19, 0x64, "Logic")] public float TransitionAngleThreshold;
        [RTTI.Member(20, 0x68, "Logic")] public Ref<CurveResource> TransitionAngleToFrames;
        [RTTI.Member(21, 0x70, "Logic")] public OptionalAnimatableValue AnimatableFOV;
        [RTTI.Member(23, 0x90, "DepthOfField")] public Ref<LocatorResource> FocalPlaneLocatorResource;
        [RTTI.Member(26, 0x98, "DepthOfField")] public Ref<CurveResource> NearFuzzy;
        [RTTI.Member(27, 0xA0, "DepthOfField")] public Ref<CurveResource> NearSharp;
        [RTTI.Member(28, 0xA8, "DepthOfField")] public Ref<CurveResource> FarFuzzy;
        [RTTI.Member(29, 0xB0, "DepthOfField")] public Ref<CurveResource> FarSharp;
        [RTTI.Member(30, 0xB8, "DepthOfField")] public Ref<CurveResource> MaxFuzzyNear;
        [RTTI.Member(31, 0xC0, "DepthOfField")] public Ref<CurveResource> MaxFuzzyFar;
        [RTTI.Member(24, 0xC8, "DepthOfField")] public OptionalAnimatableValue Aperture;
        [RTTI.Member(25, 0xE8, "DepthOfField")] public AnimatableValue FocusDistance;
        [RTTI.Member(33, 0x100, "Game")] public bool UseGameCamera;
        [RTTI.Member(34, 0x101, "Game")] public bool UseViewMagnets;
        [RTTI.Member(36, 0x102, "Game")] public bool DontMoveObserver;
        [RTTI.Member(35, 0x104, "Game")] public float WaitToUnbind;
    }

    [RTTI.Serializable(0xDD6A6F250E40F826, GameType.DS)]
    public class CameraActorSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0x626AC2CCA8424974, GameType.DS)]
    public class CameraBlend : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xA110F555903A8C5E, GameType.DS)]
    public class CameraBlendBySettings : CameraBlend
    {
    }

    [RTTI.Serializable(0x379376435773B87, GameType.DS)]
    public class CameraBlendBySettingsRep : CameraBlendRep
    {
    }

    [RTTI.Serializable(0x6C340EDC140457EC, GameType.DS)]
    public class CameraBlendDirectControl : CameraBlend
    {
    }

    [RTTI.Serializable(0xC634E1CBF97A7C0D, GameType.DS)]
    public class CameraBlendDirectControlRep : CameraBlendRep
    {
    }

    [RTTI.Serializable(0x105923F8F8D9911E, GameType.DS)]
    public class CameraBlendRep : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x42DAC6F01B4FE62F, GameType.DS)]
    public class CameraBlendSettings : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB39708E2967E9C0, GameType.DS)]
    public class CameraBlendSettingsCurve : CameraBlendSettings
    {
    }

    [RTTI.Serializable(0x836BAD6677BE087, GameType.DS)]
    public class CameraBlendSettingsDuration : CameraBlendSettings
    {
    }

    [RTTI.Serializable(0x25B002BC25C9E204, GameType.DS)]
    public class CameraCollisionRail
    {
    }

    [RTTI.Serializable(0x2A94E8BF54DCEEA2, GameType.DS)]
    public class CameraCollisionResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraCollisionResource> BaseResource;
        [RTTI.Member(5, 0x28, "View")] public CameraParmFloat ViewPitchMin;
        [RTTI.Member(6, 0x40, "View")] public CameraParmFloat ViewPitchMax;
        [RTTI.Member(7, 0x58, "View")] public CameraParmFloat ViewRangeScalerMax;
        [RTTI.Member(8, 0x70, "View")] public Ref<CurveResource> ViewHeadingToRangeMax;
        [RTTI.Member(9, 0x78, "View")] public Ref<CurveResource> ViewPitchToRangeMax;
        [RTTI.Member(11, 0x80, "Collision")] public CameraParmCollisionLayer ViewObstructionLayer;
        [RTTI.Member(12, 0x98, "Collision")] public CameraParmCollisionLayer ViewCollisionLayer;
        [RTTI.Member(14, 0xB0, "Rotation")] public Ref<CurveResource> RotationSpringHeading;
        [RTTI.Member(16, 0xB8, "FocusProbe")] public CameraParmFloat FocusProbeRadius;
        [RTTI.Member(17, 0xD0, "FocusProbe")] public Ref<CurveResource> FocusProbeSpring;
        [RTTI.Member(18, 0xD8, "FocusProbe")] public Ref<CurveResource> FocusProbeOffsetToRangeScaler;
        [RTTI.Member(19, 0xE0, "FocusProbe")] public CameraParmBool FocusProbeAllowedBelowBounds;
        [RTTI.Member(20, 0xF8, "FocusProbe")] public CameraParmBool FocusProbeIgnoreWaterSurface;
        [RTTI.Member(22, 0x110, "ViewProbe")] public CameraParmFloat ViewProbeWidth;
        [RTTI.Member(24, 0x128, "RangeProbes")] public CameraParmFloat RangeProbeRadius;
        [RTTI.Member(25, 0x140, "RangeProbes")] public CameraParmInt RangeProbeHeadingSegments;
        [RTTI.Member(26, 0x158, "RangeProbes")] public CameraParmInt RangeProbePitchSegments;
        [RTTI.Member(27, 0x170, "RangeProbes")] public Ref<CurveResource> RangeProbeSpringCollision;
        [RTTI.Member(29, 0x178, "SurfaceProbe")] public Ref<CurveResource> SurfaceProbeSpring;
        [RTTI.Member(31, 0x180, "AutoZoom")] public CameraParmFloat AutoZoomRadius;
        [RTTI.Member(32, 0x1A0, "AutoZoom")] public CameraParmVec3 AutoZoomOffset;
        [RTTI.Member(33, 0x1C0, "AutoZoom")] public Ref<CurveResource> AutoZoomRangeToScaler;
        [RTTI.Member(34, 0x1C8, "AutoZoom")] public CameraParmFactions AutoZoomIncludeFactions;
        [RTTI.Member(35, 0x1E8, "AutoZoom")] public CameraParmFactions AutoZoomIgnoreFactions;
    }

    [RTTI.Serializable(0x53CEE6A95E7FBA0A, GameType.DS)]
    public class CameraComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x40AFD52AC5207AF8, GameType.DS)]
    public class CameraComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CameraEntityResource> CameraEntityResource;
    }

    [RTTI.Serializable(0xE9A9334F7902F593, GameType.DS)]
    public class CameraDoFProperties : CameraPropertiesBase
    {
        [RTTI.Member(3, 0x20, "DepthOfField")] public float NearFuzzy;
        [RTTI.Member(4, 0x24, "DepthOfField")] public float NearSharp;
        [RTTI.Member(5, 0x28, "DepthOfField")] public float FarFuzzy;
        [RTTI.Member(6, 0x2C, "DepthOfField")] public float FarSharp;
        [RTTI.Member(7, 0x30, "DepthOfField")] public float MaxFuzzyNear;
        [RTTI.Member(8, 0x34, "DepthOfField")] public float MaxFuzzyFar;
        [RTTI.Member(9, 0x38, "DepthOfField")] public float LayerOcclusion;
    }

    [RTTI.Serializable(0x8742DD9A1ACC743, GameType.DS)]
    public class CameraEntity : Entity
    {
        [RTTI.Member(16, 0x3C4, "Representation")] public float FOV;
        [RTTI.Member(21, 0x3F0, "DepthOfField")] public float NearFuzzy;
        [RTTI.Member(22, 0x3F4, "DepthOfField")] public float NearSharp;
        [RTTI.Member(23, 0x3F8, "DepthOfField")] public float FarFuzzy;
        [RTTI.Member(24, 0x3FC, "DepthOfField")] public float FarSharp;
        [RTTI.Member(25, 0x400, "DepthOfField")] public float MaxFuzzyNear;
        [RTTI.Member(26, 0x404, "DepthOfField")] public float MaxFuzzyFar;
        [RTTI.Member(17, 0x43C, "Representation")] public float NearPlane;
        [RTTI.Member(18, 0x440, "Representation")] public float FarPlane;
        [RTTI.Member(19, 0x444, "Representation")] public float StereoDepth;
    }

    [RTTI.Serializable(0x30A7FDF42C4CF147, GameType.DS)]
    public class CameraEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x9857A84F5A564183, GameType.DS)]
    public class CameraEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        [RTTI.Member(34, 0x128, "Logic")] public float CameraShakeMultiplier;
        [RTTI.Member(38, 0x12C, "Representation")] public float FirstPersonNearPlane;
        [RTTI.Member(39, 0x130, "Representation")] public bool ShowFirstPersonModel;
        [RTTI.Member(40, 0x134, "Representation")] public float NearPlane;
        [RTTI.Member(41, 0x138, "Representation")] public float FarPlane;
        [RTTI.Member(42, 0x13C, "Representation")] public float StereoDepth;
        [RTTI.Member(43, 0x140, "Representation")] public EAAMode AAMode;
        [RTTI.Member(53, 0x144, "Lighting")] public float FOV;
        [RTTI.Member(33, 0x168, "Logic")] public float Zoom;
        [RTTI.Member(36, 0x16C, "Representation")] public float HorizontalFOV;
        [RTTI.Member(37, 0x170, "Representation")] public float HorizontalFirstPersonFOV;
        [RTTI.Member(45, 0x198, "DepthOfField")] public float NearFuzzy;
        [RTTI.Member(46, 0x19C, "DepthOfField")] public float NearSharp;
        [RTTI.Member(48, 0x1A0, "DepthOfField")] public float FarFuzzy;
        [RTTI.Member(47, 0x1A4, "DepthOfField")] public float FarSharp;
        [RTTI.Member(49, 0x1A8, "DepthOfField")] public float MaxFuzzyNear;
        [RTTI.Member(50, 0x1AC, "DepthOfField")] public float MaxFuzzyFar;
        [RTTI.Member(51, 0x1B0, "DepthOfField")] public float LayerOcclusion;
    }

    [RTTI.Serializable(0xF6C8062B95C76F2E, GameType.DS)]
    public class CameraFOVResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraFOVResource> Base;
        [RTTI.Member(5, 0x28, "Logic")] public CameraParmFloat FOV;
        [RTTI.Member(6, 0x40, "Logic")] public CameraParmResource Spring;
    }

    [RTTI.Serializable(0x5D4C24A0DD67F464, GameType.DS)]
    public class CameraFollowResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraFollowResource> Base;
        [RTTI.Member(5, 0x28, "Logic")] public CameraParmBool BreakOnInput;
        [RTTI.Member(6, 0x40, "Logic")] public CameraParmFloat Delay;
        [RTTI.Member(7, 0x58, "Logic")] public CameraParmFloat Distance;
        [RTTI.Member(8, 0x70, "Logic")] public CameraParmFloat Duration;
        [RTTI.Member(9, 0x88, "Logic")] public CameraParmBool UseTargetRotation;
        [RTTI.Member(10, 0xA0, "Logic")] public CameraParmFloat HeadingBuffer;
        [RTTI.Member(11, 0xB8, "Logic")] public CameraParmFollowMode HeadingFollowMode;
        [RTTI.Member(12, 0xD0, "Logic")] public CameraParmResource HeadingSpring;
        [RTTI.Member(13, 0xE8, "Logic")] public CameraParmResource HeadingScaler;
        [RTTI.Member(14, 0x100, "Logic")] public CameraParmFloat HeadingAccel;
        [RTTI.Member(15, 0x118, "Logic")] public CameraParmFollowMode PitchFollowMode;
        [RTTI.Member(16, 0x130, "Logic")] public CameraParmResource PitchSpring;
        [RTTI.Member(17, 0x148, "Logic")] public CameraParmResource PitchScaler;
        [RTTI.Member(18, 0x160, "Logic")] public CameraParmFloat PitchAccel;
    }

    [RTTI.Serializable(0xD47267A6FAFB1D39, GameType.DS)]
    public class CameraGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x94620C55C42E6F4C, GameType.DS)]
    public class CameraHelpers
    {
    }

    [RTTI.Serializable(0x8B60CE75DA39CA7F, GameType.DS)]
    public class CameraMagnet : CoreObject
    {
    }

    [RTTI.Serializable(0x64AD05CDCFF2CE40, GameType.DS)]
    public class CameraMagnetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF7ED54448325E718, GameType.DS)]
    public class CameraMagnetComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Default")] public Ref<CameraMagnetTagResource> Tag;
        [RTTI.Member(4, 0x28, "Default")] public float Weight;
        [RTTI.Member(5, 0x2C, "Default")] public float Strength;
        [RTTI.Member(7, 0x30, "Position")] public String Helper;
        [RTTI.Member(8, 0x40, "Position")] public Vec3 Offset;
        [RTTI.Member(10, 0x50, "Springs")] public Ref<CurveResource> MagnetSpringX;
        [RTTI.Member(11, 0x58, "Springs")] public Ref<CurveResource> MagnetSpringY;
        [RTTI.Member(12, 0x60, "Springs")] public Ref<CurveResource> MagnetSpringZ;
        [RTTI.Member(14, 0x68, "Events")] public bool RemoveOnDie;
        [RTTI.Member(16, 0x6C, "LookAt")] public MagnetLookAtSettings Settings;
    }

    [RTTI.Serializable(0x2F2BD4F78432FCC9, GameType.DS)]
    public class CameraMagnetFilterResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraMagnetFilterResource> BaseResource;
        [RTTI.Member(6, 0x28, "Weight")] public CameraParmFloat Weight;
        [RTTI.Member(16, 0x40, "Strength")] public CameraParmFloat Strength;
        [RTTI.Member(7, 0x58, "Weight")] public Ref<CurveResource> ViewRangeToWeight;
        [RTTI.Member(8, 0x60, "Weight")] public Ref<CurveResource> ViewAngleToWeight;
        [RTTI.Member(9, 0x68, "Weight")] public Ref<CurveResource> ViewHeadingToWeight;
        [RTTI.Member(10, 0x70, "Weight")] public Ref<CurveResource> ViewPitchToWeight;
        [RTTI.Member(11, 0x78, "Weight")] public Ref<CurveResource> OriginRangeToWeight;
        [RTTI.Member(12, 0x80, "Weight")] public Ref<CurveResource> OriginAngleToWeight;
        [RTTI.Member(13, 0x88, "Weight")] public Ref<CurveResource> OriginHeadingToWeight;
        [RTTI.Member(14, 0x90, "Weight")] public Ref<CurveResource> OriginPitchToWeight;
        [RTTI.Member(17, 0x98, "Strength")] public Ref<CurveResource> ViewRangeToStrength;
        [RTTI.Member(18, 0xA0, "Strength")] public Ref<CurveResource> ViewAngleToStrength;
        [RTTI.Member(19, 0xA8, "Strength")] public Ref<CurveResource> ViewHeadingToStrength;
        [RTTI.Member(20, 0xB0, "Strength")] public Ref<CurveResource> ViewPitchToStrength;
        [RTTI.Member(21, 0xB8, "Strength")] public Ref<CurveResource> OriginRangeToStrength;
        [RTTI.Member(22, 0xC0, "Strength")] public Ref<CurveResource> OriginAngleToStrength;
        [RTTI.Member(23, 0xC8, "Strength")] public Ref<CurveResource> OriginHeadingToStrength;
        [RTTI.Member(24, 0xD0, "Strength")] public Ref<CurveResource> OriginPitchToStrength;
        [RTTI.Member(4, 0xD8, "Base")] public Ref<CameraMagnetTagResource> Tag;
    }

    [RTTI.Serializable(0x3F1604E11C842E9D, GameType.DS)]
    public class CameraMagnetManager : CoreObject
    {
    }

    [RTTI.Serializable(0x873E85A9672414F, GameType.DS)]
    public class CameraMagnetManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Tags")] public Array<Ref<CameraMagnetTagResource>> CameraMagnetTagResources;
        [RTTI.Member(5, 0x30, "Pool")] public int MagnetPoolBase;
        [RTTI.Member(6, 0x34, "Pool")] public int MagnetPoolMin;
        [RTTI.Member(7, 0x38, "Pool")] public int MagnetPoolMax;
    }

    [RTTI.Serializable(0x431616B8C41D8E66, GameType.DS)]
    public class CameraMagnetModeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraMagnetModeResource> Base;
        [RTTI.Member(5, 0x28, "Logic")] public CameraParmMagnetParms Parms;
        [RTTI.Member(7, 0x48, "LookMagnets")] public CameraParmMagnetFilters LookMagnetFilters;
        [RTTI.Member(8, 0x68, "LookMagnets")] public CameraParmResource LookSpringHeading;
        [RTTI.Member(9, 0x80, "LookMagnets")] public CameraParmResource LookSpringPitch;
        [RTTI.Member(10, 0x98, "LookMagnets")] public CameraParmResource FocusHeadingSpeedToLookScaler;
        [RTTI.Member(11, 0xB0, "LookMagnets")] public CameraParmResource FocusPitchSpeedToLookScaler;
        [RTTI.Member(12, 0xC8, "LookMagnets")] public CameraParmResource ViewHeadingSpeedToLookScaler;
        [RTTI.Member(13, 0xE0, "LookMagnets")] public CameraParmResource ViewPitchSpeedToLookScaler;
        [RTTI.Member(15, 0xF8, "FrameMagnets")] public CameraParmMagnetFilters FrameMagnetFilters;
        [RTTI.Member(16, 0x118, "FrameMagnets")] public CameraParmResource FrameSpringHeading;
        [RTTI.Member(17, 0x130, "FrameMagnets")] public CameraParmResource FrameSpringPitch;
        [RTTI.Member(18, 0x148, "FrameMagnets")] public CameraParmResource FocusHeadingSpeedToFrameScaler;
        [RTTI.Member(19, 0x160, "FrameMagnets")] public CameraParmResource FocusPitchSpeedToFrameScaler;
        [RTTI.Member(20, 0x178, "FrameMagnets")] public CameraParmResource ViewHeadingSpeedToFrameScaler;
        [RTTI.Member(21, 0x190, "FrameMagnets")] public CameraParmResource ViewPitchSpeedToFrameScaler;
        [RTTI.Member(23, 0x1A8, "Magnets")] public CameraParmResource MagnetResetSpringHeading;
        [RTTI.Member(24, 0x1C0, "Magnets")] public CameraParmResource MagnetResetSpringPitch;
        [RTTI.Member(25, 0x1D8, "Magnets")] public CameraParmResource FocusHeadingSpeedToMagnetResetScaler;
        [RTTI.Member(26, 0x1F0, "Magnets")] public CameraParmResource FocusPitchSpeedToMagnetResetScaler;
        [RTTI.Member(27, 0x208, "Magnets")] public CameraParmResource ViewHeadingSpeedToMagnetResetScaler;
        [RTTI.Member(28, 0x220, "Magnets")] public CameraParmResource ViewPitchSpeedToMagnetResetScaler;
        [RTTI.Member(29, 0x238, "Magnets")] public CameraParmResource ViewHeadingToMagnetHeadingMin;
        [RTTI.Member(30, 0x250, "Magnets")] public CameraParmResource ViewHeadingToMagnetHeadingMax;
        [RTTI.Member(31, 0x268, "Magnets")] public CameraParmResource ViewPitchToMagnetPitchMin;
        [RTTI.Member(32, 0x280, "Magnets")] public CameraParmResource ViewPitchToMagnetPitchMax;
        [RTTI.Member(34, 0x298, "HardAimMagnets")] public CameraParmMagnetFilters HardAimMagnetFilters;
        [RTTI.Member(35, 0x2B8, "HardAimMagnets")] public CameraParmResource HardAimSpringHeading;
        [RTTI.Member(36, 0x2D0, "HardAimMagnets")] public CameraParmResource HardAimSpringPitch;
        [RTTI.Member(37, 0x2E8, "HardAimMagnets")] public CameraParmResource FocusHeadingSpeedToHardAimScaler;
        [RTTI.Member(38, 0x300, "HardAimMagnets")] public CameraParmResource FocusPitchSpeedToHardAimScaler;
        [RTTI.Member(39, 0x318, "HardAimMagnets")] public CameraParmResource ViewHeadingSpeedToHardAimScaler;
        [RTTI.Member(40, 0x330, "HardAimMagnets")] public CameraParmResource ViewPitchSpeedToHardAimScaler;
    }

    [RTTI.Serializable(0xC6E7324355ED3EFF, GameType.DS)]
    public class CameraMagnetParmResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraMagnetParmResource> Base;
        [RTTI.Member(5, 0x28, "Logic")] public CameraParmMagnetFilters Filters;
        [RTTI.Member(6, 0x48, "Logic")] public CameraParmResource HeadingSpring;
        [RTTI.Member(7, 0x60, "Logic")] public CameraParmResource PitchSpring;
        [RTTI.Member(8, 0x78, "Logic")] public CameraParmResource FocusHeadingScaler;
        [RTTI.Member(9, 0x90, "Logic")] public CameraParmResource FocusPitchScaler;
        [RTTI.Member(10, 0xA8, "Logic")] public CameraParmResource ViewHeadingScaler;
        [RTTI.Member(11, 0xC0, "Logic")] public CameraParmResource ViewPitchScaler;
    }

    [RTTI.Serializable(0xE4E3A21BFE1E143F, GameType.DS)]
    public class CameraMagnetResult
    {
    }

    [RTTI.Serializable(0x900E70E9270CBAF, GameType.DS)]
    public class CameraMagnetTagResource : Resource
    {
    }

    [RTTI.Serializable(0x53BA01411D583782, GameType.DS)]
    public class CameraManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xBF2939CCCEBDFAA3, GameType.DS)]
    public class CameraMiscProperties : CameraPropertiesBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public float CameraShakeMultiplier;
        [RTTI.Member(5, 0x24, "Representation")] public float FirstPersonNearPlane;
        [RTTI.Member(6, 0x28, "Representation")] public bool ShowFirstPersonModel;
        [RTTI.Member(7, 0x2C, "Representation")] public float NearPlane;
        [RTTI.Member(8, 0x30, "Representation")] public float FarPlane;
        [RTTI.Member(9, 0x34, "Representation")] public float StereoDepth;
        [RTTI.Member(10, 0x38, "Representation")] public EAAMode AAMode;
        [RTTI.Member(12, 0x3C, "Lighting")] public float LightingFOV;
    }

    [RTTI.Serializable(0xDC0E85F38F12CA6B, GameType.DS)]
    public class CameraModeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraModeResource> BaseResource;
        [RTTI.Member(5, 0x28, "Collision")] public Ref<CameraCollisionResource> CameraCollisionResource;
        [RTTI.Member(7, 0x30, "Aiming")] public CameraParmBool IsAiming;
        [RTTI.Member(9, 0x48, "Attachment")] public CameraParmFloat BaseSmoothing;
        [RTTI.Member(10, 0x60, "Attachment")] public CameraParmBool RotateWithBase;
        [RTTI.Member(12, 0x78, "EntityLookAt")] public CameraParmMagnetFilters EntityLookAtMagnetFilters;
        [RTTI.Member(14, 0xA0, "Origin")] public CameraParmVec3 OriginPosOffset;
        [RTTI.Member(15, 0xC0, "Origin")] public CameraParmString OriginHelperName;
        [RTTI.Member(16, 0xD8, "Origin")] public CameraParmBool OriginHelperOnPlayer;
        [RTTI.Member(17, 0xF0, "Origin")] public CameraParmVec3 OriginHelperPosAxes;
        [RTTI.Member(18, 0x110, "Origin")] public CameraParmVec3 OriginHelperRotAxes;
        [RTTI.Member(19, 0x130, "Origin")] public CameraParmBool KeepOriginAboveWater;
        [RTTI.Member(20, 0x148, "Origin")] public CameraParmBool OrientOriginToDestination;
        [RTTI.Member(22, 0x160, "Default")] public CameraParmFloat DefaultFocusHeight;
        [RTTI.Member(23, 0x178, "Default")] public CameraParmFloat DefaultFocusRange;
        [RTTI.Member(24, 0x190, "Default")] public CameraParmFloat DefaultFocusHeading;
        [RTTI.Member(25, 0x1A8, "Default")] public CameraParmFloat DefaultViewHeading;
        [RTTI.Member(26, 0x1C0, "Default")] public CameraParmFloat DefaultViewPitch;
        [RTTI.Member(28, 0x1D8, "Focus")] public Ref<CurveResource> FocusSpringX;
        [RTTI.Member(29, 0x1E0, "Focus")] public Ref<CurveResource> FocusSpringY;
        [RTTI.Member(30, 0x1E8, "Focus")] public Ref<CurveResource> FocusSpringZ;
        [RTTI.Member(31, 0x1F0, "Focus")] public Ref<CurveResource> FocusSpringHeading;
        [RTTI.Member(32, 0x200, "Focus")] public CameraParmVec3 FocusRangeMax;
        [RTTI.Member(33, 0x220, "Focus")] public CameraParmVec3 FocusRangeMin;
        [RTTI.Member(34, 0x240, "Focus")] public Ref<CurveResource> ViewRangeAlphaToFocusHeight;
        [RTTI.Member(35, 0x248, "Focus")] public Ref<CurveResource> ViewPitchToFocusOffsetX;
        [RTTI.Member(36, 0x250, "Focus")] public Ref<CurveResource> ViewPitchToFocusOffsetZ;
        [RTTI.Member(38, 0x258, "Input")] public Ref<CurveResource> InputToOrbit;
        [RTTI.Member(39, 0x260, "Input")] public CameraParmFloat InputAccelHeadingMax;
        [RTTI.Member(40, 0x278, "Input")] public CameraParmFloat InputAccelPitchMax;
        [RTTI.Member(42, 0x290, "Selectors")] public CameraParmResource TransitionSelector;
        [RTTI.Member(43, 0x2A8, "Selectors")] public CameraParmResource FollowSelector;
        [RTTI.Member(44, 0x2C0, "Selectors")] public CameraParmResource MagnetModeSelector;
        [RTTI.Member(45, 0x2D8, "Selectors")] public CameraParmResource FOVSelector;
    }

    [RTTI.Serializable(0xC7954A6E6DACB344, GameType.DS)]
    public class CameraModeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2BED6A9A621CA803, GameType.DS)]
    public class CameraModeScalers : CameraScalers
    {
        [RTTI.Member(5, 0x20)] public Array<Ref<CameraModeResource>> CameraModeResources;
    }

    [RTTI.Serializable(0x2F7A92E793D53F07, GameType.DS)]
    public class CameraModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9213451AA097D8A3, GameType.DS)]
    public class CameraModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CameraModifierResource> CameraModifierResource;
    }

    [RTTI.Serializable(0x7D19621EEB409B95, GameType.DS)]
    public class CameraModifierResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float CameraModifierLifeTime;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<SelectResource> CameraModeSelector;
        [RTTI.Member(6, 0x30, "Scalers")] public CameraScalers CameraScalers;
        [RTTI.Member(7, 0x50, "Scalers")] public Array<CameraModeScalers> CameraModeScalers;
    }

    [RTTI.Serializable(0x9FD4142C21365BE4, GameType.DS)]
    public class CameraParm
    {
        [RTTI.Member(0, 0x8)] public bool Override;
    }

    [RTTI.Serializable(0xF589B3CA07604B74, GameType.DS)]
    public class CameraParmBool : CameraParm
    {
        [RTTI.Member(1, 0x10)] public bool Val;
    }

    [RTTI.Serializable(0x35922CC1E30FE43A, GameType.DS)]
    public class CameraParmCollisionLayer : CameraParm
    {
        [RTTI.Member(1, 0x10)] public EPhysicsCollisionLayerGame Val;
    }

    [RTTI.Serializable(0x4212FEE4CC26E46D, GameType.DS)]
    public class CameraParmCurve : CameraParm
    {
        [RTTI.Member(1, 0x10)] public Ref<CurveResource> Val;
    }

    [RTTI.Serializable(0x15499856C602EA92, GameType.DS)]
    public class CameraParmFactions : CameraParm
    {
        [RTTI.Member(1, 0x10)] public Array<Ref<AIFaction>> Val;
    }

    [RTTI.Serializable(0xF155163BFB210316, GameType.DS)]
    public class CameraParmFloat : CameraParm
    {
        [RTTI.Member(1, 0x10)] public float Val;
    }

    [RTTI.Serializable(0x270A7C44DBE84387, GameType.DS)]
    public class CameraParmFollowMode : CameraParm
    {
        [RTTI.Member(1, 0x10)] public ECameraFollowMode Val;
    }

    [RTTI.Serializable(0x369316F4B6BC9992, GameType.DS)]
    public class CameraParmInt : CameraParm
    {
        [RTTI.Member(1, 0x10)] public int Val;
    }

    [RTTI.Serializable(0x633CE6CABA64F1A5, GameType.DS)]
    public class CameraParmMagnetFilters : CameraParm
    {
        [RTTI.Member(1, 0x10)] public Array<Ref<CameraMagnetFilterResource>> Val;
    }

    [RTTI.Serializable(0x86BA6E2335673868, GameType.DS)]
    public class CameraParmMagnetParms : CameraParm
    {
        [RTTI.Member(1, 0x10)] public Array<Ref<CameraMagnetParmResource>> Val;
    }

    [RTTI.Serializable(0x2CCEA772428085F8, GameType.DS)]
    public class CameraParmResource : CameraParm
    {
        [RTTI.Member(1, 0x10)] public Ref<Resource> Val;
    }

    [RTTI.Serializable(0xC0090F8B7A2E16B8, GameType.DS)]
    public class CameraParmString : CameraParm
    {
        [RTTI.Member(1, 0x10)] public String Val;
    }

    [RTTI.Serializable(0x9BD10887357DD021, GameType.DS)]
    public class CameraParmTransition : CameraParm
    {
        [RTTI.Member(1, 0x10)] public CameraTransitionCurve Val;
    }

    [RTTI.Serializable(0xB955462C8B1B8A19, GameType.DS)]
    public class CameraParmVec3 : CameraParm
    {
        [RTTI.Member(1, 0x10)] public Vec3 Val;
    }

    [RTTI.Serializable(0xB9D0A79586EDDEA7, GameType.DS)]
    public class CameraPredictionManager : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x39C2801F9F118B29, GameType.DS)]
    public class CameraPropertiesBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD086875D80F7F6AE, GameType.DS)]
    public class CameraPropertiesSet : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB0BF0838766FE698, GameType.DS)]
    public class CameraPropertiesSetResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<CameraPropertiesBase>> Properties;
    }

    [RTTI.Serializable(0xA4EA0FF814FBA9EE, GameType.DS)]
    public class CameraScalers
    {
        [RTTI.Member(0, 0x8)] public float OriginOffsetScaler;
        [RTTI.Member(1, 0xC)] public float OriginOffsetMin;
        [RTTI.Member(2, 0x10)] public float OriginOffsetMax;
        [RTTI.Member(3, 0x14)] public float FocusRangeScaler;
        [RTTI.Member(4, 0x18)] public float ViewRangeScaler;
    }

    [RTTI.Serializable(0x7BB0EFD52E25DA5A, GameType.DS)]
    public class CameraSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public float FNumber;
        [RTTI.Member(2, 0x4, "Settings")] public float ShutterSpeed;
        [RTTI.Member(3, 0x8, "Settings")] public float ManualFocusDistance;
        [RTTI.Member(4, 0xC, "Settings")] public float FrameWidth;
    }

    [RTTI.Serializable(0x4301F856426290E7, GameType.DS)]
    public class CameraSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public CameraSettings CameraSettings;
    }

    [RTTI.Serializable(0x820673A0EE9793DE, GameType.DS)]
    public class CameraShakeEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x244E7A53588C028A, GameType.DS)]
    public class CameraShakeEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<ShakeResource> ShakeResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0x2C1757E4019487C4, GameType.DS)]
    public class CameraState : ViewFrustumInfo
    {
        [RTTI.Member(12, 0x60, "Frustum")] public Frustum BaseFrustum;
        [RTTI.Member(14, 0xD0, "Matrices")] public WorldTransform WorldToCamera;
        [RTTI.Member(15, 0x110, "Matrices")] public Mat44 CameraToProjected;
        [RTTI.Member(16, 0x150, "Matrices")] public Mat44 ProjectedToCamera;
        [RTTI.Member(17, 0x190, "Matrices")] public Mat44 WorldToProjected;
    }

    [RTTI.Serializable(0xB261D0016E2754EF, GameType.DS)]
    public class CameraSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC9616DB75E4C1031, GameType.DS)]
    public class CameraTransitionCurve
    {
        [RTTI.Member(0, 0x0)] public Ref<CurveResource> Curve;
        [RTTI.Member(1, 0x8)] public float Duration;
    }

    [RTTI.Serializable(0xE5733CE9F134778E, GameType.DS)]
    public class CameraTransitionResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraTransitionResource> Base;
        [RTTI.Member(5, 0x28, "Focus")] public CameraParmTransition FocusTransitionRange;
        [RTTI.Member(6, 0x48, "Focus")] public CameraParmTransition FocusTransitionHeight;
        [RTTI.Member(7, 0x68, "Focus")] public CameraParmTransition FocusTransitionHeading;
        [RTTI.Member(9, 0x88, "View")] public CameraParmTransition ViewTransitionRange;
        [RTTI.Member(10, 0xA8, "View")] public CameraParmTransition ViewTransitionLimits;
        [RTTI.Member(11, 0xC8, "View")] public CameraParmTransition ViewTransitionPitch;
        [RTTI.Member(12, 0xE8, "View")] public CameraParmTransition ViewTransitionRoll;
        [RTTI.Member(13, 0x108, "View")] public CameraParmTransition ViewTransitionHeading;
    }

    [RTTI.Serializable(0xDBCF5C550841164F, GameType.DS)]
    public class CameraVisibilityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5D44624A756A6CCE, GameType.DS)]
    public class CameraVisibilityComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ResourceSelectorBase> CylinderSelector;
    }

    [RTTI.Serializable(0x984B28AED57E6DD8, GameType.DS)]
    public class CameraVisibilityCylinderResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Height;
        [RTTI.Member(4, 0x24, "Logic")] public float Radius;
    }

    [RTTI.Serializable(0x2B405D5E3EFDB632, GameType.DS)]
    public class CameraZoomProperties : CameraPropertiesBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Zoom;
        [RTTI.Member(5, 0x24, "Representation")] public float FOV;
        [RTTI.Member(6, 0x28, "Representation")] public float FirstPersonFOV;
    }

    [RTTI.Serializable(0x3AD596D7D1825F33, GameType.DS)]
    public class CancelDelayedActionAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<DelayedAction> Action;
    }

    [RTTI.Serializable(0xBA8F130D56FFF3D2, GameType.DS)]
    public class Capsule
    {
        [RTTI.Member(0, 0x0)] public Vec3 From;
        [RTTI.Member(1, 0x10)] public Vec3 To;
        [RTTI.Member(2, 0x20)] public float Radius;
    }

    [RTTI.Serializable(0x8CA55D8D09F0CF71, GameType.DS)]
    public class CapsuleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x41BD5209F8C014E8, GameType.DS)]
    public class CapsuleComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<PhysicsCharacterMoverResource> PhysicsCharacterMoverResource;
        [RTTI.Member(3, 0x28)] public EPhysicsCollisionLayerGame CollisionLayer;
        [RTTI.Member(4, 0x2C)] public float MaxSlopeAngle;
    }

    [RTTI.Serializable(0x28BABC6B97AEC36A, GameType.DS)]
    public class CapsuleOcclusionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x48264936E5FAFF45, GameType.DS)]
    public class CapsuleOcclusionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB14D0A61C883C8F9, GameType.DS)]
    public class CapsuleOcclusionComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<CapsuleOcclusionLOD> LevelOfDetails;
    }

    [RTTI.Serializable(0xC7454786553CF007, GameType.DS)]
    public class CapsuleOcclusionInfo
    {
        [RTTI.Member(0, 0x0)] public String StartJointName;
        [RTTI.Member(1, 0x8)] public float StartOffset;
        [RTTI.Member(2, 0x10)] public String EndJointName;
        [RTTI.Member(3, 0x18)] public float EndOffset;
        [RTTI.Member(4, 0x1C)] public float Radius;
        [RTTI.Member(5, 0x20)] public float InfluenceRadius;
    }

    [RTTI.Serializable(0x63984EB3EA50F5C0, GameType.DS)]
    public class CapsuleOcclusionLOD
    {
        [RTTI.Member(0, 0x0)] public float MaxDistance;
        [RTTI.Member(1, 0x4)] public int Priority;
        [RTTI.Member(2, 0x8)] public Array<CapsuleOcclusionInfo> Capsules;
    }

    [RTTI.Serializable(0x547FE0A09AC6F719, GameType.DS)]
    public class CaptureTrophyScreenshotEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x68F0DC710D875409, GameType.DS)]
    public class CaptureTrophyScreenshotEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public Ref<TrophyResource> TrophyResource;
    }

    [RTTI.Serializable(0x7A6B06D362823C3B, GameType.DS)]
    public class CarryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4395912FBEF3D605, GameType.DS)]
    public class CarryComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int InventoryID;
    }

    [RTTI.Serializable(0xD7819C12C3CF42A9, GameType.DS)]
    public class CartAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x42BD899993963963, GameType.DS)]
    public class CartAnimationEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(11, 0x38, "Logic")] public Ref<LocatorResource> PositionLocator;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(10, 0x48, "Logic")] public int ClipOffset;
        [RTTI.Member(12, 0x4C, "Logic")] public ECartEventSearchType CartType;
    }

    [RTTI.Serializable(0x69F77DD6E04A20F3, GameType.DS)]
    public class ChangeInvulnerabilityEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x19360214EE25258E, GameType.DS)]
    public class ChangeInvulnerabilityEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool Invulnerable;
        [RTTI.Member(10, 0x41, "Logic")] public bool RestoreState;
    }

    [RTTI.Serializable(0x98254BFDD4A4B561, GameType.DS)]
    public class ChangeModelPartAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<ModelPartResource> OldModelPart;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<ModelPartResource> NewModelPart;
    }

    [RTTI.Serializable(0xA7D04ADD5F56C07F, GameType.DS)]
    public class ChannelAndShapeMap
    {
        [RTTI.Member(0, 0x0)] public int ChannelIndex;
        [RTTI.Member(1, 0x4)] public int ShapeIndex;
    }

    [RTTI.Serializable(0xD86EF471AF182AE8, GameType.DS)]
    public class CharacterDescriptionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD6EAC7F05B958BCB, GameType.DS)]
    public class CharacterDescriptionComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Logic")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(6, 0x30, "Logic")] public Ref<CharacterTypeClass> CharacterTypeClass;
        [RTTI.Member(7, 0x38, "Logic")] public Ref<UITexture> Icon;
        [RTTI.Member(3, 0x40, "Logic")] public int Level;
    }

    [RTTI.Serializable(0x6C7684C76BE9B300, GameType.DS)]
    public class CharacterProgressionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD3F27E61F9103411, GameType.DS)]
    public class CharacterProgressionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int InitialLevel;
        [RTTI.Member(4, 0x24, "Logic")] public int InitialPerkPoints;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<XpTable> XpTable;
        [RTTI.Member(6, 0x30, "Logic")] public Ref<PlayerNotificationResource> XpGainedNotification;
        [RTTI.Member(7, 0x48, "Logic")] public Array<Ref<PerkCategory>> PerkCategories;
        [RTTI.Member(10, 0x58, "Perks")] public Ref<TrophyResource> AllPerksAcquiredTrophy;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<BooleanFact> DenyHealthComponentsFact;
    }

    [RTTI.Serializable(0x66104FA4427F0461, GameType.DS)]
    public class CharacterProgressionComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x469A8C5DE4A4BA15, GameType.DS)]
    public class CharacterProgressionSave : RTTIRefObject
    {
        [RTTI.Member(3, 0x28, "StateSave", true)] public int Xp;
        [RTTI.Member(4, 0x2C, "StateSave", true)] public int CurrentLevel;
        [RTTI.Member(5, 0x30, "StateSave", true)] public int AvailablePerkPoints;
        [RTTI.Member(6, 0x34, "StateSave", true)] public bool PerksUnlocked;
        [RTTI.Member(7, 0x38, "StateSave", true)] public Array<GGUUID> ChosenPerks;
        [RTTI.Member(8, 0x48, "StateSave", true)] public bool MaxXpPatched;
    }

    [RTTI.Serializable(0xEF6328318834D77D, GameType.DS)]
    public class CharacterTypeClass : Resource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Ref<AwarenessStateDisplaySettingsResource> AwarenessStateDisplaySettings;
        [RTTI.Member(4, 0x28, "Representation")] public Ref<UITexture> AwarenesMarkerIcon;
        [RTTI.Member(5, 0x30, "Representation")] public Ref<UITexture> UIFocusIcon;
    }

    [RTTI.Serializable(0xB612300B07C45CDC, GameType.DS)]
    public class CharacterUpgrade : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<EntityComponentResource>> Components;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<LocalizedTextResource> DisplayDescription;
        [RTTI.Member(7, 0x48, "Logic")] public CPtr<CharacterUpgradeSet> Set;
    }

    [RTTI.Serializable(0x41EB2987DB913224, GameType.DS)]
    public class CharacterUpgradeRecipe : CraftingRecipe
    {
        [RTTI.Member(9, 0x58, "Logic")] public Ref<CharacterUpgrade> Upgrade;
    }

    [RTTI.Serializable(0xF1349709E733051C, GameType.DS)]
    public class CharacterUpgradeSet : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<CharacterUpgrade>> Upgrades;
    }

    [RTTI.Serializable(0x1091043E9B701276, GameType.DS)]
    public class ChargeAnimationReference : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float ChargeDuration;
        [RTTI.Member(4, 0x24, "Logic")] public float AnimatedChargeFraction;
    }

    [RTTI.Serializable(0x9C62A0715263328, GameType.DS)]
    public class ChargedAmmoResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float ChargeUpTime;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EntityProjectileAmmoResource> ProjectileAmmo;
        [RTTI.Member(5, 0x30, "Logic")] public float StaminaCost;
    }

    [RTTI.Serializable(0x113B054D8CF76A52, GameType.DS)]
    public class ChargedThresholdFloat
    {
        [RTTI.Member(1, 0x0, "Logic")] public float RequiredMagnitude;
        [RTTI.Member(2, 0x4, "Logic")] public float Value;
    }

    [RTTI.Serializable(0xA29B4FFA8B0D082B, GameType.DS)]
    public class ChargedThresholdInt
    {
        [RTTI.Member(1, 0x0, "Logic")] public float RequiredMagnitude;
        [RTTI.Member(2, 0x4, "Logic")] public int Value;
    }

    [RTTI.Serializable(0xFBC084591A7DA5D6, GameType.DS)]
    public class ChargedValueCurve : ChargedValueFloat
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CurveResource> CurveResource;
    }

    [RTTI.Serializable(0xAD413F8CCA3A6124, GameType.DS)]
    public class ChargedValueFloat : Resource
    {
    }

    [RTTI.Serializable(0x2C548F983D86BA13, GameType.DS)]
    public class ChargedValueInt : Resource
    {
    }

    [RTTI.Serializable(0x3CDD044827991D88, GameType.DS)]
    public class ChargedValueIntCurve : ChargedValueInt
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CurveResource> CurveResource;
    }

    [RTTI.Serializable(0x2B86E0CD9A3AC397, GameType.DS)]
    public class ChargedValueThresholdsFloat : ChargedValueFloat
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<ChargedThresholdFloat> Thresholds;
    }

    [RTTI.Serializable(0x9CA3D3DBA0D45FDA, GameType.DS)]
    public class ChargedValueThresholdsInt : ChargedValueInt
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<ChargedThresholdInt> Thresholds;
    }

    [RTTI.Serializable(0x76EABBBB47613455, GameType.DS)]
    public class ChildEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x36C619DAA734EC79, GameType.DS)]
    public class ChildEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<MoverResource> MoverResource;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Ref<FactValueBase>> Facts;
    }

    [RTTI.Serializable(0x28455E35B5D74D9, GameType.DS)]
    public class ChildEntityComponentResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEF0A73FE3E93EA1D, GameType.DS)]
    public class ChildEntityComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCF4411B38FEBBFE2, GameType.DS)]
    public class ClanMatchReportKIN : ServerClanMatchReport
    {
        [RTTI.Member(5, 0x38)] public String PlaylistID;
        [RTTI.Member(6, 0x40)] public String GameID;
        [RTTI.Member(7, 0x48)] public String MapName;
        [RTTI.Member(9, 0x50)] public String ClanTagPlayerGroup1;
        [RTTI.Member(10, 0x58)] public String ClanTagPlayerGroup2;
        [RTTI.Member(11, 0x60)] public String ClanNamePlayerGroup1;
        [RTTI.Member(12, 0x68)] public String ClanNamePlayerGroup2;
        [RTTI.Member(13, 0x70)] public EClanMatchOutcome Outcome;
        [RTTI.Member(14, 0x78)] public Array<String> PlayersClanPlayerGroup1;
        [RTTI.Member(15, 0x88)] public Array<String> PlayersClanPlayerGroup2;
        [RTTI.Member(16, 0x98)] public Array<Ref<ClanMissionReport>> PlayedMissions;
        [RTTI.Member(8, 0xA8)] public uint64 EndTime;
        [RTTI.Member(17, 0xB0)] public double PrevPlayerGroup1GLobalElo;
        [RTTI.Member(18, 0xB8)] public double NewPlayerGroup1GLobalElo;
        [RTTI.Member(19, 0xC0)] public double PrevPlayerGroup1PlaylistElo;
        [RTTI.Member(20, 0xC8)] public double NewPlayerGroup1PlaylistElo;
        [RTTI.Member(21, 0xD0)] public double PrevPlayerGroup2GLobalElo;
        [RTTI.Member(22, 0xD8)] public double NewPlayerGroup2GLobalElo;
        [RTTI.Member(23, 0xE0)] public double PrevPlayerGroup2PlaylistElo;
        [RTTI.Member(24, 0xE8)] public double NewPlayerGroup2PlaylistElo;
    }

    [RTTI.Serializable(0x8511A1D4127232C4, GameType.DS)]
    public class ClanMatchReportRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ClanTag;
        [RTTI.Member(3, 0x28)] public String OpponentTag;
        [RTTI.Member(4, 0x30)] public int PageSize;
        [RTTI.Member(5, 0x38)] public uint64 StartTime;
        [RTTI.Member(6, 0x40)] public bool SortDescending;
    }

    [RTTI.Serializable(0x55D863FA859D8C65, GameType.DS)]
    public class ClanMatchRequestKIN : MatchRequestKIN
    {
        [RTTI.Member(8, 0x68)] public String TargetClan;
    }

    [RTTI.Serializable(0x2FC5806B13535B, GameType.DS)]
    public class ClanMissionReport : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EMissionType MissionType;
        [RTTI.Member(3, 0x24)] public EClanMatchOutcome Result;
    }

    [RTTI.Serializable(0x72A41A9378151790, GameType.DS)]
    public class ClanPresence : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String OnlineID;
        [RTTI.Member(3, 0x28)] public String Presence;
        [RTTI.Member(4, 0x30)] public String PresenceData;
    }

    [RTTI.Serializable(0x772AEA852C3C74AC, GameType.DS)]
    public class ClanPresenceResult : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public bool IsPresenceSet;
        [RTTI.Member(3, 0x28)] public Array<Ref<ClanPresence>> PresenceList;
    }

    [RTTI.Serializable(0x6AAA9579D20D3A6F, GameType.DS)]
    public class ClanPresenceUpdateRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Presence;
        [RTTI.Member(3, 0x28)] public String PresenceData;
        [RTTI.Member(4, 0x30)] public bool ShouldReturnClanMemberPresence;
    }

    [RTTI.Serializable(0x3FA22BCCED0E5E61, GameType.DS)]
    public class ClanService : RTTIObject
    {
    }

    [RTTI.Serializable(0x1A0AFA7CEE41301D, GameType.DS)]
    public class ClanUpdatedMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String MemberID;
        [RTTI.Member(3, 0x28)] public String ClanTag;
    }

    [RTTI.Serializable(0xF7A8EC031B7A720F, GameType.DS)]
    public class ClapperBoardEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x60D7EBAD1130B29F, GameType.DS)]
    public class ClapperBoardEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public FRGBAColor Color;
        [RTTI.Member(9, 0x40, "Logic")] public FRGBAColor FontColor;
        [RTTI.Member(10, 0x50, "Logic")] public String Text;
    }

    [RTTI.Serializable(0x192628C3BA6DAF3E, GameType.DS)]
    public class Client2ClientMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String SenderOnlineID;
        [RTTI.Member(3, 0x28)] public Ref<MessageData> MessageData;
    }

    [RTTI.Serializable(0x5EA30DAF1570C6EE, GameType.DS)]
    public class ClientConnectMessage : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x48A3FE3E7BE4DE89, GameType.DS)]
    public class ClientDisconnectMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Reason;
    }

    [RTTI.Serializable(0x6278C3867F310F32, GameType.DS)]
    public class Climate : ClimateBase
    {
        [RTTI.Member(7, 0x30, "General")] public Array<Ref<ClimateWeatherState>> WeatherStates;
        [RTTI.Member(8, 0x40, "General")] public Ref<WorldDataType> WorldDataType;
    }

    [RTTI.Serializable(0xA3448B6BB7DE1072, GameType.DS)]
    public class ClimateBase : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<AmbienceCycle> AmbienceCycle;
        [RTTI.Member(4, 0x28, "General")] public float NightTemperature;
        [RTTI.Member(5, 0x2C, "General")] public float DayTemperature;
    }

    [RTTI.Serializable(0xF8D401E73E38F5F4, GameType.DS)]
    public class ClimateWeatherState : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<WeatherSetup> WeatherSetup;
        [RTTI.Member(4, 0x28, "General")] public FRange DurationInMinutes;
        [RTTI.Member(5, 0x30, "General")] public float TransitionTime;
        [RTTI.Member(6, 0x34, "General")] public float Probability;
        [RTTI.Member(7, 0x38, "General")] public float TimeOfDayStart;
        [RTTI.Member(8, 0x3C, "General")] public float TimeOfDayEnd;
    }

    [RTTI.Serializable(0xD9FAE793B24DB9DB, GameType.DS)]
    public class ClimbGripPlacementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB1E28643ABA26049, GameType.DS)]
    public class ClimbGripPlacementComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> ClimbGripEntity;
        [RTTI.Member(3, 0x30)] public Vec3 PlacementOffset;
        [RTTI.Member(4, 0x40)] public float PlacementPredictionTime;
        [RTTI.Member(5, 0x44)] public float CollisionCheckRadius;
        [RTTI.Member(6, 0x48)] public float CollisionCheckLength;
        [RTTI.Member(7, 0x50)] public Ref<IntegerFact> NumAvailableClimbingGripsFact;
        [RTTI.Member(8, 0x58)] public Ref<IntegerFactValue> NumTotalClimbingGripsFactValue;
        [RTTI.Member(9, 0x60)] public float ReplenishWaitDuration;
        [RTTI.Member(10, 0x68)] public Ref<FloatFact> ReplenishProgressFact;
    }

    [RTTI.Serializable(0x34D7B3C8F1EC9D56, GameType.DS)]
    public class CloudRenderSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public float Brightness;
        [RTTI.Member(2, 0x4, "Settings")] public float DirectLightBrightness;
        [RTTI.Member(3, 0x8, "Settings")] public float CirrusBrightness;
        [RTTI.Member(4, 0xC, "Settings")] public float SilverLiningSpread;
        [RTTI.Member(5, 0x10, "Settings")] public float SilverLiningIntensity;
        [RTTI.Member(6, 0x14, "Settings")] public float PrimaryScatteringPhase;
        [RTTI.Member(7, 0x18, "Settings")] public float ColorSaturation;
        [RTTI.Member(8, 0x1C, "Settings")] public float GroundAmbientScale;
        [RTTI.Member(9, 0x20, "Settings")] public float KJPBottomDarkening;
        [RTTI.Member(12, 0x24, "KJPCloud")] public float SunInfluence;
        [RTTI.Member(13, 0x28, "KJPCloud")] public float SkyInfluence;
        [RTTI.Member(11, 0x2C, "KJPCloud")] public FRGBColor Albedo;
        [RTTI.Member(14, 0x38, "KJPCloud")] public float ScatteringPhase;
        [RTTI.Member(15, 0x3C, "KJPCloud")] public float Absorption;
        [RTTI.Member(16, 0x40, "KJPCloud")] public float Correlation;
    }

    [RTTI.Serializable(0xD5010FD24E649FF, GameType.DS)]
    public class CloudRenderSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public CloudRenderSettings Settings;
    }

    [RTTI.Serializable(0x959DDB6006576E9B, GameType.DS)]
    public class CloudRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Textures")] public Ref<Texture> CirrusTexture;
        [RTTI.Member(4, 0x28, "Textures")] public Ref<Texture> Noise3dATexture;
        [RTTI.Member(5, 0x30, "Textures")] public Ref<Texture> Noise3dBTexture;
        [RTTI.Member(6, 0x38, "Textures")] public Ref<Texture> LightingLookupTexture;
        [RTTI.Member(7, 0x40, "Textures")] public Ref<Texture> CirrusMaskTexture;
        [RTTI.Member(8, 0x48, "Textures")] public Ref<Texture> MarchOffsetsTexture;
        [RTTI.Member(10, 0x50, "Shaders")] public Ref<ShaderResource> UpscaleShader;
        [RTTI.Member(11, 0x58, "Shaders")] public Ref<ShaderResource> BlurShader;
        [RTTI.Member(12, 0x60, "Shaders")] public Ref<ShaderResource> SharpenShader;
        [RTTI.Member(13, 0x68, "Shaders")] public Ref<ShaderResource> RenderingComputeShader;
        [RTTI.Member(14, 0x70, "Shaders")] public Ref<ShaderResource> VisibilityComputeShader;
        [RTTI.Member(15, 0x78, "Shaders")] public Ref<ShaderResource> PrePassShader;
        [RTTI.Member(16, 0x80, "Shaders")] public Ref<ShaderResource> PrePassInitShader;
        [RTTI.Member(17, 0x88, "Shaders")] public Ref<ShaderResource> CloudDomeBlendShader;
        [RTTI.Member(18, 0x90, "Shaders")] public Ref<ShaderResource> KJPRenderingComputeShader2;
        [RTTI.Member(19, 0x98, "Shaders")] public Ref<ShaderResource> KJPBlurShader2;
        [RTTI.Member(20, 0xA0, "Shaders")] public Ref<ShaderResource> KJPUpscaleShader2;
        [RTTI.Member(21, 0xA8, "Shaders")] public Ref<ShaderResource> KJPRenderingComputeShader;
        [RTTI.Member(22, 0xB0, "Shaders")] public Ref<ShaderResource> KJPUpscaleShader;
        [RTTI.Member(23, 0xB8, "Shaders")] public Ref<ShaderResource> KJPPassthroughShader;
        [RTTI.Member(24, 0xC0, "Shaders")] public Ref<ShaderResource> KJPPassthroughBlurShader;
        [RTTI.Member(26, 0xC8, "Prototype")] public Ref<StaticMeshResource> CloudMesh;
    }

    [RTTI.Serializable(0x2A93237BAABEADE6, GameType.DS)]
    public class Collectable : CollectableEntryBase
    {
        [RTTI.Member(12, 0x60, "Logic")] public Ref<CollectableRegion> CollectableRegion;
        [RTTI.Member(13, 0x68, "Logic")] public UUIDRef<WorldNode> LocationWorldNode;
        [RTTI.Member(14, 0x78, "Logic")] public UUIDRef<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0xDE69EBDF8E0EDB91, GameType.DS)]
    public class CollectableData : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Name;
        [RTTI.Member(3, 0x28)] public int Available;
        [RTTI.Member(4, 0x2C)] public int MaxAmount;
        [RTTI.Member(5, 0x30)] public String TimerID;
    }

    [RTTI.Serializable(0x58278647461A7F1F, GameType.DS)]
    public class CollectableDataCube : CollectableEntryBase
    {
        [RTTI.Member(12, 0x60, "Logic")] public Ref<CollectableRegion> CollectableRegion;
        [RTTI.Member(13, 0x68, "Logic")] public StreamingRef<SentenceGroupResource> AudioEntry;
        [RTTI.Member(14, 0x70, "Logic")] public UUIDRef<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0xFFC06869345A29AC, GameType.DS)]
    public class CollectableEntryBase : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<BooleanFact> IsUnlockedFact;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<LocalizedTextResource> TextEntry;
        [RTTI.Member(7, 0x40, "Logic")] public StreamingRef<UITexture> IconTexture;
        [RTTI.Member(8, 0x48, "Logic")] public StreamingRef<UITexture> PreviewIconTexture;
        [RTTI.Member(9, 0x50, "Logic")] public bool SuppressNotification;
        [RTTI.Member(10, 0x58, "Logic")] public Ref<PlayerNotificationResource> OverrideNotification;
    }

    [RTTI.Serializable(0xC15048D0CFABE70A, GameType.DS)]
    public class CollectableManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CollectableSection> Collectables;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CollectableSection> DataCubes;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<CollectableSection> Catalogue;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<GraphProgramResource> CollectableFoundGraphProgram;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<TagProperty> CollectableTag;
        [RTTI.Member(8, 0x50, "Logic")] public FRGBAColor MarkerAreaColor;
        [RTTI.Member(9, 0x60, "Logic")] public Ref<UIMarkerTag> MarkerType;
        [RTTI.Member(10, 0x68, "Logic")] public Ref<UIMarkerTag> MarkerIconBinding;
        [RTTI.Member(11, 0x70, "Logic")] public Ref<UIMarkerTag> MarkerTextBinding;
    }

    [RTTI.Serializable(0xBDFE678B98D0147E, GameType.DS)]
    public class CollectableManagerResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA8F1CFA0CEE6D08D, GameType.DS)]
    public class CollectableManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB9E35BA9FAD373FB, GameType.DS)]
    public class CollectableRegion : Resource
    {
        [RTTI.Member(5, 0x20, "Representation")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(3, 0x28, "Logic")] public Ref<IntegerFact> FoundCounterFact;
    }

    [RTTI.Serializable(0x539C7CFED489AAA0, GameType.DS)]
    public class CollectableRobot : CollectableEntryBase
    {
        [RTTI.Member(12, 0x60, "Logic")] public Ref<LootComponentResource> LootComponentResource;
        [RTTI.Member(13, 0x68, "Logic")] public Ref<UITexture> RobotPageTexture;
        [RTTI.Member(14, 0x70, "Logic")] public Ref<UITexture> RobotPageTextureHighlighted;
        [RTTI.Member(15, 0x78, "Logic")] public Ref<StatsDisplayResource> RobotStats;
        [RTTI.Member(16, 0x80, "Logic")] public Ref<PerkLevel> RobotHackingPerk;
        [RTTI.Member(17, 0x88, "Logic")] public bool IsMountable;
        [RTTI.Member(18, 0x89, "Logic")] public bool IsCorrupted;
        [RTTI.Member(20, 0x90, "RobotParts")] public Array<Ref<MenuCatalogRobotPartResource>> RobotParts;
    }

    [RTTI.Serializable(0x26C1F6B168F233A, GameType.DS)]
    public class CollectableRobotComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x78582601109695F9, GameType.DS)]
    public class CollectableRobotComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<CollectableRobot>> CollectableRobots;
    }

    [RTTI.Serializable(0xC12AE7851426667A, GameType.DS)]
    public class CollectableSection : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<CollectableTypeContainer>> CollectableTypeContainer;
        [RTTI.Member(6, 0x30, "Menu")] public Array<Ref<CollectableRegion>> CollectableRegionOrder;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<IntegerFact> FoundCounterFact;
        [RTTI.Member(7, 0x58, "Menu")] public String MenuTabCategory;
        [RTTI.Member(8, 0x60, "Menu")] public Ref<EnumFactEntry> CompareQuestToUnlockCollectablesFact;
    }

    [RTTI.Serializable(0x7B75494897EF6D12, GameType.DS)]
    public class CollectableType : Resource
    {
        [RTTI.Member(7, 0x20, "Representation")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(8, 0x28, "Representation")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(3, 0x30, "Logic")] public Ref<IntegerFact> FoundCounterFact;
        [RTTI.Member(4, 0x38, "Logic")] public Ref<ConditionResource> MapUnlockedCondition;
        [RTTI.Member(6, 0x40, "Representation")] public EMenuBadgeCategory MenuBadgeCategory;
    }

    [RTTI.Serializable(0x669E668F306FD2D1, GameType.DS)]
    public class CollectableTypeContainer : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CollectableType> CollectableType;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<PlayerNotificationResource> DiscoveredNotification;
        [RTTI.Member(5, 0x30, "Logic")] public bool IsNotificationRepeatable;
        [RTTI.Member(6, 0x34, "Logic")] public float NotificationDelay;
        [RTTI.Member(7, 0x38, "Logic")] public Ref<LocalizedTextResource> MarkerTitle;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<UITexture> MarkerIcon;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<UIMarkerFilter> MarkerMapFilter;
        [RTTI.Member(11, 0x50, "Logic")] public FSize MarkerArea;
        [RTTI.Member(9, 0x58, "Logic")] public int MarkerMapDrawOrder;
        [RTTI.Member(12, 0x60, "Logic")] public Array<Ref<CollectableEntryBase>> Collectables;
        [RTTI.Member(13, 0x70, "Logic")] public Ref<TrophyResource> FirstFoundTrophy;
        [RTTI.Member(14, 0x78, "Logic")] public Ref<TrophyResource> AllFoundTrophy;
    }

    [RTTI.Serializable(0xC7DE49D841404008, GameType.DS)]
    public class CollectableVantage : Collectable
    {
        [RTTI.Member(16, 0x88, "Logic")] public StreamingRef<SentenceGroupResource> AudioEntry;
        [RTTI.Member(17, 0x90, "Logic")] public StreamingRef<UITexture> Texture;
    }

    [RTTI.Serializable(0xD00BB9B09AAB6597, GameType.DS)]
    public class CollectablesViewController : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x28344E1E3BB5E1A9, GameType.DS)]
    public class CollisionGroup
    {
        [RTTI.Member(0, 0x0)] public Array<int> _CollisionGroup;
    }

    [RTTI.Serializable(0x1E36EB3C53E69F96, GameType.DS)]
    public class CollisionQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(9, 0x80, "Logic")] public Array<UUIDRef<CollisionTrigger>> CollisionTriggers;
        [RTTI.Member(10, 0x90, "Logic")] public bool TriggerOnExit;
    }

    [RTTI.Serializable(0x31BF31A96FC4835A, GameType.DS)]
    public class CollisionQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0x794A860E5B349A87, GameType.DS)]
    public class CollisionResource : Resource
    {
        [RTTI.Member(5, 0x20, "Generated")] public Ref<PhysicsShapeResource> PhysicsShapeResource;
        [RTTI.Member(3, 0x28, "General")] public EPhysicsShapeType ShapeType;
    }

    [RTTI.Serializable(0x238C6DB5BAAEE4D1, GameType.DS)]
    public class CollisionResourceBox : CollisionResource
    {
        [RTTI.Member(7, 0x30, "General")] public BoundingBox3 LocalBounds;
        [RTTI.Member(8, 0x50, "General")] public Ref<MaterialTypeResource> MaterialTypeResource;
    }

    [RTTI.Serializable(0x22DE691C9E48E722, GameType.DS)]
    public class CollisionResourceSphere : CollisionResource
    {
        [RTTI.Member(8, 0x30, "General")] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(7, 0x38, "General")] public float Radius;
    }

    [RTTI.Serializable(0x84AB91636DEBD540, GameType.DS)]
    public class CollisionTrigger : PhysicsCollisionInstance
    {
        [RTTI.Member(11, 0x98, "General", true)] public WorldTransform Orientation;
    }

    [RTTI.Serializable(0x9FB1C7AB44ECCD47, GameType.DS)]
    public class CollisionTriggerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x61E0C8F38F07D6D8, GameType.DS)]
    public class ColorPeg : PegBase
    {
        [RTTI.Member(4, 0x10, "General")] public FRGBColor Color;
    }

    [RTTI.Serializable(0x2BD00641915C8EB5, GameType.DS)]
    public class ColorScheme
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public RGBAColor Friendly;
        [RTTI.Member(2, 0xC)] public RGBAColor Enemy;
        [RTTI.Member(3, 0x10)] public RGBAColor PartyMember;
        [RTTI.Member(4, 0x14)] public RGBAColor Warning;
        [RTTI.Member(5, 0x18)] public RGBAColor FriendlyCrosshair;
        [RTTI.Member(6, 0x1C)] public RGBAColor EnemyCrosshair;
    }

    [RTTI.Serializable(0xE8502B1F3974B6CB, GameType.DS)]
    public class ColorizeSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public FRGBAColor BiasColor;
        [RTTI.Member(3, 0x10, "Settings")] public FRGBAColor MidtoneColor;
        [RTTI.Member(5, 0x20, "Settings")] public FRGBAColor HighlightColor;
        [RTTI.Member(2, 0x30, "Settings")] public float BiasScale;
        [RTTI.Member(4, 0x34, "Settings")] public float MidtoneBoost;
        [RTTI.Member(6, 0x38, "Settings")] public float HighlightBoost;
        [RTTI.Member(7, 0x3C, "Settings")] public float Depth;
    }

    [RTTI.Serializable(0x5D5497DA30EE039B, GameType.DS)]
    public class ColorizeSettingsResource : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "Settings")] public Array<ColorizeSettings> ColorizeSettings;
        [RTTI.Member(7, 0x48, "Settings")] public Array<FogSettings> FogSettings;
        [RTTI.Member(8, 0x58, "Settings")] public Ref<CurveResource> HueSaturationCurve;
        [RTTI.Member(9, 0x60, "Settings")] public MasterColorizeSettings MasterColorizeSettings;
        [RTTI.Member(10, 0xB0, "Settings")] public Filename MasterImageTemplate;
        [RTTI.Member(11, 0xB8, "Settings")] public float MasterGamma;
        [RTTI.Member(12, 0xBC, "Settings")] public float MasterGain;
        [RTTI.Member(13, 0xC0, "Settings")] public float MasterLift;
        [RTTI.Member(14, 0xC4, "Settings")] public EColorizeLookupMasterMode MasterMode;
        [RTTI.Member(16, 0xD0, "Settings")] public FRGBAColor CubeMapMultiplier;
        [RTTI.Member(18, 0xE0, "Settings")] public Ref<Texture> Rgb3dLookupTexture;
        [RTTI.Member(15, 0xF0, "Settings")] public FRGBAColor ForwardRenderingColorizeSettings;
        [RTTI.Member(17, 0x100, "Settings")] public EColorizeBlendMode BlendMode;
    }

    [RTTI.Serializable(0xB20A46DEC654DE00, GameType.DS)]
    public class ColorizeSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Textures")] public Ref<Texture> NeutralDepthColorizeTexture;
        [RTTI.Member(5, 0x28, "Shaders")] public Ref<ShaderResource> PostColorizeShader;
    }

    [RTTI.Serializable(0xBE0D063E173BD725, GameType.DS)]
    public class CombatDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEBA7F5679EF20991, GameType.DS)]
    public class CombatDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(8, 0x20, "Facts")] public Ref<BooleanFact> IsNearEnemies;
        [RTTI.Member(9, 0x28, "Facts")] public Ref<BooleanFact> IsInCombat;
        [RTTI.Member(3, 0x30, "Logic")] public FRange NearbyEnemyRange;
        [RTTI.Member(6, 0x38, "EnemyThreats")] public float EnemyThreatDetectionRange;
        [RTTI.Member(4, 0x3C, "Logic")] public float CombatCoolDownTime;
    }

    [RTTI.Serializable(0x13BF06EA22E24032, GameType.DS)]
    public class ComboComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x35890AFB0DEB35D7, GameType.DS)]
    public class ComboComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float ComboTimer;
        [RTTI.Member(3, 0x28)] public Array<Ref<ComboStageSettings>> ComboStageSettings;
        [RTTI.Member(4, 0x38)] public Array<Ref<DamageTypeResource>> DamageTypes;
        [RTTI.Member(5, 0x48)] public Ref<TagProperty> ResistanceTagProperty;
        [RTTI.Member(6, 0x50)] public Ref<TagProperty> VulnerableTagProperty;
        [RTTI.Member(7, 0x58)] public Ref<LocalizedTextResource> ComboFinishedText;
    }

    [RTTI.Serializable(0x946C46D4C74C419F, GameType.DS)]
    public class ComboComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE31456B893C395CA, GameType.DS)]
    public class ComboStageSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public IRange LevelRange;
        [RTTI.Member(3, 0x28)] public Array<Ref<EntityComponentResource>> AdditionalComponents;
        [RTTI.Member(4, 0x38)] public Ref<LocalizedTextResource> ComboText;
        [RTTI.Member(5, 0x40)] public int ComboXP;
    }

    [RTTI.Serializable(0xA580520E0DEBBA9F, GameType.DS)]
    public class CommerceManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x46080EDE65F161DF, GameType.DS)]
    public class CompetingDamageType
    {
        [RTTI.Member(0, 0x0)] public Ref<DamageTypeResource> DamageType;
        [RTTI.Member(1, 0x8)] public float CancellationMultiplier;
    }

    [RTTI.Serializable(0x46C3418B57B9FA5B, GameType.DS)]
    public class ComponentLifetimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF41C3AEAAD124DBA, GameType.DS)]
    public class ComponentLifetimeComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4FC1DED802D52F54, GameType.DS)]
    public class ComponentStatModifierResource : ActiveStatModifierResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EntityComponentResource> EntityComponent;
    }

    [RTTI.Serializable(0x3D920286BFE5EE91, GameType.DS)]
    public class Composite_aString : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> Container;
    }

    [RTTI.Serializable(0x42E4260A7C8BE38C, GameType.DS)]
    public class Composite_aWString : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<WString> Container;
    }

    [RTTI.Serializable(0xB4379713577D0555, GameType.DS)]
    public class Compressed16Vector3
    {
        [RTTI.Member(0, 0x0)] public int16 X;
        [RTTI.Member(1, 0x2)] public int16 Y;
        [RTTI.Member(2, 0x4)] public int16 Z;
    }

    [RTTI.Serializable(0x391C214A28009A9F, GameType.DS)]
    public class CompressedUnitVector3B
    {
        [RTTI.Member(0, 0x0)] public int8 X;
        [RTTI.Member(1, 0x1)] public int8 Y;
        [RTTI.Member(2, 0x2)] public int8 Z;
    }

    [RTTI.Serializable(0x232057CE3197A0D5, GameType.DS)]
    public class CompressorConfigurationSet : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float FullRangeThresholdInDb;
        [RTTI.Member(3, 0x24)] public float FullRangeRatio;
        [RTTI.Member(4, 0x28)] public float FullRangeAttackTimeInMs;
        [RTTI.Member(5, 0x2C)] public float FullRangeReleaseTimeInMs;
        [RTTI.Member(6, 0x30)] public float FullRangeMakeUpGainInDb;
        [RTTI.Member(7, 0x34)] public float FullRangePassThruGainInDb;
        [RTTI.Member(8, 0x38)] public float LFEThresholdInDb;
        [RTTI.Member(9, 0x3C)] public float LFERatio;
        [RTTI.Member(10, 0x40)] public float LFEAttackTimeInMs;
        [RTTI.Member(11, 0x44)] public float LFEReleaseTimeInMs;
        [RTTI.Member(12, 0x48)] public float LFEMakeUpGainInDb;
        [RTTI.Member(13, 0x4C)] public float LFEPassThruGainInDb;
    }

    [RTTI.Serializable(0xADDA8239F2BBCBF2, GameType.DS)]
    public class ComputeSkinningSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> ComputeLinearBlendSkinning1x8;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> ComputeLinearBlendSkinning2x8;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> ComputeLinearBlendSkinning3x8;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> ComputeLinearBlendSkinning4x8;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> ComputeLinearBlendSkinning5x8;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> ComputeLinearBlendSkinning6x8;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> ComputeLinearBlendSkinning7x8;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> ComputeLinearBlendSkinning8x8;
        [RTTI.Member(10, 0x60)] public Ref<ShaderResource> ComputeLinearBlendSkinning1x16;
        [RTTI.Member(11, 0x68)] public Ref<ShaderResource> ComputeLinearBlendSkinning2x16;
        [RTTI.Member(12, 0x70)] public Ref<ShaderResource> ComputeLinearBlendSkinning3x16;
        [RTTI.Member(13, 0x78)] public Ref<ShaderResource> ComputeLinearBlendSkinning4x16;
        [RTTI.Member(14, 0x80)] public Ref<ShaderResource> ComputeLinearBlendSkinning5x16;
        [RTTI.Member(15, 0x88)] public Ref<ShaderResource> ComputeLinearBlendSkinning6x16;
        [RTTI.Member(16, 0x90)] public Ref<ShaderResource> ComputeLinearBlendSkinning7x16;
        [RTTI.Member(17, 0x98)] public Ref<ShaderResource> ComputeLinearBlendSkinning8x16;
        [RTTI.Member(18, 0xA0)] public Ref<ShaderResource> ComputeLinearBlendSkinning1x8N;
        [RTTI.Member(19, 0xA8)] public Ref<ShaderResource> ComputeLinearBlendSkinning2x8N;
        [RTTI.Member(20, 0xB0)] public Ref<ShaderResource> ComputeLinearBlendSkinning3x8N;
        [RTTI.Member(21, 0xB8)] public Ref<ShaderResource> ComputeLinearBlendSkinning4x8N;
        [RTTI.Member(22, 0xC0)] public Ref<ShaderResource> ComputeLinearBlendSkinning5x8N;
        [RTTI.Member(23, 0xC8)] public Ref<ShaderResource> ComputeLinearBlendSkinning6x8N;
        [RTTI.Member(24, 0xD0)] public Ref<ShaderResource> ComputeLinearBlendSkinning7x8N;
        [RTTI.Member(25, 0xD8)] public Ref<ShaderResource> ComputeLinearBlendSkinning8x8N;
        [RTTI.Member(26, 0xE0)] public Ref<ShaderResource> ComputeLinearBlendSkinning1x16N;
        [RTTI.Member(27, 0xE8)] public Ref<ShaderResource> ComputeLinearBlendSkinning2x16N;
        [RTTI.Member(28, 0xF0)] public Ref<ShaderResource> ComputeLinearBlendSkinning3x16N;
        [RTTI.Member(29, 0xF8)] public Ref<ShaderResource> ComputeLinearBlendSkinning4x16N;
        [RTTI.Member(30, 0x100)] public Ref<ShaderResource> ComputeLinearBlendSkinning5x16N;
        [RTTI.Member(31, 0x108)] public Ref<ShaderResource> ComputeLinearBlendSkinning6x16N;
        [RTTI.Member(32, 0x110)] public Ref<ShaderResource> ComputeLinearBlendSkinning7x16N;
        [RTTI.Member(33, 0x118)] public Ref<ShaderResource> ComputeLinearBlendSkinning8x16N;
        [RTTI.Member(34, 0x120)] public Ref<ShaderResource> ComputeLinearBlendSkinning1x8NT;
        [RTTI.Member(35, 0x128)] public Ref<ShaderResource> ComputeLinearBlendSkinning2x8NT;
        [RTTI.Member(36, 0x130)] public Ref<ShaderResource> ComputeLinearBlendSkinning3x8NT;
        [RTTI.Member(37, 0x138)] public Ref<ShaderResource> ComputeLinearBlendSkinning4x8NT;
        [RTTI.Member(38, 0x140)] public Ref<ShaderResource> ComputeLinearBlendSkinning5x8NT;
        [RTTI.Member(39, 0x148)] public Ref<ShaderResource> ComputeLinearBlendSkinning6x8NT;
        [RTTI.Member(40, 0x150)] public Ref<ShaderResource> ComputeLinearBlendSkinning7x8NT;
        [RTTI.Member(41, 0x158)] public Ref<ShaderResource> ComputeLinearBlendSkinning8x8NT;
        [RTTI.Member(42, 0x160)] public Ref<ShaderResource> ComputeLinearBlendSkinning1x16NT;
        [RTTI.Member(43, 0x168)] public Ref<ShaderResource> ComputeLinearBlendSkinning2x16NT;
        [RTTI.Member(44, 0x170)] public Ref<ShaderResource> ComputeLinearBlendSkinning3x16NT;
        [RTTI.Member(45, 0x178)] public Ref<ShaderResource> ComputeLinearBlendSkinning4x16NT;
        [RTTI.Member(46, 0x180)] public Ref<ShaderResource> ComputeLinearBlendSkinning5x16NT;
        [RTTI.Member(47, 0x188)] public Ref<ShaderResource> ComputeLinearBlendSkinning6x16NT;
        [RTTI.Member(48, 0x190)] public Ref<ShaderResource> ComputeLinearBlendSkinning7x16NT;
        [RTTI.Member(49, 0x198)] public Ref<ShaderResource> ComputeLinearBlendSkinning8x16NT;
        [RTTI.Member(50, 0x1A0)] public Ref<ShaderResource> ComputeSkinnedNormals;
        [RTTI.Member(51, 0x1A8)] public Ref<ShaderResource> ComputeSkinnedNormalsAndTangents;
    }

    [RTTI.Serializable(0x947A9B7E97FD7748, GameType.DS)]
    public class ConcretePlacement : PlacementBase
    {
        [RTTI.Member(7, 0x28)] public int Priority;
        [RTTI.Member(6, 0x2C)] public EPlacementUsageMask UsageMask;
        [RTTI.Member(3, 0x30)] public ESetDensityBehavior DensityBehavior;
        [RTTI.Member(4, 0x34)] public float DensityScale;
        [RTTI.Member(5, 0x38)] public EPlacementChunkSizeSetting ChunkSize;
        [RTTI.Member(12, 0x40, "Placement")] public EPlacementRotationType RotationType;
        [RTTI.Member(13, 0x44, "Placement")] public float RotationOffset;
        [RTTI.Member(14, 0x48, "Placement")] public float RotationVariance;
        [RTTI.Member(15, 0x4C, "Placement")] public float BaseElevation;
        [RTTI.Member(16, 0x50, "Placement")] public float ElevationVariance;
        [RTTI.Member(18, 0x54, "Tilting")] public float RandomTiltFactor;
        [RTTI.Member(20, 0x58, "Tilting")] public float TerrainTiltFactor;
        [RTTI.Member(19, 0x5C, "Tilting")] public float UpTiltFactor;
        [RTTI.Member(21, 0x60, "Tilting")] public Vec3 ManualTilt;
        [RTTI.Member(23, 0x70, "Scaling")] public float Scale;
        [RTTI.Member(24, 0x74, "Scaling")] public float ScaleVariance;
        [RTTI.Member(9, 0x80, "Placement")] public float MaxSlope;
        [RTTI.Member(10, 0x84, "Placement")] public float MinSlope;
        [RTTI.Member(11, 0x88, "Placement")] public float WanderingDistance;
    }

    [RTTI.Serializable(0xAC066A9FF9E83D2D, GameType.DS)]
    public class ConditionBloodConfig
    {
        [RTTI.Member(0, 0x0)] public float MaxRate;
        [RTTI.Member(1, 0x4)] public float MinRate;
        [RTTI.Member(2, 0x8)] public int8 Level;
    }

    [RTTI.Serializable(0x7C8E95A3F496D1BE, GameType.DS)]
    public class ConditionConfig
    {
        [RTTI.Member(0, 0x0)] public uint8 LevelCount;
        [RTTI.Member(1, 0x8)] public Array<ConditionBloodConfig> BloodConfigs;
        [RTTI.Member(2, 0x18)] public Array<ConditionStaminaConfig> StaminaConfigs;
        [RTTI.Member(3, 0x28)] public Array<ConditionLevelConfig> LevelConfigs;
        [RTTI.Member(4, 0x38)] public float LevelDownDistanceFromGazer;
        [RTTI.Member(5, 0x3C)] public float StaminaDecOverKg;
        [RTTI.Member(6, 0x40)] public float StaminaDecEveryKg_AfterOverKg;
        [RTTI.Member(7, 0x44)] public float StaminaDecPerSec_WalkRun;
        [RTTI.Member(8, 0x48)] public float StaminaDecPerSec_WalkRun_AddEveryKg;
        [RTTI.Member(9, 0x4C)] public float StaminaDecPerSec_Dash;
        [RTTI.Member(10, 0x50)] public float StaminaDecPerSec_Dash_AddEveryKg;
        [RTTI.Member(11, 0x54)] public float StaminaDecPerSec_Crouch;
        [RTTI.Member(12, 0x58)] public float StaminaDecPerSec_Crouch_AddEveryKg;
        [RTTI.Member(13, 0x5C)] public float StaminaDecPerSec_Slip;
        [RTTI.Member(14, 0x60)] public float StaminaDecPerSec_Slip_AddEveryKg;
        [RTTI.Member(15, 0x64)] public float StaminaDecPerSec_TimeFall;
        [RTTI.Member(16, 0x68)] public float StaminaDecPerSec_TimeFallHeavy;
        [RTTI.Member(17, 0x6C)] public float StaminaDecPerSec_TimeFall_AddEveryKg;
        [RTTI.Member(18, 0x70)] public float StaminaDecRate_AdrenalineMode;
        [RTTI.Member(19, 0x74)] public float StaminaDecPerSec_River;
        [RTTI.Member(20, 0x78)] public float StaminaDecPerSec_RiverHeavy;
        [RTTI.Member(21, 0x7C)] public float StaminaDecPerSec_River_AddEveryKg;
        [RTTI.Member(22, 0x80)] public float StaminaDecPerSec_RiverHeavy_AddEveryKg;
        [RTTI.Member(23, 0x84)] public float StaminaDecPerSec_Wind;
        [RTTI.Member(24, 0x88)] public float StaminaDecPerSec_WindHeavy;
        [RTTI.Member(25, 0x8C)] public float StaminaDecPerSec_Wind_AddEveryKg;
        [RTTI.Member(26, 0x90)] public float StaminaDecPerSec_WindHeavy_AddEveryKg;
        [RTTI.Member(27, 0x94)] public float StaminaDecPerSec_Snow;
        [RTTI.Member(28, 0x98)] public float StaminaDecPerSec_Snow_AddEveryKg;
        [RTTI.Member(29, 0x9C)] public float StaminaDecPerSec_BreathStop;
        [RTTI.Member(30, 0xA0)] public float StaminaDecPerSec_BreathStop_AddEveryKg;
        [RTTI.Member(31, 0xA4)] public float StaminaDecPerSec_Rope;
        [RTTI.Member(32, 0xA8)] public float StaminaDecPerSec_Rope_AddEveryKg;
        [RTTI.Member(33, 0xAC)] public float StaminaDec_Jump;
        [RTTI.Member(34, 0xB0)] public float StaminaDec_Jump_AddEveryKg;
        [RTTI.Member(35, 0xB4)] public float StaminaDec_Down;
        [RTTI.Member(36, 0xB8)] public float StaminaDec_Down_AddEveryKg;
        [RTTI.Member(37, 0xBC)] public float StaminaRecoverPerSec_HandsOnKnees;
        [RTTI.Member(38, 0xC0)] public float StaminaRecoverPerSec_HandsOnGround;
        [RTTI.Member(39, 0xC4)] public float StaminaRecoverPerSec_ExchangingShoes;
        [RTTI.Member(40, 0xC8)] public float StaminaRecoverPerSec_PacifyBB;
        [RTTI.Member(41, 0xCC)] public float StaminaRecoverPerSec_InSafeArea;
        [RTTI.Member(42, 0xD0)] public float StaminaRecoverPerSec_InRainShelterStay;
        [RTTI.Member(43, 0xD4)] public float BloodRecoverPerSec_HandsOnKnees;
        [RTTI.Member(44, 0xD8)] public float BloodRecoverPerSec_HandsOnGround;
        [RTTI.Member(45, 0xDC)] public float BloodRecoverPerSec_ExchangingShoes;
        [RTTI.Member(46, 0xE0)] public float BloodRecoverPerSec_PacifyBB;
        [RTTI.Member(47, 0xE4)] public float FatigueRecoverPerSec_HandsOnKnees;
        [RTTI.Member(48, 0xE8)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevel_HandsOnKnees;
        [RTTI.Member(49, 0xEC)] public float FatigueRecoverPerSec_HandsOnGround;
        [RTTI.Member(50, 0xF0)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevel_HandsOnGround;
        [RTTI.Member(51, 0xF4)] public float FatigueRecoverPerSec_ExchangingShoes;
        [RTTI.Member(52, 0xF8)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevel_ExchangingShoes;
        [RTTI.Member(53, 0xFC)] public float FatigueRecoverPerSec_PacifyBB;
        [RTTI.Member(54, 0x100)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevel_PacifyBB;
    }

    [RTTI.Serializable(0xFF7B94940C17299C, GameType.DS)]
    public class ConditionInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xAF5646603300EE2B, GameType.DS)]
    public class ConditionLevelConfig
    {
        [RTTI.Member(0, 0x0)] public float BBStressMultiplier;
        [RTTI.Member(1, 0x4)] public float BloodRecoverySpeedMultiplier;
        [RTTI.Member(2, 0x8)] public float ConsciosnessRecoverySpeedMultiplier;
    }

    [RTTI.Serializable(0x58EED57A8273D634, GameType.DS)]
    public class ConditionListenerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5E010C34B6307008, GameType.DS)]
    public class ConditionListenerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ConditionResource>> Conditions;
    }

    [RTTI.Serializable(0x69C6288993E64F8F, GameType.DS)]
    public class ConditionQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ConditionResource> ConditionResource;
    }

    [RTTI.Serializable(0xA05EE702A7F17F0, GameType.DS)]
    public class ConditionQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xB9114BEE9CE810C1, GameType.DS)]
    public class ConditionResource : Resource
    {
    }

    [RTTI.Serializable(0x1385E563D09A6244, GameType.DS)]
    public class ConditionResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD7B4295D4C193DE6, GameType.DS)]
    public class ConditionStaminaConfig
    {
        [RTTI.Member(0, 0x0)] public float MaxRate;
        [RTTI.Member(1, 0x4)] public float MinRate;
        [RTTI.Member(2, 0x8)] public int8 Level;
    }

    [RTTI.Serializable(0x97E80953D028BFC8, GameType.DS)]
    public class ConditionalAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(5, 0x30, "Logic")] public CPtr<EntityAction> ElseAction;
    }

    [RTTI.Serializable(0xE311D700007609C, GameType.DS)]
    public class ConditionalHealthBarComponentDisplaySettings
    {
        [RTTI.Member(0, 0x0)] public Ref<ConditionResource> Condition;
        [RTTI.Member(1, 0x8)] public HealthBarComponentDisplaySettings DisplaySettings;
    }

    [RTTI.Serializable(0xAA87172741C13C6C, GameType.DS)]
    public class ConditionalLookAtEventInstance : ConditionalLookEventInstance
    {
    }

    [RTTI.Serializable(0xEC3F2F810095C580, GameType.DS)]
    public class ConditionalLookAtEventResource : ConditionalLookEventResource
    {
        [RTTI.Member(21, 0x88, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0x7D2752AA53F80CC5, GameType.DS)]
    public class ConditionalLookEventInstance : LookEventInstance
    {
    }

    [RTTI.Serializable(0x685F53231D34DA4F, GameType.DS)]
    public class ConditionalLookEventResource : LookEventResource
    {
        [RTTI.Member(11, 0x48, "Logic")] public Ref<LocatorResource> FallbackTargetLocatorResource;
        [RTTI.Member(12, 0x50, "Logic")] public FRange StartHeadingRange;
        [RTTI.Member(13, 0x58, "Logic")] public FRange StartPitchRange;
        [RTTI.Member(14, 0x60, "Logic")] public float StartDistance;
        [RTTI.Member(15, 0x64, "Logic")] public FRange ContinueHeadingRange;
        [RTTI.Member(16, 0x6C, "Logic")] public FRange ContinuePitchRange;
        [RTTI.Member(17, 0x74, "Logic")] public float ContinueDistance;
        [RTTI.Member(18, 0x78, "Logic")] public FRange LookTimeRange;
        [RTTI.Member(19, 0x80, "Logic")] public FRange CooldownTimeRange;
    }

    [RTTI.Serializable(0xF9886B71F5C2278B, GameType.DS)]
    public class ConditionalLookEventStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1BD106D5D563E407, GameType.DS)]
    public class ConstraintComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA29054713215F7A3, GameType.DS)]
    public class ConstraintComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PhysicsConstraintResource> PhysicsConstraintResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<ModelPartResource> ModelPartResource;
        [RTTI.Member(5, 0x30, "Logic")] public EConstraintComponentAttachmentTarget AttachmentTarget;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<ModelPartResource> TargetModelPartResource;
    }

    [RTTI.Serializable(0x4D8B642067B74F9A, GameType.DS)]
    public class ConstraintComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x563D29DC24AEEB66, GameType.DS)]
    public class ContentWidget : Widget
    {
    }

    [RTTI.Serializable(0xEF20AB69409295AC, GameType.DS)]
    public class ContextualActionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9906C84F7D03DB1E, GameType.DS)]
    public class ContextualActionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x9C25385A8BD0FA2A, GameType.DS)]
    public class ContextualActionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String WarpHeadingAnimVarName;
        [RTTI.Member(4, 0x28, "Logic")] public String WarpPitchAnimVarName;
        [RTTI.Member(5, 0x30, "Logic")] public String WarpPosAnimVarName;
        [RTTI.Member(6, 0x38, "Logic")] public String WarpEnabledAnimVarName;
        [RTTI.Member(7, 0x40, "Logic")] public String VariantAnimVarName;
        [RTTI.Member(8, 0x48, "Logic")] public String ContextualActionAnimTagName;
        [RTTI.Member(9, 0x50, "Logic")] public Array<Ref<AIFaction>> AlwaysEvaluateFactions;
        [RTTI.Member(10, 0x60, "Logic")] public Array<Ref<ContextualActionResource>> ContextualActions;
        [RTTI.Member(11, 0x70, "Logic")] public BoundingBox3 EnemySearchBoundingBox;
        [RTTI.Member(12, 0x90, "Logic")] public float LineOfSightRadius;
        [RTTI.Member(13, 0xA0, "Logic")] public Vec3 DefaultLineOfSightEyeOffset;
        [RTTI.Member(14, 0xB0, "Logic")] public Vec3 ParkourWithHandsBracedLineOfSightEyeOffset;
        [RTTI.Member(15, 0xC0, "Logic")] public Vec3 ParkourWithHandsUnbracedLineOfSightEyeOffset;
        [RTTI.Member(16, 0xD0, "Logic")] public float PrimaryHUDCooldownDuration;
        [RTTI.Member(17, 0xD4, "Logic")] public float SecondaryHUDCooldownDuration;
    }

    [RTTI.Serializable(0x13D5ED5A684B30A4, GameType.DS)]
    public class ContextualActionComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2DF7F0BC331053B7, GameType.DS)]
    public class ContextualActionCondition
    {
        [RTTI.Member(0, 0x0)] public bool OnGround;
        [RTTI.Member(1, 0x1)] public bool Jumping;
        [RTTI.Member(2, 0x2)] public bool Falling;
        [RTTI.Member(3, 0x3)] public bool VaultOff;
        [RTTI.Member(4, 0x4)] public bool Conversation;
        [RTTI.Member(5, 0x5)] public bool ParkouringFoot;
        [RTTI.Member(6, 0x6)] public bool ParkouringHandBraced;
        [RTTI.Member(7, 0x7)] public bool ParkouringHandUnbraced;
        [RTTI.Member(8, 0x8)] public bool Ziplining;
        [RTTI.Member(9, 0x9)] public bool HitResponse;
        [RTTI.Member(10, 0xA)] public bool Mounted;
        [RTTI.Member(11, 0xB)] public bool Combat;
        [RTTI.Member(12, 0xC)] public bool Tools;
        [RTTI.Member(13, 0xD)] public bool HeavyWeaponCarry;
        [RTTI.Member(14, 0xE)] public bool Melee;
        [RTTI.Member(15, 0xF)] public bool RequiresUseLocationForVictim;
        [RTTI.Member(16, 0x10)] public Array<ContextualActionRequiredBoolProperty> RequiredBoolProperties;
        [RTTI.Member(17, 0x20)] public Array<ContextualActionRequiredBooleanFact> RequiredBoolFacts;
    }

    [RTTI.Serializable(0x74F1055FAF8EAA86, GameType.DS)]
    public class ContextualActionRequiredBoolProperty
    {
        [RTTI.Member(0, 0x0)] public Ref<BoolPropertyBase> Link;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0x1808B692BADCAA6B, GameType.DS)]
    public class ContextualActionRequiredBooleanFact
    {
        [RTTI.Member(0, 0x0)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0xFECFD91B4DB3D13A, GameType.DS)]
    public class ContextualActionResource : Resource
    {
        [RTTI.Member(10, 0x20, "Logic")] public ContextualActionCondition Condition;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<GraphProgramResource> ConditionGraph;
        [RTTI.Member(14, 0x58, "Logic")] public Ref<GraphProgramResource> MountConditionGraph;
        [RTTI.Member(12, 0x60, "Logic")] public Ref<GraphProgramResource> StartGraph;
        [RTTI.Member(13, 0x68, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<GraphProgramResource> StopGraph;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<GraphProgramResource> DelayStopGraph;
        [RTTI.Member(3, 0x88, "Logic")] public Array<int> AnimationVariantWeights;
        [RTTI.Member(4, 0x98, "Logic")] public Array<String> BoolAnimVarNames;
        [RTTI.Member(5, 0xA8, "Logic")] public EContextualActionAnimationActions BoolAnimVarsTriggerType;
        [RTTI.Member(6, 0xB0, "Logic")] public Array<FloatAnimationVariableValue> FloatAnimVars;
        [RTTI.Member(7, 0xC0, "Logic")] public Ref<LocalizedTextResource> ActionText;
        [RTTI.Member(8, 0xC8, "Logic")] public float CooldownDuration;
        [RTTI.Member(17, 0xCC, "Logic")] public float DelayStop;
        [RTTI.Member(9, 0xD0, "Logic")] public Ref<MountModeID> MountModeID;
        [RTTI.Member(18, 0xD8, "Logic")] public EContextualActionButtonType Type;
        [RTTI.Member(19, 0xD9, "Logic")] public EContextualActionTriggerAction ActionsTriggerType;
        [RTTI.Member(34, 0xE0, "Logic")] public String ActionTriggerEventID;
        [RTTI.Member(21, 0xE8, "Logic")] public float MaxWarpDistance;
        [RTTI.Member(22, 0xEC, "Logic")] public EContextualActionDeviceFunctionType ContextualActionDeviceFunctionType;
        [RTTI.Member(23, 0xED, "Logic")] public bool CheckForBlockingCollision;
        [RTTI.Member(24, 0xF0, "Logic")] public float CheckForBlockingCollisionRadius;
        [RTTI.Member(25, 0x100, "Logic")] public Vec3 CheckForBlockingCollisionUpOffset;
        [RTTI.Member(20, 0x110, "Logic")] public EContextualActionSwitchToWeapon SwitchToWeapon;
        [RTTI.Member(26, 0x111, "Logic")] public bool FlinchStopsAction;
        [RTTI.Member(27, 0x112, "Logic")] public bool StaggerStopsAction;
        [RTTI.Member(28, 0x113, "Logic")] public bool KnockDownStopsAction;
        [RTTI.Member(29, 0x120, "Logic")] public Vec3 RelativeOffsetToTarget;
        [RTTI.Member(30, 0x130, "Logic")] public Array<String> AttackHelpers;
        [RTTI.Member(31, 0x140, "Logic")] public float MaxDistanceToAttackHelpers;
        [RTTI.Member(32, 0x144, "Logic")] public bool UseHelperOrientation;
        [RTTI.Member(33, 0x145, "Logic")] public bool ShouldBlendToOrientation;
        [RTTI.Member(37, 0x148, "Victim")] public Array<ContextualActionRequiredBoolProperty> RequiredBoolProperties;
        [RTTI.Member(38, 0x158, "Victim")] public bool RequiresAIIndividual;
        [RTTI.Member(39, 0x159, "Victim")] public bool VictimShouldDismountFromSequence;
        [RTTI.Member(40, 0x160, "Victim")] public ContextualActionVictimSettings Settings;
        [RTTI.Member(41, 0x178, "Victim")] public float MaxSlopeAngle;
        [RTTI.Member(42, 0x180, "Victim")] public Ref<DamageTypeGroup> IgnoreDamageTypeGroupCausedByVictim;
        [RTTI.Member(35, 0x188, "Logic")] public float HUDTextDisplayDuration;
        [RTTI.Member(44, 0x190, "Sound")] public Ref<SoundResource> ProgressSound;
        [RTTI.Member(45, 0x198, "Sound")] public String ProgressSoundHelperName;
        [RTTI.Member(46, 0x1A0, "Sound")] public bool ProgressSoundIs3D;
    }

    [RTTI.Serializable(0x21D24AE44868498, GameType.DS)]
    public class ContextualActionVictimComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6726DE1B613B7A84, GameType.DS)]
    public class ContextualActionVictimComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x5553C9EFB2768FC, GameType.DS)]
    public class ContextualActionVictimComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3FE288F832B36C90, GameType.DS)]
    public class ContextualActionVictimSettings
    {
        [RTTI.Member(0, 0x0)] public bool PlaceOnNavMesh;
        [RTTI.Member(1, 0x1)] public bool PlaceOnGround;
        [RTTI.Member(2, 0x2)] public bool ForceUseContactNormalAsUp;
        [RTTI.Member(3, 0x3)] public bool DisablePerception;
        [RTTI.Member(4, 0x4)] public bool DisableModelUpdate;
        [RTTI.Member(5, 0x5)] public bool UpdateFloorSlope;
        [RTTI.Member(6, 0x8)] public Ref<DamageTypeResource> OnlyAllowedHitResponseDamageType;
        [RTTI.Member(7, 0x10)] public float RestoreAsVictimDelay;
    }

    [RTTI.Serializable(0x5AF46D1BC37A4BCB, GameType.DS)]
    public class ContextualEmotion : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public int AnimationVarValue;
        [RTTI.Member(4, 0x24, "Logic")] public float Duration;
        [RTTI.Member(5, 0x28, "Logic")] public float CooldownDuration;
        [RTTI.Member(6, 0x2C, "Logic")] public int Priority;
        [RTTI.Member(7, 0x30, "Logic")] public ContextualEmotionCondition Condition;
        [RTTI.Member(8, 0x60, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
    }

    [RTTI.Serializable(0x6ACB9224D79279CE, GameType.DS)]
    public class ContextualEmotionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9046B97368B761FA, GameType.DS)]
    public class ContextualEmotionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String EmotionAnimationVarName;
        [RTTI.Member(4, 0x28, "Logic")] public float EmotionCooldownDuration;
        [RTTI.Member(6, 0x30, "Injured")] public Ref<ThresholdBasedContextualEmotion> Injured_ContextualEmotion;
        [RTTI.Member(8, 0x38, "Alerted")] public Ref<ThresholdBasedContextualEmotion> Alerted_ContextualEmotion;
        [RTTI.Member(10, 0x40, "OutOfBreath")] public Ref<ThresholdBasedContextualEmotion> OutOfBreath_ContextualEmotion;
        [RTTI.Member(12, 0x48, "OutOfWater")] public Ref<ThresholdBasedContextualEmotion> OutOfWater_ContextualEmotion;
        [RTTI.Member(14, 0x50, "Rainy")] public Ref<ThresholdBasedContextualEmotion> Rainy_ContextualEmotion;
        [RTTI.Member(16, 0x58, "Cold")] public Ref<ThresholdBasedContextualEmotion> Cold_ContextualEmotion;
        [RTTI.Member(18, 0x60, "Warm")] public Ref<ThresholdBasedContextualEmotion> Warm_ContextualEmotion;
        [RTTI.Member(20, 0x68, "Windy")] public Ref<ThresholdBasedContextualEmotion> Windy_ContextualEmotion;
        [RTTI.Member(22, 0x70, "PropertyBased")] public Array<Ref<PropertyBasedContextualEmotion>> PropertyBased_ContextualEmotion;
        [RTTI.Member(24, 0x80, "FactBased")] public Array<Ref<FactBasedContextualEmotion>> FactBased_ContextualEmotion;
    }

    [RTTI.Serializable(0xF10F64959B6CCF71, GameType.DS)]
    public class ContextualEmotionComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBDE2CEBCD82D30B6, GameType.DS)]
    public class ContextualEmotionCondition
    {
        [RTTI.Member(0, 0x0)] public bool StandIdle;
        [RTTI.Member(1, 0x1)] public bool StandMove;
        [RTTI.Member(2, 0x2)] public bool Sprinting;
        [RTTI.Member(3, 0x3)] public bool CrouchIdle;
        [RTTI.Member(4, 0x4)] public bool CrouchMove;
        [RTTI.Member(5, 0x5)] public bool Starts;
        [RTTI.Member(6, 0x6)] public bool Stops;
        [RTTI.Member(7, 0x7)] public bool Banking;
        [RTTI.Member(8, 0x8)] public bool JumpFall;
        [RTTI.Member(9, 0x9)] public bool Zipline;
        [RTTI.Member(10, 0xA)] public bool ClimbHands;
        [RTTI.Member(11, 0xB)] public bool ClimbFoot;
        [RTTI.Member(12, 0xC)] public bool Swimming;
        [RTTI.Member(13, 0xD)] public bool FreeRunning;
        [RTTI.Member(14, 0xE)] public bool HunterMode;
        [RTTI.Member(15, 0xF)] public bool WieldStow;
        [RTTI.Member(16, 0x10)] public bool Aiming;
        [RTTI.Member(17, 0x11)] public bool Firing;
        [RTTI.Member(18, 0x12)] public bool Hitresponse;
        [RTTI.Member(19, 0x13)] public bool Tools;
        [RTTI.Member(20, 0x14)] public bool Melee;
        [RTTI.Member(21, 0x15)] public bool Mounted;
        [RTTI.Member(22, 0x16)] public bool WeaponCarry;
        [RTTI.Member(23, 0x17)] public bool HeavyWeaponCarry;
        [RTTI.Member(24, 0x18)] public bool ContextualAction;
        [RTTI.Member(25, 0x20)] public Array<String> DisallowTags;
    }

    [RTTI.Serializable(0x63D601F908F16FA3, GameType.DS)]
    public class ContextualFactsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9443DAA489407B3, GameType.DS)]
    public class ContextualFactsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<ResourceSelectorBase>> ContextualFactsSelectors;
    }

    [RTTI.Serializable(0x9090D591EF3D947E, GameType.DS)]
    public class ContextualSpeechComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3B1F577D71565F8D, GameType.DS)]
    public class ContextualSpeechComponentResource : EntityComponentResource
    {
        [RTTI.Member(9, 0x20, "Logic")] public Array<Ref<ConditionResource>> Conditions;
        [RTTI.Member(3, 0x30, "Logic")] public Array<Ref<ContextualSpeechEventMappingResource>> Events;
        [RTTI.Member(4, 0x40, "Logic")] public float MaxListenerDistance;
        [RTTI.Member(5, 0x44, "Logic")] public bool IsEnabledWhenInSequence;
        [RTTI.Member(6, 0x45, "Logic")] public bool IsEnabledWhenPlayerIsInSequence;
        [RTTI.Member(7, 0x46, "Logic")] public bool ShouldStopTalkingInstantlyWhenInSequence;
        [RTTI.Member(8, 0x48, "Logic")] public float GlobalCooldown;
    }

    [RTTI.Serializable(0xF72516AA8A0C15E0, GameType.DS)]
    public class ContextualSpeechComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAAA3749E904E4C5D, GameType.DS)]
    public class ContextualSpeechEvent : Resource
    {
    }

    [RTTI.Serializable(0xBAF14D251CEAF5A6, GameType.DS)]
    public class ContextualSpeechEventMappingResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ContextualSpeechEvent> Event;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<ContextualSpeechRuleResource>> Rules;
        [RTTI.Member(5, 0x38, "Logic")] public bool IgnoresGlobalCooldown;
        [RTTI.Member(6, 0x3C, "Logic")] public float Cooldown;
        [RTTI.Member(7, 0x40, "Logic")] public bool IsCooldownGlobal;
        [RTTI.Member(8, 0x41, "Logic")] public bool CanPlayWhileInSlowMotion;
        [RTTI.Member(9, 0x42, "Logic")] public bool EnableListenerSearch;
        [RTTI.Member(10, 0x43, "Logic")] public bool SuppressSubtitles;
    }

    [RTTI.Serializable(0x5323067C14E2ABC8, GameType.DS)]
    public class ContextualSpeechRuleResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> Condition;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<ConditionResource>> FactConditions;
        [RTTI.Member(10, 0x38, "Logic")] public Ref<GraphProgramResource> SideEffect;
        [RTTI.Member(5, 0x40, "Logic")] public Ref<AISignalType> SignalType;
        [RTTI.Member(9, 0x48, "Logic")] public Ref<AISignalType> ResponseType;
        [RTTI.Member(6, 0x50, "Logic")] public int Priority;
        [RTTI.Member(7, 0x54, "Logic")] public int MaxRepeatCount;
        [RTTI.Member(8, 0x58, "Logic")] public int ChanceToPlay;
    }

    [RTTI.Serializable(0x47B51A14A44A887, GameType.DS)]
    public class ContextualSpeechRuleSave : RTTIObject
    {
        [RTTI.Member(0, 0x10, true)] public GGUUID UUID;
        [RTTI.Member(1, 0x20, true)] public int RepeatCount;
    }

    [RTTI.Serializable(0x869DCBBD6A0F5686, GameType.DS)]
    public class ContextualTakeDownAttackResource : ContextualActionResource
    {
        [RTTI.Member(48, 0x1B0, "Settings")] public float MaximumChangeInVelocity;
        [RTTI.Member(49, 0x1B4, "Settings")] public float MaximumTurn;
        [RTTI.Member(50, 0x1B8, "Settings")] public float MaxTurnToTargetAngle;
        [RTTI.Member(51, 0x1BC, "Settings")] public float ExtraCapsuleRadiusWhileFalling;
        [RTTI.Member(52, 0x1C0, "Settings")] public bool ShouldSelectWithCamera;
        [RTTI.Member(53, 0x1D0, "Settings")] public Vec3 InitialJumpVelocity;
        [RTTI.Member(54, 0x1E0, "Settings")] public String CustomJumpAnimationStateName;
    }

    [RTTI.Serializable(0xF37F40737AC9795D, GameType.DS)]
    public class ContextualWarpedAttackResource : ContextualActionResource
    {
        [RTTI.Member(48, 0x1B0, "Logic")] public String AnimationState;
        [RTTI.Member(49, 0x1B8, "Logic")] public AnimationEventID ContactAnimEvent;
        [RTTI.Member(50, 0x1C0, "Logic", true)] public String ContactJointName;
        [RTTI.Member(53, 0x1D0, "Logic")] public Vec3 ContactPosition;
        [RTTI.Member(54, 0x1E0, "Logic")] public Vec3 ContactWarpOffset;
        [RTTI.Member(55, 0x1F0, "Logic")] public bool KeepUpdatingOrientation;
        [RTTI.Member(56, 0x1F1, "Logic")] public bool KeepUpdatingWarpAnimationVariables;
        [RTTI.Member(51, 0x1F8, "Logic")] public Ref<AnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(52, 0x200, "Logic", true)] public Ref<SkinnedModelResource> ModelResource;
    }

    [RTTI.Serializable(0xDD8045EED957C13B, GameType.DS)]
    public class ContinuousAmmoEjector : AmmoEjector
    {
    }

    [RTTI.Serializable(0xECE655E39DCFD351, GameType.DS)]
    public class ContinuousAmmoEjectorRep : AmmoEjectorRep
    {
    }

    [RTTI.Serializable(0xE0857341FA47DBB2, GameType.DS)]
    public class ContinuousAmmoEjectorResource : AmmoEjectorResource
    {
        [RTTI.Member(62, 0x160, "FireRate")] public float RoundsPerSecond;
    }

    [RTTI.Serializable(0xD74FE4849E822135, GameType.DS)]
    public class ControllableZoomComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x471A21DB063A2E74, GameType.DS)]
    public class ControllableZoomComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x69A67766885EC8B6, GameType.DS)]
    public class ControllableZoomComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Logic")] public Ref<CameraPropertiesSetResource> MinCameraProperties;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<CameraPropertiesSetResource> MaxCameraProperties;
        [RTTI.Member(6, 0x30, "Logic")] public float StartZoomFactor;
        [RTTI.Member(7, 0x34, "Logic")] public float StartZoomBlendTime;
        [RTTI.Member(8, 0x38, "Logic")] public float ZoomSpeed;
        [RTTI.Member(9, 0x3C, "Logic")] public float ZoomToTargetBlendTime;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(10, 0x48, "Logic")] public bool PlayerInvisible;
    }

    [RTTI.Serializable(0x180C545F0B7CF6B9, GameType.DS)]
    public class ControlledEntity : Entity
    {
    }

    [RTTI.Serializable(0x21C90581E9AD2874, GameType.DS)]
    public class ControlledEntityResource : EntityResource
    {
        [RTTI.Member(34, 0x100, "AI")] public bool AddToAIManager;
        [RTTI.Member(37, 0x101, "AI")] public bool IncludeInChildLOFCheck;
        [RTTI.Member(31, 0x108, "Logic")] public String EyeBone;
        [RTTI.Member(35, 0x110, "AI")] public float CollisionRadius;
        [RTTI.Member(36, 0x118, "AI")] public String IdentifiedSignalType;
        [RTTI.Member(32, 0x120, "Logic")] public Array<String> AnimationSetTags;
    }

    [RTTI.Serializable(0xC3850D4624918439, GameType.DS)]
    public class ControlledEntitySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAF9E93A997809770, GameType.DS)]
    public class Controller : EntityComponent
    {
    }

    [RTTI.Serializable(0xC82E765C7CC99656, GameType.DS)]
    public class ControllerConfig
    {
        [RTTI.Member(0, 0x0, true)] public int ControllerConfigID;
        [RTTI.Member(1, 0x8, true)] public Array<int> ControllerConfigIDPreferences;
        [RTTI.Member(2, 0x18, true)] public Array<float> HeadingSpeedFactor;
        [RTTI.Member(3, 0x28, true)] public Array<float> PitchSpeedFactor;
        [RTTI.Member(4, 0x38, true)] public bool LookInvertYAxis;
        [RTTI.Member(5, 0x39, true)] public bool LookInvertXAxis;
        [RTTI.Member(6, 0x40, true)] public Vec2 LookSensitivity;
        [RTTI.Member(7, 0x50, true)] public int32 ZoomSwitchMode;
        [RTTI.Member(8, 0x54, true)] public bool SprintToggle;
        [RTTI.Member(9, 0x55, true)] public bool CrouchToggle;
        [RTTI.Member(10, 0x56, true)] public bool SwapSticks;
        [RTTI.Member(11, 0x57, true)] public bool SwapL1L2;
        [RTTI.Member(12, 0x58, true)] public bool SwapR1R2;
        [RTTI.Member(13, 0x59, true)] public bool FlightInvertYAxis;
    }

    [RTTI.Serializable(0x616CD6023A146B0A, GameType.DS)]
    public class ControllerConfigResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public int ID;
        [RTTI.Member(4, 0x28, "General")] public Ref<LocalizedTextResource> Title;
        [RTTI.Member(5, 0x30, "General")] public bool IsDefault;
        [RTTI.Member(6, 0x34, "General")] public EControllerScheme ControllerScheme;
        [RTTI.Member(7, 0x38, "General")] public ETriState DefaultZoomToggle;
        [RTTI.Member(8, 0x3C, "General")] public ETriState DefaultCrouchToggle;
        [RTTI.Member(9, 0x40, "General")] public bool AllowShoulderSwapping;
        [RTTI.Member(10, 0x48, "General")] public Array<ControllerLegend> Legend;
        [RTTI.Member(12, 0x78, "Functions")] public ControllerFunction PrimaryFire;
        [RTTI.Member(13, 0x80, "Functions")] public ControllerFunction SwitchFire;
        [RTTI.Member(14, 0x88, "Functions")] public ControllerFunction CycleToNextAmmoType;
        [RTTI.Member(15, 0x90, "Functions")] public ControllerFunction CycleToPreviousAmmoType;
        [RTTI.Member(16, 0x98, "Functions")] public ControllerFunction MeleePrimaryAttack;
        [RTTI.Member(17, 0xA0, "Functions")] public ControllerFunction MeleeSecondaryAttack;
        [RTTI.Member(18, 0xA8, "Functions")] public ControllerFunction MeleeDashAttack;
        [RTTI.Member(19, 0xB0, "Functions")] public ControllerFunction SwitchZooming;
        [RTTI.Member(20, 0xB8, "Functions")] public ControllerFunction SwitchZoomMode;
        [RTTI.Member(79, 0xC0, "Functions")] public ControllerFunction Aim;
        [RTTI.Member(25, 0xC8, "Functions")] public ControllerFunction SprintToggle;
        [RTTI.Member(26, 0xD0, "Functions")] public ControllerFunction Jump;
        [RTTI.Member(21, 0xD8, "Functions")] public ControllerFunction Use;
        [RTTI.Member(81, 0xE0, "Functions")] public ControllerFunction Relocate;
        [RTTI.Member(82, 0xE8, "Functions")] public ControllerFunction Loot;
        [RTTI.Member(22, 0xF0, "Functions")] public ControllerFunction PickupWeapon;
        [RTTI.Member(32, 0xF8, "Functions")] public ControllerFunction Reload;
        [RTTI.Member(30, 0x100, "Functions")] public ControllerFunction Crouch;
        [RTTI.Member(31, 0x108, "Functions")] public ControllerFunction Slide;
        [RTTI.Member(28, 0x110, "Functions")] public ControllerFunction TakeCover;
        [RTTI.Member(24, 0x118, "Functions")] public ControllerFunction Vault;
        [RTTI.Member(27, 0x120, "Functions")] public ControllerFunction Dodge;
        [RTTI.Member(23, 0x128, "Functions")] public ControllerFunction DropWeapon;
        [RTTI.Member(33, 0x130, "Functions")] public ControllerFunction NextWeapon;
        [RTTI.Member(34, 0x138, "Functions")] public ControllerFunction SwimDescend;
        [RTTI.Member(35, 0x140, "Functions")] public ControllerFunction SwimAscend;
        [RTTI.Member(36, 0x148, "Functions")] public ControllerFunction SlowMoToggle;
        [RTTI.Member(37, 0x150, "Functions")] public ControllerFunction CloseCombat;
        [RTTI.Member(80, 0x158, "Functions")] public ControllerFunction Block;
        [RTTI.Member(42, 0x160, "Functions")] public ControllerFunction Suicide;
        [RTTI.Member(78, 0x168, "Functions")] public ControllerFunction LockAim;
        [RTTI.Member(29, 0x170, "Functions")] public ControllerFunction SkipSequence;
        [RTTI.Member(38, 0x178, "Functions")] public ControllerFunction SpectatorToggleSpawnMenu;
        [RTTI.Member(39, 0x180, "Functions")] public ControllerFunction DropFromLedge;
        [RTTI.Member(40, 0x188, "Functions")] public ControllerFunction DropToLedge;
        [RTTI.Member(41, 0x190, "Functions")] public ControllerFunction Heal;
        [RTTI.Member(43, 0x198, "Functions")] public ControllerFunction CounterBucking1;
        [RTTI.Member(44, 0x1A0, "Functions")] public ControllerFunction CounterBucking2;
        [RTTI.Member(45, 0x1A8, "Functions")] public ControllerFunction PrimaryContextualAction;
        [RTTI.Member(46, 0x1B0, "Functions")] public ControllerFunction SecondaryContextualAction;
        [RTTI.Member(47, 0x1B8, "Functions")] public ControllerFunction TertiaryContextualAction;
        [RTTI.Member(48, 0x1C8, "Functions")] public ControllerFunction AAGunPrimaryfire;
        [RTTI.Member(49, 0x1D0, "Functions")] public ControllerFunction AAGunSecondaryfire;
        [RTTI.Member(50, 0x1D8, "Functions")] public ControllerFunction AAGunSwitchZoom;
        [RTTI.Member(53, 0x1E0, "Functions")] public ControllerFunction SelectUp;
        [RTTI.Member(51, 0x1F0, "Functions")] public ControllerFunction SelectLeft;
        [RTTI.Member(52, 0x1F8, "Functions")] public ControllerFunction SelectRight;
        [RTTI.Member(54, 0x200, "Functions")] public ControllerFunction CharacterScreenCampaign;
        [RTTI.Member(56, 0x208, "Functions")] public ControllerFunction CharacterScreenOnline;
        [RTTI.Member(55, 0x210, "Functions")] public ControllerFunction OptionScreenCampaign;
        [RTTI.Member(57, 0x218, "Functions")] public ControllerFunction OptionScreenOnline;
        [RTTI.Member(58, 0x220, "Functions")] public ControllerFunction IngameMainMenu;
        [RTTI.Member(67, 0x228, "Functions")] public ControllerFunction MountHorse;
        [RTTI.Member(68, 0x230, "Functions")] public ControllerFunction DismountHorse;
        [RTTI.Member(69, 0x238, "Functions")] public ControllerFunction DismountHorseSpecial;
        [RTTI.Member(70, 0x240, "Functions")] public ControllerFunction MountSpeedUp;
        [RTTI.Member(71, 0x248, "Functions")] public ControllerFunction MountSpeedDown;
        [RTTI.Member(72, 0x250, "Functions")] public ControllerFunction MountEmergencyStop;
        [RTTI.Member(73, 0x258, "Functions")] public ControllerFunction MountRangedAttack;
        [RTTI.Member(74, 0x260, "Functions")] public ControllerFunction MountMeleeAttack;
        [RTTI.Member(75, 0x268, "Functions")] public ControllerFunction MountSecondaryMeleeAttack;
        [RTTI.Member(76, 0x270, "Functions")] public ControllerFunction HorseCall;
        [RTTI.Member(77, 0x278, "Functions")] public ControllerFunction MountDuckRider;
        [RTTI.Member(59, 0x280, "Functions")] public ControllerFunction InventoryNextweapon;
        [RTTI.Member(60, 0x288, "Functions")] public ControllerFunction InventorySelection;
        [RTTI.Member(65, 0x298, "Functions")] public ControllerFunction InventoryUseTool;
        [RTTI.Member(66, 0x2A0, "Functions")] public ControllerFunction InventoryToggleToolWheel;
        [RTTI.Member(63, 0x2A8, "Functions")] public ControllerFunction InventoryQuickUseToolLeft;
        [RTTI.Member(64, 0x2B0, "Functions")] public ControllerFunction InventoryQuickUseToolRight;
        [RTTI.Member(61, 0x2B8, "Functions")] public ControllerFunction InventoryQuickUseToolUp;
        [RTTI.Member(62, 0x2C0, "Functions")] public ControllerFunction InventoryQuickUseToolDown;
        [RTTI.Member(83, 0x348, "Functions")] public ControllerFunction Tag;
        [RTTI.Member(84, 0x350, "Functions")] public ControllerFunction Untag;
        [RTTI.Member(85, 0x358, "Functions")] public ControllerFunction UntagAll;
        [RTTI.Member(86, 0x360, "Functions")] public ControllerFunction FocusMode;
        [RTTI.Member(87, 0x368, "Functions")] public ControllerFunction FocusTagStatusInfo;
        [RTTI.Member(88, 0x370, "Functions")] public ControllerFunction FocusWeaponSelect;
        [RTTI.Member(89, 0x378, "Functions")] public ControllerFunction FocusUp;
        [RTTI.Member(90, 0x380, "Functions")] public ControllerFunction FocusDown;
        [RTTI.Member(91, 0x388, "Functions")] public ControllerFunction FocusLeft;
        [RTTI.Member(92, 0x390, "Functions")] public ControllerFunction FocusRight;
        [RTTI.Member(93, 0x398, "Functions")] public ControllerFunction BulletTime;
        [RTTI.Member(94, 0x3A0, "Functions")] public ControllerFunction PlaceClimbGrip;
        [RTTI.Member(95, 0x3B0, "Functions")] public ControllerFunction LureEnemy;
        [RTTI.Member(96, 0x3B8, "Functions")] public ControllerFunction AudiologToggle;
        [RTTI.Member(97, 0x3C0, "Functions")] public ControllerFunction DsPickup;
        [RTTI.Member(98, 0x3C8, "Functions")] public ControllerFunction DsSubject;
        [RTTI.Member(99, 0x3D0, "Functions")] public ControllerFunction DsHold;
        [RTTI.Member(100, 0x3D8, "Functions")] public ControllerFunction DsShoot;
        [RTTI.Member(101, 0x3E0, "Functions")] public ControllerFunction DsAction;
        [RTTI.Member(102, 0x3E8, "Functions")] public ControllerFunction DsReload;
        [RTTI.Member(103, 0x3F0, "Functions")] public ControllerFunction DsStance;
        [RTTI.Member(104, 0x3F8, "Functions")] public ControllerFunction DsDodge;
        [RTTI.Member(105, 0x400, "Functions")] public ControllerFunction DsDash;
        [RTTI.Member(106, 0x408, "Functions")] public ControllerFunction DsStockChange;
        [RTTI.Member(107, 0x410, "Functions")] public ControllerFunction DsDemoPause;
        [RTTI.Member(108, 0x428, "Functions")] public ControllerFunction DsDeviceButtonL1;
        [RTTI.Member(109, 0x430, "Functions")] public ControllerFunction DsDeviceButtonL2;
        [RTTI.Member(110, 0x438, "Functions")] public ControllerFunction DsDeviceButtonL3;
        [RTTI.Member(111, 0x440, "Functions")] public ControllerFunction DsDeviceButtonR1;
        [RTTI.Member(112, 0x448, "Functions")] public ControllerFunction DsDeviceButtonR2;
        [RTTI.Member(113, 0x450, "Functions")] public ControllerFunction DsDeviceButtonR3;
        [RTTI.Member(114, 0x458, "Functions")] public ControllerFunction DsDeviceButtonTriangle;
        [RTTI.Member(115, 0x460, "Functions")] public ControllerFunction DsDeviceButtonSquare;
        [RTTI.Member(116, 0x468, "Functions")] public ControllerFunction DsDeviceButtonCross;
        [RTTI.Member(117, 0x470, "Functions")] public ControllerFunction DsDeviceButtonCircle;
        [RTTI.Member(118, 0x478, "Functions")] public ControllerFunction DsDeviceButtonDPadLeft;
        [RTTI.Member(119, 0x480, "Functions")] public ControllerFunction DsDeviceButtonDPadRight;
        [RTTI.Member(120, 0x488, "Functions")] public ControllerFunction DsDeviceButtonDPadUp;
        [RTTI.Member(121, 0x490, "Functions")] public ControllerFunction DsDeviceButtonDPadDown;
        [RTTI.Member(122, 0x498, "Functions")] public ControllerFunction DsDeviceButtonOption;
        [RTTI.Member(123, 0x4A0, "Functions")] public ControllerFunction DsDeviceButtonTouchPad;
        [RTTI.Member(124, 0x4A8, "Functions")] public ControllerFunction DsDeviceButtonTouchPadLeft;
        [RTTI.Member(125, 0x4B0, "Functions")] public ControllerFunction DsDeviceButtonTouchPadRight;
        [RTTI.Member(126, 0x4D0, "Functions")] public Ref<StickFunction> StickMove;
        [RTTI.Member(127, 0x4D8, "Functions")] public Ref<StickFunction> StickLook;
        [RTTI.Member(128, 0x4E0, "Functions")] public Ref<StickFunction> StickInventorySelection;
        [RTTI.Member(129, 0x4E8, "Functions")] public Ref<StickFunction> DialogueChoice;
        [RTTI.Member(130, 0x4F0, "Functions")] public Ref<StickFunction> StickAnalogZoom;
        [RTTI.Member(131, 0x4F8, "Functions")] public Ref<StickFunction> StickMoveMount;
    }

    [RTTI.Serializable(0x78ECFE49927C386, GameType.DS)]
    public class ControllerFunction
    {
        [RTTI.Member(0, 0x0)] public EButton Button;
        [RTTI.Member(1, 0x4)] public ETriggerType Trigger;
    }

    [RTTI.Serializable(0x35704F6BA6F08FF5, GameType.DS)]
    public class ControllerLegend
    {
        [RTTI.Member(0, 0x0)] public EButton Button;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> SinglePlayerText;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> MultiPlayerText;
    }

    [RTTI.Serializable(0xF56802D5AA888B27, GameType.DS)]
    public class ControllerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8AA9BEFB9EAC31A2, GameType.DS)]
    public class ConvexHull
    {
        [RTTI.Member(0, 0x0)] public Array<Vec3Pack> Vertices;
        [RTTI.Member(1, 0x10)] public Array<ConvexHullTriangle> Triangles;
    }

    [RTTI.Serializable(0xC62B7B75348625E0, GameType.DS)]
    public class ConvexHullTriangle
    {
        [RTTI.Member(0, 0x0)] public int Index0;
        [RTTI.Member(1, 0x4)] public int Index1;
        [RTTI.Member(2, 0x8)] public int Index2;
        [RTTI.Member(3, 0x10)] public PlaneEq Plane;
    }

    [RTTI.Serializable(0xA51867D9E5955B3B, GameType.DS)]
    public class ConvexPolygonalPrismData
    {
        [RTTI.Member(0, 0x0)] public Array<WorldPosition> Points;
        [RTTI.Member(1, 0x10)] public Array<Vec3> Normals;
    }

    [RTTI.Serializable(0xA51ADBB57872624E, GameType.DS)]
    public class ConvolutionReverbSubmixResource : ReverbSubmixResource
    {
    }

    [RTTI.Serializable(0x3A9B1E51749AB806, GameType.DS)]
    public class CoreObject : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x1D6ACA2786C58ADC, GameType.DS)]
    public class CoreTelemetryService : RTTIObject
    {
    }

    [RTTI.Serializable(0x92D7A05D22A5426E, GameType.DS)]
    public class CoreTelemetryServiceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x74E38C7EEECAD8B0, GameType.DS)]
    public class CorpseStimuliComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x449337E17A80F5E8, GameType.DS)]
    public class CorpseStimuliComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<AISmellStimulusResource> SmellStimulus;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<AICorpseFoundMessageResource> CorpseFoundMessage;
        [RTTI.Member(6, 0x38, "Logic")] public float SmellStimuliActivationDelay;
        [RTTI.Member(7, 0x3C, "Logic")] public bool OnlyCreateWhenDead;
    }

    [RTTI.Serializable(0x8686EFC44EF3BB13, GameType.DS)]
    public class CountdownTimer : CoreObject
    {
        [RTTI.Member(2, 0x28)] public float Duration;
        [RTTI.Member(3, 0x2C)] public bool VisibleOnScreen;
        [RTTI.Member(4, 0x34)] public bool CountingUp;
        [RTTI.Member(5, 0x35)] public bool KeepRunningUp;
        [RTTI.Member(6, 0x36)] public bool Save;
        [RTTI.Member(7, 0x38)] public Ref<IntegerFact> DurationFact;
    }

    [RTTI.Serializable(0xF8596DFD73A58B08, GameType.DS)]
    public class CountdownTimerSave : RTTIObject
    {
        [RTTI.Member(1, 0x10, "StateSaving", true)] public bool Running;
        [RTTI.Member(2, 0x14, "StateSaving", true)] public float Duration;
        [RTTI.Member(3, 0x18, "StateSaving", true)] public bool VisibleOnScreen;
        [RTTI.Member(4, 0x1C, "StateSaving", true)] public float ElapsedTime;
        [RTTI.Member(5, 0x20, "StateSaving", true)] public float BlinkStartTime;
    }

    [RTTI.Serializable(0xEDB64161F4AF8682, GameType.DS)]
    public class CountdownTimerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x70DF9D4DDE622372, GameType.DS)]
    public class CraftingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x61777D138D9EC344, GameType.DS)]
    public class CraftingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<CraftingRecipeGroup>> AmmoRecipeGroups;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<CraftingRecipeGroup>> ToolRecipeGroups;
        [RTTI.Member(5, 0x40, "Logic")] public Array<Ref<CraftingRecipeGroup>> UpgradeRecipeGroups;
        [RTTI.Member(6, 0x50, "Logic")] public Array<Ref<CraftingRecipeGroup>> TravelRecipeGroups;
        [RTTI.Member(7, 0x60, "Logic")] public String QuickCraftGesture;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<PerkLevel> UpgradedCraftingPerk;
    }

    [RTTI.Serializable(0x597C215DA581EAFE, GameType.DS)]
    public class CraftingComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1A65BA821B450BC6, GameType.DS)]
    public class CraftingQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<CraftingRecipe>> Recipes;
        [RTTI.Member(4, 0x30, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x5CA35209BE7C68C2, GameType.DS)]
    public class CraftingQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x4A9CF3EC5B6FEDDB, GameType.DS)]
    public class CraftingRecipe : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<LocalizedTextResource> RecipeDescription;
        [RTTI.Member(7, 0x40, "Logic")] public Array<Ref<CraftingRecipeIngredient>> Ingredients;
        [RTTI.Member(8, 0x50, "Logic")] public Ref<EntitlementResource> Entitlement;
    }

    [RTTI.Serializable(0xC893C65D5F1721A, GameType.DS)]
    public class CraftingRecipeGroup : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> GroupName;
        [RTTI.Member(3, 0x28)] public Ref<LocalizedTextResource> GroupDescription;
        [RTTI.Member(4, 0x30)] public Ref<LocalizedTextResource> GroupCraftingTitle;
        [RTTI.Member(5, 0x38)] public Ref<UITexture> IconTexture;
        [RTTI.Member(6, 0x40)] public Array<Ref<CraftingRecipe>> Recipes;
        [RTTI.Member(7, 0x50)] public bool ShowInMenu;
    }

    [RTTI.Serializable(0x4C78C5BFA46A2B55, GameType.DS)]
    public class CraftingRecipeIngredient : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> Item;
        [RTTI.Member(3, 0x28)] public int Amount;
    }

    [RTTI.Serializable(0x2A60BD3F56E3BD5C, GameType.DS)]
    public class CraftingRecipeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x310B01354D55E64A, GameType.DS)]
    public class CraftingSave : RTTIRefObject
    {
        [RTTI.Member(3, 0x28, "StateSave", true)] public Array<GGUUID> UpgradeUUIDs;
        [RTTI.Member(4, 0x38, "StateSave", true)] public Array<GGUUID> UnlockedRecipes;
        [RTTI.Member(5, 0x48, "StateSave", true)] public Array<GGUUID> CraftedRecipes;
    }

    [RTTI.Serializable(0x2E91F539B607235B, GameType.DS)]
    public class CraftingViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x8CA19CCB8994D040, GameType.DS)]
    public class CreateClanRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Name;
        [RTTI.Member(3, 0x28)] public String Tag;
        [RTTI.Member(4, 0x30)] public String Description;
    }

    [RTTI.Serializable(0x1536E23460D3ADE2, GameType.DS)]
    public class CreateComponentAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EntityComponentResource> ComponentResource;
        [RTTI.Member(5, 0x30, "Logic")] public bool PreventDuplicate;
        [RTTI.Member(6, 0x31, "Logic")] public bool AutoRemoveAtTransition;
    }

    [RTTI.Serializable(0xE6E30344D5E00CA2, GameType.DS)]
    public class CreateDamageEntityAction : CreateEntityAction
    {
        [RTTI.Member(24, 0xF0, "Logic")] public EAttackEventLinkType AttackEventLinkType;
    }

    [RTTI.Serializable(0x1B776AB39D8510DB, GameType.DS)]
    public class CreateEffectComponentAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EffectComponentResource> EffectComponentResource;
        [RTTI.Member(5, 0x30, "Logic")] public Mat44 Matrix;
        [RTTI.Member(6, 0x70, "Logic")] public Vec3 RandomRotation;
        [RTTI.Member(7, 0x80, "Logic")] public bool AutoRemoveAtTransition;
        [RTTI.Member(8, 0x81, "Logic")] public bool CreateRelativeToDamageLocation;
        [RTTI.Member(9, 0x82, "Logic")] public bool CreateRelativeToRoot;
        [RTTI.Member(10, 0x84, "Logic")] public float AlignWithReflectionVectorFactor;
    }

    [RTTI.Serializable(0x6939F9F99E5C7449, GameType.DS)]
    public class CreateEntityAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(5, 0x30, "Logic")] public String HelperNode;
        [RTTI.Member(6, 0x40, "Logic")] public Mat44 Matrix;
        [RTTI.Member(7, 0x80, "Logic")] public Ref<RandomMatrixResourceBase> RandomMatrix;
        [RTTI.Member(8, 0x90, "Logic")] public Vec3 RandomRotation;
        [RTTI.Member(9, 0xA0, "Logic")] public bool PassOnDamageImpulse;
        [RTTI.Member(10, 0xA4, "Logic")] public float PassOnDamageImpulseFactor;
        [RTTI.Member(11, 0xB0, "Logic")] public Vec3 InitialPhysicsImpulse;
        [RTTI.Member(12, 0xC0, "Logic")] public Ref<RandomVectorResource> RandomPhysicsImpulse;
        [RTTI.Member(13, 0xC8, "Logic")] public bool PhysicsImpulseUpInWorldSpace;
        [RTTI.Member(14, 0xC9, "Logic")] public bool AutoRemoveAtTransition;
        [RTTI.Member(15, 0xCA, "Logic")] public bool CreateRelativeToDamageLocation;
        [RTTI.Member(16, 0xCB, "Logic")] public bool CreateRelativeToRoot;
        [RTTI.Member(17, 0xCC, "Logic")] public bool IgnoreRelativeRotation;
        [RTTI.Member(18, 0xD0, "Logic")] public float AlignWithReflectionVectorFactor;
        [RTTI.Member(19, 0xD4, "Logic")] public ECreateAsChild CreateAsChild;
        [RTTI.Member(20, 0xD8, "Logic")] public ECreateEntityFactionOverride FactionOverride;
        [RTTI.Member(21, 0xE0, "Logic")] public CPtr<EntityAction> EntityAction;
        [RTTI.Member(22, 0xE8, "Logic")] public ECreateEntityLifetime EntityLifetime;
    }

    [RTTI.Serializable(0xC0589AE8567C7624, GameType.DS)]
    public class CreateEntityActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0x6DB69047E71042DF, GameType.DS)]
    public class CreateEntityActorResource : EntityActorResource
    {
        [RTTI.Member(21, 0x60, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(22, 0x68, "Logic")] public Ref<SpawnSetupConcrete> SpawnSetup;
        [RTTI.Member(20, 0x70, "Logic")] public bool LocalActor;
        [RTTI.Member(23, 0x71, "Logic")] public bool RemoveEntityOnUnBind;
        [RTTI.Member(24, 0x72, "Logic")] public bool CensorSensitiveContent;
    }

    [RTTI.Serializable(0xA116E54747190DF2, GameType.DS)]
    public class CreateGrenadeTriggerComponentAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<GrenadeTriggerComponentResource> ComponentResource;
        [RTTI.Member(5, 0x30, "Logic")] public bool TriggerWithThisAttackEvent;
    }

    [RTTI.Serializable(0xDE6C59876BD47A1F, GameType.DS)]
    public class CrowdComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x359B94727BE0B1B8, GameType.DS)]
    public class CrowdImpostorResource : EntityImpostorResource
    {
        [RTTI.Member(6, 0x38)] public Array<Ref<FactValueBase>> Facts;
    }

    [RTTI.Serializable(0xAECD7CFAB2899842, GameType.DS)]
    public class CrowdManagerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<CrowdSpawnManagerResource> CrowdSpawnManagerResource;
    }

    [RTTI.Serializable(0x10C4E97C26F82895, GameType.DS)]
    public class CrowdMember : RTTIObject
    {
    }

    [RTTI.Serializable(0x88EE88355C807C49, GameType.DS)]
    public class CrowdMemberSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB1F07DD1173C1B6C, GameType.DS)]
    public class CrowdSpawnManager : CoreObject
    {
    }

    [RTTI.Serializable(0xD697309BDAD7FA79, GameType.DS)]
    public class CrowdSpawnManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int MaxEntities;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<NavMeshBuilderSettings> NavMeshBuilderSettings;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<EntityImpostorResource> DefaultImpostorResource;
    }

    [RTTI.Serializable(0x30934403D6C3A68C, GameType.DS)]
    public class CrowdSpawnManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x28160751BFB89A00, GameType.DS)]
    public class CrowdZone : SmartObjectArea
    {
        [RTTI.Member(16, 0x110, "General")] public Array<CrowdZoneSpawnSetupLink> ConstantCrowdSpawnSetup;
        [RTTI.Member(15, 0x120, "General")] public Ref<SpawnSetupBase> CrowdSpawnSetup;
        [RTTI.Member(17, 0x128, "General")] public int MaxEntityCount;
    }

    [RTTI.Serializable(0xCB9E9E1B37852B6A, GameType.DS)]
    public class CrowdZoneInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xE095BA73D80C0A4B, GameType.DS)]
    public class CrowdZoneSpawnSetupLink
    {
        [RTTI.Member(0, 0x0)] public int Amount;
        [RTTI.Member(1, 0x8)] public Ref<SpawnSetupBase> SpawnSetup;
    }

    [RTTI.Serializable(0xC290979DC42CB6C4, GameType.DS)]
    public class CrowdZoneSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEC1EB0BD508D61A6, GameType.DS)]
    public class CubemapBlendRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> BlendShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> IndexerShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> DebugOverwriteFaceShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> DownscaleShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> IrradianceShader;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> UpscaleShader;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> FilterShader;
    }

    [RTTI.Serializable(0xF0A35C3EA600A33A, GameType.DS)]
    public class CubemapZone : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(13, 0x100, "General")] public float FadeDistance;
        [RTTI.Member(14, 0x104, "General")] public bool UseAsGlobal;
        [RTTI.Member(15, 0x105, "General")] public bool DisableRenormalization;
        [RTTI.Member(12, 0x108, "General")] public int Priority;
        [RTTI.Member(16, 0x10C, "General")] public float DefaultIntensity;
        [RTTI.Member(21, 0x110, "Render")] public int TextureResolution;
        [RTTI.Member(17, 0x114, "General")] public ECubemapZoneDataStorageMode StorageMode;
        [RTTI.Member(18, 0x118, "General")] public float StreamingActivationDistance;
        [RTTI.Member(22, 0x120, "Render")] public Ref<Texture> CubemapTexture;
        [RTTI.Member(19, 0x140, "General")] public Vec3 CapturePointOffset;
    }

    [RTTI.Serializable(0xC0E543E7C2B145E8, GameType.DS)]
    public class CubemapZoneEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x566643C7D6C8149, GameType.DS)]
    public class CubemapZoneEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "General")] public Ref<CubemapZone> CubemapZone;
        [RTTI.Member(13, 0x48, "General")] public Ref<CurveResource> IntensityCurveResource;
    }

    [RTTI.Serializable(0x28EB912AE548D02E, GameType.DS)]
    public class CubemapZoneManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x4163E47505FB45F, GameType.DS)]
    public class CubemapbakeOnlyGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA53C5A902FC50B9, GameType.DS)]
    public class CurvePoint
    {
        [RTTI.Member(0, 0x0)] public Vec2Pack Position;
        [RTTI.Member(1, 0x8)] public float InTangent;
        [RTTI.Member(2, 0xC)] public float OutTangent;
        [RTTI.Member(3, 0x10)] public float InTangentX;
        [RTTI.Member(4, 0x14)] public float OutTangentX;
    }

    [RTTI.Serializable(0xE2B6AAEEBDF08D39, GameType.DS)]
    public class CurveResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<CurvePoint> CurvePoints;
        [RTTI.Member(8, 0x30, "General")] public Vec2 HighestPoint;
        [RTTI.Member(7, 0x40, "General")] public Vec2 LowestPoint;
        [RTTI.Member(4, 0x50, "General")] public ECurveEvaluationType CurveEvaluationType;
        [RTTI.Member(5, 0x51, "General")] public EInfinityMode PreInfinity;
        [RTTI.Member(6, 0x52, "General")] public EInfinityMode PostInfinity;
    }

    [RTTI.Serializable(0xA7180DD4D95D76B8, GameType.DS)]
    public class CurveResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6ACB5A7DA1965054, GameType.DS)]
    public class CustomInstigatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8CE08041CCF1B0F6, GameType.DS)]
    public class CustomInstigatorComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x9844D779F0E21147, GameType.DS)]
    public class CustomQuestReward : QuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<GraphProgramResource> Graph;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<Texture> Icon;
        [RTTI.Member(9, 0x48, "Logic")] public Ref<UITexture> UIIcon;
        [RTTI.Member(10, 0x50, "Logic")] public Ref<LocalizedTextResource> DisplayName;
    }

    [RTTI.Serializable(0xBD321A05F3C7A8E, GameType.DS)]
    public class CustomizedAttachToHelperMover : AttachToHelperMover
    {
    }

    [RTTI.Serializable(0x9A602BE2D0494D4A, GameType.DS)]
    public class CustomizedAttachToHelperMoverResource : AttachToHelperMoverResource
    {
        [RTTI.Member(13, 0x90, "Logic")] public bool EnablePseudoSimulation;
        [RTTI.Member(14, 0x98, "Logic")] public String AttachingHelperName;
        [RTTI.Member(15, 0xA0, "Logic")] public float PositionTraceRate;
        [RTTI.Member(16, 0xA4, "Logic")] public float AngularTraceRate;
        [RTTI.Member(17, 0xB0, "Logic")] public Vec3 DistanceLimitMin;
        [RTTI.Member(18, 0xC0, "Logic")] public Vec3 DistanceLimitMax;
        [RTTI.Member(19, 0xD0, "Logic")] public Vec3 AngularDifferenceLimitMin;
        [RTTI.Member(20, 0xE0, "Logic")] public Vec3 AngularDifferenceLimitMax;
        [RTTI.Member(21, 0xF0, "Logic")] public float PositionMultiplier;
        [RTTI.Member(22, 0xF4, "Logic")] public float AngularMultiplier;
        [RTTI.Member(23, 0xF8, "Logic")] public float GravityValue;
    }

    [RTTI.Serializable(0x9E216603F55E27E8, GameType.DS)]
    public class DHighwaySyncControlCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xB4D3D3EE32DDFB89, GameType.DS)]
    public class DHighwaySyncControlCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA833E1F25B681B7, GameType.DS)]
    public class DLCProductResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DLCResource>> Packs;
        [RTTI.Member(3, 0x30)] public String ProductIdSuffix;
    }

    [RTTI.Serializable(0x4CF31D2EB7E0138C, GameType.DS)]
    public class DLCResource : Resource
    {
        [RTTI.Member(2, 0x20)] public int PackID;
        [RTTI.Member(3, 0x28)] public String PackName;
        [RTTI.Member(4, 0x30)] public String ProductIdSuffix;
    }

    [RTTI.Serializable(0x1E2555B01102F012, GameType.DS)]
    public class DRange
    {
        [RTTI.Member(0, 0x0)] public double Min;
        [RTTI.Member(1, 0x8)] public double Max;
    }

    [RTTI.Serializable(0xA427DBFD2F8264CA, GameType.DS)]
    public class DS3DPrintMeshControl : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String MeshName;
        [RTTI.Member(3, 0x28)] public float MinHeight;
        [RTTI.Member(4, 0x2C)] public bool IsUpperHolo;
        [RTTI.Member(5, 0x30)] public float MaxHeightForHolo;
    }

    [RTTI.Serializable(0x8247919600B47E98, GameType.DS)]
    public class DS3DPrintModelComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x10E32DF9E644A4D9, GameType.DS)]
    public class DS3DPrintModelComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x61F147BAC8E5A8D2, GameType.DS)]
    public class DS3DPrintModelComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20)] public float HeightMin;
        [RTTI.Member(4, 0x24)] public float HeightMax;
        [RTTI.Member(2, 0x28)] public float HieghtUpdateSpeed;
        [RTTI.Member(10, 0x2C)] public float DefaultSlicePlaneEmitter;
        [RTTI.Member(11, 0x30)] public float RemoveSlicePlaneEmitter;
        [RTTI.Member(5, 0x38)] public Array<Ref<DS3DPrintMeshControl>> MeshControlList;
        [RTTI.Member(6, 0x48)] public Ref<SoundResource> ConstructionLoopSound;
        [RTTI.Member(7, 0x50)] public Ref<SoundResource> ConstructionLoopSoundForOnline;
        [RTTI.Member(8, 0x58)] public Ref<SoundResource> UpgradeConstructionSound;
        [RTTI.Member(9, 0x60)] public Ref<SoundResource> RemoveConstructionSound;
    }

    [RTTI.Serializable(0x3186E2EA634AFE38, GameType.DS)]
    public class DSAIAuralSensor : AIAuralSensor
    {
        [RTTI.Member(6, 0x28, "HearingDB")] public float AudibleDecibel;
        [RTTI.Member(7, 0x2C, "HearingDB")] public float LimitDistance;
    }

    [RTTI.Serializable(0x8D6BDDE35E92F910, GameType.DS)]
    public class DSAIBodyComponent : AIBodyComponent
    {
    }

    [RTTI.Serializable(0x5849B28498FD112F, GameType.DS)]
    public class DSAIBodyComponentResource : AIBodyComponentResource
    {
    }

    [RTTI.Serializable(0x79637B046F9D936F, GameType.DS)]
    public class DSAIContextResource : AIContextResource
    {
        [RTTI.Member(36, 0xC8, "Obstacles")] public bool IgnoreBounder;
        [RTTI.Member(37, 0xC9, "Obstacles")] public bool IgnoreWaterAndTar;
        [RTTI.Member(38, 0xCA, "Obstacles")] public uint16 OverrideObstacleBitField;
        [RTTI.Member(39, 0xD0, "Obstacles")] public Array<uint16> OverrideObstacleCosts;
    }

    [RTTI.Serializable(0x854BD3F40C7BAA2A, GameType.DS)]
    public class DSAIExclusionNavTiles : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public Ref<NavMeshBuilderSettings> Settings;
        [RTTI.Member(4, 0x28, "Settings")] public EDSArea Area;
        [RTTI.Member(5, 0x30, "Settings")] public Array<IVec2> ExclusionTileIndices;
        [RTTI.Member(6, 0x40, "Settings")] public IVec2 MinIndex;
        [RTTI.Member(7, 0x48, "Settings")] public IVec2 MaxIndex;
    }

    [RTTI.Serializable(0xCD79FEE7202F5ED3, GameType.DS)]
    public class DSAIExclusionNavTilesSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1779C129F12F1149, GameType.DS)]
    public class DSAIGroup : AIGroup
    {
    }

    [RTTI.Serializable(0x502C4EF0A0C24B84, GameType.DS)]
    public class DSAIGroupResource : AIGroupResource
    {
        [RTTI.Member(18, 0x90, "Ticket")] public Array<AIGroupTicketDescriptor> TicketDescriptors;
    }

    [RTTI.Serializable(0xEF45470605428D22, GameType.DS)]
    public class DSAIHTNPlannerDaemonBodyControlCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x964CBF50288F673B, GameType.DS)]
    public class DSAIHTNPlannerDaemonBodyState : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x15FBDDCD84D515D8, GameType.DS)]
    public class DSAIHTNPlannerDaemonCatcherCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x9AF441D8F67A00B4, GameType.DS)]
    public class DSAIHTNPlannerDaemonCliffCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xD4C5BB5B057BBE67, GameType.DS)]
    public class DSAIHTNPlannerDaemonCombatSettings : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x6FDD8FE9588611D7, GameType.DS)]
    public class DSAIHTNPlannerDaemonCoverCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xD6C186FDBFEDB5A, GameType.DS)]
    public class DSAIHTNPlannerDaemonDomainVariablesCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC0D62FB0C547545B, GameType.DS)]
    public class DSAIHTNPlannerDaemonEntityState : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xB941A3808DC05195, GameType.DS)]
    public class DSAIHTNPlannerDaemonGazerCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xB835C5EC0861706F, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupCatcherUtil : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xB18C24DCA568D574, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupFollowerZone : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xF4CC438A77CA3DFC, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupMuleCP : DSAIHTNPlannerDaemonGroupMuleCPAccessor
    {
    }

    [RTTI.Serializable(0x71D6BF3ABABE9543, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupMuleCPAccessor : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x6DB29531A29CA089, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupMuleCombat : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x696D8755C602CE34, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupMuleVehicleUnion : DSAIHTNPlannerDaemonGroupMuleCP
    {
    }

    [RTTI.Serializable(0x4ED28BB3D5C70CAE, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupRaderBaggage : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xCBECD3BAD24DDF71, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupState : AIHTNPlannerDaemonGroupState
    {
    }

    [RTTI.Serializable(0x79D7D33D5AA2F59, GameType.DS)]
    public class DSAIHTNPlannerDaemonGroupVehicle : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x334D8C63E5DBBCE5, GameType.DS)]
    public class DSAIHTNPlannerDaemonHiggsCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x83DF46B230971686, GameType.DS)]
    public class DSAIHTNPlannerDaemonMuleCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x8C230D44783EF7C8, GameType.DS)]
    public class DSAIHTNPlannerDaemonNoticeAndKnowledge : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xEFC1CD3F291EEDF8, GameType.DS)]
    public class DSAIHTNPlannerDaemonPathfinder : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x7E74474353AEA5FF, GameType.DS)]
    public class DSAIHTNPlannerDaemonPatrolCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x6E09E150CFE72743, GameType.DS)]
    public class DSAIHTNPlannerDaemonPlayerInfo : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0x982C5092B4A588A7, GameType.DS)]
    public class DSAIHTNPlannerDaemonPositionPicker : AIHTNPlannerDaemonPositionPickerGame
    {
    }

    [RTTI.Serializable(0x1B50A83D9B0973AD, GameType.DS)]
    public class DSAIHTNPlannerDaemonUtilities : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x210E97C739040D63, GameType.DS)]
    public class DSAIHTNPlannerDaemonWarriorsCallTerm : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x6AFE84069B683361, GameType.DS)]
    public class DSAIHTNPlannerDaemonWeaponUser : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x33958F80D5A0FDC1, GameType.DS)]
    public class DSAIHTNPrimitiveDistributorPriority : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x1A9D1BD32238D7C7, GameType.DS)]
    public class DSAIHTNPrimitiveTaskAction : DSAIHTNPrimitiveTaskActionBase
    {
    }

    [RTTI.Serializable(0xADC0BFF449D532C4, GameType.DS)]
    public class DSAIHTNPrimitiveTaskActionBase : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x303C585040B96BA4, GameType.DS)]
    public class DSAIHTNPrimitiveTaskCheckCanShoot : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA1AD54DBDDF8CBAB, GameType.DS)]
    public class DSAIHTNPrimitiveTaskCheckGameActor : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x37453539CEDDA4D3, GameType.DS)]
    public class DSAIHTNPrimitiveTaskController : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xF5C091BC6985E07D, GameType.DS)]
    public class DSAIHTNPrimitiveTaskDomainVariable : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xB86AEFBCF8549C78, GameType.DS)]
    public class DSAIHTNPrimitiveTaskFail : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x841F21D5FBEA8775, GameType.DS)]
    public class DSAIHTNPrimitiveTaskJump : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x46C0AF255A3E1E0C, GameType.DS)]
    public class DSAIHTNPrimitiveTaskNotice : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x491ABA1C3E886FAF, GameType.DS)]
    public class DSAIHTNPrimitiveTaskPatrol : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA2000AC5A891B8D8, GameType.DS)]
    public class DSAIHTNPrimitiveTaskRequestHighLevelUpdateNext : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xE9E06E7B5900303A, GameType.DS)]
    public class DSAIHTNPrimitiveTaskReturnTicket : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xB5EA61C704C098A1, GameType.DS)]
    public class DSAIHTNPrimitiveTaskTryMuleAttack : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x3ED74B9D8EA93812, GameType.DS)]
    public class DSAIHTNPrimitiveTaskTurn : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x8E055B3CDFE13CA6, GameType.DS)]
    public class DSAIHTNPrimitiveTaskVehicleMove : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x163AB700E74D5175, GameType.DS)]
    public class DSAIHTNPrimitiveTaskVoice : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE214C26794620B2C, GameType.DS)]
    public class DSAIHTNPrimitiveTaskWait : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xDF50EEEE3424B3F5, GameType.DS)]
    public class DSAIHTNPrimitiveTaskWalkKnowledgeSegment : DSAIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0xAF7E4F1064B29AF3, GameType.DS)]
    public class DSAIHTNPrimitiveTaskWalkSegment : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xC4D1E7D12F8FC8A7, GameType.DS)]
    public class DSAIHtnPlannerDaemonGroup : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<String> DaemonNames;
    }

    [RTTI.Serializable(0xCB21849883EFF4F9, GameType.DS)]
    public class DSAIHtnPlannerResource : AIHTNPlannerResource
    {
        [RTTI.Member(12, 0xA8, "Daemon")] public Array<Ref<DSAIHtnPlannerDaemonGroup>> DaemonGroups;
    }

    [RTTI.Serializable(0x157D3FB08F615EE7, GameType.DS)]
    public class DSAIIndividual : DSAIIndividualBase
    {
    }

    [RTTI.Serializable(0x878637BA432892E0, GameType.DS)]
    public class DSAIIndividualBase : AIIndividual
    {
    }

    [RTTI.Serializable(0x66C11BF5D8E5F143, GameType.DS)]
    public class DSAIIndividualBaseResource : AIIndividualResource
    {
        [RTTI.Member(30, 0xA8, "DS")] public bool UseCombatSituation;
        [RTTI.Member(31, 0xB0, "DS")] public Ref<DSAISensingModuleResource> DSSensingModule;
        [RTTI.Member(32, 0xB8, "DS")] public bool IsDummyAi;
        [RTTI.Member(33, 0xC0, "DS")] public Array<DSAIPathObjectCategoryToBodyGoalMapping> OffMeshLinkToBodyGoalMapping;
    }

    [RTTI.Serializable(0xED8F47CAFC02EED1, GameType.DS)]
    public class DSAIIndividualComponent : AIIndividualComponent
    {
    }

    [RTTI.Serializable(0x22E61FE86088CD07, GameType.DS)]
    public class DSAIIndividualComponentResource : AIIndividualComponentResource
    {
    }

    [RTTI.Serializable(0x802854938B6D7FD9, GameType.DS)]
    public class DSAIIndividualResource : DSAIIndividualBaseResource
    {
        [RTTI.Member(35, 0xD0, "General")] public bool IsGameActor;
    }

    [RTTI.Serializable(0xB9FCE54DE8D04445, GameType.DS)]
    public class DSAIManualCoverPoint : WorldNode
    {
        [RTTI.Member(4, 0x60)] public float Width;
        [RTTI.Member(5, 0x64)] public bool ShootLeft;
        [RTTI.Member(6, 0x65)] public bool ShootRight;
        [RTTI.Member(7, 0x66)] public bool ShootUp;
        [RTTI.Member(8, 0x68)] public EDSAICoverType CoverType;
        [RTTI.Member(9, 0x70)] public Ref<NavMeshBuilderSettings> NavmeshAlignment;
    }

    [RTTI.Serializable(0x787BAC14919315B3, GameType.DS)]
    public class DSAINoPerceptionKnowledgeComponentBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xDAC54F8E7E57D236, GameType.DS)]
    public class DSAINoPerceptionKnowledgeComponentResourceBase : Resource
    {
    }

    [RTTI.Serializable(0x4B3720ECD2988794, GameType.DS)]
    public class DSAINoticeAndKnowledge : DSAINoticeAndKnowledgeBase
    {
    }

    [RTTI.Serializable(0x2F43EDA4D3169711, GameType.DS)]
    public class DSAINoticeAndKnowledgeBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x98081858056D49F2, GameType.DS)]
    public class DSAINoticeAndKnowledgeBaseResource : Resource
    {
        [RTTI.Member(3, 0x20, "Knowledge")] public Array<Ref<DSAINoPerceptionKnowledgeComponentResourceBase>> NoPerceptionKnowledges;
    }

    [RTTI.Serializable(0xFC158ECF908A05A3, GameType.DS)]
    public class DSAINoticeAndKnowledgePublisher : CoreObject
    {
    }

    [RTTI.Serializable(0x9CAD97CE9BF09C0A, GameType.DS)]
    public class DSAINoticeAndKnowledgePublisherResource : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x50D8AA680634E9C6, GameType.DS)]
    public class DSAINoticeAndKnowledgeResource : DSAINoticeAndKnowledgeBaseResource
    {
        [RTTI.Member(5, 0x30, "Notice")] public Ref<DSAINoticeAndKnowledgePublisherResource> Publisher;
        [RTTI.Member(6, 0x38, "Notice")] public EDSNoticeAndKnowledgeCharacterType CharacterType;
        [RTTI.Member(7, 0x40, "Notice")] public Array<Ref<DSInferencePluginBaseResource>> InferencePlugins;
        [RTTI.Member(9, 0x50, "NoticeWillBeRunOverSettings")] public float MaximumTimeToReach;
        [RTTI.Member(10, 0x54, "NoticeWillBeRunOverSettings")] public float MinimumTimeToReach;
        [RTTI.Member(11, 0x58, "NoticeWillBeRunOverSettings")] public float OrthogonalDistance;
        [RTTI.Member(12, 0x5C, "NoticeWillBeRunOverSettings")] public float MinimumSpeed;
        [RTTI.Member(13, 0x60, "NoticeWillBeRunOverSettings")] public float DodgeProbability;
        [RTTI.Member(15, 0x64, "NoticeGrenadeSettings")] public float GrenadeRange;
    }

    [RTTI.Serializable(0x6E02169FD9DEEACB, GameType.DS)]
    public class DSAIPathObjectCategoryToBodyGoalMapping
    {
        [RTTI.Member(1, 0x0, "General")] public Ref<AIPathObjectCategory> AIPathObjectCategory;
        [RTTI.Member(2, 0x8, "General")] public String BodyGoal;
    }

    [RTTI.Serializable(0xE8DD5566116E6F2C, GameType.DS)]
    public class DSAIPerceptionResource : AIPerceptionResource
    {
        [RTTI.Member(8, 0x40, "DS")] public Array<Ref<AISensor>> Sensors;
        [RTTI.Member(9, 0x50, "DS")] public float VisionInterpolationTime;
        [RTTI.Member(10, 0x58, "DS")] public Ref<CurveResource> VisionScaleInterpCurve;
    }

    [RTTI.Serializable(0xE2913A8EAB25E151, GameType.DS)]
    public class DSAISensingModuleResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<DSAINoticeAndKnowledgeBaseResource> NoticeAndKnowledge;
    }

    [RTTI.Serializable(0xCBE901B666172E1A, GameType.DS)]
    public class DSAIStealthArea : NavMeshObject
    {
    }

    [RTTI.Serializable(0x46A69E6F613979DF, GameType.DS)]
    public class DSAIUsableComponent : AIUsableComponent
    {
    }

    [RTTI.Serializable(0x4A87DEADA88599DD, GameType.DS)]
    public class DSAIUsableComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x28)] public String UsableObjectNameString;
        [RTTI.Member(3, 0x30)] public Ref<UseLocationComponentResource> UseLocationComponentResource;
    }

    [RTTI.Serializable(0xD21AF105C9EADADC, GameType.DS)]
    public class DSAIVisualSensor : AIVisualSensor
    {
        [RTTI.Member(30, 0xA8, "DS")] public bool DisableSensorObstruction;
    }

    [RTTI.Serializable(0x15C36769C498AC13, GameType.DS)]
    public class DSAKukanEffConfig
    {
        [RTTI.Member(1, 0x0, "Shake")] public float ShakeX_RangeMin;
        [RTTI.Member(2, 0x4, "Shake")] public float ShakeX_RangeMax;
        [RTTI.Member(3, 0x8, "Shake")] public float ShakeY_RangeMin;
        [RTTI.Member(4, 0xC, "Shake")] public float ShakeY_RangeMax;
        [RTTI.Member(5, 0x10, "Shake")] public float ShakeX_HzSpeedRateMin;
        [RTTI.Member(6, 0x14, "Shake")] public float ShakeX_HzSpeedRateMax;
        [RTTI.Member(7, 0x18, "Shake")] public float ShakeY_HzSpeedRateMin;
        [RTTI.Member(8, 0x1C, "Shake")] public float ShakeY_HzSpeedRateMax;
        [RTTI.Member(9, 0x20, "Shake")] public float CircleMoveRate;
        [RTTI.Member(10, 0x24, "Shake")] public float WeightChangeIntensityDuration;
        [RTTI.Member(11, 0x28, "Shake")] public float WeightChangeIntensityValue;
        [RTTI.Member(12, 0x2C, "Shake")] public float WeightChangeInsideIntensityValue;
        [RTTI.Member(13, 0x30, "Shake")] public float WeightChangeCircleStopMoveTime;
        [RTTI.Member(15, 0x40, "Level")] public DSAKukanEffFloorLevelConfig2 Level_Minimam;
        [RTTI.Member(16, 0x90, "Level")] public DSAKukanEffFloorLevelConfig2 Level_NormalWeight;
        [RTTI.Member(17, 0xE0, "Level")] public DSAKukanEffFloorLevelConfig2 Level_LoadingOver;
        [RTTI.Member(18, 0x130, "Level")] public DSAKukanEffFloorLevelConfig2 Level_LoadingOverHeavy;
        [RTTI.Member(19, 0x180, "Level")] public DSAKukanEffFloorLevelConfig2 Level_Max;
    }

    [RTTI.Serializable(0xDA522E80ACD03C38, GameType.DS)]
    public class DSAKukanEffFloorLevelConfig2
    {
        [RTTI.Member(0, 0x0)] public float StartWeightRate;
        [RTTI.Member(1, 0x4)] public float CenterOfGravityPosXRate;
        [RTTI.Member(2, 0x8)] public float CenterOfGravityPosYRate;
        [RTTI.Member(3, 0xC)] public float PosLerpSpeed;
        [RTTI.Member(4, 0x10)] public float Scale;
        [RTTI.Member(5, 0x14)] public float ScaleLerpSpeed;
        [RTTI.Member(6, 0x20)] public Vec3 Color;
        [RTTI.Member(7, 0x30)] public float ColorLerpSpeed;
        [RTTI.Member(8, 0x34)] public float Alpha;
        [RTTI.Member(9, 0x38)] public float AlphaLerpSpeed;
        [RTTI.Member(10, 0x3C)] public float Intensity;
        [RTTI.Member(11, 0x40)] public float IntensityLerpSpeed;
        [RTTI.Member(12, 0x44)] public float NoisePow;
        [RTTI.Member(13, 0x48)] public float NoisePowLerpSpeed;
    }

    [RTTI.Serializable(0x72DBFC0C8AC5446D, GameType.DS)]
    public class DSAirWallEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5469A13A5E9C520C, GameType.DS)]
    public class DSAirWallEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xD610A3011789C767, GameType.DS)]
    public class DSAirWallEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x30, "Rendering")] public Ref<RenderEffectResource> BarriorRenderEffectResource;
        [RTTI.Member(4, 0x38, "Rendering")] public Ref<RenderEffectResource> TextRenderEffectResource;
        [RTTI.Member(20, 0x40, "Shader")] public Ref<CurveResource> BarriorAlphaCurve;
        [RTTI.Member(21, 0x48, "Shader")] public Ref<CurveResource> TextAlphaCurve;
        [RTTI.Member(18, 0x50, "OdradekSensor")] public Ref<CurveResource> FitPolygonDistanceUVCorrectCurveResource;
        [RTTI.Member(23, 0x58, "Material")] public Ref<MaterialTypeResource> SuccessMaterial;
        [RTTI.Member(24, 0x60, "Material")] public Ref<MaterialTypeResource> DenyMaterial;
        [RTTI.Member(26, 0x68, "Sound")] public Ref<SoundResource> PlaySoundResource;
        [RTTI.Member(8, 0x70, "Rendering")] public Vec2 TextPosOffset;
        [RTTI.Member(5, 0x80, "Rendering")] public float FlickAlphaRate;
        [RTTI.Member(6, 0x84, "Rendering")] public float FlickAlphaThreashould;
        [RTTI.Member(9, 0x88, "Rendering")] public float ShadowOffset;
        [RTTI.Member(10, 0x8C, "Rendering")] public float ShadowColorOffset;
        [RTTI.Member(11, 0x90, "Rendering")] public float ShadowAlphaOffset;
        [RTTI.Member(13, 0x94, "Rendering")] public float BarriorMeshSize;
        [RTTI.Member(14, 0x98, "Rendering")] public float PushEdgeMargin;
        [RTTI.Member(15, 0x9C, "Rendering")] public float HeightOffset;
        [RTTI.Member(12, 0xA0, "Rendering")] public int NumShadow;
        [RTTI.Member(17, 0xA4, "OdradekSensor")] public bool EnableSensorReaction;
        [RTTI.Member(7, 0xA5, "Rendering")] public bool EnableFlickAlpha;
    }

    [RTTI.Serializable(0x1F0739CD42E67B6B, GameType.DS)]
    public class DSAirplaneGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0xCCDC3BD99BB29368, GameType.DS)]
    public class DSAirplaneGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "Airplane")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(13, 0xB8, "WarriorParticle")] public bool Enable;
        [RTTI.Member(14, 0xBC, "WarriorParticle")] public float NoParticleStartTime;
        [RTTI.Member(15, 0xC0, "WarriorParticle")] public float NoParticleEndTime;
        [RTTI.Member(16, 0xC4, "WarriorParticle")] public float FadeTime;
    }

    [RTTI.Serializable(0x675A7B74676F42DA, GameType.DS)]
    public class DSAirplaneGameActorLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF12C6219F5EDCF61, GameType.DS)]
    public class DSAirplaneGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0x451BEA56563D0BCB, GameType.DS)]
    public class DSAirplaneGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0x225B47ED458C7569, GameType.DS)]
    public class DSAirplaneMachineGunHelperNamesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xACF6E19B35989BD1, GameType.DS)]
    public class DSAirplaneMachineGunHelperNamesComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<String> HelperNames;
        [RTTI.Member(3, 0x30)] public Ref<ParticleSystemResource> MachineGunEffect;
        [RTTI.Member(4, 0x38)] public bool FireSimultaneously;
    }

    [RTTI.Serializable(0xA8F40C5B3B3BA310, GameType.DS)]
    public class DSAirplanePathPoint
    {
        [RTTI.Member(0, 0x0)] public WorldTransform TargetTransform;
        [RTTI.Member(1, 0x40)] public float TargetSpeed;
    }

    [RTTI.Serializable(0x756E6A8993ADEBDF, GameType.DS)]
    public class DSAmelieComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x33AA07BF4AEBFDA0, GameType.DS)]
    public class DSAmelieComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x607FF0DC0E65D3C6, GameType.DS)]
    public class DSAmelieGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0xDDCEDA8EA16CEF83, GameType.DS)]
    public class DSAmelieGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "Amelie")] public bool AbleToMove;
    }

    [RTTI.Serializable(0x118196E8F365C2C1, GameType.DS)]
    public class DSAmelieGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xDD781B7812129379, GameType.DS)]
    public class DSAmelieGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0xDD09408C5F18D4D0, GameType.DS)]
    public class DSAmelieGestureComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA13B93DAA5FC8470, GameType.DS)]
    public class DSAmelieGestureComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float GestureIntervalMin;
        [RTTI.Member(4, 0x24, "Logic")] public float GestureIntervalMax;
        [RTTI.Member(5, 0x28, "Logic")] public int GestureMotionStartIndex;
        [RTTI.Member(6, 0x2C, "Logic")] public int GestureMotionEndIndex;
        [RTTI.Member(7, 0x30, "Logic")] public int WaveHandMotionIndex;
    }

    [RTTI.Serializable(0x75986968A11C6BCE, GameType.DS)]
    public class DSAmelieGestureComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA7B141105F6EDDBC, GameType.DS)]
    public class DSAmmoConfig : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> RifleAmmoResource;
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> ShotGunAmmoResource;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> HandGunAmmoResource;
        [RTTI.Member(5, 0x38)] public Ref<EntityResource> RifleCartridgeResource;
        [RTTI.Member(6, 0x40)] public Ref<EntityResource> ShotGunCartridgeResource;
        [RTTI.Member(7, 0x48)] public Ref<EntityResource> HandGunCartridgeResource;
        [RTTI.Member(8, 0x50)] public Ref<EntityResource> GrenadeShellCartridgeResource;
    }

    [RTTI.Serializable(0xE63EA0A1AEB635CF, GameType.DS)]
    public class DSAmmoSystem : RTTIObject
    {
    }

    [RTTI.Serializable(0x3F701D25A1E96EED, GameType.DS)]
    public class DSAnimCustomResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public int32 FrameInterval;
    }

    [RTTI.Serializable(0x323E4AABE6A4AF4A, GameType.DS)]
    public class DSAnimHelperInfoBase : Resource
    {
    }

    [RTTI.Serializable(0x4C42E33CBCAEE602, GameType.DS)]
    public class DSAnimHelperInfoDirectional : DSAnimHelperInfoBase
    {
        [RTTI.Member(2, 0x20)] public String AnimationVariableName;
        [RTTI.Member(3, 0x28)] public Array<DSAnimHelperInfoValuePair> HelperInfoValuePairs;
        [RTTI.Member(4, 0x38)] public bool Switch;
    }

    [RTTI.Serializable(0x38E16D9039075538, GameType.DS)]
    public class DSAnimHelperInfoItem
    {
        [RTTI.Member(0, 0x0)] public Vec3 HelperPosition;
        [RTTI.Member(1, 0x10)] public Quat HelperRotation;
        [RTTI.Member(2, 0x20)] public Vec3 HelperVelocity;
        [RTTI.Member(3, 0x30)] public Vec3 RootPosition;
        [RTTI.Member(4, 0x40)] public float RootHeading;
        [RTTI.Member(5, 0x44)] public float EventTime;
    }

    [RTTI.Serializable(0x5B8AFFA4AE906F3A, GameType.DS)]
    public class DSAnimHelperInfoSource : DSAnimHelperInfoBase
    {
        [RTTI.Member(2, 0x20)] public Array<DSAnimHelperInfoItem> HelperInfos;
    }

    [RTTI.Serializable(0xAC3440B92B97128A, GameType.DS)]
    public class DSAnimHelperInfoValuePair
    {
        [RTTI.Member(0, 0x0)] public Ref<DSAnimHelperInfoBase> AttackInfo;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0xEC849B58FF2079AE, GameType.DS)]
    public class DSAnimHelperItem
    {
        [RTTI.Member(0, 0x0)] public String HelperName;
        [RTTI.Member(1, 0x8)] public AnimationEventID EventID;
    }

    [RTTI.Serializable(0xDA084F4A92878716, GameType.DS)]
    public class DSAnimInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DSAnimStateInfoResource>> AnimStateInfoResources;
        [RTTI.Member(4, 0x30, "General")] public Ref<MorphemeAnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(5, 0x38, "General", true)] public Ref<SkinnedModelResource> ModelResource;
    }

    [RTTI.Serializable(0x4A9ECE57E3D94C42, GameType.DS)]
    public class DSAnimStateInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public AnimationNodeID StateID;
        [RTTI.Member(4, 0x28, "General")] public String StateName;
        [RTTI.Member(5, 0x30, "General")] public String AnimStateName;
        [RTTI.Member(6, 0x38, "General")] public Array<String> BoolAnimVarNames;
        [RTTI.Member(7, 0x48, "General")] public Array<FloatAnimationVariableValue> FloatAnimVars;
        [RTTI.Member(8, 0x58, "General")] public Ref<DSAnimHelperInfoBase> HelperInfo;
        [RTTI.Member(9, 0x60, "General")] public Array<DSAnimHelperItem> HelperInfoItems;
    }

    [RTTI.Serializable(0xB93669C50B9111EA, GameType.DS)]
    public class DSAnimatingSkinnedMeshInstance : CoreObject
    {
    }

    [RTTI.Serializable(0x4521C361F1791426, GameType.DS)]
    public class DSAnimatingSkinnedMeshResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<ArtPartsDataResource> ArtPartsResource;
        [RTTI.Member(4, 0x28)] public Ref<SkeletonAnimationResource> Animation;
        [RTTI.Member(5, 0x30)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(6, 0x38)] public Ref<PhysicsCollisionResource> Collision;
        [RTTI.Member(3, 0x40)] public bool UseRootBoneAnimation;
    }

    [RTTI.Serializable(0x5AD2C3B738D63A27, GameType.DS)]
    public class DSAntiGravityBoxComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1D0620B16780267D, GameType.DS)]
    public class DSAntiGravityBoxComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String HelperName;
        [RTTI.Member(3, 0x30)] public BoundingBox3 LocalBoundingBox;
    }

    [RTTI.Serializable(0xC6381086C25F384E, GameType.DS)]
    public class DSAntiGravityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD2CCE5E6DC6643C9, GameType.DS)]
    public class DSAntiGravityComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float AntiGravityFactor;
        [RTTI.Member(3, 0x24)] public float MaxZOffset;
        [RTTI.Member(4, 0x28)] public float MinZOffset;
        [RTTI.Member(5, 0x2C)] public float InitialAngularVeloctity;
        [RTTI.Member(6, 0x30)] public float MaxZSpeed;
    }

    [RTTI.Serializable(0x121DE97DB4CBC04A, GameType.DS)]
    public class DSAnyEventStateCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x49C292D207901250, GameType.DS)]
    public class DSAnyEventStateCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x99B7A5E024A6923D, GameType.DS)]
    public class DSAreaBasedStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0x7443E04B16D4E934, GameType.DS)]
    public class DSAreaBasedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(7, 0x50, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
        [RTTI.Member(8, 0x58, "General")] public String AreaName;
        [RTTI.Member(9, 0x60, "General")] public uint32 AreaNameHash;
        [RTTI.Member(11, 0x64, "PlayGo")] public bool ExcludeFromInitialChunk;
    }

    [RTTI.Serializable(0xE544C80285C5D37D, GameType.DS)]
    public class DSAreaConnectionPoint : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSArea CurrentArea;
        [RTTI.Member(3, 0x22)] public EDSArea SourceArea;
        [RTTI.Member(5, 0x24)] public uint32 name;
        [RTTI.Member(4, 0x28)] public Ref<DSLocator> Locator;
    }

    [RTTI.Serializable(0x744F7EA34EE67C21, GameType.DS)]
    public class DSAreaConnectionPointResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSAreaConnectionPoint>> Points;
    }

    [RTTI.Serializable(0x3C5D9501A2490325, GameType.DS)]
    public class DSAreaData : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSArea Area;
        [RTTI.Member(3, 0x28)] public StreamingRef<LevelData> LevelData;
    }

    [RTTI.Serializable(0xD2B7C89D4492A2D5, GameType.DS)]
    public class DSAreaSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSAreaData>> DSAreaDataArray;
        [RTTI.Member(3, 0x30)] public Ref<DSAreaData> DefaultDSAreaData;
    }

    [RTTI.Serializable(0x6C05A33BC02E9F7C, GameType.DS)]
    public class DSArmorPlateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x72354047A2BF78B5, GameType.DS)]
    public class DSArmorPlateComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public int Type;
        [RTTI.Member(3, 0x28)] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
        [RTTI.Member(4, 0x38)] public Ref<ParticleSystemResource> BreakEffect;
    }

    [RTTI.Serializable(0x50B2CB6A68D0CAC0, GameType.DS)]
    public class DSAttachHelperToHelperMover : AttachToHelperMover
    {
    }

    [RTTI.Serializable(0xC90AB4BABD5B0CFE, GameType.DS)]
    public class DSAttachHelperToHelperMoverResource : AttachToHelperMoverResource
    {
        [RTTI.Member(13, 0x90, "Logic")] public String AttachingHelperName;
    }

    [RTTI.Serializable(0x1E0B343CDD64FE9F, GameType.DS)]
    public class DSAttachOrPhysicsEntity : Entity
    {
    }

    [RTTI.Serializable(0x42DBD40DC1E41166, GameType.DS)]
    public class DSAttachOrPhysicsEntityResource : EntityResource
    {
        [RTTI.Member(30, 0x100)] public Ref<AttachToHelperMoverResource> AttachToHelperMoverResource;
        [RTTI.Member(31, 0x108)] public Ref<PhysicsMoverResource> PhysicsMoverResource;
        [RTTI.Member(32, 0x110)] public bool IsIgnoreContactEffect;
    }

    [RTTI.Serializable(0xDA42C667B965A88B, GameType.DS)]
    public class DSAttachToPartOrBaggageMover : AttachToPartMover
    {
    }

    [RTTI.Serializable(0x9C0303C5A4EDAA2C, GameType.DS)]
    public class DSAttachToPartOrBaggageMoverResource : AttachToPartMoverResource
    {
    }

    [RTTI.Serializable(0x1F4F1F5FE23B319D, GameType.DS)]
    public class DSAttackEventInfo : RTTIObject
    {
    }

    [RTTI.Serializable(0xA83E183F6F2B0AB3, GameType.DS)]
    public class DSAttackParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSAttackId Id;
        [RTTI.Member(4, 0x24, "Parameters")] public float Damage;
        [RTTI.Member(5, 0x28, "Parameters")] public float StaminaDamage;
        [RTTI.Member(6, 0x2C, "Parameters")] public float ConsciousDamage;
        [RTTI.Member(7, 0x30, "Parameters")] public float DamageToHardObject;
        [RTTI.Member(8, 0x34, "Parameters")] public float StaminaDamageToHardObject;
        [RTTI.Member(9, 0x38, "Parameters")] public float DamageToWarriors;
        [RTTI.Member(10, 0x3C, "Parameters")] public float ChargeDamageMinToWarriors;
        [RTTI.Member(11, 0x40, "Parameters")] public float DamageToCliff;
        [RTTI.Member(12, 0x44, "Parameters")] public float ChargeDamageMinToCliff;
        [RTTI.Member(13, 0x48, "Parameters")] public float BloodDamage;
        [RTTI.Member(14, 0x4C, "Parameters")] public float BloodDamageMin;
        [RTTI.Member(15, 0x50, "Parameters")] public float GoldDamage;
        [RTTI.Member(16, 0x54, "Parameters")] public float HealDamage;
        [RTTI.Member(17, 0x58, "Parameters")] public float AttenuationBeginDistance;
        [RTTI.Member(18, 0x5C, "Parameters")] public float AttenuationRange;
        [RTTI.Member(19, 0x60, "Parameters")] public float FinalAttenuationRate;
        [RTTI.Member(20, 0x64, "Parameters")] public float Range;
        [RTTI.Member(21, 0x68, "Parameters")] public float FullDamageRange;
        [RTTI.Member(22, 0x6C, "Parameters")] public float ImpactImpulseMultiplier;
        [RTTI.Member(28, 0x70, "Parameters")] public EDSPlayerDamageReactionType PlayerReactionType;
        [RTTI.Member(23, 0x74, "Parameters")] public float WaterContactImpactRadius;
        [RTTI.Member(24, 0x78, "Parameters")] public float WaterContactImpactStrength;
        [RTTI.Member(25, 0x7C, "Parameters")] public float WaterExplosionImpactRadius;
        [RTTI.Member(26, 0x80, "Parameters")] public float WaterExplosionImpactStrength;
        [RTTI.Member(27, 0x84, "Parameters")] public float LoudnessModifier;
        [RTTI.Member(29, 0x88, "Parameters")] public uint64 AttackFlag;
    }

    [RTTI.Serializable(0xD7F5016F26EC8D30, GameType.DS)]
    public class DSAttackPath : ParentWorldNode
    {
        [RTTI.Member(6, 0x70)] public Ref<WorldNode> Start;
        [RTTI.Member(7, 0x78)] public Ref<WorldNode> End;
    }

    [RTTI.Serializable(0xEA5AA295E6239C05, GameType.DS)]
    public class DSAuralStimulusItem
    {
        [RTTI.Member(1, 0x0, "Default")] public EDSAuralStimulusType Type;
        [RTTI.Member(2, 0x8, "Default")] public Ref<AIAuralStimulusResource> Resource;
    }

    [RTTI.Serializable(0xD8A151CCC836A64F, GameType.DS)]
    public class DSAutoDeliveryLightEntity : DSControlledEntity
    {
    }

    [RTTI.Serializable(0xF56A9CEEEB740502, GameType.DS)]
    public class DSAutoDeliveryLightEntityResource : DSControlledEntityResource
    {
    }

    [RTTI.Serializable(0x3018233369E53CA5, GameType.DS)]
    public class DSAutoDeliveryLightResource : Resource
    {
        [RTTI.Member(3, 0x20, "ReleaseCondition")] public Ref<BooleanFact> AvailableFact;
        [RTTI.Member(5, 0x28, "Configulation")] public Ref<BooleanFact> TutorialFact;
        [RTTI.Member(6, 0x30, "Configulation")] public Ref<IntegerFact> CarrierNumFact;
        [RTTI.Member(7, 0x38, "Configulation")] public float CarrierBaseSpeed;
    }

    [RTTI.Serializable(0x1327A98108FCEEDE, GameType.DS)]
    public class DSAutoplaceStoneComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2E7FAD321CCDA05F, GameType.DS)]
    public class DSAutoplaceStoneComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Gimmick")] public Ref<DSSharedGimmickData> SharedGimmickData;
        [RTTI.Member(4, 0x28, "Gimmick")] public Array<Ref<MaterialTypeResource>> AllowMaterial;
    }

    [RTTI.Serializable(0x1C3167930B3D06B, GameType.DS)]
    public class DSBBPodBagComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x190E2769DA3622DD, GameType.DS)]
    public class DSBBPodBagComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<SentenceResource>> SentenceResources;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<SentenceResource>> LongSentenceResources;
    }

    [RTTI.Serializable(0x1C7E0DB3C0CBFA10, GameType.DS)]
    public class DSBBPodBulletMeshControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3438638321D9162A, GameType.DS)]
    public class DSBBPodBulletMeshControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<Fact> BulletMeshVisibleStatusFact;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<Fact> BulletMeshForceInvisibleFact;
    }

    [RTTI.Serializable(0x24E78FE05766A60B, GameType.DS)]
    public class DSBBPodCableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC0D158CE84FE80AB, GameType.DS)]
    public class DSBBPodCableComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xD874529BB03D1660, GameType.DS)]
    public class DSBBPodComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x54368017863BB74, GameType.DS)]
    public class DSBBPodComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xABE4DF47C34E166F, GameType.DS)]
    public class DSBBPodComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ParticleSystemResource> BubbleParticleResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<SHLightVolumeResource> SHLightVolumeResource;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<SHLightVolumeResource> SHLightVolumeDarkerResource;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<SoundResource> ProgramSound_SwimDown;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<SoundResource> ProgramSound_SwimUp;
        [RTTI.Member(8, 0x50, "Logic")] public Vec3 SHLightVolumeOffset;
        [RTTI.Member(9, 0x60, "Logic")] public Vec3 SHLightVolumeSize;
    }

    [RTTI.Serializable(0x203DA1362FEA16C6, GameType.DS)]
    public class DSBBPodGridMaskControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFCFDEFB7B984E66C, GameType.DS)]
    public class DSBBPodGridMaskControlComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xDFAC4368971FC711, GameType.DS)]
    public class DSBackpackAccessoryParameter : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(3, 0x28)] public Array<EDSBackpackAccessoryType> Types;
        [RTTI.Member(4, 0x38)] public Array<uint32> MeshNameHashes;
    }

    [RTTI.Serializable(0x9FCA95ADE74C841C, GameType.DS)]
    public class DSBackpackConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public float RainCoverDurability;
        [RTTI.Member(3, 0x24)] public float RainCoverLv2Durability;
        [RTTI.Member(4, 0x28)] public float RainCoverLv3Durability;
        [RTTI.Member(5, 0x30)] public Ref<ArtPartsVariationResource> RainCoverLv2Apv;
        [RTTI.Member(6, 0x38)] public Ref<ArtPartsVariationResource> RainCoverLv3Apv;
    }

    [RTTI.Serializable(0xF184683FC5CFF207, GameType.DS)]
    public class DSBackpackEntity : Entity
    {
    }

    [RTTI.Serializable(0xF3718CC7CF300F60, GameType.DS)]
    public class DSBackpackEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Logic")] public Ref<EntityResource> DreamCatcherEntity;
        [RTTI.Member(32, 0x108, "Logic")] public Ref<EntityResource> ChiralCylinderEntity;
        [RTTI.Member(33, 0x110, "Logic")] public Ref<EntityResource> BBPodBagEntity;
        [RTTI.Member(34, 0x118, "Logic")] public Ref<EntityResource> RainCoverEntity;
        [RTTI.Member(35, 0x120, "Logic")] public Ref<EntityResource> GPCaseEntity;
        [RTTI.Member(36, 0x128, "Logic")] public Ref<EntityResource> PouchSetEntity;
        [RTTI.Member(37, 0x130, "Logic")] public Ref<EntityResource> BackpackBeltEntity;
        [RTTI.Member(38, 0x138, "Logic")] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
    }

    [RTTI.Serializable(0x8954E3EA0AA4C65C, GameType.DS)]
    public class DSBackpackOptionParameter : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSBackpackOptionType Type;
        [RTTI.Member(3, 0x28)] public IVec2 Size;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(5, 0x38)] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
    }

    [RTTI.Serializable(0xFE6F0D27ADDF84A8, GameType.DS)]
    public class DSBaggage2 : RTTIObject
    {
    }

    [RTTI.Serializable(0xEF6599BA170228B9, GameType.DS)]
    public class DSBaggage2AdditionalAsset : CoreObject
    {
        [RTTI.Member(2, 0x20)] public uint32 IdentifierHash;
        [RTTI.Member(3, 0x28)] public Array<uint32> ListItemNameHashes;
        [RTTI.Member(4, 0x38)] public Ref<SkinnedModelResource> SkinnedModel;
        [RTTI.Member(5, 0x40)] public Ref<ArtPartsVariationResource> ArtPartsVariation;
        [RTTI.Member(6, 0x48)] public Ref<DSDBBFoodWomanComponentResource> DeadBodyBagFoodWomanComponentResource;
        [RTTI.Member(7, 0x50)] public Ref<DSDBBMamaComponentResource> DeadBodyBagMamaComponentResource;
    }

    [RTTI.Serializable(0x3FF407E89F57B1E3, GameType.DS)]
    public class DSBaggage2CarrierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x999F73F080BF8827, GameType.DS)]
    public class DSBaggage2CarrierComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE7E1390F93C5D3D5, GameType.DS)]
    public class DSBaggage2CarrierComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xF3277B0857FA590E, GameType.DS)]
    public class DSBaggage2Config : CoreObject
    {
        [RTTI.Member(3, 0x20, "Config")] public float DamageRateToContentsWhenMaxCoating;
        [RTTI.Member(4, 0x24, "Config")] public float RainDamagePerSec;
        [RTTI.Member(5, 0x28, "Config")] public float HeavyRainDamagePerSec;
        [RTTI.Member(6, 0x2C, "Config")] public float TarryDamagePerSec;
        [RTTI.Member(7, 0x30, "Config")] public float TarryDamagePerSecForMissionOrEquipment;
        [RTTI.Member(8, 0x34, "Config")] public float PhysicsDamageBase;
        [RTTI.Member(9, 0x38, "Config")] public float PhysicsDamageLimit;
        [RTTI.Member(10, 0x3C, "Config")] public float AnnihilationDamage;
        [RTTI.Member(11, 0x40, "Config")] public float WaterDamagePerSecForLivingThing;
        [RTTI.Member(12, 0x44, "Config")] public float PlayerFallingDamageS;
        [RTTI.Member(13, 0x48, "Config")] public float PlayerFallingDamageM;
        [RTTI.Member(14, 0x4C, "Config")] public float PlayerFallingDamageL;
        [RTTI.Member(15, 0x50, "Config")] public float PlayerFallingDamageSHeight;
        [RTTI.Member(16, 0x54, "Config")] public float PlayerFallingDamageMHeight;
        [RTTI.Member(17, 0x58, "Config")] public float PlayerFallingDamageLHeight;
        [RTTI.Member(18, 0x5C, "Config")] public float PlayerFallingDamageRangeMin;
        [RTTI.Member(19, 0x60, "Config")] public float PlayerFallingDamageRangeMiddle;
        [RTTI.Member(20, 0x64, "Config")] public float PlayerFallingDamageRangeMax;
        [RTTI.Member(21, 0x68, "Config")] public float PlayerTumblingDamage;
        [RTTI.Member(22, 0x6C, "Config")] public float DistanceFromPlayerBaggagesAreDisplayedOnMap;
        [RTTI.Member(23, 0x70, "Config")] public float DeadbodyAdditionalWeightWithElapsedTime;
        [RTTI.Member(24, 0x74, "Config")] public float DeadbodyTimeToBecomeMaxAdditionalWeight;
        [RTTI.Member(25, 0x78, "Config")] public Array<float> DeadBodyWeightToNotifyBecameHeavier;
        [RTTI.Member(26, 0x88, "Config")] public float MovingSpeedOfDestroyDelicateBaggage;
        [RTTI.Member(27, 0x8C, "Config")] public float DamageToDelicateBaggageWhenMoveFast;
        [RTTI.Member(28, 0x90, "Config")] public float DamageToMustKeepHorozontallyBaggageWhenVertically;
        [RTTI.Member(29, 0x94, "Config")] public float DamageToDangerBaggageWhenVehicleOnOffroad;
        [RTTI.Member(30, 0x98, "Config")] public float DamageToMustKeepCoolBaggageWhenNoCool;
        [RTTI.Member(31, 0x9C, "Config")] public float DistanceToRealize;
        [RTTI.Member(32, 0xA0, "Config")] public float DistanceToUnrealize;
        [RTTI.Member(33, 0xA4, "Config")] public float DistanceToLost;
        [RTTI.Member(34, 0xA8, "Config")] public float TimeToLost;
        [RTTI.Member(35, 0xAC, "Config")] public float DistanceToNotifyFar;
        [RTTI.Member(36, 0xB0, "Config")] public float DistanceToRemoveBrokenOrEmpty;
        [RTTI.Member(37, 0xB4, "Config")] public float LimitLifeRateByRainDamage;
        [RTTI.Member(38, 0xB8, "Config")] public float LimitLifeRateByRainDamageForEquip;
        [RTTI.Member(39, 0xBC, "Config")] public float LimitLifeRateByRainDamageForEquipInBattle;
        [RTTI.Member(40, 0xC0, "Config")] public float BrokenDamageRateForDangerBaggage;
        [RTTI.Member(41, 0xC4, "Config")] public float RainDamageRateForRainWeakBaggage;
        [RTTI.Member(42, 0xC8, "Config")] public float RainDamageRateForEquippedBaggage;
        [RTTI.Member(43, 0xCC, "Config")] public float RainDamageRateForVeryHard;
        [RTTI.Member(44, 0xD0, "Config")] public float IncreasingEquippedCaseDamageRateInterval;
        [RTTI.Member(45, 0xD4, "Config")] public float EquippedCaseDamageIncreaseRateByInterval;
        [RTTI.Member(46, 0xD8, "Config")] public float EquippedCaseDamageIncreaseRateMaxByInterval;
        [RTTI.Member(47, 0xDC, "Config")] public float IncreasingEquippedContentsDamageRateInterval;
        [RTTI.Member(48, 0xE0, "Config")] public float EquippedContentsDamageIncreaseRateByInterval;
        [RTTI.Member(49, 0xE4, "Config")] public float EquippedContentsDamageIncreaseRateMaxByInterval;
        [RTTI.Member(50, 0xE8, "Config")] public float DamageReductionRateOfShieldLv2;
        [RTTI.Member(51, 0xEC, "Config")] public float FaintReductionRateOfShieldLv2;
        [RTTI.Member(52, 0xF0, "Config")] public float BatteryConsumptionRateOfShieldLv2Damage;
        [RTTI.Member(53, 0xF4, "Config")] public float DamageReductionRateOfShieldLv3;
        [RTTI.Member(54, 0xF8, "Config")] public float FaintReductionRateOfShieldLv3;
        [RTTI.Member(55, 0xFC, "Config")] public float BatteryConsumptionRateOfShieldLv3Damage;
        [RTTI.Member(56, 0x100, "Config")] public float DamageReductionRateOfShieldLv4;
        [RTTI.Member(57, 0x104, "Config")] public float FaintReductionRateOfShieldLv4;
        [RTTI.Member(58, 0x108, "Config")] public float BatteryConsumptionRateOfShieldLv4Damage;
        [RTTI.Member(59, 0x10C, "Config")] public float ContentsDamageRateVeryEasy;
        [RTTI.Member(60, 0x110, "Config")] public float CaseDamageRateVeryEasy;
        [RTTI.Member(61, 0x114, "Config")] public float ContentsDamageRateEasy;
        [RTTI.Member(62, 0x118, "Config")] public float CaseDamageRateEasy;
        [RTTI.Member(63, 0x11C, "Config")] public float ContentsDamageRateHard;
        [RTTI.Member(64, 0x120, "Config")] public float CaseDamageRateHard;
        [RTTI.Member(65, 0x124, "Config")] public float ContentsDamageRateVeryHard;
        [RTTI.Member(66, 0x128, "Config")] public float CaseDamageRateVeryHard;
        [RTTI.Member(67, 0x12C, "Config")] public float LimitLifeRateByRainDamageForVeryHard;
        [RTTI.Member(68, 0x130, "Config")] public float ContentsDamageWhenHitEnemy;
        [RTTI.Member(69, 0x134, "Config")] public float CartHitWallHeavyDamage;
        [RTTI.Member(70, 0x138, "Config")] public float SmallOutlineCurveDamage;
        [RTTI.Member(71, 0x13C, "Config")] public float MiddleOutlineCurveDamage;
        [RTTI.Member(72, 0x140, "Config")] public Vec4 mHalfLifeCubeColorSafe;
        [RTTI.Member(73, 0x150, "Config")] public Vec4 mHalfLifeCubeColorWarning;
        [RTTI.Member(74, 0x160, "Config")] public Vec4 mHalfLifeCubeColorDanger;
        [RTTI.Member(75, 0x170, "Config")] public Ref<DSBaggage2EntityResource> EntityResource;
        [RTTI.Member(76, 0x178, "Config")] public Ref<AttachToHelperMoverResource> AttachToHelperMoverResource;
        [RTTI.Member(77, 0x180, "Config")] public Ref<PhysicsMoverResource> PhysicsMoverResource;
        [RTTI.Member(78, 0x188, "Config")] public Array<Ref<SkinnedModelResource>> ModelResources;
        [RTTI.Member(79, 0x198, "Config")] public Array<Ref<DSBaggage2Define>> Defines;
        [RTTI.Member(80, 0x1A8, "Config")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(81, 0x1B0, "Config")] public Ref<AIAuralStimulusResource> AuralStimulus;
        [RTTI.Member(82, 0x1C0, "Config")] public OverloadedBaggageConfig OverloadedBaggageConfig;
        [RTTI.Member(83, 0x220, "Config")] public Ref<DSSimpleAnimationComponentResource> CartAnimationComponentResource;
        [RTTI.Member(84, 0x228, "Config")] public Ref<EntityResource> DeadBodyBagEntityResource;
        [RTTI.Member(85, 0x230, "Config")] public Array<Ref<MoverResource>> DeadBodyBagMoverResources;
        [RTTI.Member(86, 0x240, "Config")] public Array<Ref<SkinnedModelResource>> DeadBodyBagModelResources;
        [RTTI.Member(87, 0x250, "Config")] public Array<Ref<EntityComponentResource>> DeadBodyBagEntityComponentResources;
        [RTTI.Member(88, 0x260, "Config")] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(89, 0x270, "Config")] public Array<Ref<SoundResource>> Sounds;
        [RTTI.Member(90, 0x280, "Config")] public Array<Ref<SkeletonAnimationResource>> Animations;
        [RTTI.Member(91, 0x290, "Config")] public Array<Ref<TextureSet>> TextureSets;
        [RTTI.Member(92, 0x2A0, "Config")] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
        [RTTI.Member(93, 0x2B0, "Config")] public Array<Ref<CurveResource>> CurveResources;
        [RTTI.Member(95, 0x2C0, "Config")] public Array<Ref<Fact>> Facts;
        [RTTI.Member(94, 0x2D0, "Config")] public Array<Ref<DSBaggage2SceneInfoForAdditionalAsset>> SceneInfosForAdditionalAsset;
        [RTTI.Member(96, 0x2E0, "Config")] public Array<Ref<EntityResource>> CartboardBoxResources;
        [RTTI.Member(97, 0x2F0, "Config")] public Ref<RumbleResource> RumbleDangerBaggageBlast;
    }

    [RTTI.Serializable(0xCD854E0D200B29D4, GameType.DS)]
    public class DSBaggage2Define : CoreObject
    {
        [RTTI.Member(2, 0x20)] public uint32 Id;
        [RTTI.Member(3, 0x24)] public EDSBaggage2Type Type;
        [RTTI.Member(4, 0x25)] public EDSBaggage2Size Size;
        [RTTI.Member(5, 0x26)] public EDSBaggage2Model Model;
        [RTTI.Member(6, 0x28)] public float Weight;
        [RTTI.Member(7, 0x2C)] public float CoatingLife;
        [RTTI.Member(8, 0x30)] public float ContentsLife;
        [RTTI.Member(9, 0x34)] public uint32 ContentsId;
        [RTTI.Member(10, 0x38)] public uint32 ContentsDescriptionId;
        [RTTI.Member(11, 0x3C)] public uint16 Count;
        [RTTI.Member(12, 0x3E)] public uint16 Flag;
        [RTTI.Member(13, 0x40)] public String Name;
    }

    [RTTI.Serializable(0x5F21D5C1A91C8278, GameType.DS)]
    public class DSBaggage2Entity : Entity
    {
    }

    [RTTI.Serializable(0x7DDE4961EEBE8E61, GameType.DS)]
    public class DSBaggage2EntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x52019D9FD23DF3EB, GameType.DS)]
    public class DSBaggage2EntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0x415DCA97BE7DD5A2, GameType.DS)]
    public class DSBaggage2Locator : DSLocator
    {
        [RTTI.Member(6, 0x70)] public uint32 BaggageListItemNameHash;
        [RTTI.Member(7, 0x74)] public bool ForScePresentation;
        [RTTI.Member(8, 0x75)] public bool IsKnownForScePresentation;
    }

    [RTTI.Serializable(0x519A6632B94CC1EB, GameType.DS)]
    public class DSBaggage2Manager : RTTIObject
    {
    }

    [RTTI.Serializable(0xF3C5F3A91EA599BF, GameType.DS)]
    public class DSBaggage2ManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x572467EA47521BE8, GameType.DS)]
    public class DSBaggage2SceneInfoForAdditionalAsset : CoreObject
    {
        [RTTI.Member(2, 0x20)] public uint32 IdentifierHash;
        [RTTI.Member(3, 0x28)] public Array<uint32> ListItemNameHashes;
        [RTTI.Member(4, 0x38)] public Ref<Scene> Scene;
        [RTTI.Member(5, 0x40)] public Ref<Fact> UnloadFact;
        [RTTI.Member(6, 0x48)] public Ref<Fact> ExistenceFact;
    }

    [RTTI.Serializable(0x269070720E58144B, GameType.DS)]
    public class DSBaggage2Symbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x57AFE1FAD199C61E, GameType.DS)]
    public class DSBaggageForFriendlyMuleSystemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSDeliveryBaggageGeneratorForFriendlyMuleResource>> DeliveryBaggageGenerators;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSGameBaggageListItem>> DefaultDeliveryBaggagesList;
    }

    [RTTI.Serializable(0xA7CA25EBD3DCEB34, GameType.DS)]
    public class DSBaggageFunction : CoreObject
    {
        [RTTI.Member(3, 0x20, "Function")] public EDSBaggageFuntionType FuntionType;
        [RTTI.Member(4, 0x28, "Function")] public Ref<EntityResource> FunctionEntityResource;
    }

    [RTTI.Serializable(0x289DB4E52492AAF5, GameType.DS)]
    public class DSBaggageGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x6461FE8E5F57F7F9, GameType.DS)]
    public class DSBaggageGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0x533F09CC805815E5, GameType.DS)]
    public class DSBaggageGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0x1B195B919D23353F, GameType.DS)]
    public class DSBaggageTakeOverShaderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF5428A4FA9ADB840, GameType.DS)]
    public class DSBaggageTakeOverShaderComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String BaggageName;
    }

    [RTTI.Serializable(0x9B778FB55B5FDCD1, GameType.DS)]
    public class DSBaggageUnit
    {
    }

    [RTTI.Serializable(0x7852CF58DCD3F20E, GameType.DS)]
    public class DSBaggageUnitStack
    {
    }

    [RTTI.Serializable(0x19E99EF113930B58, GameType.DS)]
    public class DSBgmComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF752D59120A0C8C, GameType.DS)]
    public class DSBgmComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public EDSBgmPhase DefaultPhase;
    }

    [RTTI.Serializable(0xADCFCCE7DF8C2632, GameType.DS)]
    public class DSBgmManagerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<EnumFact> MusicEnumFact;
        [RTTI.Member(3, 0x28)] public Ref<EnumFact> BgmManagerEnumFact;
        [RTTI.Member(4, 0x30)] public Ref<EnumFact> ScriptedMusicEnumFact;
        [RTTI.Member(5, 0x38)] public UUIDRef<RTTIRefObject> NoneMusicEnumFactValue;
        [RTTI.Member(6, 0x48)] public Ref<EnumFactEntry> AlbumMusicRangeStart;
        [RTTI.Member(7, 0x50)] public Ref<EnumFactEntry> AlbumMusicRangeEnd;
        [RTTI.Member(8, 0x58)] public Ref<EnumFactEntry> AreaMusicRangeStart;
        [RTTI.Member(9, 0x60)] public Ref<EnumFactEntry> AreaMusicRangeEnd;
    }

    [RTTI.Serializable(0x6B8F14FD56E6797F, GameType.DS)]
    public class DSBlackCorpseEffectEntity : Entity
    {
    }

    [RTTI.Serializable(0x26F2D2B38BFF2B32, GameType.DS)]
    public class DSBlackCorpseEffectEntityResource : EntityResource
    {
        [RTTI.Member(43, 0x0, "Float")] public float MaximumRotationSpeed;
        [RTTI.Member(31, 0x100, "BlackCorpse")] public Array<Ref<MeshResourceBase>> CorpseMeshes;
        [RTTI.Member(32, 0x110, "BlackCorpse")] public int MaximumCorpses;
        [RTTI.Member(33, 0x118, "BlackCorpse")] public Array<Ref<ModelPartResource>> CorpseModels;
        [RTTI.Member(34, 0x128, "BlackCorpse")] public Ref<StaticMultiModelResource> ModelResource;
        [RTTI.Member(36, 0x130, "InitialSpawn")] public int SpawnedCorpses;
        [RTTI.Member(38, 0x134, "Spawn")] public float SpawnInterval;
        [RTTI.Member(40, 0x138, "Spawn")] public float MinimumSpawnDistance;
        [RTTI.Member(39, 0x13C, "Spawn")] public float MaximumSpawnDistance;
        [RTTI.Member(41, 0x140, "Spawn")] public float SpawnHeight;
        [RTTI.Member(44, 0x148, "Float")] public float MaximumVelocity;
        [RTTI.Member(46, 0x14C, "Collide")] public float CollisionRadius;
        [RTTI.Member(47, 0x150, "Collide")] public float CollisionInitialSpeed;
        [RTTI.Member(48, 0x154, "Collide")] public float CollisionAcceleration;
        [RTTI.Member(49, 0x158, "Collide")] public float CollisionScaleRatio;
        [RTTI.Member(51, 0x15C, "Despawn")] public float DespawnDistance;
        [RTTI.Member(52, 0x160, "Despawn")] public float DespawnTime;
    }

    [RTTI.Serializable(0x20FBF5809B6CAD58, GameType.DS)]
    public class DSBolagunEffectInstance : GeometryObject
    {
        [RTTI.Member(10, 0xC8, "General")] public Ref<DSBolagunEffectResource> Resource;
        [RTTI.Member(7, 0x140, "General")] public WorldPosition TargetLineStartPosition;
        [RTTI.Member(8, 0x158, "General")] public WorldPosition TargetLineEndPosition;
        [RTTI.Member(9, 0x170, "General")] public WorldPosition ProjectionStartPosition;
        [RTTI.Member(11, 0x200, "General")] public bool Enable;
    }

    [RTTI.Serializable(0x3F42C0D8F6408989, GameType.DS)]
    public class DSBolagunEffectResource : Resource
    {
        [RTTI.Member(5, 0x20, "Representation")] public Ref<ShaderResource> Shader;
        [RTTI.Member(4, 0x28, "Representation")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(12, 0x30, "Color")] public Ref<CurveResource> AlphaCurve;
        [RTTI.Member(7, 0x40, "Color")] public FRGBAColor BaseColor;
        [RTTI.Member(9, 0x50, "Color")] public FRGBAColor OutTargetColor;
        [RTTI.Member(8, 0x60, "Color")] public float BaseColorScale;
        [RTTI.Member(10, 0x64, "Color")] public float OutTargetColorScale;
        [RTTI.Member(11, 0x68, "Color")] public float Width;
        [RTTI.Member(14, 0x6C, "Color")] public EStencilBufferValue StencilBufferCheckValue;
        [RTTI.Member(13, 0x6D, "Color")] public bool EnableStencilBufferRef;
    }

    [RTTI.Serializable(0x6D817F1D8EF08FA2, GameType.DS)]
    public class DSBolagunRopeEntity : Entity
    {
    }

    [RTTI.Serializable(0xE5FF5C3F772850BE, GameType.DS)]
    public class DSBolagunRopeEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x5CEB8129B1274A6, GameType.DS)]
    public class DSBolagunRopeEntityResource : EntityResource
    {
        [RTTI.Member(30, 0x100)] public Array<Ref<MoverResource>> MoverResources;
        [RTTI.Member(32, 0x110, "Effect")] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(33, 0x120, "Effect")] public Array<Ref<SoundResource>> Sounds;
    }

    [RTTI.Serializable(0x493AD3C20B2F73FF, GameType.DS)]
    public class DSBolagunRopeMover : Mover
    {
    }

    [RTTI.Serializable(0xA10AAA0AB549FB23, GameType.DS)]
    public class DSBolagunRopeMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xF0DA51930B03057C, GameType.DS)]
    public class DSBombDropperSettings : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public String Name;
        [RTTI.Member(5, 0x28, "BomberSettings")] public Ref<EntityResource> BomberEntity;
        [RTTI.Member(9, 0x30, "BombSettings")] public Ref<EntityResource> BombEntity;
        [RTTI.Member(10, 0x38, "BombSettings")] public int NumBombs;
        [RTTI.Member(11, 0x3C, "BombSettings")] public float BombDropInterval;
        [RTTI.Member(6, 0x40, "BomberSettings")] public float BomberSpeed;
        [RTTI.Member(7, 0x44, "BomberSettings")] public float TimeToDisappear;
    }

    [RTTI.Serializable(0xB671F7EA5BD333EC, GameType.DS)]
    public class DSBombDropperSettingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x551CD7E0DA6E1CEC, GameType.DS)]
    public class DSBottomlessSwampCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(13, 0xF0, "General")] public EDSBottomlessSwampCollisionTriggerType Type;
    }

    [RTTI.Serializable(0xF12FE18EB5EF5321, GameType.DS)]
    public class DSBounderComponent : DSObstacleComponent
    {
    }

    [RTTI.Serializable(0xA1CE7A5FB430166E, GameType.DS)]
    public class DSBounderComponentResource : DSObstacleComponentResource
    {
    }

    [RTTI.Serializable(0x1C30F5470E6057E6, GameType.DS)]
    public class DSBridgeBabyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5941BADB19367342, GameType.DS)]
    public class DSBridgeBabyComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xFEA9B668B7E6316E, GameType.DS)]
    public class DSBridgeBabyComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<DSBridgeBabySentenceInfo> SentenceInfos;
        [RTTI.Member(3, 0x30)] public Array<Ref<SkeletonAnimationResource>> FacialAnimationResources;
        [RTTI.Member(4, 0x40)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(5, 0x50)] public Array<Ref<SkeletonAnimationResource>> PhotoModeFacialAnimationResources;
        [RTTI.Member(6, 0x60)] public Ref<EffectComponentResource> HeartEffectComponentResource;
        [RTTI.Member(7, 0x68)] public Ref<EffectComponentResource> PhotoModeEffectComponentResource;
        [RTTI.Member(8, 0x70)] public float LaughSmallVoiceEnableTime;
        [RTTI.Member(9, 0x74)] public float LaughSmallVoiceEnableRandom;
        [RTTI.Member(10, 0x78)] public float LaughSmallVoiceDisableTime;
        [RTTI.Member(11, 0x7C)] public float LaughSmallVoiceDisableRandom;
        [RTTI.Member(12, 0x80)] public float CrySmallDefaultDistanceTime;
        [RTTI.Member(13, 0x84)] public float CrySmallChangeTime;
        [RTTI.Member(14, 0x88)] public float CrySmallChangedDistanceTime;
        [RTTI.Member(15, 0x8C)] public float FirstGoodDandleCheckTime;
        [RTTI.Member(16, 0x90)] public float UsualGoodDandleCheckTime;
    }

    [RTTI.Serializable(0xE2D59B3AE0C51AC0, GameType.DS)]
    public class DSBridgeBabySentenceInfo
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<SentenceResource>> SentenceResources;
    }

    [RTTI.Serializable(0x7D42BA83EAFD3457, GameType.DS)]
    public class DSBridgeConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0x53615747D117F6CB, GameType.DS)]
    public class DSBridgeConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(117, 0x490, "BridgeCommon")] public Vec3 LocalGroundPoint;
        [RTTI.Member(118, 0x4A0, "BridgeCommon")] public Vec3 PannelStart;
        [RTTI.Member(115, 0x4B0, "BridgeCommon")] public FRange AngleRange;
        [RTTI.Member(116, 0x4B8, "BridgeCommon")] public float AngleCheckStep;
        [RTTI.Member(119, 0x4BC, "BridgeCommon")] public float SwitchLengthCameraAngle;
        [RTTI.Member(127, 0x4C0, "Bridge")] public Vec3 OtherSideGroundPoint;
        [RTTI.Member(128, 0x4D0, "Bridge")] public Vec3 OtherSideTerminal;
        [RTTI.Member(129, 0x4E0, "Bridge")] public Vec3 PanelVec;
        [RTTI.Member(120, 0x4F0, "BridgeCommon")] public uint32 PanelJointHash;
        [RTTI.Member(126, 0x4F8, "Bridge")] public Array<Ref<DSBuildCheckOrientedBox>> PannelCollision;
        [RTTI.Member(121, 0x508, "BridgeCommon")] public float LikeNumPerKg;
        [RTTI.Member(122, 0x50C, "BridgeCommon")] public float LikeNumPerMeter;
        [RTTI.Member(123, 0x510, "BridgeCommon")] public float MotorBikeWeight;
        [RTTI.Member(124, 0x514, "BridgeCommon")] public float TruckWeight;
    }

    [RTTI.Serializable(0x4EC2C7F227C3FDF0, GameType.DS)]
    public class DSBridgeExpandComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE134193EB41F6542, GameType.DS)]
    public class DSBridgeExpandComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SkinnedModelResource>> SkinnedModelResources;
    }

    [RTTI.Serializable(0x9740648D74E0380D, GameType.DS)]
    public class DSBridgeSendLikeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB204E3A1BF78BBF6, GameType.DS)]
    public class DSBridgeSendLikeComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x3D69C189F254B8A5, GameType.DS)]
    public class DSBuildCheckCollision : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public EDSConstructionCollisionCheckShape ShapeLike;
        [RTTI.Member(1, 0x10)] public Ref<PhysicsCollisionResource> Collision;
    }

    [RTTI.Serializable(0x7892DA8AEF17D6F0, GameType.DS)]
    public class DSBuildCheckEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2F93AD2DE5C13BEB, GameType.DS)]
    public class DSBuildCheckEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Parameters")] public Ref<DSOdradekEffectResource> TrueEffectResource;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<DSOdradekEffectResource> FalseEffectResource;
        [RTTI.Member(5, 0x30, "Parameters")] public float OdradekEffectEnableRadius;
    }

    [RTTI.Serializable(0x3981DE7316285F7F, GameType.DS)]
    public class DSBuildCheckHelperInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Vec3 CheckLineStart;
        [RTTI.Member(3, 0x30)] public Vec3 CheckLineEnd;
        [RTTI.Member(4, 0x40)] public bool HelperIsStart;
        [RTTI.Member(5, 0x41)] public bool IsValid;
        [RTTI.Member(6, 0x42)] public bool IsOnlineCheck;
        [RTTI.Member(7, 0x48)] public Ref<DSBuildCheckHelperInfo> OrInfo;
    }

    [RTTI.Serializable(0xD799476BEED87A1F, GameType.DS)]
    public class DSBuildCheckOrientedBox : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public OrientedBox Box;
        [RTTI.Member(3, 0x70)] public bool ApplyFilter;
        [RTTI.Member(4, 0x71)] public bool IsOnlineCheck;
        [RTTI.Member(5, 0x72)] public bool DoesCheckAsLine;
    }

    [RTTI.Serializable(0x80570ECD5F051099, GameType.DS)]
    public class DSBuildCheckVerticalCylinder : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Vec3 Position;
        [RTTI.Member(3, 0x30)] public float Height;
        [RTTI.Member(4, 0x34)] public float Radius;
        [RTTI.Member(5, 0x38)] public bool ApplyFilter;
    }

    [RTTI.Serializable(0x956E415904BA1BF2, GameType.DS)]
    public class DSBulletLineCollector : CoreObject
    {
        [RTTI.Member(3, 0x20, "Defaults")] public Array<DSBulletLineParameter> BulletLineParameters;
    }

    [RTTI.Serializable(0x34FF85A49977147D, GameType.DS)]
    public class DSBulletLineParameter
    {
        [RTTI.Member(0, 0x0)] public Ref<ParticleSystemResource> Particle;
        [RTTI.Member(1, 0x8)] public float DistanceToCompletelyVisible;
        [RTTI.Member(2, 0xC)] public float TransitionDistanceToCompletelyVisible;
    }

    [RTTI.Serializable(0x338DBD0780AE20EB, GameType.DS)]
    public class DSBulletSystem : RTTIObject
    {
    }

    [RTTI.Serializable(0xE0E0FDB5BD17566B, GameType.DS)]
    public class DSBulletSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x777A889CB32128A6, GameType.DS)]
    public class DSCalcMissionResultAfterInputInfo
    {
    }

    [RTTI.Serializable(0x5DC200BCE38D7D35, GameType.DS)]
    public class DSCalcRecycleAfterInputInfo
    {
    }

    [RTTI.Serializable(0x3D3D85CC4EDA0A95, GameType.DS)]
    public class DSCameraAnimationParameter : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<SequenceResource> SequenceResource;
        [RTTI.Member(3, 0x28)] public Array<Ref<SequenceResource>> SequenceResources;
        [RTTI.Member(5, 0x38)] public uint32 NameHash;
        [RTTI.Member(6, 0x3C)] public uint32 AnimationFlag;
        [RTTI.Member(4, 0x40)] public Array<uint8> HighPrioIndices;
        [RTTI.Member(7, 0x50)] public Vec3 CustomOffsetWhenCheckCollision;
        [RTTI.Member(8, 0x60)] public Ref<SoundResource> SoundResource;
    }

    [RTTI.Serializable(0x23C926BEB18D6EAD, GameType.DS)]
    public class DSCameraCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(13, 0xF0, "General")] public EDSCameraCollisionTriggerType Type;
        [RTTI.Member(14, 0xF4, "General")] public float AdditionalDistance;
        [RTTI.Member(15, 0xF8, "General")] public float InterpTimeAtStart;
        [RTTI.Member(16, 0xFC, "General")] public float InterpTimeAtEnd;
    }

    [RTTI.Serializable(0xA694734749688A1C, GameType.DS)]
    public class DSCameraCommonConfig : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public float KnotCameraMoveSpeed;
        [RTTI.Member(4, 0x24, "Parameters")] public float KnotCameraInitialDistance;
        [RTTI.Member(5, 0x28, "Parameters")] public float KnotCameraInitialPitch;
        [RTTI.Member(6, 0x2C, "Parameters")] public float KnotCameraInitialRotX;
        [RTTI.Member(7, 0x34, "Parameters")] public float KnotCameraMovableRadius;
        [RTTI.Member(8, 0x38, "Parameters")] public float KnotCameraMoveAccel;
        [RTTI.Member(9, 0x3C, "Parameters")] public float KnotCameraMoveBreak;
        [RTTI.Member(10, 0x40, "Parameters")] public float KnotCameraTimeLimit;
        [RTTI.Member(11, 0x44, "Parameters")] public float KnotCameraInputYWhenNoInput;
        [RTTI.Member(12, 0x48, "Parameters")] public float KnotCameraMaxMoveSpeedByContinuousInput;
        [RTTI.Member(13, 0x4C, "Parameters")] public float KnotCameraTimeToBecomeMaxSpeedByContinuousInput;
        [RTTI.Member(14, 0x50, "Parameters")] public float KnotCameraMoveSpeedDecreaseRateWhenSuspendInput;
        [RTTI.Member(15, 0x54, "Parameters")] public float KnotCameraDashSpeed;
        [RTTI.Member(16, 0x58, "Parameters")] public float KnotCameraTimeToDashSpeed;
        [RTTI.Member(17, 0x5C, "Parameters")] public float KnotCameraTimeToDefaultSpeed;
        [RTTI.Member(18, 0x60, "Parameters")] public Ref<Fact> KnotSpaceOverrideMovableRadius;
        [RTTI.Member(19, 0x68, "Parameters")] public float GhostCameraMoveSpeed;
        [RTTI.Member(20, 0x6C, "Parameters")] public float GhostCameraMoveAccel;
        [RTTI.Member(21, 0x70, "Parameters")] public float GhostCameraMoveBreak;
        [RTTI.Member(22, 0x74, "Parameters")] public float GhostCameraMaxMoveSpeedByContinuousInput;
        [RTTI.Member(23, 0x78, "Parameters")] public float GhostCameraTimeToBecomeMaxSpeedByContinuousInput;
        [RTTI.Member(24, 0x7C, "Parameters")] public float GhostCameraMoveSpeedDecreaseRateWhenSuspendInput;
        [RTTI.Member(25, 0x80, "Parameters")] public float NearTerminal_AddDistance;
        [RTTI.Member(26, 0x84, "Parameters")] public float NearTerminal_InterpTime;
        [RTTI.Member(27, 0x88, "Parameters")] public float NearTerminal_InterpTimeAtEnd;
        [RTTI.Member(28, 0x8C, "Parameters")] public float DragCart_AddDistance;
        [RTTI.Member(29, 0x90, "Parameters")] public float DragCart_InterpTime;
        [RTTI.Member(30, 0x94, "Parameters")] public float DragCart_InterpTimeAtEnd;
        [RTTI.Member(31, 0x98, "Parameters")] public float Drag2Cart_AddDistance;
        [RTTI.Member(32, 0x9C, "Parameters")] public float Drag2Cart_InterpTime;
        [RTTI.Member(33, 0xA0, "Parameters")] public float Drag2Cart_InterpTimeAtEnd;
        [RTTI.Member(34, 0xA4, "Parameters")] public float TpsCameraFocusDistanceLimit;
        [RTTI.Member(35, 0xA8, "Parameters")] public float AdjustHeightOnSnow;
        [RTTI.Member(36, 0xAC, "Parameters")] public float AdditionalDistanceToUnderconstructionObject;
        [RTTI.Member(37, 0xB0, "Parameters")] public float AdditionalDistanceToUnderconstructionObjectInterpTime;
        [RTTI.Member(38, 0xB4, "Parameters")] public float AdditionalDistanceForSpeedSkeleton;
        [RTTI.Member(39, 0xB8, "Parameters")] public float AdditionalDistanceForSpeedSkeletonInterpTime;
        [RTTI.Member(40, 0xBC, "Parameters")] public float AdditionalDistanceForSpeedSkeletonJump;
        [RTTI.Member(41, 0xC0, "Parameters")] public float AdditionalDistanceForSpeedSkeletonJumpInterpTime;
        [RTTI.Member(42, 0xC4, "Parameters")] public float AdditionalDistanceForOverloaded;
        [RTTI.Member(43, 0xC8, "Parameters")] public float AdditionalDistanceForOverloadedInterpTime;
        [RTTI.Member(44, 0xCC, "Parameters")] public float MouseYawDeltaNormalizedAmount;
        [RTTI.Member(45, 0xD0, "Parameters")] public float MousePitchDeltaNormalizedAmount;
        [RTTI.Member(46, 0xD4, "Parameters")] public float MouseYawRotationAngle;
        [RTTI.Member(47, 0xD8, "Parameters")] public float MousePitchRotationAngle;
    }

    [RTTI.Serializable(0x757C90629A057079, GameType.DS)]
    public class DSCameraDOFParameter : CoreObject
    {
        [RTTI.Member(2, 0x20)] public uint32 NameHash;
        [RTTI.Member(3, 0x24)] public uint32 Priority;
        [RTTI.Member(4, 0x28)] public bool OverrideFocusDistance;
        [RTTI.Member(5, 0x2C)] public float FocusDistance;
        [RTTI.Member(6, 0x30)] public float FocusDistanceInterpTime;
        [RTTI.Member(7, 0x34)] public bool OverrideAperture;
        [RTTI.Member(8, 0x38)] public float Aperture;
        [RTTI.Member(9, 0x3C)] public float ApertureInterpTime;
        [RTTI.Member(10, 0x40)] public bool SetFuzzySharpMode;
        [RTTI.Member(11, 0x44)] public float FuzzySharpInterpTime;
        [RTTI.Member(12, 0x48)] public bool OverrideNearFuzzy;
        [RTTI.Member(13, 0x4C)] public float NearFuzzy;
        [RTTI.Member(14, 0x50)] public bool OverrideNearSharp;
        [RTTI.Member(15, 0x54)] public float NearSharp;
        [RTTI.Member(16, 0x58)] public bool OverrideFarFuzzy;
        [RTTI.Member(17, 0x5C)] public float FarFuzzy;
        [RTTI.Member(18, 0x60)] public bool OverrideFarSharp;
        [RTTI.Member(19, 0x64)] public float FarSharp;
        [RTTI.Member(20, 0x68)] public bool OverrideMaxFuzzyNear;
        [RTTI.Member(21, 0x6C)] public float MaxFuzzyNear;
        [RTTI.Member(22, 0x70)] public bool OverrideMaxFuzzyFar;
        [RTTI.Member(23, 0x74)] public float MaxFuzzyFar;
    }

    [RTTI.Serializable(0xC9EA74D3AF6F44E, GameType.DS)]
    public class DSCameraInterface : RTTIObject
    {
    }

    [RTTI.Serializable(0xE1CB4A101B42F09A, GameType.DS)]
    public class DSCameraInterfaceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA98003D05821B3A1, GameType.DS)]
    public class DSCameraManualMoveEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4898FAC9A1FD7898, GameType.DS)]
    public class DSCameraManualMoveEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool FixedTargetMode;
        [RTTI.Member(11, 0x31, "Logic")] public bool HorizontalBasedMoveMode;
        [RTTI.Member(12, 0x32, "Logic")] public bool EnableSubjectiveCamera;
        [RTTI.Member(42, 0x33, "Logic")] public bool DisableHitCollisionInZooming;
        [RTTI.Member(9, 0x40, "Logic")] public Vec3 TargetPosition;
        [RTTI.Member(13, 0x50, "Logic")] public float PitchRangeMin;
        [RTTI.Member(14, 0x54, "Logic")] public float PitchRangeMax;
        [RTTI.Member(15, 0x58, "Logic")] public float HeadingRangeMin;
        [RTTI.Member(16, 0x5C, "Logic")] public float HeadingRangeMax;
        [RTTI.Member(17, 0x60, "Logic")] public Ref<CurveResource> PitchRangeMinCurve;
        [RTTI.Member(18, 0x68, "Logic")] public Ref<CurveResource> PitchRangeMaxCurve;
        [RTTI.Member(19, 0x70, "Logic")] public Ref<CurveResource> HeadingRangeMinCurve;
        [RTTI.Member(20, 0x78, "Logic")] public Ref<CurveResource> HeadingRangeMaxCurve;
        [RTTI.Member(10, 0x80, "Logic")] public Ref<LocatorResource> TargetLocator;
        [RTTI.Member(34, 0x88, "Logic")] public float SubjectivePitchRangeMin;
        [RTTI.Member(35, 0x8C, "Logic")] public float SubjectivePitchRangeMax;
        [RTTI.Member(21, 0x90, "Logic")] public float ZoomFOV;
        [RTTI.Member(22, 0x94, "Logic")] public float ZoomInterpTime;
        [RTTI.Member(23, 0x98, "Logic")] public float MoveRateInZoom;
        [RTTI.Member(24, 0x9C, "Logic")] public float TurnSpeedMax;
        [RTTI.Member(25, 0xA0, "Logic")] public float TurnAccel;
        [RTTI.Member(26, 0xA4, "Logic")] public float TurnBreak;
        [RTTI.Member(27, 0xA8, "Logic")] public float HorizontalRangeMin;
        [RTTI.Member(28, 0xAC, "Logic")] public float HorizontalRangeMax;
        [RTTI.Member(29, 0xB0, "Logic")] public float VertivalRangeMin;
        [RTTI.Member(30, 0xB4, "Logic")] public float VertivalRangeMax;
        [RTTI.Member(31, 0xB8, "Logic")] public float MoveSpeedMax;
        [RTTI.Member(32, 0xBC, "Logic")] public float MoveAccel;
        [RTTI.Member(33, 0xC0, "Logic")] public float MoveBreak;
        [RTTI.Member(36, 0xC4, "Logic")] public float NoInputTimeToStartReturnToOrigin;
        [RTTI.Member(37, 0xC8, "Logic")] public float ReturnToOriginSpeed;
        [RTTI.Member(38, 0xCC, "Logic")] public float ReturnToOriginMoveSpeed;
        [RTTI.Member(39, 0xD0, "Logic")] public float SubjectiveCameraInterpTime;
        [RTTI.Member(40, 0xD4, "Logic")] public float LengthToRotationCenter;
        [RTTI.Member(41, 0xD8, "Logic")] public float SharpRangeInZoomForAutoFocus;
    }

    [RTTI.Serializable(0x83B1DD5E504FF1BC, GameType.DS)]
    public class DSCameraManualMoveSequenceEventComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD6CA3BC984CF75DF, GameType.DS)]
    public class DSCameraManualMoveSequenceEventComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x6E4FFB49364BC09B, GameType.DS)]
    public class DSCameraMode : DSCameraModeBase
    {
    }

    [RTTI.Serializable(0xBB3400E0E7AD2A00, GameType.DS)]
    public class DSCameraModeBase : CoreObject
    {
    }

    [RTTI.Serializable(0x3D0A3905B864669F, GameType.DS)]
    public class DSCameraModeBaseResource : Resource
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<CameraModeResource> BaseResource;
        [RTTI.Member(5, 0x28, "Collision")] public Ref<CameraCollisionResource> CameraCollisionResource;
        [RTTI.Member(7, 0x30, "LookMagnets")] public CameraParmMagnetParms LookMagnetParms;
        [RTTI.Member(8, 0x50, "LookMagnets")] public Ref<CurveResource> LookSpringHeading;
        [RTTI.Member(9, 0x58, "LookMagnets")] public Ref<CurveResource> LookSpringPitch;
        [RTTI.Member(10, 0x60, "LookMagnets")] public Ref<CurveResource> FocusHeadingSpeedToLookScaler;
        [RTTI.Member(11, 0x68, "LookMagnets")] public Ref<CurveResource> FocusPitchSpeedToLookScaler;
        [RTTI.Member(12, 0x70, "LookMagnets")] public Ref<CurveResource> ViewHeadingSpeedToLookScaler;
        [RTTI.Member(13, 0x78, "LookMagnets")] public Ref<CurveResource> ViewPitchSpeedToLookScaler;
        [RTTI.Member(15, 0x80, "FrameMagnets")] public CameraParmMagnetParms FrameMagnetParms;
        [RTTI.Member(16, 0xA0, "FrameMagnets")] public Ref<CurveResource> FrameSpringHeading;
        [RTTI.Member(17, 0xA8, "FrameMagnets")] public Ref<CurveResource> FrameSpringPitch;
        [RTTI.Member(18, 0xB0, "FrameMagnets")] public Ref<CurveResource> FocusHeadingSpeedToFrameScaler;
        [RTTI.Member(19, 0xB8, "FrameMagnets")] public Ref<CurveResource> FocusPitchSpeedToFrameScaler;
        [RTTI.Member(20, 0xC0, "FrameMagnets")] public Ref<CurveResource> ViewHeadingSpeedToFrameScaler;
        [RTTI.Member(21, 0xC8, "FrameMagnets")] public Ref<CurveResource> ViewPitchSpeedToFrameScaler;
        [RTTI.Member(23, 0xD0, "Magnets")] public Ref<CurveResource> MagnetResetSpringHeading;
        [RTTI.Member(24, 0xD8, "Magnets")] public Ref<CurveResource> MagnetResetSpringPitch;
        [RTTI.Member(25, 0xE0, "Magnets")] public Ref<CurveResource> FocusHeadingSpeedToMagnetResetScaler;
        [RTTI.Member(26, 0xE8, "Magnets")] public Ref<CurveResource> FocusPitchSpeedToMagnetResetScaler;
        [RTTI.Member(27, 0xF0, "Magnets")] public Ref<CurveResource> ViewHeadingSpeedToMagnetResetScaler;
        [RTTI.Member(28, 0xF8, "Magnets")] public Ref<CurveResource> ViewPitchSpeedToMagnetResetScaler;
        [RTTI.Member(29, 0x100, "Magnets")] public Ref<CurveResource> ViewHeadingToMagnetHeadingMin;
        [RTTI.Member(30, 0x108, "Magnets")] public Ref<CurveResource> ViewHeadingToMagnetHeadingMax;
        [RTTI.Member(31, 0x110, "Magnets")] public Ref<CurveResource> ViewPitchToMagnetPitchMin;
        [RTTI.Member(32, 0x118, "Magnets")] public Ref<CurveResource> ViewPitchToMagnetPitchMax;
        [RTTI.Member(34, 0x120, "Aiming")] public CameraParmBool IsAiming;
        [RTTI.Member(36, 0x138, "HardAimMagnets")] public CameraParmMagnetParms HardAimMagnetParms;
        [RTTI.Member(37, 0x158, "HardAimMagnets")] public Ref<CurveResource> HardAimSpringHeading;
        [RTTI.Member(38, 0x160, "HardAimMagnets")] public Ref<CurveResource> HardAimSpringPitch;
        [RTTI.Member(39, 0x168, "HardAimMagnets")] public Ref<CurveResource> FocusHeadingSpeedToHardAimScaler;
        [RTTI.Member(40, 0x170, "HardAimMagnets")] public Ref<CurveResource> FocusPitchSpeedToHardAimScaler;
        [RTTI.Member(41, 0x178, "HardAimMagnets")] public Ref<CurveResource> ViewHeadingSpeedToHardAimScaler;
        [RTTI.Member(42, 0x180, "HardAimMagnets")] public Ref<CurveResource> ViewPitchSpeedToHardAimScaler;
        [RTTI.Member(44, 0x188, "Attachment")] public CameraParmFloat BaseSmoothing;
        [RTTI.Member(45, 0x1A0, "Attachment")] public CameraParmBool RotateWithBase;
        [RTTI.Member(47, 0x1B8, "EntityLookAt")] public CameraParmMagnetParms EntityLookAtMagnetParms;
    }

    [RTTI.Serializable(0xFB202086B44B138C, GameType.DS)]
    public class DSCameraModeBaseResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x51423432D5B2E160, GameType.DS)]
    public class DSCameraModeBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4C6BE36556FEB35D, GameType.DS)]
    public class DSCameraModeResource : DSCameraModeBaseResource
    {
        [RTTI.Member(97, 0x1F0, "Input")] public Ref<CurveResource> InputToSpeed;
        [RTTI.Member(49, 0x1F8, "Parameters")] public Ref<DSCameraCommonConfig> Config;
        [RTTI.Member(50, 0x200, "Parameters")] public Array<Ref<DSCameraParameter>> CameraParameter;
        [RTTI.Member(51, 0x210, "Parameters")] public Array<Ref<DSCameraAnimationParameter>> CameraAnimationParameter;
        [RTTI.Member(52, 0x220, "Parameters")] public Array<Ref<DSCameraDOFParameter>> CameraDOFParameter;
        [RTTI.Member(53, 0x230, "Parameters")] public float DistanceOfHandprintIsNear;
        [RTTI.Member(54, 0x234, "Parameters")] public float AdditionalDistanceWhenHandprintIsNear;
        [RTTI.Member(55, 0x238, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenHandprintIsNear;
        [RTTI.Member(56, 0x23C, "Parameters")] public float DistanceOfCatcherIsNear;
        [RTTI.Member(57, 0x240, "Parameters")] public float AdditionalDistanceWhenCatcherIsNear;
        [RTTI.Member(58, 0x244, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenCatcherIsNear;
        [RTTI.Member(59, 0x248, "Parameters")] public float DistanceOfCatcherIsNear2;
        [RTTI.Member(60, 0x24C, "Parameters")] public float AdditionalDistanceWhenCatcherIsNear2;
        [RTTI.Member(61, 0x250, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenCatcherIsNear2;
        [RTTI.Member(62, 0x254, "Parameters")] public float DistanceOfEnemyIsNear;
        [RTTI.Member(63, 0x258, "Parameters")] public float AdditionalDistanceWhenEnemyIsNear;
        [RTTI.Member(64, 0x25C, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenEnemyIsNear;
        [RTTI.Member(65, 0x260, "Parameters")] public float AdditionalDistanceWhenGazerIsNear;
        [RTTI.Member(66, 0x264, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenGazerIsNear;
        [RTTI.Member(67, 0x268, "Parameters")] public float OverrideFovWhenGazerIsNear;
        [RTTI.Member(68, 0x26C, "Parameters")] public float InterpTimeOfOverrideFovWhenGazerIsNear;
        [RTTI.Member(73, 0x270, "Parameters")] public float AdditionalHeightWhenHunterAppeared;
        [RTTI.Member(74, 0x274, "Parameters")] public float AdditionalDistanceWhenHunterAppeared;
        [RTTI.Member(75, 0x278, "Parameters")] public float InterpTimeOfAdditionalHeightWhenHunterAppeared;
        [RTTI.Member(76, 0x27C, "Parameters")] public float AdditionalHeightWhenCatchedByHunter;
        [RTTI.Member(77, 0x280, "Parameters")] public float AdditionalDistanceWhenCatchedByHunter;
        [RTTI.Member(78, 0x284, "Parameters")] public float InterpTimeOfAdditionalHeightWhenCatchedByHunter;
        [RTTI.Member(79, 0x288, "Parameters")] public float AdditionalDistanceWhenMovingToFront;
        [RTTI.Member(80, 0x28C, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenMovingToFront;
        [RTTI.Member(81, 0x290, "Parameters")] public float AngleOfDecidingMovingToFront;
        [RTTI.Member(82, 0x294, "Parameters")] public float AdditionalDistanceWhenBreathStopping;
        [RTTI.Member(83, 0x298, "Parameters")] public float AdditionalDistanceWhenBreathStoppingMove;
        [RTTI.Member(84, 0x29C, "Parameters")] public float AdditionalDistanceWhenBreathStoppingCrouch;
        [RTTI.Member(85, 0x2A0, "Parameters")] public float AdditionalDistanceWhenBreathStoppingCrouchMove;
        [RTTI.Member(86, 0x2A4, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenBreathStopping;
        [RTTI.Member(87, 0x2A8, "Parameters")] public float AdditionalDistanceWhenEnemyIsFainted;
        [RTTI.Member(88, 0x2AC, "Parameters")] public float InterpTimeOfAdditionalDistanceWhenEnemyIsFainted;
        [RTTI.Member(69, 0x2B0, "Parameters")] public float OverrideFovOnStartSimpleEncounterAct;
        [RTTI.Member(71, 0x2B4, "Parameters")] public float LifeTimeOfOverrideFovOnStartSimpleEncounterAct;
        [RTTI.Member(70, 0x2B8, "Parameters")] public float InterpTimeOfOverrideFovOnStartSimpleEncounterAct;
        [RTTI.Member(72, 0x2BC, "Parameters")] public float DistanceOnStartSimpleEscapeAct;
        [RTTI.Member(89, 0x2C0, "Parameters")] public float AimCheckLengthDefault;
        [RTTI.Member(90, 0x2C4, "Parameters")] public float AimCheckLengthAtSubjective;
        [RTTI.Member(91, 0x2C8, "Parameters")] public float TpsCameraAimDistanceOnStart;
        [RTTI.Member(92, 0x2CC, "Parameters")] public float TpsCameraWaitTimeToStartFocus;
        [RTTI.Member(93, 0x2D0, "Parameters")] public Vec3 PhotoModePanSpeed;
        [RTTI.Member(94, 0x2E0, "Parameters")] public Vec3 PhotoModePanRange;
        [RTTI.Member(95, 0x2F0, "Parameters")] public Vec3 PhotoModePanRangeAtPrivateRoom;
        [RTTI.Member(99, 0x300, "Sound")] public Array<Ref<SoundResource>> Sounds;
        [RTTI.Member(101, 0x310, "Subspace")] public Ref<CameraEntityResource> SubspaceCameraEntityResource;
        [RTTI.Member(103, 0x318, "View")] public Ref<EntityResource> DamageViewEntityResource;
        [RTTI.Member(104, 0x320, "View")] public Ref<CurveResource> DamageViewFadeCurveResource;
        [RTTI.Member(105, 0x328, "View")] public Ref<EntityResource> UnconsciousViewEntityResource;
        [RTTI.Member(106, 0x330, "View")] public Ref<CurveResource> UnconsciousViewFadeCurveResource;
        [RTTI.Member(107, 0x338, "View")] public Ref<EntityResource> NoiseViewEntityResource;
        [RTTI.Member(108, 0x340, "View")] public Ref<CurveResource> NoiseViewLevelCurveResource;
        [RTTI.Member(109, 0x348, "View")] public Ref<EntityResource> MenuBackgroundViewEntityResource;
        [RTTI.Member(110, 0x350, "View")] public Ref<EntityResource> DraggingBlurEntityResource;
        [RTTI.Member(111, 0x358, "View")] public Ref<EntityResource> StealthViewEntityResource;
        [RTTI.Member(112, 0x360, "View")] public Ref<EntityResource> SmokeViewEntityResource;
        [RTTI.Member(113, 0x368, "View")] public Ref<EntityResource> ChillsViewEntityResource;
        [RTTI.Member(114, 0x370, "View")] public Ref<EntityResource> HalationViewEntityResource;
        [RTTI.Member(115, 0x378, "View")] public Ref<EntityResource> ZiplineViewEntityResource;
        [RTTI.Member(116, 0x380, "View")] public Ref<EntityResource> HiggsUnconsciousViewEntityResource;
        [RTTI.Member(117, 0x388, "View")] public Ref<EntityResource> SimpleChillsViewEntityResource;
        [RTTI.Member(119, 0x390, "View")] public Array<Ref<EffectComponentResource>> EffectResources;
        [RTTI.Member(120, 0x3A0, "View")] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(121, 0x3B0, "View")] public Array<Ref<ForceFieldResource>> ForceFields;
    }

    [RTTI.Serializable(0xF1627C74B2E9BF0E, GameType.DS)]
    public class DSCameraParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Base")] public Ref<DSCameraParameter> Base;
        [RTTI.Member(5, 0x28, "Parameters")] public EDSCameraType Type;
        [RTTI.Member(6, 0x2A, "Parameters")] public EDSCameraParam Param;
        [RTTI.Member(7, 0x2C, "Parameters")] public EDSCameraBaseType BaseType;
        [RTTI.Member(19, 0x30, "Parameters")] public CameraParmVec3 BaseOffset;
        [RTTI.Member(8, 0x50, "Parameters")] public String BaseHelperName;
        [RTTI.Member(9, 0x58, "Parameters")] public bool SetBaseRotationToBaseEntity;
        [RTTI.Member(10, 0x59, "Parameters")] public EDSCameraStockType StockType;
        [RTTI.Member(11, 0x60, "Parameters")] public CameraParmFloat TurnRate;
        [RTTI.Member(12, 0x78, "Parameters")] public CameraParmFloat TurnAccelX;
        [RTTI.Member(13, 0x90, "Parameters")] public CameraParmFloat TurnAccelY;
        [RTTI.Member(14, 0xA8, "Parameters")] public CameraParmFloat TurnBreakX;
        [RTTI.Member(15, 0xC0, "Parameters")] public CameraParmFloat TurnBreakY;
        [RTTI.Member(16, 0xD8, "Parameters")] public CameraParmFloat TurnAccelMultiplierWhenConfigMax;
        [RTTI.Member(17, 0xF0, "Parameters")] public CameraParmFloat TurnBreakMultiplierWhenConfigMax;
        [RTTI.Member(18, 0x108, "Parameters")] public CameraParmFloat Distance;
        [RTTI.Member(20, 0x120, "Parameters")] public CameraParmVec3 Offset;
        [RTTI.Member(21, 0x140, "Parameters")] public CameraParmFloat FOV;
        [RTTI.Member(22, 0x158, "Parameters")] public CameraParmFloat DistanceInterpTime;
        [RTTI.Member(23, 0x170, "Parameters")] public CameraParmFloat BaseOffsetInterpTime;
        [RTTI.Member(24, 0x188, "Parameters")] public CameraParmFloat OffsetInterpTime;
        [RTTI.Member(25, 0x1A0, "Parameters")] public CameraParmFloat FOVInterpTime;
        [RTTI.Member(26, 0x1B8, "Parameters")] public CameraParmFloat DistanceInterpTimeOut;
        [RTTI.Member(27, 0x1D0, "Parameters")] public CameraParmFloat BaseOffsetInterpTimeOut;
        [RTTI.Member(28, 0x1E8, "Parameters")] public CameraParmFloat OffsetInterpTimeOut;
        [RTTI.Member(29, 0x200, "Parameters")] public CameraParmFloat DistanceInterpTimeOnChangeModule;
        [RTTI.Member(30, 0x218, "Parameters")] public CameraParmFloat BaseOffsetInterpTimeOnChangeModule;
        [RTTI.Member(31, 0x230, "Parameters")] public CameraParmFloat OffsetInterpTimeOnChangeModule;
        [RTTI.Member(32, 0x248, "Parameters")] public CameraParmFloat RotXMin;
        [RTTI.Member(33, 0x260, "Parameters")] public CameraParmFloat RotXMax;
        [RTTI.Member(34, 0x278, "Parameters")] public CameraParmFloat DistanceAtRotXMin;
        [RTTI.Member(35, 0x290, "Parameters")] public CameraParmFloat DistanceAtRotXMax;
        [RTTI.Member(36, 0x2A8, "Parameters")] public CameraParmFloat DistanceAdjustStartRotXForMinDir;
        [RTTI.Member(37, 0x2C0, "Parameters")] public CameraParmFloat DistanceAdjustStartRotXForMaxDir;
        [RTTI.Member(38, 0x2E0, "Parameters")] public CameraParmVec3 AdditionalOffsetAtRotXMin;
        [RTTI.Member(39, 0x300, "Parameters")] public CameraParmVec3 AdditionalOffsetAtRotXMax;
        [RTTI.Member(40, 0x320, "Parameters")] public CameraParmFloat AdditionalOffsetStartRotXForMinDir;
        [RTTI.Member(41, 0x338, "Parameters")] public CameraParmFloat AdditionalOffsetStartRotXForMaxDir;
        [RTTI.Member(42, 0x350, "Parameters")] public CameraParmFloat AdditionalFOVAtRotXMin;
        [RTTI.Member(43, 0x368, "Parameters")] public CameraParmFloat AdditionalFOVAtRotXMax;
        [RTTI.Member(44, 0x380, "Parameters")] public CameraParmFloat AdditionalFOVStartRotXForMinDir;
        [RTTI.Member(45, 0x398, "Parameters")] public CameraParmFloat AdditionalFOVStartRotXForMaxDir;
        [RTTI.Member(46, 0x3B0, "Parameters")] public CameraParmBool DoAutoFocus;
        [RTTI.Member(47, 0x3C8, "Parameters")] public CameraParmFloat FocusDistance;
        [RTTI.Member(48, 0x3E0, "Parameters")] public CameraParmFloat DoFInterpTime;
        [RTTI.Member(49, 0x3F8, "Parameters")] public CameraParmBool AutoAperture;
        [RTTI.Member(50, 0x410, "Parameters")] public CameraParmFloat Aperture;
        [RTTI.Member(51, 0x428, "Parameters")] public CameraParmBool EnableZoom;
        [RTTI.Member(52, 0x440, "Parameters")] public CameraParmBool EnableSituationAdditionalParam;
        [RTTI.Member(53, 0x458, "Parameters")] public CameraParmFloat ZoomScale;
        [RTTI.Member(54, 0x470, "Parameters")] public CameraParmVec3 ZoomBaseOffset;
        [RTTI.Member(55, 0x490, "Parameters")] public CameraParmVec3 ZoomOffset;
        [RTTI.Member(56, 0x4B0, "Parameters")] public CameraParmFloat ZoomDistance;
        [RTTI.Member(57, 0x4C8, "Parameters")] public CameraParmFloat ZoomInterpTime;
        [RTTI.Member(58, 0x4E0, "Parameters")] public CameraParmBool ZoomAutoAperture;
        [RTTI.Member(59, 0x4F8, "Parameters")] public CameraParmFloat ZoomAperture;
        [RTTI.Member(60, 0x510, "Parameters")] public CameraParmBool IsInitialRotValid;
        [RTTI.Member(61, 0x528, "Parameters")] public CameraParmFloat InitialRotX;
        [RTTI.Member(62, 0x540, "Parameters")] public CameraParmFloat InitialRotY;
        [RTTI.Member(63, 0x558, "Parameters")] public CameraParmBool IsRotYLimitValid;
        [RTTI.Member(64, 0x570, "Parameters")] public CameraParmFloat RotYCenter;
        [RTTI.Member(65, 0x588, "Parameters")] public CameraParmFloat RotYRange;
        [RTTI.Member(66, 0x5A0, "Parameters")] public Ref<DSCameraDOFParameter> DOFParameter;
    }

    [RTTI.Serializable(0x8B91F852A4AD056, GameType.DS)]
    public class DSCameraStopManualMoveEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA461623BD33F4DA8, GameType.DS)]
    public class DSCameraStopManualMoveEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xA442E0D04D2188BF, GameType.DS)]
    public class DSCarriableInfo : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public EDSCarriableType Type;
        [RTTI.Member(4, 0x24, "General")] public EDSCarriableSize SizeType;
        [RTTI.Member(5, 0x28, "General")] public String CarriableName;
        [RTTI.Member(6, 0x30, "General")] public float Weight;
    }

    [RTTI.Serializable(0x60D5C53952CE7599, GameType.DS)]
    public class DSCartCodeMover : Mover
    {
    }

    [RTTI.Serializable(0xBAE43AD68D3DA28A, GameType.DS)]
    public class DSCartCodeMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x1F643E5F5EAD1F97, GameType.DS)]
    public class DSCartGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0xA015FE408B748CAF, GameType.DS)]
    public class DSCartGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "DSCart")] public StreamingRef<GameActorSpecificData> CustomSpecificData;
    }

    [RTTI.Serializable(0x17287287F42A0215, GameType.DS)]
    public class DSCartGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0x5B1084E7C2221EFC, GameType.DS)]
    public class DSCartGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0x853E0B875F2548F5, GameType.DS)]
    public class DSCartMover : Mover
    {
    }

    [RTTI.Serializable(0xD00044E6D2C160EE, GameType.DS)]
    public class DSCartMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xA93A357C192F8B43, GameType.DS)]
    public class DSCatalogueEnumsHolder : Resource
    {
        [RTTI.Member(3, 0x20, "Enums")] public EDSCatalogueListItem_SpecialItemId Dummy1;
    }

    [RTTI.Serializable(0xAB6685FB791CF76D, GameType.DS)]
    public class DSCatalogueListItemCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x4B297EC925157266, GameType.DS)]
    public class DSCatalogueListItemCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x517D86E3B87C286, GameType.DS)]
    public class DSCatcherAttackHintPath : DSAttackPath
    {
        [RTTI.Member(9, 0x80, "DS")] public uint32 IdHash;
        [RTTI.Member(10, 0x84, "DS")] public float AreaRadius;
        [RTTI.Member(11, 0x88, "DS")] public float AreaHeight;
    }

    [RTTI.Serializable(0xDA57588309F3B85A, GameType.DS)]
    public class DSCatcherBaseComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x61391F888B130FCC, GameType.DS)]
    public class DSCatcherBaseComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<PhysicsCollisionResource> PhysicsResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<PhysicsCollisionResource> MainCollisionPhysicsResource;
        [RTTI.Member(5, 0x30, "General")] public Ref<EntityResource> FluidThrowableResource;
        [RTTI.Member(6, 0x38, "General")] public Ref<DSCatcherParameterBaseResource> ParameterResource;
        [RTTI.Member(7, 0x40, "General")] public Ref<ParticleSystemResource> AnnihilationEffectParticleSystem;
        [RTTI.Member(8, 0x48, "General")] public String AnnihilationPositionHelperName;
        [RTTI.Member(9, 0x50, "General")] public Array<Ref<EffectComponentResource>> EffectComponentResources;
        [RTTI.Member(10, 0x60, "General")] public bool IsNotTransparentPaintType;
        [RTTI.Member(11, 0x64, "General")] public float LifeBarZOffset;
    }

    [RTTI.Serializable(0x749E712CDD21CAB5, GameType.DS)]
    public class DSCatcherDifficultyParameterBaseResource : Resource
    {
        [RTTI.Member(2, 0x20)] public float LifeScale;
        [RTTI.Member(3, 0x24)] public float SubLifeScale;
        [RTTI.Member(4, 0x28)] public float DamageCorrectionScaleForPlayer;
        [RTTI.Member(5, 0x2C)] public bool EnableOverrideChiralDrop;
        [RTTI.Member(6, 0x30)] public IRange OverrideSmallChiralDrop;
        [RTTI.Member(7, 0x38)] public IRange OverrideMiddleChiralDrop;
        [RTTI.Member(8, 0x40)] public IRange OverrideLargeChiralDrop;
        [RTTI.Member(10, 0x48, "Quad")] public float QuadToughnessScale;
        [RTTI.Member(11, 0x4C, "Quad")] public bool QuadTarBeamHomingAlways;
        [RTTI.Member(12, 0x4D, "Quad")] public bool QuadSkipAttackPreparationAlways;
        [RTTI.Member(13, 0x50, "Quad")] public int QuadAdditionalAppearingCount;
        [RTTI.Member(14, 0x54, "Quad")] public float QuadMotionSpeedScale;
        [RTTI.Member(16, 0x58, "Titan")] public float TitanJellyfishCooldownTimeScale;
        [RTTI.Member(17, 0x5C, "Titan")] public float TitanTentacleComboCooldownTimeScale;
        [RTTI.Member(18, 0x60, "Titan")] public float TitanHunterMissileCooldownTimeScale;
        [RTTI.Member(19, 0x64, "Titan")] public float TitanJellyfishSpawnIntervalTimeScale;
        [RTTI.Member(20, 0x68, "Titan")] public float TitanTentacleWeightScale;
        [RTTI.Member(21, 0x6C, "Titan")] public float TitanTentacleDefaultHomingScale;
        [RTTI.Member(22, 0x70, "Titan")] public float TitanTentacleComboHomingScale;
        [RTTI.Member(23, 0x74, "Titan")] public float TitanTentacleAnnihilationHomingScale;
        [RTTI.Member(24, 0x78, "Titan")] public float TitanTentacleHomingEndDistanceScale;
        [RTTI.Member(25, 0x7C, "Titan")] public bool TitanEnableTentacleHitDamage;
        [RTTI.Member(27, 0x80, "Whale")] public float WhaleToughnessScale;
        [RTTI.Member(28, 0x84, "Whale")] public float WhaleCaptureDelayTime;
        [RTTI.Member(30, 0x88, "Octpus")] public float OctpusToughnessThreshold;
        [RTTI.Member(32, 0x8C, "StrandObject")] public float TimeToSinkAuto;
    }

    [RTTI.Serializable(0x96C4C3B966CCE71C, GameType.DS)]
    public class DSCatcherFormVariationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAC3107474776F741, GameType.DS)]
    public class DSCatcherFormVariationComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public bool IsDefault;
        [RTTI.Member(4, 0x30)] public Ref<ModelResource> Model;
        [RTTI.Member(5, 0x38)] public Array<Ref<EntityComponentResource>> EntityComponent;
        [RTTI.Member(6, 0x48)] public Ref<EntityResource> MorphingEntityResource;
    }

    [RTTI.Serializable(0x60ED83AD07B25271, GameType.DS)]
    public class DSCatcherGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x6C83D18403569549, GameType.DS)]
    public class DSCatcherGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "CatcherDebug")] public Array<String> DebugAiFacts;
        [RTTI.Member(12, 0xC0, "CatcherDebug")] public EDSCatcherType CatcherType;
    }

    [RTTI.Serializable(0xC25AEBB3EF67DEE7, GameType.DS)]
    public class DSCatcherGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xF7EB4786FE7E6C34, GameType.DS)]
    public class DSCatcherGameActorUnitResource : DSGameActorUnitResource
    {
        [RTTI.Member(12, 0x58)] public EDSCatcherType Type;
        [RTTI.Member(13, 0x5C)] public int AppearingCount;
        [RTTI.Member(14, 0x60)] public Ref<DSCatcherParameterBaseResource> ParameterResource;
    }

    [RTTI.Serializable(0xA4BF0387B704A677, GameType.DS)]
    public class DSCatcherGhostComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x95231B809F5120EF, GameType.DS)]
    public class DSCatcherGhostComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSCatcherGhostMapResource> MapResource;
    }

    [RTTI.Serializable(0xC0BE053E783370FB, GameType.DS)]
    public class DSCatcherGhostMapResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public uint32 AreaId;
        [RTTI.Member(4, 0x24, "General")] public int NumXTiles;
        [RTTI.Member(5, 0x28, "General")] public int NumYTiles;
        [RTTI.Member(6, 0x30, "General")] public Array<Vec2> CatcherTerritoryPoints;
        [RTTI.Member(7, 0x40, "General")] public Vec2 World2MapScale;
        [RTTI.Member(8, 0x50, "General")] public Vec2 World2MapOffset;
        [RTTI.Member(9, 0x60, "General")] public Vec2 Map2WorldScale;
        [RTTI.Member(10, 0x70, "General")] public Vec2 Map2WorldOffset;
        [RTTI.Member(11, 0x80, "General")] public int MapWidth;
        [RTTI.Member(12, 0x84, "General")] public int MapHeight;
        [RTTI.Member(13, 0x88, "General")] public float MapMinHeight;
        [RTTI.Member(14, 0x8C, "General")] public float MapMaxHeight;
        [RTTI.Member(15, 0x90, "General")] public Array<uint8> MoveDirectionMap;
        [RTTI.Member(16, 0xA0, "General")] public Array<uint8> MapHeights;
    }

    [RTTI.Serializable(0x994266975E636161, GameType.DS)]
    public class DSCatcherGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x63B9066B1FEAAE1A, GameType.DS)]
    public class DSCatcherHunterParameterResource : Resource
    {
        [RTTI.Member(3, 0x20, "Hunter")] public float HunterDragSpeedRate;
        [RTTI.Member(4, 0x24, "Hunter")] public float HunterDragStrengthRate;
        [RTTI.Member(5, 0x28, "Hunter")] public float HunterTrackingTime;
        [RTTI.Member(6, 0x2C, "Hunter")] public float HunterTrackingSpeed;
    }

    [RTTI.Serializable(0xB3A77A7981918527, GameType.DS)]
    public class DSCatcherJellyfishComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE8B850A9A55B6EFF, GameType.DS)]
    public class DSCatcherJellyfishComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSCatcherJellyfishConfig> Config;
        [RTTI.Member(3, 0x28)] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(5, 0x38)] public Ref<BooleanFact> DisableFact;
        [RTTI.Member(6, 0x40)] public Ref<BooleanFact> CutsceneFact;
        [RTTI.Member(7, 0x48)] public Ref<EntityResource> DivisionJellyfishResource;
        [RTTI.Member(4, 0x50)] public String SpecifiedMeshName;
    }

    [RTTI.Serializable(0xACBFFE95D703364A, GameType.DS)]
    public class DSCatcherJellyfishConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public float PlayerDetectionRange;
        [RTTI.Member(3, 0x24)] public float HearingRange;
        [RTTI.Member(4, 0x28)] public float StartExplosionRadius;
        [RTTI.Member(5, 0x2C)] public float HomingAccelMax;
        [RTTI.Member(6, 0x30)] public float HomingSpeedMax;
        [RTTI.Member(7, 0x34)] public float HomingTime;
        [RTTI.Member(8, 0x38)] public float BlastSpeedMax;
        [RTTI.Member(9, 0x3C)] public float BlastRange;
        [RTTI.Member(10, 0x40)] public float ExplosionPreparationTime;
        [RTTI.Member(11, 0x44)] public float ExplosionAttackRadius;
        [RTTI.Member(12, 0x48)] public float ExplosionFriendryAttackRadius;
        [RTTI.Member(13, 0x4C)] public float AdhereTime;
        [RTTI.Member(14, 0x50)] public EDSCatcherJellyfishInitalState InitialState;
        [RTTI.Member(15, 0x52)] public EDSAttackId ExplosionAttackId;
        [RTTI.Member(16, 0x54)] public float MeshScaleMin;
        [RTTI.Member(17, 0x58)] public float MeshScaleMax;
        [RTTI.Member(18, 0x5C)] public float Life;
        [RTTI.Member(19, 0x60)] public bool ShouldAvoidCatcherTitan;
    }

    [RTTI.Serializable(0x6E00E66C6D9C3C0A, GameType.DS)]
    public class DSCatcherJellyfishMover : Mover
    {
    }

    [RTTI.Serializable(0x6BCE1AD47CB32C1F, GameType.DS)]
    public class DSCatcherJellyfishMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x999DF4F6DCC0F8EA, GameType.DS)]
    public class DSCatcherManagerCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xA4EF5D7A41F2803F, GameType.DS)]
    public class DSCatcherManagerCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9BBBD1A0B86C7F80, GameType.DS)]
    public class DSCatcherManagerNotifyEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x32EC2C9E02883240, GameType.DS)]
    public class DSCatcherManagerNotifyEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public EDSCatcherManagerNotifyEventType NotifyEventType;
    }

    [RTTI.Serializable(0x6A991BAB5C3D852E, GameType.DS)]
    public class DSCatcherManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSCatcherParameterBaseResource> ParameterResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<ParticleSystemResource> AreaEffectParticleSystem;
        [RTTI.Member(5, 0x30, "General")] public Ref<ParticleSystemResource> AreaEffectParticleSystem2;
        [RTTI.Member(6, 0x38, "General")] public Ref<ParticleSystemResource> AreaEffectParticleSystem3;
        [RTTI.Member(7, 0x40, "General")] public Ref<ParticleSystemResource> AreaEffectParticleSystemGold;
        [RTTI.Member(8, 0x48, "General")] public Ref<ParticleSystemResource> AreaEffectParticleSystem2Gold;
        [RTTI.Member(9, 0x50, "General")] public Ref<ParticleSystemResource> DeathStrandEffect;
        [RTTI.Member(10, 0x58, "General")] public Ref<ParticleSystemResource> AnnihilationEffect;
        [RTTI.Member(11, 0x60, "General")] public Ref<ScreenEffectResource> FadeIOScreenEffect;
        [RTTI.Member(12, 0x68, "General")] public Array<Ref<DSCatcherGhostMapResource>> GhostNeighborMapResources;
        [RTTI.Member(13, 0x78, "General")] public Ref<EntityResource> StrandObjectCoordinator;
        [RTTI.Member(14, 0x80, "General")] public Ref<EntityResource> CraterEntityResource;
        [RTTI.Member(15, 0x88, "General")] public Ref<EntityResource> SupportHunterEntityResource;
        [RTTI.Member(19, 0x90, "General")] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(16, 0xA0, "General")] public Ref<EntityResource> FallenTreeEntityResource;
        [RTTI.Member(17, 0xA8, "General")] public Ref<EntityResource> CatcherAreaEntityResource;
        [RTTI.Member(18, 0xB0, "General")] public Ref<EntityResource> ChiralWallEntityResource;
        [RTTI.Member(20, 0xB8, "General")] public Array<Ref<NavMeshAreaTag>> ExclusionNavAreaTag;
        [RTTI.Member(21, 0xC8, "General")] public Ref<BooleanFact> JellyfishCutsceneFact;
    }

    [RTTI.Serializable(0xA6A2B2A6421790CE, GameType.DS)]
    public class DSCatcherMorphingControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC596EFF91028A235, GameType.DS)]
    public class DSCatcherMorphingControlComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x39287D7F8F83DB1F, GameType.DS)]
    public class DSCatcherMorphingControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public int MorphGestureNumber;
        [RTTI.Member(3, 0x24)] public float MorphStartScale;
    }

    [RTTI.Serializable(0x8DB37F15DEE9CCE3, GameType.DS)]
    public class DSCatcherOctpusBodyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2E076C01B5E7E420, GameType.DS)]
    public class DSCatcherOctpusBodyComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3CB3B98422F90771, GameType.DS)]
    public class DSCatcherOctpusBodyComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ParticleSystemResource> BodyEffectParticleSystem;
        [RTTI.Member(3, 0x30)] public Ref<ParticleSystemResource> GroundTarParticleSystem;
        [RTTI.Member(4, 0x38)] public Ref<ParticleSystemResource> TarSplashParticleSystem0;
        [RTTI.Member(5, 0x40)] public Ref<ParticleSystemResource> TarSplashParticleSystem1;
        [RTTI.Member(6, 0x48)] public Ref<ParticleSystemResource> FlashLightParticleSystem;
        [RTTI.Member(7, 0x50)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(8, 0x60)] public Ref<ShakeResource> EmergenceShakeResource;
        [RTTI.Member(9, 0x68)] public Ref<ShakeResource> GroundHitingShakeResource;
        [RTTI.Member(10, 0x70)] public Ref<RenderEffectResource> BodyEffect3RenderEffectsResource;
        [RTTI.Member(11, 0x78)] public float BodyBaseScale;
        [RTTI.Member(12, 0x80)] public Ref<StaticMeshResource> GroundTarMeshResource;
        [RTTI.Member(13, 0x88)] public Ref<CurveResource> GroundTarFadeInCurveResource;
        [RTTI.Member(14, 0x90)] public Ref<CurveResource> GroundTarFadeOutCurveResource;
        [RTTI.Member(15, 0x98)] public Ref<DSAnimInfoResource> AnimInfoResource;
        [RTTI.Member(16, 0xA0)] public Ref<EntityResource> WaterGunEntityResource;
        [RTTI.Member(17, 0xA8)] public Array<Ref<ArtPartsEffectResourceBase>> ArtPartsEffectResources;
        [RTTI.Member(18, 0xB8)] public Array<Ref<ArtPartsEffectResourceBase>> ArtPartsEffectResourcesForRumble;
        [RTTI.Member(19, 0xC8)] public Array<DSCatcherOctpusCurveData> CurveDatas;
    }

    [RTTI.Serializable(0x729EE893EED980D6, GameType.DS)]
    public class DSCatcherOctpusCurveData
    {
        [RTTI.Member(0, 0x0)] public uint32 Hash;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x289D0026908C88A6, GameType.DS)]
    public class DSCatcherParameterBaseResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float ActiveAreaDistance;
        [RTTI.Member(4, 0x24, "General")] public float MimimumSpawnDistance;
        [RTTI.Member(16, 0x28, "General")] public Ref<DSCatcherStrandObjectParameterResource> StrandObjectParameterResource;
        [RTTI.Member(17, 0x30, "General")] public Ref<DSCatcherHunterParameterResource> HunterParameterResource;
        [RTTI.Member(28, 0x38, "Difficalty")] public Ref<DSCatcherDifficultyParameterBaseResource> VeryEasyParameter;
        [RTTI.Member(29, 0x40, "Difficalty")] public Ref<DSCatcherDifficultyParameterBaseResource> EasyParameter;
        [RTTI.Member(30, 0x48, "Difficalty")] public Ref<DSCatcherDifficultyParameterBaseResource> NormalParameter;
        [RTTI.Member(31, 0x50, "Difficalty")] public Ref<DSCatcherDifficultyParameterBaseResource> HardParameter;
        [RTTI.Member(32, 0x58, "Difficalty")] public Ref<DSCatcherDifficultyParameterBaseResource> VeryHardParameter;
        [RTTI.Member(21, 0x60, "Damage")] public float MaxLife;
        [RTTI.Member(22, 0x64, "Damage")] public float MaxSubLife;
        [RTTI.Member(23, 0x68, "Damage")] public float DamageScaleForMouth;
        [RTTI.Member(24, 0x6C, "Damage")] public float DamageScaleForMask;
        [RTTI.Member(35, 0x70, "Options")] public IRange SmallChiralDrop;
        [RTTI.Member(36, 0x78, "Options")] public IRange MiddleChiralDrop;
        [RTTI.Member(37, 0x80, "Options")] public IRange LargeChiralDrop;
        [RTTI.Member(25, 0x88, "Damage")] public float InvincibleTime;
        [RTTI.Member(18, 0x8C, "General")] public float TarHeightUnderLimit;
        [RTTI.Member(19, 0x90, "General")] public EDSCatcherTarType TarType;
        [RTTI.Member(26, 0x98, "Damage")] public Ref<CurveResource> BloodGrenadeDamageScale;
        [RTTI.Member(34, 0xA0, "Options")] public Array<uint32> BehaveOptions;
        [RTTI.Member(5, 0xB0, "General")] public int AppeaingCount;
        [RTTI.Member(6, 0xB4, "General")] public bool IsWayBack;
        [RTTI.Member(7, 0xB5, "General")] public bool IsBossMode;
        [RTTI.Member(8, 0xB6, "General")] public bool IsSubordinate;
        [RTTI.Member(9, 0xB7, "General")] public bool IsDisableWeatherControl;
        [RTTI.Member(10, 0xB8, "General")] public bool IsVisibleDirectly;
        [RTTI.Member(11, 0xB9, "General")] public bool IsSkipStartDrag;
        [RTTI.Member(12, 0xBA, "General")] public bool IsBlackSamGameover;
        [RTTI.Member(13, 0xBB, "General")] public bool IsSpawnAtEvent;
        [RTTI.Member(14, 0xBC, "General")] public bool IsDisableCrater;
        [RTTI.Member(15, 0xBD, "General")] public bool IsForceDisableChiralWall;
        [RTTI.Member(38, 0xBE, "Options")] public bool IsSkipChiralDropAnim;
    }

    [RTTI.Serializable(0x38F121AAEFB35356, GameType.DS)]
    public class DSCatcherQuadAreaSettings : ParentWorldNode
    {
        [RTTI.Member(6, 0x70)] public Ref<CollisionTrigger> StartHideTrigger;
        [RTTI.Member(7, 0x78)] public Ref<CollisionTrigger> KeepHideTrigger;
        [RTTI.Member(8, 0x80)] public Array<Ref<DSCatcherQuadChasePoint>> ChasePoints;
        [RTTI.Member(9, 0x90)] public Array<Ref<DSCatcherQuadRestartPoint>> RestartPoints;
    }

    [RTTI.Serializable(0xE58AB36848A45064, GameType.DS)]
    public class DSCatcherQuadChasePoint : WorldNode
    {
    }

    [RTTI.Serializable(0x33F5021DE9A45388, GameType.DS)]
    public class DSCatcherQuadComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA333B6761B938EBF, GameType.DS)]
    public class DSCatcherQuadComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSCatcherQuadParameter> Parameter;
        [RTTI.Member(3, 0x28)] public Ref<DSCatcherQuadPlanningParameter> PlanningParameter;
        [RTTI.Member(4, 0x30)] public Ref<DSCatcherQuadSpitParameter> SpitParameter;
        [RTTI.Member(5, 0x38)] public Array<Ref<NamedSoundResource>> SoundResources;
    }

    [RTTI.Serializable(0xE6438308C1C3F205, GameType.DS)]
    public class DSCatcherQuadDamageCollisionBox
    {
        [RTTI.Member(0, 0x0)] public String JointName;
        [RTTI.Member(1, 0x10)] public Mat44 Matrix;
    }

    [RTTI.Serializable(0x5DD42601DD0DC1AA, GameType.DS)]
    public class DSCatcherQuadDamageCollisionBoxResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<DSCatcherQuadDamageCollisionBox> MaskCollisionBoxes;
        [RTTI.Member(3, 0x30)] public Array<DSCatcherQuadDamageCollisionBox> MouthCollisionBoxes;
        [RTTI.Member(4, 0x40)] public bool IsMouthEnabledAlways;
    }

    [RTTI.Serializable(0xD6382125B60A79FC, GameType.DS)]
    public class DSCatcherQuadDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x13D426CF8398CBEB, GameType.DS)]
    public class DSCatcherQuadDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSCatcherQuadDamageCollisionBoxResource> CollisionBoxResource;
        [RTTI.Member(3, 0x28)] public Ref<DSCatcherQuadDamageParameter> Parameter;
    }

    [RTTI.Serializable(0x1008E15CCE891A06, GameType.DS)]
    public class DSCatcherQuadDamageParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float HeadToughness;
        [RTTI.Member(3, 0x24)] public float LegToughness;
        [RTTI.Member(4, 0x28)] public float BodyToughness;
        [RTTI.Member(5, 0x2C)] public float LegDownToughness;
        [RTTI.Member(6, 0x30)] public float RopeLegDownToughnessDanage;
        [RTTI.Member(7, 0x34)] public float PartToughnessRecoveryTime;
        [RTTI.Member(8, 0x38)] public float NoWinceTime;
        [RTTI.Member(9, 0x3C)] public float NoFlinchWinceTime;
        [RTTI.Member(10, 0x40)] public float NoDownTime;
        [RTTI.Member(11, 0x44)] public float DownTime;
    }

    [RTTI.Serializable(0x990891E7E1623ADF, GameType.DS)]
    public class DSCatcherQuadEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x24A7184735A768CF, GameType.DS)]
    public class DSCatcherQuadEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<MaterialTypeResource> FootstepUpMaterialTypeResource;
        [RTTI.Member(3, 0x28)] public Ref<MaterialTypeResource> FootstepDownMaterialTypeResource;
        [RTTI.Member(4, 0x30)] public Ref<MaterialTypeResource> PhysicsImpactMaterialTypeResource;
        [RTTI.Member(5, 0x38)] public Ref<MaterialTypeResource> TarMaterialTypeResource;
    }

    [RTTI.Serializable(0x2A482269DD0982BB, GameType.DS)]
    public class DSCatcherQuadIKComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF1A95E3A493F726F, GameType.DS)]
    public class DSCatcherQuadIKComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float JointTranslationScale;
    }

    [RTTI.Serializable(0x64A89B0CF6068A0C, GameType.DS)]
    public class DSCatcherQuadParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EDSAttackId PunchAttackId;
        [RTTI.Member(3, 0x22)] public EDSAttackId TailAttackId;
        [RTTI.Member(4, 0x24)] public EDSAttackId StampAttackId;
        [RTTI.Member(5, 0x26)] public EDSAttackId RushAttackId;
        [RTTI.Member(6, 0x28)] public EDSAttackId TarBeamAttackId;
        [RTTI.Member(7, 0x2A)] public EDSAttackId JogAttackId;
    }

    [RTTI.Serializable(0x34694BC61E237A91, GameType.DS)]
    public class DSCatcherQuadPlanningParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int WinceCountForEscapeDefault;
        [RTTI.Member(3, 0x24)] public int WinceCountForEscapeLowLife;
        [RTTI.Member(4, 0x28)] public float ForceEscapeAfterWinceDistance;
        [RTTI.Member(5, 0x2C)] public float DiveFarLifeRate;
        [RTTI.Member(6, 0x30)] public float RoarLifeRate;
        [RTTI.Member(7, 0x34)] public float SkipAttackPreparationLifeRate;
        [RTTI.Member(8, 0x38)] public float StepInLifeRate;
        [RTTI.Member(9, 0x3C)] public float SwimLifeRate;
        [RTTI.Member(10, 0x40)] public float SkipAttackPreparationTimeAfterWince;
        [RTTI.Member(11, 0x44)] public float NoSpitTimeAfterWince;
    }

    [RTTI.Serializable(0x5B10EAB42A2136CA, GameType.DS)]
    public class DSCatcherQuadRestartPoint : WorldNode
    {
    }

    [RTTI.Serializable(0x4251CBD2D2C86088, GameType.DS)]
    public class DSCatcherQuadSpitParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float AimDelayTime;
        [RTTI.Member(3, 0x24)] public float ActionEndDelayTime;
        [RTTI.Member(4, 0x28)] public float AimTime;
        [RTTI.Member(5, 0x2C)] public float AimPointAccel;
        [RTTI.Member(6, 0x30)] public float AimHeadingHomingFactorDefault;
        [RTTI.Member(7, 0x34)] public float AimHeadingHomingFactorAfterRoar;
    }

    [RTTI.Serializable(0xE7F02CABBBCB491B, GameType.DS)]
    public class DSCatcherStrandObjectParameterResource : Resource
    {
        [RTTI.Member(3, 0x20, "StrandObject")] public float StrandObjectReactionDistance;
        [RTTI.Member(4, 0x24, "StrandObject")] public float StrandObjectReactionPredicationTime;
        [RTTI.Member(5, 0x28, "StrandObject")] public float StrandObjectLifeTime;
        [RTTI.Member(6, 0x2C, "StrandObject")] public float StrandObjectMoveStartDistance;
    }

    [RTTI.Serializable(0x8F484CF48C7EE909, GameType.DS)]
    public class DSCatcherTarEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x93850C97B4234B43, GameType.DS)]
    public class DSCatcherTarEventResource : TimedEventResource
    {
        [RTTI.Member(9, 0x30, "Logic")] public Ref<LocatorResource> TarCenterLocatorResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<CurveResource> BlendWeightCurveResource;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<CurveResource> ActivateFactorCurveResource;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<CurveResource> RadiusCurveResource;
    }

    [RTTI.Serializable(0x67E3DAFDAC53A2BD, GameType.DS)]
    public class DSCatcherTarInteractionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x433A512BB5EDF793, GameType.DS)]
    public class DSCatcherTarInteractionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Array<Ref<LocatorResource>> LocatorResources;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> LocatorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<LocatorResource> GroundLocatorResource;
        [RTTI.Member(11, 0x50, "Logic")] public float Radius;
        [RTTI.Member(12, 0x54, "Logic")] public bool IsDebugView;
    }

    [RTTI.Serializable(0xAFC706A71F4E660, GameType.DS)]
    public class DSCatcherTerritoryLocator : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "General")] public Ref<DSCatcherGameActorUnitResource> CatcherGameActorUnitResource;
        [RTTI.Member(8, 0x78, "General")] public Ref<CollisionTrigger> AnnihilationArea;
        [RTTI.Member(9, 0x80, "General")] public float EncounteringRadius;
        [RTTI.Member(10, 0x84, "General")] public float AnnihilationRadius;
        [RTTI.Member(11, 0x88, "General")] public Ref<DSCatcherParameterBaseResource> OverraideParameterResource;
        [RTTI.Member(12, 0x90, "General")] public WorldTransform AnnihilationShapeTransfrom;
        [RTTI.Member(13, 0xD0, "General")] public WorldTransform BlockingAreaShapeTransfrom;
        [RTTI.Member(14, 0x110, "General")] public Shape2DExtrusion AnnihilationAreaShape;
        [RTTI.Member(15, 0x150, "General")] public Shape2DExtrusion InnerAreaShape;
        [RTTI.Member(16, 0x190, "General")] public Shape2DExtrusion BossBlockingAreaShape;
        [RTTI.Member(17, 0x1D0, "General")] public Array<Ref<CubemapZone>> TarCubemapZoneList;
        [RTTI.Member(18, 0x1E8, "General")] public GGUUID ActiveNavAreaUUID;
    }

    [RTTI.Serializable(0x4F1DFCA40C63B92E, GameType.DS)]
    public class DSCatcherTestFunctionsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE8BE1E99EF7682B4, GameType.DS)]
    public class DSCatcherTestFunctionsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<ParticleSystemResource> HunterEffect0;
        [RTTI.Member(4, 0x28, "General")] public Ref<ParticleSystemResource> HunterEffect1;
        [RTTI.Member(5, 0x30, "General")] public Ref<NavMeshBuilderSettings> SecondNavSettings;
        [RTTI.Member(6, 0x38, "General")] public Ref<ShakeResource> SlowCameraZoomShake;
    }

    [RTTI.Serializable(0x6825F9AFB8499595, GameType.DS)]
    public class DSCatcherTidalWaveComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2B64C30F9BEE93DE, GameType.DS)]
    public class DSCatcherTidalWaveComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x1043129AAB79883, GameType.DS)]
    public class DSCatcherTidalWaveComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<StaticMeshResource> GroundTarMeshResource;
        [RTTI.Member(3, 0x28)] public int ShapeMapWidth;
        [RTTI.Member(4, 0x2C)] public int ShapeMapHeight;
        [RTTI.Member(5, 0x30)] public Array<uint8> ShapeMap;
        [RTTI.Member(6, 0x40)] public Array<Ref<ParticleSystemResource>> WaterSplashResources;
    }

    [RTTI.Serializable(0xF245DF74B5592A1D, GameType.DS)]
    public class DSCatcherTitanAmelieComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFE0F7ACD4117AFFF, GameType.DS)]
    public class DSCatcherTitanAmelieComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x72AF031BAB4D5FA9, GameType.DS)]
    public class DSCatcherTitanComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4AD3BF7D112AE113, GameType.DS)]
    public class DSCatcherTitanComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> JellyfishResource;
        [RTTI.Member(3, 0x28)] public Ref<StaticMeshResource> GroundTarMeshResource;
        [RTTI.Member(4, 0x30)] public Ref<DSCatcherTitanParameter> TitanParameter;
        [RTTI.Member(5, 0x38)] public Ref<DSCatcherTitanTarWaveParameter> TarWaveParameter;
        [RTTI.Member(6, 0x40)] public Ref<DSCatcherTitanPaintParameter> PaintParameter;
        [RTTI.Member(7, 0x48)] public Ref<EntityResource> AmelieResource;
        [RTTI.Member(8, 0x50)] public Ref<EntityResource> HiggsResource;
        [RTTI.Member(9, 0x58)] public Ref<EntityResource> TarBallResource;
        [RTTI.Member(10, 0x60)] public Ref<EntityResource> MissileResource;
        [RTTI.Member(11, 0x68)] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(12, 0x78)] public Ref<DSTargetConstrainCameraParam> AnnihilationConstrainCameraParam1;
        [RTTI.Member(13, 0x80)] public Ref<DSTargetConstrainCameraParam> AnnihilationConstrainCameraParam2;
        [RTTI.Member(14, 0x88)] public Ref<SkeletonAnimationResource> HeadAmelieFacialAnimationResource;
    }

    [RTTI.Serializable(0x5A04CDF7DB995937, GameType.DS)]
    public class DSCatcherTitanDamageCollisionBox : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String JointName;
        [RTTI.Member(3, 0x30)] public Mat44 Matrix;
    }

    [RTTI.Serializable(0x73573F3F3849AFBE, GameType.DS)]
    public class DSCatcherTitanDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x446BDAAA80725144, GameType.DS)]
    public class DSCatcherTitanDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSCatcherTitanDamageParameter> Parameter;
        [RTTI.Member(3, 0x28)] public Ref<DSCatcherTitanDamageCollisionBox> MouthCollisionBox;
    }

    [RTTI.Serializable(0x8F25D98B250F9494, GameType.DS)]
    public class DSCatcherTitanDamageParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float MainLife;
        [RTTI.Member(3, 0x24)] public float HeadLife;
        [RTTI.Member(4, 0x28)] public float BodyLife;
        [RTTI.Member(5, 0x2C)] public float ArmLife;
        [RTTI.Member(6, 0x30)] public float LegLife;
        [RTTI.Member(7, 0x34)] public float TentacleLife;
        [RTTI.Member(8, 0x38)] public float UmbilicalCordLife;
        [RTTI.Member(9, 0x3C)] public float HiggsLife;
        [RTTI.Member(10, 0x40)] public float HeadDamageRate;
        [RTTI.Member(11, 0x44)] public float UmbilicalCordDamageRate;
        [RTTI.Member(12, 0x48)] public float HiggsDamageRate;
        [RTTI.Member(13, 0x4C)] public float DownRecoveryTime;
        [RTTI.Member(14, 0x50)] public float NoStaggerTime;
        [RTTI.Member(15, 0x54)] public float PartDamageRecoveryTime;
        [RTTI.Member(16, 0x58)] public float PartDisableTime;
        [RTTI.Member(17, 0x5C)] public float RangeAttackEffectiveRadius;
        [RTTI.Member(18, 0x60)] public Ref<CurveResource> DamageSlowCurve;
        [RTTI.Member(19, 0x68)] public Ref<CurveResource> DeadSlowCurve;
        [RTTI.Member(20, 0x70)] public Ref<DSTargetConstrainCameraParam> ReactionConstrainCameraParam;
        [RTTI.Member(21, 0x78)] public Ref<DSTargetConstrainCameraParam> DeadConstrainCameraParam;
    }

    [RTTI.Serializable(0x84950664755777ED, GameType.DS)]
    public class DSCatcherTitanHiggsAnnihilationInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float DelayTime;
        [RTTI.Member(3, 0x28)] public Array<EDSCatcherTitanHiggsLocation> Candidates;
    }

    [RTTI.Serializable(0x34C4B5E045CE087C, GameType.DS)]
    public class DSCatcherTitanHiggsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFA643E782B66884A, GameType.DS)]
    public class DSCatcherTitanHiggsComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSCatcherTitanHiggsParameter> Parameter;
    }

    [RTTI.Serializable(0x41A6C661B854B704, GameType.DS)]
    public class DSCatcherTitanHiggsParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSCatcherTitanHiggsAnnihilationInfo>> AnnihilationInfos;
    }

    [RTTI.Serializable(0x9B75B359EBB2FD40, GameType.DS)]
    public class DSCatcherTitanMovementComponent : DSMoverSupportComponent
    {
    }

    [RTTI.Serializable(0x8F3E9EAA39D23E39, GameType.DS)]
    public class DSCatcherTitanMovementComponentResource : DSMoverSupportComponentResource
    {
    }

    [RTTI.Serializable(0xCCE11E15E2245FDA, GameType.DS)]
    public class DSCatcherTitanPaintParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float HiggsRadius;
        [RTTI.Member(3, 0x24)] public float HiggsUpdateValue;
        [RTTI.Member(4, 0x28)] public float HiggsSubAllSpeed;
        [RTTI.Member(5, 0x2C)] public float UmbilicalCordRadius;
        [RTTI.Member(6, 0x30)] public float UmbilicalCordAddValue;
        [RTTI.Member(7, 0x34)] public float UmbilicalCordSubAllValue;
        [RTTI.Member(8, 0x38)] public float DamageNoRangedRadius;
        [RTTI.Member(9, 0x3C)] public float DamageAddValue;
        [RTTI.Member(10, 0x40)] public float DamageSubAllSpeed;
        [RTTI.Member(11, 0x44)] public float DeadSpreadSpeed;
        [RTTI.Member(12, 0x48)] public float DeadAddSpeed;
        [RTTI.Member(13, 0x4C)] public float DeadDelayTime;
        [RTTI.Member(14, 0x50)] public float WasteRadius;
        [RTTI.Member(15, 0x54)] public float ShitRadius;
        [RTTI.Member(16, 0x58)] public float ExAddValue;
    }

    [RTTI.Serializable(0xA3E1DE083CD6B620, GameType.DS)]
    public class DSCatcherTitanParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSCatcherTitanPhaseParameter>> PhaseParameters;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSCatcherTitanRangeParameter>> RangeParameters;
        [RTTI.Member(4, 0x40)] public float DefaultStartMoveDistance;
        [RTTI.Member(5, 0x44)] public float DefaultEndMoveDistance;
        [RTTI.Member(6, 0x48)] public float NoMovePumpTarLevel;
        [RTTI.Member(7, 0x4C)] public float RapidSpeedModifier;
        [RTTI.Member(8, 0x50)] public float RapidStartDistanceMin;
        [RTTI.Member(9, 0x54)] public float RapidStartDistanceMax;
    }

    [RTTI.Serializable(0xC00FB3801422F96A, GameType.DS)]
    public class DSCatcherTitanPath : Route
    {
    }

    [RTTI.Serializable(0xE6358DE0132AEDFF, GameType.DS)]
    public class DSCatcherTitanPathNode : RouteNode
    {
    }

    [RTTI.Serializable(0xADD8202D3687759C, GameType.DS)]
    public class DSCatcherTitanPhaseParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float LifeRateMin;
        [RTTI.Member(3, 0x24)] public float LifeRateMax;
        [RTTI.Member(4, 0x30)] public float TentaclePreparationSpeedModifier;
        [RTTI.Member(5, 0x34)] public float SuccessiveAttackCooldownModifier;
        [RTTI.Member(6, 0x38)] public int TentaclesCountOfNormalAttack;
        [RTTI.Member(7, 0x40)] public Array<int> AllowedStrandNumbers;
        [RTTI.Member(8, 0x50)] public bool IsJellyfishEnabled;
        [RTTI.Member(9, 0x51)] public bool IsHunterMissileEnabled;
        [RTTI.Member(10, 0x52)] public bool IsRapidMoveEnabled;
        [RTTI.Member(11, 0x53)] public bool IsDamagedHiggsMoveEnabled;
        [RTTI.Member(12, 0x54)] public bool IsAnnihilationHiggsMoveEnabled;
        [RTTI.Member(13, 0x55)] public bool IsDyingVoiceEnabled;
        [RTTI.Member(14, 0x56)] public bool IsLowLifeProvokeVoiceEnabled;
        [RTTI.Member(15, 0x58)] public Ref<DSCatcherTitanStartPhaseParameter> StartPhaseParameter;
    }

    [RTTI.Serializable(0xDDC4F54AD6AE6BB6, GameType.DS)]
    public class DSCatcherTitanRangeParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float RangeMin;
        [RTTI.Member(3, 0x24)] public float RangeMax;
        [RTTI.Member(4, 0x28)] public float JellyfishCooldownTime;
        [RTTI.Member(5, 0x2C)] public float JellyfishSpawnIntervalTime;
        [RTTI.Member(6, 0x30)] public float TentacleComboCooldownTime;
        [RTTI.Member(7, 0x34)] public float HunterMissileCooldownTime;
    }

    [RTTI.Serializable(0xE1AFC003AFFF8EC4, GameType.DS)]
    public class DSCatcherTitanStartPhaseParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ActionName;
        [RTTI.Member(3, 0x28)] public Array<String> VoiceGroupNames;
        [RTTI.Member(4, 0x38)] public EDSCatcherTitanHiggsLocation HiggsLocation;
        [RTTI.Member(5, 0x39)] public bool DemoLocationChange;
        [RTTI.Member(6, 0x40)] public Ref<DSTargetConstrainCameraParam> ActionConstrainCameraParam;
    }

    [RTTI.Serializable(0xC416112BFDB4E0FF, GameType.DS)]
    public class DSCatcherTitanTarWaveParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float Radius;
        [RTTI.Member(3, 0x24)] public float Time;
        [RTTI.Member(4, 0x28)] public float Speed;
        [RTTI.Member(5, 0x2C)] public float Height;
    }

    [RTTI.Serializable(0x3B934E6570C794C3, GameType.DS)]
    public class DSCatcherTitanTentacleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD7F8574F47E582B3, GameType.DS)]
    public class DSCatcherTitanTentacleComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSCatcherTitanTentacleParameter> Parameter;
        [RTTI.Member(3, 0x28)] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> HandGoldEntityResource;
    }

    [RTTI.Serializable(0x80543A01CEA7D388, GameType.DS)]
    public class DSCatcherTitanTentacleParameter : Resource
    {
        [RTTI.Member(2, 0x20)] public float AttackSpeed;
        [RTTI.Member(3, 0x24)] public float SingleAttackCooldownTime;
        [RTTI.Member(4, 0x28)] public float SingleAttackCooldownRandomTime;
        [RTTI.Member(5, 0x2C)] public float SingleAttackPreparationTime;
        [RTTI.Member(6, 0x30)] public float SuccessiveAttackCooldownTime;
        [RTTI.Member(7, 0x34)] public float SuccessiveAttackPreparationTime;
        [RTTI.Member(8, 0x38)] public float SuccessiveAttackIntervalTime;
        [RTTI.Member(9, 0x3C)] public int SuccessiveAttackCount;
        [RTTI.Member(10, 0x40)] public float AnnihilationAttackPreparationTime;
        [RTTI.Member(11, 0x44)] public float ClingWeight;
        [RTTI.Member(12, 0x48)] public float TentacleLengthMax;
        [RTTI.Member(13, 0x50)] public Ref<RumbleResource> ClingImpactRumbleResource;
        [RTTI.Member(14, 0x58)] public Ref<RumbleResource> ClingKeepRumbleResource;
    }

    [RTTI.Serializable(0x480586C83B44D57C, GameType.DS)]
    public class DSCatcherWaypoint : Route
    {
        [RTTI.Member(9, 0xB0, "DS")] public uint32 IdHash;
        [RTTI.Member(10, 0xB4, "DS")] public uint32 IdentifierCode;
    }

    [RTTI.Serializable(0xC798AE943FB9E076, GameType.DS)]
    public class DSCatcherWaypointNode : RouteNode
    {
    }

    [RTTI.Serializable(0x7FB97563475C4875, GameType.DS)]
    public class DSCatcherWaypointSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x260B2B737F08774F, GameType.DS)]
    public class DSCatcherWhaleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x65B91EEB3F6BA36B, GameType.DS)]
    public class DSCatcherWhaleComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSAnimInfoResource> AnimInfoResource;
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> SupportBtSeedResource;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> TidalWaveResource;
        [RTTI.Member(5, 0x38)] public Ref<EntityResource> SmokeMissleResource;
        [RTTI.Member(6, 0x40)] public Ref<EntityResource> TarBombResource;
        [RTTI.Member(7, 0x48)] public Ref<EntityResource> PeelDebriResource;
        [RTTI.Member(8, 0x50)] public Ref<EntityResource> TarMeshEntityResource;
        [RTTI.Member(9, 0x58)] public Ref<ParticleSystemResource> TarSplashParticleSystem0;
        [RTTI.Member(10, 0x60)] public Ref<ParticleSystemResource> TarSplashParticleSystem1;
        [RTTI.Member(11, 0x68)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(12, 0x78)] public Array<Ref<ShakeResource>> ShakeResources;
        [RTTI.Member(13, 0x88)] public Array<Ref<RumbleResource>> RumbleResources;
        [RTTI.Member(14, 0x98)] public Array<Ref<ArtPartsEffectResourceBase>> ArtPartsEffectResources;
        [RTTI.Member(15, 0xA8)] public Array<DSCatcherWhaleCurveData> CurveDatas;
    }

    [RTTI.Serializable(0x9FEA6D599238031B, GameType.DS)]
    public class DSCatcherWhaleCurveData
    {
        [RTTI.Member(0, 0x0)] public uint32 Hash;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0xC11BF26E726DD6E7, GameType.DS)]
    public class DSChargeParkingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD8D950A0888BB79D, GameType.DS)]
    public class DSChargeParkingComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float BatterySpeed;
        [RTTI.Member(3, 0x28)] public Ref<DSOdradekEffectResource> OdradekEffectResource;
    }

    [RTTI.Serializable(0x6BF926DC4EE19F56, GameType.DS)]
    public class DSChargerAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA02BF1ED6A3E2E17, GameType.DS)]
    public class DSChargerAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Parameters")] public Ref<CurveResource> TopJointAnim;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<CurveResource> FanSpeedVsWind;
        [RTTI.Member(15, 0x30, "Parameters")] public Ref<CurveResource> ChargeLightColorTransition;
        [RTTI.Member(5, 0x38, "Parameters")] public float FanSpeedGain;
        [RTTI.Member(6, 0x3C, "Parameters")] public uint TopJointIndex;
        [RTTI.Member(7, 0x40, "Parameters")] public uint FanJointIndex;
        [RTTI.Member(8, 0x48, "Parameters")] public String IncandescenceIntensityID;
        [RTTI.Member(9, 0x50, "Parameters")] public String IncandescenceColorID;
        [RTTI.Member(17, 0x60, "Red")] public FRGBAColor RedColor;
        [RTTI.Member(20, 0x70, "Yellow")] public FRGBAColor YellowColor;
        [RTTI.Member(23, 0x80, "Blue")] public FRGBAColor BlueColor;
        [RTTI.Member(18, 0x90, "Red")] public float RedIntensity;
        [RTTI.Member(21, 0x94, "Yellow")] public float YellowIntensity;
        [RTTI.Member(24, 0x98, "Blue")] public float BlueIntensity;
        [RTTI.Member(10, 0xA0, "Parameters")] public Ref<DSOdradekEffectResource> OdradekEffectResource;
        [RTTI.Member(11, 0xA8, "Parameters")] public float OdradekEffectEnableRadius;
        [RTTI.Member(26, 0xB0, "Sounds")] public Ref<SoundResource> SoundToBlue;
        [RTTI.Member(27, 0xB8, "Sounds")] public Ref<SoundResource> SoundToYellow;
        [RTTI.Member(28, 0xC0, "Sounds")] public Ref<SoundResource> SoundFan;
        [RTTI.Member(12, 0xC8, "Parameters")] public String FanJointName;
        [RTTI.Member(13, 0xD0, "Parameters")] public float SparkHeight;
        [RTTI.Member(14, 0xD8, "Parameters")] public Ref<EntityResource> ChargeEffectEntity;
    }

    [RTTI.Serializable(0x1D45F9B237AC12A6, GameType.DS)]
    public class DSChargerConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0xCFA7FC1F891CB7AD, GameType.DS)]
    public class DSChargerConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "Charger")] public float Range;
        [RTTI.Member(116, 0x494, "Charger")] public float RangeLv2;
        [RTTI.Member(117, 0x498, "Charger")] public float RangeLv3;
        [RTTI.Member(118, 0x49C, "Charger")] public float RangeLv4;
        [RTTI.Member(119, 0x4A0, "Charger")] public float RangeLv5;
        [RTTI.Member(120, 0x4A4, "Charger")] public float ChargeSpeed;
        [RTTI.Member(121, 0x4A8, "Charger")] public float ChargeSpeedLv2;
        [RTTI.Member(122, 0x4AC, "Charger")] public float ChargeSpeedLv3;
        [RTTI.Member(123, 0x4B0, "Charger")] public float ChargeSpeedLv4;
        [RTTI.Member(124, 0x4B4, "Charger")] public float ChargeSpeedLv5;
        [RTTI.Member(125, 0x4B8, "Charger")] public float EnergyLimit;
        [RTTI.Member(126, 0x4BC, "Charger")] public float EnergyLimitLv2;
        [RTTI.Member(127, 0x4C0, "Charger")] public float EnergyLimitLv3;
        [RTTI.Member(128, 0x4C4, "Charger")] public float EnergyLimitLv4;
        [RTTI.Member(129, 0x4C8, "Charger")] public float EnergyLimitLv5;
        [RTTI.Member(130, 0x4CC, "Charger")] public float OverChargeRate;
        [RTTI.Member(131, 0x4D0, "Charger")] public float EnergyGenerationRate;
        [RTTI.Member(132, 0x4D4, "Charger")] public float EnergyGenerationRateLv2;
        [RTTI.Member(133, 0x4D8, "Charger")] public float EnergyGenerationRateLv3;
        [RTTI.Member(134, 0x4DC, "Charger")] public float EnergyGenerationRateLv4;
        [RTTI.Member(135, 0x4E0, "Charger")] public float EnergyGenerationRateLv5;
        [RTTI.Member(136, 0x4E4, "Charger")] public float InitialEnergy;
        [RTTI.Member(137, 0x4E8, "Charger")] public float BrinkSpeed;
        [RTTI.Member(138, 0x4EC, "Charger")] public float LikePerCharge;
    }

    [RTTI.Serializable(0x17240CD04B529090, GameType.DS)]
    public class DSCheckStationAccessingEveleterInvisibleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA7DDF8B86E6F70C9, GameType.DS)]
    public class DSCheckStationAccessingEveleterInvisibleEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x3F5260F00B33B64E, GameType.DS)]
    public class DSCheckStationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x46C9D325DA2432E0, GameType.DS)]
    public class DSCheckStationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> SensorGimmickLocators;
        [RTTI.Member(4, 0x30, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> GateGimmickLocators;
        [RTTI.Member(5, 0x40, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> CenterSlopeGimmickLocators;
        [RTTI.Member(21, 0x50, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> CenterScanInfoSharedGimmicks;
        [RTTI.Member(22, 0x60, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> CenterScanInfoNoProblemSRequestSharedGimmicks;
        [RTTI.Member(23, 0x70, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> CenterScanInfoBreakRequestSharedGimmicks;
        [RTTI.Member(24, 0x80, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> CenterScanInfoShoseRequestSharedGimmicks;
        [RTTI.Member(25, 0x90, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> CenterScanInfoVehicleRequestSharedGimmicks;
        [RTTI.Member(6, 0xA0, "Gimmick")] public Ref<DSPreppersBarriorEffectResource> SensorAcceptEffects;
        [RTTI.Member(7, 0xA8, "Gimmick")] public Ref<DSPreppersBarriorEffectResource> SensorRejectEffects;
        [RTTI.Member(9, 0xB0, "Gimmick")] public Ref<SoundResource> SensorAcceptImmediatelySound;
        [RTTI.Member(8, 0xB8, "Gimmick")] public Ref<SoundResource> SensorAcceptSound;
        [RTTI.Member(10, 0xC0, "Gimmick")] public Ref<SoundResource> SensorRejectSound;
        [RTTI.Member(11, 0xC8, "Gimmick")] public Ref<SoundResource> SensorAcceptEndSound;
        [RTTI.Member(12, 0xD0, "Gimmick")] public Ref<SoundResource> TimefallSound;
        [RTTI.Member(13, 0xD8, "Gimmick")] public Ref<WorldNode> SensorSendPosition;
        [RTTI.Member(14, 0xE0, "Gimmick")] public Array<Ref<WorldNode>> SpeakerPositions;
        [RTTI.Member(15, 0xF0, "Gimmick")] public Ref<BooleanFact> ForceRejectFact;
        [RTTI.Member(16, 0xF8, "Gimmick")] public Ref<BooleanFact> ForceInvisibleFact;
        [RTTI.Member(17, 0x100, "Gimmick")] public float DelayTime;
        [RTTI.Member(18, 0x104, "Gimmick")] public bool IsPrivateRoomElevator;
        [RTTI.Member(19, 0x105, "Gimmick")] public bool IsDynamicSafetyHouse;
    }

    [RTTI.Serializable(0x5014DDF56E811DC8, GameType.DS)]
    public class DSCheckStationDynamicSpawnResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Gimmick")] public Ref<EntityResource> CheckStationResource;
        [RTTI.Member(4, 0x28, "Gimmick")] public Array<Ref<DSSharedGimmickData>> CheckStationGimmickDatas;
        [RTTI.Member(5, 0x38, "Gimmick")] public Ref<PhysicsCollisionResource> TriggerboxCollisionResource;
        [RTTI.Member(6, 0x40, "Gimmick")] public uint32 MaxInstance;
    }

    [RTTI.Serializable(0xEE490D8813DF8B9D, GameType.DS)]
    public class DSCheckStationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB91DC450AD4459E4, GameType.DS)]
    public class DSCheckStationEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSCheckStationState RequestedState;
        [RTTI.Member(9, 0x31, "Logic")] public UUIDRef<EntityPlaceHolder> TargetEntity;
        [RTTI.Member(10, 0x41, "Logic")] public GGUUID TargetEntityUUID;
        [RTTI.Member(11, 0x51, "Logic")] public bool IsImmediate;
    }

    [RTTI.Serializable(0xE8F4688B087DDD5, GameType.DS)]
    public class DSChiralCylinderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5B57BB7B5C34F5B5, GameType.DS)]
    public class DSChiralCylinderComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xA09C9339E391F16C, GameType.DS)]
    public class DSChiralDonatedResultInputInfo
    {
    }

    [RTTI.Serializable(0x63D5CEAFA4CD7F9C, GameType.DS)]
    public class DSChiralDonatedResultOutputInfo
    {
    }

    [RTTI.Serializable(0xAF22DA6342D5E18D, GameType.DS)]
    public class DSChiralParticleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBA3FC871436D381F, GameType.DS)]
    public class DSChiralParticleComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF4DDC5962BDE5ADE, GameType.DS)]
    public class DSChiralParticleComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Settings")] public Ref<ShaderResource> Shader;
        [RTTI.Member(5, 0x28, "Settings")] public Ref<ShaderResource> DeferredShader;
        [RTTI.Member(6, 0x30, "Settings")] public Ref<ShaderResource> DepthOnlyShader;
        [RTTI.Member(9, 0x38, "Settings")] public Ref<Texture> ParticleTexture;
        [RTTI.Member(10, 0x40, "Settings")] public Ref<Texture> NoiseTexture;
        [RTTI.Member(3, 0x48, "Settings")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(19, 0x50, "Color")] public FRGBAColor BaseColor;
        [RTTI.Member(49, 0x60, "Color")] public FRGBAColor AdjustHitHighlightColor;
        [RTTI.Member(51, 0x70, "Addtional")] public Ref<CurveResource> NoiseScaleCurve;
        [RTTI.Member(53, 0x78, "Addtional")] public Ref<CurveResource> PixelScaleCurve;
        [RTTI.Member(52, 0x80, "Addtional")] public Ref<CurveResource> TimeScaleCurve;
        [RTTI.Member(78, 0x88, "LookupCurveResourceOption", true)] public Ref<CurveResource> PixelWidthLookupCurve;
        [RTTI.Member(79, 0x90, "LookupCurveResourceOption", true)] public Ref<CurveResource> CurlNoisePositionLookupCurve;
        [RTTI.Member(80, 0x98, "LookupCurveResourceOption", true)] public Ref<CurveResource> CurlNoiseVelocityLookupCurve;
        [RTTI.Member(81, 0xA0, "LookupCurveResourceOption")] public Ref<Texture> PackedLookupCurveResourceTexture;
        [RTTI.Member(71, 0xA8, "ContentsSetting")] public Ref<DataBufferResource> AdditionalSimulationDataBufferResource;
        [RTTI.Member(20, 0xB0, "Color")] public float BaseColorScale;
        [RTTI.Member(21, 0xB4, "Color")] public float BaseAlpha;
        [RTTI.Member(22, 0xB8, "Color")] public float NoiseScale;
        [RTTI.Member(23, 0xBC, "Color")] public float NoiseScaleXY;
        [RTTI.Member(24, 0xC0, "Color")] public float NoiseScaleZ;
        [RTTI.Member(25, 0xC4, "Color")] public float NoiseAdjusterScaleY;
        [RTTI.Member(26, 0xC8, "Color")] public float NoiseAdjusterScaleZ;
        [RTTI.Member(27, 0xCC, "Color")] public float NoiseAdjusterOffsetY;
        [RTTI.Member(28, 0xD0, "Color")] public float NoiseAdjusterOffsetZ;
        [RTTI.Member(29, 0xD4, "Color")] public float SpawnNoiseScale;
        [RTTI.Member(30, 0xD8, "Color")] public float VanishNoiseScale;
        [RTTI.Member(7, 0xDC, "Settings")] public float PixelWidth;
        [RTTI.Member(8, 0xE0, "Settings")] public float PixelWidthRandomOffset;
        [RTTI.Member(31, 0xE4, "Color")] public float TimeScale;
        [RTTI.Member(32, 0xE8, "Color")] public float MotionBlurScale;
        [RTTI.Member(75, 0xEC, "ContentsSetting")] public float BaseEmitRate;
        [RTTI.Member(33, 0xF0, "Color")] public float BaseAlphaDistanceMin;
        [RTTI.Member(34, 0xF4, "Color")] public float BaseAlphaDistanceMax;
        [RTTI.Member(35, 0xF8, "Color")] public float BaseAlphaValueMin;
        [RTTI.Member(36, 0xFC, "Color")] public float BaseAlphaValueMax;
        [RTTI.Member(37, 0x100, "Color")] public float MotionBlurDistanceMin;
        [RTTI.Member(38, 0x104, "Color")] public float MotionBlurDistanceMax;
        [RTTI.Member(39, 0x108, "Color")] public float MotionBlurValueMin;
        [RTTI.Member(40, 0x10C, "Color")] public float MotionBlurValueMax;
        [RTTI.Member(41, 0x110, "Color")] public float PixelScaleDistanceMin;
        [RTTI.Member(42, 0x114, "Color")] public float PixelScaleDistanceMax;
        [RTTI.Member(43, 0x118, "Color")] public float PixelScaleValueMin;
        [RTTI.Member(44, 0x11C, "Color")] public float PixelScaleValueMax;
        [RTTI.Member(45, 0x120, "Color")] public float AdjustHitPixelWidth;
        [RTTI.Member(46, 0x124, "Color")] public float AdjustHitAlpha;
        [RTTI.Member(47, 0x128, "Color")] public float AdjustHitNoise;
        [RTTI.Member(48, 0x12C, "Color")] public float AdjustHitBlurPowValue;
        [RTTI.Member(55, 0x130, "Addtional")] public float RandomizeNoiseOffsetMin;
        [RTTI.Member(56, 0x134, "Addtional")] public float RandomizeNoiseOffsetMax;
        [RTTI.Member(57, 0x138, "Addtional")] public float RandomizeIntervalTimeMin;
        [RTTI.Member(58, 0x13C, "Addtional")] public float RandomizeIntervalTimeMax;
        [RTTI.Member(60, 0x140, "RareyParticleSetting")] public float RareyEmitThreshould;
        [RTTI.Member(61, 0x144, "RareyParticleSetting")] public float RareyVelocityRandomOffset;
        [RTTI.Member(62, 0x148, "RareyParticleSetting")] public float RareyLifeOffset;
        [RTTI.Member(63, 0x14C, "RareyParticleSetting")] public float RareySimulationDrag;
        [RTTI.Member(66, 0x150, "RareyParticleSetting")] public float CurlNoisePositionScale;
        [RTTI.Member(67, 0x154, "RareyParticleSetting")] public float CurlNoiseVelocityScale;
        [RTTI.Member(74, 0x158, "ContentsSetting")] public float ColorClampValue;
        [RTTI.Member(14, 0x15C, "Settings")] public EChiralParticleRenderingMode RenderingMode;
        [RTTI.Member(15, 0x160, "Settings")] public ESortMode SortMode;
        [RTTI.Member(16, 0x164, "Settings")] public ESortOrder SortOrder;
        [RTTI.Member(17, 0x168, "Settings")] public int Priority;
        [RTTI.Member(54, 0x16C, "Addtional")] public bool EnableRandomizeNoiseScale;
        [RTTI.Member(11, 0x16D, "Settings")] public bool DisableMotionBlur;
        [RTTI.Member(12, 0x16E, "Settings")] public bool DisableDepthWrite;
        [RTTI.Member(13, 0x16F, "Settings")] public bool EnableSpawnVanishAnimation;
        [RTTI.Member(64, 0x170, "RareyParticleSetting")] public bool EnableCurlNoiseVelocityType;
        [RTTI.Member(65, 0x171, "RareyParticleSetting")] public bool EnableCurlNoiseSystemTimeFrequency;
        [RTTI.Member(69, 0x172, "ContentsSetting")] public bool InvisibleTerminalOperation;
        [RTTI.Member(77, 0x173, "LookupCurveResourceOption")] public bool EnableLookupTexture;
        [RTTI.Member(70, 0x174, "ContentsSetting")] public bool UseAddtionalSimulationBuffer;
        [RTTI.Member(72, 0x175, "ContentsSetting")] public bool ReadGBufferCopyAndStencilBuffer;
        [RTTI.Member(73, 0x176, "ContentsSetting")] public bool EnableColorClamp;
    }

    [RTTI.Serializable(0x6AAA4851F34C8EFF, GameType.DS)]
    public class DSChiralParticleControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x103E289C23748B17, GameType.DS)]
    public class DSChiralParticleControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<CurveResource> EmitCurveResource;
        [RTTI.Member(11, 0x40, "Logic")] public Ref<CurveResource> NoiseScaleCurveResource;
        [RTTI.Member(14, 0x48, "Logic")] public Ref<CurveResource> CurlNoisePositionScaleCurveResource;
        [RTTI.Member(15, 0x50, "Logic")] public Ref<CurveResource> CurlNoiseVelocityScaleCurveResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<CurveResource> AlphaCurveResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<CurveResource> ResetCurveResource;
        [RTTI.Member(10, 0x68, "Logic")] public Ref<CurveResource> EmitBoostModeCurveResource;
    }

    [RTTI.Serializable(0xE2E7722EFB612738, GameType.DS)]
    public class DSChiralParticleInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC8, "General")] public Ref<DSChiralParticleComponentResource> Resource;
        [RTTI.Member(8, 0x324, "General")] public bool Enable;
    }

    [RTTI.Serializable(0x36832B89F6158ED0, GameType.DS)]
    public class DSChiralParticleSphereEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB3DF51F5CEE68863, GameType.DS)]
    public class DSChiralParticleSphereEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> LocatorResource;
        [RTTI.Member(9, 0x38, "Logic")] public String HelperName;
        [RTTI.Member(10, 0x40, "Logic")] public float SphereSize;
    }

    [RTTI.Serializable(0xD0FFC312118B2579, GameType.DS)]
    public class DSCliffBattlePointInfo : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "General")] public GGUUID OriginalUUID;
        [RTTI.Member(8, 0x80, "General")] public float BattleAreaRadius;
        [RTTI.Member(9, 0x88, "General")] public Array<Ref<DSCliffTarAreaInfo>> TarAreaInfos;
    }

    [RTTI.Serializable(0x892871D51D21752F, GameType.DS)]
    public class DSCliffCodeAttackEntity : Entity
    {
    }

    [RTTI.Serializable(0xEA5A03169EECA04F, GameType.DS)]
    public class DSCliffCodeAttackEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "CliffCodeAttack")] public float TarSingnTime;
        [RTTI.Member(36, 0x104, "CliffCodeAttack")] public float TarEndTime;
        [RTTI.Member(32, 0x108, "CliffCodeAttack")] public float FirstAttackTime;
        [RTTI.Member(33, 0x10C, "CliffCodeAttack")] public float FirstAttackRadius;
        [RTTI.Member(34, 0x110, "CliffCodeAttack")] public float SecondAttackTime;
        [RTTI.Member(35, 0x114, "CliffCodeAttack")] public float SecondAttackRadius;
        [RTTI.Member(39, 0x118, "CliffCodeAttack")] public Array<Ref<EntityResource>> ChildEntities;
        [RTTI.Member(37, 0x128, "CliffCodeAttack")] public Ref<RumbleResource> AlertRumble;
        [RTTI.Member(38, 0x130, "CliffCodeAttack")] public Ref<EffectComponentResource> SignEffect;
        [RTTI.Member(40, 0x138, "CliffCodeAttack")] public Ref<SoundResource> StartSound;
        [RTTI.Member(41, 0x140, "CliffCodeAttack")] public Ref<SoundResource> AppearSound;
        [RTTI.Member(42, 0x148, "CliffCodeAttack")] public Ref<SoundResource> AttackSound;
    }

    [RTTI.Serializable(0xA7C223E4EF10122A, GameType.DS)]
    public class DSCliffComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x210E647B2934EF5B, GameType.DS)]
    public class DSCliffComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE1BA106E180612A3, GameType.DS)]
    public class DSCliffComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<EntityResource> TarManagerResource;
        [RTTI.Member(4, 0x28, "DS")] public Ref<EntityResource> HelmetEntityResource;
        [RTTI.Member(6, 0x30, "Shake")] public Ref<ShakeResource> PushHitShakeResource;
        [RTTI.Member(7, 0x38, "Shake")] public Ref<ShakeResource> KickHitShakeResource;
        [RTTI.Member(8, 0x40, "Shake")] public Ref<ShakeResource> DefeatShakeResource;
        [RTTI.Member(9, 0x48, "Shake")] public Ref<DecalResource> FootprintsDecalResource;
        [RTTI.Member(11, 0x50, "Escape")] public Ref<EntityResource> EscapeEffectEntityResource;
        [RTTI.Member(13, 0x58, "Cigarette")] public Ref<EntityResource> CigaretteEntityResource;
        [RTTI.Member(14, 0x60, "Cigarette")] public Ref<EffectComponentResource> MouthSmokeEffectComponentResource;
        [RTTI.Member(15, 0x68, "Cigarette")] public Ref<EffectComponentResource> CigaretteAppearEffectComponentResource;
        [RTTI.Member(16, 0x70, "Cigarette")] public Ref<EffectComponentResource> CigaretteDisappearEffectComponentResource;
    }

    [RTTI.Serializable(0xD60CE4B9C8B5CC7A, GameType.DS)]
    public class DSCliffConfig : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public float MaxLife;
        [RTTI.Member(4, 0x24, "General")] public float MaxStamina;
        [RTTI.Member(5, 0x28, "General")] public float StaminaRecoveryPerSecond;
        [RTTI.Member(6, 0x2C, "General")] public float MaxEndurance;
        [RTTI.Member(7, 0x30, "General")] public float EnduranceRecoveryPerSecond;
        [RTTI.Member(8, 0x34, "General")] public float HeadshotDamageCoefficient;
        [RTTI.Member(9, 0x38, "General")] public float DuringReactionDamageCoefficient;
        [RTTI.Member(10, 0x3C, "General")] public float LossLifeRateToEscape;
        [RTTI.Member(11, 0x40, "General")] public float StarndCQCDownTime;
        [RTTI.Member(12, 0x44, "General")] public float StarndCQCDownExtendedTime;
        [RTTI.Member(13, 0x48, "General")] public int32 StarndCQCKicksNumRequiredToGetUpSlow;
        [RTTI.Member(14, 0x4C, "General")] public float EmotionAnnoyedThreshold;
        [RTTI.Member(15, 0x50, "General")] public float EmotionFuriousThreshold;
        [RTTI.Member(16, 0x54, "General")] public float FootprintsLengthOnEscape;
        [RTTI.Member(20, 0x58, "Image")] public EDSBossCliffMarkerType MakerType;
        [RTTI.Member(17, 0x5C, "General")] public float DelayTimeOfDefeatMessage;
        [RTTI.Member(18, 0x60, "General")] public int32 DamageReactionNumRequiredToCodeAttack;
        [RTTI.Member(22, 0x64, "WarSituation")] public float WarriorsDisadvantagePoint;
        [RTTI.Member(23, 0x68, "WarSituation")] public float CliffCodeAttackRequiredPoint;
        [RTTI.Member(24, 0x6C, "WarSituation")] public float WarriorsPointWarriorsShoot;
        [RTTI.Member(25, 0x70, "WarSituation")] public float WarriorsPointSummonWarriors;
        [RTTI.Member(26, 0x74, "WarSituation")] public float WarriorsPointCliffCodeAttack;
        [RTTI.Member(27, 0x78, "WarSituation")] public float WarriorsPointPlayerDamage;
        [RTTI.Member(28, 0x7C, "WarSituation")] public float WarriorsPointPlayerBlowOff;
        [RTTI.Member(29, 0x80, "WarSituation")] public float WarriorsPointPlayerDown;
        [RTTI.Member(30, 0x84, "WarSituation")] public float WarriorsPointPlayerDying;
        [RTTI.Member(31, 0x88, "WarSituation")] public float PlayerPointWarriorDamage;
        [RTTI.Member(32, 0x8C, "WarSituation")] public float PlayerPointWarriorDefeat;
        [RTTI.Member(33, 0x90, "WarSituation")] public float PlayerPointCliffDamage;
        [RTTI.Member(34, 0x94, "WarSituation")] public float PlayerPointCliffSolo;
        [RTTI.Member(35, 0x98, "WarSituation")] public float PlayerPointWarriorsBlowOff;
    }

    [RTTI.Serializable(0xD96A63E9133E5935, GameType.DS)]
    public class DSCliffCorridorData : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> SequenceResource;
        [RTTI.Member(3, 0x28)] public Ref<DSLocator> mBBPodPositionLocator;
    }

    [RTTI.Serializable(0x82971D577E61BF5C, GameType.DS)]
    public class DSCliffDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x727370906B9CC2A4, GameType.DS)]
    public class DSCliffDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Sound")] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(5, 0x30, "Rumble")] public Ref<RumbleResource> BaggageHitRumbleResource;
    }

    [RTTI.Serializable(0x642ED4A18D970E4B, GameType.DS)]
    public class DSCliffEscapeEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5639D5418EA59DA8, GameType.DS)]
    public class DSCliffEscapeEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Escape")] public Ref<PhysicsCollisionResource> EscapeEffectCollisionResource;
        [RTTI.Member(4, 0x28, "Escape")] public Ref<EffectComponentResource> EscapeEffectComponentResource;
        [RTTI.Member(5, 0x30, "Escape")] public Ref<EffectComponentResource> EscapeDamageEffectComponentResource;
        [RTTI.Member(7, 0x38, "Summon")] public Ref<PhysicsCollisionResource> SummonNormalEffectCollisionResource;
        [RTTI.Member(8, 0x40, "Summon")] public Ref<EffectComponentResource> SummonNormalEffectComponentResource;
        [RTTI.Member(9, 0x48, "Summon")] public Ref<PhysicsCollisionResource> SummonLargeEffectCollisionResource;
        [RTTI.Member(10, 0x50, "Summon")] public Ref<EffectComponentResource> SummonLargeEffectComponentResource;
        [RTTI.Member(11, 0x58, "Summon")] public Ref<PhysicsCollisionResource> SummonEmergencyEffectCollisionResource;
        [RTTI.Member(12, 0x60, "Summon")] public Ref<EffectComponentResource> SummonEmergencyEffectComponentResource;
        [RTTI.Member(13, 0x68, "Summon")] public Ref<EffectComponentResource> SummonDamageEffectComponentResource;
    }

    [RTTI.Serializable(0x833709EC099C9AE7, GameType.DS)]
    public class DSCliffFacialRigManagerComponent : DSFacialRigManagerComponent
    {
    }

    [RTTI.Serializable(0xDBDA894DD3DF8CFC, GameType.DS)]
    public class DSCliffFacialRigManagerComponentResource : DSFacialRigManagerComponentResource
    {
    }

    [RTTI.Serializable(0xC9617A487FBF401F, GameType.DS)]
    public class DSCliffGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x81A2B15CA2E5BC33, GameType.DS)]
    public class DSCliffGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(10, 0xB0)] public Ref<DSCliffConfig> Config;
        [RTTI.Member(11, 0xB8)] public Ref<DSCliffBattlePointInfo> InitialBattlePointInfo;
    }

    [RTTI.Serializable(0x983254F18E0D0DCA, GameType.DS)]
    public class DSCliffGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0x58F14A8B98677606, GameType.DS)]
    public class DSCliffGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0x74A5754E85BA87E5, GameType.DS)]
    public class DSCliffMissionCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xFE77A9D8EC9BB2AA, GameType.DS)]
    public class DSCliffMissionCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC31DE47AA1528A88, GameType.DS)]
    public class DSCliffNoPerceptionKnowledgeComponent : DSAINoPerceptionKnowledgeComponentBase
    {
    }

    [RTTI.Serializable(0xBC129DF7160C7298, GameType.DS)]
    public class DSCliffNoPerceptionKnowledgeComponentResource : DSAINoPerceptionKnowledgeComponentResourceBase
    {
    }

    [RTTI.Serializable(0xFAB653B0614EF631, GameType.DS)]
    public class DSCliffPatrolComponent : DSPatrolComponent
    {
    }

    [RTTI.Serializable(0xAC8D3D4B40060907, GameType.DS)]
    public class DSCliffPatrolComponentResource : DSPatrolComponentResource
    {
    }

    [RTTI.Serializable(0x76C961F48933D4AE, GameType.DS)]
    public class DSCliffSearchPoint : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public GGUUID OriginalUUID;
        [RTTI.Member(6, 0x70, "General")] public int32 AreaRadius;
        [RTTI.Member(7, 0x78, "General")] public Ref<NavMeshBuilderSettings> NavmeshAlignment;
    }

    [RTTI.Serializable(0x374B57A736E08638, GameType.DS)]
    public class DSCliffTarAreaInfo : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public GGUUID OriginalUUID;
        [RTTI.Member(6, 0x70, "General")] public float AreaRadius;
        [RTTI.Member(7, 0x74, "General")] public int32 Num;
        [RTTI.Member(8, 0x78, "General")] public float ScaleMin;
        [RTTI.Member(9, 0x7C, "General")] public float ScaleMax;
    }

    [RTTI.Serializable(0x37BD30EE834A6D8F, GameType.DS)]
    public class DSCliffTarManager : Entity
    {
    }

    [RTTI.Serializable(0xC32D13DED2CE5260, GameType.DS)]
    public class DSCliffTarManagerResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "DS")] public Ref<EntityResource> TrailTarEntityResource;
        [RTTI.Member(32, 0x108, "DS")] public Ref<EntityResource> SignsTarEntityResource;
        [RTTI.Member(33, 0x110, "DS")] public Ref<EntityResource> DamageTarEntityResource;
        [RTTI.Member(34, 0x118, "DS")] public Ref<EffectComponentResource> TarFireEffectComponentResource;
        [RTTI.Member(35, 0x120, "DS")] public Ref<EffectComponentResource> TarSplashHighEffectComponentResource;
    }

    [RTTI.Serializable(0x7552B91AEE2A31C4, GameType.DS)]
    public class DSCliffUmbilicalCordComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x283B902F9188E3FD, GameType.DS)]
    public class DSCliffUmbilicalCordComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xA226E515621CB144, GameType.DS)]
    public class DSCliffUmbilicalCordComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public Array<Ref<EntityResource>> UmbilicalCordEntityResources;
        [RTTI.Member(4, 0x30, "DS")] public Ref<EffectComponentResource> SignEffectComponentResource;
        [RTTI.Member(5, 0x38, "DS")] public Ref<EffectComponentResource> CodeDiveEffectComponentResource;
        [RTTI.Member(6, 0x40, "DS")] public Ref<SoundResource> IdleSound;
        [RTTI.Member(7, 0x48, "DS")] public Ref<SoundResource> CodeAttackTrajectSound;
        [RTTI.Member(8, 0x50, "DS")] public Ref<DSCliffCodeAttackEntityResource> CodeAttackEntityResource;
        [RTTI.Member(9, 0x58, "DS")] public Array<Ref<AttachedLightsComponentResource>> BodyLightForVW;
    }

    [RTTI.Serializable(0x94FCE740C87A30C8, GameType.DS)]
    public class DSCliffUmbilicalCordSimulationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDA9E62DEEEA5D9EE, GameType.DS)]
    public class DSCliffUmbilicalCordSimulationComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x7C2DE614DC68FDEE, GameType.DS)]
    public class DSCliffVoiceControlComponent : DSNpcVoiceControlComponent
    {
    }

    [RTTI.Serializable(0x5E7BF1143C61EE29, GameType.DS)]
    public class DSCliffVoiceControlComponentResource : DSNpcVoiceControlComponentResource
    {
        [RTTI.Member(4, 0x38)] public Ref<DSCliffVoiceSituationGroupResource> SituationGroupResource;
    }

    [RTTI.Serializable(0x1A8A0ACDBEA27C4F, GameType.DS)]
    public class DSCliffVoiceSentenceResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<SentenceResource>> SentenceResources;
        [RTTI.Member(5, 0x30, "Hidden")] public ECliffVoicePowerFlag VoicePower;
        [RTTI.Member(6, 0x31, "Hidden")] public ECliffVoiceTargetStageFlag TargetStageFlag;
        [RTTI.Member(7, 0x32, "Hidden")] public ECliffVoiceWarriorExistFlag WarriorExistFlag;
    }

    [RTTI.Serializable(0x56531BE90F417E87, GameType.DS)]
    public class DSCliffVoiceSituationGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "Hidden")] public Array<Ref<DSCliffVoiceSituationResource>> SituationResources;
        [RTTI.Member(4, 0x30, "Hidden")] public HashMap<ECliffVoiceSituationType_int32> SituationIndex;
    }

    [RTTI.Serializable(0x9D6B1B6AECB6B35C, GameType.DS)]
    public class DSCliffVoiceSituationResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSCliffVoiceSentenceResource>> SentenceResources;
        [RTTI.Member(3, 0x30)] public int32 Priority;
    }

    [RTTI.Serializable(0x7EDD2FA9B01BFAC9, GameType.DS)]
    public class DSCliffWeaponComponent : DSNpcWeaponComponent
    {
    }

    [RTTI.Serializable(0xF825CF6CDB5EC5DE, GameType.DS)]
    public class DSCliffWeaponComponentResource : DSNpcWeaponComponentResource
    {
        [RTTI.Member(23, 0x90, "General")] public Ref<EffectComponentResource> AppearEffect;
        [RTTI.Member(24, 0x98, "General")] public Ref<EffectComponentResource> DisappearEffect;
    }

    [RTTI.Serializable(0xA84597BEB0723258, GameType.DS)]
    public class DSCollectMissionResource : DSMissionResourceBase
    {
        [RTTI.Member(14, 0xA8, "OrderInfo")] public Ref<DSDeliveryPointInfoResource> OrderPoint;
        [RTTI.Member(15, 0xB0, "OrderInfo")] public Array<Ref<DSDeliveryPointInfoResource>> DeliveryPoints;
        [RTTI.Member(18, 0xC0, "CollectInfo")] public Array<DSMissionAppearPosInfo> BaggageInfos;
        [RTTI.Member(20, 0x128, "Roadmap")] public Ref<DSMarkerAdapterResourceBase> CollectingAreaMarker;
        [RTTI.Member(21, 0x130, "Roadmap")] public Ref<DSMarkerAdapterResourceBase> DeliveryPointMarker;
        [RTTI.Member(22, 0x138, "Roadmap")] public Ref<IntegerFact> PickupTodoFact;
        [RTTI.Member(23, 0x140, "Roadmap")] public Ref<IntegerFact> DeliverTodoFact;
        [RTTI.Member(16, 0x148, "OrderInfo")] public Ref<DSMissionResurrectInfo> ResurrectTimeInfo;
        [RTTI.Member(25, 0x150, "ExtraOption")] public bool IsIgnoreQpidOpenCheck;
    }

    [RTTI.Serializable(0xD721DE6F3F50FED4, GameType.DS)]
    public class DSCollectibleConfig : CoreObject
    {
        [RTTI.Member(2, 0x20)] public float DistanceToRealize;
        [RTTI.Member(3, 0x24)] public float DistanceToUnrealize;
        [RTTI.Member(4, 0x28)] public Array<float> LikePoint;
        [RTTI.Member(5, 0x38)] public Array<float> Value;
        [RTTI.Member(6, 0x48)] public Array<Ref<ArtPartsDataResource>> CrystalSmallArtPartsDataResources;
        [RTTI.Member(7, 0x58)] public Array<Ref<ArtPartsDataResource>> CrystalMiddleArtPartsDataResources;
        [RTTI.Member(8, 0x68)] public Array<Ref<ArtPartsDataResource>> CrystalLargeArtPartsDataResources;
        [RTTI.Member(9, 0x78)] public Ref<StaticMeshResource> CrystalExtendedMeshResource;
        [RTTI.Member(10, 0x80)] public Array<Ref<ArtPartsDataResource>> ShoeSoleGrassArtPartsDataResources;
        [RTTI.Member(11, 0x90)] public Ref<ParticleSystemResource> ShoeSoleGrassParticleOnPickupSystemResource;
        [RTTI.Member(12, 0x98)] public Array<Ref<ArtPartsDataResource>> CryptobiosisCoralSmallArtPartsDataResources;
        [RTTI.Member(13, 0xA8)] public Array<Ref<ArtPartsDataResource>> CryptobiosisCoralLargeArtPartsDataResources;
        [RTTI.Member(14, 0xB8)] public Ref<ParticleSystemResource> CryptobiosisParticleOnPickupSystemResource;
        [RTTI.Member(15, 0xC0)] public Array<Ref<ArtPartsDataResource>> CollectorsItemArtPartsDataResources;
        [RTTI.Member(16, 0xD0)] public Ref<ParticleSystemResource> CollectorsItemParticleSystemResource;
        [RTTI.Member(17, 0xD8)] public Ref<ParticleSystemResource> CollectorsItemParticleOnPickupSystemResource;
        [RTTI.Member(18, 0xE0)] public Array<Ref<EntityResource>> EntityResources;
        [RTTI.Member(19, 0xF0)] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(20, 0x100)] public Array<Ref<LightResource>> Lights;
        [RTTI.Member(21, 0x110)] public float CrystalActivationProbabilityInDefault;
        [RTTI.Member(22, 0x114)] public float CrystalActivationProbabilityInRain;
        [RTTI.Member(23, 0x118)] public float CrystalActivationProbabilityInStorm;
        [RTTI.Member(24, 0x11C)] public int CryptobiosisCruserNumSmall;
        [RTTI.Member(25, 0x120)] public int CryptobiosisCruserNumMidium;
        [RTTI.Member(26, 0x124)] public int CryptobiosisCruserNumLarge;
        [RTTI.Member(27, 0x128)] public float BloodRecoverAmountByEatingCryptobiosis;
        [RTTI.Member(28, 0x12C)] public float BloodRecoverAmountByEatingCryptobiosisInBeach;
        [RTTI.Member(29, 0x130)] public float CryptobiosysPickableTimeAfterEscaping;
        [RTTI.Member(30, 0x140)] public Vec3 CrystalLotteryRateS;
        [RTTI.Member(31, 0x150)] public Vec3 CrystalLotteryParameterS;
        [RTTI.Member(32, 0x160)] public Vec3 CrystalLotteryRateM;
        [RTTI.Member(33, 0x170)] public Vec3 CrystalLotteryParameterM;
        [RTTI.Member(34, 0x180)] public Vec3 CrystalLotteryRateL;
        [RTTI.Member(35, 0x190)] public Vec3 CrystalLotteryParameterL;
        [RTTI.Member(36, 0x1A0)] public Vec2 CrystalValueS;
        [RTTI.Member(37, 0x1B0)] public Vec2 CrystalValueM;
        [RTTI.Member(38, 0x1C0)] public Vec2 CrystalValueL;
        [RTTI.Member(39, 0x1D0)] public float CrystalLotteryIgnoreRange;
        [RTTI.Member(40, 0x1D4)] public float CrystalLotteryResolveInterval;
        [RTTI.Member(41, 0x1D8)] public float IgnoreDistanceFromBase;
        [RTTI.Member(42, 0x1DC)] public float IgnoreDistanceFromConstruction;
        [RTTI.Member(43, 0x1E0)] public Array<Ref<DSCollectibleFactForEnable>> FactForEnables;
        [RTTI.Member(45, 0x1F0)] public Array<Ref<SoundResource>> LoopSounds;
        [RTTI.Member(46, 0x200)] public Array<Ref<SoundResource>> OneshotSounds;
        [RTTI.Member(47, 0x210)] public Ref<EntityResource> CrystalStoneResource;
        [RTTI.Member(48, 0x218)] public Ref<EntityResource> CryptobiosisStoneResource;
        [RTTI.Member(44, 0x220)] public Array<Ref<DSCollectibleTypeConfig>> TypeConfigs;
        [RTTI.Member(49, 0x230)] public Ref<Fact> FactForEnableGrass;
    }

    [RTTI.Serializable(0xB8BA2753E4CF4738, GameType.DS)]
    public class DSCollectibleFactForEnable : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSArea Area;
        [RTTI.Member(3, 0x22)] public EDSCollectibleType Type;
        [RTTI.Member(4, 0x28)] public Ref<Fact> Fact;
    }

    [RTTI.Serializable(0x4A710926033D163, GameType.DS)]
    public class DSCollectibleLocator : DSLocator
    {
        [RTTI.Member(7, 0x70)] public int32 Id;
        [RTTI.Member(8, 0x74)] public float CheckHeight;
        [RTTI.Member(9, 0x78)] public float CheckSlopeAngle;
        [RTTI.Member(6, 0x7C)] public EDSCollectibleType Type;
        [RTTI.Member(10, 0x7D)] public uint8 MeshType;
        [RTTI.Member(11, 0x7E)] public bool UseRandomMesh;
    }

    [RTTI.Serializable(0x9EBE36D226FCB6C2, GameType.DS)]
    public class DSCollectibleTypeConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSCollectibleType Type;
        [RTTI.Member(3, 0x24)] public float DistanceToRealize;
        [RTTI.Member(4, 0x28)] public float DistanceToUnrealize;
    }

    [RTTI.Serializable(0x5583609BD341C69E, GameType.DS)]
    public class DSCollectorsItemLocator : DSLocator
    {
        [RTTI.Member(7, 0x70, "CollectorsItem")] public Ref<DSCollectorsItemResource> CollectorsItem;
        [RTTI.Member(8, 0x7C, "CollectorsItem")] public EDSArea DsArea;
    }

    [RTTI.Serializable(0x3D3C2F6DD1143061, GameType.DS)]
    public class DSCollectorsItemLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD47A64369D18AE37, GameType.DS)]
    public class DSCollectorsItemResource : Resource
    {
        [RTTI.Member(3, 0x20)] public uint32 DisplayNo;
        [RTTI.Member(4, 0x28)] public Ref<DSHouseholdInfoResource> HouseholdInfo;
        [RTTI.Member(6, 0x30)] public Ref<LocalizedTextResource> NameText;
        [RTTI.Member(7, 0x38)] public Ref<LocalizedTextResource> LockedNameText;
        [RTTI.Member(8, 0x40)] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(9, 0x48)] public Array<StreamingRef<UITexture>> DetailUITextures;
        [RTTI.Member(10, 0x58)] public StreamingRef<UITexture> UnlockedIconUITexture;
        [RTTI.Member(11, 0x60)] public StreamingRef<UITexture> LockedIconUITexture;
        [RTTI.Member(12, 0x68)] public Ref<BooleanFact> UnlockFact;
        [RTTI.Member(15, 0x70)] public uint32 HashId;
        [RTTI.Member(16, 0x74)] public uint32 NameHash;
        [RTTI.Member(5, 0x78)] public uint32 Like;
        [RTTI.Member(17, 0x80)] public StreamingRef<EntityResource> DisplayEntityResource;
        [RTTI.Member(22, 0x88, "ForGraphNode")] public Ref<DSStringHashResource> StringHashResource;
        [RTTI.Member(2, 0x90)] public EDSCollectorsItemType Type;
        [RTTI.Member(13, 0x91)] public EDSGameCatalogueListItem_UnlockType UnlockType;
        [RTTI.Member(14, 0x92)] public bool IsHiddenItem;
        [RTTI.Member(18, 0x94)] public EDSCameraParam MenuCameraParameterEnum;
        [RTTI.Member(19, 0x98)] public float MenuScaleFactor;
        [RTTI.Member(20, 0x9C)] public int UISortIndex;
    }

    [RTTI.Serializable(0x92D7C0DBA5D75D79, GameType.DS)]
    public class DSCompoundBlockHelperLocator : DSLocator
    {
    }

    [RTTI.Serializable(0x187CCEFCDDB92EE0, GameType.DS)]
    public class DSConditionLevelLocator : DSLocator
    {
        [RTTI.Member(6, 0x70)] public int8 Level;
        [RTTI.Member(7, 0x74)] public float Radius;
    }

    [RTTI.Serializable(0xC8E51B3389C34018, GameType.DS)]
    public class DSConstraintComponent : ConstraintComponent
    {
    }

    [RTTI.Serializable(0xBE1FAE1DCBFBA967, GameType.DS)]
    public class DSConstraintComponentResource : ConstraintComponentResource
    {
        [RTTI.Member(8, 0x40, "ArtParts")] public Ref<ArtPartsSubModelWithChildrenResource> ArtPartsModelPartResource;
        [RTTI.Member(9, 0x48, "ArtParts")] public Ref<ArtPartsSubModelWithChildrenResource> TargetArtPartsModelPartResource;
    }

    [RTTI.Serializable(0xF7BA0FE181D3CA27, GameType.DS)]
    public class DSConstructableWhitelistArea : PhysicsCollisionInstance
    {
    }

    [RTTI.Serializable(0xF5FCCBF5D52C1C3B, GameType.DS)]
    public class DSConstructionLevelUpComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8600B1C2FC1C3680, GameType.DS)]
    public class DSConstructionLevelUpComponentResource : EntityComponentResource
    {
        [RTTI.Member(8, 0x20, "Lv1")] public Ref<EntityResource> BuildUpEnitityResourceLv1;
        [RTTI.Member(20, 0x28, "Lv2")] public Ref<EntityResource> BuildUpEnitityResourceLv2;
        [RTTI.Member(32, 0x30, "Lv3")] public Ref<EntityResource> BuildUpEnitityResourceLv3;
        [RTTI.Member(44, 0x38, "Lv4")] public Ref<EntityResource> BuildUpEnitityResourceLv4;
        [RTTI.Member(56, 0x40, "Lv5")] public Ref<EntityResource> BuildUpEnitityResourceLv5;
        [RTTI.Member(15, 0x48, "Lv1")] public Ref<EntityResource> RemoveEntityResourceLv1;
        [RTTI.Member(27, 0x50, "Lv2")] public Ref<EntityResource> RemoveEntityResourceLv2;
        [RTTI.Member(39, 0x58, "Lv3")] public Ref<EntityResource> RemoveEntityResourceLv3;
        [RTTI.Member(51, 0x60, "Lv4")] public Ref<EntityResource> RemoveEntityResourceLv4;
        [RTTI.Member(63, 0x68, "Lv5")] public Ref<EntityResource> RemoveEntityResourceLv5;
        [RTTI.Member(7, 0x70, "Lv1")] public Array<Ref<EntityComponentResource>> ComponentResourcesLv1;
        [RTTI.Member(19, 0x80, "Lv2")] public Array<Ref<EntityComponentResource>> ComponentResourcesLv2;
        [RTTI.Member(31, 0x90, "Lv3")] public Array<Ref<EntityComponentResource>> ComponentResourcesLv3;
        [RTTI.Member(43, 0xA0, "Lv4")] public Array<Ref<EntityComponentResource>> ComponentResourcesLv4;
        [RTTI.Member(55, 0xB0, "Lv5")] public Array<Ref<EntityComponentResource>> ComponentResourcesLv5;
        [RTTI.Member(67, 0xC0, "Remove")] public Array<Ref<EntityComponentResource>> RemoveComponentResource;
        [RTTI.Member(9, 0xD0, "Lv1")] public Ref<ArtPartsVariationResource> BuildArtPartsVariationResourceLv1;
        [RTTI.Member(21, 0xD8, "Lv2")] public Ref<ArtPartsVariationResource> BuildArtPartsVariationResourceLv2;
        [RTTI.Member(33, 0xE0, "Lv3")] public Ref<ArtPartsVariationResource> BuildArtPartsVariationResourceLv3;
        [RTTI.Member(45, 0xE8, "Lv4")] public Ref<ArtPartsVariationResource> BuildArtPartsVariationResourceLv4;
        [RTTI.Member(57, 0xF0, "Lv5")] public Ref<ArtPartsVariationResource> BuildArtPartsVariationResourceLv5;
        [RTTI.Member(10, 0xF8, "Lv1")] public UUIDRef<EntityResource> BuildArtPartsTargetLv1;
        [RTTI.Member(22, 0x108, "Lv2")] public UUIDRef<EntityResource> BuildArtPartsTargetLv2;
        [RTTI.Member(34, 0x118, "Lv3")] public UUIDRef<EntityResource> BuildArtPartsTargetLv3;
        [RTTI.Member(46, 0x128, "Lv4")] public UUIDRef<EntityResource> BuildArtPartsTargetLv4;
        [RTTI.Member(58, 0x138, "Lv5")] public UUIDRef<EntityResource> BuildArtPartsTargetLv5;
        [RTTI.Member(5, 0x148, "General")] public Ref<TriggerComponentResource> KeepOutTriggerResource;
        [RTTI.Member(3, 0x150, "General")] public Vec3 BuildUpEntityOffset;
        [RTTI.Member(12, 0x160, "Lv1")] public BoundingBox3 AntiGravityBoundingBoxLv1;
        [RTTI.Member(24, 0x180, "Lv2")] public BoundingBox3 AntiGravityBoundingBoxLv2;
        [RTTI.Member(36, 0x1A0, "Lv3")] public BoundingBox3 AntiGravityBoundingBoxLv3;
        [RTTI.Member(48, 0x1C0, "Lv4")] public BoundingBox3 AntiGravityBoundingBoxLv4;
        [RTTI.Member(60, 0x1E0, "Lv5")] public BoundingBox3 AntiGravityBoundingBoxLv5;
        [RTTI.Member(13, 0x200, "Lv1")] public float Lv1_BuildStartOffset;
        [RTTI.Member(25, 0x204, "Lv2")] public float Lv2_BuildStartOffset;
        [RTTI.Member(37, 0x208, "Lv3")] public float Lv3_BuildStartOffset;
        [RTTI.Member(49, 0x20C, "Lv4")] public float Lv4_BuildStartOffset;
        [RTTI.Member(61, 0x210, "Lv5")] public float Lv5_BuildStartOffset;
        [RTTI.Member(16, 0x214, "Lv1")] public float RemoveDelayTimeLv1;
        [RTTI.Member(28, 0x218, "Lv2")] public float RemoveDelayTimeLv2;
        [RTTI.Member(40, 0x21C, "Lv3")] public float RemoveDelayTimeLv3;
        [RTTI.Member(52, 0x220, "Lv4")] public float RemoveDelayTimeLv4;
        [RTTI.Member(64, 0x224, "Lv5")] public float RemoveDelayTimeLv5;
        [RTTI.Member(17, 0x228, "Lv1")] public float LevelUpStartDelayLv1;
        [RTTI.Member(29, 0x22C, "Lv2")] public float LevelUpStartDelayLv2;
        [RTTI.Member(41, 0x230, "Lv3")] public float LevelUpStartDelayLv3;
        [RTTI.Member(53, 0x234, "Lv4")] public float LevelUpStartDelayLv4;
        [RTTI.Member(65, 0x238, "Lv5")] public float LevelUpStartDelayLv5;
        [RTTI.Member(68, 0x23C, "Remove")] public float RemoveWaitTime;
        [RTTI.Member(14, 0x240, "Lv1")] public float Lv1_LevelUpStartOffset;
        [RTTI.Member(26, 0x244, "Lv2")] public float Lv2_LevelUpStartOffset;
        [RTTI.Member(38, 0x248, "Lv3")] public float Lv3_LevelUpStartOffset;
        [RTTI.Member(50, 0x24C, "Lv4")] public float Lv4_LevelUpStartOffset;
        [RTTI.Member(62, 0x250, "Lv5")] public float Lv5_LevelUpStartOffset;
        [RTTI.Member(11, 0x254, "Lv1")] public bool HidePreviousLevelOnBuildLv1;
        [RTTI.Member(23, 0x255, "Lv2")] public bool HidePreviousLevelOnBuildLv2;
        [RTTI.Member(35, 0x256, "Lv3")] public bool HidePreviousLevelOnBuildLv3;
        [RTTI.Member(47, 0x257, "Lv4")] public bool HidePreviousLevelOnBuildLv4;
        [RTTI.Member(59, 0x258, "Lv5")] public bool HidePreviousLevelOnBuildLv5;
        [RTTI.Member(4, 0x259, "General")] public bool WaitForPlayerExitTrigger;
    }

    [RTTI.Serializable(0x4E943B93C3AD7AAC, GameType.DS)]
    public class DSConstructionMover : Mover
    {
    }

    [RTTI.Serializable(0xF4A4FE3E61B542E, GameType.DS)]
    public class DSConstructionMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x9628EEF95377DC44, GameType.DS)]
    public class DSConstructionOfflineArea : PhysicsCollisionInstance
    {
    }

    [RTTI.Serializable(0xDB9AB03EF37B88E8, GameType.DS)]
    public class DSConstructionPoint : RTTIObject
    {
    }

    [RTTI.Serializable(0x3C409FDC3BF1ED39, GameType.DS)]
    public class DSConstructionPointBuildBox : RTTIObject
    {
        [RTTI.Member(0, 0x10)] public Vec3 CheckPositionVec;
        [RTTI.Member(1, 0x20)] public Vec3 CheckPositionToOriginPos;
        [RTTI.Member(2, 0x30)] public int TryCount;
        [RTTI.Member(3, 0x34)] public int AngleTryCount;
        [RTTI.Member(4, 0x38)] public float BaseRadius;
        [RTTI.Member(5, 0x3C)] public float AvailableFloorHeightRange;
        [RTTI.Member(6, 0x40)] public float AvailableNearestAnothers;
        [RTTI.Member(7, 0x44)] public float AvailableNearestBaggage;
        [RTTI.Member(8, 0x48)] public float FloorCheckStartHeight;
        [RTTI.Member(9, 0x4C)] public float FloorCheckEndHeight;
        [RTTI.Member(10, 0x50)] public float AvailableWaterDepth;
        [RTTI.Member(11, 0x54)] public float OnlineAvailableNearestAnothers;
        [RTTI.Member(12, 0x58)] public float OnlineAvailableNearestSameCategory;
        [RTTI.Member(13, 0x5C)] public float NavCheckBaseRadius;
        [RTTI.Member(14, 0x60)] public float NpcAllowedDistance;
    }

    [RTTI.Serializable(0x5A26C73503804233, GameType.DS)]
    public class DSConstructionPointConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EDSConstructionPointCategory Category;
        [RTTI.Member(3, 0x21)] public EDSStructureMarkerType MarkerType;
        [RTTI.Member(4, 0x22)] public EDSLikeTargetType LikeTargetType;
        [RTTI.Member(32, 0x23)] public EDSBaggage2CarrierType CarrierType;
        [RTTI.Member(33, 0x24)] public bool HasPrivateSlot;
        [RTTI.Member(34, 0x25)] public bool HasPublicSlot;
        [RTTI.Member(35, 0x26)] public bool HasSupplySlot;
        [RTTI.Member(5, 0x28)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(6, 0x30)] public Ref<EntityResource> BuilderHologramEntityResource;
        [RTTI.Member(7, 0x38)] public Ref<EntityResource> DeliveryDemoSequenceResource;
        [RTTI.Member(8, 0x40)] public Ref<PhysicsCollisionResource> UnrealizeCollisionResource;
        [RTTI.Member(9, 0x50)] public BoundingBox3 UnrealizeCollisionBoundingBox;
        [RTTI.Member(10, 0x70)] public float DistanceToRealize;
        [RTTI.Member(11, 0x74)] public float DistanceToUnrealize;
        [RTTI.Member(12, 0x78)] public uint LimitOfActivation;
        [RTTI.Member(13, 0x7C)] public uint LimitOfStageCreation;
        [RTTI.Member(14, 0x80)] public uint LimitOfPlayerCreation;
        [RTTI.Member(15, 0x84)] public uint LimitOfNetCreation;
        [RTTI.Member(16, 0x88)] public uint MaxLevel;
        [RTTI.Member(17, 0x8C)] public uint32 QpidCost;
        [RTTI.Member(18, 0x90)] public float RainDurabilitySec;
        [RTTI.Member(19, 0x94)] public float RainDurabilitySecLv2;
        [RTTI.Member(20, 0x98)] public float RainDurabilitySecLv3;
        [RTTI.Member(21, 0x9C)] public float RainDurabilitySecLv4;
        [RTTI.Member(22, 0xA0)] public float RainDurabilitySecLv5;
        [RTTI.Member(23, 0xA4)] public float WeatheringLifeTime;
        [RTTI.Member(47, 0xC8, "BuildUp")] public float TimeOfBuildUp;
        [RTTI.Member(53, 0x100, "Lv1to2")] public float TimeOfLv1to2;
        [RTTI.Member(54, 0x108, "Lv1to2")] public Array<DSRequiredMaterial> RequiredMaterialsOfLv1to2;
        [RTTI.Member(56, 0x138, "Lv2to3")] public float TimeOfLv2to3;
        [RTTI.Member(57, 0x140, "Lv2to3")] public Array<DSRequiredMaterial> RequiredMaterialsOfLv2to3;
        [RTTI.Member(59, 0x170, "Lv3to4")] public float TimeOfLv3to4;
        [RTTI.Member(60, 0x178, "Lv3to4")] public Array<DSRequiredMaterial> RequiredMaterialsOfLv3to4;
        [RTTI.Member(62, 0x1A8, "Lv4to5")] public float TimeOfLv4to5;
        [RTTI.Member(63, 0x1B0, "Lv4to5")] public Array<DSRequiredMaterial> RequiredMaterialsOfLv4to5;
        [RTTI.Member(25, 0x1C0)] public Mat44 BuildOffsetMatrix;
        [RTTI.Member(67, 0x200, "Repair")] public float CrystalRepairValue;
        [RTTI.Member(68, 0x204, "Repair")] public float ResinRepairValue;
        [RTTI.Member(69, 0x208, "Repair")] public float MetalRepairValue;
        [RTTI.Member(70, 0x20C, "Repair")] public float CeramicRepairValue;
        [RTTI.Member(71, 0x210, "Repair")] public float ChemicalSubstanceRepairValue;
        [RTTI.Member(72, 0x214, "Repair")] public float SpecialAlloyRepairValue;
        [RTTI.Member(26, 0x220)] public DSConstructionPointBuildBox BuildBox;
        [RTTI.Member(27, 0x290)] public Array<Ref<DSBuildCheckHelperInfo>> UndergroundHelpers;
        [RTTI.Member(28, 0x2A0)] public Array<Ref<DSBuildCheckHelperInfo>> OvergroundHelpers;
        [RTTI.Member(29, 0x2B0)] public Ref<DSBuildCheckHelperInfo> GroundPointHelper;
        [RTTI.Member(75, 0x2C0, "Terminal")] public Vec3 TerminalFrontAccessOffset;
        [RTTI.Member(36, 0x2D0)] public Vec3 CustomizedHoloOffset;
        [RTTI.Member(37, 0x2E0)] public bool DoesCustomizedHoloAttachToTerminal;
        [RTTI.Member(30, 0x2E8)] public Array<Ref<DSBuildCheckOrientedBox>> BuildCheckCollisionBox;
        [RTTI.Member(31, 0x2F8)] public Array<Ref<DSBuildCheckVerticalCylinder>> BuildCheckCollisionCylinder;
        [RTTI.Member(24, 0x308)] public Ref<CurveResource> RainLifeVsCorrosionRateCurve;
        [RTTI.Member(77, 0x310, "Text")] public Ref<LocalizedTextResource> ConstructionName;
        [RTTI.Member(78, 0x318, "Text")] public Ref<LocalizedTextResource> OnlineConstructionName;
        [RTTI.Member(48, 0x320, "BuildUp")] public float BuildUpHeight;
        [RTTI.Member(49, 0x324, "BuildUp")] public float BuildUpOffset;
        [RTTI.Member(38, 0x328)] public float LookUpBuildingDistance;
        [RTTI.Member(39, 0x330)] public Vec3 LookUpBuildingLocalPos;
        [RTTI.Member(40, 0x340)] public int LikeAmountRateOnUseMenu;
        [RTTI.Member(41, 0x344)] public float SendLikeCooldownTime;
        [RTTI.Member(42, 0x348)] public float OnlineSyncDistance;
        [RTTI.Member(65, 0x34C, "Remove")] public float TimeOfRemoveAnim;
        [RTTI.Member(74, 0x350, "Terminal")] public Vec3 LocalTerminalPosition;
        [RTTI.Member(80, 0x360, "BuildCheck")] public Array<Ref<MaterialTypeResource>> AdditionalBuildNotAllowedMaterialResources;
        [RTTI.Member(81, 0x370, "BuildCheck")] public Array<Ref<MaterialTypeResource>> SpeciallyBuildAllowedMaterialResources;
        [RTTI.Member(83, 0x380, "Menu")] public float MenuScaleFactor;
        [RTTI.Member(84, 0x388, "Menu")] public Ref<DSCameraParameter> MenuCameraParameter;
        [RTTI.Member(85, 0x390, "Menu")] public Mat44 OffsetInCustomizeMenu;
        [RTTI.Member(50, 0x3D0, "BuildUp")] public Ref<CurveResource> BuildMachineCurveResourceHeight;
        [RTTI.Member(51, 0x3D8, "BuildUp")] public Ref<CurveResource> BuildMachineCurveResourceWidth;
        [RTTI.Member(43, 0x3E0)] public Vec3 BaggageSafePoint;
        [RTTI.Member(44, 0x3F0)] public Vec3 HeightShouldBeGround;
        [RTTI.Member(45, 0x400)] public Vec3 HeightShouldBeNothing;
        [RTTI.Member(87, 0x410, "RecycleMaterialLv1")] public int LimitLv1_Crystal;
        [RTTI.Member(88, 0x414, "RecycleMaterialLv1")] public int LimitLv1_Resin;
        [RTTI.Member(89, 0x418, "RecycleMaterialLv1")] public int LimitLv1_Metal;
        [RTTI.Member(90, 0x41C, "RecycleMaterialLv1")] public int LimitLv1_Ceramic;
        [RTTI.Member(91, 0x420, "RecycleMaterialLv1")] public int LimitLv1_ChemicalSubstance;
        [RTTI.Member(92, 0x424, "RecycleMaterialLv1")] public int LimitLv1_SpecialAlloy;
        [RTTI.Member(94, 0x428, "RecycleMaterialLv2")] public int LimitLv2_Crystal;
        [RTTI.Member(95, 0x42C, "RecycleMaterialLv2")] public int LimitLv2_Resin;
        [RTTI.Member(96, 0x430, "RecycleMaterialLv2")] public int LimitLv2_Metal;
        [RTTI.Member(97, 0x434, "RecycleMaterialLv2")] public int LimitLv2_Ceramic;
        [RTTI.Member(98, 0x438, "RecycleMaterialLv2")] public int LimitLv2_ChemicalSubstance;
        [RTTI.Member(99, 0x43C, "RecycleMaterialLv2")] public int LimitLv2_SpecialAlloy;
        [RTTI.Member(101, 0x440, "RecycleMaterialLv3")] public int LimitLv3_Crystal;
        [RTTI.Member(102, 0x444, "RecycleMaterialLv3")] public int LimitLv3_Resin;
        [RTTI.Member(103, 0x448, "RecycleMaterialLv3")] public int LimitLv3_Metal;
        [RTTI.Member(104, 0x44C, "RecycleMaterialLv3")] public int LimitLv3_Ceramic;
        [RTTI.Member(105, 0x450, "RecycleMaterialLv3")] public int LimitLv3_ChemicalSubstance;
        [RTTI.Member(106, 0x454, "RecycleMaterialLv3")] public int LimitLv3_SpecialAlloy;
        [RTTI.Member(108, 0x458, "RecycleMaterialLv4")] public int LimitLv4_Crystal;
        [RTTI.Member(109, 0x45C, "RecycleMaterialLv4")] public int LimitLv4_Resin;
        [RTTI.Member(110, 0x460, "RecycleMaterialLv4")] public int LimitLv4_Metal;
        [RTTI.Member(111, 0x464, "RecycleMaterialLv4")] public int LimitLv4_Ceramic;
        [RTTI.Member(112, 0x468, "RecycleMaterialLv4")] public int LimitLv4_ChemicalSubstance;
        [RTTI.Member(113, 0x46C, "RecycleMaterialLv4")] public int LimitLv4_SpecialAlloy;
    }

    [RTTI.Serializable(0xDA16A95AA491369A, GameType.DS)]
    public class DSConstructionPointEffectsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x64BC8A0C543551BE, GameType.DS)]
    public class DSConstructionPointEffectsComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ParticleSystemResource> ParticleSensorMark;
        [RTTI.Member(3, 0x28)] public String SensorMarkHelperName;
    }

    [RTTI.Serializable(0x84BF6EAE2BAD84FE, GameType.DS)]
    public class DSConstructionPointManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xA389623F950ED802, GameType.DS)]
    public class DSConstructionPointManagerConfig : Resource
    {
        [RTTI.Member(47, 0x20, "Debug")] public Array<UUIDRef<Scene>> WorstCaseScenes;
        [RTTI.Member(48, 0x30, "Debug")] public Array<Ref<Fact>> WorstCaseFacts;
        [RTTI.Member(16, 0x40, "Configs")] public Ref<DSConstructionPointConfig> DeliveryBaseConfig;
        [RTTI.Member(18, 0x48, "Configs")] public Ref<DSConstructionPointConfig> SafetyHouseConfig;
        [RTTI.Member(17, 0x50, "Configs")] public Ref<DSConstructionPointConfig> PreppersShelterConfig;
        [RTTI.Member(19, 0x58, "Configs")] public Ref<DSConstructionPointConfig> PostConfig;
        [RTTI.Member(20, 0x60, "Configs")] public Ref<DSConstructionPointConfig> WatchTowerConfig;
        [RTTI.Member(21, 0x70, "Configs")] public Ref<DSConstructionPointConfig> ChargerConfig;
        [RTTI.Member(22, 0x78, "Configs")] public Ref<DSConstructionPointConfig> RainShelterConfig;
        [RTTI.Member(23, 0x80, "Configs")] public Ref<DSConstructionPointConfig> MulePostConfig;
        [RTTI.Member(24, 0x88, "Configs")] public Ref<DSConstructionPointConfig> ZiplineConfig;
        [RTTI.Member(25, 0x90, "Configs")] public Ref<DSConstructionPointConfig> LadderConfig;
        [RTTI.Member(26, 0x98, "Configs")] public Ref<DSConstructionPointConfig> FieldRopeConfig;
        [RTTI.Member(28, 0xA0, "Configs")] public Ref<DSConstructionPointConfig> Bridge45mConfig;
        [RTTI.Member(27, 0xA8, "Configs")] public Ref<DSConstructionPointConfig> Bridge30mConfig;
        [RTTI.Member(29, 0xB0, "Configs")] public Ref<DSConstructionPointConfig> RoadRebuilderConfig;
        [RTTI.Member(31, 0xC0, "Facts")] public Ref<IntegerFact> LockTerminalsExceptThisIDFact;
        [RTTI.Member(32, 0xC8, "Facts")] public Ref<BooleanFact> SafetyHouseUnbreakableFact;
        [RTTI.Member(33, 0xD0, "Facts")] public Ref<BooleanFact> SafetyHouseSceneActivationFact;
        [RTTI.Member(34, 0xD8, "Facts")] public Ref<FloatFact> BuildSpeedRateFact;
        [RTTI.Member(35, 0xE0, "Facts")] public Ref<FloatFact> BuildTimeOffsetFact;
        [RTTI.Member(37, 0xE8, "PrivateRoom")] public Ref<PrivateRoomConfig> PrivateRoomConfig;
        [RTTI.Member(39, 0xF0, "BuildCheck")] public Array<Ref<MaterialTypeResource>> BuildNotAllowedMaterials;
        [RTTI.Member(40, 0x100, "BuildCheck")] public Array<Ref<MaterialTypeResource>> BuildNotAllowedWallMaterials;
        [RTTI.Member(41, 0x110, "BuildCheck")] public Array<Ref<MaterialTypeResource>> BuildNotAllowedAirWallMaterials;
        [RTTI.Member(5, 0x120, "General")] public UUIDRef<DSDeliveryPointInfoResource> GurbageCollectTerminal;
        [RTTI.Member(3, 0x130, "General")] public int LimitOfTotalRealization;
        [RTTI.Member(4, 0x134, "General")] public int LimitOfTotalRealizationFar;
        [RTTI.Member(43, 0x140, "Outline")] public Vec4 RedOutline;
        [RTTI.Member(44, 0x150, "Outline")] public Vec4 BlueOutline;
        [RTTI.Member(45, 0x160, "Outline")] public Vec4 OrangeOutline;
        [RTTI.Member(6, 0x170, "General")] public Ref<EntityResource> BuildMachineEntityResource;
        [RTTI.Member(7, 0x178, "General")] public Ref<ParticleSystemResource> OnlineAppearParticleEffect;
        [RTTI.Member(8, 0x180, "General")] public UUIDRef<EntityResource> Bridge30mOthersideUUID;
        [RTTI.Member(9, 0x190, "General")] public UUIDRef<EntityResource> Bridge45mOthersideUUID;
        [RTTI.Member(11, 0x1A0, "General")] public Ref<SoundResource> BridgeSwitchSound;
        [RTTI.Member(10, 0x1A8, "General")] public float PrintDelay;
        [RTTI.Member(13, 0x1AC, "General")] public float ActionIconDistance;
        [RTTI.Member(12, 0x1B0, "General")] public float TerminalActionIconDistance;
        [RTTI.Member(14, 0x1B4, "General")] public float GrayOutActionIconDistance;
        [RTTI.Member(50, 0x1B8, "LvMaxFacts")] public Ref<BooleanFact> FactLvMaxBridge;
        [RTTI.Member(51, 0x1C0, "LvMaxFacts")] public Ref<BooleanFact> FactLvMaxCharger;
        [RTTI.Member(52, 0x1C8, "LvMaxFacts")] public Ref<BooleanFact> FactLvMaxPost;
        [RTTI.Member(53, 0x1D0, "LvMaxFacts")] public Ref<BooleanFact> FactLvMaxRainShelter;
        [RTTI.Member(54, 0x1D8, "LvMaxFacts")] public Ref<BooleanFact> FactLvMaxSafetyHouse;
        [RTTI.Member(55, 0x1E0, "LvMaxFacts")] public Ref<BooleanFact> FactLvMaxWatchTower;
        [RTTI.Member(56, 0x1E8, "LvMaxFacts")] public Ref<BooleanFact> FactLvMaxZipline;
        [RTTI.Member(58, 0x1F0, "MaterialEnabled")] public Ref<BooleanFact> FactSpecialAlloyEnabled;
    }

    [RTTI.Serializable(0x3221CEC6F8E0A301, GameType.DS)]
    public class DSConstructionPointManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB29ADB9CEA3A01A1, GameType.DS)]
    public class DSContactPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE26D9DB396B923C4, GameType.DS)]
    public class DSContactPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Effect")] public Ref<SoundResource> ContactSound;
        [RTTI.Member(4, 0x28, "Effect")] public uint32 Identifier;
    }

    [RTTI.Serializable(0x7C715FEA8EFBE71D, GameType.DS)]
    public class DSControlledBaggageMarkerAdapterResource : DSMarkerAdapterResourceBase
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSControlledBaggageMarkerResource> MarkerResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<LocalizedTextResource> Description;
    }

    [RTTI.Serializable(0xE338D28290F333BC, GameType.DS)]
    public class DSControlledBaggageMarkerResource : DSControlledMarkerResourceBase
    {
        [RTTI.Member(10, 0x38, "BaggageResource")] public Ref<DSMissionBaggageResource> MissionBaggageResource;
        [RTTI.Member(11, 0x40, "BaggageResource")] public Ref<BooleanFact> VisibleAsDestination;
        [RTTI.Member(12, 0x48, "BaggageResource")] public float Radius;
        [RTTI.Member(13, 0x50, "BaggageResource")] public Ref<DSLocator> AreaCenter;
    }

    [RTTI.Serializable(0xF7FA4A6DA8CD4E79, GameType.DS)]
    public class DSControlledEntity : ControlledEntity
    {
    }

    [RTTI.Serializable(0xE03D1030BF2862B3, GameType.DS)]
    public class DSControlledEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0xBE453269E31DE1D1, GameType.DS)]
    public class DSControlledEntityResource : ControlledEntityResource
    {
        [RTTI.Member(39, 0x130, "General")] public String Name;
        [RTTI.Member(42, 0x138, "DS")] public Ref<DSNpcAimResource> AimResource;
        [RTTI.Member(43, 0x140, "DS")] public Ref<DSNpcImpactEffectResource> ImpactEffectResource;
        [RTTI.Member(41, 0x148, "DS")] public Ref<DSControlledEntityUpdaterResource> Updater;
    }

    [RTTI.Serializable(0xF4D20BC3B82BFE08, GameType.DS)]
    public class DSControlledEntityUpdater : CoreObject
    {
    }

    [RTTI.Serializable(0x877E29E3878C5763, GameType.DS)]
    public class DSControlledEntityUpdaterResource : Resource
    {
    }

    [RTTI.Serializable(0xEF56A658F7B9F114, GameType.DS)]
    public class DSControlledGlobalMarkerAdapterResource : DSMarkerAdapterResourceBase
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSControlledGrobalMarkerResource> MarkerResource;
    }

    [RTTI.Serializable(0x7CAA6DF2690DDE3A, GameType.DS)]
    public class DSControlledGrobalMarkerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Facts")] public Ref<BooleanFact> Visible;
        [RTTI.Member(5, 0x28, "Settings")] public Ref<DSLocator> Locator;
        [RTTI.Member(6, 0x30, "Settings")] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(7, 0x38, "Settings")] public bool IsArea;
        [RTTI.Member(8, 0x3C, "Settings")] public float Radius;
        [RTTI.Member(9, 0x40, "Settings")] public bool IsShortTermGoal;
        [RTTI.Member(10, 0x48, "Settings")] public Ref<DSDeliveryPointInfoResource> DeliveryPointInfoResource;
        [RTTI.Member(11, 0x50, "Settings")] public Ref<DSHouseholdPersonResource> OrderPerson;
        [RTTI.Member(13, 0x58, "Area")] public EDSArea DSArea;
    }

    [RTTI.Serializable(0x6AECD0ED40ACCC47, GameType.DS)]
    public class DSControlledMarkerFactContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xE5718CE96287247C, GameType.DS)]
    public class DSControlledMarkerFactContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2D5988AFD10FB47, GameType.DS)]
    public class DSControlledMarkerResourceBase : Resource
    {
        [RTTI.Member(3, 0x20, "Mission")] public Ref<DSMissionResourceBase> MissionResource;
        [RTTI.Member(5, 0x28, "Facts")] public Ref<BooleanFact> Visible;
        [RTTI.Member(7, 0x30, "Ui")] public uint32 SequenceNumber;
        [RTTI.Member(8, 0x34, "Ui")] public bool VisibleOnMissionSelect;
    }

    [RTTI.Serializable(0x381E665CD5C0E3A7, GameType.DS)]
    public class DSControlledNPCPositionMarkerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<BooleanFact> VisibleFact;
        [RTTI.Member(3, 0x28)] public Ref<DSLocator> Locator;
        [RTTI.Member(4, 0x30)] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(5, 0x38)] public DSControlledNPCPositionMarker_NPC NPC;
        [RTTI.Member(6, 0x3A)] public EDSArea Area;
    }

    [RTTI.Serializable(0xC0100F0567C6F59E, GameType.DS)]
    public class DSControlledPositionMarkerAdapterResource : DSMarkerAdapterResourceBase
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSControlledPositionMarkerResource> MarkerResource;
    }

    [RTTI.Serializable(0x7ADCC6D3956D9184, GameType.DS)]
    public class DSControlledPositionMarkerResource : DSControlledMarkerResourceBase
    {
        [RTTI.Member(10, 0x38, "Settings")] public Ref<DSLocator> Locator;
        [RTTI.Member(11, 0x40, "Settings")] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(12, 0x48, "Settings")] public bool IsArea;
        [RTTI.Member(13, 0x4C, "Settings")] public float Radius;
        [RTTI.Member(15, 0x50, "Area")] public EDSArea DSArea;
    }

    [RTTI.Serializable(0x4BDB50BC4C30DED7, GameType.DS)]
    public class DSCopyMeshPaintFromArtistComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA7A397F7938BBBE, GameType.DS)]
    public class DSCopyMeshPaintFromArtistComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xAC61F7712E9803C8, GameType.DS)]
    public class DSCopyMeshPaintFromHiggsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF17931ABDCF39A98, GameType.DS)]
    public class DSCopyMeshPaintFromHiggsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public bool IsTargetBBPod;
    }

    [RTTI.Serializable(0x1F1B2C2346155688, GameType.DS)]
    public class DSCopyMeshPaintFromPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3A2B62B79179A7E9, GameType.DS)]
    public class DSCopyMeshPaintFromPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public bool IsNeedPaintCopy;
    }

    [RTTI.Serializable(0x3CE777759131F02C, GameType.DS)]
    public class DSCountDynamicTimer : DSCountTimerBase
    {
    }

    [RTTI.Serializable(0x908D5A7395B5CD6A, GameType.DS)]
    public class DSCountTimer : DSCountTimerBase
    {
        [RTTI.Member(5, 0x44)] public float TimeSeconds;
        [RTTI.Member(6, 0x48)] public Array<float> SplitEventTriggerTimes;
    }

    [RTTI.Serializable(0xB4FA59024D4F091C, GameType.DS)]
    public class DSCountTimerBase : CoreObject
    {
        [RTTI.Member(2, 0x30)] public Ref<DSStringHashResource> HashResource;
        [RTTI.Member(3, 0x38)] public EDSCountAttrFlag AttrFlag;
        [RTTI.Member(4, 0x3C)] public EDSCountTimeType CountTimeType;
    }

    [RTTI.Serializable(0xB79625D9689B53DD, GameType.DS)]
    public class DSCountTimerBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x88BD8580C74AD200, GameType.DS)]
    public class DSCountTimerManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x33E0063E69AFA818, GameType.DS)]
    public class DSCountTimerSave : RTTIObject
    {
        [RTTI.Member(1, 0x10, "StateSaving", true)] public EDSCountTimerState State;
        [RTTI.Member(2, 0x14, "StateSaving", true)] public float ElapsedTime;
    }

    [RTTI.Serializable(0x1944741B6EDD045C, GameType.DS)]
    public class DSCountTimerSaveD : RTTIObject
    {
        [RTTI.Member(1, 0x10, "StateSaving", true)] public EDSCountTimerState State;
        [RTTI.Member(2, 0x18, "StateSaving", true)] public double ElapsedTime;
    }

    [RTTI.Serializable(0x8772C99FDB32A1A3, GameType.DS)]
    public class DSCoverAndAnimModelComponent : IDSCoverAndAnimModelComponentBase
    {
    }

    [RTTI.Serializable(0xECB14E345F0180DC, GameType.DS)]
    public class DSCoverAndAnimModelComponentRep : IDSCoverAndAnimModelComponentRepBase
    {
    }

    [RTTI.Serializable(0x78BE5BDD162A0C54, GameType.DS)]
    public class DSCoverAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x590CA2C55198EA9B, GameType.DS)]
    public class DSCoverAnimationEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(13, 0x50, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(16, 0x58, "Logic")] public Ref<CurveResource> BlendCurveResource;
        [RTTI.Member(14, 0x60, "Logic")] public EDSCoverAndAnimModelPartType ModelRegion;
        [RTTI.Member(15, 0x64, "Logic")] public float BlendInSec;
        [RTTI.Member(17, 0x68, "Logic")] public bool AutoScaleCurve;
    }

    [RTTI.Serializable(0x4B070A2BBF94067E, GameType.DS)]
    public class DSCoverGeneratingEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBB9DA0DE3FD2D278, GameType.DS)]
    public class DSCoverGeneratingEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "CoverGeneratingEntityComponent")] public float CoverSearchRadius;
    }

    [RTTI.Serializable(0x34842AF38A984772, GameType.DS)]
    public class DSCoverModelComponent : IDSCoverModelComponentBase
    {
    }

    [RTTI.Serializable(0xDC8CEFAD6160CBAD, GameType.DS)]
    public class DSCoverModelComponentRep : DSCoverModelComponentRepBase
    {
    }

    [RTTI.Serializable(0x1C99BBB5101F8A85, GameType.DS)]
    public class DSCoverModelComponentRepBase : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB1D37C8F8304785B, GameType.DS)]
    public class DSCoverModelPreComputedResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<SkinnedMeshBoneBoundingBoxes> BoundingBox;
        [RTTI.Member(4, 0x28, "General")] public Ref<Skeleton> RepresentationSkeleton;
    }

    [RTTI.Serializable(0x54CA287B0CD59544, GameType.DS)]
    public class DSCoverToOtherEntityEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x93B5A8F8E5310579, GameType.DS)]
    public class DSCoverToOtherEntityEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> DstEntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<EntityActorResource> SrcEntityActorResource;
        [RTTI.Member(10, 0x40, "Logic")] public Array<EDSCoverAndAnimModelPartType> CoverAndAnimModelRegionList;
    }

    [RTTI.Serializable(0x65423532D2213059, GameType.DS)]
    public class DSCoworkerBridgesResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> DescriptionText;
    }

    [RTTI.Serializable(0x4C019AE902BC686F, GameType.DS)]
    public class DSCraterEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x302F03B6D5721C3C, GameType.DS)]
    public class DSCraterEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ParticleSystemResource> StrandCableEffectParticleSystem;
        [RTTI.Member(3, 0x28)] public Ref<ParticleSystemResource> AreaEffectParticleResource;
        [RTTI.Member(4, 0x30)] public Ref<ParticleSystemResource> FarAreaEffectParticleResource;
        [RTTI.Member(5, 0x38)] public Ref<ParticleSystemResource> FarAreaEffect2ParticleResource;
        [RTTI.Member(6, 0x40)] public Ref<PhysicsCollisionResource> BlockCollision;
        [RTTI.Member(7, 0x48)] public float NearAreaEffectRange;
        [RTTI.Member(8, 0x4C)] public float FarAreaEffectRange;
        [RTTI.Member(9, 0x50)] public float NearAreaEffectBaseRange;
        [RTTI.Member(10, 0x54)] public float FarAreaEffectBaseRange;
        [RTTI.Member(11, 0x58)] public Ref<SHLightVolumeResource> SHLightVolumeResource;
        [RTTI.Member(12, 0x60)] public Array<Ref<SoundResource>> SoundResources;
    }

    [RTTI.Serializable(0xF4A064FFD13C97F7, GameType.DS)]
    public class DSCreateMissionBaggageNodeCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x4265E6F28FED956F, GameType.DS)]
    public class DSCreateMissionBaggageNodeCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4D4994A99390F50F, GameType.DS)]
    public class DSCryptobiosisEntity : Entity
    {
    }

    [RTTI.Serializable(0xA3DB288F0C30FC44, GameType.DS)]
    public class DSCryptobiosisEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0xE60FD9B7C08D1E88, GameType.DS)]
    public class DSCryptobiosisGeroImpactEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x804C5B6EA27A2822, GameType.DS)]
    public class DSCryptobiosisGeroImpactEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "General")] public Ref<LocatorResource> PositionLocator;
        [RTTI.Member(9, 0x38, "General")] public bool IsStrong;
    }

    [RTTI.Serializable(0x8AFE5576C8E5D792, GameType.DS)]
    public class DSCrystalEntity : Entity
    {
    }

    [RTTI.Serializable(0x33F05F5A6AD4DB94, GameType.DS)]
    public class DSCrystalEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0x18655B83D07E0674, GameType.DS)]
    public class DSCurvedInstanceDecal : DSUserableGeneratedMesh
    {
    }

    [RTTI.Serializable(0xE9F73DDDA9D0BA11, GameType.DS)]
    public class DSCurvedInstancingRenderEffectListResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSCurvedInstancingRenderEffectResource>> Level1Resources;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSCurvedInstancingRenderEffectResource>> Level2Resources;
        [RTTI.Member(4, 0x40)] public Array<Ref<DSCurvedInstancingRenderEffectResource>> Level3Resources;
        [RTTI.Member(5, 0x50)] public Array<Ref<DecalResource>> DecalResources;
        [RTTI.Member(6, 0x60)] public Array<Ref<DecalResource>> PlayerDecalResources;
    }

    [RTTI.Serializable(0x8EF718C0A2A81B45, GameType.DS)]
    public class DSCurvedInstancingRenderEffectResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(3, 0x28)] public float BaseWidth;
        [RTTI.Member(4, 0x2C)] public float BaseLength;
        [RTTI.Member(5, 0x30)] public float RaiseOffset;
        [RTTI.Member(6, 0x34)] public int DivU;
        [RTTI.Member(7, 0x38)] public int DivV;
        [RTTI.Member(8, 0x3C)] public bool IsContinus;
        [RTTI.Member(9, 0x40)] public float mAssumedRoadWidth;
        [RTTI.Member(10, 0x44)] public float CurveVariationAmountLowerLimit;
        [RTTI.Member(11, 0x48)] public float CurveVariationAmountUpperLimit;
        [RTTI.Member(12, 0x4C)] public float StickingRateOfLowerLimit;
        [RTTI.Member(13, 0x50)] public float StickingRateOfUpperLimit;
    }

    [RTTI.Serializable(0xE912E02B6729AD63, GameType.DS)]
    public class DSCustomSoundComponent : SoundComponent
    {
    }

    [RTTI.Serializable(0xA78BA16EEF02F4E1, GameType.DS)]
    public class DSCustomSoundComponentRep : SoundComponentRep
    {
    }

    [RTTI.Serializable(0x32647A838553B7F6, GameType.DS)]
    public class DSCustomSoundComponentResource : SoundComponentResource
    {
        [RTTI.Member(5, 0x40, "EventData")] public Array<DSCustomSoundEventInfo> CustomSoundEventInfo;
        [RTTI.Member(6, 0x50, "EventData")] public Array<DSCustomSoundEventInfo> CustomSoundEventVoiceInfo;
        [RTTI.Member(7, 0x60, "EventData")] public Array<DSCustomSoundMessageEventInfo> CustomImpactEventInfo;
    }

    [RTTI.Serializable(0x152E58F2538AFA9D, GameType.DS)]
    public class DSCustomSoundEventInfo
    {
        [RTTI.Member(1, 0x8, "Logic")] public int EventIndex;
        [RTTI.Member(2, 0xC, "Logic")] public int EventIndexEnd;
        [RTTI.Member(3, 0x10, "Logic")] public float TimeToIgnoreEventsAfterPlay;
        [RTTI.Member(4, 0x14, "Logic")] public bool EventIndexEndIsMixCheck;
        [RTTI.Member(5, 0x15, "Logic")] public bool IsVoice;
    }

    [RTTI.Serializable(0xDC5FE02457488B6A, GameType.DS)]
    public class DSCustomSoundMessageEventInfo
    {
        [RTTI.Member(1, 0x8, "Logic")] public int EventIndex;
        [RTTI.Member(2, 0xC, "Logic")] public int EventIndexEnd;
        [RTTI.Member(3, 0x10, "Logic")] public EDSCustomSoundMessageEventType MessageType;
    }

    [RTTI.Serializable(0xE84F54828F34FFDE, GameType.DS)]
    public class DSCustomVolume : WorldNode
    {
        [RTTI.BaseClass(0x60)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(9, 0xA0)] public int Priority;
    }

    [RTTI.Serializable(0xEB316DE94E72CD6B, GameType.DS)]
    public class DSCycleAndStorageSettingsOfRawMaterialResource : Resource
    {
        [RTTI.Member(3, 0x20, "Crystal")] public uint32 Crystal_SettingOfCycle;
        [RTTI.Member(14, 0x24, "Resin")] public uint32 Resin_SettingOfCycle;
        [RTTI.Member(25, 0x28, "Metal")] public uint32 Metal_SettingOfCycle;
        [RTTI.Member(36, 0x2C, "Ceramic")] public uint32 Ceramic_SettingOfCycle;
        [RTTI.Member(47, 0x30, "ChemicalSubstance")] public uint32 ChemicalSubstance_SettingOfCycle;
        [RTTI.Member(58, 0x34, "SpecialAlloy")] public uint32 SpecialAlloy_SettingOfCycle;
        [RTTI.Member(4, 0x38, "Crystal")] public uint32 Crystal_InitialAmount;
        [RTTI.Member(15, 0x3C, "Resin")] public uint32 Resin_InitialAmount;
        [RTTI.Member(26, 0x40, "Metal")] public uint32 Metal_InitialAmount;
        [RTTI.Member(37, 0x44, "Ceramic")] public uint32 Ceramic_InitialAmount;
        [RTTI.Member(48, 0x48, "ChemicalSubstance")] public uint32 ChemicalSubstance_InitialAmount;
        [RTTI.Member(59, 0x4C, "SpecialAlloy")] public uint32 SpecialAlloy_InitialAmount;
        [RTTI.Member(5, 0x50, "Crystal")] public uint32 Crystal_BaseAmoutOfProduction;
        [RTTI.Member(16, 0x54, "Resin")] public uint32 Resin_BaseAmoutOfProduction;
        [RTTI.Member(27, 0x58, "Metal")] public uint32 Metal_BaseAmoutOfProduction;
        [RTTI.Member(38, 0x5C, "Ceramic")] public uint32 Ceramic_BaseAmoutOfProduction;
        [RTTI.Member(49, 0x60, "ChemicalSubstance")] public uint32 ChemicalSubstance_BaseAmoutOfProduction;
        [RTTI.Member(60, 0x64, "SpecialAlloy")] public uint32 SpecialAlloy_BaseAmoutOfProduction;
        [RTTI.Member(7, 0x68, "Crystal")] public uint32 Crystal_AvailableAmountLV0;
        [RTTI.Member(8, 0x6C, "Crystal")] public uint32 Crystal_AvailableAmountLV1;
        [RTTI.Member(9, 0x70, "Crystal")] public uint32 Crystal_AvailableAmountLV2;
        [RTTI.Member(10, 0x74, "Crystal")] public uint32 Crystal_AvailableAmountLV3;
        [RTTI.Member(11, 0x78, "Crystal")] public uint32 Crystal_AvailableAmountLV4;
        [RTTI.Member(12, 0x7C, "Crystal")] public uint32 Crystal_AvailableAmountLV5;
        [RTTI.Member(18, 0x80, "Resin")] public uint32 Resin_AvailableAmountLV0;
        [RTTI.Member(19, 0x84, "Resin")] public uint32 Resin_AvailableAmountLV1;
        [RTTI.Member(20, 0x88, "Resin")] public uint32 Resin_AvailableAmountLV2;
        [RTTI.Member(21, 0x8C, "Resin")] public uint32 Resin_AvailableAmountLV3;
        [RTTI.Member(22, 0x90, "Resin")] public uint32 Resin_AvailableAmountLV4;
        [RTTI.Member(23, 0x94, "Resin")] public uint32 Resin_AvailableAmountLV5;
        [RTTI.Member(29, 0x98, "Metal")] public uint32 Metal_AvailableAmountLV0;
        [RTTI.Member(30, 0x9C, "Metal")] public uint32 Metal_AvailableAmountLV1;
        [RTTI.Member(31, 0xA0, "Metal")] public uint32 Metal_AvailableAmountLV2;
        [RTTI.Member(32, 0xA4, "Metal")] public uint32 Metal_AvailableAmountLV3;
        [RTTI.Member(33, 0xA8, "Metal")] public uint32 Metal_AvailableAmountLV4;
        [RTTI.Member(34, 0xAC, "Metal")] public uint32 Metal_AvailableAmountLV5;
        [RTTI.Member(40, 0xB0, "Ceramic")] public uint32 Ceramic_AvailableAmountLV0;
        [RTTI.Member(41, 0xB4, "Ceramic")] public uint32 Ceramic_AvailableAmountLV1;
        [RTTI.Member(42, 0xB8, "Ceramic")] public uint32 Ceramic_AvailableAmountLV2;
        [RTTI.Member(43, 0xBC, "Ceramic")] public uint32 Ceramic_AvailableAmountLV3;
        [RTTI.Member(44, 0xC0, "Ceramic")] public uint32 Ceramic_AvailableAmountLV4;
        [RTTI.Member(45, 0xC4, "Ceramic")] public uint32 Ceramic_AvailableAmountLV5;
        [RTTI.Member(51, 0xC8, "ChemicalSubstance")] public uint32 ChemicalSubstance_AvailableAmountLV0;
        [RTTI.Member(52, 0xCC, "ChemicalSubstance")] public uint32 ChemicalSubstance_AvailableAmountLV1;
        [RTTI.Member(53, 0xD0, "ChemicalSubstance")] public uint32 ChemicalSubstance_AvailableAmountLV2;
        [RTTI.Member(54, 0xD4, "ChemicalSubstance")] public uint32 ChemicalSubstance_AvailableAmountLV3;
        [RTTI.Member(55, 0xD8, "ChemicalSubstance")] public uint32 ChemicalSubstance_AvailableAmountLV4;
        [RTTI.Member(56, 0xDC, "ChemicalSubstance")] public uint32 ChemicalSubstance_AvailableAmountLV5;
        [RTTI.Member(62, 0xE0, "SpecialAlloy")] public uint32 SpecialAlloy_AvailableAmountLV0;
        [RTTI.Member(63, 0xE4, "SpecialAlloy")] public uint32 SpecialAlloy_AvailableAmountLV1;
        [RTTI.Member(64, 0xE8, "SpecialAlloy")] public uint32 SpecialAlloy_AvailableAmountLV2;
        [RTTI.Member(65, 0xEC, "SpecialAlloy")] public uint32 SpecialAlloy_AvailableAmountLV3;
        [RTTI.Member(66, 0xF0, "SpecialAlloy")] public uint32 SpecialAlloy_AvailableAmountLV4;
        [RTTI.Member(67, 0xF4, "SpecialAlloy")] public uint32 SpecialAlloy_AvailableAmountLV5;
        [RTTI.Member(6, 0xF8, "Crystal")] public uint64 Crystal_MaxAmoutOfStorage;
        [RTTI.Member(17, 0x100, "Resin")] public uint64 Resin_MaxAmoutOfStorage;
        [RTTI.Member(28, 0x108, "Metal")] public uint64 Metal_MaxAmoutOfStorage;
        [RTTI.Member(39, 0x110, "Ceramic")] public uint64 Ceramic_MaxAmoutOfStorage;
        [RTTI.Member(50, 0x118, "ChemicalSubstance")] public uint64 ChemicalSubstance_MaxAmoutOfStorage;
        [RTTI.Member(61, 0x120, "SpecialAlloy")] public uint64 SpecialAlloy_MaxAmoutOfStorage;
    }

    [RTTI.Serializable(0x40907D4942E800FD, GameType.DS)]
    public class DSDBBAliveHumanComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFE66E822C56CE355, GameType.DS)]
    public class DSDBBAliveHumanComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<VoiceComponentResource> VoiceComponentResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<DSDBBAliveHumanConfig> Config;
        [RTTI.Member(9, 0x30, "Voice")] public Array<Ref<DSDBBVoiceInfoResource>> VoiceInfos;
        [RTTI.Member(10, 0x40, "Voice")] public Array<Ref<DSDBBSentenceContainerResource>> SentenceResourceContainers;
        [RTTI.Member(5, 0x50, "Logic")] public float StumbleNeedTimeForNotLongVoice;
        [RTTI.Member(6, 0x54, "Logic")] public float StumbleNeedTimeForLongVoice;
        [RTTI.Member(7, 0x58, "Logic")] public float SleepNeedTime;
    }

    [RTTI.Serializable(0x747D337F354494BE, GameType.DS)]
    public class DSDBBAliveHumanConfig : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float UsualVoiceNeedTimeWalk;
        [RTTI.Member(4, 0x24, "Logic")] public float UsualVoiceNeedTimeRun;
        [RTTI.Member(5, 0x28, "Logic")] public float UsualVoiceRandomTime;
        [RTTI.Member(6, 0x2C, "Logic")] public float MaxBlendRateForUsualVoice;
        [RTTI.Member(7, 0x30, "Logic")] public float BlendRateEfficient;
        [RTTI.Member(8, 0x34, "Logic")] public float CliffDownAndDangerSlopeDownMoveSpeed;
        [RTTI.Member(9, 0x38, "Logic")] public float LongVoiceDelayTime;
        [RTTI.Member(10, 0x3C, "Logic")] public float LongVoiceDelayTimeForVehicle;
        [RTTI.Member(11, 0x40, "Logic")] public float EnableFallVoiceHeight;
        [RTTI.Member(12, 0x44, "Logic")] public float FallVoiceStartHeight;
        [RTTI.Member(13, 0x48, "Logic")] public float FallAfterVoiceTime;
    }

    [RTTI.Serializable(0x21368A512D581D41, GameType.DS)]
    public class DSDBBAliveHumanFacialComponent : DSFacialRigManagerComponent
    {
    }

    [RTTI.Serializable(0xC700112ED32A2138, GameType.DS)]
    public class DSDBBAliveHumanFacialComponentResource : DSFacialRigManagerComponentResource
    {
    }

    [RTTI.Serializable(0x5E0EFD52AFE116D6, GameType.DS)]
    public class DSDBBAliveHumanOnsenComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD76690F46767FCFF, GameType.DS)]
    public class DSDBBAliveHumanOnsenComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<SentenceResource>> UsualSentenceResources;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<SentenceResource>> EnterSentenceResources;
        [RTTI.Member(5, 0x40, "Logic")] public Array<Ref<SentenceResource>> MusicSentenceResources;
        [RTTI.Member(6, 0x50, "Logic")] public bool IsMama;
    }

    [RTTI.Serializable(0x54CE7F59FE4B98C6, GameType.DS)]
    public class DSDBBFoodWomanComponent : DSDBBAliveHumanComponent
    {
    }

    [RTTI.Serializable(0x4E6664A08ADDC91, GameType.DS)]
    public class DSDBBFoodWomanComponentResource : DSDBBAliveHumanComponentResource
    {
        [RTTI.Member(12, 0x60, "Logic")] public Ref<DSDBBFoodWomanFacialComponentResource> FacialManagerResource;
        [RTTI.Member(15, 0x68, "Voice")] public Ref<DSDBBSentenceContainerResource> LongSentenceResources;
        [RTTI.Member(13, 0x70, "Logic")] public Ref<SoundResource> ChiralArtistMusic;
    }

    [RTTI.Serializable(0xE3565C2B76CC85C5, GameType.DS)]
    public class DSDBBFoodWomanFacialComponent : DSDBBAliveHumanFacialComponent
    {
    }

    [RTTI.Serializable(0xCDDD0A3020B5B384, GameType.DS)]
    public class DSDBBFoodWomanFacialComponentResource : DSDBBAliveHumanFacialComponentResource
    {
    }

    [RTTI.Serializable(0xABE3B35676FD4A0A, GameType.DS)]
    public class DSDBBMamaComponent : DSDBBAliveHumanComponent
    {
    }

    [RTTI.Serializable(0x1588C23BA314A92, GameType.DS)]
    public class DSDBBMamaComponentResource : DSDBBAliveHumanComponentResource
    {
        [RTTI.Member(12, 0x60, "Logic")] public Ref<DSDBBMamaFacialComponentResource> FacialManagerResource;
        [RTTI.Member(17, 0x68, "Voice")] public Array<Ref<DSDBBSentenceContainerResource>> LongSentenceResourcesContainers;
        [RTTI.Member(13, 0x78, "Logic")] public float NoTalkingVoiceNeedTime;
        [RTTI.Member(14, 0x7C, "Logic")] public float NoTalkingBreathEfficient;
        [RTTI.Member(15, 0x80, "Logic")] public float NoTalkingIdleEfficient;
    }

    [RTTI.Serializable(0xA19D7DB24C24EF76, GameType.DS)]
    public class DSDBBMamaFacialComponent : DSDBBAliveHumanFacialComponent
    {
    }

    [RTTI.Serializable(0xBAE38A9DE5056260, GameType.DS)]
    public class DSDBBMamaFacialComponentResource : DSDBBAliveHumanFacialComponentResource
    {
    }

    [RTTI.Serializable(0x531CB6F8DA980DBE, GameType.DS)]
    public class DSDBBMamaPaintEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x45F6740932AF28ED, GameType.DS)]
    public class DSDBBMamaPaintEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> BaggageMamaEntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<EntityActorResource> OpenMamaEntityActorResource;
    }

    [RTTI.Serializable(0x338FF99415C01821, GameType.DS)]
    public class DSDBBPaintComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA65BB4342B4DB512, GameType.DS)]
    public class DSDBBPaintComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xBCBB96B7F6960D27, GameType.DS)]
    public class DSDBBRagdollComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDC79A6DC8186957F, GameType.DS)]
    public class DSDBBRagdollComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PhysicsDBBRagdollResource> RagdollResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(7, 0x30, "Logic")] public Ref<SkeletonAnimationResource> RagdollReferencePose;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<ParticleSystemResource> WaterSplashResource;
        [RTTI.Member(5, 0x40, "Logic")] public float StressThreshold;
        [RTTI.Member(6, 0x44, "Logic")] public float ShakeFactor;
        [RTTI.Member(15, 0x48, "Ragdoll")] public Array<PartData> PartDatas;
        [RTTI.Member(16, 0x58, "Ragdoll")] public Array<JointData> JointDatas;
        [RTTI.Member(18, 0x68, "Attach")] public Array<String> AttachableHelpers;
        [RTTI.Member(12, 0x78, "Ragdoll")] public int FixedPart;
        [RTTI.Member(13, 0x7C, "Ragdoll")] public int ForceApplyPart;
        [RTTI.Member(14, 0x80, "Ragdoll")] public Vec3 TestForce;
        [RTTI.Member(10, 0x90, "Shake")] public float HeadMaxUpForMama;
    }

    [RTTI.Serializable(0x20741215BB529AA8, GameType.DS)]
    public class DSDBBSentenceContainerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<SentenceResource>> SentenceResources;
    }

    [RTTI.Serializable(0x8571CA76DF3994F0, GameType.DS)]
    public class DSDBBVoiceInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EDSDBBVoicePriority Priority;
        [RTTI.Member(4, 0x24, "Logic")] public bool IsDeadLongVoice;
        [RTTI.Member(5, 0x25, "Logic")] public bool IsLongVoice;
        [RTTI.Member(6, 0x26, "Logic")] public bool IsEnableBattle;
        [RTTI.Member(7, 0x27, "Logic")] public bool IsEnableReplay;
        [RTTI.Member(8, 0x28, "Logic")] public bool IsEnableDying;
        [RTTI.Member(9, 0x29, "Logic")] public bool IsEnableLifeDanger;
        [RTTI.Member(10, 0x2A, "Logic")] public bool IsEnableBreathStopping;
        [RTTI.Member(11, 0x2B, "Logic")] public bool IsCannotVoiceWhileRealtimeRadio;
        [RTTI.Member(12, 0x2C, "Logic")] public bool IsEnableGameOver;
    }

    [RTTI.Serializable(0x724755B85A927E, GameType.DS)]
    public class DSDLCProfile
    {
        [RTTI.Member(0, 0x8, true)] public uint32 Version;
        [RTTI.Member(1, 0x10, true)] public Array<uint32> AvailableHashes;
        [RTTI.Member(2, 0x20, true)] public bool HasBeenStarted;
    }

    [RTTI.Serializable(0xBE8DA45D1832DC37, GameType.DS)]
    public class DSDataLibraryBasicNode : RTTIObject
    {
    }

    [RTTI.Serializable(0x542244AE153DFE, GameType.DS)]
    public class DSDataLibraryBasicNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1A318DC38A65CE3A, GameType.DS)]
    public class DSDataLibrarySystem : RTTIObject
    {
    }

    [RTTI.Serializable(0x5211947D295104B1, GameType.DS)]
    public class DSDataLibrarySystemResource : RTTIRefObject
    {
        [RTTI.Member(6, 0x20, "Mail")] public Array<Ref<DSMailResource>> MailResources;
        [RTTI.Member(3, 0x30, "Mail")] public uint32 ReceiveDelaySeconds;
        [RTTI.Member(5, 0x38, "Mail")] public int64 SecondsNotReceive;
        [RTTI.Member(4, 0x40, "Mail")] public uint32 MaxSimulReceiveNum;
        [RTTI.Member(8, 0x48, "TipsData")] public Array<Ref<DSTelopTipsResource>> AllTelopTips;
        [RTTI.Member(9, 0x58, "TipsData")] public Array<Ref<DSLoadingTipsResource>> AllLoadingTips;
        [RTTI.Member(10, 0x68, "TipsData")] public Array<Ref<DSInterviewResource2>> AllInterview;
        [RTTI.Member(12, 0x78, "Epigraph")] public Array<Ref<DSEpigraphResource>> AllEpigraph;
        [RTTI.Member(14, 0x88, "MusicPlayer")] public Ref<DSMusicPlayerSystemResource> MusicPlayerSystemResource;
        [RTTI.Member(16, 0x90, "Trophy")] public Ref<TrophyResource> TrophyForReadMails;
        [RTTI.Member(17, 0x98, "Trophy")] public int TrophyForReadMailCount;
        [RTTI.Member(18, 0xA0, "Trophy")] public Ref<TrophyResource> TrophyForRead100Interviews;
        [RTTI.Member(19, 0xA8, "Trophy")] public Ref<TrophyResource> TrophyForMusicPlayer;
    }

    [RTTI.Serializable(0xA001B784D010716, GameType.DS)]
    public class DSDataLibrarySystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB468426399DA0A16, GameType.DS)]
    public class DSDebugEntryCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x1C56B1CE03AD579E, GameType.DS)]
    public class DSDebugEntryCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7ECA5F74C4E9F514, GameType.DS)]
    public class DSDebugEntryGraphContainerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSDebugEntryGraphResource>> EntryGraphs;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSDebugEntryGraphGroupResource>> EntryGraphGroups;
        [RTTI.Member(4, 0x40)] public Ref<GraphProgramResource> RestructGraph;
    }

    [RTTI.Serializable(0x34BC8882AA41A8F8, GameType.DS)]
    public class DSDebugEntryGraphGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "EntryGraphGroupInfo")] public Array<Ref<DSDebugEntryGraphResource>> EntryGraphs;
        [RTTI.Member(4, 0x30, "EntryGraphGroupInfo")] public Array<Ref<DSDebugEntryGraphGroupResource>> EntryGraphGroups;
        [RTTI.Member(5, 0x40, "EntryGraphGroupInfo")] public String Path;
    }

    [RTTI.Serializable(0xE38FA2A87D321AEE, GameType.DS)]
    public class DSDebugEntryGraphResource : Resource
    {
        [RTTI.Member(3, 0x20, "EntryGraphInfo")] public Ref<GraphProgramResource> PresetGraph;
        [RTTI.Member(6, 0x28, "EntryGraphInfo")] public Ref<DSDebugEntryGraphResource> PreExecutedGraph;
        [RTTI.Member(4, 0x30, "EntryGraphInfo")] public EDSArea ExecutionArea;
        [RTTI.Member(5, 0x38, "EntryGraphInfo")] public String Path;
        [RTTI.Member(7, 0x40, "EntryGraphInfo")] public bool Fixed;
        [RTTI.Member(8, 0x44, "EntryGraphInfo")] public uint32 Hash;
    }

    [RTTI.Serializable(0xDE645408E4110B3D, GameType.DS)]
    public class DSDebugNodeGraphGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6C3A997993C84D8A, GameType.DS)]
    public class DSDebugPrintString : RTTIObject
    {
    }

    [RTTI.Serializable(0x77B318E85B262B5D, GameType.DS)]
    public class DSDebugPrintStringSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA46B27E1B204CAFE, GameType.DS)]
    public class DSDeliveredBaggageArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xA79A79268FCF8B27, GameType.DS)]
    public class DSDeliveredBaggageArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x21CA58786FFAADBB, GameType.DS)]
    public class DSDeliveredMemoryChipArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x1801207E2CC6C896, GameType.DS)]
    public class DSDeliveredMemoryChipArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEB21301632427A08, GameType.DS)]
    public class DSDeliveryBaggageGeneratorForFriendlyMuleResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSDeliveryPointInfoResource> Destination;
        [RTTI.Member(3, 0x28)] public Ref<DSDeliveryPointInfoResource> StartingPoint;
        [RTTI.Member(4, 0x30)] public Array<Ref<DSGameBaggageListItem>> Baggages;
    }

    [RTTI.Serializable(0xE77534FD346F252A, GameType.DS)]
    public class DSDeliveryManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x61E10C775425120F, GameType.DS)]
    public class DSDeliveryManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEA25407AF1215DA5, GameType.DS)]
    public class DSDeliveryMissionResource : DSMissionResourceBase
    {
        [RTTI.Member(14, 0xA8, "OrderInfo")] public Ref<DSDeliveryPointInfoResource> OrderPoint;
        [RTTI.Member(15, 0xB0, "OrderInfo")] public Array<Ref<DSDeliveryPointInfoResource>> DeliveryPoints;
        [RTTI.Member(16, 0xC0, "OrderInfo")] public Array<Ref<DSMissionBaggageResource>> BaggageResources;
        [RTTI.Member(17, 0x128, "OrderInfo")] public Ref<DSMissionResurrectInfo> ResurrectTimeInfo;
        [RTTI.Member(19, 0x130, "ExtraOption")] public bool IsIgnoreQpidOpenCheck;
        [RTTI.Member(20, 0x131, "ExtraOption")] public uint8 ExtensionDescriptionTextType;
    }

    [RTTI.Serializable(0x3BDEC93DD8D1B83D, GameType.DS)]
    public class DSDeliveryPointGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x13644A7A0530CA6E, GameType.DS)]
    public class DSDeliveryPointGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xF22F649BC76E54CD, GameType.DS)]
    public class DSDeliveryPointGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0x62B9F21FFE875F33, GameType.DS)]
    public class DSDeliveryPointInfoCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x96726F72DF4F2470, GameType.DS)]
    public class DSDeliveryPointInfoCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x96B14836C5B33B0B, GameType.DS)]
    public class DSDeliveryPointInfoListForRandomLostBaggage : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSDeliveryPointInfoResource>> Candidates;
    }

    [RTTI.Serializable(0xFCE38FB6DEC1D8A2, GameType.DS)]
    public class DSDeliveryPointInfoResource : DSMissionStaticAbstractPointResource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> DescriptionText;
        [RTTI.Member(4, 0x28)] public Ref<DSDeliveryPointInfoResource> ParentDeliveryPoint;
        [RTTI.Member(5, 0x30)] public Ref<DSHouseholdInfoResource> HouseHold;
        [RTTI.Member(6, 0x38)] public Ref<DSTerminalGraphResource> TerminalOperationGraph;
        [RTTI.Member(7, 0x40)] public Ref<DSPrivateRoomGraphResource> PrivateRoomOperationGraph;
        [RTTI.Member(8, 0x48)] public Ref<DSDeliveryPointLocator> Locator;
        [RTTI.Member(13, 0x50, "Facts")] public Array<Ref<BooleanFact>> InsideSecurityFacts;
        [RTTI.Member(20, 0x68, "Hidden")] public EDSArea DSArea;
        [RTTI.Member(19, 0x6A, "Hidden")] public EDSConstructionPointType DeliveryPointType;
        [RTTI.Member(21, 0x6C, "Hidden")] public uint32 DeliveryPointInfoFlag;
        [RTTI.Member(18, 0x70, "Hidden")] public int32 DeliveryPointLocatorId;
        [RTTI.Member(9, 0x74)] public uint32 Traffic;
        [RTTI.Member(11, 0x78)] public uint32 OrderInList;
        [RTTI.Member(17, 0x80, "Hidden")] public WorldTransform WorldTransform;
        [RTTI.Member(10, 0xC0)] public Ref<DSUIConstructionPointResource> UIResource;
        [RTTI.Member(3, 0xC8)] public Ref<DSRewritableDeliveryPointInfoText> ExtendDescriptionText;
        [RTTI.Member(15, 0xD0, "SpecialReports")] public Ref<DSMissionSpecialReportResource> SpecialReportOnPlace;
    }

    [RTTI.Serializable(0xED11972E40B77F19, GameType.DS)]
    public class DSDeliveryPointInfoResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD1B8A7819861CE18, GameType.DS)]
    public class DSDeliveryPointLocator : DSLocator
    {
        [RTTI.Member(8, 0x70)] public int32 Id;
        [RTTI.Member(6, 0x74)] public EDSConstructionPointType Type;
        [RTTI.Member(7, 0x76)] public EDSArea Area;
        [RTTI.Member(9, 0x78)] public uint Level;
        [RTTI.Member(12, 0x80)] public Ref<EntityResource> OverrideEntity;
        [RTTI.Member(13, 0x88)] public Array<DSDeliveryPointLocatorBaggageInfo> DefaultBaggages;
        [RTTI.Member(20, 0x98, "DefaultMaterial")] public uint32 Crystal;
        [RTTI.Member(21, 0x9C, "DefaultMaterial")] public uint32 Resin;
        [RTTI.Member(22, 0xA0, "DefaultMaterial")] public uint32 Metal;
        [RTTI.Member(23, 0xA4, "DefaultMaterial")] public uint32 Ceramic;
        [RTTI.Member(24, 0xA8, "DefaultMaterial")] public uint32 ChemicalSubstance;
        [RTTI.Member(25, 0xAC, "DefaultMaterial")] public uint32 SpecialAlloy;
        [RTTI.Member(10, 0xB0)] public bool InitInactive;
        [RTTI.Member(11, 0xB1)] public bool UseOperationDemo;
        [RTTI.Member(14, 0xB4)] public uint32 AdditionalInfo0;
        [RTTI.Member(15, 0xB8)] public uint32 AdditionalInfo1;
        [RTTI.Member(16, 0xBC)] public uint32 AdditionalInfo2;
        [RTTI.Member(17, 0xC0)] public uint32 AdditionalInfo3;
        [RTTI.Member(18, 0xC4)] public uint32 AdditionalInfo4;
    }

    [RTTI.Serializable(0xFC1D27E91AA25F78, GameType.DS)]
    public class DSDeliveryPointLocatorBaggageInfo : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public uint32 BaggageListItemNameHash;
        [RTTI.Member(1, 0xC)] public EDSConstructionPointSlotType SlotType;
    }

    [RTTI.Serializable(0x667691A612EFD5A0, GameType.DS)]
    public class DSDeliverySurveyCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x9E532799E4C05B61, GameType.DS)]
    public class DSDeliverySurveyCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3E5F32BA0796AEA5, GameType.DS)]
    public class DSDemensComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2FE69ADCDF5EE98E, GameType.DS)]
    public class DSDemensComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x557105C9311E5BBB, GameType.DS)]
    public class DSDispResultGraphServiceFromSequenceEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0xA63D8E4B78E9647, GameType.DS)]
    public class DSDispResultGraphServiceFromSequenceEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public EDSMessageFromResultGraphService Message;
    }

    [RTTI.Serializable(0xA815E0691B528288, GameType.DS)]
    public class DSDispResultGraphServiceFromSequenceEventResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEB226D2EA044B39E, GameType.DS)]
    public class DSDiveBomberSettings : DSBombDropperSettings
    {
        [RTTI.Member(13, 0x48, "DiveBombSettings")] public float BomberDiveSpeed;
        [RTTI.Member(14, 0x4C, "DiveBombSettings")] public float BomberDiveAngle;
        [RTTI.Member(15, 0x50, "DiveBombSettings")] public float DiveDropBombHeight;
        [RTTI.Member(16, 0x54, "DiveBombSettings")] public float AscendTimeAfterDive;
    }

    [RTTI.Serializable(0x4A32134FA53D3D51, GameType.DS)]
    public class DSDomainVariableTestComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x758CAB4E13E05E6B, GameType.DS)]
    public class DSDomainVariableTestComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x27431754417E6085, GameType.DS)]
    public class DSDonatedInfoStack
    {
    }

    [RTTI.Serializable(0xBAF73ABFE9CC18A7, GameType.DS)]
    public class DSDonatedResultInputInfo
    {
    }

    [RTTI.Serializable(0x378C38FB14205ACD, GameType.DS)]
    public class DSDreamCatcherRepComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB9D1C99EE1CFC56, GameType.DS)]
    public class DSDreamCatcherRepComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xBEB544FBE5B15A75, GameType.DS)]
    public class DSDreamCatcherRepComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x521D0A321B0B92CB, GameType.DS)]
    public class DSDropPhysicsOnceComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9BA4D739A6A295F0, GameType.DS)]
    public class DSDropPhysicsOnceComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public float DurationTime;
        [RTTI.Member(4, 0x24, "DS")] public float FadeOutTime;
        [RTTI.Member(5, 0x28, "DS")] public bool DisableImpactEffect;
    }

    [RTTI.Serializable(0x38894A777B36B425, GameType.DS)]
    public class DSDummyOnlineObjectInfoResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DSHouseholdInfoResource> HouseholdInfo;
        [RTTI.Member(3, 0x28)] public Ref<DSDeliveryPointLocator> DeliveryPointLocator;
        [RTTI.Member(4, 0x30)] public Ref<BooleanFact> EnableCondition;
        [RTTI.Member(5, 0x38)] public bool PriorityOverOnline;
        [RTTI.Member(6, 0x3C)] public uint32 RegenerationPeriod;
        [RTTI.Member(7, 0x48)] public bool IsForLastStranding;
    }

    [RTTI.Serializable(0x1907DBF84FF19164, GameType.DS)]
    public class DSDynamicLostObjectMissionResource : DSMissionResourceBase
    {
    }

    [RTTI.Serializable(0xFFD19B4889E1715A, GameType.DS)]
    public class DSDynamicPrecipitationOcclusionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF8D49B05A53FCD63, GameType.DS)]
    public class DSDynamicPrecipitationOcclusionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x24D24694E4922D81, GameType.DS)]
    public class DSDynamicPrecipitationOcclusionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Settings")] public Vec3 Offset;
        [RTTI.Member(4, 0x30, "Settings")] public float Size;
    }

    [RTTI.Serializable(0xDBD5138E9A9BED51, GameType.DS)]
    public class DSDynamicPrecipitationOcclusionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF39A7D49A258D542, GameType.DS)]
    public class DSDynamicPrecipitationOcclusionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Transform")] public Ref<LocatorResource> LocatorEntityActorResource;
        [RTTI.Member(9, 0x38, "Transform")] public String HelperName;
        [RTTI.Member(10, 0x40, "Transform")] public Mat44 LocalMatrix;
        [RTTI.Member(12, 0x80, "Logic")] public float Size;
    }

    [RTTI.Serializable(0x9C13A68020944D26, GameType.DS)]
    public class DSEchoComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC1D15C2C18127F7D, GameType.DS)]
    public class DSEchoComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SentenceResource>> EchoSentenceResources;
        [RTTI.Member(3, 0x30)] public Array<Ref<SentenceResource>> BirthdaySentenceResources;
    }

    [RTTI.Serializable(0xBB3B2D8BAA5FCCAD, GameType.DS)]
    public class DSEffectComponent : EffectComponent
    {
    }

    [RTTI.Serializable(0x8E0A64A1E7DB421C, GameType.DS)]
    public class DSEffectComponentEntity : Entity
    {
    }

    [RTTI.Serializable(0x63EB940FD99F4C76, GameType.DS)]
    public class DSEffectComponentEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "DS")] public Array<Ref<EntityComponentResource>> StartAction;
        [RTTI.Member(32, 0x110, "DS")] public Array<Ref<EntityComponentResource>> EndAction;
        [RTTI.Member(33, 0x120, "DS")] public bool SpawnEndActionComponentWhenStopEmitting;
    }

    [RTTI.Serializable(0xAADFD6E9182D5A8C, GameType.DS)]
    public class DSEffectComponentResource : EffectComponentResource
    {
        [RTTI.Member(41, 0x110, "DS")] public Ref<DSEffectComponentEntityResource> EffectEntityResource;
    }

    [RTTI.Serializable(0xC978FE4F637E72F6, GameType.DS)]
    public class DSEffectExportedFunctionGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x517F931A3C18C602, GameType.DS)]
    public class DSElevatorTrigger : CollisionTrigger
    {
    }

    [RTTI.Serializable(0x5535A716CAEEFD7D, GameType.DS)]
    public class DSEnsureRawMaterialForItemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSGameCatalogueListItem> Catalogue;
        [RTTI.Member(3, 0x28)] public uint32 Num;
    }

    [RTTI.Serializable(0x1345647FD90F7251, GameType.DS)]
    public class DSEnsureRawMaterialForItemsListResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSEnsureRawMaterialForItemResource>> List;
    }

    [RTTI.Serializable(0x5522DD0C928B9D8C, GameType.DS)]
    public class DSEntitySticker : EntitySticker
    {
    }

    [RTTI.Serializable(0x3866FDD5A9E2BA88, GameType.DS)]
    public class DSEntityStickerResource : EntityStickerResource
    {
        [RTTI.Member(23, 0x80, "DS")] public Array<bool> CannotStickToGameActorsArray;
    }

    [RTTI.Serializable(0x77BA7BEAB627E2DE, GameType.DS)]
    public class DSEnvironmentAreaResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<Texture> LowWorldHeightTexture;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> TextureReadComputeJobShader;
    }

    [RTTI.Serializable(0xB130C6E24BA7E8C6, GameType.DS)]
    public class DSEnvironmentManagerNodes : RTTIObject
    {
    }

    [RTTI.Serializable(0x7045E93282586C34, GameType.DS)]
    public class DSEnvironmentManagerNodesSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE503E1E2E5CC404B, GameType.DS)]
    public class DSEnvironmentManagerResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> KnotSpaceEntityResource;
        [RTTI.Member(3, 0x28)] public Ref<DSKnotSpaceResource> KnotSpaceResource;
        [RTTI.Member(4, 0x30)] public Ref<StaticMeshResource> SlipMeshResource;
        [RTTI.Member(5, 0x38)] public Ref<StaticMeshResource> BloodMeshResource;
        [RTTI.Member(6, 0x40)] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(7, 0x50)] public Ref<DSTarEffectResource> TarEffectResource;
        [RTTI.Member(8, 0x58)] public Ref<Fact> FactCanReturnOnlyInsideReturnOkTrigger;
        [RTTI.Member(9, 0x60)] public float SlipMeshMaxRadius;
        [RTTI.Member(10, 0x64)] public float SlipMeshEaseInTime;
        [RTTI.Member(11, 0x68)] public float SlipMeshEaseOutTime;
        [RTTI.Member(12, 0x70)] public String SlipMeshVariableName;
        [RTTI.Member(13, 0x78)] public uint32 SlipMeshVariableNameHash;
    }

    [RTTI.Serializable(0xACE5EEFBC384B9FA, GameType.DS)]
    public class DSEnvironmentPaintComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x598F796B8B894752, GameType.DS)]
    public class DSEnvironmentPaintComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public float SnowEcotopeValue;
        [RTTI.Member(4, 0x24, "General")] public bool EnableSnow;
        [RTTI.Member(5, 0x25, "General")] public bool EnableTar;
    }

    [RTTI.Serializable(0x2C124BEFD095B6F8, GameType.DS)]
    public class DSEpigraphResource : DSTipsResourceBase
    {
        [RTTI.Member(10, 0x40, "Texture")] public StreamingRef<UITexture> UITexture;
    }

    [RTTI.Serializable(0x6099BBB4B28DBCA6, GameType.DS)]
    public class DSExMissionResourceBase : DSMissionResourceBase
    {
        [RTTI.Member(14, 0xA8, "OrderInfo")] public Ref<DSHouseholdPersonResource> OrderPerson;
        [RTTI.Member(15, 0xB0, "OrderInfo")] public Ref<DSDeliveryPointInfoResource> OrderPoint;
        [RTTI.Member(16, 0xC8, "OrderInfo")] public Array<Ref<DSDeliveryPointInfoResource>> DeliveryPoints;
        [RTTI.Member(17, 0xD8, "OrderInfo")] public Array<Ref<DSMissionBaggageResource>> BaggageResources;
        [RTTI.Member(18, 0xE8, "OrderInfo")] public Array<DSMissionAppearPosInfo> BaggageInfos;
        [RTTI.Member(19, 0xF8, "OrderInfo")] public Array<DSMissionAppearPosInfo> ExtraAppearPosInfos;
        [RTTI.Member(26, 0x108, "MiscOrderInfo")] public Array<Ref<DSMissionBaggageResource>> BaggageResourcesForOutsider;
        [RTTI.Member(28, 0x118, "SceneInfo")] public Ref<DSMissionSceneResource> MissionScene;
        [RTTI.Member(30, 0x120, "Facts")] public Ref<BooleanFact> ProgressFact;
        [RTTI.Member(31, 0x128, "Facts")] public Ref<BooleanFact> IsRequiredStoryProgressionFact;
        [RTTI.Member(33, 0x130, "Radio")] public Ref<DSMenuRadioResource> MenuRadioResource;
        [RTTI.Member(35, 0x138, "Roadmap")] public Array<Ref<DSMissionTodoNodeGroupResource>> TodoNodeGroups;
        [RTTI.Member(22, 0x148, "OptionalOrderInfo")] public Ref<DSMissionAbstractPointResource> OptionalStartPoint;
        [RTTI.Member(23, 0x150, "OptionalOrderInfo")] public Ref<DSMissionAbstractPointResource> OptionalGoalPoint;
        [RTTI.Member(24, 0x158, "OptionalOrderInfo")] public Ref<DSLocator> OptionalBaggageStartPoint;
        [RTTI.Member(20, 0x160, "OrderInfo")] public Ref<LocalizedTextResource> MainBaggageText;
        [RTTI.Member(39, 0x168, "OptionalTrophy")] public Ref<TrophyResource> MissionSuccessTrophy;
        [RTTI.Member(36, 0x170, "Roadmap")] public bool ShowMainBaggageTextOnRoadmap;
        [RTTI.Member(37, 0x171, "Roadmap")] public bool ShouldExclusivelyBeDisplayedOnMissionTelop;
    }

    [RTTI.Serializable(0xB6072BF88CA46B75, GameType.DS)]
    public class DSExecGraphServiceFromSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6D01DFB20F077E93, GameType.DS)]
    public class DSExecGraphServiceFromSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public Ref<DSStringHashResource> GraphName;
        [RTTI.Member(8, 0x38)] public Ref<DSStringHashResource> MessageName;
        [RTTI.Member(9, 0x40)] public EDSMissionMsgGraphExecMode GraphExecMode;
        [RTTI.Member(10, 0x48)] public Array<int32> Values;
    }

    [RTTI.Serializable(0xD8C49C5E18205A4, GameType.DS)]
    public class DSExternalAnimationInfo
    {
        [RTTI.Member(0, 0x8)] public Ref<SkeletonAnimationResource> BodyAnimationResource;
        [RTTI.Member(1, 0x10)] public Ref<SkeletonAnimationResource> FacialAnimationResource;
        [RTTI.Member(2, 0x18)] public bool IsNeedBlink;
        [RTTI.Member(3, 0x19)] public bool IsNeedSaccade;
    }

    [RTTI.Serializable(0xAD451EBD8BCB6336, GameType.DS)]
    public class DSExternalAnimationResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<DSExternalAnimationInfo> AnimationInfoResources;
        [RTTI.Member(3, 0x30)] public Ref<MorphemeEventMappingsResource> EventMappings;
    }

    [RTTI.Serializable(0x313963DA5F2B5C26, GameType.DS)]
    public class DSFacialAnimEventInfo
    {
        [RTTI.Member(0, 0x8)] public DSFacialAnimInfo FacialAnimInfo;
        [RTTI.Member(1, 0x20)] public int EventIndex;
    }

    [RTTI.Serializable(0x5222BC3CB761A756, GameType.DS)]
    public class DSFacialAnimInfo
    {
        [RTTI.Member(0, 0x0)] public Ref<SkeletonAnimationResource> FacialAnimationResource;
        [RTTI.Member(1, 0x8)] public float StartTime;
        [RTTI.Member(2, 0xC)] public float BlendInTime;
        [RTTI.Member(3, 0x10)] public bool IsNeedSaccade;
        [RTTI.Member(4, 0x11)] public bool IsNeedBlink;
    }

    [RTTI.Serializable(0xD7B1CD3C61F69BE1, GameType.DS)]
    public class DSFacialManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<DSFacialAnimEventInfo> AnimationEventInfo;
        [RTTI.Member(4, 0x30, "General")] public Array<DSFacialAnimInfo> AnimationInfo;
    }

    [RTTI.Serializable(0x9F3CC3CB3B84E1F5, GameType.DS)]
    public class DSFacialRigAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x9D5DDE6C045AEF5F, GameType.DS)]
    public class DSFacialRigAnimationEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(13, 0x50, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(14, 0x58, "Logic")] public float StartInterpTime;
        [RTTI.Member(15, 0x5C, "Logic")] public bool IsNeedBlink;
    }

    [RTTI.Serializable(0x9F268A4EC73D610B, GameType.DS)]
    public class DSFacialRigComponent : IDSCoverAndAnimModelComponentBase
    {
    }

    [RTTI.Serializable(0x9823007CD3A31E7A, GameType.DS)]
    public class DSFacialRigComponentRep : IDSCoverAndAnimModelComponentRepBase
    {
    }

    [RTTI.Serializable(0xA3E3E85EC352D164, GameType.DS)]
    public class DSFacialRigManagerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3F5EE5DAE39A0B48, GameType.DS)]
    public class DSFacialRigManagerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "AnimEventData")] public Ref<DSFacialManagerResource> ManagerResource;
    }

    [RTTI.Serializable(0x82F632F9CA922206, GameType.DS)]
    public class DSFacilitySettingsOfRawMaterialResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSDeliveryPointInfoResource> Facility;
        [RTTI.Member(4, 0x28)] public Ref<DSCycleAndStorageSettingsOfRawMaterialResource> SettingsResource;
        [RTTI.Member(3, 0x30)] public Ref<DSHouseholdInfoResource> HouseHold;
        [RTTI.Member(5, 0x38)] public Ref<DSRawMaterialAmountsForAdditionResource> OnUnlock;
        [RTTI.Member(6, 0x40)] public Ref<DSRawMaterialAmountsForAdditionResource> OnLevelUp;
    }

    [RTTI.Serializable(0x68719E2873220BC5, GameType.DS)]
    public class DSFactProxyNodeResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<RTTIRefObject> Context;
        [RTTI.Member(4, 0x28, "General")] public Array<Ref<BooleanFact>> BooleanFacts;
        [RTTI.Member(5, 0x38, "General")] public Array<Ref<IntegerFact>> IntegerFacts;
        [RTTI.Member(7, 0x48, "Hidden")] public Array<uint32> Names;
    }

    [RTTI.Serializable(0xB47648CAB5C5EECB, GameType.DS)]
    public class DSFactProxyResource : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DSFactProxyNodeResource>> Nodes;
    }

    [RTTI.Serializable(0x56046DC028884833, GameType.DS)]
    public class DSFakeHoloComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8F84EE8B1E70094F, GameType.DS)]
    public class DSFakeHoloComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Vec3 CheckOffset;
        [RTTI.Member(3, 0x30)] public float CheckRadius;
        [RTTI.Member(4, 0x38)] public Ref<SoundResource> Sound_DistortionLp;
    }

    [RTTI.Serializable(0x697FACF06C5221F0, GameType.DS)]
    public class DSFallenTreeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5F1BDDF0099B62BB, GameType.DS)]
    public class DSFallenTreeComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xCE8ED5BEC4ACF39, GameType.DS)]
    public class DSFallenTreeComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(3, 0x30)] public Array<Ref<ModelPartResource>> ModelPartResources;
        [RTTI.Member(4, 0x40)] public Ref<MeshResourceBase> KnotSpaceTreeMeshResource;
        [RTTI.Member(5, 0x48)] public Ref<MeshResourceBase> TarDecalMeshResource;
        [RTTI.Member(6, 0x50)] public Array<Ref<CurveResource>> AnimCurveResources;
    }

    [RTTI.Serializable(0x5F19CF46132646D9, GameType.DS)]
    public class DSFieldRopeConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0x5DD66245E04A885B, GameType.DS)]
    public class DSFieldRopeConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "FieldRope")] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(116, 0x4A0, "FieldRope")] public Array<Ref<MaterialTypeResource>> SnowMaterialResources;
        [RTTI.Member(117, 0x4B0, "FieldRope")] public Array<Ref<MaterialTypeResource>> WaterMaterialResources;
        [RTTI.Member(118, 0x4C0, "FieldRope")] public float RopeMaxLength;
        [RTTI.Member(119, 0x4C4, "FieldRope")] public float RopeBuildCheckRadius;
        [RTTI.Member(120, 0x4C8, "FieldRope")] public float RopeBuildCheckHeight;
    }

    [RTTI.Serializable(0xD32BD500F4B16DD3, GameType.DS)]
    public class DSFieldRopeLocator : DSDeliveryPointLocator
    {
        [RTTI.Member(26, 0xD0)] public float RopeLength;
    }

    [RTTI.Serializable(0x5755ECDBAFFA0313, GameType.DS)]
    public class DSFieldRopePileComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x239748BFCA62C1CC, GameType.DS)]
    public class DSFieldRopePileComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public String AttachHelperName;
        [RTTI.Member(5, 0x28, "Sound")] public Ref<SoundResource> SoundPileTurn;
    }

    [RTTI.Serializable(0x91ECFADE05CE9EFE, GameType.DS)]
    public class DSFieldRopeSimulatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x54F80979608A8A33, GameType.DS)]
    public class DSFieldRopeSimulatorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public String AttachHelperName;
        [RTTI.Member(6, 0x28, "Sound")] public Ref<SoundResource> SoundDropImpact;
        [RTTI.Member(7, 0x30, "Sound")] public Ref<SoundResource> SoundRopeLoosen;
        [RTTI.Member(8, 0x38, "Sound")] public Ref<SoundResource> SoundRopeTension;
        [RTTI.Member(9, 0x40, "Sound")] public Ref<SoundResource> SoundRopeEndWarning;
        [RTTI.Member(11, 0x48, "Outline")] public Array<Ref<ArtPartsDataResource>> OutlineArtParts;
        [RTTI.Member(4, 0x58, "General")] public Ref<MaterialTypeResource> KeepSimMaterialTypeResource;
    }

    [RTTI.Serializable(0x3D78B5F25D201F5D, GameType.DS)]
    public class DSFixedGunEntity : Entity
    {
    }

    [RTTI.Serializable(0x9B75B1F7348A5CBF, GameType.DS)]
    public class DSFixedGunEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "FixedGun")] public EDSWeaponId FixedGunWeaponId;
        [RTTI.Member(32, 0x108, "FixedGun")] public Ref<DSObstacleComponentResource> ObstacleComponentResource;
        [RTTI.Member(33, 0x110, "FixedGun")] public String TriggerJointName;
        [RTTI.Member(34, 0x118, "FixedGun")] public String PivotJointName;
        [RTTI.Member(35, 0x120, "FixedGun")] public String MuzzleJointName;
        [RTTI.Member(36, 0x128, "FixedGun")] public Array<Ref<EntityComponentResource>> EntityComponentResourcesForChild;
    }

    [RTTI.Serializable(0x65AEE1E3119AE036, GameType.DS)]
    public class DSFixedGunGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0xBB7C5E205235B7BA, GameType.DS)]
    public class DSFixedGunGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(10, 0xB0)] public Ref<DSFixedGunGameActorUnitResource> FixedGunGameActorUnit;
    }

    [RTTI.Serializable(0x988E8E12251E648B, GameType.DS)]
    public class DSFixedGunGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xEDE2AEEA5831DD48, GameType.DS)]
    public class DSFixedGunGameActorUnitResource : DSGameActorUnitResource
    {
        [RTTI.Member(13, 0x58, "FixedGunLODDistances")] public float LowLODMinimumDistance;
        [RTTI.Member(14, 0x5C, "FixedGunLODDistances")] public float HighLODMaximumDistance;
    }

    [RTTI.Serializable(0xBFFD56AF312D6226, GameType.DS)]
    public class DSFollowingSoundComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x109CF461473B5D0F, GameType.DS)]
    public class DSFollowingSoundComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<SoundResource> SoundResource;
    }

    [RTTI.Serializable(0xBE0A5ED7E03B042C, GameType.DS)]
    public class DSFreeEmitableParticleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD536DE1CBC6CF682, GameType.DS)]
    public class DSFreeEmitableParticleComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(3, 0x28)] public Array<Vec3> EmitterPositions;
        [RTTI.Member(4, 0x38)] public Array<float> EmitFactors;
        [RTTI.Member(5, 0x48)] public bool IsEnableAutoEmit;
        [RTTI.Member(6, 0x4C)] public float BaseDensityUnit;
        [RTTI.Member(7, 0x50)] public float EmitLodRange;
        [RTTI.Member(8, 0x54)] public float BaseEmitterRate;
        [RTTI.Member(9, 0x58)] public float ClipNearRange;
    }

    [RTTI.Serializable(0x412D73969AA41D30, GameType.DS)]
    public class DSFreeMissionResource : DSMissionResourceBase
    {
        [RTTI.Member(14, 0xA8, "FreeMissionInfo")] public Ref<DSMissionSceneResource> FreeMissionScene;
    }

    [RTTI.Serializable(0xE65884E5C6BF11D5, GameType.DS)]
    public class DSFreeMissionResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBC850958E47F0879, GameType.DS)]
    public class DSFrendshipContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x37B59E5DE6B755A8, GameType.DS)]
    public class DSFrendshipContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1FA79399AAE29DF0, GameType.DS)]
    public class DSFriendlyMuleGroupInfoResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSDeliveryPointLocator>> DeliveryPointRoute;
        [RTTI.Member(3, 0x30)] public Array<Ref<BooleanFact>> ActivationFacts;
        [RTTI.Member(4, 0x40)] public Ref<DSHouseholdInfoResource> HouseholdInfo;
    }

    [RTTI.Serializable(0x22A984AA1902647C, GameType.DS)]
    public class DSFunctionGamePadInputBindDefinition : DSFunctionInputBindDefinition
    {
        [RTTI.Member(2, 0x20)] public EGamepadDevice DeviceType;
        [RTTI.Member(3, 0x24)] public EGamepadHardware HardwareType;
        [RTTI.Member(4, 0x28)] public EDeviceFunction InputBind;
    }

    [RTTI.Serializable(0x630DCD68F0EB44A4, GameType.DS)]
    public class DSFunctionInputBindDefinition : Resource
    {
    }

    [RTTI.Serializable(0x447F5A50EC7D8EEE, GameType.DS)]
    public class DSFunctionKeyBind
    {
        [RTTI.Member(0, 0x0)] public int32 InputBind0_DeviceType;
        [RTTI.Member(1, 0xC)] public int32 InputBind0_RawIndex;
        [RTTI.Member(2, 0x10)] public int32 InputBind1_DeviceType;
        [RTTI.Member(3, 0x1C)] public int32 InputBind1_RawIndex;
        [RTTI.Member(4, 0x20)] public int32 OutputBind_FunctionType;
        [RTTI.Member(5, 0x24)] public int32 OutputBind_RawIndex;
    }

    [RTTI.Serializable(0x945910C802589412, GameType.DS)]
    public class DSFunctionKeyBindAvailableCondition : Resource
    {
    }

    [RTTI.Serializable(0xCAE8364E6AB17CDC, GameType.DS)]
    public class DSFunctionKeyBindAvailableConditionKeyboardLayout : DSFunctionKeyBindAvailableCondition
    {
        [RTTI.Member(2, 0x20)] public EDSKeyBindKeyboardLayout KeyboardLayout;
    }

    [RTTI.Serializable(0xB223493F5934D3F4, GameType.DS)]
    public class DSFunctionKeyBindAvailableConditionPlatform : DSFunctionKeyBindAvailableCondition
    {
        [RTTI.Member(2, 0x20)] public Array<EDSKeyBindPlatform> Platforms;
    }

    [RTTI.Serializable(0x4554B7223397B761, GameType.DS)]
    public class DSFunctionKeyBindDefinition : Resource
    {
        [RTTI.Member(2, 0x20)] public bool IsDebugOnly;
        [RTTI.Member(3, 0x21)] public bool IsEnable;
        [RTTI.Member(4, 0x24)] public EDSFunction OutputBind;
        [RTTI.Member(5, 0x28)] public bool IsEditable;
        [RTTI.Member(6, 0x29)] public bool IsInternalInputBindSync;
        [RTTI.Member(7, 0x2C)] public EDSFunction InputBindSyncDSFunction;
        [RTTI.Member(8, 0x30)] public EDSKeyBindLayer Layer;
        [RTTI.Member(9, 0x38)] public Array<EDSFunction> DuplicatableFunctions;
        [RTTI.Member(10, 0x48)] public Array<Ref<DSFunctionInputBindDefinition>> InputBinds;
        [RTTI.Member(11, 0x58)] public Array<Ref<DSFunctionKeyBindAvailableCondition>> Conditions;
    }

    [RTTI.Serializable(0xF92FF2DDB9058F80, GameType.DS)]
    public class DSFunctionKeyBindDefinitionResource : Resource
    {
        [RTTI.Member(2, 0x20)] public String Name;
        [RTTI.Member(3, 0x28)] public uint32 NameHash;
        [RTTI.Member(4, 0x30)] public Array<Ref<DSFunctionKeyBindSetDefinition>> KeyBindSetDefinitions;
    }

    [RTTI.Serializable(0xD798DBDC8BBB976E, GameType.DS)]
    public class DSFunctionKeyBindSetDefinition : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSKeyBindCategory Category;
        [RTTI.Member(3, 0x28)] public String CategoryName;
        [RTTI.Member(4, 0x30)] public uint32 CategoryNameHash;
        [RTTI.Member(5, 0x34)] public bool IsEnable;
        [RTTI.Member(6, 0x35)] public bool IsEditable;
        [RTTI.Member(7, 0x36)] public bool IsMouseEnabled;
        [RTTI.Member(8, 0x37)] public bool IsKeyboardEnabled;
        [RTTI.Member(9, 0x38)] public bool IsGamePadEnabled;
        [RTTI.Member(10, 0x40)] public Array<Ref<DSFunctionKeyBindDefinition>> KeyBindDefinitions;
        [RTTI.Member(11, 0x50)] public Array<Ref<DSFunctionKeyBindStickOutputPropertyDefinition>> StickOutputPropertyDefinitions;
        [RTTI.Member(12, 0x60)] public Ref<DSFunctionReservedKeyBindDefinition> ReservedKeyBindDefinition;
    }

    [RTTI.Serializable(0xE223D6824AB5205, GameType.DS)]
    public class DSFunctionKeyBindStickOutputPropertyDefinition : Resource
    {
        [RTTI.Member(2, 0x20)] public bool IsEnable;
        [RTTI.Member(3, 0x24)] public EDSFunction Function;
        [RTTI.Member(4, 0x28)] public EDSFunctionKeyBindStickOutputPropertyOverwriteTarget OverwriteTarget;
        [RTTI.Member(5, 0x2C)] public EDSFunctionKeyBindStickOutputPropertyAxisType AxisType;
        [RTTI.Member(6, 0x30)] public float Value;
    }

    [RTTI.Serializable(0xECB32B92F19D008D, GameType.DS)]
    public class DSFunctionKeyboardInputBindDefinition : DSFunctionInputBindDefinition
    {
        [RTTI.Member(2, 0x20)] public EKeyCode InputBind;
    }

    [RTTI.Serializable(0xA5A3B59D2073A0AC, GameType.DS)]
    public class DSFunctionMouseInputBindDefinition : DSFunctionInputBindDefinition
    {
        [RTTI.Member(2, 0x20)] public EMouseButton InputBind;
    }

    [RTTI.Serializable(0x91B40023919995E3, GameType.DS)]
    public class DSFunctionReservedKeyBindDefinition : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSFunctionInputBindDefinition>> InputBinds;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSFunctionKeyBindDefinition>> KeyBindDefinitions;
    }

    [RTTI.Serializable(0x3B2F8499F1DD3601, GameType.DS)]
    public class DSFunctionVirtualDeviceInputBindDefinition : DSFunctionInputBindDefinition
    {
        [RTTI.Member(2, 0x20)] public EDSVirtualButton InputBind;
    }

    [RTTI.Serializable(0xC10BFBCC0D0D2632, GameType.DS)]
    public class DSGameActor : GameActor
    {
    }

    [RTTI.Serializable(0x772AD61CDC6B357, GameType.DS)]
    public class DSGameActorFloorHitLocator : ParentWorldNode
    {
        [RTTI.Member(9, 0x70, "DS")] public Array<Ref<NavMeshArea>> Area;
        [RTTI.Member(7, 0x80, "DS")] public float Radius;
        [RTTI.Member(8, 0x84, "DS")] public bool DontRealize;
    }

    [RTTI.Serializable(0x4DF1DEFB631CD1BB, GameType.DS)]
    public class DSGameActorLocator : GameActorLocator
    {
    }

    [RTTI.Serializable(0x7C611A32C9894A9A, GameType.DS)]
    public class DSGameActorUnit : GameActorUnit
    {
    }

    [RTTI.Serializable(0x953FD9B8EFB187E6, GameType.DS)]
    public class DSGameActorUnitResource : GameActorUnitResource
    {
    }

    [RTTI.Serializable(0x3F71EF83EC7CD4A5, GameType.DS)]
    public class DSGameBaggageListItem : DSGameListItemBase
    {
        [RTTI.Member(9, 0x3A, "Type")] public EDSGameBaggageListItem_BaggageAttribute AttributeOfBaggage;
        [RTTI.Member(10, 0x3B, "Type")] public EDSGameBaggageListItem_BaggageCaseType TypeOfCase;
        [RTTI.Member(11, 0x3C, "Type")] public EDSGameBaggageListItem_ContentsDamageType TypeOfContentsDamage;
        [RTTI.Member(12, 0x3D, "Type")] public EDSGameBaggageListItem_ContentsType TypeOfContents;
        [RTTI.Member(15, 0x3E, "Param")] public EDSGameBaggageListItem_Volume TypeOfVolume;
        [RTTI.Member(14, 0x40, "Param")] public Ref<DSGameListItemBaseWithIcon> Contents;
        [RTTI.Member(16, 0x48, "Param")] public uint32 Amount;
        [RTTI.Member(17, 0x4C, "Param")] public uint32 SubAmount;
        [RTTI.Member(18, 0x50, "Param")] public float Weight;
        [RTTI.Member(19, 0x54, "Param")] public uint32 DurabilityOfContents;
        [RTTI.Member(20, 0x58, "Param")] public uint32 DurabilityOfCase;
        [RTTI.Member(21, 0x5C, "Param")] public uint32 InitialDurabilityOfContents;
        [RTTI.Member(22, 0x60, "Param")] public uint32 InitialDurabilityOfCase;
        [RTTI.Member(23, 0x64, "Param")] public uint32 MissionId;
        [RTTI.Member(24, 0x68, "Param")] public uint8 Rarity;
    }

    [RTTI.Serializable(0x278A6938F6A068EF, GameType.DS)]
    public class DSGameBaggageListItemCaseWeightTable : Resource
    {
        [RTTI.Member(3, 0x20, "Tables")] public EDSGameBaggageListItem_BaggageCaseType CaseType;
        [RTTI.Member(4, 0x28, "Tables")] public Array<float> CaseWeights;
    }

    [RTTI.Serializable(0x25B8A7EB4A1E62EF, GameType.DS)]
    public class DSGameBaggageListItemLevelGroup : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSGameBaggageListItem>> LevelGroupBaggages;
        [RTTI.Member(3, 0x30)] public EDSArea Area;
        [RTTI.Member(4, 0x32)] public bool EnsureOne;
    }

    [RTTI.Serializable(0xA02F7AF8D694AF89, GameType.DS)]
    public class DSGameBaggageListItemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFC20BAC6B7A4627B, GameType.DS)]
    public class DSGameBaggageListItemWithExtraDescription : DSGameBaggageListItem
    {
        [RTTI.Member(26, 0x70, "ExtraInfo")] public Ref<BooleanFact> ExtraDescriptionEnable;
        [RTTI.Member(27, 0x78, "ExtraInfo")] public Ref<LocalizedTextResource> ExtraDescription;
    }

    [RTTI.Serializable(0x1E7D3FBD0C05FBCA, GameType.DS)]
    public class DSGameCatalogueFactContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xA8D4EB21895073C4, GameType.DS)]
    public class DSGameCatalogueFactContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4423BC0642417C3B, GameType.DS)]
    public class DSGameCatalogueListItem : DSGameCatalogueListItemBase
    {
        [RTTI.Member(7, 0x30, "Type")] public Ref<DSGameBaggageListItem> Baggage;
        [RTTI.Member(8, 0x38, "Type")] public bool DisplayLogInfoOnUnlocked;
        [RTTI.Member(9, 0x39, "Type")] public bool CanRequest;
        [RTTI.Member(19, 0x3C, "Condition")] public uint32 Like;
        [RTTI.Member(20, 0x40, "Condition")] public uint32 Cost;
        [RTTI.Member(21, 0x48, "Condition")] public Ref<BooleanFact> FactOfUnlockCondition;
        [RTTI.Member(22, 0x50, "Condition")] public Ref<BooleanFact> FactOfUnlockOnlineCondition;
        [RTTI.Member(23, 0x58, "Condition")] public Ref<BooleanFact> FactOfUnlockOnlineLV2Condition;
        [RTTI.Member(24, 0x60, "Condition")] public Ref<BooleanFact> IsNewCatalogueCondition;
        [RTTI.Member(25, 0x68, "Condition")] public uint16 MaxStock;
        [RTTI.Member(30, 0x6A, "Recycle")] public uint8 RecycleRate;
        [RTTI.Member(31, 0x6B, "Recycle")] public uint8 DamegeReflectionRate;
        [RTTI.Member(10, 0x6C, "Type")] public EDSGameCatalogueListItem_UsageType Usage;
        [RTTI.Member(11, 0x6D, "Type")] public EDSGameCatalogueListItem_UnlockType UnlockReason;
        [RTTI.Member(12, 0x6E, "Type")] public EDSGameCatalogueListItem_UnlockDialogType UnlockDialog;
        [RTTI.Member(26, 0x70, "Condition")] public Array<DSRequiredRawMaterialAmount> RequiredRawMaterialAmounts;
        [RTTI.Member(28, 0x80, "Radio")] public Ref<DSMenuRadioResource> RadioResourceOnUnlocked;
        [RTTI.Member(14, 0x88, "Type")] public EDSGameCatalogueListItem_UITabType UITabType;
        [RTTI.Member(15, 0x8A, "Type")] public bool TrophyTarget;
        [RTTI.Member(16, 0x8B, "Type")] public bool NoOnline;
        [RTTI.Member(13, 0x8C, "Type")] public bool CanDeferred;
        [RTTI.Member(17, 0x8D, "Type")] public uint8 DLCStatus;
    }

    [RTTI.Serializable(0xF5C6D7F4CAA1FB53, GameType.DS)]
    public class DSGameCatalogueListItemBase : Resource
    {
        [RTTI.Member(3, 0x20, "Id")] public uint32 Flag;
        [RTTI.Member(4, 0x24, "Id")] public uint32 NameCode;
        [RTTI.Member(5, 0x28, "Id")] public uint32 SortIndex;
    }

    [RTTI.Serializable(0x4DF3581775C7F6F6, GameType.DS)]
    public class DSGameCatalogueListItemDescriptionResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<DSRequiredRawMaterialAmount> DSRequiredRawMaterialAmounts;
    }

    [RTTI.Serializable(0x59441CF90AC3CF1B, GameType.DS)]
    public class DSGameCommodityListItem : DSGameListItemBaseWithIcon
    {
        [RTTI.Member(12, 0x48, "Param")] public EDSGameCommodityListItem_ConsumeType TypeOfCousume;
        [RTTI.Member(13, 0x4C, "Param")] public uint32 MaxAmountInStock;
        [RTTI.Member(14, 0x50, "Param")] public uint32 MaxAmountForPlayer;
        [RTTI.Member(15, 0x54, "Param")] public EDSGameCommodityListItem_EffectivenessType TypeOfEffectiveness;
        [RTTI.Member(16, 0x58, "Param")] public uint32 EffectiveTime;
        [RTTI.Member(17, 0x5C, "Param")] public uint32 EffectivePoint;
    }

    [RTTI.Serializable(0xA6078EBE103EDA4C, GameType.DS)]
    public class DSGameEquipmentListItem : DSGameListItemBaseWithIcon
    {
        [RTTI.Member(12, 0x48, "Param")] public EDSGameEquipmentListItem_Type TypeOfEquipment;
        [RTTI.Member(13, 0x4C, "Param")] public uint32 Param;
        [RTTI.Member(14, 0x50, "Param")] public uint32 MaxVolume;
        [RTTI.Member(15, 0x54, "Param")] public uint32 MaxDurability;
    }

    [RTTI.Serializable(0xA0C434CDC4EC71AB, GameType.DS)]
    public class DSGameListItemBase : Resource
    {
        [RTTI.Member(6, 0x20, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(7, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(3, 0x30, "Id")] public uint32 ID;
        [RTTI.Member(4, 0x34, "Id")] public uint32 NameCode;
    }

    [RTTI.Serializable(0xE2540E01181807BA, GameType.DS)]
    public class DSGameListItemBaseWithIcon : DSGameListItemBase
    {
        [RTTI.Member(9, 0x38, "Ui")] public String UiTextureBaseName;
        [RTTI.Member(10, 0x40, "Ui")] public EDSListItemColor Color;
    }

    [RTTI.Serializable(0x6543AE76010E714E, GameType.DS)]
    public class DSGameRawMaterialtListItem : DSGameListItemBaseWithIcon
    {
        [RTTI.Member(12, 0x48, "RawMaterialParam")] public EDSGameRawMaterialtListItem_Type RawMaterialType;
    }

    [RTTI.Serializable(0x7075D2B2378421CB, GameType.DS)]
    public class DSGameState : RTTIObject
    {
    }

    [RTTI.Serializable(0xFAFF2F21BB82E824, GameType.DS)]
    public class DSGameStateSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC73030035658BC1F, GameType.DS)]
    public class DSGameSystemDebugAssets : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(5, 0x38)] public Ref<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0x6767CC0614C9B817, GameType.DS)]
    public class DSGameSystemResources : Resource
    {
        [RTTI.Member(3, 0x20, "Scripts")] public Ref<GraphProgramResource> InitializeAreaScript;
        [RTTI.Member(4, 0x28, "Scripts")] public Ref<GraphProgramResource> NewGameScript;
        [RTTI.Member(5, 0x30, "Scripts")] public Ref<GraphProgramResource> BeforeLoadGameScript;
        [RTTI.Member(6, 0x38, "Scripts")] public Ref<GraphProgramResource> FastTravelScript;
        [RTTI.Member(7, 0x40, "Scripts")] public Ref<GraphProgramResource> EnterPrivateRoomAfterAreaChange;
        [RTTI.Member(8, 0x48, "Scripts")] public Ref<GraphProgramResource> RestoreMuleScript;
        [RTTI.Member(9, 0x50, "Scripts")] public Ref<GraphProgramResource> SaveDataLoaded;
        [RTTI.Member(11, 0x58, "Sounds")] public Ref<SoundResource> FaintStateKnockOutStingerInSound;
        [RTTI.Member(12, 0x60, "Sounds")] public Ref<SoundResource> FaintStateDraggedSound;
        [RTTI.Member(13, 0x68, "Sounds")] public Ref<SoundResource> FaintStateKnockOutStingerOutSound;
        [RTTI.Member(14, 0x70, "Sounds")] public Ref<SoundResource> NuclearBombSound;
        [RTTI.Member(15, 0x78, "Sounds")] public Ref<SoundResource> TimeOutSound;
        [RTTI.Member(17, 0x80, "Facts")] public Array<Ref<BooleanFact>> NeedWaitPrivateRoomFacts;
        [RTTI.Member(18, 0x90, "Facts")] public Array<Ref<BooleanFact>> NeedWaitFastTravelFacts;
        [RTTI.Member(20, 0xA0, "FaintTips")] public Array<Ref<DSTipsResourceBase>> FaintTips;
        [RTTI.Member(22, 0xB0, "Debug")] public StreamingRef<DSGameSystemDebugAssets> DebugAssets;
    }

    [RTTI.Serializable(0xED0E1221E8D4D3A3, GameType.DS)]
    public class DSGameWeaponListItem : DSGameListItemBaseWithIcon
    {
        [RTTI.Member(12, 0x48, "Param")] public EDSGameWeaponListItem_Type TypeOfWeapon;
        [RTTI.Member(13, 0x4A, "Param")] public EDSGameWeaponListItem_Category CategoryOfWeapon;
        [RTTI.Member(14, 0x4C, "Param")] public uint16 Param0;
        [RTTI.Member(15, 0x4E, "Param")] public uint16 Param1;
        [RTTI.Member(16, 0x50, "Param")] public uint16 Param2;
    }

    [RTTI.Serializable(0x16A2604B69A47AB0, GameType.DS)]
    public class DSGazerActivationCondition : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EDSDifficulty MaxDifficulty;
    }

    [RTTI.Serializable(0x27FFD72DF87B0EA9, GameType.DS)]
    public class DSGazerAreaEnterResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<CurveResource> OnToOff;
        [RTTI.Member(12, 0x28)] public Ref<CurveResource> OffToOn;
        [RTTI.Member(3, 0x30)] public Ref<ShakeResource> CameraShake0;
        [RTTI.Member(4, 0x38)] public Ref<ShakeResource> CameraShake1;
        [RTTI.Member(7, 0x40)] public Ref<RumbleResource> CameraRumble;
        [RTTI.Member(8, 0x48)] public Ref<SoundResource> SimpleEnterSound;
        [RTTI.Member(9, 0x50)] public float OffTime;
        [RTTI.Member(10, 0x54)] public float StartChillsTimeFromOff;
        [RTTI.Member(11, 0x58)] public float EndChillsTimeFromOff;
        [RTTI.Member(5, 0x5C)] public float StartCameraShakeTime0;
        [RTTI.Member(6, 0x60)] public float StartCameraShakeTime1;
    }

    [RTTI.Serializable(0x260319A431803AF, GameType.DS)]
    public class DSGazerBolagunInfo
    {
        [RTTI.Member(0, 0x0)] public EDSGazerBolagunAnimationType AnimationType;
        [RTTI.Member(1, 0x4)] public float BindTime;
        [RTTI.Member(2, 0x8)] public bool IsLegHit;
        [RTTI.Member(3, 0x9)] public bool IsBackHit;
        [RTTI.Member(4, 0xA)] public bool IsSecondHit;
    }

    [RTTI.Serializable(0xA32462612CDD0450, GameType.DS)]
    public class DSGazerCommonParameter : RTTIRefObject
    {
        [RTTI.Member(3, 0x20)] public Array<Ref<DSGazerDifficultyParameter>> DifficultyParameters;
        [RTTI.Member(2, 0x30)] public Ref<DSGazerDetectionParameter> DetectionParameter;
        [RTTI.Member(4, 0x38)] public float MarkerValidTime;
        [RTTI.Member(5, 0x3C)] public float MovingSpeedMaxDefault;
        [RTTI.Member(6, 0x40)] public float MovingSpeedMaxNerfed;
        [RTTI.Member(7, 0x44)] public float RespawnTime;
        [RTTI.Member(8, 0x48)] public float RespawnDistance;
    }

    [RTTI.Serializable(0x76ED4A6BFC741FCB, GameType.DS)]
    public class DSGazerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8A9DB96770FB0F85, GameType.DS)]
    public class DSGazerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSGazerPlugin> Plugin;
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> HandprinterResource;
        [RTTI.Member(4, 0x30)] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(5, 0x40)] public String UmbilicalCordSoundHelperName;
    }

    [RTTI.Serializable(0xC7F89678E6E4E3E5, GameType.DS)]
    public class DSGazerConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(3, 0x28)] public Ref<ParticleSystemResource> SilhouetteResource;
        [RTTI.Member(4, 0x30)] public Ref<DSGazerFloatingParameter> DefaultFloatingParameter;
        [RTTI.Member(5, 0x38)] public Ref<DSGazerFloatingParameter> NoticeFloatingParameter;
        [RTTI.Member(6, 0x40)] public Ref<DSGazerFloatingParameter> BindFloatingParameter;
        [RTTI.Member(8, 0x48)] public Ref<DSGazerCommonParameter> CommonParameter;
        [RTTI.Member(7, 0x50)] public Ref<DSGazerConfig> GrowUpConfig;
        [RTTI.Member(9, 0x58)] public float HearingRange;
        [RTTI.Member(10, 0x5C)] public float SmellingRange;
        [RTTI.Member(11, 0x60)] public float SightRange;
        [RTTI.Member(12, 0x64)] public float BaggageDetectionRange;
        [RTTI.Member(13, 0x68)] public float NpcDetectionRange;
        [RTTI.Member(14, 0x6C)] public float MainLifeMax;
        [RTTI.Member(15, 0x70)] public float PartLifeMax;
        [RTTI.Member(16, 0x74)] public float WanderingCooldownTime;
        [RTTI.Member(17, 0x78)] public float WanderingRange;
        [RTTI.Member(18, 0x7C)] public float MovableRange;
        [RTTI.Member(19, 0x80)] public float StrayAnnihilationRange;
        [RTTI.Member(20, 0x84)] public float NoChangeToHighLODRange;
        [RTTI.Member(21, 0x88)] public float VisibleBodyRange;
        [RTTI.Member(22, 0x8C)] public float VisibleUmbilicalCordRange;
        [RTTI.Member(23, 0x90)] public float MeshScaleFactor;
        [RTTI.Member(24, 0x94)] public bool IsShortUmbilicalCord;
        [RTTI.Member(25, 0x95)] public bool IsBlazing;
        [RTTI.Member(26, 0x96)] public bool IsNoBoundByBolaRope;
        [RTTI.Member(27, 0x97)] public bool IsHunterMembersCountMax;
        [RTTI.Member(28, 0x98)] public int SmallCrystalDropCount;
        [RTTI.Member(29, 0x9C)] public int MiddleCrystalDropCount;
        [RTTI.Member(30, 0xA0)] public int LargeCrystalDropCount;
    }

    [RTTI.Serializable(0x6D1347EA05C66979, GameType.DS)]
    public class DSGazerDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC7BCA1E2752D5412, GameType.DS)]
    public class DSGazerDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSGazerPlugin> Plugin;
        [RTTI.Member(3, 0x28)] public Ref<DSHouseholdInfoResource> HouseholdInfoResource;
    }

    [RTTI.Serializable(0xAB4CDBA3D1033D84, GameType.DS)]
    public class DSGazerDetectionParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float BreathKnowledgeRateUpSpeed;
        [RTTI.Member(3, 0x24)] public float AccurateKnowledgeRateUpSpeed;
        [RTTI.Member(4, 0x28)] public float RateDownSpeed;
        [RTTI.Member(5, 0x2C)] public float AccurateKnowledgeDetectionTime;
    }

    [RTTI.Serializable(0x39859E128781B353, GameType.DS)]
    public class DSGazerDifficultyParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EDSDifficulty Difficulty;
        [RTTI.Member(3, 0x24)] public float LifeRate;
        [RTTI.Member(4, 0x28)] public float HearingRangeRate;
        [RTTI.Member(5, 0x2C)] public float SmellingRangeRate;
    }

    [RTTI.Serializable(0x13712A711A86E4A, GameType.DS)]
    public class DSGazerFloatingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x21AE493A6B50D119, GameType.DS)]
    public class DSGazerFloatingComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSGazerPlugin> Plugin;
    }

    [RTTI.Serializable(0x363352FC02E352F3, GameType.DS)]
    public class DSGazerFloatingParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float HeightMin;
        [RTTI.Member(3, 0x24)] public float HeightMax;
        [RTTI.Member(4, 0x28)] public float IntervalTimeMin;
        [RTTI.Member(5, 0x2C)] public float IntervalTimeMax;
        [RTTI.Member(6, 0x30)] public float InterpTime;
        [RTTI.Member(7, 0x38)] public bool IsExchangeHeightMinMax;
        [RTTI.Member(8, 0x39)] public bool IsDive;
    }

    [RTTI.Serializable(0xB5EE5B25785BC850, GameType.DS)]
    public class DSGazerGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x1A4A9420AFAE0700, GameType.DS)]
    public class DSGazerGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "Gazer")] public StreamingRef<GameActorSpecificData> CustomSpecificData;
        [RTTI.Member(12, 0xB8, "Gazer")] public Ref<DSGazerConfig> CustomConfig;
        [RTTI.Member(13, 0xC8, "Gazer")] public Ref<DSGazerOverrideConfig> OverrideConfig;
        [RTTI.Member(14, 0xD0, "Gazer")] public Ref<DSGazerActivationCondition> ActivationCondition;
        [RTTI.Member(16, 0xD8, "GazerDebug")] public Array<String> DebugAiFacts;
    }

    [RTTI.Serializable(0x89961C4DADC6B511, GameType.DS)]
    public class DSGazerGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xD34F5EBC863969DA, GameType.DS)]
    public class DSGazerGameActorUnitResource : DSGameActorUnitResource
    {
        [RTTI.Member(13, 0x58, "Gazer")] public Ref<DSGazerConfig> DefaultConfig;
        [RTTI.Member(14, 0x60, "Gazer")] public Ref<DSGazerConfig> StrayConfig;
        [RTTI.Member(15, 0x68, "Gazer")] public Ref<DSGazerActivationCondition> DefaultActivationCondition;
        [RTTI.Member(16, 0x70, "Gazer")] public float HighLODRange;
    }

    [RTTI.Serializable(0x2AE3166F0B86DDFD, GameType.DS)]
    public class DSGazerHandprintComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x52B66F020C4CFA9F, GameType.DS)]
    public class DSGazerHandprintComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(3, 0x28)] public Ref<MaterialTypeResource> SnowMaterialTypeResource;
        [RTTI.Member(4, 0x30)] public Ref<MaterialTypeResource> InteractionalMudMaterialTypeResource;
        [RTTI.Member(5, 0x38)] public Ref<EntityResource> InteractionEntityResource;
        [RTTI.Member(6, 0x40)] public Ref<EffectComponentResource> DestroyHandprintEffectResource;
        [RTTI.Member(7, 0x48)] public float IntervalDistance;
    }

    [RTTI.Serializable(0x7366E4FE147467F4, GameType.DS)]
    public class DSGazerIndoorTrigger : CollisionTrigger
    {
        [RTTI.Member(12, 0xF0)] public Ref<AINavMeshComponentResource> NavMeshComponentResource;
    }

    [RTTI.Serializable(0xAB1BDC70940BA497, GameType.DS)]
    public class DSGazerManagerCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x2BECA4112F5DB733, GameType.DS)]
    public class DSGazerManagerCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x558BE17366F70E8, GameType.DS)]
    public class DSGazerManagerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> GhostResource;
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> AnnihilationResource;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> FarAnnihilationResource;
        [RTTI.Member(5, 0x38)] public Ref<BooleanFact> RequestVisibleInCutsceneFact;
        [RTTI.Member(6, 0x40)] public Ref<BooleanFact> EnableEvenIfOutOfCatcherTerritoryFact;
        [RTTI.Member(7, 0x48)] public float PlayerConcentrationTime;
        [RTTI.Member(8, 0x4C)] public float PlayerUnconcentrationTime;
        [RTTI.Member(9, 0x50)] public float PlayerUnconcentrationKeepTime;
        [RTTI.Member(10, 0x54)] public float FarAnnihilationDistance;
        [RTTI.Member(11, 0x58)] public float NoticeStingerSoundCooldownTime;
        [RTTI.Member(12, 0x60)] public WorldPosition OtherAreaAnnihilationPositionInArea01;
        [RTTI.Member(13, 0x78)] public WorldPosition OtherAreaAnnihilationPositionInArea02;
        [RTTI.Member(14, 0x90)] public WorldPosition OtherAreaAnnihilationPositionInArea04;
    }

    [RTTI.Serializable(0xDEA3EAEE41049C72, GameType.DS)]
    public class DSGazerModelComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF800B8D8CF535DB0, GameType.DS)]
    public class DSGazerModelComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x83D38FF6DD4827FB, GameType.DS)]
    public class DSGazerModelComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public EDSGazerBoneType BoneType;
        [RTTI.Member(3, 0x28)] public Ref<DSGazerPlugin> Plugin;
        [RTTI.Member(4, 0x30)] public Ref<DSGazerModelVisibilityParameter> VisibilityParameter;
        [RTTI.Member(5, 0x38)] public Ref<DSGazerModelMeshHelperContainer> MeshHelperContainer;
    }

    [RTTI.Serializable(0x94D4A7559160B600, GameType.DS)]
    public class DSGazerModelMeshHelper
    {
        [RTTI.Member(0, 0x0)] public String JointName;
        [RTTI.Member(1, 0x10)] public Vec3 Offset;
        [RTTI.Member(2, 0x20)] public EDSGazerMeshType MeshType;
    }

    [RTTI.Serializable(0x4E86BC6A542FB4EF, GameType.DS)]
    public class DSGazerModelMeshHelperContainer : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<DSGazerModelMeshHelper> Helpers;
    }

    [RTTI.Serializable(0x42636AE5290A37E8, GameType.DS)]
    public class DSGazerModelVisibilityParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float VisibilityInterpTimeMin;
        [RTTI.Member(3, 0x24)] public float VisibilityInterpTimeMax;
        [RTTI.Member(4, 0x28)] public float VisibilityInterpTimeModifierDistanceMin;
        [RTTI.Member(5, 0x2C)] public float VisibilityInterpTimeModifierDistanceMax;
        [RTTI.Member(6, 0x30)] public float VisibilityDelayTimeMax;
        [RTTI.Member(7, 0x34)] public float VanishmentInterpTimeMin;
        [RTTI.Member(8, 0x38)] public float VanishmentInterpTimeMax;
        [RTTI.Member(9, 0x3C)] public float VanishmentDelayTimeMax;
    }

    [RTTI.Serializable(0x258DD1F1F0B3F95E, GameType.DS)]
    public class DSGazerMovementComponent : DSMoverSupportComponent
    {
    }

    [RTTI.Serializable(0xB1C35D5E5A44E31A, GameType.DS)]
    public class DSGazerMovementComponentResource : DSMoverSupportComponentResource
    {
    }

    [RTTI.Serializable(0x80E1DD2F38EF57E0, GameType.DS)]
    public class DSGazerNoPerceptionKnowledgeComponent : DSAINoPerceptionKnowledgeComponentBase
    {
    }

    [RTTI.Serializable(0x1594006DE08E2502, GameType.DS)]
    public class DSGazerNoPerceptionKnowledgeComponentResource : DSAINoPerceptionKnowledgeComponentResourceBase
    {
    }

    [RTTI.Serializable(0xC07DE24A2A2DEF0A, GameType.DS)]
    public class DSGazerOverrideConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float WanderingRange;
    }

    [RTTI.Serializable(0x2277E4C69B299E5B, GameType.DS)]
    public class DSGazerPlugin : Resource
    {
        [RTTI.Member(3, 0x20)] public Array<DSGazerBolagunInfo> BolagunInfos;
        [RTTI.Member(2, 0x30)] public Array<DSGazerSpiritualInfo> SpiritualInfos;
    }

    [RTTI.Serializable(0xD6874467B2E170E4, GameType.DS)]
    public class DSGazerPluginNavel : DSGazerPlugin
    {
    }

    [RTTI.Serializable(0xDD5A35E147D066F8, GameType.DS)]
    public class DSGazerPluginNormal : DSGazerPlugin
    {
    }

    [RTTI.Serializable(0x8DCEF35449CEC6AC, GameType.DS)]
    public class DSGazerSceneObserver : CoreObject
    {
    }

    [RTTI.Serializable(0xFB83317F82C41301, GameType.DS)]
    public class DSGazerSpiritualInfo
    {
        [RTTI.Member(0, 0x0)] public String Identifier;
        [RTTI.Member(1, 0x8)] public float MeshScale;
        [RTTI.Member(2, 0xC)] public float ShaderVariable;
        [RTTI.Member(3, 0x10)] public float StartInterpTime;
        [RTTI.Member(4, 0x14)] public float EndInterpTime;
    }

    [RTTI.Serializable(0xEED16D04E5BC72A3, GameType.DS)]
    public class DSGazerUmbilicalCordAnimation : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<SkeletonAnimationResource> Idle;
        [RTTI.Member(3, 0x28)] public Ref<SkeletonAnimationResource> Cut;
        [RTTI.Member(4, 0x30)] public Ref<SkeletonAnimationResource> Pulled;
        [RTTI.Member(5, 0x38)] public Ref<SkeletonAnimationResource> Stopped;
        [RTTI.Member(6, 0x40)] public Ref<SkeletonAnimationResource> Dead;
    }

    [RTTI.Serializable(0x25B89E08C29731D1, GameType.DS)]
    public class DSGazerUmbilicalCordComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3E05BE6666FCEC8C, GameType.DS)]
    public class DSGazerUmbilicalCordComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x371EA73F3B8C8426, GameType.DS)]
    public class DSGazerUmbilicalCordComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SkeletonAnimationResource>> AnimationResources;
        [RTTI.Member(3, 0x30)] public Ref<DSGazerUmbilicalCordAnimation> Animation;
    }

    [RTTI.Serializable(0x468E505825927BD4, GameType.DS)]
    public class DSGeneralInferencePluginResource : DSInferencePluginBaseResource
    {
        [RTTI.Member(3, 0x20, "Compare")] public float PlayerNoiseCompareDistance;
        [RTTI.Member(4, 0x24, "Compare")] public float AlertNoiseCompareTime;
        [RTTI.Member(5, 0x28, "Compare")] public float GushotNoiseAlertDistance;
    }

    [RTTI.Serializable(0x5C4F7EF18C4F6EEA, GameType.DS)]
    public class DSGenericLostBaggageDeliveryInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "Info")] public Ref<DSDeliveryPointInfoResource> Destination;
        [RTTI.Member(4, 0x28, "Info")] public Ref<DSHouseholdInfoResource> Client;
        [RTTI.Member(5, 0x38, "Info")] public uint32 Reward;
        [RTTI.Member(6, 0x40, "Info")] public Ref<DSStringHashResource> RewardResourceHash;
    }

    [RTTI.Serializable(0xE8D14D870C3AD183, GameType.DS)]
    public class DSGenericLostBaggageDeliveryInfoResources : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Info")] public Array<Ref<DSGenericLostBaggageDeliveryInfoResource>> DeliveryInfos;
    }

    [RTTI.Serializable(0x935D7DE232E0C2EF, GameType.DS)]
    public class DSGenericLostBaggageGeneratorHistoryResource : Resource
    {
        [RTTI.Member(3, 0x20, "Info")] public Array<Ref<DSHouseholdInfoResource>> History;
    }

    [RTTI.Serializable(0x3BFD02103A57364A, GameType.DS)]
    public class DSGenericLostBaggageGeneratorResource : DSLostBaggageGeneratorBaseResource
    {
        [RTTI.Member(28, 0xA8, "Location")] public Ref<DSLocator> Locator;
        [RTTI.Member(29, 0xB0, "Location")] public bool PlacePrecisely;
        [RTTI.Member(30, 0xB1, "Location")] public uint8 Flags;
        [RTTI.Member(31, 0xB4, "Location")] public float Radius;
        [RTTI.Member(32, 0xB8, "Location")] public bool InCatcherArea;
        [RTTI.Member(33, 0xB9, "Location")] public bool PutLocatorZ;
    }

    [RTTI.Serializable(0xEC1E8666138EAB0E, GameType.DS)]
    public class DSGenericLostBaggageListItems : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSGameBaggageListItem>> Baggages;
    }

    [RTTI.Serializable(0xE1F809DB1F4D7A19, GameType.DS)]
    public class DSGimmickGraphCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x48930F338771367A, GameType.DS)]
    public class DSGimmickGraphCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8BB965FF66DE6F0C, GameType.DS)]
    public class DSGraphCtrlBaggageArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xA5036C5B463BDDC4, GameType.DS)]
    public class DSGraphCtrlBaggageArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2542C661305382CE, GameType.DS)]
    public class DSGraphServiceArgs : RTTIObject
    {
    }

    [RTTI.Serializable(0x3A18ECF21709DA0A, GameType.DS)]
    public class DSGraphServiceArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1FC34807F25163E6, GameType.DS)]
    public class DSGraphServiceData : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<DSGraphServiceUnit> GraphUnits;
    }

    [RTTI.Serializable(0x3AEC7FCFE38A9865, GameType.DS)]
    public class DSGraphServiceReturnValue : RTTIObject
    {
    }

    [RTTI.Serializable(0xA68E83D727BA733A, GameType.DS)]
    public class DSGraphServiceReturnValueSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x751C333ED7D473A, GameType.DS)]
    public class DSGraphServiceUnit
    {
        [RTTI.Member(0, 0x0)] public Ref<DSStringHashResource> StringHash;
        [RTTI.Member(1, 0x8)] public Ref<GraphProgramResource> GraphResource;
    }

    [RTTI.Serializable(0xB81CE33C844FA767, GameType.DS)]
    public class DSGrassCutComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4F28EB0DC387101C, GameType.DS)]
    public class DSGrassCutComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public float SizeX;
        [RTTI.Member(4, 0x24, "General")] public float SizeY;
    }

    [RTTI.Serializable(0x9B86BA7A129642DB, GameType.DS)]
    public class DSGrassCutManagerResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<ShaderResource> GrassCutPaintShaderResource;
    }

    [RTTI.Serializable(0xE6280F7ECB2C43CD, GameType.DS)]
    public class DSGroundMoveEntityUpdater : DSControlledEntityUpdater
    {
    }

    [RTTI.Serializable(0xFFDD07D75A15135A, GameType.DS)]
    public class DSGroundMoveEntityUpdaterResource : DSControlledEntityUpdaterResource
    {
    }

    [RTTI.Serializable(0xF485D8F278377013, GameType.DS)]
    public class DSGroundMovementComponent : DSMoverSupportComponent
    {
    }

    [RTTI.Serializable(0x44118455D7C320D9, GameType.DS)]
    public class DSGroundMovementComponentResource : DSMoverSupportComponentResource
    {
        [RTTI.Member(19, 0x50, "General")] public float MaxSpeed;
        [RTTI.Member(20, 0x54, "General")] public float MaxTurnSpeed;
        [RTTI.Member(21, 0x58, "General")] public float TurnAcceleration;
        [RTTI.Member(11, 0x5C, "DS")] public float MoveCapsuleRadius;
        [RTTI.Member(16, 0x60, "DS")] public float OverlapPreventRadius;
        [RTTI.Member(12, 0x64, "DS")] public float MoveCapsuleHeight;
        [RTTI.Member(13, 0x68, "DS")] public float FloorAttachRange;
        [RTTI.Member(115, 0x6C, "SpecialMove")] public float WaterSpeedDownDepth;
        [RTTI.Member(69, 0x70, "Animation")] public float QuickTurnMinAngle;
        [RTTI.Member(118, 0x74, "SpecialMove")] public float SlopePitchScaleUp;
        [RTTI.Member(119, 0x78, "SpecialMove")] public float SlopePitchScaleDown;
        [RTTI.Member(23, 0x7C, "General")] public float ExtraDeltaTurnInterpFactor;
        [RTTI.Member(25, 0x80, "Animation")] public Ref<MorphemeAnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(17, 0x88, "DS")] public Ref<AINavMeshComponentResource> AiNavMeshComponent;
        [RTTI.Member(97, 0x90, "StoppingAbility")] public bool UseAnimationEvent;
        [RTTI.Member(98, 0x98, "StoppingAbility")] public Array<int> CycleToStopAnimationEventIds;
        [RTTI.Member(99, 0xA8, "StoppingAbility")] public int PinpointStopSnapEventId;
        [RTTI.Member(100, 0xAC, "StoppingAbility")] public int PinpointTurnSnapEventId;
        [RTTI.Member(102, 0xB0, "EnterCover")] public Ref<DSPostureFlagToController> EnterCoverLeftPostureFlag;
        [RTTI.Member(103, 0xB8, "EnterCover")] public Ref<DSPostureFlagToController> EnterCoverRightPostureFlag;
        [RTTI.Member(104, 0xC0, "EnterCover")] public Ref<DSPostureFlagToController> EnterCoverHidePostureFlag;
        [RTTI.Member(105, 0xC8, "EnterCover")] public Ref<DSPostureFlagToController> CoverPeepPostureFlag;
        [RTTI.Member(106, 0xD0, "EnterCover")] public Ref<DSPostureFlagToController> SquatPostureFlag;
        [RTTI.Member(107, 0xD8, "EnterCover")] public Ref<DSPostureFlagToController> AlertPostureFlag;
        [RTTI.Member(108, 0xE0, "EnterCover")] public Ref<DSPostureFlagToController> FirePostureFlag;
        [RTTI.Member(109, 0xE8, "EnterCover")] public Ref<DSPostureFlagToController> ParallelMovePostureFlag;
        [RTTI.Member(110, 0xF0, "EnterCover")] public Ref<DSPostureFlagToController> CoverSlidePostureFlag;
        [RTTI.Member(111, 0xF8, "EnterCover")] public Ref<DSPostureFlagToController> PatrolPostureFlag;
        [RTTI.Member(26, 0x100, "Animation")] public String ActionMove;
        [RTTI.Member(27, 0x108, "Animation")] public String ActionTurn;
        [RTTI.Member(28, 0x110, "Animation")] public String ActionQuickTurn;
        [RTTI.Member(29, 0x118, "Animation")] public String ActionSquat;
        [RTTI.Member(30, 0x120, "Animation")] public String VariableIsOnGround;
        [RTTI.Member(31, 0x128, "Animation")] public String ActionPeepLeft;
        [RTTI.Member(32, 0x130, "Animation")] public String ActionPeepRight;
        [RTTI.Member(33, 0x138, "Animation")] public String ActionPeepForward;
        [RTTI.Member(34, 0x140, "Animation")] public String ActionPeepStart;
        [RTTI.Member(35, 0x148, "Animation")] public String ActionPeepEnd;
        [RTTI.Member(36, 0x150, "Animation")] public String ActionPeepUpStart;
        [RTTI.Member(37, 0x158, "Animation")] public String ActionPeepUpEnd;
        [RTTI.Member(38, 0x160, "Animation")] public String ActionCoverGesture;
        [RTTI.Member(39, 0x168, "Animation")] public String ActionCoverCheck;
        [RTTI.Member(40, 0x170, "Animation")] public String ActionCoverCheckUp;
        [RTTI.Member(41, 0x178, "Animation")] public String ActionCoverStand;
        [RTTI.Member(42, 0x180, "Animation")] public String VariableSpeed;
        [RTTI.Member(43, 0x188, "Animation")] public String VariableDeltaTurnAngle;
        [RTTI.Member(44, 0x190, "Animation")] public String VariableExtraDeltaTurnAngle;
        [RTTI.Member(45, 0x198, "Animation")] public String VariableTurnAngle;
        [RTTI.Member(46, 0x1A0, "Animation")] public String VariableStartTurnAngle;
        [RTTI.Member(47, 0x1A8, "Animation")] public String VariableQuickTurnAngle;
        [RTTI.Member(48, 0x1B0, "Animation")] public String VariableQuickTurnAngleBack;
        [RTTI.Member(49, 0x1B8, "Animation")] public String VariableParallelMoveHeading;
        [RTTI.Member(50, 0x1C0, "Animation")] public String VariableParallelMoveHeadingBack;
        [RTTI.Member(51, 0x1C8, "Animation")] public String VariableWeapon;
        [RTTI.Member(52, 0x1D0, "Animation")] public String VariableIndividualVariation;
        [RTTI.Member(53, 0x1D8, "Animation")] public String VariableSquatHeadiing;
        [RTTI.Member(54, 0x1E0, "Animation")] public String ActionJump;
        [RTTI.Member(55, 0x1E8, "Animation")] public String VariableJumpTargetPosition;
        [RTTI.Member(56, 0x1F0, "Animation")] public String VariableJumpTargetHeading;
        [RTTI.Member(57, 0x1F8, "Animation")] public String VariableJumpTargetOrientation;
        [RTTI.Member(58, 0x200, "Animation")] public String VariableJumpLength;
        [RTTI.Member(59, 0x208, "Animation")] public String ActionLadderMove;
        [RTTI.Member(60, 0x210, "Animation")] public String VariableLadderMoveAngle;
        [RTTI.Member(61, 0x218, "Animation")] public String VariableLadderMoveSpeed;
        [RTTI.Member(62, 0x220, "Animation")] public String VariableLadderMoveOFfset;
        [RTTI.Member(63, 0x228, "Animation")] public String VariablePatrol;
        [RTTI.Member(64, 0x230, "Animation")] public String VariableStepHeight;
        [RTTI.Member(65, 0x238, "Animation")] public String VariableCoverTurnAngle;
        [RTTI.Member(66, 0x240, "Animation")] public String VariableCoverTargetPosition;
        [RTTI.Member(67, 0x248, "Animation")] public String VariableCoverExitTurnAngle;
        [RTTI.Member(68, 0x250, "Animation")] public String VariableCoverExitPosition;
        [RTTI.Member(70, 0x258, "Animation")] public AnimationTagID StartTagID;
        [RTTI.Member(72, 0x25C, "Animation")] public AnimationTagID StopTagID;
        [RTTI.Member(71, 0x260, "Animation")] public AnimationTagID CycleTagID;
        [RTTI.Member(73, 0x264, "Animation")] public AnimationTagID TurnTagID;
        [RTTI.Member(74, 0x268, "Animation")] public AnimationTagID QuickTurnTagID;
        [RTTI.Member(75, 0x26C, "Animation")] public AnimationTagID ParallelMoveTagID;
        [RTTI.Member(76, 0x270, "Animation")] public AnimationTagID UseParallelHeadingTagID;
        [RTTI.Member(77, 0x274, "Animation")] public AnimationTagID NormalActionTagID;
        [RTTI.Member(78, 0x278, "Animation")] public AnimationTagID JumpTagID;
        [RTTI.Member(79, 0x27C, "Animation")] public AnimationTagID FallTagID;
        [RTTI.Member(80, 0x280, "Animation")] public AnimationTagID JumpGravityOffOnlyID;
        [RTTI.Member(81, 0x284, "Animation")] public AnimationTagID PeepLeftTagID;
        [RTTI.Member(82, 0x288, "Animation")] public AnimationTagID PeepRightTagID;
        [RTTI.Member(83, 0x28C, "Animation")] public AnimationTagID ClampToNavMeshTagID;
        [RTTI.Member(84, 0x290, "Animation")] public AnimationTagID IdleTagID;
        [RTTI.Member(85, 0x294, "Animation")] public AnimationTagID SquatTagID;
        [RTTI.Member(86, 0x298, "Animation")] public AnimationTagID CoverTagID;
        [RTTI.Member(87, 0x29C, "Animation")] public AnimationTagID CoverLeftTagID;
        [RTTI.Member(88, 0x2A0, "Animation")] public AnimationTagID CoverRightTagID;
        [RTTI.Member(89, 0x2A4, "Animation")] public AnimationTagID CoverHideTagID;
        [RTTI.Member(90, 0x2A8, "Animation")] public AnimationTagID TakingCoverTagID;
        [RTTI.Member(91, 0x2AC, "Animation")] public AnimationTagID CoverPeepTagID;
        [RTTI.Member(92, 0x2B0, "Animation")] public AnimationTagID UpperBodyCombatTagID;
        [RTTI.Member(93, 0x2B4, "Animation")] public AnimationTagID AdjustMovementOnSlopeTagID;
        [RTTI.Member(94, 0x2B8, "Animation")] public AnimationTagID UninterruptibleTagID;
        [RTTI.Member(95, 0x2BC, "Animation")] public AnimationTagID LadderStateTagID;
        [RTTI.Member(114, 0x2C0, "SpecialMove")] public float WaterWalkSpeed;
        [RTTI.Member(117, 0x2C8, "SpecialMove")] public String SlopePitchAngle;
        [RTTI.Member(120, 0x2D0, "SpecialMove")] public float SlopeSpeedDownPitchAngle;
        [RTTI.Member(113, 0x2D4, "SpecialMove")] public bool UseWaterSpeedDown;
        [RTTI.Member(116, 0x2D5, "SpecialMove")] public bool UseSopeSpeedChange;
        [RTTI.Member(14, 0x2D6, "DS")] public bool UseAroundFloorCheck;
        [RTTI.Member(15, 0x2D7, "DS")] public bool UseOverlapPrevent;
        [RTTI.Member(22, 0x2D8, "General")] public bool ForceVerticalUpVector;
        [RTTI.Member(121, 0x2E0, "SpecialMove")] public Ref<DSGroundMovementPluginResource> MovementPlugin;
    }

    [RTTI.Serializable(0xDAFD8B2DD35656FC, GameType.DS)]
    public class DSGroundMovementComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x91483FC160B48A7D, GameType.DS)]
    public class DSGroundMovementPluginResource : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x41085ECE3D956E43, GameType.DS)]
    public class DSHUDBlackFlickerEffectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC5D1EFE6B7EA0158, GameType.DS)]
    public class DSHUDBlackFlickerEffectEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSHUDBlackFlickerEffectResource> BlackFlickerEffectResource;
        [RTTI.Member(9, 0x38, "Logic")] public uint32 RandomSeed;
    }

    [RTTI.Serializable(0x1DD9D9D277474649, GameType.DS)]
    public class DSHUDBlackFlickerEffectResource : DSHUDEffectResource
    {
        [RTTI.Member(5, 0x30, "Rendering")] public Ref<RenderEffectResource> RenderEffectResource;
        [RTTI.Member(8, 0x40, "Rendering")] public FRGBAColor Color;
        [RTTI.Member(6, 0x50, "Rendering")] public float LifeTime;
        [RTTI.Member(7, 0x54, "Rendering")] public float LifeTimeRandomVariation;
        [RTTI.Member(11, 0x58, "Rendering")] public uint32 MaxContinuousFrame;
        [RTTI.Member(9, 0x5C, "Rendering")] public uint32 RandomSeed;
        [RTTI.Member(10, 0x60, "Rendering")] public bool AutoRandomSeed;
    }

    [RTTI.Serializable(0x30F80C713542E577, GameType.DS)]
    public class DSHUDBlinkEffectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x34FF93995BA29C4E, GameType.DS)]
    public class DSHUDBlinkEffectEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSHUDBlinkEffectResource> BlinkEffectResource;
        [RTTI.Member(9, 0x38, "Logic")] public EDSHUDBlinkType BlinkType;
        [RTTI.Member(12, 0x48, "TimeScale")] public float TimeScale;
        [RTTI.Member(11, 0x4C, "TimeScale")] public bool EnableMultiplyTimeScale;
    }

    [RTTI.Serializable(0xAA6352F77AE6B18E, GameType.DS)]
    public class DSHUDBlinkEffectResource : DSHUDEffectResource
    {
        [RTTI.Member(5, 0x30, "Rendering")] public Ref<RenderEffectResource> RenderEffectResource;
        [RTTI.Member(9, 0x40, "Rendering")] public FRGBAColor Color;
        [RTTI.Member(10, 0x50, "Rendering")] public float CLVMin;
        [RTTI.Member(11, 0x54, "Rendering")] public float CLVMax;
        [RTTI.Member(12, 0x58, "Rendering")] public float LuminanceScaleMin;
        [RTTI.Member(13, 0x5C, "Rendering")] public float LuminanceScaleMax;
        [RTTI.Member(6, 0x60, "Rendering")] public float TimeScale;
        [RTTI.Member(7, 0x64, "Rendering")] public uint16 MaxFrame;
        [RTTI.Member(8, 0x66, "Rendering")] public uint16 CloseFrame;
    }

    [RTTI.Serializable(0x1B2152B4F584D4F7, GameType.DS)]
    public class DSHUDEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8E0691ACE5779EF, GameType.DS)]
    public class DSHUDEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSHUDEffectResource> HUDEffectResource;
    }

    [RTTI.Serializable(0x1379DAD7F9E03E86, GameType.DS)]
    public class DSHUDEffectResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool SingleShot;
    }

    [RTTI.Serializable(0xA3DA5C1B35B46130, GameType.DS)]
    public class DSHarvesterBotMover : Mover
    {
    }

    [RTTI.Serializable(0x6FA38F1AAF64C0BB, GameType.DS)]
    public class DSHarvesterBotMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "General")] public float Velocity;
        [RTTI.Member(8, 0x2C, "General")] public float AngulerVelocity;
        [RTTI.Member(9, 0x30, "General")] public Ref<SoundResource> MovingSound;
    }

    [RTTI.Serializable(0x3170590CA2B5DB2C, GameType.DS)]
    public class DSHeartmanRoomGraphArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x24F8B05D7B771796, GameType.DS)]
    public class DSHeartmanRoomGraphArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x166B407B94012807, GameType.DS)]
    public class DSHeartmanTimerOperationSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x350A23174797F846, GameType.DS)]
    public class DSHeartmanTimerOperationSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(14, 0x30)] public EDSHeartmanTimerOperationSequenceEventCaptionType CaptionType;
        [RTTI.Member(11, 0x34)] public float TimeSeconds;
        [RTTI.Member(7, 0x38)] public bool IsInvisible;
        [RTTI.Member(8, 0x39)] public bool IsEndEventUnHide;
        [RTTI.Member(9, 0x3A)] public bool IsRun;
        [RTTI.Member(10, 0x3B)] public bool IsSetTime;
        [RTTI.Member(12, 0x3C)] public bool IsTimerWipesOut;
        [RTTI.Member(13, 0x3D)] public bool IsMute;
    }

    [RTTI.Serializable(0x1C08845CB16B50EF, GameType.DS)]
    public class DSHideEntityByStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE8CE82E2575B811C, GameType.DS)]
    public class DSHideEntityByStateComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<EDSGameStateForScript> DSGameStatesForHiding;
    }

    [RTTI.Serializable(0x531C1EF4DA4450B9, GameType.DS)]
    public class DSHiggsAiActionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE03ECDA117C41E30, GameType.DS)]
    public class DSHiggsAiActionComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(3, 0x30)] public Array<Ref<ParticleSystemResource>> PartycleSystemResources;
        [RTTI.Member(4, 0x40)] public Ref<DSOdradekEffectResource> RaderEffect;
        [RTTI.Member(7, 0x48, "Rumble")] public Array<Ref<RumbleResource>> Rumbles;
        [RTTI.Member(5, 0x58)] public Ref<DSOdradekEffectResource> MarkingEffect;
    }

    [RTTI.Serializable(0xEC33B70924E1DB6C, GameType.DS)]
    public class DSHiggsConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<WorldNode>> TeleportCandidates;
        [RTTI.Member(4, 0x30)] public Array<Ref<BooleanFact>> Facts;
        [RTTI.Member(5, 0x40)] public float P1Life;
        [RTTI.Member(6, 0x44)] public float P2Life;
        [RTTI.Member(7, 0x48)] public float P3Life;
        [RTTI.Member(3, 0x50)] public Array<Ref<WorldNode>> StageMarks;
        [RTTI.Member(8, 0x60)] public float CqcDamage;
        [RTTI.Member(9, 0x64)] public float CqcStompDamage;
        [RTTI.Member(11, 0x68, "TarSettings")] public float CryptbiosisRecoverLife;
        [RTTI.Member(12, 0x6C, "TarSettings")] public float TarCounterAttack;
        [RTTI.Member(13, 0x70, "TarSettings")] public float TarDodgeAttack;
        [RTTI.Member(14, 0x78, "TarSettings")] public Array<float> TarRates;
        [RTTI.Member(15, 0x88, "TarSettings")] public Array<float> TarAttacks;
    }

    [RTTI.Serializable(0xA7DA9769932B8100, GameType.DS)]
    public class DSHiggsDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF8401D3F1D5CD5CE, GameType.DS)]
    public class DSHiggsDamageComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xCFF7015DC65BE4C2, GameType.DS)]
    public class DSHiggsDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "MaterialTypes")] public Ref<MaterialTypeResource> CQCDownMaterialTypeResource;
    }

    [RTTI.Serializable(0x9895BE4F36AF2AB8, GameType.DS)]
    public class DSHiggsEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x54EE9EE77B70DD18, GameType.DS)]
    public class DSHiggsEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<EffectComponentResource>> EffectComponentResources;
    }

    [RTTI.Serializable(0x1272B377134DCFB4, GameType.DS)]
    public class DSHiggsFacialRigManagerComponent : DSFacialRigManagerComponent
    {
    }

    [RTTI.Serializable(0x82039C509016B6AA, GameType.DS)]
    public class DSHiggsFacialRigManagerComponentResource : DSFacialRigManagerComponentResource
    {
    }

    [RTTI.Serializable(0xE61E7FBC0335AC14, GameType.DS)]
    public class DSHiggsGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x4B7C3A5D346CEAC0, GameType.DS)]
    public class DSHiggsGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(10, 0xB0)] public Ref<DSHiggsConfig> Config;
    }

    [RTTI.Serializable(0x8E6857FC742A324E, GameType.DS)]
    public class DSHiggsGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xE2CD2ECC32619776, GameType.DS)]
    public class DSHiggsGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0xC7D8161C0BCBA451, GameType.DS)]
    public class DSHiggsGroundMovementPluginResource : DSGroundMovementPluginResource
    {
    }

    [RTTI.Serializable(0xCBC17FB8F49A8AEF, GameType.DS)]
    public class DSHiggsMovementComponent : DSGroundMovementComponent
    {
    }

    [RTTI.Serializable(0x24B1097028ABBA0A, GameType.DS)]
    public class DSHiggsMovementComponentResource : DSGroundMovementComponentResource
    {
    }

    [RTTI.Serializable(0xC7FB2CEC9F148252, GameType.DS)]
    public class DSHiggsMovementComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE36F35E20269AA56, GameType.DS)]
    public class DSHiggsSentenceSituationResource : DSSentenceSituationResource
    {
        [RTTI.Member(5, 0x38)] public int32 Priority;
        [RTTI.Member(6, 0x3C)] public EDSHiggsVoicePlayType PlayType;
        [RTTI.Member(7, 0x40)] public float MinimumInterval;
        [RTTI.Member(8, 0x44)] public float PlaybackRate;
        [RTTI.Member(9, 0x48)] public int32 AnimationEvent;
        [RTTI.Member(10, 0x50)] public String SituationNameForPlayInfo;
    }

    [RTTI.Serializable(0xC00A927B1616D032, GameType.DS)]
    public class DSHiggsSequenceVisibleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB06816770913E9A2, GameType.DS)]
    public class DSHiggsSequenceVisibleEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(10, 0x38, "Higgs")] public bool BBPodVisible;
    }

    [RTTI.Serializable(0x711AE4B5E68732CD, GameType.DS)]
    public class DSHiggsSituationSentenceGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DSHiggsSentenceSituationResource>> SituationResources;
        [RTTI.Member(4, 0x30, "General")] public HashMap<uint32_int32> SituationIndex;
    }

    [RTTI.Serializable(0xD04BF747C0D9403F, GameType.DS)]
    public class DSHiggsVoiceControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x956CDBBD5EEF89B1, GameType.DS)]
    public class DSHiggsVoiceControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSHiggsSituationSentenceGroupResource> SituationSentenceGroup;
        [RTTI.Member(3, 0x28)] public Ref<DSHiggsSituationSentenceGroupResource> SituationSentenceGroupForEvent;
        [RTTI.Member(4, 0x30)] public Ref<DSMuleOdradekSoundResources> OdradkSoundResource;
    }

    [RTTI.Serializable(0xCD4C6D707BEE79A8, GameType.DS)]
    public class DSHiggsWeaponComponent : DSNpcWeaponComponent
    {
    }

    [RTTI.Serializable(0x71F720E51378EC40, GameType.DS)]
    public class DSHiggsWeaponComponentRep : DSNpcWeaponComponentRep
    {
    }

    [RTTI.Serializable(0xDB4D0FD9220BAF2, GameType.DS)]
    public class DSHiggsWeaponComponentResource : DSNpcWeaponComponentResource
    {
    }

    [RTTI.Serializable(0x1CC447DBE3FACACC, GameType.DS)]
    public class DSHighwaySyncAmountResource : Resource
    {
        [RTTI.Member(3, 0x20, "SyncAmountControl")] public Ref<FloatFact> SyncAmountRateMin;
        [RTTI.Member(4, 0x28, "SyncAmountControl")] public Ref<FloatFact> SyncAmountRateMax;
        [RTTI.Member(5, 0x30, "SyncAmountControl")] public uint32 Hash;
    }

    [RTTI.Serializable(0x666665CBD55E841E, GameType.DS)]
    public class DSHighwaySyncControlResource : Resource
    {
        [RTTI.Member(2, 0x20)] public UUIDRef<DSDeliveryPointInfoResource> ControlTarget;
        [RTTI.Member(4, 0x30, "SequenceTarget")] public UUIDRef<DSDeliveryPointInfoResource> ChainTarget;
        [RTTI.Member(6, 0x40, "SyncAmountTarget")] public Ref<DSHighwaySyncAmountResource> SyncAmountTarget;
    }

    [RTTI.Serializable(0x3C7692DF358E0D5A, GameType.DS)]
    public class DSHighwaySyncControlResources : Resource
    {
        [RTTI.Member(3, 0x20, "LotteryResources")] public Array<Ref<DSHighwaySyncAmountResource>> LotteryBox;
        [RTTI.Member(5, 0x30, "ControlResources")] public Array<Ref<DSHighwaySyncControlResource>> ControlResources;
    }

    [RTTI.Serializable(0x5AAC270BFB9A15DD, GameType.DS)]
    public class DSHoloLineComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5EB7FFE2B8BF6B53, GameType.DS)]
    public class DSHoloLineComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Representation")] public Array<Vec3> Points;
        [RTTI.Member(5, 0x30, "Representation")] public Ref<ShaderResource> Shader;
        [RTTI.Member(3, 0x38, "Representation")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(7, 0x40, "Representation")] public Ref<CurveResource> AlphaCurve;
        [RTTI.Member(6, 0x50, "Representation")] public FRGBAColor Color;
        [RTTI.Member(8, 0x60, "Representation")] public bool AddBlend;
        [RTTI.Member(9, 0x61, "Representation")] public bool EnableDepthPenetrationDither;
        [RTTI.Member(10, 0x62, "Representation")] public bool EnableTerrainMask;
    }

    [RTTI.Serializable(0xDA6A6F052A926639, GameType.DS)]
    public class DSHoloLineEffectInstance : GeometryObject
    {
    }

    [RTTI.Serializable(0x95BEBAE26A332F42, GameType.DS)]
    public class DSHologramAnimalComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x91496F9575559461, GameType.DS)]
    public class DSHologramAnimalComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int GestureCount;
        [RTTI.Member(4, 0x24, "Logic")] public float GestureIntervalMin;
        [RTTI.Member(5, 0x28, "Logic")] public float GestureIntervalMax;
        [RTTI.Member(6, 0x2C, "Logic")] public float LoopGestureTimeMin;
        [RTTI.Member(7, 0x30, "Logic")] public float LoopGestureTimeMax;
        [RTTI.Member(8, 0x34, "Logic")] public bool UseLoopGesture;
    }

    [RTTI.Serializable(0x67666B4BD4016A8C, GameType.DS)]
    public class DSHouseholdInfoResource : Resource
    {
        [RTTI.Member(5, 0x20)] public uint32 InitialFriendship;
        [RTTI.Member(6, 0x24)] public int32 InitialFriendshipLevel;
        [RTTI.Member(8, 0x28)] public int32 LevelTH1;
        [RTTI.Member(9, 0x2C)] public int32 LevelTH2;
        [RTTI.Member(10, 0x30)] public int32 LevelTH3;
        [RTTI.Member(11, 0x34)] public int32 LevelTH4;
        [RTTI.Member(12, 0x38)] public int32 LevelTH5;
        [RTTI.Member(7, 0x3C)] public int32 LevelTHDefault;
        [RTTI.Member(4, 0x40)] public uint32 NameHash;
        [RTTI.Member(2, 0x44)] public EDSMajorMember MajorMemberId;
        [RTTI.Member(3, 0x45)] public EDSOrganizationGroup OrganizationGroup;
        [RTTI.Member(14, 0x48)] public Array<Ref<DSHouseholdPersonResource>> HouseholdPersons;
        [RTTI.Member(13, 0x58)] public Ref<IntegerFact> LevelCap;
        [RTTI.Member(15, 0x60)] public bool MemberOfBridges;
        [RTTI.Member(16, 0x68)] public Array<Ref<DSHouseholdWantsResource>> Wants;
        [RTTI.Member(21, 0x78, "Menu")] public bool IsEnableDisplayBridgesID;
        [RTTI.Member(22, 0x79, "Menu")] public bool IsDisableMapDispFriendshipLevel;
        [RTTI.Member(18, 0x80, "SwitchToMainPerson")] public Ref<DSHouseholdPersonResource> SwitchToMainPerson;
        [RTTI.Member(19, 0x88, "SwitchToMainPerson")] public Ref<BooleanFact> EnableSwitchMainPersonFact;
    }

    [RTTI.Serializable(0xEC07BA108F0B4607, GameType.DS)]
    public class DSHouseholdInfoResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBABBA00DC6E49C15, GameType.DS)]
    public class DSHouseholdPersonResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<VoiceResource> VoiceResource;
        [RTTI.Member(3, 0x28)] public EDSPersonGender Gender;
        [RTTI.Member(4, 0x2A)] public uint16 Age;
        [RTTI.Member(5, 0x30)] public StreamingRef<UITexture> PersonImageTexture;
        [RTTI.Member(6, 0x38)] public StreamingRef<UITexture> UnconnectedPersonImageTexture;
        [RTTI.Member(7, 0x40)] public Ref<LocalizedTextResource> BridgesIdLine0;
        [RTTI.Member(8, 0x48)] public Ref<LocalizedTextResource> BridgesIdLine1;
        [RTTI.Member(9, 0x50)] public uint32 PersonResourceNameHash;
    }

    [RTTI.Serializable(0xB6A7C0C7DA8AD13, GameType.DS)]
    public class DSHouseholdPersonResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x81BC542C385AB746, GameType.DS)]
    public class DSHouseholdWantsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSGameBaggageListItem>> BaggageListItems;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSCollectorsItemResource>> CollectorsItems;
    }

    [RTTI.Serializable(0x15DDCD14B80A5C11, GameType.DS)]
    public class DSHoveringCartCodeEntity : Entity
    {
    }

    [RTTI.Serializable(0xB9CAE1309F006BFB, GameType.DS)]
    public class DSHoveringCartCodeEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x2DC6B110FB8C2301, GameType.DS)]
    public class DSHoveringCartCodeEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0x3A6556CD2DF3D2BD, GameType.DS)]
    public class DSHoveringCartEntity : Entity
    {
    }

    [RTTI.Serializable(0x50DA3C9E5A656F9C, GameType.DS)]
    public class DSHoveringCartEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0xC3CB930C40658B55, GameType.DS)]
    public class DSHoveringCartEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "HoveringCartParam")] public float MaxLife;
        [RTTI.Member(32, 0x104, "HoveringCartParam")] public float LifeDecreaseSpeedInTimeFall;
        [RTTI.Member(33, 0x108, "HoveringCartParam")] public float LifeDecreaseLimitLifeInTimeFall;
        [RTTI.Member(34, 0x10C, "HoveringCartParam")] public float ImpactForReceivingDamageStarts;
        [RTTI.Member(35, 0x110, "HoveringCartParam")] public float ImpactForMaxDamage;
        [RTTI.Member(36, 0x114, "HoveringCartParam")] public float DamageAtMinImpact;
        [RTTI.Member(37, 0x118, "HoveringCartParam")] public float DamageAtMaxImpact;
        [RTTI.Member(38, 0x11C, "HoveringCartParam")] public float BaggageDamageAtMinImpact;
        [RTTI.Member(39, 0x120, "HoveringCartParam")] public float BaggageDamageAtMaxImpact;
        [RTTI.Member(40, 0x124, "HoveringCartParam")] public float BaggageDamageAtRapidRotating;
        [RTTI.Member(41, 0x128, "HoveringCartParam")] public float BaggageDamageAtVibrating;
        [RTTI.Member(42, 0x12C, "HoveringCartParam")] public float LoadingCapacity;
        [RTTI.Member(43, 0x130, "HoveringCartParam")] public float CartStopLoading;
        [RTTI.Member(52, 0x134, "DragMode_Brake")] public float MoveSpeedBrakeFadeOutStartTime_LoadingMax;
        [RTTI.Member(54, 0x138, "DragMode_Brake")] public float MoveSpeedBrakeFadeOutTime_LoadingMax;
        [RTTI.Member(53, 0x13C, "DragMode_Brake")] public float MoveSpeedBrakeFadeOutStartTime_LoadingMin;
        [RTTI.Member(55, 0x140, "DragMode_Brake")] public float MoveSpeedBrakeFadeOutTime_LoadingMin;
        [RTTI.Member(71, 0x14C, "Battery")] public float BatteryRemove_Kick;
        [RTTI.Member(72, 0x154, "Battery")] public float CartLv2_BatteryRemoveRate;
        [RTTI.Member(44, 0x158, "HoveringCartParam")] public float LoadingCapacityLv2;
        [RTTI.Member(45, 0x15C, "HoveringCartParam")] public float CartStopLoadingLv2;
        [RTTI.Member(50, 0x178, "Code")] public Ref<DSHoveringCartCodeEntityResource> DSHoveringCartCodeEntityResource;
        [RTTI.Member(48, 0x180, "PullCart")] public Ref<MoverResource> PullMoverResource;
        [RTTI.Member(57, 0x188, "Sounds")] public Ref<SoundResource> DragStart;
        [RTTI.Member(58, 0x190, "Sounds")] public Ref<SoundResource> DragEnd;
        [RTTI.Member(59, 0x198, "Sounds")] public Ref<SoundResource> DragCodeBreak;
        [RTTI.Member(60, 0x1A0, "Sounds")] public Ref<SoundResource> BatteryOver;
        [RTTI.Member(61, 0x1A8, "Sounds")] public Ref<SoundResource> CodeRollup;
        [RTTI.Member(62, 0x1B0, "Sounds")] public Ref<SoundResource> CodeExtended;
        [RTTI.Member(63, 0x1B8, "Sounds")] public Ref<SoundResource> Hit_Strong;
        [RTTI.Member(64, 0x1C0, "Sounds")] public Ref<SoundResource> Hit_Weak;
        [RTTI.Member(65, 0x1C8, "Sounds")] public Ref<SoundResource> Hit_FallGround;
        [RTTI.Member(66, 0x1D0, "Sounds")] public Ref<SoundResource> BatteryLoop;
        [RTTI.Member(67, 0x1D8, "Sounds")] public Ref<SoundResource> CartOpen;
        [RTTI.Member(68, 0x1E0, "Sounds")] public Ref<SoundResource> CartClose;
        [RTTI.Member(69, 0x1E8, "Sounds")] public Ref<SoundResource> CartTakeABreakEnd;
        [RTTI.Member(46, 0x1F0, "HoveringCartParam")] public Ref<AIVisualStimulusResource> VisualStimulus;
    }

    [RTTI.Serializable(0x5F9AE236AC85E540, GameType.DS)]
    public class DSHumanHeadAimToPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8EF6C88CC09A1CF0, GameType.DS)]
    public class DSHumanHeadAimToPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float AimUpDownAdjust;
        [RTTI.Member(3, 0x24)] public float EyeAdjust;
    }

    [RTTI.Serializable(0xB124F7E4637B2490, GameType.DS)]
    public class DSHumanHeadAimToPlayerEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x2D4EBE5B1A5DEC53, GameType.DS)]
    public class DSHumanHeadAimToPlayerEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<CurveResource> AimWeightCurve;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<CurveResource> OverrideEyeAimWeightCurve;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<CurveResource> OffsetXCurve;
        [RTTI.Member(12, 0x50, "Logic")] public Ref<CurveResource> OffsetYCurve;
        [RTTI.Member(13, 0x58, "Logic")] public Ref<CurveResource> OffsetZCurve;
        [RTTI.Member(14, 0x60, "Logic")] public float StartInterpTime;
        [RTTI.Member(15, 0x64, "Logic")] public float EndInterpTime;
    }

    [RTTI.Serializable(0x7E07BCD725B54A87, GameType.DS)]
    public class DSHunterAreaComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1E92235AF8CF5AAA, GameType.DS)]
    public class DSHunterAreaComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<CurveResource> FadeInCurve;
        [RTTI.Member(3, 0x28)] public Ref<CurveResource> FadeOutCurve;
        [RTTI.Member(4, 0x30)] public float Radius;
    }

    [RTTI.Serializable(0xBE20EA56E77526AE, GameType.DS)]
    public class DSHunterCommonConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSHunterDifficultyConfig>> DifficultyConfigs;
        [RTTI.Member(3, 0x30)] public float MemberWeight;
        [RTTI.Member(4, 0x34)] public float NoSpawnTimeDefault;
        [RTTI.Member(5, 0x38)] public float NoSpawnTimeNearBaggage;
        [RTTI.Member(6, 0x3C)] public float PullBackPlayerCapacityRate;
        [RTTI.Member(7, 0x40)] public float NoPullBackPlayerTime;
        [RTTI.Member(8, 0x44)] public float PullBackPlayerIfNoAttackedTime;
        [RTTI.Member(9, 0x48)] public float ReinforceCycleTime;
    }

    [RTTI.Serializable(0xC56BDE92FF417CD8, GameType.DS)]
    public class DSHunterComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3D2B24242648B0F4, GameType.DS)]
    public class DSHunterComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ParticleSystemResource> WaterEffectParticleSystem;
        [RTTI.Member(3, 0x28)] public Ref<ShakeResource> EmergenceShakeResource;
        [RTTI.Member(4, 0x30)] public Ref<ShakeResource> GroundHitingShakeResource;
        [RTTI.Member(5, 0x38)] public Array<Ref<SoundResource>> SoundResources;
    }

    [RTTI.Serializable(0xA0D1AA89FB3DCC6, GameType.DS)]
    public class DSHunterCrowdComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9D11A8648FC32E99, GameType.DS)]
    public class DSHunterCrowdComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x88EA2F855CCAC981, GameType.DS)]
    public class DSHunterCrowdComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSHunterCommonConfig> CommonConfig;
        [RTTI.Member(3, 0x28)] public Ref<DSHunterCrowdConfig> DefaultConfig;
        [RTTI.Member(4, 0x30)] public Ref<DSHunterCrowdConfig> ForVehicleConfig;
        [RTTI.Member(5, 0x38)] public Ref<EntityResource> AreaResource;
        [RTTI.Member(6, 0x40)] public Ref<RumbleResource> NormalRumbleResource;
        [RTTI.Member(7, 0x48)] public Ref<RumbleResource> StartRumbleResource;
        [RTTI.Member(8, 0x50)] public Ref<RumbleResource> ClingRumbleResource;
        [RTTI.Member(9, 0x58)] public Ref<ShakeResource> NormalShakeResource;
        [RTTI.Member(10, 0x60)] public Ref<ShakeResource> ClingShakeResource;
        [RTTI.Member(11, 0x68)] public Ref<StaticMeshResource> TarMeshResource;
        [RTTI.Member(12, 0x70)] public Ref<EffectComponentResource> BogEffectResource;
        [RTTI.Member(13, 0x78)] public Ref<EffectComponentResource> GrabBaggageEffectResource;
        [RTTI.Member(14, 0x80)] public Ref<DSHunterTarParameter> TarParameter;
        [RTTI.Member(15, 0x88)] public float OutsideDestroyTime;
        [RTTI.Member(16, 0x8C)] public float OutsideDestroyDistance;
    }

    [RTTI.Serializable(0x619CC36D44B17945, GameType.DS)]
    public class DSHunterCrowdConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> MemberResource;
        [RTTI.Member(3, 0x28)] public bool IsFromFront;
        [RTTI.Member(4, 0x29)] public bool IsBlocker;
        [RTTI.Member(5, 0x2A)] public bool IsAutoSpawn;
        [RTTI.Member(6, 0x2B)] public bool IsSinker;
        [RTTI.Member(7, 0x2C)] public int SinkStartCount;
        [RTTI.Member(8, 0x30)] public Array<int> MembersCountStep;
    }

    [RTTI.Serializable(0xE7F73110D1723216, GameType.DS)]
    public class DSHunterDifficultyConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EDSDifficulty Difficulty;
        [RTTI.Member(3, 0x24)] public int MembersCountMin;
        [RTTI.Member(4, 0x28)] public int SinkStartCountForCatcherBattle;
        [RTTI.Member(5, 0x2C)] public int MortorbikeRiderTakeDownClingCount;
        [RTTI.Member(6, 0x30)] public float MoveSpeedRateForCatcherBattle;
        [RTTI.Member(7, 0x34)] public float AreaRadiusRate;
        [RTTI.Member(8, 0x38)] public float VehicleDriverTakeDownTime;
    }

    [RTTI.Serializable(0xCD3DFEC7797DBFC7, GameType.DS)]
    public class DSHunterManagerResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> NormalHunterResource;
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> BlockerHunterResource;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> GoldHunterResource;
        [RTTI.Member(5, 0x38)] public Ref<EntityResource> CatcherHunterResource;
        [RTTI.Member(6, 0x40)] public Ref<EntityResource> HideoHunterResource;
        [RTTI.Member(7, 0x48)] public Ref<BooleanFact> EnableBlockerHunterFact;
    }

    [RTTI.Serializable(0xDABCB1B9778AB7C4, GameType.DS)]
    public class DSHunterMemberComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB0964E3714327A03, GameType.DS)]
    public class DSHunterMemberComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSHunterMemberConfig> Config;
        [RTTI.Member(3, 0x28)] public Ref<DSHunterCommonConfig> CommonConfig;
        [RTTI.Member(4, 0x30)] public Array<String> MeshPartNames;
    }

    [RTTI.Serializable(0x23D53FD8CF3797D6, GameType.DS)]
    public class DSHunterMemberConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float LifeMax;
        [RTTI.Member(3, 0x24)] public float MoveSpeedMax;
        [RTTI.Member(4, 0x28)] public float RotationSpeedMax;
        [RTTI.Member(5, 0x2C)] public float AllowedClingBloodDirtyMax;
        [RTTI.Member(7, 0x30)] public float MudEffectDelayTime;
        [RTTI.Member(6, 0x34)] public float ClingingCheckLength;
        [RTTI.Member(8, 0x38)] public bool IsMoveInTarOnly;
        [RTTI.Member(9, 0x39)] public bool IsCatcherBattle;
        [RTTI.Member(10, 0x40)] public Ref<DSHunterOvertakeConfig> OvertakeConfig;
    }

    [RTTI.Serializable(0x8E73FD00CD48024B, GameType.DS)]
    public class DSHunterOvertakeConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float MoveSpeedMax;
        [RTTI.Member(3, 0x24)] public float RotationSpeedMax;
    }

    [RTTI.Serializable(0xCD499790DC79CA7B, GameType.DS)]
    public class DSHunterSubInstanceComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x53956CEFCA83B89F, GameType.DS)]
    public class DSHunterSubInstanceComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ParticleSystemResource> ParticleSystem;
    }

    [RTTI.Serializable(0xD2A0F1E81B150EE, GameType.DS)]
    public class DSHunterTarParameter : Resource
    {
        [RTTI.Member(2, 0x20)] public float DelayTime;
        [RTTI.Member(3, 0x24)] public float UVRepeat;
        [RTTI.Member(4, 0x28)] public float FlowSpeed;
        [RTTI.Member(5, 0x2C)] public float SurfScale;
        [RTTI.Member(6, 0x30)] public float TraceStateInterpTime;
        [RTTI.Member(7, 0x34)] public float TraceStateMeshScale;
        [RTTI.Member(8, 0x38)] public float DragStateInterpTime;
        [RTTI.Member(9, 0x3C)] public float DragStateMeshScale;
        [RTTI.Member(10, 0x40)] public float DestroyStateInterpTime;
    }

    [RTTI.Serializable(0x13C489FD6FEC0A11, GameType.DS)]
    public class DSInferencePluginBaseResource : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xEB9051F7208EB952, GameType.DS)]
    public class DSInsideTerminalSecurityContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x6694B94003543607, GameType.DS)]
    public class DSInsideTerminalSecurityContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFF56A1613BF01C45, GameType.DS)]
    public class DSInteractionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB07A40E068FE8538, GameType.DS)]
    public class DSInteractionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE127A1AD73C093B6, GameType.DS)]
    public class DSInteractionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public EnvironmentInteractionTargets Targets;
    }

    [RTTI.Serializable(0x3A91CD86B3B5CB20, GameType.DS)]
    public class DSInterviewResource2 : DSTipsResourceBase
    {
        [RTTI.Member(10, 0x40, "Attribute")] public EDSInterviewGroup Group;
        [RTTI.Member(13, 0x48, "ExtendText")] public Ref<LocalizedTextResource> WhoText;
        [RTTI.Member(14, 0x50, "ExtendText")] public Ref<LocalizedTextResource> WhenText;
        [RTTI.Member(15, 0x58, "ExtendText")] public Ref<LocalizedTextResource> WhereText;
        [RTTI.Member(17, 0x60, "Texture")] public StreamingRef<UITexture> InterviewTexture;
        [RTTI.Member(11, 0x68, "Attribute")] public uint64 TargetMissionId;
        [RTTI.Member(19, 0x70, "Options")] public bool CanDeferred;
    }

    [RTTI.Serializable(0xBE4C079F7DDC5FC9, GameType.DS)]
    public class DSIntruderDetectorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA431101704FEE188, GameType.DS)]
    public class DSIntruderDetectorComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String HelperName;
        [RTTI.Member(3, 0x30)] public BoundingBox3 LocalBoundingBox;
        [RTTI.Member(4, 0x50)] public float ActivationRadius;
        [RTTI.Member(5, 0x54)] public bool ActivateOnInit;
        [RTTI.Member(7, 0x55, "Target")] public bool Player;
        [RTTI.Member(8, 0x56, "Target")] public bool Humanoid;
        [RTTI.Member(9, 0x57, "Target")] public bool BT;
        [RTTI.Member(10, 0x58, "Target")] public bool Vehicle;
        [RTTI.Member(11, 0x59, "Target")] public bool Cart;
        [RTTI.Member(12, 0x5A, "Target")] public bool Construction;
        [RTTI.Member(13, 0x5B, "Target")] public bool Baggage;
    }

    [RTTI.Serializable(0x909455D535D8D336, GameType.DS)]
    public class DSIntruderDetectorComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD6E1068C71CA8E63, GameType.DS)]
    public class DSInventoryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x423666D3610BA95E, GameType.DS)]
    public class DSInventoryComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x2292C0CF8A036A75, GameType.DS)]
    public class DSItemCommonConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public int32 Dummy;
    }

    [RTTI.Serializable(0x2E032E692695B8EA, GameType.DS)]
    public class DSItemParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSItemId Id;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(5, 0x30, "Parameters")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(6, 0x38, "Parameters")] public String IconTextureName;
        [RTTI.Member(7, 0x40, "Parameters")] public EDSUIEquipFuncIcon EquipFuncIcon;
        [RTTI.Member(8, 0x48, "Parameters")] public Ref<DSGameCommodityListItem> ListItem;
        [RTTI.Member(9, 0x50, "Parameters")] public int32 Count;
        [RTTI.Member(10, 0x54, "Parameters")] public float Value;
        [RTTI.Member(11, 0x58, "Parameters")] public float ValueDecreaseSpeed;
        [RTTI.Member(12, 0x5C, "Parameters")] public float ValueRecoverSpeed;
        [RTTI.Member(13, 0x60, "Parameters")] public float ValueRecoverWait;
        [RTTI.Member(14, 0x64, "Parameters")] public int SelectionCount;
        [RTTI.Member(15, 0x68, "Parameters")] public bool UseByButton;
        [RTTI.Member(16, 0x69, "Parameters")] public bool BatteryType;
        [RTTI.Member(17, 0x6A, "Parameters")] public bool SelectionType;
        [RTTI.Member(18, 0x70, "Parameters")] public Array<Ref<LocalizedTextResource>> SelectionName;
        [RTTI.Member(19, 0x80, "Parameters")] public Ref<ArtPartsDataResource> InCaseArtPartsResource;
        [RTTI.Member(20, 0x88, "Parameters")] public String InCaseAttachHelperName;
    }

    [RTTI.Serializable(0x41E365060D25D38B, GameType.DS)]
    public class DSJavelin : DSThrowable
    {
    }

    [RTTI.Serializable(0x2CBE1E397500B950, GameType.DS)]
    public class DSJavelinResource : DSThrowableResource
    {
        [RTTI.Member(84, 0x210, "Javelin")] public Ref<DSFollowingSoundComponentResource> NotifySound;
        [RTTI.Member(85, 0x218, "Javelin")] public Ref<DSFollowingSoundComponentResource> HitSound;
        [RTTI.Member(87, 0x220, "HomingJavelin")] public float HeadingSmoothFactor;
        [RTTI.Member(88, 0x224, "HomingJavelin")] public float SpeedSmoothFactor;
        [RTTI.Member(90, 0x228, "ElectricArea")] public float ElectricAreaDelay;
        [RTTI.Member(91, 0x230, "ElectricArea")] public Ref<EffectComponentResource> ElectricEffectResource;
    }

    [RTTI.Serializable(0x4139D0123871B395, GameType.DS)]
    public class DSJointAimToBaseComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB336D8D5F42DDA42, GameType.DS)]
    public class DSJointAimToBaseComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Vec3 TargetVector;
        [RTTI.Member(3, 0x30)] public Vec3 RotationAxis;
        [RTTI.Member(4, 0x40)] public float SpeedGain;
        [RTTI.Member(5, 0x44)] public uint JointIndex;
        [RTTI.Member(6, 0x48)] public Ref<SoundResource> SoundResource;
        [RTTI.Member(7, 0x50)] public float RotSpeedToPlaySound;
        [RTTI.Member(8, 0x54)] public float MaxSpeed;
    }

    [RTTI.Serializable(0xA8915F2A26624A96, GameType.DS)]
    public class DSJointAimToBaseComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7CF48ECFC016E621, GameType.DS)]
    public class DSJointAimToPlayerComponent : DSJointAimToBaseComponent
    {
    }

    [RTTI.Serializable(0x4B1AD264D1BD8E71, GameType.DS)]
    public class DSJointAimToPlayerComponentResource : DSJointAimToBaseComponentResource
    {
    }

    [RTTI.Serializable(0xA2CA265AC186E0CC, GameType.DS)]
    public class DSJointAimToVectorComponent : DSJointAimToBaseComponent
    {
    }

    [RTTI.Serializable(0xBC6E55E5D3A6BF06, GameType.DS)]
    public class DSJointAimToVectorComponentResource : DSJointAimToBaseComponentResource
    {
    }

    [RTTI.Serializable(0x8429A36ABA74A35B, GameType.DS)]
    public class DSJointRotationConfiguration
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public uint8 JointIndex;
        [RTTI.Member(2, 0xC)] public float RotationPercent;
    }

    [RTTI.Serializable(0x2863149D6B15E10B, GameType.DS)]
    public class DSJointWeight
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float Weight;
    }

    [RTTI.Serializable(0xDDF21F0AF753F28F, GameType.DS)]
    public class DSKnotSpaceResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSKnotSpaceSubEntityResource>> SubEntityResources;
        [RTTI.Member(3, 0x30)] public Array<StreamingRef<DSKnotSpaceSubEntityStreamResource>> SubEntityStreamResources;
        [RTTI.Member(4, 0x40)] public Ref<Fact> SubEntityStreamResourceFact;
        [RTTI.Member(5, 0x48)] public Array<Ref<DSWaterSurfaceRefractLocator>> WaterSurfaceRefractLocators;
        [RTTI.Member(6, 0x58)] public Array<WorldTransform> LocatorDefaultTransforms;
        [RTTI.Member(7, 0x68)] public Ref<EntityResource> BlackSamEntityResource;
        [RTTI.Member(8, 0x70)] public Ref<EntityResource> GhostBodyEntityResource;
        [RTTI.Member(9, 0x78)] public Ref<Fact> FactIsBlackSamGameOver;
    }

    [RTTI.Serializable(0xE31695DDE1B4F567, GameType.DS)]
    public class DSKnotSpaceSubEntityResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public String Identifier;
        [RTTI.Member(3, 0x28)] public WorldTransform WorldTransform;
        [RTTI.Member(4, 0x68)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(5, 0x70)] public Ref<DSTacticalPointGroup> TacticalPointGroup;
        [RTTI.Member(6, 0x78)] public Ref<Fact> Fact;
    }

    [RTTI.Serializable(0x764E5E3243FD95A3, GameType.DS)]
    public class DSKnotSpaceSubEntityStreamResource : DSKnotSpaceSubEntityStreamResourceInterface
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(5, 0x38)] public WorldTransform WorldTransform;
        [RTTI.Member(6, 0x78)] public Ref<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0xF3F44CF3A8BD3B47, GameType.DS)]
    public class DSKnotSpaceSubEntityStreamResourceInterface : Resource
    {
    }

    [RTTI.Serializable(0xB4F6B9C7C5B429B, GameType.DS)]
    public class DSKnotSpaceSubEntityStreamResourceInterfaceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF7CC3CC0EF9EB8AC, GameType.DS)]
    public class DSKnotSpaceSubEntityStreamResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x76A052AB8774454A, GameType.DS)]
    public class DSKnotspaceEchoComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5C4E36A0F33A9088, GameType.DS)]
    public class DSKnotspaceEchoComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SentenceResource>> EchoSentenceResources;
        [RTTI.Member(3, 0x30)] public Ref<SoundResource> UnderwaterGurgleSoundResource;
    }

    [RTTI.Serializable(0x1D9B765E888BA1B7, GameType.DS)]
    public class DSLadder : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0x6938EDEDC29B19A2, GameType.DS)]
    public class DSLadderConfig : CoreObject
    {
        [RTTI.Member(2, 0x20)] public float DistanceToRealize;
        [RTTI.Member(3, 0x24)] public float DistanceToUnrealize;
        [RTTI.Member(4, 0x28)] public Array<Ref<ArtPartsDataResource>> ArtPartsDataResources;
        [RTTI.Member(5, 0x38)] public Array<Ref<EntityResource>> EntityResources;
        [RTTI.Member(6, 0x48)] public Array<Ref<ParticleSystemResource>> Particles;
    }

    [RTTI.Serializable(0xB88F46E4A91306DF, GameType.DS)]
    public class DSLadderConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(114, 0x490)] public Ref<AIPathObjectCategory> NavmeshCategory;
        [RTTI.Member(115, 0x498)] public Ref<NavMeshBuilderSettings> NavmeshSettings;
        [RTTI.Member(116, 0x4A0)] public BoundingBox3 NpcNotAllowedBox;
    }

    [RTTI.Serializable(0xE4182BBFE0A77964, GameType.DS)]
    public class DSLadderLocator : DSDeliveryPointLocator
    {
        [RTTI.Member(26, 0xD0)] public bool NoDisplay;
        [RTTI.Member(27, 0xD1)] public bool IsRoundShape;
        [RTTI.Member(28, 0xD4)] public float Length;
        [RTTI.Member(29, 0xD8)] public float Width;
    }

    [RTTI.Serializable(0x280288BFD3259571, GameType.DS)]
    public class DSLadderMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0x50772C1A968F47B5, GameType.DS)]
    public class DSLadderMoverResource : PhysicsMoverResource
    {
        [RTTI.Member(16, 0x58)] public Ref<MaterialTypeResource> LadderMaterial;
        [RTTI.Member(17, 0x60)] public Ref<MaterialTypeResource> WaterMaterial;
        [RTTI.Member(18, 0x68)] public Array<Vec3> ImpactCheckPositions;
        [RTTI.Member(19, 0x78)] public float CheckLength;
        [RTTI.Member(20, 0x80)] public Ref<SoundResource> SoundFalling;
        [RTTI.Member(21, 0x88)] public Ref<SoundResource> SoundHit;
        [RTTI.Member(22, 0x90)] public Ref<EntityResource> ConstraintEntityResource;
    }

    [RTTI.Serializable(0xBC1E3BEFE4F3E1F5, GameType.DS)]
    public class DSLaserBeamComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3CDB630C62FA386F, GameType.DS)]
    public class DSLaserBeamComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<LaserBeamResource> LaserBeamResource;
        [RTTI.Member(3, 0x28)] public Ref<LaserBeamResource> LaserBeamResource2;
    }

    [RTTI.Serializable(0xCB1D6C383D12ABEB, GameType.DS)]
    public class DSLeargeBuildingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3886AE84D0CC02F3, GameType.DS)]
    public class DSLeargeBuildingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public int QpidID;
        [RTTI.Member(5, 0x24, "DS")] public float LodDistance;
        [RTTI.Member(6, 0x28, "DS")] public Array<uint32> AnimationList;
        [RTTI.Member(8, 0x38, "DS")] public float AnimationSpeedScaleMin;
        [RTTI.Member(9, 0x3C, "DS")] public float AnimationSpeedScaleMax;
        [RTTI.Member(10, 0x40, "DS")] public float AnimationSpeedWindLimit;
        [RTTI.Member(11, 0x44, "DS")] public float StrongWindValue;
        [RTTI.Member(12, 0x48, "DS")] public bool UseRandomAnimation;
        [RTTI.Member(13, 0x49, "DS")] public bool ChangeSpeedByWind;
        [RTTI.Member(4, 0x4C, "DS")] public int32 FriendshipLevel;
        [RTTI.Member(7, 0x50, "DS")] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(15, 0x60, "AttachChildren")] public Array<Ref<EntityResource>> AttachChildren;
        [RTTI.Member(16, 0x70, "AttachChildren")] public float CreateChildrenDistance;
    }

    [RTTI.Serializable(0x2F1EF92FB4B03B03, GameType.DS)]
    public class DSLegendIcon
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> Texture;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> PressAndHoldTexture;
    }

    [RTTI.Serializable(0xC04586AFF33F2437, GameType.DS)]
    public class DSLegendIconBinding
    {
        [RTTI.Member(0, 0x0)] public ELegendButton Button;
        [RTTI.Member(1, 0x8)] public DSLegendIconSet LegendIconSet;
        [RTTI.Member(2, 0x68)] public EFloating Alignment;
    }

    [RTTI.Serializable(0x26BB4C99E982D86D, GameType.DS)]
    public class DSLegendIconSet
    {
        [RTTI.Member(0, 0x0)] public DSLegendIcon MouseKeyboardLegendIcon;
        [RTTI.Member(1, 0x10)] public DSLegendIcon KeyboardAZERTYLegendIcon;
        [RTTI.Member(2, 0x20)] public DSLegendIcon GamepadDefaultLegendIcon;
        [RTTI.Member(3, 0x30)] public DSLegendIcon GamepadTypeALegendIcon;
        [RTTI.Member(4, 0x40)] public DSLegendIcon GamepadTypeBLegendIcon;
        [RTTI.Member(5, 0x50)] public DSLegendIcon GamepadTypeCLegendIcon;
    }

    [RTTI.Serializable(0x7AF8462A679ECA05, GameType.DS)]
    public class DSLevelUpRequirement : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float TimeToLevelUp;
        [RTTI.Member(3, 0x28)] public Array<DSRequiredMaterial> RequiredMaterials;
    }

    [RTTI.Serializable(0x52FC5308DD9602A3, GameType.DS)]
    public class DSLikeCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x11A2FD69CAFBE0A, GameType.DS)]
    public class DSLikeCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBF7553E6D551B335, GameType.DS)]
    public class DSLikeParam : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float ZipUseParamWeight;
        [RTTI.Member(3, 0x24)] public float ZipUseParamDistance;
        [RTTI.Member(4, 0x28)] public float _0;
        [RTTI.Member(5, 0x2C)] public float _1;
        [RTTI.Member(6, 0x30)] public float BridgeUseParamWeight;
        [RTTI.Member(7, 0x34)] public float BridgeUseParamDistance;
        [RTTI.Member(8, 0x38)] public float ChargerUseParam;
        [RTTI.Member(9, 0x3C)] public float PostUseParam;
        [RTTI.Member(10, 0x40)] public Array<float> RainShelterUseParamCloudy;
        [RTTI.Member(11, 0x50)] public Array<float> RainShelterUseParamRainy;
        [RTTI.Member(12, 0x60)] public Array<float> RainShelterUseParamSnowy;
        [RTTI.Member(13, 0x70)] public float RainShelterUseParamTime;
        [RTTI.Member(14, 0x74)] public float SafeHouseUseParam;
        [RTTI.Member(15, 0x78)] public float WatchTowerUseParam;
        [RTTI.Member(16, 0x7C)] public float HighwayUseParam;
        [RTTI.Member(17, 0x80)] public float HighwayUseParamWeight;
        [RTTI.Member(18, 0x84)] public float BikeUseParam;
        [RTTI.Member(19, 0x88)] public float TruckUseParam;
        [RTTI.Member(20, 0x8C)] public float MaterialParamAdded;
        [RTTI.Member(21, 0x90)] public float MaterialParamLevelUp;
        [RTTI.Member(22, 0x94)] public float MaterialParamWanted;
        [RTTI.Member(23, 0x98)] public float MaterialParamRepair;
        [RTTI.Member(24, 0x9C)] public float MaterialParamRecycle;
        [RTTI.Member(25, 0xA0)] public float RoadRebuildLevelRateLow;
        [RTTI.Member(26, 0xA4)] public float RoadRebuildMaterialRateLow;
        [RTTI.Member(27, 0xA8)] public float RoadRebuildMaxLow;
        [RTTI.Member(28, 0xAC)] public float RoadRebuildLevelRateHigh;
        [RTTI.Member(29, 0xB0)] public float RoadRebuildMaterialRateHigh;
        [RTTI.Member(30, 0xB4)] public float RoadRebuildMaxHigh;
        [RTTI.Member(31, 0xB8)] public float RoadRebuildLevelRateLadder;
        [RTTI.Member(32, 0xBC)] public float RoadRebuildLevelRateRope;
        [RTTI.Member(33, 0xC0)] public float WeightPlayer;
        [RTTI.Member(34, 0xC4)] public float WeightBike;
        [RTTI.Member(35, 0xC8)] public float WeightTruck;
        [RTTI.Member(36, 0xCC)] public int32 BackpackAccessoryLike;
        [RTTI.Member(37, 0xD0)] public float BackpackAccessoryRate;
        [RTTI.Member(38, 0xD4)] public int32 HighwayParamN;
        [RTTI.Member(39, 0xD8)] public int32 HighwayParamM;
        [RTTI.Member(40, 0xDC)] public int32 HighwayParamP;
        [RTTI.Member(41, 0xE0)] public int32 HighwayMaxLike;
    }

    [RTTI.Serializable(0x91312B094AD3CA53, GameType.DS)]
    public class DSLikeSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Parameter")] public int64 DefaultLike;
        [RTTI.Member(4, 0x28, "Parameter")] public int64 MaxLike;
        [RTTI.Member(5, 0x30, "Parameter")] public int64 MinLike;
        [RTTI.Member(6, 0x38, "Parameter")] public int32 LikeDeadlineFlame;
        [RTTI.Member(8, 0x3C, "BT")] public uint32 CutGazerUmbilicalCord;
        [RTTI.Member(10, 0x40, "FriendlyMule")] public uint32 FriendlyMuleLike;
        [RTTI.Member(11, 0x44, "FriendlyMule")] public int32 FriendlyMuleDislikeLevel1;
        [RTTI.Member(12, 0x48, "FriendlyMule")] public int32 FriendlyMuleDislikeLevel2;
        [RTTI.Member(13, 0x4C, "FriendlyMule")] public int32 FriendlyMuleDislikeLevel3;
        [RTTI.Member(14, 0x50, "FriendlyMule")] public Ref<SoundResource> FriendlyMuleDislikeLevel1Sound;
        [RTTI.Member(15, 0x58, "FriendlyMule")] public Ref<SoundResource> FriendlyMuleDislikeLevel2Sound;
        [RTTI.Member(16, 0x60, "FriendlyMule")] public Ref<SoundResource> FriendlyMuleDislikeLevel3Sound;
        [RTTI.Member(18, 0x68, "BaggageInTarSwamp")] public uint32 SizeS;
        [RTTI.Member(19, 0x6C, "BaggageInTarSwamp")] public uint32 SizeM;
        [RTTI.Member(20, 0x70, "BaggageInTarSwamp")] public uint32 SizeL;
        [RTTI.Member(21, 0x74, "BaggageInTarSwamp")] public uint32 SizeLL;
        [RTTI.Member(23, 0x78, "GiveLikeAcceptSetting")] public float MinSeconds;
        [RTTI.Member(24, 0x7C, "GiveLikeAcceptSetting")] public float MaxSeconds;
        [RTTI.Member(25, 0x80, "GiveLikeAcceptSetting")] public uint32 NeedToIncreaseOneSeconds;
        [RTTI.Member(27, 0x84, "MissionCancelDislike")] public uint32 MissionCancelDislike;
        [RTTI.Member(33, 0x88, "GiveLikeSetting")] public Array<float> AcceptSecondsByPorterRank;
        [RTTI.Member(29, 0x98, "Trophy")] public Array<Ref<TrophyResource>> LikeTrophies;
        [RTTI.Member(30, 0xA8, "Trophy")] public uint32 TotalReceiveCountLow;
        [RTTI.Member(31, 0xAC, "Trophy")] public uint32 TotalReceiveCountHigh;
    }

    [RTTI.Serializable(0x1D967A881D6E1584, GameType.DS)]
    public class DSLivelyObjectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x33709EEBC344C35F, GameType.DS)]
    public class DSLivelyObjectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(3, 0x30)] public float Scale;
    }

    [RTTI.Serializable(0x36B3C0EF69F7A002, GameType.DS)]
    public class DSLoadingTipsResource : DSTipsResourceBase
    {
    }

    [RTTI.Serializable(0x7F267D64927BD560, GameType.DS)]
    public class DSLocator : WorldNode
    {
        [RTTI.Member(5, 0x0, "General")] public String Name;
    }

    [RTTI.Serializable(0xDF0CD8C9551D612C, GameType.DS)]
    public class DSLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9B4CAFCA549E7AB4, GameType.DS)]
    public class DSLockOnComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x74B2DBB554EE2B34, GameType.DS)]
    public class DSLockOnComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSLockOnConfiguration>> Configurations;
    }

    [RTTI.Serializable(0x9C54EB6D17423552, GameType.DS)]
    public class DSLockOnConfiguration : Resource
    {
        [RTTI.Member(2, 0x20)] public String JointName;
        [RTTI.Member(3, 0x30)] public Vec3 Offset;
        [RTTI.Member(4, 0x40)] public EDSLockType LockType;
        [RTTI.Member(5, 0x44)] public int GroupId;
    }

    [RTTI.Serializable(0xA301D01B92901A17, GameType.DS)]
    public class DSLockOnSystem : RTTIObject
    {
    }

    [RTTI.Serializable(0x619872572567FA60, GameType.DS)]
    public class DSLocomotionMover : LocomotionMover
    {
    }

    [RTTI.Serializable(0xB11E3E4A924DBD33, GameType.DS)]
    public class DSLocomotionMoverResource : LocomotionMoverResource
    {
        [RTTI.Member(7, 0x28, "DS")] public Ref<DSMoverSupportComponentResource> MoverSupportComponent;
        [RTTI.Member(8, 0x30, "DS")] public Array<Ref<DSMoverSupportComponentResource>> AdditionalMoverSupportComponent;
    }

    [RTTI.Serializable(0x1B90876A805098B0, GameType.DS)]
    public class DSLoomingWallEntity : Entity
    {
    }

    [RTTI.Serializable(0x91D9B9B66F82DE36, GameType.DS)]
    public class DSLoomingWallEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "TestGroup")] public float DummyValue;
    }

    [RTTI.Serializable(0x8023D58C3C40E894, GameType.DS)]
    public class DSLostBaggageGeneratorBaseResource : Resource
    {
        [RTTI.Member(16, 0x20, "Info")] public Ref<DSGenericLostBaggageDeliveryInfoResources> DeliveryInfoList;
        [RTTI.Member(17, 0x28, "Info")] public Array<Ref<DSGenericLostBaggageDeliveryInfoResource>> DeliveryInfos;
        [RTTI.Member(5, 0x38, "Baggage")] public Array<Ref<DSGameBaggageListItem>> BaggageOfCandidates;
        [RTTI.Member(6, 0x48, "Baggage")] public Array<Ref<DSGenericLostBaggageListItems>> BaggageOfCandidateList;
        [RTTI.Member(7, 0x58, "Baggage")] public Array<Ref<DSLostBaggageWithNameAndIconListResource>> DestinationAndBaggageWithTextIcons;
        [RTTI.Member(18, 0x68, "Info")] public Array<Ref<DSGenericLostBaggageGeneratorHistoryResource>> Histories;
        [RTTI.Member(20, 0x78, "Condition")] public Ref<BooleanFact> EnableCondition;
        [RTTI.Member(21, 0x80, "Condition")] public Ref<BooleanFact> MuleAreaOrBTAreaCondition;
        [RTTI.Member(22, 0x88, "Condition")] public Ref<BooleanFact> ForceDisableCondition;
        [RTTI.Member(12, 0x90, "Info")] public uint32 UniqueId;
        [RTTI.Member(23, 0x94, "Condition")] public uint32 RegenerationPeriod;
        [RTTI.Member(24, 0x98, "Condition")] public bool PriorityOverOnline;
        [RTTI.Member(26, 0x99, "Condition")] public bool IgnoreCatalogueUnlock;
        [RTTI.Member(8, 0x9A, "Baggage")] public bool MuleDoesNotTake;
        [RTTI.Member(9, 0x9B, "Baggage")] public bool HardToFind;
        [RTTI.Member(10, 0x9C, "Baggage")] public bool MulesProperty;
        [RTTI.Member(3, 0x9E, "Location")] public EDSArea Area;
        [RTTI.Member(25, 0xA0, "Condition")] public float RespawnDistance;
        [RTTI.Member(13, 0xA4, "Info")] public bool SelectRandomDeliveryPoint;
        [RTTI.Member(14, 0xA5, "Info")] public bool SelectRandomUCADeliveryPoint;
        [RTTI.Member(15, 0xA6, "Info")] public bool ForceSelectRandomDeliveryPoint;
    }

    [RTTI.Serializable(0x6767AE134EB3C8B2, GameType.DS)]
    public class DSLostBaggageGeneratorFactContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xEAD2D192E7C6A7D1, GameType.DS)]
    public class DSLostBaggageGeneratorFactContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD0EB985FB2EF42F9, GameType.DS)]
    public class DSLostBaggageGeneratorToPostResource : DSLostBaggageGeneratorBaseResource
    {
        [RTTI.Member(28, 0xA8, "Location")] public Ref<DSDeliveryPointInfoResource> PostOrTerminal;
        [RTTI.Member(29, 0xB0, "Location")] public float Radius;
    }

    [RTTI.Serializable(0xE00973F9EF447F41, GameType.DS)]
    public class DSLostBaggageWithNameAndIconListCollection : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSArea Area;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSLostBaggageWithNameAndIconListResource>> List;
    }

    [RTTI.Serializable(0x543FA27CF297F87C, GameType.DS)]
    public class DSLostBaggageWithNameAndIconListResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSDeliveryPointInfoResource> Destination;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSGameBaggageListItem>> Baggages;
    }

    [RTTI.Serializable(0x79E484C21A500FC9, GameType.DS)]
    public class DSMagazineParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSMagazineId Id;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(5, 0x30, "Parameters")] public Ref<LocalizedTextResource> DescriptionStr;
        [RTTI.Member(6, 0x38, "Parameters")] public String IconTextureName;
        [RTTI.Member(7, 0x40, "Parameters")] public EDSUIEquipFuncIcon EquipFuncIcon;
        [RTTI.Member(8, 0x42, "Parameters")] public EDSUIEquipFuncDamageIconType EquipFuncDamageIconType;
        [RTTI.Member(9, 0x44, "Parameters")] public EDSUIEquipFuncSpecialIconType EquipFuncSpecialIconType;
        [RTTI.Member(10, 0x46, "Parameters")] public EDSUIEquipFuncDamageIconType EquipFuncDamageIconTypeBT;
        [RTTI.Member(11, 0x48, "Parameters")] public EDSUIEquipFuncSpecialIconType EquipFuncSpecialIconTypeBT;
        [RTTI.Member(12, 0x4A, "Parameters")] public EDSProjectileId ProjectileId;
        [RTTI.Member(13, 0x4B, "Parameters")] public EDSAmmoId AmmoId;
        [RTTI.Member(14, 0x4C, "Parameters")] public EDSAmmoCategory AmmoCategory;
        [RTTI.Member(15, 0x50, "Parameters")] public EDSAmmoType AmmoType;
        [RTTI.Member(16, 0x54, "Parameters")] public float AmmoScaleFactor;
        [RTTI.Member(17, 0x58, "Parameters")] public uint32 ClipCount;
        [RTTI.Member(18, 0x5C, "Parameters")] public uint32 PelletCount;
        [RTTI.Member(19, 0x60, "Parameters")] public uint32 MuzzleFlashLevel;
        [RTTI.Member(20, 0x64, "Parameters")] public float Battery;
        [RTTI.Member(21, 0x68, "Parameters")] public float Speed;
        [RTTI.Member(22, 0x6C, "Parameters")] public float Distance;
        [RTTI.Member(23, 0x70, "Parameters")] public float StraightDistance;
        [RTTI.Member(24, 0x74, "Parameters")] public float StraightDistanceForLockOn;
        [RTTI.Member(25, 0x78, "Parameters")] public float FiringInterval;
        [RTTI.Member(26, 0x7C, "Parameters")] public float GravityRate;
        [RTTI.Member(27, 0x80, "Parameters")] public float GravityRateAfterTravelingStraightDistance;
        [RTTI.Member(28, 0x84, "Parameters")] public float BatteryDecreaseSpeed;
        [RTTI.Member(29, 0x88, "Parameters")] public float BatteryRecoverSpeed;
        [RTTI.Member(30, 0x8C, "Parameters")] public float BatteryCostOfFullCharge;
        [RTTI.Member(31, 0x90, "Parameters")] public float BatteryCostOfRequiredMinCharge;
        [RTTI.Member(32, 0x94, "Parameters")] public float FullChargeTime;
        [RTTI.Member(33, 0x98, "Parameters")] public float FixedChargeRate;
        [RTTI.Member(34, 0x9C, "Parameters")] public float SpreadSpeed;
        [RTTI.Member(35, 0xA0, "Parameters")] public float SpreadAngleMin;
        [RTTI.Member(36, 0xA4, "Parameters")] public float SpreadAngle;
        [RTTI.Member(37, 0xA8, "Parameters")] public float SpreadAngleMinCrouch;
        [RTTI.Member(38, 0xAC, "Parameters")] public float SpreadAngleCrouch;
        [RTTI.Member(39, 0xB0, "Parameters")] public float SpreadAngleTimeToMax;
        [RTTI.Member(40, 0xB4, "Parameters")] public float SpreadAngleTimeToStartReturn;
        [RTTI.Member(41, 0xB8, "Parameters")] public float SpreadAngleTimeToMin;
        [RTTI.Member(42, 0xBC, "Parameters")] public float AdditionalSpreadAngleByMoving;
        [RTTI.Member(43, 0xC0, "Parameters")] public float MoveSpeedForSpreadAngleMax;
        [RTTI.Member(44, 0xC4, "Parameters")] public float MoveSpeedForIncreaseSpreadAngle;
        [RTTI.Member(45, 0xC8, "Parameters")] public float OneShotRecoilVerticalAngle;
        [RTTI.Member(46, 0xCC, "Parameters")] public float OneShotRecoilVerticalAngleRandomRange;
        [RTTI.Member(47, 0xD0, "Parameters")] public float OneShotRecoilVerticalAngleRandomRangeCrouch;
        [RTTI.Member(48, 0xD4, "Parameters")] public float OneShotRecoilHorizontalAngleRange;
        [RTTI.Member(49, 0xD8, "Parameters")] public float OneShotRecoilHorizontalAngleRangeRandomRange;
        [RTTI.Member(50, 0xDC, "Parameters")] public float OneShotRecoilHorizontalAngleRangeRandomRangeCrouch;
        [RTTI.Member(51, 0xE0, "Parameters")] public float OneShotRecoilAngleReturnStartSpeedMultiplier;
        [RTTI.Member(52, 0xE4, "Parameters")] public float RecoilAngleMin;
        [RTTI.Member(53, 0xE8, "Parameters")] public float RecoilAngleMax;
        [RTTI.Member(54, 0xEC, "Parameters")] public float RecoilAngleMinCrouch;
        [RTTI.Member(55, 0xF0, "Parameters")] public float RecoilAngleMaxCrouch;
        [RTTI.Member(56, 0xF4, "Parameters")] public float RecoilAngleTimeToMax;
        [RTTI.Member(57, 0xF8, "Parameters")] public float RecoilAngleTimeToStartReturn;
        [RTTI.Member(58, 0xFC, "Parameters")] public float RecoilAngleTimeToMin;
        [RTTI.Member(59, 0x100, "Parameters")] public float LockOnCapacity;
        [RTTI.Member(60, 0x104, "Parameters")] public float LockOnDistance;
        [RTTI.Member(61, 0x108, "Parameters")] public float RotSpeedMax;
        [RTTI.Member(62, 0x10C, "Parameters")] public float RotSpeedMaxTime;
        [RTTI.Member(63, 0x110, "Parameters")] public float ProximityFuzeDetonationDistance;
        [RTTI.Member(64, 0x114, "Parameters")] public float TimeToDetonatableCondition;
        [RTTI.Member(65, 0x118, "Parameters")] public float DetonationDelayTime;
        [RTTI.Member(66, 0x11C, "Parameters")] public bool InfiniteAmmo;
        [RTTI.Member(67, 0x11D, "Parameters")] public bool InfiniteClip;
        [RTTI.Member(68, 0x11E, "Parameters")] public bool IsBatteryType;
        [RTTI.Member(69, 0x11F, "Parameters")] public bool IsChargeType;
        [RTTI.Member(70, 0x120, "Parameters")] public bool IsFixedChargeRateType;
        [RTTI.Member(71, 0x121, "Parameters")] public bool IsUseBloodType;
        [RTTI.Member(72, 0x122, "Parameters")] public bool IsUseGoldType;
        [RTTI.Member(73, 0x123, "Parameters")] public bool IsContinuousType;
        [RTTI.Member(74, 0x124, "Parameters")] public bool IsSemiAutomatic;
        [RTTI.Member(75, 0x125, "Parameters")] public bool IsEnableLockOn;
        [RTTI.Member(76, 0x126, "Parameters")] public bool IsAttachable;
        [RTTI.Member(77, 0x127, "Parameters")] public bool IsDetonatable;
        [RTTI.Member(78, 0x128, "Parameters")] public bool IsFiringSoundDontNotification;
        [RTTI.Member(79, 0x129, "Parameters")] public bool IsDirectAttackToBloodDamagedParts;
        [RTTI.Member(80, 0x12A, "Parameters")] public bool IsBloodAttackConversionByThroughInBloodSmoke;
        [RTTI.Member(81, 0x12B, "Parameters")] public bool IsExistCountNotifyToSave;
        [RTTI.Member(82, 0x12C, "Parameters")] public EDSThrowableInspectorBehavior ThrowableInspectorBehaviorOnSuspend;
        [RTTI.Member(83, 0x12D, "Parameters")] public EDSThrowableInspectorBehavior ThrowableInspectorBehaviorOnRemove;
        [RTTI.Member(84, 0x12E, "Parameters")] public EDSDetonatableCondition DetonatableCondition;
        [RTTI.Member(85, 0x12F, "Parameters")] public EDSContactableType ContactableType;
        [RTTI.Member(86, 0x130, "Parameters")] public EDSFuzeType FuzeType;
        [RTTI.Member(87, 0x131, "Parameters")] public EDSLockType LockableType;
        [RTTI.Member(88, 0x138, "Parameters")] public Ref<Fact> CatalogueFact;
        [RTTI.Member(89, 0x140, "Parameters")] public Ref<SoundResource> FireSound;
        [RTTI.Member(90, 0x148, "Parameters")] public Ref<SoundResource> AttachedSound;
        [RTTI.Member(91, 0x150, "Parameters")] public Ref<SoundResource> DetonationWaitLoopSound;
        [RTTI.Member(92, 0x158, "Parameters")] public Ref<SoundResource> DetonatingSound;
        [RTTI.Member(93, 0x160, "Parameters")] public Ref<RumbleResource> FireRumble;
        [RTTI.Member(94, 0x168, "Parameters")] public EDSBulletLineType BulletLineType;
        [RTTI.Member(95, 0x169, "Parameters")] public EDSBulletLineType AdditionalBulletLineType;
        [RTTI.Member(96, 0x16A, "Parameters")] public EDSRicochetType RicochetType;
        [RTTI.Member(97, 0x16B, "Parameters")] public EDSListItemColor IconColor;
        [RTTI.Member(98, 0x16C, "Parameters")] public EDSUIBulletType UIBulletType;
        [RTTI.Member(99, 0x170, "Parameters")] public Ref<ParticleSystemResource> ExplosionParticle;
        [RTTI.Member(100, 0x178, "Parameters")] public Ref<ParticleSystemResource> ExplosionInWaterParticle;
        [RTTI.Member(101, 0x180, "Parameters")] public Ref<ParticleSystemResource> ExplosionInTarryParticle;
        [RTTI.Member(102, 0x188, "Parameters")] public Ref<ParticleSystemResource> ExplosionInAirParticle;
    }

    [RTTI.Serializable(0x15A4016677DF1D13, GameType.DS)]
    public class DSMailBasicNode : RTTIObject
    {
    }

    [RTTI.Serializable(0xEAB81E7CF8488FA8, GameType.DS)]
    public class DSMailBasicNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8AE41F7BC588FD6D, GameType.DS)]
    public class DSMailResource : Resource
    {
        [RTTI.Member(3, 0x20, "Basic")] public Ref<DSHouseholdPersonResource> Sender;
        [RTTI.Member(4, 0x28, "Basic")] public Ref<LocalizedTextResource> Title;
        [RTTI.Member(5, 0x30, "Basic")] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(15, 0x38, "Extension")] public Ref<LocalizedTextResource> OverrideSenderName;
        [RTTI.Member(6, 0x40, "Basic")] public bool Important;
        [RTTI.Member(7, 0x41, "Basic")] public bool Express;
        [RTTI.Member(9, 0x42, "Basic")] public bool DisableReceiveInfoLog;
        [RTTI.Member(8, 0x43, "Basic")] public bool WaitIfUnread;
        [RTTI.Member(10, 0x44, "Basic")] public int32 GiftLike;
        [RTTI.Member(13, 0x48, "Option", true)] public int16 Index;
        [RTTI.Member(16, 0x4A, "Extension")] public int16 OverrideReceiveDelayMinute;
        [RTTI.Member(12, 0x4C, "Option")] public uint32 name;
    }

    [RTTI.Serializable(0x85D3055BC9F1BC22, GameType.DS)]
    public class DSMailResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x88907BDD93725DB0, GameType.DS)]
    public class DSMainMissionResource : DSExMissionResourceBase
    {
    }

    [RTTI.Serializable(0xC2A7CA88FE64F11E, GameType.DS)]
    public class DSMainMissionResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEBB4C5ABED9EC334, GameType.DS)]
    public class DSManeuverMover : Mover
    {
    }

    [RTTI.Serializable(0x23F47B1A7D677E9F, GameType.DS)]
    public class DSManeuverMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x180A9D0752DDF593, GameType.DS)]
    public class DSMarkerAdapterResourceBase : DSMissionStaticAbstractPointResource
    {
    }

    [RTTI.Serializable(0x4DA4927CB966C0CF, GameType.DS)]
    public class DSMarkerLineEffectInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC8, "General")] public Ref<DSMarkerLineEffectResource> Resource;
        [RTTI.Member(8, 0x740, "General")] public bool Enable;
    }

    [RTTI.Serializable(0x5718E8E87FA41D03, GameType.DS)]
    public class DSMarkerLineEffectNavigationLineSetting
    {
        [RTTI.Member(15, 0x0, "Representation")] public Array<Ref<MaterialTypeResource>> ThroughClimbMaterials;
        [RTTI.Member(16, 0x10, "Representation")] public Array<Ref<MaterialTypeResource>> IgnoreMaterials;
        [RTTI.Member(18, 0x20, "Representation")] public Array<uint16> ThroughClimbMaterialIds;
        [RTTI.Member(19, 0x30, "Representation")] public Array<uint16> IgnoreMaterialIds;
        [RTTI.Member(17, 0x40, "Representation")] public Ref<DSMaterialConfigResource> SnowMaterial;
        [RTTI.Member(1, 0x48, "Representation")] public float LineWidth;
        [RTTI.Member(2, 0x4C, "Representation")] public float SamplingUnitMeter;
        [RTTI.Member(4, 0x50, "Representation")] public float MarginCorrectionNumberAroundMarker;
        [RTTI.Member(3, 0x54, "Representation")] public float SpaceBetweenSamplingPoints;
        [RTTI.Member(5, 0x58, "Representation")] public float AlphaTimeScale;
        [RTTI.Member(6, 0x5C, "Representation")] public float AlphaRepeatScale;
        [RTTI.Member(7, 0x60, "Representation")] public float AlphaCurvePower;
        [RTTI.Member(12, 0x64, "Representation")] public float SmoothThrshould;
        [RTTI.Member(13, 0x68, "Representation")] public float SnowOffset;
        [RTTI.Member(8, 0x6C, "Representation")] public float SlopeSetRangeOldMin;
        [RTTI.Member(9, 0x70, "Representation")] public float SlopeSetRangeOldMax;
        [RTTI.Member(10, 0x74, "Representation")] public float SlopeSetRangeNewMin;
        [RTTI.Member(11, 0x78, "Representation")] public float SlopeSetRangeNewMax;
        [RTTI.Member(14, 0x7C, "Representation")] public bool EnableSmoothing;
    }

    [RTTI.Serializable(0xEC6F0655C9497495, GameType.DS)]
    public class DSMarkerLineEffectPolyLineSetting
    {
        [RTTI.Member(1, 0x0, "Representation")] public float LineWidth;
        [RTTI.Member(2, 0x4, "Representation")] public float SamplingUnitMeter;
        [RTTI.Member(4, 0x8, "Representation")] public float MarginCorrectionNumberAroundMarker;
        [RTTI.Member(3, 0xC, "Representation")] public float SpaceBetweenSamplingPoints;
        [RTTI.Member(5, 0x10, "Representation")] public float NoiseSpeedScale;
        [RTTI.Member(6, 0x14, "Representation")] public float NoiseWaveScale;
        [RTTI.Member(7, 0x18, "Representation")] public float SinWaveLength;
        [RTTI.Member(8, 0x1C, "Representation")] public float SinWaveScale;
        [RTTI.Member(9, 0x20, "Representation")] public float SinWaveAlphaPower;
        [RTTI.Member(10, 0x24, "Representation")] public float CosGradationOffsetScale;
    }

    [RTTI.Serializable(0x741601D0EBF454DF, GameType.DS)]
    public class DSMarkerLineEffectResource : Resource
    {
        [RTTI.Member(6, 0x20, "Representation")] public Ref<ShaderResource> PolyShader;
        [RTTI.Member(7, 0x28, "Representation")] public Ref<ShaderResource> NavigationShader;
        [RTTI.Member(4, 0x30, "Representation")] public Ref<RenderEffectResource> PolyEffectsResource;
        [RTTI.Member(5, 0x38, "Representation")] public Ref<RenderEffectResource> NavigationEffectsResource;
        [RTTI.Member(8, 0x40, "Representation")] public Ref<Texture> NoiseTexture;
        [RTTI.Member(10, 0x50, "Color")] public FRGBAColor BaseColor;
        [RTTI.Member(12, 0x60, "Color")] public FRGBAColor BaseBackColor;
        [RTTI.Member(14, 0x70, "Color")] public FRGBAColor DangerousDiffColor;
        [RTTI.Member(16, 0x80, "Color")] public FRGBAColor DangerousDiffBackColor;
        [RTTI.Member(18, 0x90, "Color")] public FRGBAColor SlideColor;
        [RTTI.Member(20, 0xA0, "Color")] public FRGBAColor SlideBackColor;
        [RTTI.Member(37, 0xB0, "Base")] public Array<WorldPosition> WorldPoints;
        [RTTI.Member(23, 0xC0, "Color")] public Ref<CurveResource> OdradekFadeCurve;
        [RTTI.Member(45, 0xC8, "Sound")] public Ref<SoundResource> BodySoundResource;
        [RTTI.Member(43, 0xD0, "Sound")] public Ref<SoundResource> TouchResetSoundResource;
        [RTTI.Member(47, 0xD8, "SensorLuminanceAnimation")] public Ref<CurveResource> SensorLuminanceSpeedRateCurve;
        [RTTI.Member(39, 0xE0, "Base")] public EDSMarkerLineEffectShapeType ShapeType;
        [RTTI.Member(40, 0xE4, "Base")] public DSMarkerLineEffectPolyLineSetting PolyLineSetting;
        [RTTI.Member(41, 0x110, "Base")] public DSMarkerLineEffectNavigationLineSetting NavigationLineSetting;
        [RTTI.Member(31, 0x190, "Base")] public float DangerousDiffThreshould;
        [RTTI.Member(32, 0x194, "Base")] public float SlideAngle;
        [RTTI.Member(33, 0x198, "Base")] public float SlideAngleMargin;
        [RTTI.Member(34, 0x19C, "Base")] public float DangerousAngle;
        [RTTI.Member(35, 0x1A0, "Base")] public float DangerousAngleMargin;
        [RTTI.Member(11, 0x1A4, "Color")] public float BaseColorScale;
        [RTTI.Member(13, 0x1A8, "Color")] public float BaseBackColorScale;
        [RTTI.Member(19, 0x1AC, "Color")] public float SlideColorScale;
        [RTTI.Member(21, 0x1B0, "Color")] public float SlideBackColorScale;
        [RTTI.Member(15, 0x1B4, "Color")] public float DangerousDiffColorScale;
        [RTTI.Member(17, 0x1B8, "Color")] public float DangerousDiffBackColorScale;
        [RTTI.Member(22, 0x1BC, "Color")] public float BaseAlpha;
        [RTTI.Member(25, 0x1C0, "Base")] public float Size;
        [RTTI.Member(26, 0x1C4, "Base")] public float TimeMax;
        [RTTI.Member(27, 0x1C8, "Base")] public float TimeMaxInv;
        [RTTI.Member(28, 0x1CC, "Base")] public float SpeedScale;
        [RTTI.Member(29, 0x1D0, "Base")] public float HeightOffset;
        [RTTI.Member(36, 0x1D4, "Base")] public float FrustumFov;
        [RTTI.Member(44, 0x1D8, "Sound")] public float BodySoundDistance;
        [RTTI.Member(38, 0x1DC, "Base")] public float TouchResetDistance;
        [RTTI.Member(52, 0x1E0, "SampleCollect")] public float CollisionCheckThreshould;
        [RTTI.Member(53, 0x1E4, "SampleCollect")] public float HeightMarginForForwardDirection;
        [RTTI.Member(48, 0x1E8, "SensorLuminanceAnimation")] public float SensorLuminanceSpeedScale;
        [RTTI.Member(49, 0x1EC, "SensorLuminanceAnimation")] public float SensorLuminanceStartDistance;
        [RTTI.Member(50, 0x1F0, "SensorLuminanceAnimation")] public float SensorLuminanceFadeSmoothThreshold;
        [RTTI.Member(30, 0x1F4, "Base")] public bool IgnoreDepthTest;
    }

    [RTTI.Serializable(0x45015D690693514F, GameType.DS)]
    public class DSMarkerLocator : DSLocator
    {
        [RTTI.Member(6, 0x70)] public EDSMarkerLocatorType MarkerType;
        [RTTI.Member(7, 0x74)] public float Radius;
        [RTTI.Member(8, 0x78)] public Ref<LocalizedTextResource> MarkerInformation;
    }

    [RTTI.Serializable(0x396CFDC1D45BF13E, GameType.DS)]
    public class DSMaterialConfigResource : Resource
    {
        [RTTI.Member(3, 0x20, "Type")] public EDSMaterialConfigType ConfigType;
        [RTTI.Member(5, 0x24, "ConfigValues")] public float WalkSpeed;
        [RTTI.Member(6, 0x28, "ConfigValues")] public float FootSlipMotion;
        [RTTI.Member(7, 0x2C, "ConfigValues")] public float SlipMotion;
        [RTTI.Member(8, 0x30, "ConfigValues")] public float VehicleSpeed;
        [RTTI.Member(9, 0x34, "ConfigValues")] public float MotorbikeSpeed;
        [RTTI.Member(10, 0x38, "ConfigValues")] public float VehicleSlip;
        [RTTI.Member(11, 0x3C, "ConfigValues")] public float MuleSlip;
        [RTTI.Member(13, 0x40, "ConfigValues")] public float Noise;
        [RTTI.Member(14, 0x44, "ConfigValues")] public float ShoesDamage;
        [RTTI.Member(15, 0x48, "ConfigValues")] public float mLandedDamageRate;
        [RTTI.Member(16, 0x4C, "ConfigValues")] public float TakeABreak_StaminaRate;
        [RTTI.Member(12, 0x50, "ConfigValues")] public bool MulSlipFlatFloor;
    }

    [RTTI.Serializable(0xA760725FFA8A88AC, GameType.DS)]
    public class DSMaterialConfigResourceMap : MaterialConfigResourceMap
    {
        [RTTI.Member(2, 0x20)] public Ref<DSMaterialConfigResource> MaterialConfig_None;
        [RTTI.Member(3, 0x28)] public Ref<DSMaterialConfigResource> MaterialConfig_Normal;
        [RTTI.Member(4, 0x30)] public Ref<DSMaterialConfigResource> MaterialConfig_Water;
        [RTTI.Member(5, 0x38)] public Ref<DSMaterialConfigResource> MaterialConfig_Rock;
        [RTTI.Member(6, 0x40)] public Ref<DSMaterialConfigResource> MaterialConfig_Moss;
        [RTTI.Member(7, 0x48)] public Ref<DSMaterialConfigResource> MaterialConfig_Tar;
        [RTTI.Member(8, 0x50)] public Ref<DSMaterialConfigResource> MaterialConfig_Road;
        [RTTI.Member(9, 0x58)] public Ref<DSMaterialConfigResource> MaterialConfig_SlipGrenade;
        [RTTI.Member(10, 0x60)] public Ref<DSMaterialConfigResource> MaterialConfig_Snow;
        [RTTI.Member(11, 0x68)] public Ref<DSMaterialConfigResource> MaterialConfig_Mud;
        [RTTI.Member(12, 0x70)] public Ref<DSMaterialConfigResource> MaterialConfig_Sand;
        [RTTI.Member(13, 0x78)] public Ref<DSMaterialConfigResource> MaterialConfig_Deblis;
        [RTTI.Member(14, 0x80)] public Ref<DSMaterialConfigResource> MaterialConfig_Ice;
        [RTTI.Member(15, 0x88)] public Ref<DSMaterialConfigResource> MaterialConfig_SnowShallow;
    }

    [RTTI.Serializable(0xA62F9B57D086CAD0, GameType.DS)]
    public class DSMenuRadioItem : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSRadioEvent> RadioEvent;
        [RTTI.Member(3, 0x28)] public Ref<BooleanFact> RadioReadFact;
        [RTTI.Member(4, 0x30)] public EDSMenuRadioFactType RadioReadFactType;
        [RTTI.Member(5, 0x38)] public Ref<BooleanFact> RadioAbsenceFact;
        [RTTI.Member(6, 0x40)] public bool DontPlay_IfIgnoreState;
        [RTTI.Member(7, 0x41)] public bool DontPlay_IfServiceEnd;
        [RTTI.Member(8, 0x48)] public Array<Ref<LocalizedTextResource>> DialogTitles;
        [RTTI.Member(9, 0x58)] public Array<Ref<LocalizedTextResource>> DialogTexts;
        [RTTI.Member(10, 0x68)] public int8 RadioType;
    }

    [RTTI.Serializable(0x7911504BA72AF79A, GameType.DS)]
    public class DSMenuRadioResource : Resource
    {
        [RTTI.Member(3, 0x20, "DS_Logic")] public EDSUIRadioCategory RadioCategory;
        [RTTI.Member(4, 0x28, "DS_Logic")] public Array<Ref<DSMenuRadioItem>> RadioItems;
    }

    [RTTI.Serializable(0xEB27D53AC5307512, GameType.DS)]
    public class DSMisionEvaluationCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x61D1DBE14E19B029, GameType.DS)]
    public class DSMisionEvaluationCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2A1EF039D2963596, GameType.DS)]
    public class DSMissileShellComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x667A8CB3A0A1068D, GameType.DS)]
    public class DSMissileShellComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xA23DDC94CFB4A493, GameType.DS)]
    public class DSMissileShellComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Effect")] public Array<Ref<ParticleSystemResource>> Particles;
    }

    [RTTI.Serializable(0xE760763F025285C, GameType.DS)]
    public class DSMissileShellMover : Mover
    {
    }

    [RTTI.Serializable(0x507304AA61DCAEE0, GameType.DS)]
    public class DSMissileShellMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x3261877A1C06E832, GameType.DS)]
    public class DSMissioDebugUnlockAllItemsCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x9DC81A032088A8F, GameType.DS)]
    public class DSMissioDebugUnlockAllItemsCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9D7944E6C438C75A, GameType.DS)]
    public class DSMissionAbstractPointResource : Resource
    {
    }

    [RTTI.Serializable(0x3673B8461BCD4AD1, GameType.DS)]
    public class DSMissionAbstractTodoNodeResource : Resource
    {
        [RTTI.Member(7, 0x20, "Hidden")] public Ref<BooleanFact> HiddenDisplayFact;
        [RTTI.Member(8, 0x28, "Hidden")] public Ref<IntegerFact> HiddenStateFact;
        [RTTI.Member(3, 0x30, "BasicInfo")] public Ref<LocalizedTextResource> DisplayText;
        [RTTI.Member(4, 0x38, "BasicInfo")] public bool DisplayeBeforeMissionStart;
        [RTTI.Member(5, 0x39, "BasicInfo")] public bool NotifyWhenBecomesVisible;
    }

    [RTTI.Serializable(0xA3ECAABC00697EB2, GameType.DS)]
    public class DSMissionAbstractTodoNodeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x85381B5319BFCEAF, GameType.DS)]
    public class DSMissionAppearPosInfo
    {
        [RTTI.Member(0, 0x8)] public Ref<DSDeliveryPointInfoResource> AppearDeliveryPoint;
        [RTTI.Member(1, 0x10)] public Ref<DSLocator> AppearPlaceLocator;
        [RTTI.Member(2, 0x18)] public Ref<DSLocator> AppearUiPlaceLocator;
        [RTTI.Member(3, 0x20)] public float AmbiguousRadius;
        [RTTI.Member(4, 0x28)] public Ref<DSMissionBaggageResource> BaggageResource;
        [RTTI.Member(6, 0x30, "Child")] public Ref<DSMissionAppearPosInfoOption> Child;
        [RTTI.Member(7, 0x38, "Child")] public Ref<BooleanFact> UseChildFact;
        [RTTI.Member(9, 0x40, "Option")] public bool IsOnShelf;
    }

    [RTTI.Serializable(0x55F7120D4AA73D61, GameType.DS)]
    public class DSMissionAppearPosInfoOption : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DSDeliveryPointInfoResource> AppearDeliveryPoint;
        [RTTI.Member(3, 0x28)] public Ref<DSLocator> AppearPlaceLocator;
        [RTTI.Member(4, 0x30)] public Ref<DSLocator> AppearUiPlaceLocator;
        [RTTI.Member(5, 0x38)] public float AmbiguousRadius;
        [RTTI.Member(7, 0x40, "Child")] public Ref<DSMissionAppearPosInfoOption> Child;
        [RTTI.Member(8, 0x48, "Child")] public Ref<BooleanFact> UseChildFact;
    }

    [RTTI.Serializable(0x59B14FB315767337, GameType.DS)]
    public class DSMissionAreaCommonResource : Resource
    {
        [RTTI.Member(7, 0x20, "DeliveryPoint")] public Array<Ref<DSDeliveryPointInfoResource>> StaticDeliveryPointInfos;
        [RTTI.Member(3, 0x30, "MissionResource")] public Array<Ref<DSExMissionResourceBase>> MainOrSubMissions;
        [RTTI.Member(4, 0x40, "MissionResource")] public Array<Ref<DSMissionResourceBase>> StaticSimpleMissions;
        [RTTI.Member(5, 0x50, "MissionResource")] public Array<Ref<DSFreeMissionResource>> FreeMissions;
        [RTTI.Member(9, 0x60, "Roadmap")] public Ref<DSMissionRouteMapResource> RouteMap;
        [RTTI.Member(10, 0x68, "Roadmap")] public Ref<LocalizedTextResource> PickupLocationNamePrefix;
    }

    [RTTI.Serializable(0xBDF33452B50669AF, GameType.DS)]
    public class DSMissionAreaEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBF5354DCFF729004, GameType.DS)]
    public class DSMissionAreaEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Array<Ref<DSHoloLineComponentResource>> HoloLineComponents;
        [RTTI.Member(5, 0x30, "Representation")] public Ref<CurveResource> DistanceAlphaCurve;
        [RTTI.Member(6, 0x38, "Representation")] public Ref<CurveResource> DistanceSizeCurve;
        [RTTI.Member(7, 0x40, "Representation")] public Ref<CurveResource> FlickerAlphaCurve;
        [RTTI.Member(8, 0x48, "Representation")] public Ref<CurveResource> FlickerSizeCurve;
        [RTTI.Member(14, 0x50, "Representation")] public Ref<CurveResource> DashLineRepeatAreaDistanceRateCurve;
        [RTTI.Member(15, 0x58, "Representation")] public Ref<CurveResource> DashLineSpeedScaleAreaDistanceRateCurve;
        [RTTI.Member(31, 0x60, "SensorLuminanceAnimation")] public Ref<CurveResource> SensorLuminanceSpeedRateCurve;
        [RTTI.Member(28, 0x68, "Representation")] public Ref<CurveResource> CylinderTypeFadeOutAlphaCurve;
        [RTTI.Member(19, 0x70, "Representation")] public Ref<SoundResource> StartSoundResource;
        [RTTI.Member(11, 0x78, "Representation")] public Array<float> LineWidths;
        [RTTI.Member(12, 0x88, "Representation")] public Array<float> LineAlphas;
        [RTTI.Member(13, 0x98, "Representation")] public Array<int> LineDegrees;
        [RTTI.Member(32, 0xA8, "SensorLuminanceAnimation")] public float SensorLuminanceSpeedScale;
        [RTTI.Member(33, 0xAC, "SensorLuminanceAnimation")] public float SensorLuminanceStartDistance;
        [RTTI.Member(34, 0xB0, "SensorLuminanceAnimation")] public float SensorLuminanceFadeSmoothThreshold;
        [RTTI.Member(9, 0xB4, "Representation")] public float FlickerStartDistance;
        [RTTI.Member(4, 0xB8, "Representation")] public float AreaDistance;
        [RTTI.Member(10, 0xBC, "Representation")] public float InsideToOutsideMarginDistance;
        [RTTI.Member(17, 0xC0, "Representation")] public float DashLineSpeedScale;
        [RTTI.Member(16, 0xC4, "Representation")] public float DashLineRepeatScale;
        [RTTI.Member(18, 0xC8, "Representation")] public float DashLineAlphaStepThreshold;
        [RTTI.Member(22, 0xCC, "Representation")] public float CylinderLength;
        [RTTI.Member(24, 0xD0, "Representation")] public float DashLineRepatScaleForCylinderType;
        [RTTI.Member(25, 0xD4, "Representation")] public float DistanceFadeLengthForCylinderType;
        [RTTI.Member(26, 0xD8, "Representation")] public float DistanceFadePowerForCylinderType;
        [RTTI.Member(27, 0xDC, "Representation")] public float DistanceFadeStartForCylinderType;
        [RTTI.Member(23, 0xE0, "Representation")] public int NumCylinderLine;
        [RTTI.Member(20, 0xE4, "Representation")] public bool EnableInvisibleCutscene;
        [RTTI.Member(21, 0xE5, "Representation")] public bool CylinderType;
        [RTTI.Member(29, 0xE6, "Representation")] public bool EnableImmediateRefresh;
    }

    [RTTI.Serializable(0x209ED916D2051047, GameType.DS)]
    public class DSMissionBaggageCountConditionResource : DSMissionConditionResourceBase
    {
        [RTTI.Member(7, 0x30, "DeliveryBaggage")] public uint8 MinCountBaggage;
    }

    [RTTI.Serializable(0xBA04552908E64761, GameType.DS)]
    public class DSMissionBaggageExtendResource : DSMissionBaggageResource
    {
        [RTTI.Member(9, 0x60)] public Ref<DSLocator> Locator;
        [RTTI.Member(10, 0x68)] public bool IgnoreSurveyOnDelivery;
    }

    [RTTI.Serializable(0xDA5D17E87B034FC5, GameType.DS)]
    public class DSMissionBaggageNodeCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x2610BA7AB6E78CC9, GameType.DS)]
    public class DSMissionBaggageNodeCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3EC4D3BCE3F67ACF, GameType.DS)]
    public class DSMissionBaggageResource : Resource
    {
        [RTTI.Member(3, 0x20)] public Ref<DSGameBaggageListItem> BaggageListItem;
        [RTTI.Member(5, 0x28)] public Ref<DSLocator> RelocateAppearLocator;
        [RTTI.Member(4, 0x30)] public Ref<DSMenuRadioResource> MenuRadioResource;
        [RTTI.Member(7, 0x38)] public Array<Ref<DSHouseholdInfoResource>> History;
        [RTTI.Member(8, 0x48)] public uint32 nm;
        [RTTI.Member(2, 0x4C)] public uint32 UniqId;
        [RTTI.Member(6, 0x58)] public bool WasCarriedByPlayer;
    }

    [RTTI.Serializable(0x326F504A61B8C0E6, GameType.DS)]
    public class DSMissionBaggageResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE8DA0774651F73E3, GameType.DS)]
    public class DSMissionBaggageWeightConditionResource : DSMissionConditionResourceBase
    {
        [RTTI.Member(7, 0x30, "DeliveryBaggage")] public float MinWeightBaggage;
    }

    [RTTI.Serializable(0x1C38C9C1301A4C9, GameType.DS)]
    public class DSMissionBasicNode : RTTIObject
    {
    }

    [RTTI.Serializable(0x59FA0DE3F586F8AB, GameType.DS)]
    public class DSMissionBasicNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x89A3081193AE813, GameType.DS)]
    public class DSMissionBonusBaggageSetting : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSMissionBonusBaggageUnit>> DefaultBonusItems;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSMissionBonusBaggageUnit>> SpecialBonusItems;
        [RTTI.Member(4, 0x40)] public Ref<DSMenuRadioResource> RadioResource;
    }

    [RTTI.Serializable(0xC93CC8F62B19C5B8, GameType.DS)]
    public class DSMissionBonusBaggageUnit : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DSGameBaggageListItem> Baggage;
        [RTTI.Member(4, 0x28)] public bool NeedsExceptionalProcess;
        [RTTI.Member(3, 0x29)] public uint8 Rank;
    }

    [RTTI.Serializable(0x985EDC8CE97ADDA3, GameType.DS)]
    public class DSMissionCheckCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x14A5188FA8CCC0AC, GameType.DS)]
    public class DSMissionCheckCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF616F453B152A5E0, GameType.DS)]
    public class DSMissionChiralDonationConditionResource : DSMissionBaggageCountConditionResource
    {
        [RTTI.Member(9, 0x38, "ChiralDonation")] public int MaxDonationCount;
    }

    [RTTI.Serializable(0xB077020FA4C866CC, GameType.DS)]
    public class DSMissionCollectorsItemCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xF0B86818DBAE018A, GameType.DS)]
    public class DSMissionCollectorsItemCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x95BA019B251B4816, GameType.DS)]
    public class DSMissionConditionResourceBase : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Evaluation")] public Ref<DSMissionEvaluationDataTable> EvaluationDataTable;
        [RTTI.Member(5, 0x28, "SpecialReport")] public Ref<DSMissionSpecialReportMissionConditionResource> SpecialReportResource;
    }

    [RTTI.Serializable(0x96315C240718107C, GameType.DS)]
    public class DSMissionConditionResourceBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE4A68C7DA7065CAF, GameType.DS)]
    public class DSMissionDamageConditionResource : DSMissionConditionResourceBase
    {
        [RTTI.Member(7, 0x30, "Damage")] public float CumulativeMinDamage;
    }

    [RTTI.Serializable(0xBBFE0452FACC8950, GameType.DS)]
    public class DSMissionDebugData : Resource
    {
        [RTTI.Member(3, 0x20, "CommonScripts")] public Ref<GraphProgramResource> PostSuccessScript;
        [RTTI.Member(5, 0x28, "DebugTelopTips")] public Array<Ref<DSTelopTipsResource>> DebugTelopTips;
    }

    [RTTI.Serializable(0x5BBE5B9156DE8386, GameType.DS)]
    public class DSMissionDeliverLocationTodoNodeResource : DSMissionDeliveryTodoNodeResource
    {
        [RTTI.Member(12, 0x48, "BasicInfo")] public Ref<DSHouseholdPersonResource> Client;
    }

    [RTTI.Serializable(0xC9B6055EF76EB33A, GameType.DS)]
    public class DSMissionDeliveryTodoNodeResource : DSMissionLocationDependentTodoNodeResource
    {
    }

    [RTTI.Serializable(0x1FCC6938A4E221A7, GameType.DS)]
    public class DSMissionDescription
    {
        [RTTI.Member(0, 0x8)] public Ref<LocalizedTextResource> MissionName;
        [RTTI.Member(1, 0x10)] public Ref<LocalizedTextResource> MissionDescription;
        [RTTI.Member(2, 0x18)] public Ref<LocalizedTextResource> AchievementCondition;
    }

    [RTTI.Serializable(0xA4B26808CD4AEA34, GameType.DS)]
    public class DSMissionDestinationTodoNodeResource : DSMissionLocationDependentTodoNodeResource
    {
    }

    [RTTI.Serializable(0x8125925333FB8AFB, GameType.DS)]
    public class DSMissionDiscreteCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xD7B4327F6D4BD01E, GameType.DS)]
    public class DSMissionDiscreteCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xED54D54F47610BC5, GameType.DS)]
    public class DSMissionEpisodeResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<LocalizedTextResource> Text;
    }

    [RTTI.Serializable(0x11C407AD3A059191, GameType.DS)]
    public class DSMissionEpisodeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA55EFA899B990D80, GameType.DS)]
    public class DSMissionEvaluationDataRecord
    {
        [RTTI.Member(1, 0x8, "Logic")] public float GreaterEqual;
        [RTTI.Member(3, 0xC, "Bonus")] public float Like;
        [RTTI.Member(4, 0x10, "Bonus")] public EDSRewardRank Rank;
    }

    [RTTI.Serializable(0x2E66152E262F6E30, GameType.DS)]
    public class DSMissionEvaluationDataRecordSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x422DC1F902D81784, GameType.DS)]
    public class DSMissionEvaluationDataTable : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<DSMissionEvaluationDataRecord> DataRecords;
    }

    [RTTI.Serializable(0x93B06F6E6BF435F1, GameType.DS)]
    public class DSMissionEvaluationDataTableByDeliveryPoint
    {
        [RTTI.Member(0, 0x8)] public UUIDRef<DSDeliveryPointInfoResource> StartDeliveryPointInfo;
        [RTTI.Member(1, 0x18)] public UUIDRef<DSDeliveryPointInfoResource> GoalDeliveryPointInfo;
        [RTTI.Member(2, 0x28)] public Ref<DSMissionEvaluationDataTable> EvaluationDataTabl;
    }

    [RTTI.Serializable(0x3FA83B66A6140031, GameType.DS)]
    public class DSMissionEvaluationDataTableByThreshold
    {
        [RTTI.Member(1, 0x8, "Logic")] public float GreaterThan;
        [RTTI.Member(3, 0x10, "Reference")] public Ref<DSMissionEvaluationDataTable> EvaluationDataTabl;
    }

    [RTTI.Serializable(0x4779DC971FB9CCD4, GameType.DS)]
    public class DSMissionEvaluationDataTableSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB88A86A947713F6, GameType.DS)]
    public class DSMissionEvaluationDataTablesByDeliveryPoint : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<DSMissionEvaluationDataTableByDeliveryPoint> DataTables;
    }

    [RTTI.Serializable(0x6833D1F82CE80AD6, GameType.DS)]
    public class DSMissionEvaluationDataTablesByDeliveryPointSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1DCA8CCEDF49334, GameType.DS)]
    public class DSMissionEvaluationDataTablesByThreshold : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<DSMissionEvaluationDataTableByThreshold> DataTables;
    }

    [RTTI.Serializable(0x89109C3014BE209C, GameType.DS)]
    public class DSMissionEvaluationDataTablesByThresholdSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1CBA9EC0051EBAE5, GameType.DS)]
    public class DSMissionEvaluationDetail
    {
    }

    [RTTI.Serializable(0x1223E611E9955C52, GameType.DS)]
    public class DSMissionEventTimerCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xD1FAC8176B0F93E8, GameType.DS)]
    public class DSMissionEventTimerCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x792C120EE252A4EE, GameType.DS)]
    public class DSMissionEventTimerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public int EventTimerId;
        [RTTI.Member(3, 0x24)] public DSMissionEventTimerDisplayMethod DisplayMethodType;
        [RTTI.Member(5, 0x28)] public float CountSeconds;
        [RTTI.Member(4, 0x30)] public Array<float> TriggerSplitEventTimeSeconds;
        [RTTI.Member(7, 0x40, "Logic_Display")] public EDSTimerControlMode TimerControlMode;
        [RTTI.Member(8, 0x48, "Logic_Display")] public Ref<LocalizedTextResource> PurposeText;
        [RTTI.Member(9, 0x50, "Logic_Display")] public bool IsPopup;
        [RTTI.Member(10, 0x51, "Logic_Display")] public bool EnableDisplayRiskMenu;
        [RTTI.Member(11, 0x52, "Logic_Display")] public bool IsNotIntoPrivateRoom;
        [RTTI.Member(12, 0x53, "Logic_Display")] public bool IsOverwriteWithEvaluationTime;
    }

    [RTTI.Serializable(0x8C84EBFC2E39BBEC, GameType.DS)]
    public class DSMissionEventTimerResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x907E97D8EF845E6F, GameType.DS)]
    public class DSMissionExportedGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEA773FEF4C8DD155, GameType.DS)]
    public class DSMissionFactsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Facts")] public Array<CPtr<BooleanFact>> ManagedFacts;
    }

    [RTTI.Serializable(0x5681FF1003815210, GameType.DS)]
    public class DSMissionFactsResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA825AF8238383E8E, GameType.DS)]
    public class DSMissionGoalPoint : DSMissionTargetPointBase
    {
    }

    [RTTI.Serializable(0x28680DF0209B24C9, GameType.DS)]
    public class DSMissionGoalsNotificationSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public bool ShowShortTermGoalIfAny;
        [RTTI.Member(4, 0x21, "General")] public bool ShowLongTermGoalIfAny;
        [RTTI.Member(5, 0x22, "General")] public bool ShowMissionsIfAny;
    }

    [RTTI.Serializable(0x5F33F4D32F85D1B9, GameType.DS)]
    public class DSMissionGoalsResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DSMissionShortTermGoalResource>> ShortTermGoals;
        [RTTI.Member(4, 0x30, "General")] public Array<Ref<DSMissionLongTermGoalResource>> LongTermGoals;
        [RTTI.Member(5, 0x40, "General")] public Array<Ref<DSMissionEpisodeResource>> Episodes;
        [RTTI.Member(7, 0x50, "Hidden")] public Ref<IntegerFact> PreviousShortTermGoalHashFact;
        [RTTI.Member(8, 0x58, "Hidden")] public Ref<IntegerFact> CurrentShortTermGoalHashFact;
        [RTTI.Member(9, 0x60, "Hidden")] public Ref<IntegerFact> CurrentLongTermGoalHashFact;
        [RTTI.Member(10, 0x68, "Hidden")] public Ref<IntegerFact> CurrentEpisodeHashFact;
    }

    [RTTI.Serializable(0x5DCD6511F5A8BA89, GameType.DS)]
    public class DSMissionGoalsResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3090AA49D272DAD1, GameType.DS)]
    public class DSMissionGraphBasicResource : Resource
    {
        [RTTI.Member(16, 0x20, "Order")] public Ref<GraphProgramResource> TempOrderScript;
        [RTTI.Member(17, 0x28, "Order")] public Ref<GraphProgramResource> DecideOrderScript;
        [RTTI.Member(18, 0x30, "Order")] public Ref<GraphProgramResource> CancelOrderScript;
        [RTTI.Member(2, 0x38)] public Ref<GraphProgramResource> StartScript;
        [RTTI.Member(3, 0x40)] public Ref<GraphProgramResource> StartScriptDontExecWhenEntry;
        [RTTI.Member(4, 0x48)] public Ref<GraphProgramResource> PreSuccessScript;
        [RTTI.Member(5, 0x50)] public Ref<GraphProgramResource> SuccessScript;
        [RTTI.Member(6, 0x58)] public Ref<GraphProgramResource> SuccessScriptDontExecWhenEntry;
        [RTTI.Member(7, 0x60)] public Ref<GraphProgramResource> SuccessCheckScript;
        [RTTI.Member(10, 0x68, "Delivery")] public Ref<GraphProgramResource> BaggageDeliveryCheckAtOneTime;
        [RTTI.Member(11, 0x70, "Delivery")] public Ref<GraphProgramResource> BaggageDeliveredScript;
        [RTTI.Member(13, 0x78, "Logic")] public Ref<GraphProgramResource> BaggageBrokenScript;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<GraphProgramResource> UpdateScript;
        [RTTI.Member(8, 0x88)] public Ref<GraphProgramResource> OnCancelByUserScript;
    }

    [RTTI.Serializable(0x7E113CA26F53D66E, GameType.DS)]
    public class DSMissionGraphService : RTTIObject
    {
    }

    [RTTI.Serializable(0x9AD19121CD26DB57, GameType.DS)]
    public class DSMissionGraphServiceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF3A7C14FCD178415, GameType.DS)]
    public class DSMissionInfo
    {
    }

    [RTTI.Serializable(0x9974F0B096C51968, GameType.DS)]
    public class DSMissionInfoStack
    {
    }

    [RTTI.Serializable(0xE94CC2458BE49DFA, GameType.DS)]
    public class DSMissionInfoSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA7A46E6B585142D1, GameType.DS)]
    public class DSMissionInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0xF281DE6BC72994F0, GameType.DS)]
    public class DSMissionLargeSceneCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x3A61E467FE1969C3, GameType.DS)]
    public class DSMissionLargeSceneCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x31F7FC3913846A18, GameType.DS)]
    public class DSMissionLocationDependentTodoNodeResource : DSMissionAbstractTodoNodeResource
    {
        [RTTI.Member(10, 0x40, "BasicInfo")] public Ref<DSMissionAbstractPointResource> Location;
    }

    [RTTI.Serializable(0x5ECC7188C54763B9, GameType.DS)]
    public class DSMissionLogicBlock : Resource
    {
        [RTTI.Member(3, 0x20, "LogicBlock")] public Array<CPtr<DSMissionLogicBlock>> LogicBlocks;
        [RTTI.Member(4, 0x30, "LogicBlock")] public Ref<DSMissionResourceList> ConditionResources;
        [RTTI.Member(5, 0x38, "LogicBlock")] public Ref<DSMissionFactsResource> ConditionFacts;
        [RTTI.Member(6, 0x40, "LogicBlock")] public EDSMissionLogicBlockType LogicType;
        [RTTI.Member(7, 0x44, "LogicBlock")] public int AchievementConsitionNum;
    }

    [RTTI.Serializable(0xE7AD92BA9F2B7CFD, GameType.DS)]
    public class DSMissionLogicBlockSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9814EB3302F993A4, GameType.DS)]
    public class DSMissionLogicCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x8F062D6163A1F94C, GameType.DS)]
    public class DSMissionLogicCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x71B61AD146434D20, GameType.DS)]
    public class DSMissionLogicMiscCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xB1987AE5845167B5, GameType.DS)]
    public class DSMissionLogicMiscCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x28BC59A31B53BA8A, GameType.DS)]
    public class DSMissionLongTermGoalResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<LocalizedTextResource> Text;
    }

    [RTTI.Serializable(0x9D131180CCF5BB48, GameType.DS)]
    public class DSMissionLongTermGoalResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE3AC81AFA524A22F, GameType.DS)]
    public class DSMissionMarkerAdapterResource : DSMarkerAdapterResourceBase
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSMissionMarkerResource> MarkerResource;
    }

    [RTTI.Serializable(0x1DAFFDA3CFC1DC53, GameType.DS)]
    public class DSMissionMarkerResource : ResourceWithName
    {
        [RTTI.Member(7, 0x28, "Objective")] public EMarkerObjectiveType ObjectiveType;
        [RTTI.Member(8, 0x30, "Objective")] public Ref<LocalizedTextResource> ObjectiveText;
        [RTTI.Member(5, 0x38, "Mission")] public Ref<DSMissionResourceBase> MissionResource;
        [RTTI.Member(13, 0x40, "Facts")] public Ref<BooleanFact> Visible;
        [RTTI.Member(15, 0x48, "Settings")] public uint32 SequenceNumber;
        [RTTI.Member(16, 0x4C, "Settings")] public bool VisibleOnMissionSelect;
        [RTTI.Member(10, 0x50, "Location")] public Ref<DSLocator> Locator;
        [RTTI.Member(17, 0x58, "Settings")] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(28, 0x60, "Compass")] public StreamingRef<UITexture> Texture;
        [RTTI.Member(19, 0x68, "Vague")] public bool IsVague;
        [RTTI.Member(20, 0x69, "Vague")] public bool NeverFaintOnVague;
        [RTTI.Member(21, 0x6A, "Vague")] public bool IsCylinder;
        [RTTI.Member(25, 0x6C, "Vague")] public float Radius;
        [RTTI.Member(24, 0x70, "Vague")] public float EffectCylinderLength;
        [RTTI.Member(23, 0x74, "Vague")] public float EffectOffsetZ;
        [RTTI.Member(11, 0x78, "Location")] public EDSArea DSArea;
        [RTTI.Member(27, 0x7A, "Compass")] public bool IsCompassEnable;
        [RTTI.Member(22, 0x7B, "Vague")] public EDSEffectShapeForMissionMarkerType EffectShapeType;
    }

    [RTTI.Serializable(0xC8BF4372031D82FC, GameType.DS)]
    public class DSMissionMessageService : RTTIObject
    {
    }

    [RTTI.Serializable(0xB6A17A086DA04B15, GameType.DS)]
    public class DSMissionMiscCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x550D07D395B38CC4, GameType.DS)]
    public class DSMissionMiscCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3A8712F8410E811A, GameType.DS)]
    public class DSMissionMiscDiscardFactContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4C2C9B37CAA00AE5, GameType.DS)]
    public class DSMissionMiscDiscardFactContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB1DF98EBF6EBE84C, GameType.DS)]
    public class DSMissionMiscFactContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xFF780A8B35537D77, GameType.DS)]
    public class DSMissionMiscFactContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDF4B8ADF1BC6E78C, GameType.DS)]
    public class DSMissionNameCreationResource : Resource
    {
        [RTTI.Member(3, 0x20, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TypeBasicDelivery;
        [RTTI.Member(4, 0x28, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TypeBasicCollect;
        [RTTI.Member(5, 0x30, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TypeSpeed;
        [RTTI.Member(6, 0x38, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TypeCount;
        [RTTI.Member(7, 0x40, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TypeWeight;
        [RTTI.Member(8, 0x48, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TypeSafety;
        [RTTI.Member(9, 0x50, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TypeService;
        [RTTI.Member(10, 0x58, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> TodoText;
        [RTTI.Member(11, 0x60, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> CollectTodoNormalTextBefore;
        [RTTI.Member(12, 0x68, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> CollectTodoCountTextBefore;
        [RTTI.Member(13, 0x70, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> CollectTodoWeightTextBefore;
        [RTTI.Member(14, 0x78, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> CollectTodoTextAfter;
        [RTTI.Member(15, 0x80, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> BaggageName;
        [RTTI.Member(16, 0x88, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> BaggageInfo;
        [RTTI.Member(17, 0x90, "ForStaticSimpleMission")] public Ref<LocalizedTextResource> SimpleDeliveryRoadmapText;
        [RTTI.Member(22, 0x98, "ForBaggageModifire")] public Ref<LocalizedTextResource> Destroyed;
        [RTTI.Member(23, 0xA0, "ForBaggageModifire")] public Ref<LocalizedTextResource> EmptyDestroyed;
        [RTTI.Member(24, 0xA8, "ForBaggageModifire")] public Ref<LocalizedTextResource> Used;
        [RTTI.Member(19, 0xB0, "ForBaggageCount")] public Ref<LocalizedTextResource> NumberCount;
        [RTTI.Member(20, 0xB8, "ForBaggageCount")] public Ref<LocalizedTextResource> WeightCount;
        [RTTI.Member(26, 0xC0, "MissionEventTimer")] public Ref<LocalizedTextResource> TimerTitleFormat;
        [RTTI.Member(28, 0xC8, "Extension")] public Ref<LocalizedTextResource> ExtensionDescriptionForCoolMission;
    }

    [RTTI.Serializable(0xABCD0C92AEBB306C, GameType.DS)]
    public class DSMissionOnlineResources : Resource
    {
        [RTTI.Member(3, 0x20, "LostMission")] public Ref<LocalizedTextResource> LostMissionName;
        [RTTI.Member(4, 0x28, "LostMission")] public Ref<LocalizedTextResource> LostMissionDescription;
        [RTTI.Member(5, 0x30, "LostMission")] public Ref<LocalizedTextResource> LostMissionCondition;
        [RTTI.Member(8, 0x38, "LostPrivateMission")] public Ref<LocalizedTextResource> LostPrivateMissionName;
        [RTTI.Member(9, 0x40, "LostPrivateMission")] public Ref<LocalizedTextResource> LostPrivateMissionDescription;
        [RTTI.Member(10, 0x48, "LostPrivateMission")] public Ref<LocalizedTextResource> LostPrivateMissionCondition;
        [RTTI.Member(13, 0x50, "SupplyMission")] public Ref<LocalizedTextResource> SupplyMissionName;
        [RTTI.Member(14, 0x58, "SupplyMission")] public Ref<LocalizedTextResource> SupplyMissionDescription;
        [RTTI.Member(15, 0x60, "SupplyMission")] public Ref<LocalizedTextResource> SupplyMissionCondition;
        [RTTI.Member(16, 0x68, "SupplyMission")] public Ref<LocalizedTextResource> SupplyMissionTodoDescription;
        [RTTI.Member(19, 0x70, "DynamicLostMission")] public Ref<LocalizedTextResource> DynamicLostMissionName;
        [RTTI.Member(20, 0x78, "DynamicLostMission")] public Ref<LocalizedTextResource> DynamicLostMissionNameForBurnable;
        [RTTI.Member(22, 0x80, "LostBaggageText")] public Ref<LocalizedTextResource> LostBaggageName;
        [RTTI.Member(23, 0x88, "LostBaggageText")] public Ref<LocalizedTextResource> LostBaggageDescription;
        [RTTI.Member(25, 0x90, "LostDymanicMissionBaggageText")] public Ref<LocalizedTextResource> LostDynamicMissionBaggageName;
        [RTTI.Member(35, 0x98, "LosBaggageSpecialText")] public Ref<LocalizedTextResource> LostBaggageSpecialName;
        [RTTI.Member(27, 0xA0, "EmptyBaggageText")] public Ref<LocalizedTextResource> EmptyBaggageName;
        [RTTI.Member(28, 0xA8, "EmptyBaggageText")] public Ref<LocalizedTextResource> EmptyBaggageDescription;
        [RTTI.Member(6, 0xB0, "LostMission")] public Ref<DSStringHashResource> LostMission_RewardHash;
        [RTTI.Member(11, 0xB8, "LostPrivateMission")] public Ref<DSStringHashResource> LostPrivateMission_RewardHash;
        [RTTI.Member(17, 0xC0, "SupplyMission")] public Ref<DSStringHashResource> SupplyMission_RewardHash;
        [RTTI.Member(30, 0xC8, "Scripts")] public Ref<GraphProgramResource> OnlineLostBaggageDeliveredCommonScriptResource;
        [RTTI.Member(32, 0xD0, "Preparations")] public Ref<DSOnlinePreparationItemResource> PreparationForLastStranding;
        [RTTI.Member(33, 0xD8, "Preparations")] public Array<Ref<DSOnlinePreparationTargetResource>> PreparationForTargets;
        [RTTI.Member(37, 0xE8, "Coef")] public float SharedLikeCoef;
        [RTTI.Member(38, 0xEC, "Coef")] public float UsedLikeCoef;
    }

    [RTTI.Serializable(0xD41F51893B469C6A, GameType.DS)]
    public class DSMissionOpenCondition : Resource
    {
        [RTTI.Member(3, 0x20, "Data")] public Array<CPtr<DSMissionOpenList>> OpenLists;
        [RTTI.Member(4, 0x30, "Data")] public Ref<DSMissionLogicBlock> LogicBlocks;
    }

    [RTTI.Serializable(0x427D66DF2C6FA1B8, GameType.DS)]
    public class DSMissionOpenConditionList : Resource
    {
        [RTTI.Member(3, 0x20, "Data")] public Array<CPtr<DSMissionOpenCondition>> OpenConditionList;
    }

    [RTTI.Serializable(0x7ABE7EF90EAB1612, GameType.DS)]
    public class DSMissionOpenConditionListSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA50308B9FF4D8FCE, GameType.DS)]
    public class DSMissionOpenConditionSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6D0E7ABBDED4815E, GameType.DS)]
    public class DSMissionOpenList : Resource
    {
        [RTTI.Member(3, 0x20, "Open")] public Ref<DSMissionResourceList> OpenMissionResourceList;
        [RTTI.Member(4, 0x28, "Open")] public EDSMissionOpenState OpenState;
    }

    [RTTI.Serializable(0xC584E1F4A5F6025A, GameType.DS)]
    public class DSMissionOpenListSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDC058D8243549F3D, GameType.DS)]
    public class DSMissionOpenNode : RTTIObject
    {
    }

    [RTTI.Serializable(0x4EF226A7894A350C, GameType.DS)]
    public class DSMissionOpenNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x736860612D862DB0, GameType.DS)]
    public class DSMissionPickupLocationTodoNodeResource : DSMissionDeliveryTodoNodeResource
    {
    }

    [RTTI.Serializable(0xDF4B07D47BC3437B, GameType.DS)]
    public class DSMissionProgressCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x16C95C14F6DA271F, GameType.DS)]
    public class DSMissionProgressCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7107058A78180B57, GameType.DS)]
    public class DSMissionRangeResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<PrismResource> Prism;
    }

    [RTTI.Serializable(0x397DEEA343B99D39, GameType.DS)]
    public class DSMissionResourceBase : Resource
    {
        [RTTI.Member(7, 0x20, "BasicInfo")] public Ref<DSMissionReward2> Reward2;
        [RTTI.Member(8, 0x28, "BasicInfo")] public Ref<DSMissionGraphBasicResource> GraphScripts;
        [RTTI.Member(9, 0x30, "BasicInfo")] public Ref<DSGraphServiceData> GraphServiceData;
        [RTTI.Member(4, 0x38, "BasicInfo")] public uint64 MissionId;
        [RTTI.Member(5, 0x40, "BasicInfo")] public uint32 DisplayNo;
        [RTTI.Member(6, 0x50, "BasicInfo")] public DSMissionDescription DescriptionText;
        [RTTI.Member(12, 0x74, "BasicInfo")] public EDSMissionAttrFlag Flag;
        [RTTI.Member(3, 0x88, "BasicInfo")] public EDSArea DSAreaId;
        [RTTI.Member(10, 0x90, "BasicInfo")] public Array<Ref<DSMissionEventTimerResource>> MissionEventTimerResources;
        [RTTI.Member(11, 0xA0, "BasicInfo")] public Ref<DSEnsureRawMaterialForItemsListResource> EnsureRawMaterialList;
    }

    [RTTI.Serializable(0x750A45D25435DCC3, GameType.DS)]
    public class DSMissionResourceBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x54F6B058EBDE93EC, GameType.DS)]
    public class DSMissionResourceList : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<UUIDRef<DSMissionResourceBase>> MissionResourceUUIDRefs;
    }

    [RTTI.Serializable(0x293DA7B1C8427D, GameType.DS)]
    public class DSMissionResourceListSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCFC07931153F32EA, GameType.DS)]
    public class DSMissionResultInputInfo
    {
    }

    [RTTI.Serializable(0x2E8ED7143F473C9D, GameType.DS)]
    public class DSMissionResultMultiBaggageLikeOutputInfo
    {
    }

    [RTTI.Serializable(0x955B5D8BFB470133, GameType.DS)]
    public class DSMissionResultMultiOutputInfo
    {
    }

    [RTTI.Serializable(0xB3E7A4667184C8E6, GameType.DS)]
    public class DSMissionResultOutputInfo
    {
    }

    [RTTI.Serializable(0x46D00284ABA6136A, GameType.DS)]
    public class DSMissionResurrectGroup : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<UUIDRef<DSMissionResourceBase>> MissionResourceUUIDRefs;
        [RTTI.Member(3, 0x30)] public Ref<BooleanFact> EnableFact;
    }

    [RTTI.Serializable(0x43004A32C9EB9FEB, GameType.DS)]
    public class DSMissionResurrectInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public float ResurrectMinute;
    }

    [RTTI.Serializable(0x4831D3B33F0D363C, GameType.DS)]
    public class DSMissionReward2 : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSEvaluationType EvaluationType;
        [RTTI.Member(9, 0x28, "AddReward_Evaluation")] public Array<Ref<DSMissionConditionResourceBase>> DefaultEvaluation;
        [RTTI.Member(10, 0x38, "AddReward_Evaluation")] public Array<Ref<DSMissionConditionResourceBase>> PremiumEvaluation;
        [RTTI.Member(21, 0x48, "MenuOption")] public Ref<LocalizedTextResource> OrderRewardText;
        [RTTI.Member(4, 0x50, "BasicReward")] public int32 BaseLike;
        [RTTI.Member(7, 0x54, "Logic_Friendship")] public int32 BaseFriendship;
        [RTTI.Member(12, 0x58, "AddReward_Land")] public bool AddReward_Land_IsEnable;
        [RTTI.Member(14, 0x60, "AddReward_Custom")] public Array<Ref<DSMissionSpecialReportCustomResource>> CustomSpecialReports;
        [RTTI.Member(5, 0x70, "BasicReward")] public Ref<DSMissionEvaluationDataTable> EvaluationDataTableTotalBaggageDamage;
        [RTTI.Member(18, 0x78, "AddReward_Route")] public bool IsRouteEvaluation;
        [RTTI.Member(19, 0x80, "AddReward_Route")] public Ref<DSMissionEvaluationDataTable> EvaluationDataTableRouteDeviation;
        [RTTI.Member(16, 0x88, "AddReward_DelicateDelivery")] public bool AddReward_DelicateDelivery_IsEnable;
        [RTTI.Member(25, 0x90, "Bonus")] public Ref<DSMissionBonusBaggageSetting> BonusSetting;
        [RTTI.Member(23, 0x98, "Option")] public Ref<DSStringHashResource> NameHash;
    }

    [RTTI.Serializable(0x1212D3F879C190F7, GameType.DS)]
    public class DSMissionReward2Set : Resource
    {
        [RTTI.Member(3, 0x20, "RewardDatas")] public Array<Ref<DSMissionReward2>> Rewards;
    }

    [RTTI.Serializable(0x4A4F1418CE8DD7DF, GameType.DS)]
    public class DSMissionReward2Symbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF15A73CEF49D2796, GameType.DS)]
    public class DSMissionRouteMapResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DSMissionRouteResource>> Routes;
    }

    [RTTI.Serializable(0x522D85DB6E686EEA, GameType.DS)]
    public class DSMissionRouteResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSMissionStaticAbstractPointResource> Origin;
        [RTTI.Member(4, 0x28, "General")] public Array<Ref<DSMissionStaticAbstractPointResource>> Waypoints;
        [RTTI.Member(5, 0x38, "General")] public Ref<DSMissionStaticAbstractPointResource> Destination;
        [RTTI.Member(6, 0x40, "General", true)] public Array<EDSMissionRisk> Risks;
        [RTTI.Member(7, 0x50, "General", true)] public Array<EDSMissionRecommend> Recommends;
        [RTTI.Member(9, 0x60, "Hidden")] public uint16 RiskBits;
        [RTTI.Member(10, 0x62, "Hidden")] public uint16 RecommendBits;
    }

    [RTTI.Serializable(0x83062C8FEB501845, GameType.DS)]
    public class DSMissionSafeConditionResource : DSMissionConditionResourceBase
    {
        [RTTI.Member(7, 0x30, "DeliveryBaggage")] public float BaggageDamageMinRate;
    }

    [RTTI.Serializable(0x9024C9416A965CB0, GameType.DS)]
    public class DSMissionSafetyHouseCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xDB477667D397C6D, GameType.DS)]
    public class DSMissionSafetyHouseCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA871AE64B9787962, GameType.DS)]
    public class DSMissionSceneContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xAA8DB537215A7170, GameType.DS)]
    public class DSMissionSceneContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9976FB6A79533BE, GameType.DS)]
    public class DSMissionSceneResource : Resource
    {
        [RTTI.Member(2, 0x20)] public UUIDRef<Scene> LargeSceneUUIDRef;
        [RTTI.Member(3, 0x30)] public Ref<BooleanFact> SceneActivationFact;
        [RTTI.Member(4, 0x38)] public Ref<BooleanFact> SceneUnloadingFact;
    }

    [RTTI.Serializable(0xDF29CE378D32CECF, GameType.DS)]
    public class DSMissionServiceConditionResource : DSMissionConditionResourceBase
    {
    }

    [RTTI.Serializable(0x3F9E0A427B9BCC2B, GameType.DS)]
    public class DSMissionSetEpisodeEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x1A4AB1FACDA2FF9, GameType.DS)]
    public class DSMissionSetEpisodeEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "General")] public UUIDRef<DSMissionEpisodeResource> EpisodeResource;
    }

    [RTTI.Serializable(0x30B4D9F5281AB3D6, GameType.DS)]
    public class DSMissionShortTermGoalResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(4, 0x28, "General")] public bool ShowTransitionAnimation;
    }

    [RTTI.Serializable(0xC96EE9B5B59E9996, GameType.DS)]
    public class DSMissionShortTermGoalResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x39F4DE6387D36DDE, GameType.DS)]
    public class DSMissionSpecialReportCustomResource : DSMissionSpecialReportResource
    {
        [RTTI.Member(25, 0x98, "ResultPurposeScore")] public Ref<LocalizedTextResource> ResultPurposeScoreText;
        [RTTI.Member(26, 0xA0, "ResultPurposeScore")] public Array<EDSMissionSpecialReportArgument> ResultPurposeScoreArgument;
        [RTTI.Member(28, 0xB0, "ResultScore")] public Ref<LocalizedTextResource> ResultScoreText;
        [RTTI.Member(29, 0xB8, "ResultScore")] public Array<EDSMissionSpecialReportArgument> ResultScoreArgument;
        [RTTI.Member(33, 0xC8, "Evaluation")] public EDSEvaluationType EvaluationType;
        [RTTI.Member(31, 0xCC, "Bonus")] public int32 RewardLike;
        [RTTI.Member(36, 0xD0, "Option")] public Ref<DSStringHashResource> SpecialReportHash;
        [RTTI.Member(34, 0xD8, "Evaluation")] public Ref<DSMissionEvaluationDataTable> MissionEvaluationDataTable;
        [RTTI.Member(37, 0xE0, "Option")] public Ref<BooleanFact> MissionMenuViewForcedDisableFact;
    }

    [RTTI.Serializable(0xE7E34541D6C807DC, GameType.DS)]
    public class DSMissionSpecialReportMissionConditionResource : DSMissionSpecialReportResource
    {
        [RTTI.Member(25, 0x98, "ResultPurposeScore")] public Ref<LocalizedTextResource> ResultPurposeScoreText;
        [RTTI.Member(26, 0xA0, "ResultPurposeScore")] public Array<EDSMissionSpecialReportArgument> ResultPurposeScoreArgument;
        [RTTI.Member(28, 0xB0, "ResultScore")] public Ref<LocalizedTextResource> ResultScoreText;
        [RTTI.Member(29, 0xB8, "ResultScore")] public Array<EDSMissionSpecialReportArgument> ResultScoreArgument;
        [RTTI.Member(31, 0xC8, "Evaluation")] public EDSEvaluationType EvaluationType;
    }

    [RTTI.Serializable(0x4C9ADCE48A559B1, GameType.DS)]
    public class DSMissionSpecialReportResource : Resource
    {
        [RTTI.Member(3, 0x20, "Name")] public Ref<LocalizedTextResource> NameText;
        [RTTI.Member(4, 0x28, "Name")] public Array<EDSMissionSpecialReportArgument> NameArgument;
        [RTTI.Member(6, 0x38, "Explanation")] public Ref<LocalizedTextResource> ExplanationText;
        [RTTI.Member(7, 0x40, "Explanation")] public Array<EDSMissionSpecialReportArgument> ExplanationArgument;
        [RTTI.Member(9, 0x50, "Result")] public Ref<LocalizedTextResource> ResultText;
        [RTTI.Member(10, 0x58, "Result")] public Array<EDSMissionSpecialReportArgument> ResultArgument;
        [RTTI.Member(12, 0x68, "RankSCondition")] public Ref<LocalizedTextResource> RankSConditionText;
        [RTTI.Member(13, 0x70, "RankSCondition")] public Ref<LocalizedTextResource> RankSConditionMaxText;
        [RTTI.Member(14, 0x78, "RankSCondition")] public Array<EDSMissionSpecialReportArgument> RankSConditionArgument;
        [RTTI.Member(18, 0x88, "Custom")] public float CustomParam01;
        [RTTI.Member(19, 0x8C, "Custom")] public float CustomParam02;
        [RTTI.Member(23, 0x90, "Option")] public EDSMissionSpecialReportOptionAttrFlag AttrFlag;
        [RTTI.Member(21, 0x91, "MenuOption")] public EDSMissionSpecialReportMenuViewType MenuViewType;
    }

    [RTTI.Serializable(0xFD0BE399AE3DA70D, GameType.DS)]
    public class DSMissionSpecialReportResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF4064199356464C1, GameType.DS)]
    public class DSMissionSpecialReportRouteDeviationResource : DSMissionSpecialReportResource
    {
        [RTTI.Member(28, 0x98, "Evaluation")] public EDSEvaluationType EvaluationType;
        [RTTI.Member(29, 0xA0, "Evaluation")] public Ref<DSMissionEvaluationDataTablesByThreshold> EvaluationDataTablesByThreshold;
        [RTTI.Member(30, 0xA8, "Evaluation")] public Ref<DSMissionEvaluationDataTablesByDeliveryPoint> EvaluationDataTablesByDeliveryPoint;
        [RTTI.Member(25, 0xB0, "ResultScore")] public Ref<LocalizedTextResource> ResultScoreText;
        [RTTI.Member(26, 0xB8, "ResultScore")] public Array<EDSMissionSpecialReportArgument> ResultScoreArgument;
    }

    [RTTI.Serializable(0x4E9A4BCD1F6AB971, GameType.DS)]
    public class DSMissionSpeedConditionResource : DSMissionConditionResourceBase
    {
        [RTTI.Member(7, 0x30, "MissionTime")] public int32 ClearMinMinuteTime;
    }

    [RTTI.Serializable(0x510E59B121EB70C9, GameType.DS)]
    public class DSMissionStartPoint : DSMissionTargetPointBase
    {
    }

    [RTTI.Serializable(0x80B29925E7F2E519, GameType.DS)]
    public class DSMissionStaticAbstractPointResource : DSMissionAbstractPointResource
    {
    }

    [RTTI.Serializable(0x334F03A52A8AC4D3, GameType.DS)]
    public class DSMissionSupplyBaggageResource : DSMissionBaggageResource
    {
        [RTTI.Member(9, 0x60)] public bool IsRequired;
    }

    [RTTI.Serializable(0x81C97AC92ABBCBEF, GameType.DS)]
    public class DSMissionSwitchSectionSetting : RTTIRefObject
    {
        [RTTI.Member(7, 0x20, "MissionResource")] public UUIDRef<DSMissionResourceBase> MissionResourceUUID;
        [RTTI.Member(3, 0x30, "Reason")] public EDSMissionSwitchSectionReason Reason;
        [RTTI.Member(5, 0x31, "AnnihilationBehavior")] public uint8 AnnihilationProgressNumStep;
    }

    [RTTI.Serializable(0x479AC87422D99E01, GameType.DS)]
    public class DSMissionSwitchSectionSettingSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x421F08C0D5A184EF, GameType.DS)]
    public class DSMissionSystem : RTTIObject
    {
    }

    [RTTI.Serializable(0xBD94E6C0043B1C22, GameType.DS)]
    public class DSMissionSystemResource : Resource
    {
    }

    [RTTI.Serializable(0xD42EC531DD141DFD, GameType.DS)]
    public class DSMissionSystemResourceData : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Safetyhouse")] public Array<Ref<Scene>> UpperSceneRefs;
        [RTTI.Member(4, 0x30, "Safetyhouse")] public Array<Ref<Scene>> LowerSceneRefs;
        [RTTI.Member(6, 0x40, "Safetyhouse")] public Ref<BooleanFact> PrivateRoomActivationFact;
        [RTTI.Member(7, 0x48, "Safetyhouse")] public Ref<BooleanFact> PrivateRoomUnloadFact;
        [RTTI.Member(8, 0x50, "Safetyhouse")] public Ref<BooleanFact> PrivateRoomLowerActivationFact;
        [RTTI.Member(9, 0x58, "Safetyhouse")] public Ref<BooleanFact> PrivateRoomLowerActivationFactForSetFalse;
        [RTTI.Member(10, 0x60, "Safetyhouse")] public Ref<BooleanFact> PrivateRoomLowerDeactivateFact;
        [RTTI.Member(49, 0x68, "MiscDiscardFacts")] public Ref<BooleanFact> ResultMenuNotDisplaying;
        [RTTI.Member(44, 0x70, "MiscFacts")] public Ref<BooleanFact> SafetyhouseUnloading;
        [RTTI.Member(11, 0x78, "Safetyhouse")] public Ref<BooleanFact> DynamicTerminalInsideSecurityFact;
        [RTTI.Member(45, 0x80, "MiscFacts")] public Ref<BooleanFact> IsLoadingFact;
        [RTTI.Member(46, 0x88, "MiscFacts")] public Ref<BooleanFact> IsGameInReadyStateFact;
        [RTTI.Member(47, 0x90, "MiscFacts")] public Ref<BooleanFact> CanCreateLostBaggageFact;
        [RTTI.Member(99, 0x98, "Etc")] public Ref<BooleanFact> IsSittingInBedAndStable;
        [RTTI.Member(42, 0xA0, "CutsceneTriggerFacts")] public Array<Ref<BooleanFact>> CutsceneTriggerFacts;
        [RTTI.Member(91, 0xB0, "DifficulySwitchFact")] public Ref<BooleanFact> IsVeryHardFact;
        [RTTI.Member(92, 0xB8, "DifficulySwitchFact")] public Ref<BooleanFact> IsNotVeryHardFact;
        [RTTI.Member(93, 0xC0, "DifficulySwitchFact")] public Ref<BooleanFact> IsVeryHardOnReturnFact;
        [RTTI.Member(94, 0xC8, "DifficulySwitchFact")] public Ref<BooleanFact> IsNotVeryHardOnReturnFact;
        [RTTI.Member(95, 0xD0, "DifficulySwitchFact")] public Ref<BooleanFact> IsVeryHardOnNotReturnFact;
        [RTTI.Member(96, 0xD8, "DifficulySwitchFact")] public Ref<BooleanFact> IsNotVeryHardOnNotReturnFact;
        [RTTI.Member(97, 0xE0, "DifficulySwitchFact")] public Ref<BooleanFact> IsReturnRefferenceFact;
        [RTTI.Member(19, 0xE8, "CommonScripts")] public Ref<GraphProgramResource> InitPreGameScript;
        [RTTI.Member(20, 0xF0, "CommonScripts")] public Ref<GraphProgramResource> GameOverScriptAllDream;
        [RTTI.Member(21, 0xF8, "CommonScripts")] public Ref<GraphProgramResource> GameOverScriptBeforeKnotSpace;
        [RTTI.Member(22, 0x100, "CommonScripts")] public Ref<GraphProgramResource> GameOverScriptAfterKnotSpace;
        [RTTI.Member(23, 0x108, "CommonScripts")] public Ref<GraphProgramResource> GameOverScriptAllDreamBeforeRestart;
        [RTTI.Member(25, 0x110, "CommonScripts")] public Ref<GraphProgramResource> PreSuccessScript;
        [RTTI.Member(26, 0x118, "CommonScripts")] public Ref<GraphProgramResource> SuccessScript;
        [RTTI.Member(27, 0x120, "CommonScripts")] public Ref<GraphProgramResource> AutomationCompleteScript;
        [RTTI.Member(28, 0x128, "CommonScripts")] public Ref<GraphProgramResource> CloseResultScript;
        [RTTI.Member(29, 0x130, "CommonScripts")] public Ref<GraphProgramResource> DispResultStarScriptResource;
        [RTTI.Member(30, 0x138, "CommonScripts")] public Ref<GraphProgramResource> OrderScript;
        [RTTI.Member(24, 0x140, "CommonScripts")] public Ref<GraphProgramResource> PreStartScript;
        [RTTI.Member(31, 0x148, "CommonScripts")] public Ref<GraphProgramResource> CalcMissionResultResource;
        [RTTI.Member(32, 0x150, "CommonScripts")] public Ref<GraphProgramResource> CalcMissionResultAfterResource;
        [RTTI.Member(33, 0x158, "CommonScripts")] public Ref<GraphProgramResource> SortByBaggageUnitStackResource;
        [RTTI.Member(34, 0x160, "CommonScripts")] public Ref<GraphProgramResource> CalcRecycleAfterResource;
        [RTTI.Member(35, 0x168, "CommonScripts")] public Ref<GraphProgramResource> CalcMissionBaggageEvaluationResource;
        [RTTI.Member(36, 0x170, "CommonScripts")] public Ref<GraphProgramResource> CalcBaggageLikeFromRarityResource;
        [RTTI.Member(15, 0x178, "CommonGraphService")] public Ref<DSGraphServiceData> GraphServiceData;
        [RTTI.Member(17, 0x180, "TerminalGraph")] public Ref<DSTerminalGraphResource> DefaultTerminalGraph;
        [RTTI.Member(5, 0x188, "Safetyhouse")] public Ref<DSPrivateRoomGraphResource> DefaultPrivateRoomGraph;
        [RTTI.Member(13, 0x190, "HeartmanRoom")] public Ref<DSPrivateRoomGraphResource> DefaultHeartmanRoomGraph;
        [RTTI.Member(38, 0x198, "Reward")] public Ref<DSMissionReward2Set> CommonRewards2;
        [RTTI.Member(40, 0x1A0, "Online")] public Ref<DSMissionOnlineResources> OnlineResource;
        [RTTI.Member(51, 0x1A8, "Context")] public Ref<DSMissionSceneContext> MissionSceneContext;
        [RTTI.Member(52, 0x1B0, "Context")] public Ref<DSMissionMiscFactContext> MissionMiscFactContext;
        [RTTI.Member(53, 0x1B8, "Context")] public Ref<DSMissionMiscDiscardFactContext> MissionMiscDiscardFactContext;
        [RTTI.Member(54, 0x1C0, "Context")] public Ref<DSInsideTerminalSecurityContext> InsideTerminalSecurityContext;
        [RTTI.Member(56, 0x1C8, "MiscGlobals")] public Ref<DSMissionGoalsResource> MissionGoals;
        [RTTI.Member(58, 0x1D0, "Timer")] public Ref<DSUserPlayTimerSettingResource> UserPlayTimerSetting;
        [RTTI.Member(60, 0x1D8, "FriendlyMule")] public Ref<DSBaggageForFriendlyMuleSystemResource> BaggageForFriendlyMuleSystemResource;
        [RTTI.Member(62, 0x1E0, "Mule")] public Ref<DSPersonalBaggageGeneratorForMuleSystemResource> PersonalBaggageGeneratorForMuleSystemResource;
        [RTTI.Member(64, 0x1E8, "Text")] public Ref<DSMissionNameCreationResource> MissionNameCreationResource;
        [RTTI.Member(66, 0x1F0, "SpecialReport")] public Ref<DSMissionSpecialReportResource> TotalBaggageDamage;
        [RTTI.Member(67, 0x1F8, "SpecialReport")] public Ref<DSMissionSpecialReportResource> RouteExploration;
        [RTTI.Member(68, 0x200, "SpecialReport")] public Ref<DSMissionSpecialReportResource> RouteNotExploration;
        [RTTI.Member(69, 0x208, "SpecialReport")] public Ref<DSMissionSpecialReportRouteDeviationResource> RouteDeviation;
        [RTTI.Member(70, 0x210, "SpecialReport")] public Ref<DSMissionSpecialReportResource> TotalDelivery;
        [RTTI.Member(71, 0x218, "SpecialReport")] public Ref<DSMissionSpecialReportResource> ContentsDamage;
        [RTTI.Member(72, 0x220, "SpecialReport")] public Ref<DSMissionSpecialReportResource> Reachd;
        [RTTI.Member(74, 0x228, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpRepFragile;
        [RTTI.Member(75, 0x230, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpRepDelicate;
        [RTTI.Member(76, 0x238, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpRepDanger;
        [RTTI.Member(77, 0x240, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpRepSensitiveToTimefall;
        [RTTI.Member(78, 0x248, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpRepEquipment;
        [RTTI.Member(79, 0x250, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpRepLivingThing;
        [RTTI.Member(80, 0x258, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpecialReport_MustKeepHorizontally;
        [RTTI.Member(81, 0x260, "BaggageSpecialReport")] public Ref<DSMissionSpecialReportResource> BaggageSpecialReport_Cool;
        [RTTI.Member(83, 0x268, "AreaConnectionPoints")] public Ref<DSAreaConnectionPointResource> AreaConnectionPoints;
        [RTTI.Member(85, 0x270, "DSGameBaggageListItem")] public Ref<DSGameBaggageListItem> WasteBBPod;
        [RTTI.Member(87, 0x278, "Trophies")] public Ref<TrophyResource> CarriedWastedCargoToSwamps;
        [RTTI.Member(89, 0x280, "ResurrectInfo")] public Array<Ref<DSMissionResurrectGroup>> MissionResurrectGroups;
    }

    [RTTI.Serializable(0x26A6E4D07B75F14F, GameType.DS)]
    public class DSMissionSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x308CD52C819D9BC7, GameType.DS)]
    public class DSMissionTargetPointBase : DSMissionStaticAbstractPointResource
    {
        [RTTI.Member(3, 0x20, "Position")] public EDSArea DSArea;
        [RTTI.Member(4, 0x28, "Position")] public Ref<DSLocator> Locator;
        [RTTI.Member(5, 0x30, "Position")] public Ref<LocalizedTextResource> Description;
    }

    [RTTI.Serializable(0xA4D0D3C37FDF308C, GameType.DS)]
    public class DSMissionTargetPointSelector : DSMissionAbstractPointResource
    {
        [RTTI.Member(3, 0x20, "Points")] public Array<Ref<DSMissionTargetPointBase>> Points;
        [RTTI.Member(4, 0x30, "Points")] public Ref<IntegerFact> SelectorFact;
    }

    [RTTI.Serializable(0x23804503FEE85764, GameType.DS)]
    public class DSMissionTerminalCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x7BA998DB540DF37D, GameType.DS)]
    public class DSMissionTerminalCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF9021B6523FB0CA7, GameType.DS)]
    public class DSMissionTodoNodeGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "BasicInfo")] public EDSTodoNodeGroupRule Rule;
        [RTTI.Member(4, 0x24, "BasicInfo")] public bool ShouldAutomaticallyShowUpcomingTodos;
        [RTTI.Member(6, 0x28, "ResourceList")] public Array<Ref<DSMissionAbstractTodoNodeResource>> TodoNodes;
    }

    [RTTI.Serializable(0x3FD5B5FC112A9A0C, GameType.DS)]
    public class DSMissionTodoNodeGroupResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6C0EA1A853C594CA, GameType.DS)]
    public class DSMissionTodoNodeResource : DSMissionAbstractTodoNodeResource
    {
    }

    [RTTI.Serializable(0xFDCBFE7CE67A79C2, GameType.DS)]
    public class DSModifyJointAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8942F966B8790A4A, GameType.DS)]
    public class DSModifyJointAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Parameters")] public uint32 JointHash;
        [RTTI.Member(4, 0x24, "Parameters")] public uint JointIndex;
        [RTTI.Member(5, 0x30, "Parameters")] public Vec3 TranslationMultiplier;
        [RTTI.Member(6, 0x40, "Parameters")] public float RotationMultiplier;
    }

    [RTTI.Serializable(0x4B73343F2A0AE727, GameType.DS)]
    public class DSMortarShell : DSShell
    {
    }

    [RTTI.Serializable(0x31D8707D4D2840ED, GameType.DS)]
    public class DSMortarShellResource : DSShellResource
    {
        [RTTI.Member(79, 0x1E0, "Shell")] public EDSShellDamageType ShellDamageType;
    }

    [RTTI.Serializable(0x4CFC77A51BF85C6F, GameType.DS)]
    public class DSMotionPointTableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2EDC0FCA49F4034E, GameType.DS)]
    public class DSMotionPointTableComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<uint32> NameHashList;
        [RTTI.Member(4, 0x30, "General")] public Array<uint32> JointNameHashList;
        [RTTI.Member(5, 0x40, "General")] public Array<Quat> RotationList;
        [RTTI.Member(6, 0x50, "General")] public Array<Vec3> TranslationList;
    }

    [RTTI.Serializable(0x8A6D7FF48566591F, GameType.DS)]
    public class DSMovableSkinnedMeshInstance : SimpleAnimatingSkinnedMeshInstance
    {
    }

    [RTTI.Serializable(0x53340E4301B568DC, GameType.DS)]
    public class DSMovableStaticMeshInstance : GeometryObject
    {
    }

    [RTTI.Serializable(0x610E03FD678333FE, GameType.DS)]
    public class DSMovementPath : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "MovementPath")] public Array<Ref<WorldNode>> PathPoints;
        [RTTI.Member(8, 0x80, "MovementPath")] public Array<float> Speeds;
        [RTTI.Member(9, 0x90, "MovementPath")] public bool DoLoop;
        [RTTI.Member(10, 0x91, "MovementPath")] public bool SmoothPath;
        [RTTI.Member(11, 0x92, "MovementPath")] public bool ForceHeading;
        [RTTI.Member(12, 0x93, "MovementPath")] public bool HelicopterMove;
    }

    [RTTI.Serializable(0xAD4F484158B5692E, GameType.DS)]
    public class DSMovementPathAction : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4265D010093A42B8, GameType.DS)]
    public class DSMovementPathActionDie : DSMovementPathAction
    {
        [RTTI.Member(2, 0x20)] public float DelayTime;
    }

    [RTTI.Serializable(0xD87BFFDA3DE80665, GameType.DS)]
    public class DSMovementPathActionDropBomb : DSMovementPathAction
    {
        [RTTI.Member(2, 0x20)] public Ref<DSShellResource> Bomb;
        [RTTI.Member(3, 0x28)] public int NumBombs;
        [RTTI.Member(4, 0x2C)] public float BombDropInterval;
    }

    [RTTI.Serializable(0x188A459159D827A7, GameType.DS)]
    public class DSMovementPathNodeWithAction : WorldNode
    {
        [RTTI.Member(5, 0x60, "DSMovementPathNode")] public Ref<DSMovementPathAction> Action;
    }

    [RTTI.Serializable(0xC369FDDE3E16792F, GameType.DS)]
    public class DSMoverSupportComponent : Mover
    {
    }

    [RTTI.Serializable(0x883EF99F99A903A2, GameType.DS)]
    public class DSMoverSupportComponentResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "DS")] public Array<Ref<DSPostureFlagToController>> FlagToControllers;
        [RTTI.Member(8, 0x38, "DS")] public Array<Ref<DSPostureSettings>> DSPostures;
        [RTTI.Member(9, 0x48, "DS")] public bool IsDefaultMover;
    }

    [RTTI.Serializable(0x7EDA6D7A2E344F7, GameType.DS)]
    public class DSMuleCPFlareControllerResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<LightResource> LightResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<CurveResource> LightIntensityCurve;
        [RTTI.Member(12, 0x30, "General")] public Ref<CurveResource> WeatherCurve;
        [RTTI.Member(7, 0x38, "General")] public WorldPosition ShootFlarePosition;
        [RTTI.Member(5, 0x50, "General")] public Mat44 LightMatrix;
        [RTTI.Member(6, 0x90, "General")] public float LightHieghtScale;
        [RTTI.Member(10, 0x98, "General")] public Ref<EntityResource> FlareEntity;
        [RTTI.Member(8, 0xA0, "General")] public float ShootInterval;
        [RTTI.Member(9, 0xA4, "General")] public float ShootIntervalRandomOffset;
        [RTTI.Member(11, 0xA8, "General")] public Ref<WeatherSetup> WeatherSetup;
    }

    [RTTI.Serializable(0x9E7B81A2DE97C196, GameType.DS)]
    public class DSMuleCPGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0xD4C20CD96D4895F3, GameType.DS)]
    public class DSMuleCPGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(13, 0xB8, "MuleCP")] public float RaderRadius;
        [RTTI.Member(14, 0xBC, "MuleCP")] public float PreCautionRdius;
        [RTTI.Member(15, 0xC0, "MuleCP")] public float GiveupRadius;
        [RTTI.Member(16, 0xC8, "MuleCP")] public Array<Ref<DSMuleCPPositionHolder>> Positions;
        [RTTI.Member(17, 0xD8, "MuleCP")] public Array<Ref<NavMeshArea>> IgnoreAreas;
        [RTTI.Member(20, 0xE8, "Members")] public Array<Ref<DSMuleGameActorLocator>> Searchers;
        [RTTI.Member(21, 0xF8, "Members")] public Array<Ref<DSMuleGameActorLocator>> Guads;
        [RTTI.Member(22, 0x108, "Members")] public Array<Ref<DSMuleGameActorLocator>> Followers;
        [RTTI.Member(23, 0x118, "Members")] public Ref<DSCliffGameActorLocator> Cliff;
        [RTTI.Member(24, 0x120, "Members")] public int NumAttackerSearchers;
        [RTTI.Member(25, 0x124, "Members")] public int NumBackupSearchers;
        [RTTI.Member(26, 0x128, "Members")] public float GuardBecomeSearcherDistance;
        [RTTI.Member(34, 0x130, "Zones")] public Array<Ref<DSMuleCPZone>> Zones;
        [RTTI.Member(35, 0x140, "Zones")] public float ZoneActivationConeAngle;
        [RTTI.Member(28, 0x148, "Posts")] public Array<Ref<DSDeliveryPointLocator>> Posts;
        [RTTI.Member(29, 0x158, "Posts")] public Ref<DSDeliveryPointLocator> MainPost;
        [RTTI.Member(40, 0x160, "Settings")] public Ref<BooleanFact> IsDemensFact;
        [RTTI.Member(41, 0x168, "Settings")] public Array<Ref<ArtPartsVariationResource>> ReinforceVariations;
        [RTTI.Member(11, 0x178, "General")] public Ref<ArtPartsVariationResource> LightArmorVariationSetting;
        [RTTI.Member(18, 0x188, "MuleCP")] public Ref<DSMuleCPFlareControllerResource> FlareController;
        [RTTI.Member(37, 0x190, "MuleAreaSymbols")] public Array<Ref<DSMuleCPPositionHolder>> Previews;
        [RTTI.Member(38, 0x1A0, "MuleAreaSymbols")] public Array<Ref<PrefabInstance>> MuleAreaSymbols;
        [RTTI.Member(30, 0x1B0, "Posts")] public Array<Ref<DSLocator>> Parkigs;
        [RTTI.Member(31, 0x1C0, "Posts")] public Array<Ref<DSLocator>> TrashDisposals;
        [RTTI.Member(32, 0x1D0, "Posts")] public Ref<NavMeshArea> TentShape;
    }

    [RTTI.Serializable(0xF6BB84EF1A1ABF22, GameType.DS)]
    public class DSMuleCPGameActorLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCA306DA8DEF666AF, GameType.DS)]
    public class DSMuleCPGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xEB90249CF897E373, GameType.DS)]
    public class DSMuleCPGameActorUnitResource : DSGameActorUnitResource
    {
        [RTTI.Member(13, 0x58, "Sound")] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(15, 0x68, "Effect")] public Ref<DSOdradekEffectResource> RaderEffect;
        [RTTI.Member(16, 0x70, "Effect")] public Ref<DSPreppersBarriorEffectResource> SensorAcceptEffects;
        [RTTI.Member(18, 0x78, "Rumble")] public Ref<RumbleResource> SensorRumble;
        [RTTI.Member(20, 0x80, "DS")] public Ref<CurveResource> GiveupAreaExpantionCurve;
    }

    [RTTI.Serializable(0xE1B323F9073056A6, GameType.DS)]
    public class DSMuleCPPositionHolder : DSLocator
    {
    }

    [RTTI.Serializable(0xD0DFB6A53DA67472, GameType.DS)]
    public class DSMuleCPZone : ParentWorldNode
    {
        [RTTI.Member(7, 0x78, "Zone")] public Array<Ref<DSMuleCPPositionHolder>> Positions;
        [RTTI.Member(8, 0x88, "Zone")] public float Radius;
        [RTTI.Member(9, 0x8C, "Zone")] public float CloseToZoneRadius;
        [RTTI.Member(10, 0x90, "Zone")] public int MaximumFollowers;
    }

    [RTTI.Serializable(0x4CC86B848DDD04E4, GameType.DS)]
    public class DSMuleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x248669634C412BD4, GameType.DS)]
    public class DSMuleComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xDCB6522BF9CCEDCB, GameType.DS)]
    public class DSMuleComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Effect")] public Ref<DSOdradekEffectResource> RaderEffect;
        [RTTI.Member(5, 0x28, "Rumble")] public Array<Ref<RumbleResource>> Rumbles;
        [RTTI.Member(7, 0x38, "Morpheme")] public AnimationTagID CombatTagID;
    }

    [RTTI.Serializable(0xB744E19963C2A014, GameType.DS)]
    public class DSMuleConfig : RTTIRefObject
    {
        [RTTI.Member(5, 0x20, "Weapon")] public Array<EDSWeaponId> InitWeaponIds;
        [RTTI.Member(7, 0x30, "AI")] public bool DisableJavelin;
        [RTTI.Member(3, 0x34, "General")] public uint32 NameHash;
    }

    [RTTI.Serializable(0x8D33CD8DC603006, GameType.DS)]
    public class DSMuleConfigSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCCE14234DB3F97AF, GameType.DS)]
    public class DSMuleDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFDA81152EAC1BF74, GameType.DS)]
    public class DSMuleDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(6, 0x20, "Sound")] public Array<Ref<NamedSoundResource>> SoundResources;
        [RTTI.Member(3, 0x30, "Stimulus")] public Ref<AIAuralStimulusResource> LoudScreamResource;
        [RTTI.Member(4, 0x38, "Stimulus")] public Ref<AIAuralStimulusResource> LowScreamResource;
    }

    [RTTI.Serializable(0xD15329179EF23F3D, GameType.DS)]
    public class DSMuleEnergyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x11B0CFB92CAC0FD4, GameType.DS)]
    public class DSMuleEnergyComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Morpheme")] public AnimationTagID TiredTagID;
        [RTTI.Member(6, 0x24, "Energy")] public float Energy;
        [RTTI.Member(7, 0x28, "Energy")] public float EnergyRegeneration;
        [RTTI.Member(8, 0x2C, "Energy")] public float EnergyRegenerationAtRest;
        [RTTI.Member(10, 0x30, "EnergyReduction")] public float AttackEnergyReduction;
        [RTTI.Member(11, 0x34, "EnergyReduction")] public float RunEnergyReductionPerMeter;
        [RTTI.Member(3, 0x38, "Morpheme")] public Ref<MorphemeAnimationManagerResource> AnimationManager;
    }

    [RTTI.Serializable(0xD41D9FEA7C01763A, GameType.DS)]
    public class DSMuleFireOnceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x925D0FB3FE53EEB9, GameType.DS)]
    public class DSMuleFireOnceEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x20FB658D92153887, GameType.DS)]
    public class DSMuleForceVisibleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE5D6C0FEC0D0EC02, GameType.DS)]
    public class DSMuleForceVisibleEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x802B767521F94E90, GameType.DS)]
    public class DSMuleGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x423130BA9D73EF6A, GameType.DS)]
    public class DSMuleGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "Mule")] public Ref<DSMuleGameActorUnitResource> CustomUnitResource;
        [RTTI.Member(12, 0xB8, "Mule")] public Ref<DSMuleConfig> CustomMuleConfig;
        [RTTI.Member(13, 0xC0, "Mule")] public Ref<BooleanFact> IsDemensFact;
        [RTTI.Member(14, 0xC8, "Mule")] public Ref<DSGameBaggageListItem> DeliveringBaggage;
        [RTTI.Member(15, 0xD0, "Mule")] public Ref<DSPersonalBaggageGeneratorForMuleResource> PersonalBaggageGenerator;
        [RTTI.Member(16, 0xD8, "Mule")] public Ref<DSPersonalBaggageGeneratorForMuleSystemResource> PorterFriendshipBaggageGeneratorMap;
        [RTTI.Member(17, 0xE0, "Mule")] public bool IsDefaultDriver;
        [RTTI.Member(18, 0xE1, "Mule")] public bool IsDemensOnly;
        [RTTI.Member(19, 0xE8, "Mule")] public Array<Ref<BooleanFact>> ActivationFacts;
        [RTTI.Member(20, 0xF8, "Mule")] public Ref<DSFriendlyMuleGroupInfoResource> FriendlyMuleGroupInfo;
    }

    [RTTI.Serializable(0x966426DE555F71A4, GameType.DS)]
    public class DSMuleGameActorLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDE220E10F4B069C, GameType.DS)]
    public class DSMuleGameActorLowLODResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Effect")] public Ref<ParticleSystemResource> AnnihilationEffectParticleSystem;
        [RTTI.Member(4, 0x28, "Effect")] public Ref<ParticleSystemResource> NecrosisEffectParticleSystemResource;
    }

    [RTTI.Serializable(0x78B9C98389A2E6FB, GameType.DS)]
    public class DSMuleGameActorSetup : GameActorSetup
    {
        [RTTI.Member(5, 0x68, "Mule")] public Ref<DSMuleConfig> CustomMuleConfig;
    }

    [RTTI.Serializable(0x7396E47DA8D0BB5A, GameType.DS)]
    public class DSMuleGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xEA4BABB2F9A5D40, GameType.DS)]
    public class DSMuleGameActorUnitResource : DSGameActorUnitResource
    {
        [RTTI.Member(13, 0x58, "Mule")] public EDSMuleType MuleType;
        [RTTI.Member(14, 0x60, "Mule")] public Ref<DSMuleConfig> MuleConfig;
        [RTTI.Member(15, 0x68, "Mule")] public Ref<DSMuleUnitConfig> MuleUnitConfig;
        [RTTI.Member(16, 0x70, "Mule")] public Ref<DSMuleGameActorLowLODResource> LowLODResources;
        [RTTI.Member(17, 0x78, "Mule")] public int ReinforceMaxCount;
        [RTTI.Member(18, 0x7C, "Mule")] public int IndividualVariationMax;
        [RTTI.Member(19, 0x80, "Mule")] public Ref<ArtPartsVariationResource> VariationSetting;
        [RTTI.Member(20, 0x88, "Mule")] public bool IsLightArmorModel;
    }

    [RTTI.Serializable(0x3AF0D7FD8CF304EE, GameType.DS)]
    public class DSMuleGameActorUnitResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x718194369670D7B5, GameType.DS)]
    public class DSMuleGroundMovementPluginResource : DSGroundMovementPluginResource
    {
        [RTTI.Member(4, 0x20, "SpecialMove")] public float WaterSpeedDownDepth;
        [RTTI.Member(3, 0x24, "SpecialMove")] public float WaterWalkSpeed;
        [RTTI.Member(8, 0x28, "Stamina")] public float MaxRunStaminaValue;
        [RTTI.Member(9, 0x2C, "Stamina")] public float RunVoiceStartValue;
        [RTTI.Member(10, 0x30, "Stamina")] public float RunTierdVoiceStartValue;
        [RTTI.Member(11, 0x34, "Stamina")] public float RunStaminaRecoverySpeed;
        [RTTI.Member(5, 0x38, "SpecialMove")] public float AfeterWaterSlowTime;
        [RTTI.Member(6, 0x3C, "SpecialMove")] public float StealthPlantStartInterval;
    }

    [RTTI.Serializable(0x15667FF091813CF6, GameType.DS)]
    public class DSMuleInferencePluginResource : DSInferencePluginBaseResource
    {
    }

    [RTTI.Serializable(0x3389A807EBA49A6, GameType.DS)]
    public class DSMuleMorphemeSoundEventVoiceMapping
    {
        [RTTI.Member(1, 0x0, "DS")] public AnimationEventID MorphemeEventID;
        [RTTI.Member(2, 0x4, "DS")] public EMuleVoiceType MuleVoiceType;
    }

    [RTTI.Serializable(0xCC8F1F7A2B0C2E69, GameType.DS)]
    public class DSMuleNoPerceptionKnowledgeComponent : DSAINoPerceptionKnowledgeComponentBase
    {
    }

    [RTTI.Serializable(0x441A6CEE69304323, GameType.DS)]
    public class DSMuleNoPerceptionKnowledgeComponentResource : DSAINoPerceptionKnowledgeComponentResourceBase
    {
        [RTTI.Member(3, 0x20, "Animation")] public String AnimTagJump;
        [RTTI.Member(4, 0x28, "Animation")] public String AnimTagLadder;
    }

    [RTTI.Serializable(0xE008972B3789FFAF, GameType.DS)]
    public class DSMuleOdradekArmEntity : DSMuleOdradekBaseEntity
    {
    }

    [RTTI.Serializable(0xD1DF596377F8B781, GameType.DS)]
    public class DSMuleOdradekArmEntityResource : DSMuleOdradekBaseEntityResource
    {
        [RTTI.Member(34, 0x108, "MuleOdradek")] public float MinimumYaw;
        [RTTI.Member(35, 0x10C, "MuleOdradek")] public float MaximumYaw;
        [RTTI.Member(36, 0x110, "MuleOdradek")] public float MinimumPitch;
        [RTTI.Member(37, 0x114, "MuleOdradek")] public float MaximumPitch;
    }

    [RTTI.Serializable(0xE07853625A07B8E1, GameType.DS)]
    public class DSMuleOdradekBaseEntity : Entity
    {
    }

    [RTTI.Serializable(0x17E5672E8A388EAD, GameType.DS)]
    public class DSMuleOdradekBaseEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "MuleOdradek")] public float YawSpeed;
        [RTTI.Member(32, 0x104, "MuleOdradek")] public float PitchSpeed;
    }

    [RTTI.Serializable(0x86DD226671B40A21, GameType.DS)]
    public class DSMuleOdradekBodyEntity : DSMuleOdradekBaseEntity
    {
    }

    [RTTI.Serializable(0xF4583519C5468E57, GameType.DS)]
    public class DSMuleOdradekBodyEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x4C176B8A70DD3FB7, GameType.DS)]
    public class DSMuleOdradekBodyEntityResource : DSMuleOdradekBaseEntityResource
    {
        [RTTI.Member(34, 0x108, "LightState")] public Array<Ref<DSMuleOdradekLightStateSettings>> LightSettings;
        [RTTI.Member(36, 0x118, "Shaders")] public Array<DSMuleOdradekShaderTarget> ShaderTargets;
        [RTTI.Member(37, 0x128, "Shaders")] public Array<int> NumValuesPerShaderTarget;
    }

    [RTTI.Serializable(0xA37FA6E23C473567, GameType.DS)]
    public class DSMuleOdradekComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x51AFF1B5ACD44BD8, GameType.DS)]
    public class DSMuleOdradekComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xC654309873924FBC, GameType.DS)]
    public class DSMuleOdradekComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Odradek")] public Ref<DSMuleOdradekArmEntityResource> OdradekArmResource;
        [RTTI.Member(4, 0x28, "Odradek")] public Ref<DSMuleOdradekBodyEntityResource> OdradekBodyResource;
    }

    [RTTI.Serializable(0x61A51C7CFCAC27FC, GameType.DS)]
    public class DSMuleOdradekLightStateSettings : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Shader")] public Array<DSMuleOdradekStateShaderSettings> ShaderSettings;
        [RTTI.Member(11, 0x30, "Light")] public Array<bool> LensFlareFromStateTable;
        [RTTI.Member(5, 0x40, "Light")] public Ref<AttachedLightsComponentResource> NormalLight;
        [RTTI.Member(6, 0x48, "Light")] public Ref<AttachedLightsComponentResource> LensFlareLight;
        [RTTI.Member(7, 0x50, "Light")] public Ref<CurveResource> NormalLightLoop;
        [RTTI.Member(8, 0x58, "Light")] public Ref<CurveResource> NormalLightLoopToLensFlare;
        [RTTI.Member(9, 0x60, "Light")] public Ref<CurveResource> LensFlareLightFadeIn;
        [RTTI.Member(10, 0x68, "Light")] public Ref<CurveResource> LensFlareLightFadeOut;
    }

    [RTTI.Serializable(0x4365043B0EAEDFBC, GameType.DS)]
    public class DSMuleOdradekShaderTarget
    {
        [RTTI.Member(0, 0x0)] public String ModelPartName;
        [RTTI.Member(1, 0x8)] public String VariableID;
    }

    [RTTI.Serializable(0xB837A71803F9F9AF, GameType.DS)]
    public class DSMuleOdradekSound : NamedSoundResource
    {
        [RTTI.Member(7, 0x30, "DS")] public EDSMuleOdradekAction OdradekActionType;
    }

    [RTTI.Serializable(0x1D6D40086AB79DC6, GameType.DS)]
    public class DSMuleOdradekSoundResources : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "DS")] public Array<Ref<DSMuleOdradekSound>> SoundResources;
    }

    [RTTI.Serializable(0xB05EDB5C91F8F145, GameType.DS)]
    public class DSMuleOdradekStateShaderSettings
    {
        [RTTI.Member(0, 0x0)] public Vec4 Value;
        [RTTI.Member(1, 0x10)] public int NumValues;
    }

    [RTTI.Serializable(0xC6BC67350A1916FD, GameType.DS)]
    public class DSMulePostConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0xF4C648FA01F2DEA4, GameType.DS)]
    public class DSMulePostConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "MulePost")] public float HackingTime;
    }

    [RTTI.Serializable(0xE45C7E166FDC427B, GameType.DS)]
    public class DSMuleSlipComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x85D7E983742905D2, GameType.DS)]
    public class DSMuleSlipComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Parameters")] public float DontSlipAfterStartTime;
        [RTTI.Member(4, 0x24, "Parameters")] public float StrongSlipRate;
        [RTTI.Member(6, 0x28, "InWater")] public float InWaterSlipIntervalMinTime;
        [RTTI.Member(7, 0x2C, "InWater")] public float InWaterSlipIntervalMaxTime;
        [RTTI.Member(9, 0x30, "OnRock")] public float StepOnRockSlipHeight;
        [RTTI.Member(10, 0x34, "OnRock")] public float OnRokeSlipRate;
        [RTTI.Member(12, 0x38, "FlatFloor")] public float FlatSlipRate;
        [RTTI.Member(13, 0x3C, "FlatFloor")] public float FlatSlipIntervalTime;
        [RTTI.Member(15, 0x40, "SlipGranade")] public float FlatSlipRateSlipGranade;
        [RTTI.Member(16, 0x44, "SlipGranade")] public float FlatSlipIntervalTimeSlipGranade;
        [RTTI.Member(18, 0x48, "QuickTurn")] public int QuickTurnStartEvent;
        [RTTI.Member(19, 0x4C, "QuickTurn")] public float QuickTurnSlipScale;
        [RTTI.Member(21, 0x50, "Jump")] public float JumpSlipRate;
    }

    [RTTI.Serializable(0x165CB3CB5080BC0B, GameType.DS)]
    public class DSMuleUnitConfig : RTTIRefObject
    {
        [RTTI.Member(5, 0x20, "Life")] public float MaxLife;
        [RTTI.Member(6, 0x24, "Life")] public float MaxStamina;
        [RTTI.Member(7, 0x28, "Life")] public float MaxSleepiness;
        [RTTI.Member(8, 0x2C, "Life")] public float MaxStrandAmount;
        [RTTI.Member(9, 0x30, "Life")] public float StaminaRecoveryRate;
        [RTTI.Member(10, 0x34, "Life")] public float SleepinessRecoveryRate;
        [RTTI.Member(11, 0x38, "Life")] public float StrandRecoveryRate;
        [RTTI.Member(12, 0x3C, "Life")] public float HeadshotMagnification;
        [RTTI.Member(13, 0x40, "Life")] public float EndureBulletLifeDamageAmount;
        [RTTI.Member(14, 0x44, "Life")] public float EndureBulletStaminaDamageAmount;
        [RTTI.Member(15, 0x48, "Life")] public float TimeLengthToComputeEndurance;
        [RTTI.Member(16, 0x4C, "Life")] public float MeleeDamageMultiplesFromBack;
        [RTTI.Member(17, 0x50, "Life")] public float MaxBlockAmount;
        [RTTI.Member(18, 0x54, "Life")] public float BlockRecoveryRate;
        [RTTI.Member(19, 0x58, "Life")] public float WarriorLifeRecoveryRate;
        [RTTI.Member(20, 0x5C, "Life")] public float DodgeProbability;
        [RTTI.Member(3, 0x64, "General")] public uint32 NameHash;
    }

    [RTTI.Serializable(0xB7D7DEA839831213, GameType.DS)]
    public class DSMuleUnitConfigSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC91B99DA70C90772, GameType.DS)]
    public class DSMuleVoiceControlComponent : DSNpcVoiceControlComponent
    {
    }

    [RTTI.Serializable(0xE982BCEAEC844573, GameType.DS)]
    public class DSMuleVoiceControlComponentResource : DSNpcVoiceControlComponentResource
    {
        [RTTI.Member(5, 0x38, "DS")] public Ref<DSMuleOdradekSoundResources> OdradkSoundResource;
        [RTTI.Member(6, 0x40, "DS")] public Array<DSMuleMorphemeSoundEventVoiceMapping> MorphemeSoundEventVoiceMappings;
    }

    [RTTI.Serializable(0x9AD2947898794003, GameType.DS)]
    public class DSMuleWeaponComponent : DSNpcWeaponComponent
    {
    }

    [RTTI.Serializable(0x9C451CE38AD5E049, GameType.DS)]
    public class DSMuleWeaponComponentRep : DSNpcWeaponComponentRep
    {
    }

    [RTTI.Serializable(0x1591045730510150, GameType.DS)]
    public class DSMuleWeaponComponentResource : DSNpcWeaponComponentResource
    {
        [RTTI.Member(23, 0x90, "MuleWeapon")] public Ref<ThrowableResource> Javelin;
        [RTTI.Member(25, 0x98, "Animation")] public AnimationTagID CoverLeftTagID;
        [RTTI.Member(26, 0x9C, "Animation")] public AnimationTagID CoverRightTagID;
        [RTTI.Member(27, 0xA0, "Animation")] public AnimationTagID SquatTagID;
        [RTTI.Member(28, 0xA4, "Animation")] public AnimationTagID LeftSideTagID;
        [RTTI.Member(29, 0xA8, "Animation")] public AnimationTagID RightSideTagID;
        [RTTI.Member(31, 0xB0, "Helper")] public String LeftHandHelper;
        [RTTI.Member(32, 0xB8, "Helper")] public String RightHandHelper;
        [RTTI.Member(33, 0xC0, "Helper")] public String LeftFootHelper;
        [RTTI.Member(34, 0xC8, "Helper")] public String RightFootHelper;
        [RTTI.Member(36, 0xD0, "Sound")] public Ref<SoundResource> StickyGunLockOnSound;
    }

    [RTTI.Serializable(0x71D97829D0D907A3, GameType.DS)]
    public class DSMultiAttachedLightsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x246FAD2324D65074, GameType.DS)]
    public class DSMultiAttachedLightsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "AttachedLights")] public Array<Ref<AttachedLightsComponentResource>> AttachedLights;
    }

    [RTTI.Serializable(0xAF1ECCF1C10F639F, GameType.DS)]
    public class DSMultiPositionSoundComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC7871BB10F530D81, GameType.DS)]
    public class DSMultiPositionSoundComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<SoundResource> SoundResource;
    }

    [RTTI.Serializable(0xDAFEAE13C7269562, GameType.DS)]
    public class DSMusicPlayerAlbumResource : RTTIRefObject
    {
        [RTTI.Member(7, 0x20)] public int16 MenuDisplayPriority;
        [RTTI.Member(2, 0x28)] public Ref<LocalizedTextResource> TitleText;
        [RTTI.Member(3, 0x30)] public Ref<LocalizedTextResource> ArtistNameText;
        [RTTI.Member(4, 0x38)] public Ref<LocalizedTextResource> CreditNameText;
        [RTTI.Member(5, 0x40)] public Ref<LocalizedTextResource> ArtistNameTextForTelop;
        [RTTI.Member(6, 0x48)] public Ref<LocalizedTextResource> CreditNameTextForTelop;
        [RTTI.Member(8, 0x50)] public Ref<DSMusicPlayerArtistResource> ArtistResource;
    }

    [RTTI.Serializable(0x17FF4558067CC876, GameType.DS)]
    public class DSMusicPlayerArtistResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint32 ArtistId;
        [RTTI.Member(3, 0x24)] public int16 MenuDisplayPriority;
        [RTTI.Member(4, 0x28)] public Ref<LocalizedTextResource> ArtistNameText;
    }

    [RTTI.Serializable(0x256E8E4E5646F75A, GameType.DS)]
    public class DSMusicPlayerSystemResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Music")] public Array<Ref<DSMusicPlayerAlbumResource>> AllAlbums;
        [RTTI.Member(4, 0x30, "Music")] public Array<Ref<DSMusicPlayerTrackResource>> AllMusics;
        [RTTI.Member(6, 0x40, "MusicControlFact")] public Ref<EnumFact> MusicPlayerEnumFact;
        [RTTI.Member(9, 0x48, "MusicPauseControlFact")] public Ref<EnumFact> MusicPlayerControlEnumFact;
        [RTTI.Member(7, 0x50, "MusicControlFact")] public Ref<EnumFactEntry> StopEnumFactEntry;
        [RTTI.Member(10, 0x58, "MusicPauseControlFact")] public Ref<EnumFactEntry> PauseEnumFactEntry;
        [RTTI.Member(11, 0x60, "MusicPauseControlFact")] public Ref<EnumFactEntry> ResumeEnumFactEntry;
        [RTTI.Member(12, 0x68, "MusicPauseControlFact")] public Ref<EnumFactEntry> ResumeByAnotherTrackEnumFactEntry;
    }

    [RTTI.Serializable(0x1749BDEE3A132B09, GameType.DS)]
    public class DSMusicPlayerTrackResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "BasicInfo")] public uint32 Id;
        [RTTI.Member(4, 0x24, "BasicInfo")] public uint16 Seconds;
        [RTTI.Member(6, 0x28, "BasicInfo")] public int16 MenuDisplayPriority;
        [RTTI.Member(9, 0x2A, "BasicInfo")] public uint8 Flag;
        [RTTI.Member(5, 0x30, "BasicInfo")] public Ref<DSMusicPlayerAlbumResource> Album;
        [RTTI.Member(7, 0x38, "BasicInfo")] public Ref<LocalizedTextResource> TitleText;
        [RTTI.Member(8, 0x40, "BasicInfo")] public Ref<EnumFactEntry> TrackEnumFactEntry;
    }

    [RTTI.Serializable(0xC115B3A66F209606, GameType.DS)]
    public class DSMusicPlayerTrackResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x64334B8853D823ED, GameType.DS)]
    public class DSNPCCoverActionSupportAimOffsetResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSWeaponId WeaponId;
        [RTTI.Member(3, 0x30)] public Vec3 AimOffsetStandLeft;
        [RTTI.Member(4, 0x40)] public Vec3 AimOffsetStandRight;
        [RTTI.Member(5, 0x50)] public Vec3 AimOffsetSquatLeft;
        [RTTI.Member(6, 0x60)] public Vec3 AimOffsetSquatLeftUp;
        [RTTI.Member(7, 0x70)] public Vec3 AimOffsetSquatRight;
        [RTTI.Member(8, 0x80)] public Vec3 AimOffsetSquatRightUp;
        [RTTI.Member(9, 0x90)] public Vec3 PeepLeftBaseOffset;
        [RTTI.Member(10, 0xA0)] public Vec3 PeepRightBaseOffset;
    }

    [RTTI.Serializable(0xAEAC659B76361B25, GameType.DS)]
    public class DSNPCCoverActionSupportComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD693702ECB843748, GameType.DS)]
    public class DSNPCCoverActionSupportComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Offset")] public Array<Ref<DSNPCCoverActionSupportAimOffsetResource>> AimOffsets;
        [RTTI.Member(5, 0x30, "Animation")] public String AnimTagIdle;
    }

    [RTTI.Serializable(0xA76B56DC326CE5E1, GameType.DS)]
    public class DSNPCPriorityList : CoreObject
    {
        [RTTI.Member(3, 0x20, "Settings")] public Array<Ref<GameActorLocator>> NPCGameActorPriorityList;
    }

    [RTTI.Serializable(0xB1DC37D6765C5EFD, GameType.DS)]
    public class DSNPCPriorityListSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x740B6F8C02B99AE7, GameType.DS)]
    public class DSNPCRainShelterLocator : DSLocator
    {
        [RTTI.Member(8, 0x70, "DS")] public float Radius;
        [RTTI.Member(7, 0x74, "DS")] public uint32 NumberOfPeopleToEnter;
        [RTTI.Member(9, 0x78, "DS")] public bool ForVehicle;
        [RTTI.Member(10, 0x79, "DS")] public bool ForVehicleAfterGetOff;
        [RTTI.Member(11, 0x80, "DS")] public Ref<DSNPCRainShelterLocator> AfterGetOffLocator;
    }

    [RTTI.Serializable(0x4471E4AAADF36CD3, GameType.DS)]
    public class DSNetCommentBasePhraseResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(3, 0x28)] public EDSNetCommentBasePhraseCategory Category;
        [RTTI.Member(4, 0x30)] public Array<uint32> OptionFilters;
        [RTTI.Member(5, 0x40)] public uint16 HashCode;
    }

    [RTTI.Serializable(0xB979BAE9718257E7, GameType.DS)]
    public class DSNetCommentOptionPhraseResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(3, 0x28)] public EDSNetCommentOptionPhraseCategory Category;
        [RTTI.Member(4, 0x2A)] public uint16 HashCode;
    }

    [RTTI.Serializable(0x2E679513698615B6, GameType.DS)]
    public class DSNetCommentResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSNetCommentBasePhraseResource>> BasePhrases;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSNetCommentOptionPhraseResource>> OptionPhrases;
    }

    [RTTI.Serializable(0x270811693C0978B2, GameType.DS)]
    public class DSNetDebugConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<ObjectCollection> DebugRoads;
    }

    [RTTI.Serializable(0xCEE7D487A9DA7F3A, GameType.DS)]
    public class DSNetItemListConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<BooleanFact> Available;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSGameBaggageListItem>> Items;
    }

    [RTTI.Serializable(0xB2CD0E9A5DA13DAF, GameType.DS)]
    public class DSNetItemPreparationConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EDSNetItemPreparationPurpose Purpose;
        [RTTI.Member(3, 0x24)] public int32 TrialCount;
        [RTTI.Member(4, 0x28)] public Ref<BooleanFact> Available;
        [RTTI.Member(5, 0x30)] public Array<Ref<DSNetItemRandomParam>> RandomParams;
        [RTTI.Member(6, 0x40)] public Array<Ref<DSReliefSupplySettingsResource>> SupplySettings;
    }

    [RTTI.Serializable(0x216B8C817F7BECB0, GameType.DS)]
    public class DSNetItemRandomParam : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DSGameBaggageListItem> Item;
        [RTTI.Member(3, 0x28)] public float Ratio;
        [RTTI.Member(4, 0x2C)] public int32 MaxCount;
        [RTTI.Member(5, 0x30)] public int32 MinCount;
    }

    [RTTI.Serializable(0xE973691DE3C141D5, GameType.DS)]
    public class DSNetLocalizedTextResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<LocalizedTextResource>> Texts;
        [RTTI.Member(3, 0x30)] public HashMap<int_int> TextTable;
    }

    [RTTI.Serializable(0xE0F8589B1A7EE511, GameType.DS)]
    public class DSNetOnlineObject
    {
    }

    [RTTI.Serializable(0x2EA0E73CE751CE51, GameType.DS)]
    public class DSNetOnlineObjectCommand
    {
    }

    [RTTI.Serializable(0xF6001831126A6771, GameType.DS)]
    public class DSNetOnlineObjectCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBD4F0DB36FBD3A3E, GameType.DS)]
    public class DSNetOnlineObjectConfig : RTTIRefObject
    {
        [RTTI.Member(9, 0x20, "Facts")] public Array<Ref<Fact>> Facts;
        [RTTI.Member(2, 0x30)] public Ref<Fact> Available;
        [RTTI.Member(3, 0x38)] public Ref<Fact> FactForAll;
        [RTTI.Member(4, 0x40)] public EDSArea Area;
        [RTTI.Member(5, 0x42)] public bool HasSphereRange;
        [RTTI.Member(6, 0x48)] public WorldPosition CenterPosition;
        [RTTI.Member(7, 0x60)] public float Radius;
    }

    [RTTI.Serializable(0x92B7DC9FE2381771, GameType.DS)]
    public class DSNetOnlineObjectConfigList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSNetOnlineObjectConfig>> Configs;
        [RTTI.Member(3, 0x30)] public Ref<BooleanFact> SyncMission;
        [RTTI.Member(4, 0x38)] public Ref<BooleanFact> LastStranding;
    }

    [RTTI.Serializable(0x80A422C5A4E52039, GameType.DS)]
    public class DSNetOnlineObjectConfigSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8CBA755EC679B038, GameType.DS)]
    public class DSNetQpidManagerConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<int32> SyncAmounts;
        [RTTI.Member(3, 0x30)] public Ref<DSNetSyncCountsBase> ParkingVehicleCounts;
    }

    [RTTI.Serializable(0xCA9AD41E91CAAF21, GameType.DS)]
    public class DSNetSignboard : RTTIObject
    {
    }

    [RTTI.Serializable(0x966C5B31FA12AC73, GameType.DS)]
    public class DSNetSignboardRestrictionResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSLocator>> OnsenLocators;
    }

    [RTTI.Serializable(0xA3A51F40C4041E52, GameType.DS)]
    public class DSNetStrandManagerConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<int32> StrandCounts;
    }

    [RTTI.Serializable(0x83F1A3276888DE0F, GameType.DS)]
    public class DSNetSyncConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSNetSyncLimitGroup>> LimitGroups;
        [RTTI.Member(3, 0x30)] public Array<Ref<RTTIRefObject>> OtherConfigs;
    }

    [RTTI.Serializable(0x5459C7AACA907571, GameType.DS)]
    public class DSNetSyncCounts : DSNetSyncCountsBase
    {
    }

    [RTTI.Serializable(0x66EE4ECAB8B6F776, GameType.DS)]
    public class DSNetSyncCountsBase : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<int32> Levels;
        [RTTI.Member(3, 0x30)] public bool IsBridgeLink;
    }

    [RTTI.Serializable(0x2A7D1EC4DCC79C0F, GameType.DS)]
    public class DSNetSyncCountsBridgeLink : DSNetSyncCountsBase
    {
    }

    [RTTI.Serializable(0x4D696364B3E2D351, GameType.DS)]
    public class DSNetSyncCountsPercent : DSNetSyncCountsBase
    {
    }

    [RTTI.Serializable(0xCD20F480D6B8B421, GameType.DS)]
    public class DSNetSyncLimit : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Control")] public Ref<BooleanFact> Available;
        [RTTI.Member(4, 0x28, "Control")] public Array<Ref<DSNetSyncCountsBase>> SyncCounts;
    }

    [RTTI.Serializable(0x847B8395A3B89CC8, GameType.DS)]
    public class DSNetSyncLimitGroup : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<int32> Ids;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSNetSyncLimit>> Limits;
        [RTTI.Member(4, 0x40)] public Array<Ref<DSNetSyncPrioritySearchResource>> PrioritySearches;
        [RTTI.Member(5, 0x50)] public Array<Ref<DSNetItemPreparationConfig>> ItemPreparations;
        [RTTI.Member(6, 0x60)] public Ref<DSNetItemListConfig> ItemRestriction;
        [RTTI.Member(7, 0x68)] public Array<Ref<DSNetItemListConfig>> PrioritizedItems;
        [RTTI.Member(8, 0x78)] public Array<Ref<DSNetSyncRangeLimitResource>> RangeLimits;
    }

    [RTTI.Serializable(0x569F7F33E53607D4, GameType.DS)]
    public class DSNetSyncObjectCountResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<uint16> Counts;
    }

    [RTTI.Serializable(0xD6091B0BE3AE41DF, GameType.DS)]
    public class DSNetSyncPreSearchParam : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint64 ExpectedFlags;
    }

    [RTTI.Serializable(0x68844FB59906FFC0, GameType.DS)]
    public class DSNetSyncPreSearchParamSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB39E21C78567C151, GameType.DS)]
    public class DSNetSyncPrioritySearchResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DSNetSyncLimit> SearchCounts;
        [RTTI.Member(6, 0x28)] public Array<Ref<DSNetSyncPrioritySearchShape>> Range_;
        [RTTI.Member(7, 0x38)] public Array<Ref<DSNetSyncPrioritySearchShape>> ExcludedRange_;
        [RTTI.Member(3, 0x48)] public bool IsLastStranding;
        [RTTI.Member(4, 0x4C)] public int32 AlternativeId;
        [RTTI.Member(5, 0x50)] public Ref<DSNetItemPreparationConfig> ItemPraparation;
    }

    [RTTI.Serializable(0xA23D57740E4F9D43, GameType.DS)]
    public class DSNetSyncPrioritySearchShape : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x11B939A35C80567C, GameType.DS)]
    public class DSNetSyncPrioritySearchShapeBox : DSNetSyncPrioritySearchShape
    {
        [RTTI.Member(2, 0x20)] public WorldPosition Pos;
        [RTTI.Member(3, 0x40)] public BoundingBox2 Box;
    }

    [RTTI.Serializable(0xD31E6BF47208A011, GameType.DS)]
    public class DSNetSyncPrioritySearchShapeSphere : DSNetSyncPrioritySearchShape
    {
        [RTTI.Member(2, 0x20)] public WorldPosition Pos;
        [RTTI.Member(3, 0x38)] public float Radius;
    }

    [RTTI.Serializable(0x7285A205F02F3190, GameType.DS)]
    public class DSNetSyncRangeLimitResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DSNetSyncLimit> MaxCounts;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSNetSyncPrioritySearchShape>> Range_;
        [RTTI.Member(4, 0x38)] public Array<Ref<DSNetSyncPrioritySearchShape>> ExcludedRange_;
    }

    [RTTI.Serializable(0xE09C06A3A09357C4, GameType.DS)]
    public class DSNetVehicleInfo : RTTIObject
    {
    }

    [RTTI.Serializable(0x99CD7135049AC4F4, GameType.DS)]
    public class DSNetworkParam : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public EDSNetworkServiceState ServiceState;
        [RTTI.Member(3, 0x24)] public int32 ErrorRetrySecFirst;
        [RTTI.Member(4, 0x28)] public int32 TimeoutSec;
        [RTTI.Member(5, 0x2C)] public int32 LiveStreamingContinuousLikeSeconds;
        [RTTI.Member(6, 0x30)] public int32 LiveStreamingLikeAvailableMinutes;
        [RTTI.Member(7, 0x34)] public int32 LiveStreamingMaxLike;
        [RTTI.Member(8, 0x38)] public int32 UserNameErrorRetrySec;
        [RTTI.Member(9, 0x3C)] public int32 UserNameMaxResolveZygo;
        [RTTI.Member(10, 0x40)] public int32 UserNameResolveType;
        [RTTI.Member(11, 0x44)] public int32 QpidUpdateIntervalSec;
        [RTTI.Member(12, 0x48)] public int32 QpidFindIntervalSec;
        [RTTI.Member(13, 0x4C)] public int32 QpidZombieVanishingSec;
        [RTTI.Member(14, 0x50)] public int32 StrandUpdateIntervalSec;
        [RTTI.Member(15, 0x54)] public int32 StrandSendIntervalSec;
        [RTTI.Member(16, 0x58)] public int32 ProfileUploadIntervalSec;
        [RTTI.Member(17, 0x5C)] public int32 ProfileDownloadIntervalSec;
        [RTTI.Member(18, 0x60)] public int32 ProfileDownloadMinimumIntervalSec;
        [RTTI.Member(19, 0x64)] public int32 ProfileMaxDownloadOnce;
        [RTTI.Member(20, 0x68)] public int32 ProfileCacheTimeSec;
        [RTTI.Member(21, 0x6C)] public uint32 MissionsFindNumMin;
        [RTTI.Member(22, 0x70)] public uint32 MissionsFindNumMax;
        [RTTI.Member(23, 0x74)] public uint32 MissionsUpdateIntervalMsec;
        [RTTI.Member(24, 0x78)] public uint32 MissionsGroundDistributeNum;
        [RTTI.Member(25, 0x7C)] public uint32 MissionsShareBoxDistributeNum;
        [RTTI.Member(26, 0x80)] public uint32 MissionsPhatomDistributeNum;
        [RTTI.Member(27, 0x84)] public uint32 MissionsShareBoxMaxNum;
        [RTTI.Member(28, 0x88)] public uint32 MissionDistributionNumMaxHigh;
        [RTTI.Member(29, 0x8C)] public uint32 MissionDistributionNumMaxMiddle;
        [RTTI.Member(30, 0x90)] public uint32 MissionDistributionNumMaxLow;
        [RTTI.Member(31, 0x94)] public uint32 MissionDistributionNumMaxDefault;
        [RTTI.Member(32, 0x98)] public uint32 HighwaysUpdateIntervalMsec;
        [RTTI.Member(33, 0x9C)] public uint32 HighwaysTotalLike;
        [RTTI.Member(34, 0xA0)] public uint32 HighwaysSendTime;
        [RTTI.Member(35, 0xA4)] public uint32 HighwaysSendLikeProcessInterval;
        [RTTI.Member(36, 0xA8)] public uint32 WastesRealizeNumMaxPerRequest;
        [RTTI.Member(37, 0xAC)] public uint32 LikeGetHistoryInterval;
        [RTTI.Member(38, 0xB0)] public uint32 LoginAutoRetryIntervalSec;
        [RTTI.Member(39, 0xB4)] public uint32 LoginAutoRetryIntervalAddSec;
        [RTTI.Member(40, 0xB8)] public uint32 LoginAutoRetryIntervalMaxSec;
        [RTTI.Member(41, 0xBC)] public uint32 SystemSettingsPollingSec;
        [RTTI.Member(42, 0xC0)] public uint32 ObjectSetTagIntervalSec;
        [RTTI.Member(43, 0xC4)] public uint32 ObjectLimitDeleteTag;
    }

    [RTTI.Serializable(0x35E276FFC4B3BEC7, GameType.DS)]
    public class DSNoticeAndKnowledgeReceiveComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC6E9E04194D78DA7, GameType.DS)]
    public class DSNoticeAndKnowledgeReceiveComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x226D38E6DF0DDEF7, GameType.DS)]
    public class DSNpcAimResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float RotationIgnoreRange;
        [RTTI.Member(4, 0x24, "Logic")] public float AimSpeed;
        [RTTI.Member(5, 0x28, "Logic")] public float UnsetSpeed;
        [RTTI.Member(6, 0x2C, "Logic")] public float SkipAimingTime;
        [RTTI.Member(7, 0x30, "Logic")] public uint8 BaseJointIndex;
        [RTTI.Member(9, 0x31, "Logic")] public bool ForceUseEntityForward;
        [RTTI.Member(8, 0x38, "Logic")] public Array<Ref<DSNpcAimTypeSettings>> RotationTypeSettings;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<CurveResource> InterpolationCurve;
    }

    [RTTI.Serializable(0x8F37E633A9C8700F, GameType.DS)]
    public class DSNpcAimTypeSettings : Resource
    {
        [RTTI.Member(8, 0x20, "Logic")] public Array<DSJointRotationConfiguration> JointConfigurations;
        [RTTI.Member(4, 0x30, "Logic")] public float LimitHorizontalWide;
        [RTTI.Member(5, 0x34, "Logic")] public float LimitVerticalWide;
        [RTTI.Member(6, 0x38, "Logic")] public float LimitHorizontalNarrow;
        [RTTI.Member(7, 0x3C, "Logic")] public float LimitVerticalNarrow;
        [RTTI.Member(3, 0x40, "Logic")] public EDSNpcAimType AimType;
        [RTTI.Member(9, 0x48, "Logic")] public HashMap<uint8_float> JointRotationPercent;
    }

    [RTTI.Serializable(0x2DC27D0C23C563DE, GameType.DS)]
    public class DSNpcAnimalComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3D23FDF58C3CEF75, GameType.DS)]
    public class DSNpcAnimalComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float MoveSpeedScale;
        [RTTI.Member(3, 0x24)] public bool RemoveEntityWhenHitThings;
        [RTTI.Member(4, 0x25)] public bool RemoveWhenDeadAndNotInCamera;
        [RTTI.Member(5, 0x26)] public bool IsAquatic;
    }

    [RTTI.Serializable(0x76C16AFC347238C1, GameType.DS)]
    public class DSNpcClearingPoint : WorldNode
    {
        [RTTI.Member(4, 0x60)] public float Radius;
        [RTTI.Member(5, 0x64)] public int MaxAllowedPeople;
    }

    [RTTI.Serializable(0xDBDE874F57F68B54, GameType.DS)]
    public class DSNpcCombatSettings : RTTIRefObject
    {
        [RTTI.Member(4, 0x20, "General")] public Array<float> SettingArray;
        [RTTI.Member(3, 0x30, "General")] public uint32 NameHash;
        [RTTI.Member(5, 0x34, "General")] public bool IsPreset;
        [RTTI.Member(6, 0x35, "General")] public EDSDifficulty PresetDifficulty;
    }

    [RTTI.Serializable(0x4459128BD2D6EF7A, GameType.DS)]
    public class DSNpcCombatSettingsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8CB63B57E5635F0E, GameType.DS)]
    public class DSNpcCombatSettingsComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSNpcCombatSettings> CombatSettings;
    }

    [RTTI.Serializable(0xA9C19B0E4AB6B72A, GameType.DS)]
    public class DSNpcCombatSettingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB11EB80BFD467BAA, GameType.DS)]
    public class DSNpcFacialRigManagerComponent : DSFacialRigManagerComponent
    {
    }

    [RTTI.Serializable(0x55038BFECB6B6133, GameType.DS)]
    public class DSNpcFacialRigManagerComponentResource : DSFacialRigManagerComponentResource
    {
    }

    [RTTI.Serializable(0xB8DCD4756C51988C, GameType.DS)]
    public class DSNpcGoUndergroundComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB92AA677677BC663, GameType.DS)]
    public class DSNpcGoUndergroundComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Animation")] public String ActionGoUndergroundAction;
        [RTTI.Member(4, 0x28, "Animation")] public String VariableGoUndergroundActionID;
        [RTTI.Member(5, 0x30, "Animation")] public String AnimTagGoUndergroundAction;
        [RTTI.Member(6, 0x38, "Animation")] public String AnimTagGoUnderground;
        [RTTI.Member(11, 0x40, "DSPosture")] public Ref<DSPostureSettings> GoUndergroundPosture;
        [RTTI.Member(8, 0x48, "Effect")] public Ref<EffectComponentResource> FootprintsImpactEffectResource;
        [RTTI.Member(9, 0x50, "Effect")] public Ref<EntityResource> DummyEntityResource;
        [RTTI.Member(13, 0x58, "AI")] public Ref<AIContextResource> AIContextResource;
    }

    [RTTI.Serializable(0x3E7A388216FAEA0F, GameType.DS)]
    public class DSNpcIKAndAimComponent : DSNpcIKComponent
    {
    }

    [RTTI.Serializable(0xD57CFAFCCFFAF511, GameType.DS)]
    public class DSNpcIKAndAimComponentResource : DSNpcIKComponentResource
    {
        [RTTI.Member(49, 0x118, "Aim")] public Ref<DSNpcAimResource> AimResource;
    }

    [RTTI.Serializable(0x6590B8B8283E4786, GameType.DS)]
    public class DSNpcIKComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x12A5AD3678141B3B, GameType.DS)]
    public class DSNpcIKComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Bones")] public uint32 LeftHipBoneIndex;
        [RTTI.Member(4, 0x24, "Bones")] public uint32 LeftKneeBoneIndex;
        [RTTI.Member(5, 0x28, "Bones")] public uint32 LeftHeelBoneIndex;
        [RTTI.Member(6, 0x2C, "Bones")] public uint32 RightHipBoneIndex;
        [RTTI.Member(7, 0x30, "Bones")] public uint32 RightKneeBoneIndex;
        [RTTI.Member(8, 0x34, "Bones")] public uint32 RightHeelBoneIndex;
        [RTTI.Member(9, 0x38, "Bones")] public uint32 LeftArmBoneIndex;
        [RTTI.Member(10, 0x3C, "Bones")] public uint32 LeftElbowBoneIndex;
        [RTTI.Member(11, 0x40, "Bones")] public uint32 LeftHandBoneIndex;
        [RTTI.Member(12, 0x44, "Bones")] public uint32 RightArmBoneIndex;
        [RTTI.Member(13, 0x48, "Bones")] public uint32 RightElbowBoneIndex;
        [RTTI.Member(14, 0x4C, "Bones")] public uint32 RightHandBoneIndex;
        [RTTI.Member(15, 0x50, "Bones")] public uint32 ChestBoneIndex;
        [RTTI.Member(16, 0x54, "Bones")] public uint32 NeckBoneIndex;
        [RTTI.Member(17, 0x58, "Bones")] public uint32 HeadBoneIndex;
        [RTTI.Member(29, 0x5C, "Parameters")] public float AdjustHipHeightLimit;
        [RTTI.Member(30, 0x60, "Parameters")] public float LegCollisionCheckLength;
        [RTTI.Member(31, 0x64, "Parameters")] public float AdjustVelocityLimitByLeg;
        [RTTI.Member(32, 0x68, "Parameters")] public float AdjustHeightInterpValue;
        [RTTI.Member(33, 0x6C, "Parameters")] public float LegIkInterporationTime;
        [RTTI.Member(34, 0x70, "Parameters")] public float ArmIkInterporationTime;
        [RTTI.Member(35, 0x74, "Parameters")] public float IgnoreOnGroundHeelHeight;
        [RTTI.Member(36, 0x78, "Parameters")] public float UpAnkleAngleLimit;
        [RTTI.Member(37, 0x7C, "Parameters")] public float DownAnkleAngleLimit;
        [RTTI.Member(38, 0x80, "Parameters")] public float SideAnkleAngleLimit;
        [RTTI.Member(44, 0x84, "DownIk")] public float DownIkActivateInterporationTime;
        [RTTI.Member(45, 0x88, "DownIk")] public float DownIKArmRaidus;
        [RTTI.Member(46, 0x8C, "DownIk")] public float DownIKLegRaidus;
        [RTTI.Member(47, 0x90, "DownIk")] public float DownIKHeadRaidus;
        [RTTI.Member(19, 0x94, "Animation")] public int LeftFootStepEvent;
        [RTTI.Member(20, 0x98, "Animation")] public int RightFootStepEvent;
        [RTTI.Member(21, 0xA0, "Animation")] public Array<AnimationTagID> FixedPositionLegIkTags;
        [RTTI.Member(22, 0xB0, "Animation")] public Array<AnimationTagID> NotFixedPositionLegIkTags;
        [RTTI.Member(23, 0xC0, "Animation")] public Array<AnimationTagID> DisableLegIkTags;
        [RTTI.Member(24, 0xD0, "Animation")] public AnimationTagID HeelUpOnGroundTag;
        [RTTI.Member(25, 0xD8, "Animation")] public Array<AnimationTagID> SlopeUpTags;
        [RTTI.Member(26, 0xE8, "Animation")] public Array<AnimationTagID> SlopeDownTags;
        [RTTI.Member(27, 0xF8, "Animation")] public Array<int> DisableLegIkEvents;
        [RTTI.Member(40, 0x108, "Parameters")] public float LODDistance;
        [RTTI.Member(41, 0x10C, "Parameters")] public float AllOffLODDistance;
        [RTTI.Member(39, 0x110, "Parameters")] public bool ForceFlatFloor;
        [RTTI.Member(42, 0x114, "Parameters")] public float SlopeToeFixAngle;
    }

    [RTTI.Serializable(0x9ED84EDEDFC44B40, GameType.DS)]
    public class DSNpcImpactEffectResource : Resource
    {
        [RTTI.Member(3, 0x20, "Footstep")] public Ref<MaterialTypeResource> FootstepDownMaterialResource;
        [RTTI.Member(4, 0x28, "Footstep")] public Ref<MaterialTypeResource> FootstepUpMaterialResource;
        [RTTI.Member(5, 0x30, "Footstep")] public Ref<MaterialTypeResource> FootstepSprintDownMaterialTypeResource;
        [RTTI.Member(6, 0x38, "Footstep")] public Ref<MaterialTypeResource> FootstepSprintUpMaterialTypeResource;
        [RTTI.Member(7, 0x40, "Footstep")] public Ref<MaterialTypeResource> FootstepSlowDownMaterialTypeResource;
        [RTTI.Member(8, 0x48, "Footstep")] public Ref<MaterialTypeResource> FootstepSlowUpMaterialTypeResource;
        [RTTI.Member(9, 0x50, "Footstep")] public Ref<MaterialTypeResource> FootstepCrouchDownMaterialTypeResource;
        [RTTI.Member(10, 0x58, "Footstep")] public Ref<MaterialTypeResource> FootstepCrouchUpMaterialTypeResource;
        [RTTI.Member(11, 0x60, "Footstep")] public Ref<MaterialTypeResource> FootstepJumpDownMaterialTypeResource;
        [RTTI.Member(12, 0x68, "Footstep")] public Ref<MaterialTypeResource> FootstepJumpUpMaterialTypeResource;
        [RTTI.Member(13, 0x70, "Footstep")] public Ref<MaterialTypeResource> FootstepSlideMaterialTypeResource;
        [RTTI.Member(14, 0x78, "Footstep")] public String LeftFootHelper;
        [RTTI.Member(15, 0x80, "Footstep")] public String RightFootHelper;
        [RTTI.Member(16, 0x88, "Footstep")] public float SlowWalkSpeedMax;
        [RTTI.Member(17, 0x8C, "Footstep")] public float SprintSpeedMin;
        [RTTI.Member(19, 0x90, "Strand")] public Ref<MaterialTypeResource> StrandCQCDownMaterialTypeResource;
    }

    [RTTI.Serializable(0xA4FC39207F482B4E, GameType.DS)]
    public class DSNpcNVGAndHelmetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFCDD1858330A891D, GameType.DS)]
    public class DSNpcNVGAndHelmetComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x45DF4024036B13F7, GameType.DS)]
    public class DSNpcNVGAndHelmetComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<AttachedLightsComponentResource> NVGLightForHelmet;
        [RTTI.Member(4, 0x28, "DS")] public Ref<AttachedLightsComponentResource> NVGLightForBody;
        [RTTI.Member(5, 0x30, "DS")] public Ref<EntityResource> EquipHelmetModel;
        [RTTI.Member(6, 0x38, "DS")] public Ref<EntityResource> DropHelmetModel;
        [RTTI.Member(7, 0x40, "DS")] public Ref<EffectComponentResource> HitEffect;
        [RTTI.Member(8, 0x48, "DS")] public Array<uint32> AlwaysOffMesh;
        [RTTI.Member(9, 0x58, "DS")] public Array<uint32> InternalHelmetMesh;
        [RTTI.Member(10, 0x68, "DS")] public Array<uint32> HideHairForHelmetMeshs;
        [RTTI.Member(12, 0x78, "DS")] public bool DefaultOn;
        [RTTI.Member(13, 0x79, "DS")] public bool MatchDropMesh;
        [RTTI.Member(11, 0x80, "DS")] public String HelperName;
    }

    [RTTI.Serializable(0x6EFD91A6F31FF101, GameType.DS)]
    public class DSNpcNoticeSettings : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public uint32 NameHash;
        [RTTI.Member(5, 0x24, "Rader")] public float RaderPositionSearchTimeMax;
        [RTTI.Member(6, 0x28, "Rader")] public float RaderMarakingDelayTime;
        [RTTI.Member(8, 0x2C, "Sight")] public float MuleSightScale;
        [RTTI.Member(9, 0x30, "Sight")] public float WarriorSightScale;
        [RTTI.Member(10, 0x34, "Sight")] public float CliffSightScale;
        [RTTI.Member(12, 0x38, "Mule")] public bool EnableRaderAfterNoticeNoCaution;
        [RTTI.Member(13, 0x39, "Mule")] public bool EnableRaderAfterNoticeCaution;
        [RTTI.Member(14, 0x3C, "Mule")] public float RaderEffectiveTime;
    }

    [RTTI.Serializable(0x6D85C43C71C39817, GameType.DS)]
    public class DSNpcSentenceSituationGroupResource : Resource
    {
        [RTTI.Member(5, 0x20, "Resources")] public Array<Ref<DSNpcSentenceSituationResource>> SituationResources;
        [RTTI.Member(6, 0x30, "Resources")] public HashMap<uint32_int32> SituationIndex;
        [RTTI.Member(3, 0x40, "General")] public int32 VariationIndex;
    }

    [RTTI.Serializable(0x95ECE42C626827F3, GameType.DS)]
    public class DSNpcSentenceSituationResource : Resource
    {
        [RTTI.Member(6, 0x20, "Resources")] public Ref<SentenceGroupResource> SentenceGroup;
        [RTTI.Member(7, 0x28, "Resources")] public Array<Ref<SoundResource>> EffectSounds;
        [RTTI.Member(4, 0x38, "General")] public int32 Priority;
        [RTTI.Member(3, 0x3C, "General")] public uint32 SituationStringHash;
    }

    [RTTI.Serializable(0x94DC530204385201, GameType.DS)]
    public class DSNpcVehicleTrialEntity : Entity
    {
    }

    [RTTI.Serializable(0x6EF518FDF284C82, GameType.DS)]
    public class DSNpcVehicleTrialEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "TestGroup")] public float TestValue;
        [RTTI.Member(32, 0x108, "TestGroup")] public Array<WorldPosition> RoutePoints;
    }

    [RTTI.Serializable(0x1F6A9C60CC6F5685, GameType.DS)]
    public class DSNpcVoiceControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDDFEA62F63A574AF, GameType.DS)]
    public class DSNpcVoiceControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSNpcSentenceSituationGroupResource> SituationGroup;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSNpcSentenceSituationGroupResource>> SituationGroupVariations;
    }

    [RTTI.Serializable(0xB3E71C9DF88594BF, GameType.DS)]
    public class DSNpcWeaponComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8CAC475438CCB406, GameType.DS)]
    public class DSNpcWeaponComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x56E8C25D817E8500, GameType.DS)]
    public class DSNpcWeaponComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "WeaponIK")] public String SneakWeaponHelper;
        [RTTI.Member(4, 0x28, "WeaponIK")] public String AlertWeaponHelper;
        [RTTI.Member(5, 0x30, "WeaponIK")] public String FireWeaponHelper;
        [RTTI.Member(6, 0x50, "WeaponIK")] public AnimationTagID EnableArmIKTagID;
        [RTTI.Member(7, 0x54, "WeaponIK")] public AnimationTagID DisableArmIKTagID;
        [RTTI.Member(8, 0x58, "WeaponIK")] public AnimationTagID DamageStateTagID;
        [RTTI.Member(9, 0x5C, "WeaponIK")] public AnimationTagID FlinchTagID;
        [RTTI.Member(10, 0x60, "WeaponIK")] public AnimationTagID SneakTagID;
        [RTTI.Member(11, 0x64, "WeaponIK")] public AnimationTagID AlertTagID;
        [RTTI.Member(12, 0x68, "WeaponIK")] public AnimationTagID FireTagID;
        [RTTI.Member(13, 0x6C, "WeaponIK")] public AnimationTagID IdleTagID;
        [RTTI.Member(14, 0x70, "WeaponIK")] public AnimationTagID ParallelMoveTagID;
        [RTTI.Member(15, 0x74, "WeaponIK")] public AnimationTagID CombatTagID;
        [RTTI.Member(21, 0x78, "WeaponIK")] public AnimationTagID UpperBodyCombatTagID;
        [RTTI.Member(16, 0x7C, "WeaponIK")] public AnimationTagID CombatPushTagID;
        [RTTI.Member(17, 0x80, "WeaponIK")] public AnimationTagID CombatShootTagID;
        [RTTI.Member(18, 0x84, "WeaponIK")] public AnimationTagID CombatReloadTagID;
        [RTTI.Member(19, 0x88, "WeaponIK")] public AnimationTagID CombatHitTagID;
        [RTTI.Member(20, 0x8C, "WeaponIK")] public AnimationTagID CombatJavelinTagID;
    }

    [RTTI.Serializable(0x826809E16F2D42CB, GameType.DS)]
    public class DSObstacleComponent : ObstacleComponent
    {
    }

    [RTTI.Serializable(0x24DD5A5795A705E6, GameType.DS)]
    public class DSObstacleComponentResource : ObstacleComponentResource
    {
        [RTTI.Member(9, 0x60, "Logic")] public bool DisableWhileMoving;
        [RTTI.Member(10, 0x64, "Logic")] public float MinUpdateDistance;
        [RTTI.Member(11, 0x68, "Logic")] public float MaxUpdateFrequency;
    }

    [RTTI.Serializable(0xDE0ABBF5B62D9CA, GameType.DS)]
    public class DSOdradekArmEntity : DSOdradekBaseEntity
    {
    }

    [RTTI.Serializable(0xDC69C6CBA1CAAFE2, GameType.DS)]
    public class DSOdradekArmEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0xC598A85FC72D5C77, GameType.DS)]
    public class DSOdradekArmEntityResource : DSOdradekBaseEntityResource
    {
        [RTTI.Member(33, 0x118, "Params")] public Array<Ref<RumbleResource>> Rumbles;
    }

    [RTTI.Serializable(0xEF1131950D834665, GameType.DS)]
    public class DSOdradekBaseEntity : Entity
    {
    }

    [RTTI.Serializable(0x43D937FC7E2F43E4, GameType.DS)]
    public class DSOdradekBaseEntityResource : EntityResource
    {
        [RTTI.Member(30, 0x100)] public Ref<Fact> FactForceSleep;
        [RTTI.Member(31, 0x108)] public Array<Ref<SoundResource>> SoundResources;
    }

    [RTTI.Serializable(0x7502AACF5448F742, GameType.DS)]
    public class DSOdradekBodyEntity : DSOdradekBaseEntity
    {
    }

    [RTTI.Serializable(0x480B171ECC58459E, GameType.DS)]
    public class DSOdradekBodyEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0xEED52C15694FA2FB, GameType.DS)]
    public class DSOdradekBodyEntityResource : DSOdradekBaseEntityResource
    {
        [RTTI.Member(32, 0x120)] public Vec3 LightColorDefault;
        [RTTI.Member(33, 0x130)] public float LightIntensityDefault;
        [RTTI.Member(34, 0x140)] public Vec3 LightColorWarning;
        [RTTI.Member(35, 0x150)] public float LightIntensityWarning;
        [RTTI.Member(36, 0x158)] public Ref<EntityComponentResource> NormalLightComponent;
        [RTTI.Member(37, 0x160)] public Ref<EntityComponentResource> NormalLightComponent2;
        [RTTI.Member(38, 0x168)] public Ref<EntityComponentResource> NormalLightComponent3;
        [RTTI.Member(39, 0x170)] public Ref<EntityComponentResource> FlashLightComponent;
        [RTTI.Member(40, 0x178)] public Ref<EntityComponentResource> FlashLightComponent2;
        [RTTI.Member(41, 0x180)] public Ref<EntityComponentResource> FakeHoloLight;
        [RTTI.Member(42, 0x188)] public Ref<Fact> FactLightOn;
        [RTTI.Member(43, 0x190)] public Ref<Fact> FactUseLongRangeLight;
        [RTTI.Member(44, 0x198)] public Ref<Fact> FactNormalLightType;
        [RTTI.Member(45, 0x1A0)] public Ref<Fact> FactLongRangeLightType;
        [RTTI.Member(46, 0x1A8)] public float FaintTimeAfterNoticedByGazer;
    }

    [RTTI.Serializable(0x5C0E032618CF8A25, GameType.DS)]
    public class DSOdradekEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE103EC26E01DFE09, GameType.DS)]
    public class DSOdradekEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Parameters")] public Ref<DSOdradekEffectResource> OdradekEffectResource;
        [RTTI.Member(5, 0x28, "Parameters")] public float OdradekEffectEnableRadius;
        [RTTI.Member(8, 0x2C, "OdradekEffectSize")] public float OdradekEffectSize;
        [RTTI.Member(7, 0x30, "OdradekEffectSize")] public bool OverrideSize;
        [RTTI.Member(3, 0x31, "Parameters")] public bool IsInvisibleWithEntity;
    }

    [RTTI.Serializable(0x2BBA6DD11123AEE6, GameType.DS)]
    public class DSOdradekEffectInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC8, "General")] public Ref<DSOdradekEffectResource> Resource;
        [RTTI.Member(9, 0x2BC, "General")] public bool Loop;
        [RTTI.Member(8, 0x2BE, "General")] public bool Enable;
    }

    [RTTI.Serializable(0x660B3CEE0BE3A0A1, GameType.DS)]
    public class DSOdradekEffectResource : Resource
    {
        [RTTI.Member(5, 0x20, "Representation")] public Ref<ShaderResource> Shader;
        [RTTI.Member(4, 0x28, "Representation")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(21, 0x30, "Color")] public Ref<CurveResource> AlphaCurve;
        [RTTI.Member(58, 0x38, "ContentsSetting")] public Ref<CurveResource> CancelOutTimeDragCurveResource;
        [RTTI.Member(59, 0x40, "ContentsSetting")] public Ref<CurveResource> CancelOutAlphaCurve;
        [RTTI.Member(22, 0x48, "Color")] public Ref<CurveResource> HighlightAlphaCurve;
        [RTTI.Member(37, 0x50, "Base")] public Ref<CurveResource> SizeRateCurve;
        [RTTI.Member(11, 0x58, "Color")] public Ref<CurveResource> MiddleColorAlphaCurve;
        [RTTI.Member(50, 0x60, "Textures")] public Ref<Texture> NoiseTexture;
        [RTTI.Member(52, 0x68, "Sound")] public Ref<SoundResource> StartSoundResource;
        [RTTI.Member(53, 0x70, "Sound")] public Ref<SoundResource> EdgeSoundResource;
        [RTTI.Member(54, 0x78, "Sound")] public Ref<SoundResource> LoopSoundResource;
        [RTTI.Member(55, 0x80, "Sound")] public Ref<SoundResource> CancelSoundResource;
        [RTTI.Member(7, 0x90, "Color")] public FRGBAColor HeadColor;
        [RTTI.Member(9, 0xA0, "Color")] public FRGBAColor MiddleColor;
        [RTTI.Member(12, 0xB0, "Color")] public FRGBAColor GridHeadColor;
        [RTTI.Member(14, 0xC0, "Color")] public FRGBAColor GridOtherColor;
        [RTTI.Member(16, 0xD0, "Color")] public FRGBAColor HighlightColor;
        [RTTI.Member(19, 0xE0, "Color")] public FRGBAColor EdgeColor;
        [RTTI.Member(28, 0xF0, "Base")] public float LoopStartTime;
        [RTTI.Member(29, 0xF4, "Base")] public float LoopEndTime;
        [RTTI.Member(8, 0xF8, "Color")] public float HeadColorScale;
        [RTTI.Member(10, 0xFC, "Color")] public float MiddleColorScale;
        [RTTI.Member(13, 0x100, "Color")] public float GridHeadColorScale;
        [RTTI.Member(15, 0x104, "Color")] public float GridOtherColorScale;
        [RTTI.Member(17, 0x108, "Color")] public float HighlightColorScale;
        [RTTI.Member(20, 0x10C, "Color")] public float EdgeColorScale;
        [RTTI.Member(24, 0x110, "Base")] public float Size;
        [RTTI.Member(25, 0x114, "Base")] public float TimeMax;
        [RTTI.Member(26, 0x118, "Base")] public float TimeMaxInv;
        [RTTI.Member(31, 0x11C, "Base")] public float SpeedScale;
        [RTTI.Member(38, 0x120, "Base")] public float CylinderLength;
        [RTTI.Member(39, 0x124, "Base")] public float CylinderScale;
        [RTTI.Member(40, 0x128, "Base")] public float CylinderOffset;
        [RTTI.Member(34, 0x12C, "Base")] public float AlphaAttenuationPosition;
        [RTTI.Member(42, 0x130, "GridCommon")] public float GridLineUnit;
        [RTTI.Member(43, 0x134, "GridCommon")] public float GridLineThreshould;
        [RTTI.Member(45, 0x138, "Gradation")] public float ColorGradationPower;
        [RTTI.Member(46, 0x13C, "Gradation")] public float ColorGradationOffset;
        [RTTI.Member(60, 0x140, "ContentsSetting")] public float CancelOutValidAlphaThreshould;
        [RTTI.Member(48, 0x144, "GridSparate")] public uint8 GridSeparateIndex;
        [RTTI.Member(35, 0x145, "Base")] public bool EnableColorGradataion;
        [RTTI.Member(36, 0x146, "Base")] public bool EnableFixGridMove;
        [RTTI.Member(32, 0x147, "Base")] public bool IgnoreDepthTest;
        [RTTI.Member(33, 0x148, "Base")] public bool AddBlend;
        [RTTI.Member(27, 0x149, "Base")] public bool AbsoluteTimeMode;
        [RTTI.Member(30, 0x14A, "Base")] public bool Loop;
        [RTTI.Member(18, 0x14B, "Color")] public bool EnableHighlightColor;
        [RTTI.Member(56, 0x14C, "Sound")] public bool AllowMultiplePlaybackOfLoopSound;
    }

    [RTTI.Serializable(0x1B24C91DF5DC526C, GameType.DS)]
    public class DSOdradekEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xBE9912661D189D2, GameType.DS)]
    public class DSOdradekEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public bool StopSimulation;
    }

    [RTTI.Serializable(0x1A764584B597CB32, GameType.DS)]
    public class DSOdradekSurveyEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD0954887CF62D3A0, GameType.DS)]
    public class DSOdradekSurveyEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x4CEF6D1B098AB0C2, GameType.DS)]
    public class DSOdradekSurveyEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(25, 0x20, "Settings")] public Ref<ShaderResource> Shader;
        [RTTI.Member(24, 0x28, "Settings")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(39, 0x30, "Settings")] public Ref<LensFlareResource> DangerousLensFlareResource;
        [RTTI.Member(47, 0x38, "Settings")] public Ref<CurveResource> OffsetAnimationCurve;
        [RTTI.Member(48, 0x40, "Settings")] public Ref<CurveResource> EarlyOutOffsetAnimationCurve;
        [RTTI.Member(49, 0x48, "Settings")] public Ref<CurveResource> EarlyOutAlphaAnimationCurve;
        [RTTI.Member(50, 0x50, "Settings")] public Array<uint32> OffsetAnimationCurveHashes;
        [RTTI.Member(51, 0x60, "Settings")] public Array<uint32> EarlyOutOffsetAnimationCurveHashes;
        [RTTI.Member(52, 0x70, "Settings")] public Array<uint32> EarlyOutAlphaAnimationCurveHashes;
        [RTTI.Member(27, 0x80, "Settings")] public FRGBAColor SafeColor;
        [RTTI.Member(31, 0x90, "Settings")] public FRGBAColor StealthColor;
        [RTTI.Member(29, 0xA0, "Settings")] public FRGBAColor SlideColor;
        [RTTI.Member(33, 0xB0, "Settings")] public FRGBAColor DangerousColor;
        [RTTI.Member(26, 0xC0, "Settings")] public Ref<Texture> Texture;
        [RTTI.Member(62, 0xC8, "Settings")] public Array<Ref<DSMaterialConfigResource>> SlideMaterials;
        [RTTI.Member(63, 0xD8, "Settings")] public Array<Ref<DSMaterialConfigResource>> SnowMaterials;
        [RTTI.Member(64, 0xE8, "Settings")] public Array<Ref<DSMaterialConfigResource>> SnowShallowMaterials;
        [RTTI.Member(65, 0xF8, "Settings")] public Array<Ref<DSMaterialConfigResource>> TarMaterials;
        [RTTI.Member(66, 0x108, "Settings")] public Array<Ref<DSMaterialConfigResource>> RoadMaterials;
        [RTTI.Member(67, 0x118, "Settings")] public Ref<MaterialTypeResource> OnsenMaterial;
        [RTTI.Member(68, 0x120, "Settings")] public Ref<MaterialTypeResource> TarShallowMaterial;
        [RTTI.Member(69, 0x128, "Settings")] public Ref<MaterialTypeResource> TarDeepMaterial;
        [RTTI.Member(70, 0x130, "Settings")] public Array<Ref<MaterialTypeResource>> IgnoreMaterials;
        [RTTI.Member(6, 0x140, "Settings")] public EOdradekSurveyShapeMode ShapeMode;
        [RTTI.Member(7, 0x144, "Settings")] public float DirectionalAngle;
        [RTTI.Member(28, 0x148, "Settings")] public float SafeColorScale;
        [RTTI.Member(32, 0x14C, "Settings")] public float StealthColorScale;
        [RTTI.Member(30, 0x150, "Settings")] public float SlideColorScale;
        [RTTI.Member(34, 0x154, "Settings")] public float DangerousColorScale;
        [RTTI.Member(35, 0x158, "Settings")] public float DangerousColorFlickScale;
        [RTTI.Member(36, 0x15C, "Settings")] public float DangerousColorLooseScale;
        [RTTI.Member(37, 0x160, "Settings")] public float DangerousColorLooseFlickScale;
        [RTTI.Member(38, 0x164, "Settings")] public int DangerousColorLooseThreshold;
        [RTTI.Member(8, 0x168, "Settings")] public float SafePixelWidth;
        [RTTI.Member(9, 0x16C, "Settings")] public float SlidePixelWidth;
        [RTTI.Member(10, 0x170, "Settings")] public float DangerousPixelWidth;
        [RTTI.Member(11, 0x174, "Settings")] public float SafeOnRoadPixelWidth;
        [RTTI.Member(12, 0x178, "Settings")] public float SlideOnMaterialPixelWidth;
        [RTTI.Member(13, 0x17C, "Settings")] public float StealthPixelWidth;
        [RTTI.Member(14, 0x180, "Settings")] public float ShallowRiverPixelWidth;
        [RTTI.Member(15, 0x184, "Settings")] public float DeepRiverPixelWidth;
        [RTTI.Member(16, 0x188, "Settings")] public float DangerousRiverPixelWidth;
        [RTTI.Member(17, 0x18C, "Settings")] public float TarPixelWidth;
        [RTTI.Member(18, 0x190, "Settings")] public float ZOffset;
        [RTTI.Member(20, 0x194, "Settings")] public float WaterZOffset;
        [RTTI.Member(19, 0x198, "Settings")] public float FlareZOffset;
        [RTTI.Member(21, 0x19C, "Settings")] public float SnowZOffset;
        [RTTI.Member(22, 0x1A0, "Settings")] public float SnowShallowZOffset;
        [RTTI.Member(23, 0x1A4, "Settings")] public float StealthZOffset;
        [RTTI.Member(41, 0x1A8, "Settings")] public float SlideAngle;
        [RTTI.Member(42, 0x1AC, "Settings")] public float DangerousAngle;
        [RTTI.Member(43, 0x1B0, "Settings")] public float SnowSlideAngle;
        [RTTI.Member(44, 0x1B4, "Settings")] public float SnowShallowSlideAngle;
        [RTTI.Member(3, 0x1B8, "Settings")] public float Range;
        [RTTI.Member(40, 0x1BC, "Settings")] public float FlareTime;
        [RTTI.Member(45, 0x1C0, "Settings")] public float BaseTime;
        [RTTI.Member(46, 0x1C4, "Settings")] public float FadeTime;
        [RTTI.Member(54, 0x1C8, "Settings")] public float CircleAnimationTime;
        [RTTI.Member(55, 0x1CC, "Settings")] public float SizeFadeDistance;
        [RTTI.Member(56, 0x1D0, "Settings")] public float WaterDangerousDepth;
        [RTTI.Member(57, 0x1D4, "Settings")] public float WaterFlowDepth;
        [RTTI.Member(58, 0x1D8, "Settings")] public float TarDangerousWaterDepth;
        [RTTI.Member(59, 0x1DC, "Settings")] public float WaterTurtorialTelopAngleScale;
        [RTTI.Member(60, 0x1E0, "Settings")] public float WaterTurtorialTelopLength;
        [RTTI.Member(61, 0x1E4, "Settings")] public int WaterTurtorialTelopThresholdCount;
        [RTTI.Member(72, 0x1E8, "Settings")] public float RoadSampleThreshold;
        [RTTI.Member(73, 0x1EC, "Settings")] public float CraterSampleThreshold;
        [RTTI.Member(4, 0x1F0, "Settings")] public int NumGrid;
        [RTTI.Member(53, 0x1F4, "Settings")] public bool OffsetAnimationZOnly;
        [RTTI.Member(71, 0x1F5, "Settings")] public bool EnableRoadCheck;
        [RTTI.Member(5, 0x1F6, "Settings")] public bool EnableSmoothing;
        [RTTI.Member(74, 0x1F8, "Settings")] public uint32 CachedStrategyHash;
        [RTTI.Member(75, 0x1FC, "Settings")] public uint32 CachedSimulateTotalRequest;
        [RTTI.Member(76, 0x200, "Settings")] public Array<uint8> CachedNumberOfAroundPoints;
        [RTTI.Member(77, 0x210, "Settings")] public Array<Array<uint16>> CachedAroundPointIndices;
    }

    [RTTI.Serializable(0x1972CFEBC80499BA, GameType.DS)]
    public class DSOnlineLostObjectMissionResource : DSOnlineMissionResourceBase
    {
    }

    [RTTI.Serializable(0x7044DAFFE7C43B5E, GameType.DS)]
    public class DSOnlineMissionBaggageResource : DSMissionBaggageResource
    {
    }

    [RTTI.Serializable(0x427B2CDD4FE96717, GameType.DS)]
    public class DSOnlineMissionCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x80DC4EF3F3FF4E59, GameType.DS)]
    public class DSOnlineMissionCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2A7E7CAA6109483E, GameType.DS)]
    public class DSOnlineMissionResourceBase : DSMissionResourceBase
    {
    }

    [RTTI.Serializable(0x424EBA49BA41943, GameType.DS)]
    public class DSOnlinePreparationItemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public uint32 Min;
        [RTTI.Member(3, 0x24)] public uint32 Max;
        [RTTI.Member(5, 0x28, "Weapons")] public Array<EDSWeaponId> Weapons;
        [RTTI.Member(8, 0x38, "Items")] public Array<EDSItemId> Items;
        [RTTI.Member(11, 0x48, "SuitParts")] public Array<EDSSuitPartsId> SuitParts;
        [RTTI.Member(14, 0x58, "Others")] public Array<int32> Others;
        [RTTI.Member(6, 0x68, "Weapons")] public Array<EDSWeaponId> FixedWeapons;
        [RTTI.Member(9, 0x78, "Items")] public Array<EDSItemId> FixedItems;
        [RTTI.Member(12, 0x88, "SuitParts")] public Array<EDSSuitPartsId> FixedSuitParts;
        [RTTI.Member(15, 0x98, "Others")] public Array<int32> FixedOthers;
    }

    [RTTI.Serializable(0xACA03946B63F418C, GameType.DS)]
    public class DSOnlinePreparationTargetResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSOnlinePreparationItemResource> PreparationResource;
        [RTTI.Member(3, 0x28)] public EDSConstructionPointNetType TargetType;
        [RTTI.Member(4, 0x30)] public Array<int32> TargetIds;
    }

    [RTTI.Serializable(0x1E8B9F5FF898B04C, GameType.DS)]
    public class DSOnlineSupplyMissionResource : DSOnlineMissionResourceBase
    {
    }

    [RTTI.Serializable(0xE0E428248CC67B11, GameType.DS)]
    public class DSOnlineVehicleLocator : DSLocator
    {
        [RTTI.Member(6, 0x70)] public float Radius;
        [RTTI.Member(7, 0x74)] public EVehicleType VehicleType;
    }

    [RTTI.Serializable(0x995994E44FA88023, GameType.DS)]
    public class DSOpenConstructionDoorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4AC769C0B7F825CB, GameType.DS)]
    public class DSOpenConstructionDoorComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x35FCE09AB5122C25, GameType.DS)]
    public class DSOrderedBaggageArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x43B84CB4ECC3B7B4, GameType.DS)]
    public class DSOrderedBaggageArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x14395343EAC518C9, GameType.DS)]
    public class DSOutlineEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7EF375E4675A9C27, GameType.DS)]
    public class DSOutlineEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x693DDD4476A69174, GameType.DS)]
    public class DSOutlineEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EDSOutlineEffectMode OutlineMode;
        [RTTI.Member(20, 0x28, "ColorCurves")] public Ref<CurveResource> OutlineColorCurveA;
        [RTTI.Member(21, 0x30, "ColorCurves")] public Ref<CurveResource> GlowColorCurveA;
        [RTTI.Member(23, 0x38, "RGBCurves")] public Ref<CurveResource> OutlineColorCurveR;
        [RTTI.Member(24, 0x40, "RGBCurves")] public Ref<CurveResource> OutlineColorCurveG;
        [RTTI.Member(25, 0x48, "RGBCurves")] public Ref<CurveResource> OutlineColorCurveB;
        [RTTI.Member(26, 0x50, "RGBCurves")] public Ref<CurveResource> GlowColorCurveR;
        [RTTI.Member(27, 0x58, "RGBCurves")] public Ref<CurveResource> GlowColorCurveG;
        [RTTI.Member(28, 0x60, "RGBCurves")] public Ref<CurveResource> GlowColorCurveB;
        [RTTI.Member(17, 0x70, "Colors")] public FRGBAColor OutlineDefaultColor;
        [RTTI.Member(18, 0x80, "Colors")] public FRGBAColor GlowDefaultColor;
        [RTTI.Member(32, 0x90, "Additional")] public Ref<ArtPartsDataResource> QuadModelArtPartsData;
        [RTTI.Member(30, 0x98, "MeshName")] public Array<uint32> IgnoreMeshHashNames;
        [RTTI.Member(7, 0xA8, "Logic")] public float OutlineWidth;
        [RTTI.Member(8, 0xAC, "Logic")] public float OutlineWidthScale;
        [RTTI.Member(4, 0xB0, "Logic")] public bool HideSourceMesh;
        [RTTI.Member(5, 0xB1, "Logic")] public bool AutoFollowingEntity;
        [RTTI.Member(6, 0xB2, "Logic")] public bool BuildMeshInSyncWithChildrenVisible;
        [RTTI.Member(9, 0xB3, "Logic")] public bool EnableShadowCast;
        [RTTI.Member(10, 0xB4, "Logic")] public bool EnableDitherFadeShader;
        [RTTI.Member(11, 0xB5, "Logic")] public bool EnableFaceMeshCorrect;
        [RTTI.Member(12, 0xB6, "Logic")] public bool EnableChildrenOffsetCorrect;
        [RTTI.Member(13, 0xB7, "Logic")] public bool EnableColorScaleCorrect;
        [RTTI.Member(15, 0xB8, "Logic")] public bool EnableAlphaFadeByCamera;
        [RTTI.Member(14, 0xB9, "Logic")] public bool EnableDrawQuadGlow;
    }

    [RTTI.Serializable(0xB170A7E6511F0342, GameType.DS)]
    public class DSOutlineEffectConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<CurveResource>> CurveResources;
        [RTTI.Member(3, 0x30)] public Ref<DSOutlineEffectComponentResource> OutlineEffectComponentResource;
        [RTTI.Member(4, 0x38)] public Ref<DSOutlineEffectComponentResource> PlayerMarkingOutlineEffectComponentResource;
    }

    [RTTI.Serializable(0xE39260BEDDD1A3AA, GameType.DS)]
    public class DSOutlinePostEffectInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC8, "General")] public Ref<DSOutlinePostEffectResource> Resource;
        [RTTI.Member(8, 0x1A4, "General")] public bool Enable;
    }

    [RTTI.Serializable(0x337CC80A9E5689A5, GameType.DS)]
    public class DSOutlinePostEffectResource : Resource
    {
        [RTTI.Member(5, 0x20, "Representation")] public Ref<ShaderResource> Shader;
        [RTTI.Member(4, 0x28, "Representation")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(7, 0x30, "Color")] public FRGBAColor BaseColor;
        [RTTI.Member(9, 0x40, "Color")] public FRGBAColor OutlineColor;
        [RTTI.Member(12, 0x50, "Base")] public float Width;
        [RTTI.Member(8, 0x54, "Color")] public float BaseColorScale;
        [RTTI.Member(10, 0x58, "Color")] public float OutlineColorScale;
        [RTTI.Member(13, 0x5C, "Base")] public bool HalfRes;
    }

    [RTTI.Serializable(0xA7F7AAA5C1F8C964, GameType.DS)]
    public class DSOverridePBDParamComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBEC71C7B25633832, GameType.DS)]
    public class DSOverridePBDParamComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public float MaxDistanceMultiplier;
        [RTTI.Member(4, 0x24, "General")] public float WorldMotionInfluenceMultiplier;
    }

    [RTTI.Serializable(0x19F7AD28980C17C9, GameType.DS)]
    public class DSParkingMenuInfo : RTTIObject
    {
    }

    [RTTI.Serializable(0x1025185B1BF7E499, GameType.DS)]
    public class DSParkingMenuInfoSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8D75FEFEF13FE7D5, GameType.DS)]
    public class DSParticleFlyingAnimalComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB5FB3B64AC68D112, GameType.DS)]
    public class DSParticleFlyingAnimalComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float StopEmittingTime;
    }

    [RTTI.Serializable(0x45C9A2721A70A040, GameType.DS)]
    public class DSPatrolComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x113C92D89212AAC5, GameType.DS)]
    public class DSPatrolComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSPatrolPath> PatrolPath;
    }

    [RTTI.Serializable(0x60624B7CC84FF3A8, GameType.DS)]
    public class DSPatrolPath : ParentWorldNode
    {
        [RTTI.Member(10, 0x80, "Logic")] public Array<Ref<DSPatrolPathNodeBase>> Nodes;
        [RTTI.Member(12, 0x90, "LookAt")] public Array<Ref<DSPatrolPathLookat>> LookAtTargets;
        [RTTI.Member(7, 0xA0, "Logic")] public EDSPatrolPathType PathType;
        [RTTI.Member(8, 0xA1, "Logic")] public bool IsBackAndForth;
        [RTTI.Member(9, 0xB0, "Logic")] public GGUUID OriginalUUID;
        [RTTI.Member(14, 0xC0, "LocatorsForOverride")] public Array<Ref<DSPatrolPathLocator>> Locators;
        [RTTI.Member(16, 0xD0, "Vehicle")] public UUIDRef<VehicleGameActorLocator> VehicleLocator;
    }

    [RTTI.Serializable(0xB76EE85C72D524A8, GameType.DS)]
    public class DSPatrolPathActionObjectLocator : WorldNode
    {
        [RTTI.Member(4, 0x60)] public float FrontDirection;
        [RTTI.Member(5, 0x64)] public EDSPatrolActionObjectLocatorType Type;
    }

    [RTTI.Serializable(0x52B6D9E5CDCC74F3, GameType.DS)]
    public class DSPatrolPathFormationNode : DSPatrolPathNode
    {
        [RTTI.Member(22, 0xE0, "Formation")] public EDSPatrolFormationType FormationType;
    }

    [RTTI.Serializable(0xF299125AA4396599, GameType.DS)]
    public class DSPatrolPathGroup : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSPatrolPathGroupElement>> GroupElements;
        [RTTI.Member(4, 0x41, "Vehicle")] public UUIDRef<VehicleGameActorLocator> VehicleLocatorOverride;
    }

    [RTTI.Serializable(0x616617E7F65FF3AB, GameType.DS)]
    public class DSPatrolPathGroupElement : RTTIRefObject
    {
        [RTTI.Member(2, 0x20, true)] public Array<Ref<DSPatrolPath>> AvailablePaths;
        [RTTI.Member(3, 0x40)] public Array<GGUUID> OriginalUUIDList;
    }

    [RTTI.Serializable(0x90747ABB7DB25AFC, GameType.DS)]
    public class DSPatrolPathGroupPriorityList : DSPatrolPathPriorityListBase
    {
        [RTTI.Member(3, 0x20, "Settings")] public Array<Ref<DSPatrolPathGroup>> PatrolPathGroupList;
    }

    [RTTI.Serializable(0xFB9CB486DA04BD3F, GameType.DS)]
    public class DSPatrolPathGroupPriorityListSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC61BDF4C4DC2BE5A, GameType.DS)]
    public class DSPatrolPathGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x93C845C0F38DCC2D, GameType.DS)]
    public class DSPatrolPathLocator : WorldNode
    {
    }

    [RTTI.Serializable(0xEE0018A37D07F0E1, GameType.DS)]
    public class DSPatrolPathLookat : WorldNodeOverridable
    {
        [RTTI.Member(6, 0x80)] public GGUUID OriginalUUID;
        [RTTI.Member(8, 0x90, "Logic")] public float Radius;
        [RTTI.Member(9, 0x94, "Logic")] public bool UseDuringMoving;
        [RTTI.Member(10, 0x95, "Logic")] public bool IgnoreHeight;
        [RTTI.Member(11, 0x96, "Logic")] public EDSPatrolLookatSpecialRule SpecialRule;
    }

    [RTTI.Serializable(0x9796B348E533B2D3, GameType.DS)]
    public class DSPatrolPathManagerGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE83CBDECAE7AC43, GameType.DS)]
    public class DSPatrolPathNode : DSPatrolPathNodeBase
    {
        [RTTI.Member(19, 0xC0, "Logic")] public Array<Ref<DSPatrolPathNodeAction>> Actions;
        [RTTI.Member(20, 0xD0, "Logic")] public Ref<DSPatrolPathNodeActionList> ExternalActionList;
    }

    [RTTI.Serializable(0x14DB769183D631A, GameType.DS)]
    public class DSPatrolPathNodeAction : CoreObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public EDSPatrolPathType PathType;
        [RTTI.Member(4, 0x22, "Logic")] public uint16 ActionIndexWithMask;
        [RTTI.Member(5, 0x24, "Logic")] public float Time;
        [RTTI.Member(6, 0x28, "Logic")] public float TurnAngle;
        [RTTI.Member(7, 0x2C, "Logic")] public bool ShouldTurn;
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSPatrolPathLookat> LookAtTarget;
        [RTTI.Member(9, 0x48, "Logic")] public Array<int> GeneralPurpose1;
    }

    [RTTI.Serializable(0x23DA9ADD20C10AC, GameType.DS)]
    public class DSPatrolPathNodeActionList : CoreObject
    {
        [RTTI.Member(4, 0x20, "Logic")] public Array<Ref<DSPatrolPathNodeAction>> Actions;
        [RTTI.Member(3, 0x30, "Logic")] public EDSPatrolPathType PathType;
    }

    [RTTI.Serializable(0x57E007655CC34BE1, GameType.DS)]
    public class DSPatrolPathNodeActionSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7E874C06291E0CDE, GameType.DS)]
    public class DSPatrolPathNodeBase : ParentWorldNodeOverridable
    {
        [RTTI.Member(9, 0x90, "Logic")] public EDSPatrolMoveType MoveTypeToThisNode;
        [RTTI.Member(11, 0x91, "Logic")] public bool SquatStop;
        [RTTI.Member(10, 0x92, "Logic")] public bool CanMoveToThisNodeDirectly;
        [RTTI.Member(12, 0x94, "Logic")] public float StopHeading;
        [RTTI.Member(13, 0x98, "Logic")] public bool UseStopHeading;
        [RTTI.Member(14, 0x99, "Logic")] public bool StopPrecisely;
        [RTTI.Member(17, 0x9B, "Cover")] public EDSPatrolPathCoverType CoverType;
        [RTTI.Member(15, 0xA8, "Logic")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0xE945AC33A39C945E, GameType.DS)]
    public class DSPatrolPathPOINode : DSPatrolPathNodeBase
    {
        [RTTI.Member(19, 0xC0, "Logic")] public Array<UUIDRef<DSPatrolPath>> Paths;
        [RTTI.Member(20, 0xD0, "Logic")] public float UseChance;
    }

    [RTTI.Serializable(0x95413CBD0B44399B, GameType.DS)]
    public class DSPatrolPathPlaceHolder : ParentWorldNode
    {
        [RTTI.Member(6, 0x70)] public Array<Ref<DSPatrolPath>> Paths;
    }

    [RTTI.Serializable(0x9209E921B073FA05, GameType.DS)]
    public class DSPatrolPathPlaceHolderSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x75B8AB4FD252A9AD, GameType.DS)]
    public class DSPatrolPathPriorityList : DSPatrolPathPriorityListBase
    {
        [RTTI.Member(4, 0x20, "Settings")] public Array<GGUUID> OriginalUUIDList;
        [RTTI.Member(3, 0x30, "Settings", true)] public Array<Ref<DSPatrolPath>> PatrolPathPriorityList;
    }

    [RTTI.Serializable(0xFDA4537916FBC337, GameType.DS)]
    public class DSPatrolPathPriorityListBase : CoreObject
    {
    }

    [RTTI.Serializable(0x7E2121BA391B5860, GameType.DS)]
    public class DSPatrolPathPriorityListBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD259C4B8C2221ED5, GameType.DS)]
    public class DSPatrolPathPriorityListSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF67BEF5916C772DE, GameType.DS)]
    public class DSPatrolPathRandomGroup : DSPatrolPathGroup
    {
    }

    [RTTI.Serializable(0x8EC1D11CA2DA7D9E, GameType.DS)]
    public class DSPatrolPathRandomGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC4E9E1E1AB34B786, GameType.DS)]
    public class DSPatrolPathSequenceGroup : DSPatrolPathGroup
    {
    }

    [RTTI.Serializable(0x3DE0C6FF7E802BC3, GameType.DS)]
    public class DSPatrolPathSequenceGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4235FC358C04FB3A, GameType.DS)]
    public class DSPatrolPathSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x98F68F36AC0D020A, GameType.DS)]
    public class DSPersonalBaggageGeneratorForMuleContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4291C9D40BDFE597, GameType.DS)]
    public class DSPersonalBaggageGeneratorForMuleContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFE0707BE0D937D14, GameType.DS)]
    public class DSPersonalBaggageGeneratorForMuleList : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<BooleanFact> EnableFact;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSGameBaggageListItem>> Baggages;
    }

    [RTTI.Serializable(0x925AB4C796927617, GameType.DS)]
    public class DSPersonalBaggageGeneratorForMuleResource : DSPersonalBaggageGeneratorForMuleUnconsciousResource
    {
        [RTTI.Member(6, 0x48)] public Ref<DSPersonalBaggageGeneratorForMuleUnconsciousResource> UnconsciousResource;
    }

    [RTTI.Serializable(0xD0855BAB771DFE15, GameType.DS)]
    public class DSPersonalBaggageGeneratorForMuleSystemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSPersonalBaggageGeneratorForMuleContext> FactContext;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSPersonalBaggageGeneratorForMuleResource>> PersonalBaggageGeneratorList;
    }

    [RTTI.Serializable(0x2060FA0558F91472, GameType.DS)]
    public class DSPersonalBaggageGeneratorForMuleUnconsciousResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSGameBaggageListItem>> BaggageList;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSPersonalBaggageGeneratorForMuleList>> CandidateList;
        [RTTI.Member(4, 0x40)] public uint32 Hash;
        [RTTI.Member(5, 0x44)] public bool SelectUnlockedItemsOnly;
    }

    [RTTI.Serializable(0xEFC7983120D27FAD, GameType.DS)]
    public class DSPhotoModeCameraCollisionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4FB3F6B55767253, GameType.DS)]
    public class DSPhotoModeCameraCollisionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<PhysicsCollisionResource> PhysicsResource;
        [RTTI.Member(4, 0x30, "DS")] public Vec3 MargineSize;
        [RTTI.Member(5, 0x40, "DS")] public Vec3 CenterOffset;
    }

    [RTTI.Serializable(0xD0BADD249549B332, GameType.DS)]
    public class DSPhotoModeModelOpacityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4F03C93467C199B0, GameType.DS)]
    public class DSPhotoModeModelOpacityComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xDF41C60A08F2B0F, GameType.DS)]
    public class DSPhotoModeModelOpacityComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String ShaderVariableName;
        [RTTI.Member(3, 0x28)] public float CheckSphereRadius;
        [RTTI.Member(4, 0x2C)] public bool IsCheckChildren;
        [RTTI.Member(5, 0x2D)] public bool IsApplyParentOpacity;
        [RTTI.Member(6, 0x2E)] public bool IsResetShaderVariableByArtParts;
        [RTTI.Member(7, 0x2F)] public bool IsCheckVisualBoundsOnly;
    }

    [RTTI.Serializable(0x2557A67B4BD0A33C, GameType.DS)]
    public class DSPipelineStateObjectDescriptorCacheSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Array<uint8> Data;
    }

    [RTTI.Serializable(0xB0098BA63AB15583, GameType.DS)]
    public class DSPlacableEntity : Entity
    {
    }

    [RTTI.Serializable(0x3457BA77777F3A62, GameType.DS)]
    public class DSPlacableEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x5F7BF91744F6E777, GameType.DS)]
    public class DSPlacableEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Default")] public Array<Ref<SoundResource>> Sounds;
        [RTTI.Member(32, 0x110, "Default")] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(33, 0x120, "Default")] public Ref<DSOdradekEffectResource> OdradekEffectResource;
        [RTTI.Member(34, 0x128, "Default")] public Ref<DSThrowableInspectorComponentResource> AttachInspectorComponent;
    }

    [RTTI.Serializable(0x871860FC6B1446E1, GameType.DS)]
    public class DSPlacementHoleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBE45FE42CEDCFC5B, GameType.DS)]
    public class DSPlacementHoleComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float Radius;
        [RTTI.Member(3, 0x30)] public Vec3 Offset;
    }

    [RTTI.Serializable(0xD583121B3D01B831, GameType.DS)]
    public class DSPlayRecordBasicNode : RTTIObject
    {
    }

    [RTTI.Serializable(0xF7A084DB09181C45, GameType.DS)]
    public class DSPlayRecordBasicNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x47552786D08C0FB2, GameType.DS)]
    public class DSPlayRecordSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic_PorterExperiencePoint")] public uint64 PorterInitExp;
        [RTTI.Member(4, 0x28, "Logic_PorterExperiencePoint")] public uint64 PorterMaxExp;
        [RTTI.Member(6, 0x30, "Logic_PorterLevel")] public int32 PorterInitLevel;
        [RTTI.Member(7, 0x34, "Logic_PorterLevel")] public int32 PorterMaxLevel;
        [RTTI.Member(9, 0x38, "Logic_PorterRank")] public Array<int32> PorterSpeedRankThresholds;
        [RTTI.Member(10, 0x48, "Logic_PorterRank")] public Array<int32> PorterSafetyRankThresholds;
        [RTTI.Member(11, 0x58, "Logic_PorterRank")] public Array<int32> PorterDeliveryRankThresholds;
        [RTTI.Member(12, 0x68, "Logic_PorterRank")] public Array<int32> PorterServiceRankThresholds;
        [RTTI.Member(13, 0x78, "Logic_PorterRank")] public Array<int32> BridgeLinkRankThresholds;
        [RTTI.Member(23, 0x88, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_DeliverNpcBaggages;
        [RTTI.Member(25, 0x8C, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_DeliverOnlineUserBaggages;
        [RTTI.Member(30, 0x90, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_DeliveryTogetherTotalWeight;
        [RTTI.Member(22, 0x94, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_PickUpOfflineBaggages;
        [RTTI.Member(24, 0x98, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_PickUpOnlineBaggages;
        [RTTI.Member(31, 0x9C, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_DiscardingChiralContaminants;
        [RTTI.Member(16, 0xA0, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_FromBB;
        [RTTI.Member(17, 0xA4, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_FromPorter;
        [RTTI.Member(18, 0xAC, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_FromBridges;
        [RTTI.Member(19, 0xB0, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_FromPreppers;
        [RTTI.Member(20, 0xB4, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_FromBT;
        [RTTI.Member(21, 0xB8, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_ByDonation;
        [RTTI.Member(26, 0xBC, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_DonationUsed;
        [RTTI.Member(27, 0xC0, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_BuildingUsed;
        [RTTI.Member(28, 0xC4, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_ContributeToConstruction;
        [RTTI.Member(29, 0xC8, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_FromOnlineUser;
        [RTTI.Member(15, 0xCC, "Logic_ConversionFromLikeToPorterEvaluationExp")] public float TakeLikeReason_Other;
    }

    [RTTI.Serializable(0x1394EE5B032A7A17, GameType.DS)]
    public class DSPlayerAKukanConfigComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x66AA9F0CDC3AEE20, GameType.DS)]
    public class DSPlayerAKukanConfigComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x1FDD00E0B9673C96, GameType.DS)]
    public class DSPlayerAKukanConfigComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "FloorEffect")] public DSAKukanEffConfig Config;
    }

    [RTTI.Serializable(0xF66CB61CB281EC69, GameType.DS)]
    public class DSPlayerAKukanEffFloorEntity : Entity
    {
    }

    [RTTI.Serializable(0xCD0873264CE2BF91, GameType.DS)]
    public class DSPlayerAKukanEffFloorEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0xEC1D35BCDDEF530E, GameType.DS)]
    public class DSPlayerAKukanEntity : Entity
    {
    }

    [RTTI.Serializable(0x2726B5DDCC0CC4A1, GameType.DS)]
    public class DSPlayerAKukanEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0xA521C2F07ECDF713, GameType.DS)]
    public class DSPlayerAKukanEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "EffectFloor")] public Ref<DSPlayerAKukanEffFloorEntityResource> EffFloorEntity;
        [RTTI.Member(32, 0x108, "EffectFloor")] public Ref<DSPlayerAKukanEffFloorEntityResource> EffCircleEntity;
        [RTTI.Member(33, 0x110, "EffectFloor")] public Ref<DSPlayerAKukanEffFloorEntityResource> EffGridEntity;
        [RTTI.Member(35, 0x118, "Sentence")] public Array<Ref<DSSentenceContainerResource>> SentenceResourceContainers;
    }

    [RTTI.Serializable(0x46BA00101DC7D4FF, GameType.DS)]
    public class DSPlayerAKukanInventoryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDB1F560FA8493AEC, GameType.DS)]
    public class DSPlayerAKukanInventoryComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x80BB3688FB1897D7, GameType.DS)]
    public class DSPlayerAKukanInventoryComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSOdradekArmEntityResource> OdradekArmResource;
        [RTTI.Member(3, 0x28)] public Ref<DSOdradekBodyEntityResource> OdradekBodyResource;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> HarmonicaResource;
    }

    [RTTI.Serializable(0x7376CF7AF481F351, GameType.DS)]
    public class DSPlayerAccessoryInfo
    {
        [RTTI.Member(0, 0x0)] public String Helper;
        [RTTI.Member(1, 0x8)] public Ref<ArtPartsDataResource> ArtParts;
        [RTTI.Member(2, 0x10)] public String ParentMesh;
        [RTTI.Member(3, 0x18)] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
    }

    [RTTI.Serializable(0xEC32FD53CB8D54CB, GameType.DS)]
    public class DSPlayerBBPodAnimatedShaderEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x165CB6C91EAEBF18, GameType.DS)]
    public class DSPlayerBBPodAnimatedShaderEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> CurveResource;
        [RTTI.Member(9, 0x38, "Logic")] public EDSBBPodShaderFloat1Type TargetParam;
        [RTTI.Member(10, 0x39, "Logic")] public bool CutSceneStateOverrideEnable;
        [RTTI.Member(11, 0x3A, "Logic")] public bool ForceIgnoreGridMaskWhenBBAutointoxication;
    }

    [RTTI.Serializable(0xCD714780AE20F9CC, GameType.DS)]
    public class DSPlayerBBPodAnimatedShaderFloat3EventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3B8AD67669A77C3D, GameType.DS)]
    public class DSPlayerBBPodAnimatedShaderFloat3EventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> CurveResourceX;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<CurveResource> CurveResourceY;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<CurveResource> CurveResourceZ;
        [RTTI.Member(11, 0x48, "Logic")] public EDSBBPodShaderFloat3Type TargetParam;
        [RTTI.Member(12, 0x49, "Logic")] public bool CutSceneStateOverrideEnable;
    }

    [RTTI.Serializable(0xFA0648A8569A5B73, GameType.DS)]
    public class DSPlayerBBStressAdjustEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xEC079BA5FFF6E70D, GameType.DS)]
    public class DSPlayerBBStressAdjustEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xF2290AF559790738, GameType.DS)]
    public class DSPlayerBackpackBeltComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB21F7069E25144EB, GameType.DS)]
    public class DSPlayerBackpackBeltComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x452A16DD4427B5DB, GameType.DS)]
    public class DSPlayerBodyVariant : DSPlayerBodyVariantInterface
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<SkinnedModelResource> SkinnedModelResource;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<SkinnedModelResource> BootsSkinnedModelResource;
        [RTTI.Member(8, 0x48, "Logic")] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
        [RTTI.Member(9, 0x58, "Logic")] public Ref<ArtPartsVariationResource> ShoesArtPartsVariation;
    }

    [RTTI.Serializable(0x81DDDF3B246E8603, GameType.DS)]
    public class DSPlayerBodyVariantInterface : Resource
    {
    }

    [RTTI.Serializable(0xCDFEA715537B3BE3, GameType.DS)]
    public class DSPlayerBodyVariantInterfaceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3278C9DE50E63829, GameType.DS)]
    public class DSPlayerBodyVariantSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x76B04CAABD1BADAA, GameType.DS)]
    public class DSPlayerBootsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB4B79E1EE1F3716D, GameType.DS)]
    public class DSPlayerBootsComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ArtPartsVariationResource> ChiralBootsApv;
    }

    [RTTI.Serializable(0x82E555A88C768F9F, GameType.DS)]
    public class DSPlayerCamoufConfig : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Visual_Move")] public float Walk;
        [RTTI.Member(4, 0x24, "Visual_Move")] public float Run;
        [RTTI.Member(5, 0x28, "Visual_Move")] public float Dash;
        [RTTI.Member(7, 0x2C, "Visual_State")] public float Crouch;
        [RTTI.Member(8, 0x30, "Visual_State")] public float Jump;
        [RTTI.Member(10, 0x34, "Visual_Environment")] public float InStealthPlant;
        [RTTI.Member(11, 0x38, "Visual_Environment")] public float OnStealthPlant;
        [RTTI.Member(13, 0x3C, "Visual_Action")] public float MazzleFlash;
        [RTTI.Member(15, 0x40, "Baggage")] public float CarringBaggageUp;
        [RTTI.Member(17, 0x44, "Effect")] public float ShowScrenEffectCamoufPoint;
        [RTTI.Member(19, 0x48, "Aural_Move")] public float MinMoveNoiseScale;
        [RTTI.Member(20, 0x4C, "Aural_Move")] public float NormalWalkNoiseScale;
        [RTTI.Member(21, 0x50, "Aural_Move")] public float NormalRunNoiseScale;
        [RTTI.Member(22, 0x54, "Aural_Move")] public float NormalCrouchNoiseScale;
        [RTTI.Member(23, 0x58, "Aural_Move")] public float OverloadingNoiseScale;
        [RTTI.Member(25, 0x60, "Table")] public Ref<CurveResource> CamoufPointToScaleTable;
    }

    [RTTI.Serializable(0x6EDE406C1C5DAE53, GameType.DS)]
    public class DSPlayerCartConfig
    {
        [RTTI.Member(0, 0x0)] public float MoveSpeedBrakeMultiplier_BrakeMax;
        [RTTI.Member(1, 0x4)] public float MoveSpeedBrakeMultiplier_BrakeMin;
    }

    [RTTI.Serializable(0xEB9698C4C7B3F0A3, GameType.DS)]
    public class DSPlayerCollisionTrigger : CollisionTrigger
    {
    }

    [RTTI.Serializable(0xA50CD81B1267875E, GameType.DS)]
    public class DSPlayerController : HumanoidController
    {
    }

    [RTTI.Serializable(0xCFBFD335633102E0, GameType.DS)]
    public class DSPlayerEchoManagerConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> KnotSpaceEntityResource;
        [RTTI.Member(4, 0x30)] public Ref<GraphProgramResource> WelcomeHoloCheckScriptResource;
    }

    [RTTI.Serializable(0x9E37903938D0B795, GameType.DS)]
    public class DSPlayerEntity : Humanoid
    {
    }

    [RTTI.Serializable(0x1A7FC1125889AC74, GameType.DS)]
    public class DSPlayerEntityRep : HumanoidRep
    {
    }

    [RTTI.Serializable(0xE7C274685F3765A0, GameType.DS)]
    public class DSPlayerEntityResource : HumanoidResource
    {
        [RTTI.Member(178, 0x490, "ProgramSounds")] public Ref<SoundResource> StandToCrouch;
        [RTTI.Member(179, 0x498, "ProgramSounds")] public Ref<SoundResource> CrouchToStand;
        [RTTI.Member(180, 0x4A0, "ProgramSounds")] public Ref<SoundResource> ActiveSkeletonLoop;
        [RTTI.Member(181, 0x4A8, "ProgramSounds")] public Ref<SoundResource> PowerSkeletonLoop;
        [RTTI.Member(182, 0x4B0, "ProgramSounds")] public Ref<SoundResource> SpeedSkeletonLoop;
        [RTTI.Member(183, 0x4B8, "ProgramSounds")] public Ref<SoundResource> StabilitySkeletonLoop;
        [RTTI.Member(184, 0x4C0, "ProgramSounds")] public Ref<SoundResource> BaggageSonar;
        [RTTI.Member(185, 0x4C8, "ProgramSounds")] public Ref<SoundResource> BaggageSonarDetect;
        [RTTI.Member(186, 0x4D0, "ProgramSounds")] public Ref<SoundResource> BaggageSonarBlip;
        [RTTI.Member(188, 0x4D8, "ProgramSounds")] public Ref<SoundResource> BaggageSonarPingStartButton;
        [RTTI.Member(187, 0x4E0, "ProgramSounds")] public Ref<SoundResource> BaggageSonarPing;
        [RTTI.Member(189, 0x4E8, "ProgramSounds")] public Ref<SoundResource> TerrainSensor;
        [RTTI.Member(190, 0x4F0, "ProgramSounds")] public Ref<SoundResource> GazerVisualContact;
        [RTTI.Member(191, 0x4F8, "ProgramSounds")] public Ref<SoundResource> HoodOn;
        [RTTI.Member(192, 0x500, "ProgramSounds")] public Ref<SoundResource> HoodOff;
        [RTTI.Member(193, 0x508, "ProgramSounds")] public Ref<SoundResource> WindNoise;
        [RTTI.Member(194, 0x510, "ProgramSounds")] public Ref<SoundResource> Damage_PhysicalImpact;
        [RTTI.Member(195, 0x518, "ProgramSounds")] public Ref<SoundResource> Damage_MuleRodImpact;
        [RTTI.Member(196, 0x520, "ProgramSounds")] public Ref<SoundResource> StartLoadingBloodAmmo;
        [RTTI.Member(197, 0x528, "ProgramSounds")] public Ref<SoundResource> EndLoadingBloodAmmo;
        [RTTI.Member(198, 0x530, "ProgramSounds")] public Ref<SoundResource> GetChiral;
        [RTTI.Member(199, 0x538, "ProgramSounds")] public Ref<SoundResource> GetCrypt;
        [RTTI.Member(200, 0x540, "ProgramSounds")] public Ref<SoundResource> GetSolegrass;
        [RTTI.Member(201, 0x548, "ProgramSounds")] public Ref<SoundResource> GetMemoryChip;
        [RTTI.Member(203, 0x550, "ProgramSounds")] public Ref<SoundResource> WaterStep;
        [RTTI.Member(204, 0x558, "ProgramSounds")] public Ref<SoundResource> TarryStep;
        [RTTI.Member(202, 0x560, "ProgramSounds")] public Ref<SoundResource> Buzzer;
        [RTTI.Member(205, 0x568, "ProgramSounds")] public Ref<SoundResource> HandyPickup;
        [RTTI.Member(206, 0x570, "ProgramSounds")] public Ref<SoundResource> SpineBoneCrack;
        [RTTI.Member(207, 0x578, "ProgramSounds")] public Ref<SoundResource> BaggagePurge;
        [RTTI.Member(208, 0x580, "ProgramSounds")] public Ref<SoundResource> OpenRainHood;
        [RTTI.Member(209, 0x588, "ProgramSounds")] public Ref<SoundResource> CloseRainHood;
        [RTTI.Member(210, 0x590, "ProgramSounds")] public Ref<SoundResource> RainAlarm;
        [RTTI.Member(211, 0x598, "ProgramSounds")] public Ref<SoundResource> RainEndAlarm;
        [RTTI.Member(212, 0x5A0, "ProgramSounds")] public Ref<SoundResource> RainHoodReady;
        [RTTI.Member(213, 0x5A8, "ProgramSounds")] public Ref<SoundResource> ActivateBalloon;
        [RTTI.Member(214, 0x5B0, "ProgramSounds")] public Ref<SoundResource> DeactivateBalloon;
        [RTTI.Member(215, 0x5B8, "ProgramSounds")] public Ref<SoundResource> BBStartPowerOn;
        [RTTI.Member(216, 0x5C0, "ProgramSounds")] public Ref<SoundResource> BBStartPowerOff;
        [RTTI.Member(217, 0x5C8, "ProgramSounds")] public Ref<SoundResource> BBStartPowerOnDamage;
        [RTTI.Member(218, 0x5D0, "ProgramSounds")] public Ref<SoundResource> BBAutointoxicationAlarm;
        [RTTI.Member(219, 0x5D8, "ProgramSounds")] public Ref<SoundResource> BBHardDandleAlarm;
        [RTTI.Member(224, 0x5E0, "ProgramSounds")] public Ref<SoundResource> BaggageBackpackOut;
        [RTTI.Member(225, 0x5E8, "ProgramSounds")] public Ref<SoundResource> KillHuman;
        [RTTI.Member(226, 0x5F0, "ProgramSounds")] public Ref<SoundResource> CaroDangerBleepOneshot;
        [RTTI.Member(227, 0x5F8, "ProgramSounds")] public Ref<SoundResource> DamageVehicleImpactHeavy;
        [RTTI.Member(228, 0x600, "ProgramSounds")] public Ref<SoundResource> BrokenBoots;
        [RTTI.Member(229, 0x608, "ProgramSounds")] public Ref<SoundResource> GreatViewBGM;
        [RTTI.Member(230, 0x610, "ProgramSounds")] public Ref<SoundResource> ConstructionCameraZoomSound;
        [RTTI.Member(231, 0x618, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HarmonicaUp;
        [RTTI.Member(232, 0x620, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HarmonicaDown;
        [RTTI.Member(233, 0x628, "ProgramSounds")] public Ref<SoundResource> ProgramSound_LadderSlideDown;
        [RTTI.Member(234, 0x630, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HiggsTarryGuard;
        [RTTI.Member(235, 0x638, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HiggsTarryHook;
        [RTTI.Member(236, 0x640, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HiggsTarryUpper;
        [RTTI.Member(237, 0x648, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HiggsTarryStraight;
        [RTTI.Member(238, 0x650, "ProgramSounds")] public Ref<SoundResource> ProgramSound_RainShelterTimePassFadeIn;
        [RTTI.Member(239, 0x658, "ProgramSounds")] public Ref<SoundResource> ProgramSound_BaggageCoverBackpackHit;
        [RTTI.Member(240, 0x660, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HiggsTarryGuardL;
        [RTTI.Member(241, 0x668, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HiggsTarryGuardR;
        [RTTI.Member(242, 0x670, "ProgramSounds")] public Ref<SoundResource> ProgramSound_TarrySwampLoop;
        [RTTI.Member(243, 0x678, "ProgramSounds")] public Ref<SoundResource> ProgramSound_BuzzerBig;
        [RTTI.Member(244, 0x680, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HandcuffStart;
        [RTTI.Member(245, 0x688, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HandcuffLoop;
        [RTTI.Member(246, 0x690, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HandcuffEnd;
        [RTTI.Member(247, 0x698, "ProgramSounds")] public Ref<SoundResource> ProgramSound_BaggageToCartAttach;
        [RTTI.Member(248, 0x6A0, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HandPickupLine;
        [RTTI.Member(249, 0x6A8, "ProgramSounds")] public Ref<SoundResource> ProgramSound_HandPickupCatch;
        [RTTI.Member(254, 0x6B0, "Voices")] public Ref<DSSituationSentenceGroupResource> ResidentSentenceGroupResource;
        [RTTI.Member(255, 0x6B8, "Voices")] public Ref<DSSentenceSituationPriorityResource> SituationPriorityResource;
        [RTTI.Member(256, 0x6C0, "Voices")] public float BasicVoiceTimeAdjustEfficient;
        [RTTI.Member(258, 0x6C8, "AI")] public Ref<AIAuralStimulusResource> BreathAfterStoppingBreathStimulusResource;
        [RTTI.Member(259, 0x6D0, "AI")] public Ref<AIAuralStimulusResource> BreathAfterBreathEmptyStimulusResource;
        [RTTI.Member(260, 0x6D8, "AI")] public Ref<AIAuralStimulusResource> BreathEchoStimulusResource;
        [RTTI.Member(261, 0x6E0, "AI")] public Ref<AIAuralStimulusResource> BreathEchoNearStimulusResource;
        [RTTI.Member(220, 0x6E8, "ProgramSounds")] public Ref<Fact> Fact_BreathHold;
        [RTTI.Member(221, 0x6F0, "ProgramSounds")] public Ref<Fact> Fact_DSBloodRate;
        [RTTI.Member(222, 0x6F8, "ProgramSounds")] public Ref<Fact> Fact_DSShudderState;
        [RTTI.Member(223, 0x700, "ProgramSounds")] public Ref<Fact> Fact_DSSpecialLevelState;
        [RTTI.Member(251, 0x708, "PlayerFacts")] public Array<Ref<Fact>> GameFacts;
        [RTTI.Member(252, 0x718, "PlayerFacts")] public Array<Ref<Fact>> VoiceMusicFacts;
        [RTTI.Member(263, 0x728, "Effects")] public Ref<DSOdradekEffectResource> OdradekEffectResource;
        [RTTI.Member(264, 0x730, "Effects")] public Ref<DSOdradekEffectResource> OdradekEffectForWatchTowerResource;
        [RTTI.Member(272, 0x738, "Camera")] public Ref<ShakeResource> CameraShake_CliffSlide;
        [RTTI.Member(273, 0x740, "Camera")] public Ref<ShakeResource> CameraShake_GazerDrag;
        [RTTI.Member(274, 0x748, "Camera")] public Ref<ShakeResource> CameraShake_CartCodeBreak;
        [RTTI.Member(275, 0x750, "Camera")] public Ref<ShakeResource> CameraShake_FootStepHeavy;
        [RTTI.Member(276, 0x758, "Camera")] public Ref<ShakeResource> CameraShake_PreGust;
        [RTTI.Member(277, 0x760, "Camera")] public Ref<ShakeResource> CameraShake_Gust;
        [RTTI.Member(278, 0x768, "Camera")] public Ref<ShakeResource> CameraShake_SlipInWater;
        [RTTI.Member(279, 0x770, "Camera")] public Ref<ShakeResource> CameraShake_DetectGazer;
        [RTTI.Member(280, 0x778, "Camera")] public Ref<ShakeResource> CameraShake_NearGazer;
        [RTTI.Member(281, 0x780, "Camera")] public Ref<ShakeResource> CameraShake_DetectGazerEnd;
        [RTTI.Member(283, 0x788, "Etc")] public Array<DSPlayerAccessoryInfo> Accessories;
        [RTTI.Member(284, 0x798, "Etc")] public Ref<EntityResource> BootsEntityResource;
        [RTTI.Member(285, 0x7A0, "Etc")] public Ref<EntityResource> CanteenEntityResource;
        [RTTI.Member(286, 0x7A8, "Etc")] public Ref<EntityResource> WeaponCaseEntityResource;
        [RTTI.Member(287, 0x7B0, "Etc")] public Ref<EntityResource> SmallWeaponCaseEntityResource;
        [RTTI.Member(288, 0x7B8, "Etc")] public Ref<EntityResource> BigWeaponCaseEntityResource;
        [RTTI.Member(289, 0x7C0, "Etc")] public Array<Ref<EntityResource>> WeaponCaseDebrisResources;
        [RTTI.Member(290, 0x7D0, "Etc")] public Array<Ref<EntityResource>> SmallWeaponCaseDebrisResources;
        [RTTI.Member(291, 0x7E0, "Etc")] public Array<Ref<EntityResource>> BigWeaponCaseDebrisResources;
        [RTTI.Member(292, 0x7F0, "Etc")] public Ref<CurveResource> WeaponCaseIntensityCurveResource;
        [RTTI.Member(293, 0x7F8, "Etc")] public Ref<ArtPartsVariationResource> CanteenApvForMuleSuit;
        [RTTI.Member(296, 0x800, "Sequences")] public Ref<EntityResource> Sequence_GoIntoKnotSpace;
        [RTTI.Member(297, 0x808, "Sequences")] public Ref<EntityResource> Sequence_GoIntoKnotSpaceEffectOnly;
        [RTTI.Member(298, 0x810, "Sequences")] public Ref<EntityResource> Sequence_ReturnFromKnotSpace;
        [RTTI.Member(299, 0x818, "Sequences")] public Ref<EntityResource> Sequence_ItwasADream;
        [RTTI.Member(300, 0x820, "Sequences")] public Ref<EntityResource> Sequence_FallDeath;
        [RTTI.Member(301, 0x828, "Sequences")] public Ref<EntityResource> Sequence_DeathAct;
        [RTTI.Member(302, 0x830, "Sequences")] public Ref<EntityResource> Sequence_IntoBlackSamMouth;
        [RTTI.Member(303, 0x838, "Sequences")] public Ref<EntityResource> Sequence_BlackSamMouthToBB;
        [RTTI.Member(304, 0x840, "Sequences")] public Ref<EntityResource> Sequence_OutFromBlackSamMouth;
        [RTTI.Member(305, 0x848, "Sequences")] public Ref<EntityResource> Sequence_ReturnFromKnotSpaceFirst;
        [RTTI.Member(306, 0x850, "Sequences")] public Ref<EntityResource> Sequence_ReturnFromKnotSpaceSecond;
        [RTTI.Member(307, 0x858, "Sequences")] public Array<Ref<EntityResource>> Sequences_ItwasADream;
        [RTTI.Member(265, 0x868, "Effects")] public Ref<EntityResource> WeatherWindRainEntityResource;
        [RTTI.Member(316, 0x870, "Rumble")] public Ref<RumbleResource> Rumble_FootStepHeavy;
        [RTTI.Member(317, 0x878, "Rumble")] public Ref<RumbleResource> Rumble_PreGust;
        [RTTI.Member(318, 0x880, "Rumble")] public Ref<RumbleResource> Rumble_Gust;
        [RTTI.Member(319, 0x888, "Rumble")] public Ref<RumbleResource> Rumble_SlipInWater;
        [RTTI.Member(320, 0x890, "Rumble")] public Ref<RumbleResource> Rumble_BalanceOutLeft;
        [RTTI.Member(321, 0x898, "Rumble")] public Ref<RumbleResource> Rumble_BalanceOutRight;
        [RTTI.Member(266, 0x8A0, "Effects")] public Array<Ref<EffectComponentResource>> OneShotEffectComponentResources;
        [RTTI.Member(294, 0x8B0, "Etc")] public Ref<AIPathObjectCategory> DragPathObjectCategory;
        [RTTI.Member(267, 0x8B8, "Effects")] public Ref<LaserBeamResource> HandLPickupLine;
        [RTTI.Member(268, 0x8C0, "Effects")] public Ref<LaserBeamResource> HandRPickupLine;
        [RTTI.Member(269, 0x8C8, "Effects")] public Ref<LaserBeamResource> HandLPickupCollectableLine;
        [RTTI.Member(270, 0x8D0, "Effects")] public Ref<LaserBeamResource> HandRPickupCollectableLine;
        [RTTI.Member(309, 0x8D8, "FootStep")] public Ref<MaterialTypeResource> FootstepWaterShallowMaterialType;
        [RTTI.Member(323, 0x8E0, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_ConfigWater;
        [RTTI.Member(324, 0x8E8, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_ConfigTarry;
        [RTTI.Member(325, 0x8F0, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_ConfigSlipGrenade;
        [RTTI.Member(326, 0x8F8, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_ConfigStaticTarry;
        [RTTI.Member(310, 0x900, "FootStep")] public Ref<MaterialTypeResource> MaterialType_PlayerSlipDown;
        [RTTI.Member(311, 0x908, "FootStep")] public Ref<MaterialTypeResource> MaterialType_PlayerHeavyLanded;
        [RTTI.Member(312, 0x910, "FootStep")] public Ref<MaterialTypeResource> MaterialType_PlayerBrakeStepDown;
        [RTTI.Member(313, 0x918, "FootStep")] public Ref<MaterialTypeResource> MaterialType_PlayerBrakeStepUp;
        [RTTI.Member(314, 0x920, "FootStep")] public Ref<MaterialTypeResource> MaterialType_PlayerSpecialSound;
        [RTTI.Member(327, 0x928, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_StairWood;
        [RTTI.Member(328, 0x930, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_StairConcrete;
        [RTTI.Member(329, 0x938, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_StairMetal;
        [RTTI.Member(330, 0x940, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_Touch;
        [RTTI.Member(332, 0x948, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_SteadyOneself;
        [RTTI.Member(333, 0x950, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_RopeRub;
        [RTTI.Member(334, 0x958, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_RiverContact;
        [RTTI.Member(335, 0x960, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_TouchOut;
        [RTTI.Member(331, 0x968, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_GloveTouch;
        [RTTI.Member(336, 0x970, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_Spew;
        [RTTI.Member(337, 0x978, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_HighWay;
        [RTTI.Member(338, 0x980, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_HighWayJunction;
        [RTTI.Member(339, 0x988, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_HighWayParking;
        [RTTI.Member(341, 0x990, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_HighWayMetal;
        [RTTI.Member(340, 0x998, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_SwapDeepSnow;
        [RTTI.Member(342, 0x9A0, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_StoneRockySnow;
        [RTTI.Member(343, 0x9A8, "MaterialConfig")] public Ref<MaterialTypeResource> MaterialType_StoneDebris;
        [RTTI.Member(345, 0x9B0, "PhotoMode")] public Array<PlayerPhotoModePoseAnimation> PlayerPoseAnimations;
        [RTTI.Member(346, 0x9C0, "PhotoMode")] public Array<PlayerPhotoModePoseAnimation> PlayerPoseAnimations_PrivateRoom;
    }

    [RTTI.Serializable(0xCB79CDD08D78591A, GameType.DS)]
    public class DSPlayerEntityResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2F15F5C8A1755A65, GameType.DS)]
    public class DSPlayerEntitySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE4A1C794F2767797, GameType.DS)]
    public class DSPlayerFacialComponent : DSFacialRigManagerComponent
    {
    }

    [RTTI.Serializable(0x5129A5D9CF4239B5, GameType.DS)]
    public class DSPlayerFacialComponentResource : DSFacialRigManagerComponentResource
    {
        [RTTI.Member(4, 0x28)] public Array<Ref<SkeletonAnimationResource>> PhotoModeFacialResources;
    }

    [RTTI.Serializable(0xB78CD18EA9406ECA, GameType.DS)]
    public class DSPlayerFactContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x6A9734D367C387F3, GameType.DS)]
    public class DSPlayerFactContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDC917D143A2BC3BA, GameType.DS)]
    public class DSPlayerGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0xA5C04C13DDBD85A3, GameType.DS)]
    public class DSPlayerGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0x5EA6BCD4C967D82F, GameType.DS)]
    public class DSPlayerGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0xD83DC3F1E3951360, GameType.DS)]
    public class DSPlayerHangedBootsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEFE04EE37B5C8E22, GameType.DS)]
    public class DSPlayerHangedBootsComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
    }

    [RTTI.Serializable(0x922DF56BDF05EFBB, GameType.DS)]
    public class DSPlayerHideBaggageEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xADD518325ECA989, GameType.DS)]
    public class DSPlayerHideBaggageEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool HideBackpack;
        [RTTI.Member(9, 0x31, "Logic")] public bool HideSpareShoes;
        [RTTI.Member(10, 0x32, "Logic")] public bool HideOnlyBackpackBaggages;
        [RTTI.Member(11, 0x33, "Logic")] public bool ShowShield;
        [RTTI.Member(12, 0x34, "Logic")] public bool ShowHeatUnit;
        [RTTI.Member(13, 0x35, "Logic")] public bool HideRainCover;
    }

    [RTTI.Serializable(0xE3E5854ACA65057D, GameType.DS)]
    public class DSPlayerHiggsCryptEntity : Entity
    {
    }

    [RTTI.Serializable(0x815777BEB798D7, GameType.DS)]
    public class DSPlayerHiggsCryptEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x287D8F847C68ADF8, GameType.DS)]
    public class DSPlayerHiggsCryptEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Logic")] public int CryptIndex;
    }

    [RTTI.Serializable(0x8E69FAC96F07B3E9, GameType.DS)]
    public class DSPlayerInventoryAccessoryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x918EB4DC6AFECD93, GameType.DS)]
    public class DSPlayerInventoryAccessoryComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xB9AC869541BCB5CB, GameType.DS)]
    public class DSPlayerInventoryComponent : DSInventoryComponent
    {
    }

    [RTTI.Serializable(0x3BC6DF7DED0DBC7C, GameType.DS)]
    public class DSPlayerInventoryComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x92B071C6C403DED6, GameType.DS)]
    public class DSPlayerInventoryComponentResource : DSInventoryComponentResource
    {
        [RTTI.Member(3, 0x20, "Odradek")] public Ref<DSOdradekArmEntityResource> OdradekArmResource;
        [RTTI.Member(4, 0x28, "Odradek")] public Ref<DSOdradekBodyEntityResource> OdradekBodyResource;
        [RTTI.Member(7, 0x30, "Backpack")] public Ref<DSBackpackEntityResource> BackpackResource;
        [RTTI.Member(13, 0x38, "HandCuffs")] public Ref<EntityResource> HandCuffsResource;
        [RTTI.Member(14, 0x40, "HandCuffs")] public Ref<EntityResource> HandCuffsPBDResource;
        [RTTI.Member(15, 0x48, "HandCuffs")] public Ref<EntityResource> HandCuffsMTNResource;
        [RTTI.Member(66, 0x50, "Accessories")] public Ref<EntityResource> StrandResource;
        [RTTI.Member(31, 0x58, "BBPod")] public Ref<EntityResource> BBResource;
        [RTTI.Member(32, 0x60, "BBPod")] public Ref<EntityResource> BBPodResource;
        [RTTI.Member(67, 0x68, "Accessories")] public Ref<EntityResource> LudensKeyringResource;
        [RTTI.Member(68, 0x70, "Accessories")] public Ref<EntityResource> DogTagRollResource;
        [RTTI.Member(69, 0x78, "Accessories")] public Ref<EntityResource> GlassesResource;
        [RTTI.Member(70, 0x80, "Accessories")] public Ref<EntityResource> Glasses2Resource;
        [RTTI.Member(73, 0x88, "Accessories")] public Ref<EntityResource> CapResource;
        [RTTI.Member(74, 0x90, "Accessories")] public Ref<EntityResource> SantaCapResource;
        [RTTI.Member(75, 0x98, "Accessories")] public Ref<EntityResource> HeadCrabResource;
        [RTTI.Member(76, 0xA0, "Accessories")] public Ref<EntityResource> ValveCapResource;
        [RTTI.Member(71, 0xA8, "Accessories")] public Ref<EntityResource> GGlsResource;
        [RTTI.Member(72, 0xB0, "Accessories")] public Ref<EntityResource> JGlsResource;
        [RTTI.Member(77, 0xB8, "Accessories")] public Ref<EntityResource> HarmonicaResource;
        [RTTI.Member(33, 0xC0, "BBPod")] public Ref<EntityResource> BBPodCableResource;
        [RTTI.Member(82, 0xC8, "Shields")] public Ref<EntityResource> ShieldRAResource;
        [RTTI.Member(83, 0xD0, "Shields")] public Ref<EntityResource> ShieldLAResource;
        [RTTI.Member(84, 0xD8, "Shields")] public Ref<EntityResource> ShieldRWResource;
        [RTTI.Member(85, 0xE0, "Shields")] public Ref<EntityResource> ShieldLWResource;
        [RTTI.Member(86, 0xE8, "Shields")] public Ref<EntityResource> ShieldLv2RAResource;
        [RTTI.Member(87, 0xF0, "Shields")] public Ref<EntityResource> ShieldLv2LAResource;
        [RTTI.Member(88, 0xF8, "Shields")] public Ref<EntityResource> ShieldLv2RWResource;
        [RTTI.Member(89, 0x100, "Shields")] public Ref<EntityResource> ShieldLv2LWResource;
        [RTTI.Member(11, 0x108, "Boots")] public Ref<EntityResource> BootsResource;
        [RTTI.Member(98, 0x110, "Others")] public Ref<EntityResource> FakeHoloResource;
        [RTTI.Member(99, 0x118, "Others")] public Ref<EntityResource> HeatPartsResource;
        [RTTI.Member(78, 0x120, "Accessories")] public Ref<EntityResource> PowerGloveLResource;
        [RTTI.Member(79, 0x128, "Accessories")] public Ref<EntityResource> PowerGloveRResource;
        [RTTI.Member(16, 0x130, "HandCuffs")] public Vec3 DisplayColorRed;
        [RTTI.Member(17, 0x140, "HandCuffs")] public Vec3 DisplayColorYellow;
        [RTTI.Member(18, 0x150, "HandCuffs")] public Vec3 DisplayColorBlue;
        [RTTI.Member(19, 0x160, "HandCuffs")] public float DisplayBlinkCycleTime;
        [RTTI.Member(20, 0x164, "HandCuffs")] public float DisplayIntensity;
        [RTTI.Member(21, 0x170, "HandCuffs")] public Vec3 IntensityRYB;
        [RTTI.Member(8, 0x180, "Backpack")] public Vec3 ChiralCylinderDisplayColor;
        [RTTI.Member(9, 0x190, "Backpack")] public float ChiralCylinderDisplayIntensity;
        [RTTI.Member(42, 0x194, "BBPod")] public float BBPodDisplayBlinkCycle;
        [RTTI.Member(53, 0x198, "BBPod")] public float BBPodAutointoxicationDisplayIntencityValue;
        [RTTI.Member(54, 0x19C, "BBPod")] public float BBPodAutointoxicationNotDisplayIntencityValue;
        [RTTI.Member(55, 0x1A0, "BBPod")] public float BBControllerGoodChangeEfficient;
        [RTTI.Member(25, 0x1B0, "BatteryEmission")] public Vec3 BatteryEmissionColorRed;
        [RTTI.Member(26, 0x1C0, "BatteryEmission")] public Vec3 BatteryEmissionColorYellow;
        [RTTI.Member(27, 0x1D0, "BatteryEmission")] public Vec3 BatteryEmissionColorBlue;
        [RTTI.Member(28, 0x1E0, "BatteryEmission")] public Vec3 BatteryEmissionColorGreen;
        [RTTI.Member(29, 0x1F0, "BatteryEmission")] public Vec3 BatteryEmissionIntensityRYB;
        [RTTI.Member(24, 0x200, "BatteryEmission")] public float BatteryEmissionIntensityMultiplierWhenActive;
        [RTTI.Member(34, 0x210, "BBPod")] public Vec3 BBPodInsideColorNormal;
        [RTTI.Member(35, 0x220, "BBPod")] public float BBPodInsideIntensityNormal;
        [RTTI.Member(36, 0x230, "BBPod")] public Vec3 BBPodInsideColorCaution;
        [RTTI.Member(37, 0x240, "BBPod")] public float BBPodInsideIntensityCaution;
        [RTTI.Member(38, 0x250, "BBPod")] public Vec3 BBPodInsideColorDanger;
        [RTTI.Member(39, 0x260, "BBPod")] public float BBPodInsideIntensityDanger;
        [RTTI.Member(40, 0x264, "BBPod")] public float BBPodFadeRangeDefaultValue;
        [RTTI.Member(41, 0x268, "BBPod")] public float BBPodFadeRangeLookingValue;
        [RTTI.Member(43, 0x26C, "BBPod")] public float BBPodStressRecoverMoveOnSpeed;
        [RTTI.Member(44, 0x270, "BBPod")] public float BBPodStressRecoverBackSpeed;
        [RTTI.Member(45, 0x274, "BBPod")] public float BBPodStressIncreaseMoveOnSpeed;
        [RTTI.Member(46, 0x278, "BBPod")] public float BBPodStressIncreaseBackSpeed;
        [RTTI.Member(47, 0x27C, "BBPod")] public float BBPodBTMaxStressMoveOnSpeed;
        [RTTI.Member(48, 0x280, "BBPod")] public float BBPodBTMaxStressBackSpeed;
        [RTTI.Member(49, 0x284, "BBPod")] public float BBPodChangeColorStateBackSpeed;
        [RTTI.Member(50, 0x288, "BBPod")] public float BBPodBackSpeedEfficientStressIncrease;
        [RTTI.Member(51, 0x28C, "BBPod")] public float BBPodBackSpeedEfficientStressRecover;
        [RTTI.Member(52, 0x290, "BBPod")] public float BBPodCoverAlphaSubjectiveDelayTime;
        [RTTI.Member(5, 0x298, "Odradek")] public Ref<ArtPartsVariationResource> OdradekDamageApv;
        [RTTI.Member(80, 0x2A0, "Accessories")] public Ref<ArtPartsVariationResource> WaterBottleLv2Apv;
        [RTTI.Member(22, 0x2A8, "HandCuffs")] public Ref<ArtPartsVariationResource> HandCuffsVer2Apv;
        [RTTI.Member(57, 0x2B0, "Marking")] public float WatchTowerMarkingDistance;
        [RTTI.Member(58, 0x2B4, "Marking")] public float WatchTowerMarkingScreenRange;
        [RTTI.Member(91, 0x2B8, "Battery")] public float BatteryRecoverSpeed;
        [RTTI.Member(92, 0x2BC, "Battery")] public float BatteryRecoverSpeedInOnsen1;
        [RTTI.Member(93, 0x2C0, "Battery")] public float BatteryRecoverSpeedInOnsen2;
        [RTTI.Member(94, 0x2C4, "Battery")] public float BatteryRecoverSpeedInOnsen3;
        [RTTI.Member(60, 0x2C8, "Animations")] public Array<Ref<SkeletonAnimationResource>> Animations;
        [RTTI.Member(62, 0x2D8, "Curve")] public Ref<CurveResource> CurveHoodEmissionIntensityWhenOnOff;
        [RTTI.Member(63, 0x2E0, "Curve")] public Ref<CurveResource> CurveBatteryBoost;
        [RTTI.Member(64, 0x2E8, "Curve")] public Ref<CurveResource> CurveShieldActivate;
        [RTTI.Member(100, 0x2F0, "Others")] public Ref<DSHUDBlinkEffectResource> BlinkEffectResource;
        [RTTI.Member(96, 0x2F8, "Sounds")] public Array<Ref<SoundResource>> Sounds;
        [RTTI.Member(101, 0x308, "Others")] public Array<Ref<MaterialTypeResource>> FakeHoloNgMaterials;
    }

    [RTTI.Serializable(0xBEA6BCF8F01C6678, GameType.DS)]
    public class DSPlayerInventorySequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public uint32 InventoryHash;
    }

    [RTTI.Serializable(0xA374286D1888919A, GameType.DS)]
    public class DSPlayerInventorySequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x88166D99A4D51300, GameType.DS)]
    public class DSPlayerLifeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE3CDFF8560FE2156, GameType.DS)]
    public class DSPlayerLifeComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xEA5AC601B09A867, GameType.DS)]
    public class DSPlayerLookIKEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4F689B7EBD365D14, GameType.DS)]
    public class DSPlayerLookIKEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float FadeInTime;
        [RTTI.Member(9, 0x34, "Logic")] public float FadeOutTime;
    }

    [RTTI.Serializable(0xE99008AC6677151B, GameType.DS)]
    public class DSPlayerModelControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8A86D6369A845211, GameType.DS)]
    public class DSPlayerModelControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSPlayerMesh MeshName;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<CurveResource> VisibilityCurve;
        [RTTI.Member(10, 0x40, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0x733B20166589B0E5, GameType.DS)]
    public class DSPlayerMotionEntity : Entity
    {
    }

    [RTTI.Serializable(0xA9BF6FF2B71CCC92, GameType.DS)]
    public class DSPlayerMotionEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x604A61B1AF014B4, GameType.DS)]
    public class DSPlayerMotionEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0xA327FD068B4964C7, GameType.DS)]
    public class DSPlayerMover : HumanoidMover
    {
    }

    [RTTI.Serializable(0xDCC8B3C372E14110, GameType.DS)]
    public class DSPlayerMoverResource : HumanoidMoverResource
    {
    }

    [RTTI.Serializable(0x8FF246327CF731B7, GameType.DS)]
    public class DSPlayerNodeExporter : RTTIObject
    {
    }

    [RTTI.Serializable(0xAB9FF208503545B2, GameType.DS)]
    public class DSPlayerNodeExporterSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA96DDC3A33BFB90B, GameType.DS)]
    public class DSPlayerOdradekConfig
    {
        [RTTI.Member(0, 0x0)] public float DistanceOfNotifingHandprint;
        [RTTI.Member(1, 0x4)] public float DistanceOfChilling;
        [RTTI.Member(2, 0x8)] public float DistanceOfBattilingWithJerryFish;
        [RTTI.Member(3, 0xC)] public float DistanceOfFinishingChilling;
        [RTTI.Member(4, 0x10)] public float DistanceOfFlashBack;
        [RTTI.Member(5, 0x14)] public float BaggageSensorDetectRange;
        [RTTI.Member(6, 0x18)] public float BaggageSensorSearchRange;
        [RTTI.Member(7, 0x1C)] public float BaggageSensorSearchSpreadSpeed;
        [RTTI.Member(8, 0x20)] public float BaggageSensorDisplayMarkTime;
        [RTTI.Member(9, 0x24)] public float BaggageSensorDisplayOutlineTime;
        [RTTI.Member(10, 0x28)] public float BaggageSensorDistanceFromActualToMarkerForRemovingMarker;
        [RTTI.Member(11, 0x2C)] public float BaggageSensorDistanceOfShowDetail;
        [RTTI.Member(12, 0x30)] public float BaggageSensorTimeOfShowDetail;
        [RTTI.Member(13, 0x34)] public float OdradekFluctuationRangeOfFirstReactionDistanceByStress;
        [RTTI.Member(14, 0x40)] public Vec3 OdradekSubjectiveModeOffset;
        [RTTI.Member(15, 0x50)] public Array<OdradekReactionConfig> OdradekReactionConfig;
        [RTTI.Member(16, 0x60)] public Array<OdradekReactionConfig> OdradekReactionConfigCrouch;
        [RTTI.Member(17, 0x70)] public Array<OdradekReactionConfig> OdradekReactionConfigForHumanEnemy;
    }

    [RTTI.Serializable(0x34B88E01934BB5E9, GameType.DS)]
    public class DSPlayerPadCheckBoxes : Resource
    {
        [RTTI.Member(2, 0x20)] public bool Stance;
        [RTTI.Member(3, 0x21)] public bool Jump;
        [RTTI.Member(4, 0x22)] public bool Action;
        [RTTI.Member(5, 0x23)] public bool Pickup;
        [RTTI.Member(6, 0x24)] public bool UseSensor;
        [RTTI.Member(7, 0x25)] public bool UseEquip;
        [RTTI.Member(8, 0x26)] public bool Fire;
        [RTTI.Member(9, 0x27)] public bool Hold;
        [RTTI.Member(10, 0x28)] public bool Options;
        [RTTI.Member(11, 0x29)] public bool Touch;
        [RTTI.Member(12, 0x2A)] public bool Zoom;
        [RTTI.Member(13, 0x2B)] public bool Dash;
        [RTTI.Member(14, 0x2C)] public bool Up;
        [RTTI.Member(15, 0x2D)] public bool Down;
        [RTTI.Member(16, 0x2E)] public bool Right;
        [RTTI.Member(17, 0x2F)] public bool Left;
        [RTTI.Member(18, 0x30)] public bool RightStick;
        [RTTI.Member(19, 0x31)] public bool LeftStick;
        [RTTI.Member(20, 0x32)] public bool RightTrigger;
        [RTTI.Member(21, 0x33)] public bool LeftTrigger;
        [RTTI.Member(22, 0x34)] public bool CanMoveCamera;
    }

    [RTTI.Serializable(0x4FC3FC69592A5D0C, GameType.DS)]
    public class DSPlayerPadCheckBoxesSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x20426743449ECA2C, GameType.DS)]
    public class DSPlayerPadOperatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x75CC83C930FB96D9, GameType.DS)]
    public class DSPlayerPadOperatorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float OverrapCacheRange;
    }

    [RTTI.Serializable(0xC82DFF3A45CD1435, GameType.DS)]
    public class DSPlayerPaintEffectAbluteFaceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xFAEC268CE4BB1ACF, GameType.DS)]
    public class DSPlayerPaintEffectAbluteFaceEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public float RemappingValue;
        [RTTI.Member(8, 0x34)] public float PaintEfficient;
        [RTTI.Member(9, 0x38)] public float Radius;
    }

    [RTTI.Serializable(0xD6491E29E212884B, GameType.DS)]
    public class DSPlayerPaintEffectClearEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4EB721F3DEEFDFDA, GameType.DS)]
    public class DSPlayerPaintEffectClearEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool IsRecoveryBareFootDamageWhenClear;
    }

    [RTTI.Serializable(0xB29058E54D9B3F0F, GameType.DS)]
    public class DSPlayerPaintEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFE878D7A60FDF1E7, GameType.DS)]
    public class DSPlayerPaintEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float BTBloodRemoveValue;
    }

    [RTTI.Serializable(0x607E7336AB4ECE7D, GameType.DS)]
    public class DSPlayerPaintEffectLocatorAndRadiusControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB080CE0CD049D1B6, GameType.DS)]
    public class DSPlayerPaintEffectLocatorAndRadiusControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> RadiusCurveResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<CurveResource> RemappingCurveResource;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(11, 0x48, "Logic")] public float ReduceValueFloat;
        [RTTI.Member(12, 0x4C, "Logic")] public float UpdateTime;
    }

    [RTTI.Serializable(0x6AA46F512F897305, GameType.DS)]
    public class DSPlayerPaintEffectRemoveNailEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD69FE95B981074D, GameType.DS)]
    public class DSPlayerPaintEffectRemoveNailEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool IsLeft;
    }

    [RTTI.Serializable(0xFDDA9EA5387386D1, GameType.DS)]
    public class DSPlayerPaintEffectSetEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF99AAA9A41FC6A3C, GameType.DS)]
    public class DSPlayerPaintEffectSetEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public uint32 PaintValueR_Layer0;
        [RTTI.Member(9, 0x34, "Logic")] public uint32 PaintValueG_Layer0;
        [RTTI.Member(10, 0x38, "Logic")] public uint32 PaintValueB_Layer0;
        [RTTI.Member(11, 0x3C, "Logic")] public uint32 PaintValueA_Layer0;
        [RTTI.Member(12, 0x40, "Logic")] public uint32 PaintValueR_Layer1;
        [RTTI.Member(13, 0x44, "Logic")] public uint32 PaintValueG_Layer1;
        [RTTI.Member(14, 0x48, "Logic")] public uint32 PaintValueB_Layer1;
        [RTTI.Member(15, 0x4C, "Logic")] public uint32 PaintValueA_Layer1;
        [RTTI.Member(16, 0x50, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(17, 0x60, "Logic")] public Vec4 PaintValueLayer0;
        [RTTI.Member(18, 0x70, "Logic")] public Vec4 PaintValueLayer1;
        [RTTI.Member(19, 0x80, "Logic")] public float Radius;
        [RTTI.Member(20, 0x84, "Logic")] public bool IsAll;
        [RTTI.Member(21, 0x85, "Logic")] public bool IsImmediaterly;
        [RTTI.Member(22, 0x86, "Logic")] public bool IsForceBackPackPaintAllWhenInvisibleAndImme;
    }

    [RTTI.Serializable(0x7CA53C6B78DB8773, GameType.DS)]
    public class DSPlayerPaintEffectSnowRemoveEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x444162A3EE7E2D3F, GameType.DS)]
    public class DSPlayerPaintEffectSnowRemoveEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float Power;
        [RTTI.Member(9, 0x34, "Logic")] public bool IsAll;
    }

    [RTTI.Serializable(0xE2294FA8D035A280, GameType.DS)]
    public class DSPlayerParamComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x73EE8CADBB80EBAA, GameType.DS)]
    public class DSPlayerParamComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public PlayerConfigData Parameters;
        [RTTI.Member(5, 0x2FD0)] public DSPlayerOdradekConfig OdradekConfig;
        [RTTI.Member(3, 0x3050)] public Array<DSPlayerShakeInfo> CameraShake;
        [RTTI.Member(4, 0x3060)] public Array<DSPlayerRumbleInfo> Rumble;
        [RTTI.Member(6, 0x3070)] public float BBLookingRadianAngleMin;
        [RTTI.Member(7, 0x3074)] public float BBLookingRadianAngleMax;
        [RTTI.Member(8, 0x3078)] public float SubjectiveBBCameraDownRadianAngle;
        [RTTI.Member(9, 0x307C)] public float BBSubjectiveDandlingRadianAngleMin;
        [RTTI.Member(10, 0x3080)] public float BBSubjectiveDandlingRadianAngleMax;
        [RTTI.Member(11, 0x3084)] public float BBSubjectiveDandlingGoToTargetRadian;
        [RTTI.Member(12, 0x3088)] public float BBNotStandmBBSubjectiveDandlingRadianAngleMax;
        [RTTI.Member(13, 0x308C)] public float BBTPSDandlingAGoToRotXRadian;
        [RTTI.Member(14, 0x3090)] public float BBTPSDandlingAGoToRotYRadian;
        [RTTI.Member(15, 0x3094)] public float BBTPSDandlingBGoToRotXRadian;
        [RTTI.Member(16, 0x3098)] public float BBTPSDandlingBGoToRotYRadian;
        [RTTI.Member(17, 0x309C)] public float BBTPSDandlingBadRotXRadian;
        [RTTI.Member(18, 0x30A0)] public float BBSubjectiveDandlingGoToStartTime;
        [RTTI.Member(19, 0x30A4)] public float BBSubjectiveDandlingBackToStartTime;
        [RTTI.Member(20, 0x30A8)] public float BBSubjectiveDandlingGoToInterpTime;
        [RTTI.Member(21, 0x30AC)] public float BBSubjectiveDandlingBackToInterpTime;
        [RTTI.Member(22, 0x30B0)] public float BBTPSDandlingCameraInterpTime;
        [RTTI.Member(23, 0x30B4)] public float BBTPSDandlingCameraCheckLength;
    }

    [RTTI.Serializable(0xC953709B3011B9E1, GameType.DS)]
    public class DSPlayerProfile
    {
        [RTTI.Member(0, 0x70, true)] public Array<uint8> Values;
        [RTTI.Member(1, 0x90, true)] public Array<float> FloatValues;
        [RTTI.Member(5, 0xB0, true)] public uint32 SoundDeviceHash;
        [RTTI.Member(6, 0xB4, true)] public uint32 SoundDeviceBBHash;
        [RTTI.Member(2, 0x128, true)] public Array<DSFunctionKeyBind> ActionBindSet;
        [RTTI.Member(3, 0x180, true)] public Array<DSFunctionKeyBind> VehiclBindSet;
        [RTTI.Member(4, 0x1D8, true)] public Array<DSFunctionKeyBind> HudBindSet;
    }

    [RTTI.Serializable(0xD869BCE2AAA4B3E4, GameType.DS)]
    public class DSPlayerRumbleInfo
    {
        [RTTI.Member(0, 0x0)] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(1, 0x8)] public EDSPlayerRumbleTypeExported RumbleType;
    }

    [RTTI.Serializable(0x98A6F4304AEABF78, GameType.DS)]
    public class DSPlayerScriptParameter : Resource
    {
        [RTTI.Member(2, 0x20)] public float BBStressDangerousRate;
        [RTTI.Member(3, 0x28)] public Array<float> ShoesLifeToNotify;
        [RTTI.Member(4, 0x38)] public Array<float> StaminaToNotify;
        [RTTI.Member(5, 0x48)] public Array<float> BloodToNotify;
        [RTTI.Member(6, 0x58)] public Array<float> LungToNotify;
        [RTTI.Member(7, 0x68)] public Array<float> ConsciousnessToNotify;
        [RTTI.Member(8, 0x78)] public Array<float> BatteryRecoverRateToNotify;
        [RTTI.Member(9, 0x88)] public float DistanceToNotifyMissionBaggageIsFar;
    }

    [RTTI.Serializable(0xDB061C932BA5209D, GameType.DS)]
    public class DSPlayerSentenceResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<SentenceResource> SentenceResource;
        [RTTI.Member(4, 0x28, "General")] public uint64 NoSpeakFlag;
        [RTTI.Member(5, 0x30, "General")] public int32 EchoSentenceIndex;
        [RTTI.Member(6, 0x34, "General")] public bool IsNeedWaterVoice;
        [RTTI.Member(7, 0x35, "General")] public bool IsTiredVoice;
        [RTTI.Member(8, 0x36, "General")] public bool IsLongSentence;
    }

    [RTTI.Serializable(0xA928FBC13675A0DD, GameType.DS)]
    public class DSPlayerShakeInfo
    {
        [RTTI.Member(0, 0x0)] public Ref<ShakeResource> ShakeResource;
        [RTTI.Member(1, 0x8)] public EDSPlayerCameraShakeTypeExported ShakeType;
    }

    [RTTI.Serializable(0xBFD2C8CE039FC3C2, GameType.DS)]
    public class DSPlayerState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x727467DF1DA69D0A, GameType.DS)]
    public class DSPlayerStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(42, 0x48, "Animation", true)] public String AnimTagIdleName;
        [RTTI.Member(24, 0x50, "Private")] public AnimationTagID AnimTagIdle;
        [RTTI.Member(43, 0x58, "Animation", true)] public String AnimTagStartName;
        [RTTI.Member(25, 0x60, "Private")] public AnimationTagID AnimTagStart;
        [RTTI.Member(44, 0x68, "Animation", true)] public String AnimTagStartDirectionName;
        [RTTI.Member(26, 0x70, "Private")] public AnimationTagID AnimTagStartDirection;
        [RTTI.Member(45, 0x78, "Animation", true)] public String AnimTagCycleName;
        [RTTI.Member(27, 0x80, "Private")] public AnimationTagID AnimTagCycle;
        [RTTI.Member(46, 0x88, "Animation", true)] public String AnimTagSprintName;
        [RTTI.Member(28, 0x90, "Private")] public AnimationTagID AnimTagSprint;
        [RTTI.Member(47, 0x98, "Animation", true)] public String AnimTagStopName;
        [RTTI.Member(29, 0xA0, "Private")] public AnimationTagID AnimTagStop;
        [RTTI.Member(48, 0xA8, "Animation", true)] public String AnimTagCrouchName;
        [RTTI.Member(30, 0xB0, "Private")] public AnimationTagID AnimTagCrouch;
        [RTTI.Member(49, 0xB8, "Animation", true)] public String AnimTagCombatName;
        [RTTI.Member(31, 0xC0, "Private")] public AnimationTagID AnimTagCombat;
        [RTTI.Member(22, 0xC8, "Aim", true)] public String Aim_AnimTagIsAimed;
        [RTTI.Member(32, 0xD0, "Private")] public AnimationTagID Private_AnimTagIsAimed;
        [RTTI.Member(50, 0xD8, "Animation", true)] public String AnimTagTurningName;
        [RTTI.Member(33, 0xE0, "Private")] public AnimationTagID AnimTagTurning;
        [RTTI.Member(51, 0xE8, "Animation", true)] public String AnimTagTurn180Name;
        [RTTI.Member(34, 0xF0, "Private")] public AnimationTagID AnimTagTurn180;
        [RTTI.Member(52, 0xF8, "Animation", true)] public String AnimTagJumpName;
        [RTTI.Member(35, 0x100, "Private")] public AnimationTagID AnimTagJump;
        [RTTI.Member(53, 0x108, "Animation", true)] public String AnimTagDiveRollName;
        [RTTI.Member(36, 0x110, "Private")] public AnimationTagID AnimTagDiveRoll;
        [RTTI.Member(54, 0x118, "Animation", true)] public String AnimTagSlidingName;
        [RTTI.Member(37, 0x120, "Private")] public AnimationTagID AnimTagSliding;
        [RTTI.Member(38, 0x130, "Private")] public AnimationTagID AnimTagReload;
        [RTTI.Member(55, 0x138, "Animation", true)] public String DefaultStandIdleAnimationStateName;
        [RTTI.Member(39, 0x140, "Private")] public AnimationNodeID DefaultStandIdleAnimationState;
        [RTTI.Member(56, 0x148, "Animation", true)] public String DefaultCrouchIdleAnimationStateName;
        [RTTI.Member(40, 0x150, "Private")] public AnimationNodeID DefaultCrouchIdleAnimationState;
        [RTTI.Member(15, 0x154, "Logic")] public float StartSmoothTime;
        [RTTI.Member(16, 0x158, "Logic")] public float StopSmoothTime;
        [RTTI.Member(17, 0x15C, "Logic")] public float StartToMoveSmoothTime;
        [RTTI.Member(18, 0x160, "Logic")] public float TurnspeedWhileStarting;
        [RTTI.Member(19, 0x164, "Logic")] public float MaxCrouchWaterHeight;
        [RTTI.Member(58, 0x168, "Unlocks")] public Ref<PerkLevel> ExtendedDiveRollPerk;
        [RTTI.Member(59, 0x170, "Unlocks")] public float ExtendedDiveRollDisplacement;
        [RTTI.Member(60, 0x178, "Unlocks")] public String DiveRollWarpEnabledAnimName;
        [RTTI.Member(61, 0x180, "Unlocks")] public String DiveRollWarpPosAnimName;
        [RTTI.Member(20, 0x188, "Logic")] public Ref<SkinnedModelResource> NewModelResource;
        [RTTI.Member(63, 0x190, "DebugLoad")] public Ref<DSHoveringCartEntityResource> DSHoveringCartEntityResource;
    }

    [RTTI.Serializable(0x5DDAD5FD264FB8CA, GameType.DS)]
    public class DSPlayerStreamingControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA1D46D4820863F37, GameType.DS)]
    public class DSPlayerStreamingControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<SkinnedModelResource> DefaultBodyModelResource;
        [RTTI.Member(3, 0x28)] public Ref<SkinnedModelResource> DefaultShoesModelResource;
        [RTTI.Member(4, 0x30)] public Array<Ref<ArtPartsVariationResource>> DefaultArtPartsVariations;
        [RTTI.Member(5, 0x40)] public Ref<ArtPartsVariationResource> DefaultShoesArtPartsVariation;
        [RTTI.Member(6, 0x48)] public Array<StreamingRef<DSPlayerBodyVariant>> Variants;
    }

    [RTTI.Serializable(0x124D3A29CEBC3C16, GameType.DS)]
    public class DSPlayerSubspaceConfig : Resource
    {
        [RTTI.Member(2, 0x28)] public Ref<EntityResource> SubspacePlayerResource;
        [RTTI.Member(3, 0x30)] public Ref<EntityResource> SubspaceShelfResource;
        [RTTI.Member(4, 0x38)] public Ref<EntityResource> _0;
        [RTTI.Member(5, 0x40)] public Ref<Fact> Fact_IsActive;
        [RTTI.Member(6, 0x48)] public Array<DSSubspaceShelfBaggageDef> ShelfBaggageDefs;
        [RTTI.Member(7, 0x58)] public Ref<DSLocator> ShelfCenterLocator;
        [RTTI.Member(8, 0x60)] public Ref<Fact> FactNoFadeInOnFinish;
    }

    [RTTI.Serializable(0x9464D3C6BD48FDED, GameType.DS)]
    public class DSPlayerSystem : RTTIObject
    {
    }

    [RTTI.Serializable(0x8260E847EBFC350, GameType.DS)]
    public class DSPlayerSystemConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSPlayerFactContext> FactContext;
        [RTTI.Member(3, 0x28)] public Array<Ref<EffectComponentResource>> CommonEffectComponents;
        [RTTI.Member(4, 0x38)] public Array<Ref<ParticleSystemResource>> CommonParticles;
        [RTTI.Member(5, 0x48)] public Array<Ref<TrophyResource>> TrophyResources;
        [RTTI.Member(6, 0x58)] public Array<String> OnsenIdentifiers;
        [RTTI.Member(7, 0x68)] public Array<Ref<LocalizedTextResource>> OnsenTexts;
        [RTTI.Member(8, 0x78)] public Array<WorldPosition> OnsenPositions;
    }

    [RTTI.Serializable(0x76288129D6344FF3, GameType.DS)]
    public class DSPlayerSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x737D01CD04F1CBE4, GameType.DS)]
    public class DSPlayerTakeoverShaderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA6C12678A3ED4B6F, GameType.DS)]
    public class DSPlayerTakeoverShaderComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x892890E480F64157, GameType.DS)]
    public class DSPlayerTracePoint : RTTIObject
    {
    }

    [RTTI.Serializable(0x89AF60009D694F99, GameType.DS)]
    public class DSPlayerTracePointConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public float DistanceToRealize;
        [RTTI.Member(3, 0x24)] public float DistanceToUnrealize;
        [RTTI.Member(4, 0x28)] public float DistanceOfHoloShaderMin;
        [RTTI.Member(5, 0x2C)] public float DistanceOfHoloShaderMax;
        [RTTI.Member(6, 0x30)] public float RestMarkMergeRadius;
        [RTTI.Member(7, 0x34)] public uint32 RestMarkRestingCountForLevel2;
        [RTTI.Member(8, 0x38)] public uint32 RestMarkRestingCountForLevel3;
        [RTTI.Member(9, 0x3C)] public uint32 RestMarkRestingCountForLevel4;
        [RTTI.Member(10, 0x40)] public uint32 RestMarkRestingCountForLevel5;
        [RTTI.Member(11, 0x48)] public Array<Ref<ArtPartsDataResource>> ArtPartsDataResources;
        [RTTI.Member(12, 0x58)] public Array<Ref<EntityResource>> EntityResources;
        [RTTI.Member(13, 0x68)] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(14, 0x78)] public Array<Ref<SoundResource>> Sounds;
        [RTTI.Member(15, 0x88)] public Array<Ref<LensFlareResource>> SensorMarkLensFlareResources;
    }

    [RTTI.Serializable(0xF0D20FBB7E086C5F, GameType.DS)]
    public class DSPlayerUIComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7E0D0807877C966E, GameType.DS)]
    public class DSPlayerUIComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x10D34E2C0918C794, GameType.DS)]
    public class DSPoisonGasShell : DSShell
    {
    }

    [RTTI.Serializable(0xE5158E706D8D6914, GameType.DS)]
    public class DSPoisonGasShellResource : DSShellResource
    {
        [RTTI.Member(78, 0x1E0)] public Ref<ParticleSystemResource> SmokeParticle;
    }

    [RTTI.Serializable(0xFCA431DC98DA659A, GameType.DS)]
    public class DSPolyWallEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA3D7A79D19DA4669, GameType.DS)]
    public class DSPolyWallEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<RenderEffectResource> EffectRenderEffectsResource;
        [RTTI.Member(3, 0x28)] public Array<Vec3> WallPositions;
        [RTTI.Member(4, 0x38)] public Array<float> EmitFactors;
        [RTTI.Member(5, 0x48)] public float WallHeight;
        [RTTI.Member(6, 0x4C)] public float URepeatBaseDistance;
        [RTTI.Member(7, 0x50)] public float InflatingDistance;
        [RTTI.Member(8, 0x54)] public float InflatingMinDistance;
        [RTTI.Member(9, 0x58)] public float DivideBaseDistance;
        [RTTI.Member(10, 0x5C)] public float BaseUV;
        [RTTI.Member(11, 0x60)] public float Intensity;
        [RTTI.Member(12, 0x64)] public FRange FadeRange;
        [RTTI.Member(13, 0x6C)] public bool DoesNotNeedCollisions;
        [RTTI.Member(14, 0x6D)] public bool IsInflatingDirReversed;
        [RTTI.Member(15, 0x6E)] public bool ForwardIgnoreLocalIndirectLighting;
        [RTTI.Member(16, 0x70)] public Array<Ref<SoundResource>> SoundResources;
    }

    [RTTI.Serializable(0x891DC91DA29AB469, GameType.DS)]
    public class DSPostAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x590F9694EA813AB4, GameType.DS)]
    public class DSPostAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float RiseUpRange;
    }

    [RTTI.Serializable(0x5002F7FFBE83A842, GameType.DS)]
    public class DSPostAnimationModelTransformComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x377F6AF96D1E4746, GameType.DS)]
    public class DSPostAnimationModelTransformComponentResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x20, "Start")] public float StartScale;
        [RTTI.Member(8, 0x24, "End")] public float EndScale;
        [RTTI.Member(6, 0x30, "Start")] public Vec3 StartTrans;
        [RTTI.Member(9, 0x40, "End")] public Vec3 EndTrans;
        [RTTI.Member(3, 0x50, "DS")] public float Lifespan;
    }

    [RTTI.Serializable(0x83FF269F6AA7744A, GameType.DS)]
    public class DSPostConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0x6A30ADB378B6B156, GameType.DS)]
    public class DSPostConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "Post")] public float DistanceToRaise;
        [RTTI.Member(116, 0x498, "Post")] public Ref<EntityResource> OpenPostSequenceResource;
        [RTTI.Member(117, 0x4A0, "Post")] public Ref<EntityResource> CarryOnSequenceResource;
        [RTTI.Member(118, 0x4A8, "Post")] public Ref<EntityResource> CarryOffSequenceResource;
        [RTTI.Member(120, 0x4B0, "PrivateBox")] public int PrivateBoxCapacityLv1;
        [RTTI.Member(121, 0x4B4, "PrivateBox")] public int PrivateBoxCapacityLv2;
        [RTTI.Member(122, 0x4B8, "PrivateBox")] public int PrivateBoxCapacityLv3;
        [RTTI.Member(124, 0x4BC, "PublicBox")] public int PublicBoxCapacityLv1;
        [RTTI.Member(125, 0x4C0, "PublicBox")] public int PublicBoxCapacityLv2;
        [RTTI.Member(126, 0x4C4, "PublicBox")] public int PublicBoxCapacityLv3;
    }

    [RTTI.Serializable(0x2001821BA728C76E, GameType.DS)]
    public class DSPostureAdditionalSettingInterface : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x769D3DB4459A63D6, GameType.DS)]
    public class DSPostureFlagToController : DSPostureAdditionalSettingInterface
    {
        [RTTI.Member(3, 0x20, "Animation")] public uint32 Flag;
        [RTTI.Member(4, 0x28, "Animation")] public String ControllerName;
    }

    [RTTI.Serializable(0xAAE8EC4C976EF592, GameType.DS)]
    public class DSPostureParallelMoveSetting : DSPostureFlagToController
    {
        [RTTI.Member(6, 0x30, "Animation")] public bool IsBackMove;
    }

    [RTTI.Serializable(0x529DD785AE22B4BE, GameType.DS)]
    public class DSPostureSettings : DSPostureSettingsBase
    {
        [RTTI.Member(38, 0xC0, "Animation")] public float BaseSpeedMin;
        [RTTI.Member(39, 0xC4, "Animation")] public float BaseSpeedMax;
        [RTTI.Member(40, 0xC8, "Animation")] public Array<Ref<DSPostureSettingsVariation>> Variation;
    }

    [RTTI.Serializable(0x85C3CEC08D18AFF6, GameType.DS)]
    public class DSPostureSettingsBase : Resource
    {
        [RTTI.Member(4, 0x28, "Animation")] public String EntryName_;
        [RTTI.Member(5, 0x30, "Animation")] public AnimationNodeID EntryID;
        [RTTI.Member(3, 0x34, "Animation")] public uint32 Ability;
        [RTTI.Member(6, 0x38, "Animation")] public String StartEntryName_;
        [RTTI.Member(7, 0x40, "Animation")] public AnimationNodeID StartEntryID;
        [RTTI.Member(8, 0x48, "Animation")] public String StopEntryName_;
        [RTTI.Member(9, 0x50, "Animation")] public AnimationNodeID StopEntryID;
        [RTTI.Member(10, 0x58, "Animation")] public String QuickTurnLeftFootEntryName_;
        [RTTI.Member(11, 0x60, "Animation")] public AnimationNodeID QuickTurnLeftFootEntryID;
        [RTTI.Member(12, 0x68, "Animation")] public String QuickTurnRightFootEntryName_;
        [RTTI.Member(13, 0x70, "Animation")] public AnimationNodeID QuickTurnRightFootEntryID;
        [RTTI.Member(16, 0x74, "Ai")] public float ActualSpeedAverage;
        [RTTI.Member(17, 0x78, "Ai")] public bool UseActualSpeedAverage;
        [RTTI.Member(18, 0x7C, "Ai")] public float MaxTurnAngle;
        [RTTI.Member(19, 0x80, "Ai")] public float DistanceBeforeQuickTurn;
        [RTTI.Member(20, 0x84, "Ai")] public float DistanceAfterQuickTurn;
        [RTTI.Member(21, 0x88, "Ai")] public bool UseQuickTurnDistances;
        [RTTI.Member(22, 0x8C, "Ai")] public float TimeToReachMaxTurn;
        [RTTI.Member(23, 0x90, "Ai")] public bool UseTimeToReachMaxTurn;
        [RTTI.Member(24, 0x94, "Ai")] public float MovePathSmoothFactor;
        [RTTI.Member(25, 0x98, "Ai")] public bool UseMovePathSmoothFactor;
        [RTTI.Member(26, 0x9C, "Ai")] public float NonSmoothTurnThreshold;
        [RTTI.Member(28, 0xA0, "ManualParameters")] public float LegIkInterporationTime;
        [RTTI.Member(29, 0xA4, "ManualParameters")] public float CycleToStopDurationTime;
        [RTTI.Member(30, 0xAC, "ManualParameters")] public bool UseTrueDesiredDeltaTurnInCycle;
        [RTTI.Member(31, 0xAD, "ManualParameters")] public bool HasParallelMoveVersion;
        [RTTI.Member(33, 0xB0, "CorridorSmoothing")] public float TimeToReachDesiredTurn;
        [RTTI.Member(34, 0xB4, "CorridorSmoothing")] public bool OverrideTurningRadius;
        [RTTI.Member(35, 0xB8, "CorridorSmoothing")] public float OverrideTurningRadiusValue;
        [RTTI.Member(36, 0xBC, "CorridorSmoothing")] public float MaximumDeltaDeltaTurn;
    }

    [RTTI.Serializable(0x192CA7F8854BE8EC, GameType.DS)]
    public class DSPostureSettingsVariation : DSPostureSettingsBase
    {
        [RTTI.Member(38, 0xC0, "Animation")] public Array<Ref<DSPostureAdditionalSettingInterface>> PostureFlagControllerArray;
        [RTTI.Member(39, 0xD0, "Animation")] public Array<Ref<DSPostureAdditionalSettingInterface>> ExcludePostureFlagControllerArray;
    }

    [RTTI.Serializable(0x3751B21D9D12DDE1, GameType.DS)]
    public class DSPostureSlopeSetting : DSPostureAdditionalSettingInterface
    {
        [RTTI.Member(3, 0x20, "Animation")] public float SlopeAngle;
        [RTTI.Member(4, 0x24, "Animation")] public bool PositiveOnly;
        [RTTI.Member(5, 0x25, "Animation")] public bool NegativeOly;
    }

    [RTTI.Serializable(0xBF4C4C027A779AF5, GameType.DS)]
    public class DSPredictionLineComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x326F6630844EFEE3, GameType.DS)]
    public class DSPredictionLineComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20)] public Vec3 AdditionalVelocity;
        [RTTI.Member(4, 0x30)] public float VelocityMultiplier;
        [RTTI.Member(5, 0x38)] public Ref<DSThrowableResource> ThrowableResource;
        [RTTI.Member(2, 0x40)] public bool IsInitActive;
    }

    [RTTI.Serializable(0x8916260C1BE1F5E3, GameType.DS)]
    public class DSPrefabResource : PrefabResource
    {
    }

    [RTTI.Serializable(0x6FAEEB4B08A00ADE, GameType.DS)]
    public class DSPreppersBarriorEffectInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC8, "General")] public Ref<DSPreppersBarriorEffectResource> Resource;
        [RTTI.Member(8, 0x22B, "General")] public bool Enable;
    }

    [RTTI.Serializable(0x25AEBAFA92CC420A, GameType.DS)]
    public class DSPreppersBarriorEffectResource : Resource
    {
        [RTTI.Member(44, 0x20, "Links")] public Array<Ref<WorldNode>> ChildrenNodes;
        [RTTI.Member(45, 0x30, "Links")] public Ref<WorldNode> RootNode;
        [RTTI.Member(42, 0x38, "Links")] public Array<Ref<PrefabInstance>> Childrens;
        [RTTI.Member(43, 0x48, "Links")] public Ref<PrefabInstance> RootObject;
        [RTTI.Member(6, 0x50, "Representation")] public Ref<MaterialTypeResource> SpawnImpactMaterialType;
        [RTTI.Member(5, 0x58, "Representation")] public Ref<ShaderResource> Shader;
        [RTTI.Member(4, 0x60, "Representation")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(19, 0x68, "Color")] public Ref<CurveResource> AlphaCurve;
        [RTTI.Member(32, 0x70, "Base")] public Ref<CurveResource> SizeRateCurve;
        [RTTI.Member(12, 0x78, "Color")] public Ref<CurveResource> MiddleColorAlphaCurve;
        [RTTI.Member(8, 0x80, "Color")] public FRGBAColor HeadColor;
        [RTTI.Member(10, 0x90, "Color")] public FRGBAColor MiddleColor;
        [RTTI.Member(13, 0xA0, "Color")] public FRGBAColor GridHeadColor;
        [RTTI.Member(15, 0xB0, "Color")] public FRGBAColor GridOtherColor;
        [RTTI.Member(17, 0xC0, "Color")] public FRGBAColor EdgeColor;
        [RTTI.Member(9, 0xD0, "Color")] public float HeadColorScale;
        [RTTI.Member(11, 0xD4, "Color")] public float MiddleColorScale;
        [RTTI.Member(14, 0xD8, "Color")] public float GridHeadColorScale;
        [RTTI.Member(16, 0xDC, "Color")] public float GridOtherColorScale;
        [RTTI.Member(18, 0xE0, "Color")] public float EdgeColorScale;
        [RTTI.Member(24, 0xE4, "Base")] public float Size;
        [RTTI.Member(25, 0xE8, "Base")] public float TimeMax;
        [RTTI.Member(26, 0xEC, "Base")] public float TimeMaxInv;
        [RTTI.Member(27, 0xF0, "Base")] public float SpeedScale;
        [RTTI.Member(29, 0xF4, "Base")] public float AlphaAttenuationPosition;
        [RTTI.Member(34, 0xF8, "GridCommon")] public float GridLineUnit;
        [RTTI.Member(35, 0xFC, "GridCommon")] public float GridLineThreshould;
        [RTTI.Member(37, 0x100, "Gradation")] public float ColorGradationPower;
        [RTTI.Member(38, 0x104, "Gradation")] public float ColorGradationOffset;
        [RTTI.Member(20, 0x108, "Color")] public float CameraLengthAlpha;
        [RTTI.Member(21, 0x10C, "Color")] public float StraightLineAlphaStrength;
        [RTTI.Member(22, 0x110, "Color")] public float StraightLineAlphaLength;
        [RTTI.Member(40, 0x114, "GridSparate")] public uint8 GridSeparateIndex;
        [RTTI.Member(30, 0x115, "Base")] public bool EnableColorGradataion;
        [RTTI.Member(31, 0x116, "Base")] public bool EnableFixGridMove;
        [RTTI.Member(28, 0x117, "Base")] public bool IgnoreDepthTest;
    }

    [RTTI.Serializable(0x3D41A2B7067CC72F, GameType.DS)]
    public class DSPrivateRoomElevatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF62BF715BE957E9D, GameType.DS)]
    public class DSPrivateRoomElevatorComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xA4614050442C3974, GameType.DS)]
    public class DSPrivateRoomGraphResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<DSPrivateRoomGraphUnit> GraphUnits;
    }

    [RTTI.Serializable(0x74C3D7A2CBDF5EB4, GameType.DS)]
    public class DSPrivateRoomGraphUnit
    {
        [RTTI.Member(0, 0x8)] public Ref<DSStringHashResource> GraphNameHash;
        [RTTI.Member(1, 0x10)] public Ref<GraphProgramResource> GraphResource;
    }

    [RTTI.Serializable(0x1C343FEEB3233035, GameType.DS)]
    public class DSPrivateRoomItemComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x91AEBFBED4D7238F, GameType.DS)]
    public class DSPrivateRoomItemComponentResource : EntityComponentResource
    {
        [RTTI.Member(11, 0x20)] public Ref<BooleanFact> AttachFact;
        [RTTI.Member(12, 0x28)] public Ref<BooleanFact> DetachFact;
        [RTTI.Member(13, 0x30)] public Ref<BooleanFact> ShowFact;
        [RTTI.Member(14, 0x38)] public Ref<BooleanFact> HideFact;
        [RTTI.Member(15, 0x40)] public Ref<BooleanFact> BoostFact;
        [RTTI.Member(2, 0x48)] public float MinLODDistance;
        [RTTI.Member(3, 0x4C)] public int DesiredTextureMip;
        [RTTI.Member(4, 0x50)] public int ItemType;
        [RTTI.Member(5, 0x54)] public bool EnableBoostMesh;
        [RTTI.Member(6, 0x55)] public bool EnableShowFact;
        [RTTI.Member(7, 0x56)] public bool EnableHideFact;
        [RTTI.Member(8, 0x57)] public bool EnableUpdate;
        [RTTI.Member(9, 0x58)] public bool EnableParentCheck;
        [RTTI.Member(10, 0x59)] public bool EnableBoostFact;
    }

    [RTTI.Serializable(0xF93E0F56A8AFA04F, GameType.DS)]
    public class DSPrivateRoomLocatedIconInfo : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSPrivateRoomMode Mode;
        [RTTI.Member(3, 0x21)] public EDSPrivateRoomEventType EventType;
        [RTTI.Member(4, 0x28)] public Ref<DSLocator> Locator;
        [RTTI.Member(5, 0x30)] public Ref<Fact> IntegerFact;
        [RTTI.Member(6, 0x38)] public EDSPrivateRoomIconType IconType;
        [RTTI.Member(7, 0x40)] public String Identifier;
        [RTTI.Member(8, 0x48)] public int32 IdentifierInt;
    }

    [RTTI.Serializable(0x125D5B362B0E9E27, GameType.DS)]
    public class DSPrivateRoomObject : Resource
    {
        [RTTI.Member(2, 0x20)] public String AttachEntityName;
        [RTTI.Member(3, 0x28)] public String AttachHelperName;
        [RTTI.Member(4, 0x30)] public Ref<DSLocator> AttachLocator;
        [RTTI.Member(5, 0x38)] public String Identifier;
        [RTTI.Member(6, 0x40)] public Ref<EntityResource> PanelEntityResource;
        [RTTI.Member(7, 0x48)] public WorldTransform PanelOffsetTransform;
        [RTTI.Member(9, 0x88)] public String SubEntityNameForCheckingExistence;
        [RTTI.Member(10, 0x90)] public Ref<Fact> SubEntityDispFact;
        [RTTI.Member(11, 0x98)] public Ref<Fact> SubEntityUndispFact;
        [RTTI.Member(8, 0xA0)] public Array<Ref<DSPrivateRoomObjectParts>> Parts;
    }

    [RTTI.Serializable(0x561BA17C5153522A, GameType.DS)]
    public class DSPrivateRoomObjectParts : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSPrivateRoomObjectType ObjectType;
        [RTTI.Member(3, 0x21)] public EDSPrivateRoomObjectConditionType ConditionType;
        [RTTI.Member(4, 0x28)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(5, 0x30)] public EDSWeaponId WeaponId;
        [RTTI.Member(6, 0x31)] public EDSItemId ItemId;
        [RTTI.Member(7, 0x32)] public EDSSuitPartsId SuitPartsId;
        [RTTI.Member(8, 0x38)] public WorldTransform OffsetTransform;
        [RTTI.Member(9, 0x78)] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(10, 0x80)] public Ref<Fact> DispFact;
        [RTTI.Member(11, 0x88)] public Ref<Fact> UndispFact;
    }

    [RTTI.Serializable(0x94D65F8C2A87BFA5, GameType.DS)]
    public class DSPrivateRoomShelfComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9D9845CF0152AAA1, GameType.DS)]
    public class DSPrivateRoomShelfComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xC79D71B89E0D90E6, GameType.DS)]
    public class DSPrivateRoomTableObjectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE0A930F55D3062EE, GameType.DS)]
    public class DSPrivateRoomTableObjectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String Identifier;
        [RTTI.Member(3, 0x28)] public EDSPrivateRoomIconType ActionIconButtonType;
        [RTTI.Member(4, 0x2C)] public EDSUIActionLocalizedId ActionIconId;
        [RTTI.Member(5, 0x30)] public int32 BlackboardIntValue;
        [RTTI.Member(6, 0x38)] public WorldPosition TargetOffset;
        [RTTI.Member(7, 0x50)] public float Radius;
        [RTTI.Member(8, 0x58)] public String Helper;
        [RTTI.Member(9, 0x60)] public Ref<DSLocator> LocatorOnTable;
        [RTTI.Member(10, 0x68)] public Ref<DSLocator> LocatorOnFloor;
    }

    [RTTI.Serializable(0x4063923460093CF8, GameType.DS)]
    public class DSProjectileParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSProjectileId Id;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(5, 0x30, "Parameters")] public Ref<EntityResource> Resource;
        [RTTI.Member(6, 0x38, "Parameters")] public EDSAttackId AttackId;
        [RTTI.Member(7, 0x3A, "Parameters")] public EDSAttackId SubAttackId;
        [RTTI.Member(8, 0x40, "Parameters")] public Ref<SoundResource> FirstBounceSound;
        [RTTI.Member(9, 0x48, "Parameters")] public Ref<SoundResource> SecondBounceSound;
        [RTTI.Member(10, 0x50, "Parameters")] public Ref<SoundResource> BlastSound;
        [RTTI.Member(11, 0x58, "Parameters")] public Ref<SoundResource> BlastInWaterSound;
        [RTTI.Member(12, 0x60, "Parameters")] public Ref<SoundResource> BlastInTarrySound;
        [RTTI.Member(13, 0x68, "Parameters")] public Ref<SoundResource> LoopSound;
        [RTTI.Member(14, 0x70, "Parameters")] public Ref<RumbleResource> BlastRumble;
        [RTTI.Member(15, 0x78, "Parameters")] public bool IsShowGrenadeMarker;
    }

    [RTTI.Serializable(0x6A876F178CFE3AC8, GameType.DS)]
    public class DSPrototypeNoiseArea : Entity
    {
    }

    [RTTI.Serializable(0xC96DBC725CB4EF5, GameType.DS)]
    public class DSPrototypeNoiseAreaResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "NoiseArea")] public Ref<AIAuralStimulusResource> AuralStimulus;
    }

    [RTTI.Serializable(0x1816FCBCFA772C1C, GameType.DS)]
    public class DSPrototypeNoiseAreaResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5A3D6286E2B7DCE3, GameType.DS)]
    public class DSQpidAreaBlankResource : Resource
    {
        [RTTI.Member(4, 0x20)] public Array<Vec3> AreaPoints;
        [RTTI.Member(2, 0x30)] public EDSArea Area;
        [RTTI.Member(3, 0x34)] public int32 DummyID;
    }

    [RTTI.Serializable(0x6CCDE250F59C322E, GameType.DS)]
    public class DSQpidAreaContainerResource : Resource
    {
        [RTTI.Member(8, 0x20, "Effect")] public Ref<DSQpidAreaEffectResource> AreaEffectResource;
        [RTTI.Member(3, 0x28, "Data")] public Array<Ref<DSQpidAreaResource>> AreaList;
        [RTTI.Member(4, 0x38, "Data")] public Array<Ref<DSQpidAreaDummyResource>> DummyList;
        [RTTI.Member(5, 0x48, "Data")] public Array<Ref<DSQpidAreaBlankResource>> BlankList;
        [RTTI.Member(6, 0x58, "Data")] public Array<Ref<DSQpidAreaLastStrandingResource>> LastStrandingList;
        [RTTI.Member(14, 0x68, "Net")] public Ref<DSQpidSyncLimitResource> DefaultSyncLimit;
        [RTTI.Member(12, 0x70, "Sound")] public Ref<SoundResource> SensorLine;
        [RTTI.Member(9, 0x78, "Effect")] public Ref<ParticleSystemResource> QpidStrandCableParticle;
        [RTTI.Member(10, 0x80, "Effect")] public Ref<ParticleSystemResource> MultiQpidStrandCableParticle;
        [RTTI.Member(16, 0x88, "Facts")] public Ref<BooleanFact> NormalSceneFact;
        [RTTI.Member(17, 0x90, "Facts")] public Ref<BooleanFact> BridgesSceneFact;
        [RTTI.Member(18, 0x98, "Facts")] public Ref<BooleanFact> UCASceneFact;
        [RTTI.Member(19, 0xA0, "Facts")] public Ref<BooleanFact> NormalSceneUnloadFact;
        [RTTI.Member(20, 0xA8, "Facts")] public Ref<BooleanFact> BridgesSceneUnloadFact;
        [RTTI.Member(21, 0xB0, "Facts")] public Ref<BooleanFact> UCASceneUnloadFact;
        [RTTI.Member(22, 0xB8, "Facts")] public Ref<BooleanFact> ReleaseAddToLastStrandingBandWidthFact;
    }

    [RTTI.Serializable(0x18122B4F9DD7A6E6, GameType.DS)]
    public class DSQpidAreaDummyResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSQpidAreaResource> Reference;
        [RTTI.Member(5, 0x28)] public Array<Vec3> AreaPoints;
        [RTTI.Member(6, 0x38)] public Array<Ref<DSQpidAreaResource>> NeighboringQpidArea;
        [RTTI.Member(3, 0x48)] public EDSArea Area;
        [RTTI.Member(4, 0x4C)] public int32 DummyID;
    }

    [RTTI.Serializable(0x40BF3846258AB347, GameType.DS)]
    public class DSQpidAreaEffectInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC8, "General")] public Ref<DSQpidAreaEffectResource> Resource;
        [RTTI.Member(8, 0x8DB, "General")] public bool Enable;
    }

    [RTTI.Serializable(0xF213A062B629D8E8, GameType.DS)]
    public class DSQpidAreaEffectResource : Resource
    {
        [RTTI.Member(5, 0x20, "Representation", true)] public Ref<ShaderResource> MainLineShader;
        [RTTI.Member(4, 0x28, "Representation")] public Ref<RenderEffectResource> MainLineRenderEffectsResource;
        [RTTI.Member(7, 0x30, "Representation", true)] public Ref<ShaderResource> InOutLineLineShader;
        [RTTI.Member(6, 0x38, "Representation")] public Ref<RenderEffectResource> InOutLineRenderEffectsResource;
        [RTTI.Member(9, 0x40, "Representation", true)] public Ref<ShaderResource> TextMeshShader;
        [RTTI.Member(8, 0x48, "Representation")] public Ref<RenderEffectResource> TextMeshRenderEffectsResource;
        [RTTI.Member(43, 0x50, "Base")] public Ref<CurveResource> SizeRateCurve;
        [RTTI.Member(18, 0x58, "Color")] public Ref<CurveResource> AlphaAnimationCurve;
        [RTTI.Member(98, 0x60, "CollisionCheck")] public Array<Ref<MaterialTypeResource>> IgnoreMaterialResources;
        [RTTI.Member(99, 0x70, "CollisionCheck")] public Ref<DSMaterialConfigResource> SnowMaterialConfig;
        [RTTI.Member(10, 0x78, "Representation")] public Ref<Texture> NoiseTexture;
        [RTTI.Member(11, 0x80, "Representation")] public Ref<Texture> TextLineTexture;
        [RTTI.Member(86, 0x88, "SensorLuminanceAnimation")] public Ref<CurveResource> SensorLuminanceSpeedRateCurve;
        [RTTI.Member(13, 0x90, "Color")] public FRGBAColor BaseColor;
        [RTTI.Member(14, 0xA0, "Color")] public float BaseColorScale;
        [RTTI.Member(15, 0xA4, "Color")] public float BaseAlpha;
        [RTTI.Member(19, 0xB0, "Color")] public FRGBAColor InnerLineColor;
        [RTTI.Member(20, 0xC0, "Color")] public float InnerLineColorScale;
        [RTTI.Member(21, 0xC4, "Color")] public float InnerLineColorAlpha;
        [RTTI.Member(22, 0xD0, "Color")] public FRGBAColor OuterLineColor;
        [RTTI.Member(23, 0xE0, "Color")] public float OuterLineColorScale;
        [RTTI.Member(24, 0xE4, "Color")] public float OuterLineColorAlpha;
        [RTTI.Member(25, 0xF0, "Color")] public FRGBAColor MainSubLineColor;
        [RTTI.Member(26, 0x100, "Color")] public float MainSubLineColorScale;
        [RTTI.Member(27, 0x104, "Color")] public float MainSubLineColorAlpha;
        [RTTI.Member(28, 0x110, "Color")] public FRGBAColor TextLineColor;
        [RTTI.Member(29, 0x120, "Color")] public float TextLineColorScale;
        [RTTI.Member(30, 0x124, "Color")] public float TextLineColorAlpha;
        [RTTI.Member(34, 0x128, "Base")] public float Size;
        [RTTI.Member(35, 0x12C, "Base")] public float TimeMax;
        [RTTI.Member(36, 0x130, "Base")] public float TimeMaxInv;
        [RTTI.Member(37, 0x134, "Base")] public float FadeTime;
        [RTTI.Member(38, 0x138, "Base")] public float TotalSpeedScale;
        [RTTI.Member(73, 0x13C, "Base")] public float NoiseSpeedScale;
        [RTTI.Member(74, 0x140, "Base")] public float NoiseWaveScale;
        [RTTI.Member(75, 0x144, "Base")] public float PlayerTouchDistance;
        [RTTI.Member(16, 0x148, "Color")] public float AlphaAnimationSpeed;
        [RTTI.Member(17, 0x14C, "Color")] public float AlphaAnimationLineUnit;
        [RTTI.Member(39, 0x150, "Base")] public float HeightOffset;
        [RTTI.Member(78, 0x154, "GridCommon")] public float GridLineUnit;
        [RTTI.Member(79, 0x158, "GridCommon")] public float GridLineThreshould;
        [RTTI.Member(87, 0x15C, "SensorLuminanceAnimation")] public float SensorLuminanceSpeedScale;
        [RTTI.Member(88, 0x160, "SensorLuminanceAnimation")] public float SensorLuminanceStartDistance;
        [RTTI.Member(89, 0x164, "SensorLuminanceAnimation")] public float SensorLuminanceColorScale;
        [RTTI.Member(90, 0x168, "SensorLuminanceAnimation")] public float SensorLuminanceAlphaScale;
        [RTTI.Member(91, 0x16C, "SensorLuminanceAnimation")] public float SensorLuminanceSmoothThreshold;
        [RTTI.Member(93, 0x170, "SlopeParam")] public float SlopeSetRangeOldMin;
        [RTTI.Member(94, 0x174, "SlopeParam")] public float SlopeSetRangeOldMax;
        [RTTI.Member(95, 0x178, "SlopeParam")] public float SlopeSetRangeNewMin;
        [RTTI.Member(96, 0x17C, "SlopeParam")] public float SlopeSetRangeNewMax;
        [RTTI.Member(81, 0x180, "SensorDistanceAlpha")] public float SensorDistanceAlphaPower;
        [RTTI.Member(82, 0x184, "SensorDistanceAlpha")] public float SensorDistanceAlphaOffset;
        [RTTI.Member(44, 0x194, "Base")] public float SamplingUnitMeter;
        [RTTI.Member(47, 0x198, "Base")] public float FrustumFov;
        [RTTI.Member(46, 0x19C, "Base")] public float LineWidth;
        [RTTI.Member(49, 0x1A0, "Base")] public float InOutLineWidthScale;
        [RTTI.Member(50, 0x1A4, "Base")] public float InOutLineWidthDistanceMin;
        [RTTI.Member(51, 0x1A8, "Base")] public float InOutLineWidthDistanceMax;
        [RTTI.Member(52, 0x1AC, "Base")] public float InOutLineWidthDistanceScaleMin;
        [RTTI.Member(53, 0x1B0, "Base")] public float InOutLineWidthDistanceScaleMax;
        [RTTI.Member(54, 0x1B4, "Base")] public float InOutLineZOffset;
        [RTTI.Member(55, 0x1B8, "Base")] public float MainSubLineInnerPositionScale;
        [RTTI.Member(56, 0x1BC, "Base")] public float MainSubLineWidthScale;
        [RTTI.Member(57, 0x1C0, "Base")] public float MainSubLineZOffset;
        [RTTI.Member(58, 0x1C4, "Base")] public float TextLineInnerPositionScale;
        [RTTI.Member(59, 0x1C8, "Base")] public float TextLineWidthScale;
        [RTTI.Member(60, 0x1CC, "Base")] public float TextLineHeightScale;
        [RTTI.Member(61, 0x1D0, "Base")] public float TextLineZOffset;
        [RTTI.Member(62, 0x1D4, "Base")] public float TextLineUMappingScale;
        [RTTI.Member(63, 0x1D8, "Base")] public float TextLineVMappingScale;
        [RTTI.Member(64, 0x1DC, "Base")] public float TextLineVMappingOffset;
        [RTTI.Member(65, 0x1E0, "Base")] public float TextLineUMappingRepeatModulo;
        [RTTI.Member(66, 0x1E4, "Base")] public float TextEdgeMargin;
        [RTTI.Member(67, 0x1E8, "Base")] public float TextLineAvailableThreshold;
        [RTTI.Member(68, 0x1EC, "Base")] public float TextLineIgnoreHeightThreshold;
        [RTTI.Member(31, 0x1F0, "Color")] public float InOutLineAlphaCutThreshold;
        [RTTI.Member(72, 0x1F4, "Base")] public float InnerAlphaOffset;
        [RTTI.Member(32, 0x1F8, "Color")] public float InOutLineDepthFadeDistance;
        [RTTI.Member(70, 0x1FC, "Base")] public float InnerScaleAttenuation;
        [RTTI.Member(71, 0x200, "Base")] public float InnerAlphaAttenuation;
        [RTTI.Member(48, 0x204, "Base")] public int NumMainSubLine;
        [RTTI.Member(45, 0x20C, "Base")] public int SamplingUnitPerframe;
        [RTTI.Member(101, 0x210, "CollisionCheck")] public int NumParallelJob;
        [RTTI.Member(100, 0x214, "CollisionCheck")] public float SnowMaterialOffsetZ;
        [RTTI.Member(84, 0x218, "GridSparate")] public uint8 GridSeparateIndex;
        [RTTI.Member(42, 0x219, "Base")] public bool EnableFixGridMove;
        [RTTI.Member(40, 0x21A, "Base")] public bool IgnoreDepthTest;
        [RTTI.Member(41, 0x21B, "Base")] public bool AddAlphaBlend;
        [RTTI.Member(102, 0x21C, "CollisionCheck")] public bool UseRaycastSample;
        [RTTI.Member(69, 0x21D, "Base")] public bool EnableTextMappingZMask;
        [RTTI.Member(76, 0x21E, "Base")] public bool EnablePlayerTouchLuminance;
    }

    [RTTI.Serializable(0xC11DD0E0630D1A4, GameType.DS)]
    public class DSQpidAreaLastStrandingResource : Resource
    {
        [RTTI.Member(6, 0x20)] public Ref<DSQpidAreaPath> BoundDefinition;
        [RTTI.Member(7, 0x28)] public Array<Vec3> AreaPoints;
        [RTTI.Member(2, 0x38)] public Array<Ref<DSQpidAreaResource>> References;
        [RTTI.Member(3, 0x48)] public EDSArea Area;
        [RTTI.Member(4, 0x4C)] public int32 DummyID;
        [RTTI.Member(5, 0x50)] public uint32 BandWidth;
    }

    [RTTI.Serializable(0x24DCE03E81E3B56C, GameType.DS)]
    public class DSQpidAreaPath : ParentWorldNode
    {
        [RTTI.Member(8, 0x80, "Logic")] public Array<Ref<DSQpidAreaPathNodeBase>> Nodes;
        [RTTI.Member(7, 0x98, "Logic")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0x5EE1A0C09A0EA999, GameType.DS)]
    public class DSQpidAreaPathNode : DSQpidAreaPathNodeBase
    {
    }

    [RTTI.Serializable(0x8A79FBA410B927C3, GameType.DS)]
    public class DSQpidAreaPathNodeBase : ParentWorldNodeOverridable
    {
        [RTTI.Member(9, 0x98, "Logic")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0x89FFC7ADD7837D17, GameType.DS)]
    public class DSQpidAreaPathSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF2F17CE4736D6FD1, GameType.DS)]
    public class DSQpidAreaResource : Resource
    {
        [RTTI.Member(3, 0x20, "AreaPoints")] public Ref<DSDeliveryPointInfoResource> DeliveryPoint;
        [RTTI.Member(4, 0x28, "AreaPoints")] public Ref<DSQpidAreaPath> BoundDefinition;
        [RTTI.Member(14, 0x30, "AreaPoints")] public Array<Ref<DSQpidAreaResource>> NeighboringQpidArea;
        [RTTI.Member(13, 0x40, "AreaPoints")] public Array<Vec3> AreaPoints;
        [RTTI.Member(5, 0x50, "AreaPoints")] public EDSArea Area;
        [RTTI.Member(8, 0x54, "AreaPoints")] public uint32 BandWidthLevel1;
        [RTTI.Member(9, 0x58, "AreaPoints")] public uint32 BandWidthLevel2;
        [RTTI.Member(10, 0x5C, "AreaPoints")] public uint32 BandWidthLevel3;
        [RTTI.Member(11, 0x60, "AreaPoints")] public uint32 BandWidthLevel4;
        [RTTI.Member(12, 0x64, "AreaPoints")] public uint32 BandWidthLevel5;
        [RTTI.Member(6, 0x68, "AreaPoints")] public bool Undiscovered;
        [RTTI.Member(7, 0x69, "AreaPoints")] public EDSQpidUnitDefaultGroup DefaultGroup;
        [RTTI.Member(15, 0x70, "AreaPoints")] public Array<Ref<DSLocator>> StrandCables;
        [RTTI.Member(16, 0x80, "AreaPoints")] public Array<Ref<DSLocator>> MultiStrandCables;
    }

    [RTTI.Serializable(0xF5942AAD1524EE75, GameType.DS)]
    public class DSQpidNotifyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3886AC8AAAC56B52, GameType.DS)]
    public class DSQpidNotifyComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Qpid")] public int VisibleQpidId;
        [RTTI.Member(4, 0x24, "Qpid")] public int InvisibleQpidId;
    }

    [RTTI.Serializable(0xE9384F6D88BFBD61, GameType.DS)]
    public class DSQpidSyncLimitResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSNetSyncObjectCountResource>> Limits;
    }

    [RTTI.Serializable(0x9FF1041E96C61F8C, GameType.DS)]
    public class DSQpidUnitCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x3F2E1D8D45C3AB6C, GameType.DS)]
    public class DSQpidUnitCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF29F88F4C1016F0B, GameType.DS)]
    public class DSQpidWorldNodeEditableController
    {
    }

    [RTTI.Serializable(0x9A3D1B06867916A3, GameType.DS)]
    public class DSRadioEpilogueEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x71F6CE971935C7FA, GameType.DS)]
    public class DSRadioEpilogueEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x28, "General")] public Ref<DSRadioEpilogueResource> SharedSettings;
    }

    [RTTI.Serializable(0x4F31712FF061DA94, GameType.DS)]
    public class DSRadioEpilogueResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<BooleanFact> UnpauseFact;
        [RTTI.Member(4, 0x28, "General")] public Ref<SoundResource> SoundResource;
    }

    [RTTI.Serializable(0x7BA6F865BECD6A81, GameType.DS)]
    public class DSRadioEvent : Resource
    {
    }

    [RTTI.Serializable(0x4784C41FB4ED6E48, GameType.DS)]
    public class DSRadioEventHandlerResource : WorldNode
    {
        [RTTI.BaseClass(0x60)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(8, 0x78, "General")] public Ref<DSRadioEvent> RadioEvent;
        [RTTI.Member(9, 0x80, "General")] public bool DisableWhenGameOver;
        [RTTI.Member(10, 0x88, "General")] public Array<Ref<BooleanFact>> DisableFacts;
        [RTTI.Member(11, 0x98, "General")] public Ref<RTTIRefObject> DebugInfo;
    }

    [RTTI.Serializable(0x75141090554CC4E6, GameType.DS)]
    public class DSRadioEventHandlerResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFB22A60B6143EEED, GameType.DS)]
    public class DSRadioMetadata : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xEAC798D9547DB18E, GameType.DS)]
    public class DSRadioNodeGraphBindings : RTTIObject
    {
    }

    [RTTI.Serializable(0xCC1A3643B88D7D5C, GameType.DS)]
    public class DSRadioNodeGraphBindingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x993606B44AE2E347, GameType.DS)]
    public class DSRadioPlaySentenceGroupThroughPlayerResource : DSRadioEventHandlerResource
    {
        [RTTI.Member(12, 0xA0, "General")] public Ref<GraphProgramResource> SideEffect;
        [RTTI.Member(13, 0xA8, "General")] public Ref<SentenceGroupResource> SentenceGroup;
        [RTTI.Member(15, 0xB0, "General")] public Ref<BooleanFact> HaveAlreadyTalkedFact;
        [RTTI.Member(14, 0xB8, "General")] public EDSPlayerGDVoicePriority Priority;
        [RTTI.Member(16, 0xBC, "General")] public bool DoNotRepeat;
    }

    [RTTI.Serializable(0xEBC8A3DEB2E28D66, GameType.DS)]
    public class DSRadioPlaySentenceGroupsResource : DSRadioEventHandlerResource
    {
        [RTTI.Member(12, 0xA0, "General")] public Ref<DSRadioPlaybackSettingsResource> PlaybackSettings;
        [RTTI.Member(13, 0xA8, "General")] public Ref<DSRadioSoundSettingsResource> SoundSettings;
        [RTTI.Member(14, 0xB0, "General")] public Ref<GraphProgramResource> SideEffect;
        [RTTI.Member(15, 0xB8, "General")] public Array<Ref<SentenceGroupResource>> SentenceGroups;
        [RTTI.Member(17, 0xC8, "Hidden")] public Ref<IntegerFact> HashFact;
        [RTTI.Member(18, 0xD0, "Hidden")] public Ref<IntegerFact> UpcomingSentenceGroupIndexFact;
    }

    [RTTI.Serializable(0xEA70FA430CD19BB0, GameType.DS)]
    public class DSRadioPlaySentenceSubgroupsResource : DSRadioEventHandlerResource
    {
    }

    [RTTI.Serializable(0x288D413B4585B9F7, GameType.DS)]
    public class DSRadioPlaySequenceNetworkResource : DSRadioEventHandlerResource
    {
        [RTTI.Member(12, 0xA0, "General")] public StreamingRef<EntityResource> SequenceNetworkEntityResource;
        [RTTI.Member(13, 0xA8, "General")] public bool IsStreaming;
    }

    [RTTI.Serializable(0x835FC31AF51158EB, GameType.DS)]
    public class DSRadioPlaybackSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public bool Persistent;
        [RTTI.Member(4, 0x21, "General")] public bool Pausable;
        [RTTI.Member(5, 0x22, "General")] public EDSRadioPriority Priority;
        [RTTI.Member(6, 0x23, "General")] public EDSRadioTriggerMode TriggerMode;
        [RTTI.Member(7, 0x24, "General")] public EDSRadioPlaybackMode PlaybackMode;
        [RTTI.Member(8, 0x25, "General")] public EDSRadioRepeatMode RepeatMode;
        [RTTI.Member(9, 0x26, "General")] public EDSRadioRestartFrom RestartFrom;
    }

    [RTTI.Serializable(0xB3B4877435392A47, GameType.DS)]
    public class DSRadioPrologueEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x435D7B1D0F890D8E, GameType.DS)]
    public class DSRadioPrologueEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x28, "General")] public Ref<DSRadioPrologueResource> SharedSettings;
        [RTTI.Member(7, 0x30, "General")] public Ref<SoundResource> SoundResource;
        [RTTI.Member(8, 0x38, "General")] public Ref<DSUIDeviceRadioMenuDescResource> DescResource;
    }

    [RTTI.Serializable(0x3402348C6486A214, GameType.DS)]
    public class DSRadioPrologueResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<BooleanFact> AllowedFact;
        [RTTI.Member(4, 0x28, "General")] public Ref<BooleanFact> UnpauseFact;
        [RTTI.Member(5, 0x30, "General")] public float Delay;
        [RTTI.Member(7, 0x34, "Udeage")] public bool Udeage_Enable;
        [RTTI.Member(8, 0x38, "Udeage")] public float Duration;
        [RTTI.Member(10, 0x3C, "CameraTransition")] public bool CameraTransition_Enable;
        [RTTI.Member(11, 0x40, "CameraTransition")] public float ThirdPersonDuration;
        [RTTI.Member(12, 0x44, "CameraTransition")] public float FirstPersonDuration;
        [RTTI.Member(13, 0x48, "CameraTransition")] public float FirstPersonRotationPitch;
        [RTTI.Member(14, 0x4C, "CameraTransition")] public float FirstPersonInterpTime;
        [RTTI.Member(15, 0x50, "CameraTransition")] public float FirstPersonTimeoutTime;
        [RTTI.Member(17, 0x58, "Vibration")] public Ref<RumbleResource> RumbleResource;
    }

    [RTTI.Serializable(0x173BA0229F6B036E, GameType.DS)]
    public class DSRadioSoundSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<VoiceResource> ReceiversVoice;
        [RTTI.Member(4, 0x28, "General")] public Ref<SoundResource> StartingSound;
        [RTTI.Member(5, 0x30, "General")] public Ref<SoundResource> EndingSound;
        [RTTI.Member(6, 0x38, "General")] public Ref<SoundResource> SquelchOpeningSound;
        [RTTI.Member(7, 0x40, "General")] public Ref<SoundResource> SquelchClosingSound;
        [RTTI.Member(8, 0x48, "General")] public bool EmbedMetadataForTransitionRule;
        [RTTI.Member(9, 0x50, "General")] public Ref<GraphProgramResource> TransitionRule;
        [RTTI.Member(10, 0x58, "General")] public EDSRadioCollisionGroup AssociatedCollisionGroup;
    }

    [RTTI.Serializable(0x5761D8D9779BDD7E, GameType.DS)]
    public class DSRainShelterAirConditionerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x61D43FDE1CF16C93, GameType.DS)]
    public class DSRainShelterAirConditionerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<EffectComponentResource> HeaterEffectResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<EffectComponentResource> CoolerEffectResource;
        [RTTI.Member(5, 0x30, "General")] public Ref<EffectComponentResource> CoatingSprayEffectResource;
        [RTTI.Member(6, 0x38, "General")] public Ref<EntityResource> SnowInteractEntityResource;
        [RTTI.Member(7, 0x40, "General")] public Ref<SoundResource> SnowInteractSoundResource;
        [RTTI.Member(8, 0x48, "General")] public float SnowInteractRadius;
        [RTTI.Member(9, 0x4C, "General")] public float SnowInteractSpeed;
    }

    [RTTI.Serializable(0xBA9B27C59E056583, GameType.DS)]
    public class DSRainShelterConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0x9052D83A6C968788, GameType.DS)]
    public class DSRainShelterConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "RainShelter")] public float Range;
        [RTTI.Member(116, 0x494, "RainShelter")] public float CoatingSprayRange;
        [RTTI.Member(117, 0x498, "RainShelter")] public float CoatingSprayJettingTime;
        [RTTI.Member(118, 0x49C, "RainShelter")] public float CoatingSprayEffectivenessLv1;
        [RTTI.Member(119, 0x4A0, "RainShelter")] public float CoatingSprayEffectivenessLv2;
        [RTTI.Member(121, 0x4A4, "LikeRateInNotRain")] public float LikeRateInNotRainLv1;
        [RTTI.Member(122, 0x4A8, "LikeRateInNotRain")] public float LikeRateInNotRainLv2;
        [RTTI.Member(123, 0x4AC, "LikeRateInNotRain")] public float LikeRateInNotRainLv3;
        [RTTI.Member(125, 0x4B0, "LikeRateInRain")] public float LikeRateInRainLv1;
        [RTTI.Member(126, 0x4B4, "LikeRateInRain")] public float LikeRateInRainLv2;
        [RTTI.Member(127, 0x4B8, "LikeRateInRain")] public float LikeRateInRainLv3;
        [RTTI.Member(129, 0x4BC, "LikeRateInSnow")] public float LikeRateInSnowLv1;
        [RTTI.Member(130, 0x4C0, "LikeRateInSnow")] public float LikeRateInSnowLv2;
        [RTTI.Member(131, 0x4C4, "LikeRateInSnow")] public float LikeRateInSnowLv3;
    }

    [RTTI.Serializable(0xBAA544821781D97E, GameType.DS)]
    public class DSRainShelterEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC5CE7AA84A14DA0D, GameType.DS)]
    public class DSRainShelterEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSOdradekEffectResource> OdradekEffectResource;
        [RTTI.Member(4, 0x28, "General")] public float EnableRadius;
        [RTTI.Member(5, 0x2C, "General")] public float EffectRadius;
    }

    [RTTI.Serializable(0x37120CC67662B5E3, GameType.DS)]
    public class DSRainShelterSendLikeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB1A5385A55357D20, GameType.DS)]
    public class DSRainShelterSendLikeComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x31C72EC7BBEE7B6D, GameType.DS)]
    public class DSRawMaterialAmountsForAdditionResource : Resource
    {
        [RTTI.Member(3, 0x20, "Crystal")] public uint32 Crystal_AddAmountLV0;
        [RTTI.Member(4, 0x24, "Crystal")] public uint32 Crystal_AddAmountLV1;
        [RTTI.Member(5, 0x28, "Crystal")] public uint32 Crystal_AddAmountLV2;
        [RTTI.Member(6, 0x2C, "Crystal")] public uint32 Crystal_AddAmountLV3;
        [RTTI.Member(7, 0x30, "Crystal")] public uint32 Crystal_AddAmountLV4;
        [RTTI.Member(8, 0x34, "Crystal")] public uint32 Crystal_AddAmountLV5;
        [RTTI.Member(10, 0x38, "Resin")] public uint32 Resin_AddAmountLV0;
        [RTTI.Member(11, 0x3C, "Resin")] public uint32 Resin_AddAmountLV1;
        [RTTI.Member(12, 0x40, "Resin")] public uint32 Resin_AddAmountLV2;
        [RTTI.Member(13, 0x44, "Resin")] public uint32 Resin_AddAmountLV3;
        [RTTI.Member(14, 0x48, "Resin")] public uint32 Resin_AddAmountLV4;
        [RTTI.Member(15, 0x4C, "Resin")] public uint32 Resin_AddAmountLV5;
        [RTTI.Member(17, 0x50, "Metal")] public uint32 Metal_AddAmountLV0;
        [RTTI.Member(18, 0x54, "Metal")] public uint32 Metal_AddAmountLV1;
        [RTTI.Member(19, 0x58, "Metal")] public uint32 Metal_AddAmountLV2;
        [RTTI.Member(20, 0x5C, "Metal")] public uint32 Metal_AddAmountLV3;
        [RTTI.Member(21, 0x60, "Metal")] public uint32 Metal_AddAmountLV4;
        [RTTI.Member(22, 0x64, "Metal")] public uint32 Metal_AddAmountLV5;
        [RTTI.Member(24, 0x68, "Ceramic")] public uint32 Ceramic_AddAmountLV0;
        [RTTI.Member(25, 0x6C, "Ceramic")] public uint32 Ceramic_AddAmountLV1;
        [RTTI.Member(26, 0x70, "Ceramic")] public uint32 Ceramic_AddAmountLV2;
        [RTTI.Member(27, 0x74, "Ceramic")] public uint32 Ceramic_AddAmountLV3;
        [RTTI.Member(28, 0x78, "Ceramic")] public uint32 Ceramic_AddAmountLV4;
        [RTTI.Member(29, 0x7C, "Ceramic")] public uint32 Ceramic_AddAmountLV5;
        [RTTI.Member(31, 0x80, "ChemicalSubstance")] public uint32 ChemicalSubstance_AddAmountLV0;
        [RTTI.Member(32, 0x84, "ChemicalSubstance")] public uint32 ChemicalSubstance_AddAmountLV1;
        [RTTI.Member(33, 0x88, "ChemicalSubstance")] public uint32 ChemicalSubstance_AddAmountLV2;
        [RTTI.Member(34, 0x8C, "ChemicalSubstance")] public uint32 ChemicalSubstance_AddAmountLV3;
        [RTTI.Member(35, 0x90, "ChemicalSubstance")] public uint32 ChemicalSubstance_AddAmountLV4;
        [RTTI.Member(36, 0x94, "ChemicalSubstance")] public uint32 ChemicalSubstance_AddAmountLV5;
        [RTTI.Member(38, 0x98, "SpecialAlloy")] public uint32 SpecialAlloy_AddAmountLV0;
        [RTTI.Member(39, 0x9C, "SpecialAlloy")] public uint32 SpecialAlloy_AddAmountLV1;
        [RTTI.Member(40, 0xA0, "SpecialAlloy")] public uint32 SpecialAlloy_AddAmountLV2;
        [RTTI.Member(41, 0xA4, "SpecialAlloy")] public uint32 SpecialAlloy_AddAmountLV3;
        [RTTI.Member(42, 0xA8, "SpecialAlloy")] public uint32 SpecialAlloy_AddAmountLV4;
        [RTTI.Member(43, 0xAC, "SpecialAlloy")] public uint32 SpecialAlloy_AddAmountLV5;
    }

    [RTTI.Serializable(0xC9EE51474C38E3C, GameType.DS)]
    public class DSRawMaterialUnlockFactsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<BooleanFact> CeramicFact;
        [RTTI.Member(3, 0x28)] public Ref<BooleanFact> ChemicalSubstanceFact;
        [RTTI.Member(4, 0x30)] public Ref<BooleanFact> SpecialAlloyFact;
        [RTTI.Member(5, 0x38)] public Ref<BooleanFact> CrystalFact;
    }

    [RTTI.Serializable(0x51DB8921329BAC8F, GameType.DS)]
    public class DSRealizeFromTarComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB40DD68320E896FD, GameType.DS)]
    public class DSRealizeFromTarComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float StartHeight;
        [RTTI.Member(3, 0x24)] public float TimeToRealize;
        [RTTI.Member(4, 0x28)] public bool SetAsStaticAfterShown;
    }

    [RTTI.Serializable(0x93D850AC9F3DEA2D, GameType.DS)]
    public class DSReceiveLikeFromPersonSequenceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x6AD81760671D2A9A, GameType.DS)]
    public class DSReceiveLikeFromPersonSequenceEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public int32 Like;
        [RTTI.Member(7, 0x2C, "Logic")] public UUIDRef<DSHouseholdPersonResource> DSHouseholdPersonResourceGGUUID;
        [RTTI.Member(8, 0x3C, "Logic")] public EDSTakeLikeReason TakeLikeReason;
    }

    [RTTI.Serializable(0x835BC89DF7C5F9A1, GameType.DS)]
    public class DSReceiveLikeSequenceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x15770EF995FAEE4E, GameType.DS)]
    public class DSReceiveLikeSequenceEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public int32 Like;
        [RTTI.Member(7, 0x2C, "Logic")] public UUIDRef<DSHouseholdInfoResource> DSHouseholdInfoResourceGGUUID;
        [RTTI.Member(8, 0x3C, "Logic")] public EDSTakeLikeReason TakeLikeReason;
    }

    [RTTI.Serializable(0x6A50C016E35865C6, GameType.DS)]
    public class DSReliefSupplyFactContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xBEF96E514055D867, GameType.DS)]
    public class DSReliefSupplyFactContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5392F9D618B7349F, GameType.DS)]
    public class DSReliefSupplyItemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSGameBaggageListItem> Baggage;
        [RTTI.Member(3, 0x28)] public Ref<BooleanFact> Fact;
        [RTTI.Member(4, 0x30)] public float Ratio;
    }

    [RTTI.Serializable(0x3C204212F4C090EC, GameType.DS)]
    public class DSReliefSupplyLocator : WorldNode
    {
        [RTTI.Member(4, 0x60)] public Ref<BooleanFact> Fact;
        [RTTI.Member(5, 0x68)] public float Ratio;
        [RTTI.Member(6, 0x6C)] public float Radius;
    }

    [RTTI.Serializable(0x5E0565A646015F74, GameType.DS)]
    public class DSReliefSupplySettingsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public float SumBaggageRatio;
        [RTTI.Member(3, 0x24)] public float SumLocatorRatio;
        [RTTI.Member(4, 0x28)] public EDSReliefSupplySettings_Type Type;
        [RTTI.Member(5, 0x30)] public Array<Ref<DSReliefSupplyItemResource>> Supplies;
        [RTTI.Member(6, 0x40)] public Array<Ref<WorldNode>> Locators;
        [RTTI.Member(10, 0x50)] public Ref<BooleanFact> EnableFact;
        [RTTI.Member(7, 0x58)] public EDSArea DsArea;
        [RTTI.Member(8, 0x60)] public Ref<GraphProgramResource> EvalGraph;
        [RTTI.Member(9, 0x68)] public uint32 NumMaxSupplies;
        [RTTI.Member(12, 0x6C, "Conditions")] public float InitialSpawnTime;
        [RTTI.Member(13, 0x70, "Conditions")] public float RespawnCycleSec;
        [RTTI.Member(14, 0x74, "Conditions")] public float ItemInterval;
        [RTTI.Member(15, 0x78, "Conditions")] public float RespawnDistanceFromPlayer;
        [RTTI.Member(16, 0x7C, "Conditions")] public float BloodpackMinAmount;
        [RTTI.Member(17, 0x80, "Conditions")] public float BulletMinRatio;
    }

    [RTTI.Serializable(0xC574EFD30DB911E4, GameType.DS)]
    public class DSRenderEffectSwapper : Resource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Ref<ModelPartResource> RootModel;
        [RTTI.Member(6, 0x28, "Representation")] public Array<uint32> HashKeys;
        [RTTI.Member(7, 0x38, "Representation")] public Array<Ref<DSRenderEffectSwapperElement>> SwapperElements;
        [RTTI.Member(4, 0x48, "Representation")] public int NumVariation;
        [RTTI.Member(5, 0x4C, "Representation")] public bool IsRootModelOnly;
    }

    [RTTI.Serializable(0x7747084CC43F0F35, GameType.DS)]
    public class DSRenderEffectSwapperComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1FAB169B4BD0CA8F, GameType.DS)]
    public class DSRenderEffectSwapperComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xCB0ACB26E64A7ACD, GameType.DS)]
    public class DSRenderEffectSwapperComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String SwapRenderEffectName;
    }

    [RTTI.Serializable(0xE5A008AAA3BDDACA, GameType.DS)]
    public class DSRenderEffectSwapperElement : Resource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Array<GGUUID> UUIDKeys;
        [RTTI.Member(4, 0x30, "Representation")] public Array<Array<Ref<RenderEffectResource>>> RenderEffectValues;
    }

    [RTTI.Serializable(0xEBD89599D85D639F, GameType.DS)]
    public class DSRequiredMaterial : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public EDSGameRawMaterialtListItem_Type MaterialID;
        [RTTI.Member(1, 0xC)] public uint Amount;
    }

    [RTTI.Serializable(0x6312ACE7C32637C5, GameType.DS)]
    public class DSRequiredRawMaterialAmount
    {
        [RTTI.Member(0, 0x0)] public EDSGameRawMaterialtListItem_Type Type;
        [RTTI.Member(1, 0x4)] public uint32 Amount;
    }

    [RTTI.Serializable(0x710518395438155F, GameType.DS)]
    public class DSResidentAreaRoadInfoResource : Resource
    {
        [RTTI.Member(2, 0x20)] public uint32 AreaId;
        [RTTI.Member(3, 0x24)] public EDSArea Area;
        [RTTI.Member(4, 0x26)] public uint16 AreaHash;
        [RTTI.Member(5, 0x28)] public Array<DSResidentRoadInfo> RoadInfos;
    }

    [RTTI.Serializable(0x692216F07EF65965, GameType.DS)]
    public class DSResidentRoadInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 Id;
        [RTTI.Member(1, 0x4)] public uint32 PrevLinkId;
        [RTTI.Member(2, 0x8)] public uint32 NextLinkId;
        [RTTI.Member(3, 0x10)] public Array<Vec3> Points;
        [RTTI.Member(4, 0x20)] public Array<Vec3> Tangents;
        [RTTI.Member(5, 0x30)] public Array<float> Widths;
    }

    [RTTI.Serializable(0x409561F125AA10D, GameType.DS)]
    public class DSResidentRoadInfoResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSResidentAreaRoadInfoResource>> AreaRoadInfoResources;
    }

    [RTTI.Serializable(0xE8034F4CE8242740, GameType.DS)]
    public class DSResidentsBasicNode : RTTIObject
    {
    }

    [RTTI.Serializable(0x75A850A07E98774, GameType.DS)]
    public class DSResidentsBasicNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x336C6290C873E382, GameType.DS)]
    public class DSResidentsSystemResource : Resource
    {
        [RTTI.Member(3, 0x20, "HouseholdInfo")] public Array<Ref<DSHouseholdInfoResource>> HouseholdInfoResources;
        [RTTI.Member(4, 0x30, "HouseholdInfo")] public Ref<DSFrendshipContext> FrendshipContext;
        [RTTI.Member(6, 0x38, "Friendship")] public Ref<GraphProgramResource> FriendshipLevelUpGraph;
        [RTTI.Member(7, 0x40, "Friendship")] public Ref<GraphProgramResource> FriendshipForeachLevelUpGraph;
        [RTTI.Member(9, 0x48, "MajorMembers")] public Ref<DSHouseholdInfoResource> Diehardman;
        [RTTI.Member(10, 0x50, "MajorMembers")] public Ref<DSHouseholdInfoResource> Deadman;
        [RTTI.Member(11, 0x58, "MajorMembers")] public Ref<DSHouseholdInfoResource> Heartman;
        [RTTI.Member(12, 0x60, "MajorMembers")] public Ref<DSHouseholdInfoResource> Mama;
        [RTTI.Member(13, 0x68, "MajorMembers")] public Ref<DSHouseholdInfoResource> Lockne;
        [RTTI.Member(14, 0x70, "MajorMembers")] public Ref<DSHouseholdInfoResource> Fragile;
        [RTTI.Member(15, 0x78, "MajorMembers")] public Ref<DSHouseholdInfoResource> BB;
        [RTTI.Member(16, 0x80, "MajorMembers")] public Ref<DSHouseholdInfoResource> BridgesOrganization;
        [RTTI.Member(17, 0x88, "MajorMembers")] public Ref<DSHouseholdInfoResource> PorterMule;
        [RTTI.Member(18, 0x90, "MajorMembers")] public Ref<DSHouseholdInfoResource> BT;
        [RTTI.Member(19, 0x98, "MajorMembers")] public Ref<DSHouseholdPersonResource> ChiralArtistDaughter;
        [RTTI.Member(20, 0xA0, "MajorMembers")] public Ref<DSHouseholdInfoResource> Langdon;
        [RTTI.Member(22, 0xA8, "Others")] public Ref<DSHouseholdInfoResource> CentralKnotCity;
        [RTTI.Member(23, 0xB0, "Others")] public Ref<DSHouseholdInfoResource> EdgeKnotCity;
    }

    [RTTI.Serializable(0x83FD02CF67EBC749, GameType.DS)]
    public class DSRestingPlace : CoreObject
    {
        [RTTI.Member(2, 0x20)] public uint32 NameHash;
        [RTTI.Member(3, 0x28)] public Ref<DSLocator> Locator;
        [RTTI.Member(4, 0x30)] public Ref<DSRestingPlaceCollisionTrigger> CollisionTrigger;
    }

    [RTTI.Serializable(0x41CABAAE7E8CEB16, GameType.DS)]
    public class DSRestingPlaceCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(13, 0xF0)] public uint32 NameHash;
        [RTTI.Member(12, 0xF4)] public EDSRestingPlaceType Type;
        [RTTI.Member(14, 0xF8)] public Ref<DSLocator> Locator;
    }

    [RTTI.Serializable(0xAE0DB4D1A8F484E1, GameType.DS)]
    public class DSRestingPlaceConfig : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<MeshResourceBase>> MeshResources;
        [RTTI.Member(3, 0x30)] public Array<Ref<PhysicsCollisionResource>> CollisionResources;
        [RTTI.Member(4, 0x40)] public Ref<ParticleSystemResource> ParticleSensorMark;
    }

    [RTTI.Serializable(0xACA07997B61FF91C, GameType.DS)]
    public class DSRewardSpecialStack
    {
    }

    [RTTI.Serializable(0x69692DBD4DE638BA, GameType.DS)]
    public class DSRewritableDeliveryPointInfoText : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<LocalizedTextResource>> DescriptionTexts;
        [RTTI.Member(3, 0x30)] public Ref<IntegerFact> DescriptionSelectorFact;
    }

    [RTTI.Serializable(0x8561CA65FECCAA75, GameType.DS)]
    public class DSRicochetDefine : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSRicochetType Type;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<MaterialTypeResource> MaterialTypeResource;
    }

    [RTTI.Serializable(0xBDF3AE368D92D7EE, GameType.DS)]
    public class DSRideVehicleMovementComponent : DSMoverSupportComponent
    {
    }

    [RTTI.Serializable(0x8472F87C31094813, GameType.DS)]
    public class DSRideVehicleMovementComponentResource : DSMoverSupportComponentResource
    {
        [RTTI.Member(11, 0x50, "DS")] public int AttachLeftHandEvent;
        [RTTI.Member(12, 0x54, "DS")] public int AttachRightHandEvent;
    }

    [RTTI.Serializable(0xAAAC19B76E0C51EF, GameType.DS)]
    public class DSRiskDescriptionResource : Resource
    {
        [RTTI.Member(3, 0x20, "Risk")] public Ref<LocalizedTextResource> Risk_None;
        [RTTI.Member(4, 0x28, "Risk")] public Ref<LocalizedTextResource> Mule;
        [RTTI.Member(5, 0x30, "Risk")] public Ref<LocalizedTextResource> Gazer;
        [RTTI.Member(6, 0x38, "Risk")] public Ref<LocalizedTextResource> Rain;
        [RTTI.Member(7, 0x40, "Risk")] public Ref<LocalizedTextResource> SteepSlope;
        [RTTI.Member(8, 0x48, "Risk")] public Ref<LocalizedTextResource> RoughRoad;
        [RTTI.Member(9, 0x50, "Risk")] public Ref<LocalizedTextResource> Cliff;
        [RTTI.Member(10, 0x58, "Risk")] public Ref<LocalizedTextResource> River;
        [RTTI.Member(11, 0x60, "Risk")] public Ref<LocalizedTextResource> Rockfall;
        [RTTI.Member(12, 0x68, "Risk")] public Ref<LocalizedTextResource> ToxicGas;
        [RTTI.Member(14, 0x70, "Recommend")] public Ref<LocalizedTextResource> Recommend_None;
        [RTTI.Member(15, 0x78, "Recommend")] public Ref<LocalizedTextResource> Ladder;
        [RTTI.Member(16, 0x80, "Recommend")] public Ref<LocalizedTextResource> Rope;
        [RTTI.Member(17, 0x88, "Recommend")] public Ref<LocalizedTextResource> ObservationTower;
        [RTTI.Member(18, 0x90, "Recommend")] public Ref<LocalizedTextResource> Bridge;
        [RTTI.Member(19, 0x98, "Recommend")] public Ref<LocalizedTextResource> ZipLine;
    }

    [RTTI.Serializable(0xF28153E17A5182BE, GameType.DS)]
    public class DSRoad : AIRoad
    {
        [RTTI.Member(16, 0xF0, "DS")] public uint32 IdHash;
        [RTTI.Member(17, 0xF4, "DS")] public uint32 DataHash;
        [RTTI.Member(18, 0x100, "DS")] public WorldTransform InstancedTransform;
        [RTTI.Member(19, 0x140, "DS")] public GGUUID OriginalUUID;
        [RTTI.Member(34, 0x170, "DS")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(20, 0x178, "DS")] public Ref<DSRoadMeshResource> MeshResource;
        [RTTI.Member(21, 0x180, "DS")] public Array<Ref<MeshResourceBase>> MeshResources;
        [RTTI.Member(22, 0x190, "DS")] public Array<Ref<PhysicsCollisionResource>> CollisionResources;
        [RTTI.Member(23, 0x1A0, "DS")] public Array<WorldPosition> InstanceOffsets;
        [RTTI.Member(25, 0x1D0, "DS")] public Array<Ref<MeshResourceBase>> ConnectorMeshResources;
        [RTTI.Member(26, 0x1E0, "DS")] public Array<Ref<PhysicsCollisionResource>> ConnectorCollisionResources;
        [RTTI.Member(27, 0x200, "DS")] public Array<int> ConnectorAssetList;
        [RTTI.Member(24, 0x220, "DS")] public Array<Ref<MeshInstanceManager>> MeshInstanceManagers;
        [RTTI.Member(38, 0x230, "DS")] public Ref<EntityResource> EffectEntity;
        [RTTI.Member(35, 0x238, "DS")] public Ref<ParticleSystemResource> StonesEffectResource;
        [RTTI.Member(36, 0x240, "DS")] public Array<Vec4> StonesEffectEmiterPositions;
        [RTTI.Member(37, 0x250, "DS")] public Array<Vec3> StonesEffectEmiterSideDirs;
        [RTTI.Member(31, 0x280, "DS")] public Mat44 MeshStartMatrix;
        [RTTI.Member(32, 0x2C0, "DS")] public Mat44 MeshEndMatrix;
        [RTTI.Member(29, 0x300, "DS")] public float MeshStartOffset;
        [RTTI.Member(30, 0x304, "DS")] public float MeshEndOffset;
        [RTTI.Member(33, 0x308, "DS")] public Array<DSRoadHelper> RoadHelpers;
        [RTTI.Member(39, 0x318, "DS")] public Array<int> OverriePatternList;
        [RTTI.Member(40, 0x328, "DS")] public Array<float> UnitSizeList;
        [RTTI.Member(28, 0x338, "DS")] public bool IsStaticMeshRoad;
    }

    [RTTI.Serializable(0x16962EDCF3B45E18, GameType.DS)]
    public class DSRoadBakeResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> CopyTextureShaderResource;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> WorldDataBakeShaderResource;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> InstancingBakeShaderResource;
        [RTTI.Member(6, 0x40)] public float TrackingBakeWidthLevel0;
        [RTTI.Member(7, 0x44)] public float TrackingBakeWidthLevel1;
        [RTTI.Member(8, 0x48)] public float TrackingBakeWidthLevel2;
    }

    [RTTI.Serializable(0x8A4D070E23AC13A2, GameType.DS)]
    public class DSRoadConstructionEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xACE823C0F3FA9A6E, GameType.DS)]
    public class DSRoadConstructionEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xD86F750ABDACFBA8, GameType.DS)]
    public class DSRoadConstructionEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<RenderEffectResource> LightEffectRenderEffectsResource;
        [RTTI.Member(3, 0x28)] public Array<Ref<ModelPartResource>> DebrisModelPartResources;
        [RTTI.Member(4, 0x38)] public Array<Ref<DSRoadConstructionEffectDebrisParam>> DebriPatternList;
        [RTTI.Member(5, 0x48)] public float PatternInterval;
        [RTTI.Member(6, 0x50)] public Array<Ref<CurveResource>> AnimCurveResources;
        [RTTI.Member(7, 0x60)] public float ShaderAnimTimeOffset;
        [RTTI.Member(8, 0x64)] public float DebriStartDelayTimeBase;
        [RTTI.Member(9, 0x68)] public float DebriStartDelayTimeFactor;
        [RTTI.Member(10, 0x6C)] public float DebriFlowingSpeed;
        [RTTI.Member(11, 0x70)] public float LightWallWidth;
    }

    [RTTI.Serializable(0xCBBD70F52DECC821, GameType.DS)]
    public class DSRoadConstructionEffectDebrisParam : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Mat44 Offset;
        [RTTI.Member(3, 0x60)] public int ModelType;
        [RTTI.Member(4, 0x64)] public int ExtraModelType;
        [RTTI.Member(5, 0x68)] public FRange DelayRange;
    }

    [RTTI.Serializable(0xB2AB33FE0A095D6F, GameType.DS)]
    public class DSRoadConstructionEffectEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xB51C2EED80C3DFCE, GameType.DS)]
    public class DSRoadConstructionEffectEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> CenterLocatorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<IntegerFact> RoadId;
        [RTTI.Member(11, 0x50, "Logic")] public int ToBackStartFrame;
        [RTTI.Member(12, 0x54, "Logic")] public int ToForwardStartFrame;
        [RTTI.Member(13, 0x58, "Logic")] public int InvisibleStartFrame;
        [RTTI.Member(14, 0x5C, "Logic")] public int LightWallStartFrame;
        [RTTI.Member(15, 0x60, "Logic")] public int StencilStartFrame;
    }

    [RTTI.Serializable(0x44C50856F5C903FC, GameType.DS)]
    public class DSRoadDecorativeMeshPart
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> DecorativeMesh;
        [RTTI.Member(1, 0x8)] public float IntervalStep;
        [RTTI.Member(2, 0xC)] public float MeshScatterWidth;
        [RTTI.Member(3, 0x10)] public float AppearanceWeight;
        [RTTI.Member(4, 0x20)] public Vec3 RandomScaleMin;
        [RTTI.Member(5, 0x30)] public Vec3 RandomScaleMax;
    }

    [RTTI.Serializable(0x1FDE079DF3EA8C25, GameType.DS)]
    public class DSRoadGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBAD9073792A0939C, GameType.DS)]
    public class DSRoadHelper
    {
        [RTTI.Member(0, 0x0)] public uint32 NameHash;
        [RTTI.Member(1, 0x8)] public Array<Mat44> Offsets;
    }

    [RTTI.Serializable(0x88327CA331964DC5, GameType.DS)]
    public class DSRoadJunction : WorldNode
    {
        [RTTI.Member(4, 0x60)] public Ref<DynamicPrefabEntityResource> JunctionDynamicPrefabEntityResource;
        [RTTI.Member(5, 0x88)] public Array<DSRoadJunctionConnectionInfo> ConnectionInfos;
        [RTTI.Member(6, 0x98)] public Array<Ref<MeshResourceBase>> PartsMeshResources;
        [RTTI.Member(7, 0xA8)] public Array<Ref<PhysicsCollisionResource>> PartsCollisionResources;
    }

    [RTTI.Serializable(0x3FA77E6055C6290E, GameType.DS)]
    public class DSRoadJunctionConnectionInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 ConnectionRoadId;
        [RTTI.Member(1, 0x10)] public Mat44 Offset;
        [RTTI.Member(2, 0x50)] public EDSRoadJunctionConnectionType ConnectionType;
    }

    [RTTI.Serializable(0x6CFC66656F619DE1, GameType.DS)]
    public class DSRoadMeshResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float CurveUnitSize;
        [RTTI.Member(4, 0x30, "General")] public Vec3 BaseDirection;
        [RTTI.Member(5, 0x40, "General")] public Array<DSRoadDecorativeMeshPart> DecorativeMeshParts;
        [RTTI.Member(6, 0x58, "General")] public float DecorativeMeshIntervalStep;
        [RTTI.Member(7, 0x5C, "General")] public float DecorativeMeshScatterWidth;
        [RTTI.Member(8, 0x60, "General")] public Ref<PrefabResource> StartConnectorPrefab;
        [RTTI.Member(9, 0x68, "General")] public Ref<PrefabResource> EndConnectorPrefab;
        [RTTI.Member(10, 0x70, "General")] public Ref<PrefabResource> BrokenConnectorPrefab;
        [RTTI.Member(11, 0x78, "General")] public Array<Ref<PrefabResource>> ConnectorPrefabs;
        [RTTI.Member(12, 0x88, "General")] public bool ForceDisableMesh;
        [RTTI.Member(13, 0x90, "General")] public Ref<ParticleSystemResource> StonesEffectParticleResource;
        [RTTI.Member(14, 0x98, "General")] public Ref<EntityResource> EffectEntityResource;
    }

    [RTTI.Serializable(0xB32DF2B75D5721FF, GameType.DS)]
    public class DSRoadRebuilderConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0x80F41D2F5BE186B5, GameType.DS)]
    public class DSRoadRebuilderConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "RoadRebuilder")] public float SyncDisabledMinutesAfterBroken;
        [RTTI.Member(116, 0x494, "RoadRebuilder")] public float RequireRepairLifeRate;
    }

    [RTTI.Serializable(0x588B60DA80F8A6C1, GameType.DS)]
    public class DSRoadRebuilderLocator : DSDeliveryPointLocator
    {
        [RTTI.Member(27, 0xD0, "RoadRebuilder")] public Ref<DSLevelUpRequirement> OverrideLevelUpRequirement;
    }

    [RTTI.Serializable(0x2C2BFCAC12370C6D, GameType.DS)]
    public class DSRoadUnitMeshResourcePart
    {
        [RTTI.Member(0, 0x0)] public Ref<PrefabResource> Prefab;
        [RTTI.Member(1, 0x8)] public float UnitSize;
    }

    [RTTI.Serializable(0xFA952B3574180C91, GameType.DS)]
    public class DSRoadWallMover : Mover
    {
    }

    [RTTI.Serializable(0x3F7EE2F3B0620B, GameType.DS)]
    public class DSRoadWallMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "General")] public Ref<PhysicsCollisionResource> PhysicsResource;
        [RTTI.Member(8, 0x30, "General")] public float HeightFromTerrain;
    }

    [RTTI.Serializable(0x10F187A96DA152C9, GameType.DS)]
    public class DSRocketShellComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE7AA620E170FCBE0, GameType.DS)]
    public class DSRocketShellComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x265C70707E5ADB11, GameType.DS)]
    public class DSRocketShellComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Effect")] public Array<Ref<ParticleSystemResource>> Particles;
    }

    [RTTI.Serializable(0x38B4199A6CF408D5, GameType.DS)]
    public class DSRocketShellMover : Mover
    {
    }

    [RTTI.Serializable(0xEB0A12A1C0618F68, GameType.DS)]
    public class DSRocketShellMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x5BFB2A20CD79FE33, GameType.DS)]
    public class DSRopeEntity : Entity
    {
    }

    [RTTI.Serializable(0x3BF6CFD0916F6774, GameType.DS)]
    public class DSRopeEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Effect")] public Ref<ArtPartsVariationResource> Lv1APV;
        [RTTI.Member(32, 0x108, "Effect")] public Ref<ArtPartsVariationResource> Lv2APV;
    }

    [RTTI.Serializable(0xC66D1BBD8C41759C, GameType.DS)]
    public class DSRopePileEntity : Entity
    {
    }

    [RTTI.Serializable(0xC566DB2A4E8E40E2, GameType.DS)]
    public class DSRopePileEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0x3C3B56E7F00BAF53, GameType.DS)]
    public class DSRuledNameCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(13, 0xF0, "General")] public EDSRuledNameCollisionTriggerType Type;
        [RTTI.Member(14, 0xF4, "General")] public uint32 Identifier;
        [RTTI.Member(15, 0xF8, "General")] public int32 IdentifierInt;
        [RTTI.Member(16, 0x100, "General")] public Ref<DSRuledNameCollisionTriggerExtraParameter> ExtraParameter;
    }

    [RTTI.Serializable(0x3936BE73205F0B28, GameType.DS)]
    public class DSRuledNameCollisionTriggerExtraParameter : Resource
    {
        [RTTI.Member(2, 0x20)] public int32 Param0;
        [RTTI.Member(3, 0x24)] public int32 Param1;
        [RTTI.Member(4, 0x28)] public int32 Param2;
        [RTTI.Member(5, 0x2C)] public int32 Param3;
    }

    [RTTI.Serializable(0x638AE2D4CDFCCE83, GameType.DS)]
    public class DSRuledNameCollisionTriggerExtraParameterFact : DSRuledNameCollisionTriggerExtraParameter
    {
        [RTTI.Member(6, 0x30)] public Ref<Fact> Fact;
    }

    [RTTI.Serializable(0xE569DBAF3B2B5092, GameType.DS)]
    public class DSRuledNameCollisionTriggerExtraParameterFallDeathStartSelect : DSRuledNameCollisionTriggerExtraParameterLocatorAndRadius
    {
        [RTTI.Member(8, 0x40)] public Ref<LocalizedTextResource> NameText;
        [RTTI.Member(9, 0x48)] public Array<Ref<DSLocator>> DeathLocators;
    }

    [RTTI.Serializable(0x2704E11FEDDA250E, GameType.DS)]
    public class DSRuledNameCollisionTriggerExtraParameterLocatorAndRadius : DSRuledNameCollisionTriggerExtraParameter
    {
        [RTTI.Member(6, 0x30)] public Ref<DSLocator> Locator;
        [RTTI.Member(7, 0x38)] public float Radius;
    }

    [RTTI.Serializable(0x8060A50ACD135297, GameType.DS)]
    public class DSRuledNameCollisionTriggerExtraParameterOnsen : DSRuledNameCollisionTriggerExtraParameterLocatorAndRadius
    {
        [RTTI.Member(8, 0x40)] public Ref<LocalizedTextResource> NameText;
        [RTTI.Member(9, 0x48)] public Array<Ref<DSLocator>> Locators;
    }

    [RTTI.Serializable(0x6A4873F69253585, GameType.DS)]
    public class DSRuledNameCollisionTriggerExtraParameterWaterFall : DSRuledNameCollisionTriggerExtraParameterLocatorAndRadius
    {
        [RTTI.Member(8, 0x40)] public Ref<LocalizedTextResource> NameText;
        [RTTI.Member(9, 0x48)] public Array<Ref<DSLocator>> DeathLocators;
    }

    [RTTI.Serializable(0x14D6FB22265A98CE, GameType.DS)]
    public class DSSceneCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x857E30B558AE248D, GameType.DS)]
    public class DSSceneCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC851618925CD01FA, GameType.DS)]
    public class DSSceneExtensionParameter : SceneExtensionParameter
    {
        [RTTI.Member(3, 0x28)] public EDSSceneType DSSceneType;
        [RTTI.Member(4, 0x2C)] public int TerminalId;
    }

    [RTTI.Serializable(0xDF8005D161B96DF6, GameType.DS)]
    public class DSSceneExtensionParameterEx : DSSceneExtensionParameter
    {
        [RTTI.Member(5, 0x30)] public uint32 val0;
        [RTTI.Member(6, 0x34)] public uint32 val1;
    }

    [RTTI.Serializable(0x5561A72FB4336B6A, GameType.DS)]
    public class DSSendMessageFromSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA92E70F8114E06AC, GameType.DS)]
    public class DSSendMessageFromSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public Ref<DSStringHashResource> MessageTypeHash;
        [RTTI.Member(8, 0x38)] public Ref<DSStringHashResource> MessageValueHash;
    }

    [RTTI.Serializable(0xB32690A873DE68CA, GameType.DS)]
    public class DSSendMessageFromSequenceEventResourceEx : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public Ref<DSStringHashResource> MessageTypeHash;
        [RTTI.Member(8, 0x38)] public Ref<DSStringHashResource> MessageValueHash;
        [RTTI.Member(9, 0x40)] public Array<int32> Values;
    }

    [RTTI.Serializable(0xE1E49824FD84D88, GameType.DS)]
    public class DSSentenceContainerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<SentenceResource>> SentenceResources;
    }

    [RTTI.Serializable(0xA880102A4A76AD31, GameType.DS)]
    public class DSSentenceRandomSpeakerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3C1A0DF1DB162EF0, GameType.DS)]
    public class DSSentenceRandomSpeakerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SentenceResource>> SentenceResources;
        [RTTI.Member(3, 0x30)] public float Interval;
        [RTTI.Member(4, 0x34)] public float EnableDistance;
    }

    [RTTI.Serializable(0x6AC35041DE4E1510, GameType.DS)]
    public class DSSentenceSituationPriorityInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public uint32 SituationHash;
        [RTTI.Member(4, 0x24, "General")] public int32 Priority;
        [RTTI.Member(5, 0x28, "General")] public uint32 Flag;
        [RTTI.Member(6, 0x2C, "General")] public int8 BBMusicLikeIndex;
        [RTTI.Member(7, 0x2D, "General")] public EDSPlayerMusicKind MusicKind;
        [RTTI.Member(8, 0x2E, "General")] public bool IsDialogue;
        [RTTI.Member(9, 0x2F, "General")] public bool IsNeedContextCheckDialogue;
        [RTTI.Member(10, 0x30, "General")] public bool IsReactionVoice;
    }

    [RTTI.Serializable(0xF1830F698E2450DC, GameType.DS)]
    public class DSSentenceSituationPriorityResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public HashMap<uint32_int32> SituationPrioritiesIndex;
        [RTTI.Member(4, 0x30, "General")] public Array<Ref<DSSentenceSituationPriorityInfoResource>> SituationPriorityInfoArray;
    }

    [RTTI.Serializable(0x50AC2E322EDCCA3B, GameType.DS)]
    public class DSSentenceSituationResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DSPlayerSentenceResource>> ConditionalSentenceResources;
        [RTTI.Member(4, 0x30, "General")] public uint32 SituationStringHash;
    }

    [RTTI.Serializable(0x48BB08B8F4E7575E, GameType.DS)]
    public class DSSequencePositionLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xBE7678EF7E1717EC, GameType.DS)]
    public class DSSequencePositionLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public UUIDRef<DSLocator> DSLocator;
        [RTTI.Member(9, 0x40, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0x1406091D8E8D4323, GameType.DS)]
    public class DSSetInvisibleSharedGimmickEventResource : TimedEventResource
    {
        [RTTI.Member(9, 0x30, "Logic")] public GGUUID TargetUUID;
        [RTTI.Member(8, 0x40, "Logic")] public UUIDRef<DSSharedGimmickLocator> TargetGimmickLocator;
    }

    [RTTI.Serializable(0x94124AE753DD5E53, GameType.DS)]
    public class DSSetInvisibleSharedGimmickInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x462113B1FE4B4CC8, GameType.DS)]
    public class DSSetRadioMenuAdditionalImageEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF0D704D387CEF152, GameType.DS)]
    public class DSSetRadioMenuAdditionalImageEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSUIDeviceRadioMenuAdditionalDescResource> AdditionalDescResource;
    }

    [RTTI.Serializable(0x7B80958C57BD981, GameType.DS)]
    public class DSSetRadioMenuImageEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x92671EECCCA2574C, GameType.DS)]
    public class DSSetRadioMenuImageEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSUIDeviceRadioMenuDescResource> DescResource;
    }

    [RTTI.Serializable(0xB5A4AEA3D3BF83AE, GameType.DS)]
    public class DSSharedEnvironmentalObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0xAC32B1F52A1302E7, GameType.DS)]
    public class DSSharedGimmick : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xE90847DE81AD60D2, GameType.DS)]
    public class DSSharedGimmickArea : CoreObject
    {
        [RTTI.Member(3, 0x38, "General")] public String Name;
        [RTTI.Member(5, 0x40, "AreaInfo")] public EDSSharedGimmickAreaType AreaType;
        [RTTI.Member(6, 0x48, "AreaInfo")] public Array<IVec2> Tiles;
        [RTTI.Member(7, 0x58, "AreaInfo")] public Array<StreamingRef<DSSharedGimmickData>> DataArray;
        [RTTI.Member(8, 0x68, "AreaInfo", true)] public bool IsEnabled;
    }

    [RTTI.Serializable(0xF9D412A529F7E08B, GameType.DS)]
    public class DSSharedGimmickCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(12, 0xF0)] public Ref<EntityPlaceHolder> TargetCheckStation;
        [RTTI.Member(13, 0xF8)] public uint32 IdentifierHash;
        [RTTI.Member(14, 0xFC)] public bool HasDirection;
    }

    [RTTI.Serializable(0x92C0DE1965664DA1, GameType.DS)]
    public class DSSharedGimmickData : ParentWorldNode
    {
        [RTTI.BaseClass(0x70)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(10, 0x88, "General")] public String Name;
        [RTTI.Member(15, 0x90, "Gimmick")] public Array<Ref<DSSharedGimmickLocator>> Locators;
        [RTTI.Member(12, 0xB0, "Gimmick")] public Ref<DSSharedGimmickDefinition> Definition;
        [RTTI.Member(13, 0xC0, "Gimmick")] public EDSSharedGimmickRealizeType CustomRealizeType;
        [RTTI.Member(14, 0xC4, "Gimmick")] public int32 CustomRealizeNum;
    }

    [RTTI.Serializable(0xBC4D11AE1AF909EF, GameType.DS)]
    public class DSSharedGimmickDefinition : ResourceWithName
    {
        [RTTI.Member(8, 0x28, "Genaral")] public Ref<DSSharedGimmickPartsSet> GimmickPartsSet;
        [RTTI.Member(5, 0x30, "Genaral")] public EDSSharedGimmickType Type;
        [RTTI.Member(6, 0x31, "Genaral")] public EDSSharedGimmickRealizeType RealizeType;
        [RTTI.Member(7, 0x34, "Genaral")] public int32 RealizeNum;
        [RTTI.Member(9, 0x38, "Genaral")] public bool CanRealizeFarAway;
        [RTTI.Member(10, 0x39, "Genaral")] public bool CanRealizeClose;
    }

    [RTTI.Serializable(0xD565E46F6E0071AE, GameType.DS)]
    public class DSSharedGimmickIndieLocator : DSLocator
    {
        [RTTI.Member(7, 0x70, "General")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0x8F1D94B6B6A1D340, GameType.DS)]
    public class DSSharedGimmickIndieLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2180088EBF2B0029, GameType.DS)]
    public class DSSharedGimmickLocator : DSLocator
    {
        [RTTI.Member(7, 0x70, "General")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0x29BAC2AA11949CB3, GameType.DS)]
    public class DSSharedGimmickLocatorForMuleCP : DSSharedGimmickLocator
    {
        [RTTI.Member(9, 0x80, "CP")] public Array<WorldPosition> Positions;
        [RTTI.Member(10, 0x90, "CP")] public float Radius;
    }

    [RTTI.Serializable(0xA34EE5146DB80BF9, GameType.DS)]
    public class DSSharedGimmickLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x90C21B020C0135BC, GameType.DS)]
    public class DSSharedGimmickPartsSet : Resource
    {
        [RTTI.Member(6, 0x20, "Realized")] public Array<Ref<ModelResource>> ModelArray;
        [RTTI.Member(7, 0x30, "Realized")] public Array<Ref<DSSharedGimmickSimpleTriggerPart>> SimpleTriggerArray;
        [RTTI.Member(9, 0x40, "Unrealized")] public Array<Ref<DSSharedGimmickUnrealizedPart>> UnrealizedPartArray;
        [RTTI.Member(3, 0x50, "General")] public Ref<DSSharedGimmickSpecificData> SpecificData;
        [RTTI.Member(4, 0x58, "General")] public bool AffectToNav;
    }

    [RTTI.Serializable(0xCFFCFCEA7B1EC399, GameType.DS)]
    public class DSSharedGimmickResourceCollection : Resource
    {
        [RTTI.Member(3, 0x20, "Genaral")] public Array<Ref<DSSharedSubstanceBaseResource>> EntityResources;
        [RTTI.Member(4, 0x30, "Genaral")] public Ref<EntityResource> AutoPlaceStoneResource;
    }

    [RTTI.Serializable(0x9205435282C839C0, GameType.DS)]
    public class DSSharedGimmickSimpleCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(12, 0xF8)] public uint32 IdentifierHash;
        [RTTI.Member(13, 0xFC)] public uint32 IdentifierNgHash;
        [RTTI.Member(14, 0x100)] public bool HasDirection;
    }

    [RTTI.Serializable(0xA5E009BF451671FE, GameType.DS)]
    public class DSSharedGimmickSimpleTriggerPart : Resource
    {
        [RTTI.Member(3, 0x20, "Genaral")] public Ref<PhysicsCollisionResource> PhysicsResource;
        [RTTI.Member(4, 0x28, "Genaral")] public uint32 IdentifierHash;
        [RTTI.Member(5, 0x2C, "Genaral")] public uint32 IdentifierNgHash;
        [RTTI.Member(6, 0x30, "Genaral")] public bool HasDirection;
    }

    [RTTI.Serializable(0x332FF79693DA304A, GameType.DS)]
    public class DSSharedGimmickSpecificData : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<EntityComponentResource>> EntityCompornents;
        [RTTI.Member(23, 0x30, "AutoDoor")] public Ref<ShakeResource> CameraShakeResource;
        [RTTI.Member(4, 0x38, "General")] public float PlaceHeightOffset;
        [RTTI.Member(9, 0x40, "TriggerAnimation")] public Array<uint32> _HideTriggerState;
        [RTTI.Member(12, 0x50, "TriggerAnimation")] public bool DisableCameraShake;
        [RTTI.Member(13, 0x51, "TriggerAnimation")] public bool DisableImpactEffect;
        [RTTI.Member(14, 0x52, "TriggerAnimation")] public bool IsSnowObject;
        [RTTI.Member(15, 0x53, "TriggerAnimation")] public bool VerySmallPhysics;
        [RTTI.Member(16, 0x54, "TriggerAnimation")] public bool EnablePhysicsNoise;
        [RTTI.Member(17, 0x55, "TriggerAnimation")] public bool EnablePhysicsAlphaNearCamera;
        [RTTI.Member(19, 0x56, "AutoDoor")] public bool IsSlideDoor;
        [RTTI.Member(20, 0x58, "AutoDoor")] public float DoorSlideDistance;
        [RTTI.Member(21, 0x5C, "AutoDoor")] public float DoorSideSpeedOpen;
        [RTTI.Member(22, 0x60, "AutoDoor")] public float DoorSideSpeedClose;
        [RTTI.Member(25, 0x70, "Pendulum")] public Vec3 PendulumRestrictionAxis;
        [RTTI.Member(26, 0x80, "Pendulum")] public Array<float> PendulumLengths;
        [RTTI.Member(27, 0x90, "Pendulum")] public Array<float> PendulumFrictions;
        [RTTI.Member(28, 0xA0, "Pendulum")] public Array<float> PendulumAngleLimitRadian;
        [RTTI.Member(29, 0xB0, "Pendulum")] public bool IsWW2Bell;
        [RTTI.Member(11, 0xB1, "TriggerAnimation")] public bool NeedBroadcastMoveCollision;
        [RTTI.Member(5, 0xB2, "General")] public bool UseFadeInVisible;
        [RTTI.Member(6, 0xB8, "General")] public String ShaderVariableForFadeIn;
        [RTTI.Member(10, 0xC0, "TriggerAnimation")] public bool CanChangeTriggerAnimationEndFrameOnly;
        [RTTI.Member(7, 0xC1, "General")] public bool EnableTextureBoost;
    }

    [RTTI.Serializable(0xB3B6EDDBE4074942, GameType.DS)]
    public class DSSharedGimmickUnrealizedPart : ResourceWithNameHash
    {
        [RTTI.Member(5, 0x28, "Genaral")] public Array<Ref<MeshResourceBase>> MeshArray;
        [RTTI.Member(6, 0x38, "Genaral")] public Array<Ref<PhysicsCollisionResource>> PhysicsArray;
        [RTTI.Member(7, 0x48, "Genaral")] public Array<Ref<SkeletonHelpers>> HelperArray;
    }

    [RTTI.Serializable(0xB5A284A126F438B1, GameType.DS)]
    public class DSSharedSubstanceAnimation : DSSharedSubstanceBase
    {
    }

    [RTTI.Serializable(0x95809B0B2DF12E39, GameType.DS)]
    public class DSSharedSubstanceAnimationResource : DSSharedSubstanceBaseResource
    {
    }

    [RTTI.Serializable(0x99E628D0C4ED9967, GameType.DS)]
    public class DSSharedSubstanceBase : Entity
    {
    }

    [RTTI.Serializable(0xB4AB3ED164E4A1D3, GameType.DS)]
    public class DSSharedSubstanceBaseResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Effect")] public Ref<ShakeResource> CameraShakeResource;
    }

    [RTTI.Serializable(0xDB4A87CE47B05AA8, GameType.DS)]
    public class DSSharedSubstanceBreakableWeak : DSSharedSubstanceBase
    {
    }

    [RTTI.Serializable(0xAED41BDF02A9B959, GameType.DS)]
    public class DSSharedSubstanceBreakableWeakResource : DSSharedSubstanceBaseResource
    {
    }

    [RTTI.Serializable(0xEEBB447241DA06C9, GameType.DS)]
    public class DSSharedSubstancePDB : DSSharedSubstanceBase
    {
    }

    [RTTI.Serializable(0x604767C9DF00ACEC, GameType.DS)]
    public class DSSharedSubstancePDBResource : DSSharedSubstanceBaseResource
    {
    }

    [RTTI.Serializable(0x86B60966D8D1147A, GameType.DS)]
    public class DSSharedSubstancePendulum : DSSharedSubstanceBase
    {
    }

    [RTTI.Serializable(0x1AAFF7B550C8BDFA, GameType.DS)]
    public class DSSharedSubstancePendulumResource : DSSharedSubstanceBaseResource
    {
    }

    [RTTI.Serializable(0x98B0D49EB95AFB71, GameType.DS)]
    public class DSSharedSubstancePhysics : DSSharedSubstanceBase
    {
    }

    [RTTI.Serializable(0x349ABEC621B6A7DD, GameType.DS)]
    public class DSSharedSubstancePhysicsRep : EntityRep
    {
    }

    [RTTI.Serializable(0x41B39545175F5C8D, GameType.DS)]
    public class DSSharedSubstancePhysicsResource : DSSharedSubstanceBaseResource
    {
        [RTTI.Member(34, 0x108, "Parameter")] public Ref<AIAuralStimulusResource> DropStimulusResource;
        [RTTI.Member(33, 0x110, "Parameter")] public float PlayerKickVelocityScale;
    }

    [RTTI.Serializable(0x70FD2DBC20323C45, GameType.DS)]
    public class DSSharedSubstancePostInitialize : MsgBase
    {
    }

    [RTTI.Serializable(0x5BD520BFBF0412DE, GameType.DS)]
    public class DSSharedSubstanceSimpleTrigger : DSSharedSubstanceAnimation
    {
    }

    [RTTI.Serializable(0x3ABD65FE13D1F3C4, GameType.DS)]
    public class DSSharedSubstanceSimpleTriggerResource : DSSharedSubstanceAnimationResource
    {
    }

    [RTTI.Serializable(0x4DBCBB99A487AF20, GameType.DS)]
    public class DSSharedSubstanceTriggerAnimation : DSSharedSubstanceAnimation
    {
    }

    [RTTI.Serializable(0x5984AF5E0893B9FA, GameType.DS)]
    public class DSSharedSubstanceTriggerAnimationResource : DSSharedSubstanceAnimationResource
    {
    }

    [RTTI.Serializable(0x8050CB383A72E904, GameType.DS)]
    public class DSShell : Throwable
    {
    }

    [RTTI.Serializable(0xC9E5E6C1A4E46279, GameType.DS)]
    public class DSShellLauncherGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0x91639AF72CDD49BE, GameType.DS)]
    public class DSShellLauncherGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "ShellLauncher")] public Ref<DSShellResource> ShellResource;
        [RTTI.Member(12, 0xB8, "ShellLauncher")] public float ArcHeight;
        [RTTI.Member(13, 0xBC, "ShellLauncher")] public float ShellInterval;
        [RTTI.Member(14, 0xC0, "ShellLauncher")] public float VolleyInterval;
        [RTTI.Member(15, 0xC4, "ShellLauncher")] public uint32 ShellsPerVolley;
        [RTTI.Member(16, 0xC8, "ShellLauncher")] public float SpawnRadius;
        [RTTI.Member(17, 0xCC, "ShellLauncher")] public float Gravity;
    }

    [RTTI.Serializable(0x28CA372124B223ED, GameType.DS)]
    public class DSShellLauncherGameActorLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD46E867ABC642DDA, GameType.DS)]
    public class DSShellLauncherGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0xC23D414C63F89792, GameType.DS)]
    public class DSShellLauncherGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0x1E080EF77AB1A81F, GameType.DS)]
    public class DSShellResource : ThrowableResource
    {
        [RTTI.Member(76, 0x1D0, "Shell")] public Ref<EffectComponentResource> DropWhistleEffect;
        [RTTI.Member(77, 0x1D8, "Shell")] public Ref<EffectComponentResource> ExplosionEffect;
    }

    [RTTI.Serializable(0xF8FAEE110CB74915, GameType.DS)]
    public class DSShowBaggageInSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xAD6C941DE5C8F6FF, GameType.DS)]
    public class DSShowBaggageInSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Array<uint32> BaggageNameHashes;
        [RTTI.Member(9, 0x40, "Logic")] public bool All;
        [RTTI.Member(10, 0x41, "Logic")] public bool RightHand;
        [RTTI.Member(11, 0x42, "Logic")] public bool LeftHand;
        [RTTI.Member(12, 0x43, "Logic")] public bool ConnectedCart;
        [RTTI.Member(13, 0x48, "Logic")] public Ref<CurveResource> VisibilityCurve;
        [RTTI.Member(14, 0x50, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0xD23805B645BB0CE2, GameType.DS)]
    public class DSShowConstructionInSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF5F91A5ADAE29365, GameType.DS)]
    public class DSShowConstructionInSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Array<int32> ConstructionIDs;
        [RTTI.Member(9, 0x40, "Logic")] public bool All;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<CurveResource> VisibilityCurve;
        [RTTI.Member(11, 0x50, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0x15280432F6B391B3, GameType.DS)]
    public class DSShowVehicleInSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4F05870BF41E20C2, GameType.DS)]
    public class DSShowVehicleInSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> VisibilityCurve;
        [RTTI.Member(9, 0x38, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0xB4E493F30CF3C028, GameType.DS)]
    public class DSSignalRadioEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDBE282F7DDF41E39, GameType.DS)]
    public class DSSignalRadioEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<BooleanFact> SignalFact;
    }

    [RTTI.Serializable(0x3B91E034182330E4, GameType.DS)]
    public class DSSignboardApvConfig : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EDSSignboardType Type;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<ArtPartsVariationResource> Apv;
        [RTTI.Member(5, 0x30, "Logic")] public bool IsSpoiler;
    }

    [RTTI.Serializable(0xD86D8127F9F79036, GameType.DS)]
    public class DSSignboardComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDDE412B33369B675, GameType.DS)]
    public class DSSignboardComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xEB22CF909C259256, GameType.DS)]
    public class DSSignboardConfig : Resource
    {
        [RTTI.Member(2, 0x20)] public float DistanceToRealize;
        [RTTI.Member(3, 0x24)] public float DistanceToUnrealize;
        [RTTI.Member(4, 0x28)] public float DistanceToRealizeForSensor;
        [RTTI.Member(5, 0x2C)] public float DistanceToUnrealizeForSensor;
        [RTTI.Member(6, 0x30)] public float StaminaRecoveryValue;
        [RTTI.Member(7, 0x34)] public float BBStressRecoveryValue;
        [RTTI.Member(16, 0x38)] public Ref<CurveResource> CurveDistanceAlpha;
        [RTTI.Member(17, 0x40)] public Ref<CurveResource> CurveDistanceAlphaForSensor;
        [RTTI.Member(18, 0x48)] public Ref<CurveResource> CurveDistanceAlphaForNeon;
        [RTTI.Member(19, 0x50)] public Ref<CurveResource> CurveDistanceAlphaForNeonForSensor;
        [RTTI.Member(20, 0x58)] public Ref<CurveResource> CurveFirstContactAlpha;
        [RTTI.Member(21, 0x60)] public Ref<CurveResource> CurveFirstContactToNormal;
        [RTTI.Member(22, 0x68)] public Ref<CurveResource> CurveStartFadeTime;
        [RTTI.Member(23, 0x70)] public Ref<CurveResource> CurveEndFadeTime;
        [RTTI.Member(13, 0x78)] public uint32 FirstcontactMeshHash;
        [RTTI.Member(14, 0x7C)] public uint32 NofocusMeshHash;
        [RTTI.Member(15, 0x80)] public uint32 FocusMeshHash;
        [RTTI.Member(8, 0x88)] public Array<Ref<ArtPartsDataResource>> ArtPartsDataResources;
        [RTTI.Member(9, 0x98)] public Array<Ref<MeshResourceBase>> MeshResources;
        [RTTI.Member(10, 0xA8)] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(11, 0xB8)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(12, 0xC0)] public Array<Ref<DSSignboardApvConfig>> ApvConfig;
        [RTTI.Member(24, 0xD0)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(25, 0xE0)] public Ref<Fact> EnableRealizeFact;
        [RTTI.Member(26, 0xE8)] public Ref<Fact> ShowInCutSceneFact;
    }

    [RTTI.Serializable(0x6F7A740BD8F87272, GameType.DS)]
    public class DSSignboardLocator : DSLocator
    {
        [RTTI.Member(6, 0x70)] public EDSSignboardType mType;
        [RTTI.Member(7, 0x72)] public EDSArea mArea;
        [RTTI.Member(8, 0x78)] public Ref<DSNetCommentBasePhraseResource> mBasePhrase;
        [RTTI.Member(9, 0x80)] public Array<Ref<DSNetCommentOptionPhraseResource>> mOptionPhrases;
        [RTTI.Member(10, 0x90)] public Ref<DSHouseholdInfoResource> mHouseholdInfo;
    }

    [RTTI.Serializable(0xD9853F37E431A909, GameType.DS)]
    public class DSSimpleAimMeshComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFB6247AE5AA5E852, GameType.DS)]
    public class DSSimpleAimMeshComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x42D29243A2D6DA35, GameType.DS)]
    public class DSSimpleAimMeshComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Ref<RenderEffectResource> AimMeshRenderEffectResource;
        [RTTI.Member(4, 0x28, "Representation")] public RGBAColor AimMeshColor;
        [RTTI.Member(5, 0x2C, "Representation")] public float AimMeshLength;
        [RTTI.Member(6, 0x30, "Representation")] public float AimMeshTextureLength;
        [RTTI.Member(7, 0x34, "Representation")] public float AimMeshFadeInDistance;
        [RTTI.Member(8, 0x38, "Representation")] public float AimMeshFadeOutDistance;
    }

    [RTTI.Serializable(0xF16FACE1F8776DCA, GameType.DS)]
    public class DSSimpleAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC645BC14F1B80DAA, GameType.DS)]
    public class DSSimpleAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SkeletonAnimationResource>> AnimationResources;
        [RTTI.Member(3, 0x30)] public Array<float> AnimationInterpSec;
        [RTTI.Member(4, 0x40)] public Ref<MorphemeEventMappingsResource> EventMappings;
        [RTTI.Member(5, 0x48)] public Ref<DSAnimCustomResource> CustomResource;
        [RTTI.Member(6, 0x50)] public bool LoopDefaultAnimation;
        [RTTI.Member(7, 0x51)] public bool RandomizDefaultAnimation;
        [RTTI.Member(8, 0x54)] public float RandomizDefaultAnimationSec;
    }

    [RTTI.Serializable(0xBC7494C855118231, GameType.DS)]
    public class DSSimpleAnimationComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBF230C1F4DCD3833, GameType.DS)]
    public class DSSimpleAnimationMover : Mover
    {
    }

    [RTTI.Serializable(0xE46966433EE5A2C9, GameType.DS)]
    public class DSSimpleAnimationMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xA0A03002C68EF027, GameType.DS)]
    public class DSSimpleAttachToEntityMover : Mover
    {
    }

    [RTTI.Serializable(0xB336780BBA112338, GameType.DS)]
    public class DSSimpleAttachToEntityMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xDE9CAD23A70649E, GameType.DS)]
    public class DSSimpleModifiableAnimationComponent : DSSimpleAnimationComponent
    {
    }

    [RTTI.Serializable(0x1D60D7FC9BCD18B9, GameType.DS)]
    public class DSSimpleModifiableAnimationComponentResource : DSSimpleAnimationComponentResource
    {
    }

    [RTTI.Serializable(0xAFD115D92413BDE8, GameType.DS)]
    public class DSSimplePatrolComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x58A0EF2987074903, GameType.DS)]
    public class DSSimplePatrolComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float StopRange;
        [RTTI.Member(3, 0x24)] public bool RemoveEntityWhenArrivedFinalNode;
    }

    [RTTI.Serializable(0xD0AAB466CCEB0D95, GameType.DS)]
    public class DSSimpleRigidBody : Entity
    {
    }

    [RTTI.Serializable(0x29ECB4DED37D6C0, GameType.DS)]
    public class DSSimpleRigidBodyMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0x186676A1B5C660D2, GameType.DS)]
    public class DSSimpleRigidBodyMoverResource : PhysicsMoverResource
    {
    }

    [RTTI.Serializable(0x5789619BCAE341C7, GameType.DS)]
    public class DSSimpleRigidBodyResource : EntityResource
    {
    }

    [RTTI.Serializable(0x74F96F10EC79BD60, GameType.DS)]
    public class DSSimpleTalkManagerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4CB7FF3B0201AC33, GameType.DS)]
    public class DSSimpleTalkManagerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<SentenceResource>> SentenceResources;
    }

    [RTTI.Serializable(0x401378BE56531274, GameType.DS)]
    public class DSSituationSentenceGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DSSentenceSituationResource>> SituationResources;
        [RTTI.Member(4, 0x30, "General")] public HashMap<uint32_int32> SituationIndex;
    }

    [RTTI.Serializable(0xA7BFA5494DA42803, GameType.DS)]
    public class DSSkyObjectMover : Mover
    {
    }

    [RTTI.Serializable(0x7F364228DAC26D3F, GameType.DS)]
    public class DSSkyObjectMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "General")] public float HeightFromPlayer;
    }

    [RTTI.Serializable(0x7BFDAE151628BEC1, GameType.DS)]
    public class DSSleepAfterShaderAnimComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4C95E9184A3C6223, GameType.DS)]
    public class DSSleepAfterShaderAnimComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x8080478FEA2E62C9, GameType.DS)]
    public class DSSleepAfterShaderAnimComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4F3602AB1493400A, GameType.DS)]
    public class DSSmokeLocator : DSLocator
    {
        [RTTI.Member(6, 0x70)] public Ref<ParticleSystemResource> ParticleResource;
        [RTTI.Member(7, 0x78)] public WorldTransform Offset;
        [RTTI.Member(8, 0xB8)] public float Radius;
    }

    [RTTI.Serializable(0x2DFD54C60AA11C28, GameType.DS)]
    public class DSSmokeMissileMover : Mover
    {
    }

    [RTTI.Serializable(0xFFDBF07662894379, GameType.DS)]
    public class DSSmokeMissileMoverResource : MoverResource
    {
        [RTTI.Member(6, 0x28)] public EDSSmokeMissileMoverType Type;
    }

    [RTTI.Serializable(0xA3EB2017F948D854, GameType.DS)]
    public class DSSortByMissionBaggageOutputInfo
    {
    }

    [RTTI.Serializable(0xFD93A5DFCBE33C28, GameType.DS)]
    public class DSSound
    {
    }

    [RTTI.Serializable(0x1164DC531D8FC919, GameType.DS)]
    public class DSSoundBankComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9B987AF5B8510177, GameType.DS)]
    public class DSSoundBankComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public Ref<WwiseBankResource> SoundBankResource;
    }

    [RTTI.Serializable(0x6E45C609287449E, GameType.DS)]
    public class DSSoundNodeGraphBindings : RTTIObject
    {
    }

    [RTTI.Serializable(0xE2FCCC532548693C, GameType.DS)]
    public class DSSoundNodeGraphBindingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3B9CC2C3B0F99AEB, GameType.DS)]
    public class DSSoundSpeakerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6F87B76911E9BBC6, GameType.DS)]
    public class DSSoundSpeakerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<SoundResource> SoundResource;
        [RTTI.Member(3, 0x28)] public bool IsMovable;
        [RTTI.Member(4, 0x29)] public bool Is3D;
        [RTTI.Member(5, 0x2A)] public bool IsMusic;
    }

    [RTTI.Serializable(0xBE1208B9706580B8, GameType.DS)]
    public class DSSoundSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x84356603F992930E, GameType.DS)]
    public class DSSoundZoomParameterResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<WwiseZoomParameterResource> Zoom;
        [RTTI.Member(3, 0x28)] public Ref<WwiseZoomParameterResource> Compass;
        [RTTI.Member(4, 0x30)] public Ref<WwiseZoomParameterResource> CompassZoom;
        [RTTI.Member(5, 0x38)] public Ref<WwiseZoomParameterResource> CutsceneZoom;
        [RTTI.Member(6, 0x40)] public float DurationTimeSeconds;
    }

    [RTTI.Serializable(0x938C8353075260B, GameType.DS)]
    public class DSSpawnFlowerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x279E11D7EF662CD1, GameType.DS)]
    public class DSSpawnFlowerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "SpawnParticleSystem")] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(4, 0x28, "SpawnParticleSystem")] public WorldTransform Transform;
        [RTTI.Member(5, 0x68, "SpawnParticleSystem")] public float Cooldown;
        [RTTI.Member(7, 0x70, "Probe")] public Vec3 ProbeOffset;
        [RTTI.Member(8, 0x80, "Probe")] public float ProbeRadius;
        [RTTI.Member(9, 0x84, "Probe")] public float MinimumVelocity;
    }

    [RTTI.Serializable(0xE76F09265E5B46AF, GameType.DS)]
    public class DSSpawnNotifyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x47BDD6C42319B46, GameType.DS)]
    public class DSSpawnNotifyComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x30C6141145D2BB16, GameType.DS)]
    public class DSSpiralStoneResource
    {
        [RTTI.Member(0, 0x0)] public Ref<ModelPartResource> StoneModelPart;
        [RTTI.Member(1, 0x8)] public int NumAscendingStones;
        [RTTI.Member(2, 0xC)] public int NumFloatingStones;
        [RTTI.Member(3, 0x10)] public float MinimumScale;
        [RTTI.Member(4, 0x14)] public float MaximumScale;
        [RTTI.Member(5, 0x18)] public float CollisionRadius;
        [RTTI.Member(6, 0x1C)] public float CollisionInitialSpeed;
        [RTTI.Member(7, 0x20)] public float CollisionAcceleration;
    }

    [RTTI.Serializable(0xD09A6B4EAD1DD661, GameType.DS)]
    public class DSSpreadMissileShellComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCA566B03E326F231, GameType.DS)]
    public class DSSpreadMissileShellComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x27D946AE4F26EFD3, GameType.DS)]
    public class DSSpreadMissileShellComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Effect")] public Array<Ref<ParticleSystemResource>> Particles;
    }

    [RTTI.Serializable(0x4B3830C62D59E018, GameType.DS)]
    public class DSSpreadMissileShellMover : Mover
    {
    }

    [RTTI.Serializable(0xD205ED595EF31CA, GameType.DS)]
    public class DSSpreadMissileShellMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x238C3CC8AF27B0CA, GameType.DS)]
    public class DSStaticMeshInstance : StaticMeshInstance
    {
        [RTTI.Member(23, 0x200, "DS")] public BoundingBox3 mAnnihilationBoundingBox;
    }

    [RTTI.Serializable(0xC01F90A6A8D1BFB5, GameType.DS)]
    public class DSStickyBulletEntity : Entity
    {
    }

    [RTTI.Serializable(0x7DD6FA3C5F80B402, GameType.DS)]
    public class DSStickyBulletEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x9F2B4CD781F8A676, GameType.DS)]
    public class DSStickyBulletEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Effect")] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(32, 0x110, "Effect")] public Array<Ref<SoundResource>> Sounds;
        [RTTI.Member(34, 0x120, "ExtraPart")] public Ref<DSWeaponExtraParts> ExtraParts;
    }

    [RTTI.Serializable(0xACD45D01949070F4, GameType.DS)]
    public class DSStickyBulletMover : Mover
    {
    }

    [RTTI.Serializable(0x7AB5238E876F10C3, GameType.DS)]
    public class DSStickyBulletMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xD7872CF604E9724D, GameType.DS)]
    public class DSStimulusCollector : CoreObject
    {
        [RTTI.Member(3, 0x20, "Default")] public Array<DSAuralStimulusItem> AuralStimuluses;
    }

    [RTTI.Serializable(0x26F73F01F3EDE11B, GameType.DS)]
    public class DSStoneSpiralEffectEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCA111E3280015C80, GameType.DS)]
    public class DSStoneSpiralEffectEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x0, "Stones", true)] public uint32 NumStonesHelix;
        [RTTI.Member(4, 0x0, "Stones", true)] public uint32 NumStones;
        [RTTI.Member(3, 0x20, "Stones")] public Array<DSSpiralStoneResource> Stones;
        [RTTI.Member(6, 0x30, "Stones")] public float MaxSpiralRadius;
        [RTTI.Member(8, 0x34, "AscendingStones")] public float InitialAscendSpeed;
        [RTTI.Member(9, 0x38, "AscendingStones")] public float AscendAcceleration;
        [RTTI.Member(10, 0x3C, "AscendingStones")] public float StartHeight;
        [RTTI.Member(11, 0x40, "AscendingStones")] public float MaxHeight;
        [RTTI.Member(12, 0x44, "AscendingStones")] public float ShrinkTime;
        [RTTI.Member(13, 0x48, "AscendingStones")] public float TimeAlive;
        [RTTI.Member(14, 0x4C, "AscendingStones")] public float SpawnIntervalJitter;
        [RTTI.Member(16, 0x50, "AscendingHelixStones")] public float SpawnIntervalHelix;
        [RTTI.Member(17, 0x54, "AscendingHelixStones")] public float HelixRadius;
        [RTTI.Member(18, 0x58, "AscendingHelixStones")] public float HelixRadiusJitter;
        [RTTI.Member(19, 0x5C, "AscendingHelixStones")] public float HelixPositionJitter;
        [RTTI.Member(20, 0x60, "AscendingHelixStones")] public float OrbitSpeed;
        [RTTI.Member(21, 0x64, "AscendingHelixStones")] public float HelixEmitterRotationSpeed;
        [RTTI.Member(23, 0x68, "AscendingStraightStones")] public float SpawnInterval;
        [RTTI.Member(25, 0x6C, "FloatingStones")] public float FloatingStoneCycleTime;
        [RTTI.Member(26, 0x70, "FloatingStones")] public float FloatingStoneCycleTimeJitter;
        [RTTI.Member(27, 0x74, "FloatingStones")] public float FloatingStoneCycleHeight;
        [RTTI.Member(28, 0x78, "FloatingStones")] public float FloatingStoneCycleHeightJitter;
        [RTTI.Member(29, 0x7C, "FloatingStones")] public float FloatingStoneRotationSpeed;
        [RTTI.Member(30, 0x80, "FloatingStones")] public float FloatingStoneRotationSpeedJitter;
        [RTTI.Member(32, 0x84, "FallingStones")] public int MaxBounces;
        [RTTI.Member(33, 0x88, "FallingStones")] public float Elasticity;
        [RTTI.Member(34, 0x8C, "FallingStones")] public float TimeOnGround;
        [RTTI.Member(36, 0x90, "Sounds")] public Ref<SoundResource> OrbitSound;
        [RTTI.Member(37, 0x98, "Sounds")] public Ref<SoundResource> DropSound;
        [RTTI.Member(38, 0xA0, "Sounds")] public Ref<SoundResource> RockImpactSound;
        [RTTI.Member(40, 0xA8, "KnotSpace")] public bool KnotSpaceActivation;
        [RTTI.Member(41, 0xA9, "KnotSpace")] public bool AlwaysActivated;
        [RTTI.Member(43, 0xAA, "Cutscene")] public bool ActiveDuringCutscene;
    }

    [RTTI.Serializable(0x847F11D5F965D1CA, GameType.DS)]
    public class DSStoneSpiralEffectRealizerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x23366A5D6EC1399C, GameType.DS)]
    public class DSStoneSpiralEffectRealizerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> StoneSpiralEntityResource;
        [RTTI.Member(3, 0x28)] public float DistanceToActivate;
        [RTTI.Member(4, 0x30)] public Vec3 StoneSpiralOffset;
    }

    [RTTI.Serializable(0x4C1430152AD4AAF6, GameType.DS)]
    public class DSStrandComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD7919681CBB7B66E, GameType.DS)]
    public class DSStrandComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> UnHoldStrandResource;
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> HoldStrandResource;
    }

    [RTTI.Serializable(0x6CCAAD45AA5E6E95, GameType.DS)]
    public class DSStrandFloatingEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD6D3546E868573C1, GameType.DS)]
    public class DSStrandFloatingEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xD0DF997C9449844C, GameType.DS)]
    public class DSStrandFloatingEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "SpawnSettings")] public Array<Ref<ModelPartResource>> FreezeModels;
        [RTTI.Member(4, 0x30, "SpawnSettings")] public Array<Ref<ModelPartResource>> SubstanceModels;
        [RTTI.Member(43, 0x40, "SpawnSettings")] public Ref<CurveResource> VegetationSizeCurve;
        [RTTI.Member(44, 0x48, "SpawnSettings")] public Ref<CurveResource> VegetationFrameCurve;
        [RTTI.Member(45, 0x50, "SpawnSettings")] public Ref<CurveResource> VegetationRandomCurve;
        [RTTI.Member(46, 0x58, "SpawnSettings")] public Ref<CurveResource> VegetationDistortCurve;
        [RTTI.Member(47, 0x60, "SpawnSettings")] public Ref<CurveResource> VegetationFallCurve;
        [RTTI.Member(48, 0x68, "SpawnSettings")] public Ref<CurveResource> VegetationLeafFallRandCurve;
        [RTTI.Member(49, 0x70, "SpawnSettings")] public Ref<CurveResource> VegetationAgeCurve;
        [RTTI.Member(50, 0x78, "SpawnSettings")] public Ref<CurveResource> VegetationColorRandomCurve;
        [RTTI.Member(52, 0x80, "SpawnSettings")] public Array<float> VegetationSizeBakedCurve;
        [RTTI.Member(53, 0x90, "SpawnSettings")] public Array<float> VegetationFrameBakedCurve;
        [RTTI.Member(54, 0xA0, "SpawnSettings")] public Array<float> VegetationRandomBakedCurve;
        [RTTI.Member(55, 0xB0, "SpawnSettings")] public Array<float> VegetationDistortBakedCurve;
        [RTTI.Member(56, 0xC0, "SpawnSettings")] public Array<float> VegetationFallBakedCurve;
        [RTTI.Member(57, 0xD0, "SpawnSettings")] public Array<float> VegetationLeafFallRandBakedCurve;
        [RTTI.Member(58, 0xE0, "SpawnSettings")] public Array<float> VegetationAgeBakedCurve;
        [RTTI.Member(59, 0xF0, "SpawnSettings")] public Array<float> VegetationColorRandomBakedCurve;
        [RTTI.Member(34, 0x100, "SpawnSettings")] public Array<Ref<MaterialTypeResource>> SpawnMaterialTypes;
        [RTTI.Member(35, 0x110, "SpawnSettings")] public Array<Ref<DSMaterialConfigResource>> IgnoreMaterialTypes;
        [RTTI.Member(5, 0x120, "SpawnSettings")] public int NumSpawnObjects;
        [RTTI.Member(6, 0x124, "SpawnSettings")] public int NumSubstanceObjects;
        [RTTI.Member(13, 0x128, "SpawnSettings")] public float AliveAnimationSpeed;
        [RTTI.Member(7, 0x12C, "SpawnSettings")] public float SpawnIntervalTime;
        [RTTI.Member(8, 0x130, "SpawnSettings")] public float RandomRange;
        [RTTI.Member(9, 0x134, "SpawnSettings")] public float RandomScaleMin;
        [RTTI.Member(10, 0x138, "SpawnSettings")] public float RandomScaleMax;
        [RTTI.Member(11, 0x13C, "SpawnSettings")] public float RandomAnimationSpeedMin;
        [RTTI.Member(12, 0x140, "SpawnSettings")] public float RandomAnimationSpeedMax;
        [RTTI.Member(18, 0x144, "SpawnSettings")] public float CameraOffsetLength;
        [RTTI.Member(14, 0x148, "SpawnSettings")] public float AliveRandomPercentage;
        [RTTI.Member(15, 0x14C, "SpawnSettings")] public float FishPercentage;
        [RTTI.Member(16, 0x150, "SpawnSettings")] public float CrabPercentage;
        [RTTI.Member(17, 0x154, "SpawnSettings")] public float VegetationPercentage;
        [RTTI.Member(19, 0x158, "SpawnSettings")] public float FloatingMoveZDistance;
        [RTTI.Member(20, 0x15C, "SpawnSettings")] public float FloatingMoveAnimationPowerExp;
        [RTTI.Member(21, 0x160, "SpawnSettings")] public float FloatingMoveAnimationTimer;
        [RTTI.Member(36, 0x164, "SpawnSettings")] public float VegetationSizeMin;
        [RTTI.Member(37, 0x168, "SpawnSettings")] public float VegetationSizeMax;
        [RTTI.Member(39, 0x16C, "SpawnSettings")] public float ParlinOffsetMax;
        [RTTI.Member(38, 0x170, "SpawnSettings")] public float ParlinOffsetMin;
        [RTTI.Member(41, 0x174, "SpawnSettings")] public float ParlinRandomizeTimeMax;
        [RTTI.Member(40, 0x178, "SpawnSettings")] public float ParlinRandomizeTimeMin;
        [RTTI.Member(42, 0x17C, "SpawnSettings")] public float ParlinScale;
        [RTTI.Member(51, 0x180, "SpawnSettings")] public float VegetationSphereRandomSize;
        [RTTI.Member(22, 0x184, "SpawnSettings")] public int8 FishScaleVariableIndex;
        [RTTI.Member(23, 0x185, "SpawnSettings")] public int8 FishDisplaceAnimationSpeedIndex;
        [RTTI.Member(24, 0x186, "SpawnSettings")] public int8 FishDisplaceStrengthIndex;
        [RTTI.Member(25, 0x187, "SpawnSettings")] public int8 VegetationFrameVariableIndex;
        [RTTI.Member(26, 0x188, "SpawnSettings")] public int8 VegetationRandomVariableIndex;
        [RTTI.Member(27, 0x189, "SpawnSettings")] public int8 VegetationDistortVariableIndex;
        [RTTI.Member(28, 0x18A, "SpawnSettings")] public int8 VegetationFallVariableIndex;
        [RTTI.Member(29, 0x18B, "SpawnSettings")] public int8 VegetationLeafFallVariableIndex;
        [RTTI.Member(30, 0x18C, "SpawnSettings")] public int8 VegetationAgeVariableIndex;
        [RTTI.Member(31, 0x18D, "SpawnSettings")] public int8 VegetationColorRandomVariableIndex;
        [RTTI.Member(32, 0x18E, "SpawnSettings")] public bool EnableAnimation;
        [RTTI.Member(33, 0x18F, "SpawnSettings")] public bool HitOnlyTerrain;
    }

    [RTTI.Serializable(0xE6F3042D5251F35F, GameType.DS)]
    public class DSStrandFloatingEffectInstance : GeometryObject
    {
    }

    [RTTI.Serializable(0x73EEF835C86DC347, GameType.DS)]
    public class DSStrandObjectControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD165B1FE87550771, GameType.DS)]
    public class DSStrandObjectControllerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x8BC364BD8186958F, GameType.DS)]
    public class DSStrandObjectControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<EntityResource> RubbleEntityResource;
        [RTTI.Member(4, 0x28, "General")] public Array<Ref<EntityResource>> RubbleEntityResources;
        [RTTI.Member(5, 0x38, "General")] public Array<BoundingBox3> BaseBoundingBoxies;
        [RTTI.Member(6, 0x48, "General")] public Array<float> StableZOffsets;
        [RTTI.Member(7, 0x58, "General")] public Ref<ParticleSystemResource> AppearanceSignParticleResource;
        [RTTI.Member(8, 0x60, "General")] public Ref<ParticleSystemResource> FlashLightParticleResource;
        [RTTI.Member(9, 0x68, "General")] public Array<Ref<EntityResource>> LivelyEntityResources;
        [RTTI.Member(10, 0x78, "General")] public Array<Ref<CurveResource>> TarEffectParamAnimResources;
    }

    [RTTI.Serializable(0x715832C08B2273, GameType.DS)]
    public class DSStrandObjectMoveHelperComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4887AEF8736C0928, GameType.DS)]
    public class DSStrandObjectMoveHelperComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xDC5815274D4047CF, GameType.DS)]
    public class DSStrandObjectMover : Mover
    {
    }

    [RTTI.Serializable(0x984BB7155E339782, GameType.DS)]
    public class DSStrandObjectMoverResource : MoverResource
    {
        [RTTI.Member(6, 0x28)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(7, 0x38)] public Ref<DSStrandObjectPhysicsCollisionResource> PhysicsCollisionResource;
    }

    [RTTI.Serializable(0x21BE295C88467C8A, GameType.DS)]
    public class DSStrandObjectPhysicsCollisionResource : PhysicsCollisionResource
    {
        [RTTI.Member(28, 0xB0)] public Ref<DSStrandingRubbleResourceBridge> ResourceBridge;
        [RTTI.Member(29, 0xB8)] public Array<Vec3> VolumePositions;
        [RTTI.Member(30, 0xD0)] public BoundingBox3 ObstacleBound;
        [RTTI.Member(31, 0xF0)] public Shape2DExtrusion Shape2d;
        [RTTI.Member(32, 0x130)] public Ref<TerrainHull> Hull;
        [RTTI.Member(33, 0x138)] public Array<Vec3> SurfaceEffectPositions;
        [RTTI.Member(34, 0x148)] public Array<Mat44> EdgeEffectPositions;
        [RTTI.Member(35, 0x158)] public bool EnableSurfaceEffectPositions;
        [RTTI.Member(36, 0x160)] public Array<Vec3> ConvexHullVertices;
        [RTTI.Member(37, 0x170)] public Array<uint16> ConvexHullIndiices;
        [RTTI.Member(38, 0x180)] public Array<Vec3> CollsionVertices;
        [RTTI.Member(39, 0x190)] public Array<uint16> CollisionIndiices;
        [RTTI.Member(40, 0x1A0)] public Array<uint16> CollisionInfos;
    }

    [RTTI.Serializable(0x82499CA1FD3D72A6, GameType.DS)]
    public class DSStrandVisibleControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5BC5ED9ACA34A4E4, GameType.DS)]
    public class DSStrandVisibleControlComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x1ED9BF031F969277, GameType.DS)]
    public class DSStrandingRubbleEntity : Entity
    {
    }

    [RTTI.Serializable(0xF3ED657E8736EDE, GameType.DS)]
    public class DSStrandingRubbleEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x628CE21033FE693B, GameType.DS)]
    public class DSStrandingRubbleEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "General")] public String Name;
        [RTTI.Member(33, 0x108, "DS")] public float DefaultLifeTime;
        [RTTI.Member(34, 0x110, "DS")] public Ref<DSStrandingRubbleParameterResource> ParametersResource;
        [RTTI.Member(35, 0x118, "DS")] public Ref<DSStrandingRubbleResourceBridge> ResourceBridge;
        [RTTI.Member(36, 0x120, "DS")] public Ref<RenderEffectResource> TarEffectRenderEffectResource;
        [RTTI.Member(37, 0x128, "DS")] public Ref<ParticleSystemResource> AppearanceSignParticleResource0;
        [RTTI.Member(38, 0x130, "DS")] public Ref<ParticleSystemResource> AppearanceSignParticleResource1;
        [RTTI.Member(39, 0x138, "DS")] public Ref<ObstacleComponentResource> ObstacleComponentResource;
        [RTTI.Member(40, 0x140, "DS")] public Ref<AIPathObjectCategory> JumpLinkCategory;
        [RTTI.Member(41, 0x148, "DS")] public Ref<StaticMeshResource> GroundTarMeshResource;
        [RTTI.Member(42, 0x150, "DS")] public Array<Ref<ParticleSystemResource>> WaterSplashResources;
        [RTTI.Member(43, 0x160, "DS")] public Ref<ModelPartResource> SubModelPartResource;
        [RTTI.Member(44, 0x168, "DS")] public Ref<CurveResource> AppearingShaderAnimCurve;
        [RTTI.Member(45, 0x170, "DS")] public Array<Ref<EffectComponentResource>> EffectComponentResources;
        [RTTI.Member(46, 0x180, "DS")] public Ref<ShakeResource> ImpactShakeResource;
        [RTTI.Member(47, 0x188, "DS")] public Array<Mat44> HelperMatrices;
        [RTTI.Member(48, 0x198, "DS")] public Array<uint32> HelperNameHashes;
        [RTTI.Member(49, 0x1A8, "DS")] public Ref<ModelPartResource> MainMeshModelPartResource;
        [RTTI.Member(50, 0x1B0, "DS")] public Ref<ModelPartResource> ShadowMeshModelPartResource;
        [RTTI.Member(51, 0x1B8, "DS")] public Ref<ChildEntityComponentResource> TarChildEntityComponentResource;
        [RTTI.Member(52, 0x1C0, "DS")] public BoundingBox3 BaseBoundingBox;
    }

    [RTTI.Serializable(0x915E456F41298D92, GameType.DS)]
    public class DSStrandingRubbleParameterResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float LifeTime;
        [RTTI.Member(4, 0x24, "General")] public float FloatingLife;
        [RTTI.Member(5, 0x28, "General")] public float AirSpeed;
        [RTTI.Member(6, 0x2C, "General")] public float WaterSpeed;
        [RTTI.Member(7, 0x30, "General")] public float SinkingWaterSpeed;
        [RTTI.Member(8, 0x34, "General")] public float WaterResistance;
        [RTTI.Member(9, 0x38, "General")] public float WaterResistanceWhenSinking;
        [RTTI.Member(10, 0x3C, "General")] public float WaterResistanceWhenAttacked;
        [RTTI.Member(11, 0x40, "General")] public float WaterResistanceWhenDeactivation;
        [RTTI.Member(12, 0x44, "General")] public float SinkingWaterResistance;
        [RTTI.Member(13, 0x48, "General")] public float StartZOffset;
        [RTTI.Member(14, 0x4C, "General")] public float DrainMoveAcceleration;
        [RTTI.Member(15, 0x50, "General")] public float DrainMoveResistance;
        [RTTI.Member(16, 0x54, "General")] public float StrandStartDistance;
        [RTTI.Member(17, 0x58, "General")] public float RotateResistanceFactor;
        [RTTI.Member(18, 0x5C, "General")] public float RotateResilienceFactor;
        [RTTI.Member(19, 0x60, "General")] public float RespawnCooldownTime;
        [RTTI.Member(20, 0x64, "General")] public float SpawnDelayRandomTime;
        [RTTI.Member(21, 0x68, "General")] public float PhysicsMass;
        [RTTI.Member(22, 0x6C, "General")] public float TargetStabledWaterSpeed;
        [RTTI.Member(23, 0x70, "General")] public float NavExclutionAreaOffset;
        [RTTI.Member(24, 0x74, "General")] public float TarAnimStartTimeBias;
        [RTTI.Member(25, 0x78, "General")] public float TarAnimSpeedScale;
        [RTTI.Member(26, 0x7C, "General")] public float AutoShakeSpeed;
        [RTTI.Member(27, 0x80, "General")] public float AutoShakeInclination;
        [RTTI.Member(28, 0x84, "General")] public float DisappearingFadeDelayTime;
        [RTTI.Member(29, 0x90, "General")] public Vec3 CenterOfMassOffset;
        [RTTI.Member(30, 0xA0, "General")] public bool IsEnableFreeRotation;
        [RTTI.Member(31, 0xA1, "General")] public bool DisableCatcherResponse;
        [RTTI.Member(32, 0xA2, "General")] public bool DisableFlowMode;
        [RTTI.Member(33, 0xA3, "General")] public bool EnableAutoSpeedCorrect;
        [RTTI.Member(34, 0xA4, "General")] public bool EnableNavExclusionArea;
        [RTTI.Member(35, 0xA5, "General")] public bool EnableJumpLink;
        [RTTI.Member(36, 0xA6, "General")] public bool EnableDetailedCalc;
        [RTTI.Member(37, 0xA7, "General")] public bool IsEnableDisappearingFade;
        [RTTI.Member(38, 0xA8, "General")] public EDSStrandObjectSeType SeType;
    }

    [RTTI.Serializable(0xB9153BF9EBB92CCD, GameType.DS)]
    public class DSStrandingRubbleResourceBridge : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DSStrandingRubbleParameterResource> ParametersResource;
    }

    [RTTI.Serializable(0x602B4D5FDF35A27D, GameType.DS)]
    public class DSStreamingDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xB0A32211F2B9E5D8, GameType.DS)]
    public class DSStringHashResource : Resource
    {
        [RTTI.Member(2, 0x20)] public uint32 Hash;
    }

    [RTTI.Serializable(0xAD2FB70F4C9145A5, GameType.DS)]
    public class DSStringHashResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE63C6CE13AED1CB3, GameType.DS)]
    public class DSSubMissionResource : DSExMissionResourceBase
    {
        [RTTI.Member(40, 0x178)] public Ref<DSMissionResurrectInfo> ResurrectTimeInfo;
    }

    [RTTI.Serializable(0x641334C3B4E8066, GameType.DS)]
    public class DSSubMissionResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE6F7FDA0CBB807CF, GameType.DS)]
    public class DSSubspaceShelfBaggageDef
    {
        [RTTI.Member(0, 0x0)] public Ref<DSLocator> Locator;
        [RTTI.Member(1, 0x8)] public String BaggageName;
    }

    [RTTI.Serializable(0x58460D5FA23A113, GameType.DS)]
    public class DSSuitPartsParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSSuitPartsId Id;
        [RTTI.Member(4, 0x21, "Parameters")] public EDSSuitPartsCategory Category;
        [RTTI.Member(5, 0x28, "Parameters")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(6, 0x30, "Parameters")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(7, 0x38, "Parameters")] public String IconTextureName;
        [RTTI.Member(8, 0x40, "Parameters")] public EDSUIEquipFuncIcon EquipFuncIcon;
        [RTTI.Member(9, 0x48, "Parameters")] public Ref<DSGameEquipmentListItem> ListItem;
        [RTTI.Member(10, 0x50, "Parameters")] public float Value;
        [RTTI.Member(11, 0x54, "Parameters")] public float ValueDecreaseSpeed;
        [RTTI.Member(12, 0x58, "Parameters")] public float ValueRecoverSpeed;
        [RTTI.Member(13, 0x5C, "Parameters")] public float ValueRecoverWait;
    }

    [RTTI.Serializable(0xED4EE5A888F9AE22, GameType.DS)]
    public class DSSuperLowModelEntity : DynamicPrefabEntity
    {
    }

    [RTTI.Serializable(0xE351C68580C46BE, GameType.DS)]
    public class DSSuperLowModelEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x2EEAB98A46539CCF, GameType.DS)]
    public class DSSuperLowModelEntityResource : DynamicPrefabEntityResource
    {
        [RTTI.Member(34, 0x108, "SuperLow")] public float FadeTime;
        [RTTI.Member(35, 0x10C, "SuperLow")] public float ActivateWaitTime;
        [RTTI.Member(36, 0x110, "SuperLow")] public float SwitchDistanceOffset;
        [RTTI.Member(37, 0x118, "SuperLow")] public IVec2 TileCoord;
        [RTTI.Member(33, 0x120, "SuperLow")] public ESuperLowModelType Type;
        [RTTI.Member(38, 0x128, "SuperLow")] public Array<GGUUID> WaitStreamingPrefabInstancesUUIDs;
        [RTTI.Member(39, 0x138, "SuperLow")] public GGUUID TargetSceneUUID;
        [RTTI.Member(41, 0x148, "SuperLow")] public bool IsEnableForceDispOffRect;
        [RTTI.Member(40, 0x150, "SuperLow")] public FRect ForceDispOffRect;
    }

    [RTTI.Serializable(0x92E08B4BE8C8ED5C, GameType.DS)]
    public class DSSupportBtComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB81639B88CBAEC2D, GameType.DS)]
    public class DSSupportBtComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3FCA9FFDD906A756, GameType.DS)]
    public class DSSupportBtComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<EffectComponentResource>> EffectComponentResources;
        [RTTI.Member(3, 0x30)] public Ref<StaticMeshResource> GroundTarMeshResource;
        [RTTI.Member(4, 0x38)] public Array<Ref<SentenceResource>> EchoSentenceResources;
        [RTTI.Member(5, 0x48)] public Array<Ref<SentenceResource>> BirthdaySentenceResources;
        [RTTI.Member(6, 0x58)] public Ref<DSAnimInfoResource> AnimInfoResource;
    }

    [RTTI.Serializable(0xE05A25FDB640BA25, GameType.DS)]
    public class DSSupportBtSeedComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x38C8ADF402AB17EA, GameType.DS)]
    public class DSSupportBtSeedComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> SupportBtResource;
    }

    [RTTI.Serializable(0xAD2115F134E1A067, GameType.DS)]
    public class DSSystemSettings : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSSystemSettingsFile>> Files;
    }

    [RTTI.Serializable(0xADE13AB5D2AF9A48, GameType.DS)]
    public class DSSystemSettingsFile : ServerSettingsList
    {
        [RTTI.Member(6, 0x38, "System")] public uint32 Index;
        [RTTI.Member(4, 0x40)] public int64 CompatibleVersion;
        [RTTI.Member(7, 0x48, "System")] public uint64 ExportedTime;
    }

    [RTTI.Serializable(0x1FA5868C3AD3856D, GameType.DS)]
    public class DSTacticalPoint : WorldNode
    {
        [RTTI.Member(5, 0x60, "Logic")] public float Radius;
        [RTTI.Member(6, 0x64, "Logic")] public int Id;
        [RTTI.Member(7, 0x68, "Logic")] public uint32 Hash;
    }

    [RTTI.Serializable(0x32DFFF33CE1A1DF0, GameType.DS)]
    public class DSTacticalPointGroup : ParentWorldNode
    {
        [RTTI.Member(7, 0x80, "Logic")] public String Tag;
        [RTTI.Member(8, 0x88, "Logic")] public Array<Ref<WorldNode>> Nodes;
    }

    [RTTI.Serializable(0xDDCA0ED1EDF53984, GameType.DS)]
    public class DSTalkComponent : TalkComponent
    {
    }

    [RTTI.Serializable(0x701CE188DC78B28C, GameType.DS)]
    public class DSTalkComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x28479D555A480A7, GameType.DS)]
    public class DSTalkManagerGameSettingsResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General", true)] public Array<EDSGameStateForScript> StopRadioWhen;
        [RTTI.Member(4, 0x30, "General", true)] public Array<EDSGameStateForScript2> StopRadioWhen2;
        [RTTI.Member(5, 0x40, "General", true)] public Array<EDSGameStateForScript> PreventRadioWhen;
        [RTTI.Member(6, 0x50, "General", true)] public Array<EDSGameStateForScript2> PreventRadioWhen2;
        [RTTI.Member(7, 0x60, "General", true)] public Array<EDSGameStateForScript> PauseWhen;
        [RTTI.Member(8, 0x70, "General", true)] public Array<EDSGameStateForScript2> PauseWhen2;
        [RTTI.Member(9, 0x80, "General", true)] public Array<EDSGameStateForScript> StopWhen;
        [RTTI.Member(10, 0x90, "General", true)] public Array<EDSGameStateForScript2> StopWhen2;
        [RTTI.Member(12, 0xA0, "Hidden")] public uint64 StopRadioWhenBits;
        [RTTI.Member(13, 0xA8, "Hidden")] public uint64 PreventRadioWhenBits;
        [RTTI.Member(14, 0xB0, "Hidden")] public uint64 PauseWhenBits;
        [RTTI.Member(15, 0xB8, "Hidden")] public uint64 StopWhenBits;
    }

    [RTTI.Serializable(0x804AE7004B8F1006, GameType.DS)]
    public class DSTarEffectResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<RenderEffectResource> TarEffectRenderEffectResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<RenderEffectResource> TarPrePassEffectRenderEffectResource;
        [RTTI.Member(5, 0x30, "General")] public Ref<ShaderResource> TarSurfaceSimShaderResource;
        [RTTI.Member(6, 0x38, "General")] public Ref<ShaderResource> TarDebrisShaderResource;
        [RTTI.Member(7, 0x40, "General")] public Ref<ShaderResource> TarEffectRayCheckShaderResource;
        [RTTI.Member(8, 0x48, "General")] public Ref<ShaderResource> PreComputeWaveOffsetShaderResource;
    }

    [RTTI.Serializable(0x6D2A55C4F01DD1BE, GameType.DS)]
    public class DSTarFloatingEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4638D41EBC038E0F, GameType.DS)]
    public class DSTarFloatingEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB7A87742B8651C8A, GameType.DS)]
    public class DSTarFloatingEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "SpawnSettings")] public Array<Ref<ModelPartResource>> Models;
        [RTTI.Member(4, 0x30, "SpawnSettings")] public int NumSpawnObjects;
        [RTTI.Member(5, 0x34, "SpawnSettings")] public float FirstModelRatio;
        [RTTI.Member(11, 0x38, "SpawnSettings")] public float AliveAnimationSpeed;
        [RTTI.Member(6, 0x3C, "SpawnSettings")] public float RandomRange;
        [RTTI.Member(7, 0x40, "SpawnSettings")] public float RandomScaleMin;
        [RTTI.Member(8, 0x44, "SpawnSettings")] public float RandomScaleMax;
        [RTTI.Member(9, 0x48, "SpawnSettings")] public float RandomAnimationSpeedMin;
        [RTTI.Member(10, 0x4C, "SpawnSettings")] public float RandomAnimationSpeedMax;
        [RTTI.Member(12, 0x50, "SpawnSettings")] public float AliveRandomPercentage;
        [RTTI.Member(13, 0x54, "SpawnSettings")] public int8 ScaleVariableIndex;
        [RTTI.Member(14, 0x55, "SpawnSettings")] public int8 DisplaceAnimationSpeedIndex;
        [RTTI.Member(15, 0x56, "SpawnSettings")] public int8 DisplaceStrengthIndex;
        [RTTI.Member(16, 0x57, "SpawnSettings")] public bool EnableAnimation;
    }

    [RTTI.Serializable(0xAE3F7B9C29DF63AB, GameType.DS)]
    public class DSTarFloatingEffectInstance : GeometryObject
    {
    }

    [RTTI.Serializable(0x96C13B1028788C5F, GameType.DS)]
    public class DSTarInteractionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBE7485FCBE3A48C8, GameType.DS)]
    public class DSTarInteractionComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSTarInteractionConfig>> Configs;
        [RTTI.Member(3, 0x30)] public bool ShouldCheckTarHeightUnderLimitOnly;
    }

    [RTTI.Serializable(0xE1D7B9AD29C07935, GameType.DS)]
    public class DSTarInteractionConfig : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String HelperName;
        [RTTI.Member(3, 0x28)] public float Radius;
    }

    [RTTI.Serializable(0xE4BB3535AB89C90E, GameType.DS)]
    public class DSTarMeshOnTerrainComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE5F23DCD11727DAA, GameType.DS)]
    public class DSTarMeshOnTerrainComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF57D9A8A85DDB94D, GameType.DS)]
    public class DSTarMeshOnTerrainComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public bool IsSingleShotMode;
        [RTTI.Member(3, 0x21)] public bool IsEnableMultiTileMode;
        [RTTI.Member(4, 0x22)] public bool IsEnablePushFlowing;
        [RTTI.Member(5, 0x24)] public float PushFlowingRadius;
        [RTTI.Member(6, 0x28)] public float FlowSpeed;
        [RTTI.Member(7, 0x2C)] public float BaseScale;
        [RTTI.Member(8, 0x30)] public Ref<CurveResource> StartScaleCurve;
        [RTTI.Member(9, 0x38)] public Ref<CurveResource> EndScaleCurve;
    }

    [RTTI.Serializable(0x29BD5938A841A5AB, GameType.DS)]
    public class DSTarPhysicsMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0xE0D5F66C2645151E, GameType.DS)]
    public class DSTarPhysicsMoverResource : PhysicsMoverResource
    {
    }

    [RTTI.Serializable(0xEE99ED854082498A, GameType.DS)]
    public class DSTarWaterInteractionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF40DFE831C3E96DD, GameType.DS)]
    public class DSTarWaterInteractionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Transform")] public Ref<LocatorResource> LocatorEntityActorResource;
        [RTTI.Member(10, 0x38, "Logic")] public Ref<WaterEffectComponentResource> WaterEffectResource;
    }

    [RTTI.Serializable(0x6A1C3DF720C4CB2C, GameType.DS)]
    public class DSTarWaterPlaneEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDAC32C66B9EC7852, GameType.DS)]
    public class DSTarWaterPlaneEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Transform")] public Ref<LocatorResource> LocatorEntityActorResource;
        [RTTI.Member(9, 0x38, "Transform")] public String HelperName;
        [RTTI.Member(10, 0x40, "Transform")] public Ref<CurveResource> HeightOffsetCurveResourceZ;
    }

    [RTTI.Serializable(0x95D8A5ABD59FA0F3, GameType.DS)]
    public class DSTargetConstrainCameraParam : Resource
    {
        [RTTI.Member(3, 0x20, "Parameters")] public Vec3 CameraOffset;
        [RTTI.Member(4, 0x30, "Parameters")] public Vec3 TargetOffset;
        [RTTI.Member(5, 0x40, "Parameters")] public float Fov;
        [RTTI.Member(6, 0x44, "Parameters")] public float InterpTimeStart;
        [RTTI.Member(7, 0x48, "Parameters")] public float InterpTimeEnd;
        [RTTI.Member(8, 0x4C, "Parameters")] public float LifeTime;
        [RTTI.Member(9, 0x50, "Parameters")] public float DelayTraceTime;
        [RTTI.Member(10, 0x54, "Parameters")] public bool EnableInAroundCamera;
        [RTTI.Member(11, 0x55, "Parameters")] public bool EnableInTpsCamera;
        [RTTI.Member(12, 0x56, "Parameters")] public bool EnableInSubjectiveCamera;
        [RTTI.Member(13, 0x57, "Parameters")] public bool FixMode;
        [RTTI.Member(14, 0x58, "Parameters")] public bool StopMove;
    }

    [RTTI.Serializable(0xFE0696924B810981, GameType.DS)]
    public class DSTargetConstrainCameraParamSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8D2FB72EB3A3AD46, GameType.DS)]
    public class DSTelopTipsResource : DSTipsResourceBase
    {
        [RTTI.Member(10, 0x40, "Attribute")] public EDSTipsGroup Group;
    }

    [RTTI.Serializable(0x2DACD62743CA7EF4, GameType.DS)]
    public class DSTemperatureVolume : DSCustomVolume
    {
        [RTTI.Member(10, 0xB0, "DS")] public float FadeDistance;
        [RTTI.Member(11, 0xB4, "DS")] public float Temperature;
    }

    [RTTI.Serializable(0xD264D4606BBD4C4, GameType.DS)]
    public class DSTerminalAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3CF5FF62369D3C56, GameType.DS)]
    public class DSTerminalAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Terminal")] public float DistanceToRaise;
        [RTTI.Member(4, 0x24, "Terminal")] public float GroundOffset;
        [RTTI.Member(5, 0x28, "Terminal")] public float RaisingOffset;
        [RTTI.Member(6, 0x2C, "Terminal")] public float DropDownOffset;
        [RTTI.Member(7, 0x30, "Terminal")] public float RotateSpeedGain;
        [RTTI.Member(8, 0x38, "Terminal")] public Ref<SoundResource> ActiveSoundResource;
        [RTTI.Member(9, 0x40, "Terminal")] public Ref<SoundResource> DeactiveSoundResource;
    }

    [RTTI.Serializable(0xE2DCE8387F78CD67, GameType.DS)]
    public class DSTerminalGraphArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xDC638CF278785D50, GameType.DS)]
    public class DSTerminalGraphArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4095043CC8B85FA2, GameType.DS)]
    public class DSTerminalGraphBonusArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xDA2C342E2260EDC3, GameType.DS)]
    public class DSTerminalGraphBonusArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7D168073A2761AF3, GameType.DS)]
    public class DSTerminalGraphEvaluationArgs : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x5CC2EEAD689D8C1C, GameType.DS)]
    public class DSTerminalGraphEvaluationArgsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x696CC9815F084BED, GameType.DS)]
    public class DSTerminalGraphResource : Resource
    {
        [RTTI.Member(6, 0x28)] public Ref<GraphProgramResource> Wakeup;
        [RTTI.Member(7, 0x30)] public Ref<GraphProgramResource> EnterTopMenu;
        [RTTI.Member(8, 0x38)] public Ref<GraphProgramResource> DecideOrder;
        [RTTI.Member(9, 0x40)] public Ref<GraphProgramResource> DecideOrderSimpleSum;
        [RTTI.Member(10, 0x48)] public Ref<GraphProgramResource> DecideOrderSimpleRobot;
        [RTTI.Member(22, 0x50)] public Ref<GraphProgramResource> EnterBaggageMenu;
        [RTTI.Member(15, 0x58)] public Ref<GraphProgramResource> DecideBaggageMenu;
        [RTTI.Member(16, 0x60)] public Ref<GraphProgramResource> DecideBaggageMenuForBonus;
        [RTTI.Member(23, 0x68)] public Ref<GraphProgramResource> EnterCarryBaggage;
        [RTTI.Member(24, 0x70)] public Ref<GraphProgramResource> EndCarryBaggage;
        [RTTI.Member(25, 0x78)] public Ref<GraphProgramResource> EnterStoredShelf;
        [RTTI.Member(26, 0x80)] public Ref<GraphProgramResource> EndStoredShelf;
        [RTTI.Member(13, 0x88)] public Ref<GraphProgramResource> DecideDelivery;
        [RTTI.Member(27, 0x90)] public Ref<GraphProgramResource> EndDelivery;
        [RTTI.Member(28, 0x98)] public Ref<GraphProgramResource> EnterResult;
        [RTTI.Member(29, 0xA0)] public Ref<GraphProgramResource> EnterResult2;
        [RTTI.Member(17, 0xA8)] public Ref<GraphProgramResource> DecideResult;
        [RTTI.Member(18, 0xB0)] public Ref<GraphProgramResource> DecideResult2;
        [RTTI.Member(30, 0xB8)] public Ref<GraphProgramResource> EnterStars;
        [RTTI.Member(21, 0xC0)] public Ref<GraphProgramResource> DecideStars;
        [RTTI.Member(20, 0xC8)] public Ref<GraphProgramResource> DecideClose;
        [RTTI.Member(31, 0xD0)] public Ref<GraphProgramResource> EnterFriendship;
        [RTTI.Member(32, 0xD8)] public Ref<GraphProgramResource> EndFriendship;
        [RTTI.Member(33, 0xE0)] public Ref<GraphProgramResource> EnterReceiver;
        [RTTI.Member(34, 0xE8)] public Ref<GraphProgramResource> EndReceiver;
        [RTTI.Member(35, 0xF0)] public Ref<GraphProgramResource> EnterReceiverBonus;
        [RTTI.Member(36, 0xF8)] public Ref<GraphProgramResource> EndReceiverBonus;
        [RTTI.Member(37, 0x100)] public Ref<GraphProgramResource> EnterReceiverQpid;
        [RTTI.Member(38, 0x108)] public Ref<GraphProgramResource> EndReceiverQpid;
        [RTTI.Member(39, 0x110)] public Ref<GraphProgramResource> EnterReceiverDisappear;
        [RTTI.Member(40, 0x118)] public Ref<GraphProgramResource> EndReceiverDisappear;
        [RTTI.Member(41, 0x120)] public Ref<GraphProgramResource> EnterBriefing;
        [RTTI.Member(42, 0x128)] public Ref<GraphProgramResource> EndBriefing;
        [RTTI.Member(43, 0x130)] public Ref<GraphProgramResource> EnterPrivateBox;
        [RTTI.Member(44, 0x138)] public Ref<GraphProgramResource> EndPrivateBox;
        [RTTI.Member(45, 0x140)] public Ref<GraphProgramResource> EnterPublicBox;
        [RTTI.Member(46, 0x148)] public Ref<GraphProgramResource> EndPublicBox;
        [RTTI.Member(47, 0x150)] public Ref<GraphProgramResource> EnterReceipt;
        [RTTI.Member(48, 0x158)] public Ref<GraphProgramResource> EndReceipt;
        [RTTI.Member(49, 0x160)] public Ref<GraphProgramResource> EnterTradeChiral;
        [RTTI.Member(51, 0x168)] public Ref<GraphProgramResource> EndTradeChiral;
        [RTTI.Member(52, 0x170)] public Ref<GraphProgramResource> CheckCanClearChiral;
        [RTTI.Member(54, 0x178)] public Ref<GraphProgramResource> EnterToPrivateRoom;
        [RTTI.Member(55, 0x180)] public Ref<GraphProgramResource> EndToPrivateRoom;
        [RTTI.Member(56, 0x188)] public Ref<GraphProgramResource> EnterChangeVehicle;
        [RTTI.Member(57, 0x190)] public Ref<GraphProgramResource> DecideChangeVehicle;
        [RTTI.Member(58, 0x198)] public Ref<GraphProgramResource> EnterQpid;
        [RTTI.Member(59, 0x1A0)] public Ref<GraphProgramResource> EndQpid;
        [RTTI.Member(60, 0x1A8)] public Ref<GraphProgramResource> EnterBonus;
        [RTTI.Member(61, 0x1B0)] public Ref<GraphProgramResource> EndBonus;
        [RTTI.Member(62, 0x1B8)] public Ref<GraphProgramResource> EnterBonusResult;
        [RTTI.Member(63, 0x1C0)] public Ref<GraphProgramResource> DecideBonusResult;
        [RTTI.Member(71, 0x1C8, "ForCollection")] public Ref<GraphProgramResource> EnterTradeCollection;
        [RTTI.Member(72, 0x1D0, "ForCollection")] public Ref<GraphProgramResource> EndTradeCollection;
        [RTTI.Member(73, 0x1D8, "ForCollection")] public Ref<GraphProgramResource> EnterRecieverCollection;
        [RTTI.Member(74, 0x1E0, "ForCollection")] public Ref<GraphProgramResource> EndRecieverCollection;
        [RTTI.Member(75, 0x1E8, "ForCollection")] public Ref<GraphProgramResource> EnterCollectionResult;
        [RTTI.Member(76, 0x1F0, "ForCollection")] public Ref<GraphProgramResource> DecideCollectionResult;
        [RTTI.Member(64, 0x1F8)] public Ref<GraphProgramResource> EndAll;
        [RTTI.Member(65, 0x200)] public Ref<GraphProgramResource> CheckCanConnectQpid;
        [RTTI.Member(100, 0x208, "Special")] public Ref<GraphProgramResource> GenericGraph;
        [RTTI.Member(5, 0x210)] public Ref<GraphProgramResource> PreWakeup;
        [RTTI.Member(69, 0x218, "ForConstruction")] public Ref<GraphProgramResource> ExitConstructionLevelupMenu;
        [RTTI.Member(78, 0x220, "ForDonation")] public Ref<GraphProgramResource> EnterDonation;
        [RTTI.Member(79, 0x228, "ForDonation")] public Ref<GraphProgramResource> EndDonation;
        [RTTI.Member(80, 0x230, "ForDonation")] public Ref<GraphProgramResource> EnterRecieverDonation;
        [RTTI.Member(81, 0x238, "ForDonation")] public Ref<GraphProgramResource> EndRecieverDonation;
        [RTTI.Member(82, 0x240, "ForDonation")] public Ref<GraphProgramResource> EnterDonationResult;
        [RTTI.Member(83, 0x248, "ForDonation")] public Ref<GraphProgramResource> DecideDonationResult;
        [RTTI.Member(53, 0x250)] public Ref<GraphProgramResource> DecideChiralResult;
        [RTTI.Member(19, 0x258)] public Ref<GraphProgramResource> DecideLostObjectResult;
        [RTTI.Member(14, 0x260)] public Ref<GraphProgramResource> DecideLostObjectDelivery;
        [RTTI.Member(50, 0x268)] public Ref<GraphProgramResource> DecideTradeChiral;
        [RTTI.Member(96, 0x270, "ForStarMark")] public Ref<GraphProgramResource> DecideStarMarkResult;
        [RTTI.Member(2, 0x278)] public Ref<GraphProgramResource> StartForEnterPrivateRoom;
        [RTTI.Member(3, 0x280)] public Ref<GraphProgramResource> StartForCommonProcess;
        [RTTI.Member(4, 0x288)] public Ref<GraphProgramResource> StartSubspace;
        [RTTI.Member(11, 0x290)] public Ref<GraphProgramResource> OnCancelPreparationMenu;
        [RTTI.Member(67, 0x298, "Common")] public Ref<GraphProgramResource> OnSubspaceToHandoverMenu;
        [RTTI.Member(93, 0x2A0, "ForEntrust")] public Ref<GraphProgramResource> DecideEntrust;
        [RTTI.Member(94, 0x2A8, "ForEntrust")] public Ref<GraphProgramResource> DecideEntrustResult;
        [RTTI.Member(86, 0x2B0, "ForBridgesDonation")] public Ref<GraphProgramResource> EnterBridgesDonation;
        [RTTI.Member(87, 0x2B8, "ForBridgesDonation")] public Ref<GraphProgramResource> EndBridgesDonation;
        [RTTI.Member(88, 0x2C0, "ForBridgesDonation")] public Ref<GraphProgramResource> EnterRecieverBridgesDonation;
        [RTTI.Member(89, 0x2C8, "ForBridgesDonation")] public Ref<GraphProgramResource> EndRecieverBridgesDonation;
        [RTTI.Member(90, 0x2D0, "ForBridgesDonation")] public Ref<GraphProgramResource> DecideBridgesDonationResult;
        [RTTI.Member(91, 0x2D8, "ForBridgesDonation")] public Ref<GraphProgramResource> CancelBridgesDonation;
        [RTTI.Member(84, 0x2E0, "ForDonation")] public Ref<GraphProgramResource> CancelDonation;
        [RTTI.Member(98, 0x2E8, "ForTakeMaterials")] public Ref<GraphProgramResource> DecideTakeMaterials;
        [RTTI.Member(102, 0x2F0, "BreakInShelter")] public Ref<GraphProgramResource> DecideBreakAtPreppersShelter;
        [RTTI.Member(104, 0x2F8, "Supply")] public Ref<GraphProgramResource> DecideDeliveryForSupply;
        [RTTI.Member(12, 0x300)] public Ref<GraphProgramResource> OnSelectDeliveryMenu;
    }

    [RTTI.Serializable(0x1B23639F3CBC3E95, GameType.DS)]
    public class DSTerminalShelfComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5ED2B6616FFAEEB5, GameType.DS)]
    public class DSTerminalShelfComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public EDSTerminalShelfType Type;
        [RTTI.Member(3, 0x28)] public String Helper;
        [RTTI.Member(4, 0x30)] public WorldTransform OffsetTransform;
    }

    [RTTI.Serializable(0x78C7640092922DBF, GameType.DS)]
    public class DSTerminalWithSHConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0xE6BB6FF83733DFC, GameType.DS)]
    public class DSTerminalWithSHConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(114, 0x490)] public Vec3 LocalTerminalPositionLv2;
        [RTTI.Member(115, 0x4A0)] public Ref<DSCheckStationDynamicSpawnResource> CheckStationDynamicSpawnResource;
        [RTTI.Member(116, 0x4A8)] public UUIDRef<RTTIRefObject> PrivateRoomColorUUID;
    }

    [RTTI.Serializable(0xA0151121A5787218, GameType.DS)]
    public class DSTextDisplayComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9BA7006FF2804CE2, GameType.DS)]
    public class DSTextDisplayComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3BADA27B0B4554D8, GameType.DS)]
    public class DSTextDisplayComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(4, 0x28, "General")] public String AttachBoneName;
        [RTTI.Member(5, 0x30, "General")] public Vec3 AttachOffset;
        [RTTI.Member(6, 0x40, "General")] public bool IsSubjectiveOnly;
    }

    [RTTI.Serializable(0xDF5F3BDF49FEF8A4, GameType.DS)]
    public class DSThirdPersonPlayerCameraComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xACE33D6E7E605EBA, GameType.DS)]
    public class DSThirdPersonPlayerCameraComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "CameraMode")] public Ref<DSCameraModeResource> CameraMode;
        [RTTI.Member(5, 0x28, "Input")] public float InputZeroDelay;
        [RTTI.Member(6, 0x30, "Input")] public Ref<CurveResource> LookDampingCurveAfterBlock;
        [RTTI.Member(7, 0x38, "Input")] public int LookInputBuffer;
        [RTTI.Member(8, 0x40, "Input")] public Ref<CurveResource> LookInputDeltaToVelocity;
        [RTTI.Member(9, 0x48, "Input")] public Ref<CurveResource> LookSensitivityToHeadingScaler;
        [RTTI.Member(10, 0x50, "Input")] public Ref<CurveResource> LookSensitivityToPitchScaler;
    }

    [RTTI.Serializable(0xA138D23D72D9C25, GameType.DS)]
    public class DSThrowable : Throwable
    {
    }

    [RTTI.Serializable(0x7CC8EE2FABEF6FF0, GameType.DS)]
    public class DSThrowableFluidComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1AEBC1266B71291B, GameType.DS)]
    public class DSThrowableFluidComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xFB39B6D5BBF320F8, GameType.DS)]
    public class DSThrowableInspectorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAF85948CE5852636, GameType.DS)]
    public class DSThrowableInspectorComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x10BF72C3DC1488B, GameType.DS)]
    public class DSThrowableManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xFEE275BF2444EBF2, GameType.DS)]
    public class DSThrowableMover : ThrowableMover
    {
    }

    [RTTI.Serializable(0xE9786829079C11FC, GameType.DS)]
    public class DSThrowableMoverResource : ThrowableMoverResource
    {
        [RTTI.Member(36, 0xF0)] public EPhysicsCollisionLayerGame PhysicsCollisionLayer;
    }

    [RTTI.Serializable(0x277B4CC3E2C89F50, GameType.DS)]
    public class DSThrowableRep : ThrowableRep
    {
    }

    [RTTI.Serializable(0xAA4B6A86C4A8C3A9, GameType.DS)]
    public class DSThrowableResource : ThrowableResource
    {
        [RTTI.Member(76, 0x1D0, "Logic")] public EDSProjectileId ProjectileId;
        [RTTI.Member(77, 0x1D4, "Logic")] public float DetonateTime;
        [RTTI.Member(78, 0x1D8, "Logic")] public Array<String> InvisibleMeshes;
        [RTTI.Member(79, 0x1E8, "Logic")] public Ref<DSThrowableResource> ExtraThrowableParts;
        [RTTI.Member(80, 0x1F0, "Logic")] public Array<Ref<DSThrowableResource>> TestExtraThrowableParts;
        [RTTI.Member(81, 0x200, "Logic")] public Ref<AttachToEntityMoverResource> AttachToEntityMover;
        [RTTI.Member(82, 0x208, "Logic")] public Ref<DSThrowableInspectorComponentResource> AttachInspectorComponent;
    }

    [RTTI.Serializable(0x57ED041978268A26, GameType.DS)]
    public class DSTileBasedStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0xEDB192639F27BE63, GameType.DS)]
    public class DSTileBasedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(7, 0x50, "General")] public Ref<TileBasedStreamingStrategyResource> TileBasedStreamingStrategyResource;
        [RTTI.Member(8, 0x58, "General")] public StreamingRef<DSTileBasedStreamingStrategyStreamingResource> DSTileBasedStreamingStrategyStreamingResource;
        [RTTI.Member(9, 0x60, "General")] public String AreaName;
        [RTTI.Member(10, 0x68, "General")] public uint32 AreaNameHash;
    }

    [RTTI.Serializable(0xE9A677E500A0465, GameType.DS)]
    public class DSTileBasedStreamingStrategyStreamingResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<TileBasedStreamingStrategyResource> TileBasedStreamingStrategyResource;
    }

    [RTTI.Serializable(0x465956DC2703A8DC, GameType.DS)]
    public class DSTimeScaleControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x93B6817D5904062, GameType.DS)]
    public class DSTimeScaleControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float TimeScale;
        [RTTI.Member(9, 0x34, "Logic")] public float PlayerTimeScale;
        [RTTI.Member(10, 0x38, "Logic")] public float TimeDuration;
        [RTTI.Member(11, 0x3C, "Logic")] public float TransitionTime;
        [RTTI.Member(12, 0x40, "Logic")] public float EndTransitionTime;
    }

    [RTTI.Serializable(0x75C8C5E9E63739BF, GameType.DS)]
    public class DSTimeScaleControlParameter : Resource
    {
        [RTTI.Member(2, 0x20)] public String Name;
        [RTTI.Member(3, 0x28)] public float TimeScale;
        [RTTI.Member(4, 0x2C)] public float PlayerTimeScale;
        [RTTI.Member(5, 0x30)] public float CameraTimeScale;
        [RTTI.Member(6, 0x34)] public float TimeDuration;
        [RTTI.Member(7, 0x38)] public float TransitionTime;
        [RTTI.Member(8, 0x3C)] public float RemoveTransitionTime;
        [RTTI.Member(9, 0x40)] public Ref<CurveResource> TimeScaleCurve;
        [RTTI.Member(10, 0x48)] public Ref<CurveResource> PlayerTimeScaleCurve;
        [RTTI.Member(11, 0x50)] public Ref<CurveResource> CameraTimeScaleCurve;
        [RTTI.Member(12, 0x58)] public Ref<SoundResource> StartSound;
        [RTTI.Member(13, 0x60)] public uint32 Priority;
    }

    [RTTI.Serializable(0x83D74DCCFA3FB0B8, GameType.DS)]
    public class DSTipsResourceBase : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "BasicInfo")] public uint32 MenuDisplayPriority;
        [RTTI.Member(8, 0x26, "Flags")] public uint8 Flag;
        [RTTI.Member(4, 0x28, "BasicInfo")] public Ref<LocalizedTextResource> TitleText;
        [RTTI.Member(5, 0x30, "BasicInfo")] public Ref<LocalizedTextResource> BodyText;
        [RTTI.Member(6, 0x38, "BasicInfo")] public Ref<LocalizedTextResource> DescriptionText;
    }

    [RTTI.Serializable(0xF6BCC693085F85AB, GameType.DS)]
    public class DSTipsResourceBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1D2DE9AAA865EFDE, GameType.DS)]
    public class DSTipsResourceList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSTipsResourceBase>> TipsResources;
    }

    [RTTI.Serializable(0x6D78D4974EBCEDD8, GameType.DS)]
    public class DSTipsResourceListSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x57EAE0DD66499CF2, GameType.DS)]
    public class DSTopographyRebaker : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x53815197E134494C, GameType.DS)]
    public class DSToxicGasZoneUnit : CollisionTrigger
    {
    }

    [RTTI.Serializable(0xEFF24F78E9E0D90C, GameType.DS)]
    public class DSToxicGasZoneUnits : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "Zones")] public Array<Ref<DSToxicGasZoneUnit>> Units;
    }

    [RTTI.Serializable(0x2084A94A7406C4BE, GameType.DS)]
    public class DSTrialMoverComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFD7C9F680698D46D, GameType.DS)]
    public class DSTrialMoverComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xC575438858B864F, GameType.DS)]
    public class DSUIActionIconHUDLocalizedResource : Resource
    {
        [RTTI.Member(3, 0x20, "Localize")] public Ref<LocalizedTextResource> None;
        [RTTI.Member(4, 0x28, "Localize")] public Ref<LocalizedTextResource> PickUp;
        [RTTI.Member(5, 0x30, "Localize")] public Ref<LocalizedTextResource> LoadOn;
        [RTTI.Member(6, 0x38, "Localize")] public Ref<LocalizedTextResource> Build;
        [RTTI.Member(7, 0x40, "Localize")] public Ref<LocalizedTextResource> CancelBuild;
        [RTTI.Member(8, 0x48, "Localize")] public Ref<LocalizedTextResource> RideOn;
        [RTTI.Member(9, 0x50, "Localize")] public Ref<LocalizedTextResource> RideOff;
        [RTTI.Member(10, 0x58, "Localize")] public Ref<LocalizedTextResource> Kick;
        [RTTI.Member(11, 0x60, "Localize")] public Ref<LocalizedTextResource> InteractTerminal;
        [RTTI.Member(12, 0x68, "Localize")] public Ref<LocalizedTextResource> Transfer;
        [RTTI.Member(13, 0x70, "Localize")] public Ref<LocalizedTextResource> DeliveryMaterial;
        [RTTI.Member(14, 0x78, "Localize")] public Ref<LocalizedTextResource> GrabCart;
        [RTTI.Member(15, 0x80, "Localize")] public Ref<LocalizedTextResource> VehicleAttach;
        [RTTI.Member(16, 0x88, "Localize")] public Ref<LocalizedTextResource> MissionList;
        [RTTI.Member(17, 0x90, "Localize")] public Ref<LocalizedTextResource> Rumble;
        [RTTI.Member(18, 0x98, "Localize")] public Ref<LocalizedTextResource> PickUpR;
        [RTTI.Member(19, 0xA0, "Localize")] public Ref<LocalizedTextResource> PickUpL;
        [RTTI.Member(20, 0xA8, "Localize")] public Ref<LocalizedTextResource> GazerCut;
        [RTTI.Member(21, 0xB0, "Localize")] public Ref<LocalizedTextResource> Carry;
        [RTTI.Member(22, 0xB8, "Localize")] public Ref<LocalizedTextResource> CarryOff;
        [RTTI.Member(23, 0xC0, "Localize")] public Ref<LocalizedTextResource> CarryOffBackpack;
        [RTTI.Member(24, 0xC8, "Localize")] public Ref<LocalizedTextResource> CartDetach;
        [RTTI.Member(25, 0xD0, "Localize")] public Ref<LocalizedTextResource> CartAttach;
        [RTTI.Member(26, 0xD8, "Localize")] public Ref<LocalizedTextResource> CartLink;
        [RTTI.Member(27, 0xE0, "Localize")] public Ref<LocalizedTextResource> CartGetOff;
        [RTTI.Member(28, 0xE8, "Localize")] public Ref<LocalizedTextResource> CartToBaggage;
        [RTTI.Member(29, 0xF0, "Localize")] public Ref<LocalizedTextResource> BaggageToCart;
        [RTTI.Member(30, 0xF8, "Localize")] public Ref<LocalizedTextResource> RopeFighting;
        [RTTI.Member(31, 0x100, "Localize")] public Ref<LocalizedTextResource> Climb;
        [RTTI.Member(32, 0x108, "Localize")] public Ref<LocalizedTextResource> ClimbToDown;
        [RTTI.Member(33, 0x110, "Localize")] public Ref<LocalizedTextResource> StepOn;
        [RTTI.Member(34, 0x118, "Localize")] public Ref<LocalizedTextResource> Rolling;
        [RTTI.Member(35, 0x120, "Localize")] public Ref<LocalizedTextResource> EludeToStepOn;
        [RTTI.Member(36, 0x128, "Localize")] public Ref<LocalizedTextResource> EludeToFall;
        [RTTI.Member(37, 0x130, "Localize")] public Ref<LocalizedTextResource> Dummy;
        [RTTI.Member(38, 0x138, "Localize")] public Ref<LocalizedTextResource> UsrLocation;
        [RTTI.Member(39, 0x140, "Localize")] public Ref<LocalizedTextResource> SearchBaggage;
        [RTTI.Member(40, 0x148, "Localize")] public Ref<LocalizedTextResource> SetMarker;
        [RTTI.Member(41, 0x150, "Localize")] public Ref<LocalizedTextResource> UnSetMarker;
        [RTTI.Member(42, 0x158, "Localize")] public Ref<LocalizedTextResource> UseZipline;
        [RTTI.Member(43, 0x160, "Localize")] public Ref<LocalizedTextResource> SendLike;
        [RTTI.Member(44, 0x168, "Localize")] public Ref<LocalizedTextResource> GetCollectible;
        [RTTI.Member(45, 0x170, "Localize")] public Ref<LocalizedTextResource> TakeABreak;
        [RTTI.Member(46, 0x178, "Localize")] public Ref<LocalizedTextResource> RepairShoes;
        [RTTI.Member(47, 0x180, "Localize")] public Ref<LocalizedTextResource> ChangeShoes;
        [RTTI.Member(48, 0x188, "Localize")] public Ref<LocalizedTextResource> TakeASleep;
        [RTTI.Member(49, 0x190, "Localize")] public Ref<LocalizedTextResource> TakeAMassageFoot;
        [RTTI.Member(50, 0x198, "Localize")] public Ref<LocalizedTextResource> TakeAMassageShoulder;
        [RTTI.Member(51, 0x1A0, "Localize")] public Ref<LocalizedTextResource> TakeASleepToWake;
        [RTTI.Member(52, 0x1A8, "Localize")] public Ref<LocalizedTextResource> Struggle;
        [RTTI.Member(53, 0x1B0, "Localize")] public Ref<LocalizedTextResource> Catch;
        [RTTI.Member(54, 0x1B8, "Localize")] public Ref<LocalizedTextResource> CatchRight;
        [RTTI.Member(55, 0x1C0, "Localize")] public Ref<LocalizedTextResource> CatchLeft;
        [RTTI.Member(56, 0x1C8, "Localize")] public Ref<LocalizedTextResource> PickUpToBackPack;
        [RTTI.Member(57, 0x1D0, "Localize")] public Ref<LocalizedTextResource> PickUpToBackPackFromHand;
        [RTTI.Member(58, 0x1D8, "Localize")] public Ref<LocalizedTextResource> ToStand;
        [RTTI.Member(59, 0x1E0, "Localize")] public Ref<LocalizedTextResource> LadderToBaggage;
        [RTTI.Member(60, 0x1E8, "Localize")] public Ref<LocalizedTextResource> LadderGrabIn;
        [RTTI.Member(61, 0x1F0, "Localize")] public Ref<LocalizedTextResource> LadderGrabOut;
        [RTTI.Member(62, 0x1F8, "Localize")] public Ref<LocalizedTextResource> CatchRope;
        [RTTI.Member(63, 0x200, "Localize")] public Ref<LocalizedTextResource> ThrowRope;
        [RTTI.Member(64, 0x208, "Localize")] public Ref<LocalizedTextResource> Detonate;
        [RTTI.Member(65, 0x210, "Localize")] public Ref<LocalizedTextResource> SprayFront;
        [RTTI.Member(66, 0x218, "Localize")] public Ref<LocalizedTextResource> SprayBack;
        [RTTI.Member(67, 0x220, "Localize")] public Ref<LocalizedTextResource> LockOnActivate;
        [RTTI.Member(68, 0x228, "Localize")] public Ref<LocalizedTextResource> LockOnDeactivate;
        [RTTI.Member(69, 0x230, "Localize")] public Ref<LocalizedTextResource> SubMagazineActivate;
        [RTTI.Member(70, 0x238, "Localize")] public Ref<LocalizedTextResource> SubMagazineDeactivate;
        [RTTI.Member(71, 0x240, "Localize")] public Ref<LocalizedTextResource> AppeaseBB;
        [RTTI.Member(72, 0x248, "Localize")] public Ref<LocalizedTextResource> StopAppeaseBB;
        [RTTI.Member(73, 0x250, "Localize")] public Ref<LocalizedTextResource> ShakeBBSilently;
        [RTTI.Member(74, 0x258, "Localize")] public Ref<LocalizedTextResource> ShakeBBSilently_R2;
        [RTTI.Member(75, 0x260, "Localize")] public Ref<LocalizedTextResource> SubjectiveLookBBPod;
        [RTTI.Member(76, 0x268, "Localize")] public Ref<LocalizedTextResource> Return;
        [RTTI.Member(77, 0x270, "Localize")] public Ref<LocalizedTextResource> MarkerFocus;
        [RTTI.Member(78, 0x278, "Localize")] public Ref<LocalizedTextResource> ZiplineFocus;
        [RTTI.Member(79, 0x280, "Localize")] public Ref<LocalizedTextResource> ExitPrivateRoom;
        [RTTI.Member(80, 0x288, "Localize")] public Ref<LocalizedTextResource> DirectExitPrivateRoom;
        [RTTI.Member(81, 0x290, "Localize")] public Ref<LocalizedTextResource> UseShower;
        [RTTI.Member(82, 0x298, "Localize")] public Ref<LocalizedTextResource> ShowEquipmentShelf;
        [RTTI.Member(83, 0x2A0, "Localize")] public Ref<LocalizedTextResource> UseBBTool;
        [RTTI.Member(84, 0x2A8, "Localize")] public Ref<LocalizedTextResource> FastTravel;
        [RTTI.Member(85, 0x2B0, "Localize")] public Ref<LocalizedTextResource> UseWC;
        [RTTI.Member(86, 0x2B8, "Localize")] public Ref<LocalizedTextResource> ToUrinate;
        [RTTI.Member(87, 0x2C0, "Localize")] public Ref<LocalizedTextResource> ToFeces;
        [RTTI.Member(88, 0x2C8, "Localize")] public Ref<LocalizedTextResource> UseWashBasin;
        [RTTI.Member(89, 0x2D0, "Localize")] public Ref<LocalizedTextResource> ShowSuit;
        [RTTI.Member(90, 0x2D8, "Localize")] public Ref<LocalizedTextResource> CustomizeBackpack;
        [RTTI.Member(91, 0x2E0, "Localize")] public Ref<LocalizedTextResource> UseTerminal;
        [RTTI.Member(92, 0x2E8, "Localize")] public Ref<LocalizedTextResource> ShowTable;
        [RTTI.Member(93, 0x2F0, "Localize")] public Ref<LocalizedTextResource> WatchFigure;
        [RTTI.Member(94, 0x2F8, "Localize")] public Ref<LocalizedTextResource> ShowDreamCatcher;
        [RTTI.Member(95, 0x300, "Localize")] public Ref<LocalizedTextResource> UpDown;
        [RTTI.Member(96, 0x308, "Localize")] public Ref<LocalizedTextResource> Zoom;
        [RTTI.Member(97, 0x310, "Localize")] public Ref<LocalizedTextResource> CreateSignboard;
        [RTTI.Member(98, 0x318, "Localize")] public Ref<LocalizedTextResource> ReadSignboard;
        [RTTI.Member(99, 0x320, "Localize")] public Ref<LocalizedTextResource> Endure;
        [RTTI.Member(100, 0x328, "Localize")] public Ref<LocalizedTextResource> LeftStick_Left;
        [RTTI.Member(101, 0x330, "Localize")] public Ref<LocalizedTextResource> LeftStick_Right;
        [RTTI.Member(102, 0x338, "Localize")] public Ref<LocalizedTextResource> LeftStick_Up;
        [RTTI.Member(103, 0x340, "Localize")] public Ref<LocalizedTextResource> LeftStick_Down;
        [RTTI.Member(104, 0x348, "Localize")] public Ref<LocalizedTextResource> RightStick_Left;
        [RTTI.Member(105, 0x350, "Localize")] public Ref<LocalizedTextResource> RightStick_Right;
        [RTTI.Member(106, 0x358, "Localize")] public Ref<LocalizedTextResource> RightStick_Up;
        [RTTI.Member(107, 0x360, "Localize")] public Ref<LocalizedTextResource> RightStick_Down;
        [RTTI.Member(108, 0x368, "Localize")] public Ref<LocalizedTextResource> Hacking;
        [RTTI.Member(109, 0x370, "Localize")] public Ref<LocalizedTextResource> UseWatchTower;
        [RTTI.Member(110, 0x378, "Localize")] public Ref<LocalizedTextResource> _0;
        [RTTI.Member(111, 0x380, "Localize")] public Ref<LocalizedTextResource> MoveRight;
        [RTTI.Member(112, 0x388, "Localize")] public Ref<LocalizedTextResource> MoveLeft;
        [RTTI.Member(113, 0x390, "Localize")] public Ref<LocalizedTextResource> TerminalLocked;
        [RTTI.Member(114, 0x398, "Localize")] public Ref<LocalizedTextResource> SecondJump;
        [RTTI.Member(115, 0x3A0, "Localize")] public Ref<LocalizedTextResource> StopBreathHandL;
        [RTTI.Member(116, 0x3A8, "Localize")] public Ref<LocalizedTextResource> StopBreathHandR;
        [RTTI.Member(117, 0x3B0, "Localize")] public Ref<LocalizedTextResource> LevelUpDestroy;
        [RTTI.Member(118, 0x3B8, "Localize")] public Ref<LocalizedTextResource> BuildRoad;
        [RTTI.Member(119, 0x3C0, "Localize")] public Ref<LocalizedTextResource> WearCap;
        [RTTI.Member(120, 0x3C8, "Localize")] public Ref<LocalizedTextResource> WearGlasses;
        [RTTI.Member(121, 0x3D0, "Localize")] public Ref<LocalizedTextResource> DrinkBeer;
        [RTTI.Member(122, 0x3D8, "Localize")] public Ref<LocalizedTextResource> EatCryptobiosis;
        [RTTI.Member(123, 0x3E0, "Localize")] public Ref<LocalizedTextResource> GetCryptobiosis;
        [RTTI.Member(124, 0x3E8, "Localize")] public Ref<LocalizedTextResource> RemoveCap;
        [RTTI.Member(125, 0x3F0, "Localize")] public Ref<LocalizedTextResource> RemoveGlasses;
        [RTTI.Member(126, 0x3F8, "Localize")] public Ref<LocalizedTextResource> Hug;
        [RTTI.Member(127, 0x400, "Localize")] public Ref<LocalizedTextResource> SwapBodyBag;
        [RTTI.Member(128, 0x408, "Localize")] public Ref<LocalizedTextResource> PutIntoBodyBag;
        [RTTI.Member(129, 0x410, "Localize")] public Ref<LocalizedTextResource> Jump;
        [RTTI.Member(130, 0x418, "Localize")] public Ref<LocalizedTextResource> JumpAttack;
        [RTTI.Member(131, 0x420, "Localize")] public Ref<LocalizedTextResource> UseCamouflageHolo;
        [RTTI.Member(132, 0x428, "Localize")] public Ref<LocalizedTextResource> DestroyConstruction;
        [RTTI.Member(133, 0x430, "Localize")] public Ref<LocalizedTextResource> UseRainShelterCoatingSpray;
        [RTTI.Member(134, 0x438, "Localize")] public Ref<LocalizedTextResource> GuardModeL;
        [RTTI.Member(135, 0x440, "Localize")] public Ref<LocalizedTextResource> GuardModeR;
        [RTTI.Member(136, 0x448, "Localize")] public Ref<LocalizedTextResource> GuardModeDouble;
        [RTTI.Member(137, 0x450, "Localize")] public Ref<LocalizedTextResource> LookBB;
        [RTTI.Member(138, 0x458, "Localize")] public Ref<LocalizedTextResource> StopLookingBB;
        [RTTI.Member(139, 0x460, "Localize")] public Ref<LocalizedTextResource> WeatheredConstruction;
        [RTTI.Member(140, 0x468, "Localize")] public Ref<LocalizedTextResource> TakeAOnsen;
        [RTTI.Member(141, 0x470, "Localize")] public Ref<LocalizedTextResource> PaddlingLeftSide;
        [RTTI.Member(142, 0x478, "Localize")] public Ref<LocalizedTextResource> PaddlingRightSide;
        [RTTI.Member(143, 0x480, "Localize")] public Ref<LocalizedTextResource> Swing;
        [RTTI.Member(144, 0x488, "Localize")] public Ref<LocalizedTextResource> RainShelter;
        [RTTI.Member(145, 0x490, "Localize")] public Ref<LocalizedTextResource> _1;
        [RTTI.Member(146, 0x498, "Localize")] public Ref<LocalizedTextResource> _2;
        [RTTI.Member(147, 0x4A0, "Localize")] public Ref<LocalizedTextResource> _3;
        [RTTI.Member(149, 0x4A8, "Localize")] public Ref<LocalizedTextResource> MemoriesWithCliff;
        [RTTI.Member(150, 0x4B0, "Localize")] public Ref<LocalizedTextResource> VsWarriors;
        [RTTI.Member(151, 0x4B8, "Localize")] public Ref<LocalizedTextResource> VsWarriors1;
        [RTTI.Member(152, 0x4C0, "Localize")] public Ref<LocalizedTextResource> VsWarriors2;
        [RTTI.Member(153, 0x4C8, "Localize")] public Ref<LocalizedTextResource> VsWarriors3;
        [RTTI.Member(154, 0x4D0, "Localize")] public Ref<LocalizedTextResource> RetrieveBaggages;
        [RTTI.Member(155, 0x4D8, "Localize")] public Ref<LocalizedTextResource> ZiplineSelect;
        [RTTI.Member(156, 0x4E0, "Localize")] public Ref<LocalizedTextResource> ZiplineCancel;
        [RTTI.Member(157, 0x4E8, "Localize")] public Ref<LocalizedTextResource> ZiplineGetOff;
        [RTTI.Member(148, 0x4F0, "Localize")] public Ref<LocalizedTextResource> _4;
        [RTTI.Member(158, 0x4F8, "Localize")] public Ref<LocalizedTextResource> HiggsGuardMode;
        [RTTI.Member(159, 0x500, "Localize")] public Ref<LocalizedTextResource> HiggsSwing;
        [RTTI.Member(160, 0x508, "Localize")] public Ref<LocalizedTextResource> HiggsHeadbutt;
        [RTTI.Member(161, 0x510, "Localize")] public Ref<LocalizedTextResource> FakeHoloCancel;
        [RTTI.Member(162, 0x518, "Localize")] public Ref<LocalizedTextResource> OpenDoor;
        [RTTI.Member(163, 0x520, "Localize")] public Ref<LocalizedTextResource> ZoomIn;
        [RTTI.Member(164, 0x528, "Localize")] public Ref<LocalizedTextResource> ZoomOut;
        [RTTI.Member(165, 0x530, "Localize")] public Ref<LocalizedTextResource> GuardModeStopDouble;
        [RTTI.Member(166, 0x538, "Localize")] public Ref<LocalizedTextResource> VehicleMuleDrag;
        [RTTI.Member(167, 0x540, "Localize")] public Ref<LocalizedTextResource> InteractConstruction;
        [RTTI.Member(168, 0x548, "Localize")] public Ref<LocalizedTextResource> DestroyLadder;
        [RTTI.Member(169, 0x550, "Localize")] public Ref<LocalizedTextResource> DestroyRope;
        [RTTI.Member(170, 0x558, "Localize")] public Ref<LocalizedTextResource> DestroyVehicle;
        [RTTI.Member(171, 0x560, "Localize")] public Ref<LocalizedTextResource> EnterPrivateRoom;
        [RTTI.Member(172, 0x568, "Localize")] public Ref<LocalizedTextResource> Move;
        [RTTI.Member(173, 0x570, "Localize")] public Ref<LocalizedTextResource> Camera;
        [RTTI.Member(174, 0x578, "Localize")] public Ref<LocalizedTextResource> WatchTowerCancel;
        [RTTI.Member(175, 0x580, "Localize")] public Ref<LocalizedTextResource> ConstructionOpenMap;
        [RTTI.Member(176, 0x588, "Localize")] public Ref<LocalizedTextResource> LoadData;
        [RTTI.Member(177, 0x590, "Localize")] public Ref<LocalizedTextResource> ReturnFromKnotSpace;
        [RTTI.Member(178, 0x598, "Localize")] public Ref<LocalizedTextResource> BuildLadder;
        [RTTI.Member(179, 0x5A0, "Localize")] public Ref<LocalizedTextResource> BuildRope;
        [RTTI.Member(180, 0x5A8, "Localize")] public Ref<LocalizedTextResource> _5;
        [RTTI.Member(181, 0x5B0, "Localize")] public Ref<LocalizedTextResource> TakeABreakCrouch;
        [RTTI.Member(182, 0x5B8, "Localize")] public Ref<LocalizedTextResource> WashBasinAction;
        [RTTI.Member(183, 0x5C0, "Localize")] public Ref<LocalizedTextResource> ZiplineRideOff;
        [RTTI.Member(184, 0x5C8, "Localize")] public Ref<LocalizedTextResource> _6;
        [RTTI.Member(185, 0x5D0, "Localize")] public Ref<LocalizedTextResource> ChangeColor;
        [RTTI.Member(186, 0x5D8, "Localize")] public Ref<LocalizedTextResource> RopeParry;
        [RTTI.Member(187, 0x5E0, "Localize")] public Ref<LocalizedTextResource> PutCart;
        [RTTI.Member(188, 0x5E8, "Localize")] public Ref<LocalizedTextResource> PickupCart;
        [RTTI.Member(189, 0x5F0, "Localize")] public Ref<LocalizedTextResource> PutVehicle;
        [RTTI.Member(190, 0x5F8, "Localize")] public Ref<LocalizedTextResource> PickupVehicle;
        [RTTI.Member(191, 0x600, "Localize")] public Ref<LocalizedTextResource> BuildAim;
        [RTTI.Member(192, 0x608, "Localize")] public Ref<LocalizedTextResource> AppeaseLou;
        [RTTI.Member(193, 0x610, "Localize")] public Ref<LocalizedTextResource> StopAppeaseLou;
        [RTTI.Member(194, 0x618, "Localize")] public Ref<LocalizedTextResource> ShakeLouSilently;
        [RTTI.Member(195, 0x620, "Localize")] public Ref<LocalizedTextResource> ShakeLouSilently_R2;
        [RTTI.Member(196, 0x628, "Localize")] public Ref<LocalizedTextResource> SubjectiveLookLouPod;
        [RTTI.Member(197, 0x630, "Localize")] public Ref<LocalizedTextResource> UseLouTool;
        [RTTI.Member(198, 0x638, "Localize")] public Ref<LocalizedTextResource> LookLou;
        [RTTI.Member(199, 0x640, "Localize")] public Ref<LocalizedTextResource> SwapBodybagAndBaggage;
        [RTTI.Member(200, 0x648, "Localize")] public Ref<LocalizedTextResource> PickMama;
        [RTTI.Member(201, 0x650, "Localize")] public Ref<LocalizedTextResource> PickArtist;
        [RTTI.Member(202, 0x658, "Localize")] public Ref<LocalizedTextResource> DropDeadbodyBag;
        [RTTI.Member(203, 0x660, "Localize")] public Ref<LocalizedTextResource> DropMama;
        [RTTI.Member(204, 0x668, "Localize")] public Ref<LocalizedTextResource> DropArtist;
        [RTTI.Member(205, 0x670, "Localize")] public Ref<LocalizedTextResource> BuildAimLadderRope;
        [RTTI.Member(206, 0x678, "Localize")] public Ref<LocalizedTextResource> ChangeBridgeLength;
        [RTTI.Member(207, 0x680, "Localize")] public Ref<LocalizedTextResource> WearGlassesGordon;
        [RTTI.Member(208, 0x688, "Localize")] public Ref<LocalizedTextResource> WearValve;
        [RTTI.Member(209, 0x690, "Localize")] public Ref<LocalizedTextResource> WearHeadCrab;
        [RTTI.Member(210, 0x698, "Localize")] public Ref<LocalizedTextResource> RemoveGlassesGordon;
        [RTTI.Member(211, 0x6A0, "Localize")] public Ref<LocalizedTextResource> RemoveValve;
        [RTTI.Member(212, 0x6A8, "Localize")] public Ref<LocalizedTextResource> RemoveHeadCrab;
    }

    [RTTI.Serializable(0x35B6DEDF4A084384, GameType.DS)]
    public class DSUIActionIconHUDLocalizedResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDD060206AE5C18A4, GameType.DS)]
    public class DSUIActionIconHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x7B60FF7E91ECEEFF, GameType.DS)]
    public class DSUIActionIconHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDElementResource> PartsElement0;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<HUDElementResource> PartsElement1;
        [RTTI.Member(20, 0x90, "DS_Logic")] public Ref<HUDElementResource> PartsElement2;
        [RTTI.Member(21, 0x98, "DS_Logic")] public Ref<HUDElementResource> PartsElement3;
        [RTTI.Member(22, 0xA0, "DS_Logic")] public Ref<HUDElementResource> PartsElement4;
        [RTTI.Member(23, 0xA8, "DS_Logic")] public Ref<HUDElementResource> PartsElement5;
        [RTTI.Member(24, 0xB0, "DS_Logic")] public Ref<HUDElementResource> PartsElement6;
        [RTTI.Member(25, 0xB8, "DS_Logic")] public Ref<HUDElementResource> PartsElement7;
        [RTTI.Member(26, 0xC0, "DS_Logic")] public Ref<HUDElementResource> ItemTemplateElement;
        [RTTI.Member(27, 0xC8, "DS_Logic")] public Ref<HUDElementResource> ItemIconRootElement;
        [RTTI.Member(28, 0xD0, "DS_Logic")] public Ref<HUDElementResource> ItemSecondIconRootElement;
        [RTTI.Member(29, 0xD8, "DS_Logic")] public Ref<HUDImageResource> ItemPlusIconImageElement;
        [RTTI.Member(30, 0xE0, "DS_Logic")] public Ref<HUDTextResource> ItemActionText;
        [RTTI.Member(31, 0xE8, "DS_Logic")] public Ref<HUDTextResource> ItemCautionActionText;
        [RTTI.Member(32, 0xF0, "DS_Logic")] public Ref<HUDElementResource> ButtonHoldIconTemplateElement;
        [RTTI.Member(34, 0xF8, "Animation")] public Ref<DSUIHUDAnimatorResource> ButtonHoldAnimator;
        [RTTI.Member(35, 0x100, "Animation")] public Ref<DSUIHUDAnimatorResource> LeftMoveAnimator;
        [RTTI.Member(36, 0x108, "Animation")] public Ref<DSUIHUDAnimatorResource> LeftMoveUWAnimator;
        [RTTI.Member(37, 0x110, "Animation")] public Ref<DSUIHUDAnimatorResource> RightMoveAnimator;
        [RTTI.Member(38, 0x118, "Animation")] public Ref<DSUIHUDAnimatorResource> CameraZoomOutAnimator;
        [RTTI.Member(39, 0x120, "Animation")] public Ref<DSUIHUDAnimatorResource> CameraZoomInAnimator;
        [RTTI.Member(40, 0x128, "Animation")] public Ref<DSUIHUDAnimatorResource> LeftModeBgIntroAnimator;
        [RTTI.Member(41, 0x130, "Animation")] public Ref<DSUIHUDAnimatorResource> LeftModeBgOutroAnimator;
        [RTTI.Member(42, 0x138, "Animation")] public Ref<DSUIHUDAnimatorResource> IconIntroAnimator;
        [RTTI.Member(43, 0x140, "Animation")] public Ref<DSUIHUDAnimatorResource> IconIdleAnimator;
        [RTTI.Member(44, 0x148, "Animation")] public Ref<DSUIHUDAnimatorResource> IconUnavailableIdleAnimator;
        [RTTI.Member(45, 0x150, "Animation")] public Ref<DSUIHUDAnimatorResource> IconOutroAnimator;
        [RTTI.Member(46, 0x158, "Animation")] public Ref<DSUIHUDAnimatorResource> IconExecuteOutroAnimator;
        [RTTI.Member(47, 0x160, "Animation")] public Ref<DSUIHUDAnimatorResource> IconPressedDisabledAnimator;
        [RTTI.Member(48, 0x168, "Animation")] public Ref<DSUIHUDAnimatorResource> IconAvailableAnimator;
        [RTTI.Member(49, 0x170, "Animation")] public Ref<DSUIHUDAnimatorResource> IconUnavailableAnimator;
        [RTTI.Member(51, 0x178, "Sound")] public Ref<SoundResource> OpenSound;
        [RTTI.Member(52, 0x180, "Sound")] public Ref<SoundResource> NormalIconAppearSoundResource;
        [RTTI.Member(53, 0x188, "Sound")] public Ref<SoundResource> HoldIconAppearSoundResource;
        [RTTI.Member(54, 0x190, "Sound")] public Ref<SoundResource> DecisionSound;
        [RTTI.Member(55, 0x198, "Sound")] public Ref<SoundResource> HoldLowLayerSoundForHacking;
        [RTTI.Member(56, 0x1A0, "Sound")] public Ref<SoundResource> HoldStepSoundForHacking_01;
        [RTTI.Member(57, 0x1A8, "Sound")] public Ref<SoundResource> HoldStepSoundForHacking_02;
        [RTTI.Member(58, 0x1B0, "Sound")] public Ref<SoundResource> HoldStepSoundForHacking_03;
        [RTTI.Member(59, 0x1B8, "Sound")] public Ref<SoundResource> HoldStepSoundForHacking_04;
        [RTTI.Member(60, 0x1C0, "Sound")] public Ref<SoundResource> HoldStepSoundForHacking_05;
        [RTTI.Member(61, 0x1C8, "Sound")] public Ref<SoundResource> ExecuteNgSound;
    }

    [RTTI.Serializable(0x7CA76E25FB1E1E16, GameType.DS)]
    public class DSUIAimHUDAnimeOffsetComponentSysTransition : DSUIHUDAnimatorSet
    {
    }

    [RTTI.Serializable(0x6CC15707840BE679, GameType.DS)]
    public class DSUIAimHUDAnimeOffsetSocketSysTransition : DSUIHUDAnimatorSet
    {
    }

    [RTTI.Serializable(0xFF926608E908EC25, GameType.DS)]
    public class DSUIAimHUDComponentAlphaTranslationBase : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0x1F85D2C6EEE9E21B, GameType.DS)]
    public class DSUIAimHUDComponentAlphaTranslationBaseResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic_AlphaTranslation")] public Ref<HUDElementResource> AlphaTargetElement;
        [RTTI.Member(11, 0x68, "Logic_AlphaTranslation")] public float ActiveAlpha;
        [RTTI.Member(12, 0x6C, "Logic_AlphaTranslation")] public float EnableAlpha;
        [RTTI.Member(13, 0x70, "Logic_AlphaTranslation")] public int TransitionFlame;
    }

    [RTTI.Serializable(0xC1BC0DB246F968CC, GameType.DS)]
    public class DSUIAimHUDComponentAnimatorSetGroupResource : CoreObject
    {
        [RTTI.Member(2, 0x28)] public Array<Ref<DSUIAimHUDComponentAnimatorSetResource>> AnimatorSets;
    }

    [RTTI.Serializable(0xAD13717B8C351E74, GameType.DS)]
    public class DSUIAimHUDComponentAnimatorSetResource : CoreObject
    {
        [RTTI.Member(4, 0x28, "Animator")] public Ref<DSUIHUDAnimatorResource> Intro;
        [RTTI.Member(5, 0x30, "Animator")] public Ref<DSUIHUDAnimatorResource> Idle;
        [RTTI.Member(6, 0x38, "Animator")] public Ref<DSUIHUDAnimatorResource> Outro;
        [RTTI.Member(2, 0x40)] public EDSUIAimHUDComponentAnimeType Hash;
    }

    [RTTI.Serializable(0xBC3BFB215012E4FD, GameType.DS)]
    public class DSUIAimHUDComponentBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xC485C0891E0045D3, GameType.DS)]
    public class DSUIAimHUDComponentBaseResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(4, 0x28, "General")] public Ref<DSUIAimHUDComponentAnimatorSetGroupResource> AnimatorSetGroup;
        [RTTI.Member(5, 0x30, "General")] public EHUDSnap SnapType;
        [RTTI.Member(6, 0x34, "General")] public FSize Size;
        [RTTI.Member(7, 0x40, "General")] public Vec2 Offset;
        [RTTI.Member(8, 0x50, "General")] public int ExecutionPriority;
    }

    [RTTI.Serializable(0x812B2FE13CE01F87, GameType.DS)]
    public class DSUIAimHUDComponentBloodPack : DSUIAimHUDGaugeMargineBase
    {
    }

    [RTTI.Serializable(0x6D3D1836F106FA4E, GameType.DS)]
    public class DSUIAimHUDComponentBloodPackResource : DSUIAimHUDComponentGauge2BaseResource
    {
        [RTTI.Member(15, 0x80, "Logic_BloodPack")] public Ref<HUDImageResource> GaugeImageElement;
        [RTTI.Member(16, 0x98, "Logic_BloodPack")] public bool IsKeepTextureUV;
        [RTTI.Member(27, 0xA0, "Logic")] public Ref<CurveResource> GaugeAnimationAdaptCurve;
        [RTTI.Member(18, 0xA8, "Logic_BloodPack")] public Ref<HUDTextResource> BloodPackTextParts;
        [RTTI.Member(17, 0xB0, "Logic_BloodPack")] public int GaugeAnimeMaxFrame;
        [RTTI.Member(20, 0xB8, "Logic_BloodPackMargine")] public Ref<HUDImageResource> TemplateBloodPackMargine;
        [RTTI.Member(21, 0xC0, "Logic_BloodPackMargine")] public int TemplateBloodPackMargineCopies;
        [RTTI.Member(22, 0xC8, "Logic_BloodPackMargine")] public Ref<DSUIHUDAnimatorSetResource> BloodPackMargineGaugeAnimeIdle;
        [RTTI.Member(26, 0xD0, "Logic")] public int DelayEntityFlame;
        [RTTI.Member(23, 0xD4, "Logic_BloodPackMargine")] public int GaugeNotchWidth;
        [RTTI.Member(24, 0xD8, "Logic_BloodPackMargine")] public bool IsMargineGaugeKeepTextureUV;
        [RTTI.Member(28, 0xE0, "Logic")] public Ref<DSUIHUDAnimatorSetResource> EmptyBloodPackAnime;
        [RTTI.Member(29, 0xE8, "Logic")] public Ref<DSUIHUDAnimatorSetResource> EmptySingleBloodPackAnime;
        [RTTI.Member(31, 0xF0, "Sound")] public Ref<SoundResource> SoundEquip;
        [RTTI.Member(32, 0xF8, "Sound")] public Ref<SoundResource> SoundUnEquip;
        [RTTI.Member(33, 0x100, "Sound")] public Ref<SoundResource> SoundEmpty;
        [RTTI.Member(34, 0x108, "Sound")] public Ref<SoundResource> SoundEmptyReplace;
    }

    [RTTI.Serializable(0xCCBB7D358091C626, GameType.DS)]
    public class DSUIAimHUDComponentBodyBlood : DSUIAimHUDComponentGageBase
    {
    }

    [RTTI.Serializable(0x6CF3C18DE225786, GameType.DS)]
    public class DSUIAimHUDComponentBodyBlood2 : DSUIAimHUDGaugeMargineBase
    {
    }

    [RTTI.Serializable(0xEA58AA41278DD8F1, GameType.DS)]
    public class DSUIAimHUDComponentBodyBlood2Resource : DSUIAimHUDComponentGauge2BaseResource
    {
        [RTTI.Member(15, 0x80, "Logic_BodyBlood")] public Ref<HUDImageResource> Logic_BodyBlood_GaugeImageElement;
        [RTTI.Member(26, 0x88, "Logic_Consciousness")] public Ref<HUDImageResource> Logic_Consciousness_GaugeImageElement;
        [RTTI.Member(16, 0x98, "Logic_BodyBlood")] public bool Logic_BodyBlood_IsKeepTextureUV;
        [RTTI.Member(27, 0x99, "Logic_Consciousness")] public bool Logic_Consciousness_IsKeepTextureUV;
        [RTTI.Member(36, 0xA0, "Logic")] public Ref<CurveResource> GaugeAnimationAdaptCurve;
        [RTTI.Member(17, 0xA8, "Logic_BodyBlood")] public Ref<HUDElementResource> GaugeScaleElement;
        [RTTI.Member(18, 0xB0, "Logic_BodyBlood")] public Ref<HUDTextResource> LifeTextElement;
        [RTTI.Member(19, 0xB8, "Logic_BodyBlood")] public Ref<HUDElementResource> MinLifeScaleElement;
        [RTTI.Member(35, 0xC0, "Logic")] public int GaugeAnimeMaxFlame;
        [RTTI.Member(22, 0xC8, "Logic_BodyBloodMargin")] public Ref<HUDImageResource> TemplateBodyBloodMargine;
        [RTTI.Member(23, 0xD0, "Logic_BodyBloodMargin")] public int TemplateBodyBloodMargineCopies;
        [RTTI.Member(24, 0xD8, "Logic_BodyBloodMargin")] public Ref<DSUIHUDAnimatorSetResource> BodyBloodMargineGaugeAnimeIdle;
        [RTTI.Member(20, 0xE0, "Logic_BodyBlood")] public int DelayEntityFlame;
        [RTTI.Member(32, 0xE4, "Logic_Consciousness")] public int GaugeNotchWidth;
        [RTTI.Member(33, 0xE8, "Logic_Consciousness")] public bool IsMargineGaugeKeepTextureUV;
        [RTTI.Member(28, 0xF0, "Logic_Consciousness")] public Ref<HUDElementResource> AlphaTargetElement;
        [RTTI.Member(29, 0xF8, "Logic_Consciousness")] public float ActiveAlpha;
        [RTTI.Member(30, 0xFC, "Logic_Consciousness")] public float EnableAlpha;
        [RTTI.Member(31, 0x100, "Logic_Consciousness")] public int TransitionFlame;
        [RTTI.Member(38, 0x108, "Sound")] public Ref<SoundResource> EatCryptobyoteRecovery;
    }

    [RTTI.Serializable(0x7CE275187F2DB51D, GameType.DS)]
    public class DSUIAimHUDComponentBodyBloodResource : DSUIAimHUDComponentGageBaseResource
    {
        [RTTI.Member(18, 0x90, "Logic")] public Ref<HUDTextResource> LifeTextElement;
        [RTTI.Member(19, 0x98, "Logic")] public Ref<HUDElementResource> MinLifeScaleElement;
    }

    [RTTI.Serializable(0x783C8C04746ECAD1, GameType.DS)]
    public class DSUIAimHUDComponentBulletType : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0xEF912ADE193441C3, GameType.DS)]
    public class DSUIAimHUDComponentBulletTypeResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public Ref<HUDImageResource> BulletTypeImageResource;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<HUDImageResource> BulletTypeBgImageResource;
    }

    [RTTI.Serializable(0x3510D0CD27F18534, GameType.DS)]
    public class DSUIAimHUDComponentChargeWeapon : DSUIAimHUDComponentGageBase
    {
    }

    [RTTI.Serializable(0x86D88B27F16CE58E, GameType.DS)]
    public class DSUIAimHUDComponentChargeWeaponCircle : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0x85981A00E6F4633E, GameType.DS)]
    public class DSUIAimHUDComponentChargeWeaponCircleResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public Ref<HUDTextResource> TextElement;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<HUDElementResource> Over20;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<HUDElementResource> Over40;
        [RTTI.Member(13, 0x78, "Logic")] public Ref<HUDElementResource> Over60;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<HUDElementResource> Over80;
        [RTTI.Member(15, 0x88, "Logic")] public Ref<HUDElementResource> Over100;
        [RTTI.Member(16, 0x90, "Logic")] public Ref<HUDElementResource> ChargeScallElement;
        [RTTI.Member(17, 0x98, "Logic")] public float ToShrinkSecond;
        [RTTI.Member(19, 0xA0, "Sound")] public Ref<SoundResource> BloodGrenadeChargeSingleSound;
        [RTTI.Member(20, 0xA8, "Sound")] public Ref<SoundResource> BloodGrenadeChargeFullChargeSound;
    }

    [RTTI.Serializable(0x40DEE34542240A31, GameType.DS)]
    public class DSUIAimHUDComponentChargeWeaponResource : DSUIAimHUDComponentGageBaseResource
    {
        [RTTI.Member(18, 0x90, "Logic")] public Ref<HUDImageResource> ChargeWeaponIconElement;
        [RTTI.Member(19, 0x98, "Logic")] public Ref<HUDTextResource> ChargeWeaponTextElement;
        [RTTI.Member(20, 0xA0, "Logic")] public Ref<UITexture> MainweaponTexture;
        [RTTI.Member(21, 0xA8, "Logic")] public Ref<UITexture> SubweaponTexture;
    }

    [RTTI.Serializable(0x159B55E4F6686F5B, GameType.DS)]
    public class DSUIAimHUDComponentChiralCount : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0xEE349E4331AC664E, GameType.DS)]
    public class DSUIAimHUDComponentChiralCountResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public Ref<HUDTextResource> ChiralCounterTextResource;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<HUDTextResource> ChiralCounterBgTextResource;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<HUDTextResource> CostCounterTextResource;
    }

    [RTTI.Serializable(0x1E26E65523594237, GameType.DS)]
    public class DSUIAimHUDComponentConsciousness : DSUIAimHUDComponentGageBase
    {
    }

    [RTTI.Serializable(0xE5393DBC88C7ABAA, GameType.DS)]
    public class DSUIAimHUDComponentConsciousnessResource : DSUIAimHUDComponentGageBaseResource
    {
    }

    [RTTI.Serializable(0x4A6D373FB05E744E, GameType.DS)]
    public class DSUIAimHUDComponentConstructionStatus : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0x636C45CFD78A2C1D, GameType.DS)]
    public class DSUIAimHUDComponentConstructionStatusResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public Ref<HUDTextResource> EquipWeaponName;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<HUDTextResource> EquipMagazineName;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<HUDTextResource> AmmoTextCounter;
        [RTTI.Member(13, 0x78, "Logic")] public Ref<HUDTextResource> AmmoBgTextCounter;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<HUDTextResource> ConstructionCostText;
        [RTTI.Member(15, 0x88, "Logic")] public Ref<HUDTextResource> ConstructionCostBgText;
        [RTTI.Member(16, 0x90, "Logic")] public Ref<HUDTextResource> CurrentBandWidthText;
        [RTTI.Member(17, 0x98, "Logic")] public Ref<HUDTextResource> CurrentBandWidthBgText;
        [RTTI.Member(18, 0xA0, "Logic")] public Ref<HUDElementResource> FeasibilityElement;
        [RTTI.Member(19, 0xB0, "Logic")] public FRGBAColor EffectivenessColor;
        [RTTI.Member(20, 0xC0, "Logic")] public FRGBAColor DisabledColor;
    }

    [RTTI.Serializable(0x9B01B74C70553D0F, GameType.DS)]
    public class DSUIAimHUDComponentDamegeType : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0x924DD44DBB9AEA7, GameType.DS)]
    public class DSUIAimHUDComponentDamegeTypeResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public EDSUIEquipFuncIconSlotType SlotType;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<HUDImageResource> ImpactToTheTarget;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<HUDImageResource> SpecialEffectsOnTarget;
        [RTTI.Member(13, 0x78, "Logic")] public Ref<HUDImageResource> PreImpactToTheTarget;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<HUDImageResource> PreSpecialEffectsOnTarget;
    }

    [RTTI.Serializable(0x6CB96A00C50D8531, GameType.DS)]
    public class DSUIAimHUDComponentGageBase : DSUIAimHUDComponentAlphaTranslationBase
    {
    }

    [RTTI.Serializable(0xE0EAB83B43B4EF8E, GameType.DS)]
    public class DSUIAimHUDComponentGageBaseResource : DSUIAimHUDComponentAlphaTranslationBaseResource
    {
        [RTTI.Member(15, 0x80, "Logic_Gauge")] public Ref<DSUIHUDLineElementResource> GaugeLineElement;
        [RTTI.Member(16, 0x88, "Logic_Gauge")] public Ref<HUDElementResource> GaugeScaleElement;
    }

    [RTTI.Serializable(0xC762B4130D9B6F7C, GameType.DS)]
    public class DSUIAimHUDComponentGauge2Base : DSUIAimHUDComponentAlphaTranslationBase
    {
    }

    [RTTI.Serializable(0xCC9AE0EE9CF9A9B5, GameType.DS)]
    public class DSUIAimHUDComponentGauge2BaseResource : DSUIAimHUDComponentAlphaTranslationBaseResource
    {
    }

    [RTTI.Serializable(0x1CA5482F14D531CD, GameType.DS)]
    public class DSUIAimHUDComponentKeyHelp : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0x3C6608EE6E20B413, GameType.DS)]
    public class DSUIAimHUDComponentKeyHelpResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public int Slot;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<HUDElementResource> KeyHelpIcon;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<HUDTextResource> KeyHelpText;
        [RTTI.Member(13, 0x78, "Logic")] public Ref<HUDElementResource> HoldIconTemplate;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<DSUIHUDAnimatorResource> HoldIconAnimator;
    }

    [RTTI.Serializable(0x4BF5708C92513163, GameType.DS)]
    public class DSUIAimHUDComponentLung : DSUIAimHUDComponentGageBase
    {
    }

    [RTTI.Serializable(0x2AFD3C5C261EA378, GameType.DS)]
    public class DSUIAimHUDComponentLungResource : DSUIAimHUDComponentGageBaseResource
    {
    }

    [RTTI.Serializable(0x79416D72F34AA007, GameType.DS)]
    public class DSUIAimHUDComponentMagazineDisp : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0xF1A519AC25CECA1E, GameType.DS)]
    public class DSUIAimHUDComponentMagazineDispResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public Ref<HUDTextResource> TextElement;
    }

    [RTTI.Serializable(0x7318D37DA80404D3, GameType.DS)]
    public class DSUIAimHUDComponentQPidLevel : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0xF9D05B612B89D262, GameType.DS)]
    public class DSUIAimHUDComponentQPidLevelResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public Ref<HUDImageResource> CurrentQPidLevel;
        [RTTI.Member(12, 0x68, "Logic_Texture")] public Ref<UITexture> Undiscovered;
        [RTTI.Member(13, 0x70, "Logic_Texture")] public Ref<UITexture> Unconnected;
        [RTTI.Member(14, 0x78, "Logic_Texture")] public Ref<UITexture> JoinedBridges;
        [RTTI.Member(15, 0x80, "Logic_Texture")] public Ref<UITexture> JoinedUCA;
        [RTTI.Member(17, 0x88, "Sound")] public Ref<SoundResource> LeavingQpidAreaSound;
        [RTTI.Member(18, 0x90, "Sound")] public int LeavingQpidAreaSoundDelay;
    }

    [RTTI.Serializable(0x7D2342FFC861F71F, GameType.DS)]
    public class DSUIAimHUDComponentSimple : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0x7F29C4311F1C5D7D, GameType.DS)]
    public class DSUIAimHUDComponentSimpleResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Option")] public bool AttrOptionFlag;
    }

    [RTTI.Serializable(0x7D9BB40F4EC50DC5, GameType.DS)]
    public class DSUIAimHUDComponentSocket : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x6F6BBBFDC3B292D2, GameType.DS)]
    public class DSUIAimHUDComponentSocketGroup : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD8E7ED879AF9C7AF, GameType.DS)]
    public class DSUIAimHUDComponentSocketGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<HUDElementResource> SocketsElementRoot;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DSUIAimHUDComponentSocketResource>> Sockets;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<DSUIAimHUDSocketAnimatorSetGroupResource> AnimatorSetGroup;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<DSUIAimHUDShakResourceBase> ShakResource;
        [RTTI.Member(9, 0x48, "Logic_Internal")] public int SocketChangeInternalFlame;
        [RTTI.Member(10, 0x50, "Logic_Internal")] public Ref<CurveResource> SocketChangeAdaptTrasCurve;
        [RTTI.Member(11, 0x58, "Logic_Internal")] public Ref<CurveResource> SocketChangeAdaptRotCurve;
        [RTTI.Member(12, 0x60, "Logic_Internal")] public int SwitchInternalFlame;
        [RTTI.Member(13, 0x68, "Logic_Internal")] public Ref<CurveResource> SwitchAdaptTrasCurve;
        [RTTI.Member(14, 0x70, "Logic_Internal")] public Ref<CurveResource> SwitchAdaptRotCurve;
        [RTTI.Member(7, 0x78, "Logic")] public bool IsHideWithZoomIn;
    }

    [RTTI.Serializable(0x6D5F0D00A654677B, GameType.DS)]
    public class DSUIAimHUDComponentSocketResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<HUDElementResource> ConnectedElement;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<HUDElementResource> OffsetAnimationElement;
        [RTTI.Member(5, 0x30, "Logic")] public Vec3 ConnectionInterval;
        [RTTI.Member(6, 0x40, "Logic")] public float StartupIntervalSeconds;
        [RTTI.Member(7, 0x44, "Logic")] public IVec3 Size;
        [RTTI.Member(8, 0x50, "Logic")] public EDSUIAimHUDComponentSocketAutoAlignment AutoAlignment;
        [RTTI.Member(9, 0x58, "Logic")] public Array<Ref<DSUIAimHUDComponentBaseResource>> Components;
    }

    [RTTI.Serializable(0xED0061C7F7CB8BFE, GameType.DS)]
    public class DSUIAimHUDComponentStamina : DSUIAimHUDComponentGageBase
    {
    }

    [RTTI.Serializable(0x15BD3DFDDCE860FD, GameType.DS)]
    public class DSUIAimHUDComponentStamina2 : DSUIAimHUDGaugeMargineBase
    {
    }

    [RTTI.Serializable(0x9E0F3908F12DB0D5, GameType.DS)]
    public class DSUIAimHUDComponentStamina2Resource : DSUIAimHUDComponentGauge2BaseResource
    {
        [RTTI.Member(15, 0x80, "Logic_Stamina")] public Ref<HUDImageResource> Logic_Stamina_GaugeImageElement;
        [RTTI.Member(24, 0x88, "Logic_Fatigue")] public Ref<HUDImageResource> Logic_Fatigue_GaugeImageElement;
        [RTTI.Member(32, 0x90, "Logic_Lung")] public Ref<HUDImageResource> Logic_Lung_GaugeImageElement;
        [RTTI.Member(16, 0x98, "Logic_Stamina")] public bool Logic_Stamina_IsKeepTextureUV;
        [RTTI.Member(25, 0x99, "Logic_Fatigue")] public bool Logic_Fatigue_IsKeepTextureUV;
        [RTTI.Member(33, 0x9A, "Logic_Lung")] public bool Logic_Lung_IsKeepTextureUV;
        [RTTI.Member(42, 0xA0, "Logic")] public float StaminaFrom;
        [RTTI.Member(43, 0xA4, "Logic")] public float StaminaUpTo;
        [RTTI.Member(44, 0xA8, "Logic")] public float FatigueFrom;
        [RTTI.Member(45, 0xAC, "Logic")] public float FatigueUpTo;
        [RTTI.Member(34, 0xB0, "Logic_Lung")] public float LungFrom;
        [RTTI.Member(35, 0xB4, "Logic_Lung")] public float LungUpTo;
        [RTTI.Member(48, 0xB8, "Logic")] public bool IsHideOutRangeStamina;
        [RTTI.Member(49, 0xBC, "Logic")] public uint32 OutRangeStaminaHideCountDown;
        [RTTI.Member(47, 0xC0, "Logic")] public Ref<CurveResource> GaugeAnimationAdaptCurve;
        [RTTI.Member(18, 0xC8, "Logic_StaminaMargin")] public Ref<HUDImageResource> TemplateStaminaMargine;
        [RTTI.Member(19, 0xD0, "Logic_StaminaMargin")] public int TemplateStaminaMargineCopies;
        [RTTI.Member(20, 0xD8, "Logic_StaminaMargin")] public Ref<DSUIHUDAnimatorSetResource> StaminaMargineGaugeMargineAnime;
        [RTTI.Member(21, 0xE0, "Logic_StaminaMargin")] public Ref<DSUIHUDAnimatorSetResource> StaminaMargineGaugeNotchAnime;
        [RTTI.Member(22, 0xE8, "Logic_StaminaMargin")] public bool Logic_StaminaMargin_IsMargineGaugeKeepTextureUV;
        [RTTI.Member(27, 0xF0, "Logic_FatigueMargin")] public Ref<HUDImageResource> TemplateFatigueMargine;
        [RTTI.Member(28, 0xF8, "Logic_FatigueMargin")] public int TemplateFatigueMargineCopies;
        [RTTI.Member(29, 0x100, "Logic_FatigueMargin")] public Ref<DSUIHUDAnimatorSetResource> FatigueMargineGaugeAnimeIdle;
        [RTTI.Member(30, 0x108, "Logic_FatigueMargin")] public bool Logic_FatigueMargin_IsMargineGaugeKeepTextureUV;
        [RTTI.Member(37, 0x110, "Logic_Lung_AlphaTranslation")] public Ref<HUDElementResource> AlphaTargetElement;
        [RTTI.Member(38, 0x118, "Logic_Lung_AlphaTranslation")] public float ActiveAlpha;
        [RTTI.Member(39, 0x11C, "Logic_Lung_AlphaTranslation")] public float EnableAlpha;
        [RTTI.Member(40, 0x120, "Logic_Lung_AlphaTranslation")] public int TransitionFlame;
        [RTTI.Member(46, 0x124, "Logic")] public int GaugeNotchWidth;
    }

    [RTTI.Serializable(0x7FC5ED13BE9C2C51, GameType.DS)]
    public class DSUIAimHUDComponentStaminaResource : DSUIAimHUDComponentGageBaseResource
    {
    }

    [RTTI.Serializable(0xD82ABAD22110DF3A, GameType.DS)]
    public class DSUIAimHUDComponentWeaponStatus : DSUIAimHUDComponentBase
    {
    }

    [RTTI.Serializable(0x884355116ACAB820, GameType.DS)]
    public class DSUIAimHUDComponentWeaponStatusResource : DSUIAimHUDComponentBaseResource
    {
        [RTTI.Member(10, 0x60, "Logic")] public Ref<HUDTextResource> NameTextElement;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<HUDTextResource> AmmoTextCounter;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<HUDTextResource> AmmoBgTextCounter;
        [RTTI.Member(13, 0x78, "Logic")] public Ref<HUDElementResource> ReloadElement;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<HUDElementResource> MModeElement;
        [RTTI.Member(15, 0x88, "Logic")] public Ref<HUDElementResource> SpreadElement;
    }

    [RTTI.Serializable(0xD9A13E88E5050031, GameType.DS)]
    public class DSUIAimHUDDemoJuiceAtPrivateRoomSequenceEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x62DABB77D8A190FF, GameType.DS)]
    public class DSUIAimHUDDemoJuiceAtPrivateRoomSequenceEventResource : PauseEventResource
    {
        [RTTI.Member(5, 0x28)] public float ProgressTimeSec;
        [RTTI.Member(6, 0x2C)] public float ProgressDelayTimeSec;
        [RTTI.Member(7, 0x30)] public float VisibleTimeSec;
        [RTTI.Member(9, 0x34, "Skiped")] public float ProgressTimeSinceSkipped;
        [RTTI.Member(10, 0x38, "Skiped")] public float VisibleTimeSinceSkipped;
    }

    [RTTI.Serializable(0xDC5B477779F87AA0, GameType.DS)]
    public class DSUIAimHUDGaugeMargineBase : DSUIAimHUDComponentGauge2Base
    {
    }

    [RTTI.Serializable(0xA10FD68CB8D65792, GameType.DS)]
    public class DSUIAimHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xBA49C97C31B69D4F, GameType.DS)]
    public class DSUIAimHUDLogicBootUpResource : Resource
    {
        [RTTI.Member(5, 0x20, "Logic_Life")] public float ThresholdLife;
        [RTTI.Member(6, 0x24, "Logic_Life")] public float ActiveAsLessLife;
        [RTTI.Member(8, 0x28, "Logic_Stamina")] public float ThresholdStamina;
        [RTTI.Member(9, 0x2C, "Logic_Stamina")] public float ActiveAsLessStamina;
        [RTTI.Member(14, 0x30, "Logic_Lung")] public float BootThresholdLung;
        [RTTI.Member(15, 0x34, "Logic_Lung")] public float ActiveAsLessLung;
        [RTTI.Member(11, 0x38, "Logic_Consciousness")] public float BootThresholdConsciousness;
        [RTTI.Member(12, 0x3C, "Logic_Consciousness")] public float ActiveAsLessConsciousness;
        [RTTI.Member(17, 0x40, "Logic_QpidArea")] public float ChangedQpidAreaActiveSecond;
        [RTTI.Member(19, 0x44, "Logic_Fatigue")] public float ThresholdFatigue;
        [RTTI.Member(21, 0x48, "Logic_BloodPack")] public float BloodPackActiveSecond;
        [RTTI.Member(23, 0x4C, "Logic_MuleArea")] public float WaitBootupSecond;
        [RTTI.Member(24, 0x50, "Logic_MuleArea")] public float WaitStopSecond;
        [RTTI.Member(3, 0x54, "Logic")] public float ActiveSecond;
    }

    [RTTI.Serializable(0x9E39CE519B7D8AD, GameType.DS)]
    public class DSUIAimHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(37, 0x78, "Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(38, 0x80, "Logic")] public Ref<HUDElementResource> VisiblePartsElement;
        [RTTI.Member(39, 0x88, "Logic")] public Array<Ref<DSUIAimHUDComponentBaseResource>> Components;
        [RTTI.Member(17, 0x98, "ComponentSocket")] public Ref<HUDElementResource> ComponentSocketsRoot;
        [RTTI.Member(18, 0xA0, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> DefaultR;
        [RTTI.Member(20, 0xA8, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> GrenadeR;
        [RTTI.Member(22, 0xB0, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> ConstructionR;
        [RTTI.Member(30, 0xB8, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> PlayerParamR;
        [RTTI.Member(32, 0xC0, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> ChangedQpidArea_R;
        [RTTI.Member(24, 0xC8, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> Truck_R;
        [RTTI.Member(26, 0xD0, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> Bike_R;
        [RTTI.Member(28, 0xD8, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> Vehicle_R;
        [RTTI.Member(19, 0xE0, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> DefaultL;
        [RTTI.Member(21, 0xE8, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> GrenadeL;
        [RTTI.Member(23, 0xF0, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> ConstructionL;
        [RTTI.Member(31, 0xF8, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> PlayerParamL;
        [RTTI.Member(33, 0x100, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> ChangedQpidArea_L;
        [RTTI.Member(25, 0x108, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> Truck_L;
        [RTTI.Member(27, 0x110, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> Bike_L;
        [RTTI.Member(29, 0x118, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> Vehicle_L;
        [RTTI.Member(34, 0x120, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> JuiceAtPrivateRoom;
        [RTTI.Member(35, 0x128, "ComponentSocket")] public Ref<DSUIAimHUDComponentSocketGroupResource> Onsen;
        [RTTI.Member(47, 0x130, "Logic_BootUp")] public Ref<DSUIAimHUDLogicBootUpResource> BootupResource;
        [RTTI.Member(52, 0x138, "Logic_InternalAnimation")] public int DefaultSocketInterAnimaFlame;
        [RTTI.Member(53, 0x140, "Logic_InternalAnimation")] public Ref<CurveResource> DefaultSocketAdaptTrasCurve;
        [RTTI.Member(54, 0x148, "Logic_InternalAnimation")] public Ref<CurveResource> DefaultSocketAdaptRotCurve;
        [RTTI.Member(49, 0x150, "DSUIAimHUDComponentStamina2")] public int AnimationMaxFrame;
        [RTTI.Member(50, 0x154, "DSUIAimHUDComponentStamina2")] public int GaugeAnimationDelayFrame;
        [RTTI.Member(62, 0x158, "Logic_BootUp")] public uint16 StartUpInDelayFlame;
        [RTTI.Member(63, 0x15A, "Logic_BootUp")] public uint16 StopOutDelayFlame;
        [RTTI.Member(56, 0x15C, "Logic_LungCapacity")] public float LungWarningStateFirstRate;
        [RTTI.Member(57, 0x160, "Logic_LungCapacity")] public float LungWarningStateFinalRate;
        [RTTI.Member(59, 0x164, "Logic_Consciousness")] public float ConsciousnessWarningStateFirstRate;
        [RTTI.Member(60, 0x168, "Logic_Consciousness")] public float ConsciousnessWarningStateFinalRate;
        [RTTI.Member(40, 0x170, "Logic")] public Vec2 ShakeOffsetScaleRate;
        [RTTI.Member(42, 0x180, "Logic_ZoomIn")] public float ZoomInterpShowTime;
        [RTTI.Member(43, 0x184, "Logic_ZoomIn")] public float ZoomInterpHiddenTime;
        [RTTI.Member(44, 0x188, "Logic_ZoomIn")] public Ref<CurveResource> ZoomInterpShowCurve;
        [RTTI.Member(45, 0x190, "Logic_ZoomIn")] public Ref<CurveResource> ZoomInterpHiddenCurve;
        [RTTI.Member(65, 0x198, "Sound")] public Ref<SoundResource> StaminaMeterAppearFirstTime;
        [RTTI.Member(66, 0x1A0, "Sound")] public Ref<SoundResource> BulletSound_StandardBullet;
        [RTTI.Member(67, 0x1A8, "Sound")] public Ref<SoundResource> BulletSound_BloodBullet;
        [RTTI.Member(68, 0x1B0, "Sound")] public Ref<SoundResource> BulletSound_ChiralBullet;
        [RTTI.Member(69, 0x1B8, "Sound")] public Ref<SoundResource> BulletSound_FragBullet;
        [RTTI.Member(70, 0x1C0, "Sound")] public Ref<SoundResource> BulletSound_SlipBullet;
        [RTTI.Member(71, 0x1C8, "Sound")] public Ref<SoundResource> BulletSound_SleepBullet;
        [RTTI.Member(72, 0x1D0, "Sound")] public Ref<SoundResource> BulletSound_StanBullet;
        [RTTI.Member(73, 0x1E0, "Sound")] public Ref<SoundResource> AdrenalineModeOn;
        [RTTI.Member(74, 0x1E8, "Sound")] public Ref<SoundResource> AdrenalineModeOff;
    }

    [RTTI.Serializable(0x80DA6CBFBACF1076, GameType.DS)]
    public class DSUIAimHUDOldShak : DSUIAimHUDShakBase
    {
    }

    [RTTI.Serializable(0x61906CF83F049E9F, GameType.DS)]
    public class DSUIAimHUDOldShakResource : DSUIAimHUDShakResourceBase
    {
        [RTTI.Member(5, 0x28, "Logic")] public float ScreenHorizontalMovement;
        [RTTI.Member(6, 0x2C, "Logic")] public float ScreenVerticalMovement;
        [RTTI.Member(7, 0x30, "Logic")] public float RotationMaxX;
        [RTTI.Member(8, 0x34, "Logic")] public float RotationMaxY;
        [RTTI.Member(9, 0x38, "Logic")] public float DepthMovement;
        [RTTI.Member(10, 0x3C, "Logic")] public float DepthMovementMaxSpeed;
        [RTTI.Member(11, 0x40, "Logic")] public float DepthInterpolationRatio;
        [RTTI.Member(12, 0x44, "Logic")] public float ShakingReflectZtoX;
        [RTTI.Member(13, 0x48, "Logic")] public float ShakingReflectZtoY;
        [RTTI.Member(14, 0x4C, "Logic")] public float ShakingZRate;
        [RTTI.Member(15, 0x50, "Logic")] public float ShakingAttenuationRate;
        [RTTI.Member(16, 0x54, "Logic")] public float ShakingCoefficient;
        [RTTI.Member(17, 0x58, "Logic")] public float InwardPenetrationRate;
        [RTTI.Member(19, 0x5C, "Logic_ZoomOut")] public bool IsZoomOutEnable;
        [RTTI.Member(20, 0x60, "Logic_ZoomOut")] public float TrackingStartLength;
        [RTTI.Member(21, 0x64, "Logic_ZoomOut")] public float TrackingEndLength;
        [RTTI.Member(22, 0x68, "Logic_ZoomOut")] public float TrackingEndScal;
        [RTTI.Member(23, 0x70, "Logic_ZoomOut")] public Vec3 TrackingEndOffset;
        [RTTI.Member(24, 0x80, "Logic_ZoomOut")] public float TrackingEndShakeRate;
        [RTTI.Member(25, 0x84, "Logic_ZoomOut")] public float AdaptRatePreviousFrame;
    }

    [RTTI.Serializable(0xC457C9865322C6B7, GameType.DS)]
    public class DSUIAimHUDShak : DSUIAimHUDShakBase
    {
    }

    [RTTI.Serializable(0x868AD20240A191F6, GameType.DS)]
    public class DSUIAimHUDShakBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x9D4B3B3DC514636F, GameType.DS)]
    public class DSUIAimHUDShakResource : DSUIAimHUDShakResourceBase
    {
        [RTTI.Member(5, 0x28, "Logic")] public float PreviousScaleFrameAdaptationRate;
        [RTTI.Member(6, 0x2C, "Logic")] public float PreviousTranslationFrameAdaptationRate;
        [RTTI.Member(7, 0x30, "Logic")] public float PreviousRotationFrameAdaptationRate;
        [RTTI.Member(10, 0x34, "Logic_Zoomout")] public float StartLength;
        [RTTI.Member(11, 0x38, "Logic_Zoomout")] public float EndLength;
        [RTTI.Member(12, 0x3C, "Logic_Zoomout")] public float StartScale;
        [RTTI.Member(13, 0x40, "Logic_Zoomout")] public Vec3 StartOffset;
        [RTTI.Member(14, 0x50, "Logic_Zoomout")] public float EndScale;
        [RTTI.Member(15, 0x60, "Logic_Zoomout")] public Vec3 EndOffset;
        [RTTI.Member(20, 0x70, "Logic_Range")] public bool IsOutsideScreen;
        [RTTI.Member(21, 0x80, "Logic_Range")] public IRect PushbackJudgRange;
        [RTTI.Member(22, 0x90, "Logic_Range")] public IRect LimitRange;
        [RTTI.Member(17, 0xA0, "Logic_Rotation")] public Vec2 EulerRotLimit;
        [RTTI.Member(18, 0xB0, "Logic_Rotation")] public Vec2 MaxDisToTurn;
        [RTTI.Member(8, 0xC0, "Logic")] public float InwardPenetrationRate;
        [RTTI.Member(24, 0xC4, "Logic_OldShake")] public float CamShakeHorizontalMovement;
        [RTTI.Member(25, 0xC8, "Logic_OldShake")] public float CamShakeVerticalMovement;
        [RTTI.Member(26, 0xCC, "Logic_OldShake")] public float CamShakeRotationMaxX;
        [RTTI.Member(27, 0xD0, "Logic_OldShake")] public float CamShakeRotationMaxY;
        [RTTI.Member(29, 0xD4, "Logic_OldShake_PlayerMovementToAimHUDMovement")] public float DepthMovementMaxSpeed;
        [RTTI.Member(30, 0xD8, "Logic_OldShake_PlayerMovementToAimHUDMovement")] public float DepthMovement;
        [RTTI.Member(32, 0xDC, "Logic_OldShake_JointMovementToAimHUDMovement")] public float ShakingReflectZtoX;
        [RTTI.Member(33, 0xE0, "Logic_OldShake_JointMovementToAimHUDMovement")] public float ShakingReflectZtoY;
        [RTTI.Member(34, 0xE4, "Logic_OldShake_JointMovementToAimHUDMovement")] public float ShakingZRate;
        [RTTI.Member(35, 0xE8, "Logic_OldShake_JointMovementToAimHUDMovement")] public float ShakingAttenuationRate;
        [RTTI.Member(37, 0xEC, "Logic_CameraSuddenAngle")] public bool IsEnableHelper;
        [RTTI.Member(42, 0xED, "Logic_CameraSuddenAngle")] public bool IsEnablePositiveOffset;
        [RTTI.Member(43, 0xF0, "Logic_CameraSuddenAngle")] public Vec3 PositiveOffset;
        [RTTI.Member(44, 0x100, "Logic_CameraSuddenAngle")] public bool IsEnableNegativeOffset;
        [RTTI.Member(45, 0x110, "Logic_CameraSuddenAngle")] public Vec3 NegativeOffset;
        [RTTI.Member(38, 0x120, "Logic_CameraSuddenAngle")] public float EnablePositiveMinRate;
        [RTTI.Member(39, 0x124, "Logic_CameraSuddenAngle")] public float EnablePositiveMaxRate;
        [RTTI.Member(40, 0x128, "Logic_CameraSuddenAngle")] public float EnableNegativeMinRate;
        [RTTI.Member(41, 0x12C, "Logic_CameraSuddenAngle")] public float EnableNegativeMaxRate;
    }

    [RTTI.Serializable(0x8E55BFF0DE3F4C84, GameType.DS)]
    public class DSUIAimHUDShakResourceBase : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<HUDElementResource> ShakTargetElement;
    }

    [RTTI.Serializable(0x23BC3E62E56B0EA8, GameType.DS)]
    public class DSUIAimHUDSocketAnimatorSetGroupResource : CoreObject
    {
        [RTTI.Member(2, 0x28)] public Array<Ref<DSUIAimHUDSocketAnimatorSetResource>> AnimatorSets;
    }

    [RTTI.Serializable(0xE388D77DB0616D79, GameType.DS)]
    public class DSUIAimHUDSocketAnimatorSetResource : CoreObject
    {
        [RTTI.Member(4, 0x28, "Animator")] public Ref<DSUIHUDAnimatorResource> Intro;
        [RTTI.Member(5, 0x30, "Animator")] public Ref<DSUIHUDAnimatorResource> Idle;
        [RTTI.Member(6, 0x38, "Animator")] public Ref<DSUIHUDAnimatorResource> Outro;
        [RTTI.Member(2, 0x40)] public EDSUIAimHUDSocketAnimeType Hash;
    }

    [RTTI.Serializable(0xCEB27EA40A7A5D8D, GameType.DS)]
    public class DSUIAimHUDWorldShak : DSUIAimHUDShak
    {
    }

    [RTTI.Serializable(0x6A892F4FD5983912, GameType.DS)]
    public class DSUIAimHUDWorldShakResource : DSUIAimHUDShakResource
    {
        [RTTI.Member(47, 0x130, "Logic_Zoomout")] public Ref<CurveResource> ZoomOutScaleCurve;
        [RTTI.Member(49, 0x138, "Logic_Range")] public bool IsEnableOffScreenPosition;
        [RTTI.Member(50, 0x140, "Logic_Range")] public Vec3 OffScreenPosition;
        [RTTI.Member(53, 0x150, "Logic_CenterConflict")] public float TopLimit;
        [RTTI.Member(52, 0x154, "Logic_CenterConflict")] public bool IsEnable;
        [RTTI.Member(54, 0x155, "Logic_CenterConflict")] public bool IsOnlyForceAimMode;
    }

    [RTTI.Serializable(0x2F8ED9C51F3248BE, GameType.DS)]
    public class DSUIBackpackCustomizeColor
    {
        [RTTI.Member(0, 0x0)] public uint16 ShaderColorIndex;
        [RTTI.Member(1, 0x4)] public RGBAColor PaletteColor;
        [RTTI.Member(2, 0x8)] public Ref<LocalizedTextResource> ColorNameText;
        [RTTI.Member(3, 0x10)] public Ref<BooleanFact> IsColorOpenedFact;
        [RTTI.Member(4, 0x18)] public bool IsDefault;
    }

    [RTTI.Serializable(0x9630C3483FCE201C, GameType.DS)]
    public class DSUIBackpackCustomizeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Fact")] public Ref<BooleanFact> IsColorChangeOpenedFact;
        [RTTI.Member(5, 0x28, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_SNOW_WHITE;
        [RTTI.Member(6, 0x48, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_WOLF_GRAY;
        [RTTI.Member(7, 0x68, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_OLIVE_DRAB;
        [RTTI.Member(8, 0x88, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_STEALTH_BLACK;
        [RTTI.Member(9, 0xA8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_MARS_RED;
        [RTTI.Member(10, 0xC8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_EMERGENCY_YELLOW;
        [RTTI.Member(11, 0xE8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_GRASS_GREEN;
        [RTTI.Member(12, 0x108, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_COOL_BLUE;
        [RTTI.Member(13, 0x128, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_EXPRESS_PURPLE;
        [RTTI.Member(14, 0x148, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_DESSERT_PINK;
        [RTTI.Member(15, 0x168, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_COYOTE_BROWN;
        [RTTI.Member(16, 0x188, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_DESERT_TAN;
        [RTTI.Member(17, 0x1A8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_BRIDGES_ORANGE;
        [RTTI.Member(18, 0x1C8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_NAVY_BLUE;
        [RTTI.Member(19, 0x1E8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_BLOOD_RED;
        [RTTI.Member(20, 0x208, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_VOLCANO_ORANGE;
        [RTTI.Member(21, 0x228, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_BRIGHT_YELLOW;
        [RTTI.Member(22, 0x248, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_GHOST_GREEN;
        [RTTI.Member(23, 0x268, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_SIGNAL_GREEN;
        [RTTI.Member(24, 0x288, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_LIGHTNING_BLUE;
        [RTTI.Member(25, 0x2A8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_RAINBOW_PURPLE;
        [RTTI.Member(26, 0x2C8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_ROSE_PINK;
        [RTTI.Member(27, 0x2E8, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_ALL_REFLECTOR;
        [RTTI.Member(28, 0x308, "CustomizeColor")] public DSUIBackpackCustomizeColor CustomizeColor_CHIRAL_GOLD;
    }

    [RTTI.Serializable(0xAE1FAB65119B22F, GameType.DS)]
    public class DSUIBackpackHeadlineResource
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> IconTexture;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> NameText;
    }

    [RTTI.Serializable(0x2284F438BA66A563, GameType.DS)]
    public class DSUIBaggageCarrierSlotTypeResource : Resource
    {
        [RTTI.Member(54, 0x20, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf;
        [RTTI.Member(85, 0x28, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Receive_Cart;
        [RTTI.Member(55, 0x30, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Received;
        [RTTI.Member(56, 0x38, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Supplied;
        [RTTI.Member(57, 0x40, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Prepared;
        [RTTI.Member(58, 0x48, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Material;
        [RTTI.Member(59, 0x50, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Donation;
        [RTTI.Member(60, 0x58, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Return;
        [RTTI.Member(61, 0x60, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Protection;
        [RTTI.Member(62, 0x68, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Commit;
        [RTTI.Member(63, 0x70, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Procurement;
        [RTTI.Member(64, 0x78, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_Reward;
        [RTTI.Member(65, 0x80, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_PublicCommit;
        [RTTI.Member(66, 0x88, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_TerminalShelf_PublicCommitMission;
        [RTTI.Member(67, 0x90, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Storage;
        [RTTI.Member(68, 0x98, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Terminal_Private;
        [RTTI.Member(69, 0xA0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Terminal_Public;
        [RTTI.Member(70, 0xA8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Terminal_Puclic_Received;
        [RTTI.Member(71, 0xB0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Terminal_Supply;
        [RTTI.Member(72, 0xB8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Post_Private;
        [RTTI.Member(73, 0xC0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Post_Public;
        [RTTI.Member(74, 0xC8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Post_Puclic_Received;
        [RTTI.Member(75, 0xD0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Post_Supply;
        [RTTI.Member(76, 0xD8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_MulePost_Private;
        [RTTI.Member(77, 0xE8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Construction;
        [RTTI.Member(78, 0xF0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Truck;
        [RTTI.Member(79, 0xF8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Truck_Inside;
        [RTTI.Member(80, 0x100, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Truck_Outside;
        [RTTI.Member(81, 0x120, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Bike;
        [RTTI.Member(3, 0x128, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_BackPack;
        [RTTI.Member(4, 0x130, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Suits;
        [RTTI.Member(5, 0x138, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_RightArm;
        [RTTI.Member(6, 0x140, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_LeftArm;
        [RTTI.Member(7, 0x148, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_RightWaist;
        [RTTI.Member(8, 0x150, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_LeftWaist;
        [RTTI.Member(9, 0x158, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Hands;
        [RTTI.Member(10, 0x160, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_RightHand;
        [RTTI.Member(11, 0x168, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_LeftHand;
        [RTTI.Member(12, 0x170, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Toolhanger;
        [RTTI.Member(13, 0x178, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Bootshanger;
        [RTTI.Member(14, 0x180, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L1;
        [RTTI.Member(15, 0x188, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L2;
        [RTTI.Member(16, 0x190, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L3;
        [RTTI.Member(17, 0x198, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L4;
        [RTTI.Member(18, 0x1A0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L5;
        [RTTI.Member(19, 0x1A8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L6;
        [RTTI.Member(20, 0x1B0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L7;
        [RTTI.Member(21, 0x1B8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_L8;
        [RTTI.Member(22, 0x1C0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S1;
        [RTTI.Member(23, 0x1C8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S2;
        [RTTI.Member(24, 0x1D0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S3;
        [RTTI.Member(25, 0x1D8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S4;
        [RTTI.Member(26, 0x1E0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S5;
        [RTTI.Member(27, 0x1E8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S6;
        [RTTI.Member(28, 0x1F0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S7;
        [RTTI.Member(29, 0x1F8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S8;
        [RTTI.Member(30, 0x200, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S9;
        [RTTI.Member(31, 0x208, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S10;
        [RTTI.Member(32, 0x210, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S11;
        [RTTI.Member(33, 0x218, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S12;
        [RTTI.Member(34, 0x220, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S13;
        [RTTI.Member(35, 0x228, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S14;
        [RTTI.Member(36, 0x230, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S15;
        [RTTI.Member(37, 0x238, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade_S16;
        [RTTI.Member(38, 0x240, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Grenade;
        [RTTI.Member(39, 0x248, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L1;
        [RTTI.Member(40, 0x250, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L2;
        [RTTI.Member(41, 0x258, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L3;
        [RTTI.Member(42, 0x260, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L4;
        [RTTI.Member(43, 0x268, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L5;
        [RTTI.Member(44, 0x270, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L6;
        [RTTI.Member(45, 0x278, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L7;
        [RTTI.Member(46, 0x280, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility_L8;
        [RTTI.Member(47, 0x288, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Utility;
        [RTTI.Member(48, 0x290, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_ChiralCylinder;
        [RTTI.Member(49, 0x298, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Equipments;
        [RTTI.Member(50, 0x2A0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Skeleton;
        [RTTI.Member(51, 0x2A8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Gloves;
        [RTTI.Member(52, 0x2B0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Mask;
        [RTTI.Member(53, 0x2B8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Player_Boots;
        [RTTI.Member(82, 0x2C0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Cart;
        [RTTI.Member(83, 0x2C8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Cart_Lv1;
        [RTTI.Member(84, 0x2D0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Cart_Lv2;
        [RTTI.Member(86, 0x2D8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Field;
        [RTTI.Member(87, 0x2E0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Sam;
        [RTTI.Member(88, 0x2E8, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Backpack_Locked;
        [RTTI.Member(89, 0x2F0, "DS_CarrierSlot")] public Ref<DSUICarrierSlotItemResource> CarrierSlotItem_Backpack_Locked_Cover;
    }

    [RTTI.Serializable(0x9E06926B2F2B0497, GameType.DS)]
    public class DSUIBaggageListItemTypeResource : Resource
    {
        [RTTI.Member(3, 0x20, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_MainWeapon;
        [RTTI.Member(4, 0x28, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_SubWeapon;
        [RTTI.Member(5, 0x30, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_SuitParts;
        [RTTI.Member(6, 0x38, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_Mask;
        [RTTI.Member(7, 0x40, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_Gloves;
        [RTTI.Member(8, 0x48, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_Shield;
        [RTTI.Member(9, 0x50, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_HeatParts;
        [RTTI.Member(10, 0x58, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_Shoes;
        [RTTI.Member(11, 0x60, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_BloodBag;
        [RTTI.Member(12, 0x70, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_Tool;
        [RTTI.Member(13, 0x78, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_Cart;
        [RTTI.Member(14, 0x80, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_VehicleParts;
        [RTTI.Member(15, 0x88, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_DummyBaggage;
        [RTTI.Member(16, 0x90, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_CrystalMaterial;
        [RTTI.Member(17, 0x98, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_ResinMaterial;
        [RTTI.Member(18, 0xA0, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_MetalMaterial;
        [RTTI.Member(19, 0xA8, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_CeramicMaterial;
        [RTTI.Member(20, 0xB0, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_ChemicalMaterial;
        [RTTI.Member(21, 0xB8, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_SpecialMaterial;
        [RTTI.Member(22, 0xC0, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_BodyBag;
        [RTTI.Member(23, 0xC8, "BaggageListItemTypeIcons")] public Ref<UITexture> ItemType_Garbage;
    }

    [RTTI.Serializable(0x8C375DE5C023ED3B, GameType.DS)]
    public class DSUIBirthdayMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x8E32BB8A994C7D4B, GameType.DS)]
    public class DSUIBirthdayMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0xDC60FB841E7C092, GameType.DS)]
    public class DSUIBirthdayMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x6B3C04BE549A0F1B, GameType.DS)]
    public class DSUIBirthdayMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(6, 0x30)] public Ref<MenuElementResource> BirthdayInputPanelElementResource;
        [RTTI.Member(7, 0x38)] public Ref<MenuElementResource> BirthdayDecidedPanelElementResource;
        [RTTI.Member(8, 0x40)] public Ref<MenuElementResource> BirthdayMonthListElementResource;
        [RTTI.Member(9, 0x48)] public Ref<MenuElementResource> BirthdayDateListElementResource;
        [RTTI.Member(10, 0x50)] public Ref<MenuElementResource> BirthdayMonthTextElementResource;
        [RTTI.Member(11, 0x58)] public Ref<MenuElementResource> BirthdayDateTextElementResource;
        [RTTI.Member(12, 0x60)] public Ref<MenuElementResource> BirthdayConfirmationMenuPanelElementResource;
        [RTTI.Member(14, 0x68, "Sound")] public Ref<SoundResource> BirtshdayMenuSoundResource;
        [RTTI.Member(15, 0x70, "Sound")] public Ref<SoundResource> ConfirmMenuSoundResource;
    }

    [RTTI.Serializable(0x2BFEF1DC05DEA47B, GameType.DS)]
    public class DSUIBolaReticleHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xB4CC1951F586F203, GameType.DS)]
    public class DSUIBolaReticleHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "Animation")] public Ref<DSUIHUDAnimatorResource> StunIntroAnimator;
        [RTTI.Member(20, 0x88, "Animation")] public Ref<DSUIHUDAnimatorResource> StunToBolaAnimator;
        [RTTI.Member(21, 0x90, "Animation")] public Ref<DSUIHUDAnimatorResource> StunAimAnimator;
        [RTTI.Member(22, 0x98, "Animation")] public Ref<DSUIHUDAnimatorResource> StunNoTargetAnimator;
        [RTTI.Member(23, 0xA0, "Animation")] public Ref<DSUIHUDAnimatorResource> StunShotAnimator;
        [RTTI.Member(24, 0xA8, "Animation")] public Ref<DSUIHUDAnimatorResource> BolaIntroAnimator;
        [RTTI.Member(25, 0xB0, "Animation")] public Ref<DSUIHUDAnimatorResource> BolaToStunAnimator;
        [RTTI.Member(26, 0xB8, "Animation")] public Ref<DSUIHUDAnimatorResource> BolaAimAnimator;
        [RTTI.Member(27, 0xC0, "Animation")] public Ref<DSUIHUDAnimatorResource> BolaNoTargetAnimator;
        [RTTI.Member(28, 0xC8, "Animation")] public Ref<DSUIHUDAnimatorResource> BolaShotAnimator;
        [RTTI.Member(29, 0xD0, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(30, 0xD8, "Animation")] public Ref<DSUIHUDAnimatorResource> ActivateAnimator;
        [RTTI.Member(31, 0xE0, "Animation")] public Ref<DSUIHUDAnimatorResource> DeactivateAnimator;
    }

    [RTTI.Serializable(0x3F1F8228756D6757, GameType.DS)]
    public class DSUICarrierSlotItemResource : Resource
    {
        [RTTI.Member(3, 0x20, "DS_Resource")] public Ref<UITexture> SlotIconImageResource;
        [RTTI.Member(4, 0x28, "DS_Resource")] public Ref<LocalizedTextResource> HeadlineTextResource;
        [RTTI.Member(5, 0x30, "DS_Resource")] public Ref<LocalizedTextResource> HeadlineFormatTextResource;
    }

    [RTTI.Serializable(0x5B0DA87300153F31, GameType.DS)]
    public class DSUICatalogueImageResource : Resource
    {
        [RTTI.Member(3, 0x20, "Textrures")] public Array<Ref<UITexture>> SmallImageTextures;
        [RTTI.Member(4, 0x30, "Textrures")] public Array<Ref<UITexture>> SmallOutlineImageTextures;
        [RTTI.Member(5, 0x40, "Textrures")] public Array<Ref<UITexture>> LargeImageTextures;
        [RTTI.Member(6, 0x50, "Textrures")] public Array<StreamingRef<UITexture>> MissionImageTextures;
        [RTTI.Member(7, 0x60, "Textrures")] public Ref<UITexture> DefaultSmallImageTexture;
        [RTTI.Member(8, 0x68, "Textrures")] public Ref<UITexture> DefaultSmallOutlineImageTexture;
        [RTTI.Member(9, 0x70, "Textrures")] public Ref<UITexture> DefaultLargeImageTexture;
        [RTTI.Member(10, 0x78, "Textrures")] public StreamingRef<UITexture> DefaultMissionImageTexture;
        [RTTI.Member(12, 0x80, "NameHash")] public Array<uint32> SmallImageNameHash;
        [RTTI.Member(13, 0x90, "NameHash")] public Array<uint32> SmallOutlineImageNameHash;
        [RTTI.Member(14, 0xA0, "NameHash")] public Array<uint32> LargeImageNameHash;
        [RTTI.Member(15, 0xB0, "NameHash")] public uint32 DefaultSmallImageNameHash;
        [RTTI.Member(16, 0xB4, "NameHash")] public uint32 DefaultSmallOutlineImageNameHash;
        [RTTI.Member(17, 0xB8, "NameHash")] public uint32 DefaultLargeImageNameHash;
    }

    [RTTI.Serializable(0xA4C695BB3AAF7D9C, GameType.DS)]
    public class DSUICharacterTelopContentResource : Resource
    {
        [RTTI.Member(3, 0x20, "DS_Resource")] public Ref<UITexture> CharacterNameTexture;
        [RTTI.Member(4, 0x28, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_ENGLISH;
        [RTTI.Member(5, 0x30, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_FRENCH;
        [RTTI.Member(6, 0x38, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_SPANISH_LA;
        [RTTI.Member(7, 0x40, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_PORTUGUESE_LA;
        [RTTI.Member(8, 0x48, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_ITALIAN;
        [RTTI.Member(9, 0x50, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_GERMAN;
        [RTTI.Member(10, 0x58, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_SPANISH;
        [RTTI.Member(11, 0x60, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_PORTUGUESE;
        [RTTI.Member(12, 0x68, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_GREEK;
        [RTTI.Member(13, 0x70, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_POLISH;
        [RTTI.Member(14, 0x78, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_RUSSIAN;
        [RTTI.Member(15, 0x80, "DS_Resource")] public Ref<LocalizedTextResource> VoiceActorNameText_JAPANESE;
    }

    [RTTI.Serializable(0xCF7F47E8F0EFA2B, GameType.DS)]
    public class DSUICharacterTelopSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE4724917233B6662, GameType.DS)]
    public class DSUICharacterTelopSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSUICharacterTelopContentResource> CharacterTelopContentResource;
        [RTTI.Member(9, 0x40, "Logic")] public Vec2 Position;
    }

    [RTTI.Serializable(0x9DC2A4D510F5B4AF, GameType.DS)]
    public class DSUICliffMemoriesFlashbackItem
    {
        [RTTI.Member(0, 0x0)] public bool IsDemo;
        [RTTI.Member(1, 0x4)] public int32 FlashbackId;
        [RTTI.Member(2, 0x8)] public Ref<LocalizedTextResource> TitleLocalizedText;
    }

    [RTTI.Serializable(0x317A7472CD656E8A, GameType.DS)]
    public class DSUICliffMemoriesFlashbackListResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<DSUICliffMemoriesFlashbackItem> ListItems;
    }

    [RTTI.Serializable(0xD526F4FABCA0044F, GameType.DS)]
    public class DSUICliffMemoriesMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x98B5FCC4E330EF74, GameType.DS)]
    public class DSUICliffMemoriesMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(8, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> Title_MenuBattle;
        [RTTI.Member(10, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> Title_MenuFlashback;
        [RTTI.Member(6, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> Title_MenuTop;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> Subtitle_MenuBattle;
        [RTTI.Member(11, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> Subtitle_MenuFlashback;
        [RTTI.Member(7, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> Subtitle_MenuTop;
        [RTTI.Member(13, 0x58, "Textures")] public StreamingRef<UITexture> Thumbnail_WorldWarI;
        [RTTI.Member(14, 0x60, "Textures")] public StreamingRef<UITexture> Thumbnail_WorldWarII;
        [RTTI.Member(15, 0x68, "Textures")] public StreamingRef<UITexture> Thumbnail_VietnamWar;
        [RTTI.Member(17, 0x70, "FlashbackList")] public Ref<DSUICliffMemoriesFlashbackListResource> FlashbackListResource;
    }

    [RTTI.Serializable(0xA5C397BA3859811E, GameType.DS)]
    public class DSUICliffMemoriesMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x68094AA7D09CC55A, GameType.DS)]
    public class DSUICliffMemoriesMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Elements")] public Ref<MenuElementResource> MenuTopPanelElementResource;
        [RTTI.Member(8, 0x38, "Elements")] public Ref<MenuElementResource> MenuBattlePanelElementResource;
        [RTTI.Member(9, 0x40, "Elements")] public Ref<MenuElementResource> MenuFlashbackPanelElementResource;
        [RTTI.Member(10, 0x48, "Elements")] public Ref<MenuElementResource> MenuTopListElementResource;
        [RTTI.Member(11, 0x50, "Elements")] public Ref<MenuElementResource> MenuBattleListElementResource;
        [RTTI.Member(12, 0x58, "Elements")] public Ref<MenuElementResource> MenuFlashbackListElementResource;
        [RTTI.Member(14, 0x60, "FlashbackList")] public Ref<DSUICliffMemoriesFlashbackListResource> FlashbackListResource;
    }

    [RTTI.Serializable(0x6A2A0185534B64C7, GameType.DS)]
    public class DSUICommonDialogueMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xE9B1E81E9F5F3D31, GameType.DS)]
    public class DSUICommonDialogueMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x257ABA5198FAF39C, GameType.DS)]
    public class DSUICommonDialogueMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> SelectViewResource;
    }

    [RTTI.Serializable(0xD1A19B87FB734D8A, GameType.DS)]
    public class DSUICommonDialogueOpenSequenceEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x6CB944C0D2D06FC4, GameType.DS)]
    public class DSUICommonDialogueOpenSequenceEventResource : PauseEventResource
    {
        [RTTI.Member(5, 0x28)] public EDSUICommonDialogueSetting Setting;
        [RTTI.Member(6, 0x30)] public Ref<LocalizedTextResource> Text;
    }

    [RTTI.Serializable(0xAD2ECA98CEBE0628, GameType.DS)]
    public class DSUICommonTelopElementResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(13, 0x30, "Logic")] public Ref<HUDElementResource> StrandRootElement;
        [RTTI.Member(14, 0x38, "Logic")] public Ref<HUDElementResource> StrandOnlineRootElement;
        [RTTI.Member(5, 0x40, "Logic")] public Ref<HUDTextResource> FirstTextElement;
        [RTTI.Member(6, 0x48, "Logic")] public Array<Ref<HUDTextResource>> SecondTextElements;
        [RTTI.Member(7, 0x58, "Logic")] public Array<Ref<HUDTextResource>> ThirdTextElements;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<HUDTextResource> FourthTextElement;
        [RTTI.Member(9, 0x70, "Logic")] public Ref<HUDTextResource> FifthTextElement;
        [RTTI.Member(10, 0x78, "Logic")] public Ref<HUDTextResource> SixthTextElement;
        [RTTI.Member(11, 0x80, "Logic")] public Ref<HUDImageResource> ImageElement;
        [RTTI.Member(12, 0x88, "Logic")] public Ref<HUDElementResource> BgElement;
        [RTTI.Member(16, 0x90, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(17, 0x98, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
    }

    [RTTI.Serializable(0xFF3B639DE6395173, GameType.DS)]
    public class DSUICommonTelopHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x8DF3BB8BDB51818C, GameType.DS)]
    public class DSUICommonTelopHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "Template")] public Array<Ref<DSUICommonTelopElementResource>> TelopElementResources;
        [RTTI.Member(19, 0x90, "DS_MusicTelop")] public Vec3 MusicTelopDisplayPosition_DEFAULT;
        [RTTI.Member(20, 0xA0, "DS_MusicTelop")] public Vec3 MusicTelopDisplayPosition_MUSIC_PLAYER;
        [RTTI.Member(22, 0xC0, "DS_StaffTelop")] public Vec3 StaffTelopDisplayPosition_TOP_LEFT;
        [RTTI.Member(23, 0xD0, "DS_StaffTelop")] public Vec3 StaffTelopDisplayPosition_TOP_RIGHT;
        [RTTI.Member(24, 0xE0, "DS_StaffTelop")] public Vec3 StaffTelopDisplayPosition_BOTTOM_LEFT;
        [RTTI.Member(25, 0xF0, "DS_StaffTelop")] public Vec3 StaffTelopDisplayPosition_BOTTOM_RIGHT;
        [RTTI.Member(26, 0x100, "DS_StaffTelop")] public Vec3 StaffTelopDisplayPosition_CENTER;
        [RTTI.Member(28, 0x110, "DS_Sound")] public Ref<SoundResource> IntroSound_Landmark_Bridges;
        [RTTI.Member(29, 0x118, "DS_Sound")] public Ref<SoundResource> IntroSound_Landmark_CheckPoint;
        [RTTI.Member(30, 0x120, "DS_Sound")] public Ref<SoundResource> IntroSound_Landmark_Mission;
        [RTTI.Member(31, 0x128, "DS_Sound")] public Ref<SoundResource> IntroSound_Landmark_Preppers;
        [RTTI.Member(32, 0x130, "DS_Sound")] public Ref<SoundResource> IntroSound_Tutorial_Intro;
        [RTTI.Member(33, 0x138, "DS_Sound")] public Ref<SoundResource> OutroSound_CommonTelop;
        [RTTI.Member(35, 0x140, "DS_Sound")] public Ref<SoundResource> OutroSound_LandmarkTelop;
        [RTTI.Member(37, 0x148, "DS_Sound")] public Ref<SoundResource> OutroSound_TutorialTelop;
        [RTTI.Member(36, 0x150, "DS_Sound")] public Ref<SoundResource> OutroSound_MusicTelop;
        [RTTI.Member(34, 0x158, "DS_Sound")] public Ref<SoundResource> OutroSound_StaffTelop;
    }

    [RTTI.Serializable(0xE682EE3B464CA602, GameType.DS)]
    public class DSUICommonTelopSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB3507C5264909D7, GameType.DS)]
    public class DSUICommonTelopSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EHUDSnap Pivot;
        [RTTI.Member(9, 0x40, "Logic")] public Vec2 Position;
        [RTTI.Member(10, 0x50, "Logic")] public Ref<LocalizedTextResource> CommonText1;
        [RTTI.Member(11, 0x58, "Logic")] public Ref<LocalizedTextResource> CommonText2;
    }

    [RTTI.Serializable(0x87E10AE8EBEB7DF9, GameType.DS)]
    public class DSUICompassDirectionInfo
    {
        [RTTI.Member(0, 0x0)] public float Angle;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> DirectionTexture1;
        [RTTI.Member(2, 0x10)] public Ref<UITexture> DirectionTexture2;
    }

    [RTTI.Serializable(0x4394A30984FB5F24, GameType.DS)]
    public class DSUICompassHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xE0E98D1AE026E5EC, GameType.DS)]
    public class DSUICompassHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDElementResource> CenterLineRootElement;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<HUDElementResource> IconsRootElement;
        [RTTI.Member(21, 0x90, "DS_Logic_CenterLine")] public Ref<HUDElementResource> CenterLineDotTemplateElement;
        [RTTI.Member(22, 0x98, "DS_Logic_CenterLine")] public Ref<DSUIHUDLineElementResource> CenterLineLineTemplateElement;
        [RTTI.Member(24, 0xA0, "DS_Logic_Icon")] public Ref<HUDElementResource> MarkerIconTemplateElement;
        [RTTI.Member(25, 0xA8, "DS_Logic_Icon")] public Ref<HUDElementResource> MarkerIconAllRootElement;
        [RTTI.Member(26, 0xB0, "DS_Logic_Icon")] public Ref<HUDImageResource> MarkerIconImageElement;
        [RTTI.Member(27, 0xB8, "DS_Logic_Icon")] public Ref<HUDElementResource> MarkerIconGlowRootElement;
        [RTTI.Member(28, 0xC0, "DS_Logic_Icon")] public Ref<HUDImageResource> MarkerIconGlowImageElement1;
        [RTTI.Member(29, 0xC8, "DS_Logic_Icon")] public Ref<HUDImageResource> MarkerIconGlowImageElement2;
        [RTTI.Member(30, 0xD0, "DS_Logic_Icon")] public Ref<HUDImageResource> MarkerIconGlowImageElement3;
        [RTTI.Member(31, 0xD8, "DS_Logic_Icon")] public Ref<HUDTextResource> MarkerIconTextElement;
        [RTTI.Member(32, 0xE0, "DS_Logic_Icon")] public Ref<HUDElementResource> DirectionIconTemplateElement;
        [RTTI.Member(33, 0xE8, "DS_Logic_Icon")] public Ref<HUDImageResource> DirectionImageElement1;
        [RTTI.Member(34, 0xF0, "DS_Logic_Icon")] public Ref<HUDImageResource> DirectionImageElement2;
        [RTTI.Member(35, 0xF8, "DS_Logic_Icon")] public Ref<HUDImageResource> DirectionArrowImageElement;
        [RTTI.Member(36, 0x100, "DS_Logic_Icon")] public Ref<HUDElementResource> IconNoticeTemplateElement;
        [RTTI.Member(37, 0x108, "DS_Logic_Icon")] public Ref<HUDImageResource> DrawLineDotImageElement;
        [RTTI.Member(39, 0x110, "Reticle")] public Ref<HUDElementResource> ReticleRootElement;
        [RTTI.Member(40, 0x118, "Reticle")] public Ref<HUDElementResource> ReticleMeterRootElement;
        [RTTI.Member(41, 0x120, "Reticle")] public Array<Ref<HUDTextResource>> ReticleMeterTextElements;
        [RTTI.Member(43, 0x130, "InfoPlate")] public Ref<HUDElementResource> InfoPlateRootElement;
        [RTTI.Member(44, 0x138, "InfoPlate")] public Ref<HUDElementResource> InfoPlateOffsetElement;
        [RTTI.Member(45, 0x140, "InfoPlate")] public Ref<HUDElementResource> InfoPlateJoinPolygonRootElement;
        [RTTI.Member(46, 0x148, "InfoPlate")] public Ref<HUDImageResource> InfoPlateFaceImageElement;
        [RTTI.Member(47, 0x150, "InfoPlate")] public Ref<HUDElementResource> InfoPlateTextRoots_Header;
        [RTTI.Member(48, 0x158, "InfoPlate")] public Ref<HUDElementResource> InfoPlateTextRoots_BodyFirstLine;
        [RTTI.Member(49, 0x160, "InfoPlate")] public Ref<HUDElementResource> InfoPlateTextRoots_BodySecondLine;
        [RTTI.Member(50, 0x168, "InfoPlate")] public Ref<HUDTextResource> InfoPlateTexts_Header;
        [RTTI.Member(51, 0x170, "InfoPlate")] public Ref<HUDTextResource> InfoPlateTexts_BodyFirstLine;
        [RTTI.Member(52, 0x178, "InfoPlate")] public Ref<HUDTextResource> InfoPlateTexts_BodySecondLine;
        [RTTI.Member(53, 0x180, "InfoPlate")] public Ref<HUDTextResource> InfoPlateBgTexts_Header;
        [RTTI.Member(54, 0x188, "InfoPlate")] public Ref<HUDImageResource> InfoPlateTextMaskImages_Header;
        [RTTI.Member(55, 0x190, "InfoPlate")] public Ref<HUDImageResource> InfoPlateTextMaskImages_BodyFirstLine;
        [RTTI.Member(56, 0x198, "InfoPlate")] public Ref<HUDImageResource> InfoPlateTextMaskImages_BodySecondLine;
        [RTTI.Member(57, 0x1A0, "InfoPlate")] public Ref<HUDImageResource> InfoPlateBodyFirstLineIcon;
        [RTTI.Member(58, 0x1A8, "InfoPlate")] public Ref<HUDImageResource> InfoPlateBodySecondLineIcon;
        [RTTI.Member(59, 0x1B0, "InfoPlate")] public Ref<HUDTextResource> InfoPlateBodyFirstLineIconNumber;
        [RTTI.Member(60, 0x1B8, "InfoPlate")] public Array<Ref<DSUIHUDPolygonElementResource>> InfoPlateJoinPolygonElements;
        [RTTI.Member(62, 0x1C8, "MarkerPlate")] public Ref<HUDElementResource> MarkerPlateRootElement;
        [RTTI.Member(63, 0x1D0, "MarkerPlate")] public Ref<HUDTextResource> MarkerPlateTextElement;
        [RTTI.Member(65, 0x1D8, "BaggageListPlate")] public Ref<HUDElementResource> BaggageListRootElement;
        [RTTI.Member(66, 0x1E0, "BaggageListPlate")] public Array<Ref<HUDTextResource>> BaggageListItemTextElements;
        [RTTI.Member(67, 0x1F0, "BaggageListPlate")] public Array<Ref<HUDImageResource>> BaggageListItemIconElements;
        [RTTI.Member(69, 0x200, "AltimeterPlate")] public Ref<HUDElementResource> AltimeterRootElement;
        [RTTI.Member(70, 0x208, "AltimeterPlate")] public Ref<DSUIHUDPolygonElementResource> AltimeterPolygonElement;
        [RTTI.Member(71, 0x210, "AltimeterPlate")] public Ref<DSUIHUDPolygonElementResource> AltimeterShadowPolygonElement;
        [RTTI.Member(72, 0x218, "AltimeterPlate")] public Ref<HUDElementResource> AltimeterTargetIconElement;
        [RTTI.Member(73, 0x220, "AltimeterPlate")] public Ref<HUDTextResource> AltimeterDistanceTextElement;
        [RTTI.Member(74, 0x228, "AltimeterPlate")] public Ref<HUDTextResource> AltimeterUpTextElement;
        [RTTI.Member(75, 0x230, "AltimeterPlate")] public Ref<HUDTextResource> AltimeterDownTextElement;
        [RTTI.Member(76, 0x238, "AltimeterPlate")] public Ref<HUDTextResource> AltimeterMaxHeightTextElement;
        [RTTI.Member(77, 0x240, "AltimeterPlate")] public Ref<HUDTextResource> AltimeterMinHeightTextElement;
        [RTTI.Member(79, 0x248, "ZiplineCaution")] public Ref<HUDElementResource> ZiplineCautionElement;
        [RTTI.Member(81, 0x250, "Animation")] public Ref<DSUIHUDAnimatorResource> CursorInitialAnimator;
        [RTTI.Member(82, 0x258, "Animation")] public Ref<DSUIHUDAnimatorResource> InfoIntroAnimator;
        [RTTI.Member(83, 0x260, "Animation")] public Ref<DSUIHUDAnimatorResource> InfoLoopAnimator;
        [RTTI.Member(84, 0x268, "Animation")] public Ref<DSUIHUDAnimatorResource> InfoOutroAnimator;
        [RTTI.Member(85, 0x270, "Animation")] public Ref<DSUIHUDAnimatorResource> NearDotIntroAnimator;
        [RTTI.Member(86, 0x278, "Animation")] public Ref<DSUIHUDAnimatorResource> CenterDotIntroAnimator;
        [RTTI.Member(87, 0x280, "Animation")] public Ref<DSUIHUDAnimatorResource> FarDotIntroAnimator;
        [RTTI.Member(88, 0x288, "Animation")] public Ref<DSUIHUDAnimatorResource> DrawLineDotIntroAnimator;
        [RTTI.Member(89, 0x290, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerIntroAnimator;
        [RTTI.Member(90, 0x298, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerOutroAnimator;
        [RTTI.Member(91, 0x2A0, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerFocusLoopAnimator;
        [RTTI.Member(92, 0x2A8, "Animation")] public Ref<DSUIHUDAnimatorResource> DirectionIconIntroAnimator;
        [RTTI.Member(93, 0x2B0, "Animation")] public Ref<DSUIHUDAnimatorResource> DirectionIconOutroAnimator;
        [RTTI.Member(94, 0x2B8, "Animation")] public Ref<DSUIHUDAnimatorResource> IconNoticeLoopAnimator;
        [RTTI.Member(95, 0x2C0, "Animation")] public Ref<DSUIHUDAnimatorResource> IconNoticeIntroAnimator;
        [RTTI.Member(96, 0x2C8, "Animation")] public Ref<DSUIHUDAnimatorResource> IconNoticeOutroAnimator;
        [RTTI.Member(97, 0x2D0, "Animation")] public Ref<DSUIHUDAnimatorResource> DotOutroAnimator1;
        [RTTI.Member(98, 0x2D8, "Animation")] public Ref<DSUIHUDAnimatorResource> DotOutroAnimator2;
        [RTTI.Member(99, 0x2E0, "Animation")] public Ref<DSUIHUDAnimatorResource> ReticleMeterIntroAnimator;
        [RTTI.Member(100, 0x2E8, "Animation")] public Ref<DSUIHUDAnimatorResource> ReticleMeterLoopAnimator;
        [RTTI.Member(101, 0x2F0, "Animation")] public Ref<DSUIHUDAnimatorResource> ReticleMeterOutroAnimator;
        [RTTI.Member(102, 0x2F8, "Animation")] public Ref<DSUIHUDAnimatorResource> ReticleMeterNormalColorAnimator;
        [RTTI.Member(103, 0x300, "Animation")] public Ref<DSUIHUDAnimatorResource> ReticleMeterWarningColorAnimator;
        [RTTI.Member(104, 0x308, "Animation")] public Ref<DSUIHUDAnimatorResource> ReticleMeterDangerColorAnimator;
        [RTTI.Member(105, 0x310, "Animation")] public Ref<DSUIHUDAnimatorResource> ZiplineCautionLoopAnimator;
        [RTTI.Member(106, 0x318, "Animation")] public Ref<DSUIHUDAnimatorResource> ZiplineCautionIntroAnimator;
        [RTTI.Member(107, 0x320, "Animation")] public Ref<DSUIHUDAnimatorResource> ZiplineCautionOutroAnimator;
        [RTTI.Member(109, 0x328, "Sound")] public Ref<SoundResource> OpenLoopSound;
        [RTTI.Member(110, 0x330, "Sound")] public Ref<SoundResource> CloseSound;
        [RTTI.Member(111, 0x338, "Sound")] public Ref<SoundResource> MarkerSound;
        [RTTI.Member(112, 0x340, "Sound")] public Ref<SoundResource> InfoPlateSound;
        [RTTI.Member(113, 0x348, "Sound")] public Ref<SoundResource> CameraSound;
        [RTTI.Member(114, 0x350, "Sound")] public Ref<SoundResource> AltimeterLoopSound;
        [RTTI.Member(115, 0x358, "Sound")] public Ref<SoundResource> AltimeterLoopEndSound;
        [RTTI.Member(117, 0x360, "Animation_Timming")] public int NearDotIntroStartFrame;
        [RTTI.Member(118, 0x364, "Animation_Timming")] public int FarDotIntroStartFrame;
        [RTTI.Member(119, 0x368, "Animation_Timming")] public int CenterDotIntroStartFrame;
        [RTTI.Member(120, 0x36C, "Animation_Timming")] public int DotOutroFrameDispersion;
        [RTTI.Member(121, 0x370, "Animation_Timming")] public int DrawLineDotIntroStartFrame;
        [RTTI.Member(122, 0x374, "Animation_Timming")] public int DirectionIconIntroStartFrame;
        [RTTI.Member(123, 0x378, "Animation_Timming")] public int DirectionIconOutroStartFrame;
        [RTTI.Member(124, 0x37C, "Animation_Timming")] public int MarkerIntroStartFrame;
        [RTTI.Member(125, 0x380, "Animation_Timming")] public int MarkerIntroFrameDispersion;
        [RTTI.Member(126, 0x384, "Animation_Timming")] public int MarkerOutroFrameDispersion;
        [RTTI.Member(127, 0x388, "Animation_Timming")] public int OutroBlinkStartFrame0;
        [RTTI.Member(128, 0x38C, "Animation_Timming")] public int OutroBlinkStartFrame1;
        [RTTI.Member(129, 0x390, "Animation_Timming")] public int OutroBlinkStartFrame2;
        [RTTI.Member(130, 0x394, "Animation_Timming")] public int OutroBlinkStartFrame3;
        [RTTI.Member(131, 0x398, "Animation_Timming")] public int OutroBlinkStartFrame4;
        [RTTI.Member(132, 0x3A0, "Animation_Timming")] public Array<int> OutroBlinkLine0;
        [RTTI.Member(133, 0x3B0, "Animation_Timming")] public Array<int> OutroBlinkLine1;
        [RTTI.Member(134, 0x3C0, "Animation_Timming")] public Array<int> OutroBlinkLine2;
        [RTTI.Member(135, 0x3D0, "Animation_Timming")] public Array<int> OutroBlinkLine3;
        [RTTI.Member(136, 0x3E0, "Animation_Timming")] public Array<int> OutroBlinkLine4;
        [RTTI.Member(138, 0x3F0, "Line_Parameter")] public Array<float> DotSeparatorLines;
        [RTTI.Member(139, 0x400, "Line_Parameter")] public Array<float> LinesAlpha;
        [RTTI.Member(140, 0x410, "Line_Parameter")] public float UpSideCameraDegree;
        [RTTI.Member(141, 0x414, "Line_Parameter")] public float DownSideCameraDegree;
        [RTTI.Member(142, 0x418, "Line_Parameter")] public float UpSideHorizontalDegree;
        [RTTI.Member(143, 0x41C, "Line_Parameter")] public float DownSideHorizontalDegree;
        [RTTI.Member(144, 0x420, "Line_Parameter")] public float UpSideHorizontalY;
        [RTTI.Member(145, 0x424, "Line_Parameter")] public float DownSideHorizontalY;
        [RTTI.Member(146, 0x428, "Line_Parameter")] public float UpSideViewAngleDegree;
        [RTTI.Member(147, 0x42C, "Line_Parameter")] public float MiddleSideViewAngleDegree;
        [RTTI.Member(148, 0x430, "Line_Parameter")] public float DownSideViewAngleDegree;
        [RTTI.Member(149, 0x440, "Line_Parameter")] public Vec2 UpwardOvalPosition;
        [RTTI.Member(150, 0x450, "Line_Parameter")] public Vec2 CenterOvalPosition;
        [RTTI.Member(151, 0x460, "Line_Parameter")] public Vec2 DownwardOvalPosition;
        [RTTI.Member(152, 0x470, "Line_Parameter")] public FSize UpwardOvalRadius;
        [RTTI.Member(153, 0x478, "Line_Parameter")] public FSize CenterOvalRadius;
        [RTTI.Member(154, 0x480, "Line_Parameter")] public FSize DownwardOvalRadius;
        [RTTI.Member(155, 0x490, "Line_Parameter")] public Vec2 UpwardOvalNearFarBasePoint;
        [RTTI.Member(156, 0x4A0, "Line_Parameter")] public Vec2 CenterOvalNearFarBasePoint;
        [RTTI.Member(157, 0x4B0, "Line_Parameter")] public Vec2 DownwardOvalNearFarBasePoint;
        [RTTI.Member(158, 0x4C0, "Line_Parameter")] public float NearLineScale;
        [RTTI.Member(159, 0x4C4, "Line_Parameter")] public float FarLineScale;
        [RTTI.Member(160, 0x4C8, "Line_Parameter")] public float NearDistance;
        [RTTI.Member(161, 0x4CC, "Line_Parameter")] public float MiddleDistance;
        [RTTI.Member(162, 0x4D0, "Line_Parameter")] public float ReticleTargetRangeDistance;
        [RTTI.Member(163, 0x4D4, "Line_Parameter")] public float NearDelayManualRate;
        [RTTI.Member(164, 0x4D8, "Line_Parameter")] public float CenterDelayManualRate;
        [RTTI.Member(165, 0x4DC, "Line_Parameter")] public float FarDelayManualRate;
        [RTTI.Member(166, 0x4E0, "Line_Parameter")] public float NearDecelerationManualRate;
        [RTTI.Member(167, 0x4E4, "Line_Parameter")] public float CenterDecelerationManualRate;
        [RTTI.Member(168, 0x4E8, "Line_Parameter")] public float FarDecelerationManualRate;
        [RTTI.Member(169, 0x4EC, "Line_Parameter")] public float DotManualMoveValuePerFrame;
        [RTTI.Member(170, 0x4F0, "Line_Parameter")] public float NearDelayAutoRate;
        [RTTI.Member(171, 0x4F4, "Line_Parameter")] public float CenterDelayAutoRate;
        [RTTI.Member(172, 0x4F8, "Line_Parameter")] public float FarDelayAutoRate;
        [RTTI.Member(173, 0x4FC, "Line_Parameter")] public float NearDecelerationAutoRate;
        [RTTI.Member(174, 0x500, "Line_Parameter")] public float CenterDecelerationAutoRate;
        [RTTI.Member(175, 0x504, "Line_Parameter")] public float FarDecelerationAutoRate;
        [RTTI.Member(176, 0x508, "Line_Parameter")] public float DotAutoMoveValuePerFrame;
        [RTTI.Member(177, 0x50C, "Line_Parameter")] public float RotateAddSpeedMax;
        [RTTI.Member(178, 0x510, "Line_Parameter")] public float NearDelayPositionXMax;
        [RTTI.Member(179, 0x514, "Line_Parameter")] public float CenterDelayPositionXMax;
        [RTTI.Member(180, 0x518, "Line_Parameter")] public float FarDelayPositionXMax;
        [RTTI.Member(182, 0x51C, "Icon_Parameter")] public float NearIconScale;
        [RTTI.Member(183, 0x520, "Icon_Parameter")] public float MiddleIconScale;
        [RTTI.Member(184, 0x524, "Icon_Parameter")] public float FarIconScale;
        [RTTI.Member(185, 0x528, "Icon_Parameter")] public float NearIconAlpha;
        [RTTI.Member(186, 0x52C, "Icon_Parameter")] public float MiddleIconAlpha;
        [RTTI.Member(187, 0x530, "Icon_Parameter")] public float FarIconAlpha;
        [RTTI.Member(188, 0x534, "Icon_Parameter")] public float DistanceTextMarginBottom;
        [RTTI.Member(189, 0x538, "Icon_Parameter")] public int DirectionIconLeftOffsetX;
        [RTTI.Member(190, 0x53C, "Icon_Parameter")] public int DirectionIconRightOffsetX;
        [RTTI.Member(192, 0x540, "ReticleInfo_Parameter")] public int InfoTextMaskOffsetTop;
        [RTTI.Member(193, 0x544, "ReticleInfo_Parameter")] public int InfoTextMaskOffsetBottom;
        [RTTI.Member(194, 0x548, "ReticleInfo_Parameter")] public int InfoTextMaskOffsetLeftRight;
        [RTTI.Member(195, 0x54C, "ReticleInfo_Parameter")] public float InfoPlateOffsetY;
        [RTTI.Member(196, 0x550, "ReticleInfo_Parameter")] public float InfoPlateFixPositionY;
        [RTTI.Member(198, 0x554, "Altimeter_Parameter")] public float AltimeterHeightPixel;
        [RTTI.Member(199, 0x558, "Altimeter_Parameter")] public float AltimeterHeightMeter;
        [RTTI.Member(200, 0x55C, "Altimeter_Parameter")] public float AltimeterWidthPixel;
        [RTTI.Member(201, 0x560, "Altimeter_Parameter")] public float AltimeterWidthMeter;
        [RTTI.Member(202, 0x564, "Altimeter_Parameter")] public float AltimeterMaxMinHeightFontOffset;
        [RTTI.Member(204, 0x568, "Icons")] public Ref<UITexture> NoticeLeftUITexture;
        [RTTI.Member(205, 0x570, "Icons")] public Ref<UITexture> NoticeLeftIntroUITexture;
        [RTTI.Member(206, 0x578, "Icons")] public Ref<UITexture> NoticeRightUITexture;
        [RTTI.Member(207, 0x580, "Icons")] public Ref<UITexture> NoticeRightIntroUITexture;
        [RTTI.Member(208, 0x588, "Icons")] public Ref<UITexture> CommonIconUITexture;
        [RTTI.Member(209, 0x590, "Icons")] public Ref<UITexture> BaggageIconUITexture;
        [RTTI.Member(210, 0x598, "Icons")] public Ref<UITexture> PersonIconUITexture;
        [RTTI.Member(211, 0x5A0, "Icons")] public Ref<UITexture> CommonIconGlowUITexture1;
        [RTTI.Member(212, 0x5A8, "Icons")] public Ref<UITexture> CommonIconGlowUITexture2;
        [RTTI.Member(213, 0x5B0, "Icons")] public Ref<UITexture> CommonIconGlowUITexture3;
        [RTTI.Member(214, 0x5B8, "Icons")] public Ref<UITexture> BaggageIconGlowUITexture1;
        [RTTI.Member(215, 0x5C0, "Icons")] public Ref<UITexture> BaggageIconGlowUITexture2;
        [RTTI.Member(216, 0x5C8, "Icons")] public Ref<UITexture> BaggageIconGlowUITexture3;
        [RTTI.Member(217, 0x5D0, "Icons")] public Ref<UITexture> PersonIconGlowUITexture1;
        [RTTI.Member(218, 0x5D8, "Icons")] public Ref<UITexture> PersonIconGlowUITexture2;
        [RTTI.Member(219, 0x5E0, "Icons")] public Ref<UITexture> PersonIconGlowUITexture3;
        [RTTI.Member(221, 0x5E8, "Direction")] public DSUICompassDirectionInfo DirectionInfo_North;
        [RTTI.Member(222, 0x600, "Direction")] public DSUICompassDirectionInfo DirectionInfo_South;
        [RTTI.Member(223, 0x618, "Direction")] public DSUICompassDirectionInfo DirectionInfo_East;
        [RTTI.Member(224, 0x630, "Direction")] public DSUICompassDirectionInfo DirectionInfo_West;
        [RTTI.Member(225, 0x648, "Direction")] public DSUICompassDirectionInfo DirectionInfo_NorthWest;
        [RTTI.Member(226, 0x660, "Direction")] public DSUICompassDirectionInfo DirectionInfo_NorthEast;
        [RTTI.Member(227, 0x678, "Direction")] public DSUICompassDirectionInfo DirectionInfo_SouthWest;
        [RTTI.Member(228, 0x690, "Direction")] public DSUICompassDirectionInfo DirectionInfo_SouthEast;
        [RTTI.Member(230, 0x6A8, "Cliff")] public StreamingRef<UITexture> Cliff01UITexture;
        [RTTI.Member(231, 0x6B0, "Cliff")] public StreamingRef<UITexture> Cliff02UITexture;
        [RTTI.Member(232, 0x6B8, "Cliff")] public StreamingRef<UITexture> Cliff03UITexture;
        [RTTI.Member(233, 0x6C0, "Cliff")] public Ref<LocalizedTextResource> Cliff01Text;
        [RTTI.Member(234, 0x6C8, "Cliff")] public Ref<LocalizedTextResource> Cliff02Text;
        [RTTI.Member(235, 0x6D0, "Cliff")] public Ref<LocalizedTextResource> Cliff03Text;
        [RTTI.Member(237, 0x6D8, "Fragile")] public StreamingRef<UITexture> FragileUITexture;
    }

    [RTTI.Serializable(0x24C4477E5F7CBB29, GameType.DS)]
    public class DSUIConfigMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x10B2B45C3CCB22D7, GameType.DS)]
    public class DSUIConfigMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> Value_Normal;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> Value_Reverse;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> Value_ON;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> Value_OFF;
        [RTTI.Member(10, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> Value_Online;
        [RTTI.Member(11, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> Value_Offline;
        [RTTI.Member(12, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> Value_Cycle;
        [RTTI.Member(13, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> Value_OnOff;
        [RTTI.Member(14, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> Value_Recommendation;
        [RTTI.Member(15, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> Value_Signpost_VisibleAll;
        [RTTI.Member(16, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> Value_Signpost_InvisibleMask;
        [RTTI.Member(17, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> Value_Signpost_InvisibleOtherUser;
        [RTTI.Member(18, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> Value_Dialog_Default;
        [RTTI.Member(19, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> Value_Dialog_Default_GameSetting;
        [RTTI.Member(20, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> Value_Dialog_Cancel;
        [RTTI.Member(21, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> Value_Dialog_ChangeDifficulty;
        [RTTI.Member(22, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> Value_Controller_Speaker;
        [RTTI.Member(23, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> Value_TV_Speaker;
        [RTTI.Member(24, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> Value_DandlingType_Motion_Sensor;
        [RTTI.Member(25, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> Value_DandlingType_LStick;
        [RTTI.Member(26, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> Value_Font_Size_Default;
        [RTTI.Member(27, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> Value_Font_Size_Large;
        [RTTI.Member(28, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> Value_Odradek_Demo_Everytime;
        [RTTI.Member(29, 0xE0, "LocalizedText")] public Ref<LocalizedTextResource> Value_Odradek_Demo_Once;
        [RTTI.Member(30, 0xE8, "LocalizedText")] public Ref<LocalizedTextResource> Value_Sync_Object_All;
        [RTTI.Member(31, 0xF0, "LocalizedText")] public Ref<LocalizedTextResource> Value_Sync_Object_Limitation;
        [RTTI.Member(32, 0xF8, "LocalizedText")] public Ref<LocalizedTextResource> Value_TutorialTelop_Default;
        [RTTI.Member(33, 0x100, "LocalizedText")] public Ref<LocalizedTextResource> Value_TutorialTelop_Once;
        [RTTI.Member(34, 0x108, "LocalizedText")] public Ref<LocalizedTextResource> Value_TutorialTelop_Hide;
        [RTTI.Member(35, 0x110, "LocalizedText")] public Ref<LocalizedTextResource> Value_Decide_Menu_Circle;
        [RTTI.Member(36, 0x118, "LocalizedText")] public Ref<LocalizedTextResource> Value_Decide_Menu_Cross;
        [RTTI.Member(37, 0x120, "LocalizedText")] public Ref<LocalizedTextResource> Value_ControllerBtn_IconType_Auto;
        [RTTI.Member(38, 0x128, "LocalizedText")] public Ref<LocalizedTextResource> Value_ControllerBtn_IconType_Type1;
        [RTTI.Member(39, 0x130, "LocalizedText")] public Ref<LocalizedTextResource> Value_ControllerBtn_IconType_Type2;
        [RTTI.Member(40, 0x138, "LocalizedText")] public Ref<LocalizedTextResource> Value_ControllerBtn_IconType_Type3;
        [RTTI.Member(41, 0x140, "LocalizedText")] public Ref<LocalizedTextResource> Value_ControllerBtn_IconType_Type4;
        [RTTI.Member(42, 0x148, "LocalizedText")] public Ref<LocalizedTextResource> Value_Switch_BtnIcon_Type_Auto;
        [RTTI.Member(43, 0x150, "LocalizedText")] public Ref<LocalizedTextResource> Value_Switch_BtnIcon_Type_GamePad;
        [RTTI.Member(44, 0x158, "LocalizedText")] public Ref<LocalizedTextResource> Value_Switch_BtnIcon_Type_KbdAndMouse;
        [RTTI.Member(45, 0x160, "LocalizedText")] public Ref<LocalizedTextResource> Value_Hold;
        [RTTI.Member(46, 0x168, "LocalizedText")] public Ref<LocalizedTextResource> Value_Toggle;
        [RTTI.Member(98, 0x178, "Camera")] public Ref<LocalizedTextResource> Title_CameraVerticalInput;
        [RTTI.Member(99, 0x180, "Camera")] public Ref<LocalizedTextResource> Title_CameraHorizontalInput;
        [RTTI.Member(100, 0x188, "Camera")] public Ref<LocalizedTextResource> Title_CameraVerticalSensitiviness;
        [RTTI.Member(101, 0x190, "Camera")] public Ref<LocalizedTextResource> Title_CameraHorizontalSensitiviness;
        [RTTI.Member(71, 0x198, "Controll")] public Ref<LocalizedTextResource> Title_GuardModeSensitiviness;
        [RTTI.Member(48, 0x1A0, "Game")] public Ref<LocalizedTextResource> Title_GameDifficulty;
        [RTTI.Member(69, 0x1A8, "Controll")] public Ref<LocalizedTextResource> Title_AutoAim;
        [RTTI.Member(141, 0x1B0, "Sounds")] public Ref<LocalizedTextResource> Title_ControllerSpeaker;
        [RTTI.Member(49, 0x1B8, "Game")] public Ref<LocalizedTextResource> Title_AutoLogin;
        [RTTI.Member(50, 0x1C0, "Game")] public Ref<LocalizedTextResource> Title_ShowAvater;
        [RTTI.Member(51, 0x1C8, "Game")] public Ref<LocalizedTextResource> Title_AutoLikes;
        [RTTI.Member(52, 0x1D0, "Game")] public Ref<LocalizedTextResource> Title_ShowSignpost;
        [RTTI.Member(70, 0x1D8, "Controll")] public Ref<LocalizedTextResource> Title_QuickChangeType;
        [RTTI.Member(75, 0x1E0, "Controll")] public Ref<LocalizedTextResource> Title_Vibration;
        [RTTI.Member(73, 0x1E8, "Controll")] public Ref<LocalizedTextResource> Title_StickInputDeadzone;
        [RTTI.Member(89, 0x1F0, "Hud")] public Ref<LocalizedTextResource> Title_ShowMarker;
        [RTTI.Member(90, 0x1F8, "Hud")] public Ref<LocalizedTextResource> Title_ShowReticle;
        [RTTI.Member(91, 0x200, "Hud")] public Ref<LocalizedTextResource> Title_ShowActionIcon;
        [RTTI.Member(92, 0x208, "Hud")] public Ref<LocalizedTextResource> Title_ShowEquipmentIcon;
        [RTTI.Member(102, 0x210, "Camera")] public Ref<LocalizedTextResource> Title_CameraVibration;
        [RTTI.Member(103, 0x218, "Camera")] public Ref<LocalizedTextResource> Title_CameraFPVerticalInput;
        [RTTI.Member(104, 0x220, "Camera")] public Ref<LocalizedTextResource> Title_CameraFPHorizontalInput;
        [RTTI.Member(105, 0x228, "Camera")] public Ref<LocalizedTextResource> Title_CameraFPVerticalSensitiviness;
        [RTTI.Member(106, 0x230, "Camera")] public Ref<LocalizedTextResource> Title_CameraFPHorizontalSensitiviness;
        [RTTI.Member(111, 0x238, "Camera")] public Ref<LocalizedTextResource> Title_CameraTurnAccel;
        [RTTI.Member(112, 0x240, "Camera")] public Ref<LocalizedTextResource> Title_CameraTurnBreak;
        [RTTI.Member(131, 0x248, "Language")] public Ref<LocalizedTextResource> Title_ShowSubtitling;
        [RTTI.Member(138, 0x250, "Sounds")] public Ref<LocalizedTextResource> Title_MasterVolumeSensitiviness;
        [RTTI.Member(86, 0x258, "Display")] public Ref<LocalizedTextResource> Title_Brightness;
        [RTTI.Member(72, 0x260, "Controll")] public Ref<LocalizedTextResource> Title_ControllHoldTime;
        [RTTI.Member(74, 0x268, "Controll")] public Ref<LocalizedTextResource> Title_DandlingType;
        [RTTI.Member(132, 0x288, "Language")] public Ref<LocalizedTextResource> Title_FontSize;
        [RTTI.Member(53, 0x290, "Game")] public Ref<LocalizedTextResource> Title_OdradekDemoSkip;
        [RTTI.Member(192, 0x298, "PCSettings")] public Ref<LocalizedTextResource> Title_HotKeyDisable;
        [RTTI.Member(193, 0x2A0, "PCSettings")] public Ref<LocalizedTextResource> Title_MouseCameraHorizontalInput;
        [RTTI.Member(194, 0x2A8, "PCSettings")] public Ref<LocalizedTextResource> Title_MouseCameraVerticalInput;
        [RTTI.Member(195, 0x2B0, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionToggleADS;
        [RTTI.Member(196, 0x2B8, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionToggleSprint;
        [RTTI.Member(197, 0x2C0, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionToggleWalk;
        [RTTI.Member(198, 0x2C8, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionToggleBreathStop;
        [RTTI.Member(199, 0x2D0, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionToggleFP;
        [RTTI.Member(200, 0x2D8, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionToggleGrab;
        [RTTI.Member(201, 0x2E0, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionToggleBrace;
        [RTTI.Member(202, 0x2E8, "PCSettings")] public Ref<LocalizedTextResource> Title_GamePadActionToggleADS;
        [RTTI.Member(203, 0x2F0, "PCSettings")] public Ref<LocalizedTextResource> Title_GamePadActionToggleSprint;
        [RTTI.Member(204, 0x2F8, "PCSettings")] public Ref<LocalizedTextResource> Title_GamePadActionToggleGrab;
        [RTTI.Member(205, 0x300, "PCSettings")] public Ref<LocalizedTextResource> Title_GamePadActionToggleBrace;
        [RTTI.Member(208, 0x308, "PCSettings")] public Ref<LocalizedTextResource> Title_GamePadSwapDecideAndCancel;
        [RTTI.Member(206, 0x318, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionWalkSensitivity;
        [RTTI.Member(209, 0x320, "PCSettings")] public Ref<LocalizedTextResource> Title_ControllerBtnIconType;
        [RTTI.Member(210, 0x328, "PCSettings")] public Ref<LocalizedTextResource> Title_BtnIconSwitchType;
        [RTTI.Member(56, 0x330, "Game")] public Ref<LocalizedTextResource> Title_PhotoModeEnable;
        [RTTI.Member(54, 0x338, "Game")] public Ref<LocalizedTextResource> Title_SyncGameObject;
        [RTTI.Member(55, 0x340, "Game")] public Ref<LocalizedTextResource> Title_ShowTutorialTelop;
        [RTTI.Member(155, 0x348, "Graphics")] public Ref<LocalizedTextResource> Title_GraphicQuality;
        [RTTI.Member(107, 0x350, "Camera")] public Ref<LocalizedTextResource> Title_CameraADSVerticalSensitiviness;
        [RTTI.Member(108, 0x358, "Camera")] public Ref<LocalizedTextResource> Title_CameraADSHorizontalSensitiviness;
        [RTTI.Member(109, 0x360, "Camera")] public Ref<LocalizedTextResource> Title_CameraVehicleVerticalSensitiviness;
        [RTTI.Member(110, 0x368, "Camera")] public Ref<LocalizedTextResource> Title_CameraVehicleHorizontalSensitiviness;
        [RTTI.Member(76, 0x370, "Controll")] public Ref<LocalizedTextResource> Title_MapTiltType;
        [RTTI.Member(211, 0x378, "PCSettings")] public Ref<LocalizedTextResource> Title_MouseMenuDicideActType;
        [RTTI.Member(57, 0x380, "Game")] public Ref<LocalizedTextResource> Title_PhotoModeKeepParams;
        [RTTI.Member(168, 0x388, "Graphics")] public Ref<LocalizedTextResource> Title_VisibleFPS;
        [RTTI.Member(169, 0x390, "Graphics")] public Ref<LocalizedTextResource> Title_VisibleVRAM;
        [RTTI.Member(142, 0x398, "Sounds")] public Ref<LocalizedTextResource> Title_SoundLocalization;
        [RTTI.Member(207, 0x3A0, "PCSettings")] public Ref<LocalizedTextResource> Title_KBDActionGuardModeSensitivity;
        [RTTI.Member(212, 0x3A8, "PCSettings")] public Ref<LocalizedTextResource> Title_UIKeyboardLayout;
        [RTTI.Member(130, 0x3B8, "Language")] public Ref<LocalizedTextResource> Title_TextLanguage;
        [RTTI.Member(129, 0x3C0, "Language")] public Ref<LocalizedTextResource> Title_VoiceLanguage;
        [RTTI.Member(149, 0x3C8, "Graphics")] public Ref<LocalizedTextResource> Title_WindowMode;
        [RTTI.Member(150, 0x3D0, "Graphics")] public Ref<LocalizedTextResource> Title_VerticalSync;
        [RTTI.Member(151, 0x3D8, "Graphics")] public Ref<LocalizedTextResource> Title_DisplayMonitor;
        [RTTI.Member(152, 0x3E0, "Graphics")] public Ref<LocalizedTextResource> Title_Resolution;
        [RTTI.Member(153, 0x3E8, "Graphics")] public Ref<LocalizedTextResource> Title_AspectRatio;
        [RTTI.Member(154, 0x3F0, "Graphics")] public Ref<LocalizedTextResource> Title_FrameRateLimit;
        [RTTI.Member(156, 0x3F8, "Graphics")] public Ref<LocalizedTextResource> Title_ModelDetail;
        [RTTI.Member(157, 0x400, "Graphics")] public Ref<LocalizedTextResource> Title_StreamMemory;
        [RTTI.Member(158, 0x408, "Graphics")] public Ref<LocalizedTextResource> Title_UseGraphicsMemory;
        [RTTI.Member(159, 0x410, "Graphics")] public Ref<LocalizedTextResource> Title_ShadowResolution;
        [RTTI.Member(160, 0x418, "Graphics")] public Ref<LocalizedTextResource> Title_ScreenSpaceReflection;
        [RTTI.Member(161, 0x420, "Graphics")] public Ref<LocalizedTextResource> Title_AmbientOcclusion;
        [RTTI.Member(162, 0x428, "Graphics")] public Ref<LocalizedTextResource> Title_AntiAliasing;
        [RTTI.Member(163, 0x430, "Graphics")] public Ref<LocalizedTextResource> Title_AMD_CAS;
        [RTTI.Member(164, 0x438, "Graphics")] public Ref<LocalizedTextResource> Title_NVIDIA_DLSS;
        [RTTI.Member(165, 0x440, "Graphics")] public Ref<LocalizedTextResource> Title_Shapeness;
        [RTTI.Member(166, 0x448, "Graphics")] public Ref<LocalizedTextResource> Title_DepthOfField;
        [RTTI.Member(167, 0x450, "Graphics")] public Ref<LocalizedTextResource> Title_MotionBlur;
        [RTTI.Member(139, 0x458, "Sounds")] public Ref<LocalizedTextResource> Title_SoundDevice;
        [RTTI.Member(140, 0x460, "Sounds")] public Ref<LocalizedTextResource> Title_SoundDeviceForBB;
        [RTTI.Member(113, 0x470, "Camera")] public Ref<LocalizedTextResource> Description_CameraVerticalInput;
        [RTTI.Member(114, 0x478, "Camera")] public Ref<LocalizedTextResource> Description_CameraHorizontalInput;
        [RTTI.Member(115, 0x480, "Camera")] public Ref<LocalizedTextResource> Description_CameraVerticalSensitiviness;
        [RTTI.Member(116, 0x488, "Camera")] public Ref<LocalizedTextResource> Description_CameraHorizontalSensitiviness;
        [RTTI.Member(79, 0x490, "Controll")] public Ref<LocalizedTextResource> Description_GuardModeSensitiviness;
        [RTTI.Member(58, 0x498, "Game")] public Ref<LocalizedTextResource> Description_GameDifficulty;
        [RTTI.Member(77, 0x4A0, "Controll")] public Ref<LocalizedTextResource> Description_AutoAim;
        [RTTI.Member(146, 0x4A8, "Sounds")] public Ref<LocalizedTextResource> Description_ControllerSpeaker;
        [RTTI.Member(59, 0x4B0, "Game")] public Ref<LocalizedTextResource> Description_AutoLogin;
        [RTTI.Member(60, 0x4B8, "Game")] public Ref<LocalizedTextResource> Description_ShowAvater;
        [RTTI.Member(61, 0x4C0, "Game")] public Ref<LocalizedTextResource> Description_AutoLikes;
        [RTTI.Member(62, 0x4C8, "Game")] public Ref<LocalizedTextResource> Description_ShowSignpost;
        [RTTI.Member(78, 0x4D0, "Controll")] public Ref<LocalizedTextResource> Description_QuickChangeType;
        [RTTI.Member(83, 0x4D8, "Controll")] public Ref<LocalizedTextResource> Description_Vibration;
        [RTTI.Member(81, 0x4E0, "Controll")] public Ref<LocalizedTextResource> Description_StickInputDeadzone;
        [RTTI.Member(93, 0x4E8, "Hud")] public Ref<LocalizedTextResource> Description_ShowMarker;
        [RTTI.Member(94, 0x4F0, "Hud")] public Ref<LocalizedTextResource> Description_ShowReticle;
        [RTTI.Member(95, 0x4F8, "Hud")] public Ref<LocalizedTextResource> Description_ShowActionIcon;
        [RTTI.Member(96, 0x500, "Hud")] public Ref<LocalizedTextResource> Description_ShowEquipmentIcon;
        [RTTI.Member(117, 0x508, "Camera")] public Ref<LocalizedTextResource> Description_CameraVibration;
        [RTTI.Member(118, 0x510, "Camera")] public Ref<LocalizedTextResource> Description_CameraFPVerticalInput;
        [RTTI.Member(119, 0x518, "Camera")] public Ref<LocalizedTextResource> Description_CameraFPHorizontalInput;
        [RTTI.Member(120, 0x520, "Camera")] public Ref<LocalizedTextResource> Description_CameraFPVerticalSensitiviness;
        [RTTI.Member(121, 0x528, "Camera")] public Ref<LocalizedTextResource> Description_CameraFPHorizontalSensitiviness;
        [RTTI.Member(126, 0x530, "Camera")] public Ref<LocalizedTextResource> Description_CameraTurnAccel;
        [RTTI.Member(127, 0x538, "Camera")] public Ref<LocalizedTextResource> Description_CameraTurnBreak;
        [RTTI.Member(135, 0x540, "Language")] public Ref<LocalizedTextResource> Description_ShowSubtitling;
        [RTTI.Member(143, 0x548, "Sounds")] public Ref<LocalizedTextResource> Description_MasterVolumeSensitiviness;
        [RTTI.Member(87, 0x550, "Display")] public Ref<LocalizedTextResource> Description_Brightness;
        [RTTI.Member(80, 0x558, "Controll")] public Ref<LocalizedTextResource> Description_ControllHoldTime;
        [RTTI.Member(82, 0x560, "Controll")] public Ref<LocalizedTextResource> Description_DandlingType;
        [RTTI.Member(136, 0x580, "Language")] public Ref<LocalizedTextResource> Description_FontSize;
        [RTTI.Member(63, 0x588, "Game")] public Ref<LocalizedTextResource> Description_OdradekDemoSkip;
        [RTTI.Member(213, 0x590, "PCSettings")] public Ref<LocalizedTextResource> Description_HotKeyDisable;
        [RTTI.Member(214, 0x598, "PCSettings")] public Ref<LocalizedTextResource> Description_MouseCameraHorizontalInput;
        [RTTI.Member(215, 0x5A0, "PCSettings")] public Ref<LocalizedTextResource> Description_MouseCameraVerticalInput;
        [RTTI.Member(216, 0x5A8, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionToggleADS;
        [RTTI.Member(217, 0x5B0, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionToggleSprint;
        [RTTI.Member(218, 0x5B8, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionToggleWalk;
        [RTTI.Member(219, 0x5C0, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionToggleBreathStop;
        [RTTI.Member(220, 0x5C8, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionToggleFP;
        [RTTI.Member(221, 0x5D0, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionToggleGrab;
        [RTTI.Member(222, 0x5D8, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionToggleBrace;
        [RTTI.Member(223, 0x5E0, "PCSettings")] public Ref<LocalizedTextResource> Description_GamePadActionToggleADS;
        [RTTI.Member(224, 0x5E8, "PCSettings")] public Ref<LocalizedTextResource> Description_GamePadActionToggleSprint;
        [RTTI.Member(225, 0x5F0, "PCSettings")] public Ref<LocalizedTextResource> Description_GamePadActionToggleGrab;
        [RTTI.Member(226, 0x5F8, "PCSettings")] public Ref<LocalizedTextResource> Description_GamePadActionToggleBrace;
        [RTTI.Member(229, 0x600, "PCSettings")] public Ref<LocalizedTextResource> Description_GamePadSwapDecideAndCancel;
        [RTTI.Member(227, 0x610, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionWalkSensitivity;
        [RTTI.Member(230, 0x618, "PCSettings")] public Ref<LocalizedTextResource> Description_ControllerBtnIconType;
        [RTTI.Member(231, 0x620, "PCSettings")] public Ref<LocalizedTextResource> Description_BtnIconSwitchType;
        [RTTI.Member(66, 0x628, "Game")] public Ref<LocalizedTextResource> Description_PhotoModeEnable;
        [RTTI.Member(64, 0x630, "Game")] public Ref<LocalizedTextResource> Description_SyncGameObject;
        [RTTI.Member(65, 0x638, "Game")] public Ref<LocalizedTextResource> Description_ShowTutorialTelop;
        [RTTI.Member(176, 0x640, "Graphics")] public Ref<LocalizedTextResource> Description_GraphicQuality;
        [RTTI.Member(122, 0x648, "Camera")] public Ref<LocalizedTextResource> Description_CameraADSVerticalSensitiviness;
        [RTTI.Member(123, 0x650, "Camera")] public Ref<LocalizedTextResource> Description_CameraADSHorizontalSensitiviness;
        [RTTI.Member(124, 0x658, "Camera")] public Ref<LocalizedTextResource> Description_CameraVehicleVerticalSensitiviness;
        [RTTI.Member(125, 0x660, "Camera")] public Ref<LocalizedTextResource> Description_CameraVehicleHorizontalSensitiviness;
        [RTTI.Member(84, 0x668, "Controll")] public Ref<LocalizedTextResource> Description_MapTiltType;
        [RTTI.Member(232, 0x670, "PCSettings")] public Ref<LocalizedTextResource> Description_MouseMenuDicideActType;
        [RTTI.Member(67, 0x678, "Game")] public Ref<LocalizedTextResource> Description_PhotoModeKeepParams;
        [RTTI.Member(189, 0x680, "Graphics")] public Ref<LocalizedTextResource> Description_VisibleFPS;
        [RTTI.Member(190, 0x688, "Graphics")] public Ref<LocalizedTextResource> Description_VisibleVRAM;
        [RTTI.Member(147, 0x690, "Sounds")] public Ref<LocalizedTextResource> Description_SoundLocalization;
        [RTTI.Member(228, 0x698, "PCSettings")] public Ref<LocalizedTextResource> Description_KBDActionGuardModeSensitivity;
        [RTTI.Member(233, 0x6A0, "PCSettings")] public Ref<LocalizedTextResource> Description_UIKeyboardLayout;
        [RTTI.Member(134, 0x6B0, "Language")] public Ref<LocalizedTextResource> Description_TextLanguage;
        [RTTI.Member(133, 0x6B8, "Language")] public Ref<LocalizedTextResource> Description_VoiceLanguage;
        [RTTI.Member(170, 0x6C0, "Graphics")] public Ref<LocalizedTextResource> Description_WindowMode;
        [RTTI.Member(171, 0x6C8, "Graphics")] public Ref<LocalizedTextResource> Description_VerticalSync;
        [RTTI.Member(172, 0x6D0, "Graphics")] public Ref<LocalizedTextResource> Description_DisplayMonitor;
        [RTTI.Member(173, 0x6D8, "Graphics")] public Ref<LocalizedTextResource> Description_Resolution;
        [RTTI.Member(174, 0x6E0, "Graphics")] public Ref<LocalizedTextResource> Description_AspectRatio;
        [RTTI.Member(175, 0x6E8, "Graphics")] public Ref<LocalizedTextResource> Description_FrameRateLimit;
        [RTTI.Member(177, 0x6F0, "Graphics")] public Ref<LocalizedTextResource> Description_ModelDetail;
        [RTTI.Member(178, 0x6F8, "Graphics")] public Ref<LocalizedTextResource> Description_StreamMemory;
        [RTTI.Member(179, 0x700, "Graphics")] public Ref<LocalizedTextResource> Description_UseGraphicsMemory;
        [RTTI.Member(180, 0x708, "Graphics")] public Ref<LocalizedTextResource> Description_ShadowResolution;
        [RTTI.Member(181, 0x710, "Graphics")] public Ref<LocalizedTextResource> Description_ScreenSpaceReflection;
        [RTTI.Member(182, 0x718, "Graphics")] public Ref<LocalizedTextResource> Description_AmbientOcclusion;
        [RTTI.Member(183, 0x720, "Graphics")] public Ref<LocalizedTextResource> Description_AntiAliasing;
        [RTTI.Member(184, 0x728, "Graphics")] public Ref<LocalizedTextResource> Description_AMD_CAS;
        [RTTI.Member(185, 0x730, "Graphics")] public Ref<LocalizedTextResource> Description_NVIDIA_DLSS;
        [RTTI.Member(186, 0x738, "Graphics")] public Ref<LocalizedTextResource> Description_Shapeness;
        [RTTI.Member(187, 0x740, "Graphics")] public Ref<LocalizedTextResource> Description_DepthOfField;
        [RTTI.Member(188, 0x748, "Graphics")] public Ref<LocalizedTextResource> Description_MotionBlur;
        [RTTI.Member(144, 0x750, "Sounds")] public Ref<LocalizedTextResource> Description_SoundDevice;
        [RTTI.Member(145, 0x758, "Sounds")] public Ref<LocalizedTextResource> Description_SoundDeviceForBB;
        [RTTI.Member(235, 0x760, "CategoryTitle")] public Ref<LocalizedTextResource> ConfigTopTitle;
        [RTTI.Member(246, 0x768, "CategoryTitle")] public Ref<LocalizedTextResource> ConfigTopTitleJP;
        [RTTI.Member(236, 0x770, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_Game;
        [RTTI.Member(237, 0x778, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_GamePad;
        [RTTI.Member(238, 0x780, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_MouseKeyboard;
        [RTTI.Member(239, 0x788, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_KeyAssign;
        [RTTI.Member(240, 0x790, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_HUD;
        [RTTI.Member(241, 0x798, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_Language;
        [RTTI.Member(242, 0x7A0, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_Graphics;
        [RTTI.Member(243, 0x7B8, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_Sound;
        [RTTI.Member(244, 0x7C0, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_Conrtoll;
        [RTTI.Member(245, 0x7C8, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitle_Camera;
        [RTTI.Member(247, 0x7D0, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_Game;
        [RTTI.Member(248, 0x7D8, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_GamePad;
        [RTTI.Member(249, 0x7E0, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_MouseKeyboard;
        [RTTI.Member(250, 0x7E8, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_KeyAssign;
        [RTTI.Member(251, 0x7F0, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_HUD;
        [RTTI.Member(252, 0x7F8, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_Language;
        [RTTI.Member(253, 0x800, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_Graphics;
        [RTTI.Member(254, 0x818, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_Sound;
        [RTTI.Member(255, 0x820, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_Conrtoll;
        [RTTI.Member(256, 0x828, "CategoryTitle")] public Ref<LocalizedTextResource> CategoryTitleJP_Camera;
        [RTTI.Member(258, 0x830, "DSUIConfigMenuDataSourceResource2")] public Ref<DSUIConfigMenuDataSourceResource2> DSUIConfigMenuDataSourceResource2;
    }

    [RTTI.Serializable(0xB369D5386760BFEA, GameType.DS)]
    public class DSUIConfigMenuDataSourceResource2 : Resource
    {
        [RTTI.Member(3, 0x20, "HeadlineCategory")] public Ref<LocalizedTextResource> General;
        [RTTI.Member(4, 0x28, "HeadlineCategory")] public Ref<LocalizedTextResource> Controll;
        [RTTI.Member(5, 0x30, "HeadlineCategory")] public Ref<LocalizedTextResource> Camera;
        [RTTI.Member(6, 0x38, "HeadlineCategory")] public Ref<LocalizedTextResource> KeyAssign;
        [RTTI.Member(7, 0x40, "HeadlineCategory")] public Ref<LocalizedTextResource> Display;
        [RTTI.Member(8, 0x48, "HeadlineCategory")] public Ref<LocalizedTextResource> ModelTexture;
        [RTTI.Member(9, 0x50, "HeadlineCategory")] public Ref<LocalizedTextResource> ShadowIllumination;
        [RTTI.Member(10, 0x58, "HeadlineCategory")] public Ref<LocalizedTextResource> PostProcess;
        [RTTI.Member(29, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> Value_Window_Mode_Auto;
        [RTTI.Member(30, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> Value_Window_Mode_Window;
        [RTTI.Member(31, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> Value_Window_Mode_FullScreen;
        [RTTI.Member(32, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> Value_Display_Monitor;
        [RTTI.Member(33, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> Value_Low;
        [RTTI.Member(34, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> Value_Middle;
        [RTTI.Member(35, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> Value_Default;
        [RTTI.Member(36, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> Value_High;
        [RTTI.Member(37, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> Value_Highest;
        [RTTI.Member(38, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> Value_Custom;
        [RTTI.Member(39, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> Value_UseMemory;
        [RTTI.Member(40, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> Value_AspectRatio_16_9;
        [RTTI.Member(41, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> Value_AspectRatio_16_10;
        [RTTI.Member(42, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> Value_AspectRatio_21_9;
        [RTTI.Member(43, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> Value_AspectRatio_32_9;
        [RTTI.Member(44, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> Value_TAA;
        [RTTI.Member(45, 0xE0, "LocalizedText")] public Ref<LocalizedTextResource> Value_FXAA;
        [RTTI.Member(46, 0xE8, "LocalizedText")] public Ref<LocalizedTextResource> Value_Performance;
        [RTTI.Member(47, 0xF0, "LocalizedText")] public Ref<LocalizedTextResource> Value_Balance;
        [RTTI.Member(48, 0xF8, "LocalizedText")] public Ref<LocalizedTextResource> Value_Quality;
        [RTTI.Member(49, 0x100, "LocalizedText")] public Ref<LocalizedTextResource> Value_Ultra_Performance;
        [RTTI.Member(50, 0x108, "LocalizedText")] public Ref<LocalizedTextResource> Value_Localization_QWERTY;
        [RTTI.Member(51, 0x110, "LocalizedText")] public Ref<LocalizedTextResource> Value_Localization_AZERTY;
        [RTTI.Member(52, 0x118, "LocalizedText")] public Ref<LocalizedTextResource> Value_Default_Sound_Device;
        [RTTI.Member(53, 0x120, "LocalizedText")] public Ref<LocalizedTextResource> Value_Localization_Speaker;
        [RTTI.Member(54, 0x128, "LocalizedText")] public Ref<LocalizedTextResource> Value_Localization_Headphon;
        [RTTI.Member(12, 0x278, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseHorizontalSensitivity;
        [RTTI.Member(13, 0x280, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseVerticalSensitivity;
        [RTTI.Member(14, 0x288, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseADSHorizontalSensitivity;
        [RTTI.Member(15, 0x290, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseADSVerticalSensitivity;
        [RTTI.Member(16, 0x298, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseFPHorizontalSensitivity;
        [RTTI.Member(17, 0x2A0, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseFPVerticalSensitivity;
        [RTTI.Member(18, 0x2A8, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseVehicleHorizontalSensitivity;
        [RTTI.Member(19, 0x2B0, "FloatSettingItem")] public Ref<LocalizedTextResource> Title_MouseVehicleVerticalSensitivity;
        [RTTI.Member(20, 0x2C0, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseHorizontalSensitivity;
        [RTTI.Member(21, 0x2C8, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseVerticalSensitivity;
        [RTTI.Member(22, 0x2D0, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseADSHorizontalSensitivity;
        [RTTI.Member(23, 0x2D8, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseADSVerticalSensitivity;
        [RTTI.Member(24, 0x2E0, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseFPHorizontalSensitivity;
        [RTTI.Member(25, 0x2E8, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseFPVerticalSensitivity;
        [RTTI.Member(26, 0x2F0, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseVehicleHorizontalSensitivity;
        [RTTI.Member(27, 0x2F8, "FloatSettingItem")] public Ref<LocalizedTextResource> Description_MouseVehicleVerticalSensitivity;
    }

    [RTTI.Serializable(0xB52ECC40C3906510, GameType.DS)]
    public class DSUIConfigMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xD542AED6B68ED6F2, GameType.DS)]
    public class DSUIConfigMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> ConfigListElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> ConfigTopListElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> DecidePanelElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> ConfirmDialogPanelElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> ConfirmSelectViewElementResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> CursorTextureElementResource_R;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> CursorTextureElementResource_L;
        [RTTI.Member(15, 0x68, "Animation")] public Ref<MenuAnimationResource> CurosrAnimationResource;
        [RTTI.Member(17, 0x70, "ChildPage")] public Ref<MenuElementResource> SDRConfigPanelElementResource;
        [RTTI.Member(18, 0x78, "ChildPage")] public Ref<MenuElementResource> HDRConfigPanelElementResource;
        [RTTI.Member(19, 0x80, "ChildPage")] public Ref<MenuElementResource> KeyAssignPanelElementResource;
    }

    [RTTI.Serializable(0xFB2520524E5407DF, GameType.DS)]
    public class DSUIConstructionAchievementItemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> DescriptionText;
        [RTTI.Member(3, 0x28)] public Ref<BooleanFact> IsUnlockFact;
    }

    [RTTI.Serializable(0xF6CCEB8413FE7202, GameType.DS)]
    public class DSUIConstructionAchievementResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCount;
        [RTTI.Member(3, 0x28)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountSignboard;
        [RTTI.Member(4, 0x30)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountLadder;
        [RTTI.Member(5, 0x38)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountRope;
        [RTTI.Member(6, 0x40)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountPost;
        [RTTI.Member(7, 0x48)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountWatchTower;
        [RTTI.Member(8, 0x50)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountBridge;
        [RTTI.Member(9, 0x58)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountCharger;
        [RTTI.Member(10, 0x60)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountSafetyHouse;
        [RTTI.Member(11, 0x68)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountRainShelter;
        [RTTI.Member(12, 0x70)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountZipline;
        [RTTI.Member(13, 0x78)] public Ref<DSUIConstructionAchievementItemResource> DonateMaterial;
        [RTTI.Member(14, 0x80)] public Ref<DSUIConstructionAchievementItemResource> DonateMaterialOnline;
        [RTTI.Member(15, 0x88)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCount;
        [RTTI.Member(16, 0x90)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCountPost;
        [RTTI.Member(17, 0x98)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCountWatchTower;
        [RTTI.Member(18, 0xA0)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCountBridge;
        [RTTI.Member(19, 0xA8)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCountCharger;
        [RTTI.Member(20, 0xB0)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCountSafetyHouse;
        [RTTI.Member(21, 0xB8)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCountRainShelter;
        [RTTI.Member(22, 0xC0)] public Ref<DSUIConstructionAchievementItemResource> MaxLevelConstructionCountZipline;
        [RTTI.Member(23, 0xC8)] public Ref<DSUIConstructionAchievementItemResource> ConstructionCountRoad;
        [RTTI.Member(24, 0xD0)] public Ref<DSUIConstructionAchievementItemResource> DonateMaterialRoad;
    }

    [RTTI.Serializable(0xD900C9223D83A245, GameType.DS)]
    public class DSUIConstructionDefaultSetting : Resource
    {
        [RTTI.Member(3, 0x20, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsPostMenu;
        [RTTI.Member(4, 0x30, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsDeliveryPoint;
        [RTTI.Member(5, 0x40, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsSafetyHouse;
        [RTTI.Member(6, 0x50, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsShelter;
        [RTTI.Member(7, 0x60, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsMulePostMenu;
        [RTTI.Member(8, 0x70, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> _0;
        [RTTI.Member(9, 0x80, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsWatchTower;
        [RTTI.Member(10, 0x90, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsRainShelter;
        [RTTI.Member(11, 0xA0, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsCharger;
        [RTTI.Member(12, 0xB0, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsRoadRebuilder;
        [RTTI.Member(13, 0xC0, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsZipline;
        [RTTI.Member(14, 0xD0, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsBridge;
        [RTTI.Member(15, 0xE0, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsLadder;
        [RTTI.Member(16, 0xF0, "MenuOpenDefaultSetting")] public Array<Ref<DSUIConstructionPointResource>> OpenAsCamouflage;
    }

    [RTTI.Serializable(0x9653729EFC8E092A, GameType.DS)]
    public class DSUIConstructionNGReasonHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x2BB41C8742905BA1, GameType.DS)]
    public class DSUIConstructionNGReasonHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDElementResource> PartsElement0;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<HUDElementResource> PartsElement1;
        [RTTI.Member(20, 0x90, "DS_Logic")] public Ref<HUDElementResource> PartsElement2;
        [RTTI.Member(21, 0x98, "DS_Logic")] public Ref<HUDElementResource> PartsElement3;
        [RTTI.Member(22, 0xA0, "DS_Logic")] public Ref<HUDElementResource> PartsElement4;
        [RTTI.Member(23, 0xA8, "DS_Logic")] public Ref<HUDElementResource> PartsElement5;
        [RTTI.Member(24, 0xB0, "DS_Logic")] public Ref<HUDElementResource> PartsElement6;
        [RTTI.Member(25, 0xB8, "DS_Logic")] public Ref<HUDElementResource> PartsElement7;
        [RTTI.Member(26, 0xC0, "DS_Logic")] public Ref<HUDElementResource> PartsElement8;
        [RTTI.Member(27, 0xC8, "DS_Logic")] public Ref<HUDElementResource> PartsElement9;
        [RTTI.Member(28, 0xD0, "DS_Logic")] public Ref<HUDElementResource> PartsElement10;
        [RTTI.Member(29, 0xD8, "DS_Logic")] public Ref<HUDElementResource> PartsElement11;
        [RTTI.Member(30, 0xE0, "DS_Logic")] public Ref<HUDElementResource> ItemTemplateElement;
        [RTTI.Member(31, 0xE8, "DS_Logic")] public Ref<HUDElementResource> StyleRootElement_RED;
        [RTTI.Member(32, 0xF0, "DS_Logic")] public Ref<HUDElementResource> StyleRootElement_YELLOW;
        [RTTI.Member(33, 0xF8, "DS_Logic")] public Ref<HUDTextResource> NGReasonText_RED;
        [RTTI.Member(34, 0x100, "DS_Logic")] public Ref<HUDTextResource> NGReasonText_YELLOW;
        [RTTI.Member(36, 0x108, "DS_Animator")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(37, 0x110, "DS_Animator")] public Ref<DSUIHUDAnimatorResource> Outroanimator;
        [RTTI.Member(38, 0x118, "DS_Animator")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(39, 0x120, "DS_Animator")] public Ref<DSUIHUDAnimatorResource> RightSideMoveAnimator;
        [RTTI.Member(40, 0x128, "DS_Animator")] public Ref<DSUIHUDAnimatorResource> LeftSideMoveAnimator;
        [RTTI.Member(42, 0x130, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_AnomalousChiralNetworkTraffic;
        [RTTI.Member(44, 0x138, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_OutsideChiralNetworkArea;
        [RTTI.Member(43, 0x140, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_UnconstructableArea;
        [RTTI.Member(45, 0x148, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_InsufficientChiralNetworkTraffic;
        [RTTI.Member(47, 0x150, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_StageStructureProximityWarning;
        [RTTI.Member(48, 0x158, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_RoadPaverProximityWarning;
        [RTTI.Member(49, 0x160, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_UnknownStructureProximityWarning;
        [RTTI.Member(50, 0x168, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_StructureProximityWarning;
        [RTTI.Member(51, 0x170, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_LadderProximityWarning;
        [RTTI.Member(52, 0x178, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_RopeProximityWarning;
        [RTTI.Member(53, 0x180, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_HostileCampProximityWarning;
        [RTTI.Member(54, 0x188, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_HostileCampProximityWarning_Bridge;
        [RTTI.Member(55, 0x190, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_HostileCampProximityWarning_SafetyHouse;
        [RTTI.Member(46, 0x198, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_PrintingQueued;
        [RTTI.Member(56, 0x1A0, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_HumanDetected;
        [RTTI.Member(57, 0x1A8, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_BTDetected;
        [RTTI.Member(58, 0x1B0, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_ObstacleDetected;
        [RTTI.Member(67, 0x1B8, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_NoSpace;
        [RTTI.Member(60, 0x1C0, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_DeepWaterDetected;
        [RTTI.Member(59, 0x1C8, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_IncompatibleFooting;
        [RTTI.Member(61, 0x1D0, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_SteepSlopeDetected;
        [RTTI.Member(64, 0x1D8, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_BaggageExists;
        [RTTI.Member(62, 0x1E0, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_InsufficientGroundContact;
        [RTTI.Member(63, 0x1E8, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_UnstableContact;
        [RTTI.Member(65, 0x1F0, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_AirWall;
        [RTTI.Member(68, 0x1F8, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_InvisibleWall;
        [RTTI.Member(66, 0x200, "DS_NGReasons")] public Ref<DSUINGReasonItemResource> NGReasons_RoadProximityWarning;
    }

    [RTTI.Serializable(0x2A5D175E75BBBCC7, GameType.DS)]
    public class DSUIConstructionPointResource : Resource
    {
        [RTTI.Member(3, 0x20, "MenuItemVisible")] public bool Mission;
        [RTTI.Member(7, 0x21, "MenuItemVisible")] public bool Delivery;
        [RTTI.Member(12, 0x22, "MenuItemVisible")] public bool Coffin;
        [RTTI.Member(13, 0x23, "MenuItemVisible")] public bool Material;
        [RTTI.Member(14, 0x24, "MenuItemVisible")] public bool Top_Recycle;
        [RTTI.Member(15, 0x25, "MenuItemVisible")] public bool Entrust;
        [RTTI.Member(16, 0x26, "MenuItemVisible")] public bool ShareBox;
        [RTTI.Member(19, 0x27, "MenuItemVisible")] public bool PrivateBox;
        [RTTI.Member(20, 0x28, "MenuItemVisible")] public bool Vehicle;
        [RTTI.Member(21, 0x29, "MenuItemVisible")] public bool Catalogue;
        [RTTI.Member(22, 0x2A, "MenuItemVisible")] public bool PrivateRoom;
        [RTTI.Member(23, 0x2B, "MenuItemVisible")] public bool Shelter;
        [RTTI.Member(24, 0x2C, "MenuItemVisible")] public bool StructureLevelUp;
        [RTTI.Member(25, 0x2D, "MenuItemVisible")] public bool StructureRecover;
        [RTTI.Member(26, 0x2E, "MenuItemVisible")] public bool StructureCustom;
        [RTTI.Member(27, 0x2F, "MenuItemVisible")] public bool StructureDestroy;
        [RTTI.Member(4, 0x30, "MenuItemVisible")] public bool _Sam;
        [RTTI.Member(5, 0x31, "MenuItemVisible")] public bool _Simple;
        [RTTI.Member(6, 0x32, "MenuItemVisible")] public bool _Auto;
        [RTTI.Member(8, 0x33, "MenuItemVisible")] public bool _Mission;
        [RTTI.Member(9, 0x34, "MenuItemVisible")] public bool _Supply;
        [RTTI.Member(10, 0x35, "MenuItemVisible")] public bool _Lost;
        [RTTI.Member(11, 0x36, "MenuItemVisible")] public bool _MemoryChip;
        [RTTI.Member(17, 0x37, "MenuItemVisible")] public bool _In;
        [RTTI.Member(18, 0x38, "MenuItemVisible")] public bool _Out;
        [RTTI.Member(29, 0x40, "MenuParam")] public Array<Ref<LocalizedTextResource>> TitleTexts;
        [RTTI.Member(31, 0x50, "MarkerParam")] public EDSUIConstructionOverrideMarkerType OverrideMarker;
    }

    [RTTI.Serializable(0x146838CD996CC24, GameType.DS)]
    public class DSUIDPadHUDDisplaySceneParam
    {
        [RTTI.Member(0, 0x0)] public EDSUIDPadStateType StateType;
        [RTTI.Member(1, 0x4)] public int ChangeStateDelayFrame;
    }

    [RTTI.Serializable(0x5E2F42941F318CC2, GameType.DS)]
    public class DSUIDPadHUDDisplayStateComponent : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> RootElement;
        [RTTI.Member(5, 0x28, "StateParam")] public DSUIDPadHUDStateParam StateParam_SLEEP;
        [RTTI.Member(6, 0x3C, "StateParam")] public DSUIDPadHUDStateParam StateParam_WAKE;
        [RTTI.Member(7, 0x50, "StateParam")] public DSUIDPadHUDStateParam StateParam_STANDBY;
        [RTTI.Member(8, 0x64, "StateParam")] public DSUIDPadHUDStateParam StateParam_FULL;
        [RTTI.Member(10, 0x78, "StateChangeCurve")] public Ref<CurveResource> StateChangeAlphaCurve;
        [RTTI.Member(11, 0x80, "StateChangeCurve")] public Ref<CurveResource> StateChangeScaleCurve;
        [RTTI.Member(12, 0x88, "StateChangeCurve")] public Ref<CurveResource> StateChangePositionZCurve;
        [RTTI.Member(13, 0x90, "StateChangeCurve")] public Ref<CurveResource> StateChangeRotateXCurve;
        [RTTI.Member(14, 0x98, "StateChangeCurve")] public Ref<CurveResource> StateChangeRotateYCurve;
        [RTTI.Member(16, 0xA0, "DisplaySceneParam")] public DSUIDPadHUDDisplaySceneParam DisplaySceneParam_WALK;
        [RTTI.Member(17, 0xA8, "DisplaySceneParam")] public DSUIDPadHUDDisplaySceneParam DisplaySceneParam_IDLE;
        [RTTI.Member(18, 0xB0, "DisplaySceneParam")] public DSUIDPadHUDDisplaySceneParam DisplaySceneParam_RIDE_VEHICLE;
        [RTTI.Member(19, 0xB8, "DisplaySceneParam")] public DSUIDPadHUDDisplaySceneParam DisplaySceneParam_TAKE_A_BREAK;
        [RTTI.Member(20, 0xC0, "DisplaySceneParam")] public DSUIDPadHUDDisplaySceneParam DisplaySceneParam_SLEEPING;
        [RTTI.Member(21, 0xC8, "DisplaySceneParam")] public DSUIDPadHUDDisplaySceneParam DisplaySceneParam_ATTACK;
    }

    [RTTI.Serializable(0xB6ADC630B9A6E9D, GameType.DS)]
    public class DSUIDPadHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xE31335D098944431, GameType.DS)]
    public class DSUIDPadHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDElementResource> RootPositionElement;
        [RTTI.Member(20, 0x88, "DPadIcon")] public Ref<HUDElementResource> DPadUpRootElement;
        [RTTI.Member(21, 0x90, "DPadIcon")] public Ref<HUDElementResource> DPadRightRootElement;
        [RTTI.Member(22, 0x98, "DPadIcon")] public Ref<HUDElementResource> DPadDownRootElement;
        [RTTI.Member(23, 0xA0, "DPadIcon")] public Ref<HUDElementResource> DPadLeftRootElement;
        [RTTI.Member(24, 0xA8, "DPadIcon")] public Ref<HUDElementResource> DPadIconTemplateElement;
        [RTTI.Member(25, 0xB0, "DPadIcon")] public Ref<HUDImageResource> SymbolIconImageElement;
        [RTTI.Member(26, 0xB8, "DPadIcon")] public Ref<HUDImageResource> SymbolIconImageBgElement;
        [RTTI.Member(27, 0xC0, "DPadIcon")] public Ref<HUDElementResource> SymbolIconRootElement;
        [RTTI.Member(28, 0xC8, "DPadIcon")] public Ref<HUDElementResource> DPadHoldIconRootElement;
        [RTTI.Member(29, 0xD0, "DPadIcon")] public Ref<HUDElementResource> DPadEquipIconRootElemen;
        [RTTI.Member(30, 0xD8, "DPadIcon")] public Ref<HUDElementResource> GradationBgElement;
        [RTTI.Member(31, 0xE0, "DPadIcon")] public Ref<HUDElementResource> UpdateCircleElement;
        [RTTI.Member(32, 0xE8, "DPadIcon")] public Ref<HUDElementResource> KeyHelpBaseRootElement;
        [RTTI.Member(33, 0xF0, "DPadIcon")] public Ref<HUDElementResource> KeyHelpActiveRootElement;
        [RTTI.Member(34, 0xF8, "DPadIcon")] public Ref<HUDElementResource> KeyHelpBaseElement;
        [RTTI.Member(35, 0x100, "DPadIcon")] public Ref<HUDElementResource> KeyHelpActiveElement;
        [RTTI.Member(37, 0x108, "Canteen")] public Ref<HUDElementResource> CanteenRootElement;
        [RTTI.Member(38, 0x110, "Canteen")] public Ref<HUDTextResource> CanteenAmountTextElement;
        [RTTI.Member(39, 0x118, "Canteen")] public Ref<HUDTextResource> CanteenAmountTextBgElement;
        [RTTI.Member(41, 0x120, "HoldCircle")] public Ref<HUDElementResource> HoldCircleRootElement;
        [RTTI.Member(42, 0x128, "HoldCircle")] public Ref<HUDElementResource> HoldCircleBgRootElement;
        [RTTI.Member(44, 0x130, "HoldCircle_Parts")] public Ref<HUDElementResource> HoldCirclePartsRootElements_01;
        [RTTI.Member(45, 0x138, "HoldCircle_Parts")] public Ref<HUDElementResource> HoldCirclePartsRootElements_02;
        [RTTI.Member(46, 0x140, "HoldCircle_Parts")] public Ref<HUDElementResource> HoldCirclePartsRootElements_03;
        [RTTI.Member(47, 0x148, "HoldCircle_Parts")] public Ref<HUDElementResource> HoldCirclePartsRootElements_04;
        [RTTI.Member(48, 0x150, "HoldCircle_Parts")] public Ref<HUDElementResource> HoldCirclePartsRootElements_05;
        [RTTI.Member(49, 0x158, "HoldCircle_Parts")] public Ref<HUDElementResource> HoldCirclePartsTemplateElement;
        [RTTI.Member(50, 0x160, "HoldCircle_Parts")] public Ref<HUDImageResource> HoldCirclePartsImageElement;
        [RTTI.Member(52, 0x168, "Separator")] public Ref<HUDElementResource> SeparatorRootElements_01;
        [RTTI.Member(53, 0x170, "Separator")] public Ref<HUDElementResource> SeparatorRootElements_02;
        [RTTI.Member(54, 0x178, "Separator")] public Ref<HUDElementResource> SeparatorRootElements_03;
        [RTTI.Member(55, 0x180, "Separator")] public Ref<HUDElementResource> SeparatorRootElements_04;
        [RTTI.Member(56, 0x188, "Separator")] public Ref<HUDElementResource> SeparatorTemplateElement;
        [RTTI.Member(58, 0x190, "OdradekSensor")] public Ref<HUDElementResource> OdradekSensorRechargeGaugeRootElement;
        [RTTI.Member(59, 0x198, "OdradekSensor")] public Ref<DSUIHUDPolygonElementResource> OdradekSensorGaugePolygonElement;
        [RTTI.Member(61, 0x1A0, "CommonGauge")] public Ref<HUDElementResource> CommonGaugeTemplateElement;
        [RTTI.Member(62, 0x1A8, "CommonGauge")] public Ref<HUDElementResource> CommonGaugeFrameElement;
        [RTTI.Member(63, 0x1B0, "CommonGauge")] public Ref<DSUIHUDPolygonElementResource> CommonGaugePolygonElement;
        [RTTI.Member(64, 0x1B8, "CommonGauge")] public Ref<DSUIHUDPolygonElementResource> CommonGaugeFullPolygonElement;
        [RTTI.Member(65, 0x1C0, "CommonGauge")] public Ref<HUDElementResource> CommonGaugeNotchRootElement;
        [RTTI.Member(66, 0x1C8, "CommonGauge")] public Ref<HUDImageResource> CommonGaugeNotchImageElement;
        [RTTI.Member(68, 0x1D0, "Battery")] public Ref<HUDElementResource> BatteryRootElement;
        [RTTI.Member(69, 0x1D8, "Battery")] public Ref<HUDElementResource> BatteryGaugeRootElement;
        [RTTI.Member(70, 0x1E0, "Battery")] public Ref<HUDImageResource> BatteryTargetIconImageElement;
        [RTTI.Member(71, 0x1E8, "Battery")] public Ref<HUDImageResource> BatteryTargetIconImageBgElement;
        [RTTI.Member(72, 0x1F0, "Battery")] public Ref<HUDImageResource> BatteryIconImageElement;
        [RTTI.Member(73, 0x1F8, "Battery")] public Ref<HUDImageResource> BatteryIconImageBgElement;
        [RTTI.Member(74, 0x200, "Battery")] public Ref<HUDElementResource> BatteryLessCircleElement;
        [RTTI.Member(76, 0x208, "BBInfo")] public Ref<HUDElementResource> BBInfoRootElement;
        [RTTI.Member(77, 0x210, "BBInfo")] public Ref<HUDElementResource> BBStressGaugeRootElement;
        [RTTI.Member(78, 0x218, "BBInfo")] public Ref<HUDImageResource> BBStatIconImageElement;
        [RTTI.Member(79, 0x220, "BBInfo")] public Ref<HUDImageResource> BBStatIconImageBgElement;
        [RTTI.Member(81, 0x228, "BootsInfo")] public Ref<HUDElementResource> BootsInfoRootElement;
        [RTTI.Member(82, 0x230, "BootsInfo")] public Ref<HUDElementResource> BootsLifeGaugeRootElement;
        [RTTI.Member(83, 0x238, "BootsInfo")] public Ref<HUDImageResource> BootsStatIconImageElement;
        [RTTI.Member(84, 0x240, "BootsInfo")] public Ref<HUDImageResource> BootsStatIconImageBgElement;
        [RTTI.Member(86, 0x248, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconPressIntroAnimator;
        [RTTI.Member(87, 0x250, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconPressOutroAnimator;
        [RTTI.Member(88, 0x258, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconEnableAnimator;
        [RTTI.Member(89, 0x260, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconDisableAnimator;
        [RTTI.Member(90, 0x268, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconActiveMoveAnimator;
        [RTTI.Member(91, 0x270, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconDeactiveMoveAnimator;
        [RTTI.Member(92, 0x278, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconIdleAnimator;
        [RTTI.Member(93, 0x280, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconHoldCompleteAnimator;
        [RTTI.Member(94, 0x288, "DPadIcon_Animation")] public Ref<DSUIHUDAnimatorResource> DPadIconUpdateAnimator;
        [RTTI.Member(96, 0x290, "CanteenHUD_Animation")] public Ref<DSUIHUDAnimatorResource> CanteenHUDRecoverFinishAnimator;
        [RTTI.Member(98, 0x298, "HoldCircle_Animation")] public Ref<DSUIHUDAnimatorResource> HoldCircleChargingAnimator;
        [RTTI.Member(99, 0x2A0, "HoldCircle_Animation")] public Ref<DSUIHUDAnimatorResource> HoldCircleIdleAnimator;
        [RTTI.Member(100, 0x2A8, "HoldCircle_Animation")] public Ref<DSUIHUDAnimatorResource> HoldCircleCompleteAnimator;
        [RTTI.Member(101, 0x2B0, "HoldCircle_Animation")] public Ref<DSUIHUDAnimatorResource> HoldCircleBgIntroAnimator;
        [RTTI.Member(102, 0x2B8, "HoldCircle_Animation")] public Ref<DSUIHUDAnimatorResource> HoldCircleBgOutroAnimator;
        [RTTI.Member(104, 0x2C0, "Separator_Animation")] public Ref<DSUIHUDAnimatorResource> SeparatorIntroAnimator;
        [RTTI.Member(105, 0x2C8, "Separator_Animation")] public Ref<DSUIHUDAnimatorResource> SeparatorOutroAnimator;
        [RTTI.Member(107, 0x2D0, "OdradekSensor_Animation")] public Ref<DSUIHUDAnimatorResource> OdradekSensorActiveMoveAnimator;
        [RTTI.Member(108, 0x2D8, "OdradekSensor_Animation")] public Ref<DSUIHUDAnimatorResource> OdradekSensorDeactiveMoveAnimator;
        [RTTI.Member(109, 0x2E0, "OdradekSensor_Animation")] public Ref<DSUIHUDAnimatorResource> OdradekSensorRechargeIntroAnimator;
        [RTTI.Member(110, 0x2E8, "OdradekSensor_Animation")] public Ref<DSUIHUDAnimatorResource> OdradekSensorRechargeCompleteAnimator;
        [RTTI.Member(111, 0x2F0, "OdradekSensor_Animation")] public Ref<DSUIHUDAnimatorResource> OdradekSensorIdleAnimator;
        [RTTI.Member(113, 0x2F8, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryIntroAnimator;
        [RTTI.Member(114, 0x300, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryOutroAnimator;
        [RTTI.Member(115, 0x308, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryEmptyAnimator;
        [RTTI.Member(116, 0x310, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryFullIdleAnimator;
        [RTTI.Member(117, 0x318, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryHighIdleAnimator;
        [RTTI.Member(118, 0x320, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryMediumIdleAnimator;
        [RTTI.Member(119, 0x328, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryLowIdleAnimator;
        [RTTI.Member(120, 0x330, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryEmptyIdleAnimator;
        [RTTI.Member(121, 0x338, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryL3UseIntroAnimator;
        [RTTI.Member(122, 0x340, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryL3UseOutroAnimator;
        [RTTI.Member(123, 0x348, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryL3HoldEmptyAnimator;
        [RTTI.Member(124, 0x350, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryL3BurstModeIntroAnimator;
        [RTTI.Member(125, 0x358, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryL3BurstModeIdleAnimator;
        [RTTI.Member(126, 0x360, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryL3BurstModeOutroAnimator;
        [RTTI.Member(127, 0x368, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryIconRechargeIdleAnimator;
        [RTTI.Member(128, 0x370, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryIconFullAnimator;
        [RTTI.Member(129, 0x378, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryIconDefaultAnimator;
        [RTTI.Member(130, 0x380, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryRechargeIntroAnimator;
        [RTTI.Member(131, 0x388, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryUsingButtonAnimator;
        [RTTI.Member(132, 0x390, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryLessIntroAnimator;
        [RTTI.Member(133, 0x398, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryLessOutroAnimator;
        [RTTI.Member(134, 0x3A0, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryOverheatEnableAnimator;
        [RTTI.Member(135, 0x3A8, "Battery_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryOverheatDisableAnimator;
        [RTTI.Member(137, 0x3B0, "BBInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BBInfoIntroAnimator;
        [RTTI.Member(138, 0x3B8, "BBInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BBInfoOutroAnimator;
        [RTTI.Member(139, 0x3C0, "BBInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BBInfoIdleAnimator;
        [RTTI.Member(140, 0x3C8, "BBInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BBInfoStateSetToSicknessAnimator;
        [RTTI.Member(141, 0x3D0, "BBInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BBInfoStateSetToHighStressAnimator;
        [RTTI.Member(142, 0x3D8, "BBInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BBInfoStateSetToNeutralAnimator;
        [RTTI.Member(144, 0x3E0, "BootsInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BootsInfoIntroAnimator;
        [RTTI.Member(145, 0x3E8, "BootsInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BootsInfoOutroAnimator;
        [RTTI.Member(146, 0x3F0, "BootsInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BootsInfoIdleAnimator;
        [RTTI.Member(147, 0x3F8, "BootsInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BootsStateSetToHighAnimator;
        [RTTI.Member(148, 0x400, "BootsInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BootsStateSetToLowAnimator;
        [RTTI.Member(149, 0x408, "BootsInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BootsStateSetToEmptyAnimator;
        [RTTI.Member(150, 0x410, "BootsInfo_Animation")] public Ref<DSUIHUDAnimatorResource> BootsStateSetToBrokenAnimator;
        [RTTI.Member(152, 0x418, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> CommonGaugeIntroAnimator;
        [RTTI.Member(153, 0x420, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> CommonGaugeOutroAnimator;
        [RTTI.Member(154, 0x428, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> CommonGaugeNotchIntroAnimator;
        [RTTI.Member(155, 0x430, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> CommonGaugeNotchIdleAnimator;
        [RTTI.Member(156, 0x438, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> CommonGaugeNotchIdleWithUpwardSoundAnimator;
        [RTTI.Member(157, 0x440, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> CommonGaugeNotchIdleWithDownwardSoundAnimator;
        [RTTI.Member(158, 0x448, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> CommonGaugeNotchOutroAnimator;
        [RTTI.Member(159, 0x450, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryColorEmptyToLowAnimator;
        [RTTI.Member(160, 0x458, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryColorLowToMediumAnimator;
        [RTTI.Member(161, 0x460, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryColorMediumToHighAnimator;
        [RTTI.Member(162, 0x468, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryColorHighToFullAnimator;
        [RTTI.Member(163, 0x470, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryColorHighToMediumAnimator;
        [RTTI.Member(164, 0x478, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryColorMediumToLowAnimator;
        [RTTI.Member(165, 0x480, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BatteryColorLowToEmptyAnimator;
        [RTTI.Member(166, 0x488, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BBStressGaugeColorLowToHighAnimator;
        [RTTI.Member(167, 0x490, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BBStressGaugeColorHighToLowAnimator;
        [RTTI.Member(168, 0x498, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BBStressGaugeColorHighToFullAnimator;
        [RTTI.Member(169, 0x4A0, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BootsGaugeColorLowToHighAnimator;
        [RTTI.Member(170, 0x4A8, "CommonGauge_Animation")] public Ref<DSUIHUDAnimatorResource> BootsGaugeColorHighToLowAnimator;
        [RTTI.Member(172, 0x4B0, "Texture")] public Ref<UITexture> DPadIconSymbolTexture_Up;
        [RTTI.Member(173, 0x4B8, "Texture")] public Ref<UITexture> DPadIconSymbolTexture_Right;
        [RTTI.Member(174, 0x4C0, "Texture")] public Ref<UITexture> DPadIconSymbolTexture_Down;
        [RTTI.Member(175, 0x4C8, "Texture")] public Ref<UITexture> DPadIconSymbolTexture_Left;
        [RTTI.Member(176, 0x4D0, "Texture")] public Ref<UITexture> DPadIconSunglassesIconTexture;
        [RTTI.Member(177, 0x4D8, "Texture")] public Ref<UITexture> DPadIconSunglassesAndShoesIconTexture;
        [RTTI.Member(178, 0x4E0, "Texture")] public Ref<UITexture> DPadIconSunglassesAndShoesAndSuitPartsIconTexture;
        [RTTI.Member(179, 0x4E8, "Texture")] public Ref<UITexture> WeaponAttachmentSymbolTexture;
        [RTTI.Member(180, 0x4F0, "Texture")] public Ref<UITexture> ConstructionSymbolTexture;
        [RTTI.Member(181, 0x4F8, "Texture")] public Ref<UITexture> CanteenSymbolTexture;
        [RTTI.Member(182, 0x500, "Texture")] public Ref<UITexture> DPadIconNgSymbolTexture;
        [RTTI.Member(183, 0x508, "Texture")] public Ref<UITexture> PlayerBatteryTargetIconTexture;
        [RTTI.Member(184, 0x510, "Texture")] public Ref<UITexture> BikeBatteryTargetIconTexture;
        [RTTI.Member(185, 0x518, "Texture")] public Ref<UITexture> TruckBatteryTargetIconTexture;
        [RTTI.Member(186, 0x520, "Texture")] public Ref<UITexture> BatteryEmptyIconTextute;
        [RTTI.Member(187, 0x528, "Texture")] public Ref<UITexture> BatteryFullIconTexture;
        [RTTI.Member(188, 0x530, "Texture")] public Ref<UITexture> BatteryRechargeIconTexture;
        [RTTI.Member(189, 0x538, "Texture")] public Ref<UITexture> BatteryLessIconTexture;
        [RTTI.Member(190, 0x540, "Texture")] public Ref<UITexture> BBStatNeutralIconTexture;
        [RTTI.Member(191, 0x548, "Texture")] public Ref<UITexture> BBStatHighStressIconTexture;
        [RTTI.Member(192, 0x550, "Texture")] public Ref<UITexture> BBStatSicknessIconTexture;
        [RTTI.Member(193, 0x558, "Texture")] public Ref<UITexture> BBStatInRecoveryTexture;
        [RTTI.Member(194, 0x560, "Texture")] public Ref<UITexture> BootsStatNormalIconTexture;
        [RTTI.Member(195, 0x568, "Texture")] public Ref<UITexture> BootsStatBrokenIconTexture;
        [RTTI.Member(197, 0x570, "Sound")] public Ref<SoundResource> ErrorSoundResource;
        [RTTI.Member(198, 0x578, "Sound")] public Ref<SoundResource> WaterBottleFullSoundResource;
        [RTTI.Member(199, 0x580, "Sound")] public Ref<SoundResource> BBStressColorChangeSoundResource;
        [RTTI.Member(200, 0x588, "Sound")] public Ref<SoundResource> ShoesGaugeFillSoundResource;
        [RTTI.Member(202, 0x590, "DPad_State_Parameter")] public Ref<DSUIDPadHUDDisplayStateComponent> DPadDisplayStateComponent;
        [RTTI.Member(203, 0x598, "DPad_State_Parameter")] public Ref<DSUIDPadHUDDisplayStateComponent> BatteryDisplayStateComponent;
        [RTTI.Member(205, 0x5A0, "Battery_Parameter")] public float PlayerBatteryGaugeCoefficient;
        [RTTI.Member(206, 0x5A4, "Battery_Parameter")] public float VehicleBatteryGaugeCoefficient;
        [RTTI.Member(207, 0x5A8, "Battery_Parameter")] public float PlayerBatteryGaugeHeight;
        [RTTI.Member(208, 0x5AC, "Battery_Parameter")] public float VehicleBatteryGaugeHeight;
        [RTTI.Member(209, 0x5B0, "Battery_Parameter")] public float BatteryDisplaySec;
        [RTTI.Member(210, 0x5B4, "Battery_Parameter")] public float BatteryGaugeFullChargeSec;
        [RTTI.Member(212, 0x5B8, "CanteenHUD_Parameter")] public float CanteenMaxRecoverySec;
        [RTTI.Member(214, 0x5BC, "BBInfo_Parameter")] public float BBStressLowestDisplaySec;
        [RTTI.Member(215, 0x5C0, "BBInfo_Parameter")] public float BBStressGaugeFullChargeSec;
        [RTTI.Member(216, 0x5C4, "BBInfo_Parameter")] public FSize BBStressGaugeSize;
        [RTTI.Member(218, 0x5CC, "BootsInfo_Parameter")] public float BootsLowestDisplaySec;
        [RTTI.Member(219, 0x5D0, "BootsInfo_Parameter")] public float BootsLifeGaugeFullChargeSec;
        [RTTI.Member(220, 0x5D4, "BootsInfo_Parameter")] public FSize BootsLifeGaugeSize;
        [RTTI.Member(222, 0x5DC, "Other_Parameter")] public float GaugeRowOffsetY;
        [RTTI.Member(223, 0x5E0, "Other_Parameter")] public Ref<CurveResource> OffsetMoveCurve;
    }

    [RTTI.Serializable(0x338E931CE6E3CBF2, GameType.DS)]
    public class DSUIDPadHUDStateParam
    {
        [RTTI.Member(0, 0x0)] public float Alpha;
        [RTTI.Member(1, 0x4)] public float Scale;
        [RTTI.Member(2, 0x8)] public float PosZ;
        [RTTI.Member(3, 0xC)] public float RotateX;
        [RTTI.Member(4, 0x10)] public float RotateY;
    }

    [RTTI.Serializable(0x58EC85114F15F289, GameType.DS)]
    public class DSUIDatabaseArchiveMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xDA71779CA4657E1F, GameType.DS)]
    public class DSUIDatabaseArchiveMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x30, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Diehardman;
        [RTTI.Member(7, 0x38, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Deadman;
        [RTTI.Member(8, 0x40, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Heartman;
        [RTTI.Member(9, 0x48, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Mama;
        [RTTI.Member(10, 0x50, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Lockne;
        [RTTI.Member(11, 0x58, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Fragile;
        [RTTI.Member(12, 0x60, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_BridgesStaff;
        [RTTI.Member(13, 0x68, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Preppers;
        [RTTI.Member(14, 0x70, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_HiggesNote;
        [RTTI.Member(15, 0x78, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_LucyReport;
        [RTTI.Member(16, 0x80, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_OldDiehardman;
        [RTTI.Member(17, 0x88, "DatabaseArchiveCategory")] public Ref<LocalizedTextResource> Headline_Other;
        [RTTI.Member(19, 0x90, "SecretResourceData")] public Ref<LocalizedTextResource> SecretHeadlineLocalizedTextResources;
        [RTTI.Member(20, 0x98, "SecretResourceData")] public Ref<LocalizedTextResource> SecretNameTextResources;
        [RTTI.Member(21, 0xA0, "SecretResourceData")] public StreamingRef<UITexture> SecretTextreResource;
    }

    [RTTI.Serializable(0x29C0F467D49374D5, GameType.DS)]
    public class DSUIDatabaseArchiveMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xBBFBC9FDF5DF17E3, GameType.DS)]
    public class DSUIDatabaseArchiveMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(6, 0x30)] public Ref<MenuElementResource> ItemListElementResource;
        [RTTI.Member(7, 0x38)] public Ref<MenuElementResource> ScrollingPanelElementResource;
    }

    [RTTI.Serializable(0x2176134244832E46, GameType.DS)]
    public class DSUIDatabaseInfoLogMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xBA9A9531AF830FF7, GameType.DS)]
    public class DSUIDatabaseInfoLogMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x4B3AAF2DD5FD5BD6, GameType.DS)]
    public class DSUIDatabaseInfoLogMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xCC9F0CAF80091CBD, GameType.DS)]
    public class DSUIDatabaseInfoLogMenuFunctionResource : MenuFunctionResource
    {
    }

    [RTTI.Serializable(0x17815F9EC43F8D66, GameType.DS)]
    public class DSUIDatabaseMemoryChipMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x7EF01B45E4E1A7D0, GameType.DS)]
    public class DSUIDatabaseMemoryChipMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Texture")] public Ref<UITexture> MemoryChipNoDataTexture;
    }

    [RTTI.Serializable(0x6C1D9C18A38DF824, GameType.DS)]
    public class DSUIDatabaseMemoryChipMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x975D4EFAEBC5C788, GameType.DS)]
    public class DSUIDatabaseMemoryChipMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> DetailDialogPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> MemoryChipListElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> DetailThumbnailListElementResource;
    }

    [RTTI.Serializable(0x8F619736DE809B39, GameType.DS)]
    public class DSUIDatabaseTipsMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x33D977957C3D43B1, GameType.DS)]
    public class DSUIDatabaseTipsMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x30, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Menu;
        [RTTI.Member(7, 0x38, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Tips;
        [RTTI.Member(8, 0x40, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Controll;
        [RTTI.Member(9, 0x48, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Player_Controll;
        [RTTI.Member(10, 0x50, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Player_Move;
        [RTTI.Member(11, 0x58, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Player_Physical;
        [RTTI.Member(12, 0x60, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Player_Battery;
        [RTTI.Member(13, 0x68, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Player_Sensor;
        [RTTI.Member(14, 0x70, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Player_Search;
        [RTTI.Member(15, 0x78, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> BB;
        [RTTI.Member(16, 0x80, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Knot_Space;
        [RTTI.Member(17, 0x88, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> TimeFall;
        [RTTI.Member(18, 0x90, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Environment;
        [RTTI.Member(19, 0x98, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Onsen;
        [RTTI.Member(20, 0xA0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Enemy_Mule;
        [RTTI.Member(21, 0xA8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Enemy_Mule_Act;
        [RTTI.Member(22, 0xB0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Enemy_Terrorist_Act;
        [RTTI.Member(23, 0xB8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Enemy_BT;
        [RTTI.Member(24, 0xC0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> NPC_Porter;
        [RTTI.Member(25, 0xC8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> OrderType;
        [RTTI.Member(26, 0xD0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> SimpleOrder;
        [RTTI.Member(27, 0xD8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> SupplyRequest;
        [RTTI.Member(28, 0xE0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Baggage;
        [RTTI.Member(29, 0xE8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Baggage_Case;
        [RTTI.Member(30, 0xF0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Baggage_Type;
        [RTTI.Member(31, 0xF8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Baggage_PartialDelivery;
        [RTTI.Member(32, 0x100, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Baggage_Entrust;
        [RTTI.Member(33, 0x108, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Baggage_Lost;
        [RTTI.Member(34, 0x110, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> SignBoard;
        [RTTI.Member(35, 0x118, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> PCC;
        [RTTI.Member(36, 0x120, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Construction;
        [RTTI.Member(37, 0x128, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Construction_VersionUp;
        [RTTI.Member(38, 0x130, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Construction_StrengtheningCooperation;
        [RTTI.Member(39, 0x138, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Construction_Holo;
        [RTTI.Member(40, 0x140, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Construction_Repairing;
        [RTTI.Member(41, 0x148, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Construction_Bandwidth;
        [RTTI.Member(42, 0x150, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Facility_Cargo;
        [RTTI.Member(43, 0x158, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Material;
        [RTTI.Member(44, 0x160, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Friendship;
        [RTTI.Member(45, 0x168, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Like;
        [RTTI.Member(46, 0x170, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Highway;
        [RTTI.Member(47, 0x178, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Vehicle;
        [RTTI.Member(48, 0x180, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Garage;
        [RTTI.Member(49, 0x188, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> FloatingCarts;
        [RTTI.Member(50, 0x190, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Tools;
        [RTTI.Member(51, 0x198, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Item;
        [RTTI.Member(52, 0x1A0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> UtilityPouch;
        [RTTI.Member(53, 0x1A8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Equipment;
        [RTTI.Member(54, 0x1B0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Backpack;
        [RTTI.Member(55, 0x1B8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> MemoryChip;
        [RTTI.Member(56, 0x1C0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Waste;
        [RTTI.Member(57, 0x1C8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Pass_Facility;
        [RTTI.Member(58, 0x1D0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> ShereBox;
        [RTTI.Member(59, 0x1D8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> PrivateBox;
        [RTTI.Member(60, 0x1E0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Equipment_Create;
        [RTTI.Member(61, 0x1E8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> PrivateRoom;
        [RTTI.Member(62, 0x1F0, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> FastTravel;
        [RTTI.Member(63, 0x1F8, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Cuff;
        [RTTI.Member(64, 0x200, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Cuff_MAP;
        [RTTI.Member(65, 0x208, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Cuff_WeatherForecast;
        [RTTI.Member(66, 0x210, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Mail;
        [RTTI.Member(67, 0x218, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> BridgeLink;
        [RTTI.Member(68, 0x220, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> RestoreBaggagge;
        [RTTI.Member(69, 0x228, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Rest;
        [RTTI.Member(70, 0x230, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> BreakNG;
        [RTTI.Member(71, 0x238, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Save;
        [RTTI.Member(72, 0x240, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Deifficulty;
        [RTTI.Member(73, 0x248, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> PhotoMode;
        [RTTI.Member(74, 0x250, "DatabaseTipsCategory")] public Ref<LocalizedTextResource> Other;
    }

    [RTTI.Serializable(0x2893E765F4D3909C, GameType.DS)]
    public class DSUIDatabaseTipsMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xF6FF3EE4873B2EEE, GameType.DS)]
    public class DSUIDatabaseTipsMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(6, 0x30)] public Ref<MenuElementResource> ItemListElementResource;
    }

    [RTTI.Serializable(0x2ACE535E1ABB50F1, GameType.DS)]
    public class DSUIDatabaseTopMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x29469F900C23D75C, GameType.DS)]
    public class DSUIDatabaseTopMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x6CDBA614FCB60308, GameType.DS)]
    public class DSUIDatabaseTopMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xE0A32B340D51A925, GameType.DS)]
    public class DSUIDatabaseTopMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> ListElementResource;
    }

    [RTTI.Serializable(0xAB27159A379F1458, GameType.DS)]
    public class DSUIDeliveryAchievementItemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> DescriptionText;
        [RTTI.Member(3, 0x28)] public bool IsBlueColorText;
        [RTTI.Member(4, 0x29)] public bool IsGreenColorText;
        [RTTI.Member(5, 0x2A)] public bool IsAddIndent;
    }

    [RTTI.Serializable(0x570B2E4687AA0A8B, GameType.DS)]
    public class DSUIDeliveryAchievementResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSUIDeliveryAchievementItemResource> GameDifficulty;
        [RTTI.Member(3, 0x28)] public Ref<DSUIDeliveryAchievementItemResource> ReceivedLike;
        [RTTI.Member(4, 0x30)] public Ref<DSUIDeliveryAchievementItemResource> ReceivedLikeNpc;
        [RTTI.Member(5, 0x38)] public Ref<DSUIDeliveryAchievementItemResource> ReceivedLikeOnline;
        [RTTI.Member(6, 0x40)] public Ref<DSUIDeliveryAchievementItemResource> LastLogin;
        [RTTI.Member(7, 0x48)] public Ref<DSUIDeliveryAchievementItemResource> PlayTime;
        [RTTI.Member(8, 0x50)] public Ref<DSUIDeliveryAchievementItemResource> MovingDistance;
        [RTTI.Member(9, 0x58)] public Ref<DSUIDeliveryAchievementItemResource> MovingDistanceWalk;
        [RTTI.Member(10, 0x60)] public Ref<DSUIDeliveryAchievementItemResource> MovingDistanceBike;
        [RTTI.Member(11, 0x68)] public Ref<DSUIDeliveryAchievementItemResource> MovingDistanceTruck;
        [RTTI.Member(12, 0x70)] public Ref<DSUIDeliveryAchievementItemResource> MovingDistanceCart;
        [RTTI.Member(13, 0x78)] public Ref<DSUIDeliveryAchievementItemResource> MovingDistanceZipLike;
        [RTTI.Member(14, 0x80)] public Ref<DSUIDeliveryAchievementItemResource> HighestReachAltitude;
        [RTTI.Member(15, 0x88)] public Ref<DSUIDeliveryAchievementItemResource> ClimbingAltitude;
        [RTTI.Member(16, 0x90)] public Ref<DSUIDeliveryAchievementItemResource> DescendingAltitude;
        [RTTI.Member(17, 0x98)] public Ref<DSUIDeliveryAchievementItemResource> SlipDown;
        [RTTI.Member(18, 0xA0)] public Ref<DSUIDeliveryAchievementItemResource> BrokenBoots;
        [RTTI.Member(19, 0xA8)] public Ref<DSUIDeliveryAchievementItemResource> FabricateItem;
        [RTTI.Member(20, 0xB0)] public Ref<DSUIDeliveryAchievementItemResource> BloodLost;
        [RTTI.Member(21, 0xB8)] public Ref<DSUIDeliveryAchievementItemResource> BloodTransfusion;
        [RTTI.Member(22, 0xC0)] public Ref<DSUIDeliveryAchievementItemResource> CenserAvoid;
        [RTTI.Member(23, 0xC8)] public Ref<DSUIDeliveryAchievementItemResource> CenserCancel;
        [RTTI.Member(24, 0xD0)] public Ref<DSUIDeliveryAchievementItemResource> NonBreathTime;
        [RTTI.Member(25, 0xD8)] public Ref<DSUIDeliveryAchievementItemResource> DefeatBT;
        [RTTI.Member(26, 0xE0)] public Ref<DSUIDeliveryAchievementItemResource> DefeatBTCut;
        [RTTI.Member(27, 0xE8)] public Ref<DSUIDeliveryAchievementItemResource> DefeatBossBT;
        [RTTI.Member(28, 0xF0)] public Ref<DSUIDeliveryAchievementItemResource> VisitKnotSpace;
        [RTTI.Member(29, 0xF8)] public Ref<DSUIDeliveryAchievementItemResource> GetChiralCrystal;
        [RTTI.Member(30, 0x100)] public Ref<DSUIDeliveryAchievementItemResource> GetCryptbiosis;
        [RTTI.Member(31, 0x108)] public Ref<DSUIDeliveryAchievementItemResource> EatCryptbiosis;
        [RTTI.Member(32, 0x110)] public Ref<DSUIDeliveryAchievementItemResource> DrinkWater;
        [RTTI.Member(33, 0x118)] public Ref<DSUIDeliveryAchievementItemResource> ExcreteWater;
        [RTTI.Member(34, 0x120)] public Ref<DSUIDeliveryAchievementItemResource> RestField;
        [RTTI.Member(35, 0x128)] public Ref<DSUIDeliveryAchievementItemResource> RestHotSpring;
        [RTTI.Member(36, 0x130)] public Ref<DSUIDeliveryAchievementItemResource> RestPrivateRoom;
        [RTTI.Member(37, 0x138)] public Ref<DSUIDeliveryAchievementItemResource> TakeShower;
        [RTTI.Member(38, 0x140)] public Ref<DSUIDeliveryAchievementItemResource> ToiletUrine;
        [RTTI.Member(39, 0x148)] public Ref<DSUIDeliveryAchievementItemResource> ToiletExcrement;
        [RTTI.Member(40, 0x150)] public Ref<DSUIDeliveryAchievementItemResource> RestTime;
        [RTTI.Member(41, 0x158)] public Ref<DSUIDeliveryAchievementItemResource> DandleBB;
        [RTTI.Member(42, 0x160)] public Ref<DSUIDeliveryAchievementItemResource> ReceivedLikeBB;
        [RTTI.Member(43, 0x168)] public Ref<DSUIDeliveryAchievementItemResource> FriendshipBB;
        [RTTI.Member(44, 0x170)] public Ref<DSUIDeliveryAchievementItemResource> ReadMail;
        [RTTI.Member(45, 0x178)] public Ref<DSUIDeliveryAchievementItemResource> ReadDocument;
        [RTTI.Member(46, 0x180)] public Ref<DSUIDeliveryAchievementItemResource> FindHotSpirng;
        [RTTI.Member(47, 0x188)] public Ref<DSUIDeliveryAchievementItemResource> FindMemoryChip;
        [RTTI.Member(48, 0x190)] public Ref<DSUIDeliveryAchievementItemResource> RestoreMemoryChip;
        [RTTI.Member(49, 0x198)] public Ref<DSUIDeliveryAchievementItemResource> GetLostBaggage;
        [RTTI.Member(50, 0x1A0)] public Ref<DSUIDeliveryAchievementItemResource> DeliverLostBaggage;
        [RTTI.Member(51, 0x1A8)] public Ref<DSUIDeliveryAchievementItemResource> DeliverLostBaggageGoal;
        [RTTI.Member(52, 0x1B0)] public Ref<DSUIDeliveryAchievementItemResource> UseLostBaggage;
        [RTTI.Member(53, 0x1B8)] public Ref<DSUIDeliveryAchievementItemResource> UseShareBoxIn;
        [RTTI.Member(54, 0x1C0)] public Ref<DSUIDeliveryAchievementItemResource> UseShareBoxOut;
        [RTTI.Member(55, 0x1C8)] public Ref<DSUIDeliveryAchievementItemResource> SendBaggage;
        [RTTI.Member(56, 0x1D0)] public Ref<DSUIDeliveryAchievementItemResource> ReceivedBaggage;
        [RTTI.Member(57, 0x1D8)] public Ref<DSUIDeliveryAchievementItemResource> QpidArea;
        [RTTI.Member(58, 0x1E0)] public Ref<DSUIDeliveryAchievementItemResource> QpidBandWidth;
        [RTTI.Member(59, 0x1E8)] public Ref<DSUIDeliveryAchievementItemResource> FriendlyDeliveryPointLv1;
        [RTTI.Member(60, 0x1F0)] public Ref<DSUIDeliveryAchievementItemResource> FriendlyDeliveryPointLv2;
        [RTTI.Member(61, 0x1F8)] public Ref<DSUIDeliveryAchievementItemResource> FriendlyDeliveryPointLv3;
        [RTTI.Member(62, 0x200)] public Ref<DSUIDeliveryAchievementItemResource> FriendlyDeliveryPointLv4;
        [RTTI.Member(63, 0x208)] public Ref<DSUIDeliveryAchievementItemResource> FriendlyDeliveryPointLv5;
    }

    [RTTI.Serializable(0x2EC3C4615D6A76DD, GameType.DS)]
    public class DSUIDemoAnimationHUDDescResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<DSUIDemoAnimationHUDImageMap> ImageMap;
        [RTTI.Member(3, 0x30)] public Array<DSUIDemoAnimationHUDTextMap> TextMap;
    }

    [RTTI.Serializable(0xECBF1DF6B11B3CD7, GameType.DS)]
    public class DSUIDemoAnimationHUDImageMap
    {
        [RTTI.Member(0, 0x0)] public Ref<HUDImageResource> Element;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> Texture;
        [RTTI.Member(2, 0x10)] public bool OverwriteSize;
    }

    [RTTI.Serializable(0xF7D7AA720B10BDD7, GameType.DS)]
    public class DSUIDemoAnimationHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x6E3D8850F74A5854, GameType.DS)]
    public class DSUIDemoAnimationHUDLogicPartsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<HUDElementResource>> ShowElements;
        [RTTI.Member(3, 0x30)] public Array<Ref<DSUIHUDAnimatorResource>> Animations;
    }

    [RTTI.Serializable(0x4A548FE2EE9B2FCE, GameType.DS)]
    public class DSUIDemoAnimationHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "AnimationParts")] public Array<Ref<DSUIDemoAnimationHUDLogicPartsResource>> Parts;
    }

    [RTTI.Serializable(0x700B86CD63E53013, GameType.DS)]
    public class DSUIDemoAnimationHUDSequenceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x9447EDB9ED095EB2, GameType.DS)]
    public class DSUIDemoAnimationHUDSequenceEventResource : EventResource
    {
        [RTTI.Member(5, 0x28)] public UUIDRef<DSUIDemoAnimationHUDLogicPartsResource> DemoAnimationHUD;
        [RTTI.Member(6, 0x38)] public Ref<DSUIDemoAnimationHUDDescResource> DemoAnimationDesc;
        [RTTI.Member(7, 0x40)] public bool JapaneseOnly;
    }

    [RTTI.Serializable(0xC8226467217AAA8F, GameType.DS)]
    public class DSUIDemoAnimationHUDTextMap
    {
        [RTTI.Member(0, 0x0)] public Ref<HUDTextResource> Element;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> Text;
    }

    [RTTI.Serializable(0x8FF65E1E012651D8, GameType.DS)]
    public class DSUIDemoPauseMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xB48C457100D8149B, GameType.DS)]
    public class DSUIDemoPauseMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x3225E9A842BC8225, GameType.DS)]
    public class DSUIDemoPauseMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> SkipMenuPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> BlackFadeOutElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> WhiteFadeOutElementResource;
    }

    [RTTI.Serializable(0xF1F67D96542A0797, GameType.DS)]
    public class DSUIDeviceBackpackMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x15D741F44EFFED0A, GameType.DS)]
    public class DSUIDeviceBackpackMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> NewCreateSlotName;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> EmptySlotName;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> BackpackCoverOnText;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> BackpackCoverOffText;
        [RTTI.Member(10, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> ColorPaletteHeadlineText;
        [RTTI.Member(11, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> CommandText_ATTACH;
        [RTTI.Member(12, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> CommandText_CHANGE;
        [RTTI.Member(13, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> CommandText_MOVE;
        [RTTI.Member(14, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> CommandText_DETACH;
        [RTTI.Member(15, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> DialogText_CANCEL;
        [RTTI.Member(16, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> DialogText_NO_MATERIAL;
        [RTTI.Member(17, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> DialogText_NO_SPACE;
        [RTTI.Member(18, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> DialogText_OVERFLOW_FROM_POUCH;
        [RTTI.Member(19, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> DialogText_CANCEL_COLOR_PALETTE;
        [RTTI.Member(20, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> OverflowItemFormatText;
        [RTTI.Member(21, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> OverflowItemOtherNumFormatText;
        [RTTI.Member(22, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> TrashReportMessageText_DELETE;
        [RTTI.Member(23, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> TrashReportMessageText_DELETE_CONFIRM;
        [RTTI.Member(24, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> NumFormatText;
        [RTTI.Member(26, 0xC8, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_BatteryCharger;
        [RTTI.Member(27, 0xD0, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_UtilityPouch;
        [RTTI.Member(28, 0xD8, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_AmmoLoader;
        [RTTI.Member(29, 0xE0, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_FourGrenadePouch;
        [RTTI.Member(30, 0xE8, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_GrenadePouch;
        [RTTI.Member(31, 0xF0, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_Balancer;
        [RTTI.Member(32, 0xF8, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_BatteryChargerLv2;
        [RTTI.Member(33, 0x100, "IconTexture")] public Ref<UITexture> BackpackOptionIconTexture_BatteryChargerLv3;
        [RTTI.Member(34, 0x108, "IconTexture")] public Ref<UITexture> BackpackCoverIconTexture;
        [RTTI.Member(35, 0x110, "IconTexture")] public Ref<UITexture> BackpackAccessoryIconTexture;
        [RTTI.Member(37, 0x118, "Headline")] public DSUIBackpackHeadlineResource HeadlineResource_EQUIPMENT_ITEM;
        [RTTI.Member(38, 0x128, "Headline")] public DSUIBackpackHeadlineResource HeadlineResource_ACCESSORY;
        [RTTI.Member(39, 0x138, "Headline")] public DSUIBackpackHeadlineResource HeadlineResource_BACKPACK_COVER;
        [RTTI.Member(40, 0x148, "Headline")] public DSUIBackpackHeadlineResource HeadlineResource_TEMPOLARY;
    }

    [RTTI.Serializable(0xA6536FB0688E338D, GameType.DS)]
    public class DSUIDeviceBackpackMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xC3F4CE6AB192E1E4, GameType.DS)]
    public class DSUIDeviceBackpackMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> BackpackPanelResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> BackpackListResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> DecideButtonPnlResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> BackpackMenuDetailPnlResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> CatalogPanelResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> CatalogGridResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> CommandPanelResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> CommandListResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> CartPanelResource;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> CartButtonListResource;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<MenuElementResource> ColorTextureResource;
        [RTTI.Member(18, 0x88, "Logic")] public Ref<MenuElementResource> ColorPalettePanelResource;
        [RTTI.Member(19, 0x90, "Logic")] public Ref<MenuElementResource> ColorPaletteListResource;
        [RTTI.Member(20, 0x98, "Logic")] public Ref<MenuElementResource> ColorPaletteItemListResource;
        [RTTI.Member(21, 0xA0, "Logic")] public Ref<MenuElementResource> ColorPaletteDecideButtonPnlResource;
        [RTTI.Member(22, 0xA8, "Logic")] public Ref<MenuElementResource> ConfirmDialogPanelResource;
        [RTTI.Member(23, 0xB0, "Logic")] public Ref<MenuElementResource> ConfirmDialogButtonListResource;
        [RTTI.Member(24, 0xB8, "Logic")] public Ref<MenuElementResource> TrashReportPanelResource;
        [RTTI.Member(25, 0xC0, "Logic")] public Ref<MenuElementResource> TrashReportButtonListResource;
        [RTTI.Member(26, 0xC8, "Logic")] public Ref<MenuElementResource> EditingFocusPanelResource;
    }

    [RTTI.Serializable(0xABE95EA301853274, GameType.DS)]
    public class DSUIDeviceBaggageMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x2E9C188A99235276, GameType.DS)]
    public class DSUIDeviceBaggageMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Parameters")] public uint32 BaggageListLineCount;
        [RTTI.Member(8, 0x30, "BaggageItemNameText")] public Ref<LocalizedTextResource> BaggageItemName_Crystal;
        [RTTI.Member(9, 0x38, "BaggageItemNameText")] public Ref<LocalizedTextResource> BaggageItemName_ShoesSole;
        [RTTI.Member(11, 0x40, "BaggageDetailText")] public Ref<LocalizedTextResource> BaggageHistoryLabel_Multi;
        [RTTI.Member(12, 0x48, "BaggageDetailText")] public Ref<LocalizedTextResource> BaggageHistoryLabel_Single;
        [RTTI.Member(13, 0x50, "BaggageDetailText")] public Ref<LocalizedTextResource> BaggageHistoryLabel_Mule;
        [RTTI.Member(14, 0x58, "BaggageDetailText")] public Ref<LocalizedTextResource> BaggageHistoryLabel_Porter;
        [RTTI.Member(16, 0x60, "ActionText")] public Ref<LocalizedTextResource> SelToSkelton;
        [RTTI.Member(17, 0x68, "ActionText")] public Ref<LocalizedTextResource> SelToGlove;
        [RTTI.Member(18, 0x70, "ActionText")] public Ref<LocalizedTextResource> SelToMask;
        [RTTI.Member(19, 0x78, "ActionText")] public Ref<LocalizedTextResource> SelToBoots;
        [RTTI.Member(20, 0x80, "ActionText")] public Ref<LocalizedTextResource> SelToRightHand;
        [RTTI.Member(21, 0x88, "ActionText")] public Ref<LocalizedTextResource> SelToLeftHand;
        [RTTI.Member(22, 0x90, "ActionText")] public Ref<LocalizedTextResource> SelToEquipWeapon;
        [RTTI.Member(23, 0x98, "ActionText")] public Ref<LocalizedTextResource> SelToSuit;
        [RTTI.Member(24, 0xA0, "ActionText")] public Ref<LocalizedTextResource> SelToShoulderR;
        [RTTI.Member(25, 0xA8, "ActionText")] public Ref<LocalizedTextResource> SelToShoulderL;
        [RTTI.Member(26, 0xB0, "ActionText")] public Ref<LocalizedTextResource> SelToWaistR;
        [RTTI.Member(27, 0xB8, "ActionText")] public Ref<LocalizedTextResource> SelToWaistL;
        [RTTI.Member(28, 0xC0, "ActionText")] public Ref<LocalizedTextResource> SelToBackpack;
        [RTTI.Member(29, 0xC8, "ActionText")] public Ref<LocalizedTextResource> SelToPouchG;
        [RTTI.Member(30, 0xD0, "ActionText")] public Ref<LocalizedTextResource> SelToPouchG_EX_L;
        [RTTI.Member(31, 0xD8, "ActionText")] public Ref<LocalizedTextResource> SelToPouchG_EX_S;
        [RTTI.Member(32, 0xE0, "ActionText")] public Ref<LocalizedTextResource> SelToPouchU;
        [RTTI.Member(33, 0xE8, "ActionText")] public Ref<LocalizedTextResource> SelToPouchU_EX;
        [RTTI.Member(34, 0xF0, "ActionText")] public Ref<LocalizedTextResource> SelToBootsStrap;
        [RTTI.Member(35, 0xF8, "ActionText")] public Ref<LocalizedTextResource> SelToBootsStrap_Ex_In;
        [RTTI.Member(36, 0x100, "ActionText")] public Ref<LocalizedTextResource> SelToBootsStrap_Ex_Out;
        [RTTI.Member(37, 0x108, "ActionText")] public Ref<LocalizedTextResource> SelToBack;
        [RTTI.Member(38, 0x110, "ActionText")] public Ref<LocalizedTextResource> SelToCart;
        [RTTI.Member(39, 0x118, "ActionText")] public Ref<LocalizedTextResource> SelToCart_lv2;
        [RTTI.Member(40, 0x120, "ActionText")] public Ref<LocalizedTextResource> SelToBike;
        [RTTI.Member(41, 0x128, "ActionText")] public Ref<LocalizedTextResource> SelToVehicle;
        [RTTI.Member(42, 0x130, "ActionText")] public Ref<LocalizedTextResource> SelToPassengerSeat;
        [RTTI.Member(43, 0x138, "ActionText")] public Ref<LocalizedTextResource> SelToCarrier;
        [RTTI.Member(44, 0x140, "ActionText")] public Ref<LocalizedTextResource> SelToStoragePrivate;
        [RTTI.Member(45, 0x148, "ActionText")] public Ref<LocalizedTextResource> SelToStoragePublic;
        [RTTI.Member(46, 0x150, "ActionText")] public Ref<LocalizedTextResource> SelToMaterial;
        [RTTI.Member(47, 0x158, "ActionText")] public Ref<LocalizedTextResource> SelToChiral;
        [RTTI.Member(48, 0x160, "ActionText")] public Ref<LocalizedTextResource> SelToField;
        [RTTI.Member(49, 0x168, "ActionText")] public Ref<LocalizedTextResource> SelToNone;
        [RTTI.Member(50, 0x170, "ActionText")] public Ref<LocalizedTextResource> Action_OpenMissionInfo;
        [RTTI.Member(51, 0x178, "ActionText")] public Ref<LocalizedTextResource> Action_OpenTagInfo;
        [RTTI.Member(52, 0x180, "ActionText")] public Ref<LocalizedTextResource> Action_OpenHistoryInfo;
        [RTTI.Member(53, 0x188, "ActionText")] public Ref<LocalizedTextResource> Action_MoveToCovered;
        [RTTI.Member(54, 0x190, "ActionText")] public Ref<LocalizedTextResource> Action_Grab;
        [RTTI.Member(55, 0x198, "ActionText")] public Ref<LocalizedTextResource> Action_MoveToCart;
        [RTTI.Member(56, 0x1A0, "ActionText")] public Ref<LocalizedTextResource> Action_Give;
        [RTTI.Member(57, 0x1A8, "ActionText")] public Ref<LocalizedTextResource> Action_DeliverTheMaterial;
        [RTTI.Member(58, 0x1B0, "ActionText")] public Ref<LocalizedTextResource> Action_Deliver_Structure;
        [RTTI.Member(59, 0x1C0, "ActionText")] public Ref<LocalizedTextResource> Action_BackToPlayer;
        [RTTI.Member(60, 0x1C8, "ActionText")] public Ref<LocalizedTextResource> Action_BackToPublicBox;
        [RTTI.Member(61, 0x1D0, "ActionText")] public Ref<LocalizedTextResource> Action_Donation;
        [RTTI.Member(62, 0x1D8, "ActionText")] public Ref<LocalizedTextResource> Action_Return;
        [RTTI.Member(63, 0x1E0, "ActionText")] public Ref<LocalizedTextResource> Action_Protection;
        [RTTI.Member(64, 0x1E8, "ActionText")] public Ref<LocalizedTextResource> Action_Commit;
        [RTTI.Member(65, 0x1F0, "ActionText")] public Ref<LocalizedTextResource> Action_Procurement;
        [RTTI.Member(66, 0x1F8, "ActionText")] public Ref<LocalizedTextResource> Action_Exchanges;
        [RTTI.Member(67, 0x200, "ActionText")] public Ref<LocalizedTextResource> Action_ExchangeSkeleton;
        [RTTI.Member(68, 0x208, "ActionText")] public Ref<LocalizedTextResource> Action_ExchangeSuitRightWaist;
        [RTTI.Member(69, 0x210, "ActionText")] public Ref<LocalizedTextResource> Action_ExchangeSuitLeftWaist;
        [RTTI.Member(70, 0x218, "ActionText")] public Ref<LocalizedTextResource> Action_DiscardShoes;
        [RTTI.Member(72, 0x220, "ActionDescText")] public Ref<LocalizedTextResource> Desc_AddToHardpoint;
        [RTTI.Member(73, 0x228, "ActionDescText")] public Ref<LocalizedTextResource> Desc_AddToPouch;
        [RTTI.Member(74, 0x230, "ActionDescText")] public Ref<LocalizedTextResource> Desc_HangTheShoes;
        [RTTI.Member(75, 0x238, "ActionDescText")] public Ref<LocalizedTextResource> Desc_DiscardTheShoes;
        [RTTI.Member(77, 0x240, "DialogText")] public Ref<LocalizedTextResource> Dialog_AlreadyFilled;
        [RTTI.Member(78, 0x248, "DialogText")] public Ref<LocalizedTextResource> Dialog_CapacityOver;
        [RTTI.Member(79, 0x250, "DialogText")] public Ref<LocalizedTextResource> Dialog_SizeOver;
        [RTTI.Member(80, 0x258, "DialogText")] public Ref<LocalizedTextResource> Dialog_CannotStoreOnBootshanger;
        [RTTI.Member(81, 0x260, "DialogText")] public Ref<LocalizedTextResource> Dialog_CannotStoreOnToolhanger;
        [RTTI.Member(82, 0x268, "DialogText")] public Ref<LocalizedTextResource> Dialog_CannotLoadMamaCart;
        [RTTI.Member(83, 0x270, "DialogText")] public Ref<LocalizedTextResource> Dialog_CannotLoadMamaTruck;
        [RTTI.Member(84, 0x278, "DialogText")] public Ref<LocalizedTextResource> Dialog_CannotLoadArtistCart;
        [RTTI.Member(85, 0x280, "DialogText")] public Ref<LocalizedTextResource> Dialog_CannotLoadArtistTruck;
        [RTTI.Member(86, 0x288, "DialogText")] public Ref<LocalizedTextResource> Dialog_BackOverBag;
        [RTTI.Member(87, 0x290, "DialogText")] public Ref<LocalizedTextResource> Dialog_BackOverBodyCommon;
        [RTTI.Member(88, 0x298, "DialogText")] public Ref<LocalizedTextResource> Dialog_BackOverBodyMama;
        [RTTI.Member(89, 0x2A0, "DialogText")] public Ref<LocalizedTextResource> Dialog_BackOverBodyArtist;
        [RTTI.Member(90, 0x2A8, "DialogText")] public Ref<LocalizedTextResource> Dialog_CartOverBag;
        [RTTI.Member(91, 0x2B0, "DialogText")] public Ref<LocalizedTextResource> Dialog_CartOverBodyCommon;
        [RTTI.Member(92, 0x2B8, "DialogText")] public Ref<LocalizedTextResource> Dialog_CartOverBodyMama;
        [RTTI.Member(93, 0x2C0, "DialogText")] public Ref<LocalizedTextResource> Dialog_CartOverBodyArtist;
        [RTTI.Member(94, 0x2C8, "DialogText")] public Ref<LocalizedTextResource> Dialog_TruckOverBag;
        [RTTI.Member(95, 0x2D0, "DialogText")] public Ref<LocalizedTextResource> Dialog_TruckOverBodyCommon;
        [RTTI.Member(96, 0x2D8, "DialogText")] public Ref<LocalizedTextResource> Dialog_TruckOverBodyMama;
        [RTTI.Member(97, 0x2E0, "DialogText")] public Ref<LocalizedTextResource> Dialog_TruckOverBodyArtist;
        [RTTI.Member(98, 0x2E8, "DialogText")] public Ref<LocalizedTextResource> Dialog_BikeOverBag;
        [RTTI.Member(99, 0x2F0, "DialogText")] public Ref<LocalizedTextResource> Dialog_WaistPwslEquip;
        [RTTI.Member(100, 0x2F8, "DialogText")] public Ref<LocalizedTextResource> Dialog_WaistBagEquip;
        [RTTI.Member(101, 0x300, "DialogText")] public Ref<LocalizedTextResource> Dialog_BTOverBoots;
        [RTTI.Member(102, 0x308, "DialogText")] public Ref<LocalizedTextResource> Dialog_PouchOverGrenade;
        [RTTI.Member(103, 0x310, "DialogText")] public Ref<LocalizedTextResource> Dialog_PouchOverBlood;
        [RTTI.Member(104, 0x318, "DialogText")] public Ref<LocalizedTextResource> Dialog_PrivateLimitNear;
        [RTTI.Member(105, 0x320, "DialogText")] public Ref<LocalizedTextResource> Dialog_PrivateLimitJust;
        [RTTI.Member(106, 0x328, "DialogText")] public Ref<LocalizedTextResource> Dialog_DiscardShoes;
        [RTTI.Member(107, 0x330, "DialogText")] public Ref<LocalizedTextResource> Dialog_UnableTakeOffShoes;
        [RTTI.Member(108, 0x338, "DialogText")] public Ref<LocalizedTextResource> Dialog_PrivateFull;
        [RTTI.Member(110, 0x340, "DialogText")] public Ref<LocalizedTextResource> Dialog_LimitShareOut;
        [RTTI.Member(112, 0x348, "DeliveryDialogText")] public Ref<LocalizedTextResource> Dialog_PackageQuantity;
        [RTTI.Member(113, 0x350, "DeliveryDialogText")] public Ref<LocalizedTextResource> Dialog_PackageSupply;
        [RTTI.Member(114, 0x358, "DeliveryDialogText")] public Ref<LocalizedTextResource> Dialog_MissionMain;
        [RTTI.Member(115, 0x360, "DeliveryDialogText")] public Ref<LocalizedTextResource> Dialog_MissionSimple;
        [RTTI.Member(116, 0x368, "DeliveryDialogText")] public Ref<LocalizedTextResource> Dialog_PackageSize;
        [RTTI.Member(117, 0x370, "DeliveryDialogText")] public Ref<LocalizedTextResource> Dialog_MissionPackageName;
        [RTTI.Member(118, 0x378, "DeliveryDialogText")] public Ref<LocalizedTextResource> Dialog_MissionPackageCount;
        [RTTI.Member(109, 0x380, "DialogText")] public Ref<LocalizedTextResource> Dialog_PrivateOver;
        [RTTI.Member(120, 0x388, "MenuTitleText")] public Ref<LocalizedTextResource> Receipt_Delivery_Baggage;
        [RTTI.Member(121, 0x390, "MenuTitleText")] public Ref<LocalizedTextResource> Donate_Goods;
        [RTTI.Member(122, 0x398, "MenuTitleText")] public Ref<LocalizedTextResource> Donate_Chiral;
        [RTTI.Member(123, 0x3A0, "MenuTitleText")] public Ref<LocalizedTextResource> Donate_Imperfection;
        [RTTI.Member(124, 0x3A8, "MenuTitleText")] public Ref<LocalizedTextResource> Entrust_Cargo;
        [RTTI.Member(125, 0x3B0, "MenuTitleText")] public Ref<LocalizedTextResource> Pass_Cargo;
        [RTTI.Member(126, 0x3B8, "MenuTitleText")] public Ref<LocalizedTextResource> Take_Cargo;
        [RTTI.Member(127, 0x3C0, "MenuTitleText")] public Ref<LocalizedTextResource> Private_Locker;
        [RTTI.Member(128, 0x3C8, "MenuTitleText")] public Ref<LocalizedTextResource> Enhance_Structure;
        [RTTI.Member(129, 0x3D0, "MenuTitleText")] public Ref<LocalizedTextResource> Enhance_Structure_Bridge;
        [RTTI.Member(130, 0x3D8, "MenuTitleText")] public Ref<LocalizedTextResource> Enhance_Structure_Safetyhouse;
        [RTTI.Member(131, 0x3E0, "MenuTitleText")] public Ref<LocalizedTextResource> Enhance_Structure_Road;
        [RTTI.Member(132, 0x3E8, "MenuTitleText")] public Ref<LocalizedTextResource> Enhance_Structure_Repair;
        [RTTI.Member(133, 0x3F0, "MenuTitleText")] public Ref<LocalizedTextResource> Cargo_Simulator;
        [RTTI.Member(134, 0x3F8, "MenuTitleText")] public Ref<LocalizedTextResource> Private_Locker_Ready;
        [RTTI.Member(135, 0x408, "MenuTitleText")] public Ref<LocalizedTextResource> Mule_Post;
        [RTTI.Member(136, 0x410, "MenuTitleText")] public Ref<LocalizedTextResource> Reward;
        [RTTI.Member(138, 0x418, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Receipt_Delivery_Baggage_jp;
        [RTTI.Member(139, 0x420, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Donate_Goods_jp;
        [RTTI.Member(140, 0x428, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Donate_Chiral_jp;
        [RTTI.Member(141, 0x430, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Donate_Imperfection_jp;
        [RTTI.Member(142, 0x438, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Entrust_Cargo_jp;
        [RTTI.Member(143, 0x440, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Pass_Cargo_jp;
        [RTTI.Member(144, 0x448, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Take_Cargo_jp;
        [RTTI.Member(145, 0x450, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Private_Locker_jp;
        [RTTI.Member(146, 0x458, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Enhance_Structure_jp;
        [RTTI.Member(147, 0x460, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Enhance_Structure_Bridge_jp;
        [RTTI.Member(148, 0x468, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Enhance_Structure_Safetyhouse_jp;
        [RTTI.Member(149, 0x470, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Enhance_Structure_Road_jp;
        [RTTI.Member(150, 0x478, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Enhance_Structure_Repair_jp;
        [RTTI.Member(151, 0x480, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Cargo_Simulator_jp;
        [RTTI.Member(152, 0x488, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Private_Locker_Ready_jp;
        [RTTI.Member(153, 0x498, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Mule_Post_jp;
        [RTTI.Member(154, 0x4A0, "MenuTitleText_jp")] public Ref<LocalizedTextResource> Reward_jp;
        [RTTI.Member(156, 0x4A8, "ConstructName")] public Ref<LocalizedTextResource> Construct_Ver;
        [RTTI.Member(159, 0x4B0, "ConstructName")] public Ref<LocalizedTextResource> Construct_SaftyHouse;
        [RTTI.Member(160, 0x4B8, "ConstructName")] public Ref<LocalizedTextResource> Construct_Post;
        [RTTI.Member(161, 0x4C0, "ConstructName")] public Ref<LocalizedTextResource> Construct_WatcheTower;
        [RTTI.Member(162, 0x4D0, "ConstructName")] public Ref<LocalizedTextResource> Construct_Generater;
        [RTTI.Member(163, 0x4D8, "ConstructName")] public Ref<LocalizedTextResource> Construct_RainShelter;
        [RTTI.Member(157, 0x4E0, "ConstructName")] public Ref<LocalizedTextResource> Construct_Zipline;
        [RTTI.Member(158, 0x4E8, "ConstructName")] public Ref<LocalizedTextResource> Construct_Bridge;
        [RTTI.Member(164, 0x4F0, "ConstructName")] public Ref<LocalizedTextResource> Construct_Route;
        [RTTI.Member(166, 0x4F8, "ButtonText")] public Ref<LocalizedTextResource> Button_Select;
        [RTTI.Member(167, 0x500, "ButtonText")] public Ref<LocalizedTextResource> Button_Launch;
        [RTTI.Member(169, 0x508, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_Cancel_Close;
        [RTTI.Member(170, 0x510, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_Share_Confirm;
        [RTTI.Member(171, 0x518, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_ConstructionUpgrade;
        [RTTI.Member(172, 0x520, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_ConstructionRepair;
        [RTTI.Member(173, 0x528, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_SharedBaggageFull;
        [RTTI.Member(174, 0x530, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_ConsignedBaggageFull;
        [RTTI.Member(175, 0x538, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_OverMaterials;
        [RTTI.Member(176, 0x540, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_RecycleCrystal;
        [RTTI.Member(177, 0x548, "ConfirmationDialog")] public Ref<LocalizedTextResource> Dialog_SafeHouseOnRoad;
        [RTTI.Member(179, 0x550, "CautionDialog")] public Ref<LocalizedTextResource> Dialog_Disable_Edit_Vehicle;
        [RTTI.Member(180, 0x558, "CautionDialog")] public Ref<LocalizedTextResource> Dialog_Disable_Edit_Resting;
        [RTTI.Member(181, 0x560, "CautionDialog")] public Ref<LocalizedTextResource> Dialog_Disable_Crystal_Full;
        [RTTI.Member(183, 0x568, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Post_Ver1;
        [RTTI.Member(184, 0x570, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Post_Ver2;
        [RTTI.Member(185, 0x578, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Post_Ver3;
        [RTTI.Member(186, 0x580, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_SafeHouse_Ver1;
        [RTTI.Member(187, 0x588, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_SafeHouse_Ver2;
        [RTTI.Member(188, 0x590, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_SafeHouse_Ver3;
        [RTTI.Member(189, 0x598, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Online_SafeHouse_Ver1;
        [RTTI.Member(190, 0x5A0, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Online_SafeHouse_Ver2;
        [RTTI.Member(191, 0x5A8, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Online_SafeHouse_Ver3;
        [RTTI.Member(192, 0x5B0, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Bridge_Ver1;
        [RTTI.Member(193, 0x5B8, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Bridge_Ver2;
        [RTTI.Member(194, 0x5C0, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Bridge_Ver3;
        [RTTI.Member(195, 0x5E0, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_WatchTower_Ver1;
        [RTTI.Member(196, 0x5E8, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_WatchTower_Ver2;
        [RTTI.Member(197, 0x5F0, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_WatchTower_Ver3;
        [RTTI.Member(198, 0x5F8, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_ZipLine_Ver1;
        [RTTI.Member(199, 0x600, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_ZipLine_Ver2;
        [RTTI.Member(200, 0x608, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_ZipLine_Ver3;
        [RTTI.Member(201, 0x610, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Shelter_Ver1;
        [RTTI.Member(202, 0x618, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Shelter_Ver2;
        [RTTI.Member(203, 0x620, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Shelter_Ver3;
        [RTTI.Member(204, 0x628, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Generater_Ver1;
        [RTTI.Member(205, 0x630, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Generater_Ver2;
        [RTTI.Member(206, 0x638, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Generater_Ver3;
        [RTTI.Member(207, 0x640, "ConstructionHelp")] public Ref<LocalizedTextResource> Construction_Help_Road_Ver1;
        [RTTI.Member(209, 0x648, "HeadlineText")] public Ref<LocalizedTextResource> Cart_Weight_Ratio;
        [RTTI.Member(210, 0x650, "HeadlineText")] public Ref<LocalizedTextResource> Slot_Sub_Bag;
        [RTTI.Member(211, 0x658, "HeadlineText")] public Ref<LocalizedTextResource> Slot_Sub_Lost;
        [RTTI.Member(212, 0x660, "HeadlineText")] public Ref<LocalizedTextResource> Slot_Sub_Item;
        [RTTI.Member(213, 0x668, "HeadlineText")] public Ref<LocalizedTextResource> Slot_Sub_Material;
        [RTTI.Member(214, 0x670, "HeadlineText")] public Ref<LocalizedTextResource> Slot_Sub_Etc;
        [RTTI.Member(216, 0x678, "HistoryInfo")] public Ref<LocalizedTextResource> History_First;
        [RTTI.Member(217, 0x680, "HistoryInfo")] public Ref<LocalizedTextResource> History_Last;
        [RTTI.Member(219, 0x688, "MissionText")] public Ref<LocalizedTextResource> Incinerate_Baggage;
        [RTTI.Member(221, 0x690, "GaugeAnimation")] public Ref<CurveResource> GaugeAnimation_Curve;
    }

    [RTTI.Serializable(0xEE6FF44A7542CFC7, GameType.DS)]
    public class DSUIDeviceBaggageMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x1BE834E65F5F7804, GameType.DS)]
    public class DSUIDeviceBaggageMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> MenuPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> BaggageListPanelElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> MenuButtonPanelElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> BaggageSelectViewElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> BaggageListElementResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> ActionListPanelElementResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> ActionListElementResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> DialogPanelElementResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> HistoryInfoPanelElementResource;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> HistoryInfoListElementResource;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<MenuElementResource> OptDialogPanelElementResource;
        [RTTI.Member(18, 0x88, "Logic")] public Ref<MenuElementResource> CrystalDialogPanelElementResource;
        [RTTI.Member(19, 0x90, "Logic")] public Ref<MenuElementResource> CrystalAcceptDialogPanelElementResource;
        [RTTI.Member(20, 0x98, "Logic")] public Ref<MenuElementResource> CancelDialogPanelElementResource;
        [RTTI.Member(21, 0xA0, "Logic")] public Ref<MenuElementResource> CautionDialogPanelElementResource;
        [RTTI.Member(22, 0xA8, "Logic")] public Ref<MenuElementResource> ActionSelectDialogPanelElementResource;
        [RTTI.Member(23, 0xB0, "Logic")] public Ref<MenuElementResource> ActionSelectDialogInRecevPanelElementResource;
        [RTTI.Member(25, 0xB8, "Logic")] public Ref<MenuElementResource> ActionReceiveGoldElementResource;
        [RTTI.Member(26, 0xC0, "Logic")] public Ref<MenuElementResource> ActionReceiveWhiteElementResource;
        [RTTI.Member(27, 0xC8, "Logic")] public Ref<MenuElementResource> CharacterDummyPanelElementResource;
        [RTTI.Member(28, 0xD0, "Logic")] public Ref<MenuElementResource> BaggageIcomDummyPaneElementResource;
        [RTTI.Member(29, 0xD8, "Logic")] public Ref<MenuElementResource> MenuDetailPanelElementResource;
        [RTTI.Member(24, 0xE0, "Logic")] public Ref<MenuElementResource> DialogDummyListElementResource;
        [RTTI.Member(31, 0xE8, "Animation")] public Ref<MenuAnimationResource> ActionListPanelIntroAnimationResource;
        [RTTI.Member(32, 0xF0, "Animation")] public Ref<MenuAnimationResource> ActionListPanelRecvIntroAnimationResource;
        [RTTI.Member(34, 0xF8, "Sound")] public Ref<SoundResource> AttachBack;
        [RTTI.Member(36, 0x100, "Sound")] public Ref<SoundResource> AttachBackBodyBag;
        [RTTI.Member(37, 0x108, "Sound")] public Ref<SoundResource> AttachSuitPart;
        [RTTI.Member(38, 0x110, "Sound")] public Ref<SoundResource> AttachToolRack;
        [RTTI.Member(39, 0x118, "Sound")] public Ref<SoundResource> CarryHand;
        [RTTI.Member(40, 0x120, "Sound")] public Ref<SoundResource> GrenadePouch;
        [RTTI.Member(41, 0x128, "Sound")] public Ref<SoundResource> IntoLocker;
        [RTTI.Member(42, 0x130, "Sound")] public Ref<SoundResource> PutToField;
        [RTTI.Member(43, 0x138, "Sound")] public Ref<SoundResource> PutToFieldBodyBag;
        [RTTI.Member(44, 0x140, "Sound")] public Ref<SoundResource> AttachBootClip;
        [RTTI.Member(45, 0x148, "Sound")] public Ref<SoundResource> UtilityPouch;
        [RTTI.Member(46, 0x150, "Sound")] public Ref<SoundResource> ChangeBoots;
        [RTTI.Member(47, 0x158, "Sound")] public Ref<SoundResource> AttachActiveSkeletonBalance;
        [RTTI.Member(48, 0x160, "Sound")] public Ref<SoundResource> AttachActiveSkeletonPower;
        [RTTI.Member(49, 0x168, "Sound")] public Ref<SoundResource> AttachActiveSkeletonSpeed;
        [RTTI.Member(55, 0x170, "Sound")] public Ref<SoundResource> PutOnHeaterUnit;
        [RTTI.Member(56, 0x178, "Sound")] public Ref<SoundResource> PutOnLadder;
        [RTTI.Member(57, 0x180, "Sound")] public Ref<SoundResource> PutOnSeaOtterFood;
        [RTTI.Member(58, 0x188, "Sound")] public Ref<SoundResource> PutOnShield;
        [RTTI.Member(59, 0x190, "Sound")] public Ref<SoundResource> PutOnRope;
        [RTTI.Member(50, 0x198, "Sound")] public Ref<SoundResource> PutOnCart;
        [RTTI.Member(51, 0x1A0, "Sound")] public Ref<SoundResource> PutOnMask;
        [RTTI.Member(52, 0x1A8, "Sound")] public Ref<SoundResource> PutOnPowerGloves;
        [RTTI.Member(53, 0x1B0, "Sound")] public Ref<SoundResource> PutOnVehicle;
        [RTTI.Member(54, 0x1B8, "Sound")] public Ref<SoundResource> PutOnBike;
        [RTTI.Member(60, 0x1C0, "Sound")] public Ref<SoundResource> Normal;
        [RTTI.Member(35, 0x1C8, "Sound")] public Ref<SoundResource> AttachBackBulk;
        [RTTI.Member(61, 0x1D0, "Sound")] public Ref<SoundResource> UpdateCrystal;
        [RTTI.Member(62, 0x1D8, "Sound")] public Ref<SoundResource> CrystalFull;
        [RTTI.Member(63, 0x1E0, "Sound")] public Ref<SoundResource> ReloadCargo;
        [RTTI.Member(64, 0x1E8, "Sound")] public Ref<SoundResource> OverWeight;
        [RTTI.Member(66, 0x1F0, "Trophy")] public Ref<TrophyResource> CatalogueAllCreatedTrophyResource;
        [RTTI.Member(67, 0x1F8, "Trophy")] public Ref<TrophyResource> GiveEquipTrophyResource;
    }

    [RTTI.Serializable(0x53A1F107D3C30F7B, GameType.DS)]
    public class DSUIDeviceBridgesIDDialogMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x88B5635500016543, GameType.DS)]
    public class DSUIDeviceBridgesIDDialogMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> AcceptStrandKeyHelp;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> CancelStrandKeyHelp;
    }

    [RTTI.Serializable(0xE83352F39115F35A, GameType.DS)]
    public class DSUIDeviceBridgesIDDialogMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x887D19854C5BCADF, GameType.DS)]
    public class DSUIDeviceBridgesIDDialogMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Elements")] public Ref<MenuElementResource> DialogMenuPanelElementResource;
        [RTTI.Member(8, 0x38, "Elements")] public Ref<MenuElementResource> BridgesIDDetailPanelElementResource;
        [RTTI.Member(9, 0x40, "Elements")] public Ref<MenuElementResource> LoadingPanelElementResource;
        [RTTI.Member(11, 0x48, "Sound")] public Ref<SoundResource> OnShowDialogMenuSoundResource;
        [RTTI.Member(12, 0x50, "Sound")] public Ref<SoundResource> CancelSoundResource;
        [RTTI.Member(13, 0x58, "Sound")] public Ref<SoundResource> UnhandleSoundResource;
        [RTTI.Member(14, 0x60, "Sound")] public Ref<SoundResource> SignStrandContactSoundResource;
    }

    [RTTI.Serializable(0xF99017656DC9135E, GameType.DS)]
    public class DSUIDeviceBridgesIDMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x16D1282F8849640B, GameType.DS)]
    public class DSUIDeviceBridgesIDMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(5, 0x28)] public uint8 UserListLeastLength;
        [RTTI.Member(6, 0x29)] public uint8 StructureListLeastLength;
        [RTTI.Member(7, 0x2A)] public uint8 CommunicatedUserListLeastLength;
        [RTTI.Member(13, 0x30, "KeyHelpText")] public Ref<LocalizedTextResource> AcceptStrand;
        [RTTI.Member(14, 0x38, "KeyHelpText")] public Ref<LocalizedTextResource> CancelStrand;
        [RTTI.Member(16, 0x40, "UserListText")] public Ref<LocalizedTextResource> TabAll;
        [RTTI.Member(17, 0x48, "UserListText")] public Ref<LocalizedTextResource> TabStrand;
        [RTTI.Member(18, 0x50, "UserListText")] public Ref<LocalizedTextResource> TabHistory;
        [RTTI.Member(20, 0x58, "UserDetailsText")] public Ref<LocalizedTextResource> TabAchievement;
        [RTTI.Member(21, 0x60, "UserDetailsText")] public Ref<LocalizedTextResource> TabSocialOffline;
        [RTTI.Member(22, 0x68, "UserDetailsText")] public Ref<LocalizedTextResource> TabSocialOnline;
        [RTTI.Member(23, 0x70, "UserDetailsText")] public Ref<LocalizedTextResource> TabOrder;
        [RTTI.Member(24, 0x78, "UserDetailsText")] public Ref<LocalizedTextResource> TabStructure;
        [RTTI.Member(26, 0x80, "SocialOfflineText")] public Ref<LocalizedTextResource> CompletedOrder;
        [RTTI.Member(27, 0x88, "SocialOfflineText")] public Ref<LocalizedTextResource> DeliveryBaggage;
        [RTTI.Member(28, 0x90, "SocialOfflineText")] public Ref<LocalizedTextResource> DeliveryBaggageWeight;
        [RTTI.Member(29, 0x98, "SocialOfflineText")] public Ref<LocalizedTextResource> DeliveryLostBaggage;
        [RTTI.Member(30, 0xA0, "SocialOfflineText")] public Ref<LocalizedTextResource> DeliveryLostBaggageWeight;
        [RTTI.Member(32, 0xA8, "SocialOnlineText")] public Ref<LocalizedTextResource> SentLikeFormat;
        [RTTI.Member(33, 0xB0, "SocialOnlineText")] public Ref<LocalizedTextResource> ReceivedLikeFormat;
        [RTTI.Member(34, 0xB8, "SocialOnlineText")] public Ref<LocalizedTextResource> SortOrderNone;
        [RTTI.Member(35, 0xC0, "SocialOnlineText")] public Ref<LocalizedTextResource> SortOrderSentLike;
        [RTTI.Member(36, 0xC8, "SocialOnlineText")] public Ref<LocalizedTextResource> SocialOnlineText_SortOrderReceivedLike;
        [RTTI.Member(38, 0xD0, "StructureText")] public Ref<LocalizedTextResource> VersionFormat;
        [RTTI.Member(39, 0xD8, "StructureText")] public Ref<LocalizedTextResource> SortOrderDateTime;
        [RTTI.Member(40, 0xE0, "StructureText")] public Ref<LocalizedTextResource> StructureText_SortOrderReceivedLike;
        [RTTI.Member(42, 0xE8, "MenuIcon")] public Ref<UITexture> All;
        [RTTI.Member(43, 0xF0, "MenuIcon")] public Ref<UITexture> Strand;
        [RTTI.Member(44, 0xF8, "MenuIcon")] public Ref<UITexture> History;
        [RTTI.Member(45, 0x100, "MenuIcon")] public Ref<UITexture> LocalUser;
        [RTTI.Member(9, 0x108, "AchievementResource")] public Ref<DSUIDeliveryAchievementResource> DeliveryAchievementResource;
        [RTTI.Member(10, 0x110, "AchievementResource")] public Ref<DSUIMissionAchievementResource> MissionAchievementResource;
        [RTTI.Member(11, 0x118, "AchievementResource")] public Ref<DSUIConstructionAchievementResource> ConstructionAchievementResource;
    }

    [RTTI.Serializable(0x56C243A9F1E45273, GameType.DS)]
    public class DSUIDeviceBridgesIDMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xFEF13142F4F12FA3, GameType.DS)]
    public class DSUIDeviceBridgesIDMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "PanelElements")] public Ref<MenuElementResource> PanelElements_UserList;
        [RTTI.Member(8, 0x38, "PanelElements")] public Ref<MenuElementResource> Downloading;
        [RTTI.Member(9, 0x40, "PanelElements")] public Ref<MenuElementResource> UserDetails;
        [RTTI.Member(10, 0x48, "PanelElements")] public Ref<MenuElementResource> Achievement;
        [RTTI.Member(11, 0x50, "PanelElements")] public Ref<MenuElementResource> SocialOffline;
        [RTTI.Member(12, 0x58, "PanelElements")] public Ref<MenuElementResource> SocialOnline;
        [RTTI.Member(13, 0x60, "PanelElements")] public Ref<MenuElementResource> Order;
        [RTTI.Member(14, 0x68, "PanelElements")] public Ref<MenuElementResource> Structure;
        [RTTI.Member(16, 0x70, "ListElements")] public Ref<MenuElementResource> ListElements_UserList;
    }

    [RTTI.Serializable(0xB7B2D1228B81C44, GameType.DS)]
    public class DSUIDeviceConstructionMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xF003DD47C7DD53A0, GameType.DS)]
    public class DSUIDeviceConstructionMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "ConstructionIcon")] public Ref<UITexture> TabIcon_All;
        [RTTI.Member(7, 0x30, "ConstructionIcon")] public Ref<UITexture> TabIcon_Music;
        [RTTI.Member(9, 0x38, "ConstructionIcon")] public Ref<UITexture> TabIcon_Voice;
        [RTTI.Member(8, 0x40, "ConstructionIcon")] public Ref<UITexture> TabIcon_Holo;
        [RTTI.Member(10, 0x48, "ConstructionIcon")] public Ref<UITexture> TabIcon_Special;
        [RTTI.Member(12, 0x50, "ConstructionIconSP")] public Ref<UITexture> ItemIcon_Music;
        [RTTI.Member(14, 0x58, "ConstructionIconSP")] public Ref<UITexture> ItemIcon_Voice;
        [RTTI.Member(13, 0x60, "ConstructionIconSP")] public Ref<UITexture> ItemIcon_Holo;
        [RTTI.Member(15, 0x68, "ConstructionIconSP")] public Ref<UITexture> ItemIcon_Special;
        [RTTI.Member(17, 0x70, "ConstructionListTabLabel")] public Ref<LocalizedTextResource> TabLabel_All;
        [RTTI.Member(18, 0x78, "ConstructionListTabLabel")] public Ref<LocalizedTextResource> TabLabel_Music;
        [RTTI.Member(20, 0x80, "ConstructionListTabLabel")] public Ref<LocalizedTextResource> TabLabel_Voice;
        [RTTI.Member(19, 0x88, "ConstructionListTabLabel")] public Ref<LocalizedTextResource> TabLabel_Holo;
        [RTTI.Member(21, 0x90, "ConstructionListTabLabel")] public Ref<LocalizedTextResource> TabLabel_Special;
        [RTTI.Member(23, 0x98, "ConstructionListTabDescription")] public Ref<LocalizedTextResource> TabDescription_All;
        [RTTI.Member(24, 0xA0, "ConstructionListTabDescription")] public Ref<LocalizedTextResource> TabDescription_Music;
        [RTTI.Member(26, 0xA8, "ConstructionListTabDescription")] public Ref<LocalizedTextResource> TabDescription_Voice;
        [RTTI.Member(25, 0xB0, "ConstructionListTabDescription")] public Ref<LocalizedTextResource> TabDescription_Holo;
        [RTTI.Member(27, 0xB8, "ConstructionListTabDescription")] public Ref<LocalizedTextResource> TabDescription_Special;
        [RTTI.Member(29, 0xC0, "ConstructionListHeadline")] public Ref<LocalizedTextResource> Headline_Music;
        [RTTI.Member(31, 0xC8, "ConstructionListHeadline")] public Ref<LocalizedTextResource> Headline_Voice;
        [RTTI.Member(30, 0xD0, "ConstructionListHeadline")] public Ref<LocalizedTextResource> Headline_Holo;
        [RTTI.Member(32, 0xD8, "ConstructionListHeadline")] public Ref<LocalizedTextResource> Headline_Special;
    }

    [RTTI.Serializable(0x3C4803A2BCAC0753, GameType.DS)]
    public class DSUIDeviceConstructionMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x1B188F6E9A87DC27, GameType.DS)]
    public class DSUIDeviceConstructionMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Elements")] public Ref<MenuElementResource> ItemListElementResource;
        [RTTI.Member(8, 0x38, "Elements")] public Ref<MenuElementResource> CustomMenuPanelElementResource;
        [RTTI.Member(9, 0x40, "Elements")] public Ref<MenuElementResource> CustomMenuListElementResource;
        [RTTI.Member(10, 0x48, "Elements")] public Ref<MenuElementResource> DecidePanelElementResource;
        [RTTI.Member(11, 0x50, "Elements")] public Ref<MenuElementResource> DialogPanelElementResource;
        [RTTI.Member(12, 0x58, "Elements")] public Ref<MenuElementResource> ConfirmSelectViewElementResource;
        [RTTI.Member(13, 0x60, "Elements")] public Ref<MenuElementResource> TabBoxBodyPanelElementResource;
        [RTTI.Member(14, 0x68, "Elements")] public Ref<MenuElementResource> TabHeaderBodyPanelElementResource;
        [RTTI.Member(16, 0x70, "Animation")] public Ref<MenuAnimationResource> MenuListFocusReceiveddAnimation;
        [RTTI.Member(17, 0x78, "Animation")] public Ref<MenuAnimationResource> MenuListFocusLostAnimation;
    }

    [RTTI.Serializable(0xC895E7D652C32E2B, GameType.DS)]
    public class DSUIDeviceDeliveryMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xF4B311018A3FFB3F, GameType.DS)]
    public class DSUIDeviceDeliveryMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Mission;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Delivery;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Coffin;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Material;
        [RTTI.Member(10, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Recycle;
        [RTTI.Member(11, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Entrust;
        [RTTI.Member(12, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_ShareBox;
        [RTTI.Member(13, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_PrivateBox;
        [RTTI.Member(14, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Vehicle;
        [RTTI.Member(15, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Catalogue;
        [RTTI.Member(16, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_PrivateRoom;
        [RTTI.Member(17, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Shelter;
        [RTTI.Member(18, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_StructureLevelUp;
        [RTTI.Member(19, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_StructureRecover;
        [RTTI.Member(20, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_StructureCustom;
        [RTTI.Member(21, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_StructureDestroy;
        [RTTI.Member(22, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Mission_Sam;
        [RTTI.Member(23, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Mission_Simple;
        [RTTI.Member(24, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Mission_Auto;
        [RTTI.Member(25, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Delivery_Mission;
        [RTTI.Member(26, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Delivery_Supply;
        [RTTI.Member(27, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Delivery_Lost;
        [RTTI.Member(28, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Delivery_MemoryChip;
        [RTTI.Member(29, 0xE0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_ShareBox_In;
        [RTTI.Member(30, 0xE8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_ShareBox_Out;
        [RTTI.Member(31, 0x108, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitleConstructionComplete;
        [RTTI.Member(32, 0x110, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitleRoadRecovery;
        [RTTI.Member(33, 0x118, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Mission;
        [RTTI.Member(34, 0x120, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Delivery;
        [RTTI.Member(35, 0x128, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Coffin;
        [RTTI.Member(36, 0x130, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Material;
        [RTTI.Member(37, 0x138, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Recycle;
        [RTTI.Member(38, 0x140, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Entrust;
        [RTTI.Member(39, 0x148, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_ShareBox;
        [RTTI.Member(40, 0x150, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_PrivateBox;
        [RTTI.Member(41, 0x158, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Vehicle;
        [RTTI.Member(42, 0x160, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Catalogue;
        [RTTI.Member(43, 0x168, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_PrivateRoom;
        [RTTI.Member(44, 0x170, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_Shelter;
        [RTTI.Member(45, 0x178, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_StructureLevelUp;
        [RTTI.Member(46, 0x180, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_StructureRecover;
        [RTTI.Member(47, 0x188, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_StructureCustom;
        [RTTI.Member(48, 0x190, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Top_StructureDestroy;
        [RTTI.Member(49, 0x198, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Mission_Sam;
        [RTTI.Member(50, 0x1A0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Mission_Simple;
        [RTTI.Member(51, 0x1A8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Mission_Auto;
        [RTTI.Member(52, 0x1B0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Delivery_Mission;
        [RTTI.Member(53, 0x1B8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Delivery_Supply;
        [RTTI.Member(54, 0x1C0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Delivery_Lost;
        [RTTI.Member(55, 0x1C8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_Delivery_MemoryChip;
        [RTTI.Member(56, 0x1D0, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_ShareBox_In;
        [RTTI.Member(57, 0x1D8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoText_ShareBox_Out;
        [RTTI.Member(58, 0x1F8, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoTextConstructionComplete;
        [RTTI.Member(59, 0x200, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemInfoTextRoadRecovery;
        [RTTI.Member(60, 0x208, "LocalizedText")] public Ref<LocalizedTextResource> TabText_DeviceFunction;
        [RTTI.Member(61, 0x210, "LocalizedText")] public Ref<LocalizedTextResource> TabText_StructureFunction;
        [RTTI.Member(62, 0x218, "LocalizedText")] public Ref<UITexture> TabTexture_DeviceFunction;
        [RTTI.Member(63, 0x220, "LocalizedText")] public Ref<UITexture> TabTexture_StructureFunction;
        [RTTI.Member(75, 0x250, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Tutorial;
        [RTTI.Member(76, 0x258, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Offline;
        [RTTI.Member(77, 0x260, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Unstable;
        [RTTI.Member(78, 0x268, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_QpidUCA;
        [RTTI.Member(79, 0x270, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_QpidUCA_SafeHouse;
        [RTTI.Member(80, 0x278, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_QpidBridges;
        [RTTI.Member(81, 0x280, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_MissionSam_NoOrder;
        [RTTI.Member(82, 0x288, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_MissionSimple_NoOrder;
        [RTTI.Member(83, 0x290, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_MissionSimple_M560;
        [RTTI.Member(84, 0x298, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_MissionAuto_NoOrder;
        [RTTI.Member(85, 0x2A0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_MissionAuto_NoQpid;
        [RTTI.Member(86, 0x2A8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_MissionAuto_NoRobot;
        [RTTI.Member(87, 0x2B0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_DeliverySupply_NoSupply;
        [RTTI.Member(88, 0x2B8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_DeliverySupply_NoBaggage;
        [RTTI.Member(89, 0x2C0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_DeliveryLost_NoBaggage;
        [RTTI.Member(90, 0x2C8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_DeliveryMemoryChip_NoChip;
        [RTTI.Member(91, 0x2D0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Recycle_NoBaggage;
        [RTTI.Member(92, 0x2D8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Recycle_NoCrystal;
        [RTTI.Member(93, 0x2E0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Recycle_NoBaggageAndCrystal;
        [RTTI.Member(94, 0x2E8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Recycle_TutorialRecycle;
        [RTTI.Member(95, 0x2F0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Entrust_NoBaggage;
        [RTTI.Member(96, 0x2F8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_ShareBoxIn_NoBaggage;
        [RTTI.Member(97, 0x300, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_ShareBoxOut_NoBaggage;
        [RTTI.Member(98, 0x308, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_PrivateBox_NoBaggage;
        [RTTI.Member(99, 0x310, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Vehicle_Full;
        [RTTI.Member(100, 0x318, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Vehicle_CorpseBag;
        [RTTI.Member(101, 0x320, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Vehicle_TwoVehicles;
        [RTTI.Member(102, 0x328, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Vehicle_MuleVehicle;
        [RTTI.Member(103, 0x330, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Vehicle_NoVehicle;
        [RTTI.Member(104, 0x338, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_PrivateRoom_Emergency;
        [RTTI.Member(105, 0x340, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_PrivateRoom_TaboolBaggage;
        [RTTI.Member(106, 0x348, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_PrivateRoom_FullVehicle;
        [RTTI.Member(107, 0x350, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_PrivateRoom_CorpseBag;
        [RTTI.Member(108, 0x358, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_PrivateRoom_TwoVehicles;
        [RTTI.Member(109, 0x360, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_PrivateRoom_MuleVehicle;
        [RTTI.Member(110, 0x368, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_Shelter_Emergency;
        [RTTI.Member(111, 0x370, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_StructureLevelUp_Max;
        [RTTI.Member(112, 0x378, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_StructureLevelUp_MaxRoad;
        [RTTI.Member(113, 0x380, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_StructureLevelUp_NoBagagge;
        [RTTI.Member(114, 0x388, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_StructureLevelUp_Intruder;
        [RTTI.Member(115, 0x390, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_StructureRecover_Max;
        [RTTI.Member(116, 0x398, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_StructureRecover_NoBaggage;
        [RTTI.Member(117, 0x3A0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_StructureDestroy_ByGD;
        [RTTI.Member(118, 0x3A8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_ChildrenDeactive_Mission;
        [RTTI.Member(119, 0x3B0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_ChildrenDeactive_Delivery;
        [RTTI.Member(120, 0x3B8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_ChildrenDeactive_Common;
        [RTTI.Member(121, 0x3C0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Deactive_UnknownReason;
        [RTTI.Member(122, 0x3C8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_PrivateRoom;
        [RTTI.Member(123, 0x3D0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_PrivateRoom_Timer;
        [RTTI.Member(124, 0x3D8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_Shelter;
        [RTTI.Member(125, 0x3E0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_Shelter_Timer;
        [RTTI.Member(126, 0x3E8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_AutobotResult;
        [RTTI.Member(127, 0x3F0, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_DestroyOffline;
        [RTTI.Member(128, 0x3F8, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_DestroyOfflineHasMaterial;
        [RTTI.Member(129, 0x400, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_DestroyOnline;
        [RTTI.Member(130, 0x408, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_DestroyOnlineHasMaterial;
        [RTTI.Member(131, 0x410, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_Memorychip;
        [RTTI.Member(132, 0x418, "ConfirmDialogTexts")] public Ref<LocalizedTextResource> Warning_PrivateBox_Capacity;
        [RTTI.Member(64, 0x420, "LocalizedText")] public Ref<LocalizedTextResource> DialogOKText;
        [RTTI.Member(65, 0x428, "LocalizedText")] public Ref<LocalizedTextResource> DialogCancelText;
        [RTTI.Member(66, 0x430, "LocalizedText")] public Ref<LocalizedTextResource> NecessaryMaterialsForCompleteText;
        [RTTI.Member(67, 0x438, "LocalizedText")] public Ref<LocalizedTextResource> NecessaryMaterialsForLevelUpText;
        [RTTI.Member(71, 0x440, "LocalizedText")] public Ref<LocalizedTextResource> StructureOwnerTitleText;
        [RTTI.Member(72, 0x448, "LocalizedText")] public Ref<LocalizedTextResource> BridgesTitleText;
        [RTTI.Member(73, 0x450, "LocalizedText")] public Ref<LocalizedTextResource> PreppersTitleText;
        [RTTI.Member(68, 0x458, "LocalizedText")] public Ref<LocalizedTextResource> CanOrderCountText;
        [RTTI.Member(69, 0x460, "LocalizedText")] public Ref<LocalizedTextResource> ProgressOrderCountText;
        [RTTI.Member(70, 0x468, "LocalizedText")] public Ref<LocalizedTextResource> WaitingResurrectOrderCount;
        [RTTI.Member(134, 0x470, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> RoadRebuilder;
        [RTTI.Member(135, 0x478, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> PostVer1;
        [RTTI.Member(136, 0x480, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> PostVer2;
        [RTTI.Member(137, 0x488, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> PostVer3;
        [RTTI.Member(138, 0x490, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> WatchTowerVer1;
        [RTTI.Member(139, 0x498, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> WatchTowerVer2;
        [RTTI.Member(140, 0x4A0, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> WatchTowerVer3;
        [RTTI.Member(141, 0x4A8, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> BridgeVer1;
        [RTTI.Member(142, 0x4B0, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> BridgeVer2;
        [RTTI.Member(143, 0x4B8, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> BridgeVer3;
        [RTTI.Member(144, 0x4C0, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ChargerVer1;
        [RTTI.Member(145, 0x4C8, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ChargerVer2;
        [RTTI.Member(146, 0x4D0, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ChargerVer3;
        [RTTI.Member(147, 0x4D8, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ShelterVer1;
        [RTTI.Member(148, 0x4E0, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ShelterVer2;
        [RTTI.Member(149, 0x4E8, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ShelterVer3;
        [RTTI.Member(150, 0x4F0, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> SafeHouseVer1;
        [RTTI.Member(151, 0x4F8, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> SafeHouseVer2;
        [RTTI.Member(152, 0x500, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> SafeHouseVer3;
        [RTTI.Member(153, 0x508, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> OnlineSafeHouseVer1;
        [RTTI.Member(154, 0x510, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> OnlineSafeHouseVer2;
        [RTTI.Member(155, 0x518, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> OnlineSafeHouseVer3;
        [RTTI.Member(156, 0x520, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ZipLineVer1;
        [RTTI.Member(157, 0x528, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ZipLineVer2;
        [RTTI.Member(158, 0x530, "ConstructionFunctionHelpLocalizedText")] public Ref<LocalizedTextResource> ZipLineVer3;
    }

    [RTTI.Serializable(0x3E0032680CEA90A8, GameType.DS)]
    public class DSUIDeviceDeliveryMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x230540F645BD26CD, GameType.DS)]
    public class DSUIDeviceDeliveryMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> TabboxElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> FirstMenuListElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> SecondMenuListElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> ConfirmDialogPnlElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> ConfirmDialogButtonListElementResource;
        [RTTI.Member(13, 0x58, "Sound")] public Ref<SoundResource> GoNextListSound;
        [RTTI.Member(14, 0x60, "Sound")] public Ref<SoundResource> GoNextScreenSound;
    }

    [RTTI.Serializable(0x4D5ECE5A3E8727A7, GameType.DS)]
    public class DSUIDeviceFastTravelMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xB82C409649B24BD7, GameType.DS)]
    public class DSUIDeviceFastTravelMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "AreaName")] public Ref<LocalizedTextResource> Area00;
        [RTTI.Member(7, 0x30, "AreaName")] public Ref<LocalizedTextResource> Area01;
        [RTTI.Member(8, 0x38, "AreaName")] public Ref<LocalizedTextResource> Area02;
        [RTTI.Member(9, 0x40, "AreaName")] public Ref<LocalizedTextResource> Area03;
        [RTTI.Member(10, 0x48, "AreaName")] public Ref<LocalizedTextResource> Area04;
    }

    [RTTI.Serializable(0xB936B8322AE72BF5, GameType.DS)]
    public class DSUIDeviceFastTravelMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x22E977CDD3A0635B, GameType.DS)]
    public class DSUIDeviceFastTravelMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> PointListElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> DialogPanelElementResource;
    }

    [RTTI.Serializable(0xC1B2EFB12045DD, GameType.DS)]
    public class DSUIDeviceFinalResultMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x40C4CF73041CE4B1, GameType.DS)]
    public class DSUIDeviceFinalResultMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "AchievementResource")] public Ref<DSUIDeliveryAchievementResource> DeliveryAchievementResource;
        [RTTI.Member(7, 0x30, "AchievementResource")] public Ref<DSUIMissionAchievementResource> MissionAchievementResource;
        [RTTI.Member(8, 0x38, "AchievementResource")] public Ref<DSUIConstructionAchievementResource> ConstructionAchievementResource;
        [RTTI.Member(10, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> SkipKeyhelpText;
        [RTTI.Member(11, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> NextKeyhelpText;
    }

    [RTTI.Serializable(0x716CDBFDAAC8B4E7, GameType.DS)]
    public class DSUIDeviceFinalResultMenuFunction : DSUIMissionResultMenuFunctionBase
    {
    }

    [RTTI.Serializable(0x3432BDF2D136E672, GameType.DS)]
    public class DSUIDeviceFinalResultMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "PanelElements")] public Ref<MenuElementResource> Root;
        [RTTI.Member(8, 0x38, "PanelElements")] public Ref<MenuElementResource> FirstPage;
        [RTTI.Member(9, 0x40, "PanelElements")] public Ref<MenuElementResource> FirstPageLeft;
        [RTTI.Member(10, 0x48, "PanelElements")] public Ref<MenuElementResource> FirstPageRight;
        [RTTI.Member(11, 0x50, "PanelElements")] public Ref<MenuElementResource> SecondPage;
        [RTTI.Member(12, 0x58, "PanelElements")] public Ref<MenuElementResource> SecondLeftPage;
        [RTTI.Member(13, 0x60, "PanelElements")] public Ref<MenuElementResource> SecondRightPage;
        [RTTI.Member(14, 0x68, "PanelElements")] public Ref<MenuElementResource> StarGraph;
        [RTTI.Member(15, 0x70, "PanelElements")] public Ref<MenuElementResource> PorterRank;
        [RTTI.Member(17, 0x78, "TrophyResources")] public Ref<TrophyResource> FinalResult;
    }

    [RTTI.Serializable(0xBC7806FA35E45ACF, GameType.DS)]
    public class DSUIDeviceHandOverMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x1880B41A3077B2B8, GameType.DS)]
    public class DSUIDeviceHandOverMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public DSUIHandOverMenuTitleTextBundle TitleTextBundle_OpenAsOrder;
        [RTTI.Member(7, 0x38, "LocalizedText")] public DSUIHandOverMenuTitleTextBundle TitleTextBundle_OpenAsSupply;
        [RTTI.Member(8, 0x48, "LocalizedText")] public DSUIHandOverMenuTitleTextBundle TitleTextBundle_OpenAsLostItem;
        [RTTI.Member(9, 0x58, "LocalizedText")] public DSUIHandOverMenuTitleTextBundle TitleTextBundle_OpenAsConsign;
        [RTTI.Member(10, 0x68, "LocalizedText")] public DSUIHandOverMenuTitleTextBundle TitleTextBundle_OpenAsCoffin;
        [RTTI.Member(11, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> HeadlineText_COMPLETE;
        [RTTI.Member(12, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> HeadlineText_PARTIAL_DELIVERY;
        [RTTI.Member(13, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> HeadlineText_RETURN;
        [RTTI.Member(14, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> HeadlineText_CONSIGN_AND_PROTECT;
        [RTTI.Member(15, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> HeadlineText_CONSIGN;
        [RTTI.Member(16, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> HeadlineText_CONTINUE;
        [RTTI.Member(17, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> TargetLostItemReturnFormatText;
        [RTTI.Member(18, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> TargetLostItemConsignFormatText;
        [RTTI.Member(19, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> TargetLostItemProtectionFormatText;
        [RTTI.Member(20, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> TargetLostItemCremationFormatText;
        [RTTI.Member(21, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> TargetPrivateDonationText;
        [RTTI.Member(22, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> TargetCoffinText;
        [RTTI.Member(23, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> TargetGiftDescriptionText;
        [RTTI.Member(24, 0xE0, "LocalizedText")] public Ref<LocalizedTextResource> TargetSupplyDescriptionText;
        [RTTI.Member(25, 0xE8, "LocalizedText")] public Ref<LocalizedTextResource> TargetLostDescriptionText;
        [RTTI.Member(26, 0xF0, "LocalizedText")] public Ref<LocalizedTextResource> TargetCoffinDescriptionText;
        [RTTI.Member(27, 0xF8, "LocalizedText")] public Ref<LocalizedTextResource> BaggageStatusText_CAN_DELIVERY;
        [RTTI.Member(28, 0x100, "LocalizedText")] public Ref<LocalizedTextResource> BaggageStatusText_DELIVERED;
        [RTTI.Member(29, 0x108, "LocalizedText")] public Ref<LocalizedTextResource> BaggageStatusText_NOT_HAVE;
        [RTTI.Member(30, 0x110, "LocalizedText")] public Ref<LocalizedTextResource> BaggageStatusText_LOST;
        [RTTI.Member(31, 0x118, "LocalizedText")] public Ref<LocalizedTextResource> BaggageStatusText_BROKEN;
        [RTTI.Member(32, 0x120, "LocalizedText")] public Ref<LocalizedTextResource> BaggageStatusText_CAN_DELIVER_COFFIN;
        [RTTI.Member(33, 0x128, "LocalizedText")] public Ref<LocalizedTextResource> BaggageStatusText_CONSIGN;
        [RTTI.Member(34, 0x130, "LocalizedText")] public Ref<LocalizedTextResource> BaggageListHeaderText_DELIVER;
        [RTTI.Member(35, 0x138, "LocalizedText")] public Ref<LocalizedTextResource> BaggageListHeaderText_UNPAID;
        [RTTI.Member(36, 0x140, "LocalizedText")] public Ref<LocalizedTextResource> CoffinListHeaderText;
        [RTTI.Member(37, 0x148, "LocalizedText")] public Ref<LocalizedTextResource> CremationListHeaderText;
        [RTTI.Member(38, 0x150, "LocalizedText")] public Ref<LocalizedTextResource> StepTitleTexts_DELIVERY_CONFIRM;
        [RTTI.Member(39, 0x158, "LocalizedText")] public Ref<LocalizedTextResource> StepTitleTexts_PARTIALLY_CONFIRM;
        [RTTI.Member(40, 0x160, "LocalizedText")] public Ref<LocalizedTextResource> StepTitleTexts_CONTINUE_CONFIRM;
        [RTTI.Member(41, 0x168, "LocalizedText")] public Ref<LocalizedTextResource> StepTitleTexts_RETURN_CONFIRM;
        [RTTI.Member(42, 0x170, "LocalizedText")] public Ref<LocalizedTextResource> StepTitleTexts_CONSIGN_CONFIRM;
        [RTTI.Member(43, 0x178, "LocalizedText")] public Ref<LocalizedTextResource> StepTitleTexts_DELIVER_COFFIN_CONFIRM;
        [RTTI.Member(44, 0x180, "LocalizedText")] public Ref<LocalizedTextResource> StepCountFormatText;
        [RTTI.Member(45, 0x188, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateSubStepFormatText;
        [RTTI.Member(46, 0x190, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateCountFormatText;
        [RTTI.Member(47, 0x198, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateCountMaxFormatText;
        [RTTI.Member(48, 0x1A0, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateWeightMaxFormatText;
        [RTTI.Member(49, 0x1A8, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateStrayCorpseCountFormatText;
        [RTTI.Member(50, 0x1B0, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateLikeFormatText;
        [RTTI.Member(51, 0x1B8, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateLikeDeliverFormatText;
        [RTTI.Member(52, 0x1C0, "LocalizedText")] public Ref<LocalizedTextResource> DeliverStateLikeReturnFormatText;
        [RTTI.Member(53, 0x1C8, "LocalizedText")] public Ref<LocalizedTextResource> StatusDeliverableText;
        [RTTI.Member(54, 0x1D0, "LocalizedText")] public Ref<LocalizedTextResource> StatusNonDeliverableText;
        [RTTI.Member(55, 0x1D8, "LocalizedText")] public Ref<LocalizedTextResource> StatusPartiallyDeliverableText;
        [RTTI.Member(56, 0x1E0, "LocalizedText")] public Ref<LocalizedTextResource> StatusNonPartiallyDeliverableText;
        [RTTI.Member(57, 0x1E8, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogText_NonDeliverable;
        [RTTI.Member(58, 0x1F0, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogText_NonPartiallyDeliverable;
        [RTTI.Member(59, 0x1F8, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogText_ReturnDeliveryHelp;
        [RTTI.Member(60, 0x200, "LocalizedText")] public DSUIHandOverButtonItem ButtonItem_DELIVERY;
        [RTTI.Member(61, 0x258, "LocalizedText")] public DSUIHandOverButtonItem ButtonItem_RETURN;
        [RTTI.Member(62, 0x2B0, "LocalizedText")] public DSUIHandOverButtonItem ButtonItem_CONSIGN;
        [RTTI.Member(63, 0x308, "LocalizedText")] public DSUIHandOverButtonItem ButtonItem_DO_NOTHING_BY_CLOSE;
        [RTTI.Member(64, 0x360, "LocalizedText")] public DSUIHandOverButtonItem ButtonItem_NEXT;
        [RTTI.Member(65, 0x3B8, "LocalizedText")] public DSUIHandOverButtonItem ButtonItem_DELIVER_COFFIN;
        [RTTI.Member(66, 0x410, "LocalizedText")] public DSUIHandOverButtonItem ButtonItem_DELIVER_HALFLIFE;
        [RTTI.Member(68, 0x468, "CommandItems")] public DSUIHandOverCommandItem CommandItem_DELIVERY_COMPLETE;
        [RTTI.Member(69, 0x498, "CommandItems")] public DSUIHandOverCommandItem CommandItem_PARTIAL_DELIVERY;
        [RTTI.Member(70, 0x4C8, "CommandItems")] public DSUIHandOverCommandItem CommandItem_SELECT_BAGGAGE;
        [RTTI.Member(71, 0x4F8, "CommandItems")] public DSUIHandOverCommandItem CommandItem_DELIVERY_CONSIGN;
        [RTTI.Member(72, 0x528, "CommandItems")] public DSUIHandOverCommandItem CommandItem_DELIVERY_CONSIGN_FOR_PERSONAL;
        [RTTI.Member(73, 0x558, "CommandItems")] public DSUIHandOverCommandItem CommandItem_DELIVERY_CONTINUE;
        [RTTI.Member(74, 0x588, "CommandItems")] public DSUIHandOverCommandItem CommandItem_DELIVERY_CONTINUE_FOR_PERSONAL;
    }

    [RTTI.Serializable(0x88F2E4F7D85A49D1, GameType.DS)]
    public class DSUIDeviceHandOverMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x484F5FFD6A87B632, GameType.DS)]
    public class DSUIDeviceHandOverMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> HandOverMenuRootPanelResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> HandOverPanelResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> HandOverListResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> HandOverListItemResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> DecideButtonListResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> BaggageScrollPanelResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> CommandPnlResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> CommandListResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> CommonDialogPnlResource;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> CommonDialogListResource;
        [RTTI.Member(18, 0x80, "Animation")] public Ref<MenuAnimationResource> HandOverListItemFocusReceivedAnimation;
        [RTTI.Member(19, 0x88, "Animation")] public Ref<MenuAnimationResource> HandOverListItemFocusLostAnimation;
        [RTTI.Member(21, 0x90, "Sound")] public Ref<SoundResource> ConfirmDeliverySoundResource;
    }

    [RTTI.Serializable(0xAC1C7AECFED36546, GameType.DS)]
    public class DSUIDeviceHelpMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x922215C77C92715E, GameType.DS)]
    public class DSUIDeviceMailMenuDataSource : DSStreamingDataSource
    {
    }

    [RTTI.Serializable(0x9F51EBE0CA47964D, GameType.DS)]
    public class DSUIDeviceMailMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "MailListTabIcon")] public Ref<UITexture> TabIcon_All;
        [RTTI.Member(7, 0x30, "MailListTabIcon")] public Ref<UITexture> TabIcon_Important;
        [RTTI.Member(8, 0x38, "MailListTabIcon")] public Ref<UITexture> TabIcon_BySender;
        [RTTI.Member(10, 0x40, "MailListTabLabel")] public Ref<LocalizedTextResource> TabLabel_All;
        [RTTI.Member(11, 0x48, "MailListTabLabel")] public Ref<LocalizedTextResource> TabLabel_Important;
        [RTTI.Member(12, 0x50, "MailListTabLabel")] public Ref<LocalizedTextResource> TabLabel_BySender;
    }

    [RTTI.Serializable(0xA197F1E12D5E2CE0, GameType.DS)]
    public class DSUIDeviceMailMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x43BAD61F4D1640DA, GameType.DS)]
    public class DSUIDeviceMailMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> MenuPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> MailViewDialogElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuListResource> MailListElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuTabboxResource> MailTabboxElementResource;
    }

    [RTTI.Serializable(0xB41188A56A7810F, GameType.DS)]
    public class DSUIDeviceMapDemoCloseSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDA0C3292CFEC5C4B, GameType.DS)]
    public class DSUIDeviceMapDemoCloseSequenceEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x7BC1A3E69750EA8E, GameType.DS)]
    public class DSUIDeviceMapDemoDeliveryPointSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8994E0D2DE1C176E, GameType.DS)]
    public class DSUIDeviceMapDemoDeliveryPointSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSUIDeviceMapDemoDeliveryPointEvent EventType;
        [RTTI.Member(9, 0x38, "Logic")] public Array<UUIDRef<DSDeliveryPointInfoResource>> DeliveryPoints;
    }

    [RTTI.Serializable(0xE572412B42FFA844, GameType.DS)]
    public class DSUIDeviceMapDemoEventSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB87C352BA83A2F5, GameType.DS)]
    public class DSUIDeviceMapDemoEventSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSUIDeviceMapDemoEvent EventType;
        [RTTI.Member(9, 0x40, "Logic")] public Vec3 WorldPosition;
        [RTTI.Member(10, 0x50, "Logic")] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(11, 0x58, "Logic")] public Ref<UITexture> UITexture;
    }

    [RTTI.Serializable(0x46CA4D5638D5F0B4, GameType.DS)]
    public class DSUIDeviceMapDemoFreeLineSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xEF0503947341A98F, GameType.DS)]
    public class DSUIDeviceMapDemoFreeLineSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public int LineId;
        [RTTI.Member(9, 0x38, "Logic")] public Array<Vec3> WorldPositions;
    }

    [RTTI.Serializable(0x926F5C1A50A083FB, GameType.DS)]
    public class DSUIDeviceMapDemoOpenSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE117F3FEF0947A5D, GameType.DS)]
    public class DSUIDeviceMapDemoOpenSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSArea Area;
        [RTTI.Member(9, 0x40, "Logic")] public Vec3 CenterWorldPosition;
        [RTTI.Member(10, 0x50, "Logic")] public float ZoomScale;
    }

    [RTTI.Serializable(0x257408E9D7D2D3A1, GameType.DS)]
    public class DSUIDeviceMapMenuAreaDivideResource : Resource
    {
        [RTTI.Member(2, 0x20)] public int TextureCountX;
        [RTTI.Member(3, 0x24)] public int TextureCountY;
        [RTTI.Member(4, 0x28)] public int DisplayCountX;
        [RTTI.Member(5, 0x2C)] public int DisplayCountY;
        [RTTI.Member(6, 0x30)] public float TextureScale;
        [RTTI.Member(7, 0x34)] public float EnableZoomScale;
        [RTTI.Member(8, 0x38)] public bool IsNoBilinear;
        [RTTI.Member(9, 0x40)] public Array<StreamingRef<UITexture>> UITextures;
    }

    [RTTI.Serializable(0xBBFEB701C0C2B9C6, GameType.DS)]
    public class DSUIDeviceMapMenuAreaResource : Resource
    {
        [RTTI.Member(3, 0x20, "AreaInfo")] public EDSArea Area;
        [RTTI.Member(4, 0x22, "AreaInfo")] public bool IsUnlockTarBeltCrater;
        [RTTI.Member(5, 0x28, "AreaInfo")] public Ref<LocalizedTextResource> AreaNameText;
        [RTTI.Member(6, 0x30, "AreaInfo")] public Ref<DSUIDeviceMapMenuMuleAreaResource> MuleArea;
        [RTTI.Member(7, 0x38, "AreaInfo")] public float AreaSizeMeterX;
        [RTTI.Member(8, 0x3C, "AreaInfo")] public float AreaSizeMeterY;
        [RTTI.Member(9, 0x40, "AreaInfo")] public float DefaultTextureScale;
        [RTTI.Member(10, 0x44, "AreaInfo")] public float NoDataTextureScale;
        [RTTI.Member(11, 0x48, "AreaInfo")] public float ZoomMax;
        [RTTI.Member(12, 0x4C, "AreaInfo")] public float ZoomMiddle;
        [RTTI.Member(13, 0x50, "AreaInfo")] public float ZoomMin;
        [RTTI.Member(14, 0x54, "AreaInfo")] public float ZoomSpeed;
        [RTTI.Member(15, 0x58, "AreaInfo")] public float IgnoreEdgeFadeHeight;
        [RTTI.Member(16, 0x60, "AreaInfo")] public Ref<UITexture> MapBaseResidentUITexture;
        [RTTI.Member(17, 0x68, "AreaInfo")] public StreamingRef<UITexture> MapBaseDefaultUITexture;
        [RTTI.Member(18, 0x70, "AreaInfo")] public Ref<UITexture> MapHeightResidentUITexture;
        [RTTI.Member(19, 0x78, "AreaInfo")] public StreamingRef<UITexture> MapHeightDefaultUITexture;
        [RTTI.Member(20, 0x80, "AreaInfo")] public Ref<DSUIDeviceMapMenuAreaDivideResource> MapBaseLowDivideResource;
        [RTTI.Member(21, 0x88, "AreaInfo")] public Ref<DSUIDeviceMapMenuAreaDivideResource> MapBaseHighDivideResource;
        [RTTI.Member(22, 0x90, "AreaInfo")] public Ref<DSUIDeviceMapMenuAreaDivideResource> MapHeightLowDivideResource;
        [RTTI.Member(23, 0x98, "AreaInfo")] public Ref<DSUIDeviceMapMenuAreaDivideResource> MapHeightHighDivideResource;
        [RTTI.Member(24, 0xA0, "AreaInfo")] public float DivideLine1Alpha0ZoomScales;
        [RTTI.Member(26, 0xA4, "AreaInfo")] public float DivideLine2Alpha0ZoomScales;
        [RTTI.Member(28, 0xA8, "AreaInfo")] public float DivideLine3Alpha0ZoomScales;
        [RTTI.Member(25, 0xAC, "AreaInfo")] public float DivideLine1Alpha1ZoomScales;
        [RTTI.Member(27, 0xB0, "AreaInfo")] public float DivideLine2Alpha1ZoomScales;
        [RTTI.Member(29, 0xB4, "AreaInfo")] public float DivideLine3Alpha1ZoomScales;
    }

    [RTTI.Serializable(0xB9981384A1909F58, GameType.DS)]
    public class DSUIDeviceMapMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x401DC104B41BD453, GameType.DS)]
    public class DSUIDeviceMapMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> AddUserMarker;
        [RTTI.Member(7, 0x30, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> AddUserMarkerLine;
        [RTTI.Member(8, 0x38, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> RemoveUserMarker;
        [RTTI.Member(9, 0x40, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> RemoveAllUserMarker;
        [RTTI.Member(10, 0x48, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> GotoPlayerBaggage;
        [RTTI.Member(11, 0x50, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> GotoStructureBaggage;
        [RTTI.Member(12, 0x58, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> GotoSignboardBridgesID;
        [RTTI.Member(13, 0x60, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> IconCardLegendLocalizedText_StructureRequest;
        [RTTI.Member(14, 0x68, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> StructureRequestCancel;
        [RTTI.Member(15, 0x70, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> StructureDestroy;
        [RTTI.Member(16, 0x78, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> StructureDestroyOnline;
        [RTTI.Member(17, 0x80, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> GotoStructureBridgesID;
        [RTTI.Member(18, 0x88, "IconCardLegendLocalizedText")] public Ref<LocalizedTextResource> IconCardLegendLocalizedText_OpenIconFilterDialog;
        [RTTI.Member(20, 0x90, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> ZoomInZoomOut;
        [RTTI.Member(24, 0x98, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> LeftScroll;
        [RTTI.Member(25, 0xA0, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> LeftShiftScroll;
        [RTTI.Member(26, 0xA8, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> RightScroll;
        [RTTI.Member(21, 0xB0, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> ResetCursor;
        [RTTI.Member(22, 0xB8, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> FilterDefQpid;
        [RTTI.Member(23, 0xC0, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> FilterDefQpidWeather;
        [RTTI.Member(27, 0xC8, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> GyroRotaion;
        [RTTI.Member(28, 0xD0, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> RoadMap;
        [RTTI.Member(29, 0xD8, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> RoadMap_Wish;
        [RTTI.Member(30, 0xE0, "KeyhelpLegendLocalizedText")] public Ref<LocalizedTextResource> KeyhelpLegendLocalizedText_OpenIconFilterDialog;
        [RTTI.Member(32, 0xF0, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> UserReceivedLike;
        [RTTI.Member(33, 0xF8, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> StructureReceivedLike;
        [RTTI.Member(34, 0x100, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> VehicleReceivedLike;
        [RTTI.Member(35, 0x108, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> MissionTime;
        [RTTI.Member(36, 0x110, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> MissionTimeLimit;
        [RTTI.Member(37, 0x118, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> MissionTimeTarget;
        [RTTI.Member(38, 0x120, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> MissionBaggage;
        [RTTI.Member(39, 0x128, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> MissionDamage;
        [RTTI.Member(40, 0x130, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> MissionDistance;
        [RTTI.Member(41, 0x138, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> TerminalCanOrder;
        [RTTI.Member(42, 0x140, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> TerminalProgressOrder;
        [RTTI.Member(43, 0x148, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> TerminalWaitingResurrectOrder;
        [RTTI.Member(44, 0x150, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> TerminalCompleteSSSSOrder;
        [RTTI.Member(45, 0x158, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> TerminalCompleteSSSOrder;
        [RTTI.Member(46, 0x160, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> TerminalCompleteSSOrder;
        [RTTI.Member(47, 0x168, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> StructureLv;
        [RTTI.Member(48, 0x170, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> IconCardInfoLocalizedText_StructureRequest;
        [RTTI.Member(49, 0x178, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> StructureQpid;
        [RTTI.Member(50, 0x180, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> DamageRate;
        [RTTI.Member(51, 0x188, "IconCardInfoLocalizedText")] public Ref<LocalizedTextResource> BatteryRate;
        [RTTI.Member(53, 0x198, "DialogLocalizedText")] public Ref<LocalizedTextResource> DestroyStructure;
        [RTTI.Member(54, 0x1A0, "DialogLocalizedText")] public Ref<LocalizedTextResource> DestroyStructureOnline;
        [RTTI.Member(55, 0x1A8, "DialogLocalizedText")] public Ref<LocalizedTextResource> CanNotDestroyStructure;
        [RTTI.Member(56, 0x1B0, "DialogLocalizedText")] public Ref<LocalizedTextResource> InitializeIconFilterConfig;
    }

    [RTTI.Serializable(0xBB75C2BE722FF6F8, GameType.DS)]
    public class DSUIDeviceMapMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xF4F0D35D5C268FAF, GameType.DS)]
    public class DSUIDeviceMapMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "PanelElements")] public Ref<MenuElementResource> Dialog;
        [RTTI.Member(13, 0x38, "ListElements")] public Ref<MenuElementResource> DialogSelect;
        [RTTI.Member(8, 0x40, "PanelElements")] public Ref<MenuElementResource> IconFilterDialog;
        [RTTI.Member(14, 0x48, "ListElements")] public Ref<MenuElementResource> ListElements_IconFilterDialogAll;
        [RTTI.Member(9, 0x50, "PanelElements")] public Ref<MenuElementResource> IconFilterDialogAllListCursor;
        [RTTI.Member(10, 0x58, "PanelElements")] public Ref<MenuElementResource> IconFilterDialogAllListCursorOutline;
        [RTTI.Member(16, 0x60, "GridPanelElements")] public Ref<MenuElementResource> GridPanelElements_IconFilterDialogAll;
        [RTTI.Member(11, 0x68, "PanelElements")] public Ref<MenuElementResource> IconFilterDialogAllGridPanelBg;
        [RTTI.Member(18, 0x70, "MapMenuElement")] public Ref<MenuElementResource> MapMenu;
        [RTTI.Member(20, 0x78, "Sound")] public Ref<SoundResource> IconFilterCheckbox;
    }

    [RTTI.Serializable(0xC3A20BCD85AEFA5B, GameType.DS)]
    public class DSUIDeviceMapMenuIconFilterCategoryResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> CategoryName;
        [RTTI.Member(3, 0x28)] public Ref<LocalizedTextResource> CategoryDescription;
        [RTTI.Member(4, 0x30)] public Array<DSUIDeviceMapMenuIconFilterItemResource> FilterItemResources;
    }

    [RTTI.Serializable(0x890A49A5B9C6F32C, GameType.DS)]
    public class DSUIDeviceMapMenuIconFilterItemResource
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> FilterName;
        [RTTI.Member(1, 0x8)] public Ref<DSUIMarkerIconResource> FilterIconResource;
        [RTTI.Member(2, 0x10)] public EDSUIDeviceMapMenuIconFilterItem FilterItem;
        [RTTI.Member(3, 0x18)] public Ref<BooleanFact> IsUnlockFact;
    }

    [RTTI.Serializable(0xB3738B5D60530DC9, GameType.DS)]
    public class DSUIDeviceMapMenuIconFilterResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSUIDeviceMapMenuIconFilterCategoryResource> All;
        [RTTI.Member(3, 0x28)] public Ref<DSUIDeviceMapMenuIconFilterCategoryResource> Online;
        [RTTI.Member(4, 0x30)] public Ref<DSUIDeviceMapMenuIconFilterCategoryResource> Mission;
        [RTTI.Member(5, 0x38)] public Ref<DSUIDeviceMapMenuIconFilterCategoryResource> Structure;
        [RTTI.Member(6, 0x40)] public Ref<DSUIDeviceMapMenuIconFilterCategoryResource> Vehicle;
        [RTTI.Member(7, 0x48)] public Ref<DSUIDeviceMapMenuIconFilterCategoryResource> Collectible;
        [RTTI.Member(8, 0x50)] public Ref<DSUIDeviceMapMenuIconFilterCategoryResource> Baggage;
    }

    [RTTI.Serializable(0x32CB4CFB0B1E840, GameType.DS)]
    public class DSUIDeviceMapMenuIconResource : Resource
    {
        [RTTI.Member(3, 0x28, "Icons")] public Ref<DSUIMarkerIconResource> PlayerIcon;
        [RTTI.Member(4, 0x30, "Icons")] public Ref<DSUIMarkerIconResource> PlayerTrackIcon;
        [RTTI.Member(5, 0x38, "Icons")] public Ref<DSUIMarkerIconResource> GoalIcon;
        [RTTI.Member(6, 0x40, "Icons")] public Ref<DSUIMarkerIconResource> GoalCautionIcon;
        [RTTI.Member(7, 0x48, "Icons")] public Ref<DSUIMarkerIconResource> GoalNoTagIcon;
        [RTTI.Member(8, 0x50, "Icons")] public Ref<DSUIMarkerIconResource> GoalNoTagEnemyIcon;
        [RTTI.Member(9, 0x58, "Icons")] public Ref<DSUIMarkerIconResource> GoalLostIcon;
        [RTTI.Member(10, 0x60, "Icons")] public Ref<DSUIMarkerIconResource> GoalDisableIcon;
        [RTTI.Member(11, 0x68, "Icons")] public Ref<DSUIMarkerIconResource> GoalBaggageIcon;
        [RTTI.Member(12, 0x70, "Icons")] public Ref<DSUIMarkerIconResource> GoalBaggageEnemyIcon;
        [RTTI.Member(13, 0x78, "Icons")] public Ref<DSUIMarkerIconResource> GoalBaggageBodyBagIcon;
        [RTTI.Member(14, 0x80, "Icons")] public Ref<DSUIMarkerIconResource> GoalBaggageNoTagIcon;
        [RTTI.Member(15, 0x88, "Icons")] public Ref<DSUIMarkerIconResource> GoalBaggageNoTagEnemyIcon;
        [RTTI.Member(16, 0x90, "Icons")] public Ref<DSUIMarkerIconResource> GoalBaggageNoTagBodyBagIcon;
        [RTTI.Member(17, 0x98, "Icons")] public Ref<DSUIMarkerIconResource> GoalTerminalIcon;
        [RTTI.Member(18, 0xA0, "Icons")] public Ref<DSUIMarkerIconResource> GoalPreppersIcon;
        [RTTI.Member(19, 0xA8, "Icons")] public Ref<DSUIMarkerIconResource> GoalCrematoryIcon;
        [RTTI.Member(20, 0xB0, "Icons")] public Ref<DSUIMarkerIconResource> GoalRelayStationIcon;
        [RTTI.Member(21, 0xB8, "Icons")] public Ref<DSUIMarkerIconResource> GoalWindFarmIcon;
        [RTTI.Member(22, 0xC0, "Icons")] public Ref<DSUIMarkerIconResource> GoalWeatherStationIcon;
        [RTTI.Member(23, 0xC8, "Icons")] public Ref<DSUIMarkerIconResource> GoalMamaFacilityIcon;
        [RTTI.Member(24, 0xD0, "Icons")] public Ref<DSUIMarkerIconResource> GoalHeartmanFacilityIcon;
        [RTTI.Member(25, 0xD8, "Icons")] public Ref<DSUIMarkerIconResource> GoalCrossFacilityIcon;
        [RTTI.Member(26, 0xE0, "Icons")] public Ref<DSUIMarkerIconResource> GoalRainFarmIcon;
        [RTTI.Member(27, 0xE8, "Icons")] public Ref<DSUIMarkerIconResource> GoalArea04TerminalIcon;
        [RTTI.Member(28, 0xF0, "Icons")] public Ref<DSUIMarkerIconResource> GoalPostIcon;
        [RTTI.Member(29, 0xF8, "Icons")] public Ref<DSUIMarkerIconResource> GoalPostOnlineIcon;
        [RTTI.Member(30, 0x100, "Icons")] public Ref<DSUIMarkerIconResource> GoalPostStageIcon;
        [RTTI.Member(31, 0x108, "Icons")] public Ref<DSUIMarkerIconResource> GoalSafetyHouseIcon;
        [RTTI.Member(32, 0x110, "Icons")] public Ref<DSUIMarkerIconResource> GoalSafetyHouseOnlineIcon;
        [RTTI.Member(33, 0x118, "Icons")] public Ref<DSUIMarkerIconResource> GoalSafetyHouseStageIcon;
        [RTTI.Member(34, 0x120, "Icons")] public Ref<DSUIMarkerIconResource> GoalPrivateRoomIcon;
        [RTTI.Member(35, 0x128, "Icons")] public Ref<DSUIMarkerIconResource> GoalPrivateRoomNgIcon;
        [RTTI.Member(36, 0x130, "Icons")] public Ref<DSUIMarkerIconResource> GoalPrivateRoomFtIcon;
        [RTTI.Member(37, 0x138, "Icons")] public Ref<DSUIMarkerIconResource> GoalPrivateRoomFtNgIcon;
        [RTTI.Member(38, 0x140, "Icons")] public Ref<DSUIMarkerIconResource> GoalPrivateRoomNgFtNgIcon;
        [RTTI.Member(39, 0x148, "Icons")] public Ref<DSUIMarkerIconResource> GoalHasReturnedIcon;
        [RTTI.Member(40, 0x150, "Icons")] public Ref<DSUIMarkerIconResource> GoalHasPrivateBoxBaggageIcon;
        [RTTI.Member(41, 0x158, "Icons")] public Ref<DSUIMarkerIconResource> GoalHasShareBoxBaggageIcon;
        [RTTI.Member(42, 0x160, "Icons")] public Ref<DSUIMarkerIconResource> GoalCooperationRequestIcon;
        [RTTI.Member(43, 0x168, "Icons")] public Ref<DSUIMarkerIconResource> GoalBrokenIcon;
        [RTTI.Member(44, 0x170, "Icons")] public Ref<DSUIMarkerIconResource> GoalHalfBrokenIcon;
        [RTTI.Member(45, 0x178, "Icons")] public Ref<DSUIMarkerIconResource> GoalBrokenScalableIcon;
        [RTTI.Member(46, 0x180, "Icons")] public Ref<DSUIMarkerIconResource> GoalHalfBrokenScalableIcon;
        [RTTI.Member(47, 0x188, "Icons")] public Ref<DSUIMarkerIconResource> AboutIcon;
        [RTTI.Member(48, 0x190, "Icons")] public Ref<DSUIMarkerIconResource> AboutGoalIcon;
        [RTTI.Member(49, 0x198, "Icons")] public Ref<DSUIMarkerIconResource> AboutGoalSymbolIcon;
        [RTTI.Member(50, 0x1A0, "Icons")] public Ref<DSUIMarkerIconResource> MissionCategoryMainIcon;
        [RTTI.Member(51, 0x1A8, "Icons")] public Ref<DSUIMarkerIconResource> MissionCategorySubIcon;
        [RTTI.Member(52, 0x1B0, "Icons")] public Ref<DSUIMarkerIconResource> MissionCategorySimpleIcon;
        [RTTI.Member(53, 0x1B8, "Icons")] public Ref<DSUIMarkerIconResource> MissionCategoryLostIcon;
        [RTTI.Member(54, 0x1C0, "Icons")] public Ref<DSUIMarkerIconResource> BaggageDeliveryIcon;
        [RTTI.Member(55, 0x1C8, "Icons")] public Ref<DSUIMarkerIconResource> BaggageDeliveryNoTagIcon;
        [RTTI.Member(56, 0x1D0, "Icons")] public Ref<DSUIMarkerIconResource> BaggagePersonalIcon;
        [RTTI.Member(57, 0x1D8, "Icons")] public Ref<DSUIMarkerIconResource> BaggagePersonalNoTagIcon;
        [RTTI.Member(58, 0x1E0, "Icons")] public Ref<DSUIMarkerIconResource> BaggageTrashIcon;
        [RTTI.Member(59, 0x1E8, "Icons")] public Ref<DSUIMarkerIconResource> BaggageTrashNoTagIcon;
        [RTTI.Member(60, 0x1F0, "Icons")] public Ref<DSUIMarkerIconResource> BaggageBodyBagIcon;
        [RTTI.Member(61, 0x1F8, "Icons")] public Ref<DSUIMarkerIconResource> BaggageBodyBagNoTagIcon;
        [RTTI.Member(62, 0x200, "Icons")] public Ref<DSUIMarkerIconResource> BaggageDeliveryEnemyIcon;
        [RTTI.Member(63, 0x208, "Icons")] public Ref<DSUIMarkerIconResource> BaggageDeliveryNoTagEnemyIcon;
        [RTTI.Member(64, 0x210, "Icons")] public Ref<DSUIMarkerIconResource> BaggagePersonalEnemyIcon;
        [RTTI.Member(65, 0x218, "Icons")] public Ref<DSUIMarkerIconResource> BaggagePersonalNoTagEnemyIcon;
        [RTTI.Member(66, 0x220, "Icons")] public Ref<DSUIMarkerIconResource> BaggageTrashEnemyIcon;
        [RTTI.Member(67, 0x228, "Icons")] public Ref<DSUIMarkerIconResource> BaggageTrashNoTagEnemyIcon;
        [RTTI.Member(68, 0x230, "Icons")] public Ref<DSUIMarkerIconResource> BaggageDeliveryOnlineIcon;
        [RTTI.Member(69, 0x238, "Icons")] public Ref<DSUIMarkerIconResource> BaggageDeliveryNoTagOnlineIcon;
        [RTTI.Member(70, 0x240, "Icons")] public Ref<DSUIMarkerIconResource> BaggagePersonalOnlineIcon;
        [RTTI.Member(71, 0x248, "Icons")] public Ref<DSUIMarkerIconResource> BaggagePersonalNoTagOnlineIcon;
        [RTTI.Member(72, 0x250, "Icons")] public Ref<DSUIMarkerIconResource> BaggageTrashOnlineIcon;
        [RTTI.Member(73, 0x258, "Icons")] public Ref<DSUIMarkerIconResource> BaggageTrashOnlineNoTagIcon;
        [RTTI.Member(74, 0x260, "Icons")] public Ref<DSUIMarkerIconResource> BaggageEmptyIcon;
        [RTTI.Member(75, 0x268, "Icons")] public Ref<DSUIMarkerIconResource> BaggageEmptyNoTagIcon;
        [RTTI.Member(76, 0x270, "Icons")] public Ref<DSUIMarkerIconResource> BaggageBrokenIcon;
        [RTTI.Member(77, 0x278, "Icons")] public Ref<DSUIMarkerIconResource> BaggageBrokenNoTagIcon;
        [RTTI.Member(78, 0x280, "Icons")] public Ref<DSUIMarkerIconResource> TerminalIcon;
        [RTTI.Member(79, 0x288, "Icons")] public Ref<DSUIMarkerIconResource> PreppersIcon;
        [RTTI.Member(80, 0x290, "Icons")] public Ref<DSUIMarkerIconResource> CrematoryIcon;
        [RTTI.Member(81, 0x298, "Icons")] public Ref<DSUIMarkerIconResource> RelayStationIcon;
        [RTTI.Member(82, 0x2A0, "Icons")] public Ref<DSUIMarkerIconResource> WindFarmIcon;
        [RTTI.Member(83, 0x2A8, "Icons")] public Ref<DSUIMarkerIconResource> WeatherStationIcon;
        [RTTI.Member(84, 0x2B0, "Icons")] public Ref<DSUIMarkerIconResource> MamaFacilityIcon;
        [RTTI.Member(85, 0x2B8, "Icons")] public Ref<DSUIMarkerIconResource> HeartmanFacilityIcon;
        [RTTI.Member(86, 0x2C0, "Icons")] public Ref<DSUIMarkerIconResource> CrossFacilityIcon;
        [RTTI.Member(87, 0x2C8, "Icons")] public Ref<DSUIMarkerIconResource> RainFarmIcon;
        [RTTI.Member(88, 0x2D0, "Icons")] public Ref<DSUIMarkerIconResource> Area04TerminalIcon;
        [RTTI.Member(89, 0x2D8, "Icons")] public Ref<DSUIMarkerIconResource> PrivateRoomIcon;
        [RTTI.Member(90, 0x2E0, "Icons")] public Ref<DSUIMarkerIconResource> PrivateRoomNgIcon;
        [RTTI.Member(91, 0x2E8, "Icons")] public Ref<DSUIMarkerIconResource> PrivateRoomFtIcon;
        [RTTI.Member(92, 0x2F0, "Icons")] public Ref<DSUIMarkerIconResource> PrivateRoomFtNgIcon;
        [RTTI.Member(93, 0x2F8, "Icons")] public Ref<DSUIMarkerIconResource> PrivateRoomNgFtNgIcon;
        [RTTI.Member(94, 0x300, "Icons")] public Ref<DSUIMarkerIconResource> HasReturnedIcon;
        [RTTI.Member(95, 0x308, "Icons")] public Ref<DSUIMarkerIconResource> HasPrivateBoxBaggageIcon;
        [RTTI.Member(96, 0x310, "Icons")] public Ref<DSUIMarkerIconResource> HasShareBoxBaggageIcon;
        [RTTI.Member(97, 0x318, "Icons")] public Ref<DSUIMarkerIconResource> CooperationRequestIcon;
        [RTTI.Member(98, 0x320, "Icons")] public Ref<DSUIMarkerIconResource> StructureBuildingIcon;
        [RTTI.Member(99, 0x328, "Icons")] public Ref<DSUIMarkerIconResource> StructureBrokenIcon;
        [RTTI.Member(100, 0x330, "Icons")] public Ref<DSUIMarkerIconResource> StructureHalfBrokenIcon;
        [RTTI.Member(101, 0x338, "Icons")] public Ref<DSUIMarkerIconResource> StructureBrokenScalableIcon;
        [RTTI.Member(102, 0x340, "Icons")] public Ref<DSUIMarkerIconResource> StructureHalfBrokenScalableIcon;
        [RTTI.Member(103, 0x348, "Icons")] public Ref<DSUIMarkerIconResource> RoadRebuilderIcon;
        [RTTI.Member(104, 0x350, "Icons")] public Ref<DSUIMarkerIconResource> DemoFreeTerminalIcon;
        [RTTI.Member(105, 0x358, "Icons")] public Ref<DSUIMarkerIconResource> PostIcon;
        [RTTI.Member(106, 0x360, "Icons")] public Ref<DSUIMarkerIconResource> SafetyHouseIcon;
        [RTTI.Member(107, 0x368, "Icons")] public Ref<DSUIMarkerIconResource> ZiplineIcon;
        [RTTI.Member(108, 0x370, "Icons")] public Ref<DSUIMarkerIconResource> _0;
        [RTTI.Member(109, 0x378, "Icons")] public Ref<DSUIMarkerIconResource> ChargerIcon;
        [RTTI.Member(110, 0x380, "Icons")] public Ref<DSUIMarkerIconResource> WatchTowerIcon;
        [RTTI.Member(111, 0x388, "Icons")] public Ref<DSUIMarkerIconResource> BridgeIcon;
        [RTTI.Member(112, 0x390, "Icons")] public Ref<DSUIMarkerIconResource> LadderIcon;
        [RTTI.Member(113, 0x398, "Icons")] public Ref<DSUIMarkerIconResource> RainShelterIcon;
        [RTTI.Member(114, 0x3A0, "Icons")] public Ref<DSUIMarkerIconResource> RopeIcon;
        [RTTI.Member(115, 0x3A8, "Icons")] public Ref<DSUIMarkerIconResource> CamouflageIcon;
        [RTTI.Member(116, 0x3B0, "Icons")] public Ref<DSUIMarkerIconResource> MulePostIcon;
        [RTTI.Member(117, 0x3B8, "Icons")] public Ref<DSUIMarkerIconResource> PostOnlineIcon;
        [RTTI.Member(118, 0x3C0, "Icons")] public Ref<DSUIMarkerIconResource> SafetyHouseOnlineIcon;
        [RTTI.Member(119, 0x3C8, "Icons")] public Ref<DSUIMarkerIconResource> ZiplineOnlineIcon;
        [RTTI.Member(120, 0x3D0, "Icons")] public Ref<DSUIMarkerIconResource> _1;
        [RTTI.Member(121, 0x3D8, "Icons")] public Ref<DSUIMarkerIconResource> ChargerOnlineIcon;
        [RTTI.Member(122, 0x3E0, "Icons")] public Ref<DSUIMarkerIconResource> WatchTowerOnlineIcon;
        [RTTI.Member(123, 0x3E8, "Icons")] public Ref<DSUIMarkerIconResource> BridgeOnlineIcon;
        [RTTI.Member(124, 0x3F0, "Icons")] public Ref<DSUIMarkerIconResource> LadderOnlineIcon;
        [RTTI.Member(125, 0x3F8, "Icons")] public Ref<DSUIMarkerIconResource> RainShelterOnlineIcon;
        [RTTI.Member(126, 0x400, "Icons")] public Ref<DSUIMarkerIconResource> RopeOnlineIcon;
        [RTTI.Member(127, 0x408, "Icons")] public Ref<DSUIMarkerIconResource> CamouflageOnlineIcon;
        [RTTI.Member(128, 0x410, "Icons")] public Ref<DSUIMarkerIconResource> PostStageIcon;
        [RTTI.Member(129, 0x418, "Icons")] public Ref<DSUIMarkerIconResource> SafetyHouseStageIcon;
        [RTTI.Member(130, 0x420, "Icons")] public Ref<DSUIMarkerIconResource> ZiplineStageIcon;
        [RTTI.Member(131, 0x428, "Icons")] public Ref<DSUIMarkerIconResource> _2;
        [RTTI.Member(132, 0x430, "Icons")] public Ref<DSUIMarkerIconResource> ChargerStageIcon;
        [RTTI.Member(133, 0x438, "Icons")] public Ref<DSUIMarkerIconResource> WatchTowerStageIcon;
        [RTTI.Member(134, 0x440, "Icons")] public Ref<DSUIMarkerIconResource> BridgeStageIcon;
        [RTTI.Member(135, 0x448, "Icons")] public Ref<DSUIMarkerIconResource> LadderStageIcon;
        [RTTI.Member(136, 0x450, "Icons")] public Ref<DSUIMarkerIconResource> RainShelterStageIcon;
        [RTTI.Member(137, 0x458, "Icons")] public Ref<DSUIMarkerIconResource> RopeStageIcon;
        [RTTI.Member(138, 0x460, "Icons")] public Ref<DSUIMarkerIconResource> MuleDeadIcon;
        [RTTI.Member(139, 0x468, "Icons")] public Ref<DSUIMarkerIconResource> MuleSleepingIcon;
        [RTTI.Member(140, 0x470, "Icons")] public Ref<DSUIMarkerIconResource> MuleFaintIcon;
        [RTTI.Member(141, 0x478, "Icons")] public Ref<DSUIMarkerIconResource> MuleRestrainedIcon;
        [RTTI.Member(142, 0x480, "Icons")] public Ref<DSUIMarkerIconResource> FriendlyMuleIcon;
        [RTTI.Member(143, 0x488, "Icons")] public Ref<DSUIMarkerIconResource> MuleLastKnownIcon;
        [RTTI.Member(144, 0x490, "Icons")] public Ref<DSUIMarkerIconResource> FloatingCartIcon;
        [RTTI.Member(145, 0x498, "Icons")] public Ref<DSUIMarkerIconResource> VehicleBikeIcon;
        [RTTI.Member(146, 0x4A0, "Icons")] public Ref<DSUIMarkerIconResource> VehicleTruckIcon;
        [RTTI.Member(147, 0x4A8, "Icons")] public Ref<DSUIMarkerIconResource> VehicleBikeOnlineIcon;
        [RTTI.Member(148, 0x4B0, "Icons")] public Ref<DSUIMarkerIconResource> VehicleTruckOnlineIcon;
        [RTTI.Member(149, 0x4B8, "Icons")] public Ref<DSUIMarkerIconResource> VehicleBikeEnemyIcon;
        [RTTI.Member(150, 0x4C0, "Icons")] public Ref<DSUIMarkerIconResource> VehicleTruckEnemyIcon;
        [RTTI.Member(151, 0x4C8, "Icons")] public Ref<DSUIMarkerIconResource> CrystalIcon;
        [RTTI.Member(152, 0x4D0, "Icons")] public Ref<DSUIMarkerIconResource> ShoeSoleGrassIcon;
        [RTTI.Member(153, 0x4D8, "Icons")] public Ref<DSUIMarkerIconResource> CryptobiosisIcon;
        [RTTI.Member(154, 0x4E0, "Icons")] public Ref<DSUIMarkerIconResource> CollectorsItemIcon;
        [RTTI.Member(155, 0x4E8, "Icons")] public Ref<DSUIMarkerIconResource> UserIcon;
        [RTTI.Member(156, 0x508, "Icons")] public Ref<DSUIMarkerIconResource> OutsideIcon;
        [RTTI.Member(157, 0x510, "Icons")] public Ref<DSUIMarkerIconResource> SignboardIcon;
        [RTTI.Member(158, 0x518, "Icons")] public Ref<DSUIMarkerIconResource> NPCFragileIcon;
        [RTTI.Member(159, 0x520, "Icons")] public Ref<DSUIMarkerIconResource> NPCTowerIcon;
        [RTTI.Member(160, 0x528, "Icons")] public Ref<DSUIMarkerIconResource> _4;
        [RTTI.Member(161, 0x530, "Icons")] public Ref<DSUIMarkerIconResource> OnsenIcon;
        [RTTI.Member(162, 0x538, "Icons")] public Ref<DSUIMarkerIconResource> GazerIcon;
        [RTTI.Member(163, 0x540, "Icons")] public Ref<DSUIMarkerIconResource> Area01SymbolIcon;
        [RTTI.Member(164, 0x548, "Icons")] public Ref<DSUIMarkerIconResource> Area02SymbolIcon;
        [RTTI.Member(165, 0x550, "Icons")] public Ref<DSUIMarkerIconResource> Area04SymbolIcon;
        [RTTI.Member(167, 0x558, "Parameters")] public float ArrivalUserMarkerAlpha;
        [RTTI.Member(168, 0x55C, "Parameters")] public float AreaUseSymbolIconPixel;
    }

    [RTTI.Serializable(0xB7E35DCE7BB5621C, GameType.DS)]
    public class DSUIDeviceMapMenuInternalDrawerMenuResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Drawer")] public EDSUIMapInternalDrawerType DrawerType;
    }

    [RTTI.Serializable(0xFEC2CE2864D2B822, GameType.DS)]
    public class DSUIDeviceMapMenuInternalDrawerMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0xCDB9289512E0DDDC, GameType.DS)]
    public class DSUIDeviceMapMenuInternalDrawerMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0xE7FC4A5B11EA5DF0, GameType.DS)]
    public class DSUIDeviceMapMenuInternalIconMenuResource : MenuVisualResource
    {
    }

    [RTTI.Serializable(0x77886BAAC3C542A2, GameType.DS)]
    public class DSUIDeviceMapMenuInternalIconMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0xE61EC5D759C861C5, GameType.DS)]
    public class DSUIDeviceMapMenuInternalIconMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0xD6281AE58D24FE31, GameType.DS)]
    public class DSUIDeviceMapMenuMuleAreaCPResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<BooleanFact> VisibleFact;
        [RTTI.Member(3, 0x28)] public Array<Ref<DSUIDeviceMapMenuMuleAreaPointResource>> Points;
    }

    [RTTI.Serializable(0x1648C1ACBEBE8EFC, GameType.DS)]
    public class DSUIDeviceMapMenuMuleAreaPointResource : Resource
    {
        [RTTI.Member(3, 0x0, "General")] public WorldTransform Orientation;
    }

    [RTTI.Serializable(0xFACC035DF44D5C0F, GameType.DS)]
    public class DSUIDeviceMapMenuMuleAreaResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSUIDeviceMapMenuMuleAreaCPResource>> CPs;
    }

    [RTTI.Serializable(0x27495F4803C4D643, GameType.DS)]
    public class DSUIDeviceMapMenuQpidItemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Polygon")] public RGBAColor FillColor;
        [RTTI.Member(4, 0x24, "Polygon")] public RGBAColor VertexColor;
        [RTTI.Member(5, 0x28, "Polygon")] public RGBAColor LineColor;
        [RTTI.Member(6, 0x2C, "Polygon")] public float LineWidth;
        [RTTI.Member(8, 0x30, "Animation")] public Ref<MenuAnimationResource> IntroAnimation;
        [RTTI.Member(9, 0x38, "Animation")] public Ref<MenuAnimationResource> IdleAnimation;
    }

    [RTTI.Serializable(0x270D97F3FA6770D7, GameType.DS)]
    public class DSUIDeviceMapMenuQpidItemSetResource : Resource
    {
        [RTTI.Member(3, 0x20, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> UndiscoveredArea;
        [RTTI.Member(4, 0x28, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> UnconnectedArea;
        [RTTI.Member(5, 0x30, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> JoinedBridgesArea;
        [RTTI.Member(6, 0x38, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> JoinedUCAArea;
        [RTTI.Member(7, 0x40, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> BlankArea;
        [RTTI.Member(8, 0x48, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> DemoModeArea;
        [RTTI.Member(9, 0x50, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> New_JoinedBridgesArea;
        [RTTI.Member(10, 0x58, "Items")] public Ref<DSUIDeviceMapMenuQpidItemResource> New_JoinedUCAArea;
    }

    [RTTI.Serializable(0xF8787D2D63D71EC6, GameType.DS)]
    public class DSUIDeviceMapMenuQpidResource : Resource
    {
        [RTTI.Member(3, 0x20, "ItemSets")] public Ref<DSUIDeviceMapMenuQpidItemSetResource> Normal;
        [RTTI.Member(4, 0x28, "ItemSets")] public Ref<DSUIDeviceMapMenuQpidItemSetResource> NormalShadow;
        [RTTI.Member(5, 0x30, "ItemSets")] public Ref<DSUIDeviceMapMenuQpidItemSetResource> ReturnRoute;
        [RTTI.Member(6, 0x38, "ItemSets")] public Ref<DSUIDeviceMapMenuQpidItemSetResource> ReturnRouteShadow;
        [RTTI.Member(7, 0x40, "ItemSets")] public Ref<DSUIDeviceMapMenuQpidItemSetResource> LastStranding;
        [RTTI.Member(8, 0x48, "ItemSets")] public Ref<DSUIDeviceMapMenuQpidItemSetResource> LastStrandingShadow;
    }

    [RTTI.Serializable(0xDF41EC39EE3723EA, GameType.DS)]
    public class DSUIDeviceMapMenuResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Base")] public DSUIDeviceMapMenuResourceBase Base;
        [RTTI.Member(49, 0x1D0, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(51, 0x1E0, "LinkedElements")] public Ref<MenuTextResource> IconPositionTextElement;
        [RTTI.Member(52, 0x1E8, "LinkedElements")] public Ref<MenuPanelResource> IconTutorialHighlightPanelElement;
        [RTTI.Member(54, 0x1F0, "Stamps")] public DSUIDeviceMapMenuResourceStamp Stamp;
        [RTTI.Member(56, 0x210, "CommonGuideElements")] public DSUIDeviceMapMenuResourceCommonGuide CommonGuide;
        [RTTI.Member(58, 0x240, "CommonIconElements")] public DSUIDeviceMapMenuResourceIconElements CommonIcon;
        [RTTI.Member(60, 0x280, "GoalIconElements")] public DSUIDeviceMapMenuResourceIconElements GoalIcon;
        [RTTI.Member(62, 0x2C0, "PlayerIconElements")] public DSUIDeviceMapMenuResourceIconElements PlayerIcon;
        [RTTI.Member(64, 0x300, "OutsideIconElements")] public DSUIDeviceMapMenuResourceIconElements OutsideIcon;
        [RTTI.Member(66, 0x340, "UserIconElements")] public DSUIDeviceMapMenuResourceIconElements UserIcon;
        [RTTI.Member(68, 0x380, "QpidAreaElements")] public DSUIDeviceMapMenuResourceQpidArea QpidArea;
        [RTTI.Member(70, 0x3B0, "QpidGuideElements")] public DSUIDeviceMapMenuResourceQpidGuide QpidGuide;
        [RTTI.Member(72, 0x3E8, "WeatherNews2Elements")] public DSUIDeviceMapMenuResourceWeatherNews2 WeatherNews2;
        [RTTI.Member(74, 0x458, "MissionArrowElements")] public DSUIDeviceMapMenuResourceMissionArrow MissionArrow;
        [RTTI.Member(76, 0x480, "MissionStartAccentElements")] public DSUIDeviceMapMenuResourceMissionStartAccent MissionStartAccent;
        [RTTI.Member(78, 0x490, "MissionGoalAccentElements")] public DSUIDeviceMapMenuResourceMissionGoalAccent MissionGoalAccent;
        [RTTI.Member(80, 0x4A0, "UserIconLineElements")] public DSUIDeviceMapMenuResourceUserIconLine UserIconLine;
        [RTTI.Member(82, 0x4B8, "IconCardElements")] public DSUIDeviceMapMenuResourceIconCard IconCard;
        [RTTI.Member(84, 0x530, "KeyhelpElements")] public DSUIDeviceMapMenuResourceKeyhelp Keyhelp;
        [RTTI.Member(86, 0x538, "ReticleElements")] public DSUIDeviceMapMenuResourceReticle Reticle;
        [RTTI.Member(88, 0x560, "CraterElements")] public DSUIDeviceMapMenuResourceCrater Crater;
        [RTTI.Member(90, 0x590, "FlashEffectElements")] public DSUIDeviceMapMenuResourceFlashEffect FlashEffect;
        [RTTI.Member(92, 0x5A0, "GameOverAreaElements")] public DSUIDeviceMapMenuResourceGameOverArea GameOverArea;
        [RTTI.Member(94, 0x5D8, "DemoElements")] public DSUIDeviceMapMenuResourceDemo Demo;
        [RTTI.Member(96, 0x650, "CatcherAreaElements")] public DSUIDeviceMapMenuResourceCatcherArea CatcherArea;
        [RTTI.Member(98, 0x6B0, "GoalAreaElements")] public DSUIDeviceMapMenuResourceGoalArea GoalArea;
        [RTTI.Member(100, 0x6D0, "MuleAreaElements")] public DSUIDeviceMapMenuResourceMuleArea MuleArea;
        [RTTI.Member(102, 0x700, "DialogElements")] public DSUIDeviceMapMenuResourceDialog Dialog;
        [RTTI.Member(104, 0x710, "IconFilterDialog")] public DSUIDeviceMapMenuResourceIconFilterDialog IconFilterDialog;
        [RTTI.Member(106, 0x718, "ZiplineLineElements")] public DSUIDeviceMapMenuResourceZiplineLine ZiplineLine;
        [RTTI.Member(108, 0x750, "LifeLogElements")] public DSUIDeviceMapMenuResourceLifeLog LifeLog;
        [RTTI.Member(110, 0x768, "LinkedAnimations")] public DSUIDeviceMapMenuResourceAnimations Animations;
        [RTTI.Member(112, 0x7C8, "IconIdleAnimations")] public DSUIDeviceMapMenuResourceIconIdleAnimations IconIdleAnimations;
        [RTTI.Member(113, 0x820, "IconIdleAnimations")] public DSUIDeviceMapMenuResourceIconIdleAnimations ShadowIconIdleAnimations;
        [RTTI.Member(115, 0x878, "LinkedTextures")] public DSUIDeviceMapMenuResourceTextures Textures;
        [RTTI.Member(117, 0x898, "LinkedCurves")] public DSUIDeviceMapMenuResourceCurves Curves;
        [RTTI.Member(119, 0x8D0, "RoadColor")] public DSUIDeviceMapMenuResourceRoadColor RoadColor;
        [RTTI.Member(121, 0x908, "WeatherNews2Parameters")] public DSUIDeviceMapMenuResourceWeatherNews2Param WeatherNews2Param;
        [RTTI.Member(123, 0x978, "GoalAreaParameters")] public DSUIDeviceMapMenuResourceGoalAreaParam GoalAreaParam;
        [RTTI.Member(125, 0x988, "LifeLogParameters")] public DSUIDeviceMapMenuResourceLifeLogParam LifeLogParam;
        [RTTI.Member(127, 0x9A0, "DivideLineParameters")] public DSUIDeviceMapMenuResourceDivideLineParam DivideLineParam;
        [RTTI.Member(129, 0xA00, "LayoutArea")] public DSUIDeviceMapMenuResourceLayoutArea LayoutArea;
        [RTTI.Member(131, 0xA90, "ExclusiveAnimation")] public DSUIDeviceMapMenuResourceExclusiveAnimation ExclusiveAnimation;
        [RTTI.Member(133, 0xAD0, "Parameters")] public DSUIDeviceMapMenuResourceParameters Parameters;
        [RTTI.Member(135, 0xB78, "Sound")] public DSUIDeviceMapMenuResourceSound Sound;
    }

    [RTTI.Serializable(0x8258E7B4629090BB, GameType.DS)]
    public class DSUIDeviceMapMenuResourceAnimations
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuAnimationResource> HideToActiveAnimation;
        [RTTI.Member(1, 0x8)] public Ref<MenuAnimationResource> ActiveToHideAnimation;
        [RTTI.Member(2, 0x10)] public Ref<MenuAnimationResource> HideToDeactiveAnimation;
        [RTTI.Member(3, 0x18)] public Ref<MenuAnimationResource> DeactiveToHideAnimation;
        [RTTI.Member(4, 0x20)] public Ref<MenuAnimationResource> ActiveToDeactiveAnimation;
        [RTTI.Member(5, 0x28)] public Ref<MenuAnimationResource> DeactiveToActiveAnimation;
        [RTTI.Member(6, 0x30)] public Ref<MenuAnimationResource> ReticleFocusOnAnimation;
        [RTTI.Member(7, 0x38)] public Ref<MenuAnimationResource> ReticleFocusOffAnimation;
        [RTTI.Member(8, 0x40)] public Ref<MenuAnimationResource> ReticleShadowFocusOnAnimation;
        [RTTI.Member(9, 0x48)] public Ref<MenuAnimationResource> ReticleShadowFocusOffAnimation;
        [RTTI.Member(10, 0x50)] public Ref<MenuAnimationResource> MissionArrowRefreshAnimation;
        [RTTI.Member(11, 0x58)] public Ref<MenuAnimationResource> DemoArea04TerminalAnimation;
    }

    [RTTI.Serializable(0x5A3CFDF9C4784CFC, GameType.DS)]
    public class DSUIDeviceMapMenuResourceBase
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<DSUIDeviceMapMenuAreaResource>> AreaResources;
        [RTTI.Member(1, 0x10)] public Ref<DSUIDeviceMapMenuIconResource> IconResource;
        [RTTI.Member(2, 0x18)] public Ref<DSUIDeviceMapMenuQpidResource> QpidResource;
        [RTTI.Member(3, 0x20)] public Ref<ShaderResource> ParallaxShaderResource;
        [RTTI.Member(4, 0x28)] public Ref<ShaderResource> ParallaxIconShaderResource;
        [RTTI.Member(5, 0x30)] public Ref<UITexture> MapFogUITexture;
        [RTTI.Member(6, 0x38)] public Ref<UITexture> MapBaseNoDataDefUITexture;
        [RTTI.Member(7, 0x40)] public StreamingRef<UITexture> MapBaseNoDataLowUITexture;
        [RTTI.Member(8, 0x48)] public StreamingRef<UITexture> MapBaseNoDataHighUITexture;
    }

    [RTTI.Serializable(0xC27D82339C1C1F1C, GameType.DS)]
    public class DSUIDeviceMapMenuResourceCatcherArea
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> CatcherAreaRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> CatcherAreaPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPolygonResource> CatcherAreaPolygonElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuPanelResource> CatcherAreaShadowRootPanelElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuPanelResource> CatcherAreaShadowPanelElement;
        [RTTI.Member(5, 0x28)] public Ref<MenuPolygonResource> CatcherAreaShadowPolygonElement;
        [RTTI.Member(6, 0x30)] public Ref<MenuPanelResource> BossCatcherAreaRootPanelElement;
        [RTTI.Member(7, 0x38)] public Ref<MenuPanelResource> BossCatcherAreaPanelElement;
        [RTTI.Member(8, 0x40)] public Ref<MenuPolygonResource> BossCatcherAreaPolygonElement;
        [RTTI.Member(9, 0x48)] public Ref<MenuPanelResource> BossCatcherAreaShadowRootPanelElement;
        [RTTI.Member(10, 0x50)] public Ref<MenuPanelResource> BossCatcherAreaShadowPanelElement;
        [RTTI.Member(11, 0x58)] public Ref<MenuPolygonResource> BossCatcherAreaShadowPolygonElement;
    }

    [RTTI.Serializable(0x77BE69721AAF4351, GameType.DS)]
    public class DSUIDeviceMapMenuResourceCommonGuide
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> CommonGuideRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> CommonGuidePanelElement;
        [RTTI.Member(2, 0x10)] public DSUIDeviceMapMenuResourceCommonGuideTextBundle CommonGuideTextBundle_Default;
        [RTTI.Member(3, 0x20)] public DSUIDeviceMapMenuResourceCommonGuideTextBundle CommonGuideTextBundle_CN;
    }

    [RTTI.Serializable(0x21AC30149230103C, GameType.DS)]
    public class DSUIDeviceMapMenuResourceCommonGuideTextBundle
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuTextResource> TextElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuTextResource> TextBgElement;
    }

    [RTTI.Serializable(0xB07724845EBD6175, GameType.DS)]
    public class DSUIDeviceMapMenuResourceCrater
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> CraterHeightRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> CraterHeightPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPanelResource> CraterHeightRotPanelElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuPanelResource> CraterShadowRootPanelElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuPanelResource> CraterShadowPanelElement;
        [RTTI.Member(5, 0x28)] public Ref<MenuPanelResource> CraterShadowRotPanelElement;
    }

    [RTTI.Serializable(0xF40DF59FF0B9AF31, GameType.DS)]
    public class DSUIDeviceMapMenuResourceCurves
    {
        [RTTI.Member(0, 0x0)] public Ref<CurveResource> ZoomInOutCurve;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> FocusScrollCurve;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> QpidGuideScaleCurve;
        [RTTI.Member(3, 0x18)] public Ref<CurveResource> ParallaxHeightClampCurve;
        [RTTI.Member(4, 0x20)] public Ref<CurveResource> ParallaxDepthScaleCurve;
        [RTTI.Member(5, 0x28)] public Array<Ref<CurveResource>> IconScaleDownCurves;
    }

    [RTTI.Serializable(0x1103447A6C9C907, GameType.DS)]
    public class DSUIDeviceMapMenuResourceDemo
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> DemoArea04PanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> DemoLeftAndRiggtBlindPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPanelResource> DemoMiddleKnotImagePanelElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuPanelResource> DemoSouthKnotImagePanelElement;
        [RTTI.Member(4, 0x20)] public Array<Ref<MenuTextureResource>> DemoArea04TextureElements;
        [RTTI.Member(5, 0x30)] public Array<Ref<MenuTextureResource>> DemoMiddleKnotTextureElements;
        [RTTI.Member(6, 0x40)] public Array<Ref<MenuTextureResource>> DemoSouthKnotTextureElements;
        [RTTI.Member(7, 0x50)] public Ref<MenuPanelResource> DemoCraterRootPanelElement;
        [RTTI.Member(8, 0x58)] public Ref<MenuPanelResource> DemoCraterPanelElement;
        [RTTI.Member(9, 0x60)] public Ref<MenuPanelResource> DemoFreeLineRootPanelElement;
        [RTTI.Member(10, 0x68)] public Ref<MenuPanelResource> DemoFreeLinePanelElement;
        [RTTI.Member(11, 0x70)] public Ref<MenuPolygonResource> DemoFreeLinePolygonElement;
    }

    [RTTI.Serializable(0xC95C56113C78F553, GameType.DS)]
    public class DSUIDeviceMapMenuResourceDialog
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> DialogPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuListResource> DialogSelectListElement;
    }

    [RTTI.Serializable(0xD8C0E1153FF161CF, GameType.DS)]
    public class DSUIDeviceMapMenuResourceDivideLineParam
    {
        [RTTI.Member(0, 0x0)] public FRGBAColor DivideLine1Color;
        [RTTI.Member(1, 0x10)] public FRGBAColor DivideLine2Color;
        [RTTI.Member(2, 0x20)] public FRGBAColor DivideLine3Color;
        [RTTI.Member(3, 0x30)] public float DivideLine1Width;
        [RTTI.Member(4, 0x34)] public float DivideLine2Width;
        [RTTI.Member(5, 0x38)] public float DivideLine3Width;
        [RTTI.Member(6, 0x40)] public Ref<CurveResource> DivideLine1AlphaAnimationCurve;
        [RTTI.Member(7, 0x48)] public Ref<CurveResource> DivideLine2AlphaAnimationCurve;
        [RTTI.Member(8, 0x50)] public Ref<CurveResource> DivideLine3AlphaAnimationCurve;
    }

    [RTTI.Serializable(0xD188C06B6C8CEB98, GameType.DS)]
    public class DSUIDeviceMapMenuResourceExclusiveAnimation
    {
        [RTTI.Member(0, 0x0)] public Ref<CurveResource> OnesetGroupFocusAlphaCurve;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> OnesetGroupUnFocusAlphaCurve;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> OnesetGroupFocusRotationCurve;
        [RTTI.Member(3, 0x18)] public Ref<CurveResource> OnesetGroupUnFocusRotationCurve;
        [RTTI.Member(4, 0x20)] public Ref<CurveResource> SameTargetFocusAlphaCurve;
        [RTTI.Member(5, 0x28)] public Ref<CurveResource> SameTargetUnFocusAlphaCurve;
        [RTTI.Member(6, 0x30)] public Ref<CurveResource> SameTargetFocusRotationCurve;
        [RTTI.Member(7, 0x38)] public Ref<CurveResource> SameTargetUnFocusRotationCurve;
    }

    [RTTI.Serializable(0xCC12F1DA516A8AE8, GameType.DS)]
    public class DSUIDeviceMapMenuResourceFlashEffect
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> FlashEffectRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> FlashEffectPanelElement;
    }

    [RTTI.Serializable(0x7AE1BF5D5CBA618A, GameType.DS)]
    public class DSUIDeviceMapMenuResourceGameOverArea
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> GameOverAreaRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> GameOverAreaPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPolygonResource> GameOverAreaPolygonElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuPanelResource> GameOverAreaShadowRootPanelElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuPanelResource> GameOverAreaShadowPanelElement;
        [RTTI.Member(5, 0x28)] public Ref<MenuPolygonResource> GameOverAreaShadowPolygonElement;
        [RTTI.Member(6, 0x30)] public Ref<MenuPanelResource> GameOverAreaCautionPanelElement;
    }

    [RTTI.Serializable(0x21C173545798C17A, GameType.DS)]
    public class DSUIDeviceMapMenuResourceGoalArea
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> GoalAreaRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> GoalAreaPanelElement;
        [RTTI.Member(2, 0x10)] public Array<Ref<MenuPolygonResource>> GoalAreaPolygonElement;
    }

    [RTTI.Serializable(0x85782AAB16F1DDBE, GameType.DS)]
    public class DSUIDeviceMapMenuResourceGoalAreaParam
    {
        [RTTI.Member(0, 0x0)] public Array<float> GoalAreaDivideRotations;
    }

    [RTTI.Serializable(0xE91E7A0CAB7CE40A, GameType.DS)]
    public class DSUIDeviceMapMenuResourceIconCard
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> IconCardRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuVisualResource> IconCardKeyHelpElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuVisualResource> IconCardLegendPanelElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuListResource> IconCardListElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuVisualResource> IconCardMeterPanelElement;
        [RTTI.Member(5, 0x28)] public Array<Ref<MenuTextResource>> IconCardTextElements;
        [RTTI.Member(6, 0x38)] public Array<Ref<MenuTextResource>> IconCardMeterTextElements;
        [RTTI.Member(7, 0x48)] public Array<Ref<MenuVisualResource>> IconCardBgElements;
        [RTTI.Member(8, 0x58)] public Ref<MenuTextureResource> IconCardStrandElement;
        [RTTI.Member(9, 0x60)] public Ref<MenuTextureResource> IconCardOnlineStrandElement;
        [RTTI.Member(10, 0x68)] public Ref<MenuVisualResource> IconCardTerminalTutorialElement;
        [RTTI.Member(11, 0x70)] public Ref<MenuVisualResource> IconCardLvUpTutorialElement;
    }

    [RTTI.Serializable(0xCC4ED9A8ABF9D9E9, GameType.DS)]
    public class DSUIDeviceMapMenuResourceIconElements
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> RootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> PanelElement;
        [RTTI.Member(2, 0x10)] public Array<Ref<DSUIDeviceMapMenuInternalIconMenuResource>> InternalIconElements;
        [RTTI.Member(3, 0x20)] public Ref<MenuPanelResource> ShadowRootPanelElement;
        [RTTI.Member(4, 0x28)] public Ref<MenuPanelResource> ShadowPanelElement;
        [RTTI.Member(5, 0x30)] public Array<Ref<MenuTextureResource>> ShadowTextureElements;
    }

    [RTTI.Serializable(0xCA86A0591F34081B, GameType.DS)]
    public class DSUIDeviceMapMenuResourceIconFilterDialog
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> IconFilterDialogPanelElement;
    }

    [RTTI.Serializable(0xE80A01611DCDF20B, GameType.DS)]
    public class DSUIDeviceMapMenuResourceIconIdleAnimations
    {
        [RTTI.Member(0, 0x8)] public Ref<MenuAnimationResource> CommonIcon;
        [RTTI.Member(1, 0x10)] public Ref<MenuAnimationResource> CommonIcon_NoTag;
        [RTTI.Member(2, 0x18)] public Ref<MenuAnimationResource> CommonIcon_GoalDisabled;
        [RTTI.Member(3, 0x20)] public Ref<MenuAnimationResource> CommonIcon_Gazer;
        [RTTI.Member(4, 0x28)] public Ref<MenuAnimationResource> GoalIcon;
        [RTTI.Member(5, 0x30)] public Ref<MenuAnimationResource> GoalIconCaution;
        [RTTI.Member(6, 0x38)] public Ref<MenuAnimationResource> GoalIconNoTag;
        [RTTI.Member(7, 0x40)] public Ref<MenuAnimationResource> PlayerIcon;
        [RTTI.Member(8, 0x48)] public Ref<MenuAnimationResource> OutsideIcon;
        [RTTI.Member(9, 0x50)] public Ref<MenuAnimationResource> UserIcon;
    }

    [RTTI.Serializable(0xC43FBB2FBEAD5958, GameType.DS)]
    public class DSUIDeviceMapMenuResourceKeyhelp
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> KeyhelpRootPanelElement;
    }

    [RTTI.Serializable(0x9A88401E65EC875B, GameType.DS)]
    public class DSUIDeviceMapMenuResourceLayoutArea
    {
        [RTTI.Member(0, 0x0)] public FRect DefaultLayoutInnerArea;
        [RTTI.Member(3, 0x10)] public FRect RightLayoutInnerArea;
        [RTTI.Member(6, 0x20)] public FRect LeftLayoutInnerArea;
        [RTTI.Member(1, 0x30)] public FRect DefaultLayoutOuterArea;
        [RTTI.Member(4, 0x40)] public FRect RightLayoutOuterArea;
        [RTTI.Member(7, 0x50)] public FRect LeftLayoutOuterArea;
        [RTTI.Member(2, 0x60)] public Vec3 DefaultLayoutKeyhelpPosition;
        [RTTI.Member(5, 0x70)] public Vec3 RightLayoutKeyhelpPosition;
        [RTTI.Member(8, 0x80)] public Vec3 LeftLayoutKeyhelpPosition;
    }

    [RTTI.Serializable(0x809E3BE1FF3761B6, GameType.DS)]
    public class DSUIDeviceMapMenuResourceLifeLog
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> AccentRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> StartAccentPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPanelResource> GoalAccentPanelElement;
    }

    [RTTI.Serializable(0x4057E440B4A8D208, GameType.DS)]
    public class DSUIDeviceMapMenuResourceLifeLogParam
    {
        [RTTI.Member(0, 0x0)] public float PlaySpeedMeterPerSec;
        [RTTI.Member(1, 0x4)] public float MinPlayTimeSec;
        [RTTI.Member(2, 0x8)] public float MaxPlayTimeSec;
        [RTTI.Member(3, 0xC)] public float SkipSpeedRate;
    }

    [RTTI.Serializable(0xE01D47DB69214C17, GameType.DS)]
    public class DSUIDeviceMapMenuResourceMissionArrow
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> MissionArrowRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> MissionArrowPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPolygonResource> MissionArrowPolygonElement;
        [RTTI.Member(3, 0x18)] public Array<Ref<MenuPolygonResource>> MissionArrowLinePolygonElements;
    }

    [RTTI.Serializable(0x5E1338ADCFA33606, GameType.DS)]
    public class DSUIDeviceMapMenuResourceMissionGoalAccent
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> MissionGoalAccentRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> MissionGoalAccentPanelElement;
    }

    [RTTI.Serializable(0x5ABFF2167C133EE3, GameType.DS)]
    public class DSUIDeviceMapMenuResourceMissionStartAccent
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> MissionStartAccentRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> MissionStartAccentPanelElement;
    }

    [RTTI.Serializable(0x8C499CC7EA5B33B1, GameType.DS)]
    public class DSUIDeviceMapMenuResourceMuleArea
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> MuleAreaRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> MuleAreaPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPolygonResource> MuleAreaPolygonElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuPanelResource> MuleAreaShadowRootPanelElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuPanelResource> MuleAreaShadowPanelElement;
        [RTTI.Member(5, 0x28)] public Ref<MenuPolygonResource> MuleAreaShadowPolygonElement;
    }

    [RTTI.Serializable(0xA0DE7C140797AA01, GameType.DS)]
    public class DSUIDeviceMapMenuResourceParameters
    {
        [RTTI.Member(0, 0x0)] public float FocusScrollSec;
        [RTTI.Member(1, 0x4)] public float SubModeIconAlpha1;
        [RTTI.Member(2, 0x8)] public float SubModeIconAlpha2;
        [RTTI.Member(3, 0xC)] public float SubModeIconScale1;
        [RTTI.Member(4, 0x10)] public float SubModeIconScale2;
        [RTTI.Member(5, 0x14)] public float SubModeArrowAlpha1;
        [RTTI.Member(6, 0x18)] public float SubModeArrowAlpha2;
        [RTTI.Member(7, 0x1C)] public float FocusedIconScale;
        [RTTI.Member(8, 0x20)] public float UnFocusedIconAlpha;
        [RTTI.Member(9, 0x24)] public float MissionZoomAreaOffset;
        [RTTI.Member(10, 0x28)] public float IconShowDelaySec;
        [RTTI.Member(11, 0x2C)] public float MissionArrowCurlRate;
        [RTTI.Member(12, 0x30)] public float ParallaxDepthBias;
        [RTTI.Member(13, 0x34)] public float EdgeFadeWidthRate;
        [RTTI.Member(14, 0x38)] public float EdgeFadeHeightRate;
        [RTTI.Member(15, 0x40)] public Array<float> HighwayRoadLineWidths;
        [RTTI.Member(16, 0x50)] public Array<float> TargetHighwayRoadLineWidths;
        [RTTI.Member(17, 0x60)] public float TraceRoadLv1LineWidth;
        [RTTI.Member(18, 0x64)] public float TraceRoadLv2LineWidth;
        [RTTI.Member(19, 0x68)] public float TraceRoadLv3LineWidth;
        [RTTI.Member(20, 0x6C)] public float RoadRebuilderZoomScale;
        [RTTI.Member(21, 0x70)] public float KeyhelpDelaySec;
        [RTTI.Member(22, 0x78)] public Array<float> IconFocusRatePerScaleDownLevel;
        [RTTI.Member(23, 0x88)] public float UserMarkerAllRemoveHoldStartSec;
        [RTTI.Member(24, 0x8C)] public float UserMarkerAllRemoveHoldFinishSec;
        [RTTI.Member(25, 0x90)] public float DestroyStructureHoldStartSec;
        [RTTI.Member(26, 0x94)] public float DestroyStructureHoldFinishSec;
        [RTTI.Member(27, 0x98)] public float IconFilterExpandEffectRadiusPerSec;
        [RTTI.Member(28, 0x9C)] public float IconFilterExpandEffectRadiusAnimationTime;
        [RTTI.Member(29, 0xA0)] public float MouseScrollSpeedRate;
    }

    [RTTI.Serializable(0xDC0EDCC72A6DA08B, GameType.DS)]
    public class DSUIDeviceMapMenuResourceQpidArea
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> QpidAreaRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> QpidAreaPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPolygonResource> QpidAreaPolygonElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuPanelResource> QpidAreaShadowRootPanelElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuPanelResource> QpidAreaShadowPanelElement;
        [RTTI.Member(5, 0x28)] public Ref<MenuPolygonResource> QpidAreaShadowPolygonElement;
    }

    [RTTI.Serializable(0xA17C2095AAC43DF5, GameType.DS)]
    public class DSUIDeviceMapMenuResourceQpidGuide
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> QpidGuideRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> QpidGuidePanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuTextureResource> QpidGuideBaseTextureElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuTextResource> QpidGuideNumTextElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuTextResource> QpidGuideNumShadowTextElement;
        [RTTI.Member(5, 0x28)] public Ref<MenuPanelResource> QpidGuideFriendshipPanelElement;
        [RTTI.Member(6, 0x30)] public Ref<DSUIMenuCommonGaugeResource> QpidGuideFriendshipLevelGaugeElement;
    }

    [RTTI.Serializable(0xF0CA93D48CE5D866, GameType.DS)]
    public class DSUIDeviceMapMenuResourceReticle
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> ReticlePanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> ReticleShadowPanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuTextureResource> ReticleTextureElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuTextureResource> ReticleShadowTextureElement;
        [RTTI.Member(4, 0x20)] public Ref<DSUIDeviceMapMenuInternalIconMenuResource> ReticleInternalIconElement;
    }

    [RTTI.Serializable(0xAB7F4D51A1BB5641, GameType.DS)]
    public class DSUIDeviceMapMenuResourceRoadColor
    {
        [RTTI.Member(0, 0x0)] public Array<RGBAColor> HighwayRoadLineColors;
        [RTTI.Member(1, 0x10)] public Array<RGBAColor> TargetHighwayRoadLineColors;
        [RTTI.Member(2, 0x20)] public RGBAColor TraceRoadLv1LineColor;
        [RTTI.Member(3, 0x24)] public RGBAColor TraceRoadLv2LineColor;
        [RTTI.Member(4, 0x28)] public RGBAColor TraceRoadLv3LineColor;
        [RTTI.Member(5, 0x30)] public Ref<CurveResource> TargetHighwayRoadAlphaCurve;
    }

    [RTTI.Serializable(0x5672434302655D9, GameType.DS)]
    public class DSUIDeviceMapMenuResourceSound
    {
        [RTTI.Member(0, 0x0)] public Ref<SoundResource> AutoFocusSound;
        [RTTI.Member(1, 0x8)] public Ref<SoundResource> AddMarkerSound;
        [RTTI.Member(2, 0x10)] public Ref<SoundResource> AddFollowMarkerSound;
        [RTTI.Member(3, 0x18)] public Ref<SoundResource> RemoveMarkerSound;
        [RTTI.Member(4, 0x20)] public Ref<SoundResource> RemoveAllMarkerSound;
        [RTTI.Member(5, 0x28)] public Ref<SoundResource> AcceptSound;
        [RTTI.Member(6, 0x30)] public Ref<SoundResource> BeepSound;
        [RTTI.Member(7, 0x38)] public Ref<SoundResource> DestroyBeepSound;
        [RTTI.Member(8, 0x40)] public Ref<SoundResource> ChangeMapFilterSound;
        [RTTI.Member(9, 0x48)] public Ref<SoundResource> ChangeMapFilterQpidSound;
        [RTTI.Member(10, 0x50)] public Ref<SoundResource> ChangeMapFilterWeatherSound;
        [RTTI.Member(11, 0x58)] public Ref<SoundResource> IdleLoopSound;
        [RTTI.Member(12, 0x60)] public Ref<SoundResource> ScrollSound;
        [RTTI.Member(13, 0x68)] public Ref<SoundResource> ZoomInSound;
        [RTTI.Member(14, 0x70)] public Ref<SoundResource> ZoomOutSound;
        [RTTI.Member(15, 0x78)] public Ref<SoundResource> ZoomEndSound;
        [RTTI.Member(16, 0x80)] public Ref<SoundResource> WeatherNewsCursorSound;
        [RTTI.Member(17, 0x88)] public Ref<SoundResource> WeatherNewsCursorNgSound;
        [RTTI.Member(18, 0x90)] public Ref<SoundResource> QpidNewCommerIconSound;
        [RTTI.Member(19, 0x98)] public Ref<SoundResource> LifeLogPlayerTrackSound;
        [RTTI.Member(20, 0xA0)] public Ref<SoundResource> DemoShowQpidAreaSound;
        [RTTI.Member(21, 0xA8)] public Ref<SoundResource> DemoShowCratorSound;
        [RTTI.Member(22, 0xB0)] public Ref<SoundResource> DemoShowLineSound;
        [RTTI.Member(23, 0xB8)] public Ref<SoundResource> DemoShowTerminalIconSound;
        [RTTI.Member(24, 0xC0)] public Ref<SoundResource> DemoShowStartArrowSound;
        [RTTI.Member(25, 0xC8)] public Ref<SoundResource> DemoShowGoalArrowSound;
    }

    [RTTI.Serializable(0xE4DA4396330F515A, GameType.DS)]
    public class DSUIDeviceMapMenuResourceStamp
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> MountainKnotPondUITexture;
        [RTTI.Member(1, 0x10)] public Vec3 MountainKnotPondWorldPosition;
    }

    [RTTI.Serializable(0x590E45AFDAFF1532, GameType.DS)]
    public class DSUIDeviceMapMenuResourceTextures
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> QpidGuideBaseLv1UITexture;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> QpidGuideBaseLv2UITexture;
        [RTTI.Member(2, 0x10)] public Ref<UITexture> QpidGuideBaseLv3UITexture;
        [RTTI.Member(3, 0x18)] public Ref<UITexture> ReticleUITexture;
    }

    [RTTI.Serializable(0x4B30B6C7F13A12F1, GameType.DS)]
    public class DSUIDeviceMapMenuResourceUserIconLine
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> UserIconLineRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> UserIconLinePanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPolygonResource> UserIconLinePolygonElement;
    }

    [RTTI.Serializable(0xBFF0FDDD1C4B0B7A, GameType.DS)]
    public class DSUIDeviceMapMenuResourceWeatherNews2
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> WeatherNews2RootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> WeatherNews2PanelElement;
        [RTTI.Member(2, 0x10)] public Ref<MenuPanelResource> WeatherNews2DiaPanelElement;
        [RTTI.Member(3, 0x18)] public Ref<MenuPanelResource> WeatherNews2ArrowPanelElement;
        [RTTI.Member(4, 0x20)] public Ref<MenuPanelResource> WeatherNews2ArrowRotPanelElement;
        [RTTI.Member(5, 0x28)] public Ref<MenuTextureResource> WeatherNews2DiaTextureElement;
        [RTTI.Member(6, 0x30)] public Ref<MenuTextureResource> WeatherNews2ArrowTextureElement;
        [RTTI.Member(7, 0x38)] public Ref<MenuPanelResource> WeatherNews2CursorPanelElement;
        [RTTI.Member(8, 0x40)] public Ref<MenuPanelResource> WeatherNews2CursorUpAnimPanelElement;
        [RTTI.Member(9, 0x48)] public Ref<MenuPanelResource> WeatherNews2CursorDownAnimPanelElement;
        [RTTI.Member(10, 0x50)] public Array<Ref<MenuTextResource>> WeatherNews2CursorTimeTextElements;
        [RTTI.Member(11, 0x60)] public Array<Ref<MenuTextResource>> WeatherNews2CursorTimeShadowTextElements;
    }

    [RTTI.Serializable(0x5A400971EFB0D516, GameType.DS)]
    public class DSUIDeviceMapMenuResourceWeatherNews2Param
    {
        [RTTI.Member(0, 0x0)] public Array<float> WeatherNews2HorizontalOddAlphas;
        [RTTI.Member(1, 0x10)] public Array<float> WeatherNews2HorizontalEvenAlphas;
        [RTTI.Member(2, 0x20)] public Array<float> WeatherNews2VerticalAlphas;
        [RTTI.Member(3, 0x30)] public Array<RGBAColor> WeatherNews2DiaColors;
        [RTTI.Member(4, 0x40)] public Array<RGBAColor> WeatherNews2ArrowColors;
        [RTTI.Member(5, 0x50)] public Array<Vec2> WeatherNews2ArrowScales;
        [RTTI.Member(6, 0x60)] public Ref<CurveResource> WeatherNews2DiaAlphaCurve;
        [RTTI.Member(7, 0x68)] public Ref<CurveResource> WeatherNews2ArrowAlphaCurve;
    }

    [RTTI.Serializable(0x455DFC7A15CC6DEE, GameType.DS)]
    public class DSUIDeviceMapMenuResourceZiplineLine
    {
        [RTTI.Member(0, 0x0)] public Ref<MenuPanelResource> ZiplineLineRootPanelElement;
        [RTTI.Member(1, 0x8)] public Ref<MenuPanelResource> ZiplineLinePanelElement;
        [RTTI.Member(2, 0x10)] public Array<Ref<MenuPolygonResource>> ZiplineLinePolygonElements;
        [RTTI.Member(3, 0x20)] public Ref<MenuPanelResource> ZiplineFocusLinePanelElement;
        [RTTI.Member(4, 0x28)] public Array<Ref<MenuPolygonResource>> ZiplineFocusLinePolygonElements;
    }

    [RTTI.Serializable(0x2B3D3473EA58E36A, GameType.DS)]
    public class DSUIDeviceMapMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0x6457B9559AB9D3AB, GameType.DS)]
    public class DSUIDeviceMapMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0x55D20341F72278BA, GameType.DS)]
    public class DSUIDeviceMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x2F957B87919856FE, GameType.DS)]
    public class DSUIDeviceMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "CureGauge")] public int StartFrame;
        [RTTI.Member(7, 0x2C, "CureGauge")] public int FinishFrame;
        [RTTI.Member(8, 0x30, "CureGauge")] public int HideEffectFrame;
        [RTTI.Member(9, 0x34, "CureGauge")] public int CloseFrame;
        [RTTI.Member(11, 0x38, "SubtitlesBG")] public int HideDelayFrame;
    }

    [RTTI.Serializable(0xC49ED95D93C43BDE, GameType.DS)]
    public class DSUIDeviceMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xC6236AA63125A4D1, GameType.DS)]
    public class DSUIDeviceMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> PageElementResource_None;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> PageElementResource_Top;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> PageElementResource_Baggage;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> PageElementResource_Mission;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> PageElementResource_Construction;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> PageElementResource_Wish;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> PageElementResource_Radio;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> PageElementResource_System;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> PageElementResource_Delivery;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> PageElementResource_Preparation;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<MenuElementResource> PageElementResource_HandOver;
        [RTTI.Member(18, 0x88, "Logic")] public Ref<MenuElementResource> PageElementResource_Config;
        [RTTI.Member(19, 0x90, "Logic")] public Ref<MenuElementResource> PageElementResource_Controller;
        [RTTI.Member(21, 0x98, "Logic")] public Ref<MenuElementResource> PageElementResource_BridgesID;
        [RTTI.Member(20, 0xA0, "Logic")] public Ref<MenuElementResource> PageElementResource_FastTravel;
        [RTTI.Member(22, 0xA8, "Logic")] public Ref<MenuElementResource> PageElementResource_Mail;
        [RTTI.Member(23, 0xB0, "Logic")] public Ref<MenuElementResource> PageElementResource_Backpack;
        [RTTI.Member(24, 0xB8, "Logic")] public Ref<MenuElementResource> PageElementResource_Vehicle;
        [RTTI.Member(25, 0xC0, "Logic")] public Ref<MenuElementResource> PageElementResource_MapDemo;
        [RTTI.Member(26, 0xC8, "Logic")] public Ref<MenuElementResource> PageElementResource_QpidResult;
        [RTTI.Member(27, 0xD0, "Logic")] public Ref<MenuElementResource> PageElementResource_Music;
        [RTTI.Member(28, 0xD8, "Logic")] public Ref<MenuElementResource> PageElementResource_MissionResult;
        [RTTI.Member(29, 0xE0, "Logic")] public Ref<MenuElementResource> PageElementResource_Database;
        [RTTI.Member(30, 0xE8, "Logic")] public Ref<MenuElementResource> PageElementResource_Tips;
        [RTTI.Member(31, 0xF0, "Logic")] public Ref<MenuElementResource> PageElementResource_Archive;
        [RTTI.Member(32, 0xF8, "Logic")] public Ref<MenuElementResource> PageElementResource_InfoLog;
        [RTTI.Member(33, 0x100, "Logic")] public Ref<MenuElementResource> PageElementResource_MemoryChip;
        [RTTI.Member(34, 0x108, "Logic")] public Ref<MenuElementResource> PageElementResource_PrivateRoomColor;
        [RTTI.Member(35, 0x110, "Logic")] public Ref<MenuElementResource> PageElementResource_Zipline;
        [RTTI.Member(36, 0x118, "Logic")] public Ref<MenuElementResource> _0;
        [RTTI.Member(37, 0x120, "Logic")] public Ref<MenuElementResource> PageElementResource_CliffMemories;
        [RTTI.Member(38, 0x128, "Logic")] public Ref<MenuElementResource> PageElementResource_Uniform;
        [RTTI.Member(39, 0x130, "Logic")] public Ref<MenuElementResource> PageElementResource_FinalResult;
        [RTTI.Member(40, 0x138, "Logic")] public Ref<MenuElementResource> PageElementResource_Load;
        [RTTI.Member(41, 0x140, "Logic")] public Ref<MenuElementResource> FrameElementResource;
        [RTTI.Member(42, 0x148, "Logic")] public Ref<MenuAnimationResource> FrameSetSmallAnimation;
        [RTTI.Member(43, 0x150, "Logic")] public Ref<MenuAnimationResource> FrameSetCureGaugeAnimation;
        [RTTI.Member(44, 0x158, "Logic")] public Ref<MenuAnimationResource> FrameDefToSmallAnimation;
        [RTTI.Member(45, 0x160, "Logic")] public Ref<MenuAnimationResource> FrameSmallToDefAnimation;
        [RTTI.Member(46, 0x168, "Logic")] public Ref<MenuElementResource> IntroElementResource;
        [RTTI.Member(47, 0x170, "Logic")] public Ref<MenuAnimationResource> DefaultIntroAnimation;
        [RTTI.Member(48, 0x178, "Logic")] public Ref<MenuAnimationResource> RadioIntroAnimation;
        [RTTI.Member(49, 0x180, "Logic")] public Ref<MenuAnimationResource> QpidResultIntroAnimation;
        [RTTI.Member(50, 0x188, "Logic")] public Ref<MenuElementResource> ResultFadeOutBlackElementResource;
        [RTTI.Member(51, 0x190, "Logic")] public Ref<MenuElementResource> ResultFadeOutWhiteElementResource;
        [RTTI.Member(52, 0x198, "Logic")] public Ref<MenuElementResource> ResultFadeOutWhiteBGElementResource;
    }

    [RTTI.Serializable(0x4651FD674919E2DD, GameType.DS)]
    public class DSUIDeviceMenuGyroMenuResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "Gyro")] public Ref<CurveResource> RotationXCurve;
        [RTTI.Member(50, 0x198, "Gyro")] public Ref<CurveResource> RotationYCurve;
        [RTTI.Member(51, 0x1A0, "Gyro")] public float RotationPerSec;
        [RTTI.Member(52, 0x1A4, "Gyro")] public float MoveEndRotationPerSec;
        [RTTI.Member(53, 0x1A8, "Gyro")] public float ReverseRotationPerSec;
        [RTTI.Member(54, 0x1AC, "Gyro")] public float ReverseStartSec;
        [RTTI.Member(55, 0x1B0, "Gyro")] public float DefaultGyroRate;
        [RTTI.Member(56, 0x1B4, "Gyro")] public float NegativeGyroRate;
        [RTTI.Member(57, 0x1B8, "Gyro")] public float MouseToStickRate;
        [RTTI.Member(58, 0x1BC, "Gyro")] public float RotationXUpMax;
        [RTTI.Member(59, 0x1C0, "Gyro")] public float RotationXUpMin;
        [RTTI.Member(60, 0x1C4, "Gyro")] public float RotationXDownMax;
        [RTTI.Member(61, 0x1C8, "Gyro")] public float RotationXDownMin;
        [RTTI.Member(62, 0x1CC, "Gyro")] public float RotationRightYMax;
        [RTTI.Member(63, 0x1D0, "Gyro")] public float RotationRightYMin;
        [RTTI.Member(64, 0x1D4, "Gyro")] public float RotationLeftYMax;
        [RTTI.Member(65, 0x1D8, "Gyro")] public float RotationLeftYMin;
    }

    [RTTI.Serializable(0x316AEA0D24D2711B, GameType.DS)]
    public class DSUIDeviceMenuGyroMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0x9A0E96BFB814428, GameType.DS)]
    public class DSUIDeviceMenuGyroMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0x6E236D242E718A6E, GameType.DS)]
    public class DSUIDeviceMiniMapMenuResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "MiniMap")] public Array<Ref<DSUIDeviceMapMenuAreaResource>> AreaResources;
        [RTTI.Member(50, 0x1A0, "MiniMap")] public Ref<MenuDataBinding> MissionId;
        [RTTI.Member(51, 0x1A8, "MiniMap")] public Ref<MenuDataBinding> BaggageId;
        [RTTI.Member(60, 0x1B0, "Elements")] public Ref<MenuElementResource> GoalIconElement;
        [RTTI.Member(61, 0x1B8, "Elements")] public Ref<MenuElementResource> PlayerIconElement;
        [RTTI.Member(53, 0x1C0, "MiniMapForDynamicOfflineMission")] public Ref<MenuDataBinding> IsFromBaggageInfo;
        [RTTI.Member(54, 0x1C8, "MiniMapForDynamicOfflineMission")] public Ref<MenuDataBinding> IsDynamic;
        [RTTI.Member(55, 0x1D0, "MiniMapForDynamicOfflineMission")] public Ref<MenuDataBinding> Area;
        [RTTI.Member(56, 0x1D8, "MiniMapForDynamicOfflineMission")] public Ref<MenuDataBinding> DeliveryPoint_X;
        [RTTI.Member(57, 0x1E0, "MiniMapForDynamicOfflineMission")] public Ref<MenuDataBinding> DeliveryPoint_Y;
        [RTTI.Member(58, 0x1E8, "MiniMapForDynamicOfflineMission")] public Ref<MenuDataBinding> DeliveryPoint_Z;
    }

    [RTTI.Serializable(0x6FBEC97C36DB4962, GameType.DS)]
    public class DSUIDeviceMiniMapMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0xBE8094EA1981FE6B, GameType.DS)]
    public class DSUIDeviceMiniMapMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0xF9C4FC45D41B7F80, GameType.DS)]
    public class DSUIDeviceMissionMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xDF28DD11FC4423BB, GameType.DS)]
    public class DSUIDeviceMissionMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "MissionListDetailLabel")] public Ref<LocalizedTextResource> Detail_Baggage;
        [RTTI.Member(7, 0x30, "MissionListDetailLabel")] public Ref<LocalizedTextResource> Detail_Supply;
        [RTTI.Member(9, 0x38, "MissionListDialogLabel")] public Ref<LocalizedTextResource> Dialog_Accept;
        [RTTI.Member(10, 0x40, "MissionListDialogLabel")] public Ref<LocalizedTextResource> Dialog_Premium;
        [RTTI.Member(11, 0x48, "MissionListDialogLabel")] public Ref<LocalizedTextResource> Dialog_CancelSelected;
        [RTTI.Member(12, 0x50, "MissionListDialogLabel")] public Ref<LocalizedTextResource> Dialog_Close;
        [RTTI.Member(13, 0x58, "MissionListDialogLabel")] public Ref<LocalizedTextResource> Dialog_Relocate;
        [RTTI.Member(14, 0x60, "MissionListDialogLabel")] public Ref<LocalizedTextResource> Dialog_CancelMission;
        [RTTI.Member(16, 0x68, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_DeviceOrder;
        [RTTI.Member(17, 0x70, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_TerminalSam;
        [RTTI.Member(18, 0x78, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_TerminalSimple;
        [RTTI.Member(19, 0x80, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_TerminalAuto;
        [RTTI.Member(20, 0x88, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_Ruby_DeviceOrder;
        [RTTI.Member(21, 0x90, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_Ruby_TerminalSam;
        [RTTI.Member(22, 0x98, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_Ruby_TerminalSimple;
        [RTTI.Member(23, 0xA0, "MissionListTitleLabel")] public Ref<LocalizedTextResource> Title_Ruby_TerminalAuto;
        [RTTI.Member(25, 0xA8, "MissionListDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Tab_Summary;
        [RTTI.Member(26, 0xB0, "MissionListDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Tab_Detail;
        [RTTI.Member(27, 0xB8, "MissionListDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Tab_Baggage;
        [RTTI.Member(28, 0xC0, "MissionListDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Tab_Supply;
        [RTTI.Member(30, 0xC8, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Completed;
        [RTTI.Member(31, 0xD0, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_UnCompleted;
        [RTTI.Member(32, 0xD8, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Auto_Bot_Count;
        [RTTI.Member(33, 0xE0, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Auto_Damage;
        [RTTI.Member(34, 0xE8, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Auto_Duration;
        [RTTI.Member(35, 0xF0, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Progress_Time;
        [RTTI.Member(36, 0xF8, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Has_Baggage;
        [RTTI.Member(37, 0x100, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Damage_Rate;
        [RTTI.Member(38, 0x108, "MissionDetailTabLabel")] public Ref<LocalizedTextResource> Detail_Move_Distance;
        [RTTI.Member(40, 0x110, "MissionConditionRewardRank")] public Ref<LocalizedTextResource> Condition_Reward_Rank_SS;
        [RTTI.Member(41, 0x118, "MissionConditionRewardRank")] public Ref<LocalizedTextResource> Condition_Reward_Rank_SSS;
        [RTTI.Member(42, 0x120, "MissionConditionRewardRank")] public Ref<LocalizedTextResource> Condition_Reward_Rank_SSSS;
        [RTTI.Member(44, 0x138, "MissionRewardRankText")] public Ref<LocalizedTextResource> Rank_C;
        [RTTI.Member(45, 0x140, "MissionRewardRankText")] public Ref<LocalizedTextResource> Rank_B;
        [RTTI.Member(46, 0x148, "MissionRewardRankText")] public Ref<LocalizedTextResource> Rank_A;
        [RTTI.Member(47, 0x150, "MissionRewardRankText")] public Ref<LocalizedTextResource> Rank_S;
        [RTTI.Member(48, 0x158, "MissionRewardRankText")] public Ref<LocalizedTextResource> Rank_SS;
        [RTTI.Member(49, 0x160, "MissionRewardRankText")] public Ref<LocalizedTextResource> Rank_SSS;
        [RTTI.Member(50, 0x168, "MissionRewardRankText")] public Ref<LocalizedTextResource> Rank_SSSS;
        [RTTI.Member(52, 0x170, "MissionDetailTabTexture")] public Ref<UITexture> Detail_Tab_Summary_Tex;
        [RTTI.Member(53, 0x178, "MissionDetailTabTexture")] public Ref<UITexture> Detail_Tab_Detail_Tex;
        [RTTI.Member(54, 0x180, "MissionDetailTabTexture")] public Ref<UITexture> Detail_Tab_Baggage_Tex;
        [RTTI.Member(55, 0x188, "MissionDetailTabTexture")] public Ref<UITexture> Detail_Tab_Supply_Tex;
    }

    [RTTI.Serializable(0x8C1264487F1D3917, GameType.DS)]
    public class DSUIDeviceMissionMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x1667985028077D46, GameType.DS)]
    public class DSUIDeviceMissionMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> MissionListPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> MissionListElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> DetailPanelElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> DetailReportElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> DetailTabMainPanelElementResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> DialogPanelElementResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> DialogSelectViewElementResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> DialogSelectViewItemElementResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> DialogConfirmationPanelElementResource;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> DialogConfirmationSelectViewElementResource;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<MenuElementResource> DialogConfirmationSelectViewDecideElementResource;
        [RTTI.Member(18, 0x88, "Logic")] public Ref<MenuElementResource> DecidePanelElementResource;
        [RTTI.Member(19, 0x90, "Logic")] public Ref<MenuElementResource> AutoDeliverRadioShowPanelElementResource;
        [RTTI.Member(25, 0x98, "Animation")] public Ref<MenuAnimationResource> DetailPanelExpandAnimationResource;
        [RTTI.Member(26, 0xA0, "Animation")] public Ref<MenuAnimationResource> DetailPanelCollapseAnimationResource;
        [RTTI.Member(27, 0xA8, "Animation")] public Ref<MenuAnimationResource> ScrollingPanelExpandAnimationResource;
        [RTTI.Member(28, 0xB0, "Animation")] public Ref<MenuAnimationResource> ScrollingPanelCollapseAnimationResource;
        [RTTI.Member(29, 0xB8, "Animation")] public Ref<MenuAnimationResource> ScrollingPanelDecideExpandAnimationResource;
        [RTTI.Member(30, 0xC0, "Animation")] public Ref<MenuAnimationResource> ScrollingPanelDecideCollapseAnimationResource;
        [RTTI.Member(31, 0xC8, "Animation")] public Ref<MenuAnimationResource> MissionListPanelExpandAnimationResource;
        [RTTI.Member(32, 0xD0, "Animation")] public Ref<MenuAnimationResource> MissionListPanelCollapseAnimationResource;
        [RTTI.Member(33, 0xD8, "Animation")] public Ref<MenuAnimationResource> SelectViewFocusReceiveAnimation;
        [RTTI.Member(34, 0xE0, "Animation")] public Ref<MenuAnimationResource> SelectViewFocusLostAnimation;
        [RTTI.Member(20, 0xE8, "Logic")] public Ref<MenuElementResource> MissionDetailTabScrollPanel_Summary;
        [RTTI.Member(21, 0xF0, "Logic")] public Ref<MenuElementResource> MissionDetailTabScrollPanel_Detail;
        [RTTI.Member(22, 0xF8, "Logic")] public Ref<MenuElementResource> MissionDetailTabScrollPanel_Baggage;
        [RTTI.Member(23, 0x100, "Logic")] public Ref<MenuElementResource> MissionDetailTabScrollPanel_Supply;
        [RTTI.Member(36, 0x108, "Sound")] public Ref<SoundResource> RoadmapOpenSoundResource;
    }

    [RTTI.Serializable(0x355D47E82B55D0BE, GameType.DS)]
    public class DSUIDeviceMusicMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x8200990B1D3D9CEB, GameType.DS)]
    public class DSUIDeviceMusicMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0xC58E13E78F9F0BD5, GameType.DS)]
    public class DSUIDeviceMusicMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xE5CA5B772F936C78, GameType.DS)]
    public class DSUIDeviceMusicMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(6, 0x30)] public Ref<MenuElementResource> PlayerPanelElementResource;
        [RTTI.Member(7, 0x38)] public Ref<MenuElementResource> ItemListElementResource;
    }

    [RTTI.Serializable(0xC0BE0F18F14F02DF, GameType.DS)]
    public class DSUIDevicePreparationMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x8287D1869AF9C6DA, GameType.DS)]
    public class DSUIDevicePreparationMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Wish;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Baggage;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Vehicle;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Costume;
        [RTTI.Member(10, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemTitle_Top_Accept;
        [RTTI.Member(11, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemHelps_Top_Wish;
        [RTTI.Member(12, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemHelps_Top_Baggage;
        [RTTI.Member(13, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemHelps_Top_Vehicle;
        [RTTI.Member(14, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemHelps_Top_Costume;
        [RTTI.Member(15, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> MenuItemHelps_Top_Accept;
        [RTTI.Member(16, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> PreparationConfirmText;
        [RTTI.Member(17, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> IncompleteText;
        [RTTI.Member(18, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> IncompleteSupplyText;
        [RTTI.Member(19, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> DialogOKText;
        [RTTI.Member(20, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> DialogCancelText;
        [RTTI.Member(21, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> Dialog2OKText;
        [RTTI.Member(22, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> Dialog2CancelText;
        [RTTI.Member(24, 0xC0, "UITexture")] public Ref<UITexture> FirstMenuIcon_Top_Wish;
        [RTTI.Member(25, 0xC8, "UITexture")] public Ref<UITexture> FirstMenuIcon_Top_Baggage;
        [RTTI.Member(26, 0xD0, "UITexture")] public Ref<UITexture> FirstMenuIcon_Top_Vehicle;
        [RTTI.Member(27, 0xD8, "UITexture")] public Ref<UITexture> FirstMenuIcon_Top_Costume;
        [RTTI.Member(28, 0xE0, "UITexture")] public Ref<UITexture> FirstMenuIcon_Top_Accept;
    }

    [RTTI.Serializable(0x86F55674193F4968, GameType.DS)]
    public class DSUIDevicePreparationMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x3AAE5C034F270745, GameType.DS)]
    public class DSUIDevicePreparationMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> FirstMenuListElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> FirstMenuListItemPanelElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> SecondMenuListElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> ConfirmDialogPnlElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> ConfirmSelectViewElementResource;
        [RTTI.Member(13, 0x58, "Animation")] public Ref<MenuAnimationResource> FirstMenuHeaderTransformAnimation;
        [RTTI.Member(14, 0x60, "Animation")] public Ref<MenuAnimationResource> FirstMenuHeaderTransformInverseAnimation;
        [RTTI.Member(16, 0x68, "Trophy")] public Ref<TrophyResource> CatalogueAllCreatedTrophyResource;
    }

    [RTTI.Serializable(0x58D05C7D72224EE, GameType.DS)]
    public class DSUIDevicePrivateRoomColorMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xD79702B9CE17CF45, GameType.DS)]
    public class DSUIDevicePrivateRoomColorMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "PaletteNum")] public int PaletteRowCount;
        [RTTI.Member(7, 0x2C, "PaletteNum")] public int PaletteColumnCount;
    }

    [RTTI.Serializable(0x608924AAF5BDA959, GameType.DS)]
    public class DSUIDevicePrivateRoomColorMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x348ECDCCBAE8FEF1, GameType.DS)]
    public class DSUIDevicePrivateRoomColorMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> GridPanelElement;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> DecidePanelElement;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> ConfirmDialogPanelElement;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> MenuTerminatorElement;
        [RTTI.Member(12, 0x50, "ParamResource")] public Ref<DSUIIDevicePrivateRoomColorParamResource> ParamResource;
    }

    [RTTI.Serializable(0xA782A486DDEB8579, GameType.DS)]
    public class DSUIDeviceQpidResultMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x653ABC4E7020F670, GameType.DS)]
    public class DSUIDeviceQpidResultMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Texture")] public StreamingRef<UITexture> QpidMapTexture;
        [RTTI.Member(7, 0x30, "Texture")] public StreamingRef<UITexture> QpidMapFillTexture;
        [RTTI.Member(9, 0x38, "StarDeliveryPointInfo")] public Array<DSUIQpidPointInfo> mStarDeliveryPointInfo_Base_Fill;
        [RTTI.Member(10, 0x48, "StarDeliveryPointInfo")] public Array<DSUIQpidPointInfo> mStarDeliveryPointInfo_Main_Terminal;
        [RTTI.Member(11, 0x58, "StarDeliveryPointInfo")] public Array<DSUIQpidPointInfo> mStarDeliveryPointInfo_Sub_Terminal;
        [RTTI.Member(13, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> QpidNewStrandTextResource;
        [RTTI.Member(14, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> QpidUpgradeTextResource;
    }

    [RTTI.Serializable(0x1BA7A1540EDC1214, GameType.DS)]
    public class DSUIDeviceQpidResultMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x4BCFC4F48FE6E624, GameType.DS)]
    public class DSUIDeviceQpidResultMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Timming")] public int ShowCurrentQpidAreaFrame;
        [RTTI.Member(8, 0x34, "Timming")] public int ShowNewQpidAreaFrame;
        [RTTI.Member(9, 0x38, "Timming")] public int CountNumberFrame;
        [RTTI.Member(10, 0x3C, "Timming")] public int ShowNewCommerMarkersFrame;
        [RTTI.Member(11, 0x40, "Timming")] public int ShowUSAMapSafeLimitFrame;
        [RTTI.Member(12, 0x44, "Timming")] public int PlayUSAMapLineSEDelay;
        [RTTI.Member(14, 0x48, "Logic")] public Ref<MenuElementResource> InfoRootPanelElement;
        [RTTI.Member(15, 0x50, "Logic")] public Ref<MenuElementResource> QpidNumCountNumberElement;
        [RTTI.Member(16, 0x58, "Logic")] public Ref<MenuElementResource> BandWidthCountNumberElement;
        [RTTI.Member(17, 0x60, "Logic")] public Ref<MenuElementResource> BandWidthCurrentCountNumberElement;
        [RTTI.Member(18, 0x68, "Logic")] public Ref<MenuElementResource> QpidNumIncreaseCountNumberElement;
        [RTTI.Member(19, 0x70, "Logic")] public Ref<MenuElementResource> BandWidthIncreaseCountNumberElement;
        [RTTI.Member(20, 0x78, "Logic")] public Ref<MenuElementResource> QpidNumIncreasePanelElement;
        [RTTI.Member(21, 0x80, "Logic")] public Ref<MenuElementResource> BandWidthIncreasePanelElement;
        [RTTI.Member(22, 0x88, "Logic")] public Ref<MenuElementResource> TutorialIgnoreAreaElement;
        [RTTI.Member(23, 0x90, "Logic")] public Ref<MenuElementResource> USAMapFlareElement;
        [RTTI.Member(24, 0x98, "Logic")] public Ref<MenuElementResource> USAMapFlareAnimPanelElement;
        [RTTI.Member(26, 0xA0, "Sounds")] public Ref<SoundResource> OpenUSAMapSoundResource;
        [RTTI.Member(27, 0xA8, "Sounds")] public Ref<SoundResource> CloseUSAMapSoundResource;
        [RTTI.Member(29, 0xB0, "Sounds")] public Ref<SoundResource> USAMapTerminalSEResource;
        [RTTI.Member(28, 0xB8, "Sounds")] public Ref<SoundResource> USAMapTerminalLastSEResource;
        [RTTI.Member(30, 0xC0, "Sounds")] public Ref<SoundResource> USAMapTerminalLineSEResource;
        [RTTI.Member(31, 0xC8, "Sounds")] public Ref<SoundResource> USAMapFlareSoundResource;
    }

    [RTTI.Serializable(0xEF2E4A3F823ED1AA, GameType.DS)]
    public class DSUIDeviceRadioMenuAdditionalDescResource : Resource
    {
        [RTTI.Member(3, 0x20, "RadioMenuAdditionalDesc")] public Ref<UITexture> UITexture;
    }

    [RTTI.Serializable(0x4D9C06335AC6FA92, GameType.DS)]
    public class DSUIDeviceRadioMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xA70EB8B6AF0FAF5B, GameType.DS)]
    public class DSUIDeviceRadioMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Volume")] public int VolumeCheckFrame;
        [RTTI.Member(7, 0x2C, "Volume")] public float HighVolumeRate;
        [RTTI.Member(8, 0x30, "Volume")] public float MiddleVolumeRate;
        [RTTI.Member(9, 0x34, "Volume")] public float LowVolumeRate;
    }

    [RTTI.Serializable(0xCB96ECA4114D113B, GameType.DS)]
    public class DSUIDeviceRadioMenuDescResource : Resource
    {
        [RTTI.Member(3, 0x20, "RadioMenuDesc")] public Array<DSUIDeviceRadioMenuDescTextureItem> PersonUITextures;
        [RTTI.Member(4, 0x30, "RadioMenuDesc")] public Array<DSUIDeviceRadioMenuDescTextureItem> NoisePersonUITextures;
        [RTTI.Member(5, 0x40, "RadioMenuDesc")] public Ref<LocalizedTextResource> PersonName;
    }

    [RTTI.Serializable(0x870DBA3FC6C67242, GameType.DS)]
    public class DSUIDeviceRadioMenuDescTextureItem
    {
        [RTTI.Member(0, 0x0)] public uint32 XPathValue;
        [RTTI.Member(1, 0x8)] public StreamingRef<UITexture> Texture;
    }

    [RTTI.Serializable(0x7C9530295C15E2FC, GameType.DS)]
    public class DSUIDeviceRadioMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xCF10327E8AE6AEC8, GameType.DS)]
    public class DSUIDeviceRadioMenuFunctionResource : MenuFunctionResource
    {
    }

    [RTTI.Serializable(0x27FB6E4AF0B81988, GameType.DS)]
    public class DSUIDeviceRoadmapMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x576C78724A46E212, GameType.DS)]
    public class DSUIDeviceRoadmapMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x636F9452FA8ACE1A, GameType.DS)]
    public class DSUIDeviceRoadmapMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xF5F62B5A20E5421A, GameType.DS)]
    public class DSUIDeviceRoadmapMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> TopPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> RoadmapListElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> RoadmapListItemElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> RoadmapListItemDecideElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> ProgressBarRootPanelResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> ProgressBarResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> ProgressBarStartPointPanelResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> SortDialogPnlResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> SortDialogSelectViewResource;
        [RTTI.Member(17, 0x78, "Animation")] public Ref<MenuAnimationResource> OpacityResetListItemAnimation;
        [RTTI.Member(18, 0x80, "Animation")] public Ref<MenuAnimationResource> TemporaryRoadmapListItemAnimation;
        [RTTI.Member(19, 0x88, "Animation")] public Ref<MenuAnimationResource> ListItemDeactiveIntroAnimation;
        [RTTI.Member(20, 0x90, "Animation")] public Ref<MenuAnimationResource> ListItemDeactiveOutroAnimation;
        [RTTI.Member(21, 0x98, "Animation")] public Ref<MenuAnimationResource> ListItemResetDeactiveIntroAnimation;
        [RTTI.Member(22, 0xA0, "Animation")] public Ref<MenuAnimationResource> ListItemResetDeactiveOutroAnimation;
        [RTTI.Member(23, 0xA8, "Animation")] public Ref<MenuAnimationResource> ListItemGoalPointIntroAnimation;
        [RTTI.Member(24, 0xB0, "Animation")] public Ref<MenuAnimationResource> ListItemGoalPointOutroAnimation;
        [RTTI.Member(25, 0xB8, "Animation")] public Ref<MenuAnimationResource> ListItemResetGoalPointIntroAnimation;
        [RTTI.Member(26, 0xC0, "Animation")] public Ref<MenuAnimationResource> ListItemResetGoalPointOutroAnimation;
        [RTTI.Member(27, 0xC8, "Animation")] public Ref<MenuAnimationResource> ListItemGoalPointDecideAnimation;
        [RTTI.Member(28, 0xD0, "Animation")] public Ref<MenuAnimationResource> ListItemDownToUpAnimation;
        [RTTI.Member(29, 0xD8, "Animation")] public Ref<MenuAnimationResource> ListItemUpToDownAnimation;
        [RTTI.Member(31, 0xE0, "Sound")] public Ref<SoundResource> CloseSoundResource;
    }

    [RTTI.Serializable(0xD8E4C504870AE35C, GameType.DS)]
    public class DSUIDeviceSystemMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xE0E6BA597F025BF9, GameType.DS)]
    public class DSUIDeviceSystemMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(13, 0x28, "SaveDialogReasonText")] public Ref<LocalizedTextResource> NearEnemy_Mule;
        [RTTI.Member(14, 0x30, "SaveDialogReasonText")] public Ref<LocalizedTextResource> NearEnemy_BT;
        [RTTI.Member(15, 0x38, "SaveDialogReasonText")] public Ref<LocalizedTextResource> NearEnemy_Boss;
        [RTTI.Member(16, 0x40, "SaveDialogReasonText")] public Ref<LocalizedTextResource> RestrictionArea_Water;
        [RTTI.Member(17, 0x48, "SaveDialogReasonText")] public Ref<LocalizedTextResource> RestrictionArea_Gas;
        [RTTI.Member(18, 0x50, "SaveDialogReasonText")] public Ref<LocalizedTextResource> AdrenalineState;
        [RTTI.Member(19, 0x58, "SaveDialogReasonText")] public Ref<LocalizedTextResource> OnVehcle;
        [RTTI.Member(20, 0x60, "SaveDialogReasonText")] public Ref<LocalizedTextResource> DengerousStateBaggage;
        [RTTI.Member(21, 0x68, "SaveDialogReasonText")] public Ref<LocalizedTextResource> MissionProgress;
        [RTTI.Member(22, 0x70, "SaveDialogReasonText")] public Ref<LocalizedTextResource> Other;
        [RTTI.Member(24, 0x78, "SystemSaveFailedReasonText")] public Ref<LocalizedTextResource> DeviceIsFull;
        [RTTI.Member(25, 0x80, "SystemSaveFailedReasonText")] public Ref<LocalizedTextResource> SaveFailedCommon;
        [RTTI.Member(6, 0x90, "DialogText")] public Ref<LocalizedTextResource> LoadLastSaveDataDialog;
        [RTTI.Member(7, 0xA0, "DialogText")] public Ref<LocalizedTextResource> LoadDialog;
        [RTTI.Member(8, 0xA8, "DialogText")] public Ref<LocalizedTextResource> TitleDialog;
        [RTTI.Member(9, 0xB0, "DialogText")] public Ref<LocalizedTextResource> ExitGameDialog;
        [RTTI.Member(10, 0xB8, "DialogText")] public Ref<LocalizedTextResource> SaveCompleteDialog;
        [RTTI.Member(11, 0xC8, "DialogText")] public Ref<LocalizedTextResource> NetworkSuccesDialog;
    }

    [RTTI.Serializable(0xACE08901092FFBF7, GameType.DS)]
    public class DSUIDeviceSystemMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x210E5F1BFC72387B, GameType.DS)]
    public class DSUIDeviceSystemMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> LstMenuResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> LstItemLoginMenuResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> LstItemSaveMenuResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> DialogPanelElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> DialogListElementResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> FadeTextureElementResource;
        [RTTI.Member(14, 0x60, "Sound")] public Ref<SoundResource> ExitGameSoundResource;
    }

    [RTTI.Serializable(0xFD174E3191A868, GameType.DS)]
    public class DSUIDeviceTopMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x316431BBA9C7FD5C, GameType.DS)]
    public class DSUIDeviceTopMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "MainIcon")] public Array<DSUITopMenuListItem> TopMenuListItems;
        [RTTI.Member(8, 0x38, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemBaggageIcon;
        [RTTI.Member(9, 0x48, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemOrderIcon;
        [RTTI.Member(10, 0x58, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemProcurementRequestIcon;
        [RTTI.Member(11, 0x68, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemConstructionIcon;
        [RTTI.Member(12, 0x78, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemWishIcon;
        [RTTI.Member(13, 0x88, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemDataLibraryIcon;
        [RTTI.Member(14, 0x98, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemMailIcon;
        [RTTI.Member(15, 0xA8, "SubItemIcon")] public Array<DSUITopMenuSubItem> SubItemOptionsIcon;
        [RTTI.Member(17, 0xB8, "Parameter")] public int CardDummyCount;
        [RTTI.Member(18, 0xBC, "Parameter")] public int CardDummyInvisibleStartIndex;
    }

    [RTTI.Serializable(0x2465F5DE92CFB717, GameType.DS)]
    public class DSUIDeviceTopMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x5FA33149A4FDB4F8, GameType.DS)]
    public class DSUIDeviceTopMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> TopMenuListElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> TopMenuDataSourceElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> MenuListPanelElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> TopMenuPanelTitleElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> MenuKeyHelpCloseElementResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> MenuKeyHelpOpenElementResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> BBInfoKeyHelpCloseElementResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> BBInfoKeyHelpOpenElementResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> MapInfoPanelElementResource;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> ListKeyHelpPanelElementResource;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<MenuElementResource> BBKeyHelpPanelElementResource;
        [RTTI.Member(18, 0x88, "Logic")] public Ref<MenuElementResource> ListFogPanelElementResource;
        [RTTI.Member(19, 0x90, "Logic")] public Ref<MenuElementResource> BBFogPanelElementResource;
        [RTTI.Member(21, 0x98, "Animation")] public Ref<MenuAnimationResource> ListOpenAnimationResource;
        [RTTI.Member(22, 0xA0, "Animation")] public Ref<MenuAnimationResource> ListCloseAnimationResource;
        [RTTI.Member(23, 0xA8, "Animation")] public Ref<MenuAnimationResource> BBInfoOpenAnimationResource;
        [RTTI.Member(24, 0xB0, "Animation")] public Ref<MenuAnimationResource> BBInfoCloseAnimationResource;
        [RTTI.Member(25, 0xB8, "Animation")] public Ref<MenuAnimationResource> MapInfoShowAnimationResource;
        [RTTI.Member(26, 0xC0, "Animation")] public Ref<MenuAnimationResource> MapInfoHideAnimationResource;
        [RTTI.Member(27, 0xC8, "Animation")] public Ref<MenuAnimationResource> ListKeyhelpShowAnimationResource;
        [RTTI.Member(28, 0xD0, "Animation")] public Ref<MenuAnimationResource> ListKeyhelpHideAnimationResource;
        [RTTI.Member(29, 0xD8, "Animation")] public Ref<MenuAnimationResource> BBKeyhelpShowAnimationResource;
        [RTTI.Member(30, 0xE0, "Animation")] public Ref<MenuAnimationResource> BBKeyhelpHideAnimationResource;
        [RTTI.Member(31, 0xE8, "Animation")] public Ref<MenuAnimationResource> ListFogIntroAnimationResource;
        [RTTI.Member(32, 0xF0, "Animation")] public Ref<MenuAnimationResource> ListFogOutroAnimationResource;
        [RTTI.Member(33, 0xF8, "Animation")] public Ref<MenuAnimationResource> ListFogShowAnimationResource;
        [RTTI.Member(34, 0x100, "Animation")] public Ref<MenuAnimationResource> ListFogHideAnimationResource;
        [RTTI.Member(35, 0x108, "Animation")] public Ref<MenuAnimationResource> BBFogIntroAnimationResource;
        [RTTI.Member(36, 0x110, "Animation")] public Ref<MenuAnimationResource> BBFogOutroAnimationResource;
        [RTTI.Member(37, 0x118, "Animation")] public Ref<MenuAnimationResource> BBFogShowAnimationResource;
        [RTTI.Member(38, 0x120, "Animation")] public Ref<MenuAnimationResource> BBFogHideAnimationResource;
        [RTTI.Member(40, 0x128, "Sound")] public Ref<SoundResource> ChangeMenuSound;
    }

    [RTTI.Serializable(0x17755C4391F388BE, GameType.DS)]
    public class DSUIDeviceTutorialDialogBGMenuResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Shader")] public Ref<ShaderResource> ShaderResource;
        [RTTI.Member(48, 0x188, "Shader")] public int SamplingCount;
        [RTTI.Member(49, 0x18C, "Shader")] public float InsideIgnoreAreaScale;
        [RTTI.Member(50, 0x190, "Shader")] public float OutsideIgnoreAreaScale;
        [RTTI.Member(52, 0x198, "AnimationCurve")] public Ref<CurveResource> MainColorR;
        [RTTI.Member(53, 0x1A0, "AnimationCurve")] public Ref<CurveResource> MainColorG;
        [RTTI.Member(54, 0x1A8, "AnimationCurve")] public Ref<CurveResource> MainColorB;
        [RTTI.Member(55, 0x1B0, "AnimationCurve")] public Ref<CurveResource> MainColorA;
        [RTTI.Member(56, 0x1B8, "AnimationCurve")] public Ref<CurveResource> IgnoreAreaColorR;
        [RTTI.Member(57, 0x1C0, "AnimationCurve")] public Ref<CurveResource> IgnoreAreaColorG;
        [RTTI.Member(58, 0x1C8, "AnimationCurve")] public Ref<CurveResource> IgnoreAreaColorB;
        [RTTI.Member(59, 0x1D0, "AnimationCurve")] public Ref<CurveResource> IgnoreAreaColorA;
        [RTTI.Member(60, 0x1D8, "AnimationCurve")] public Ref<CurveResource> InsideIgnoreAreaWidth;
        [RTTI.Member(61, 0x1E0, "AnimationCurve")] public Ref<CurveResource> InsideIgnoreAreaHeight;
        [RTTI.Member(62, 0x1E8, "AnimationCurve")] public Ref<CurveResource> OutsideIgnoreAreaWidth;
        [RTTI.Member(63, 0x1F0, "AnimationCurve")] public Ref<CurveResource> OutsideIgnoreAreaHeight;
    }

    [RTTI.Serializable(0x6E9720361B32B94D, GameType.DS)]
    public class DSUIDeviceTutorialDialogBGMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0x93DDFA07AA6996C0, GameType.DS)]
    public class DSUIDeviceTutorialDialogBGMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0xF7CD78BECEED2E3F, GameType.DS)]
    public class DSUIDeviceTutorialDialogMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x34DC1F47BDD2DE52, GameType.DS)]
    public class DSUIDeviceTutorialDialogMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x69BCE7A7E3E907B5, GameType.DS)]
    public class DSUIDeviceTutorialDialogMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xEB78C5D6E1323A4F, GameType.DS)]
    public class DSUIDeviceTutorialDialogMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> RootElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> BGElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> DialogElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> DialogSelectViewElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public float ShowDialogSec;
        [RTTI.Member(12, 0x54, "Logic")] public float DialogAcceptEnableSec;
        [RTTI.Member(13, 0x58, "Logic")] public Array<DSUIDeviceTutorialDialogPosition> DialogPositions;
    }

    [RTTI.Serializable(0x5A9EB078C13AE2D6, GameType.DS)]
    public class DSUIDeviceTutorialDialogPosition
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x10)] public Vec2 Position;
    }

    [RTTI.Serializable(0x99153BA65AE498D, GameType.DS)]
    public class DSUIDeviceUnlockDialogHelperResource : Resource
    {
        [RTTI.Member(3, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCatalogue;
        [RTTI.Member(4, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCatalogue_AfterMemchip;
        [RTTI.Member(5, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCatalogue_ByBridges;
        [RTTI.Member(6, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCatalogue_ByPlace;
        [RTTI.Member(7, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCatalogue_Bottom;
        [RTTI.Member(8, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCollectorsHolo;
        [RTTI.Member(9, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCollectorsHolo_Bottom;
        [RTTI.Member(10, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCollectorsSound;
        [RTTI.Member(11, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCollectorsSound_Bottom;
        [RTTI.Member(12, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCollectorsVoice;
        [RTTI.Member(13, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCollectorsVoice_Bottom;
        [RTTI.Member(14, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> UnlockCollectorsHalfLifeCubeBurn;
        [RTTI.Member(15, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> QpidNewCommer;
        [RTTI.Member(16, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> QpidConnectPerson_Bridges;
        [RTTI.Member(17, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> QpidConnectPerson_UCA;
        [RTTI.Member(18, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> MaterialUp;
        [RTTI.Member(19, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> MaterialUp_Delivery;
        [RTTI.Member(20, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> MaterialUp_Donation;
        [RTTI.Member(21, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> MaterialUp_Donation_SafeHouse;
        [RTTI.Member(22, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> MaterialUp_Bottom;
        [RTTI.Member(23, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> Interview_Head_UCA;
        [RTTI.Member(24, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> Interview_Head_Friend;
        [RTTI.Member(25, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> Interview_Head_MissionClear;
        [RTTI.Member(26, 0xE0, "LocalizedText")] public Ref<LocalizedTextResource> Interview_Head_GameClear;
        [RTTI.Member(27, 0xE8, "LocalizedText")] public Ref<LocalizedTextResource> Interview_Head_Common;
        [RTTI.Member(28, 0xF0, "LocalizedText")] public Ref<LocalizedTextResource> Interview_Column;
        [RTTI.Member(29, 0xF8, "LocalizedText")] public Ref<LocalizedTextResource> Interview_Etc;
        [RTTI.Member(30, 0x100, "LocalizedText")] public Ref<LocalizedTextResource> Memorychip_Head;
        [RTTI.Member(31, 0x108, "LocalizedText")] public Ref<LocalizedTextResource> Memorychip_Column;
        [RTTI.Member(32, 0x110, "LocalizedText")] public Ref<LocalizedTextResource> Memorychip_Etc;
        [RTTI.Member(33, 0x118, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedText_StarMark;
        [RTTI.Member(34, 0x120, "LocalizedText")] public Ref<LocalizedTextResource> NickNameHeader;
        [RTTI.Member(35, 0x128, "LocalizedText")] public Ref<LocalizedTextResource> SamPowerUpHeader;
        [RTTI.Member(36, 0x130, "LocalizedText")] public Ref<LocalizedTextResource> BridgesToUCA;
        [RTTI.Member(37, 0x138, "LocalizedText")] public Ref<LocalizedTextResource> ThankYouGoods;
        [RTTI.Member(38, 0x140, "LocalizedText")] public Ref<LocalizedTextResource> GameClearHouseholdName;
        [RTTI.Member(39, 0x148, "LocalizedText")] public Ref<LocalizedTextResource> BandWidthUp;
        [RTTI.Member(41, 0x158, "UITexture")] public Ref<UITexture> CollectorsHolo;
        [RTTI.Member(42, 0x160, "UITexture")] public Ref<UITexture> CollectorsHoloSP;
        [RTTI.Member(43, 0x168, "UITexture")] public Ref<UITexture> CollectorsSound;
        [RTTI.Member(44, 0x170, "UITexture")] public Ref<UITexture> CollectorsSoundSP;
        [RTTI.Member(45, 0x178, "UITexture")] public Ref<UITexture> CollectorsVoice;
        [RTTI.Member(46, 0x180, "UITexture")] public Ref<UITexture> CollectorsVoiceSP;
        [RTTI.Member(47, 0x188, "UITexture")] public Ref<UITexture> UITexture_StarMark;
        [RTTI.Member(49, 0x198, "Trophy")] public Ref<TrophyResource> GetCollectorsItem;
        [RTTI.Member(51, 0x1A8, "Sound")] public Ref<SoundResource> QpidNewCommerDialogOpen;
        [RTTI.Member(52, 0x1B0, "Sound")] public Ref<SoundResource> ConnectPersonDialogOpen;
        [RTTI.Member(53, 0x1B8, "Sound")] public Ref<SoundResource> CommonDialogOpenFirst;
        [RTTI.Member(54, 0x1C0, "Sound")] public Ref<SoundResource> CommonDialogOpen;
    }

    [RTTI.Serializable(0x226387CD48277269, GameType.DS)]
    public class DSUIDeviceUnlockDialogMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xCF48942DEC61C259, GameType.DS)]
    public class DSUIDeviceUnlockDialogMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> Header_FriendlyLvUp;
        [RTTI.Member(7, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> Header_MissionClear;
        [RTTI.Member(8, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> Header_QpidConnect_Bridges;
        [RTTI.Member(9, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> Header_QpidConnect2_Bridges;
        [RTTI.Member(10, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> Header_QpidConnect_UCA;
        [RTTI.Member(11, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> Header_QpidConnect2_UCA;
        [RTTI.Member(12, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> Header_GameClear;
    }

    [RTTI.Serializable(0x6F80D7E87C50EA69, GameType.DS)]
    public class DSUIDeviceUnlockDialogMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x6E024B913E7C0871, GameType.DS)]
    public class DSUIDeviceUnlockDialogMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> RootElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Array<Ref<MenuElementResource>> DialogElementResources;
    }

    [RTTI.Serializable(0xB047DFE9BE50A994, GameType.DS)]
    public class DSUIDeviceVehicleMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xA516C910DDB9CBCC, GameType.DS)]
    public class DSUIDeviceVehicleMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> GroupName_SELECTING;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> GroupName_LOCAL_VEHICLE;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> GroupName_ONLINE_VEHICLE;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> CommandText_RIDE;
        [RTTI.Member(10, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> CommandText_DROPOFF;
        [RTTI.Member(11, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogTitleText_APPLY_CHANGES;
        [RTTI.Member(12, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogTitleText_DISCARD_CHANGES;
        [RTTI.Member(13, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogTitleText_DISCARD_COLOR_CHANGES;
        [RTTI.Member(14, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogTitleText_NOT_COLOR_CHANGE;
        [RTTI.Member(15, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> CommonDialogTitleText_PARKING_NOT_SPACE;
        [RTTI.Member(16, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> ColorPaletteHeaderName_PRIMARY;
        [RTTI.Member(17, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> ColorPaletteHeaderName_SECONDARY;
        [RTTI.Member(18, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> OnlineVehicleNameFormatText;
        [RTTI.Member(20, 0x90, "Texture")] public Ref<UITexture> HeadlineIconTexture_SELECTING;
        [RTTI.Member(21, 0x98, "Texture")] public Ref<UITexture> HeadlineIconTexture_LOCAL_VEHICLE;
        [RTTI.Member(22, 0xA0, "Texture")] public Ref<UITexture> HeadlineIconTexture_ONLINE_VEHICLE;
    }

    [RTTI.Serializable(0xC3DAB80B765FFDA, GameType.DS)]
    public class DSUIDeviceVehicleMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x8D0AAEE093E5D1BA, GameType.DS)]
    public class DSUIDeviceVehicleMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> VehicleMenuListItemResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> CommandPnlResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> CommandListResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> DecideButtonPnlResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> CommonDialogResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> CommonDialogButtonListResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> VehiclePrimaryColorTextureResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> VehicleSecondaryColorTextureResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> IgnoreBgVehicleModelPanelResource;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> ColorPalettePanelResource;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<MenuElementResource> ColorPaletteListResource;
        [RTTI.Member(18, 0x88, "Logic")] public Ref<MenuElementResource> ColorPaletteDecideButtonPanelResource;
        [RTTI.Member(19, 0x90, "Logic")] public Ref<MenuElementResource> ColorSelectionListResource;
        [RTTI.Member(20, 0x98, "Logic")] public Ref<MenuElementResource> ColorTextureResource;
    }

    [RTTI.Serializable(0x4CBE06515DA74C2C, GameType.DS)]
    public class DSUIDeviceWeightCapacityMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x6048545CFF3D7D1F, GameType.DS)]
    public class DSUIDeviceWeightCapacityMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0xA50F6FC8C04B09B5, GameType.DS)]
    public class DSUIDeviceWeightCapacityMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xB9AB1D3FB003028C, GameType.DS)]
    public class DSUIDeviceWeightCapacityMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> MainPanelElementResource;
    }

    [RTTI.Serializable(0x1BAD0DCD1055922C, GameType.DS)]
    public class DSUIDeviceWishMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x7F2411205E3E44BE, GameType.DS)]
    public class DSUIDeviceWishMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_OrderComplete;
        [RTTI.Member(7, 0x30, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_NotQpidConnection;
        [RTTI.Member(8, 0x38, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CatalogNotExists;
        [RTTI.Member(9, 0x40, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_LockedWithStoryProgress;
        [RTTI.Member(10, 0x48, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_StolenCataloguePrinter;
        [RTTI.Member(11, 0x50, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_NotEnoughParkingCapacity;
        [RTTI.Member(12, 0x58, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_ReceivableBaggageCountMax;
        [RTTI.Member(13, 0x60, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_ReceivableMaterialCountMax;
        [RTTI.Member(14, 0x68, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionCreatableItemLimit;
        [RTTI.Member(15, 0x70, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionCreatableMaterialLimit;
        [RTTI.Member(16, 0x78, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionCreatableCartBaggageLimit;
        [RTTI.Member(17, 0x80, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionCreatableDummyBaggageLimit;
        [RTTI.Member(18, 0x88, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionVehicleIntoCartAlready;
        [RTTI.Member(19, 0x90, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionVehicleBodyOn;
        [RTTI.Member(20, 0x98, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionVehicleAnother;
        [RTTI.Member(21, 0xA0, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionVehicleMule;
        [RTTI.Member(22, 0xA8, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_CautionVehicleNotSpace;
        [RTTI.Member(23, 0xB0, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_SameDeliveryPointBaggageDuplicate;
        [RTTI.Member(24, 0xB8, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_SupplyNetworkOffline;
        [RTTI.Member(25, 0xC0, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> DialogText_SupplyNetworkFatalError;
        [RTTI.Member(37, 0xC8, "ConfirmDialog")] public Ref<LocalizedTextResource> ConfirmDialogText_Cancel;
        [RTTI.Member(38, 0xD0, "ConfirmDialog")] public Ref<LocalizedTextResource> ConfirmDialogText_CancelExtractMaterial;
        [RTTI.Member(39, 0xD8, "ConfirmDialog")] public Ref<LocalizedTextResource> ConfirmDialogText_VehicleCreateOver;
        [RTTI.Member(40, 0xE0, "ConfirmDialog")] public Ref<LocalizedTextResource> ConfirmDialogText_SupplyRequestConfirm;
        [RTTI.Member(26, 0xE8, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> SizeText;
        [RTTI.Member(27, 0xF0, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> WeightText;
        [RTTI.Member(28, 0xF8, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> OnlinePostFofmatText;
        [RTTI.Member(29, 0x100, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> OnlineSafetyHouseFofmatText;
        [RTTI.Member(30, 0x108, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> BaggageSizeSText;
        [RTTI.Member(31, 0x110, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> BaggageSizeMText;
        [RTTI.Member(32, 0x118, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> BaggageSizeLText;
        [RTTI.Member(33, 0x120, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> BaggageSizeLLText;
        [RTTI.Member(34, 0x128, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> OrderConfirmNormalText;
        [RTTI.Member(35, 0x130, "Dialog_LocalizedText")] public Ref<LocalizedTextResource> OrderConfirmExtractMaterialText;
        [RTTI.Member(42, 0x138, "TitleResource")] public DSUIWishMenuTitleResource EquipmentOrderTitleResource;
        [RTTI.Member(43, 0x148, "TitleResource")] public DSUIWishMenuTitleResource ExtractMaterialTitleResource;
        [RTTI.Member(44, 0x158, "TitleResource")] public DSUIWishMenuTitleResource SupplyTitleResource_REQUEST;
        [RTTI.Member(45, 0x168, "TitleResource")] public DSUIWishMenuTitleResource SupplyTitleResource_CATALOG;
        [RTTI.Member(46, 0x178, "TitleResource")] public DSUIWishMenuTitleResource SupplyTitleResource_DELIVERY_POINT_SELECT;
        [RTTI.Member(62, 0x188, "MaterialIcon")] public Ref<UITexture> MaterialIcon_Crystal;
        [RTTI.Member(63, 0x190, "MaterialIcon")] public Ref<UITexture> MaterialIcon_Resin;
        [RTTI.Member(64, 0x198, "MaterialIcon")] public Ref<UITexture> MaterialIcon_Metal;
        [RTTI.Member(65, 0x1A0, "MaterialIcon")] public Ref<UITexture> MaterialIcon_Ceramic;
        [RTTI.Member(66, 0x1A8, "MaterialIcon")] public Ref<UITexture> MaterialIcon_ChemicalSubstance;
        [RTTI.Member(67, 0x1B0, "MaterialIcon")] public Ref<UITexture> MaterialIcon_SpecialAlloy;
        [RTTI.Member(48, 0x1B8, "Tab")] public DSUIWishMenuTabResource TabResource_NEW;
        [RTTI.Member(49, 0x1C8, "Tab")] public DSUIWishMenuTabResource TabResource_DELIVERY_MACHINE;
        [RTTI.Member(50, 0x1D8, "Tab")] public DSUIWishMenuTabResource TabResource_EQUIPMENT;
        [RTTI.Member(51, 0x1E8, "Tab")] public DSUIWishMenuTabResource TabResource_WEAPON;
        [RTTI.Member(52, 0x1F8, "Tab")] public DSUIWishMenuTabResource TabResource_RAW_MATERIAL;
        [RTTI.Member(53, 0x208, "Tab")] public DSUIWishMenuTabResource TabResource_RAW_MATERIAL_CRYSTAL;
        [RTTI.Member(54, 0x218, "Tab")] public DSUIWishMenuTabResource TabResource_RAW_MATERIAL_RESIN;
        [RTTI.Member(55, 0x228, "Tab")] public DSUIWishMenuTabResource TabResource_RAW_MATERIAL_METAL;
        [RTTI.Member(56, 0x238, "Tab")] public DSUIWishMenuTabResource TabResource_RAW_MATERIAL_CERAMIC;
        [RTTI.Member(57, 0x248, "Tab")] public DSUIWishMenuTabResource TabResource_RAW_MATERIAL_CHEMICALS;
        [RTTI.Member(58, 0x258, "Tab")] public DSUIWishMenuTabResource TabResource_RAW_MATERIAL_ALLOY;
        [RTTI.Member(59, 0x268, "Tab")] public DSUIWishMenuTabResource TabResource_BACKPACK;
        [RTTI.Member(60, 0x278, "Tab")] public DSUIWishMenuTabResource TabResource_VEHICLE;
    }

    [RTTI.Serializable(0x273CBAF609B13EEC, GameType.DS)]
    public class DSUIDeviceWishMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x74136675AA5CE2ED, GameType.DS)]
    public class DSUIDeviceWishMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> ContentsPnlResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> BridgesTabboxElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> BridgesRootPnlElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> DialogPnlElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> ConfirmDialogPnlResource;
        [RTTI.Member(12, 0x60, "Logic")] public Ref<MenuElementResource> BridgesGrdElementResource;
        [RTTI.Member(13, 0x68, "Logic")] public Ref<MenuElementResource> CatalogGridSetElementResource;
        [RTTI.Member(14, 0x70, "Logic")] public Ref<MenuElementResource> CatalogInfoPnlElementResource;
        [RTTI.Member(15, 0x78, "Logic")] public Ref<MenuElementResource> SelectItemDetailElementResource;
        [RTTI.Member(16, 0x80, "Logic")] public Ref<MenuElementResource> CatalogCountInfoPnlResource;
        [RTTI.Member(17, 0x88, "Logic")] public Ref<MenuElementResource> OrderCounterPnlResource;
        [RTTI.Member(18, 0x90, "Logic")] public Ref<MenuElementResource> OrderNumCounterLeftArrowElementResource;
        [RTTI.Member(19, 0x98, "Logic")] public Ref<MenuElementResource> OrderNumCounterRightArrowElementResource;
        [RTTI.Member(20, 0xA0, "Logic")] public Ref<MenuElementResource> CartDialogElementResource;
        [RTTI.Member(21, 0xA8, "Logic")] public Ref<MenuElementResource> CartSelectViewElementResource;
        [RTTI.Member(22, 0xB0, "Logic")] public Ref<MenuElementResource> OrderButtonPnlResource;
        [RTTI.Member(23, 0xB8, "Logic")] public Ref<MenuElementResource> SupplyRequestPnlResource;
        [RTTI.Member(24, 0xC0, "Logic")] public Ref<MenuElementResource> SupplyRequestListResource;
        [RTTI.Member(25, 0xC8, "Logic")] public Ref<MenuElementResource> SupplyPointPnlResource;
        [RTTI.Member(26, 0xD0, "Logic")] public Ref<MenuElementResource> SupplyPointListResource;
        [RTTI.Member(27, 0xD8, "Logic")] public Ref<MenuElementResource> TutorialOKButtonPnlResource;
        [RTTI.Member(28, 0xE0, "Logic")] public Ref<MenuElementResource> RadioKeyHelpPnlResource;
        [RTTI.Member(29, 0xE8, "Logic")] public Ref<MenuElementResource> JointResource;
        [RTTI.Member(30, 0xF0, "Logic")] public Ref<MenuElementResource> LoadingIconResource;
        [RTTI.Member(32, 0xF8, "Animation")] public Ref<MenuAnimationResource> CatalogFocusReceiveAnimation;
        [RTTI.Member(33, 0x100, "Animation")] public Ref<MenuAnimationResource> CatalogFocusLostAnimation;
        [RTTI.Member(34, 0x108, "Animation")] public Ref<MenuAnimationResource> OrderCountPanelShowAnimation;
        [RTTI.Member(35, 0x110, "Animation")] public Ref<MenuAnimationResource> OrderNumCounterArrowBlinkAnimation;
        [RTTI.Member(36, 0x118, "Animation")] public Ref<MenuAnimationResource> ContentsShowAnimation;
        [RTTI.Member(37, 0x120, "Animation")] public Ref<MenuAnimationResource> ContentsHideAnimation;
        [RTTI.Member(39, 0x128, "Sound")] public Ref<SoundResource> OrderNumDecideSoundResource;
        [RTTI.Member(40, 0x130, "Sound")] public Ref<SoundResource> OrderConfirmSoundResource;
        [RTTI.Member(41, 0x138, "Sound")] public Ref<SoundResource> UpdateCountSoundResource;
        [RTTI.Member(42, 0x140, "Sound")] public Ref<SoundResource> DialogAppearSoundResource;
        [RTTI.Member(44, 0x148, "Trophy")] public Ref<TrophyResource> SupplyRequestTrophyResource;
        [RTTI.Member(46, 0x150, "CatalogParameter")] public int ColumnCount;
        [RTTI.Member(47, 0x154, "CatalogParameter")] public int MaterialConsumedCountTotalFrame;
    }

    [RTTI.Serializable(0x850174B4B9EB6068, GameType.DS)]
    public class DSUIDeviceWishMenuOrderHistoryDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x91C225B739142C25, GameType.DS)]
    public class DSUIDotsightReticleFullAutoParam
    {
        [RTTI.Member(0, 0x0)] public float MoveRadiusMaxRange;
        [RTTI.Member(1, 0x4)] public float MoveRadiusMinRange;
        [RTTI.Member(2, 0x8)] public int FrameScale;
    }

    [RTTI.Serializable(0x54181515385F04BF, GameType.DS)]
    public class DSUIDotsightReticleHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xD79C7CD5ABFD97B0, GameType.DS)]
    public class DSUIDotsightReticleHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "Root_Element")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "Root_Element")] public Ref<HUDElementResource> DotRootElement;
        [RTTI.Member(20, 0x88, "Animator")] public Ref<DSUIHUDAnimatorResource> ActivateAnimator;
        [RTTI.Member(21, 0x90, "Animator")] public Ref<DSUIHUDAnimatorResource> DeactivateAnimator;
        [RTTI.Member(22, 0x98, "Animator")] public Ref<DSUIHUDAnimatorResource> DotIntroAnimator;
        [RTTI.Member(23, 0xA0, "Animator")] public Ref<DSUIHUDAnimatorResource> DotOutroAnimator;
        [RTTI.Member(24, 0xA8, "Animator")] public Ref<DSUIHUDAnimatorResource> DotIdleLoopAnimator;
        [RTTI.Member(25, 0xB0, "Animator")] public Ref<DSUIHUDAnimatorResource> DotChangeDefaultAnimator;
        [RTTI.Member(26, 0xB8, "Animator")] public Ref<DSUIHUDAnimatorResource> DotChangeEnemyAnimator;
        [RTTI.Member(27, 0xC0, "Animator")] public Ref<DSUIHUDAnimatorResource> DotRecoilDefaultAnimator;
        [RTTI.Member(28, 0xC8, "Animator")] public Ref<DSUIHUDAnimatorResource> DotRecoilEnemyAnimator;
        [RTTI.Member(30, 0xD0, "Parameter")] public DSUIDotsightReticleSemiAutoParam SemiAutoParam;
        [RTTI.Member(31, 0xDC, "Parameter")] public DSUIDotsightReticleFullAutoParam FullAutoParam;
        [RTTI.Member(33, 0xE8, "Curve")] public Ref<CurveResource> DotIntroMoveEasingCurve;
        [RTTI.Member(34, 0xF0, "Curve")] public Ref<CurveResource> DotOutroMoveEasingCurve;
    }

    [RTTI.Serializable(0xE3E8B7DE974F5060, GameType.DS)]
    public class DSUIDotsightReticleSemiAutoParam
    {
        [RTTI.Member(0, 0x0)] public float MaxMoveDistance;
        [RTTI.Member(1, 0x4)] public int IntroFrameScale;
        [RTTI.Member(2, 0x8)] public int OutroFrameScale;
    }

    [RTTI.Serializable(0xA3DAD7DC5DE10FA9, GameType.DS)]
    public class DSUIFadeHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x9D98960DB6CBA18B, GameType.DS)]
    public class DSUIFadeHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDImageResource> FadeImageElement;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<CurveResource> FadeInShortCurve;
        [RTTI.Member(20, 0x90, "DS_Logic")] public Ref<CurveResource> FadeInMiddleCurve;
        [RTTI.Member(21, 0x98, "DS_Logic")] public Ref<CurveResource> FadeInLongCurve;
        [RTTI.Member(22, 0xA0, "DS_Logic")] public Ref<CurveResource> FadeInSuperLongCurve;
        [RTTI.Member(23, 0xA8, "DS_Logic")] public Ref<CurveResource> FadeInImmediatelyCurve;
        [RTTI.Member(24, 0xB0, "DS_Logic")] public Ref<CurveResource> FadeInCustomCurve;
        [RTTI.Member(25, 0xB8, "DS_Logic")] public Ref<CurveResource> FadeOutShortCurve;
        [RTTI.Member(26, 0xC0, "DS_Logic")] public Ref<CurveResource> FadeOutMiddleCurve;
        [RTTI.Member(27, 0xC8, "DS_Logic")] public Ref<CurveResource> FadeOutLongCurve;
        [RTTI.Member(28, 0xD0, "DS_Logic")] public Ref<CurveResource> FadeOutSuperLongCurve;
        [RTTI.Member(29, 0xD8, "DS_Logic")] public Ref<CurveResource> FadeOutImmediatelyCurve;
        [RTTI.Member(30, 0xE0, "DS_Logic")] public Ref<CurveResource> FadeOutCustomCurve;
    }

    [RTTI.Serializable(0xCF802D707A0EABE5, GameType.DS)]
    public class DSUIFadeSequenceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x460C95504A14DE4F, GameType.DS)]
    public class DSUIFadeSequenceEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public EDSUIFadeType FadeType;
        [RTTI.Member(7, 0x29, "Logic")] public EDSUIFadeColorType ColorType;
        [RTTI.Member(8, 0x2A, "Logic")] public EDSUIFadeTimeType TimeType;
        [RTTI.Member(9, 0x2C, "Logic")] public float CustomTimeSec;
        [RTTI.Member(10, 0x30, "Logic")] public bool DontExecOnSkip;
    }

    [RTTI.Serializable(0xCFBBB6164C82560F, GameType.DS)]
    public class DSUIGameDesignParameters : Resource
    {
        [RTTI.Member(3, 0x20, "MarkerHUD")] public float MarkerHUDVisibleDistance;
        [RTTI.Member(4, 0x24, "MarkerHUD")] public float MarkerHUDGoalVisibleDistance;
        [RTTI.Member(5, 0x28, "MarkerHUD")] public float MarkerHUDGoalCautionNearDistance;
        [RTTI.Member(6, 0x2C, "MarkerHUD")] public float MarkerHUDGoalCautionFarDistance;
        [RTTI.Member(7, 0x30, "MarkerHUD")] public float MarkerHUDGoalCautionVisibleDistance;
        [RTTI.Member(8, 0x34, "MarkerHUD")] public float MarkerHUDGoalShowMeterDistance;
        [RTTI.Member(9, 0x38, "MarkerHUD")] public float MarkerHUDBaggageFoundVisibleDistance;
        [RTTI.Member(10, 0x3C, "MarkerHUD")] public float MarkerHUDBaggageCarriedVisibleDistance;
        [RTTI.Member(11, 0x40, "MarkerHUD")] public float MarkerHUDBaggageWatchTowerVisibleDistance;
        [RTTI.Member(12, 0x44, "MarkerHUD")] public float MarkerHUDSearchedVisibleDistance;
        [RTTI.Member(13, 0x48, "MarkerHUD")] public float MarkerHUDSearchedByWatchTowerVisibleDistance;
        [RTTI.Member(14, 0x4C, "MarkerHUD")] public float MarkerHUDZiplineInZiplineModeVisibleDistance;
        [RTTI.Member(15, 0x50, "MarkerHUD")] public float _0;
        [RTTI.Member(16, 0x54, "MarkerHUD")] public float MarkerHUDUserMarkerRemoveDistance;
        [RTTI.Member(17, 0x58, "MarkerHUD")] public float MarkerHUDUserMarkerFarAwayDistance;
        [RTTI.Member(18, 0x5C, "MarkerHUD")] public float MarkerHUDMuleOdradekVisibleDistance;
        [RTTI.Member(19, 0x60, "MarkerHUD")] public float MarkerHUDLikeVisibleDistance;
        [RTTI.Member(20, 0x64, "MarkerHUD")] public float MarkerHUDGrenadeVisibleDistance;
        [RTTI.Member(21, 0x68, "MarkerHUD")] public float MarkerHUDMuleStickyGunVisibleDistance;
        [RTTI.Member(22, 0x6C, "MarkerHUD")] public float MarkerHUDDetailInfoVisibleDistance;
        [RTTI.Member(23, 0x70, "MarkerHUD")] public float MarkerHUDBaggageNameVisibleDistance;
        [RTTI.Member(24, 0x74, "MarkerHUD")] public float MarkerHUDConstructionNGVisibleDistance;
        [RTTI.Member(25, 0x78, "MarkerHUD")] public Ref<CurveResource> MarkerHUDReverbModeRateCurve;
        [RTTI.Member(26, 0x80, "MarkerHUD")] public float MarkerHUDEchoSec;
        [RTTI.Member(27, 0x84, "MarkerHUD")] public float MarkerHUDLifeGaugeCautionColorRate;
        [RTTI.Member(29, 0x88, "DeviceBaggageMenu")] public float ContentsLifeRateBorder;
        [RTTI.Member(30, 0x8C, "DeviceBaggageMenu")] public float ContentsRemainMidRate;
        [RTTI.Member(31, 0x90, "DeviceBaggageMenu")] public float ContentsRemainMinRate;
        [RTTI.Member(32, 0x94, "DeviceBaggageMenu")] public float ContentsRemainEmptyRate;
        [RTTI.Member(33, 0x98, "DeviceBaggageMenu")] public uint32 AllPrivateBoxBaggageCountCapacity;
        [RTTI.Member(34, 0x9C, "DeviceBaggageMenu")] public uint32 AllPrivateBoxBaggageCountWarning;
        [RTTI.Member(36, 0xA0, "LandmarkTelopHUD")] public float LandmarkTelopDisplaySec;
        [RTTI.Member(38, 0xA4, "BatteryInfo")] public float LowBatteryChangingRate;
        [RTTI.Member(39, 0xA8, "BatteryInfo")] public float MediumBatteryChangingRate;
        [RTTI.Member(41, 0xAC, "BootsInfo")] public float LowBootsLifeChangingRate;
        [RTTI.Member(43, 0xB0, "BBStressInfo")] public float LowBBStressChangingRate;
        [RTTI.Member(45, 0xB4, "DamageInfo")] public float LowVehicleDamageChangingRate;
        [RTTI.Member(46, 0xB8, "DamageInfo")] public float MediumVehicleDamageChangingRate;
        [RTTI.Member(47, 0xBC, "DamageInfo")] public float LowConstructionDamageChangingRate;
        [RTTI.Member(48, 0xC0, "DamageInfo")] public float MediumConstructionDamageChangingRate;
        [RTTI.Member(49, 0xC4, "DamageInfo")] public float BackpackCoverLowDamageChangingRate;
        [RTTI.Member(50, 0xC8, "DamageInfo")] public float BackpackCoverMediumDamageChangingRate;
        [RTTI.Member(51, 0xCC, "DamageInfo")] public float BackpackCoverDamageChangingRateIcon;
        [RTTI.Member(52, 0xD0, "DamageInfo")] public float ConstructionRecoverableDamageRate;
        [RTTI.Member(54, 0xD4, "WishMenu")] public UUIDRef<DSDeliveryPointInfoResource> CanNotOrderDeliveryPoint;
        [RTTI.Member(56, 0xE4, "RecycleMenu")] public UUIDRef<DSDeliveryPointInfoResource> RecycleCrystalDeliveryPoint;
        [RTTI.Member(58, 0xF4, "MissionResultMenu")] public int TrophyBaggageCount;
        [RTTI.Member(59, 0xF8, "MissionResultMenu")] public float TrophyBaggageWeight;
        [RTTI.Member(60, 0xFC, "MissionResultMenu")] public float TrophyWalkDistance;
        [RTTI.Member(61, 0x100, "MissionResultMenu")] public int TrophySimpleMissionCount;
        [RTTI.Member(62, 0x104, "MissionResultMenu")] public int TrophyRankSSCountPerEvaluation;
        [RTTI.Member(63, 0x108, "MissionResultMenu")] public int TrophyRankSSSCountPerEvaluation;
        [RTTI.Member(65, 0x110, "SamPowerUp")] public Array<int> StructureCooperationRequestCounts;
        [RTTI.Member(67, 0x120, "HoloNameHUD")] public float DisplaySecWhenEchoVoice;
        [RTTI.Member(68, 0x124, "HoloNameHUD")] public float DisplaySecSearchedBySensor;
        [RTTI.Member(70, 0x128, "InfoLogHUD")] public float DelayPhaseSec;
        [RTTI.Member(72, 0x12C, "MailMenu")] public UUIDRef<DSHouseholdPersonResource> GLaDOSPerson;
        [RTTI.Member(74, 0x140, "DeliveryMenu")] public Array<uint64> TodoUnupdatedDialogMissionIds;
        [RTTI.Member(75, 0x150, "DeliveryMenu")] public Array<UUIDRef<DSDeliveryPointInfoResource>> TodoUnupdatedDialogDeliveryPoints;
        [RTTI.Member(77, 0x160, "TimerHUD")] public float TimerHUDTimeElapsedDicisionSec;
    }

    [RTTI.Serializable(0x5EAB6437E7582E4A, GameType.DS)]
    public class DSUIGameOverMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x481070824C263C1B, GameType.DS)]
    public class DSUIGameOverMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x30, "Texts")] public Ref<LocalizedTextResource> ListItem_Continue;
        [RTTI.Member(7, 0x38, "Texts")] public Ref<LocalizedTextResource> ListItem_Load;
        [RTTI.Member(8, 0x40, "Texts")] public Ref<LocalizedTextResource> ListItem_ReturnTitle;
        [RTTI.Member(10, 0x48, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsBrokenBaggage;
        [RTTI.Member(11, 0x58, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsBrokenBodyBag;
        [RTTI.Member(12, 0x68, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsBrokenBodyBagWithDeadBody;
        [RTTI.Member(13, 0x78, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsAttackBodyBag;
        [RTTI.Member(14, 0x88, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsAttackBodyBagWithDeadBody;
        [RTTI.Member(15, 0x98, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsStolenBodyBag;
        [RTTI.Member(16, 0xA8, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsAnnihilationBodyBag;
        [RTTI.Member(17, 0xB8, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsTimeLimit;
        [RTTI.Member(18, 0xC8, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsNuclearBombExplosion;
        [RTTI.Member(19, 0xD8, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsDeadByWarriors;
        [RTTI.Member(20, 0xE8, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsDeadByHiggs;
        [RTTI.Member(21, 0xF8, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsDeadByPoison;
        [RTTI.Member(22, 0x108, "GameOverReasons")] public DSUIGameOverReason GameOverReason_OpenAsDeadByHunter;
    }

    [RTTI.Serializable(0x190233CE64838D0B, GameType.DS)]
    public class DSUIGameOverMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xF07C6909797F2A81, GameType.DS)]
    public class DSUIGameOverMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> ListResource;
        [RTTI.Member(11, 0x38, "Sound")] public Ref<SoundResource> GameOverSoundResource;
        [RTTI.Member(9, 0x40, "Children")] public Ref<MenuElementResource> LoadPanelElementResource;
    }

    [RTTI.Serializable(0x674CD1DB2AE5F4D, GameType.DS)]
    public class DSUIGameOverReason
    {
        [RTTI.Member(0, 0x0)] public StreamingRef<UITexture> BgTexture;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> Text;
    }

    [RTTI.Serializable(0xE7013A9B5F6F6F0B, GameType.DS)]
    public class DSUIGamePadIconResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EDeviceFunction DeviceFunction;
        [RTTI.Member(3, 0x28)] public Ref<DSUIInputIconResource> InputIcon_Default;
        [RTTI.Member(4, 0x30)] public Ref<DSUIInputIconResource> InputIcon_TypeA;
        [RTTI.Member(5, 0x38)] public Ref<DSUIInputIconResource> InputIcon_TypeB;
        [RTTI.Member(6, 0x40)] public Ref<DSUIInputIconResource> InputIcon_TypeC;
    }

    [RTTI.Serializable(0xCA47DE3C1FE0C2D1, GameType.DS)]
    public class DSUIGeneralIconResource : Resource
    {
        [RTTI.Member(3, 0x20, "ButtonIcons")] public Ref<UITexture> Button_Circle;
        [RTTI.Member(4, 0x28, "ButtonIcons")] public Ref<UITexture> Button_Cross;
        [RTTI.Member(5, 0x30, "ButtonIcons")] public Ref<UITexture> Button_Square;
        [RTTI.Member(6, 0x38, "ButtonIcons")] public Ref<UITexture> Button_Triangle;
        [RTTI.Member(7, 0x40, "ButtonIcons")] public Ref<UITexture> Button_DPadUp;
        [RTTI.Member(8, 0x48, "ButtonIcons")] public Ref<UITexture> Button_DPadDown;
        [RTTI.Member(9, 0x50, "ButtonIcons")] public Ref<UITexture> Button_DPadLeft;
        [RTTI.Member(10, 0x58, "ButtonIcons")] public Ref<UITexture> Button_DPadRight;
        [RTTI.Member(11, 0x60, "ButtonIcons")] public Ref<UITexture> Button_L1;
        [RTTI.Member(12, 0x68, "ButtonIcons")] public Ref<UITexture> Button_L2;
        [RTTI.Member(13, 0x70, "ButtonIcons")] public Ref<UITexture> Button_L3;
        [RTTI.Member(14, 0x78, "ButtonIcons")] public Ref<UITexture> Button_R1;
        [RTTI.Member(15, 0x80, "ButtonIcons")] public Ref<UITexture> Button_R2;
        [RTTI.Member(16, 0x88, "ButtonIcons")] public Ref<UITexture> Button_R3;
        [RTTI.Member(17, 0x90, "ButtonIcons")] public Ref<UITexture> LStick;
        [RTTI.Member(18, 0x98, "ButtonIcons")] public Ref<UITexture> RStick;
        [RTTI.Member(19, 0xA0, "ButtonIcons")] public Ref<UITexture> Button_Options;
        [RTTI.Member(20, 0xA8, "ButtonIcons")] public Ref<UITexture> Button_Touchpad;
        [RTTI.Member(22, 0xB0, "HoldButton")] public Ref<UITexture> HoldButton_Circle;
        [RTTI.Member(23, 0xB8, "HoldButton")] public Ref<UITexture> HoldButton_Cross;
        [RTTI.Member(24, 0xC0, "HoldButton")] public Ref<UITexture> HoldButton_Square;
        [RTTI.Member(25, 0xC8, "HoldButton")] public Ref<UITexture> HoldButton_Triangle;
        [RTTI.Member(26, 0xD0, "HoldButton")] public Ref<UITexture> HoldButton_DPadUp;
        [RTTI.Member(27, 0xD8, "HoldButton")] public Ref<UITexture> HoldButton_DPadDown;
        [RTTI.Member(28, 0xE0, "HoldButton")] public Ref<UITexture> HoldButton_DPadLeft;
        [RTTI.Member(29, 0xE8, "HoldButton")] public Ref<UITexture> HoldButton_DPadRight;
        [RTTI.Member(30, 0xF0, "HoldButton")] public Ref<UITexture> HoldButton_L1;
        [RTTI.Member(31, 0xF8, "HoldButton")] public Ref<UITexture> HoldButton_L2;
        [RTTI.Member(32, 0x100, "HoldButton")] public Ref<UITexture> HoldButton_L3;
        [RTTI.Member(33, 0x108, "HoldButton")] public Ref<UITexture> HoldButton_R1;
        [RTTI.Member(34, 0x110, "HoldButton")] public Ref<UITexture> HoldButton_R2;
        [RTTI.Member(35, 0x118, "HoldButton")] public Ref<UITexture> HoldButton_R3;
        [RTTI.Member(36, 0x120, "HoldButton")] public Ref<UITexture> HoldButton_Options;
        [RTTI.Member(38, 0x128, "MashButton")] public Ref<UITexture> MashButton_Square;
        [RTTI.Member(40, 0x130, "FunctionButton")] public Ref<UITexture> Func_LStick_PushToUp;
        [RTTI.Member(41, 0x138, "FunctionButton")] public Ref<UITexture> Func_LStick_PushToDown;
        [RTTI.Member(42, 0x140, "FunctionButton")] public Ref<UITexture> Func_LStick_PushToLeft;
        [RTTI.Member(43, 0x148, "FunctionButton")] public Ref<UITexture> Func_LStick_PushToRight;
        [RTTI.Member(44, 0x150, "FunctionButton")] public Ref<UITexture> Func_LStick_Rotate;
        [RTTI.Member(45, 0x158, "FunctionButton")] public Ref<UITexture> Func_RStick_PushToUp;
        [RTTI.Member(46, 0x160, "FunctionButton")] public Ref<UITexture> Func_RStick_PushToDown;
        [RTTI.Member(47, 0x168, "FunctionButton")] public Ref<UITexture> Func_RStick_PushToLeft;
        [RTTI.Member(48, 0x170, "FunctionButton")] public Ref<UITexture> Func_RStick_PushToRight;
        [RTTI.Member(49, 0x178, "FunctionButton")] public Ref<UITexture> Func_RStick_Rotate;
        [RTTI.Member(50, 0x180, "FunctionButton")] public Ref<UITexture> Func_RStick_AllDir;
        [RTTI.Member(51, 0x188, "FunctionButton")] public Ref<UITexture> Func_LeverGacha;
        [RTTI.Member(52, 0x190, "FunctionButton")] public Ref<UITexture> Func_L2R2;
        [RTTI.Member(53, 0x198, "FunctionButton")] public Ref<UITexture> Func_DPadUpDown;
        [RTTI.Member(54, 0x1A0, "FunctionButton")] public Ref<UITexture> Func_DpadLeftRight;
        [RTTI.Member(55, 0x1A8, "FunctionButton")] public Ref<UITexture> Func_Shake;
        [RTTI.Member(57, 0x1B0, "ButtonHoldIcons")] public Ref<UITexture> ButtonHold01Texture;
        [RTTI.Member(58, 0x1B8, "ButtonHoldIcons")] public Ref<UITexture> ButtonHold02Texture;
        [RTTI.Member(59, 0x1C0, "ButtonHoldIcons")] public Ref<UITexture> ButtonHold03Texture;
        [RTTI.Member(60, 0x1C8, "ButtonHoldIcons")] public Ref<UITexture> ButtonHold04Texture;
        [RTTI.Member(61, 0x1D0, "ButtonHoldIcons")] public Ref<UITexture> ButtonHold05Texture;
        [RTTI.Member(63, 0x1D8, "MenuIcons")] public Ref<UITexture> MenuIconFrom;
        [RTTI.Member(64, 0x1E0, "MenuIcons")] public Ref<UITexture> MenuIconTo;
        [RTTI.Member(65, 0x1E8, "MenuIcons")] public Ref<UITexture> MenuIconBroken;
        [RTTI.Member(66, 0x1F0, "MenuIcons")] public Ref<UITexture> MenuIconPersonal;
        [RTTI.Member(68, 0x1F8, "MenuIcons_Mission")] public Ref<UITexture> MenuIconMissionTypeSub;
        [RTTI.Member(69, 0x200, "MenuIcons_Mission")] public Ref<UITexture> MenuIconMissionTypeMain;
        [RTTI.Member(70, 0x208, "MenuIcons_Mission")] public Ref<UITexture> MenuIconMissionTypeSimple;
        [RTTI.Member(71, 0x210, "MenuIcons_Mission")] public Ref<UITexture> MenuIconMissionTypeLost;
        [RTTI.Member(72, 0x218, "MenuIcons_Mission")] public Ref<UITexture> MenuIconMissionTypeAutomation;
        [RTTI.Member(74, 0x220, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigTruck;
        [RTTI.Member(75, 0x228, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigMoto;
        [RTTI.Member(76, 0x230, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigCart;
        [RTTI.Member(77, 0x238, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigField;
        [RTTI.Member(78, 0x240, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigPrivateBox;
        [RTTI.Member(79, 0x248, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigPublicBox;
        [RTTI.Member(80, 0x250, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigSupplyBox;
        [RTTI.Member(81, 0x258, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigSamEquip;
        [RTTI.Member(82, 0x260, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigSamLock;
        [RTTI.Member(83, 0x268, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigSamPouch;
        [RTTI.Member(84, 0x270, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigSamRaincover;
        [RTTI.Member(85, 0x278, "MenuIcons_Rig")] public Ref<UITexture> MenuIconRigSamDef;
        [RTTI.Member(87, 0x280, "MenuIcons_Size")] public Ref<UITexture> MenuIconSizeLL;
        [RTTI.Member(88, 0x288, "MenuIcons_Size")] public Ref<UITexture> MenuIconSizeL;
        [RTTI.Member(89, 0x290, "MenuIcons_Size")] public Ref<UITexture> MenuIconSizeM;
        [RTTI.Member(90, 0x298, "MenuIcons_Size")] public Ref<UITexture> MenuIconSizeS;
        [RTTI.Member(91, 0x2A0, "MenuIcons_Size")] public Ref<UITexture> MenuIconSizeBodyBag;
        [RTTI.Member(93, 0x2A8, "ResultIcons_Size")] public Ref<UITexture> ResultIconSizeLL;
        [RTTI.Member(94, 0x2B0, "ResultIcons_Size")] public Ref<UITexture> ResultIconSizeL;
        [RTTI.Member(95, 0x2B8, "ResultIcons_Size")] public Ref<UITexture> ResultIconSizeM;
        [RTTI.Member(96, 0x2C0, "ResultIcons_Size")] public Ref<UITexture> ResultIconSizeS;
        [RTTI.Member(97, 0x2C8, "ResultIcons_Size")] public Ref<UITexture> ResultIconSizeBodyBag;
        [RTTI.Member(98, 0x2D0, "ResultIcons_Size")] public Ref<UITexture> ResultIconSizeBBPod;
        [RTTI.Member(99, 0x2D8, "ResultIcons_Size")] public Ref<UITexture> ResultIconSizeNoData;
        [RTTI.Member(101, 0x2E0, "WepIcons")] public Ref<UITexture> BT;
        [RTTI.Member(102, 0x2E8, "WepIcons")] public Ref<UITexture> Kill;
        [RTTI.Member(103, 0x2F0, "WepIcons")] public Ref<UITexture> NonKill;
        [RTTI.Member(104, 0x2F8, "WepIcons")] public Ref<UITexture> Structure;
        [RTTI.Member(105, 0x300, "WepIcons")] public Ref<UITexture> StaminaCare;
        [RTTI.Member(108, 0x308, "WepIcons")] public Ref<UITexture> RepairTool;
        [RTTI.Member(107, 0x310, "WepIcons")] public Ref<UITexture> BloodCare;
        [RTTI.Member(109, 0x318, "WepIcons")] public Ref<UITexture> CommonTool;
        [RTTI.Member(110, 0x320, "WepIcons")] public Ref<UITexture> Shoes;
        [RTTI.Member(106, 0x328, "WepIcons")] public Ref<UITexture> Battery;
        [RTTI.Member(111, 0x330, "WepIcons")] public Ref<UITexture> Odradek;
        [RTTI.Member(112, 0x338, "WepIcons")] public Ref<UITexture> SuitParts;
        [RTTI.Member(114, 0x340, "WepIcons_Small")] public Ref<UITexture> BTSmall;
        [RTTI.Member(115, 0x348, "WepIcons_Small")] public Ref<UITexture> KillSmall;
        [RTTI.Member(116, 0x350, "WepIcons_Small")] public Ref<UITexture> NonKillSmall;
        [RTTI.Member(117, 0x358, "WepIcons_Small")] public Ref<UITexture> StructureSmall;
        [RTTI.Member(118, 0x360, "WepIcons_Small")] public Ref<UITexture> StaminaCareSmall;
        [RTTI.Member(121, 0x368, "WepIcons_Small")] public Ref<UITexture> RepairToolSmall;
        [RTTI.Member(120, 0x370, "WepIcons_Small")] public Ref<UITexture> BloodCareSmall;
        [RTTI.Member(122, 0x378, "WepIcons_Small")] public Ref<UITexture> CommonToolSmall;
        [RTTI.Member(123, 0x380, "WepIcons_Small")] public Ref<UITexture> ShoesSmall;
        [RTTI.Member(119, 0x388, "WepIcons_Small")] public Ref<UITexture> BatterySmall;
        [RTTI.Member(124, 0x390, "WepIcons_Small")] public Ref<UITexture> OdradekSmall;
        [RTTI.Member(125, 0x398, "WepIcons_Small")] public Ref<UITexture> SuitPartsSmall;
        [RTTI.Member(127, 0x3A0, "QpidStateIcons")] public Ref<UITexture> QpidStateUninsured;
        [RTTI.Member(128, 0x3A8, "QpidStateIcons")] public Ref<UITexture> QpidStateFragile;
        [RTTI.Member(129, 0x3B0, "QpidStateIcons")] public Ref<UITexture> QpidStateFirstBridges;
        [RTTI.Member(130, 0x3B8, "QpidStateIcons")] public Ref<UITexture> QpidStateSecondBridges;
        [RTTI.Member(131, 0x3C0, "QpidStateIcons")] public Ref<UITexture> QpidStateUCA;
        [RTTI.Member(133, 0x3C8, "EvaluationIcons")] public Ref<UITexture> EvaluationSpeed;
        [RTTI.Member(134, 0x3D0, "EvaluationIcons")] public Ref<UITexture> EvaluationDelivery;
        [RTTI.Member(135, 0x3D8, "EvaluationIcons")] public Ref<UITexture> EvaluationSafety;
        [RTTI.Member(136, 0x3E0, "EvaluationIcons")] public Ref<UITexture> EvaluationBridgeLink;
        [RTTI.Member(137, 0x3E8, "EvaluationIcons")] public Ref<UITexture> EvaluationEtc;
        [RTTI.Member(139, 0x3F0, "System")] public Ref<UITexture> SystemNoDataImage;
        [RTTI.Member(140, 0x3F8, "System")] public Ref<UITexture> SystemLoadingDummy;
        [RTTI.Member(141, 0x400, "System")] public Ref<UITexture> SystemHiddenAvater;
        [RTTI.Member(143, 0x408, "Dot")] public Ref<UITexture> Rect8x8Texture;
        [RTTI.Member(145, 0x420, "KeyHelpIcon_Element")] public Ref<HUDElementResource> KeyHelpIconTemplate;
        [RTTI.Member(146, 0x428, "KeyHelpIcon_Element")] public Ref<HUDImageResource> KeyHelpIconImageElement;
        [RTTI.Member(147, 0x430, "KeyHelpIcon_Element")] public Ref<HUDImageResource> KeyHelpIconHoldBaseImageElement;
        [RTTI.Member(148, 0x438, "KeyHelpIcon_Element")] public Ref<HUDImageResource> KeyHelpIconHoldGaugeImageElement;
        [RTTI.Member(150, 0x440, "KeyHelpIcon_Animation")] public Ref<DSUIHUDAnimatorResource> KeyHelpIconHoldAnimator;
        [RTTI.Member(151, 0x448, "KeyHelpIcon_Animation")] public Ref<DSUIHUDAnimatorResource> KeyHelpIconMashAnimator;
        [RTTI.Member(152, 0x450, "KeyHelpIcon_Animation")] public Ref<DSUIHUDAnimatorResource> KeyHelpIconExecuteAnimator;
        [RTTI.Member(154, 0x458, "KeyHelpIcon_Sound")] public Ref<SoundResource> HoldCancelSound;
        [RTTI.Member(155, 0x460, "KeyHelpIcon_Sound")] public Ref<SoundResource> HoldLowLayerSound;
        [RTTI.Member(156, 0x468, "KeyHelpIcon_Sound")] public Ref<SoundResource> HoldStepSound_01;
        [RTTI.Member(157, 0x470, "KeyHelpIcon_Sound")] public Ref<SoundResource> HoldStepSound_02;
        [RTTI.Member(158, 0x478, "KeyHelpIcon_Sound")] public Ref<SoundResource> HoldStepSound_03;
        [RTTI.Member(159, 0x480, "KeyHelpIcon_Sound")] public Ref<SoundResource> HoldStepSound_04;
        [RTTI.Member(160, 0x488, "KeyHelpIcon_Sound")] public Ref<SoundResource> HoldStepSound_05;
        [RTTI.Member(162, 0x490, "GeneralIconResource2")] public Ref<DSUIGeneralIconResource2> GeneralIconResource2;
    }

    [RTTI.Serializable(0xEC75C5C828DD6016, GameType.DS)]
    public class DSUIGeneralIconResource2 : Resource
    {
        [RTTI.Member(3, 0x20, "TodoIcon")] public Ref<UITexture> TodoIcon_Blank;
        [RTTI.Member(4, 0x28, "TodoIcon")] public Ref<UITexture> TodoIcon_Check;
        [RTTI.Member(5, 0x30, "TodoIcon")] public Ref<UITexture> TodoIcon_Progress;
        [RTTI.Member(6, 0x38, "TodoIcon")] public Ref<UITexture> TodoIcon_Or_Blank;
        [RTTI.Member(7, 0x40, "TodoIcon")] public Ref<UITexture> TodoIcon_Or_Check;
        [RTTI.Member(8, 0x48, "TodoIcon")] public Ref<UITexture> TodoIcon_Or_Progress;
        [RTTI.Member(9, 0x50, "TodoIcon")] public Ref<UITexture> TodoIcon_Ng;
        [RTTI.Member(11, 0x58, "Qpid")] public Ref<UITexture> Qpid_Level0;
        [RTTI.Member(12, 0x60, "Qpid")] public Ref<UITexture> Qpid_Level1_Bridges;
        [RTTI.Member(13, 0x68, "Qpid")] public Ref<UITexture> Qpid_Level1_Fragile;
        [RTTI.Member(14, 0x70, "Qpid")] public Ref<UITexture> Qpid_Level2;
        [RTTI.Member(15, 0x78, "Qpid")] public Ref<UITexture> Qpid_Level3;
        [RTTI.Member(17, 0x80, "MenuIcons_Material")] public Ref<UITexture> Material_Crystal;
        [RTTI.Member(18, 0x88, "MenuIcons_Material")] public Ref<UITexture> Material_Resin;
        [RTTI.Member(19, 0x90, "MenuIcons_Material")] public Ref<UITexture> Material_Metal;
        [RTTI.Member(20, 0x98, "MenuIcons_Material")] public Ref<UITexture> Material_Ceramic;
        [RTTI.Member(21, 0xA0, "MenuIcons_Material")] public Ref<UITexture> Material_ChemicalSubstance;
        [RTTI.Member(22, 0xA8, "MenuIcons_Material")] public Ref<UITexture> Material_SpecialAlloy;
        [RTTI.Member(23, 0xB0, "MenuIcons_Material")] public Ref<UITexture> Material_Locked;
        [RTTI.Member(24, 0xB8, "MenuIcons_Material")] public Ref<UITexture> Material_Blue_Crystal;
        [RTTI.Member(25, 0xC0, "MenuIcons_Material")] public Ref<UITexture> Material_Blue_Resin;
        [RTTI.Member(26, 0xC8, "MenuIcons_Material")] public Ref<UITexture> Material_Blue_Metal;
        [RTTI.Member(27, 0xD0, "MenuIcons_Material")] public Ref<UITexture> Material_Blue_Ceramic;
        [RTTI.Member(28, 0xD8, "MenuIcons_Material")] public Ref<UITexture> Material_Blue_ChemicalSubstance;
        [RTTI.Member(29, 0xE0, "MenuIcons_Material")] public Ref<UITexture> Material_Blue_SpecialAlloy;
        [RTTI.Member(30, 0xE8, "MenuIcons_Material")] public Ref<UITexture> Material_Blue_Locked;
        [RTTI.Member(31, 0xF0, "MenuIcons_Material")] public Ref<UITexture> Material_Green_Crystal;
        [RTTI.Member(32, 0xF8, "MenuIcons_Material")] public Ref<UITexture> Material_Green_Resin;
        [RTTI.Member(33, 0x100, "MenuIcons_Material")] public Ref<UITexture> Material_Green_Metal;
        [RTTI.Member(34, 0x108, "MenuIcons_Material")] public Ref<UITexture> Material_Green_Ceramic;
        [RTTI.Member(35, 0x110, "MenuIcons_Material")] public Ref<UITexture> Material_Green_ChemicalSubstance;
        [RTTI.Member(36, 0x118, "MenuIcons_Material")] public Ref<UITexture> Material_Green_SpecialAlloy;
        [RTTI.Member(37, 0x120, "MenuIcons_Material")] public Ref<UITexture> Material_Green_Locked;
        [RTTI.Member(38, 0x128, "MenuIcons_Material")] public Ref<UITexture> Material_Orange_Crystal;
        [RTTI.Member(39, 0x130, "MenuIcons_Material")] public Ref<UITexture> Material_Orange_Resin;
        [RTTI.Member(40, 0x138, "MenuIcons_Material")] public Ref<UITexture> Material_Orange_Metal;
        [RTTI.Member(41, 0x140, "MenuIcons_Material")] public Ref<UITexture> Material_Orange_Ceramic;
        [RTTI.Member(42, 0x148, "MenuIcons_Material")] public Ref<UITexture> Material_Orange_ChemicalSubstance;
        [RTTI.Member(43, 0x150, "MenuIcons_Material")] public Ref<UITexture> Material_Orange_SpecialAlloy;
        [RTTI.Member(44, 0x158, "MenuIcons_Material")] public Ref<UITexture> Material_Orange_Locked;
        [RTTI.Member(46, 0x160, "PreparationMenuIcon")] public Ref<UITexture> PreparationMenuIcon_Wish;
        [RTTI.Member(47, 0x168, "PreparationMenuIcon")] public Ref<UITexture> PreparationMenuIcon_Baggage;
        [RTTI.Member(48, 0x170, "PreparationMenuIcon")] public Ref<UITexture> PreparationMenuIcon_Vehicle;
        [RTTI.Member(49, 0x178, "PreparationMenuIcon")] public Ref<UITexture> PreparationMenuIcon_Costume;
        [RTTI.Member(50, 0x180, "PreparationMenuIcon")] public Ref<UITexture> PreparationMenuIcon_Accept;
        [RTTI.Member(52, 0x188, "VehicleIcon")] public Ref<UITexture> VehicleIcon_Large_Truck;
        [RTTI.Member(53, 0x190, "VehicleIcon")] public Ref<UITexture> VehicleIcon_Large_Motorbike;
        [RTTI.Member(55, 0x198, "BulletIcon")] public Ref<UITexture> BulletIcon_StandardBullet;
        [RTTI.Member(56, 0x1A0, "BulletIcon")] public Ref<UITexture> BulletIcon_BloodBullet;
        [RTTI.Member(57, 0x1A8, "BulletIcon")] public Ref<UITexture> BulletIcon_ChiralBullet;
        [RTTI.Member(58, 0x1B0, "BulletIcon")] public Ref<UITexture> BulletIcon_FragBullet;
        [RTTI.Member(59, 0x1B8, "BulletIcon")] public Ref<UITexture> BulletIcon_SlipBullet;
        [RTTI.Member(60, 0x1C0, "BulletIcon")] public Ref<UITexture> BulletIcon_SleepBullet;
        [RTTI.Member(61, 0x1C8, "BulletIcon")] public Ref<UITexture> BulletIcon_StanBullet;
        [RTTI.Member(62, 0x1D0, "BulletIcon")] public Ref<UITexture> BulletIcon_Urination;
        [RTTI.Member(64, 0x1D8, "ConstructionIcon")] public Ref<UITexture> Construction_Post;
        [RTTI.Member(65, 0x1E0, "ConstructionIcon")] public Ref<UITexture> Construction_SafeHouse;
        [RTTI.Member(66, 0x1E8, "ConstructionIcon")] public Ref<UITexture> Construction_Bridge;
        [RTTI.Member(67, 0x1F0, "ConstructionIcon")] public Ref<UITexture> _0;
        [RTTI.Member(68, 0x1F8, "ConstructionIcon")] public Ref<UITexture> Construction_WatchTower;
        [RTTI.Member(69, 0x200, "ConstructionIcon")] public Ref<UITexture> Construction_ZipLine;
        [RTTI.Member(70, 0x208, "ConstructionIcon")] public Ref<UITexture> Construction_Shelter;
        [RTTI.Member(71, 0x210, "ConstructionIcon")] public Ref<UITexture> Construction_Charger;
        [RTTI.Member(72, 0x218, "ConstructionIcon")] public Ref<UITexture> Construction_Rebuilder;
        [RTTI.Member(74, 0x220, "KeyHelpIcon_Param")] public float KeyHelpIconLargeScale;
    }

    [RTTI.Serializable(0x186955922E9FFAB0, GameType.DS)]
    public class DSUIGeneralLocalizedResource : Resource
    {
        [RTTI.Member(3, 0x20, "Common")] public Ref<LocalizedTextResource> BaggageSize_S;
        [RTTI.Member(4, 0x28, "Common")] public Ref<LocalizedTextResource> BaggageSize_M;
        [RTTI.Member(5, 0x30, "Common")] public Ref<LocalizedTextResource> BaggageSize_L;
        [RTTI.Member(6, 0x38, "Common")] public Ref<LocalizedTextResource> BaggageSize_LL;
        [RTTI.Member(7, 0x40, "Common")] public Ref<LocalizedTextResource> BaggageSize_Human;
        [RTTI.Member(8, 0x48, "Common")] public Ref<LocalizedTextResource> BaggageEmpty;
        [RTTI.Member(9, 0x50, "Common")] public Ref<LocalizedTextResource> Unit_m;
        [RTTI.Member(10, 0x58, "Common")] public Ref<LocalizedTextResource> Unit_km;
        [RTTI.Member(11, 0x60, "Common")] public Ref<LocalizedTextResource> Unit_kg;
        [RTTI.Member(12, 0x68, "Common")] public Ref<LocalizedTextResource> Unit_t;
        [RTTI.Member(13, 0x70, "Common")] public Ref<LocalizedTextResource> Unit_percent;
        [RTTI.Member(14, 0x78, "Common")] public Ref<LocalizedTextResource> Unit_km_per_h;
        [RTTI.Member(15, 0x80, "Common")] public Ref<LocalizedTextResource> Unit_m_per_sec;
        [RTTI.Member(16, 0x88, "Common")] public Ref<LocalizedTextResource> Unit_cc;
        [RTTI.Member(17, 0x90, "Common")] public Ref<LocalizedTextResource> Unit_cg;
        [RTTI.Member(18, 0x98, "Common")] public Ref<LocalizedTextResource> Unit_piece;
        [RTTI.Member(19, 0xA0, "Common")] public Ref<LocalizedTextResource> Unit_times;
        [RTTI.Member(20, 0xA8, "Common")] public Ref<LocalizedTextResource> Unit_person;
        [RTTI.Member(21, 0xB0, "Common")] public Ref<LocalizedTextResource> Unit_boots;
        [RTTI.Member(22, 0xB8, "Common")] public Ref<LocalizedTextResource> Unit_max_value;
        [RTTI.Member(23, 0xC0, "Common")] public Ref<LocalizedTextResource> Unit_min_value;
        [RTTI.Member(26, 0xC8, "Common")] public Ref<LocalizedTextResource> Unit_hour_min_sec;
        [RTTI.Member(25, 0xD0, "Common")] public Ref<LocalizedTextResource> Unit_min_sec;
        [RTTI.Member(24, 0xD8, "Common")] public Ref<LocalizedTextResource> Unit_sec;
        [RTTI.Member(27, 0xE0, "Common")] public Ref<LocalizedTextResource> Unit_slash;
        [RTTI.Member(28, 0xE8, "Common")] public Ref<LocalizedTextResource> Unit_ver;
        [RTTI.Member(29, 0xF0, "Common")] public Ref<LocalizedTextResource> Material_Crystal;
        [RTTI.Member(30, 0xF8, "Common")] public Ref<LocalizedTextResource> Material_Resin;
        [RTTI.Member(31, 0x100, "Common")] public Ref<LocalizedTextResource> Material_Metal;
        [RTTI.Member(32, 0x108, "Common")] public Ref<LocalizedTextResource> Material_Ceramic;
        [RTTI.Member(33, 0x110, "Common")] public Ref<LocalizedTextResource> Material_ChemicalSubstance;
        [RTTI.Member(34, 0x118, "Common")] public Ref<LocalizedTextResource> Material_SpecialAlloy;
        [RTTI.Member(35, 0x120, "Common")] public Ref<LocalizedTextResource> Material_Locked;
        [RTTI.Member(36, 0x128, "Common")] public Ref<LocalizedTextResource> Language_English;
        [RTTI.Member(37, 0x130, "Common")] public Ref<LocalizedTextResource> Language_French;
        [RTTI.Member(38, 0x138, "Common")] public Ref<LocalizedTextResource> Language_Spanish_LA;
        [RTTI.Member(39, 0x140, "Common")] public Ref<LocalizedTextResource> Language_Portuguese_LA;
        [RTTI.Member(40, 0x148, "Common")] public Ref<LocalizedTextResource> Language_English_UK;
        [RTTI.Member(41, 0x150, "Common")] public Ref<LocalizedTextResource> Language_Italian;
        [RTTI.Member(42, 0x158, "Common")] public Ref<LocalizedTextResource> Language_German;
        [RTTI.Member(43, 0x160, "Common")] public Ref<LocalizedTextResource> Language_Spanish;
        [RTTI.Member(44, 0x168, "Common")] public Ref<LocalizedTextResource> Language_Portuguese;
        [RTTI.Member(45, 0x170, "Common")] public Ref<LocalizedTextResource> Language_Polish;
        [RTTI.Member(46, 0x178, "Common")] public Ref<LocalizedTextResource> Language_Russian;
        [RTTI.Member(47, 0x180, "Common")] public Ref<LocalizedTextResource> Language_Arabic;
        [RTTI.Member(48, 0x188, "Common")] public Ref<LocalizedTextResource> Language_Greek;
        [RTTI.Member(49, 0x190, "Common")] public Ref<LocalizedTextResource> Language_Dutch;
        [RTTI.Member(50, 0x198, "Common")] public Ref<LocalizedTextResource> Language_Czech;
        [RTTI.Member(51, 0x1A0, "Common")] public Ref<LocalizedTextResource> Language_Turkish;
        [RTTI.Member(52, 0x1A8, "Common")] public Ref<LocalizedTextResource> Language_Hungarian;
        [RTTI.Member(53, 0x1B0, "Common")] public Ref<LocalizedTextResource> Language_Japanese;
        [RTTI.Member(54, 0x1B8, "Common")] public Ref<LocalizedTextResource> Language_Korean;
        [RTTI.Member(55, 0x1C0, "Common")] public Ref<LocalizedTextResource> Language_Chinese_Traditional;
        [RTTI.Member(56, 0x1C8, "Common")] public Ref<LocalizedTextResource> Language_Chinese_Simplified;
        [RTTI.Member(57, 0x1D0, "Common")] public Ref<LocalizedTextResource> Difficulty_VeryEasy;
        [RTTI.Member(58, 0x1D8, "Common")] public Ref<LocalizedTextResource> Difficulty_Easy;
        [RTTI.Member(59, 0x1E0, "Common")] public Ref<LocalizedTextResource> Difficulty_Normal;
        [RTTI.Member(60, 0x1E8, "Common")] public Ref<LocalizedTextResource> Difficulty_Hard;
        [RTTI.Member(61, 0x1F0, "Common")] public Ref<LocalizedTextResource> Difficulty_VeryHard;
        [RTTI.Member(62, 0x1F8, "Common")] public Ref<LocalizedTextResource> NetUserName_Resolving;
        [RTTI.Member(63, 0x200, "Common")] public Ref<LocalizedTextResource> NetUserName_ResolveError;
        [RTTI.Member(64, 0x208, "Common")] public Ref<LocalizedTextResource> Header_Like;
        [RTTI.Member(65, 0x210, "Common")] public Ref<LocalizedTextResource> Header_MaxLike;
        [RTTI.Member(66, 0x218, "Common")] public Ref<LocalizedTextResource> Header_MinLike;
        [RTTI.Member(67, 0x220, "Common")] public Ref<LocalizedTextResource> Mission_No_Main;
        [RTTI.Member(68, 0x228, "Common")] public Ref<LocalizedTextResource> Mission_No_Simple;
        [RTTI.Member(69, 0x230, "Common")] public Ref<LocalizedTextResource> Mission_No_Procurement;
        [RTTI.Member(70, 0x238, "Common")] public Ref<LocalizedTextResource> Mission_No_Online;
        [RTTI.Member(71, 0x240, "Common")] public Ref<LocalizedTextResource> MissionCategory_Main;
        [RTTI.Member(72, 0x248, "Common")] public Ref<LocalizedTextResource> MissionCategory_Sub;
        [RTTI.Member(73, 0x250, "Common")] public Ref<LocalizedTextResource> MissionCategory_Simple;
        [RTTI.Member(74, 0x258, "Common")] public Ref<LocalizedTextResource> MissionCategory_Automation;
        [RTTI.Member(75, 0x260, "Common")] public Ref<LocalizedTextResource> MissionCategory_LostBaggage;
        [RTTI.Member(76, 0x268, "Common")] public Ref<LocalizedTextResource> MissionEvaluation_Speed;
        [RTTI.Member(77, 0x270, "Common")] public Ref<LocalizedTextResource> MissionEvaluation_Safety;
        [RTTI.Member(78, 0x278, "Common")] public Ref<LocalizedTextResource> MissionEvaluation_Service;
        [RTTI.Member(79, 0x280, "Common")] public Ref<LocalizedTextResource> MissionEvaluation_Delivery;
        [RTTI.Member(80, 0x288, "Common")] public Ref<LocalizedTextResource> MissionEvaluation_BridgeLink;
        [RTTI.Member(81, 0x290, "Common")] public Ref<LocalizedTextResource> QpidState_Uninsured;
        [RTTI.Member(82, 0x298, "Common")] public Ref<LocalizedTextResource> QpidState_Fragile;
        [RTTI.Member(83, 0x2A0, "Common")] public Ref<LocalizedTextResource> QpidState_FirstBridges;
        [RTTI.Member(84, 0x2A8, "Common")] public Ref<LocalizedTextResource> QpidState_SecondBridges;
        [RTTI.Member(85, 0x2B0, "Common")] public Ref<LocalizedTextResource> QpidState_UCA;
        [RTTI.Member(86, 0x2B8, "Common")] public Ref<LocalizedTextResource> DiscaredBaggageDestination;
        [RTTI.Member(87, 0x2C0, "Common")] public Ref<LocalizedTextResource> Keyhelp_Next;
        [RTTI.Member(88, 0x2C8, "Common")] public Ref<LocalizedTextResource> Keyhelp_Skip;
        [RTTI.Member(89, 0x2D0, "Common")] public Ref<LocalizedTextResource> Keyhelp_Close;
        [RTTI.Member(91, 0x2D8, "Dialogue")] public Ref<LocalizedTextResource> Dialogue_OK;
        [RTTI.Member(92, 0x2E0, "Dialogue")] public Ref<LocalizedTextResource> Dialogue_Cancel;
        [RTTI.Member(93, 0x2E8, "Dialogue")] public Ref<LocalizedTextResource> Dialogue_Yes;
        [RTTI.Member(94, 0x2F0, "Dialogue")] public Ref<LocalizedTextResource> Dialogue_No;
        [RTTI.Member(95, 0x2F8, "Dialogue")] public Ref<LocalizedTextResource> DialogueMessage_FatalError;
        [RTTI.Member(96, 0x300, "Dialogue")] public Ref<LocalizedTextResource> DialogueMessage_ControllerDisconnected;
        [RTTI.Member(97, 0x308, "Dialogue")] public Ref<LocalizedTextResource> DialogueMessage_RainShelterTimeCaution;
        [RTTI.Member(98, 0x310, "Dialogue")] public Ref<LocalizedTextResource> DialogueMessage_SaveError;
        [RTTI.Member(99, 0x318, "Dialogue")] public Ref<LocalizedTextResource> DialogueMessage_SaveErrorDiskFull;
        [RTTI.Member(101, 0x320, "ToastMessage")] public Ref<LocalizedTextResource> ToastMessage_ControllerDisconnected;
        [RTTI.Member(102, 0x328, "ToastMessage")] public Ref<LocalizedTextResource> ToastMessage_NetworkError;
        [RTTI.Member(103, 0x330, "ToastMessage")] public Ref<LocalizedTextResource> ToastMessage_SaveError;
        [RTTI.Member(104, 0x338, "ToastMessage")] public Ref<LocalizedTextResource> ToastMessage_SaveErrorDiskFull;
        [RTTI.Member(106, 0x340, "RewordRank")] public Ref<LocalizedTextResource> Reword_Rank_D;
        [RTTI.Member(107, 0x348, "RewordRank")] public Ref<LocalizedTextResource> Reword_Rank_C;
        [RTTI.Member(108, 0x350, "RewordRank")] public Ref<LocalizedTextResource> Reword_Rank_B;
        [RTTI.Member(109, 0x358, "RewordRank")] public Ref<LocalizedTextResource> Reword_Rank_A;
        [RTTI.Member(110, 0x360, "RewordRank")] public Ref<LocalizedTextResource> Reword_Rank_S;
        [RTTI.Member(111, 0x368, "RewordRank")] public Ref<LocalizedTextResource> Reword_Rank_SS;
        [RTTI.Member(112, 0x370, "RewordRank")] public Ref<LocalizedTextResource> Reword_Rank_SSS;
        [RTTI.Member(114, 0x378, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_Post;
        [RTTI.Member(115, 0x380, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_WatchTower;
        [RTTI.Member(116, 0x388, "ConstructionCategory")] public Ref<LocalizedTextResource> _0;
        [RTTI.Member(117, 0x390, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_Charger;
        [RTTI.Member(118, 0x398, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_RainShelter;
        [RTTI.Member(119, 0x3A0, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_Zipline;
        [RTTI.Member(120, 0x3A8, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_SafetyHouse;
        [RTTI.Member(121, 0x3B0, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_SafetyHouse_Ver0;
        [RTTI.Member(122, 0x3B8, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_Bridge;
        [RTTI.Member(123, 0x3C0, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_Bridge_Ver0;
        [RTTI.Member(124, 0x3C8, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_Ladder;
        [RTTI.Member(125, 0x3D0, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_Ladder_Lv2;
        [RTTI.Member(126, 0x3D8, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_FieldRope;
        [RTTI.Member(127, 0x3E0, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_FieldRope_Lv1;
        [RTTI.Member(128, 0x3E8, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_FieldRope_Lv2;
        [RTTI.Member(129, 0x3F0, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_FieldRope_Lv3;
        [RTTI.Member(130, 0x3F8, "ConstructionCategory")] public Ref<LocalizedTextResource> ConstructionCategory_RoadRebuilder;
        [RTTI.Member(132, 0x400, "ConfigValue")] public Ref<LocalizedTextResource> Config_Value_ON;
        [RTTI.Member(133, 0x408, "ConfigValue")] public Ref<LocalizedTextResource> Config_Value_OFF;
        [RTTI.Member(134, 0x410, "ConfigValue")] public Ref<LocalizedTextResource> Config_Dialog_Revert_Cancel;
        [RTTI.Member(135, 0x418, "ConfigValue")] public Ref<LocalizedTextResource> Config_Dialog_Revert_Default;
        [RTTI.Member(137, 0x420, "SimpleDisplayHUD")] public Ref<LocalizedTextResource> SimpleDisplayHUD_BurstMode;
        [RTTI.Member(139, 0x428, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFunc_AntiPersonnel;
        [RTTI.Member(140, 0x430, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFunc_AntiBt;
        [RTTI.Member(141, 0x438, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncDamage_Kill;
        [RTTI.Member(142, 0x440, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncDamage_NonKill;
        [RTTI.Member(143, 0x448, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncDamage_Invalid;
        [RTTI.Member(144, 0x450, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncSpecial_Reveal;
        [RTTI.Member(145, 0x458, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncSpecial_Blind;
        [RTTI.Member(146, 0x460, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncSpecial_Bind;
        [RTTI.Member(147, 0x468, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncSpecial_Mental;
        [RTTI.Member(148, 0x470, "DeviceBaggageMenu")] public Ref<LocalizedTextResource> DeviceBaggageMenu_EquipFuncSpecial_Slip;
        [RTTI.Member(150, 0x478, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_From;
        [RTTI.Member(151, 0x480, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_To;
        [RTTI.Member(152, 0x488, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_UnderConstruction;
        [RTTI.Member(153, 0x490, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_Online;
        [RTTI.Member(154, 0x498, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_Order;
        [RTTI.Member(155, 0x4A0, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_To;
        [RTTI.Member(156, 0x4A8, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_CommonDestination;
        [RTTI.Member(157, 0x4B0, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_BaggageDestination;
        [RTTI.Member(158, 0x4B8, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_SalvageDestination;
        [RTTI.Member(159, 0x4C0, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_MissionBaggage;
        [RTTI.Member(160, 0x4C8, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_Arrival;
        [RTTI.Member(161, 0x4D0, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_Format_Online;
        [RTTI.Member(162, 0x4D8, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_Format_Signbord;
        [RTTI.Member(163, 0x4E0, "DeviceMapMenu")] public Ref<LocalizedTextResource> DeviceMapMenu_MapIcon_Format_OnlineSignbord;
        [RTTI.Member(165, 0x4E8, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_Other;
        [RTTI.Member(166, 0x4F0, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_FromBB;
        [RTTI.Member(167, 0x4F8, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_FromPorter;
        [RTTI.Member(168, 0x500, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_FromNpc;
        [RTTI.Member(181, 0x508, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_FromBridges;
        [RTTI.Member(182, 0x510, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_FromPreppers;
        [RTTI.Member(169, 0x518, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_FromBT;
        [RTTI.Member(170, 0x520, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_ByDonation;
        [RTTI.Member(171, 0x528, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_PickUpOfflineBaggages;
        [RTTI.Member(172, 0x530, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_DeliverNpcBaggages;
        [RTTI.Member(173, 0x538, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_PickUpOnlineBaggages;
        [RTTI.Member(174, 0x540, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_DeliverOnlineUserBaggages;
        [RTTI.Member(175, 0x548, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_DonationUsed;
        [RTTI.Member(176, 0x550, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_BuildingUsed;
        [RTTI.Member(177, 0x558, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_ContributeToConstruction;
        [RTTI.Member(178, 0x560, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_FromOnlineUser;
        [RTTI.Member(179, 0x568, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_DeliveryTogetherTotalWeight;
        [RTTI.Member(180, 0x570, "TakeLikeReason")] public Ref<LocalizedTextResource> TakeLikeReason_DiscardingChiralContaminants;
        [RTTI.Member(184, 0x578, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_SWITCH_TO_BLOOD_BYPASS;
        [RTTI.Member(185, 0x580, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_TO_SWITCH;
        [RTTI.Member(186, 0x588, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_SWITCH_TO_SNIPER_MODE;
        [RTTI.Member(187, 0x590, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_TO_BULLET_SWITCH;
        [RTTI.Member(188, 0x598, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_TO_CONSTRUCTION_SWITCH;
        [RTTI.Member(189, 0x5A0, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_TO_BRIDGE_LENGTH_SWITCH;
        [RTTI.Member(190, 0x5A8, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_TO_ATTACHMENT_ENABLE;
        [RTTI.Member(191, 0x5B0, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_TO_ATTACHMENT_DISABLE;
        [RTTI.Member(192, 0x5B8, "AimHUD")] public Ref<LocalizedTextResource> AimHUD_CHARGE_SHOT;
        [RTTI.Member(194, 0x5C0, "TimerHUD")] public Ref<LocalizedTextResource> TimerHUD_ElapsedTimeTemplate;
        [RTTI.Member(195, 0x5C8, "TimerHUD")] public Ref<LocalizedTextResource> TimerHUD_HeartmanTimerTemplate;
        [RTTI.Member(196, 0x5D0, "TimerHUD")] public Ref<LocalizedTextResource> TimerHUD_HeartmanTitleToRevivalText;
        [RTTI.Member(197, 0x5D8, "TimerHUD")] public Ref<LocalizedTextResource> TimerHUD_HeartmanTitleToDeathText;
        [RTTI.Member(199, 0x5E0, "RoadmapMenu")] public Ref<LocalizedTextResource> RoadmapMenu_PickupBaggage;
        [RTTI.Member(200, 0x5E8, "RoadmapMenu")] public Ref<LocalizedTextResource> RoadmapMenu_DeliveryBaggage;
        [RTTI.Member(201, 0x5F0, "RoadmapMenu")] public Ref<LocalizedTextResource> RoadmapMenu_SalvageBaggage;
        [RTTI.Member(202, 0x5F8, "RoadmapMenu")] public Ref<LocalizedTextResource> RoadmapMenu_Distance;
        [RTTI.Member(203, 0x600, "RoadmapMenu")] public Ref<LocalizedTextResource> RoadmapMenu_EditKeyHelpReplace;
        [RTTI.Member(204, 0x608, "RoadmapMenu")] public Ref<LocalizedTextResource> RoadmapMenu_EditKeyHelpDecide;
    }

    [RTTI.Serializable(0xA2B406F784F9CBA5, GameType.DS)]
    public class DSUIGrenadeReticleCriticalPoint
    {
        [RTTI.Member(0, 0x0)] public float PushingRate;
        [RTTI.Member(1, 0x4)] public float Angle;
    }

    [RTTI.Serializable(0xDEA20BD769017AE0, GameType.DS)]
    public class DSUIGrenadeReticleHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x1D2DE475FE4908F6, GameType.DS)]
    public class DSUIGrenadeReticleHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "Root_ElementResource")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "Root_ElementResource")] public Ref<HUDElementResource> ReticleRootPartsElement;
        [RTTI.Member(19, 0x88, "Root_ElementResource")] public Ref<HUDElementResource> FullFxRootPartsElement;
        [RTTI.Member(21, 0x90, "Template_ElementResource")] public Ref<HUDElementResource> ReticleParentRootElement;
        [RTTI.Member(22, 0x98, "Template_ElementResource")] public Ref<HUDElementResource> ReticleAlphaElement;
        [RTTI.Member(23, 0xA0, "Template_ElementResource")] public Ref<HUDElementResource> ReticleAbsoluteRotationElement;
        [RTTI.Member(24, 0xA8, "Template_ElementResource")] public Ref<HUDElementResource> ReticleRelativePositionElement;
        [RTTI.Member(25, 0xB0, "Template_ElementResource")] public Ref<HUDElementResource> ReticleRelativeRotationElement;
        [RTTI.Member(26, 0xB8, "Template_ElementResource")] public Ref<HUDImageResource> ReticlePieceImageElement;
        [RTTI.Member(27, 0xC0, "Template_ElementResource")] public Ref<HUDElementResource> FullFxTemplate;
        [RTTI.Member(29, 0xC8, "Animator_Resource")] public Array<Ref<DSUIHUDAnimatorResource>> PieceOutroPatternAnimator;
        [RTTI.Member(30, 0xD8, "Animator_Resource")] public Ref<DSUIHUDAnimatorResource> FullFxLoopAnimator;
        [RTTI.Member(31, 0xE0, "Animator_Resource")] public Ref<DSUIHUDAnimatorResource> FullFxOutroAnimator;
        [RTTI.Member(32, 0xE8, "Animator_Resource")] public Ref<DSUIHUDAnimatorResource> ActivateAnimator;
        [RTTI.Member(33, 0xF0, "Animator_Resource")] public Ref<DSUIHUDAnimatorResource> DeactivateAnimator;
        [RTTI.Member(34, 0xF8, "Animator_Resource")] public Ref<DSUIHUDAnimatorResource> ChangeAimModeToDefaultAnimator;
        [RTTI.Member(35, 0x100, "Animator_Resource")] public Ref<DSUIHUDAnimatorResource> ChangeAimModeToEnemyAnimator;
        [RTTI.Member(37, 0x108, "Curve_Resource")] public Ref<CurveResource> IntroMoveEasingCurve;
        [RTTI.Member(38, 0x110, "Curve_Resource")] public Ref<CurveResource> ThrowMoveEasingCurve;
        [RTTI.Member(39, 0x118, "Curve_Resource")] public Ref<CurveResource> ThrowScaleEasingCurve;
        [RTTI.Member(40, 0x120, "Curve_Resource")] public Ref<CurveResource> ThrowRotationEasingCurve;
        [RTTI.Member(41, 0x128, "Curve_Resource")] public Ref<CurveResource> ReloadMoveEasingCurve;
        [RTTI.Member(42, 0x130, "Curve_Resource")] public Ref<CurveResource> ReloadScaleEasingCurve;
        [RTTI.Member(43, 0x138, "Curve_Resource")] public Ref<CurveResource> FullPowerThrowMoveEasingCurve;
        [RTTI.Member(44, 0x140, "Curve_Resource")] public Ref<CurveResource> ReloadParentMoveEasingCurve;
        [RTTI.Member(45, 0x148, "Curve_Resource")] public Ref<CurveResource> MoveDistanceEasingCurve;
        [RTTI.Member(47, 0x150, "Animator_Frame")] public int IntroDelayFrame;
        [RTTI.Member(49, 0x158, "Sound")] public Ref<SoundResource> AimEnemySound;
        [RTTI.Member(50, 0x160, "Sound")] public Ref<SoundResource> MissEnemySound;
        [RTTI.Member(51, 0x168, "Sound")] public Ref<SoundResource> StraightModeStartSound;
        [RTTI.Member(52, 0x170, "Sound")] public Ref<SoundResource> StraightModeLoopSound;
        [RTTI.Member(53, 0x178, "Sound")] public Ref<SoundResource> StraightModeEndSound;
        [RTTI.Member(55, 0x180, "Parameter")] public float HUDMoveMaxMeter;
        [RTTI.Member(56, 0x184, "Parameter")] public float HUDMoveMinMeter;
        [RTTI.Member(57, 0x188, "Parameter")] public float NearLimitRadius;
        [RTTI.Member(58, 0x18C, "Parameter")] public float FarLimitRadius;
        [RTTI.Member(59, 0x190, "Parameter")] public float FullPowerRadius;
        [RTTI.Member(60, 0x194, "Parameter")] public float ThrowRadius;
        [RTTI.Member(61, 0x198, "Parameter")] public float IntroStartRadius;
        [RTTI.Member(62, 0x19C, "Parameter")] public float NormalPieceSize;
        [RTTI.Member(63, 0x1A0, "Parameter")] public float ThrowPieceSize;
        [RTTI.Member(64, 0x1A8, "Parameter")] public Array<DSUIGrenadeReticleCriticalPoint> CriticalPoint;
        [RTTI.Member(65, 0x1B8, "Parameter")] public Array<int> DelayFrame;
    }

    [RTTI.Serializable(0x30C3AF86C1A82094, GameType.DS)]
    public class DSUIHDRConfigMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xFA4547629AE498F7, GameType.DS)]
    public class DSUIHDRConfigMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> mHDRTitleResource;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> mHDRDescriptionResource;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> mHDRBrightnessTitleResource;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> mHDRBrightnessDescriptionResource;
    }

    [RTTI.Serializable(0xE963F4BA1700A7A2, GameType.DS)]
    public class DSUIHDRConfigMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x6A5B0CD25E7984EE, GameType.DS)]
    public class DSUIHDRConfigMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Movie")] public Ref<MenuElementResource> HDRMovieElementResource;
        [RTTI.Member(9, 0x38, "Elements")] public Ref<MenuElementResource> ConfigListTagElementResource;
        [RTTI.Member(10, 0x40, "Elements")] public Ref<MenuElementResource> DecidePanelTagElementResource;
        [RTTI.Member(11, 0x48, "Elements")] public Ref<MenuElementResource> ConfirmDialogPanelElementResource;
        [RTTI.Member(12, 0x50, "Elements")] public Ref<MenuElementResource> ConfirmSelectListElementResource;
        [RTTI.Member(13, 0x58, "Elements")] public Ref<MenuElementResource> CursorTextureElementResource_R;
        [RTTI.Member(14, 0x60, "Elements")] public Ref<MenuElementResource> CursorTextureElementResource_L;
        [RTTI.Member(16, 0x68, "Animation")] public Ref<MenuAnimationResource> CurosrAnimationResource;
        [RTTI.Member(18, 0x70, "Sounds")] public Ref<SoundResource> CursorAcceleratorSoundResource;
        [RTTI.Member(19, 0x78, "Sounds")] public Ref<SoundResource> CursorAcceleratorBeepSoundResource;
    }

    [RTTI.Serializable(0x462A5DD15FBDA5C4, GameType.DS)]
    public class DSUIHUDAnimationBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xF9901037332944CB, GameType.DS)]
    public class DSUIHUDAnimationBaseResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<HUDElementResource> Element;
        [RTTI.Member(3, 0x28)] public bool IsStartWithCurrentValue;
        [RTTI.Member(4, 0x29)] public bool IsRepeatUntilOtherFinished;
        [RTTI.Member(5, 0x30)] public Array<DSUIHUDAnimationSoundResource> AnimationSounds;
        [RTTI.Member(6, 0x40)] public bool IsPlaySoundWithVisible;
    }

    [RTTI.Serializable(0xE01EBB77A4896BB9, GameType.DS)]
    public class DSUIHUDAnimationSoundResource
    {
        [RTTI.Member(0, 0x0)] public Ref<SoundResource> SoundResource;
        [RTTI.Member(1, 0x8)] public int BufferCount;
        [RTTI.Member(2, 0xC)] public int SoundDelayFrame;
        [RTTI.Member(3, 0x10)] public bool Is3DSound;
    }

    [RTTI.Serializable(0xE5826BDE5FCEA040, GameType.DS)]
    public class DSUIHUDAnimator : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x79CB599CF96F7A87, GameType.DS)]
    public class DSUIHUDAnimatorResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSUIHUDAnimationBaseResource>> Items;
    }

    [RTTI.Serializable(0xC31744FE94AF9640, GameType.DS)]
    public class DSUIHUDAnimatorSet : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x32A91E7757DB032C, GameType.DS)]
    public class DSUIHUDAnimatorSetResource : Resource
    {
        [RTTI.Member(3, 0x28, "Animator")] public Ref<DSUIHUDAnimatorResource> Intro;
        [RTTI.Member(4, 0x30, "Animator")] public Ref<DSUIHUDAnimatorResource> Idle;
        [RTTI.Member(5, 0x38, "Animator")] public Ref<DSUIHUDAnimatorResource> Outro;
    }

    [RTTI.Serializable(0x71C54A2E4272207D, GameType.DS)]
    public class DSUIHUDElementBlinkerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x9CECADE3AC0279CB, GameType.DS)]
    public class DSUIHUDElementBlinkerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public Ref<CurveResource> BlinkCurve;
        [RTTI.Member(8, 0x50)] public int BlinkDelayFrame;
    }

    [RTTI.Serializable(0x4DBE2F7919385A3E, GameType.DS)]
    public class DSUIHUDElementColorChangerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0xD5872E41AF84BA27, GameType.DS)]
    public class DSUIHUDElementColorChangerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x49)] public bool IgnoreAlpha;
        [RTTI.Member(8, 0x50)] public FRGBAColor StartColor;
        [RTTI.Member(9, 0x60)] public FRGBAColor EndColor;
        [RTTI.Member(10, 0x70)] public Ref<CurveResource> ColorCurve;
        [RTTI.Member(11, 0x78)] public int ColorDelayFrame;
    }

    [RTTI.Serializable(0x13CD6B28E0F466FC, GameType.DS)]
    public class DSUIHUDElementExpanderAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0xC5FCA90364E9400, GameType.DS)]
    public class DSUIHUDElementExpanderAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public EDSUIHUDElementExpanderPivot Pivot;
        [RTTI.Member(8, 0x50)] public Ref<CurveResource> XScaleCurve;
        [RTTI.Member(9, 0x58)] public Ref<CurveResource> YScaleCurve;
        [RTTI.Member(10, 0x60)] public int XScaleDelayFrame;
        [RTTI.Member(11, 0x64)] public int YScaleDelayFrame;
    }

    [RTTI.Serializable(0x8792C25E1448BDEF, GameType.DS)]
    public class DSUIHUDElementRotatorAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x310277EDCE1F45CD, GameType.DS)]
    public class DSUIHUDElementRotatorAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x50)] public Vec3 InitRotation;
        [RTTI.Member(8, 0x60)] public Ref<CurveResource> XAxisRotationCurve;
        [RTTI.Member(9, 0x68)] public Ref<CurveResource> YAxisRotationCurve;
        [RTTI.Member(10, 0x70)] public Ref<CurveResource> ZAxisRotationCurve;
        [RTTI.Member(11, 0x78)] public int XAxisRotationDelayFrame;
        [RTTI.Member(12, 0x7C)] public int YAxisRotationDelayFrame;
        [RTTI.Member(13, 0x80)] public int ZAxisRotationDelayFrame;
    }

    [RTTI.Serializable(0xDB585AE648AF3E6C, GameType.DS)]
    public class DSUIHUDElementScaleAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x6C1DAC9B66594CF, GameType.DS)]
    public class DSUIHUDElementScaleAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public Ref<CurveResource> Curve;
        [RTTI.Member(8, 0x50)] public int DelayFrame;
    }

    [RTTI.Serializable(0x1EC6BDB6FBC92683, GameType.DS)]
    public class DSUIHUDElementSliderAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x5D9FEA8F1466B4E6, GameType.DS)]
    public class DSUIHUDElementSliderAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(13, 0x48)] public IVec3 OffsetPosition;
        [RTTI.Member(7, 0x58)] public Ref<CurveResource> HorizontalSlideAmountCurve;
        [RTTI.Member(8, 0x60)] public Ref<CurveResource> VerticalSlideAmountCurve;
        [RTTI.Member(9, 0x68)] public Ref<CurveResource> DepthSlideAmountCurve;
        [RTTI.Member(10, 0x70)] public int HorizontalSlideDelayFrame;
        [RTTI.Member(11, 0x74)] public int VerticalSlideDelayFrame;
        [RTTI.Member(12, 0x78)] public int DepthSlideDelayFrame;
    }

    [RTTI.Serializable(0x2B0A905CA9D3E094, GameType.DS)]
    public class DSUIHUDImageTextureCoordsMoverAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public EDSUIHUDImageTextureCoordsSelect Select;
        [RTTI.Member(8, 0x50)] public Ref<CurveResource> HorizontalSlideCurve;
        [RTTI.Member(9, 0x58)] public Ref<CurveResource> VerticalSlideCurve;
        [RTTI.Member(10, 0x60)] public Ref<CurveResource> XScaleCurve;
        [RTTI.Member(11, 0x68)] public Ref<CurveResource> YScaleCurve;
        [RTTI.Member(12, 0x70)] public int HorizontalSlideDelayFrame;
        [RTTI.Member(13, 0x74)] public int VerticalSlideDelayFrame;
        [RTTI.Member(14, 0x78)] public int XScaleDelayFrame;
        [RTTI.Member(15, 0x7C)] public int YScaleDelayFrame;
    }

    [RTTI.Serializable(0x615772ECB350FAC6, GameType.DS)]
    public class DSUIHUDImageTextureCoordsTransformAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public EDSUIHUDImageTextureCoordsSelect Select;
        [RTTI.Member(8, 0x50)] public Ref<CurveResource> LeftTopXCurve;
        [RTTI.Member(9, 0x58)] public Ref<CurveResource> LeftTopYCurve;
        [RTTI.Member(10, 0x60)] public Ref<CurveResource> RightTopXCurve;
        [RTTI.Member(11, 0x68)] public Ref<CurveResource> RightTopYCurve;
        [RTTI.Member(12, 0x70)] public Ref<CurveResource> LeftBottomXCurve;
        [RTTI.Member(13, 0x78)] public Ref<CurveResource> LeftBottomYCurve;
        [RTTI.Member(14, 0x80)] public Ref<CurveResource> RightBottomXCurve;
        [RTTI.Member(15, 0x88)] public Ref<CurveResource> RightBottomYCurve;
        [RTTI.Member(16, 0x90)] public int LeftTopXDelayFrame;
        [RTTI.Member(17, 0x94)] public int LeftTopYDelayFrame;
        [RTTI.Member(18, 0x98)] public int RightXTopDelayFrame;
        [RTTI.Member(19, 0x9C)] public int RightYTopDelayFrame;
        [RTTI.Member(20, 0xA0)] public int LeftBottomXDelayFrame;
        [RTTI.Member(21, 0xA4)] public int LeftBottomYDelayFrame;
        [RTTI.Member(22, 0xA8)] public int RightXBottomDelayFrame;
        [RTTI.Member(23, 0xAC)] public int RightYBottomDelayFrame;
    }

    [RTTI.Serializable(0xCBA869EEF7B32BBA, GameType.DS)]
    public class DSUIHUDLineElement : HUDElement
    {
    }

    [RTTI.Serializable(0x3B3CDAFD7392B58, GameType.DS)]
    public class DSUIHUDLineElementResource : HUDElementResource
    {
        [RTTI.Member(25, 0xB0, "Line")] public Ref<UITexture> StartPointUITexture;
        [RTTI.Member(26, 0xB8, "Line")] public Ref<UITexture> MiddleLineUITexture;
        [RTTI.Member(27, 0xC0, "Line")] public Ref<UITexture> EndPointUITexture;
        [RTTI.Member(28, 0xC8, "Line")] public EDSUIHudLineMode LineMode;
        [RTTI.Member(29, 0xD0, "Line")] public Vec2 StartScreenPosition;
        [RTTI.Member(30, 0xE0, "Line")] public Vec2 EndScreenPosition;
        [RTTI.Member(31, 0xF0, "Line")] public float LineSize;
        [RTTI.Member(32, 0x100, "Line")] public Vec2 StartPointSize;
        [RTTI.Member(33, 0x110, "Line")] public Vec2 EndPointSize;
    }

    [RTTI.Serializable(0xADB52BF5B5FD305E, GameType.DS)]
    public class DSUIHUDLineMoverAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0xB7352DD410E2A4A8, GameType.DS)]
    public class DSUIHUDLineMoverAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public bool IsUseBeforePosition;
        [RTTI.Member(10, 0x50)] public IVec2 BeforeStartPosition;
        [RTTI.Member(11, 0x58)] public IVec2 BeforeEndPosition;
        [RTTI.Member(12, 0x60)] public IVec2 AfterStartPosition;
        [RTTI.Member(13, 0x68)] public IVec2 AfterEndPosition;
        [RTTI.Member(8, 0x70)] public Ref<CurveResource> StartSpeedCurve;
        [RTTI.Member(9, 0x78)] public Ref<CurveResource> EndSpeedCurve;
        [RTTI.Member(14, 0x80)] public int StartSpeedDelayFrame;
        [RTTI.Member(15, 0x84)] public int EndSpeedDelayFrame;
    }

    [RTTI.Serializable(0xDBF51F72A7D9943A, GameType.DS)]
    public class DSUIHUDLineSizerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0xC6373A3406F8DC65, GameType.DS)]
    public class DSUIHUDLineSizerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public EDSUIHUDLineSizerPivot Pivot;
        [RTTI.Member(8, 0x50)] public Ref<CurveResource> Curve;
        [RTTI.Member(9, 0x58)] public int DelayFrame;
    }

    [RTTI.Serializable(0x98AEF759659D2D68, GameType.DS)]
    public class DSUIHUDLoadingIconElement : HUDElement
    {
    }

    [RTTI.Serializable(0x63604F13E760F17F, GameType.DS)]
    public class DSUIHUDLoadingIconElementResource : HUDElementResource
    {
        [RTTI.Member(25, 0xB0, "LoadingIcon")] public Ref<HUDImageResource> LoadingTargetTextureElement;
    }

    [RTTI.Serializable(0xD4D65BF4CEDCCDB9, GameType.DS)]
    public class DSUIHUDLogicBase : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xBCBDF8203AFD9CDE, GameType.DS)]
    public class DSUIHUDLogicElementBaseResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(4, 0x30)] public bool IsStartWithCurrentValue;
        [RTTI.Member(5, 0x31)] public bool IsRepeatUntilOtherFinished;
    }

    [RTTI.Serializable(0xA2E39D239E86617E, GameType.DS)]
    public class DSUIHUDLogicElementBlinker : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xC0E8CAD12BEBD71D, GameType.DS)]
    public class DSUIHUDLogicElementBlinkerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public Ref<CurveResource> BlinkCurve;
    }

    [RTTI.Serializable(0x9131BE63E25CA77D, GameType.DS)]
    public class DSUIHUDLogicElementColorChanger : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x8A24B840A78BE398, GameType.DS)]
    public class DSUIHUDLogicElementColorChangerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x39)] public bool IgnoreAlpha;
        [RTTI.Member(7, 0x40)] public FRGBAColor StartColor;
        [RTTI.Member(8, 0x50)] public FRGBAColor EndColor;
        [RTTI.Member(9, 0x60)] public Ref<CurveResource> ColorCurve;
    }

    [RTTI.Serializable(0x7E0B2B9184ACD73, GameType.DS)]
    public class DSUIHUDLogicElementExpander : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x7BCE2D01C37DE5E7, GameType.DS)]
    public class DSUIHUDLogicElementExpanderResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public EDSUIHUDLogicElementExpanderPivot Pivot;
        [RTTI.Member(7, 0x40)] public Ref<CurveResource> XScaleCurve;
        [RTTI.Member(8, 0x48)] public Ref<CurveResource> YScaleCurve;
    }

    [RTTI.Serializable(0xC45AA3995CECA86E, GameType.DS)]
    public class DSUIHUDLogicElementLineMover : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xE1D49AB5B556F71, GameType.DS)]
    public class DSUIHUDLogicElementLineMoverResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public bool IsUseBeforePosition;
        [RTTI.Member(9, 0x40)] public IVec2 BeforeStartPosition;
        [RTTI.Member(10, 0x48)] public IVec2 BeforeEndPosition;
        [RTTI.Member(11, 0x50)] public IVec2 AfterStartPosition;
        [RTTI.Member(12, 0x58)] public IVec2 AfterEndPosition;
        [RTTI.Member(7, 0x60)] public Ref<CurveResource> StartSpeedCurve;
        [RTTI.Member(8, 0x68)] public Ref<CurveResource> EndSpeedCurve;
    }

    [RTTI.Serializable(0xB1E5C872C6F4F952, GameType.DS)]
    public class DSUIHUDLogicElementLineSizer : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x20C65595E12A00A0, GameType.DS)]
    public class DSUIHUDLogicElementLineSizerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public EDSUIHUDLogicElementLineSizerPivot Pivot;
        [RTTI.Member(7, 0x40)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x73E6E2E8CAB00DFA, GameType.DS)]
    public class DSUIHUDLogicElementRotator : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xEE4B017F3EF8BAA, GameType.DS)]
    public class DSUIHUDLogicElementRotatorResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x40)] public Vec3 InitRotation;
        [RTTI.Member(7, 0x50)] public Ref<CurveResource> XAxisRotationCurve;
        [RTTI.Member(8, 0x58)] public Ref<CurveResource> YAxisRotationCurve;
        [RTTI.Member(9, 0x60)] public Ref<CurveResource> ZAxisRotationCurve;
    }

    [RTTI.Serializable(0x93835A07026C21A7, GameType.DS)]
    public class DSUIHUDLogicElementSlider : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x18F452BD777E6296, GameType.DS)]
    public class DSUIHUDLogicElementSliderResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(9, 0x38)] public IVec3 OffsetPosition;
        [RTTI.Member(6, 0x48)] public Ref<CurveResource> HorizontalSlideAmountCurve;
        [RTTI.Member(7, 0x50)] public Ref<CurveResource> VerticalSlideAmountCurve;
        [RTTI.Member(8, 0x58)] public Ref<CurveResource> DepthSlideAmountCurve;
    }

    [RTTI.Serializable(0x961ED1C7429BA3A9, GameType.DS)]
    public class DSUIHUDLogicImageElementMaskTextureCoordsExpander : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x69DBD381B121D749, GameType.DS)]
    public class DSUIHUDLogicImageElementMaskTextureCoordsExpanderResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public EDSUIHUDLogicElementExpanderPivot Pivot;
        [RTTI.Member(7, 0x40)] public Ref<CurveResource> XScaleCurve;
        [RTTI.Member(8, 0x48)] public Ref<CurveResource> YScaleCurve;
    }

    [RTTI.Serializable(0x7F5F9385A285CE05, GameType.DS)]
    public class DSUIHUDLogicImageElementMaskTextureCoordsMover : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xEE86809805A74319, GameType.DS)]
    public class DSUIHUDLogicImageElementMaskTextureCoordsMoverResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public EHUDUnits Unit;
        [RTTI.Member(7, 0x40)] public float OffsetLeft;
        [RTTI.Member(8, 0x44)] public float OffsetTop;
        [RTTI.Member(9, 0x48)] public float OffsetRight;
        [RTTI.Member(10, 0x4C)] public float OffsetBottom;
        [RTTI.Member(11, 0x50)] public Ref<CurveResource> LeftSlideAmountCurve;
        [RTTI.Member(13, 0x58)] public Ref<CurveResource> RightSlideAmountCurve;
        [RTTI.Member(12, 0x60)] public Ref<CurveResource> TopSlideAmountCurve;
        [RTTI.Member(14, 0x68)] public Ref<CurveResource> BottomSlideAmountCurve;
    }

    [RTTI.Serializable(0x3F363445411BA116, GameType.DS)]
    public class DSUIHUDLogicImageElementMaskTextureCoordsTransform : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x5CC9077055443881, GameType.DS)]
    public class DSUIHUDLogicImageElementMaskTextureCoordsTransformResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(7, 0x38, "Logic_Mover")] public bool IsMoverRepeatUntilOtherFinished;
        [RTTI.Member(8, 0x3C, "Logic_Mover")] public EHUDUnits Unit;
        [RTTI.Member(9, 0x40, "Logic_Mover")] public float OffsetLeft;
        [RTTI.Member(10, 0x44, "Logic_Mover")] public float OffsetTop;
        [RTTI.Member(11, 0x48, "Logic_Mover")] public float OffsetRight;
        [RTTI.Member(12, 0x4C, "Logic_Mover")] public float OffsetBottom;
        [RTTI.Member(13, 0x50, "Logic_Mover")] public Ref<CurveResource> LeftSlideAmountCurve;
        [RTTI.Member(15, 0x58, "Logic_Mover")] public Ref<CurveResource> RightSlideAmountCurve;
        [RTTI.Member(14, 0x60, "Logic_Mover")] public Ref<CurveResource> TopSlideAmountCurve;
        [RTTI.Member(16, 0x68, "Logic_Mover")] public Ref<CurveResource> BottomSlideAmountCurve;
        [RTTI.Member(18, 0x70, "Logic_Expander")] public bool IsExpanderRepeatUntilOtherFinished;
        [RTTI.Member(19, 0x78, "Logic_Expander")] public Ref<CurveResource> XScaleCurve;
        [RTTI.Member(20, 0x80, "Logic_Expander")] public Ref<CurveResource> YScaleCurve;
    }

    [RTTI.Serializable(0xDCBBCBBB1D9588B4, GameType.DS)]
    public class DSUIHUDLogicImageElementTextureCoordsExpander : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xBD9EA3A3E4B79190, GameType.DS)]
    public class DSUIHUDLogicImageElementTextureCoordsExpanderResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public EDSUIHUDLogicElementExpanderPivot Pivot;
        [RTTI.Member(7, 0x40)] public Ref<CurveResource> XScaleCurve;
        [RTTI.Member(8, 0x48)] public Ref<CurveResource> YScaleCurve;
    }

    [RTTI.Serializable(0xEC0520B94074795, GameType.DS)]
    public class DSUIHUDLogicImageElementTextureCoordsMover : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xF54E8CB334A03F29, GameType.DS)]
    public class DSUIHUDLogicImageElementTextureCoordsMoverResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public EHUDUnits Unit;
        [RTTI.Member(7, 0x40)] public float OffsetLeft;
        [RTTI.Member(8, 0x44)] public float OffsetTop;
        [RTTI.Member(9, 0x48)] public float OffsetRight;
        [RTTI.Member(10, 0x4C)] public float OffsetBottom;
        [RTTI.Member(11, 0x50)] public Ref<CurveResource> LeftSlideAmountCurve;
        [RTTI.Member(12, 0x58)] public Ref<CurveResource> RightSlideAmountCurve;
        [RTTI.Member(13, 0x60)] public Ref<CurveResource> TopSlideAmountCurve;
        [RTTI.Member(14, 0x68)] public Ref<CurveResource> BottomSlideAmountCurve;
    }

    [RTTI.Serializable(0x274C1CC9871CC5DA, GameType.DS)]
    public class DSUIHUDLogicImageElementTextureCoordsTransform : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x872453CF0DEDA7E8, GameType.DS)]
    public class DSUIHUDLogicImageElementTextureCoordsTransformResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(7, 0x38, "Logic_Mover")] public bool IsMoverRepeatUntilOtherFinished;
        [RTTI.Member(8, 0x3C, "Logic_Mover")] public EHUDUnits Unit;
        [RTTI.Member(9, 0x40, "Logic_Mover")] public float OffsetLeft;
        [RTTI.Member(10, 0x44, "Logic_Mover")] public float OffsetTop;
        [RTTI.Member(11, 0x48, "Logic_Mover")] public float OffsetRight;
        [RTTI.Member(12, 0x4C, "Logic_Mover")] public float OffsetBottom;
        [RTTI.Member(13, 0x50, "Logic_Mover")] public Ref<CurveResource> LeftSlideAmountCurve;
        [RTTI.Member(15, 0x58, "Logic_Mover")] public Ref<CurveResource> RightSlideAmountCurve;
        [RTTI.Member(14, 0x60, "Logic_Mover")] public Ref<CurveResource> TopSlideAmountCurve;
        [RTTI.Member(16, 0x68, "Logic_Mover")] public Ref<CurveResource> BottomSlideAmountCurve;
        [RTTI.Member(18, 0x70, "Logic_Expander")] public bool IsExpanderRepeatUntilOtherFinished;
        [RTTI.Member(19, 0x78, "Logic_Expander")] public Ref<CurveResource> XScaleCurve;
        [RTTI.Member(20, 0x80, "Logic_Expander")] public Ref<CurveResource> YScaleCurve;
    }

    [RTTI.Serializable(0x1154920A5AF2FAEE, GameType.DS)]
    public class DSUIHUDLogicPolygonElementSlider : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xA33CF35086D1AE66, GameType.DS)]
    public class DSUIHUDLogicPolygonElementSliderResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public Array<DSUIVertexSlider> VertexSlider;
    }

    [RTTI.Serializable(0xC962A23001D2FE7, GameType.DS)]
    public class DSUIHUDLogicPolygonLineBlinker : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xFBCE5585B9682E2F, GameType.DS)]
    public class DSUIHUDLogicPolygonLineBlinkerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public Array<DSUIPolygonBlinkParameter> BlinkParam;
    }

    [RTTI.Serializable(0xFBC0155A99F2DAA, GameType.DS)]
    public class DSUIHUDLogicPolygonLineColorChanger : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x6F9CCF698BDACF6C, GameType.DS)]
    public class DSUIHUDLogicPolygonLineColorChangerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x40)] public Array<FRGBAColor> StartColors;
        [RTTI.Member(7, 0x50)] public Array<FRGBAColor> EndColors;
        [RTTI.Member(8, 0x60)] public Array<Ref<CurveResource>> ColorCurves;
    }

    [RTTI.Serializable(0xDC84D8EFA1D6E97C, GameType.DS)]
    public class DSUIHUDLogicPolygonVertexBlinker : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0x34654DB39B26D713, GameType.DS)]
    public class DSUIHUDLogicPolygonVertexBlinkerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public Array<DSUIPolygonBlinkParameter> BlinkParam;
    }

    [RTTI.Serializable(0x84911EB4238C78F3, GameType.DS)]
    public class DSUIHUDLogicPolygonVertexColorChanger : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xA7E1A509A729A336, GameType.DS)]
    public class DSUIHUDLogicPolygonVertexColorChangerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x40)] public Array<FRGBAColor> StartColors;
        [RTTI.Member(7, 0x50)] public Array<FRGBAColor> EndColors;
        [RTTI.Member(8, 0x60)] public Array<Ref<CurveResource>> ColorCurves;
    }

    [RTTI.Serializable(0xCF0AC1999B29DFC8, GameType.DS)]
    public class DSUIHUDLogicResource : HUDLogicResource
    {
        [RTTI.Member(10, 0x40, "DS_Base")] public Array<DSUIHUDLogicVisibleParts> VisibleParts;
        [RTTI.Member(15, 0x50, "Offset_Info_UltraWide")] public Array<DSUIHUDOffsetInfoOnUltraWide> Offset_Info_UltraWide;
        [RTTI.Member(11, 0x60, "DS_Base")] public Ref<HUDElementResource> ParentElement;
        [RTTI.Member(12, 0x68, "DS_Base")] public Ref<CurveResource> ShowOpacityCurve;
        [RTTI.Member(13, 0x70, "DS_Base")] public Ref<CurveResource> HideOpacityCurve;
    }

    [RTTI.Serializable(0xA22D8C2E34C84EF, GameType.DS)]
    public class DSUIHUDLogicTextFontSizer : DSUIHUDLogicTimelineItemBase
    {
    }

    [RTTI.Serializable(0xE2964D6D3EA9894, GameType.DS)]
    public class DSUIHUDLogicTextFontSizerResource : DSUIHUDLogicElementBaseResource
    {
        [RTTI.Member(6, 0x38)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0xC7B33366A9BAA4C9, GameType.DS)]
    public class DSUIHUDLogicTimelineItemBase : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x9956EF62E893423D, GameType.DS)]
    public class DSUIHUDLogicVisibleParts
    {
        [RTTI.Member(1, 0x0, "DS_VisibleParts")] public Ref<HUDElementResource> ParentElement;
        [RTTI.Member(2, 0x8, "DS_VisibleParts")] public Ref<CurveResource> ShowOpacityCurve;
        [RTTI.Member(3, 0x10, "DS_VisibleParts")] public Ref<CurveResource> HideOpacityCurve;
    }

    [RTTI.Serializable(0xDD759EB83ED01C9A, GameType.DS)]
    public class DSUIHUDOffsetInfoOnUltraWide
    {
        [RTTI.Member(1, 0x0, "OffsetInfo")] public Ref<HUDElementResource> TargetElement;
        [RTTI.Member(2, 0x10, "OffsetInfo")] public Vec3 Offset;
    }

    [RTTI.Serializable(0x7B464690D4F4DBBC, GameType.DS)]
    public class DSUIHUDPolygonBlinkerComponent
    {
        [RTTI.Member(0, 0x0)] public Ref<CurveResource> BlinkCurve;
        [RTTI.Member(1, 0x8)] public int DelayFrame;
    }

    [RTTI.Serializable(0x28E9BBD32B606714, GameType.DS)]
    public class DSUIHUDPolygonColorComponent
    {
        [RTTI.Member(0, 0x0)] public Ref<CurveResource> ColorCurve;
        [RTTI.Member(1, 0x8)] public int DelayFrame;
    }

    [RTTI.Serializable(0xAA3807C0F8FEFC91, GameType.DS)]
    public class DSUIHUDPolygonElement : HUDElement
    {
    }

    [RTTI.Serializable(0x472DF483DD9699B0, GameType.DS)]
    public class DSUIHUDPolygonElementResource : HUDElementResource
    {
        [RTTI.Member(25, 0xB0, "Vertex")] public Ref<UITexture> DefaultVertexTexture;
        [RTTI.Member(26, 0xB8, "Vertex")] public bool IsUseDefaultVertexColor;
        [RTTI.Member(27, 0xC0, "Vertex")] public FRGBAColor DefaultVertexColor;
        [RTTI.Member(28, 0xD0, "Vertex")] public Array<IVec2> VertexPositions;
        [RTTI.Member(29, 0xE0, "Vertex")] public Array<Ref<UITexture>> VertexTextures;
        [RTTI.Member(30, 0xF0, "Vertex")] public Array<FRGBAColor> VertexColors;
        [RTTI.Member(32, 0x100, "Line")] public bool IsClosed;
        [RTTI.Member(33, 0x108, "Line")] public Ref<UITexture> DefaultLineTexture;
        [RTTI.Member(34, 0x110, "Line")] public bool IsUseDefaultLineColor;
        [RTTI.Member(35, 0x120, "Line")] public FRGBAColor DefaultLineColor;
        [RTTI.Member(36, 0x130, "Line")] public bool IsUseDefaultLineWidth;
        [RTTI.Member(37, 0x134, "Line")] public float DefaultLineWidth;
        [RTTI.Member(38, 0x138, "Line")] public Array<float> LineWidths;
        [RTTI.Member(39, 0x148, "Line")] public Array<Ref<UITexture>> LineTextures;
        [RTTI.Member(40, 0x158, "Line")] public Array<FRGBAColor> LineColors;
        [RTTI.Member(41, 0x168, "Line")] public bool UseDefaultLineTexCoords;
        [RTTI.Member(42, 0x170, "Line")] public FRect DefaultLineTexCoords;
        [RTTI.Member(44, 0x180, "Fill")] public FRGBAColor FillColor;
    }

    [RTTI.Serializable(0x243700B660027CF3, GameType.DS)]
    public class DSUIHUDPolygonLineBlinkerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0xB5334C38FC6BDC46, GameType.DS)]
    public class DSUIHUDPolygonLineBlinkerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public Array<DSUIHUDPolygonBlinkerComponent> BlinkerComponents;
    }

    [RTTI.Serializable(0x37278C9707BF9D94, GameType.DS)]
    public class DSUIHUDPolygonLineColorChangerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0xE3143B743072A7E7, GameType.DS)]
    public class DSUIHUDPolygonLineColorChangerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public bool IsIgnoreAlpha;
        [RTTI.Member(8, 0x50)] public Array<FRGBAColor> StartColors;
        [RTTI.Member(9, 0x60)] public Array<FRGBAColor> EndColors;
        [RTTI.Member(10, 0x70)] public Array<DSUIHUDPolygonColorComponent> ColorComponents;
    }

    [RTTI.Serializable(0x7ACF8BF0743AA661, GameType.DS)]
    public class DSUIHUDPolygonSliderAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x8638EDA1D57E21DA, GameType.DS)]
    public class DSUIHUDPolygonSliderAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public Array<DSUIHUDPolygonSliderComponent> SliderComponents;
    }

    [RTTI.Serializable(0x8E230BC602EED74F, GameType.DS)]
    public class DSUIHUDPolygonSliderComponent
    {
        [RTTI.Member(0, 0x0)] public IVec2 OffsetPosition;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> HorizontalSlideAmountCurve;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> VerticalSlideAmountCurve;
        [RTTI.Member(3, 0x18)] public int HorizontalSlideDelayFrame;
        [RTTI.Member(4, 0x1C)] public int VerticalSlideDelayFrame;
    }

    [RTTI.Serializable(0x9EBF7CA42330815A, GameType.DS)]
    public class DSUIHUDPolygonVertexBlinkerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x7432D2CCDD95DC4B, GameType.DS)]
    public class DSUIHUDPolygonVertexBlinkerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public Array<DSUIHUDPolygonBlinkerComponent> BlinkerComponents;
    }

    [RTTI.Serializable(0x838AA53587D27807, GameType.DS)]
    public class DSUIHUDPolygonVertexColorChangerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x101FE2D40D37AF5D, GameType.DS)]
    public class DSUIHUDPolygonVertexColorChangerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x50)] public Array<FRGBAColor> StartColors;
        [RTTI.Member(8, 0x60)] public Array<FRGBAColor> EndColors;
        [RTTI.Member(9, 0x70)] public Array<DSUIHUDPolygonColorComponent> ColorComponents;
    }

    [RTTI.Serializable(0x70BCD751871A0979, GameType.DS)]
    public class DSUIHUDResource : HUDResource
    {
        [RTTI.Member(13, 0x70, "DSTable")] public Ref<DSUIInfoLogHUDTableResource> InfoLogTable;
        [RTTI.Member(14, 0x78, "DSTable")] public Ref<DSUIOperationGuideHUDTableResource> OperationGuideTable;
        [RTTI.Member(15, 0x80, "DSTable")] public Ref<DSUITutorialTelopContentGroupResource> TutorialTelopContentGroupResource;
        [RTTI.Member(17, 0x88, "DSLocalize")] public Ref<DSUIActionIconHUDLocalizedResource> ActionIconHUDLocalizedResource;
        [RTTI.Member(19, 0x90, "DSEffects")] public Ref<DSMarkerLineEffectResource> MarkerLineEffectResource;
        [RTTI.Member(20, 0x98, "DSEffects")] public Ref<DSMissionAreaEffectComponentResource> MissionAreaEffectResource;
        [RTTI.Member(21, 0xA0, "DSEffects")] public Ref<DSMissionAreaEffectComponentResource> MissionAreaCylinderEffectResource;
    }

    [RTTI.Serializable(0x358DB79229D993A3, GameType.DS)]
    public class DSUIHUDSafeArea : HUDElement
    {
    }

    [RTTI.Serializable(0x955E4442418EC2E9, GameType.DS)]
    public class DSUIHUDSafeAreaResource : HUDElementResource
    {
    }

    [RTTI.Serializable(0x4FFCC81445A190B8, GameType.DS)]
    public class DSUIHUDSubtitlesLogicNameRemapEntry
    {
        [RTTI.Member(0, 0x0)] public Ref<ConditionResource> Condition;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> DisplayNameTrue;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> DisplayNameFalse;
    }

    [RTTI.Serializable(0x44585696ED9CE06D, GameType.DS)]
    public class DSUIHUDTextFontSizerAnimation : DSUIHUDAnimationBase
    {
    }

    [RTTI.Serializable(0x2816D5E4B46159D4, GameType.DS)]
    public class DSUIHUDTextFontSizerAnimationResource : DSUIHUDAnimationBaseResource
    {
        [RTTI.Member(7, 0x48)] public Ref<CurveResource> Curve;
        [RTTI.Member(8, 0x50)] public int DelayFrame;
    }

    [RTTI.Serializable(0x1D64BEB9FD313969, GameType.DS)]
    public class DSUIHUDWatchTowerAnimeSetGroupResource : CoreObject
    {
        [RTTI.Member(2, 0x28)] public Array<Ref<DSUIHUDWatchTowerAnimeSetResource>> AnimatorSets;
    }

    [RTTI.Serializable(0xBC706CC270730514, GameType.DS)]
    public class DSUIHUDWatchTowerAnimeSetResource : CoreObject
    {
        [RTTI.Member(4, 0x28, "Animator")] public Ref<DSUIHUDAnimatorResource> Intro;
        [RTTI.Member(5, 0x30, "Animator")] public Ref<DSUIHUDAnimatorResource> Idle;
        [RTTI.Member(6, 0x38, "Animator")] public Ref<DSUIHUDAnimatorResource> Outro;
        [RTTI.Member(2, 0x40)] public EWatchTowerAnimeType Hash;
    }

    [RTTI.Serializable(0x9B849A2A9D3C6C03, GameType.DS)]
    public class DSUIHandOverButtonItem
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> LabelText;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> EnableDescriptionTextAsOrder;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> DisableDescriptionTextAsOrder;
        [RTTI.Member(3, 0x18)] public Ref<LocalizedTextResource> EnableDescriptionTextAsSupply;
        [RTTI.Member(4, 0x20)] public Ref<LocalizedTextResource> DisableDescriptionTextAsSupply;
        [RTTI.Member(5, 0x28)] public Ref<LocalizedTextResource> EnableDescriptionTextAsLostItem;
        [RTTI.Member(6, 0x30)] public Ref<LocalizedTextResource> DisableDescriptionTextAsLostItem;
        [RTTI.Member(7, 0x38)] public Ref<LocalizedTextResource> EnableDescriptionTextAsConsign;
        [RTTI.Member(8, 0x40)] public Ref<LocalizedTextResource> DisableDescriptionTextAsConsignm;
        [RTTI.Member(9, 0x48)] public Ref<LocalizedTextResource> EnableDescriptionTextAsCoffin;
        [RTTI.Member(10, 0x50)] public Ref<LocalizedTextResource> DisableDescriptionTextAsCoffin;
    }

    [RTTI.Serializable(0xF4118A8E42A150FA, GameType.DS)]
    public class DSUIHandOverCommandItem
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> LabelText;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> DescriptionText_OpenAsOrder;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> DescriptionText_OpenAsSupply;
        [RTTI.Member(3, 0x18)] public Ref<LocalizedTextResource> DescriptionText_OpenAsLostItem;
        [RTTI.Member(4, 0x20)] public Ref<LocalizedTextResource> DescriptionText_OpenAsConsign;
        [RTTI.Member(5, 0x28)] public Ref<LocalizedTextResource> DescriptionText_OpenAsCoffin;
    }

    [RTTI.Serializable(0x9362528A4352CADA, GameType.DS)]
    public class DSUIHandOverMenuTitleTextBundle
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> TitleText;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> TitleJpText;
    }

    [RTTI.Serializable(0xC098C2C2C46B08CA, GameType.DS)]
    public class DSUIHiggsFightGaugeHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x1488E694BB5D3007, GameType.DS)]
    public class DSUIHiggsFightGaugeHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "GaugeLinkElements")] public Ref<HUDElementResource> GaugeRootElementLeft;
        [RTTI.Member(20, 0x88, "GaugeLinkElements")] public Ref<HUDElementResource> GaugeRootElementRight;
        [RTTI.Member(21, 0x90, "GaugeLinkElements")] public Ref<HUDElementResource> TemplateGaugeElement;
        [RTTI.Member(23, 0x98, "GaugeAttrElements")] public Ref<HUDElementResource> FightGaugeElement;
        [RTTI.Member(24, 0xA0, "GaugeAttrElements")] public Ref<HUDElementResource> FightRedGaugeElement;
        [RTTI.Member(25, 0xA8, "GaugeAttrElements")] public Ref<HUDElementResource> StaminaGaugeRootElement;
        [RTTI.Member(26, 0xB0, "GaugeAttrElements")] public Ref<HUDElementResource> StaminaGaugeElement;
        [RTTI.Member(28, 0xB8, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(29, 0xC0, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(30, 0xC8, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(31, 0xD0, "Animation")] public Ref<DSUIHUDAnimatorResource> LoopAnimator;
        [RTTI.Member(33, 0xD8, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> GaugeIdleDefaultAnimator;
        [RTTI.Member(34, 0xE0, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> GaugeIdleDangerAnimator;
        [RTTI.Member(35, 0xE8, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> GaugeIdleFullAnimator;
        [RTTI.Member(36, 0xF0, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> SmallDamageAnimator;
        [RTTI.Member(37, 0xF8, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> LargeDamageAnimator;
        [RTTI.Member(38, 0x100, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> HeallingAnimator;
        [RTTI.Member(39, 0x108, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> GuardAnimator;
        [RTTI.Member(40, 0x110, "GaugeAnimation")] public Ref<DSUIHUDAnimatorResource> GaugeLoopAnimator;
        [RTTI.Member(42, 0x118, "StaminaGaugeAnimation")] public Ref<DSUIHUDAnimatorResource> StaminaGaugeIdleDefaultAnimator;
        [RTTI.Member(43, 0x120, "StaminaGaugeAnimation")] public Ref<DSUIHUDAnimatorResource> StaminaGaugeIdleDangerAnimator;
        [RTTI.Member(44, 0x128, "StaminaGaugeAnimation")] public Ref<DSUIHUDAnimatorResource> StaminaGaugeIdleFullAnimator;
        [RTTI.Member(45, 0x130, "StaminaGaugeAnimation")] public Ref<DSUIHUDAnimatorResource> StaminaGaugeIdleEmptyAnimator;
        [RTTI.Member(46, 0x138, "StaminaGaugeAnimation")] public Ref<DSUIHUDAnimatorResource> StaminaGaugeDecayAnimator;
        [RTTI.Member(47, 0x140, "StaminaGaugeAnimation")] public Ref<DSUIHUDAnimatorResource> StaminaGaugeHeallingAnimator;
        [RTTI.Member(48, 0x148, "StaminaGaugeAnimation")] public Ref<DSUIHUDAnimatorResource> StaminaGaugeLoopAnimator;
        [RTTI.Member(50, 0x150, "GaugeControllParams")] public float LargeDamageAnimThreshold;
        [RTTI.Member(51, 0x154, "GaugeControllParams")] public float IdleDangerAnimThreshold;
        [RTTI.Member(52, 0x158, "GaugeControllParams")] public float RedGaugeHitStopTime;
        [RTTI.Member(53, 0x15C, "GaugeControllParams")] public float RedGaugeSpeed;
        [RTTI.Member(54, 0x160, "GaugeControllParams")] public float HeallingSpeed;
        [RTTI.Member(56, 0x164, "StaminaGaugeControllParams")] public float StaminaIdleDangerAnimThreshold;
        [RTTI.Member(57, 0x168, "StaminaGaugeControllParams")] public float StaminaIdleEmptyAnimThreshold;
        [RTTI.Member(58, 0x16C, "StaminaGaugeControllParams")] public float StaminaHeallingSpeed;
    }

    [RTTI.Serializable(0x49F59B4BD0BCB2FC, GameType.DS)]
    public class DSUIHoloNameHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x90690C3CC18A60C4, GameType.DS)]
    public class DSUIHoloNameHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Elements")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(19, 0x88, "DS_Elements")] public Array<Ref<HUDTextResource>> TextElements;
        [RTTI.Member(21, 0x98, "DS_Animations")] public Ref<DSUIHUDAnimatorResource> NormalIntroAnimator;
        [RTTI.Member(22, 0xA0, "DS_Animations")] public Ref<DSUIHUDAnimatorResource> NormalIdleAnimator;
        [RTTI.Member(23, 0xA8, "DS_Animations")] public Ref<DSUIHUDAnimatorResource> NormalOutroAnimator;
        [RTTI.Member(24, 0xB0, "DS_Animations")] public Ref<DSUIHUDAnimatorResource> SubjectiveIntroAnimator;
        [RTTI.Member(25, 0xB8, "DS_Animations")] public Ref<DSUIHUDAnimatorResource> SubjectiveIdleAnimator;
        [RTTI.Member(26, 0xC0, "DS_Animations")] public Ref<DSUIHUDAnimatorResource> SubjectiveOutroAnimator;
    }

    [RTTI.Serializable(0xE5C9CF348BF9BE6D, GameType.DS)]
    public class DSUIIDevicePrivateRoomColorParamResource : Resource
    {
        [RTTI.Member(3, 0x20, "RowParams")] public Array<DSUIIDevicePrivateRoomColorRowParam> RowParam;
    }

    [RTTI.Serializable(0xE3E91D5F78D1AA06, GameType.DS)]
    public class DSUIIDevicePrivateRoomColorRowParam
    {
        [RTTI.Member(1, 0x0, "PaletteColor")] public Array<DSUIPrivateRoomColorParam> PaletteColors;
    }

    [RTTI.Serializable(0xB04B86D989519250, GameType.DS)]
    public class DSUIImageDisplayExSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7DA2B99997AEDB1C, GameType.DS)]
    public class DSUIImageDisplayExSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSUIImageDisplayHUDDescResource> Desc;
    }

    [RTTI.Serializable(0xF59653B1F9148A0B, GameType.DS)]
    public class DSUIImageDisplayHUDDescResource : Resource
    {
        [RTTI.Member(3, 0x20, "ImageDisplayDesc")] public EDSUIImageDisplayHUDDescType DescType;
        [RTTI.Member(4, 0x24, "ImageDisplayDesc")] public float ScreenPositionX;
        [RTTI.Member(5, 0x28, "ImageDisplayDesc")] public float ScreenPositionY;
        [RTTI.Member(6, 0x2C, "ImageDisplayDesc")] public bool IsShowBlackBG;
        [RTTI.Member(7, 0x30, "ImageDisplayDesc")] public Ref<UITexture> MainUITexture;
        [RTTI.Member(8, 0x38, "ImageDisplayDesc")] public Array<Ref<UITexture>> SubUITextures;
    }

    [RTTI.Serializable(0xFF60DB062518BDFC, GameType.DS)]
    public class DSUIImageDisplayHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x5BFDD6DC725355B4, GameType.DS)]
    public class DSUIImageDisplayHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "CommonDisplay")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "CommonDisplay")] public Ref<HUDElementResource> BlackBGElement;
        [RTTI.Member(19, 0x88, "CommonDisplay")] public Ref<HUDImageResource> ImageElement;
        [RTTI.Member(20, 0x90, "CommonDisplay")] public Ref<DSUIHUDAnimatorResource> CommonIntroAnimator;
        [RTTI.Member(21, 0x98, "CommonDisplay")] public Ref<DSUIHUDAnimatorResource> CommonOutroAnimator;
        [RTTI.Member(23, 0xA0, "EpisodeDisplay")] public Ref<HUDElementResource> EpisodeRootElement;
        [RTTI.Member(24, 0xA8, "EpisodeDisplay")] public Array<Ref<HUDImageResource>> EpisodeSubImageElements;
        [RTTI.Member(25, 0xB8, "EpisodeDisplay")] public Ref<DSUIHUDAnimatorResource> EpisodeIntroAnimator;
        [RTTI.Member(26, 0xC0, "EpisodeDisplay")] public Ref<DSUIHUDAnimatorResource> EpisodeOutroAnimator;
        [RTTI.Member(28, 0xC8, "TitleLogoDisplay")] public Ref<HUDElementResource> TitleLogoRootElement;
        [RTTI.Member(29, 0xD0, "TitleLogoDisplay")] public Array<Ref<HUDImageResource>> TitleLogoSubImageElements;
        [RTTI.Member(30, 0xE0, "TitleLogoDisplay")] public Ref<DSUIHUDAnimatorResource> TitleLogoIntroAnimator;
        [RTTI.Member(31, 0xE8, "TitleLogoDisplay")] public Ref<DSUIHUDAnimatorResource> TitleLogoOutroAnimator;
    }

    [RTTI.Serializable(0xAF75C06146E5EFF5, GameType.DS)]
    public class DSUIImageDisplaySequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xCB5585E840D29D08, GameType.DS)]
    public class DSUIImageDisplaySequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Vec2 Position;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<UITexture> Texture;
    }

    [RTTI.Serializable(0xA887E4E5DBD5B3AB, GameType.DS)]
    public class DSUIInGamePauseMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x84870489902968AB, GameType.DS)]
    public class DSUIInGamePauseMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> SystemDescriptionSaveEnable;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> SystemDescriptionSaveDisable;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> KeyHelpContinueText;
    }

    [RTTI.Serializable(0x3638442BB8860B9, GameType.DS)]
    public class DSUIInGamePauseMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x595A260EC749F47F, GameType.DS)]
    public class DSUIInGamePauseMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(6, 0x30)] public Ref<MenuElementResource> MainPanelElementResource;
        [RTTI.Member(7, 0x38)] public Ref<MenuElementResource> SelectListElementResource;
        [RTTI.Member(9, 0x40, "Children")] public Ref<MenuElementResource> TipsPanelElementResource;
        [RTTI.Member(10, 0x48, "Children")] public Ref<MenuElementResource> SystemPanelElementResource;
        [RTTI.Member(11, 0x50, "Children")] public Ref<MenuElementResource> ConfigPanelElementResource;
        [RTTI.Member(12, 0x58, "Children")] public Ref<MenuElementResource> LoadPanelElementResource;
        [RTTI.Member(13, 0x60, "Children")] public Ref<MenuElementResource> ControllerPanelElementResource;
    }

    [RTTI.Serializable(0x4850C587F6CBD7DB, GameType.DS)]
    public class DSUIInfoLogHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x88F0DFA0F7D15FE6, GameType.DS)]
    public class DSUIInfoLogHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Elements")] public Ref<HUDElementResource> FramePartsElement;
        [RTTI.Member(19, 0x88, "DS_Elements")] public Ref<HUDElementResource> WaitingPartsElement;
        [RTTI.Member(20, 0x90, "DS_Elements")] public Ref<HUDElementResource> InfoLogElement01;
        [RTTI.Member(21, 0x98, "DS_Elements")] public Ref<HUDElementResource> InfoLogElement02;
        [RTTI.Member(22, 0xA0, "DS_Elements")] public Ref<HUDElementResource> InfoLogElement03;
        [RTTI.Member(23, 0xA8, "DS_Elements")] public Ref<HUDElementResource> InfoLogElement04;
        [RTTI.Member(24, 0xB0, "DS_Elements")] public Ref<HUDElementResource> InfoLogElement05;
        [RTTI.Member(25, 0xB8, "DS_Elements")] public Ref<HUDElementResource> InfoLogTemplate;
        [RTTI.Member(26, 0xC0, "DS_Elements")] public Ref<HUDTextResource> TextElements;
        [RTTI.Member(27, 0xC8, "DS_Elements")] public Ref<HUDTextResource> TextBgElement;
        [RTTI.Member(28, 0xD0, "DS_Elements")] public Ref<HUDElementResource> IconImageElement;
        [RTTI.Member(29, 0xD8, "DS_Elements")] public Ref<HUDElementResource> IconImageBgElement;
        [RTTI.Member(31, 0xE0, "Animation")] public Ref<DSUIHUDAnimatorResource> FrameIntroAnimator;
        [RTTI.Member(32, 0xE8, "Animation")] public Ref<DSUIHUDAnimatorResource> FrameOutroAnimator;
        [RTTI.Member(33, 0xF0, "Animation")] public Ref<DSUIHUDAnimatorResource> FrameIdleAnimator;
        [RTTI.Member(34, 0xF8, "Animation")] public Ref<DSUIHUDAnimatorResource> WaitingIntroAnimator;
        [RTTI.Member(35, 0x100, "Animation")] public Ref<DSUIHUDAnimatorResource> WaitingOutroAnimator;
        [RTTI.Member(36, 0x108, "Animation")] public Ref<DSUIHUDAnimatorResource> WaitingIdleAnimator;
        [RTTI.Member(37, 0x110, "Animation")] public Ref<DSUIHUDAnimatorResource> IconIntroAnimator;
        [RTTI.Member(39, 0x118, "DS_Texture")] public Ref<UITexture> IconTexture_Default;
        [RTTI.Member(40, 0x120, "DS_Texture")] public Ref<UITexture> IconTexture_Mail;
        [RTTI.Member(42, 0x128, "DS_Sound")] public Ref<SoundResource> DisplaySound_Mail;
        [RTTI.Member(44, 0x130, "DS_Rumble")] public Ref<RumbleResource> Rumble_Mail;
        [RTTI.Member(46, 0x138, "DisplaySecParameter")] public float DisplaySec;
        [RTTI.Member(47, 0x13C, "DisplaySecParameter")] public float DisplaySecForWaiting;
        [RTTI.Member(48, 0x140, "DisplaySecParameter")] public float TypingMaxSec;
        [RTTI.Member(49, 0x144, "DisplaySecParameter")] public float TypingGlyphSec;
        [RTTI.Member(50, 0x148, "DisplaySecParameter")] public float TypingStartSec;
        [RTTI.Member(51, 0x14C, "DisplaySecParameter")] public float TypingEndSec;
        [RTTI.Member(52, 0x150, "DisplaySecParameter")] public float FadeoutSec;
        [RTTI.Member(53, 0x154, "DisplaySecParameter")] public float MoveSec;
    }

    [RTTI.Serializable(0xE817AC2E6FAE00AC, GameType.DS)]
    public class DSUIInfoLogHUDTableItemColorResource : Resource
    {
        [RTTI.Member(3, 0x20, "Color")] public FRGBAColor Color;
        [RTTI.Member(4, 0x30, "Color")] public FRGBAColor BgColor;
        [RTTI.Member(5, 0x40, "Color")] public Ref<SoundResource> TypingSound;
    }

    [RTTI.Serializable(0xDF2732A674CD5C62, GameType.DS)]
    public class DSUIInfoLogHUDTableItemResource : Resource
    {
        [RTTI.Member(3, 0x20, "TableItem")] public uint32 ItemsNameHash;
        [RTTI.Member(4, 0x28, "TableItem")] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(5, 0x30, "TableItem")] public EDSUIInfoLogHUDColorType ColorType;
        [RTTI.Member(6, 0x31, "TableItem")] public EDSUIInfoLogHUDIconType IconType;
        [RTTI.Member(7, 0x32, "TableItem")] public EDSUIInfoLogHUDDisplaySoundType DisplaySoundType;
        [RTTI.Member(8, 0x34, "TableItem")] public float DelaySec;
        [RTTI.Member(9, 0x3A, "TableItem")] public bool ShowInGameOver;
        [RTTI.Member(12, 0x3B, "TableItem")] public bool ShowInKnotSpace;
        [RTTI.Member(14, 0x3C, "TableItem")] public bool ShowInFaint;
        [RTTI.Member(20, 0x3D, "TableItem")] public bool ShowInBeachHiggsBattle;
        [RTTI.Member(13, 0x3E, "TableItem")] public bool ShowInBeach;
        [RTTI.Member(15, 0x3F, "TableItem")] public bool ShowInLookingBB;
        [RTTI.Member(11, 0x40, "TableItem")] public bool ShowInPrivateRoomCureGauge;
        [RTTI.Member(10, 0x41, "TableItem")] public bool ShowInPrivateRoom;
        [RTTI.Member(16, 0x43, "TableItem")] public bool ShowInTerminalCutScene;
        [RTTI.Member(17, 0x44, "TableItem")] public bool ShowInCutSceneAndInGameCutScene;
        [RTTI.Member(18, 0x45, "TableItem")] public bool ShowInWarriors;
        [RTTI.Member(19, 0x46, "TableItem")] public bool ShowInBossCatcherBattle;
        [RTTI.Member(21, 0x47, "TableItem")] public bool ShowInAdrenalineMode;
        [RTTI.Member(22, 0x48, "TableItem")] public bool SendMessage;
    }

    [RTTI.Serializable(0x75DCCFC14CB39390, GameType.DS)]
    public class DSUIInfoLogHUDTableItemResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCCBEC72EF5D5AB7C, GameType.DS)]
    public class DSUIInfoLogHUDTableResource : Resource
    {
        [RTTI.Member(3, 0x20, "Table")] public Array<Ref<DSUIInfoLogHUDTableItemResource>> Items;
        [RTTI.Member(5, 0x30, "Color")] public Ref<DSUIInfoLogHUDTableItemColorResource> Normal;
        [RTTI.Member(6, 0x38, "Color")] public Ref<DSUIInfoLogHUDTableItemColorResource> Caution;
        [RTTI.Member(7, 0x40, "Color")] public Ref<DSUIInfoLogHUDTableItemColorResource> Warning;
        [RTTI.Member(8, 0x48, "Color")] public Ref<DSUIInfoLogHUDTableItemColorResource> Like;
        [RTTI.Member(9, 0x50, "Color")] public Ref<DSUIInfoLogHUDTableItemColorResource> OnlineLike;
    }

    [RTTI.Serializable(0x113CF480BDF224CE, GameType.DS)]
    public class DSUIInputIconResource : Resource
    {
        [RTTI.Member(3, 0x20, "ButtonIcons")] public StreamingRef<UITexture> InputIcon_Normal;
        [RTTI.Member(4, 0x28, "ButtonIcons")] public StreamingRef<UITexture> InputIcon_Hold;
    }

    [RTTI.Serializable(0xB5216F85F3029D5B, GameType.DS)]
    public class DSUIInstallMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x4A16773D921D3214, GameType.DS)]
    public class DSUIInstallMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Textures")] public StreamingRef<UITexture> InstallTextures;
        [RTTI.Member(8, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> RemainsTimeText;
    }

    [RTTI.Serializable(0xA2C5B61E6210FDAE, GameType.DS)]
    public class DSUIInstallMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xAA939E6B86E5A67, GameType.DS)]
    public class DSUIInstallMenuFunctionResource : MenuFunctionResource
    {
    }

    [RTTI.Serializable(0xAA8560E82134F220, GameType.DS)]
    public class DSUIKeyAssignMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x4A64567B3571BD8B, GameType.DS)]
    public class DSUIKeyAssignMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x30, "DialogText")] public Ref<LocalizedTextResource> Assign;
        [RTTI.Member(7, 0x38, "DialogText")] public Ref<LocalizedTextResource> Warning;
        [RTTI.Member(8, 0x40, "DialogText")] public Ref<LocalizedTextResource> ToDefault;
        [RTTI.Member(9, 0x48, "DialogText")] public Ref<LocalizedTextResource> Discard;
        [RTTI.Member(10, 0x50, "DialogText")] public Ref<LocalizedTextResource> DiscardClose;
        [RTTI.Member(11, 0x58, "DialogText")] public Ref<LocalizedTextResource> Duplicate;
        [RTTI.Member(13, 0x60, "KeyBindResource")] public Array<Ref<DSUIKeyAssignMenuKeyBindResource>> KeyBindResource;
        [RTTI.Member(15, 0x70, "Tab")] public Array<Ref<UITexture>> TabIcons;
        [RTTI.Member(16, 0x80, "Tab")] public Array<Ref<LocalizedTextResource>> TabTexts;
    }

    [RTTI.Serializable(0x669B2280EFB41CEC, GameType.DS)]
    public class DSUIKeyAssignMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x49D5008D59741D58, GameType.DS)]
    public class DSUIKeyAssignMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> ListResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> DecideResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> DialogResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> DialogListResource;
    }

    [RTTI.Serializable(0xFF7C6C0C793AF3F9, GameType.DS)]
    public class DSUIKeyAssignMenuKeyBindResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSFunction Function;
        [RTTI.Member(3, 0x28)] public Ref<LocalizedTextResource> NameText;
    }

    [RTTI.Serializable(0x5921DD87120E136A, GameType.DS)]
    public class DSUIKeyCodeIconResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EKeyCode KeyCode;
        [RTTI.Member(3, 0x28)] public Ref<DSUIInputIconResource> InputIcon;
    }

    [RTTI.Serializable(0x5115530D5B00432E, GameType.DS)]
    public class DSUIKeyHelpIconResource : Resource
    {
        [RTTI.Member(5, 0x20, "MouseButtonIcons")] public Array<Ref<DSUIMouseButtonIconResource>> MouseButtonIcons;
        [RTTI.Member(7, 0x30, "KeyCodeIcons")] public Array<Ref<DSUIKeyCodeIconResource>> KeyCodeIcons;
        [RTTI.Member(3, 0x40, "GamePadIcons")] public Array<Ref<DSUIGamePadIconResource>> GamePadIcons;
        [RTTI.Member(9, 0x50, "VirtualButtonIcons")] public Array<Ref<DSUIVirtualButtonIconResource>> VirtualButtonIcons;
        [RTTI.Member(11, 0x60, "Other")] public Ref<UITexture> EmptyIconTexture;
    }

    [RTTI.Serializable(0x8F61F9D08B6AB848, GameType.DS)]
    public class DSUIKeyNameListItem
    {
        [RTTI.Member(1, 0x0, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_UP;
        [RTTI.Member(2, 0x8, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_DOWN;
        [RTTI.Member(3, 0x10, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_LEFT;
        [RTTI.Member(4, 0x18, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_RIGHT;
        [RTTI.Member(5, 0x20, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_ACCEPT;
        [RTTI.Member(6, 0x28, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_ACCEPT_HOLD;
        [RTTI.Member(7, 0x30, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_CANCEL;
        [RTTI.Member(8, 0x38, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_CANCEL_HOLD;
        [RTTI.Member(9, 0x40, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_INBOX;
        [RTTI.Member(10, 0x48, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_INBOX_HOLD;
        [RTTI.Member(11, 0x50, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_OPTIONS;
        [RTTI.Member(12, 0x58, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_OPTIONS_HOLD;
        [RTTI.Member(13, 0x60, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_CYCLEPREV;
        [RTTI.Member(14, 0x68, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_CYCLEPREV_HOLD;
        [RTTI.Member(15, 0x70, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_CYCLENEXT;
        [RTTI.Member(16, 0x78, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_CYCLENEXT_HOLD;
        [RTTI.Member(17, 0x80, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_TAB_LEFT;
        [RTTI.Member(18, 0x88, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_TAB_RIGHT;
        [RTTI.Member(19, 0x90, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_STICK_LEFT;
        [RTTI.Member(20, 0x98, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_STICK_RIGHT;
        [RTTI.Member(21, 0xA0, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_STICK_PRESS_LEFT;
        [RTTI.Member(22, 0xA8, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_STICK_PRESS_RIGHT;
        [RTTI.Member(23, 0xB0, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_START;
        [RTTI.Member(24, 0xB8, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_INTEL;
        [RTTI.Member(25, 0xC0, "DSUIKeyNames")] public Ref<LocalizedTextResource> KeyName_INTEL_LEFT;
    }

    [RTTI.Serializable(0xE337907D39EA3555, GameType.DS)]
    public class DSUILandmarkTelopDelaySequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6CAE562A96B6A3CE, GameType.DS)]
    public class DSUILandmarkTelopDelaySequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float DelaySec;
    }

    [RTTI.Serializable(0x4CE1938D83591309, GameType.DS)]
    public class DSUILikeCounterHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x18D1EA3E5051E1C8, GameType.DS)]
    public class DSUILikeCounterHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Elements")] public Ref<HUDTextResource> TitleTextElement;
        [RTTI.Member(19, 0x88, "DS_Elements")] public Ref<HUDTextResource> ChangeLikeTextElement;
        [RTTI.Member(20, 0x90, "DS_Elements")] public Ref<HUDTextResource> TotalLikeTextElement;
        [RTTI.Member(21, 0x98, "DS_Elements")] public Ref<HUDTextResource> TotalLikeTextBgElement;
        [RTTI.Member(24, 0xA0, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroMinAnimator;
        [RTTI.Member(25, 0xA8, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroMidAnimator;
        [RTTI.Member(26, 0xB0, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroMaxAnimator;
        [RTTI.Member(27, 0xB8, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(28, 0xC0, "Animation")] public Ref<DSUIHUDAnimatorResource> SetIconLikeAnimator;
        [RTTI.Member(29, 0xC8, "Animation")] public Ref<DSUIHUDAnimatorResource> SetIconBBAnimator;
        [RTTI.Member(30, 0xD0, "Animation")] public Ref<DSUIHUDAnimatorResource> DefaultLikeChangeColorAnimator;
        [RTTI.Member(31, 0xD8, "Animation")] public Ref<DSUIHUDAnimatorResource> IncreaseLikeChangeColorAnimator;
        [RTTI.Member(33, 0xE0, "Animation")] public Ref<DSUIHUDAnimatorResource> DecreaseLikeChangeColorAnimator;
        [RTTI.Member(32, 0xE8, "Animation")] public Ref<DSUIHUDAnimatorResource> OnlineIncreaseLikeChangeColorAnimator;
        [RTTI.Member(34, 0xF0, "Animation")] public Ref<DSUIHUDAnimatorResource> OnlineDecreaseLikeChangeColorAnimator;
        [RTTI.Member(22, 0xF8, "DS_Elements")] public Ref<HUDElementResource> LikeCounterAlphaElement;
        [RTTI.Member(36, 0x100, "Sound")] public Ref<SoundResource> CountUpSound;
        [RTTI.Member(37, 0x108, "Sound")] public Ref<SoundResource> CountDownSound;
        [RTTI.Member(38, 0x110, "Sound")] public Ref<SoundResource> LikeGivenMinSound;
        [RTTI.Member(39, 0x118, "Sound")] public Ref<SoundResource> LikeGivenMidSound;
        [RTTI.Member(40, 0x120, "Sound")] public Ref<SoundResource> LikeGivenMaxSound;
        [RTTI.Member(41, 0x128, "Sound")] public Ref<SoundResource> LikeGivenFromBBMinSound;
        [RTTI.Member(42, 0x130, "Sound")] public Ref<SoundResource> LikeGivenFromBBMidSound;
        [RTTI.Member(43, 0x138, "Sound")] public Ref<SoundResource> LikeGivenFromBBMaxSound;
        [RTTI.Member(45, 0x140, "Parameter")] public float CountStartWaitTime;
        [RTTI.Member(46, 0x144, "Parameter")] public float CountEndWaitTime;
        [RTTI.Member(47, 0x148, "Parameter")] public float CountingWaitTime;
        [RTTI.Member(48, 0x14C, "Parameter")] public float LikeCounterHideAlpha;
        [RTTI.Member(49, 0x150, "Parameter")] public int LikePointMinRate;
        [RTTI.Member(50, 0x154, "Parameter")] public int LikePointMidRate;
    }

    [RTTI.Serializable(0x2284D96D41CA5441, GameType.DS)]
    public class DSUILoadMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x4526717A8EF6BE21, GameType.DS)]
    public class DSUILoadMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "TabIcon")] public Ref<UITexture> TabIcon_All;
        [RTTI.Member(7, 0x30, "TabIcon")] public Ref<UITexture> TabIcon_Manual;
        [RTTI.Member(8, 0x38, "TabIcon")] public Ref<UITexture> TabIcon_Quick;
        [RTTI.Member(9, 0x40, "TabIcon")] public Ref<UITexture> TabIcon_Automatic;
        [RTTI.Member(11, 0x48, "TabTitleText")] public Ref<LocalizedTextResource> TabTitleText_All;
        [RTTI.Member(12, 0x50, "TabTitleText")] public Ref<LocalizedTextResource> TabTitleText_Manual;
        [RTTI.Member(13, 0x58, "TabTitleText")] public Ref<LocalizedTextResource> TabTitleText_Quick;
        [RTTI.Member(14, 0x60, "TabTitleText")] public Ref<LocalizedTextResource> TabTitleText_Automatic;
        [RTTI.Member(16, 0x68, "SortTypeText")] public Ref<LocalizedTextResource> Title;
        [RTTI.Member(17, 0x70, "SortTypeText")] public Ref<LocalizedTextResource> Date;
        [RTTI.Member(19, 0x78, "SortOrderText")] public Ref<LocalizedTextResource> Asc;
        [RTTI.Member(20, 0x80, "SortOrderText")] public Ref<LocalizedTextResource> Desc;
    }

    [RTTI.Serializable(0xFF1C1C786102E006, GameType.DS)]
    public class DSUILoadMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x20BF42E4F67F3D11, GameType.DS)]
    public class DSUILoadMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "PanelElements")] public Ref<MenuElementResource> SaveDataPanel;
        [RTTI.Member(8, 0x38, "PanelElements")] public Ref<MenuElementResource> DialoguePanel;
        [RTTI.Member(10, 0x40, "ListElements")] public Ref<MenuElementResource> SaveDataList;
        [RTTI.Member(11, 0x48, "ListElements")] public Ref<MenuElementResource> DialogueList;
    }

    [RTTI.Serializable(0xA6CFA2BEC087BC0C, GameType.DS)]
    public class DSUILoadingScreenMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xD3950A0CF4ED91DD, GameType.DS)]
    public class DSUILoadingScreenMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Textures")] public StreamingRef<UITexture> Default;
        [RTTI.Member(7, 0x30, "Textures")] public StreamingRef<UITexture> Chapter_1;
        [RTTI.Member(8, 0x38, "Textures")] public StreamingRef<UITexture> Chapter_2;
        [RTTI.Member(9, 0x40, "Textures")] public StreamingRef<UITexture> Chapter_3;
        [RTTI.Member(10, 0x48, "Textures")] public StreamingRef<UITexture> Chapter_4;
        [RTTI.Member(11, 0x50, "Textures")] public StreamingRef<UITexture> Chapter_5;
        [RTTI.Member(12, 0x58, "Textures")] public StreamingRef<UITexture> Chapter_6;
        [RTTI.Member(13, 0x60, "Textures")] public StreamingRef<UITexture> Chapter_7;
        [RTTI.Member(14, 0x68, "Textures")] public StreamingRef<UITexture> Chapter_8;
        [RTTI.Member(15, 0x70, "Textures")] public StreamingRef<UITexture> Chapter_9;
        [RTTI.Member(16, 0x78, "Textures")] public StreamingRef<UITexture> Chapter_10;
        [RTTI.Member(17, 0x80, "Textures")] public StreamingRef<UITexture> Chapter_11;
        [RTTI.Member(18, 0x88, "Textures")] public StreamingRef<UITexture> Chapter_12;
        [RTTI.Member(19, 0x90, "Textures")] public StreamingRef<UITexture> Chapter_13;
        [RTTI.Member(20, 0x98, "Textures")] public StreamingRef<UITexture> Chapter_14;
        [RTTI.Member(21, 0xA0, "Textures")] public StreamingRef<UITexture> Chapter_15;
        [RTTI.Member(22, 0xA8, "Textures")] public StreamingRef<UITexture> Chapter_16;
        [RTTI.Member(23, 0xB0, "Textures")] public StreamingRef<UITexture> NewGame;
        [RTTI.Member(25, 0xB8, "Sounds")] public Ref<SoundResource> ShowDecideHelpSoundResource;
        [RTTI.Member(27, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> LoadingCheckState_Loading;
        [RTTI.Member(28, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> LoadingCheckState_Connecting;
        [RTTI.Member(29, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> LoadingCheckState_CheckAddOn;
        [RTTI.Member(30, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> AutoLoginDialogResource;
    }

    [RTTI.Serializable(0xD134B86F80FE7D00, GameType.DS)]
    public class DSUILoadingScreenMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x10440729BE2DAD10, GameType.DS)]
    public class DSUILoadingScreenMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic_DefaultMenu")] public Ref<MenuElementResource> Logic_DefaultMenu_ScreenRoot;
        [RTTI.Member(9, 0x38, "Logic_FillMenu")] public Ref<MenuElementResource> Logic_FillMenu_ScreenRoot;
        [RTTI.Member(10, 0x40, "Logic_FillMenu")] public Ref<MenuTextureResource> FillTexture;
        [RTTI.Member(12, 0x48, "Logic_DialogMenu")] public Ref<MenuElementResource> DialogPanel;
        [RTTI.Member(13, 0x50, "Logic_DialogMenu")] public Ref<MenuElementResource> DialogSelectList;
        [RTTI.Member(15, 0x58, "Logic_TipsMenu")] public Ref<MenuElementResource> TipsViewPanel;
        [RTTI.Member(17, 0x60, "Parameter_TipsMenu")] public int TipsAutoChangeTime;
        [RTTI.Member(18, 0x64, "Parameter_TipsMenu")] public int TipsInputInterval;
    }

    [RTTI.Serializable(0xEE02763F1DA2C0EE, GameType.DS)]
    public class DSUILocatedActionIconHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xD6D6190D4F41AEA1, GameType.DS)]
    public class DSUILocatedActionIconHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDElementResource> GeneralIconTemplate;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<HUDElementResource> IconTemplateElement;
        [RTTI.Member(20, 0x90, "DS_Logic")] public Ref<HUDElementResource> LocatedIconRootElement;
        [RTTI.Member(21, 0x98, "DS_Logic")] public Ref<HUDElementResource> ActionIconRootElement;
        [RTTI.Member(22, 0xA0, "DS_Logic")] public Ref<HUDElementResource> NewIconRootElement;
        [RTTI.Member(23, 0xA8, "DS_Logic")] public Ref<HUDElementResource> ActionIconImageRootElement;
        [RTTI.Member(24, 0xB0, "DS_Logic")] public Ref<HUDTextResource> ActionIconTextElement;
        [RTTI.Member(26, 0xB8, "Animation")] public Ref<DSUIHUDAnimatorResource> ButtonHoldAnimator;
        [RTTI.Member(27, 0xC0, "Animation")] public Ref<DSUIHUDAnimatorResource> IconIntroAnimator;
        [RTTI.Member(28, 0xC8, "Animation")] public Ref<DSUIHUDAnimatorResource> IconIdleAnimator;
        [RTTI.Member(29, 0xD0, "Animation")] public Ref<DSUIHUDAnimatorResource> IconOutroAnimator;
        [RTTI.Member(30, 0xD8, "Animation")] public Ref<DSUIHUDAnimatorResource> ActionIconChangeAnimator;
        [RTTI.Member(31, 0xE0, "Animation")] public Ref<DSUIHUDAnimatorResource> LocatedIconChangeAnimato;
        [RTTI.Member(32, 0xE8, "Animation")] public Ref<DSUIHUDAnimatorResource> IconAvailableAnimator;
        [RTTI.Member(33, 0xF0, "Animation")] public Ref<DSUIHUDAnimatorResource> IconUnavailableAnimator;
        [RTTI.Member(35, 0xF8, "LocalizedText")] public Ref<LocalizedTextResource> ConstructionText;
        [RTTI.Member(37, 0x100, "SoundResource")] public Ref<SoundResource> AvailableIconDecisionSound;
        [RTTI.Member(38, 0x108, "SoundResource")] public Ref<SoundResource> UnavailableIconDecisionSound;
        [RTTI.Member(39, 0x110, "SoundResource")] public Ref<SoundResource> PrivateRoomIconLightUpSound;
    }

    [RTTI.Serializable(0x81A82EEDF51CF6A2, GameType.DS)]
    public class DSUIMarkerHUDIconItemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Resources")] public Ref<DSUIMarkerIconResource> Icon;
        [RTTI.Member(4, 0x28, "Resources")] public Ref<CurveResource> ScaleDownCurve;
    }

    [RTTI.Serializable(0x1ACAB5DE2EEBC2B2, GameType.DS)]
    public class DSUIMarkerHUDIconResource : Resource
    {
        [RTTI.Member(3, 0x28, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalIcon;
        [RTTI.Member(4, 0x30, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalCautionIcon;
        [RTTI.Member(5, 0x38, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalNoTagIcon;
        [RTTI.Member(6, 0x40, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalNoTagEnemyIcon;
        [RTTI.Member(7, 0x48, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalLostIcon;
        [RTTI.Member(8, 0x50, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalAreaIcon;
        [RTTI.Member(9, 0x58, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalDisableIcon;
        [RTTI.Member(10, 0x60, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalBaggageIcon;
        [RTTI.Member(11, 0x68, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalBaggageEnemyIcon;
        [RTTI.Member(12, 0x70, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalBaggageBodyBagIcon;
        [RTTI.Member(13, 0x78, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalBaggageNoTagIcon;
        [RTTI.Member(14, 0x80, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalBaggageNoTagEnemyIcon;
        [RTTI.Member(15, 0x88, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalBaggageNoTagBodyBagIcon;
        [RTTI.Member(16, 0x90, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalTerminalIcon;
        [RTTI.Member(17, 0x98, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPreppersIcon;
        [RTTI.Member(18, 0xA0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalCrematoryIcon;
        [RTTI.Member(19, 0xA8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalRelayStationIcon;
        [RTTI.Member(20, 0xB0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalWindFarmIcon;
        [RTTI.Member(21, 0xB8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalWeatherStationIcon;
        [RTTI.Member(22, 0xC0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalMamaFacilityIcon;
        [RTTI.Member(23, 0xC8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalHeartmanFacilityIcon;
        [RTTI.Member(24, 0xD0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalCrossFacilityIcon;
        [RTTI.Member(25, 0xD8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalRainFarmIcon;
        [RTTI.Member(26, 0xE0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalArea04TerminalIcon;
        [RTTI.Member(27, 0xE8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPostIcon;
        [RTTI.Member(28, 0xF0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPostOnlineIcon;
        [RTTI.Member(29, 0xF8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPostStageIcon;
        [RTTI.Member(30, 0x100, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalSafetyHouseIcon;
        [RTTI.Member(31, 0x108, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalSafetyHouseOnlineIcon;
        [RTTI.Member(32, 0x110, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalSafetyHouseStageIcon;
        [RTTI.Member(33, 0x118, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPrivateRoomIcon;
        [RTTI.Member(34, 0x120, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPrivateRoomNgIcon;
        [RTTI.Member(35, 0x128, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPrivateRoomFtIcon;
        [RTTI.Member(36, 0x130, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPrivateRoomFtNgIcon;
        [RTTI.Member(37, 0x138, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalPrivateRoomNgFtNgIcon;
        [RTTI.Member(38, 0x140, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalHasReturnedIcon;
        [RTTI.Member(39, 0x148, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalHasPrivateBoxBaggageIcon;
        [RTTI.Member(40, 0x150, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalHasShareBoxBaggageIcon;
        [RTTI.Member(41, 0x158, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalCooperationRequestIcon;
        [RTTI.Member(42, 0x160, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalBrokenIcon;
        [RTTI.Member(43, 0x168, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GoalHalfBrokenIcon;
        [RTTI.Member(44, 0x170, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MissionCategoryMainIcon;
        [RTTI.Member(45, 0x178, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MissionCategorySubIcon;
        [RTTI.Member(46, 0x180, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MissionCategorySimpleIcon;
        [RTTI.Member(47, 0x188, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MissionCategoryLostIcon;
        [RTTI.Member(48, 0x190, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageDeliveryIcon;
        [RTTI.Member(49, 0x198, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageDeliveryNoTagIcon;
        [RTTI.Member(50, 0x1A0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggagePersonalIcon;
        [RTTI.Member(51, 0x1A8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggagePersonalNoTagIcon;
        [RTTI.Member(52, 0x1B0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageTrashIcon;
        [RTTI.Member(53, 0x1B8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageTrashNoTagIcon;
        [RTTI.Member(54, 0x1C0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageBodyBagIcon;
        [RTTI.Member(55, 0x1C8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageBodyBagNoTagIcon;
        [RTTI.Member(56, 0x1D0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageDeliveryEnemyIcon;
        [RTTI.Member(57, 0x1D8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageDeliveryNoTagEnemyIcon;
        [RTTI.Member(58, 0x1E0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggagePersonalEnemyIcon;
        [RTTI.Member(59, 0x1E8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggagePersonalNoTagIconEnemy;
        [RTTI.Member(60, 0x1F0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageTrashEnemyIcon;
        [RTTI.Member(61, 0x1F8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageTrashNoTagEnemyIcon;
        [RTTI.Member(62, 0x200, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageDeliveryOnlineIcon;
        [RTTI.Member(63, 0x208, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageDeliveryNoTagOnlineIcon;
        [RTTI.Member(64, 0x210, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggagePersonalOnlineIcon;
        [RTTI.Member(65, 0x218, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggagePersonalNoTagOnlineIcon;
        [RTTI.Member(66, 0x220, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageTrashOnlineIcon;
        [RTTI.Member(67, 0x228, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageTrashNoTagOnlineIcon;
        [RTTI.Member(68, 0x230, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageCDTIcon;
        [RTTI.Member(69, 0x238, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageCDTNoTagIcon;
        [RTTI.Member(70, 0x240, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageEmptyIcon;
        [RTTI.Member(71, 0x248, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageEmptyNoTagIcon;
        [RTTI.Member(72, 0x250, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageBrokenIcon;
        [RTTI.Member(73, 0x258, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BaggageBrokenNoTagIcon;
        [RTTI.Member(74, 0x260, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> TerminalIcon;
        [RTTI.Member(75, 0x268, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PreppersIcon;
        [RTTI.Member(76, 0x270, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CrematoryIcon;
        [RTTI.Member(77, 0x278, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RelayStationIcon;
        [RTTI.Member(78, 0x280, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> WindFarmIcon;
        [RTTI.Member(79, 0x288, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> WeatherStationIcon;
        [RTTI.Member(80, 0x290, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MamaFacilityIcon;
        [RTTI.Member(81, 0x298, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> HeartmanFacilityIcon;
        [RTTI.Member(82, 0x2A0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CrossFacilityIcon;
        [RTTI.Member(83, 0x2A8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RainFarmIcon;
        [RTTI.Member(84, 0x2B0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> Area04TerminalIcon;
        [RTTI.Member(85, 0x2B8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PrivateRoomIcon;
        [RTTI.Member(86, 0x2C0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PrivateRoomNgIcon;
        [RTTI.Member(87, 0x2C8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PrivateRoomFtIcon;
        [RTTI.Member(88, 0x2D0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PrivateRoomFtNgIcon;
        [RTTI.Member(89, 0x2D8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PrivateRoomNgFtNgIcon;
        [RTTI.Member(90, 0x2E0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> HasReturnedIcon;
        [RTTI.Member(91, 0x2E8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> HasPrivateBoxBaggageIcon;
        [RTTI.Member(92, 0x2F0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> HasShareBoxBaggageIcon;
        [RTTI.Member(93, 0x2F8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CooperationRequestIcon;
        [RTTI.Member(94, 0x300, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> StructureBuildingIcon;
        [RTTI.Member(95, 0x308, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> StructureBrokenIcon;
        [RTTI.Member(96, 0x310, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> StructureHalfBrokenIcon;
        [RTTI.Member(97, 0x318, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RoadRebuilderIcon;
        [RTTI.Member(98, 0x320, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PostIcon;
        [RTTI.Member(99, 0x328, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> SafetyHouseIcon;
        [RTTI.Member(100, 0x330, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ZiplineIcon;
        [RTTI.Member(101, 0x338, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> _0;
        [RTTI.Member(102, 0x340, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ChargerIcon;
        [RTTI.Member(103, 0x348, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> WatchTowerIcon;
        [RTTI.Member(104, 0x350, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BridgeIcon;
        [RTTI.Member(105, 0x358, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> LadderIcon;
        [RTTI.Member(106, 0x360, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RainShelterIcon;
        [RTTI.Member(107, 0x368, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RopeIcon;
        [RTTI.Member(108, 0x370, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CamouflageIcon;
        [RTTI.Member(109, 0x378, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MulePostIcon;
        [RTTI.Member(110, 0x380, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PostOnlineIcon;
        [RTTI.Member(111, 0x388, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> SafetyHouseOnlineIcon;
        [RTTI.Member(112, 0x390, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ZiplineOnlineIcon;
        [RTTI.Member(113, 0x398, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> _1;
        [RTTI.Member(114, 0x3A0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ChargerOnlineIcon;
        [RTTI.Member(115, 0x3A8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> WatchTowerOnlineIcon;
        [RTTI.Member(116, 0x3B0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BridgeOnlineIcon;
        [RTTI.Member(117, 0x3B8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> LadderOnlineIcon;
        [RTTI.Member(118, 0x3C0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RainShelterOnlineIcon;
        [RTTI.Member(119, 0x3C8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RopeOnlineIcon;
        [RTTI.Member(120, 0x3D0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CamouflageOnlineIcon;
        [RTTI.Member(121, 0x3D8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PostStageIcon;
        [RTTI.Member(122, 0x3E0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> SafetyHouseStageIcon;
        [RTTI.Member(123, 0x3E8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ZiplineStageIcon;
        [RTTI.Member(124, 0x3F0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> _2;
        [RTTI.Member(125, 0x3F8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ChargerStageIcon;
        [RTTI.Member(126, 0x400, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> WatchTowerStageIcon;
        [RTTI.Member(127, 0x408, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BridgeStageIcon;
        [RTTI.Member(128, 0x410, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> LadderStageIcon;
        [RTTI.Member(129, 0x418, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RainShelterStageIcon;
        [RTTI.Member(130, 0x420, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RopeStageIcon;
        [RTTI.Member(131, 0x428, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MuleDeadIcon;
        [RTTI.Member(132, 0x430, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MuleSleepingIcon;
        [RTTI.Member(133, 0x438, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MuleFaintIcon;
        [RTTI.Member(134, 0x440, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MuleRestrainedIcon;
        [RTTI.Member(135, 0x448, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MuleCDTIcon;
        [RTTI.Member(136, 0x450, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MuleLastKnownIcon;
        [RTTI.Member(137, 0x458, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> FloatingCartIcon;
        [RTTI.Member(138, 0x460, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> VehicleBikeIcon;
        [RTTI.Member(139, 0x468, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> VehicleTruckIcon;
        [RTTI.Member(140, 0x470, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> VehicleBikeOnlineIcon;
        [RTTI.Member(141, 0x478, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> VehicleTruckOnlineIcon;
        [RTTI.Member(142, 0x480, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> VehicleBikeEnemyIcon;
        [RTTI.Member(143, 0x488, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> VehicleTruckEnemyIcon;
        [RTTI.Member(144, 0x490, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CartCanPutBaggageIcon;
        [RTTI.Member(145, 0x498, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> VehicleCanPutBaggageIcon;
        [RTTI.Member(146, 0x4A0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CrystalIcon;
        [RTTI.Member(147, 0x4A8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ShoeSoleGrassIcon;
        [RTTI.Member(148, 0x4B0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CryptobiosisIcon;
        [RTTI.Member(149, 0x4B8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> CollectorsItemIcon;
        [RTTI.Member(150, 0x4C0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> EchoNoneIcon;
        [RTTI.Member(151, 0x4C8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> EchoBaggageIcon;
        [RTTI.Member(152, 0x4D0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> EchoTruckIcon;
        [RTTI.Member(153, 0x4D8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> EchoBikeIcon;
        [RTTI.Member(154, 0x4E0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> EchoStructureIcon;
        [RTTI.Member(155, 0x4E8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> UserMarkerIcon;
        [RTTI.Member(156, 0x4F0, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> NGIcon;
        [RTTI.Member(157, 0x4F8, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> LikeIcon;
        [RTTI.Member(158, 0x510, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BossCliffIcon;
        [RTTI.Member(159, 0x518, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> _3;
        [RTTI.Member(160, 0x520, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> _4;
        [RTTI.Member(161, 0x528, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> _5;
        [RTTI.Member(162, 0x530, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> ConstructionNGIcon;
        [RTTI.Member(163, 0x538, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> RopeInfoIcon;
        [RTTI.Member(164, 0x540, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> NPCFragileIcon;
        [RTTI.Member(165, 0x548, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> PhantomIcon;
        [RTTI.Member(169, 0x550, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> LifeGaugeIcon;
        [RTTI.Member(166, 0x558, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> BridgeInfoIcon;
        [RTTI.Member(167, 0x560, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> GrenadeIcon;
        [RTTI.Member(168, 0x568, "Icons")] public Ref<DSUIMarkerHUDIconItemResource> MuleStickyGunIcon;
    }

    [RTTI.Serializable(0xD20A76F02053F554, GameType.DS)]
    public class DSUIMarkerHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x5D973ECC720EAB6A, GameType.DS)]
    public class DSUIMarkerHUDLogicBridgeInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDTextResource> MeterTextElement;
        [RTTI.Member(6, 0x30, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(7, 0x38, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(8, 0x40, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(10, 0x48, "Text")] public Ref<LocalizedTextResource> FormatText;
    }

    [RTTI.Serializable(0x1441EBC14CA34D54, GameType.DS)]
    public class DSUIMarkerHUDLogicConstructionNGResource : Resource
    {
        [RTTI.Member(10, 0x28, "Text")] public Ref<LocalizedTextResource> ZiplineObstacle;
        [RTTI.Member(3, 0x30, "Element")] public Ref<HUDElementResource> ConstructionNGInfoTemplateElement;
        [RTTI.Member(4, 0x38, "Element")] public Ref<HUDTextResource> ConstructionNGInfoTextElement;
        [RTTI.Member(6, 0x40, "Animation")] public Ref<DSUIHUDAnimatorResource> ConstructionNGInfoIntroAnimator;
        [RTTI.Member(7, 0x48, "Animation")] public Ref<DSUIHUDAnimatorResource> ConstructionNGInfoOutroAnimator;
        [RTTI.Member(8, 0x50, "Animation")] public Ref<DSUIHUDAnimatorResource> ConstructionNGInfoIdleAnimator;
    }

    [RTTI.Serializable(0xDAD6092609B31C9F, GameType.DS)]
    public class DSUIMarkerHUDLogicGoalEffectResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(5, 0x28, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(6, 0x30, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(7, 0x38, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
    }

    [RTTI.Serializable(0xA1468F0ED2CE1909, GameType.DS)]
    public class DSUIMarkerHUDLogicLifeGaugeInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDElementResource> RectSizeElement;
        [RTTI.Member(5, 0x30, "Element")] public Ref<DSUIHUDPolygonElementResource> PolygonElement;
        [RTTI.Member(6, 0x38, "Element")] public Ref<DSUIHUDPolygonElementResource> PolygonDamageElement;
        [RTTI.Member(7, 0x40, "Element")] public Ref<DSUIHUDPolygonElementResource> PolygonFullElement;
        [RTTI.Member(9, 0x48, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(10, 0x50, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(11, 0x58, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(12, 0x60, "Animation")] public Ref<DSUIHUDAnimatorResource> DamageAnimator;
        [RTTI.Member(13, 0x68, "Animation")] public Ref<DSUIHUDAnimatorResource> SetDefalutAnimator;
        [RTTI.Member(14, 0x70, "Animation")] public Ref<DSUIHUDAnimatorResource> SetCautionAnimator;
        [RTTI.Member(16, 0x78, "Parameter")] public float LifeToGaugeMultipleRate;
        [RTTI.Member(17, 0x7C, "Parameter")] public float LifeToGaugeAdditionalPoint;
        [RTTI.Member(18, 0x80, "Parameter")] public Ref<CurveResource> DamageGaugeCurve;
    }

    [RTTI.Serializable(0x7F829D481B1DF55D, GameType.DS)]
    public class DSUIMarkerHUDLogicMarkerDetailResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(5, 0x28, "Animation")] public Ref<DSUIHUDAnimatorResource> Animation_IntroAnimator;
        [RTTI.Member(6, 0x30, "Animation")] public Ref<DSUIHUDAnimatorResource> Animation_IdleAnimator;
        [RTTI.Member(7, 0x38, "Animation")] public Ref<DSUIHUDAnimatorResource> Animation_OutroAnimator;
        [RTTI.Member(9, 0x40, "Frame")] public Ref<HUDElementResource> SimpleFrameElement;
        [RTTI.Member(10, 0x48, "Frame")] public Ref<HUDElementResource> BasicFrameElement;
        [RTTI.Member(11, 0x50, "Frame")] public Ref<HUDElementResource> ExpansionFrameElement;
        [RTTI.Member(13, 0x58, "BridgesIdParts")] public Ref<HUDElementResource> BridgesIdParts_RootElement;
        [RTTI.Member(34, 0x60, "LikeParts")] public Ref<HUDElementResource> LikeParts_RootElement;
        [RTTI.Member(52, 0x68, "BaggageParts")] public Ref<HUDElementResource> BaggageParts_RootElement;
        [RTTI.Member(102, 0x70, "EchoParts")] public Ref<HUDElementResource> EchoParts_RootElement;
        [RTTI.Member(107, 0x78, "Ex_LikeGauge")] public Ref<HUDElementResource> Ex_LikeGauge_RootElement;
        [RTTI.Member(115, 0x80, "Ex_BatteryParts")] public Ref<HUDElementResource> Ex_BatteryParts_RootElement;
        [RTTI.Member(131, 0x88, "Ex_StructureLvUpParts")] public Ref<HUDElementResource> Ex_StructureLvUpParts_RootElement;
        [RTTI.Member(25, 0x90, "BridgesIdParts")] public Ref<DSUIHUDAnimatorResource> BridgesIdParts_IntroAnimator;
        [RTTI.Member(41, 0x98, "LikeParts")] public Ref<DSUIHUDAnimatorResource> LikeParts_IntroAnimator;
        [RTTI.Member(74, 0xA0, "BaggageParts")] public Ref<DSUIHUDAnimatorResource> BaggageParts_IntroAnimator;
        [RTTI.Member(103, 0xA8, "EchoParts")] public Ref<DSUIHUDAnimatorResource> EchoParts_IntroAnimator;
        [RTTI.Member(109, 0xB0, "Ex_LikeGauge")] public Ref<DSUIHUDAnimatorResource> Ex_LikeGauge_IntroAnimator;
        [RTTI.Member(119, 0xB8, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> Ex_BatteryParts_IntroAnimator;
        [RTTI.Member(154, 0xC0, "Ex_StructureLvUpParts")] public Ref<DSUIHUDAnimatorResource> Ex_StructureLvUpParts_IntroAnimator;
        [RTTI.Member(26, 0xC8, "BridgesIdParts")] public Ref<DSUIHUDAnimatorResource> BridgesIdParts_IdleAnimator;
        [RTTI.Member(42, 0xD0, "LikeParts")] public Ref<DSUIHUDAnimatorResource> LikeParts_IdleAnimator;
        [RTTI.Member(75, 0xD8, "BaggageParts")] public Ref<DSUIHUDAnimatorResource> BaggageParts_IdleAnimator;
        [RTTI.Member(104, 0xE0, "EchoParts")] public Ref<DSUIHUDAnimatorResource> EchoParts_IdleAnimator;
        [RTTI.Member(110, 0xE8, "Ex_LikeGauge")] public Ref<DSUIHUDAnimatorResource> Ex_LikeGauge_IdleAnimator;
        [RTTI.Member(120, 0xF0, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> Ex_BatteryParts_IdleAnimator;
        [RTTI.Member(155, 0xF8, "Ex_StructureLvUpParts")] public Ref<DSUIHUDAnimatorResource> Ex_StructureLvUpParts_IdleAnimator;
        [RTTI.Member(27, 0x100, "BridgesIdParts")] public Ref<DSUIHUDAnimatorResource> BridgesIdParts_OutroAnimator;
        [RTTI.Member(43, 0x108, "LikeParts")] public Ref<DSUIHUDAnimatorResource> LikeParts_OutroAnimator;
        [RTTI.Member(76, 0x110, "BaggageParts")] public Ref<DSUIHUDAnimatorResource> BaggageParts_OutroAnimator;
        [RTTI.Member(105, 0x118, "EchoParts")] public Ref<DSUIHUDAnimatorResource> EchoParts_OutroAnimator;
        [RTTI.Member(111, 0x120, "Ex_LikeGauge")] public Ref<DSUIHUDAnimatorResource> Ex_LikeGauge_OutroAnimator;
        [RTTI.Member(121, 0x128, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> Ex_BatteryParts_OutroAnimator;
        [RTTI.Member(156, 0x130, "Ex_StructureLvUpParts")] public Ref<DSUIHUDAnimatorResource> Ex_StructureLvUpParts_OutroAnimator;
        [RTTI.Member(14, 0x138, "BridgesIdParts")] public Ref<HUDElementResource> BridgesIdParts_NameRootElement;
        [RTTI.Member(15, 0x140, "BridgesIdParts")] public Ref<HUDTextResource> BridgesIdParts_NameTextElement;
        [RTTI.Member(16, 0x148, "BridgesIdParts")] public Ref<HUDTextResource> BridgesIdParts_OnlineNameTextElement;
        [RTTI.Member(17, 0x150, "BridgesIdParts")] public Ref<HUDElementResource> RankElement;
        [RTTI.Member(18, 0x158, "BridgesIdParts")] public Ref<HUDElementResource> RankResolvingElement;
        [RTTI.Member(19, 0x160, "BridgesIdParts")] public Array<Ref<DSUIHUDPolygonElementResource>> RankPolygons;
        [RTTI.Member(20, 0x170, "BridgesIdParts")] public Ref<HUDElementResource> LegendRootElement;
        [RTTI.Member(21, 0x178, "BridgesIdParts")] public Ref<HUDElementResource> LegendLElement;
        [RTTI.Member(22, 0x180, "BridgesIdParts")] public Ref<HUDElementResource> LegendLLElement;
        [RTTI.Member(23, 0x188, "BridgesIdParts")] public Ref<HUDElementResource> LegendLLLElement;
        [RTTI.Member(24, 0x190, "BridgesIdParts")] public Ref<HUDTextResource> LegendTextElement;
        [RTTI.Member(28, 0x198, "BridgesIdParts")] public int RankPolygonVertexIndex;
        [RTTI.Member(29, 0x19C, "BridgesIdParts")] public float RankPolygonVertexMin;
        [RTTI.Member(30, 0x1A0, "BridgesIdParts")] public float RankPolygonVertexMax;
        [RTTI.Member(31, 0x1A4, "BridgesIdParts")] public float Alpha1Distance;
        [RTTI.Member(32, 0x1A8, "BridgesIdParts")] public Ref<CurveResource> ScreenPosAlphaCurve;
        [RTTI.Member(35, 0x1B0, "LikeParts")] public Array<Ref<HUDElementResource>> OfflineElements;
        [RTTI.Member(36, 0x1C0, "LikeParts")] public Array<Ref<HUDElementResource>> OnlineElements;
        [RTTI.Member(37, 0x1D0, "LikeParts")] public Array<Ref<HUDTextResource>> NumTextElements;
        [RTTI.Member(38, 0x1E0, "LikeParts")] public Ref<HUDElementResource> LikeParts_FocusRootElement;
        [RTTI.Member(39, 0x1E8, "LikeParts")] public Ref<HUDImageResource> LikeParts_FocusImageElement;
        [RTTI.Member(40, 0x1F0, "LikeParts")] public Ref<HUDImageResource> OnlineLikeImageElement;
        [RTTI.Member(44, 0x1F8, "LikeParts")] public Ref<DSUIHUDAnimatorResource> CountUpAnimator;
        [RTTI.Member(45, 0x200, "LikeParts")] public Ref<DSUIHUDAnimatorResource> LikeParts_FocusIntroAnimator;
        [RTTI.Member(46, 0x208, "LikeParts")] public Ref<DSUIHUDAnimatorResource> LikeParts_FocusIdleAnimator;
        [RTTI.Member(47, 0x210, "LikeParts")] public Ref<DSUIHUDAnimatorResource> LikeParts_FocusOutroAnimator;
        [RTTI.Member(48, 0x218, "LikeParts")] public Ref<UITexture> LikeParts_OnlineLikeUITexture;
        [RTTI.Member(49, 0x220, "LikeParts")] public Ref<UITexture> OnlineLikeCheckedUITexture;
        [RTTI.Member(50, 0x228, "LikeParts")] public float DisabledAlpha;
        [RTTI.Member(53, 0x230, "BaggageParts")] public Ref<HUDElementResource> BaggageParts_NameRootElement;
        [RTTI.Member(54, 0x238, "BaggageParts")] public Ref<HUDImageResource> NameImageElement;
        [RTTI.Member(55, 0x240, "BaggageParts")] public Ref<HUDImageResource> NameMaterialImageElement;
        [RTTI.Member(56, 0x248, "BaggageParts")] public Ref<HUDTextResource> BaggageParts_NameTextElement;
        [RTTI.Member(57, 0x250, "BaggageParts")] public Ref<HUDTextResource> EnemyNameTextElement;
        [RTTI.Member(58, 0x258, "BaggageParts")] public Ref<HUDTextResource> BaggageParts_OnlineNameTextElement;
        [RTTI.Member(59, 0x260, "BaggageParts")] public Ref<HUDElementResource> PlaceRootElement;
        [RTTI.Member(60, 0x268, "BaggageParts")] public Ref<HUDImageResource> PlaceImageElement;
        [RTTI.Member(61, 0x270, "BaggageParts")] public Ref<HUDTextResource> PlaceTextElement;
        [RTTI.Member(62, 0x278, "BaggageParts")] public Ref<HUDTextResource> PlaceChTextElement;
        [RTTI.Member(63, 0x280, "BaggageParts")] public Ref<HUDTextResource> EnemyPlaceTextElement;
        [RTTI.Member(64, 0x288, "BaggageParts")] public Ref<HUDTextResource> EnemyPlaceChTextElement;
        [RTTI.Member(65, 0x290, "BaggageParts")] public Ref<HUDTextResource> OnlinePlaceTextElement;
        [RTTI.Member(66, 0x298, "BaggageParts")] public Ref<HUDTextResource> OnlinePlaceChTextElement;
        [RTTI.Member(67, 0x2A0, "BaggageParts")] public Ref<HUDElementResource> LikeRootElement;
        [RTTI.Member(68, 0x2A8, "BaggageParts")] public Ref<HUDImageResource> LikeImageElement;
        [RTTI.Member(69, 0x2B0, "BaggageParts")] public Ref<HUDTextResource> LikeTextElement;
        [RTTI.Member(70, 0x2B8, "BaggageParts")] public Ref<HUDTextResource> EnemyLikeTextElement;
        [RTTI.Member(71, 0x2C0, "BaggageParts")] public Ref<HUDTextResource> OnlineLikeTextElement;
        [RTTI.Member(72, 0x2C8, "BaggageParts")] public Ref<HUDElementResource> BaggageParts_FocusRootElement;
        [RTTI.Member(73, 0x2D0, "BaggageParts")] public Ref<HUDImageResource> BaggageParts_FocusImageElement;
        [RTTI.Member(77, 0x2D8, "BaggageParts")] public Ref<DSUIHUDAnimatorResource> BaggageParts_FocusIntroAnimator;
        [RTTI.Member(78, 0x2E0, "BaggageParts")] public Ref<DSUIHUDAnimatorResource> BaggageParts_FocusIdleAnimator;
        [RTTI.Member(79, 0x2E8, "BaggageParts")] public Ref<DSUIHUDAnimatorResource> BaggageParts_FocusOutroAnimator;
        [RTTI.Member(80, 0x2F0, "BaggageParts")] public Ref<UITexture> SizeSUITexture;
        [RTTI.Member(81, 0x2F8, "BaggageParts")] public Ref<UITexture> SizeMUITexture;
        [RTTI.Member(82, 0x300, "BaggageParts")] public Ref<UITexture> SizeLUITexture;
        [RTTI.Member(83, 0x308, "BaggageParts")] public Ref<UITexture> SizeLLUITexture;
        [RTTI.Member(84, 0x310, "BaggageParts")] public Ref<UITexture> SizeBodybagUITexture;
        [RTTI.Member(85, 0x318, "BaggageParts")] public Ref<UITexture> ToPlaceUITexture;
        [RTTI.Member(86, 0x320, "BaggageParts")] public Ref<UITexture> LikeUITexture;
        [RTTI.Member(87, 0x328, "BaggageParts")] public Ref<UITexture> EnemySizeSUITexture;
        [RTTI.Member(88, 0x330, "BaggageParts")] public Ref<UITexture> EnemySizeMUITexture;
        [RTTI.Member(89, 0x338, "BaggageParts")] public Ref<UITexture> EnemySizeLUITexture;
        [RTTI.Member(90, 0x340, "BaggageParts")] public Ref<UITexture> EnemySizeLLUITexture;
        [RTTI.Member(91, 0x348, "BaggageParts")] public Ref<UITexture> EnemySizeBodybagUITexture;
        [RTTI.Member(92, 0x350, "BaggageParts")] public Ref<UITexture> EnemyToPlaceUITexture;
        [RTTI.Member(93, 0x358, "BaggageParts")] public Ref<UITexture> EnemyLikeUITexture;
        [RTTI.Member(94, 0x360, "BaggageParts")] public Ref<UITexture> OnlineSizeSUITexture;
        [RTTI.Member(95, 0x368, "BaggageParts")] public Ref<UITexture> OnlineSizeMUITexture;
        [RTTI.Member(96, 0x370, "BaggageParts")] public Ref<UITexture> OnlineSizeLUITexture;
        [RTTI.Member(97, 0x378, "BaggageParts")] public Ref<UITexture> OnlineSizeLLUITexture;
        [RTTI.Member(98, 0x380, "BaggageParts")] public Ref<UITexture> OnlineSizeBodybagUITexture;
        [RTTI.Member(99, 0x388, "BaggageParts")] public Ref<UITexture> OnlineToPlaceUITexture;
        [RTTI.Member(100, 0x390, "BaggageParts")] public Ref<UITexture> BaggageParts_OnlineLikeUITexture;
        [RTTI.Member(108, 0x398, "Ex_LikeGauge")] public Ref<DSUIHUDPolygonElementResource> Ex_LikeGauge_PolygonElement;
        [RTTI.Member(112, 0x3A0, "Ex_LikeGauge")] public Ref<DSUIHUDAnimatorResource> FocusAnimator;
        [RTTI.Member(113, 0x3A8, "Ex_LikeGauge")] public Ref<DSUIHUDAnimatorResource> UnFocusAnimator;
        [RTTI.Member(116, 0x3B0, "Ex_BatteryParts")] public Ref<DSUIHUDPolygonElementResource> Ex_BatteryParts_PolygonElement;
        [RTTI.Member(117, 0x3B8, "Ex_BatteryParts")] public Ref<HUDImageResource> IconImageElement;
        [RTTI.Member(118, 0x3C0, "Ex_BatteryParts")] public Ref<HUDImageResource> IconBGImageElement;
        [RTTI.Member(122, 0x3C8, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> SetFullAnimator;
        [RTTI.Member(123, 0x3D0, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> SetHighAnimator;
        [RTTI.Member(124, 0x3D8, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> SetMediumAnimator;
        [RTTI.Member(125, 0x3E0, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> SetLowAnimator;
        [RTTI.Member(126, 0x3E8, "Ex_BatteryParts")] public Ref<DSUIHUDAnimatorResource> SetEmptyAnimator;
        [RTTI.Member(127, 0x3F0, "Ex_BatteryParts")] public Ref<UITexture> IconDefUITexture;
        [RTTI.Member(128, 0x3F8, "Ex_BatteryParts")] public Ref<UITexture> IconChargeUITexture;
        [RTTI.Member(129, 0x400, "Ex_BatteryParts")] public Ref<UITexture> IconEmptyUITexture;
        [RTTI.Member(132, 0x408, "Ex_StructureLvUpParts")] public Ref<HUDElementResource> Material1_RootElement;
        [RTTI.Member(133, 0x410, "Ex_StructureLvUpParts")] public Ref<HUDImageResource> Material1_IconElement;
        [RTTI.Member(134, 0x418, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material1_NormalTextElement;
        [RTTI.Member(135, 0x420, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material1_EnemyTextElement;
        [RTTI.Member(136, 0x428, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material1_OnlineTextElement;
        [RTTI.Member(137, 0x430, "Ex_StructureLvUpParts")] public float Material1_FrameAddPixel;
        [RTTI.Member(138, 0x438, "Ex_StructureLvUpParts")] public Ref<HUDElementResource> Material2_RootElement;
        [RTTI.Member(139, 0x440, "Ex_StructureLvUpParts")] public Ref<HUDImageResource> Material2_IconElement;
        [RTTI.Member(140, 0x448, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material2_NormalTextElement;
        [RTTI.Member(141, 0x450, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material2_EnemyTextElement;
        [RTTI.Member(142, 0x458, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material2_OnlineTextElement;
        [RTTI.Member(143, 0x460, "Ex_StructureLvUpParts")] public float Material2_FrameAddPixel;
        [RTTI.Member(144, 0x468, "Ex_StructureLvUpParts")] public Ref<HUDElementResource> Material3_RootElement;
        [RTTI.Member(145, 0x470, "Ex_StructureLvUpParts")] public Ref<HUDImageResource> Material3_IconElement;
        [RTTI.Member(146, 0x478, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material3_NormalTextElement;
        [RTTI.Member(147, 0x480, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material3_EnemyTextElement;
        [RTTI.Member(148, 0x488, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> Material3_OnlineTextElement;
        [RTTI.Member(149, 0x490, "Ex_StructureLvUpParts")] public float Material3_FrameAddPixel;
        [RTTI.Member(150, 0x498, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> NormalVersionTextElement;
        [RTTI.Member(151, 0x4A0, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> EnemyVersionTextElement;
        [RTTI.Member(152, 0x4A8, "Ex_StructureLvUpParts")] public Ref<HUDTextResource> OnlineVersionTextElement;
        [RTTI.Member(153, 0x4B0, "Ex_StructureLvUpParts")] public Ref<DSUIHUDPolygonElementResource> FramePolygonElement;
        [RTTI.Member(158, 0x4B8, "Offset")] public Ref<CurveResource> MoveCurve;
        [RTTI.Member(159, 0x4C0, "Offset")] public float RectLeft;
        [RTTI.Member(160, 0x4C4, "Offset")] public float RectRight;
        [RTTI.Member(161, 0x4C8, "Offset")] public float RectHeight;
        [RTTI.Member(162, 0x4CC, "Offset")] public float BridgesIdPartsHeight;
        [RTTI.Member(163, 0x4D0, "Offset")] public float ExLikeGaugePartsHeight;
        [RTTI.Member(164, 0x4D4, "Offset")] public float ExBatteryPartsHeight;
        [RTTI.Member(165, 0x4D8, "Offset")] public float ExStructureLvUpPartsHeight;
        [RTTI.Member(166, 0x4DC, "Offset")] public float MoveIgnorePixel;
        [RTTI.Member(167, 0x4E0, "Offset")] public float MoveCameraHoldSec;
        [RTTI.Member(168, 0x4E8, "Offset")] public Ref<CurveResource> ExPartsDownCurve;
        [RTTI.Member(169, 0x4F0, "Offset")] public Ref<CurveResource> ExPartsUpCurve;
        [RTTI.Member(171, 0x500, "Parameters")] public FRGBAColor OfflineFocusColor;
        [RTTI.Member(172, 0x510, "Parameters")] public FRGBAColor OnlineFocusColor;
        [RTTI.Member(173, 0x520, "Parameters")] public float EmptyBaggageAlpha;
    }

    [RTTI.Serializable(0xD5A1801D0135CC70, GameType.DS)]
    public class DSUIMarkerHUDLogicMarkerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> MarkerTemplateElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDElementResource> MarkerImageRootElement;
        [RTTI.Member(5, 0x30, "Element")] public Array<Ref<HUDImageResource>> MarkerImageElements;
        [RTTI.Member(6, 0x40, "Element")] public Ref<HUDTextResource> MarkerMeterTextElement;
        [RTTI.Member(7, 0x48, "Element")] public Ref<HUDShaderResource> MarkerStrandShaderElement;
        [RTTI.Member(8, 0x50, "Element")] public Ref<HUDImageResource> MarkerOutsideImageElement;
        [RTTI.Member(10, 0x58, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerIdleAnimator;
        [RTTI.Member(11, 0x60, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerCautionIdleAnimator;
        [RTTI.Member(12, 0x68, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerNoTagIdleAnimator;
        [RTTI.Member(13, 0x70, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerCDTIdleAnimator;
        [RTTI.Member(14, 0x78, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerGoalCautionIdleAnimator;
        [RTTI.Member(15, 0x80, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerGoalNoTagIdleAnimator;
        [RTTI.Member(16, 0x88, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerGoalDisableIdleAnimator;
        [RTTI.Member(17, 0x90, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerMuleFaintIdleAnimator;
        [RTTI.Member(18, 0x98, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerConstructionNGIdleAnimator;
        [RTTI.Member(19, 0xA0, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerMuleStickyGunIdleAnimator;
        [RTTI.Member(20, 0xA8, "Animation")] public Ref<DSUIHUDAnimatorResource> MarkerCanPutBaggageIdleAnimator;
        [RTTI.Member(22, 0xB0, "Texture")] public Ref<UITexture> CommonOutsideIconUITextures;
        [RTTI.Member(23, 0xB8, "Texture")] public Ref<UITexture> GoalOutsideIconUITextures;
        [RTTI.Member(24, 0xC0, "Texture")] public Ref<UITexture> RedOutsideIconUITextures;
        [RTTI.Member(26, 0xC8, "Shader")] public Ref<UIEffectResource> NormalMarkerStrandShader;
        [RTTI.Member(27, 0xD0, "Shader")] public Ref<UIEffectResource> EnemyMarkerStrandShader;
        [RTTI.Member(28, 0xD8, "Shader")] public Ref<UIEffectResource> OnlineMarkerStrandShader;
        [RTTI.Member(40, 0xE0, "Parameter")] public Ref<CurveResource> OutlineCurve;
        [RTTI.Member(41, 0xE8, "Parameter")] public float OutlineWidthRate;
        [RTTI.Member(42, 0xEC, "Parameter")] public float OutlineHeightRate;
        [RTTI.Member(43, 0xF0, "Parameter")] public float AlphaInCompassMode;
        [RTTI.Member(44, 0xF4, "Parameter")] public float MuleFaintAnimationStartRate;
        [RTTI.Member(45, 0xF8, "Parameter")] public float ArrivalUserMarkerAlpha;
        [RTTI.Member(30, 0x100, "ExclusiveAnimation")] public Ref<CurveResource> OnesetGroupFocusAlphaCurve;
        [RTTI.Member(31, 0x108, "ExclusiveAnimation")] public Ref<CurveResource> OnesetGroupUnFocusAlphaCurve;
        [RTTI.Member(32, 0x110, "ExclusiveAnimation")] public Ref<CurveResource> OnesetGroupFocusRotationCurve;
        [RTTI.Member(33, 0x118, "ExclusiveAnimation")] public Ref<CurveResource> OnesetGroupUnFocusRotationCurve;
        [RTTI.Member(34, 0x120, "ExclusiveAnimation")] public Ref<CurveResource> SameTargetFocusAlphaCurve;
        [RTTI.Member(35, 0x128, "ExclusiveAnimation")] public Ref<CurveResource> SameTargetUnFocusAlphaCurve;
        [RTTI.Member(36, 0x130, "ExclusiveAnimation")] public Ref<CurveResource> SameTargetFocusRotationCurve;
        [RTTI.Member(37, 0x138, "ExclusiveAnimation")] public Ref<CurveResource> SameTargetUnFocusRotationCurve;
        [RTTI.Member(38, 0x140, "ExclusiveAnimation")] public Ref<CurveResource> SameTargetCheckMeterCurve;
    }

    [RTTI.Serializable(0xA4659A058C549784, GameType.DS)]
    public class DSUIMarkerHUDLogicMuleOdradekCurveResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> Element;
        [RTTI.Member(5, 0x28, "Curve")] public Ref<CurveResource> FadeOutCurve;
        [RTTI.Member(6, 0x30, "Curve")] public Ref<CurveResource> ScaleXCurve;
        [RTTI.Member(7, 0x38, "Curve")] public Ref<CurveResource> ScaleYCurve;
        [RTTI.Member(8, 0x40, "Curve")] public Ref<CurveResource> PositionXCurve;
        [RTTI.Member(9, 0x48, "Curve")] public Ref<CurveResource> PositionYCurve;
    }

    [RTTI.Serializable(0x32CAFA300895B520, GameType.DS)]
    public class DSUIMarkerHUDLogicMuleOdradekFlareResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(5, 0x28, "Animation")] public Ref<DSUIHUDAnimatorResource> AlertAnimator;
        [RTTI.Member(6, 0x30, "Animation")] public Ref<DSUIHUDAnimatorResource> AlertPlayerLostAnimator;
        [RTTI.Member(7, 0x38, "Animation")] public Ref<DSUIHUDAnimatorResource> CautionAnimator;
        [RTTI.Member(8, 0x40, "Animation")] public Ref<DSUIHUDAnimatorResource> NoticeAnimator;
    }

    [RTTI.Serializable(0xFB8CF42DF6C73405, GameType.DS)]
    public class DSUIMarkerHUDLogicMuleOdradekResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> MuleOdradekTemplateElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDElementResource> MuleOdradekAlertRootElement;
        [RTTI.Member(5, 0x30, "Element")] public Ref<HUDElementResource> MuleOdradekAlertPlayerLostRootElement;
        [RTTI.Member(6, 0x38, "Element")] public Ref<HUDElementResource> MuleOdradekCautionRootElement;
        [RTTI.Member(7, 0x40, "Element")] public Ref<HUDElementResource> MuleOdradekNoticeRootElement;
        [RTTI.Member(8, 0x48, "Element")] public Ref<HUDElementResource> MuleOdradekSensorCanceledRootElement;
        [RTTI.Member(10, 0x50, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekAlertIntroAnimator;
        [RTTI.Member(11, 0x58, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekAlertIdleAnimator;
        [RTTI.Member(12, 0x60, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekAlertOutroAnimator;
        [RTTI.Member(13, 0x68, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekAlertPlayerLostIntroAnimator;
        [RTTI.Member(14, 0x70, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekAlertPlayerLostIdleAnimator;
        [RTTI.Member(15, 0x78, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekAlertPlayerLostOutroAnimator;
        [RTTI.Member(16, 0x80, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekCautionIntroAnimator;
        [RTTI.Member(17, 0x88, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekCautionIdleAnimator;
        [RTTI.Member(18, 0x90, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekCautionOutroAnimator;
        [RTTI.Member(19, 0x98, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekNoticeIntroAnimator;
        [RTTI.Member(20, 0xA0, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekNoticeIdleAnimator;
        [RTTI.Member(21, 0xA8, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekNoticeOutroAnimator;
        [RTTI.Member(22, 0xB0, "Animation")] public Ref<DSUIHUDAnimatorResource> MuleOdradekSensorCanceledAnimator;
        [RTTI.Member(24, 0xB8, "ZozowanOutline")] public Ref<CurveResource> ZozowanOutlineCurve;
        [RTTI.Member(25, 0xC0, "ZozowanOutline")] public float ZozowanOutlineWidthRate;
        [RTTI.Member(26, 0xC4, "ZozowanOutline")] public float ZozowanOutlineHeightRate;
        [RTTI.Member(28, 0xC8, "CurveResource")] public Array<Ref<DSUIMarkerHUDLogicMuleOdradekCurveResource>> MuleOdradekAlertCurves;
        [RTTI.Member(29, 0xD8, "CurveResource")] public Array<Ref<DSUIMarkerHUDLogicMuleOdradekCurveResource>> MuleOdradekAlertPlayerLostCurves;
        [RTTI.Member(30, 0xE8, "CurveResource")] public Array<Ref<DSUIMarkerHUDLogicMuleOdradekCurveResource>> MuleOdradekCautionCurves;
        [RTTI.Member(31, 0xF8, "CurveResource")] public Array<Ref<DSUIMarkerHUDLogicMuleOdradekCurveResource>> MuleOdradekNoticeCurves;
    }

    [RTTI.Serializable(0xD397814DBF8A33C7, GameType.DS)]
    public class DSUIMarkerHUDLogicNextResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> NextInfoTemplateElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDTextResource> NextInfoTextElement;
        [RTTI.Member(6, 0x30, "Animation")] public Ref<DSUIHUDAnimatorResource> NextInfoIntroAnimator;
        [RTTI.Member(7, 0x38, "Animation")] public Ref<DSUIHUDAnimatorResource> NextInfoOutroAnimator;
        [RTTI.Member(8, 0x40, "Animation")] public Ref<DSUIHUDAnimatorResource> NextInfoIdleAnimator;
    }

    [RTTI.Serializable(0x9B712094738023EB, GameType.DS)]
    public class DSUIMarkerHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "Resources")] public Ref<DSUIMarkerHUDIconResource> IconResource;
        [RTTI.Member(18, 0x80, "Resources")] public Ref<DSUIMarkerHUDLogicMarkerResource> MarkerResource;
        [RTTI.Member(19, 0x88, "Resources")] public Ref<DSUIMarkerHUDLogicMarkerDetailResource> MarkerDetailResource;
        [RTTI.Member(20, 0x90, "Resources")] public Ref<DSUIMarkerHUDLogicMuleOdradekResource> MuleOdradekResource;
        [RTTI.Member(21, 0x98, "Resources")] public Ref<DSUIMarkerHUDLogicMuleOdradekFlareResource> MuleOdradekFlareResource;
        [RTTI.Member(22, 0xA0, "Resources")] public Ref<DSUIMarkerHUDLogicNextResource> NextResource;
        [RTTI.Member(23, 0xA8, "Resources")] public Ref<DSUIMarkerHUDLogicConstructionNGResource> ConstructionNGResource;
        [RTTI.Member(24, 0xB0, "Resources")] public Ref<DSUIMarkerHUDLogicZiplineInfoResource> ZiplineInfoResource;
        [RTTI.Member(25, 0xB8, "Resources")] public Ref<DSUIMarkerHUDLogicRopeInfoResource> RopeInfoResource;
        [RTTI.Member(26, 0xC0, "Resources")] public Ref<DSUIMarkerHUDLogicLifeGaugeInfoResource> LifeGaugeInfoResource;
        [RTTI.Member(27, 0xC8, "Resources")] public Ref<DSUIMarkerHUDLogicBridgeInfoResource> BridgeInfoResource;
        [RTTI.Member(28, 0xD0, "Resources")] public Ref<DSUIMarkerHUDLogicGoalEffectResource> GoalEffectResource;
        [RTTI.Member(30, 0xD8, "DS_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(32, 0xE0, "Sound")] public Ref<SoundResource> MarkerAddSound;
        [RTTI.Member(33, 0xE8, "Sound")] public Ref<SoundResource> MarkerAddNGSound;
        [RTTI.Member(34, 0xF0, "Sound")] public Ref<SoundResource> MarkerRemoveSound;
        [RTTI.Member(35, 0xF8, "Sound")] public Ref<SoundResource> PlayerSearchMarkerSound;
        [RTTI.Member(36, 0x100, "Sound")] public Ref<SoundResource> PlayerSearchGoalMarkerSound;
        [RTTI.Member(37, 0x108, "Sound")] public Ref<SoundResource> EnemySearchMarkerSound;
        [RTTI.Member(38, 0x110, "Sound")] public Ref<SoundResource> LikeItStampSound;
        [RTTI.Member(39, 0x118, "Sound")] public Ref<SoundResource> StrandSound;
        [RTTI.Member(40, 0x120, "Sound")] public Ref<SoundResource> GoalCautionSound;
        [RTTI.Member(41, 0x128, "Sound")] public Ref<SoundResource> GoalCautionShowSound;
        [RTTI.Member(42, 0x130, "Sound")] public Ref<SoundResource> GoalEffectSound;
        [RTTI.Member(43, 0x138, "Sound")] public Ref<SoundResource> DetailCommonFocusSound;
        [RTTI.Member(44, 0x140, "Sound")] public Ref<SoundResource> DetailLikeFocusSound;
    }

    [RTTI.Serializable(0x4012F694E6AAEEC2, GameType.DS)]
    public class DSUIMarkerHUDLogicRopeInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> TemplateElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDTextResource> DefaultMeterTextElement;
        [RTTI.Member(5, 0x30, "Element")] public Ref<HUDTextResource> EndMeterTextElement;
        [RTTI.Member(7, 0x38, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(8, 0x40, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(9, 0x48, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(10, 0x50, "Animation")] public Ref<DSUIHUDAnimatorResource> SetDefalutAnimator;
        [RTTI.Member(11, 0x58, "Animation")] public Ref<DSUIHUDAnimatorResource> SetEndAnimator;
    }

    [RTTI.Serializable(0xE25DF8FA8C1284B0, GameType.DS)]
    public class DSUIMarkerHUDLogicZiplineInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> ZiplineInfoTemplateElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDElementResource> ZiplineInfoFocusElement;
        [RTTI.Member(5, 0x30, "Element")] public Ref<HUDTextResource> ZiplineInfoFocusMeterTextElement;
        [RTTI.Member(6, 0x38, "Element")] public Ref<HUDElementResource> ZiplineInfoNearElement;
        [RTTI.Member(7, 0x40, "Element")] public Ref<HUDTextResource> ZiplineInfoNearMeterTextElement;
        [RTTI.Member(8, 0x48, "Element")] public Ref<HUDElementResource> ZiplineInfoTooFarElement;
        [RTTI.Member(9, 0x50, "Element")] public Ref<HUDTextResource> ZiplineInfoTooFarMeterTextElement;
        [RTTI.Member(11, 0x58, "Animation")] public Ref<DSUIHUDAnimatorResource> ZiplineInfoIntroAnimator;
        [RTTI.Member(12, 0x60, "Animation")] public Ref<DSUIHUDAnimatorResource> ZiplineInfoOutroAnimator;
        [RTTI.Member(13, 0x68, "Animation")] public Ref<DSUIHUDAnimatorResource> ZiplineInfoIdleAnimator;
    }

    [RTTI.Serializable(0x83FB373C124281BB, GameType.DS)]
    public class DSUIMarkerIconResource : Resource
    {
        [RTTI.Member(3, 0x20, "MarkerIcon")] public Array<Ref<UITexture>> UITextures;
        [RTTI.Member(4, 0x30, "MarkerIcon")] public Ref<LocalizedTextResource> MapIconInfoText;
        [RTTI.Member(5, 0x38, "MarkerIcon")] public float HUDIconHeight;
        [RTTI.Member(6, 0x3C, "MarkerIcon")] public int MapScaleDownLevel;
        [RTTI.Member(7, 0x40, "MarkerIcon")] public float TextureScale;
    }

    [RTTI.Serializable(0x109453A099B025E9, GameType.DS)]
    public class DSUIMenuCommonGaugeGroupResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "GaugeGroup")] public EMenuOrientation Orientation;
    }

    [RTTI.Serializable(0x4CD258D67335B24, GameType.DS)]
    public class DSUIMenuCommonGaugeGroupTag : VisualTag
    {
    }

    [RTTI.Serializable(0xC3091B8793D40C19, GameType.DS)]
    public class DSUIMenuCommonGaugeGroupWidget : Widget
    {
    }

    [RTTI.Serializable(0x4F29F5E3040E3754, GameType.DS)]
    public class DSUIMenuCommonGaugeResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(51, 0x190, "Elements")] public Array<Ref<MenuPolygonResource>> Polygons;
        [RTTI.Member(49, 0x1A0, "Elements")] public Ref<MenuDataBinding> PolygonScaleX;
        [RTTI.Member(50, 0x1A8, "Elements")] public Ref<MenuDataBinding> PolygonScaleY;
    }

    [RTTI.Serializable(0x786672397EF0A021, GameType.DS)]
    public class DSUIMenuCommonGaugeTag : VisualTag
    {
    }

    [RTTI.Serializable(0x1742F9B1E27CA184, GameType.DS)]
    public class DSUIMenuCommonGaugeWidget : Widget
    {
    }

    [RTTI.Serializable(0x41EF79BD328A9C9C, GameType.DS)]
    public class DSUIMenuCountNumberResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "CountNumber")] public EDSUIMenuCountNumberStartType StartType;
        [RTTI.Member(50, 0x198, "CountNumber")] public Ref<MenuDataBinding> StartNumber;
        [RTTI.Member(51, 0x1A0, "CountNumber")] public Ref<MenuDataBinding> EndNumber;
        [RTTI.Member(53, 0x1A8, "CountNumber")] public Ref<MenuDataBinding> StartDelayFrame;
        [RTTI.Member(54, 0x1B0, "CountNumber")] public Ref<MenuDataBinding> CountFrame;
        [RTTI.Member(55, 0x1B8, "CountNumber")] public Ref<MenuDataBinding> TextFormat;
        [RTTI.Member(56, 0x1C0, "CountNumber")] public Ref<MenuDataBinding> UnitText;
        [RTTI.Member(57, 0x1C8, "CountNumber")] public Ref<MenuDataBinding> UniqueId;
        [RTTI.Member(52, 0x1D0, "CountNumber")] public bool IsFloat;
        [RTTI.Member(58, 0x1D8, "CountNumber")] public Ref<MenuActionResource> OnStartAction;
        [RTTI.Member(59, 0x1E0, "CountNumber")] public Ref<MenuActionResource> OnEndAction;
        [RTTI.Member(60, 0x1E8, "CountNumber")] public Ref<SoundResource> Sound;
    }

    [RTTI.Serializable(0xCD02CC4ABAEB6CCB, GameType.DS)]
    public class DSUIMenuCountNumberTag : VisualTag
    {
    }

    [RTTI.Serializable(0xC01BA163E726FD42, GameType.DS)]
    public class DSUIMenuCountNumberWidget : Widget
    {
    }

    [RTTI.Serializable(0x7041CA956E7DD77D, GameType.DS)]
    public class DSUIMenuFunctionTag : Tag
    {
    }

    [RTTI.Serializable(0xFA1B912BB142A9E3, GameType.DS)]
    public class DSUIMenuGaugeResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Textures")] public Ref<UITexture> GaugeBodyUITexture;
        [RTTI.Member(48, 0x188, "Textures")] public Ref<UITexture> GaugeHeadMaskUITexture;
        [RTTI.Member(50, 0x190, "Colors")] public Array<RGBAColor> GaugeBodyColors;
        [RTTI.Member(52, 0x1A0, "DataSource")] public Ref<MenuDataBinding> Source;
    }

    [RTTI.Serializable(0xA5A89F96399FD5C8, GameType.DS)]
    public class DSUIMenuGaugeTag : VisualTag
    {
    }

    [RTTI.Serializable(0x6FF2EE827F5FFD4E, GameType.DS)]
    public class DSUIMenuGaugeWidget : Widget
    {
    }

    [RTTI.Serializable(0x8BB1B10C7B7DF608, GameType.DS)]
    public class DSUIMenuJointResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "DS_Joint")] public Ref<MenuDataBinding> OffsetX;
        [RTTI.Member(50, 0x198, "DS_Joint")] public Ref<MenuDataBinding> OffsetY;
        [RTTI.Member(51, 0x1A0, "DS_Joint")] public Ref<MenuDataBinding> OffsetZ;
    }

    [RTTI.Serializable(0xFA33F0CCB2D1C4C, GameType.DS)]
    public class DSUIMenuJointTag : VisualTag
    {
    }

    [RTTI.Serializable(0x4B0950D89F23E1D9, GameType.DS)]
    public class DSUIMenuJointWidget : Widget
    {
    }

    [RTTI.Serializable(0x7912642F09DC27D4, GameType.DS)]
    public class DSUIMenuLoadingIconResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "LoadingIcon")] public Ref<MenuTextureResource> LoadingTargetTextureElement;
    }

    [RTTI.Serializable(0x5FE89148B83846AE, GameType.DS)]
    public class DSUIMenuLoadingIconTag : VisualTag
    {
    }

    [RTTI.Serializable(0x6219697DB7E5A26D, GameType.DS)]
    public class DSUIMenuLoadingIconWidget : Widget
    {
    }

    [RTTI.Serializable(0xD8E5F7B62D128E1C, GameType.DS)]
    public class DSUIMenuProgressBarResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "ProgressBar")] public Ref<MenuTextureResource> ProgressBarTextureResource;
        [RTTI.Member(50, 0x198, "ProgressBar")] public EDSUIProgressDirectionType ProgressDirectionType;
    }

    [RTTI.Serializable(0x401D887283DBAD5D, GameType.DS)]
    public class DSUIMenuProgressBarTag : VisualTag
    {
    }

    [RTTI.Serializable(0x393CDD03AAC0FBC7, GameType.DS)]
    public class DSUIMenuProgressBarWidget : Widget
    {
    }

    [RTTI.Serializable(0x743FC8539063FD1C, GameType.DS)]
    public class DSUIMenuResource : InGameMenuResource
    {
        [RTTI.Member(63, 0x1E8, "DSPages")] public Ref<MenuPage> DeviceMenuPage;
        [RTTI.Member(64, 0x1F0, "DSPages")] public Ref<MenuPage> GameOverMenuPage;
        [RTTI.Member(65, 0x1F8, "DSPages")] public Ref<MenuPage> DemoPauseMenuPage;
        [RTTI.Member(66, 0x200, "DSPages")] public Ref<MenuPage> InGamePauseMenuPage;
        [RTTI.Member(67, 0x208, "DSPages")] public Ref<MenuPage> SkipMenu;
        [RTTI.Member(68, 0x210, "DSPages")] public Ref<MenuPage> MovieMenu;
        [RTTI.Member(69, 0x218, "DSPages")] public Ref<MenuPage> CommonDialogueMenuPage;
        [RTTI.Member(70, 0x220, "DSPages")] public Ref<MenuPage> LoadingScreenMenuPage;
        [RTTI.Member(71, 0x228, "DSPages")] public Ref<MenuPage> TitleMenuPage;
        [RTTI.Member(72, 0x230, "DSPages")] public Ref<MenuPage> SplashScreenMenuPage;
        [RTTI.Member(73, 0x238, "DSPages")] public Ref<MenuPage> SignboardMenuPage;
        [RTTI.Member(74, 0x240, "DSPages")] public Ref<MenuPage> BirthdayMenuPage;
        [RTTI.Member(75, 0x248, "DSPages")] public Ref<MenuPage> InstallMenuPage;
        [RTTI.Member(76, 0x250, "DSPages")] public Ref<MenuPage> PrivateRoomPhotoMenuPage;
        [RTTI.Member(77, 0x258, "DSPages")] public Ref<MenuPage> SDRConfigMenuPage;
        [RTTI.Member(78, 0x260, "DSPages")] public Ref<MenuPage> HDRConfigMenuPage;
        [RTTI.Member(79, 0x268, "DSPages")] public Ref<MenuPage> PhotoModeMenuPage;
        [RTTI.Member(80, 0x270, "DSPages")] public Ref<MenuPage> LoadMenuPage;
        [RTTI.Member(81, 0x278, "DSPages")] public Ref<MenuPage> KeyAssignMenuPage;
        [RTTI.Member(83, 0x288, "DSSounds")] public Ref<SoundResource> SoundBeep;
        [RTTI.Member(84, 0x298, "DSSounds")] public Ref<SoundResource> SoundCursor;
        [RTTI.Member(85, 0x2A8, "DSSounds")] public Ref<SoundResource> SoundAccept;
        [RTTI.Member(86, 0x2B8, "DSSounds")] public Ref<SoundResource> SoundCancel;
        [RTTI.Member(87, 0x2C8, "DSSounds")] public Ref<SoundResource> SoundLoadingMusic;
        [RTTI.Member(88, 0x2D8, "DSSounds")] public Ref<SoundResource> SoundResultMusic;
        [RTTI.Member(90, 0x2E0, "DSFonts")] public Ref<LocalizedFontResource> DefaultFontResource;
        [RTTI.Member(91, 0x2E8, "DSFonts")] public Ref<Typeface> SSTFontFamily;
        [RTTI.Member(92, 0x2F0, "DSFonts")] public Ref<Typeface> BOCDFontFamily;
        [RTTI.Member(93, 0x2F8, "DSFonts")] public Ref<Typeface> EXPSFontFamily;
        [RTTI.Member(95, 0x300, "DSShaders")] public Ref<UIEffectResource> LoadingIconShader;
        [RTTI.Member(97, 0x308, "DSLocalized")] public Ref<DSUIGeneralLocalizedResource> GeneralLocalizedResource;
        [RTTI.Member(99, 0x310, "DSMenuStyle")] public Array<Ref<DSUIMenuStyleCollectionResource>> MenuStyleCollections;
        [RTTI.Member(101, 0x320, "DSResource")] public Ref<DSUIGeneralIconResource> GeneralIcon;
        [RTTI.Member(102, 0x328, "DSResource")] public Ref<DSUIKeyHelpIconResource> KeyHelpIconResource;
        [RTTI.Member(103, 0x330, "DSResource")] public Ref<DSUIBaggageCarrierSlotTypeResource> BaggageCarrierSlotTypeResource;
        [RTTI.Member(104, 0x338, "DSResource")] public Ref<DSUIBaggageListItemTypeResource> BaggageListItemTypeResource;
        [RTTI.Member(105, 0x340, "DSResource")] public Ref<DSUISignboardIconResource> SignboardIcon;
        [RTTI.Member(106, 0x348, "DSResource")] public Ref<DSUIGameDesignParameters> GameDesignParam;
        [RTTI.Member(107, 0x350, "DSResource")] public Ref<DSUICatalogueImageResource> CatalogueImage;
        [RTTI.Member(108, 0x358, "DSResource")] public Ref<DSUIDeviceMapMenuIconResource> DeviceMapIconResource;
        [RTTI.Member(109, 0x360, "DSResource")] public Ref<DSUIDeviceMapMenuIconFilterResource> DeviceMapIconFilterResource;
        [RTTI.Member(110, 0x368, "DSResource")] public Ref<DSUIMenuSoundResource> MenuSoundResource;
        [RTTI.Member(111, 0x370, "DSResource")] public Ref<DSUIConstructionDefaultSetting> ConstructionDefaultSetting;
        [RTTI.Member(112, 0x378, "DSResource")] public Ref<DSUIVehicleCustomizeResource> VehicleCustomizeResource;
        [RTTI.Member(113, 0x380, "DSResource")] public Ref<DSUIBackpackCustomizeResource> BackpackCustomizeResource;
        [RTTI.Member(114, 0x388, "DSResource")] public Ref<DSUIUniformCustomizeResource> UniformCustomizeResource;
        [RTTI.Member(115, 0x390, "DSResource")] public Ref<DSUIDeviceUnlockDialogHelperResource> DeviceUnlockDialogHelperResource;
        [RTTI.Member(116, 0x398, "DSResource")] public Ref<DSMenuRadioResource> ResidentMenuRadioResource;
        [RTTI.Member(117, 0x3A0, "DSResource")] public Ref<DSUIStarGraphParametersResource> StarGraphParametersResource;
        [RTTI.Member(118, 0x3A8, "DSResource")] public Ref<DSUIPlayerStatusGaugeInfoResource> PlayerStatusGaugeInfoResource;
        [RTTI.Member(120, 0x3B0, "DSFact")] public Ref<BooleanFact> Fact_CommonDialogue_Opened;
        [RTTI.Member(121, 0x3B8, "DSFact")] public Ref<BooleanFact> Fact_CommonDialogue_Selected_OK;
        [RTTI.Member(122, 0x3C0, "DSFact")] public Ref<BooleanFact> Fact_CommonDialogue_Selected_Cancel;
        [RTTI.Member(123, 0x3C8, "DSFact")] public Ref<BooleanFact> Fact_CommonDialogue_Selected_Yes;
        [RTTI.Member(124, 0x3D0, "DSFact")] public Ref<BooleanFact> Fact_CommonDialogue_Selected_No;
        [RTTI.Member(125, 0x3D8, "DSFact")] public Ref<BooleanFact> Fact_CommonDialogue_Canceled;
        [RTTI.Member(126, 0x3E0, "DSFact")] public Ref<BooleanFact> Fact_FastTravelUnlocked;
        [RTTI.Member(127, 0x3E8, "DSFact")] public Ref<BooleanFact> Fact_FastTravelDisabled;
        [RTTI.Member(128, 0x3F0, "DSFact")] public Ref<BooleanFact> FastTravelDisablePhase1Start;
        [RTTI.Member(129, 0x3F8, "DSFact")] public Ref<BooleanFact> FastTravelDisablePhase1End;
        [RTTI.Member(130, 0x400, "DSFact")] public Ref<BooleanFact> FastTravelDisablePhase2Duling;
        [RTTI.Member(131, 0x408, "DSFact")] public Ref<BooleanFact> Fact_AbsenceFragile;
        [RTTI.Member(132, 0x410, "DSFact")] public Ref<BooleanFact> Fact_OnTheReturnRoute;
        [RTTI.Member(133, 0x418, "DSFact")] public Ref<BooleanFact> Fact_M75_RecycleCrystal;
        [RTTI.Member(134, 0x420, "DSFact")] public Ref<BooleanFact> Fact_M127_RecycleCrystalWarning;
        [RTTI.Member(135, 0x428, "DSFact")] public Ref<BooleanFact> Fact_M127_RecycleCrystal;
        [RTTI.Member(137, 0x430, "DSEffect")] public Ref<EntityResource> MenuBackgroundEffectResource;
        [RTTI.Member(139, 0x438, "DSFade")] public Ref<ScreenEffectResource> BlackShortFadeOutResource;
        [RTTI.Member(140, 0x440, "DSFade")] public Ref<ScreenEffectResource> BlackMiddleFadeOutResource;
        [RTTI.Member(141, 0x448, "DSFade")] public Ref<ScreenEffectResource> BlackLongFadeOutResource;
        [RTTI.Member(142, 0x450, "DSFade")] public Ref<ScreenEffectResource> BlackSuperLongFadeOutResource;
        [RTTI.Member(143, 0x458, "DSFade")] public Ref<ScreenEffectResource> BlackImmediatelyFadeOutResource;
        [RTTI.Member(144, 0x460, "DSFade")] public Ref<ScreenEffectResource> BlackCustomFadeOutResource;
        [RTTI.Member(145, 0x468, "DSFade")] public Ref<ScreenEffectResource> WhiteShortFadeOutResource;
        [RTTI.Member(146, 0x470, "DSFade")] public Ref<ScreenEffectResource> WhiteMiddleFadeOutResource;
        [RTTI.Member(147, 0x478, "DSFade")] public Ref<ScreenEffectResource> WhiteLongFadeOutResource;
        [RTTI.Member(148, 0x480, "DSFade")] public Ref<ScreenEffectResource> WhiteSuperLongFadeOutResource;
        [RTTI.Member(149, 0x488, "DSFade")] public Ref<ScreenEffectResource> WhiteImmediatelyFadeOutResource;
        [RTTI.Member(150, 0x490, "DSFade")] public Ref<ScreenEffectResource> WhiteCustomFadeOutResource;
        [RTTI.Member(151, 0x4C8, "DSFade")] public Ref<ScreenEffectResource> BlackShortFadeInResource;
        [RTTI.Member(152, 0x4D0, "DSFade")] public Ref<ScreenEffectResource> BlackMiddleFadeInResource;
        [RTTI.Member(153, 0x4D8, "DSFade")] public Ref<ScreenEffectResource> BlackLongFadeInResource;
        [RTTI.Member(154, 0x4E0, "DSFade")] public Ref<ScreenEffectResource> BlackSuperLongFadeInResource;
        [RTTI.Member(155, 0x4E8, "DSFade")] public Ref<ScreenEffectResource> BlackImmediatelyFadeInResource;
        [RTTI.Member(156, 0x4F0, "DSFade")] public Ref<ScreenEffectResource> BlackCustomFadeInResource;
        [RTTI.Member(157, 0x4F8, "DSFade")] public Ref<ScreenEffectResource> WhiteShortFadeInResource;
        [RTTI.Member(158, 0x500, "DSFade")] public Ref<ScreenEffectResource> WhiteMiddleFadeInResource;
        [RTTI.Member(159, 0x508, "DSFade")] public Ref<ScreenEffectResource> WhiteLongFadeInResource;
        [RTTI.Member(160, 0x510, "DSFade")] public Ref<ScreenEffectResource> WhiteSuperLongFadeInResource;
        [RTTI.Member(161, 0x518, "DSFade")] public Ref<ScreenEffectResource> WhiteImmediatelyFadeInResource;
        [RTTI.Member(162, 0x520, "DSFade")] public Ref<ScreenEffectResource> WhiteCustomLongFadeInResource;
        [RTTI.Member(164, 0x558, "DSSceneCapture")] public float SceneCaptureDelaySec;
    }

    [RTTI.Serializable(0xC46E807E00078193, GameType.DS)]
    public class DSUIMenuSelectViewResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "DS_SelectView_Properties")] public Ref<MenuDataBinding> ActiveIndexWhenNotFocused;
        [RTTI.Member(50, 0x198, "DS_SelectView_Properties")] public Ref<MenuSelectViewResource> SelectViewResource;
        [RTTI.Member(51, 0x1A0, "DS_SelectView_Properties")] public Ref<MenuAnimationResource> InitialSelectingAnimation;
        [RTTI.Member(52, 0x1A8, "DS_SelectView_Properties")] public Ref<MenuAnimationResource> InitialNotSelectingAnimation;
        [RTTI.Member(53, 0x1B0, "DS_SelectView_Properties")] public Ref<MenuAnimationResource> FocusReceiveAnimation;
        [RTTI.Member(54, 0x1B8, "DS_SelectView_Properties")] public Ref<MenuAnimationResource> FocusLostAnimation;
    }

    [RTTI.Serializable(0xA72243AD9C183EB8, GameType.DS)]
    public class DSUIMenuSelectViewTag : VisualTag
    {
    }

    [RTTI.Serializable(0x9D9D8519AB84B03F, GameType.DS)]
    public class DSUIMenuSelectViewWidget : Widget
    {
    }

    [RTTI.Serializable(0x2BE731D27196DF08, GameType.DS)]
    public class DSUIMenuSoundResource : Resource
    {
        [RTTI.Member(3, 0x20, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> None;
        [RTTI.Member(4, 0x28, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Device;
        [RTTI.Member(5, 0x30, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceTop;
        [RTTI.Member(6, 0x38, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceDelivery;
        [RTTI.Member(7, 0x40, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceMission;
        [RTTI.Member(8, 0x48, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceWish;
        [RTTI.Member(9, 0x50, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceSystem;
        [RTTI.Member(10, 0x58, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceBaggage;
        [RTTI.Member(11, 0x60, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceRadio;
        [RTTI.Member(12, 0x68, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DevicePreparation;
        [RTTI.Member(13, 0x70, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceHandOver;
        [RTTI.Member(14, 0x78, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceConstruction;
        [RTTI.Member(15, 0x80, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceBridgesID;
        [RTTI.Member(16, 0x88, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceFastTravel;
        [RTTI.Member(17, 0x90, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceMail;
        [RTTI.Member(18, 0x98, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceBackPack;
        [RTTI.Member(19, 0xA0, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceVehicle;
        [RTTI.Member(20, 0xA8, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceMapDemo;
        [RTTI.Member(21, 0xB0, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceQpidResult;
        [RTTI.Member(22, 0xB8, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceMusic;
        [RTTI.Member(23, 0xC0, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DevicePrivateRoomColor;
        [RTTI.Member(24, 0xC8, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DeviceFinalResult;
        [RTTI.Member(25, 0xD0, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Database;
        [RTTI.Member(26, 0xD8, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DatabaseTips;
        [RTTI.Member(27, 0xE0, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DatabaseArchive;
        [RTTI.Member(28, 0xE8, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DatabaseInfoLog;
        [RTTI.Member(29, 0xF0, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DatabaseMemoryChip;
        [RTTI.Member(30, 0xF8, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> CommonDialogue;
        [RTTI.Member(31, 0x100, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> InGamePause;
        [RTTI.Member(32, 0x108, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> DemoPause;
        [RTTI.Member(33, 0x110, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Controller;
        [RTTI.Member(34, 0x118, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Config;
        [RTTI.Member(35, 0x120, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> PhotoMode;
        [RTTI.Member(36, 0x128, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> MissionResult;
        [RTTI.Member(37, 0x130, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Signboard;
        [RTTI.Member(38, 0x138, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Uniform;
        [RTTI.Member(39, 0x140, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> CliffMemories;
        [RTTI.Member(40, 0x148, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> PrivateRoomPhoto;
        [RTTI.Member(41, 0x150, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Title;
        [RTTI.Member(42, 0x158, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> GameOver;
        [RTTI.Member(43, 0x160, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Birthday;
        [RTTI.Member(44, 0x168, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> Install;
        [RTTI.Member(45, 0x170, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> LoadingScreen;
        [RTTI.Member(46, 0x178, "DSMenuStyleSound")] public Ref<DSUIMenuStyleSound> SplashScreen;
    }

    [RTTI.Serializable(0x53890B492948F6A7, GameType.DS)]
    public class DSUIMenuStyleCollectionResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<MenuStyleClass>> MenuStyleClasses;
    }

    [RTTI.Serializable(0x62F511E6DEC205DE, GameType.DS)]
    public class DSUIMenuStyleSound : MenuStyleSound
    {
        [RTTI.Member(41, 0x150, "DSSound")] public String ClassName;
        [RTTI.Member(42, 0x158, "DSSound")] public Ref<SoundResource> OpenSound;
        [RTTI.Member(43, 0x160, "DSSound")] public Ref<SoundResource> CloseSound;
        [RTTI.Member(44, 0x168, "DSSound")] public Ref<SoundResource> BeepSound;
        [RTTI.Member(45, 0x170, "DSSound")] public Ref<SoundResource> CheckBoxHoldSound;
    }

    [RTTI.Serializable(0xBA01E4826413E0A7, GameType.DS)]
    public class DSUIMiniStarGraphMenuResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "DSBindings")] public Ref<MenuDataBinding> NetUserNameHash;
        [RTTI.Member(51, 0x198, "PolygonElements")] public Ref<MenuElementResource> PolygonElements_BridgeLink;
        [RTTI.Member(52, 0x1A0, "PolygonElements")] public Ref<MenuElementResource> PolygonElements_Safety;
        [RTTI.Member(53, 0x1A8, "PolygonElements")] public Ref<MenuElementResource> PolygonElements_Service;
        [RTTI.Member(54, 0x1B0, "PolygonElements")] public Ref<MenuElementResource> PolygonElements_Delivery;
        [RTTI.Member(55, 0x1B8, "PolygonElements")] public Ref<MenuElementResource> PolygonElements_Speed;
        [RTTI.Member(57, 0x1C0, "ResolvingElements")] public Ref<MenuElementResource> ResolvingElements_BridgeLink;
        [RTTI.Member(58, 0x1C8, "ResolvingElements")] public Ref<MenuElementResource> ResolvingElements_Safety;
        [RTTI.Member(59, 0x1D0, "ResolvingElements")] public Ref<MenuElementResource> ResolvingElements_Service;
        [RTTI.Member(60, 0x1D8, "ResolvingElements")] public Ref<MenuElementResource> ResolvingElements_Delivery;
        [RTTI.Member(61, 0x1E0, "ResolvingElements")] public Ref<MenuElementResource> ResolvingElements_Speed;
    }

    [RTTI.Serializable(0xC241DE0AC358A595, GameType.DS)]
    public class DSUIMiniStarGraphMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0xBF936EE4A21B0FED, GameType.DS)]
    public class DSUIMiniStarGraphMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0xD9E6F2E2F1B726F8, GameType.DS)]
    public class DSUIMissileReticleHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x2F3E41667E955BA8, GameType.DS)]
    public class DSUIMissileReticleHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Array<Ref<HUDElementResource>> AmmoRootElements;
        [RTTI.Member(19, 0x90, "DS_Logic")] public Ref<HUDElementResource> AmmoTemplateElement;
        [RTTI.Member(20, 0x98, "DS_Logic")] public Ref<HUDElementResource> LockOnMarkerRootElement;
        [RTTI.Member(21, 0xA0, "DS_Logic")] public Ref<HUDElementResource> LockOnMarkerTemplateElement;
        [RTTI.Member(22, 0xA8, "DS_Logic")] public Ref<HUDElementResource> LockOffMarkerRootElement;
        [RTTI.Member(23, 0xB0, "DS_Logic")] public Ref<HUDElementResource> LockOffMarkerTemplateElement;
        [RTTI.Member(25, 0xB8, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(26, 0xC0, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> EmptyIntroAnimator;
        [RTTI.Member(27, 0xC8, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(28, 0xD0, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> UnlockToLockAnimator;
        [RTTI.Member(29, 0xD8, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> LockToUnlockAnimator;
        [RTTI.Member(30, 0xE0, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> ShotAnimator;
        [RTTI.Member(31, 0xE8, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> ShotToLockAnimator;
        [RTTI.Member(32, 0xF0, "StateChangeAnimation")] public Ref<DSUIHUDAnimatorResource> ShotToUnlockAnimator;
        [RTTI.Member(34, 0xF8, "IdleAnimation")] public Ref<DSUIHUDAnimatorResource> AlwaysIdleAnimator;
        [RTTI.Member(35, 0x100, "IdleAnimation")] public Ref<DSUIHUDAnimatorResource> UnlockIdleAnimator;
        [RTTI.Member(36, 0x108, "IdleAnimation")] public Ref<DSUIHUDAnimatorResource> LockIdleAnimator;
        [RTTI.Member(38, 0x110, "AmmoAnimation")] public Ref<DSUIHUDAnimatorResource> AmmoEmptyAnimator;
        [RTTI.Member(39, 0x118, "AmmoAnimation")] public Ref<DSUIHUDAnimatorResource> AmmoUnlockAnimator;
        [RTTI.Member(40, 0x120, "AmmoAnimation")] public Ref<DSUIHUDAnimatorResource> AmmoLockAnimator;
        [RTTI.Member(42, 0x128, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerNearIntroAnimator;
        [RTTI.Member(43, 0x130, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerFarIntroAnimator;
        [RTTI.Member(44, 0x138, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerOutroAnimator;
        [RTTI.Member(45, 0x140, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerNearToFarAnimator;
        [RTTI.Member(46, 0x148, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerFarToNearAnimator;
        [RTTI.Member(47, 0x150, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerNearIdleAnimator;
        [RTTI.Member(48, 0x158, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerFarIdleAnimator;
        [RTTI.Member(49, 0x160, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerNearShotOutroAnimator;
        [RTTI.Member(50, 0x168, "LockOnMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOnMarkerFarShotOutroAnimator;
        [RTTI.Member(52, 0x170, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCanIntroAnimator;
        [RTTI.Member(53, 0x178, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCannotNearIntroAnimator;
        [RTTI.Member(54, 0x180, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCannotFarIntroAnimator;
        [RTTI.Member(55, 0x188, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerOutroAnimator;
        [RTTI.Member(56, 0x190, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCanToCannotAnimator;
        [RTTI.Member(57, 0x198, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCannotToCanAnimator;
        [RTTI.Member(58, 0x1A0, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCannotNearToFarAnimator;
        [RTTI.Member(59, 0x1A8, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCannotFarToNearAnimator;
        [RTTI.Member(60, 0x1B0, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerIdleAnimator;
        [RTTI.Member(61, 0x1B8, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCanIdleAnimator;
        [RTTI.Member(62, 0x1C0, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCannotNearIdleAnimator;
        [RTTI.Member(63, 0x1C8, "LockOffMarkerAnimation")] public Ref<DSUIHUDAnimatorResource> LockOffMarkerCannotFarIdleAnimator;
        [RTTI.Member(65, 0x1D0, "ActivateAnimation")] public Ref<DSUIHUDAnimatorResource> ActivateAnimator;
        [RTTI.Member(66, 0x1D8, "ActivateAnimation")] public Ref<DSUIHUDAnimatorResource> DeactivateAnimator;
        [RTTI.Member(68, 0x1E0, "Sound")] public Ref<SoundResource> AimEnemySound;
        [RTTI.Member(69, 0x1E8, "Sound")] public Ref<SoundResource> MissEnemySound;
    }

    [RTTI.Serializable(0x4C868983F2F6367B, GameType.DS)]
    public class DSUIMissionAchievementItemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> DescriptionText;
        [RTTI.Member(3, 0x28)] public bool IsAddIndent;
    }

    [RTTI.Serializable(0xADB5C425731CE167, GameType.DS)]
    public class DSUIMissionAchievementResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSUIMissionAchievementItemResource> CompletedMissoin;
        [RTTI.Member(3, 0x28)] public Ref<DSUIMissionAchievementItemResource> CompletedMissionMain;
        [RTTI.Member(4, 0x30)] public Ref<DSUIMissionAchievementItemResource> OompletedMissionSimple;
        [RTTI.Member(5, 0x38)] public Ref<DSUIMissionAchievementItemResource> CompletedMissionAuto;
        [RTTI.Member(6, 0x40)] public Ref<DSUIMissionAchievementItemResource> CompletedMissionSupply;
        [RTTI.Member(7, 0x48)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMission;
        [RTTI.Member(8, 0x50)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremium;
        [RTTI.Member(9, 0x58)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumAwesome;
        [RTTI.Member(10, 0x60)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegend;
        [RTTI.Member(11, 0x68)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendSafety;
        [RTTI.Member(12, 0x70)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendDelivery;
        [RTTI.Member(13, 0x78)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendService;
        [RTTI.Member(14, 0x80)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendSpeed;
        [RTTI.Member(15, 0x88)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegends;
        [RTTI.Member(16, 0x90)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsSafety;
        [RTTI.Member(17, 0x98)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsDelivery;
        [RTTI.Member(18, 0xA0)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsService;
        [RTTI.Member(19, 0xA8)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsSpeed;
        [RTTI.Member(20, 0xB0)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsOfLegends;
        [RTTI.Member(21, 0xB8)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsOfLegendsSafety;
        [RTTI.Member(22, 0xC0)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsOfLegendsDelivery;
        [RTTI.Member(23, 0xC8)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsOfLegendsService;
        [RTTI.Member(24, 0xD0)] public Ref<DSUIMissionAchievementItemResource> ClearSimpleMissionPremiumLegendOfLegendsOfLegendsSpeed;
        [RTTI.Member(25, 0xD8)] public Ref<DSUIMissionAchievementItemResource> CompletedSimpleMissionPremiumLegend;
        [RTTI.Member(26, 0xE0)] public Ref<DSUIMissionAchievementItemResource> CompletedSimpleMissionPremiumLegendOfLegends;
        [RTTI.Member(27, 0xE8)] public Ref<DSUIMissionAchievementItemResource> CompletedSimpleMissionPremiumLegendOfLegendsOfLegends;
        [RTTI.Member(28, 0xF0)] public Ref<DSUIMissionAchievementItemResource> DeliveryBaggage;
        [RTTI.Member(29, 0xF8)] public Ref<DSUIMissionAchievementItemResource> DeliveryBaggageWeight;
        [RTTI.Member(30, 0x100)] public Ref<DSUIMissionAchievementItemResource> MaxDeliveryBaggageAtOnce;
        [RTTI.Member(31, 0x108)] public Ref<DSUIMissionAchievementItemResource> MaxDeliveryBaggageWeightAtOnce;
    }

    [RTTI.Serializable(0xA83E2A62ACD0930A, GameType.DS)]
    public class DSUIMissionResultMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xC480470F85CF4DD, GameType.DS)]
    public class DSUIMissionResultMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> MissionCompleteReward;
        [RTTI.Member(7, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> SpecialReportReward;
        [RTTI.Member(8, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> TotalDeliveryReward;
        [RTTI.Member(9, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> MissionDamage;
        [RTTI.Member(10, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> MissionTime;
        [RTTI.Member(11, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> MissionWeight;
        [RTTI.Member(12, 0x60, "LocalizedText")] public Ref<LocalizedTextResource> MissionCount;
        [RTTI.Member(13, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> DeliveryLvTime;
        [RTTI.Member(14, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> DeliveryLvSafty;
        [RTTI.Member(15, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> DeliveryLvWeightCount;
        [RTTI.Member(16, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> DeliveryLvService;
        [RTTI.Member(17, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> MissionLength;
        [RTTI.Member(18, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> Total;
        [RTTI.Member(19, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> MissionComplete;
        [RTTI.Member(20, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> ServiceDetail;
        [RTTI.Member(21, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> LvTime;
        [RTTI.Member(22, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> LvSafty;
        [RTTI.Member(23, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> LvWeightCount;
        [RTTI.Member(24, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> LvService;
        [RTTI.Member(25, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> Client;
        [RTTI.Member(26, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> Recipient;
        [RTTI.Member(27, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedText_Delivery;
        [RTTI.Member(28, 0xE0, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedText_Unpaid;
        [RTTI.Member(29, 0xE8, "LocalizedText")] public Ref<LocalizedTextResource> BaggageBroken;
        [RTTI.Member(30, 0xF0, "LocalizedText")] public Ref<LocalizedTextResource> BaggageLost;
        [RTTI.Member(31, 0xF8, "LocalizedText")] public Ref<LocalizedTextResource> BaggageNotDelivered;
        [RTTI.Member(32, 0x100, "LocalizedText")] public Ref<LocalizedTextResource> BaggageNuclear;
        [RTTI.Member(33, 0x108, "LocalizedText")] public Ref<LocalizedTextResource> PorterEvaluation;
        [RTTI.Member(34, 0x110, "LocalizedText")] public Ref<LocalizedTextResource> PorterEvaluationOnline;
        [RTTI.Member(35, 0x118, "LocalizedText")] public Ref<LocalizedTextResource> difficultyJudge;
        [RTTI.Member(36, 0x120, "LocalizedText")] public Ref<LocalizedTextResource> difficultyNow;
        [RTTI.Member(37, 0x128, "LocalizedText")] public Ref<LocalizedTextResource> PlayerBehaviorEvaluation;
        [RTTI.Member(38, 0x130, "LocalizedText")] public Ref<LocalizedTextResource> DonationTitle;
        [RTTI.Member(39, 0x138, "LocalizedText")] public Ref<LocalizedTextResource> LostBaggageProtection;
        [RTTI.Member(40, 0x140, "LocalizedText")] public Ref<LocalizedTextResource> LostBaggageReturn;
        [RTTI.Member(41, 0x148, "LocalizedText")] public Ref<LocalizedTextResource> LostBaggageCommit;
        [RTTI.Member(42, 0x150, "LocalizedText")] public Ref<LocalizedTextResource> LostBaggageCremation;
        [RTTI.Member(43, 0x158, "LocalizedText")] public Ref<LocalizedTextResource> DonationChiral;
        [RTTI.Member(44, 0x160, "LocalizedText")] public Ref<LocalizedTextResource> LostObject;
        [RTTI.Member(45, 0x168, "LocalizedText")] public Ref<LocalizedTextResource> KeyhelpNext;
        [RTTI.Member(46, 0x170, "LocalizedText")] public Ref<LocalizedTextResource> KeyhelpSkip;
        [RTTI.Member(47, 0x178, "LocalizedText")] public Ref<LocalizedTextResource> KeyhelpClose;
        [RTTI.Member(48, 0x180, "LocalizedText")] public Ref<LocalizedTextResource> KeyhelpAutoSkipOn;
        [RTTI.Member(49, 0x188, "LocalizedText")] public Ref<LocalizedTextResource> KeyhelpAutoSkipOff;
        [RTTI.Member(50, 0x190, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedText_ContentsDamage;
        [RTTI.Member(51, 0x198, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedText_UsedRate;
        [RTTI.Member(52, 0x1A0, "LocalizedText")] public Ref<LocalizedTextResource> LocalizedText_BestMatchBonus;
        [RTTI.Member(53, 0x1A8, "LocalizedText")] public Ref<LocalizedTextResource> LostBaggageResultTitle;
        [RTTI.Member(54, 0x1B0, "LocalizedText")] public Ref<LocalizedTextResource> EntrustResultTitle;
        [RTTI.Member(55, 0x1B8, "LocalizedText")] public Ref<LocalizedTextResource> TotalLikeFrom;
        [RTTI.Member(56, 0x1C0, "LocalizedText")] public Ref<LocalizedTextResource> BridgetFund;
        [RTTI.Member(57, 0x1C8, "LocalizedText")] public Ref<LocalizedTextResource> BaggageListCaption;
        [RTTI.Member(58, 0x1D0, "LocalizedText")] public Ref<LocalizedTextResource> Entrust;
        [RTTI.Member(59, 0x1D8, "LocalizedText")] public Ref<LocalizedTextResource> PlayRecordTitle;
        [RTTI.Member(60, 0x1E0, "LocalizedText")] public Ref<LocalizedTextResource> PlayRecordTime;
        [RTTI.Member(61, 0x1E8, "LocalizedText")] public Ref<LocalizedTextResource> PlayRecordWeight;
        [RTTI.Member(62, 0x1F0, "LocalizedText")] public Ref<LocalizedTextResource> PlayRecordDelivery;
        [RTTI.Member(63, 0x1F8, "LocalizedText")] public Ref<LocalizedTextResource> PlayRecordDistance;
        [RTTI.Member(64, 0x200, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleMissionResult;
        [RTTI.Member(65, 0x208, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleMissionResultJP;
        [RTTI.Member(66, 0x210, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleLostResult;
        [RTTI.Member(67, 0x218, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleLostResultJP;
        [RTTI.Member(68, 0x220, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleAutobotResult;
        [RTTI.Member(69, 0x228, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleAutobotResultJP;
        [RTTI.Member(70, 0x230, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleEntrustResult;
        [RTTI.Member(71, 0x238, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleEntrustResultJP;
        [RTTI.Member(72, 0x240, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleFinalResult;
        [RTTI.Member(73, 0x248, "LocalizedText")] public Ref<LocalizedTextResource> MainTitleFinalResultJP;
        [RTTI.Member(74, 0x250, "LocalizedText")] public Ref<LocalizedTextResource> RankTextSSSS;
        [RTTI.Member(75, 0x258, "LocalizedText")] public Ref<LocalizedTextResource> RankTextSSS;
        [RTTI.Member(76, 0x260, "LocalizedText")] public Ref<LocalizedTextResource> RankTextSS;
        [RTTI.Member(77, 0x268, "LocalizedText")] public Ref<LocalizedTextResource> RankTextS;
        [RTTI.Member(78, 0x270, "LocalizedText")] public Ref<LocalizedTextResource> RankTextA;
        [RTTI.Member(79, 0x278, "LocalizedText")] public Ref<LocalizedTextResource> RankTextB;
        [RTTI.Member(80, 0x280, "LocalizedText")] public Ref<LocalizedTextResource> RankTextC;
        [RTTI.Member(81, 0x288, "LocalizedText")] public Ref<LocalizedTextResource> RankTextHighScore;
        [RTTI.Member(82, 0x290, "LocalizedText")] public Ref<LocalizedTextResource> RankTextNewRecord;
        [RTTI.Member(83, 0x298, "LocalizedText")] public Ref<LocalizedTextResource> DialogEntrust;
        [RTTI.Member(84, 0x2A0, "LocalizedText")] public Ref<LocalizedTextResource> DialogAutobot;
        [RTTI.Member(86, 0x2B0, "Textures")] public Ref<UITexture> BidQpidStarOff;
        [RTTI.Member(87, 0x2B8, "Textures")] public Ref<UITexture> BidQpidStarOn;
        [RTTI.Member(88, 0x2C0, "Textures")] public Ref<UITexture> Textures_Delivery;
        [RTTI.Member(89, 0x2C8, "Textures")] public Ref<UITexture> Textures_Unpaid;
        [RTTI.Member(90, 0x2D0, "Textures")] public Ref<UITexture> Textures_ContentsDamage;
        [RTTI.Member(91, 0x2D8, "Textures")] public Ref<UITexture> Textures_UsedRate;
        [RTTI.Member(92, 0x2E0, "Textures")] public Ref<UITexture> Textures_BestMatchBonus;
        [RTTI.Member(94, 0x2F8, "StramingTextureArray")] public Array<StreamingRef<UITexture>> OverallRatingSSSS;
        [RTTI.Member(95, 0x308, "StramingTextureArray")] public Array<StreamingRef<UITexture>> OverallRatingSSS;
        [RTTI.Member(96, 0x318, "StramingTextureArray")] public Array<StreamingRef<UITexture>> OverallRatingSS;
        [RTTI.Member(97, 0x328, "StramingTextureArray")] public Array<StreamingRef<UITexture>> OverallRatingS;
        [RTTI.Member(98, 0x338, "StramingTextureArray")] public Array<StreamingRef<UITexture>> OverallRatingA;
        [RTTI.Member(99, 0x348, "StramingTextureArray")] public Array<StreamingRef<UITexture>> OverallRatingB;
        [RTTI.Member(100, 0x358, "StramingTextureArray")] public Array<StreamingRef<UITexture>> OverallRatingC;
    }

    [RTTI.Serializable(0x6CAADCF49DA084D5, GameType.DS)]
    public class DSUIMissionResultMenuFunction : DSUIMissionResultMenuFunctionBase
    {
    }

    [RTTI.Serializable(0xAA47643C115CCA7A, GameType.DS)]
    public class DSUIMissionResultMenuFunctionBase : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x4394260A7A084C09, GameType.DS)]
    public class DSUIMissionResultMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> RootPanelTag;
        [RTTI.Member(9, 0x38, "MissionResult")] public Ref<MenuElementResource> MissionResultPanelTag;
        [RTTI.Member(10, 0x40, "MissionResult")] public Ref<MenuTemplateResource> MissionResultTemplateTag;
        [RTTI.Member(11, 0x48, "MissionResult")] public Ref<MenuElementResource> MissionResultTitlePanelTag;
        [RTTI.Member(12, 0x50, "MissionResult")] public Ref<MenuElementResource> MissionResultClientInfo;
        [RTTI.Member(13, 0x58, "MissionResult")] public Ref<MenuElementResource> MissionResultQpidInfo;
        [RTTI.Member(14, 0x60, "MissionResult")] public Ref<MenuElementResource> MissionResultLikeAndFriendship;
        [RTTI.Member(15, 0x68, "MissionResult")] public Ref<MenuElementResource> MissionResultFriendship;
        [RTTI.Member(16, 0x70, "MissionResult")] public Ref<MenuElementResource> MissionResultEvaluation;
        [RTTI.Member(17, 0x78, "MissionResult")] public Ref<MenuElementResource> MissionResultBg;
        [RTTI.Member(18, 0x80, "MissionResult")] public Ref<DSUIMenuCountNumberResource> DefaultScoreCountNumber;
        [RTTI.Member(19, 0x88, "MissionResult")] public Ref<DSUIMenuCountNumberResource> DefaultPurposeScoreCountNumber;
        [RTTI.Member(20, 0x90, "MissionResult")] public Ref<MenuListResource> MissionResultEvaluationList;
        [RTTI.Member(21, 0x98, "MissionResult")] public Ref<DSUIMenuCountNumberResource> MissionResultLikeCounter;
        [RTTI.Member(22, 0xA0, "MissionResult")] public Ref<DSUIMenuCountNumberResource> MissionResultLikeCounterSdw;
        [RTTI.Member(23, 0xA8, "MissionResult")] public Ref<DSUIMenuCountNumberResource> MissionResultAddLikeCounter;
        [RTTI.Member(24, 0xB0, "MissionResult")] public Ref<MenuListResource> BaggageDialogList;
        [RTTI.Member(25, 0xB8, "MissionResult")] public Ref<MenuListItemResource> BaggageDialogListContents;
        [RTTI.Member(26, 0xC0, "MissionResult")] public Ref<DSUIMenuCountNumberResource> BaggageDialogListScoreCountNumber;
        [RTTI.Member(27, 0xC8, "MissionResult")] public Ref<MenuAnimationResource> EvaluationListSetLifeLogModeAnimation;
        [RTTI.Member(28, 0xD0, "MissionResult")] public Ref<MenuAnimationResource> ClientInfoSetLifeLogModeAnimation;
        [RTTI.Member(29, 0xD8, "MissionResult")] public Ref<MenuAnimationResource> QpidInfoSetLifeLogModeAnimation;
        [RTTI.Member(30, 0xE0, "MissionResult")] public Ref<MenuAnimationResource> BgSetLifeLogModeAnimation;
        [RTTI.Member(31, 0xE8, "MissionResult")] public Ref<MenuAnimationResource> EvaluationListResetLifeLogModeAnimation;
        [RTTI.Member(32, 0xF0, "MissionResult")] public Ref<MenuAnimationResource> ClientInfoResetLifeLogModeAnimation;
        [RTTI.Member(33, 0xF8, "MissionResult")] public Ref<MenuAnimationResource> QpidInfoResetLifeLogModeAnimation;
        [RTTI.Member(34, 0x100, "MissionResult")] public Ref<MenuAnimationResource> BgResetLifeLogModeAnimation;
        [RTTI.Member(36, 0x108, "PorterEvaluation")] public Ref<MenuElementResource> Root;
        [RTTI.Member(37, 0x110, "PorterEvaluation")] public Ref<MenuListResource> EvaluationList;
        [RTTI.Member(38, 0x118, "PorterEvaluation")] public Ref<MenuElementResource> NickNamePlatePanel;
        [RTTI.Member(39, 0x120, "PorterEvaluation")] public Ref<MenuAnimationResource> NickNamePlateRefreshAnimation;
        [RTTI.Member(41, 0x128, "PorterEvaluation_EvaluationList_ListItem")] public Ref<MenuElementResource> ColumnAddLikeCoefficient;
        [RTTI.Member(42, 0x130, "PorterEvaluation_EvaluationList_ListItem")] public Ref<MenuAnimationResource> ColumnAddLikeCoefficientShowAnimation;
        [RTTI.Member(43, 0x138, "PorterEvaluation_EvaluationList_ListItem")] public Ref<MenuElementResource> AddLikeBlueFocusAnimationTarget;
        [RTTI.Member(44, 0x140, "PorterEvaluation_EvaluationList_ListItem")] public Ref<MenuElementResource> AddLikeGreenFocusAnimationTarget;
        [RTTI.Member(45, 0x148, "PorterEvaluation_EvaluationList_ListItem")] public Ref<MenuAnimationResource> AddLikeFocusAnimation;
        [RTTI.Member(47, 0x150, "Dialog")] public Ref<MenuElementResource> DialogPanel;
        [RTTI.Member(49, 0x158, "Sound")] public Ref<SoundResource> AutoSkipLoopSound;
        [RTTI.Member(50, 0x160, "Sound")] public Ref<SoundResource> FriendshipUpLoopSound;
        [RTTI.Member(52, 0x168, "Trophy")] public Ref<TrophyResource> BaggageCountTrophy;
        [RTTI.Member(53, 0x170, "Trophy")] public Ref<TrophyResource> BaggageWeightTrophy;
        [RTTI.Member(54, 0x178, "Trophy")] public Ref<TrophyResource> WalkDistanceTrophy;
        [RTTI.Member(55, 0x180, "Trophy")] public Ref<TrophyResource> AutobotTrophy;
        [RTTI.Member(56, 0x188, "Trophy")] public Ref<TrophyResource> DeliveryManRankFirst;
        [RTTI.Member(57, 0x190, "Trophy")] public Ref<TrophyResource> DeliveryManRankComplete;
        [RTTI.Member(58, 0x198, "Trophy")] public Ref<TrophyResource> SimpleMissionClearFirst;
        [RTTI.Member(59, 0x1A0, "Trophy")] public Ref<TrophyResource> BridgeLinkRankFirst;
        [RTTI.Member(60, 0x1A8, "Trophy")] public Ref<TrophyResource> SimpleMissionClearMany;
        [RTTI.Member(61, 0x1B0, "Trophy")] public Ref<TrophyResource> RankSSPerEvaluation;
        [RTTI.Member(62, 0x1B8, "Trophy")] public Ref<TrophyResource> RankSSSPerEvaluation;
    }

    [RTTI.Serializable(0xEB4F439D9632BC84, GameType.DS)]
    public class DSUIMissionResultUnlockFunctionDialogResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSUIUnlockDialogTiming Timing;
        [RTTI.Member(3, 0x28)] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(4, 0x30)] public Ref<DSMenuRadioResource> RadioResource;
        [RTTI.Member(5, 0x38)] public bool CanDeferred;
        [RTTI.Member(6, 0x39)] public bool ThankYouGoods;
    }

    [RTTI.Serializable(0xC9914504DC265C96, GameType.DS)]
    public class DSUIMissionResultUnlockFunctionDialogResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x147C8750AA3F8464, GameType.DS)]
    public class DSUIMissionResultUnlockFunctionWithTextureDialogResource : DSUIMissionResultUnlockFunctionDialogResource
    {
        [RTTI.Member(7, 0x40)] public Ref<LocalizedTextResource> ItemNameLocalizedText;
        [RTTI.Member(8, 0x48)] public Ref<LocalizedTextResource> BottomLocalizedText;
        [RTTI.Member(9, 0x50)] public StreamingRef<UITexture> Texture;
        [RTTI.Member(10, 0x58)] public bool SpecialThankYouGoods;
    }

    [RTTI.Serializable(0x36385DC7B4430EB6, GameType.DS)]
    public class DSUIMissionResultUnlockFunctionWithTextureDialogResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDC223CF0EA754E4F, GameType.DS)]
    public class DSUIMissionTelopHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x8E5C89D305066D17, GameType.DS)]
    public class DSUIMissionTelopHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Root_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Root_Elements")] public Ref<HUDTextResource> MissionNameTextElement;
        [RTTI.Member(19, 0x88, "DS_Root_Elements")] public Ref<HUDTextResource> MissionNameBgTextElement;
        [RTTI.Member(21, 0x90, "DS_Episode_Elements")] public Ref<HUDElementResource> EpisodeTitleRootElement;
        [RTTI.Member(22, 0x98, "DS_Episode_Elements")] public Ref<HUDTextResource> EpisodeTitleTextElement;
        [RTTI.Member(24, 0xA0, "DS_TermGoal_Elements")] public Ref<HUDElementResource> LargeTargetRootElement;
        [RTTI.Member(25, 0xA8, "DS_TermGoal_Elements")] public Ref<HUDTextResource> LargeTargetTextElement;
        [RTTI.Member(26, 0xB0, "DS_TermGoal_Elements")] public Ref<HUDElementResource> MiddleTargetRootElement;
        [RTTI.Member(27, 0xB8, "DS_TermGoal_Elements")] public Ref<HUDTextResource> MiddleTargetTextElement;
        [RTTI.Member(29, 0xC0, "DS_Mission_Elements")] public Ref<HUDElementResource> MissionRootElement;
        [RTTI.Member(30, 0xC8, "DS_Mission_Elements")] public Ref<HUDElementResource> MissionTemplateElement;
        [RTTI.Member(31, 0xD0, "DS_Mission_Elements")] public Ref<HUDImageResource> MissionIconImageElement;
        [RTTI.Member(32, 0xD8, "DS_Mission_Elements")] public Ref<HUDImageResource> MissionIconImabeBgElement;
        [RTTI.Member(33, 0xE0, "DS_Mission_Elements")] public Ref<HUDElementResource> OtherMissionNumRootElement;
        [RTTI.Member(34, 0xE8, "DS_Mission_Elements")] public Ref<HUDTextResource> OtherMissionNumTextElement;
        [RTTI.Member(36, 0xF0, "DS_Todo_Elements")] public Ref<HUDElementResource> TodoRootElement;
        [RTTI.Member(37, 0xF8, "DS_Todo_Elements")] public Ref<HUDElementResource> TodoTemplateElement;
        [RTTI.Member(38, 0x100, "DS_Todo_Elements")] public Ref<HUDImageResource> StateIconImageElement;
        [RTTI.Member(39, 0x108, "DS_Todo_Elements")] public Ref<HUDImageResource> StateIconBgImageElement;
        [RTTI.Member(40, 0x110, "DS_Todo_Elements")] public Ref<HUDImageResource> FrameIconImageElement;
        [RTTI.Member(41, 0x118, "DS_Todo_Elements")] public Ref<HUDImageResource> FrameIconBgImageElement;
        [RTTI.Member(42, 0x120, "DS_Todo_Elements")] public Ref<HUDTextResource> TodoTextElement;
        [RTTI.Member(43, 0x128, "DS_Todo_Elements")] public Ref<HUDTextResource> TodoTextBgElement;
        [RTTI.Member(44, 0x130, "DS_Todo_Elements")] public Ref<HUDElementResource> StrandRootElement;
        [RTTI.Member(45, 0x138, "DS_Todo_Elements")] public Ref<HUDElementResource> StrandOnlineRootElement;
        [RTTI.Member(46, 0x140, "DS_Todo_Elements")] public Ref<HUDElementResource> StrandFailedRootElement;
        [RTTI.Member(48, 0x148, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(49, 0x150, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(50, 0x158, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(51, 0x160, "Animation")] public Ref<DSUIHUDAnimatorResource> MiddleTargetIntroAnimator;
        [RTTI.Member(52, 0x168, "Animation")] public Ref<DSUIHUDAnimatorResource> MiddleTargetOutroAnimator;
        [RTTI.Member(53, 0x170, "Animation")] public Ref<DSUIHUDAnimatorResource> MissionIntroAnimator;
        [RTTI.Member(54, 0x178, "Animation")] public Ref<DSUIHUDAnimatorResource> MissionIdleAnimator;
        [RTTI.Member(55, 0x180, "Animation")] public Ref<DSUIHUDAnimatorResource> TodoIntroAnimator;
        [RTTI.Member(56, 0x188, "Animation")] public Ref<DSUIHUDAnimatorResource> TodoIdleAnimator;
        [RTTI.Member(57, 0x190, "Animation")] public Ref<DSUIHUDAnimatorResource> TodoOutroAnimator;
        [RTTI.Member(58, 0x198, "Animation")] public Ref<DSUIHUDAnimatorResource> TodoDoneAnimator;
        [RTTI.Member(59, 0x1A0, "Animation")] public Ref<DSUIHUDAnimatorResource> TodoInterruptAnimator;
        [RTTI.Member(60, 0x1A8, "Animation")] public Ref<DSUIHUDAnimatorResource> OtherMissionNumIntroAnimator;
        [RTTI.Member(61, 0x1B0, "Animation")] public Ref<DSUIHUDAnimatorResource> OtherMissionNumIdleAnimator;
        [RTTI.Member(63, 0x1B8, "Curve")] public Ref<CurveResource> TodoInterruptMoveCurve;
        [RTTI.Member(65, 0x1C0, "Sound")] public Ref<SoundResource> OpenSound;
        [RTTI.Member(66, 0x1C8, "Sound")] public Ref<SoundResource> CloseSound;
        [RTTI.Member(67, 0x1D0, "Sound")] public Ref<SoundResource> CheckBoxCheckSound;
        [RTTI.Member(68, 0x1D8, "Sound")] public Ref<SoundResource> NewLineAppearSound;
        [RTTI.Member(70, 0x1E0, "LocalizedText")] public Ref<LocalizedTextResource> OtherMissionNumFormatText;
        [RTTI.Member(72, 0x1E8, "Mission_Parameter")] public int MissionIntroDelayFrame;
        [RTTI.Member(74, 0x1EC, "Todo_Parameter")] public float TodoMarginHeight;
        [RTTI.Member(75, 0x1F0, "Todo_Parameter")] public float MissionMarginHeight;
        [RTTI.Member(76, 0x1F4, "Todo_Parameter")] public float GrayoutTodoAlpha;
        [RTTI.Member(78, 0x1F8, "Parameter")] public int ShowingMissionNotTodoFrame;
        [RTTI.Member(79, 0x1FC, "Parameter")] public int ShowingMissionFrame;
        [RTTI.Member(80, 0x200, "Parameter")] public int ShowingTodoFrame;
        [RTTI.Member(81, 0x204, "Parameter")] public int ShowingBufferFrame;
        [RTTI.Member(82, 0x208, "Parameter")] public int AfterGroupShowingFrame;
        [RTTI.Member(83, 0x20C, "Parameter")] public int IntroDelayFrame;
        [RTTI.Member(84, 0x210, "Parameter")] public int DoneDelayFrame;
    }

    [RTTI.Serializable(0x418C18AB7EF2A1E6, GameType.DS)]
    public class DSUIMouseButtonIconResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EMouseButton MouseButton;
        [RTTI.Member(3, 0x28)] public Ref<DSUIInputIconResource> InputIcon;
    }

    [RTTI.Serializable(0x22257FE1B8A0883B, GameType.DS)]
    public class DSUIMovieMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x4051D55ED9276C2, GameType.DS)]
    public class DSUIMovieMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x6C7B8D37940829BB, GameType.DS)]
    public class DSUIMovieMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> MovieInputPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> SkipMenuPanelElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> MovieElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> MovieDataElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> SafeAreaPanelElementResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuActionCustomFunction> MovieDataChangedFunction;
    }

    [RTTI.Serializable(0xFE9496E72907B41, GameType.DS)]
    public class DSUIMusicTelopSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x32B1D122DC89428E, GameType.DS)]
    public class DSUIMusicTelopSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSUIMusicTelopDisplayMode DisplayMode;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocalizedTextResource> TitleText;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<LocalizedTextResource> ArtistNameText;
        [RTTI.Member(11, 0x48, "Logic")] public Array<Ref<LocalizedTextResource>> CreditTexts;
        [RTTI.Member(12, 0x58, "Logic")] public uint32 TrackId;
    }

    [RTTI.Serializable(0x745AF2C141521AC8, GameType.DS)]
    public class DSUINGReasonItemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Reason")] public Ref<LocalizedTextResource> ReasonText;
    }

    [RTTI.Serializable(0x36C76D9C30B73DB1, GameType.DS)]
    public class DSUINodeGraphBindings : RTTIObject
    {
    }

    [RTTI.Serializable(0xFE1EB39487D187C6, GameType.DS)]
    public class DSUINodeGraphBindingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7E7F3FA6E9D773F7, GameType.DS)]
    public class DSUIOperationGuideHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xC25865BC872EA203, GameType.DS)]
    public class DSUIOperationGuideHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Root_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "DS_Template_Elements")] public Ref<HUDElementResource> OperationGuideTemplate;
        [RTTI.Member(20, 0x88, "DS_Template_Elements")] public Ref<HUDTextResource> GuideText;
        [RTTI.Member(21, 0x90, "DS_Template_Elements")] public Ref<HUDElementResource> IconImageRootElement;
        [RTTI.Member(22, 0x98, "DS_Template_Elements")] public Ref<HUDTextResource> JointTextElement;
        [RTTI.Member(23, 0xA0, "DS_Template_Elements")] public Ref<HUDElementResource> SecondIconImageRootElement;
        [RTTI.Member(24, 0xA8, "DS_Template_Elements")] public Ref<HUDElementResource> Icon01RootElement;
        [RTTI.Member(25, 0xB0, "DS_Template_Elements")] public Ref<HUDElementResource> Icon02RootElement;
        [RTTI.Member(26, 0xB8, "DS_Template_Elements")] public Ref<HUDElementResource> Icon03RootElement;
        [RTTI.Member(27, 0xC0, "DS_Template_Elements")] public Ref<HUDElementResource> Icon04RootElement;
        [RTTI.Member(29, 0xC8, "Animation")] public Ref<DSUIHUDAnimatorResource> ItemIntroAnimator;
        [RTTI.Member(30, 0xD0, "Animation")] public Ref<DSUIHUDAnimatorResource> ItemOutroAnimator;
        [RTTI.Member(31, 0xD8, "Animation")] public Ref<DSUIHUDAnimatorResource> ItemExecuteOutroAnimator;
        [RTTI.Member(33, 0xE0, "Sound")] public Ref<SoundResource> OpenSound;
        [RTTI.Member(34, 0xE8, "Sound")] public Ref<SoundResource> WeakOpenSound;
        [RTTI.Member(36, 0xF0, "Parameter")] public int InputDelayFrame;
        [RTTI.Member(37, 0xF4, "Parameter")] public float HoldRateSpeedPerFrame;
        [RTTI.Member(38, 0xF8, "Parameter")] public float GuideTextPositionAtTwoIcons;
        [RTTI.Member(39, 0xFC, "Parameter")] public float SecondaryIconOffsetXForOr;
        [RTTI.Member(40, 0x100, "Parameter")] public float GuideTextOffsetXForOr;
    }

    [RTTI.Serializable(0x3E1CE82F5AB8D76E, GameType.DS)]
    public class DSUIOperationGuideHUDTableGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "Table")] public Array<Ref<DSUIOperationGuideHUDTableItemResource>> Items;
        [RTTI.Member(4, 0x30, "Table")] public float DelaySec;
        [RTTI.Member(5, 0x34, "Table")] public float DisplaySec;
        [RTTI.Member(6, 0x38, "Table")] public EDSUIOperationGuideStyleType StyleType;
        [RTTI.Member(7, 0x3C, "Table")] public EDSUITelopDisplayPriorityType PriorityType;
        [RTTI.Member(8, 0x40, "Table")] public uint32 PriorityWeight;
        [RTTI.Member(9, 0x44, "Table")] public bool IsRecover;
        [RTTI.Member(10, 0x45, "Table")] public bool IsRecoveryTimesUnlimited;
        [RTTI.Member(11, 0x46, "Table")] public bool IsIgnoreInput;
        [RTTI.Member(12, 0x47, "Table")] public bool ShouldAcceptPreInput;
        [RTTI.Member(13, 0x48, "Table")] public bool CanShowDuringRealTimeRadio;
        [RTTI.Member(14, 0x49, "Table")] public bool CanShowDuringMissionTelop;
        [RTTI.Member(15, 0x4A, "Table")] public bool CanShowTerminalOperation;
        [RTTI.Member(16, 0x4B, "Table")] public bool CanShowInDemo;
        [RTTI.Member(17, 0x4C, "Table")] public bool CanShowKnotSpace;
        [RTTI.Member(18, 0x50, "Table")] public Ref<BooleanFact> ReadFact;
        [RTTI.Member(19, 0x58, "Table")] public Ref<BooleanFact> DisplaySecResetFact;
    }

    [RTTI.Serializable(0x14A04FB22FC5B45A, GameType.DS)]
    public class DSUIOperationGuideHUDTableIcon
    {
        [RTTI.Member(1, 0x0, "Icon")] public EDSFunction Function;
        [RTTI.Member(2, 0x4, "Icon")] public EDSUIButtonIconStyleType StyleType;
    }

    [RTTI.Serializable(0x6FF4615CE4F73E8D, GameType.DS)]
    public class DSUIOperationGuideHUDTableIconSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x988C3E7F083219B0, GameType.DS)]
    public class DSUIOperationGuideHUDTableItemResource : Resource
    {
        [RTTI.Member(3, 0x20, "TableItem")] public DSUIOperationGuideHUDTableIcon PrimaryIcon;
        [RTTI.Member(4, 0x28, "TableItem")] public DSUIOperationGuideHUDTableIcon SecondaryIcon;
        [RTTI.Member(5, 0x30, "TableItem")] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(6, 0x38, "TableItem")] public bool IsOr;
    }

    [RTTI.Serializable(0xDB263B885E6B01D0, GameType.DS)]
    public class DSUIOperationGuideHUDTableItemResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x92287ECA726CC0F0, GameType.DS)]
    public class DSUIOperationGuideHUDTableResource : Resource
    {
        [RTTI.Member(3, 0x20, "Table")] public Array<Ref<DSUIOperationGuideHUDTableGroupResource>> Items;
    }

    [RTTI.Serializable(0xA5543B960EC9E03A, GameType.DS)]
    public class DSUIOperationGuideSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xCA2C26D236871CF9, GameType.DS)]
    public class DSUIOperationGuideSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSUIOperationGuideHUDTableGroupResource> OperationGuideTableResource;
        [RTTI.Member(9, 0x38, "Logic")] public bool IsUseDefaultPosition;
        [RTTI.Member(10, 0x40, "Logic")] public Vec2 Position;
        [RTTI.Member(11, 0x50, "Logic")] public float IntervalSec;
        [RTTI.Member(12, 0x54, "Logic")] public bool CanRedisplay;
    }

    [RTTI.Serializable(0x203A72E32F0BD538, GameType.DS)]
    public class DSUIPauseControllerMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x5652605C220F6CCB, GameType.DS)]
    public class DSUIPauseControllerMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "DSUIPauseControllerMenuKeyNames")] public DSUIKeyNameListItem Unlock_None;
        [RTTI.Member(7, 0xF0, "DSUIPauseControllerMenuKeyNames")] public DSUIKeyNameListItem Unlock_HandCuffs;
        [RTTI.Member(8, 0x1B8, "DSUIPauseControllerMenuKeyNames")] public DSUIKeyNameListItem Unlock_Tools;
        [RTTI.Member(9, 0x280, "DSUIPauseControllerMenuKeyNames")] public DSUIKeyNameListItem Unlock_StructureDevice;
        [RTTI.Member(10, 0x348, "DSUIPauseControllerMenuKeyNames")] public DSUIKeyNameListItem Unlock_Combat;
        [RTTI.Member(11, 0x410, "DSUIPauseControllerMenuKeyNames")] public DSUIKeyNameListItem Unlock_Vehicle;
        [RTTI.Member(12, 0x4D8, "DSUIPauseControllerMenuKeyNames")] public DSUIKeyNameListItem Unlock_Bullet;
        [RTTI.Member(14, 0x5A0, "DSUIPauseControllerMenuKeyNames_ExtraState")] public DSUIKeyNameListItem OnVehicle;
        [RTTI.Member(15, 0x668, "DSUIPauseControllerMenuKeyNames_ExtraState")] public DSUIKeyNameListItem VsHiggs3;
        [RTTI.Member(16, 0x730, "DSUIPauseControllerMenuKeyNames_ExtraState")] public DSUIKeyNameListItem InKnotSpacce;
        [RTTI.Member(17, 0x7F8, "DSUIPauseControllerMenuKeyNames_ExtraState")] public DSUIKeyNameListItem InGhost;
        [RTTI.Member(19, 0x8C0, "DSUIPauseControllerMenuControllerTypeHelpText")] public Ref<LocalizedTextResource> Help_Default;
        [RTTI.Member(20, 0x8C8, "DSUIPauseControllerMenuControllerTypeHelpText")] public Ref<LocalizedTextResource> Help_OnVehicle;
        [RTTI.Member(22, 0x8E8, "DSUIPauseControllerMenuControllerTypeTitleText")] public Ref<LocalizedTextResource> Title_Default;
        [RTTI.Member(23, 0x8F0, "DSUIPauseControllerMenuControllerTypeTitleText")] public Ref<LocalizedTextResource> Title_OnVehicle;
        [RTTI.Member(24, 0x8F8, "DSUIPauseControllerMenuControllerTypeTitleText")] public Ref<LocalizedTextResource> Title_VSHiggs;
        [RTTI.Member(25, 0x900, "DSUIPauseControllerMenuControllerTypeTitleText")] public Ref<LocalizedTextResource> Title_InKnotSpace;
        [RTTI.Member(26, 0x908, "DSUIPauseControllerMenuControllerTypeTitleText")] public Ref<LocalizedTextResource> Title_InGhost;
        [RTTI.Member(28, 0x910, "DSUIPauseControllerMenuControllerFacts")] public Ref<BooleanFact> KnotSpace_00650;
    }

    [RTTI.Serializable(0x77FA9D7A87A76334, GameType.DS)]
    public class DSUIPauseControllerMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x544A361EF72A0220, GameType.DS)]
    public class DSUIPauseControllerMenuFunctionResource : MenuFunctionResource
    {
    }

    [RTTI.Serializable(0xFF11DB465D970D81, GameType.DS)]
    public class DSUIPhotoModeCategory
    {
        [RTTI.Member(1, 0x0, "LocalizedText")] public Ref<LocalizedTextResource> CategoryTitle;
        [RTTI.Member(3, 0x8, "Icon")] public Ref<UITexture> CategoryIcon;
    }

    [RTTI.Serializable(0xD83EA90071B1DBE6, GameType.DS)]
    public class DSUIPhotoModeListItem
    {
        [RTTI.Member(1, 0x0, "LocalizedText")] public Ref<LocalizedTextResource> Title;
        [RTTI.Member(3, 0x8, "Params")] public bool UseAccelerator;
        [RTTI.Member(4, 0x9, "Params")] public bool IsLoop;
        [RTTI.Member(5, 0xA, "Params")] public EPhotoModeValueType ValueType;
        [RTTI.Member(6, 0xC, "Params")] public float MinValue;
        [RTTI.Member(7, 0x10, "Params")] public float MaxValue;
        [RTTI.Member(8, 0x14, "Params")] public float AddValue;
    }

    [RTTI.Serializable(0xE4B5AD1CA18DDA3F, GameType.DS)]
    public class DSUIPhotoModeMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x763F3679E730BB8D, GameType.DS)]
    public class DSUIPhotoModeMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> Value_Normal;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> Value_Default;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> Dialog_Menu_Close;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> Dialog_Revert_Setting;
        [RTTI.Member(10, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> Unit_AngleOfView;
        [RTTI.Member(11, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> Unit_Aperture;
        [RTTI.Member(13, 0x58, "CategoryItem")] public DSUIPhotoModeCategory Category_Camera;
        [RTTI.Member(14, 0x68, "CategoryItem")] public DSUIPhotoModeCategory Category_Expression_Pose;
        [RTTI.Member(15, 0x78, "CategoryItem")] public DSUIPhotoModeCategory Category_BB;
        [RTTI.Member(16, 0x88, "CategoryItem")] public DSUIPhotoModeCategory Category_DoF;
        [RTTI.Member(17, 0x98, "CategoryItem")] public DSUIPhotoModeCategory Category_Brightness;
        [RTTI.Member(19, 0xA8, "CategoryItem")] public DSUIPhotoModeCategory Category_LensEffect;
        [RTTI.Member(18, 0xB8, "CategoryItem")] public DSUIPhotoModeCategory Category_Frame;
        [RTTI.Member(21, 0xC8, "ListItem")] public DSUIPhotoModeListItem AngleOfView;
        [RTTI.Member(22, 0xE0, "ListItem")] public DSUIPhotoModeListItem CameraRoll;
        [RTTI.Member(23, 0xF8, "ListItem")] public DSUIPhotoModeListItem PlayerVisible;
        [RTTI.Member(24, 0x110, "ListItem")] public DSUIPhotoModeListItem UIVisible;
        [RTTI.Member(25, 0x128, "ListItem")] public DSUIPhotoModeListItem SignPostVisible;
        [RTTI.Member(26, 0x140, "ListItem")] public DSUIPhotoModeListItem SensorVisible;
        [RTTI.Member(27, 0x158, "ListItem")] public DSUIPhotoModeListItem Player_Pose;
        [RTTI.Member(28, 0x170, "ListItem")] public DSUIPhotoModeListItem Player_PrivateRoom_Pose;
        [RTTI.Member(29, 0x188, "ListItem")] public DSUIPhotoModeListItem Player_Expression;
        [RTTI.Member(30, 0x1A0, "ListItem")] public DSUIPhotoModeListItem Player_Focus;
        [RTTI.Member(31, 0x1B8, "ListItem")] public DSUIPhotoModeListItem Player_IK_Weight;
        [RTTI.Member(32, 0x1D0, "ListItem")] public DSUIPhotoModeListItem Player_Angle_X;
        [RTTI.Member(33, 0x1E8, "ListItem")] public DSUIPhotoModeListItem Player_Angle_Y;
        [RTTI.Member(34, 0x200, "ListItem")] public DSUIPhotoModeListItem Player_IK_Ignore;
        [RTTI.Member(35, 0x218, "ListItem")] public DSUIPhotoModeListItem Player_Face_Follow_Cam;
        [RTTI.Member(36, 0x230, "ListItem")] public DSUIPhotoModeListItem Player_Body_Follow_Cam;
        [RTTI.Member(37, 0x248, "ListItem")] public DSUIPhotoModeListItem BB_Pose;
        [RTTI.Member(38, 0x260, "ListItem")] public DSUIPhotoModeListItem BB_Expression;
        [RTTI.Member(39, 0x278, "ListItem")] public DSUIPhotoModeListItem BB_Focus;
        [RTTI.Member(40, 0x290, "ListItem")] public DSUIPhotoModeListItem BB_Light;
        [RTTI.Member(41, 0x2A8, "ListItem")] public DSUIPhotoModeListItem DepthOfField;
        [RTTI.Member(42, 0x2C0, "ListItem")] public DSUIPhotoModeListItem AutoFocus;
        [RTTI.Member(43, 0x2D8, "ListItem")] public DSUIPhotoModeListItem Focus;
        [RTTI.Member(44, 0x2F0, "ListItem")] public DSUIPhotoModeListItem Aperture;
        [RTTI.Member(46, 0x308, "ListItem")] public DSUIPhotoModeListItem Exposure;
        [RTTI.Member(45, 0x320, "ListItem")] public DSUIPhotoModeListItem Brightness;
        [RTTI.Member(47, 0x338, "ListItem")] public DSUIPhotoModeListItem Contrast;
        [RTTI.Member(48, 0x350, "ListItem")] public DSUIPhotoModeListItem ColorFilterEnable;
        [RTTI.Member(49, 0x368, "ListItem")] public DSUIPhotoModeListItem ColorEffect;
        [RTTI.Member(50, 0x380, "ListItem")] public DSUIPhotoModeListItem EffectStrength;
        [RTTI.Member(51, 0x398, "ListItem")] public DSUIPhotoModeListItem Noise;
        [RTTI.Member(57, 0x3B0, "ListItem")] public DSUIPhotoModeListItem Frame;
        [RTTI.Member(58, 0x3C8, "ListItem")] public DSUIPhotoModeListItem Logo_Enable;
        [RTTI.Member(59, 0x3E0, "ListItem")] public DSUIPhotoModeListItem Logo_Color;
        [RTTI.Member(60, 0x3F8, "ListItem")] public DSUIPhotoModeListItem Logo_TargetX;
        [RTTI.Member(61, 0x410, "ListItem")] public DSUIPhotoModeListItem Logo_TargetY;
        [RTTI.Member(62, 0x428, "ListItem")] public DSUIPhotoModeListItem Logo_Rotate;
        [RTTI.Member(52, 0x440, "ListItem")] public DSUIPhotoModeListItem Vignette;
        [RTTI.Member(53, 0x458, "ListItem")] public DSUIPhotoModeListItem Size;
        [RTTI.Member(54, 0x470, "ListItem")] public DSUIPhotoModeListItem VignetteStrength;
        [RTTI.Member(55, 0x488, "ListItem")] public DSUIPhotoModeListItem LensDistortion;
        [RTTI.Member(56, 0x4A0, "ListItem")] public DSUIPhotoModeListItem Chromatic;
        [RTTI.Member(64, 0x4B8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_01;
        [RTTI.Member(65, 0x4C0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_02;
        [RTTI.Member(66, 0x4C8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_03;
        [RTTI.Member(67, 0x4D0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_04;
        [RTTI.Member(68, 0x4D8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_05;
        [RTTI.Member(69, 0x4E0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_06;
        [RTTI.Member(70, 0x4E8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_07;
        [RTTI.Member(71, 0x4F0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_08;
        [RTTI.Member(72, 0x4F8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_09;
        [RTTI.Member(73, 0x500, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_10;
        [RTTI.Member(74, 0x508, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_11;
        [RTTI.Member(75, 0x510, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_12;
        [RTTI.Member(76, 0x518, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_13;
        [RTTI.Member(77, 0x520, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_14;
        [RTTI.Member(78, 0x528, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_15;
        [RTTI.Member(79, 0x530, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_16;
        [RTTI.Member(80, 0x538, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_17;
        [RTTI.Member(81, 0x540, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_18;
        [RTTI.Member(82, 0x548, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_19;
        [RTTI.Member(83, 0x550, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_20;
        [RTTI.Member(84, 0x558, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_21;
        [RTTI.Member(85, 0x560, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_22;
        [RTTI.Member(86, 0x568, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_23;
        [RTTI.Member(87, 0x570, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_24;
        [RTTI.Member(88, 0x578, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_25;
        [RTTI.Member(89, 0x580, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_26;
        [RTTI.Member(90, 0x588, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_27;
        [RTTI.Member(91, 0x590, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_28;
        [RTTI.Member(92, 0x598, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_29;
        [RTTI.Member(93, 0x5A0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_30;
        [RTTI.Member(94, 0x5A8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_31;
        [RTTI.Member(95, 0x5B0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_32;
        [RTTI.Member(96, 0x5B8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_33;
        [RTTI.Member(97, 0x5C0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_34;
        [RTTI.Member(98, 0x5C8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_35;
        [RTTI.Member(99, 0x5D0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_36;
        [RTTI.Member(100, 0x5D8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_37;
        [RTTI.Member(101, 0x5E0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_38;
        [RTTI.Member(102, 0x5E8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_39;
        [RTTI.Member(103, 0x5F0, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_40;
        [RTTI.Member(104, 0x5F8, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_41;
        [RTTI.Member(105, 0x600, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_42;
        [RTTI.Member(106, 0x608, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_43;
        [RTTI.Member(107, 0x610, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_44;
        [RTTI.Member(108, 0x618, "PlayerPoseTextResource")] public Ref<LocalizedTextResource> PlayerBodyAnimation_45;
        [RTTI.Member(110, 0x620, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_01;
        [RTTI.Member(111, 0x628, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_02;
        [RTTI.Member(112, 0x630, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_03;
        [RTTI.Member(113, 0x638, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_04;
        [RTTI.Member(114, 0x640, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_05;
        [RTTI.Member(115, 0x648, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_06;
        [RTTI.Member(116, 0x650, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_07;
        [RTTI.Member(117, 0x658, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_08;
        [RTTI.Member(118, 0x660, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_09;
        [RTTI.Member(119, 0x668, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_10;
        [RTTI.Member(120, 0x670, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_11;
        [RTTI.Member(121, 0x678, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_12;
        [RTTI.Member(122, 0x680, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_13;
        [RTTI.Member(123, 0x688, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_14;
        [RTTI.Member(124, 0x690, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_15;
        [RTTI.Member(125, 0x698, "PlayerPrivateRoomPoseTextResource")] public Ref<LocalizedTextResource> PlayerPrivateRoomBodyAnimation_16;
        [RTTI.Member(127, 0x6A0, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_01;
        [RTTI.Member(128, 0x6A8, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_02;
        [RTTI.Member(129, 0x6B0, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_03;
        [RTTI.Member(130, 0x6B8, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_04;
        [RTTI.Member(131, 0x6C0, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_05;
        [RTTI.Member(132, 0x6C8, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_06;
        [RTTI.Member(133, 0x6D0, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_07;
        [RTTI.Member(134, 0x6D8, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_08;
        [RTTI.Member(135, 0x6E0, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_09;
        [RTTI.Member(136, 0x6E8, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_10;
        [RTTI.Member(137, 0x6F0, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_11;
        [RTTI.Member(138, 0x6F8, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_12;
        [RTTI.Member(139, 0x700, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_13;
        [RTTI.Member(140, 0x708, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_14;
        [RTTI.Member(141, 0x710, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_15;
        [RTTI.Member(142, 0x718, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_16;
        [RTTI.Member(143, 0x720, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_17;
        [RTTI.Member(144, 0x728, "PlayerFacialTextResouruce")] public Ref<LocalizedTextResource> PlayerFacialAnimation_18;
        [RTTI.Member(146, 0x730, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_01;
        [RTTI.Member(147, 0x738, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_02;
        [RTTI.Member(148, 0x740, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_03;
        [RTTI.Member(149, 0x748, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_04;
        [RTTI.Member(150, 0x750, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_05;
        [RTTI.Member(151, 0x758, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_06;
        [RTTI.Member(152, 0x760, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_07;
        [RTTI.Member(153, 0x768, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_08;
        [RTTI.Member(154, 0x770, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_09;
        [RTTI.Member(155, 0x778, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_10;
        [RTTI.Member(156, 0x780, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_11;
        [RTTI.Member(157, 0x788, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_12;
        [RTTI.Member(158, 0x790, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_13;
        [RTTI.Member(159, 0x798, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_14;
        [RTTI.Member(160, 0x7A0, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_15;
        [RTTI.Member(161, 0x7A8, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_16;
        [RTTI.Member(162, 0x7B0, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_17;
        [RTTI.Member(163, 0x7B8, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_18;
        [RTTI.Member(164, 0x7C0, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_19;
        [RTTI.Member(165, 0x7C8, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_20;
        [RTTI.Member(166, 0x7D0, "BBPoseTextResource")] public Ref<LocalizedTextResource> BBBodyAnimation_21;
        [RTTI.Member(168, 0x7D8, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_01;
        [RTTI.Member(169, 0x7E0, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_02;
        [RTTI.Member(170, 0x7E8, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_03;
        [RTTI.Member(171, 0x7F0, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_04;
        [RTTI.Member(172, 0x7F8, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_05;
        [RTTI.Member(173, 0x800, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_06;
        [RTTI.Member(174, 0x808, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_07;
        [RTTI.Member(175, 0x810, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_08;
        [RTTI.Member(176, 0x818, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_09;
        [RTTI.Member(177, 0x820, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_10;
        [RTTI.Member(178, 0x828, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_11;
        [RTTI.Member(179, 0x830, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_12;
        [RTTI.Member(180, 0x838, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_13;
        [RTTI.Member(181, 0x840, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_14;
        [RTTI.Member(182, 0x848, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_15;
        [RTTI.Member(183, 0x850, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_16;
        [RTTI.Member(184, 0x858, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_17;
        [RTTI.Member(185, 0x860, "BBFacialTextResouruce")] public Ref<LocalizedTextResource> BBFacialAnimation_18;
        [RTTI.Member(187, 0x868, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> Default;
        [RTTI.Member(188, 0x870, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> CameraLockAt;
        [RTTI.Member(189, 0x878, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> LeftUp;
        [RTTI.Member(190, 0x880, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> Up;
        [RTTI.Member(191, 0x888, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> RightUp;
        [RTTI.Member(192, 0x890, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> Right;
        [RTTI.Member(193, 0x898, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> RightDown;
        [RTTI.Member(194, 0x8A0, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> Down;
        [RTTI.Member(195, 0x8A8, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> LeftDown;
        [RTTI.Member(196, 0x8B0, "EyeFocusTextResouruce")] public Ref<LocalizedTextResource> Left;
        [RTTI.Member(198, 0x8C0, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Monochrome;
        [RTTI.Member(199, 0x8C8, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Noir;
        [RTTI.Member(200, 0x8D0, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Sepia;
        [RTTI.Member(201, 0x8D8, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Cyan;
        [RTTI.Member(202, 0x8E0, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Magenta;
        [RTTI.Member(203, 0x8E8, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Twilight;
        [RTTI.Member(204, 0x8F0, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Retro;
        [RTTI.Member(205, 0x8F8, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Shine;
        [RTTI.Member(206, 0x900, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Vivid;
        [RTTI.Member(207, 0x908, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Mat;
        [RTTI.Member(208, 0x910, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Gayzer;
        [RTTI.Member(209, 0x918, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Mars;
        [RTTI.Member(210, 0x920, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Knot_Blue;
        [RTTI.Member(211, 0x928, "ColorFilterTextResouruce")] public Ref<LocalizedTextResource> ColorFilter_Knot_Green;
        [RTTI.Member(213, 0x930, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Default;
        [RTTI.Member(214, 0x948, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Cinema;
        [RTTI.Member(215, 0x960, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Poster;
        [RTTI.Member(216, 0x978, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Picture;
        [RTTI.Member(217, 0x990, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Film;
        [RTTI.Member(218, 0x9A8, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Squeare;
        [RTTI.Member(219, 0x9C0, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Squeare_White;
        [RTTI.Member(220, 0x9D8, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Heart;
        [RTTI.Member(221, 0x9F0, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Heart_White;
        [RTTI.Member(222, 0xA08, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Dialomond;
        [RTTI.Member(223, 0xA20, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Dialomond_White;
        [RTTI.Member(224, 0xA38, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_HandPrint;
        [RTTI.Member(225, 0xA50, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_HandPrint_White;
        [RTTI.Member(226, 0xA68, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_ManyHandShapes;
        [RTTI.Member(227, 0xA80, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_ManyHandShapes_2;
        [RTTI.Member(228, 0xA98, "UIFrameResouruce")] public DSUIPhotoModeUIFrame UIFrame_Tar;
        [RTTI.Member(232, 0xAB0, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_SnowWhite;
        [RTTI.Member(233, 0xAB8, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_StelthBlack;
        [RTTI.Member(234, 0xAC0, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_WolfGray;
        [RTTI.Member(235, 0xAC8, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_OliveDrav;
        [RTTI.Member(236, 0xAD0, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_MarsRed;
        [RTTI.Member(237, 0xAD8, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_EmergencyYellow;
        [RTTI.Member(238, 0xAE0, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_GlassGreen;
        [RTTI.Member(239, 0xAE8, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_CoolBlue;
        [RTTI.Member(240, 0xAF0, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_ExplessPurple;
        [RTTI.Member(241, 0xAF8, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_DesertPink;
        [RTTI.Member(242, 0xB00, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_CoyoteBlawn;
        [RTTI.Member(243, 0xB08, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_DesertTan;
        [RTTI.Member(244, 0xB10, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_BridgesOrange;
        [RTTI.Member(245, 0xB18, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_NavyBlue;
        [RTTI.Member(246, 0xB20, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_BladRed;
        [RTTI.Member(247, 0xB28, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_VolcanoOrange;
        [RTTI.Member(248, 0xB30, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_BrightYellow;
        [RTTI.Member(249, 0xB38, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_GoastGreen;
        [RTTI.Member(250, 0xB40, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_SignalGreen;
        [RTTI.Member(251, 0xB48, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_LightningBlue;
        [RTTI.Member(252, 0xB50, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_RainbowPurple;
        [RTTI.Member(253, 0xB58, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_RosePink;
        [RTTI.Member(254, 0xB60, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_AllReflector;
        [RTTI.Member(255, 0xB68, "LogoColorTextResource")] public Ref<LocalizedTextResource> LogoColor_ChiralGold;
        [RTTI.Member(230, 0xB70, "UILogoTexture")] public StreamingRef<UITexture> UILogoTexture;
    }

    [RTTI.Serializable(0xE5FF5A1400984775, GameType.DS)]
    public class DSUIPhotoModeMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x91E8A9786B5DAE35, GameType.DS)]
    public class DSUIPhotoModeMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> PhotoModeMenuPanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> PhotoModeListElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> ConfirmDialogPanelElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> ConfirmSelectViewElementResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuElementResource> PhotoModeGridPanelElementResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<MenuElementResource> PhotoModeFramePanelElementResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> PhotoModeLogoPanelElementResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> CursorTextureElementResource_R;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> CursorTextureElementResource_L;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<MenuElementResource> PhotoModeFadePanelResource;
        [RTTI.Member(18, 0x80, "Sounds")] public Ref<SoundResource> PhotoModeLoopSoundResource;
        [RTTI.Member(19, 0x88, "Sounds")] public Ref<SoundResource> AcceleratorUpdateSoundResource;
        [RTTI.Member(20, 0x90, "Sounds")] public Ref<SoundResource> AcceleratorBeepSoundResource;
        [RTTI.Member(22, 0x98, "Animation")] public Ref<MenuAnimationResource> CurosrAnimationResource;
        [RTTI.Member(23, 0xA0, "Animation")] public Ref<MenuAnimationResource> FadeInAnimationResource;
        [RTTI.Member(24, 0xA8, "Animation")] public Ref<MenuAnimationResource> FadeOutAnimationResource;
        [RTTI.Member(26, 0xB0, "LogoTargetMovingValue")] public int mLogoTargetMovingWidthValue;
        [RTTI.Member(27, 0xB4, "LogoTargetMovingValue")] public int mLogoTargetMovingHeightValue;
        [RTTI.Member(29, 0xB8, "LogoColorRGBAValue")] public RGBAColor LogoColor_SnowWhite;
        [RTTI.Member(30, 0xBC, "LogoColorRGBAValue")] public RGBAColor LogoColor_StelthBlack;
        [RTTI.Member(31, 0xC0, "LogoColorRGBAValue")] public RGBAColor LogoColor_WolfGray;
        [RTTI.Member(32, 0xC4, "LogoColorRGBAValue")] public RGBAColor LogoColor_OliveDrav;
        [RTTI.Member(33, 0xC8, "LogoColorRGBAValue")] public RGBAColor LogoColor_MarsRed;
        [RTTI.Member(34, 0xCC, "LogoColorRGBAValue")] public RGBAColor LogoColor_EmergencyYellow;
        [RTTI.Member(35, 0xD0, "LogoColorRGBAValue")] public RGBAColor LogoColor_GlassGreen;
        [RTTI.Member(36, 0xD4, "LogoColorRGBAValue")] public RGBAColor LogoColor_CoolBlue;
        [RTTI.Member(37, 0xD8, "LogoColorRGBAValue")] public RGBAColor LogoColor_ExplessPurple;
        [RTTI.Member(38, 0xDC, "LogoColorRGBAValue")] public RGBAColor LogoColor_DesertPink;
        [RTTI.Member(39, 0xE0, "LogoColorRGBAValue")] public RGBAColor LogoColor_CoyoteBlawn;
        [RTTI.Member(40, 0xE4, "LogoColorRGBAValue")] public RGBAColor LogoColor_DesertTan;
        [RTTI.Member(41, 0xE8, "LogoColorRGBAValue")] public RGBAColor LogoColor_BridgesOrange;
        [RTTI.Member(42, 0xEC, "LogoColorRGBAValue")] public RGBAColor LogoColor_NavyBlue;
        [RTTI.Member(43, 0xF0, "LogoColorRGBAValue")] public RGBAColor LogoColor_BladRed;
        [RTTI.Member(44, 0xF4, "LogoColorRGBAValue")] public RGBAColor LogoColor_VolcanoOrange;
        [RTTI.Member(45, 0xF8, "LogoColorRGBAValue")] public RGBAColor LogoColor_BrightYellow;
        [RTTI.Member(46, 0xFC, "LogoColorRGBAValue")] public RGBAColor LogoColor_GoastGreen;
        [RTTI.Member(47, 0x100, "LogoColorRGBAValue")] public RGBAColor LogoColor_SignalGreen;
        [RTTI.Member(48, 0x104, "LogoColorRGBAValue")] public RGBAColor LogoColor_LightningBlue;
        [RTTI.Member(49, 0x108, "LogoColorRGBAValue")] public RGBAColor LogoColor_RainbowPurple;
        [RTTI.Member(50, 0x10C, "LogoColorRGBAValue")] public RGBAColor LogoColor_RosePink;
        [RTTI.Member(51, 0x110, "LogoColorRGBAValue")] public RGBAColor LogoColor_AllReflector;
        [RTTI.Member(52, 0x114, "LogoColorRGBAValue")] public RGBAColor LogoColor_ChiralGold;
    }

    [RTTI.Serializable(0xCD7932F963C41F38, GameType.DS)]
    public class DSUIPhotoModeUIFrame
    {
        [RTTI.Member(1, 0x0, "LocalizedText")] public Ref<LocalizedTextResource> UIFrameTextResouruce;
        [RTTI.Member(3, 0x8, "Textures")] public Array<StreamingRef<UITexture>> UIFrameTextures;
    }

    [RTTI.Serializable(0x84B8899816ED8B28, GameType.DS)]
    public class DSUIPlayerStatusGaugeBaseResource : Resource
    {
        [RTTI.Member(3, 0x20, "GaugePoints")] public int Speed;
        [RTTI.Member(4, 0x24, "GaugePoints")] public int Endurance;
        [RTTI.Member(5, 0x28, "GaugePoints")] public int RoadAbility;
        [RTTI.Member(6, 0x2C, "GaugePoints")] public int Sync;
        [RTTI.Member(7, 0x30, "GaugePoints")] public int Battery;
        [RTTI.Member(8, 0x34, "GaugePoints")] public int Stamina;
        [RTTI.Member(9, 0x38, "GaugePoints")] public int LoadCapacity;
        [RTTI.Member(10, 0x3C, "GaugePoints")] public int ResistFainting;
        [RTTI.Member(11, 0x40, "GaugePoints")] public int Breath;
        [RTTI.Member(12, 0x44, "GaugePoints")] public int Balance;
    }

    [RTTI.Serializable(0x503872350A40AB60, GameType.DS)]
    public class DSUIPlayerStatusGaugeEquipResource : DSUIPlayerStatusGaugeBaseResource
    {
        [RTTI.Member(14, 0x48, "Equip")] public Ref<DSGameCatalogueListItem> Catalogue;
    }

    [RTTI.Serializable(0xA75489F93838006A, GameType.DS)]
    public class DSUIPlayerStatusGaugeEvaluationResource : DSUIPlayerStatusGaugeBaseResource
    {
        [RTTI.Member(14, 0x48, "Evaluation")] public EDSUIStarGraphCategory Category;
        [RTTI.Member(15, 0x4C, "Evaluation")] public int Rank;
    }

    [RTTI.Serializable(0x2E6FE81A41339524, GameType.DS)]
    public class DSUIPlayerStatusGaugeInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "GaugeParameters")] public Array<Ref<DSUIPlayerStatusGaugeEquipResource>> EquipParameters;
        [RTTI.Member(4, 0x30, "GaugeParameters")] public Array<Ref<DSUIPlayerStatusGaugeEvaluationResource>> EvaluationParameters;
        [RTTI.Member(5, 0x40, "GaugeParameters")] public Ref<DSUIPlayerStatusGaugeBaseResource> MaxParameter;
        [RTTI.Member(6, 0x48, "GaugeParameters")] public float DefaultGaugeRate;
        [RTTI.Member(8, 0x50, "GaugeNames")] public Ref<LocalizedTextResource> Speed;
        [RTTI.Member(9, 0x58, "GaugeNames")] public Ref<LocalizedTextResource> Endurance;
        [RTTI.Member(10, 0x60, "GaugeNames")] public Ref<LocalizedTextResource> RoadAbility;
        [RTTI.Member(11, 0x68, "GaugeNames")] public Ref<LocalizedTextResource> Sync;
        [RTTI.Member(12, 0x70, "GaugeNames")] public Ref<LocalizedTextResource> Battery;
        [RTTI.Member(13, 0x78, "GaugeNames")] public Ref<LocalizedTextResource> Stamina;
        [RTTI.Member(14, 0x80, "GaugeNames")] public Ref<LocalizedTextResource> LoadCapacity;
        [RTTI.Member(15, 0x88, "GaugeNames")] public Ref<LocalizedTextResource> ResistFainting;
        [RTTI.Member(16, 0x90, "GaugeNames")] public Ref<LocalizedTextResource> Breath;
        [RTTI.Member(17, 0x98, "GaugeNames")] public Ref<LocalizedTextResource> Balance;
    }

    [RTTI.Serializable(0xFADB728C2FA83CF3, GameType.DS)]
    public class DSUIPolygonBlinkParameter
    {
        [RTTI.Member(0, 0x0)] public Ref<CurveResource> BlinkCurve;
    }

    [RTTI.Serializable(0x88F1DA46017574, GameType.DS)]
    public class DSUIPrivateRoomColorParam
    {
        [RTTI.Member(1, 0x0, "ColorUV")] public float ColorU;
        [RTTI.Member(2, 0x4, "ColorUV")] public float ColorV;
    }

    [RTTI.Serializable(0x2A23C1BDB1A77C1E, GameType.DS)]
    public class DSUIPrivateRoomPhotoMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x3B4E4EFE8313A210, GameType.DS)]
    public class DSUIPrivateRoomPhotoMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0xDFF4134FE2E1ECA4, GameType.DS)]
    public class DSUIPrivateRoomPhotoMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xEE3F373946176A91, GameType.DS)]
    public class DSUIPrivateRoomPhotoMenuFunctionResource : MenuFunctionResource
    {
    }

    [RTTI.Serializable(0x194F09A99956926D, GameType.DS)]
    public class DSUIPrivateRoomPhotoMenuSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x2276CCCE7FA0B7EA, GameType.DS)]
    public class DSUIPrivateRoomPhotoMenuSequenceEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xAC31264D21DC19F2, GameType.DS)]
    public class DSUIQTEIconSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC60B7464EB3D60EE, GameType.DS)]
    public class DSUIQTEIconSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSPadGameButtonType ButtonType;
        [RTTI.Member(9, 0x34, "Logic")] public EDSKeyBindCategory Category;
        [RTTI.Member(10, 0x38, "Logic")] public EDSFunction Function;
        [RTTI.Member(11, 0x3C, "Logic")] public EDSUIButtonIconStyleType IconStyleType;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(13, 0x48, "Logic")] public Ref<BooleanFact> IsInputQTEFact;
        [RTTI.Member(14, 0x50, "Logic")] public bool IsAutoInputQTE;
        [RTTI.Member(15, 0x51, "Logic")] public bool IsSkipExecuteAnimation;
    }

    [RTTI.Serializable(0xF5157138F1079719, GameType.DS)]
    public class DSUIQpidPointInfo
    {
        [RTTI.Member(0, 0x0)] public String DeliveryPointText;
        [RTTI.Member(1, 0x8)] public UUIDRef<DSDeliveryPointInfoResource> StarDeliveryPoint;
    }

    [RTTI.Serializable(0xC9EB384B861AB3F0, GameType.DS)]
    public class DSUIRadioCallHUDDescResource : Resource
    {
        [RTTI.Member(3, 0x20, "Sound")] public Ref<SoundResource> CallSound;
    }

    [RTTI.Serializable(0x9DBC02BC16194948, GameType.DS)]
    public class DSUIRadioCallHUDDescTableResource : Resource
    {
        [RTTI.Member(3, 0x20, "Desc")] public Array<Ref<DSUIRadioCallHUDDescResource>> Descs;
    }

    [RTTI.Serializable(0x60B8021D30BC7A48, GameType.DS)]
    public class DSUIRadioCallHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xEE32A6B2DDBD8A62, GameType.DS)]
    public class DSUIRadioCallHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "Animation")] public Ref<DSUIHUDAnimatorResource> CallLoopAnimator;
        [RTTI.Member(20, 0x88, "Animation")] public Ref<DSUIHUDAnimatorResource> CallIntroAnimator;
        [RTTI.Member(21, 0x90, "Animation")] public Ref<DSUIHUDAnimatorResource> CallOutroAnimator;
        [RTTI.Member(23, 0x98, "Table")] public Ref<DSUIRadioCallHUDDescTableResource> DescTable;
    }

    [RTTI.Serializable(0xCEA205C52F9E0081, GameType.DS)]
    public class DSUIRadioCallSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x588FB7E326F59E9C, GameType.DS)]
    public class DSUIRadioCallSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Desc")] public UUIDRef<DSUIRadioCallHUDDescResource> Desc;
    }

    [RTTI.Serializable(0x69275432BB7A0EAD, GameType.DS)]
    public class DSUIResultMenuOpenSequenceEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0xAD41E1BE09E5A9C6, GameType.DS)]
    public class DSUIResultMenuOpenSequenceEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x29, "Logic")] public bool MissionResult;
        [RTTI.Member(7, 0x2A, "Logic")] public bool ComprehensiveEvaluation;
    }

    [RTTI.Serializable(0x60A4FBB5F7DF45D1, GameType.DS)]
    public class DSUIReticleHUDLogic : DSUIReticleHUDLogicBase
    {
    }

    [RTTI.Serializable(0x7B6FD1C36ECDD0CD, GameType.DS)]
    public class DSUIReticleHUDLogicBase : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x1EDD0ABC1D6235C1, GameType.DS)]
    public class DSUIReticleHUDLogicPartsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Element")] public Ref<HUDElementResource> RootElement;
        [RTTI.Member(4, 0x28, "Element")] public Ref<HUDElementResource> UpGaugeElement;
        [RTTI.Member(5, 0x30, "Element")] public Ref<HUDElementResource> LeftGaugeElement;
        [RTTI.Member(6, 0x38, "Element")] public Ref<HUDElementResource> RightGaugeElement;
        [RTTI.Member(8, 0x40, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(9, 0x48, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(10, 0x50, "Animation")] public Ref<DSUIHUDAnimatorResource> ShotAnimator;
        [RTTI.Member(11, 0x58, "Animation")] public Ref<DSUIHUDAnimatorResource> ActivateAnimator;
        [RTTI.Member(12, 0x60, "Animation")] public Ref<DSUIHUDAnimatorResource> DeactivateAnimator;
        [RTTI.Member(13, 0x68, "Animation")] public Ref<DSUIHUDAnimatorResource> ChangeDefaultColorAnimator;
        [RTTI.Member(14, 0x70, "Animation")] public Ref<DSUIHUDAnimatorResource> ChangeAimEnemiesColorAnimator;
        [RTTI.Member(15, 0x78, "Animation")] public Ref<DSUIHUDAnimatorResource> RightPositionAnimator;
        [RTTI.Member(16, 0x80, "Animation")] public Ref<DSUIHUDAnimatorResource> LeftPositionAnimator;
        [RTTI.Member(18, 0x88, "ShotGaugeAnimation")] public Ref<CurveResource> ShotGaugeSliderCurve;
        [RTTI.Member(19, 0x90, "ShotGaugeAnimation")] public float ShotGaugeSliderDuration;
        [RTTI.Member(20, 0x94, "ShotGaugeAnimation")] public float ShotGaugeSliderMaxAmount;
    }

    [RTTI.Serializable(0x262717F0BE721306, GameType.DS)]
    public class DSUIReticleHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<DSUIReticleHUDLogicPartsResource> MainParts;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<DSUIReticleHUDLogicPartsResource> SubParts;
        [RTTI.Member(21, 0x90, "Sound")] public Ref<SoundResource> AimEnemySound;
        [RTTI.Member(22, 0x98, "Sound")] public Ref<SoundResource> MissEnemySound;
    }

    [RTTI.Serializable(0xD8270C9373A765D4, GameType.DS)]
    public class DSUIRoadmapDeliverLocationElement : DSUIRoadmapLocationElement
    {
    }

    [RTTI.Serializable(0x601C7C8DD045AFC0, GameType.DS)]
    public class DSUIRoadmapElementBase : RTTIObject
    {
    }

    [RTTI.Serializable(0x9186B226D93DE8A9, GameType.DS)]
    public class DSUIRoadmapLabelElement : DSUIRoadmapElementBase
    {
    }

    [RTTI.Serializable(0xF55603211B8A1359, GameType.DS)]
    public class DSUIRoadmapLocationElement : DSUIRoadmapLabelElement
    {
    }

    [RTTI.Serializable(0x20364D1A08AF6ED, GameType.DS)]
    public class DSUIRoadmapRiskRecommendElement : DSUIRoadmapElementBase
    {
    }

    [RTTI.Serializable(0xC5317DF7431D9B65, GameType.DS)]
    public class DSUISDRConfigMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x70BA3C9D5DE8CE88, GameType.DS)]
    public class DSUISDRConfigMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> SDRBrightnessTitleResource;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> SDRBrightnessDescriptionResource;
        [RTTI.Member(9, 0x38, "Textures")] public StreamingRef<UITexture> ComparisonTexture_A;
        [RTTI.Member(10, 0x40, "Textures")] public StreamingRef<UITexture> ComparisonTexture_B;
    }

    [RTTI.Serializable(0xE2DF5EB59ECA1435, GameType.DS)]
    public class DSUISDRConfigMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xF5CCC28CF25257BA, GameType.DS)]
    public class DSUISDRConfigMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Elements")] public Ref<MenuElementResource> ConfigListTagElementResource;
        [RTTI.Member(8, 0x38, "Elements")] public Ref<MenuElementResource> DecidePanelTagElementResource;
        [RTTI.Member(9, 0x40, "Elements")] public Ref<MenuElementResource> ConfirmDialogPanelElementResource;
        [RTTI.Member(10, 0x48, "Elements")] public Ref<MenuElementResource> ConfirmSelectListElementResource;
        [RTTI.Member(11, 0x50, "Elements")] public Ref<MenuElementResource> CursorTextureElementResource_R;
        [RTTI.Member(12, 0x58, "Elements")] public Ref<MenuElementResource> CursorTextureElementResource_L;
        [RTTI.Member(14, 0x60, "Animation")] public Ref<MenuAnimationResource> CurosrAnimationResource;
    }

    [RTTI.Serializable(0x294E949221CBE6E9, GameType.DS)]
    public class DSUISKUCreditGroup
    {
        [RTTI.Member(0, 0x0)] public int SortID;
        [RTTI.Member(1, 0x8)] public Array<DSUISKUCreditResourceItems> SKUCreditResourceItems;
    }

    [RTTI.Serializable(0x2A82F6545AEAE3E9, GameType.DS)]
    public class DSUISKUCreditHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x8A0A830B784D5918, GameType.DS)]
    public class DSUISKUCreditHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_0;
        [RTTI.Member(20, 0x90, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_1C;
        [RTTI.Member(21, 0xA0, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_1C_s;
        [RTTI.Member(22, 0xB0, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_1G;
        [RTTI.Member(23, 0xC0, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_2CC;
        [RTTI.Member(24, 0xD0, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_2CC_s;
        [RTTI.Member(25, 0xE0, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_2CC_sm;
        [RTTI.Member(26, 0xF0, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_2CC_w;
        [RTTI.Member(27, 0x100, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_2CC_sw;
        [RTTI.Member(28, 0x110, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_2GG;
        [RTTI.Member(29, 0x120, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_2RL;
        [RTTI.Member(30, 0x130, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_3CCC;
        [RTTI.Member(31, 0x140, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_3CCC_s;
        [RTTI.Member(32, 0x150, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_3GGG;
        [RTTI.Member(33, 0x160, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_4CCCC;
        [RTTI.Member(35, 0x170, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_4RLLL;
        [RTTI.Member(34, 0x180, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_4RLRL;
        [RTTI.Member(36, 0x190, "RowPartsElement")] public DSUISKUCreditHUDRowLogicParts RowParts_6RLLRLL;
        [RTTI.Member(38, 0x1B0, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(39, 0x1B8, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(40, 0x1C0, "Animation")] public Ref<DSUIHUDAnimatorResource> LoopAnimator;
        [RTTI.Member(41, 0x1C8, "Animation")] public Ref<DSUIHUDAnimatorResource> FadeOutAnimator;
        [RTTI.Member(42, 0x1D0, "Animation")] public Ref<DSUIHUDAnimatorResource> FadeInAnimator;
    }

    [RTTI.Serializable(0x6EB182EEAB8883AE, GameType.DS)]
    public class DSUISKUCreditHUDRowLogicParts
    {
        [RTTI.Member(1, 0x0, "Element")] public Ref<HUDElementResource> PartsElement;
        [RTTI.Member(3, 0x8, "Param")] public int PartsHeight;
    }

    [RTTI.Serializable(0x6B38D35ABB6EFF44, GameType.DS)]
    public class DSUISKUCreditResourceItems
    {
        [RTTI.Member(1, 0x0)] public Ref<DSUIStaffCreditHUDDataResource> SKUCreditDataResource;
        [RTTI.Member(0, 0x8)] public float ShowTimer;
    }

    [RTTI.Serializable(0x6EAE057A38DCE4EA, GameType.DS)]
    public class DSUISKUCreditSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x46F929AA226FA199, GameType.DS)]
    public class DSUISKUCreditSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Fact")] public Ref<BooleanFact> LoopFact;
        [RTTI.Member(10, 0x68, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_FRENCH;
        [RTTI.Member(11, 0x80, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_SPANISH;
        [RTTI.Member(12, 0x98, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_GERMAN;
        [RTTI.Member(13, 0xB0, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_ITALIAN;
        [RTTI.Member(14, 0xC8, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_DUTCH;
        [RTTI.Member(15, 0xE0, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_PORTUGUESE;
        [RTTI.Member(16, 0xF8, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_CHINESE_TRADITIONAL;
        [RTTI.Member(17, 0x110, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_KOREAN;
        [RTTI.Member(18, 0x128, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_RUSSIAN;
        [RTTI.Member(19, 0x140, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_POLISH;
        [RTTI.Member(20, 0x158, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_DANISH;
        [RTTI.Member(21, 0x170, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_FINNISH;
        [RTTI.Member(22, 0x188, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_NORWEGIAN;
        [RTTI.Member(23, 0x1A0, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_SWEDISH;
        [RTTI.Member(24, 0x1B8, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_JAPANESE;
        [RTTI.Member(25, 0x1D0, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_SPANISH_LA;
        [RTTI.Member(26, 0x1E8, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_PORTUGUESE_LA;
        [RTTI.Member(27, 0x200, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_TURKISH;
        [RTTI.Member(28, 0x218, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_ARABIC;
        [RTTI.Member(29, 0x230, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_CHINESE_SIMPLIFIED;
        [RTTI.Member(30, 0x248, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_ENGLISH_UK;
        [RTTI.Member(31, 0x260, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_GREEK;
        [RTTI.Member(32, 0x278, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_CZECH;
        [RTTI.Member(33, 0x290, "ResourceItems")] public DSUISKUCreditGroup LANGUAGE_HUNGARIAN;
    }

    [RTTI.Serializable(0x198FC949AA56B491, GameType.DS)]
    public class DSUISaveLoadIconHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x406CE1B9D537DE47, GameType.DS)]
    public class DSUISaveLoadIconHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Elements")] public Ref<HUDElementResource> StartPointElement;
        [RTTI.Member(19, 0x88, "DS_Elements")] public Ref<HUDElementResource> IconTemplateElement;
        [RTTI.Member(20, 0x90, "DS_Elements")] public Ref<HUDElementResource> IconShaderElement;
        [RTTI.Member(24, 0x98, "UIEffects")] public Ref<UIEffectResource> IconShaderEffect_LOADING;
        [RTTI.Member(23, 0xA0, "UIEffects")] public Ref<UIEffectResource> IconShaderEffect_SAVING;
        [RTTI.Member(25, 0xA8, "UIEffects")] public Ref<UIEffectResource> IconShaderEffect_NETWORK_CONNECTING;
        [RTTI.Member(21, 0xB0, "DS_Elements")] public Ref<HUDElementResource> IconTextElement;
        [RTTI.Member(28, 0xB8, "Parameter")] public Ref<DSUISaveLoadIconHUDTextResource> IconTextResource_LOADING;
        [RTTI.Member(27, 0xC0, "Parameter")] public Ref<DSUISaveLoadIconHUDTextResource> IconTextResource_SAVING;
        [RTTI.Member(29, 0xC8, "Parameter")] public Ref<DSUISaveLoadIconHUDTextResource> IconTextResource_NETWORK_CONNECTING;
        [RTTI.Member(30, 0xD0, "Parameter")] public float OffsetHeight;
    }

    [RTTI.Serializable(0x59AEC75DA4ECB172, GameType.DS)]
    public class DSUISaveLoadIconHUDTextResource : Resource
    {
        [RTTI.Member(2, 0x20)] public FRGBAColor Color;
        [RTTI.Member(3, 0x30)] public Ref<Typeface> Typeface;
        [RTTI.Member(4, 0x38)] public String Style;
        [RTTI.Member(5, 0x48)] public Ref<LocalizedTextResource> IntroText;
        [RTTI.Member(6, 0x50)] public Ref<LocalizedTextResource> IdleText;
        [RTTI.Member(7, 0x58)] public Ref<LocalizedTextResource> OutroText;
        [RTTI.Member(8, 0x68)] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(9, 0x70)] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(10, 0x78)] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
    }

    [RTTI.Serializable(0xDD15F508FFD1EDC2, GameType.DS)]
    public class DSUIShotGunReticleHUDLogic : DSUIReticleHUDLogicBase
    {
    }

    [RTTI.Serializable(0x8FC715087E25772B, GameType.DS)]
    public class DSUIShotGunReticleHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<DSUIReticleHUDLogicPartsResource> MainParts;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<DSUIReticleHUDLogicPartsResource> SubParts;
        [RTTI.Member(21, 0x90, "Sound")] public Ref<SoundResource> AimEnemySound;
        [RTTI.Member(22, 0x98, "Sound")] public Ref<SoundResource> MissEnemySound;
    }

    [RTTI.Serializable(0xA5625AB5ABA7797D, GameType.DS)]
    public class DSUIShowcaseHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xBFC14DCB06083987, GameType.DS)]
    public class DSUIShowcaseHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "TextElement")] public Ref<HUDTextResource> TitleLabelElement;
        [RTTI.Member(20, 0x88, "TextElement")] public Ref<HUDTextResource> TitleLabelBgElement;
        [RTTI.Member(21, 0x90, "TextElement")] public Ref<HUDTextResource> TypeTextElement;
        [RTTI.Member(22, 0x98, "TextElement")] public Ref<HUDTextResource> TypeTextBgElement;
        [RTTI.Member(23, 0xA0, "TextElement")] public Ref<HUDTextResource> DescriptionTextElement;
        [RTTI.Member(24, 0xA8, "TextElement")] public Ref<HUDTextResource> DescriptionTextBgElement;
        [RTTI.Member(25, 0xB0, "TextElement")] public Ref<HUDTextResource> WeightTextElement;
        [RTTI.Member(26, 0xB8, "TextElement")] public Ref<HUDTextResource> WeightTextBgElement;
        [RTTI.Member(28, 0xC0, "TextureElement")] public Ref<HUDImageResource> IconTextureElement;
        [RTTI.Member(29, 0xC8, "TextureElement")] public Ref<HUDImageResource> IconTextureBgElement;
        [RTTI.Member(31, 0xD0, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(32, 0xD8, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(33, 0xE0, "Animation")] public Ref<DSUIHUDAnimatorResource> LoopAnimator;
    }

    [RTTI.Serializable(0xED6D93DE32DE8C15, GameType.DS)]
    public class DSUIShowcaseSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD5F9709EB6D417DA, GameType.DS)]
    public class DSUIShowcaseSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSWeaponId WeaponID;
    }

    [RTTI.Serializable(0x2AA1925169C9EEF4, GameType.DS)]
    public class DSUISignboardCategory
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> LabelText;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> IconTexture;
    }

    [RTTI.Serializable(0x4878796A03D12904, GameType.DS)]
    public class DSUISignboardIconInfo
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> IconImage;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> SmallIconImage;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> NameText;
        [RTTI.Member(3, 0x18)] public bool IsDisplaySignboardMenu;
        [RTTI.Member(4, 0x1C)] public uint32 DisplayOrder;
    }

    [RTTI.Serializable(0x1F3A66C6A9DAE0AD, GameType.DS)]
    public class DSUISignboardIconResource : Resource
    {
        [RTTI.Member(5, 0x20, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1001;
        [RTTI.Member(6, 0x40, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1002;
        [RTTI.Member(7, 0x60, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1003;
        [RTTI.Member(8, 0x80, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1004;
        [RTTI.Member(9, 0xA0, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1005;
        [RTTI.Member(10, 0xC0, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1006;
        [RTTI.Member(11, 0xE0, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1007;
        [RTTI.Member(12, 0x100, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1008;
        [RTTI.Member(13, 0x120, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1009;
        [RTTI.Member(14, 0x140, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1010;
        [RTTI.Member(15, 0x160, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1011;
        [RTTI.Member(16, 0x180, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1012;
        [RTTI.Member(17, 0x1A0, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1013;
        [RTTI.Member(18, 0x1C0, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1014;
        [RTTI.Member(19, 0x1E0, "Type_Warning")] public DSUISignboardIconInfo IconInfo_Holosign_1015;
        [RTTI.Member(21, 0x200, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2001;
        [RTTI.Member(22, 0x220, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2002;
        [RTTI.Member(23, 0x240, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2003;
        [RTTI.Member(24, 0x260, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2004;
        [RTTI.Member(25, 0x280, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2005;
        [RTTI.Member(26, 0x2A0, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2007;
        [RTTI.Member(27, 0x2C0, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2008;
        [RTTI.Member(28, 0x2E0, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2009;
        [RTTI.Member(29, 0x300, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2010;
        [RTTI.Member(30, 0x320, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2011;
        [RTTI.Member(31, 0x340, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2013;
        [RTTI.Member(32, 0x360, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2014;
        [RTTI.Member(33, 0x380, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2015;
        [RTTI.Member(34, 0x3A0, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2016;
        [RTTI.Member(35, 0x3C0, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2017;
        [RTTI.Member(36, 0x3E0, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2018;
        [RTTI.Member(37, 0x400, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2019;
        [RTTI.Member(38, 0x420, "Type_Request")] public DSUISignboardIconInfo IconInfo_Holosign_2020;
        [RTTI.Member(40, 0x440, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3001;
        [RTTI.Member(41, 0x460, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3002;
        [RTTI.Member(42, 0x480, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3003;
        [RTTI.Member(43, 0x4A0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3004;
        [RTTI.Member(44, 0x4C0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3004_l;
        [RTTI.Member(45, 0x4E0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3005;
        [RTTI.Member(46, 0x500, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3005_l;
        [RTTI.Member(47, 0x520, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3007;
        [RTTI.Member(48, 0x540, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3007_l;
        [RTTI.Member(49, 0x560, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3010;
        [RTTI.Member(50, 0x580, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3011;
        [RTTI.Member(51, 0x5A0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3012;
        [RTTI.Member(52, 0x5C0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3013;
        [RTTI.Member(53, 0x5E0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3014;
        [RTTI.Member(54, 0x600, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3015;
        [RTTI.Member(55, 0x620, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3016;
        [RTTI.Member(56, 0x640, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3017;
        [RTTI.Member(57, 0x660, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3018;
        [RTTI.Member(58, 0x680, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3019;
        [RTTI.Member(59, 0x6A0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3020;
        [RTTI.Member(60, 0x6C0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3021;
        [RTTI.Member(61, 0x6E0, "Type_Direction")] public DSUISignboardIconInfo IconInfo_Holosign_3022;
        [RTTI.Member(63, 0x700, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4001;
        [RTTI.Member(64, 0x720, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4002;
        [RTTI.Member(65, 0x740, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4003;
        [RTTI.Member(66, 0x760, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4004;
        [RTTI.Member(67, 0x780, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4005;
        [RTTI.Member(68, 0x7A0, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4010;
        [RTTI.Member(69, 0x7C0, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4011;
        [RTTI.Member(70, 0x7E0, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4012;
        [RTTI.Member(71, 0x800, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4013;
        [RTTI.Member(72, 0x820, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4014;
        [RTTI.Member(73, 0x840, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4015;
        [RTTI.Member(74, 0x860, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4016;
        [RTTI.Member(75, 0x880, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4017;
        [RTTI.Member(76, 0x8A0, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_4018;
        [RTTI.Member(77, 0x8C0, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_5001;
        [RTTI.Member(78, 0x8E0, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_5002;
        [RTTI.Member(81, 0x900, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6001;
        [RTTI.Member(82, 0x920, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6002;
        [RTTI.Member(83, 0x940, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6003;
        [RTTI.Member(84, 0x960, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6004;
        [RTTI.Member(85, 0x980, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6005;
        [RTTI.Member(86, 0x9A0, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6007;
        [RTTI.Member(87, 0x9C0, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6008;
        [RTTI.Member(88, 0x9E0, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6010;
        [RTTI.Member(89, 0xA00, "Type_Advice")] public DSUISignboardIconInfo IconInfo_Holosign_6011;
        [RTTI.Member(79, 0xA20, "Type_Others")] public DSUISignboardIconInfo IconInfo_Holosign_7002;
        [RTTI.Member(3, 0xA40, "Type_Delete")] public DSUISignboardIconInfo IconInfo_Holosign_0000;
    }

    [RTTI.Serializable(0x9D8CC7B128B85E9C, GameType.DS)]
    public class DSUISignboardMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x998A07FF369C898D, GameType.DS)]
    public class DSUISignboardMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public DSUISignboardCategory Category_All;
        [RTTI.Member(7, 0x38, "LocalizedText")] public DSUISignboardCategory Category_Warning;
        [RTTI.Member(9, 0x48, "LocalizedText")] public DSUISignboardCategory Category_Direction;
        [RTTI.Member(10, 0x58, "LocalizedText")] public DSUISignboardCategory Category_Others;
        [RTTI.Member(8, 0x68, "LocalizedText")] public DSUISignboardCategory Category_Request;
        [RTTI.Member(11, 0x78, "LocalizedText")] public DSUISignboardCategory Category_Advice;
        [RTTI.Member(12, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> CreateNewModeTitle;
        [RTTI.Member(13, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> EditModeTitle;
        [RTTI.Member(14, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> CreateNewModeRuby;
        [RTTI.Member(15, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> EditModeRuby;
    }

    [RTTI.Serializable(0xFC70902C7B3D9588, GameType.DS)]
    public class DSUISignboardMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xDE67C6432AE95F89, GameType.DS)]
    public class DSUISignboardMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> CreateNewModePanelElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> ConfirmDialogPnlElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> ConfirmSelectViewElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> CreateNewTabBoxElementResource;
        [RTTI.Member(12, 0x50, "Sound")] public Ref<SoundResource> DialogOpenSound;
    }

    [RTTI.Serializable(0x8DF7B2B34AD50029, GameType.DS)]
    public class DSUISkipMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0xED6E3BBC12287B49, GameType.DS)]
    public class DSUISkipMenuDataSourceResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x467D09429CD97175, GameType.DS)]
    public class DSUISkipMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x982D7ACC3903EA64, GameType.DS)]
    public class DSUISkipMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> ContinueElementResource;
    }

    [RTTI.Serializable(0x302D57FC233FF1EA, GameType.DS)]
    public class DSUISplashScreenMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x1574443FE0EBF3A0, GameType.DS)]
    public class DSUISplashScreenMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> DialogWarningSystem;
        [RTTI.Member(8, 0x30, "Textures")] public StreamingRef<UITexture> SIETexture;
        [RTTI.Member(9, 0x38, "Textures")] public StreamingRef<UITexture> KJPTexture;
        [RTTI.Member(10, 0x40, "Textures")] public StreamingRef<UITexture> DecimaTexture;
        [RTTI.Member(11, 0x48, "Textures")] public StreamingRef<UITexture> _505GamesTexture;
    }

    [RTTI.Serializable(0x15FE35C9F99B6558, GameType.DS)]
    public class DSUISplashScreenMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x568E89870ACC3D95, GameType.DS)]
    public class DSUISplashScreenMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Elements")] public Ref<MenuElementResource> DummyFocusElement;
        [RTTI.Member(8, 0x38, "Elements")] public Ref<MenuElementResource> LoadingElement;
        [RTTI.Member(9, 0x40, "Elements")] public Ref<MenuElementResource> ConfirmDialogElement;
        [RTTI.Member(10, 0x48, "Elements")] public Ref<MenuElementResource> SIELogo;
        [RTTI.Member(11, 0x50, "Elements")] public Ref<MenuElementResource> KJPLogo;
        [RTTI.Member(12, 0x58, "Elements")] public Ref<MenuElementResource> DecimaLogo;
        [RTTI.Member(13, 0x60, "Elements")] public Ref<MenuElementResource> _505GamesLogo;
        [RTTI.Member(15, 0x68, "Timer")] public float SIELogoShowTimer;
        [RTTI.Member(16, 0x6C, "Timer")] public float KJPLogoShowTimer;
        [RTTI.Member(17, 0x70, "Timer")] public float DecimaLogoShowTimer;
        [RTTI.Member(18, 0x74, "Timer")] public float _505GamesLogoShowTimer;
    }

    [RTTI.Serializable(0xC078416B3BF7B403, GameType.DS)]
    public class DSUIStaffCreditHUDDataResource : Resource
    {
        [RTTI.Member(3, 0x20, "Resources")] public Array<Ref<DSUIStaffCreditHUDRowItemResourceBase>> CreditResources;
    }

    [RTTI.Serializable(0x167C80ABFDE58F10, GameType.DS)]
    public class DSUIStaffCreditHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xD98632E1426C255D, GameType.DS)]
    public class DSUIStaffCreditHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDElementResource> TemplateRootPartsElement_Center;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<HUDElementResource> TemplateRootPartsElement_Left;
        [RTTI.Member(20, 0x90, "DS_Logic")] public Ref<HUDElementResource> TemplateRootPartsElement_Right;
        [RTTI.Member(22, 0xA8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_0;
        [RTTI.Member(23, 0xB8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_1C;
        [RTTI.Member(24, 0xC8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_1C_s;
        [RTTI.Member(25, 0xD8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_1G;
        [RTTI.Member(26, 0xE8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_2CC;
        [RTTI.Member(27, 0xF8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_2CC_s;
        [RTTI.Member(28, 0x108, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_2CC_sm;
        [RTTI.Member(29, 0x118, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_2CC_w;
        [RTTI.Member(30, 0x128, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_2CC_sw;
        [RTTI.Member(31, 0x138, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_2GG;
        [RTTI.Member(32, 0x148, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_2RL;
        [RTTI.Member(33, 0x158, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_3CCC;
        [RTTI.Member(34, 0x168, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_3CCC_s;
        [RTTI.Member(35, 0x178, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_3GGG;
        [RTTI.Member(36, 0x188, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_4CCCC;
        [RTTI.Member(38, 0x198, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_4RLLL;
        [RTTI.Member(37, 0x1A8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_4RLRL;
        [RTTI.Member(39, 0x1B8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_6RLLRLL;
        [RTTI.Member(40, 0x1C8, "RowPartsElement")] public DSUIStaffCreditHUDRowLogicParts RowPartsElement_RowParts_STRAND;
        [RTTI.Member(42, 0x1D8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_0;
        [RTTI.Member(43, 0x1E8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_1C;
        [RTTI.Member(44, 0x1F8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_1C_s;
        [RTTI.Member(45, 0x208, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_1G;
        [RTTI.Member(46, 0x218, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_2CC;
        [RTTI.Member(47, 0x228, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_2CC_s;
        [RTTI.Member(48, 0x238, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_2CC_sm;
        [RTTI.Member(49, 0x248, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_2CC_w;
        [RTTI.Member(50, 0x258, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_2CC_sw;
        [RTTI.Member(51, 0x268, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_2GG;
        [RTTI.Member(52, 0x278, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_2RL;
        [RTTI.Member(53, 0x288, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_3CCC;
        [RTTI.Member(54, 0x298, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_3CCC_s;
        [RTTI.Member(55, 0x2A8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_3GGG;
        [RTTI.Member(56, 0x2B8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_4CCCC;
        [RTTI.Member(58, 0x2C8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_4RLLL;
        [RTTI.Member(57, 0x2D8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_4RLRL;
        [RTTI.Member(59, 0x2E8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_6RLLRLL;
        [RTTI.Member(60, 0x2F8, "FakeRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts FakeRowPartsElement_RowParts_STRAND;
        [RTTI.Member(62, 0x308, "OtherRowPartsElement")] public DSUIStaffCreditHUDRowLogicParts LegalLineRowParts;
        [RTTI.Member(68, 0x318, "DebugElement")] public Ref<HUDElementResource> DebugShowParts;
        [RTTI.Member(64, 0x320, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(65, 0x328, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(66, 0x330, "Animation")] public Ref<DSUIHUDAnimatorResource> LoopAnimator;
    }

    [RTTI.Serializable(0xBA457009E9ADEA02, GameType.DS)]
    public class DSUIStaffCreditHUDRowItemResourceBase : Resource
    {
        [RTTI.Member(3, 0x20, "Type")] public EDSUIStaffCreditHUDRowType RowType;
        [RTTI.Member(5, 0x21, "Align")] public EHAlign Align;
    }

    [RTTI.Serializable(0xE5BD4995119691AA, GameType.DS)]
    public class DSUIStaffCreditHUDRowLogicParts
    {
        [RTTI.Member(1, 0x0, "Element")] public Ref<HUDElementResource> PartsElement;
        [RTTI.Member(3, 0x8, "Param")] public int PartsHeight;
    }

    [RTTI.Serializable(0x24259B213E84CEA7, GameType.DS)]
    public class DSUIStaffCreditHUDStringRowItemResource : DSUIStaffCreditHUDRowItemResourceBase
    {
        [RTTI.Member(7, 0x28, "Strings")] public Array<WString> String;
    }

    [RTTI.Serializable(0x2518C1F5FCD4DB04, GameType.DS)]
    public class DSUIStaffCreditHUDTextureRowItemResource : DSUIStaffCreditHUDRowItemResourceBase
    {
        [RTTI.Member(7, 0x28, "Textures")] public Array<Ref<UITexture>> Texture;
    }

    [RTTI.Serializable(0x5B7DB75628B8051C, GameType.DS)]
    public class DSUIStaffCreditSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD6EC1DC67718287, GameType.DS)]
    public class DSUIStaffCreditSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Resource")] public Ref<DSUIStaffCreditHUDDataResource> StaffCreditDataResource;
        [RTTI.Member(10, 0x38, "ParamSetting")] public bool IsStopFinalResource;
        [RTTI.Member(11, 0x3C, "ParamSetting")] public float StopToEndTime;
        [RTTI.Member(12, 0x40, "ParamSetting")] public EDSStaffCreditType SStaffCreditType;
    }

    [RTTI.Serializable(0xAE3D9690DE7CD511, GameType.DS)]
    public class DSUIStaffTelopSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x85967C91A65F6098, GameType.DS)]
    public class DSUIStaffTelopSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSUIStaffTelopPositionType PositionType;
        [RTTI.Member(9, 0x34, "Logic")] public EHUDSnap Pivot;
        [RTTI.Member(10, 0x40, "Logic")] public Vec2 Position;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<LocalizedTextResource> JobName;
        [RTTI.Member(12, 0x58, "Logic")] public Array<Ref<LocalizedTextResource>> PersonNames;
    }

    [RTTI.Serializable(0x3208ED45C598B6C6, GameType.DS)]
    public class DSUIStarGraphMenuResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "DSElements")] public Ref<MenuElementResource> PartsParentElement;
        [RTTI.Member(50, 0x198, "DSElements")] public Ref<MenuElementResource> PartsRootElement;
        [RTTI.Member(51, 0x1A0, "DSElements")] public Ref<MenuElementResource> PartsCurrentPolygonElement;
        [RTTI.Member(52, 0x1A8, "DSElements")] public Ref<MenuElementResource> PartsAddPolygonElement;
        [RTTI.Member(53, 0x1B0, "DSElements")] public Ref<MenuElementResource> GaugeRootElement_BridgeLink;
        [RTTI.Member(54, 0x1B8, "DSElements")] public Ref<MenuElementResource> GaugeRootElement_Safety;
        [RTTI.Member(55, 0x1C0, "DSElements")] public Ref<MenuElementResource> GaugeRootElement_Service;
        [RTTI.Member(56, 0x1C8, "DSElements")] public Ref<MenuElementResource> GaugeRootElement_Delivery;
        [RTTI.Member(57, 0x1D0, "DSElements")] public Ref<MenuElementResource> GaugeRootElement_Speed;
        [RTTI.Member(58, 0x1D8, "DSElements")] public Ref<MenuElementResource> GaugeLevelCountNumberElement;
        [RTTI.Member(59, 0x1E0, "DSElements")] public Ref<MenuElementResource> GaugeLevelShadowCountNumberElement;
        [RTTI.Member(60, 0x1E8, "DSElements")] public Ref<MenuElementResource> GaugeLevelAddCountNumberElement;
        [RTTI.Member(61, 0x1F0, "DSElements")] public Ref<MenuElementResource> GaugeExpGaugeElement;
        [RTTI.Member(62, 0x1F8, "DSElements")] public Ref<MenuElementResource> GaugeAddExpGaugeElement;
        [RTTI.Member(63, 0x200, "DSElements")] public Ref<MenuElementResource> IconEffectElement_BridgeLink;
        [RTTI.Member(64, 0x208, "DSElements")] public Ref<MenuElementResource> IconEffectElement_Safety;
        [RTTI.Member(65, 0x210, "DSElements")] public Ref<MenuElementResource> IconEffectElement_Service;
        [RTTI.Member(66, 0x218, "DSElements")] public Ref<MenuElementResource> IconEffectElement_Delivery;
        [RTTI.Member(67, 0x220, "DSElements")] public Ref<MenuElementResource> IconEffectElement_Speed;
        [RTTI.Member(68, 0x228, "DSElements")] public Ref<MenuElementResource> LegendRootElement;
        [RTTI.Member(69, 0x230, "DSElements")] public Array<Ref<MenuElementResource>> LegendTextElements;
        [RTTI.Member(70, 0x240, "DSElements")] public Array<Ref<MenuElementResource>> LegendImageElements;
        [RTTI.Member(71, 0x250, "DSElements")] public Array<Ref<MenuElementResource>> LegendOnlyLElements;
        [RTTI.Member(72, 0x260, "DSElements")] public Array<Ref<MenuElementResource>> LegendOnlyLLElements;
        [RTTI.Member(73, 0x270, "DSElements")] public Array<Ref<MenuElementResource>> LegendOnlyLLLElements;
        [RTTI.Member(75, 0x280, "DSAnimations")] public Ref<MenuAnimationResource> PartsDeactivateAnimation;
        [RTTI.Member(76, 0x288, "DSAnimations")] public Ref<MenuAnimationResource> PartsActivateAnimation;
        [RTTI.Member(78, 0x290, "DSTextures")] public Array<Ref<UITexture>> LegendLTextures;
        [RTTI.Member(79, 0x2A0, "DSTextures")] public Array<Ref<UITexture>> LegendLLTextures;
        [RTTI.Member(80, 0x2B0, "DSTextures")] public Array<Ref<UITexture>> LegendLLLTextures;
        [RTTI.Member(86, 0x2C0, "DSParameters")] public Array<Vec3> PartsShiftPosition;
        [RTTI.Member(87, 0x2D0, "DSParameters")] public Array<float> PartsShiftAlphas;
        [RTTI.Member(88, 0x2E0, "DSParameters")] public int PartsStartVertexIndex;
        [RTTI.Member(89, 0x2E4, "DSParameters")] public int PartsExtendVertexIndex;
        [RTTI.Member(90, 0x2E8, "DSParameters")] public float PartsExtendVertexValue;
        [RTTI.Member(91, 0x2EC, "DSParameters")] public float GaugeSpeedPerSec;
        [RTTI.Member(82, 0x2F8, "DSCurves")] public Ref<CurveResource> StarPartsDemo_NewParts_Position;
        [RTTI.Member(83, 0x300, "DSCurves")] public Ref<CurveResource> StarPartsDemo_NewParts_Alpha;
        [RTTI.Member(84, 0x308, "DSCurves")] public Ref<CurveResource> StarPartsDemo_Update;
        [RTTI.Member(93, 0x310, "DSSounds")] public Ref<SoundResource> GaugeLoopSound;
        [RTTI.Member(94, 0x318, "DSSounds")] public Ref<SoundResource> GaugeLvUpSound;
        [RTTI.Member(95, 0x320, "DSSounds")] public Ref<SoundResource> StarLoopSound;
        [RTTI.Member(97, 0x328, "DSBindings")] public Ref<MenuDataBinding> CurrentLevel_BridgeLink;
        [RTTI.Member(98, 0x330, "DSBindings")] public Ref<MenuDataBinding> CurrentLevel_Safety;
        [RTTI.Member(99, 0x338, "DSBindings")] public Ref<MenuDataBinding> CurrentLevel_Service;
        [RTTI.Member(100, 0x340, "DSBindings")] public Ref<MenuDataBinding> CurrentLevel_Delivery;
        [RTTI.Member(101, 0x348, "DSBindings")] public Ref<MenuDataBinding> CurrentLevel_Speed;
        [RTTI.Member(102, 0x350, "DSBindings")] public Ref<MenuDataBinding> CurrentExp_BridgeLink;
        [RTTI.Member(103, 0x358, "DSBindings")] public Ref<MenuDataBinding> CurrentExp_Safety;
        [RTTI.Member(104, 0x360, "DSBindings")] public Ref<MenuDataBinding> CurrentExp_Service;
        [RTTI.Member(105, 0x368, "DSBindings")] public Ref<MenuDataBinding> CurrentExp_Delivery;
        [RTTI.Member(106, 0x370, "DSBindings")] public Ref<MenuDataBinding> CurrentExp_Speed;
        [RTTI.Member(107, 0x378, "DSBindings")] public Ref<MenuDataBinding> NextLevel_BridgeLink;
        [RTTI.Member(108, 0x380, "DSBindings")] public Ref<MenuDataBinding> NextLevel_Safety;
        [RTTI.Member(109, 0x388, "DSBindings")] public Ref<MenuDataBinding> NextLevel_Service;
        [RTTI.Member(110, 0x390, "DSBindings")] public Ref<MenuDataBinding> NextLevel_Delivery;
        [RTTI.Member(111, 0x398, "DSBindings")] public Ref<MenuDataBinding> NextLevel_Speed;
        [RTTI.Member(112, 0x3A0, "DSBindings")] public Ref<MenuDataBinding> NextExp_BridgeLink;
        [RTTI.Member(113, 0x3A8, "DSBindings")] public Ref<MenuDataBinding> NextExp_Safety;
        [RTTI.Member(114, 0x3B0, "DSBindings")] public Ref<MenuDataBinding> NextExp_Service;
        [RTTI.Member(115, 0x3B8, "DSBindings")] public Ref<MenuDataBinding> NextExp_Delivery;
        [RTTI.Member(116, 0x3C0, "DSBindings")] public Ref<MenuDataBinding> NextExp_Speed;
        [RTTI.Member(117, 0x3C8, "DSBindings")] public Ref<MenuDataBinding> LegendCount;
        [RTTI.Member(118, 0x3D0, "DSBindings")] public Ref<MenuDataBinding> LegendOfLegendsCount;
        [RTTI.Member(119, 0x3D8, "DSBindings")] public Ref<MenuDataBinding> LegendOfLegendsOfLegendsCount;
        [RTTI.Member(120, 0x3E0, "DSBindings")] public Ref<MenuDataBinding> RequestType;
        [RTTI.Member(121, 0x3E8, "DSBindings")] public Ref<MenuDataBinding> RequestCategory;
        [RTTI.Member(122, 0x3F0, "DSBindings")] public Ref<MenuDataBinding> RequestUniqueId;
        [RTTI.Member(124, 0x410, "DSActions")] public Ref<MenuActionResource> OnRequestEndAction_StarPartsDemo;
    }

    [RTTI.Serializable(0x59542E042951CD88, GameType.DS)]
    public class DSUIStarGraphMenuTag : VisualTag
    {
    }

    [RTTI.Serializable(0xA87B7E2F3CB14364, GameType.DS)]
    public class DSUIStarGraphMenuWidget : Widget
    {
    }

    [RTTI.Serializable(0xF5A730CDF24F271D, GameType.DS)]
    public class DSUIStarGraphNickNameItem
    {
        [RTTI.Member(0, 0x0)] public StreamingRef<UITexture> Texture;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> NickName;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> DialogText;
    }

    [RTTI.Serializable(0xA0622D3B92CE3D55, GameType.DS)]
    public class DSUIStarGraphParametersResource : Resource
    {
        [RTTI.Member(3, 0x20, "Parameters")] public int32 StarPartsCompleteLv;
        [RTTI.Member(4, 0x28, "Parameters")] public Array<FRGBAColor> StarPartsColors;
        [RTTI.Member(5, 0x40, "Parameters")] public FRGBAColor StarPartsAddColor;
        [RTTI.Member(6, 0x50, "Parameters")] public FRGBAColor StarPartsAddColor_BridgeLink;
        [RTTI.Member(8, 0x60, "NickName")] public Array<DSUIStarGraphNickNameItem> NickNames;
        [RTTI.Member(10, 0x70, "SamPowerUpDialogText")] public Array<Ref<LocalizedTextResource>> BridgeLink;
        [RTTI.Member(11, 0x80, "SamPowerUpDialogText")] public Array<Ref<LocalizedTextResource>> Safety;
        [RTTI.Member(12, 0x90, "SamPowerUpDialogText")] public Array<Ref<LocalizedTextResource>> Service;
        [RTTI.Member(13, 0xA0, "SamPowerUpDialogText")] public Array<Ref<LocalizedTextResource>> Delivery;
        [RTTI.Member(14, 0xB0, "SamPowerUpDialogText")] public Array<Ref<LocalizedTextResource>> Speed;
    }

    [RTTI.Serializable(0xD2112E08064C268, GameType.DS)]
    public class DSUIStickyGunReticleHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xF368367BBBEA814F, GameType.DS)]
    public class DSUIStickyGunReticleHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(20, 0x88, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(21, 0x90, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(22, 0x98, "Animation")] public Ref<DSUIHUDAnimatorResource> ShotAnimator;
        [RTTI.Member(23, 0xA0, "Animation")] public Ref<DSUIHUDAnimatorResource> SetLockOffNearAnimator;
        [RTTI.Member(24, 0xA8, "Animation")] public Ref<DSUIHUDAnimatorResource> SetLockOffFarAnimator;
        [RTTI.Member(25, 0xB0, "Animation")] public Ref<DSUIHUDAnimatorResource> SetLockOnAnimator;
        [RTTI.Member(27, 0xB8, "Sound")] public Ref<SoundResource> AimTargetSound;
        [RTTI.Member(28, 0xC0, "Sound")] public Ref<SoundResource> MissTargetSound;
    }

    [RTTI.Serializable(0xA5515D86B59FD65B, GameType.DS)]
    public class DSUISubtitlesHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xF1C6F17CB6988039, GameType.DS)]
    public class DSUISubtitlesHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(21, 0x80, "Elements")] public Array<Ref<HUDTextResource>> TextLines;
        [RTTI.Member(22, 0x90, "Elements")] public Array<Ref<HUDTextResource>> TextLinesForWhiteFade;
        [RTTI.Member(23, 0xA0, "Elements")] public Array<Ref<HUDTextResource>> TextLinesForEnemy;
        [RTTI.Member(30, 0xB0, "Background")] public Ref<HUDElementResource> Background;
        [RTTI.Member(24, 0xB8, "Elements")] public Ref<HUDElementResource> FeedIcon;
        [RTTI.Member(26, 0xC0, "Animation")] public Ref<DSUIHUDAnimatorResource> FeedIconIntroAnimator;
        [RTTI.Member(27, 0xC8, "Animation")] public Ref<DSUIHUDAnimatorResource> FeedIconIdleAnimator;
        [RTTI.Member(28, 0xD0, "Animation")] public Ref<DSUIHUDAnimatorResource> FeedIconOutroAnimator;
        [RTTI.Member(31, 0xD8, "Background")] public ISize BackgroundMargin;
        [RTTI.Member(18, 0xE0, "DS_Logic")] public Array<DSUIHUDSubtitlesLogicNameRemapEntry> RemappedNames;
        [RTTI.Member(19, 0xF0, "DS_Logic")] public float MaxDistanceToSpeakerRatio;
        [RTTI.Member(33, 0xF8, "ColorChange")] public Array<Ref<LocalizedTextResource>> EnemyColorSpeakerNames;
        [RTTI.Member(35, 0x108, "Alpha")] public float RootElementAlphaByState_DEFAULT;
        [RTTI.Member(36, 0x10C, "Alpha")] public float RootElementAlphaByState_PAUSE;
        [RTTI.Member(38, 0x110, "Sound")] public Ref<SoundResource> SoundFeedIcon;
    }

    [RTTI.Serializable(0x2CF33C3C56CD71BD, GameType.DS)]
    public class DSUITimerHUDAnimatorSetGroupResource : CoreObject
    {
        [RTTI.Member(2, 0x28)] public Array<Ref<DSUITimerHUDAnimatorSetResource>> AnimatorSets;
    }

    [RTTI.Serializable(0xB570BD7DC035661C, GameType.DS)]
    public class DSUITimerHUDAnimatorSetResource : CoreObject
    {
        [RTTI.Member(4, 0x28, "Animator")] public Ref<DSUIHUDAnimatorResource> Intro;
        [RTTI.Member(5, 0x30, "Animator")] public Ref<DSUIHUDAnimatorResource> Idle;
        [RTTI.Member(6, 0x38, "Animator")] public Ref<DSUIHUDAnimatorResource> Outro;
        [RTTI.Member(2, 0x40)] public EDSUITimerHUDAnimeType Hash;
    }

    [RTTI.Serializable(0xDC89D61768017680, GameType.DS)]
    public class DSUITimerHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x378ED7D629FFDCC7, GameType.DS)]
    public class DSUITimerHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Root_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x88, "Logic_ResidentTimer")] public Ref<HUDElementResource> ResidentRoot;
        [RTTI.Member(20, 0x90, "Logic_ResidentTimer")] public Ref<HUDElementResource> ResidentTemplate;
        [RTTI.Member(21, 0x98, "Logic_ResidentTimer")] public Ref<HUDTextResource> ResidentPurposeText;
        [RTTI.Member(22, 0xA0, "Logic_ResidentTimer")] public Ref<HUDTextResource> ResidentPurposeBgText;
        [RTTI.Member(23, 0xA8, "Logic_ResidentTimer")] public Ref<HUDTextResource> ResidentProgressTimerText;
        [RTTI.Member(24, 0xB0, "Logic_ResidentTimer")] public Ref<HUDTextResource> ResidentProgressTimerBgText;
        [RTTI.Member(25, 0xB8, "Logic_ResidentTimer")] public int16 ResidentSlotNum;
        [RTTI.Member(26, 0xBC, "Logic_ResidentTimer")] public float ResidentDelaySeconds;
        [RTTI.Member(27, 0xC0, "Logic_ResidentTimer")] public Vec3 ResidentSlotSeparate;
        [RTTI.Member(28, 0xD0, "Logic_ResidentTimer")] public float ResidentWarningFirstRangeSeconds;
        [RTTI.Member(29, 0xD4, "Logic_ResidentTimer")] public float ResidentWarningSecondRangeSeconds;
        [RTTI.Member(59, 0xD8, "Animation_ResidentTimer")] public Ref<DSUITimerHUDAnimatorSetGroupResource> ResidentAnimeSetGroup;
        [RTTI.Member(31, 0xE0, "Logic_PopupTimer")] public Ref<HUDElementResource> PopupRoot;
        [RTTI.Member(32, 0xE8, "Logic_PopupTimer")] public Ref<HUDElementResource> PopupTemplate;
        [RTTI.Member(33, 0xF0, "Logic_PopupTimer")] public Ref<HUDTextResource> PopupPurposeText;
        [RTTI.Member(34, 0xF8, "Logic_PopupTimer")] public Ref<HUDTextResource> PopupPurposeBgText;
        [RTTI.Member(35, 0x100, "Logic_PopupTimer")] public Ref<HUDTextResource> PopupPurposeTimerText;
        [RTTI.Member(36, 0x108, "Logic_PopupTimer")] public Ref<HUDTextResource> PopupProgressTimerText;
        [RTTI.Member(37, 0x110, "Logic_PopupTimer")] public Ref<HUDTextResource> PopupProgressFlashTimerText;
        [RTTI.Member(38, 0x118, "Logic_PopupTimer")] public Ref<HUDElementResource> PopupPremiumIcon;
        [RTTI.Member(39, 0x120, "Logic_PopupTimer")] public int16 PopuptSlotNum;
        [RTTI.Member(40, 0x124, "Logic_PopupTimer")] public float PopupDelaySeconds;
        [RTTI.Member(41, 0x128, "Logic_PopupTimer")] public float PopupMaintainDisplaySeconds;
        [RTTI.Member(42, 0x130, "Logic_PopupTimer")] public Vec3 PopupSlotSeparate;
        [RTTI.Member(43, 0x140, "Logic_PopupTimer")] public float PopupWarningFirstRangeSeconds;
        [RTTI.Member(44, 0x144, "Logic_PopupTimer")] public float PopupWarningSecondRangeSeconds;
        [RTTI.Member(45, 0x148, "Logic_PopupTimer")] public float PopupSecondsEarlyWarning;
        [RTTI.Member(61, 0x150, "Animation_PopupTimer")] public Ref<DSUITimerHUDAnimatorSetGroupResource> PopupAnimeSetGroup;
        [RTTI.Member(47, 0x158, "Logic_PopupTimer")] public Ref<SoundResource> PopupTimerStartInformationBeep;
        [RTTI.Member(48, 0x160, "Logic_PopupTimer")] public Ref<SoundResource> PopupTimerStartBeep;
        [RTTI.Member(46, 0x168, "Logic_PopupTimer")] public Ref<DSUITimerHUDPopupRegularNoticeDataTable> PopupRegularNoticeDataTable;
        [RTTI.Member(50, 0x170, "Logic_HeartmanTimer")] public Ref<HUDElementResource> HeartmanTimerRoot;
        [RTTI.Member(51, 0x178, "Logic_HeartmanTimer")] public Ref<HUDElementResource> HeartmanTimerTemplate;
        [RTTI.Member(52, 0x180, "Logic_HeartmanTimer")] public Ref<HUDTextResource> HeartmanTimerPurposeText;
        [RTTI.Member(53, 0x188, "Logic_HeartmanTimer")] public Ref<HUDTextResource> HeartmanTimerPurposeBgText;
        [RTTI.Member(54, 0x190, "Logic_HeartmanTimer")] public Ref<HUDTextResource> HeartmanTimerProgressTimerText;
        [RTTI.Member(55, 0x198, "Logic_HeartmanTimer")] public Ref<HUDTextResource> HeartmanTimerProgressTimerBgText;
        [RTTI.Member(56, 0x1A0, "Logic_HeartmanTimer")] public float HeartmanWarningOfDeathRangeSeconds;
        [RTTI.Member(57, 0x1A4, "Logic_HeartmanTimer")] public float HeartmanWarningOfRevivalRangeSeconds;
        [RTTI.Member(63, 0x1A8, "Animation_HeartmanTimer")] public Ref<DSUITimerHUDAnimatorSetGroupResource> HeartmanAnimeSetGroup;
    }

    [RTTI.Serializable(0x81A99AE1A83DD39B, GameType.DS)]
    public class DSUITimerHUDOffsetTransitionAnime : DSUIHUDAnimatorSet
    {
    }

    [RTTI.Serializable(0x71BB1EDF13A870, GameType.DS)]
    public class DSUITimerHUDPopupRegularNoticeDataRecord
    {
        [RTTI.Member(0, 0x8)] public float SecondsOrLess;
        [RTTI.Member(1, 0xC)] public float NoticeInterval;
    }

    [RTTI.Serializable(0x7B086EB8E41E9FC0, GameType.DS)]
    public class DSUITimerHUDPopupRegularNoticeDataTable : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<DSUITimerHUDPopupRegularNoticeDataRecord> DataRecords;
        [RTTI.Member(3, 0x30)] public float DefaultIntervalTimeSeconds;
    }

    [RTTI.Serializable(0xCF839025CF71C85D, GameType.DS)]
    public class DSUITitleMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x10FF2FB96D1557A8, GameType.DS)]
    public class DSUITitleMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "LocalizedText")] public Ref<LocalizedTextResource> Title_Continue;
        [RTTI.Member(7, 0x30, "LocalizedText")] public Ref<LocalizedTextResource> Title_NewGame;
        [RTTI.Member(8, 0x38, "LocalizedText")] public Ref<LocalizedTextResource> Title_LoadGame;
        [RTTI.Member(9, 0x40, "LocalizedText")] public Ref<LocalizedTextResource> Title_Options;
        [RTTI.Member(10, 0x48, "LocalizedText")] public Ref<LocalizedTextResource> Title_UpdateInfo;
        [RTTI.Member(11, 0x50, "LocalizedText")] public Ref<LocalizedTextResource> Title_Credit;
        [RTTI.Member(12, 0x58, "LocalizedText")] public Ref<LocalizedTextResource> Title_ExitGame;
        [RTTI.Member(13, 0x68, "LocalizedText")] public Ref<LocalizedTextResource> Confirm_NewGame;
        [RTTI.Member(14, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> Confirm_Difficulty;
        [RTTI.Member(15, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> Confirm_AutoSave;
        [RTTI.Member(27, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> VersionTextResource;
        [RTTI.Member(16, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> DifficultySelectTitleTextResource;
        [RTTI.Member(17, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> DifficultySelectHelpTextResource;
        [RTTI.Member(18, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> DifficultyDescVeryEasyTextResource;
        [RTTI.Member(19, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> DifficultyDescEasyTextResource;
        [RTTI.Member(20, 0xB0, "LocalizedText")] public Ref<LocalizedTextResource> DifficultyDescNormalTextResource;
        [RTTI.Member(21, 0xB8, "LocalizedText")] public Ref<LocalizedTextResource> DifficultyDescHardTextResource;
        [RTTI.Member(22, 0xC0, "LocalizedText")] public Ref<LocalizedTextResource> DifficultyDescVeryHardTextResource;
        [RTTI.Member(23, 0xC8, "LocalizedText")] public Ref<LocalizedTextResource> FontSizeSelectTitleTextResource;
        [RTTI.Member(24, 0xD0, "LocalizedText")] public Ref<LocalizedTextResource> FontSizeSelectHelpTextResource;
        [RTTI.Member(25, 0xD8, "LocalizedText")] public Ref<LocalizedTextResource> FontSizeNormalTextResource;
        [RTTI.Member(26, 0xE0, "LocalizedText")] public Ref<LocalizedTextResource> FontSizeLargeTextResource;
        [RTTI.Member(29, 0xE8, "UpdateInfo")] public Ref<DSUIUpdateInfoListMediatorResource> UpdateInfoListMediatorResource;
        [RTTI.Member(30, 0xF0, "UpdateInfo")] public int DialogOpenWaitTime;
        [RTTI.Member(31, 0xF8, "UpdateInfo")] public Ref<LocalizedTextResource> UpdateInfoHelpTextResource;
    }

    [RTTI.Serializable(0x759927551697746C, GameType.DS)]
    public class DSUITitleMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0xEF899E9A6D11EACD, GameType.DS)]
    public class DSUITitleMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "Logic")] public Ref<MenuElementResource> TitleMainMenuElementResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MenuElementResource> TitleSelectMenuElementResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<MenuElementResource> DifficultyMenuElementResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuElementResource> FontSizeMenuElementResource;
        [RTTI.Member(12, 0x50, "Logic")] public Ref<MenuElementResource> TitleDialogElementResource;
        [RTTI.Member(16, 0x58, "Logic")] public Ref<MenuElementResource> OpenSourceElementResource;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<MenuElementResource> SelectListElementResource;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<MenuElementResource> GameDifficultyElementResource;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<MenuElementResource> FontSizeListElementResource;
        [RTTI.Member(11, 0x78, "Logic")] public Ref<MenuElementResource> DialogListElementResource;
        [RTTI.Member(18, 0x80, "Children")] public Ref<MenuElementResource> ConfigPanelElementResource;
        [RTTI.Member(19, 0x88, "Children")] public Ref<MenuElementResource> LoadPanelElementResource;
        [RTTI.Member(21, 0x90, "Sound")] public Ref<SoundResource> GameStartSoundResource;
        [RTTI.Member(22, 0x98, "Sound")] public Ref<SoundResource> NewGameStartSoundResource;
        [RTTI.Member(23, 0xA0, "Sound")] public Ref<SoundResource> LoadGameMenuOpenSoundResource;
        [RTTI.Member(24, 0xA8, "Sound")] public Ref<SoundResource> ConfigMenuOpenSoundResource;
        [RTTI.Member(25, 0xB0, "Sound")] public Ref<SoundResource> TitleBGMSoundResource;
        [RTTI.Member(27, 0xB8, "Animation")] public Ref<MenuAnimationResource> TitleOutroAnimationResource;
    }

    [RTTI.Serializable(0x14061A0988E9C394, GameType.DS)]
    public class DSUITopMenuListItem
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> BoxIconTexture;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> MainText;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> MainTextJP;
        [RTTI.Member(3, 0x18)] public Ref<LocalizedTextResource> HelpText;
    }

    [RTTI.Serializable(0xCF264BA16C2D6075, GameType.DS)]
    public class DSUITopMenuSubItem
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> IconTexture;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> LabelText;
    }

    [RTTI.Serializable(0xD6F52EC6E0E09A1, GameType.DS)]
    public class DSUITutorialTelopContentGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "Table")] public Array<Ref<DSUITutorialTelopContentResource>> Contents;
    }

    [RTTI.Serializable(0x29F444BF68175D23, GameType.DS)]
    public class DSUITutorialTelopContentResource : Resource
    {
        [RTTI.Member(3, 0x20, "Table")] public uint32 TutorialId;
        [RTTI.Member(4, 0x28, "Table")] public Ref<LocalizedTextResource> TitleText;
        [RTTI.Member(5, 0x30, "Table")] public Ref<LocalizedTextResource> BodyText;
        [RTTI.Member(6, 0x38, "Table")] public Ref<LocalizedTextResource> DescriptionText;
        [RTTI.Member(7, 0x40, "Table")] public Ref<BooleanFact> TipsReleaseFact;
    }

    [RTTI.Serializable(0x421B88DB4CD85B29, GameType.DS)]
    public class DSUITutorialTelopSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xAB271BABC31279AD, GameType.DS)]
    public class DSUITutorialTelopSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<DSTelopTipsResource> TelopTipsResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<BooleanFact> IsReadFact;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<BooleanFact> DisplaySecResetFact;
        [RTTI.Member(11, 0x48, "Logic")] public EDSUITelopDisplayPriorityType PriorityType;
        [RTTI.Member(12, 0x4C, "Logic")] public uint32 PriorityWeight;
        [RTTI.Member(13, 0x50, "Logic")] public bool IsRecover;
        [RTTI.Member(14, 0x51, "Logic")] public bool IsInfiniteRecover;
        [RTTI.Member(15, 0x52, "Logic")] public bool CanShowDuringRealTimeRadio;
        [RTTI.Member(16, 0x53, "Logic")] public bool CanShowDuringMissionTelop;
        [RTTI.Member(17, 0x54, "Logic")] public bool CanShowDuringKnotSpaceState;
        [RTTI.Member(18, 0x55, "Logic")] public bool CanShowDuringLookingBBState;
    }

    [RTTI.Serializable(0xDBD9ADB457DD7C79, GameType.DS)]
    public class DSUIUniformCustomizeColor
    {
        [RTTI.Member(0, 0x0)] public uint16 ShaderColorIndex;
        [RTTI.Member(1, 0x4)] public RGBAColor PaletteColor;
        [RTTI.Member(2, 0x8)] public Ref<LocalizedTextResource> ColorNameText;
        [RTTI.Member(3, 0x10)] public Ref<BooleanFact> IsColorOpenedFact;
        [RTTI.Member(4, 0x18)] public bool IsDefault;
        [RTTI.Member(5, 0x19)] public bool IsTransparent;
    }

    [RTTI.Serializable(0xDF7E4B54A4012014, GameType.DS)]
    public class DSUIUniformCustomizeColorListResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<DSUIUniformCustomizeColor> ListItems;
    }

    [RTTI.Serializable(0x2755629738967ABB, GameType.DS)]
    public class DSUIUniformCustomizeResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DSUIUniformCustomizeColorListResource> CapColorList;
        [RTTI.Member(3, 0x28)] public Ref<DSUIUniformCustomizeColorListResource> GlassesAColorList;
        [RTTI.Member(4, 0x30)] public Ref<DSUIUniformCustomizeColorListResource> GlassesBColorList;
        [RTTI.Member(5, 0x38)] public Ref<DSUIUniformCustomizeColorListResource> GlassesALensColorList;
        [RTTI.Member(6, 0x40)] public Ref<DSUIUniformCustomizeColorListResource> GlassesBLensColorList;
        [RTTI.Member(7, 0x48)] public Ref<DSUIUniformCustomizeColorListResource> SuitsColorList;
    }

    [RTTI.Serializable(0x2229AA4771ADDEE, GameType.DS)]
    public class DSUIUniformMenuDataSource : DataSource
    {
    }

    [RTTI.Serializable(0x7A161655526D1F11, GameType.DS)]
    public class DSUIUniformMenuDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Parameters")] public uint8 UniformListItemCount;
        [RTTI.Member(8, 0x30, "UniformListItem")] public DSUIUniformMenuListItem Cap;
        [RTTI.Member(9, 0x40, "UniformListItem")] public DSUIUniformMenuListItem GlassesA;
        [RTTI.Member(10, 0x50, "UniformListItem")] public DSUIUniformMenuListItem GlassesB;
        [RTTI.Member(11, 0x60, "UniformListItem")] public DSUIUniformMenuListItem Suits;
        [RTTI.Member(13, 0x70, "LocalizedText")] public Ref<LocalizedTextResource> CapColorPaletteHeadline;
        [RTTI.Member(14, 0x78, "LocalizedText")] public Ref<LocalizedTextResource> GlassesAColorPaletteHeadline;
        [RTTI.Member(15, 0x80, "LocalizedText")] public Ref<LocalizedTextResource> GlassesBColorPaletteHeadline;
        [RTTI.Member(18, 0x88, "LocalizedText")] public Ref<LocalizedTextResource> SuitsColorPaletteHeadline;
        [RTTI.Member(16, 0x90, "LocalizedText")] public Ref<LocalizedTextResource> GlassesALensColorPaletteHeadline;
        [RTTI.Member(17, 0x98, "LocalizedText")] public Ref<LocalizedTextResource> GlassesBLensColorPaletteHeadline;
        [RTTI.Member(19, 0xA0, "LocalizedText")] public Ref<LocalizedTextResource> CancelCloseMenu;
        [RTTI.Member(20, 0xA8, "LocalizedText")] public Ref<LocalizedTextResource> CancelCloseColorPalette;
    }

    [RTTI.Serializable(0x625A314BE066FC7E, GameType.DS)]
    public class DSUIUniformMenuFunction : DSUIMenuFunctionTag
    {
    }

    [RTTI.Serializable(0x3CA167BDFC45F670, GameType.DS)]
    public class DSUIUniformMenuFunctionResource : MenuFunctionResource
    {
        [RTTI.Member(7, 0x30, "PanelElements")] public Ref<MenuElementResource> AcceptButton;
        [RTTI.Member(8, 0x38, "PanelElements")] public Ref<MenuElementResource> ColorPalette;
        [RTTI.Member(9, 0x40, "PanelElements")] public Ref<MenuElementResource> ColorPaletteAcceptButton;
        [RTTI.Member(10, 0x48, "PanelElements")] public Ref<MenuElementResource> ConfirmDialog;
        [RTTI.Member(12, 0x50, "ListElements")] public Ref<MenuElementResource> UniformList;
        [RTTI.Member(13, 0x58, "ListElements")] public Ref<MenuElementResource> ColorPaletteList;
        [RTTI.Member(14, 0x60, "ListElements")] public Ref<MenuElementResource> ColorList;
        [RTTI.Member(16, 0x68, "TextureElements")] public Ref<MenuElementResource> UniformListPrimaryColorIcon;
        [RTTI.Member(17, 0x70, "TextureElements")] public Ref<MenuElementResource> UniformListPrimaryColorIconBG;
        [RTTI.Member(18, 0x78, "TextureElements")] public Ref<MenuElementResource> UniformListSecondaryColorIcon;
        [RTTI.Member(19, 0x80, "TextureElements")] public Ref<MenuElementResource> UniformListSecondaryColorIconBG;
        [RTTI.Member(20, 0x88, "TextureElements")] public Ref<MenuElementResource> ColorListColorIcon;
    }

    [RTTI.Serializable(0xEE09DCA3117A7CF6, GameType.DS)]
    public class DSUIUniformMenuListItem
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> IconTexture;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> NameLocalizedText;
    }

    [RTTI.Serializable(0x4C83B4471C157715, GameType.DS)]
    public class DSUIUpdateInfoListMediatorResource : Resource
    {
        [RTTI.Member(3, 0x20, "UpdateInfoList")] public Ref<DSUIUpdateInfoListResource> UpdateInfoResourceList;
    }

    [RTTI.Serializable(0xDE662E5A47EE7728, GameType.DS)]
    public class DSUIUpdateInfoListResource : Resource
    {
        [RTTI.Member(3, 0x20, "ListItems")] public Array<Ref<DSUIUpdateInfoResource>> UpdateInfoResourceList;
    }

    [RTTI.Serializable(0x73F6829F2D441D79, GameType.DS)]
    public class DSUIUpdateInfoResource : Resource
    {
        [RTTI.Member(3, 0x20, "LocalizedText")] public Ref<LocalizedTextResource> UpdateInfoTextResource;
        [RTTI.Member(5, 0x28, "Param")] public int UpdateInfoShowIndex;
        [RTTI.Member(6, 0x2C, "Param")] public bool IsNewResource;
    }

    [RTTI.Serializable(0xEB6B9675C6E3B955, GameType.DS)]
    public class DSUIVehicleCustomizeColor
    {
        [RTTI.Member(0, 0x0)] public uint16 ShaderColorIndex;
        [RTTI.Member(1, 0x4)] public RGBAColor PaletteColor;
        [RTTI.Member(2, 0x8)] public Ref<LocalizedTextResource> ColorNameText;
        [RTTI.Member(3, 0x10)] public Ref<BooleanFact> IsColorOpenedFact;
        [RTTI.Member(4, 0x18)] public bool IsPrimaryOnly;
        [RTTI.Member(5, 0x19)] public bool IsPrimaryDefault;
        [RTTI.Member(6, 0x1A)] public bool IsSecondaryDefault;
    }

    [RTTI.Serializable(0x82DE4C3BEEC7DB57, GameType.DS)]
    public class DSUIVehicleCustomizeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Fact")] public Ref<BooleanFact> IsColorChangeOpenedFact;
        [RTTI.Member(4, 0x28, "Fact")] public Ref<BooleanFact> IsTwoToneColorOpenedFact;
        [RTTI.Member(6, 0x30, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_SNOW_WHITE;
        [RTTI.Member(7, 0x50, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_WOLF_GRAY;
        [RTTI.Member(8, 0x70, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_OLIVE_DRAB;
        [RTTI.Member(9, 0x90, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_STEALTH_BLACK;
        [RTTI.Member(10, 0xB0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_MARS_RED;
        [RTTI.Member(11, 0xD0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_EMERGENCY_YELLOW;
        [RTTI.Member(12, 0xF0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_GRASS_GREEN;
        [RTTI.Member(13, 0x110, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_COOL_BLUE;
        [RTTI.Member(14, 0x130, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_EXPRESS_PURPLE;
        [RTTI.Member(15, 0x150, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_DESSERT_PINK;
        [RTTI.Member(16, 0x170, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_COYOTE_BROWN;
        [RTTI.Member(17, 0x190, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_DESERT_TAN;
        [RTTI.Member(18, 0x1B0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_BRIDGES_ORANGE;
        [RTTI.Member(19, 0x1D0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_NAVY_BLUE;
        [RTTI.Member(20, 0x1F0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_BLOOD_RED;
        [RTTI.Member(21, 0x210, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_VOLCANO_ORANGE;
        [RTTI.Member(22, 0x230, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_BRIGHT_YELLOW;
        [RTTI.Member(23, 0x250, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_GHOST_GREEN;
        [RTTI.Member(24, 0x270, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_SIGNAL_GREEN;
        [RTTI.Member(25, 0x290, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_LIGHTNING_BLUE;
        [RTTI.Member(26, 0x2B0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_RAINBOW_PURPLE;
        [RTTI.Member(27, 0x2D0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_ROSE_PINK;
        [RTTI.Member(28, 0x2F0, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_ALL_REFLECTOR;
        [RTTI.Member(29, 0x310, "CustomizeColor")] public DSUIVehicleCustomizeColor CustomizeColor_CHIRAL_GOLD;
    }

    [RTTI.Serializable(0x14E0B0ED27C97D60, GameType.DS)]
    public class DSUIVertexSlider
    {
        [RTTI.Member(0, 0x0)] public IVec2 OffsetPosition;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> HorizontalSlideAmountCurve;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> VerticalSlideAmountCurve;
    }

    [RTTI.Serializable(0xB1BC678EEE56074E, GameType.DS)]
    public class DSUIVirtualButtonIconResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EDSVirtualButton VirtualButton;
        [RTTI.Member(3, 0x28)] public Ref<DSUIInputIconResource> KeyboardInputIcon_QWERTY;
        [RTTI.Member(4, 0x30)] public Ref<DSUIInputIconResource> KeyboardInputIcon_AZERTY;
        [RTTI.Member(5, 0x38)] public Ref<DSUIInputIconResource> GamepadInputIcon_Default;
        [RTTI.Member(6, 0x40)] public Ref<DSUIInputIconResource> GamepadInputIcon_TypeA;
        [RTTI.Member(7, 0x48)] public Ref<DSUIInputIconResource> GamepadInputIcon_TypeB;
        [RTTI.Member(8, 0x50)] public Ref<DSUIInputIconResource> GamepadInputIcon_TypeC;
    }

    [RTTI.Serializable(0xF597A06E90DB54, GameType.DS)]
    public class DSUIWatchTowerHUDEffectivenessBinding : CoreObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool Intro;
        [RTTI.Member(4, 0x21, "Logic")] public bool Idle;
        [RTTI.Member(5, 0x22, "Logic")] public bool Outro;
        [RTTI.Member(6, 0x23, "Logic")] public bool ForceOutro;
        [RTTI.Member(7, 0x28, "Logic")] public Ref<HUDElementResource> Target;
    }

    [RTTI.Serializable(0xA9E16B2003B1AF42, GameType.DS)]
    public class DSUIWatchTowerHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0x373DB281A7E4CACC, GameType.DS)]
    public class DSUIWatchTowerHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Root_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(19, 0x80, "Logic_SamHud")] public Ref<HUDTextResource> SamHudCoordinateText;
        [RTTI.Member(20, 0x88, "Logic_SamHud")] public Ref<HUDTextResource> SamHudTimecodeText;
        [RTTI.Member(21, 0x90, "Logic_SamHud")] public Ref<HUDElementResource> SamHudCameraShakeTargetElement;
        [RTTI.Member(23, 0x98, "Logic_CameraHud")] public float AimScreenHorizontalMovement;
        [RTTI.Member(24, 0x9C, "Logic_CameraHud")] public float AimScreenVerticalMovement;
        [RTTI.Member(25, 0xA0, "Logic_CameraHud")] public float AimRotationMaxX;
        [RTTI.Member(26, 0xA4, "Logic_CameraHud")] public float AimRotationMaxY;
        [RTTI.Member(27, 0xA8, "Logic_CameraHud")] public Array<Ref<DSUIWatchTowerHUDSnowNoiseFlickerInfoResource>> SnowNoiseFlickerInfos;
        [RTTI.Member(29, 0xB8, "Animator")] public Ref<DSUIHUDWatchTowerAnimeSetGroupResource> AnimatorSetGroup;
        [RTTI.Member(31, 0xC0, "Effectiveness")] public Array<Ref<DSUIWatchTowerHUDEffectivenessBinding>> BindingEffectiveness;
        [RTTI.Member(33, 0xD0, "Sound")] public Ref<SoundResource> WatchtowerHudLpSound;
        [RTTI.Member(34, 0xD8, "Sound")] public Ref<SoundResource> WatchtowerPowerUpBootScreenSound;
        [RTTI.Member(35, 0xE0, "Sound")] public Ref<SoundResource> WatchtowerPowerDownDeactivateSound;
    }

    [RTTI.Serializable(0x702FE591E6E52125, GameType.DS)]
    public class DSUIWatchTowerHUDSnowNoiseFlickerInfoResource : CoreObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public float StartHeight;
        [RTTI.Member(4, 0x24, "Logic")] public float EndHeight;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<HUDElementResource> HideTargetElement;
        [RTTI.Member(7, 0x30, "Logic")] public Ref<CurveResource> HeightAlpha;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<DSUIHUDAnimatorSetResource> HideAnimeSet;
    }

    [RTTI.Serializable(0xC050410F46EB2116, GameType.DS)]
    public class DSUIWeaponSelectorHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xED47A22DA7C55AA2, GameType.DS)]
    public class DSUIWeaponSelectorHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Elements")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Elements")] public Ref<HUDElementResource> RootKeyHelpElement;
        [RTTI.Member(19, 0x88, "DS_Elements")] public Ref<HUDElementResource> DivisionTemplateElement;
        [RTTI.Member(21, 0x90, "DS_PageRoot_Elements")] public Ref<HUDElementResource> RootExceptBGElement;
        [RTTI.Member(22, 0x98, "DS_PageRoot_Elements")] public Ref<HUDElementResource> CircleCenterDummyElement;
        [RTTI.Member(23, 0xA0, "DS_PageRoot_Elements")] public Ref<HUDElementResource> PageTemplateElement;
        [RTTI.Member(24, 0xA8, "DS_PageRoot_Elements")] public Ref<HUDImageResource> RingCursorImageElement;
        [RTTI.Member(26, 0xB0, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemTemplateElement;
        [RTTI.Member(27, 0xB8, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemCardElement;
        [RTTI.Member(28, 0xC0, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemCursorDefElement;
        [RTTI.Member(29, 0xC8, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemCursorDisabledElement;
        [RTTI.Member(30, 0xD0, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemInternalRotElement;
        [RTTI.Member(31, 0xD8, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemInternalRot2Element;
        [RTTI.Member(32, 0xE0, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemParticleRootElement;
        [RTTI.Member(33, 0xE8, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemEquippedElement;
        [RTTI.Member(34, 0xF0, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemDriveElement;
        [RTTI.Member(35, 0xF8, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SelectItemCardImageElement;
        [RTTI.Member(36, 0x100, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SelectItemCardActiveImageElement;
        [RTTI.Member(37, 0x108, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SelectItemMainImageElement;
        [RTTI.Member(38, 0x110, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SelectItemOutlineImageElement;
        [RTTI.Member(39, 0x118, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SelectItemOutlineActiveImageElement;
        [RTTI.Member(40, 0x120, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SelectItemDotImageElement;
        [RTTI.Member(41, 0x128, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemKeyHelpRootElement;
        [RTTI.Member(42, 0x130, "DS_SelectItem_Elements")] public Ref<HUDElementResource> KeyHelpRightTemplateElement;
        [RTTI.Member(43, 0x138, "DS_SelectItem_Elements")] public Ref<HUDElementResource> KeyHelpRightIconElement;
        [RTTI.Member(44, 0x140, "DS_SelectItem_Elements")] public Ref<HUDTextResource> KeyHelpRightTextElement;
        [RTTI.Member(45, 0x148, "DS_SelectItem_Elements")] public Ref<HUDElementResource> KeyHelpIconTemplateElement;
        [RTTI.Member(46, 0x150, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemRightSlotElement;
        [RTTI.Member(47, 0x158, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SlotRightIconElement;
        [RTTI.Member(48, 0x160, "DS_SelectItem_Elements")] public Ref<HUDTextResource> SlotRightTextElement;
        [RTTI.Member(49, 0x168, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemLeftSlotElement;
        [RTTI.Member(50, 0x170, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SlotLeftIconElement;
        [RTTI.Member(51, 0x178, "DS_SelectItem_Elements")] public Ref<HUDTextResource> SlotLeftTextElement;
        [RTTI.Member(52, 0x180, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemBulletIconsRootElement;
        [RTTI.Member(53, 0x188, "DS_SelectItem_Elements")] public Ref<HUDElementResource> SelectItemBulletIconTemplateElement;
        [RTTI.Member(54, 0x190, "DS_SelectItem_Elements")] public Ref<HUDImageResource> SelectItemBulletIconImageElement;
        [RTTI.Member(56, 0x198, "DS_Center_Elements")] public Ref<HUDElementResource> CenterRootElement;
        [RTTI.Member(57, 0x1A0, "DS_Center_Elements")] public Ref<HUDElementResource> CenterUnequipElement;
        [RTTI.Member(58, 0x1A8, "DS_Center_Elements")] public Ref<HUDTextResource> CenterText1Element;
        [RTTI.Member(59, 0x1B0, "DS_Center_Elements")] public Ref<HUDTextResource> CenterText2Element;
        [RTTI.Member(60, 0x1B8, "DS_Center_Elements")] public Ref<HUDTextResource> CenterText3Element;
        [RTTI.Member(61, 0x1C0, "DS_Center_Elements")] public Ref<HUDElementResource> CenterImageRootElement;
        [RTTI.Member(62, 0x1C8, "DS_Center_Elements")] public Ref<HUDImageResource> CenterImageElement;
        [RTTI.Member(63, 0x1D0, "DS_Center_Elements")] public Ref<HUDImageResource> CenterImageBackElement;
        [RTTI.Member(64, 0x1D8, "DS_Center_Elements")] public Ref<HUDImageResource> CenterConstructionPointNumElement;
        [RTTI.Member(65, 0x1E0, "DS_Center_Elements")] public Ref<HUDImageResource> CenterBatteryIconImageElement;
        [RTTI.Member(66, 0x1E8, "DS_Center_Elements")] public Ref<HUDElementResource> CenterBulletChangeKeyHelpRootElement;
        [RTTI.Member(67, 0x1F0, "DS_Center_Elements")] public Ref<HUDElementResource> CenterBulletChangeKeyHelpIconElement;
        [RTTI.Member(68, 0x1F8, "DS_Center_Elements")] public Ref<HUDTextResource> CenterBulletChangeKeyHelpTextElement;
        [RTTI.Member(69, 0x200, "DS_Center_Elements")] public Ref<HUDImageResource> MainBgImageElement;
        [RTTI.Member(70, 0x208, "DS_Center_Elements")] public Ref<HUDImageResource> MainLine1ImageElement;
        [RTTI.Member(71, 0x210, "DS_Center_Elements")] public Ref<HUDImageResource> MainLine2ImageElement;
        [RTTI.Member(72, 0x218, "DS_Center_Elements")] public Ref<HUDImageResource> MainLine3ImageElement;
        [RTTI.Member(73, 0x220, "DS_Center_Elements")] public Ref<HUDImageResource> MainLine4ImageElement;
        [RTTI.Member(74, 0x228, "DS_Center_Elements")] public Ref<HUDImageResource> MainLine5ImageElement;
        [RTTI.Member(75, 0x230, "DS_Center_Elements")] public Ref<HUDImageResource> MainLineBold1ImageElement;
        [RTTI.Member(76, 0x238, "DS_Center_Elements")] public Ref<HUDImageResource> MainLineBold2ImageElement;
        [RTTI.Member(77, 0x240, "DS_Center_Elements")] public Ref<HUDImageResource> MainLineBold3ImageElement;
        [RTTI.Member(78, 0x248, "DS_Center_Elements")] public Ref<HUDImageResource> MainLineBold4ImageElement;
        [RTTI.Member(79, 0x250, "DS_Center_Elements")] public Ref<HUDImageResource> MainLineBold5ImageElement;
        [RTTI.Member(81, 0x258, "DS_Center_BulletIcon_Elements")] public Ref<HUDElementResource> BulletIconRootElement;
        [RTTI.Member(82, 0x260, "DS_Center_BulletIcon_Elements")] public Ref<HUDElementResource> BulletIconRectRootElement;
        [RTTI.Member(83, 0x268, "DS_Center_BulletIcon_Elements")] public Ref<HUDElementResource> BulletIconTemplateElement;
        [RTTI.Member(84, 0x270, "DS_Center_BulletIcon_Elements")] public Ref<HUDImageResource> BulletIconImageElement;
        [RTTI.Member(85, 0x278, "DS_Center_BulletIcon_Elements")] public Ref<HUDElementResource> BulletIconSelectedElement;
        [RTTI.Member(86, 0x280, "DS_Center_BulletIcon_Elements")] public Ref<HUDTextResource> BulletCategoryTextElement;
        [RTTI.Member(88, 0x288, "DS_KeyHelp_Elements")] public Ref<HUDElementResource> ItemSelectKeyHelpIconElement;
        [RTTI.Member(89, 0x290, "DS_KeyHelp_Elements")] public Ref<HUDElementResource> PageChangeKeyHelpIconElement;
        [RTTI.Member(90, 0x298, "DS_KeyHelp_Elements")] public Ref<HUDTextResource> KeyHelpCountTextElement;
        [RTTI.Member(91, 0x2A0, "DS_KeyHelp_Elements")] public Ref<HUDTextResource> KeyHelpCountBgTextElement;
        [RTTI.Member(93, 0x2A8, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(94, 0x2B0, "Animation")] public Ref<DSUIHUDAnimatorResource> Has2PageIntroAnimator;
        [RTTI.Member(95, 0x2B8, "Animation")] public Ref<DSUIHUDAnimatorResource> Has3PageIntroAnimator;
        [RTTI.Member(96, 0x2C0, "Animation")] public Ref<DSUIHUDAnimatorResource> PageIntroAnimator;
        [RTTI.Member(97, 0x2C8, "Animation")] public Ref<DSUIHUDAnimatorResource> PageOutroAnimator;
        [RTTI.Member(98, 0x2D0, "Animation")] public Ref<DSUIHUDAnimatorResource> PageChangeInAnimator;
        [RTTI.Member(99, 0x2D8, "Animation")] public Ref<DSUIHUDAnimatorResource> PageChangeOutAnimator;
        [RTTI.Member(100, 0x2E0, "Animation")] public Ref<DSUIHUDAnimatorResource> DivisionIntroAnimator;
        [RTTI.Member(101, 0x2E8, "Animation")] public Ref<DSUIHUDAnimatorResource> DivisionOutroAnimator;
        [RTTI.Member(102, 0x2F0, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemIntroAnimator;
        [RTTI.Member(103, 0x2F8, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemActivateAnimator;
        [RTTI.Member(104, 0x300, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemDeactivateAnimator;
        [RTTI.Member(105, 0x308, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemLoopAnimator;
        [RTTI.Member(106, 0x310, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemParticleIntroAnimator;
        [RTTI.Member(107, 0x318, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemEquippedLoopAnimator;
        [RTTI.Member(108, 0x320, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemDriveLoopAnimator;
        [RTTI.Member(109, 0x328, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemIntroAvailableAnimator;
        [RTTI.Member(110, 0x330, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemIntroNotAvailableAnimator;
        [RTTI.Member(111, 0x338, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemIntroBrokenAnimator;
        [RTTI.Member(112, 0x340, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemIntroReloadableAnimator;
        [RTTI.Member(113, 0x348, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemCommandDecideAnimator;
        [RTTI.Member(114, 0x350, "Animation")] public Ref<DSUIHUDAnimatorResource> SelectItemEquipAnimator;
        [RTTI.Member(115, 0x358, "Animation")] public Ref<DSUIHUDAnimatorResource> CenterPanelRefreshAnimator;
        [RTTI.Member(116, 0x360, "Animation")] public Ref<DSUIHUDAnimatorResource> CenterPanelIdleAnimator;
        [RTTI.Member(117, 0x368, "Animation")] public Ref<DSUIHUDAnimatorResource> CenterPanelIntroAvailableAnimator;
        [RTTI.Member(118, 0x370, "Animation")] public Ref<DSUIHUDAnimatorResource> CenterPanelIntroNotAvailableAnimator;
        [RTTI.Member(119, 0x378, "Animation")] public Ref<DSUIHUDAnimatorResource> CenterPanelIntroBrokenAnimator;
        [RTTI.Member(120, 0x380, "Animation")] public Ref<DSUIHUDAnimatorResource> CenterPanelIntroReloadableAnimator;
        [RTTI.Member(121, 0x388, "Animation")] public Ref<DSUIHUDAnimatorResource> KeyHelpIconAnimator;
        [RTTI.Member(122, 0x390, "Animation")] public Ref<DSUIHUDAnimatorResource> KeyHelpIconDecideAnimator;
        [RTTI.Member(124, 0x398, "Texture")] public Ref<UITexture> BatteryEmptyIconTexture;
        [RTTI.Member(125, 0x3A0, "Texture")] public Ref<UITexture> BatteryDefIconTexture;
        [RTTI.Member(126, 0x3A8, "Texture")] public Ref<UITexture> BatteryRechargeIconTexture;
        [RTTI.Member(128, 0x3B0, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_Equiped;
        [RTTI.Member(129, 0x3B8, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_StoringToUtilityPouch;
        [RTTI.Member(130, 0x3C0, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_StoringToGrenadePouch;
        [RTTI.Member(131, 0x3C8, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_Reload;
        [RTTI.Member(132, 0x3D0, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_Startup;
        [RTTI.Member(133, 0x3D8, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_Shutdown;
        [RTTI.Member(134, 0x3E0, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_Store;
        [RTTI.Member(135, 0x3E8, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_ChangeShoes;
        [RTTI.Member(136, 0x3F0, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_CamouflageHolo;
        [RTTI.Member(137, 0x3F8, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_CancelHolo;
        [RTTI.Member(138, 0x400, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_HangOnBoots;
        [RTTI.Member(139, 0x408, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_DrinkWater;
        [RTTI.Member(140, 0x410, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_EquipBloodPack;
        [RTTI.Member(141, 0x418, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_Eat;
        [RTTI.Member(142, 0x420, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_HoldOnLeftHand;
        [RTTI.Member(143, 0x428, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_HoldOnRightHand;
        [RTTI.Member(144, 0x430, "CommandText")] public Ref<LocalizedTextResource> CommandLabelText_PutOnGround;
        [RTTI.Member(145, 0x438, "CommandText")] public Ref<LocalizedTextResource> CommandUrinationPriparationText;
        [RTTI.Member(147, 0x440, "Timming")] public int Division1IntroStartFrame;
        [RTTI.Member(148, 0x444, "Timming")] public int Division2IntroStartFrame;
        [RTTI.Member(149, 0x448, "Timming")] public int Division3IntroStartFrame;
        [RTTI.Member(150, 0x44C, "Timming")] public int SelectItem1IntroStartFrame;
        [RTTI.Member(151, 0x450, "Timming")] public int SelectItem2IntroStartFrame;
        [RTTI.Member(152, 0x454, "Timming")] public int SelectItem3IntroStartFrame;
        [RTTI.Member(153, 0x458, "Timming")] public int SelectItemParticle1IntroStartFrame;
        [RTTI.Member(154, 0x45C, "Timming")] public int SelectItemParticle2IntroStartFrame;
        [RTTI.Member(155, 0x460, "Timming")] public int SelectItemParticle3IntroStartFrame;
        [RTTI.Member(156, 0x464, "Timming")] public int CenterPanelRefreshStartFrame;
        [RTTI.Member(158, 0x468, "EtcParameter")] public Array<float> NoneItemDegrees;
        [RTTI.Member(159, 0x478, "EtcParameter")] public float KeyHelpIconMargin;
        [RTTI.Member(160, 0x47C, "EtcParameter")] public float KeyHelpIconDisabledAlpha;
        [RTTI.Member(161, 0x480, "EtcParameter")] public float CenterBulletIconMargin;
        [RTTI.Member(162, 0x484, "EtcParameter")] public float SelectItemBulletIconMargin;
        [RTTI.Member(163, 0x488, "EtcParameter")] public float BulletIconOffsetY;
        [RTTI.Member(164, 0x48C, "EtcParameter")] public float HoldStartDelaySec;
        [RTTI.Member(166, 0x490, "Sound")] public Ref<SoundResource> OpenSound;
        [RTTI.Member(167, 0x498, "Sound")] public Ref<SoundResource> CloseSound;
        [RTTI.Member(168, 0x4A0, "Sound")] public Ref<SoundResource> PageChangeSound;
        [RTTI.Member(169, 0x4A8, "Sound")] public Ref<SoundResource> FocusSound;
        [RTTI.Member(170, 0x4B0, "Sound")] public Ref<SoundResource> FocusNoneSound;
        [RTTI.Member(171, 0x4B8, "Sound")] public Ref<SoundResource> EquipSignalSound;
        [RTTI.Member(172, 0x4C0, "Sound")] public Ref<SoundResource> EquipDoneSound;
        [RTTI.Member(173, 0x4C8, "Sound")] public Ref<SoundResource> ItemUseDoneSound;
        [RTTI.Member(174, 0x4D0, "Sound")] public Ref<SoundResource> DisabledCommandSound;
        [RTTI.Member(175, 0x4D8, "Sound")] public Ref<SoundResource> SamCapPutOnSound;
        [RTTI.Member(176, 0x4E0, "Sound")] public Ref<SoundResource> SamCapPutOffSound;
        [RTTI.Member(177, 0x4E8, "Sound")] public Ref<SoundResource> SamSunglassesAPutOnSound;
        [RTTI.Member(178, 0x4F0, "Sound")] public Ref<SoundResource> SamSunglassesATakeOffSound;
        [RTTI.Member(179, 0x4F8, "Sound")] public Ref<SoundResource> SamSunglassesBPutOnSound;
        [RTTI.Member(180, 0x500, "Sound")] public Ref<SoundResource> SamSunglassesBTakeOffSound;
        [RTTI.Member(181, 0x508, "Sound")] public Ref<SoundResource> BulletSound_StandardBullet;
        [RTTI.Member(182, 0x510, "Sound")] public Ref<SoundResource> BulletSound_BloodBullet;
        [RTTI.Member(183, 0x518, "Sound")] public Ref<SoundResource> BulletSound_ChiralBullet;
        [RTTI.Member(184, 0x520, "Sound")] public Ref<SoundResource> BulletSound_FragBullet;
        [RTTI.Member(185, 0x528, "Sound")] public Ref<SoundResource> BulletSound_SlipBullet;
        [RTTI.Member(186, 0x530, "Sound")] public Ref<SoundResource> BulletSound_SleepBullet;
        [RTTI.Member(187, 0x538, "Sound")] public Ref<SoundResource> BulletSound_StanBullet;
        [RTTI.Member(189, 0x548, "RingCursor")] public Ref<CurveResource> RingCursorExpanderCurve;
        [RTTI.Member(190, 0x550, "RingCursor")] public float RingCursorDistance;
        [RTTI.Member(192, 0x560, "BulletColor")] public FRGBAColor BulletIconActiveColor;
        [RTTI.Member(193, 0x570, "BulletColor")] public FRGBAColor BulletIconDeactiveColor;
        [RTTI.Member(194, 0x580, "BulletColor")] public FRGBAColor SelectItemBulletIconActiveColor;
        [RTTI.Member(195, 0x590, "BulletColor")] public FRGBAColor SelectItemBulletIconDeactiveColor;
        [RTTI.Member(197, 0x5A0, "ImageColor")] public DSUIWeaponSelectorImageColorInfo RedImageColorInfo;
        [RTTI.Member(198, 0x600, "ImageColor")] public DSUIWeaponSelectorImageColorInfo YellowImageColorInfo;
        [RTTI.Member(199, 0x660, "ImageColor")] public DSUIWeaponSelectorImageColorInfo BlueImageColorInfo;
        [RTTI.Member(200, 0x6C0, "ImageColor")] public DSUIWeaponSelectorImageColorInfo GrayImageColorInfo;
        [RTTI.Member(201, 0x720, "ImageColor")] public DSUIWeaponSelectorImageColorInfo OrangeImageColorInfo;
        [RTTI.Member(202, 0x780, "ImageColor")] public DSUIWeaponSelectorImageColorInfo PurpleImageColorInfo;
        [RTTI.Member(203, 0x7E0, "ImageColor")] public Ref<CurveResource> MainBgColorChangeCurve;
        [RTTI.Member(204, 0x7E8, "ImageColor")] public Ref<CurveResource> MainLineColorChangeCurve;
        [RTTI.Member(205, 0x7F0, "ImageColor")] public Ref<CurveResource> MainLineBoldColorChangeCurve;
        [RTTI.Member(207, 0x7F8, "Parameters")] public float CommandPressAndHoldDecisionSec;
    }

    [RTTI.Serializable(0x460498515A244016, GameType.DS)]
    public class DSUIWeaponSelectorImageColorInfo
    {
        [RTTI.Member(0, 0x0)] public FRGBAColor MainBGColor;
        [RTTI.Member(1, 0x10)] public FRGBAColor MainLineColor;
        [RTTI.Member(2, 0x20)] public FRGBAColor MainLineBoldColor;
        [RTTI.Member(3, 0x30)] public FRGBAColor SelectIconFillColor;
        [RTTI.Member(4, 0x40)] public FRGBAColor SelectIconLineColor;
        [RTTI.Member(5, 0x50)] public FRGBAColor SelectDotColor;
    }

    [RTTI.Serializable(0x6B54A61954FA07B0, GameType.DS)]
    public class DSUIWeaponSelectorTutorialSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA38EA1E50BF9DB48, GameType.DS)]
    public class DSUIWeaponSelectorTutorialSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDSUIWeaponSelectorTutorialEventType EventType;
    }

    [RTTI.Serializable(0xDE63E91BD5A85A25, GameType.DS)]
    public class DSUIWeightHUDLogic : DSUIHUDLogicBase
    {
    }

    [RTTI.Serializable(0xF50B7A46D11E4F97, GameType.DS)]
    public class DSUIWeightHUDLogicResource : DSUIHUDLogicResource
    {
        [RTTI.Member(17, 0x78, "DS_Logic")] public Ref<HUDElementResource> RootPartsElement;
        [RTTI.Member(18, 0x80, "DS_Logic")] public Ref<HUDElementResource> TemplatePartsElement;
        [RTTI.Member(19, 0x88, "DS_Logic")] public Ref<HUDElementResource> SkeltonElement;
        [RTTI.Member(20, 0x90, "DS_Logic")] public Ref<HUDElementResource> SamOnlyElement;
        [RTTI.Member(21, 0x98, "DS_Logic")] public Ref<HUDElementResource> CartOnlyElement;
        [RTTI.Member(23, 0xA0, "TextElement")] public Ref<HUDTextResource> TopTextElement;
        [RTTI.Member(27, 0xA8, "TextElement")] public Ref<HUDTextResource> TopTextBgElement;
        [RTTI.Member(31, 0xB0, "TextElement")] public Ref<HUDTextResource> BottomTextElement;
        [RTTI.Member(33, 0xB8, "TextElement")] public Ref<HUDTextResource> BottomTextBgElement;
        [RTTI.Member(24, 0xC0, "TextElement")] public FRGBAColor TopTextColor_Normal;
        [RTTI.Member(28, 0xD0, "TextElement")] public FRGBAColor TopTextBgColor_Normal;
        [RTTI.Member(25, 0xE0, "TextElement")] public FRGBAColor TopTextColor_Warning;
        [RTTI.Member(29, 0xF0, "TextElement")] public FRGBAColor TopTextBgColor_Danger;
        [RTTI.Member(26, 0x100, "TextElement")] public FRGBAColor TopTextColor_Danger;
        [RTTI.Member(30, 0x110, "TextElement")] public FRGBAColor TopTextBgColor;
        [RTTI.Member(32, 0x120, "TextElement")] public FRGBAColor BottomTextColor;
        [RTTI.Member(34, 0x130, "TextElement")] public FRGBAColor BottomTextBgColor;
        [RTTI.Member(36, 0x140, "AnimationTime")] public float CounterAnimTimeToIntro;
        [RTTI.Member(37, 0x144, "AnimationTime")] public float CounterAnimTimeToMainOutro;
        [RTTI.Member(38, 0x148, "AnimationTime")] public float CounterAnimTimeToRestart;
        [RTTI.Member(39, 0x14C, "AnimationTime")] public float CounterValueChangeTime;
        [RTTI.Member(41, 0x150, "Animation")] public Ref<DSUIHUDAnimatorResource> IntroAnimator;
        [RTTI.Member(42, 0x158, "Animation")] public Ref<DSUIHUDAnimatorResource> OutroAnimator;
        [RTTI.Member(44, 0x160, "Animation")] public Ref<DSUIHUDAnimatorResource> LoopAnimator;
        [RTTI.Member(43, 0x168, "Animation")] public Ref<DSUIHUDAnimatorResource> IdleAnimator;
        [RTTI.Member(45, 0x170, "Animation")] public Ref<DSUIHUDAnimatorResource> PickupAnimator;
        [RTTI.Member(46, 0x178, "Animation")] public Ref<DSUIHUDAnimatorResource> DropoffAnimator;
        [RTTI.Member(47, 0x180, "Animation")] public Ref<DSUIHUDAnimatorResource> CounterIntroAnimator;
        [RTTI.Member(48, 0x188, "Animation")] public Ref<DSUIHUDAnimatorResource> CountereValueChangeAnimator;
        [RTTI.Member(49, 0x190, "Animation")] public Ref<DSUIHUDAnimatorResource> CounterOutroAnimator;
        [RTTI.Member(51, 0x1A0, "ControllParam")] public Vec3 DisplayOffset_Sam;
        [RTTI.Member(52, 0x1B0, "ControllParam")] public Vec3 DisplayOffset_Cart;
        [RTTI.Member(53, 0x1D0, "ControllParam")] public Vec3 mSamCameraAlignOffset_R;
        [RTTI.Member(54, 0x1E0, "ControllParam")] public Vec3 mSamCameraAlignOffset_L;
        [RTTI.Member(55, 0x1F0, "ControllParam")] public float SpeedRateValue;
        [RTTI.Member(56, 0x200, "ControllParam")] public Vec3 LimitRotate;
        [RTTI.Member(57, 0x220, "ControllParam")] public Vec3 mSamCameraAlignRotate_R;
        [RTTI.Member(58, 0x230, "ControllParam")] public Vec3 mSamCameraAlignRotate_L;
        [RTTI.Member(59, 0x240, "ControllParam")] public float RotRefBaggageRateValue;
        [RTTI.Member(61, 0x248, "Sounds")] public Ref<SoundResource> IntroSound;
        [RTTI.Member(62, 0x250, "Sounds")] public Ref<SoundResource> PickupSound;
        [RTTI.Member(63, 0x258, "Sounds")] public Ref<SoundResource> DropoffSound;
    }

    [RTTI.Serializable(0xA470946B3B767E19, GameType.DS)]
    public class DSUIWishMenuTabResource
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> TabIcon;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> TabLabel;
    }

    [RTTI.Serializable(0x5E06DD11FB2A348A, GameType.DS)]
    public class DSUIWishMenuTitleResource
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> TitleText;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> TitleJpText;
    }

    [RTTI.Serializable(0x6BB7149214C5C070, GameType.DS)]
    public class DSUnconstructableArea : PhysicsCollisionInstance
    {
        [RTTI.Member(10, 0xF0)] public Ref<LocalizedTextResource> UnconstructableReason;
        [RTTI.Member(11, 0xF8)] public Ref<BooleanFact> UnconstructableFact;
        [RTTI.Member(13, 0x101, "UnconstructableTarget")] public bool SafetyHouse;
        [RTTI.Member(14, 0x103, "UnconstructableTarget")] public bool Post;
        [RTTI.Member(15, 0x104, "UnconstructableTarget")] public bool WatchTower;
        [RTTI.Member(16, 0x105, "UnconstructableTarget")] public bool _0;
        [RTTI.Member(17, 0x106, "UnconstructableTarget")] public bool Charger;
        [RTTI.Member(18, 0x107, "UnconstructableTarget")] public bool RainShelter;
        [RTTI.Member(19, 0x109, "UnconstructableTarget")] public bool Zipline;
        [RTTI.Member(22, 0x10A, "UnconstructableTarget")] public bool Ladder;
        [RTTI.Member(23, 0x10B, "UnconstructableTarget")] public bool FieldRope;
        [RTTI.Member(20, 0x10C, "UnconstructableTarget")] public bool Bridge45m;
        [RTTI.Member(21, 0x10D, "UnconstructableTarget")] public bool Bridge30m;
    }

    [RTTI.Serializable(0x23540B2FFDF36E64, GameType.DS)]
    public class DSUserPlayTimerSettingResource : Resource
    {
        [RTTI.Member(3, 0x20, "TimeLapse")] public float SecondsTimeLapseFromPrivateRoom;
        [RTTI.Member(4, 0x24, "TimeLapse")] public float SecondsTimeSecondAfterFaint;
        [RTTI.Member(5, 0x28, "TimeLapse")] public float SecondsAfterRainShelter;
        [RTTI.Member(7, 0x2C, "DeadBody")] public float MaxSecondCountDown;
        [RTTI.Member(8, 0x30, "DeadBody")] public float TimeLapseSecurity;
    }

    [RTTI.Serializable(0x8AD96DF4D2A1614E, GameType.DS)]
    public class DSUserableGeneratedMesh : GeometryObject
    {
    }

    [RTTI.Serializable(0x8A5673D3F7148729, GameType.DS)]
    public class DSVehicleCommonResource : Resource
    {
        [RTTI.Member(14, 0x20, "Effect")] public Ref<CurveResource> BurstLightCurve;
        [RTTI.Member(4, 0x28, "Game")] public Ref<EntityResource> BatteryPackEntity;
        [RTTI.Member(5, 0x30, "Game")] public Ref<EntityResource> RepairPackEntity;
        [RTTI.Member(15, 0x38, "Effect")] public Ref<StaticMeshResource> ChargeEffectResource;
        [RTTI.Member(16, 0x40, "Effect")] public Ref<MaterialTypeResource> WaterShallowMaterial;
        [RTTI.Member(17, 0x48, "Effect")] public Ref<MaterialTypeResource> TarDeepMaterial;
        [RTTI.Member(19, 0x50, "Baggage")] public float BatteryPack;
        [RTTI.Member(20, 0x54, "Baggage")] public float RepairPackSpeed;
        [RTTI.Member(22, 0x58, "Action")] public float SwampSinkSpeed;
        [RTTI.Member(24, 0x5C, "Action")] public float HideoHunterTarSinkSpeed;
        [RTTI.Member(23, 0x60, "Action")] public float CatcherTarSinkSpeed;
        [RTTI.Member(3, 0x64, "Game")] public float RainDamageSecond;
        [RTTI.Member(6, 0x68, "Game")] public float DecBatteryEnterWater;
        [RTTI.Member(7, 0x6C, "Game")] public float DecBatteryEnterWaterSpeed;
        [RTTI.Member(8, 0x70, "Game")] public float DecBatteryEnterWaterWheelie;
        [RTTI.Member(9, 0x74, "Game")] public float DamageScaleVeryEasy;
        [RTTI.Member(10, 0x78, "Game")] public float DamageScaleEasy;
        [RTTI.Member(11, 0x7C, "Game")] public float DamageScaleHard;
        [RTTI.Member(12, 0x80, "Game")] public float DamageScaleVeryHard;
    }

    [RTTI.Serializable(0x2CAD903E214607D1, GameType.DS)]
    public class DSVehicleCustomPackMover : DSSimpleAttachToEntityMover
    {
    }

    [RTTI.Serializable(0x1F4877237677752B, GameType.DS)]
    public class DSVehicleCustomPackMoverResource : DSSimpleAttachToEntityMoverResource
    {
    }

    [RTTI.Serializable(0xF22DA82DCAC8F413, GameType.DS)]
    public class DSVehicleMotorbike : VehicleEntity
    {
    }

    [RTTI.Serializable(0xA0232D4964D4275E, GameType.DS)]
    public class DSVehicleMotorbikeGameActor : VehicleGameActor
    {
    }

    [RTTI.Serializable(0x7FA3AEA39635E52B, GameType.DS)]
    public class DSVehicleMotorbikeGameActorLocator : VehicleGameActorLocator
    {
    }

    [RTTI.Serializable(0xEFAB60380425FC4, GameType.DS)]
    public class DSVehicleMotorbikeGameActorUnit : VehicleGameActorUnit
    {
    }

    [RTTI.Serializable(0x18413565A149BAB1, GameType.DS)]
    public class DSVehicleMotorbikeGameActorUnitResource : VehicleGameActorUnitResource
    {
        [RTTI.Member(13, 0x58, "GameActor")] public Ref<GameActorSpecificData> ClResource;
    }

    [RTTI.Serializable(0xFB6DF086D3149A38, GameType.DS)]
    public class DSVehicleMotorbikeLampSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public float LampIntensity;
        [RTTI.Member(3, 0x24)] public float FrontLightIntensity;
        [RTTI.Member(4, 0x2C)] public float TailLampIntensity;
        [RTTI.Member(5, 0x30)] public float TailLampIntensityMin;
        [RTTI.Member(6, 0x34)] public float WinkerIntensity;
    }

    [RTTI.Serializable(0xF8ED11A42D0F549, GameType.DS)]
    public class DSVehicleMotorbikeResource : VehicleEntityResource
    {
        [RTTI.Member(109, 0x260, "Effect")] public Ref<DSVehicleMotorbikeLampSettings> LampSettings;
        [RTTI.Member(100, 0x268, "Game")] public Ref<ArtPartsVariationResource> RideTypeApv;
        [RTTI.Member(101, 0x270, "Game")] public Ref<ArtPartsVariationResource> BrokenRideTypeApv;
        [RTTI.Member(114, 0x278, "Animation")] public Ref<CurveResource> WheelieIdleCurve;
        [RTTI.Member(110, 0x280, "Effect")] public Ref<EffectComponentResource> WaterEffectComponent;
        [RTTI.Member(111, 0x288, "Effect")] public Ref<EffectComponentResource> BubbleEffectComponent;
        [RTTI.Member(112, 0x290, "Effect")] public Ref<EffectComponentResource> WaterYellowEffectComponent;
        [RTTI.Member(97, 0x298, "BoneName")] public Array<Quat> DefaultPoseRotations;
        [RTTI.Member(98, 0x2A8, "BoneName")] public Array<Vec3> DefaultPoseTranslations;
        [RTTI.Member(90, 0x2B8, "Wheel")] public float FrontWheelRadius;
        [RTTI.Member(91, 0x2BC, "Wheel")] public float FrontWheelWidth;
        [RTTI.Member(93, 0x2C0, "BoneName")] public int32 FrontWheelLeftIndex;
        [RTTI.Member(94, 0x2C4, "BoneName")] public int32 FrontWheelRightIndex;
        [RTTI.Member(95, 0x2C8, "BoneName")] public int32 BackWheelIndex;
        [RTTI.Member(96, 0x2CC, "BoneName")] public int32 HandleIndex;
        [RTTI.Member(102, 0x2D0, "Game")] public float RideTypeRateDamageToBattery;
        [RTTI.Member(103, 0x2D4, "Game")] public float RideTypeElectricByBattery;
        [RTTI.Member(104, 0x2D8, "Game")] public float RideTypeBatteryScale;
        [RTTI.Member(105, 0x2DC, "Game")] public float CustomBatteryScale;
        [RTTI.Member(106, 0x2E0, "Game")] public float BurstJumpScale;
        [RTTI.Member(107, 0x2E4, "Game")] public float BurstWheelieJumpScale;
    }

    [RTTI.Serializable(0xF3C61FB1B2FD4BCD, GameType.DS)]
    public class DSVehiclePaintResource : Resource
    {
        [RTTI.Member(2, 0x20)] public float MudHeight;
        [RTTI.Member(3, 0x24)] public float MudFade;
        [RTTI.Member(4, 0x28)] public float MudSpeed;
        [RTTI.Member(5, 0x2C)] public float MudLimit;
        [RTTI.Member(6, 0x30)] public float TarSpeed;
        [RTTI.Member(7, 0x34)] public float SnowSpeed;
        [RTTI.Member(8, 0x38)] public float GroundSnowSpeed;
        [RTTI.Member(9, 0x3C)] public float SnowLimit;
        [RTTI.Member(10, 0x40)] public float GroundSnowHeight;
        [RTTI.Member(11, 0x44)] public float GroundSnowFade;
    }

    [RTTI.Serializable(0xB74422D0AA92B0ED, GameType.DS)]
    public class DSVehicleSoundResource : Resource
    {
        [RTTI.Member(3, 0x20, "SoundResources")] public Ref<SoundResource> Ignition;
        [RTTI.Member(4, 0x28, "SoundResources")] public Ref<SoundResource> Loop;
        [RTTI.Member(5, 0x30, "SoundResources")] public Ref<SoundResource> Cutoff;
        [RTTI.Member(6, 0x38, "SoundResources")] public Ref<SoundResource> Suspension;
        [RTTI.Member(7, 0x40, "SoundResources")] public Ref<SoundResource> HornShort;
        [RTTI.Member(8, 0x48, "SoundResources")] public Ref<SoundResource> HornMiddle;
        [RTTI.Member(9, 0x50, "SoundResources")] public Ref<SoundResource> HornLong;
        [RTTI.Member(10, 0x58, "SoundResources")] public Ref<SoundResource> HornChase;
        [RTTI.Member(11, 0x60, "SoundResources")] public Ref<SoundResource> BatteryEmpty;
        [RTTI.Member(12, 0x68, "SoundResources")] public Ref<SoundResource> BatteryWarningY;
        [RTTI.Member(13, 0x70, "SoundResources")] public Ref<SoundResource> BatteryWarningR;
        [RTTI.Member(14, 0x78, "SoundResources")] public Ref<SoundResource> BatteryCharge;
        [RTTI.Member(15, 0x80, "SoundResources")] public Ref<SoundResource> BatteryChargeFull;
        [RTTI.Member(16, 0x88, "SoundResources")] public Ref<SoundResource> BatteryChargeLeaveArea;
        [RTTI.Member(17, 0x90, "SoundResources")] public Ref<SoundResource> SecurityAlarm;
        [RTTI.Member(18, 0x98, "SoundResources")] public Ref<SoundResource> Winker;
        [RTTI.Member(19, 0xA0, "SoundResources")] public Ref<SoundResource> BodyRaise;
        [RTTI.Member(20, 0xA8, "SoundResources")] public Ref<SoundResource> BodyLower;
        [RTTI.Member(21, 0xB0, "SoundResources")] public Ref<SoundResource> GazerAreaEnterStinger;
        [RTTI.Member(22, 0xB8, "SoundResources")] public Ref<SoundResource> GazerAreaEnterBlinkOff;
        [RTTI.Member(23, 0xC0, "SoundResources")] public Ref<SoundResource> GazerAreaEnterPowerOff;
        [RTTI.Member(24, 0xC8, "SoundResources")] public Ref<SoundResource> GazerAreaEnterBlinkOn;
        [RTTI.Member(25, 0xD0, "SoundResources")] public Ref<SoundResource> Spawn;
        [RTTI.Member(36, 0xD8, "Rumble")] public Ref<RumbleResource> RumbleJump;
        [RTTI.Member(37, 0xE0, "Rumble")] public Ref<RumbleResource> RumbleImpactS;
        [RTTI.Member(38, 0xE8, "Rumble")] public Ref<RumbleResource> RumbleImpactM;
        [RTTI.Member(39, 0xF0, "Rumble")] public Ref<RumbleResource> RumbleImpactL;
        [RTTI.Member(40, 0xF8, "Rumble")] public Ref<RumbleResource> RumbleBatteryEmpty;
        [RTTI.Member(41, 0x100, "Rumble")] public Ref<RumbleResource> RumbleAccel;
        [RTTI.Member(42, 0x108, "Rumble")] public Ref<RumbleResource> RumbleExplosion;
        [RTTI.Member(43, 0x110, "Rumble")] public Ref<RumbleResource> RumbleEnterWater;
        [RTTI.Member(44, 0x118, "Rumble")] public Ref<RumbleResource> RumbleBoost;
        [RTTI.Member(27, 0x120, "Simulator")] public float Weight;
        [RTTI.Member(28, 0x124, "Simulator")] public float EngineTorque;
        [RTTI.Member(29, 0x128, "Simulator")] public float BrakingForce;
        [RTTI.Member(30, 0x12C, "Simulator")] public float GearRatios_0;
        [RTTI.Member(31, 0x130, "Simulator")] public float GearRatios_1;
        [RTTI.Member(32, 0x134, "Simulator")] public float GearRatios_2;
        [RTTI.Member(33, 0x138, "Simulator")] public float GearRatios_3;
        [RTTI.Member(34, 0x13C, "Simulator")] public float GearRatios_4;
    }

    [RTTI.Serializable(0xDE3CA7396C0276EE, GameType.DS)]
    public class DSVehicleSpecialActionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7AD3A3008C22F8C6, GameType.DS)]
    public class DSVehicleSpecialActionEventResource : TimedEventResource
    {
        [RTTI.Member(9, 0x30, "Logic")] public WorldPosition Position;
        [RTTI.Member(10, 0x48, "Logic")] public float Radius;
        [RTTI.Member(8, 0x4C, "Logic")] public EVehicleSpecialActionType Type;
    }

    [RTTI.Serializable(0x925B8E4E91F666D6, GameType.DS)]
    public class DSVehicleStopHoloComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1E64F739CF4C30E, GameType.DS)]
    public class DSVehicleStopHoloComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x599AD0E89FDA482C, GameType.DS)]
    public class DSVehicleTruck : VehicleEntity
    {
    }

    [RTTI.Serializable(0xC423C2DA66E2097, GameType.DS)]
    public class DSVehicleTruckGameActor : VehicleGameActor
    {
    }

    [RTTI.Serializable(0xEBE63DF2D09C9EF8, GameType.DS)]
    public class DSVehicleTruckGameActorLocator : VehicleGameActorLocator
    {
        [RTTI.Member(15, 0xD0, "General")] public int32 VariationColor;
    }

    [RTTI.Serializable(0x50027B2DB1BFC126, GameType.DS)]
    public class DSVehicleTruckGameActorUnit : VehicleGameActorUnit
    {
    }

    [RTTI.Serializable(0xC5E602138D6FF426, GameType.DS)]
    public class DSVehicleTruckGameActorUnitResource : VehicleGameActorUnitResource
    {
        [RTTI.Member(13, 0x58, "GameActor")] public Ref<GameActorSpecificData> EnemySpcificData;
    }

    [RTTI.Serializable(0xAAC42B348022BE61, GameType.DS)]
    public class DSVehicleTruckLampSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public float LampIntensity;
        [RTTI.Member(3, 0x24)] public float FrontLightIntensity;
        [RTTI.Member(4, 0x28)] public float BackLightIntensity;
        [RTTI.Member(5, 0x2C)] public float TailLampIntensity;
        [RTTI.Member(6, 0x30)] public float TailLampIntensityMin;
        [RTTI.Member(7, 0x34)] public float TailLampBloomIntensity;
        [RTTI.Member(8, 0x38)] public float WinkerIntensity;
        [RTTI.Member(9, 0x3C)] public float WinkerBloomIntensity;
        [RTTI.Member(10, 0x40)] public float LampWheelIntensity;
        [RTTI.Member(11, 0x44)] public float RoofLightBloomIntensity;
    }

    [RTTI.Serializable(0xD517C28713267C67, GameType.DS)]
    public class DSVehicleTruckResource : VehicleEntityResource
    {
        [RTTI.Member(101, 0x260, "Effect")] public Ref<DSVehicleTruckLampSettings> LampSettings;
        [RTTI.Member(91, 0x268, "Game")] public Ref<ArtPartsVariationResource> DefaultApv;
        [RTTI.Member(104, 0x270, "Effect")] public Array<Ref<AttachedLightsComponentResource>> RoofLightComponents;
        [RTTI.Member(105, 0x280, "Effect")] public Array<Ref<ArtPartsVariationResource>> RoofLightApv;
        [RTTI.Member(98, 0x290, "Game")] public Ref<ArtPartsVariationResource> HalflifeApv;
        [RTTI.Member(99, 0x298, "Game")] public Ref<Texture> HalflifeTexture;
        [RTTI.Member(107, 0x2A0, "Height")] public float HeightMaxAngle;
        [RTTI.Member(108, 0x2A4, "Height")] public float DefaultHeightRate;
        [RTTI.Member(102, 0x2A8, "Effect")] public float TimeExplosionToChange;
        [RTTI.Member(103, 0x2AC, "Effect")] public float TimeExplosionToBreakGlass;
        [RTTI.Member(92, 0x2B0, "Game")] public float BatteryScaleLv1;
        [RTTI.Member(93, 0x2B4, "Game")] public float BatteryScaleLv2;
        [RTTI.Member(94, 0x2B8, "Game")] public float BatteryScaleLv3;
        [RTTI.Member(95, 0x2BC, "Game")] public float HalflifeTypeRateDamageToBattery;
        [RTTI.Member(96, 0x2C0, "Game")] public float HalflifeTypeElectricByBattery;
        [RTTI.Member(97, 0x2C4, "Game")] public float HalflifeTypeBatteryScale;
        [RTTI.Member(110, 0x2C8, "BoneName")] public int32 FrontWheelLeftIndex;
        [RTTI.Member(111, 0x2CC, "BoneName")] public int32 FrontWheelRightIndex;
        [RTTI.Member(112, 0x2D0, "BoneName")] public int32 BackWheelLeftIndex;
        [RTTI.Member(113, 0x2D4, "BoneName")] public int32 BackWheelRightIndex;
        [RTTI.Member(114, 0x2D8, "BoneName")] public int32 ArmWristFrontIndex;
        [RTTI.Member(115, 0x2DC, "BoneName")] public int32 ArmWristBackIndex;
        [RTTI.Member(116, 0x2E0, "BoneName")] public int32 DoorLeftIndex;
        [RTTI.Member(117, 0x2E4, "BoneName")] public int32 DoorRightIndex;
        [RTTI.Member(118, 0x2E8, "BoneName")] public int32 HandleIndex;
        [RTTI.Member(90, 0x2EC, "Game")] public bool IsEnemy;
    }

    [RTTI.Serializable(0x49AADB8E42098309, GameType.DS)]
    public class DSWDMBakeProfile : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<WorldDataType> WorldDataType;
        [RTTI.Member(3, 0x28)] public Ref<Texture> Texture;
        [RTTI.Member(4, 0x30)] public Ref<Texture> Mask;
        [RTTI.Member(5, 0x38)] public RGBAColor Color;
        [RTTI.Member(6, 0x40)] public Vec4 Parameter;
        [RTTI.Member(7, 0x50)] public int MapSize;
        [RTTI.Member(8, 0x54)] public EDSWDBakeType BakeType;
        [RTTI.Member(9, 0x58)] public EDSWDBakeBlendMode BlendMode;
    }

    [RTTI.Serializable(0xD2EC174059D5F40C, GameType.DS)]
    public class DSWDMPrimitive : Entity
    {
    }

    [RTTI.Serializable(0xEB9DFBC9FAF56E77, GameType.DS)]
    public class DSWDMPrimitiveResource : EntityResource
    {
        [RTTI.Member(30, 0x100)] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(31, 0x108)] public EDSWDMPrimitiveBakeDataMode BakeMode;
        [RTTI.Member(32, 0x10C)] public EDSWDMPrimitiveType PrimitiveType;
        [RTTI.Member(33, 0x110)] public float Radius;
        [RTTI.Member(34, 0x114)] public float Depth;
        [RTTI.Member(35, 0x118)] public float FallOff;
        [RTTI.Member(36, 0x11C)] public bool PhysicsEffect;
        [RTTI.Member(37, 0x120)] public Array<Ref<DSWDMBakeProfile>> BakeProfiles;
    }

    [RTTI.Serializable(0xE80750537D66667C, GameType.DS)]
    public class DSWDMPrimitiveSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> BakeDefault;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> BakeDefaultWithTexture;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> BakeHegiht;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> BakeHegihtWithTexture;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> BakeCompressedNormal;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> BakeCompressedNormalWithTexture;
    }

    [RTTI.Serializable(0xF871748F05CF2EE2, GameType.DS)]
    public class DSWaitRadioEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0xB16FE24F65AE8B8F, GameType.DS)]
    public class DSWaitRadioEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public Ref<BooleanFact> SignalFact;
    }

    [RTTI.Serializable(0xF51757A135B6B7B8, GameType.DS)]
    public class DSWarriorChiralParticleControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE4C98CF66659DBD6, GameType.DS)]
    public class DSWarriorChiralParticleControlComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x8F2DCDC870B9C466, GameType.DS)]
    public class DSWarriorChiralParticleControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Ref<KJPRenderEffectSwapperComponentResource> KJPRenderEffectSwapper;
        [RTTI.Member(7, 0x28, "Representation")] public Ref<CurveResource> ToParticleSpawnFadeCurve;
        [RTTI.Member(8, 0x30, "Representation")] public Ref<CurveResource> ToParticleVanishFadeCurve;
        [RTTI.Member(9, 0x38, "Representation")] public Ref<CurveResource> ToParticleStippleAlphaCurve;
        [RTTI.Member(4, 0x40, "Representation")] public Ref<CurveResource> ToSubstanceSpawnFadeCurve;
        [RTTI.Member(5, 0x48, "Representation")] public Ref<CurveResource> ToSubstanceVanishFadeCurve;
        [RTTI.Member(6, 0x50, "Representation")] public Ref<CurveResource> ToSubstanceStippleAlphaCurve;
        [RTTI.Member(28, 0x58, "AddtionalSubstanceParameter")] public Ref<CurveResource> AddtionalSubstanceParameter_SpawnThreshold;
        [RTTI.Member(29, 0x60, "AddtionalSubstanceParameter")] public Ref<CurveResource> AddtionalSubstanceParameter_SpawnThresholdOffset;
        [RTTI.Member(30, 0x68, "AddtionalSubstanceParameter")] public Ref<CurveResource> AddtionalSubstanceParameter_SpawnEmissive;
        [RTTI.Member(39, 0x70, "AddtionalParticleParameter")] public Ref<CurveResource> AddtionalParticleParameter_SpawnThreshold;
        [RTTI.Member(40, 0x78, "AddtionalParticleParameter")] public Ref<CurveResource> AddtionalParticleParameter_SpawnThresholdOffset;
        [RTTI.Member(41, 0x80, "AddtionalParticleParameter")] public Ref<CurveResource> AddtionalParticleParameter_SpawnEmissive;
        [RTTI.Member(42, 0x88, "AddtionalParticleParameter")] public Ref<CurveResource> SpawnDisplacementScale;
        [RTTI.Member(43, 0x90, "AddtionalParticleParameter")] public Ref<CurveResource> SpawnSpawnRate;
        [RTTI.Member(44, 0x98, "AddtionalParticleParameter")] public Ref<CurveResource> SpawnVanishRate;
        [RTTI.Member(31, 0xA0, "AddtionalSubstanceParameter")] public Ref<CurveResource> AddtionalSubstanceParameter_VanishThreshold;
        [RTTI.Member(32, 0xA8, "AddtionalSubstanceParameter")] public Ref<CurveResource> AddtionalSubstanceParameter_VanishThresholdOffset;
        [RTTI.Member(33, 0xB0, "AddtionalSubstanceParameter")] public Ref<CurveResource> AddtionalSubstanceParameter_VanishEmissive;
        [RTTI.Member(45, 0xB8, "AddtionalParticleParameter")] public Ref<CurveResource> AddtionalParticleParameter_VanishThreshold;
        [RTTI.Member(46, 0xC0, "AddtionalParticleParameter")] public Ref<CurveResource> AddtionalParticleParameter_VanishThresholdOffset;
        [RTTI.Member(47, 0xC8, "AddtionalParticleParameter")] public Ref<CurveResource> AddtionalParticleParameter_VanishEmissive;
        [RTTI.Member(48, 0xD0, "AddtionalParticleParameter")] public Ref<CurveResource> VanishDisplacementScale;
        [RTTI.Member(49, 0xD8, "AddtionalParticleParameter")] public Ref<CurveResource> VanishSpawnRate;
        [RTTI.Member(50, 0xE0, "AddtionalParticleParameter")] public Ref<CurveResource> VanishVanishRate;
        [RTTI.Member(18, 0xE8, "Addtional")] public Ref<ArtPartsDataResource> ParticleArtPartsData;
        [RTTI.Member(10, 0xF0, "Representation")] public float QuickFadeSpeedScale;
        [RTTI.Member(13, 0xF4, "Representation")] public float SubstanceHeightOffset;
        [RTTI.Member(11, 0xF8, "Representation")] public float TimeScaleRandomMax;
        [RTTI.Member(12, 0xFC, "Representation")] public float TimeScaleRandomMin;
        [RTTI.Member(14, 0x100, "Representation")] public float ComponentStatusSpeedScale;
        [RTTI.Member(19, 0x104, "Addtional")] public float InitialThreshold;
        [RTTI.Member(21, 0x108, "AddtionalSubstanceParameter")] public float NoiseSpeed;
        [RTTI.Member(22, 0x10C, "AddtionalSubstanceParameter")] public float NoiseScale;
        [RTTI.Member(23, 0x110, "AddtionalSubstanceParameter")] public float AddtionalSubstanceParameter_Yellow;
        [RTTI.Member(24, 0x114, "AddtionalSubstanceParameter")] public float AddtionalSubstanceParameter_EmissivePow;
        [RTTI.Member(25, 0x118, "AddtionalSubstanceParameter")] public float AddtionalSubstanceParameter_Emi_width;
        [RTTI.Member(26, 0x11C, "AddtionalSubstanceParameter")] public float Rough_width;
        [RTTI.Member(27, 0x120, "AddtionalSubstanceParameter")] public float Burnt_width;
        [RTTI.Member(35, 0x124, "AddtionalParticleParameter")] public float AreaScale;
        [RTTI.Member(36, 0x128, "AddtionalParticleParameter")] public float AddtionalParticleParameter_EmissivePow;
        [RTTI.Member(37, 0x12C, "AddtionalParticleParameter")] public float AddtionalParticleParameter_Emi_width;
        [RTTI.Member(38, 0x130, "AddtionalParticleParameter")] public float AddtionalParticleParameter_Yellow;
        [RTTI.Member(15, 0x134, "Representation")] public bool EnableShadow;
        [RTTI.Member(16, 0x135, "Representation")] public bool IsWeaponType;
    }

    [RTTI.Serializable(0x3F00A28E9BECAA63, GameType.DS)]
    public class DSWarriorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x92B7E9FC0CA788C5, GameType.DS)]
    public class DSWarriorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Effect")] public float MoveStopPatricleControlMinTime;
        [RTTI.Member(4, 0x24, "Effect")] public float MoveStopPatricleControlMaxTime;
        [RTTI.Member(5, 0x28, "Effect")] public EDSWarriorType WarriorType;
        [RTTI.Member(6, 0x2C, "Effect")] public bool IsParticleWarrior;
        [RTTI.Member(7, 0x30, "Effect")] public Array<Ref<AttachedLightsComponentResource>> BodyLightForVW;
        [RTTI.Member(8, 0x40, "Effect")] public Ref<SoundResource> NoHeadSound;
    }

    [RTTI.Serializable(0x1B8C24DC0677F4F6, GameType.DS)]
    public class DSWarriorDamageComponent : DSMuleDamageComponent
    {
    }

    [RTTI.Serializable(0xE1FFC33B050CE204, GameType.DS)]
    public class DSWarriorDamageComponentResource : DSMuleDamageComponentResource
    {
        [RTTI.Member(8, 0x40, "Warrior")] public Ref<EntityResource> DropHeadSkullEntity;
    }

    [RTTI.Serializable(0x938889FB42FDB74B, GameType.DS)]
    public class DSWarriorFlareMover : Mover
    {
    }

    [RTTI.Serializable(0xE2FA2EA94D7D6F6E, GameType.DS)]
    public class DSWarriorFlareMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "General")] public float HeightBase;
        [RTTI.Member(9, 0x2C, "General")] public float DragCoefficient;
        [RTTI.Member(8, 0x30, "General")] public float RandomHeightScale;
        [RTTI.Member(10, 0x34, "General")] public float RandomAngleRange;
        [RTTI.Member(11, 0x38, "General")] public float EffectCallVelocity;
        [RTTI.Member(12, 0x40, "General")] public Array<Ref<EffectComponentResource>> Effects;
        [RTTI.Member(13, 0x50, "General")] public Ref<EffectComponentResource> ShootEffect;
    }

    [RTTI.Serializable(0xD5A048C93CC49B12, GameType.DS)]
    public class DSWarriorMechCommonComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7913EB67FEBF70C, GameType.DS)]
    public class DSWarriorMechCommonComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Effects")] public Ref<ParticleSystemResource> SpawnEffect;
        [RTTI.Member(4, 0x28, "Effects")] public float SpawnEffectTime;
        [RTTI.Member(5, 0x2C, "Effects")] public bool HasAttackDamage;
        [RTTI.Member(8, 0x30, "Effects")] public float PushDamageSpeed;
        [RTTI.Member(9, 0x34, "Effects")] public float RunOverDamageSpeed;
        [RTTI.Member(6, 0x40, "Effects")] public Vec3 AttackBoundingSize;
        [RTTI.Member(7, 0x50, "Effects")] public Vec3 AttackBoundingOffset;
        [RTTI.Member(10, 0x60, "Effects")] public bool IsHardObject;
    }

    [RTTI.Serializable(0x5EDE8EC4EC24700F, GameType.DS)]
    public class DSWarriorMechDisableCollisionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x78B903D6DCA5062F, GameType.DS)]
    public class DSWarriorMechDisableCollisionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x8DCFE8A4C00FC29C, GameType.DS)]
    public class DSWarriorMechHardnessEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x644FB805D5BB81FB, GameType.DS)]
    public class DSWarriorMechHardnessEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public bool IsHard;
    }

    [RTTI.Serializable(0xF0FC64491AC50FD1, GameType.DS)]
    public class DSWarriorMechParticleControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6DC4E8FF4459965F, GameType.DS)]
    public class DSWarriorMechParticleControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public EDSWarriorMechParticleEventType Type;
        [RTTI.Member(10, 0x3C, "Logic")] public float TimeScale;
    }

    [RTTI.Serializable(0x6294AA59AEDE6898, GameType.DS)]
    public class DSWarriorPatrolComponent : DSPatrolComponent
    {
    }

    [RTTI.Serializable(0xBD16B3FB9F691E88, GameType.DS)]
    public class DSWarriorPatrolComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x5B9D8D3B65732442, GameType.DS)]
    public class DSWarriorVoiceControlComponent : DSMuleVoiceControlComponent
    {
    }

    [RTTI.Serializable(0x75BB57715B5C4C73, GameType.DS)]
    public class DSWarriorVoiceControlComponentResource : DSMuleVoiceControlComponentResource
    {
        [RTTI.Member(8, 0x50, "DS")] public Array<Ref<NamedSoundResource>> SoundResources;
    }

    [RTTI.Serializable(0xAF6AEDAE96F4E331, GameType.DS)]
    public class DSWatchTowerConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0x20D5E05AC550423D, GameType.DS)]
    public class DSWatchTowerConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "WatchTower")] public float CameraHeightMin;
        [RTTI.Member(116, 0x494, "WatchTower")] public float CameraHeightMax;
        [RTTI.Member(117, 0x498, "WatchTower")] public float CameraHeightMinInArea04;
        [RTTI.Member(118, 0x49C, "WatchTower")] public float CameraHeightMaxInArea04;
    }

    [RTTI.Serializable(0x7C6BE97B1479DD8C, GameType.DS)]
    public class DSWaterInteractionSettingsOverride : RTTIRefObject
    {
        [RTTI.Member(4, 0x28, "General")] public int Priority;
        [RTTI.Member(6, 0x2C, "Simulation")] public float DampingFactor;
        [RTTI.Member(7, 0x30, "Simulation")] public float SimulationWaveSpeed;
        [RTTI.Member(8, 0x34, "Simulation")] public float ImpactStrengthScale;
        [RTTI.Member(9, 0x38, "Simulation")] public float FlowDamping;
        [RTTI.Member(10, 0x3C, "Simulation")] public float ConstantDamping;
        [RTTI.Member(3, 0x44, "General")] public bool Enable;
    }

    [RTTI.Serializable(0x3A3062AD1EC6C8D4, GameType.DS)]
    public class DSWaterInteractionSettingsOverrideEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6B71392F6F1D10AA, GameType.DS)]
    public class DSWaterInteractionSettingsOverrideEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "General")] public int Priority;
        [RTTI.Member(10, 0x34, "Simulation")] public float DampingFactor;
        [RTTI.Member(11, 0x38, "Simulation")] public float SimulationWaveSpeed;
        [RTTI.Member(12, 0x3C, "Simulation")] public float ImpactStrengthScale;
        [RTTI.Member(13, 0x40, "Simulation")] public float FlowDamping;
        [RTTI.Member(14, 0x44, "Simulation")] public float ConstantDamping;
    }

    [RTTI.Serializable(0xAEBEF623E4B727C7, GameType.DS)]
    public class DSWaterSurfaceRefractLocator : WaterSurfaceLocatorBase
    {
    }

    [RTTI.Serializable(0x2188765DCC7EBD3E, GameType.DS)]
    public class DSWeaponAimArc : EntityComponent
    {
    }

    [RTTI.Serializable(0xC7EE10B7E450D6E7, GameType.DS)]
    public class DSWeaponAimArcRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF3BFDEE9AD13FC9C, GameType.DS)]
    public class DSWeaponAimArcResource : EntityComponentResource
    {
        [RTTI.Member(6, 0x20, "Representation")] public Ref<CurveResource> AimArcWidthDistanceRateCurve;
        [RTTI.Member(3, 0x28, "Representation")] public Ref<RenderEffectResource> AimArcRenderEffectResource;
        [RTTI.Member(4, 0x30, "Representation")] public float AimArcLength;
        [RTTI.Member(5, 0x34, "Representation")] public float AimArcWidth;
        [RTTI.Member(7, 0x38, "Representation")] public float AimArcTextureLength;
        [RTTI.Member(8, 0x3C, "Representation")] public RGBAColor AimArcColor;
        [RTTI.Member(9, 0x40, "Representation")] public float AimArcFadeInDistance;
        [RTTI.Member(10, 0x44, "Representation")] public float AimArcFadeOutDistance;
        [RTTI.Member(11, 0x48, "Representation")] public Ref<RenderEffectResource> AimArcDepthHelpersRenderEffectResource;
        [RTTI.Member(12, 0x50, "Representation")] public float AimArcDepthHelpersWidth;
        [RTTI.Member(13, 0x54, "Representation")] public float AimArcDepthHelpersHeight;
        [RTTI.Member(14, 0x58, "Representation")] public float AimArcDepthHelpersInitialDistance;
        [RTTI.Member(15, 0x5C, "Representation")] public float AimArcDepthHelpersInterval;
        [RTTI.Member(16, 0x60, "Representation")] public RGBAColor AimArcDepthHelpersColor;
        [RTTI.Member(17, 0x68, "Representation")] public Ref<RenderEffectResource> AimArcTargetQuadRenderEffectResource;
        [RTTI.Member(18, 0x70, "Representation")] public float AimArcTargetQuadSize;
        [RTTI.Member(19, 0x74, "Representation")] public float AimArcTargetQuadOffset;
        [RTTI.Member(20, 0x78, "Representation")] public RGBAColor AimArcTargetQuadColor;
        [RTTI.Member(21, 0x80, "Representation")] public Ref<StaticMeshResource> AimArcTargetMeshResource;
        [RTTI.Member(22, 0x88, "Representation")] public float AimArcTargetMeshSize;
    }

    [RTTI.Serializable(0xB56C503E8ED308A1, GameType.DS)]
    public class DSWeaponCartridge : CoreObject
    {
        [RTTI.Member(2, 0x20)] public String HelperName;
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsVariationResource> ArtPartsVariation;
        [RTTI.Member(4, 0x30)] public Ref<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0x27414F9CEA0F179B, GameType.DS)]
    public class DSWeaponCommonConfig : CoreObject
    {
        [RTTI.Member(3, 0x20, "Throw")] public float WeakThrowPitch;
        [RTTI.Member(4, 0x24, "Throw")] public float StrongThrowPitch;
        [RTTI.Member(5, 0x28, "Throw")] public float StrongThrowSpeedMultiplier;
        [RTTI.Member(98, 0x2C, "Variables")] public float FreezeGrenadeFreezingLifeTime;
        [RTTI.Member(99, 0x30, "Variables")] public float SlipGrenadeSlipingLifeTime;
        [RTTI.Member(100, 0x34, "Variables")] public float SmokeAreaRadiusMultiplier;
        [RTTI.Member(66, 0x38, "BloodGrenade")] public float BloodGrenadeSmokingLifeTime;
        [RTTI.Member(67, 0x3C, "BloodGrenade")] public float BloodGrenadeSmokeMoveSpeed;
        [RTTI.Member(68, 0x40, "BloodGrenade")] public float BloodGrenadeSmokeInitialRadius;
        [RTTI.Member(69, 0x44, "BloodGrenade")] public float BloodGrenadeSmokeGravityRate;
        [RTTI.Member(70, 0x48, "BloodGrenade")] public float BloodGrenadeSmokeSpreadSpeed;
        [RTTI.Member(71, 0x4C, "BloodGrenade")] public float BloodGrenadeMinSmokingLifeTime;
        [RTTI.Member(72, 0x50, "BloodGrenade")] public float BloodGrenadeMinSmokeMoveSpeed;
        [RTTI.Member(73, 0x54, "BloodGrenade")] public float BloodGrenadeMinSmokeInitialRadius;
        [RTTI.Member(74, 0x58, "BloodGrenade")] public float BloodGrenadeMinSmokeLifeTime;
        [RTTI.Member(75, 0x5C, "BloodGrenade")] public float BloodGrenadeMinSmokeGravityRate;
        [RTTI.Member(76, 0x60, "BloodGrenade")] public float BloodGrenadeMinSmokeSpreadSpeed;
        [RTTI.Member(77, 0x64, "BloodGrenade")] public float BloodGrenadeSmokeAttackInterval;
        [RTTI.Member(78, 0x68, "BloodGrenade")] public float BloodGrenadeMinBlastEffectLifeTime;
        [RTTI.Member(79, 0x6C, "BloodGrenade")] public float BloodGrenadeMaxBlastEffectLifeTime;
        [RTTI.Member(80, 0x70, "BloodGrenade")] public float BloodGrenadeNormalParticleChargeRate;
        [RTTI.Member(81, 0x74, "BloodGrenade")] public float BloodGrenadeLargeParticleChargeRate;
        [RTTI.Member(82, 0x78, "BloodGrenade")] public float BloodGrenadeSmallSmokeRadiusMultiplier;
        [RTTI.Member(83, 0x7C, "BloodGrenade")] public float BloodGrenadeNormalSmokeRadiusMultiplier;
        [RTTI.Member(84, 0x80, "BloodGrenade")] public float BloodGrenadeLargeSmokeRadiusMultiplier;
        [RTTI.Member(85, 0x84, "BloodGrenade")] public float BloodGrenadeSmallDangerAreaRadius;
        [RTTI.Member(86, 0x88, "BloodGrenade")] public float BloodGrenadeNormalDangerAreaRadius;
        [RTTI.Member(87, 0x8C, "BloodGrenade")] public float BloodGrenadeLargeDangerAreaRadius;
        [RTTI.Member(89, 0x90, "SmokeGrenade")] public float SmokeGrenadeSmokingLifeTime;
        [RTTI.Member(90, 0x94, "SmokeGrenade")] public float SmokeGrenadeSmokingLifeTimeLv2;
        [RTTI.Member(91, 0xA0, "SmokeGrenade")] public Vec3 SmokeGrenadeSmokeAimPosition;
        [RTTI.Member(92, 0xB0, "SmokeGrenade")] public float SmokeGrenadeSmokeMoveSpeed;
        [RTTI.Member(93, 0xB4, "SmokeGrenade")] public float SmokeGrenadeSmokeInitialRadius;
        [RTTI.Member(94, 0xB8, "SmokeGrenade")] public float SmokeGrenadeSmokeInitialRadiusLv2;
        [RTTI.Member(95, 0xBC, "SmokeGrenade")] public float SmokeGrenadeSmokeSpreadSpeed;
        [RTTI.Member(96, 0xC0, "SmokeGrenade")] public float SmokeGrenadeSmokeSpreadSpeedLv2;
        [RTTI.Member(101, 0xC4, "Variables")] public float TranquilizerGrenadeSmokingLifeTime;
        [RTTI.Member(102, 0xD0, "Variables")] public Vec3 TranquilizerGrenadeSmokeAimPosition;
        [RTTI.Member(103, 0xE0, "Variables")] public float TranquilizerGrenadeSmokeMoveSpeed;
        [RTTI.Member(104, 0xE4, "Variables")] public float TranquilizerGrenadeSmokeInitialRadius;
        [RTTI.Member(105, 0xE8, "Variables")] public float TranquilizerGrenadeSmokeSpreadSpeed;
        [RTTI.Member(106, 0xEC, "Variables")] public float TranquilizerGrenadeSmokeAttackInterval;
        [RTTI.Member(107, 0xF0, "Variables")] public float PoisonGasShellPoisonLifeTime;
        [RTTI.Member(108, 0xF4, "Variables")] public float PoisonGasShellPoisonInitialRadius;
        [RTTI.Member(109, 0xF8, "Variables")] public float PoisonGasShellPoisonSpreadSpeed;
        [RTTI.Member(110, 0xFC, "Variables")] public float PoisonGasShellPoisonAttackInterval;
        [RTTI.Member(111, 0x100, "Variables")] public float SamBallLifeTime;
        [RTTI.Member(112, 0x104, "Variables")] public float SamBallRadius;
        [RTTI.Member(113, 0x108, "Variables")] public float SamBallLifeTimeLv2;
        [RTTI.Member(114, 0x10C, "Variables")] public float SamBallRadiusLv2;
        [RTTI.Member(115, 0x110, "Variables")] public float SamBallStaminaConsumptionForCreation;
        [RTTI.Member(116, 0x114, "Variables")] public float SamBallStaminaConsumptionIncreaseRateOfEatingCryptobiosis;
        [RTTI.Member(38, 0x118, "Bolagun")] public float BolagunDistanceToStartBindLv1;
        [RTTI.Member(39, 0x11C, "Bolagun")] public float BolagunDistanceExtendToMaxLv1;
        [RTTI.Member(40, 0x120, "Bolagun")] public float BolagunBulletMinDistanceLv1;
        [RTTI.Member(41, 0x124, "Bolagun")] public float BolagunBulletMaxDistanceLv1;
        [RTTI.Member(42, 0x128, "Bolagun")] public float BolagunBulletMinSpeedLv1;
        [RTTI.Member(43, 0x12C, "Bolagun")] public float BolagunBulletMaxSpeedLv1;
        [RTTI.Member(44, 0x130, "Bolagun")] public float BolagunReticleStartNoChargeLv1;
        [RTTI.Member(45, 0x134, "Bolagun")] public float BolagunReticleStartFullChargeLv1;
        [RTTI.Member(46, 0x138, "Bolagun")] public float BolagunReticleEndNoChargeLv1;
        [RTTI.Member(47, 0x13C, "Bolagun")] public float BolagunReticleEndFullChargeLv1;
        [RTTI.Member(48, 0x140, "Bolagun")] public float BolagunOpenMinAngleLv1;
        [RTTI.Member(49, 0x144, "Bolagun")] public float BolagunOpenMaxAngleLv1;
        [RTTI.Member(50, 0x148, "Bolagun")] public float BolagunFullChargeTimeLv1;
        [RTTI.Member(51, 0x14C, "Bolagun")] public float BolagunDistanceToStartBindLv2;
        [RTTI.Member(52, 0x150, "Bolagun")] public float BolagunDistanceExtendToMaxLv2;
        [RTTI.Member(53, 0x154, "Bolagun")] public float BolagunBulletMinDistanceLv2;
        [RTTI.Member(54, 0x158, "Bolagun")] public float BolagunBulletMaxDistanceLv2;
        [RTTI.Member(55, 0x15C, "Bolagun")] public float BolagunBulletMinSpeedLv2;
        [RTTI.Member(56, 0x160, "Bolagun")] public float BolagunBulletMaxSpeedLv2;
        [RTTI.Member(57, 0x164, "Bolagun")] public float BolagunReticleStartNoChargeLv2;
        [RTTI.Member(58, 0x168, "Bolagun")] public float BolagunReticleStartFullChargeLv2;
        [RTTI.Member(59, 0x16C, "Bolagun")] public float BolagunReticleEndNoChargeLv2;
        [RTTI.Member(60, 0x170, "Bolagun")] public float BolagunReticleEndFullChargeLv2;
        [RTTI.Member(61, 0x174, "Bolagun")] public float BolagunOpenMinAngleLv2;
        [RTTI.Member(62, 0x178, "Bolagun")] public float BolagunOpenMaxAngleLv2;
        [RTTI.Member(63, 0x17C, "Bolagun")] public float BolagunFullChargeTimeLv2;
        [RTTI.Member(64, 0x180, "Bolagun")] public float BolagunHitCheckRadius;
        [RTTI.Member(117, 0x184, "Variables")] public float StickyBulletRecoverSpeed;
        [RTTI.Member(118, 0x188, "Variables")] public float StickyGunPullStrengthFactor;
        [RTTI.Member(119, 0x18C, "Variables")] public float StickyAutoLockRadius;
        [RTTI.Member(120, 0x190, "Variables")] public float MuleAutoLockMaxAngle;
        [RTTI.Member(121, 0x194, "Variables")] public float EGLifeTimeLv1;
        [RTTI.Member(122, 0x198, "Variables")] public float EGLifeTimeInWaterLv1;
        [RTTI.Member(123, 0x19C, "Variables")] public float EGLifeTimeLv2;
        [RTTI.Member(124, 0x1A0, "Variables")] public float EGLifeTimeInWaterLv2;
        [RTTI.Member(125, 0x1A4, "Variables")] public float EGExplodeRangeLv1;
        [RTTI.Member(126, 0x1A8, "Variables")] public float EGExplodeRangeInWaterLv1;
        [RTTI.Member(127, 0x1AC, "Variables")] public float EGExplodeRangeLv2;
        [RTTI.Member(128, 0x1B0, "Variables")] public float EGExplodeRangeInWaterLv2;
        [RTTI.Member(129, 0x1B4, "Variables")] public float EGMinStaminaDamage;
        [RTTI.Member(134, 0x1B8, "Variables")] public float OdradekBatteryOfUsingBaggageSensor;
        [RTTI.Member(135, 0x1BC, "Variables")] public float OdradekBaggageDistanceOfMaxPingInterval;
        [RTTI.Member(136, 0x1C0, "Variables")] public float OdradekBaggageDistanceOfMinPingInterval;
        [RTTI.Member(137, 0x1C4, "Variables")] public float OdradekBaggageMaxPingInterval;
        [RTTI.Member(138, 0x1C8, "Variables")] public float OdradekBaggageMinPingInterval;
        [RTTI.Member(139, 0x1CC, "Variables")] public float WaterInBottleIncreaseSpeedInRain;
        [RTTI.Member(140, 0x1D0, "Variables")] public float WaterInBottleIncreaseSpeedInWaterPlace;
        [RTTI.Member(141, 0x1D8, "Variables")] public Array<float> WaterBottleAmountToStaminRate;
        [RTTI.Member(130, 0x1E8, "Variables")] public float UrinationRadius;
        [RTTI.Member(131, 0x1EC, "Variables")] public float UrinationLifeTime;
        [RTTI.Member(132, 0x1F0, "Variables")] public float BloodUrinationRadius;
        [RTTI.Member(133, 0x1F4, "Variables")] public float BloodUrinationLifeTime;
        [RTTI.Member(7, 0x1F8, "ExGrenade0")] public float ExGrenade0Radius;
        [RTTI.Member(8, 0x1FC, "ExGrenade0")] public float ExGrenade0LifeTime;
        [RTTI.Member(9, 0x200, "ExGrenade0")] public float ExGrenade0FlinchTime;
        [RTTI.Member(10, 0x204, "ExGrenade0")] public float ExGrenade0SlipRadius;
        [RTTI.Member(11, 0x208, "ExGrenade0")] public float ExGrenade0SlipLifeTime;
        [RTTI.Member(13, 0x20C, "ExGrenade1")] public float ExGrenade1Radius;
        [RTTI.Member(14, 0x210, "ExGrenade1")] public float ExGrenade1LifeTime;
        [RTTI.Member(15, 0x214, "ExGrenade1")] public float ExGrenade1FlinchTime;
        [RTTI.Member(16, 0x218, "ExGrenade1")] public float ExGrenade1SlipRadius;
        [RTTI.Member(17, 0x21C, "ExGrenade1")] public float ExGrenade1SlipLifeTime;
        [RTTI.Member(19, 0x220, "ExGrenade1Plus")] public float ExGrenade1PlusRadius;
        [RTTI.Member(20, 0x224, "ExGrenade1Plus")] public float ExGrenade1PlusLifeTime;
        [RTTI.Member(21, 0x228, "ExGrenade1Plus")] public float ExGrenade1PlusSlipRadius;
        [RTTI.Member(22, 0x22C, "ExGrenade1Plus")] public float ExGrenade1PlusSlipLifeTime;
        [RTTI.Member(24, 0x230, "ExGrenade2")] public float ExGrenade2Radius;
        [RTTI.Member(25, 0x234, "ExGrenade2")] public float ExGrenade2LifeTime;
        [RTTI.Member(26, 0x238, "ExGrenade2")] public float ExGrenade2FlinchTime;
        [RTTI.Member(27, 0x23C, "ExGrenade2")] public float ExGrenade2StunTime;
        [RTTI.Member(28, 0x240, "ExGrenade2")] public float ExGrenade2TarTime;
        [RTTI.Member(29, 0x244, "ExGrenade2")] public float ExGrenade2VisibleTime;
        [RTTI.Member(30, 0x248, "ExGrenade2")] public float ExGrenadd2SlipRadius;
        [RTTI.Member(31, 0x24C, "ExGrenade2")] public float ExGrenadd2SlipLifeTime;
        [RTTI.Member(32, 0x250, "ExGrenade2")] public float ExGrenade0ToPlayTimeRate;
        [RTTI.Member(33, 0x254, "ExGrenade2")] public float ExGrenade1ToWaterAmountRate;
        [RTTI.Member(34, 0x258, "ExGrenade2")] public float ExGrenade1PlusToWaterAmountRate;
        [RTTI.Member(35, 0x25C, "ExGrenade2")] public float ExGranade2ToCryptbiosysRate;
        [RTTI.Member(36, 0x260, "ExGrenade2")] public float FatigueRateToCreateExGrenade1Plus;
        [RTTI.Member(167, 0x264, "Variables")] public float BulletSoundInfluenceDistanceFromCamera;
        [RTTI.Member(142, 0x268, "Variables")] public float ElectricAreaRadius;
        [RTTI.Member(143, 0x26C, "Variables")] public float ElectricAreaRadiusInWater;
        [RTTI.Member(144, 0x270, "Variables")] public float ElectricAreaLifeTime;
        [RTTI.Member(145, 0x274, "Variables")] public float BatteryChargerAmount;
        [RTTI.Member(146, 0x278, "Variables")] public float BatteryChargerLv2Amount;
        [RTTI.Member(147, 0x27C, "Variables")] public float BatteryChargerLv3Amount;
        [RTTI.Member(148, 0x280, "Variables")] public float BalancerBatteryAmount;
        [RTTI.Member(149, 0x284, "Variables")] public float DetonatableObjectLostDistance;
        [RTTI.Member(150, 0x288, "Variables")] public float DetonatableObjectPoolLimitCount;
        [RTTI.Member(151, 0x28C, "Variables")] public float AntiBtDeviceEmissionIntencityScaleMax;
        [RTTI.Member(152, 0x290, "Variables")] public float AntiBtDeviceEmissionIntencityEaseOutDuration;
        [RTTI.Member(153, 0x294, "Variables")] public float TarrySplashValidDepth;
        [RTTI.Member(154, 0x298, "Variables")] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(155, 0x2A8, "Variables")] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(156, 0x2B8, "Variables")] public Ref<DSBolagunEffectResource> BolagunEffect;
        [RTTI.Member(157, 0x2C0, "Variables")] public Ref<DSOdradekEffectResource> DSOdradekEffectResource;
        [RTTI.Member(158, 0x2C8, "Variables")] public Ref<EntityResource> WeaponSystemEntityResource;
        [RTTI.Member(159, 0x2D0, "Variables")] public Ref<EntityResource> CartridgeEntityResource;
        [RTTI.Member(160, 0x2D8, "Variables")] public Ref<EntityResource> SnowInteractionResource;
        [RTTI.Member(161, 0x2E0, "Variables")] public Ref<EntityComponentResource> WarriorsParticleComponentResource;
        [RTTI.Member(162, 0x2E8, "Variables")] public Ref<Fact> PrivateRoomObjectVisibilityFact;
        [RTTI.Member(163, 0x2F0, "Variables")] public Ref<Fact> PrivateRoomCansTypeFact;
        [RTTI.Member(164, 0x2F8, "Variables")] public Ref<SoundResource> AttachmentActivateSound;
        [RTTI.Member(165, 0x300, "Variables")] public Ref<SoundResource> AttachmentDeactivateSound;
        [RTTI.Member(166, 0x308, "Variables")] public Array<Ref<ArtPartsVariationResource>> ArtPartsVariations;
    }

    [RTTI.Serializable(0xFFABDF7C97CF538C, GameType.DS)]
    public class DSWeaponEntity : Entity
    {
    }

    [RTTI.Serializable(0x4181F1754A6CE783, GameType.DS)]
    public class DSWeaponEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0xE29FCE56C4D0BBB9, GameType.DS)]
    public class DSWeaponEntityResource : EntityResource
    {
        [RTTI.Member(35, 0x100, "ExtraParts")] public Array<Ref<DSWeaponExtraParts>> ExtraParts;
        [RTTI.Member(37, 0x110, "Cartridge")] public Ref<DSWeaponCartridge> Cartridge;
        [RTTI.Member(41, 0x118, "AnimIndex")] public Array<EDSWeaponMotionType> AnimationResourceToMotionBinds;
        [RTTI.Member(42, 0x128, "AnimIndex")] public Array<int> MotionToAnimationResourceBinds;
        [RTTI.Member(31, 0x138, "CNP")] public Array<EDSWeaponConnectPoint> ConnectPoints;
        [RTTI.Member(32, 0x148, "CNP")] public Array<String> HelperNames;
        [RTTI.Member(33, 0x158, "CNP")] public Array<String> ConnectPointToHelperNames;
        [RTTI.Member(44, 0x168, "Gimmick")] public Ref<DSWeaponGimmickAnimation> Animation;
        [RTTI.Member(45, 0x170, "Gimmick")] public Ref<DSWeaponGimmickAnimations> Animations;
        [RTTI.Member(46, 0x178, "Gimmick")] public Ref<DSWeaponGimmickEmission> Emission;
        [RTTI.Member(47, 0x180, "Gimmick")] public Ref<DSWeaponGimmickEmission> BloodEmission;
        [RTTI.Member(48, 0x188, "Gimmick")] public Ref<DSWeaponGeneralNameList> MeshNameListActivatedWhenEquipped;
        [RTTI.Member(49, 0x190, "Gimmick")] public Ref<DSWeaponGeneralNameList> MeshNameListActivatedWhenAmmoEquipped;
        [RTTI.Member(39, 0x198, "FlashLight")] public Ref<AttachedLightsComponentResource> FlashLightResource;
    }

    [RTTI.Serializable(0x1EB17F0EB73212C, GameType.DS)]
    public class DSWeaponExtraParts : CoreObject
    {
        [RTTI.Member(2, 0x20)] public String HelperName;
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsDataResource> ArtParts;
        [RTTI.Member(4, 0x30)] public Ref<ArtPartsVariationResource> ArtPartsVariation;
        [RTTI.Member(5, 0x38)] public Array<Vec3> Vec3Params;
        [RTTI.Member(6, 0x48)] public bool OverwriteEntityVisible;
    }

    [RTTI.Serializable(0x5BBBB0758BF9313F, GameType.DS)]
    public class DSWeaponGeneralNameList : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> Names;
        [RTTI.Member(3, 0x30)] public Array<uint32> NameHashs;
    }

    [RTTI.Serializable(0x4D1627E563CCF629, GameType.DS)]
    public class DSWeaponGimmickAnimation : CoreObject
    {
        [RTTI.Member(2, 0x20)] public float TransitDuration;
        [RTTI.Member(3, 0x28)] public Array<DSWeaponGimmickAnimationTrack> AnimationTracks;
    }

    [RTTI.Serializable(0xF223D46511B98DFA, GameType.DS)]
    public class DSWeaponGimmickAnimationTrack
    {
        [RTTI.Member(0, 0x10)] public String JointName;
        [RTTI.Member(1, 0x18)] public uint32 JointNameHash;
        [RTTI.Member(2, 0x20)] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0x36584EA683F5C076, GameType.DS)]
    public class DSWeaponGimmickAnimations : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DSWeaponGimmickAnimation>> Animations;
    }

    [RTTI.Serializable(0xA2A57B03040E4E10, GameType.DS)]
    public class DSWeaponGimmickEmission : CoreObject
    {
        [RTTI.Member(2, 0x20)] public String MeshName;
        [RTTI.Member(3, 0x28)] public uint32 MeshNameHash;
        [RTTI.Member(4, 0x30)] public Vec3 Color;
    }

    [RTTI.Serializable(0x622FF3CFCA9CBC07, GameType.DS)]
    public class DSWeaponParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSWeaponId Id;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(5, 0x30, "Parameters")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(6, 0x38, "Parameters")] public Ref<LocalizedTextResource> ModelNumberStrOnShowcase;
        [RTTI.Member(7, 0x40, "Parameters")] public Ref<LocalizedTextResource> CategoryNameStrOnShowcase;
        [RTTI.Member(8, 0x48, "Parameters")] public Ref<LocalizedTextResource> DescriptionStrOnShowcase;
        [RTTI.Member(9, 0x50, "Parameters")] public String IconTextureName;
        [RTTI.Member(11, 0x58, "Parameters")] public Ref<LocalizedTextResource> AttachmentName;
        [RTTI.Member(12, 0x60, "Parameters")] public Ref<LocalizedTextResource> AttachmentDescription;
        [RTTI.Member(10, 0x68, "Parameters")] public String AttachmentIconTextureName;
        [RTTI.Member(13, 0x70, "Parameters")] public Ref<DSGameWeaponListItem> ListItem;
        [RTTI.Member(14, 0x78, "Parameters")] public EDSWeaponType Type;
        [RTTI.Member(15, 0x79, "Parameters")] public EDSWeaponCategory Category;
        [RTTI.Member(16, 0x80, "Parameters")] public Ref<DSWeaponEntityResource> EntityResource;
        [RTTI.Member(19, 0x88, "Parameters")] public Array<EDSWeaponConnectPoint> MuzzleConnectPointForMagazines;
        [RTTI.Member(20, 0x98, "Parameters")] public Array<EDSWeaponConnectPoint> MuzzleConnectPointForSubMagazines;
        [RTTI.Member(21, 0xA8, "Parameters")] public Array<EDSWeaponPartsId> WeaponParts;
        [RTTI.Member(22, 0xB8, "Parameters")] public Ref<SoundResource> HoldSound;
        [RTTI.Member(23, 0xC0, "Parameters")] public Ref<SoundResource> UnholdSound;
        [RTTI.Member(24, 0xC8, "Parameters")] public Ref<SoundResource> EmptySound;
        [RTTI.Member(25, 0xD0, "Parameters")] public Ref<SoundResource> UnusableSound;
        [RTTI.Member(26, 0xD8, "Parameters")] public Ref<SoundResource> LockOnSound;
        [RTTI.Member(27, 0xE0, "Parameters")] public Ref<SoundResource> LockOnLoopSound;
        [RTTI.Member(28, 0xE8, "Parameters")] public Ref<SkeletonAnimationResource> BaggagedAnimation;
        [RTTI.Member(29, 0xF0, "Parameters")] public Ref<DSWeaponEntityResource> InCaseEntityResource;
        [RTTI.Member(30, 0xF8, "Parameters")] public String InCaseAttachHelperName;
        [RTTI.Member(31, 0x100, "Parameters")] public String CarrierAttachHelperName;
        [RTTI.Member(32, 0x108, "Parameters")] public String EmptyCarrierAttachHelperName;
        [RTTI.Member(33, 0x110, "Parameters")] public EDSTempraryStorageLocation TempraryStorageLocation;
        [RTTI.Member(34, 0x111, "Parameters")] public EDSReticleType ReticleType;
        [RTTI.Member(35, 0x112, "Parameters")] public EDSReticleType AttachmentReticleType;
        [RTTI.Member(36, 0x113, "Parameters")] public uint8 Lv;
        [RTTI.Member(37, 0x114, "Parameters")] public bool IsAttackable;
        [RTTI.Member(38, 0x115, "Parameters")] public bool IsAimAssistable;
        [RTTI.Member(39, 0x116, "Parameters")] public bool IsAssaultRifle;
        [RTTI.Member(40, 0x117, "Parameters")] public bool IsMachineGun;
        [RTTI.Member(41, 0x118, "Parameters")] public bool IsShotgun;
        [RTTI.Member(42, 0x119, "Parameters")] public bool IsHandgun;
        [RTTI.Member(43, 0x11A, "Parameters")] public bool IsMissile;
        [RTTI.Member(44, 0x11B, "Parameters")] public bool IsSpreadMissile;
        [RTTI.Member(45, 0x11C, "Parameters")] public bool IsRocket;
        [RTTI.Member(46, 0x11D, "Parameters")] public bool IsHandGrenade;
        [RTTI.Member(47, 0x11E, "Parameters")] public bool IsGrenadeLauncher;
        [RTTI.Member(48, 0x11F, "Parameters")] public bool IsRubberWeapon;
        [RTTI.Member(49, 0x120, "Parameters")] public bool IsBloodWeapon;
        [RTTI.Member(50, 0x121, "Parameters")] public bool IsGoldWeapon;
        [RTTI.Member(51, 0x122, "Parameters")] public bool HasAttachmentWeapon;
        [RTTI.Member(52, 0x123, "Parameters")] public bool HasSuppressor;
        [RTTI.Member(53, 0x124, "Parameters")] public bool HasDotSight;
        [RTTI.Member(54, 0x125, "Parameters")] public bool HasAttachableProjectileGenerator;
        [RTTI.Member(55, 0x126, "Parameters")] public bool HasDetonatableProjectileGenerator;
        [RTTI.Member(56, 0x127, "Parameters")] public bool IsCartridgeManualEjection;
        [RTTI.Member(57, 0x128, "Parameters")] public bool IsProceduralBoneHack;
        [RTTI.Member(58, 0x12C, "Parameters")] public float AimAssistValidDistance;
        [RTTI.Member(59, 0x130, "Parameters")] public float AimAssistValidAngle;
        [RTTI.Member(60, 0x134, "Parameters")] public float AimAssistValidRadius;
        [RTTI.Member(61, 0x138, "Parameters")] public float AdsAimAssistValidRadius;
        [RTTI.Member(62, 0x13C, "Parameters")] public float AdsAimAssistNearTurnRate;
        [RTTI.Member(63, 0x140, "Parameters")] public float AdsAimAssistFarTurnRate;
        [RTTI.Member(17, 0x148, "Parameters")] public Array<EDSMagazineId> Magazine;
        [RTTI.Member(18, 0x158, "Parameters")] public Array<EDSMagazineId> SubMagazine;
        [RTTI.Member(64, 0x168, "Parameters")] public Array<Ref<SoundResource>> ExSounds;
    }

    [RTTI.Serializable(0x8C9FB037EE9268AC, GameType.DS)]
    public class DSWeaponPartsParameter : CoreObject
    {
        [RTTI.Member(3, 0x20, "Parameters")] public EDSWeaponPartsId Id;
        [RTTI.Member(4, 0x28, "Parameters")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(5, 0x30, "Parameters")] public float Value;
        [RTTI.Member(6, 0x34, "Parameters")] public float ValueDecreaseSpeed;
        [RTTI.Member(7, 0x38, "Parameters")] public float ValueRecoverSpeed;
        [RTTI.Member(8, 0x3C, "Parameters")] public float ValueRecoverWait;
    }

    [RTTI.Serializable(0x9AF09488A0590FB1, GameType.DS)]
    public class DSWeaponSystem : RTTIObject
    {
    }

    [RTTI.Serializable(0x606379990627C1D6, GameType.DS)]
    public class DSWeaponSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8FE68C9699E6B6FF, GameType.DS)]
    public class DSWeatherDarkRainEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3D8AAA89BE13335B, GameType.DS)]
    public class DSWeatherDarkRainEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> BlendWeightCurveResource;
    }

    [RTTI.Serializable(0xEC16C374E6EB8782, GameType.DS)]
    public class DSWeatherEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x77C5F563B400D4FA, GameType.DS)]
    public class DSWeatherEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xBE95957455062165, GameType.DS)]
    public class DSWeatherEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<ParticleSystemResource> GazerCableEffectParticleSystem;
        [RTTI.Member(3, 0x28)] public Ref<ParticleSystemResource> RainbowEffectParticleSystem;
        [RTTI.Member(4, 0x30)] public Ref<ParticleSystemResource> FarRainEffectParticleSystem;
        [RTTI.Member(5, 0x38)] public Ref<ParticleSystemResource> HeavyRainEffectParticleSystem;
        [RTTI.Member(9, 0x40)] public Ref<ParticleSystemResource> LightningEffectParticleSystem;
        [RTTI.Member(6, 0x48)] public Ref<ScreenEffectResource> FadeIOScreenEffect;
        [RTTI.Member(7, 0x50)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(8, 0x60)] public Ref<LightResource> LightningLightResource;
        [RTTI.Member(16, 0x68, "FarLightning")] public FRange FarLightningInterval;
        [RTTI.Member(17, 0x70, "FarLightning")] public FRange FarLightningRadius;
        [RTTI.Member(18, 0x78, "FarLightning")] public FRange FarLightningIntensity;
        [RTTI.Member(19, 0x80, "FarLightning")] public FRange FarLightningDistance;
        [RTTI.Member(10, 0x88)] public Ref<DSWeatherEffectSequenceResource> StartDarkRainSequenceResource;
        [RTTI.Member(11, 0x90)] public Ref<DSWeatherEffectSequenceResource> EndDarkRainSequenceResource;
        [RTTI.Member(12, 0x98)] public Ref<DSWeatherEffectSequenceResource> EndDarkRainToSunnySequenceResource;
        [RTTI.Member(13, 0xA0)] public Ref<DSWeatherEffectSequenceResource> EndDarkRainToSunnyAbandoneSequenceResource;
        [RTTI.Member(14, 0xA8)] public Ref<DSWeatherEffectSequenceResource> EndDarkRainToHeavyRainSequenceResource;
    }

    [RTTI.Serializable(0x2226180EE29596CB, GameType.DS)]
    public class DSWeatherEffectSequenceResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<CurveResource> HeavyRainEmitter;
        [RTTI.Member(3, 0x28)] public Ref<CurveResource> DarkRainFactor;
        [RTTI.Member(4, 0x30)] public Ref<CurveResource> DarkHeavyRainFactor;
        [RTTI.Member(5, 0x38)] public Ref<CurveResource> FadeIOFactor;
        [RTTI.Member(6, 0x40)] public Ref<CurveResource> DarkRiverFactor;
    }

    [RTTI.Serializable(0xAB9FB10C796E262B, GameType.DS)]
    public class DSWeatherGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB36F951A1B9E86C5, GameType.DS)]
    public class DSWeatherRegionResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public int MapWidth;
        [RTTI.Member(4, 0x24, "General")] public int MapHeight;
        [RTTI.Member(5, 0x28, "General")] public float OriginOffsetX;
        [RTTI.Member(6, 0x2C, "General")] public float OriginOffsetY;
        [RTTI.Member(7, 0x30, "General")] public float MapScaleX;
        [RTTI.Member(8, 0x34, "General")] public float MapScaleY;
        [RTTI.Member(9, 0x38, "General")] public Array<uint8> MapData;
        [RTTI.Member(10, 0x48, "General")] public Array<Ref<DSWeatherWindParameter>> WindParameters;
    }

    [RTTI.Serializable(0xD3CCBC1D586E79C, GameType.DS)]
    public class DSWeatherSetup : WeatherSetup
    {
        [RTTI.Member(11, 0x110, "DS")] public EDSWeatherStateType StateType;
        [RTTI.Member(12, 0x111, "DS")] public bool IsWayback;
    }

    [RTTI.Serializable(0x6E6E2E4087362E18, GameType.DS)]
    public class DSWeatherSystem : WeatherSystem
    {
        [RTTI.Member(11, 0x810, "DS")] public Ref<ShaderResource> RainyMapStoreShaderResource;
        [RTTI.Member(12, 0x818, "DS")] public Array<Ref<ShaderResource>> CustomShaderResources;
        [RTTI.Member(13, 0x828, "DS")] public Ref<CurveResource> LightningCurve;
    }

    [RTTI.Serializable(0x39DD414BB35463AF, GameType.DS)]
    public class DSWeatherWetnessEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x303BB47DD4F7C071, GameType.DS)]
    public class DSWeatherWetnessEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> WetnessCurveResource;
        [RTTI.Member(9, 0x38, "Logic")] public bool KeepState;
    }

    [RTTI.Serializable(0xEB9578ED1A006D36, GameType.DS)]
    public class DSWeatherWindParameter : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public Vec2 Position;
        [RTTI.Member(4, 0x30, "General")] public float Radius;
        [RTTI.Member(5, 0x34, "General")] public float AttenuationDistance;
        [RTTI.Member(6, 0x38, "General")] public float MinSpeed;
        [RTTI.Member(7, 0x3C, "General")] public float MaxSpeed;
        [RTTI.Member(8, 0x40, "General")] public float BaseAngle;
        [RTTI.Member(9, 0x44, "General")] public float MerginAngle;
    }

    [RTTI.Serializable(0xB045197E2F68152C, GameType.DS)]
    public class DSWelcomeHoloAnimationDistanceSetting : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<uint32> FarDistanceAnimationIndex;
        [RTTI.Member(3, 0x30)] public Array<uint32> NearDistanceAnimationIndex;
        [RTTI.Member(4, 0x40)] public float FarDistanceBorder;
    }

    [RTTI.Serializable(0xA72EB2FEA98E3AFD, GameType.DS)]
    public class DSWelcomeHoloAnimationDistanceSettingSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6C026C54616508C8, GameType.DS)]
    public class DSWelcomeHoloAnimationSyncSet : Resource
    {
        [RTTI.Member(3, 0x20, "NPC1")] public Ref<DSSimpleAnimationComponentResource> Animation1;
        [RTTI.Member(6, 0x28, "NPC2")] public Ref<DSSimpleAnimationComponentResource> Animation2;
        [RTTI.Member(4, 0x30, "NPC1")] public Array<uint32> SyncIndex1;
        [RTTI.Member(7, 0x40, "NPC2")] public Array<uint32> SyncIndex2;
    }

    [RTTI.Serializable(0x5E4EED2031242B19, GameType.DS)]
    public class DSWelcomeHoloAnimationSyncSetSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDA829715C9B26933, GameType.DS)]
    public class DSWelcomeHoloComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD05B69219876213B, GameType.DS)]
    public class DSWelcomeHoloComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public float WelcomeRange;
        [RTTI.Member(4, 0x24, "DS")] public float WelcomeActionRange;
        [RTTI.Member(5, 0x28, "DS")] public float WelcomeAngle;
        [RTTI.Member(6, 0x2C, "DS")] public float NearAnimationIntervalMin;
        [RTTI.Member(7, 0x30, "DS")] public float NearAnimationIntervalMax;
        [RTTI.Member(8, 0x34, "DS")] public float ScaleFactor;
        [RTTI.Member(9, 0x38, "DS")] public float FIFOSpeedScale;
        [RTTI.Member(17, 0x3C, "DS")] public uint32 AngryMotionCount;
        [RTTI.Member(10, 0x40, "DS")] public bool ForConstructionObject;
        [RTTI.Member(11, 0x41, "DS")] public bool IsNotHuman;
        [RTTI.Member(13, 0x42, "DS")] public bool IsNotEchoTarget;
        [RTTI.Member(14, 0x43, "DS")] public bool AutoSpeack;
        [RTTI.Member(15, 0x44, "DS")] public bool IdleOnly;
        [RTTI.Member(16, 0x45, "DS")] public bool DontMoveWorldPosition;
        [RTTI.Member(12, 0x48, "DS")] public Array<Ref<NamedSoundResource>> SoundResources;
    }

    [RTTI.Serializable(0x789B0131D3DC816E, GameType.DS)]
    public class DSWelcomeHoloComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF4CCB967C3DF5B1F, GameType.DS)]
    public class DSWelcomeHoloEquipComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1F8A317175D8763E, GameType.DS)]
    public class DSWelcomeHoloEquipComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "DS")] public uint32 VisibleEventID;
    }

    [RTTI.Serializable(0x72AD6B3F2A8BB082, GameType.DS)]
    public class DSWhaleAttackPath : DSAttackPath
    {
        [RTTI.Member(9, 0x80, "DS")] public Ref<WorldNode> StartGuide;
        [RTTI.Member(10, 0x88, "DS")] public Ref<WorldNode> EndGuide;
        [RTTI.Member(11, 0x90, "DS")] public EDSWhaleAttackPathType Type;
        [RTTI.Member(12, 0x94, "DS")] public uint32 IdHash;
        [RTTI.Member(13, 0x98, "DS")] public float AttackStart;
        [RTTI.Member(14, 0x9C, "DS")] public float AttackEnd;
        [RTTI.Member(15, 0xA0, "DS")] public float AttackCenter;
        [RTTI.Member(16, 0xB0, "DS")] public Vec3 AttackStartPos;
        [RTTI.Member(17, 0xC0, "DS")] public Vec3 AttackEndPos;
        [RTTI.Member(18, 0xD0, "DS")] public Vec3 AttackCenterPos;
        [RTTI.Member(19, 0xE0, "DS")] public Vec3 AttackCenterShift;
    }

    [RTTI.Serializable(0x5CED1E818B24978C, GameType.DS)]
    public class DSWhaleBombComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x37189D967DDBC0AA, GameType.DS)]
    public class DSWhaleBombComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(3, 0x30)] public Ref<ParticleSystemResource> ExplosionParticleSystem;
        [RTTI.Member(4, 0x38)] public Array<Ref<EffectComponentResource>> EffectComponentResources;
        [RTTI.Member(5, 0x48)] public EDSAttackId AttackId;
        [RTTI.Member(6, 0x4A)] public bool IsNeedAlignmentOnTerrainForExplosion;
    }

    [RTTI.Serializable(0x13CD5060D4B51423, GameType.DS)]
    public class DSWhaleMovePath : Route
    {
        [RTTI.Member(9, 0xB0, "DS")] public uint32 IdHash;
        [RTTI.Member(10, 0xB4, "DS")] public bool IsFly;
        [RTTI.Member(11, 0xB5, "DS")] public EDSWhaleMovePathType PathType;
        [RTTI.Member(12, 0xB8, "DS")] public Array<DSWhaleMovePathActionEvent> ActionEvents;
        [RTTI.Member(13, 0xC8, "DS")] public float FlyStartOffset;
        [RTTI.Member(14, 0xCC, "DS")] public float FlyEndOffset;
    }

    [RTTI.Serializable(0x395990A0AFFC1DD8, GameType.DS)]
    public class DSWhaleMovePathActionEvent
    {
        [RTTI.Member(0, 0x0)] public float Offset;
        [RTTI.Member(1, 0x4)] public EDSWhaleMovePathActionType ActionType;
    }

    [RTTI.Serializable(0x14F835FF247D0591, GameType.DS)]
    public class DSWhaleMovePathNode : RouteNode
    {
    }

    [RTTI.Serializable(0xE62F0A15AC09505D, GameType.DS)]
    public class DSWhaleMovePathSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x20D8B6A36C186AAB, GameType.DS)]
    public class DSWheelHologramMover : Mover
    {
    }

    [RTTI.Serializable(0xB06F0A98EC14BC8D, GameType.DS)]
    public class DSWheelHologramMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x90D86948946BF31D, GameType.DS)]
    public class DSWorldMapHoloComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBFF5D656FE16C225, GameType.DS)]
    public class DSWorldMapHoloComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<StaticMeshResource> CursorMainFocused0;
        [RTTI.Member(3, 0x28)] public Ref<StaticMeshResource> CursorMainFocused1;
        [RTTI.Member(4, 0x30)] public Ref<StaticMeshResource> CursorMain;
        [RTTI.Member(5, 0x38)] public Ref<StaticMeshResource> CursorSubFocused;
        [RTTI.Member(6, 0x40)] public Ref<StaticMeshResource> CursorSub;
        [RTTI.Member(8, 0x48)] public Ref<EntityResource> CursorMainFocused0Entity;
        [RTTI.Member(9, 0x50)] public Ref<EntityResource> CursorMainFocused1Entity;
        [RTTI.Member(10, 0x58)] public Ref<EntityResource> CursorSubFocusedEntity;
        [RTTI.Member(7, 0x60)] public Array<GGUUID> DeliveryPoints;
    }

    [RTTI.Serializable(0x48AD472F0FFC95A, GameType.DS)]
    public class DSWorldMapHoloComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3A734D9FE668EB6C, GameType.DS)]
    public class DSWorldMapHoloMeshBoosterComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2F4FF60E47C2C3F6, GameType.DS)]
    public class DSWorldMapHoloMeshBoosterComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float MinLODDistance;
        [RTTI.Member(3, 0x24)] public int DesiredTextureMip;
    }

    [RTTI.Serializable(0xB759184E3E8237CB, GameType.DS)]
    public class DSWorldNodeEditableController
    {
    }

    [RTTI.Serializable(0xD4AE177F41EECDD0, GameType.DS)]
    public class DSZiplineConfig : CoreObject
    {
        [RTTI.Member(2, 0x20)] public float DistanceToRealize;
        [RTTI.Member(3, 0x24)] public float DistanceToUnrealize;
        [RTTI.Member(4, 0x28)] public float DistanceToGoUp;
        [RTTI.Member(5, 0x2C)] public float DistanceToGoDown;
        [RTTI.Member(6, 0x30)] public Array<Ref<ArtPartsDataResource>> ArtPartsDataResources;
        [RTTI.Member(7, 0x40)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(8, 0x48)] public Ref<LaserBeamResource> LaserBeamResource;
        [RTTI.Member(9, 0x50)] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(10, 0x60)] public Array<Ref<SoundResource>> Sounds;
    }

    [RTTI.Serializable(0x746747CBC89401C7, GameType.DS)]
    public class DSZiplineConstructionPoint : DSConstructionPoint
    {
    }

    [RTTI.Serializable(0xEFB5C002927C5255, GameType.DS)]
    public class DSZiplineConstructionPointConfig : DSConstructionPointConfig
    {
        [RTTI.Member(115, 0x490, "Zipline")] public float ConnectCheckHeightOffset;
        [RTTI.Member(116, 0x494, "Zipline")] public float ConnectCheckSphereSize;
        [RTTI.Member(117, 0x498, "Zipline")] public float PassableRadius;
        [RTTI.Member(118, 0x49C, "Zipline")] public float PassableRadiusLv2;
        [RTTI.Member(119, 0x4A0, "Zipline")] public float DistanceToOpen;
        [RTTI.Member(120, 0x4B0, "Zipline")] public Vec3 CheckVectorToGetOff;
        [RTTI.Member(121, 0x4C0, "Zipline")] public float LikeNumPerKg;
        [RTTI.Member(122, 0x4C4, "Zipline")] public float LikeNumPerMeter;
        [RTTI.Member(123, 0x4C8, "Zipline")] public float RideOffTime;
    }

    [RTTI.Serializable(0x860FEACC96CC20C2, GameType.DS)]
    public class DSZiplineEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAAA7F3EDB3CD8C19, GameType.DS)]
    public class DSZiplineEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<LaserBeamResource> LaserBeamResource;
        [RTTI.Member(3, 0x28)] public Ref<LaserBeamResource> LaserBeamResourceBlue;
        [RTTI.Member(4, 0x30)] public Ref<LaserBeamResource> LaserBeamResourceRed;
        [RTTI.Member(5, 0x38)] public Array<Ref<ParticleSystemResource>> Particles;
        [RTTI.Member(6, 0x48)] public Array<Ref<SoundResource>> Sounds;
    }

    [RTTI.Serializable(0xF40B0FF746DE1343, GameType.DS)]
    public class DSZiplineLocator : DSLocator
    {
        [RTTI.Member(7, 0x70)] public uint32 Id;
        [RTTI.Member(6, 0x74)] public EDSZiplineType Type;
        [RTTI.Member(8, 0x76)] public EDSArea Area;
        [RTTI.Member(9, 0x78)] public bool InitInactive;
        [RTTI.Member(10, 0x79)] public bool InitInvincible;
    }

    [RTTI.Serializable(0xB193B14DD385F777, GameType.DS)]
    public class DamageActorEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xBF80461ED4F72098, GameType.DS)]
    public class DamageActorEventResource : EventResource
    {
        [RTTI.Member(6, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(7, 0x38, "Logic")] public Ref<LocatorResource> SourceLocatorResource;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(9, 0x48, "Logic")] public float DamageAmount;
        [RTTI.Member(10, 0x50, "Logic")] public Ref<DestructibilityPart> DamagePart;
    }

    [RTTI.Serializable(0x4943BEEB6E3A791A, GameType.DS)]
    public class DamageAreaComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x80D9D2A104D3D42, GameType.DS)]
    public class DamageAreaComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<DamageAreaHelperResource>> DamageAreas;
        [RTTI.Member(4, 0x30, "Logic")] public bool RemoveEntityWhenDone;
    }

    [RTTI.Serializable(0xEA8B0EF8E5DEACCF, GameType.DS)]
    public class DamageAreaHelperResource : Resource
    {
        [RTTI.Member(2, 0x20)] public String HelperName;
        [RTTI.Member(3, 0x28)] public Ref<DamageAreaResource> DamageArea;
    }

    [RTTI.Serializable(0x2E1C9C1DD843E765, GameType.DS)]
    public class DamageAreaInstance : WorldNode
    {
    }

    [RTTI.Serializable(0x261A9DEC3291F0DE, GameType.DS)]
    public class DamageAreaManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<DamageTypeConflict>> DamageTypeConflicts;
    }

    [RTTI.Serializable(0x41442239B796328B, GameType.DS)]
    public class DamageAreaResource : Resource
    {
        [RTTI.Member(3, 0x20, "Damage")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(4, 0x30, "Damage")] public Array<Ref<DamageSettings>> InitialHitDamageSettings;
        [RTTI.Member(6, 0x40, "Damage")] public bool IgnoreAttachedEntities;
        [RTTI.Member(7, 0x44, "Damage")] public float Interval;
        [RTTI.Member(8, 0x48, "Damage")] public float MaxContinuousDamageDuration;
        [RTTI.Member(21, 0x4C, "Damage")] public bool UseRaycastTargeting;
        [RTTI.Member(16, 0x50, "Damage")] public float Radius;
        [RTTI.Member(9, 0x58, "Damage")] public Ref<CurveResource> RadiusOverTime;
        [RTTI.Member(10, 0x60, "Damage")] public bool RescaleDistanceCurvesToRadius;
        [RTTI.Member(17, 0x70, "Damage")] public BoundingBox3 Box;
        [RTTI.Member(11, 0x90, "Damage")] public float LifeTime;
        [RTTI.Member(12, 0x94, "Damage")] public bool ForceKill;
        [RTTI.Member(18, 0x95, "Damage")] public bool CheapCollisionCheck;
        [RTTI.Member(13, 0x98, "Damage")] public float Density;
        [RTTI.Member(19, 0x9C, "Damage")] public bool OnlyDamageEnemyFaction;
        [RTTI.Member(20, 0x9D, "Damage")] public bool ShouldIgnoreInstigator;
        [RTTI.Member(14, 0x9E, "Damage")] public bool MergeWithOverlappingAreas;
        [RTTI.Member(15, 0x9F, "Damage")] public bool StartsAttackEventChain;
        [RTTI.Member(5, 0xA0, "Damage")] public Ref<AreaTargetingSettings> TargetingSettings;
        [RTTI.Member(23, 0xA8, "AI")] public bool IsDangerAreaDisabled;
        [RTTI.Member(24, 0xAC, "AI")] public EAIDangerAreaType DangerAreaType;
        [RTTI.Member(25, 0xB0, "AI")] public float DangerAreaRadius;
        [RTTI.Member(26, 0xC0, "AI")] public BoundingBox3 DangerAreaBox;
    }

    [RTTI.Serializable(0x43F5139417E418E8, GameType.DS)]
    public class DamageCausedReportComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9527EAE6958BFC02, GameType.DS)]
    public class DamageCausedReportComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xB205DE5080E3A02D, GameType.DS)]
    public class DamageDealtModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA75A7312ADE1021, GameType.DS)]
    public class DamageDealtModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x20, "Filtering")] public TagPropertyLinkCollection RequiredTags;
        [RTTI.Member(6, 0x30, "Filtering")] public Array<Ref<DamageTypeResource>> DamageTypeResource;
        [RTTI.Member(7, 0x40, "Filtering")] public Array<GGUUID> TargetTypesUUIDs;
        [RTTI.Member(8, 0x50, "Filtering")] public Array<Ref<TagProperty>> DestructibilityPartTags;
        [RTTI.Member(10, 0x60, "Modifiers")] public float AmountMultiplier;
        [RTTI.Member(11, 0x64, "Modifiers")] public float AmountModifier;
        [RTTI.Member(12, 0x68, "Modifiers")] public float SeverityMultiplier;
        [RTTI.Member(13, 0x6C, "Modifiers")] public float SeverityModifier;
        [RTTI.Member(3, 0x70, "Logic")] public float AutoExpiryDuration;
    }

    [RTTI.Serializable(0x84884ACE549BEE17, GameType.DS)]
    public class DamageEntityAction : EntityAction
    {
        [RTTI.Member(5, 0x28, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(4, 0x38, "Logic")] public bool Kill;
        [RTTI.Member(6, 0x3C, "Logic")] public float Amount;
        [RTTI.Member(7, 0x40, "Logic")] public float ImpactSeverity;
        [RTTI.Member(8, 0x48, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0x8481AB30ACAD38AE, GameType.DS)]
    public class DamageModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x283BCAC693034A9C, GameType.DS)]
    public class DamageModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float DamageTakenModifier;
        [RTTI.Member(4, 0x24, "Logic")] public float SeverityModifier;
        [RTTI.Member(5, 0x28, "Logic")] public bool MakeInvulnerable;
        [RTTI.Member(6, 0x2C, "Logic")] public EDamageModifierTypeFilter DamageModifierTypeFilter;
        [RTTI.Member(7, 0x30, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(8, 0x40, "Logic")] public Array<Ref<TagProperty>> DestructibilityPartTags;
        [RTTI.Member(9, 0x50, "Logic")] public EDamageModifierTypeFilter PartTagsTypeFilter;
    }

    [RTTI.Serializable(0x793992C5F7EFB3C3, GameType.DS)]
    public class DamageNullifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBFA51D4047A94724, GameType.DS)]
    public class DamageNullifierComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xC6AC8ED4CD1293FE, GameType.DS)]
    public class DamageOnImpactComponent : ReactOnImpactComponent
    {
    }

    [RTTI.Serializable(0x4762A7A0AD96B170, GameType.DS)]
    public class DamageOnImpactComponentResource : ReactOnImpactComponentResource
    {
        [RTTI.Member(9, 0x30, "Damage")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(10, 0x40, "Damage")] public bool ForceKill;
        [RTTI.Member(11, 0x41, "Damage")] public bool OnlyDamageEnemyFaction;
    }

    [RTTI.Serializable(0x5204E6D1A320F2EC, GameType.DS)]
    public class DamageOverTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x940031D8D16A0E72, GameType.DS)]
    public class DamageOverTimeComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(4, 0x30, "Logic")] public float Duration;
        [RTTI.Member(5, 0x34, "Logic")] public float Interval;
    }

    [RTTI.Serializable(0xF83D4B84D8C2ED8E, GameType.DS)]
    public class DamageOverTimeComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDB8C9993FE37DC36, GameType.DS)]
    public class DamagePassOnComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8D4203E5086E447A, GameType.DS)]
    public class DamagePassOnComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool ShouldPassOnKillDamage;
        [RTTI.Member(4, 0x21, "Logic")] public bool IgnoreExplosions;
        [RTTI.Member(5, 0x22, "Logic")] public bool IgnoreAreaDamage;
        [RTTI.Member(6, 0x23, "Logic")] public bool SendDamageCaused;
    }

    [RTTI.Serializable(0xC6323662239EF2F3, GameType.DS)]
    public class DamagePassOnComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x843454FA3D1E4B8B, GameType.DS)]
    public class DamagePassOnData
    {
        [RTTI.Member(0, 0x0)] public Ref<DestructibilityPart> Part;
        [RTTI.Member(1, 0x8)] public float Multiplier;
    }

    [RTTI.Serializable(0x953EE2A1EBDD8C26, GameType.DS)]
    public class DamageSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Damage")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(4, 0x28, "Damage")] public float DamageAmount;
        [RTTI.Member(7, 0x2C, "Physics")] public float ImpactSeverity;
        [RTTI.Member(9, 0x30, "Physics")] public float ImpactImpulse;
        [RTTI.Member(11, 0x34, "Physics")] public float ImpactImpulseHumanoidFactor;
        [RTTI.Member(5, 0x38, "Damage")] public Ref<CurveResource> DamageOverDistance;
        [RTTI.Member(8, 0x40, "Physics")] public Ref<CurveResource> ImpactSeverityOverDistance;
        [RTTI.Member(10, 0x48, "Physics")] public Ref<CurveResource> ImpactImpulseOverDistance;
    }

    [RTTI.Serializable(0x32802DBFB26E0DC3, GameType.DS)]
    public class DamageSettingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD5B8F59FBA76A790, GameType.DS)]
    public class DamageStatDisplayEntry : StatDisplayEntry
    {
        [RTTI.Member(7, 0x30, "General")] public Ref<DamageSettings> DamageSettings;
    }

    [RTTI.Serializable(0x34AD55C5410D18CA, GameType.DS)]
    public class DamageStatModifierResource : StatModifierResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<TagProperty>> AffectedPartTags;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<DamageTypeResource>> AffectedDamageTypeResources;
        [RTTI.Member(5, 0x40, "Logic")] public Ref<DamageTypeGroup> AffectedDamageTypeGroup;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<CurveResource> RatingToDamageCurve;
        [RTTI.Member(7, 0x50, "Logic")] public Ref<CurveResource> RatingToSeverityCurve;
        [RTTI.Member(8, 0x58, "Logic")] public Ref<CurveResource> RatingToImpactImpulseCurve;
    }

    [RTTI.Serializable(0x28AAAF60EB423FD3, GameType.DS)]
    public class DamageTypeConflict : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<DamageTypeResource> DamageType;
        [RTTI.Member(4, 0x28, "Logic")] public Array<CompetingDamageType> CompetingDamageTypes;
    }

    [RTTI.Serializable(0xB82D5EBB254511A6, GameType.DS)]
    public class DamageTypeGroup : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DamageTypeResource>> DamageTypeResources;
    }

    [RTTI.Serializable(0xF2520FBFB7BDF7C9, GameType.DS)]
    public class DamageTypeGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x844E0F2D968DBFEA, GameType.DS)]
    public class DamageTypeMultiplier
    {
        [RTTI.Member(1, 0x0, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(2, 0x8, "Logic")] public float Multiplier;
    }

    [RTTI.Serializable(0xDDCDB908822811AC, GameType.DS)]
    public class DamageTypeResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<DamageTypeResource> BaseDamageTypeResource;
        [RTTI.Member(6, 0x28, "AI")] public Ref<AIHapticStimulusResource> HapticStimulus;
        [RTTI.Member(4, 0x30, "General")] public ETriState EligibleForHeadshots;
    }

    [RTTI.Serializable(0xD27F9A9596C95A37, GameType.DS)]
    public class DamageTypeResourceSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<DamageTypeResource> DefaultDamageTypeResource;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<DamageTypeResource> PhysicsDamageTypeResource;
    }

    [RTTI.Serializable(0x507C875F80807F32, GameType.DS)]
    public class DamageTypeResourceSettingsGame : DamageTypeResourceSettings
    {
        [RTTI.Member(7, 0x40, "Logic")] public Array<Ref<DamageTypeResource>> HeadshotDamageTypeResources;
        [RTTI.Member(8, 0x50, "Logic")] public Array<Ref<DamageTypeResource>> StealthKillDamageTypeResources;
        [RTTI.Member(9, 0x60, "Logic")] public Array<Ref<DamageTypeResource>> IgnoredByAIDamageTypeResources;
    }

    [RTTI.Serializable(0x2B66A4C574616483, GameType.DS)]
    public class DamageTypeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x83423D4FF7C0461C, GameType.DS)]
    public class DangerAreaCapsuleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4528CA68EA07A89F, GameType.DS)]
    public class DangerAreaCapsuleComponentResource : DangerAreaComponentResource
    {
        [RTTI.Member(4, 0x30)] public float RadiusBase;
        [RTTI.Member(5, 0x34)] public float Length;
        [RTTI.Member(6, 0x38)] public float RadiusOut;
    }

    [RTTI.Serializable(0x66DFFC000B6D5ED7, GameType.DS)]
    public class DangerAreaComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String HelperName;
        [RTTI.Member(3, 0x28)] public EAIDangerAreaType DangerType;
    }

    [RTTI.Serializable(0x80CD94D723CED764, GameType.DS)]
    public class DangerAreaOrientedBoxComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEC3236BB30F5950F, GameType.DS)]
    public class DangerAreaOrientedBoxComponentResource : DangerAreaComponentResource
    {
        [RTTI.Member(4, 0x30)] public Vec3 Extents;
    }

    [RTTI.Serializable(0x18E3DE4CED921B23, GameType.DS)]
    public class DangerAreaSphereComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1D797BF91606A005, GameType.DS)]
    public class DangerAreaSphereComponentResource : DangerAreaComponentResource
    {
        [RTTI.Member(4, 0x30)] public float Radius;
    }

    [RTTI.Serializable(0x7062D1C8553784EC, GameType.DS)]
    public class DataNode
    {
    }

    [RTTI.Serializable(0xF37474E14DBBF4D7, GameType.DS)]
    public class DataSource : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xCCEA0E0E8F6BB520, GameType.DS)]
    public class DataSourceResource : Resource
    {
        [RTTI.Member(3, 0x20, "Properties")] public int UpdateTimeMs;
        [RTTI.Member(4, 0x24, "Properties")] public int CacheExpiryMs;
    }

    [RTTI.Serializable(0x934FB8BD08CB3411, GameType.DS)]
    public class DataTag : Tag
    {
    }

    [RTTI.Serializable(0xBA185718C9CC7933, GameType.DS)]
    public class DataTrackedQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0x6D0C7E8A3DE364B8, GameType.DS)]
    public class DeathCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0x54CF425E99DF7CF0, GameType.DS)]
    public class DeathCameraEntityRep : CameraEntityRep
    {
    }

    [RTTI.Serializable(0x4F216C3BBD201DB, GameType.DS)]
    public class DeathCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(55, 0x1B8, "Logic")] public float ActivateBlendTime;
        [RTTI.Member(56, 0x1BC, "Logic")] public float DeactivateBlendTime;
    }

    [RTTI.Serializable(0xEF6E294115FCA173, GameType.DS)]
    public class DebugGameActorUnitOverrider : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "GameActor")] public uint32 MaxInstanceCount;
        [RTTI.Member(4, 0x24, "GameActor")] public uint32 MaxEntityCount;
        [RTTI.Member(5, 0x28, "GameActor")] public uint32 MaxImpostorCount;
        [RTTI.Member(6, 0x30, "GameActor")] public Ref<GameActorUnitResource> TargetUnit;
    }

    [RTTI.Serializable(0x13BF1953598CF27A, GameType.DS)]
    public class DebugSettings : RTTIObject
    {
    }

    [RTTI.Serializable(0x9FE8627B2C658892, GameType.DS)]
    public class DebugToolGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x171F3D447689BA77, GameType.DS)]
    public class DecalManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x2A6C64EDBD99AC76, GameType.DS)]
    public class DecalResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public int MaxDecals;
        [RTTI.Member(4, 0x24, "General")] public int DecalThreshold;
        [RTTI.Member(5, 0x28, "General")] public bool RandomRotation;
        [RTTI.Member(6, 0x2C, "General")] public float MinSize;
        [RTTI.Member(7, 0x30, "General")] public float MaxSize;
        [RTTI.Member(8, 0x34, "General")] public float FadeInTime;
        [RTTI.Member(9, 0x3C, "General")] public float FadeTime;
        [RTTI.Member(10, 0x44, "General")] public bool FadeZeroToOne;
        [RTTI.Member(11, 0x45, "General")] public bool ClipDecal;
        [RTTI.Member(12, 0x48, "General")] public float MaxUpClipAngle;
        [RTTI.Member(13, 0x50, "General")] public float OverlapRatio;
        [RTTI.Member(14, 0x54, "General")] public bool AllowStretching;
        [RTTI.Member(15, 0x55, "General")] public bool HeightInfoInColor;
        [RTTI.Member(16, 0x58, "General")] public EDecalAlignment Alignment;
        [RTTI.Member(17, 0x5C, "General")] public EDecalProjectionMode ProjectionMode;
        [RTTI.Member(18, 0x60, "General")] public DrawableCullInfo CullInfo;
        [RTTI.Member(22, 0x68, "Rendering")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(20, 0x70, "Rendering")] public int mFrameCountU;
        [RTTI.Member(21, 0x74, "Rendering")] public int mFrameCountV;
        [RTTI.Member(24, 0x78, "MeshInstancing")] public Ref<StaticMeshResource> MeshResource;
        [RTTI.Member(26, 0x84, "MeshInstancing")] public float MeshSizeRescale;
        [RTTI.Member(27, 0x88, "MeshInstancing")] public float MeshVisualRadius;
        [RTTI.Member(28, 0x8C, "MeshInstancing")] public bool MeshUsingWorldData;
        [RTTI.Member(25, 0x90, "MeshInstancing")] public Array<DecalShaderVariable> MeshShaderVariables;
    }

    [RTTI.Serializable(0x4A60C1EDC3C57BFD, GameType.DS)]
    public class DecalShaderVariable
    {
        [RTTI.Member(0, 0x0, true)] public String VariableID;
        [RTTI.Member(2, 0x8)] public EDecalVariableSource Source;
        [RTTI.Member(1, 0xC)] public uint32 VariableIDHash;
        [RTTI.Member(3, 0x10)] public float Default;
    }

    [RTTI.Serializable(0x79FA2C32E0362D2C, GameType.DS)]
    public class DefaultDebugUISystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> TransformRGBA;
    }

    [RTTI.Serializable(0xD3E817F98ABAF8F6, GameType.DS)]
    public class DefaultShadersSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> blitColorDepth;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> blitColorDepthRT;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> blitDepth;
    }

    [RTTI.Serializable(0x10C5765482222434, GameType.DS)]
    public class DefaultTexturesSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<Texture> BlackTexture;
        [RTTI.Member(3, 0x28)] public Ref<Texture> BlackTransparentTexture;
        [RTTI.Member(4, 0x30)] public Ref<Texture> Black3DTexture;
        [RTTI.Member(5, 0x38)] public Ref<Texture> WhiteTexture;
        [RTTI.Member(7, 0x40)] public Ref<Texture> GrayTexture;
        [RTTI.Member(8, 0x48)] public Ref<Texture> GrayLinearTexture;
        [RTTI.Member(6, 0x50)] public Ref<Texture> GrainTexture;
        [RTTI.Member(9, 0x58)] public Ref<Texture> DepthMax16bppTexture;
        [RTTI.Member(10, 0x60)] public Ref<Texture> DepthNegMaxFloat32Texture;
        [RTTI.Member(11, 0x68)] public Ref<Texture> EnvCubeTexture;
        [RTTI.Member(12, 0x70)] public Ref<Texture> Noise3DN;
        [RTTI.Member(13, 0x78)] public Ref<Texture> FogHeightMap;
        [RTTI.Member(14, 0x80)] public Ref<Texture> ScreenSpaceMaskTexture;
        [RTTI.Member(15, 0x88)] public Ref<Texture> White3DTexture;
        [RTTI.Member(16, 0x90)] public Ref<Texture> KJPAtmosphericInscatterTexture;
        [RTTI.Member(17, 0x98)] public Ref<Texture> KJPFogNoiseTexture;
        [RTTI.Member(18, 0xA0)] public Ref<Texture> OceanNoiseTexture;
    }

    [RTTI.Serializable(0x142A2D62DE04D02E, GameType.DS)]
    public class DefendAreaUserComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7E1B1AE64A924FB7, GameType.DS)]
    public class DefendAreaUserComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2E1603AB1FACC119, GameType.DS)]
    public class DefendSpawnCommand : SpawnCommand
    {
        [RTTI.Member(5, 0x60, "Logic")] public Ref<AIDefendAreaSet> DefendAreaSet;
    }

    [RTTI.Serializable(0xB692D814A130DDA2, GameType.DS)]
    public class DelayGravityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6BB6F034DE16D6F4, GameType.DS)]
    public class DelayGravityComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float DelayTime;
    }

    [RTTI.Serializable(0x7E0A52BC846FEF81, GameType.DS)]
    public class DelayedAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(5, 0x30, "Logic")] public float Delay;
        [RTTI.Member(6, 0x34, "Logic")] public float RandomDelay;
    }

    [RTTI.Serializable(0x10347DC0ACE4181F, GameType.DS)]
    public class DelayedDeathComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8EDD2073987FFAB8, GameType.DS)]
    public class DelayedDeathComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String DelayDeathAnimTagName;
        [RTTI.Member(4, 0x28, "Logic")] public String DelayDeathAnimVarName;
    }

    [RTTI.Serializable(0x16DF41214B97DFF9, GameType.DS)]
    public class DelayedRemoveEntityComponent : EntityComponent
    {
        [RTTI.Member(6, 0x50, "Logic")] public float Delay;
    }

    [RTTI.Serializable(0x5057750F0A3B3F7B, GameType.DS)]
    public class DelayedRemoveEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Delay;
    }

    [RTTI.Serializable(0x513FB882D6A97D41, GameType.DS)]
    public class DensityAdd : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DensityNodeBase>> Inputs;
    }

    [RTTI.Serializable(0x31B283C1D38CEF86, GameType.DS)]
    public class DensityClamp : DensityNodeBase
    {
        [RTTI.Member(3, 0x20)] public float Min;
        [RTTI.Member(2, 0x24)] public float Max;
        [RTTI.Member(4, 0x28)] public Ref<DensityNodeBase> InputDensity;
    }

    [RTTI.Serializable(0x3F0DA7E493DDFC9, GameType.DS)]
    public class DensityCompare : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<DensityNodeBase> Input;
        [RTTI.Member(3, 0x28)] public float TestValue;
        [RTTI.Member(5, 0x2C)] public float ValueIfLower;
        [RTTI.Member(4, 0x30)] public float ValueIfHigher;
    }

    [RTTI.Serializable(0x749FD2A3F717A2FC, GameType.DS)]
    public class DensityConstant : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public float Value;
    }

    [RTTI.Serializable(0xB27D23F9BF9E9881, GameType.DS)]
    public class DensityConstantReference : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public float Value;
    }

    [RTTI.Serializable(0xC2756D3F25E2AE69, GameType.DS)]
    public class DensityCurveLookup : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<DensityNodeBase> Map;
        [RTTI.Member(3, 0x28)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x811D30370B6D500D, GameType.DS)]
    public class DensityFilter : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<DensityNodeBase> Input;
        [RTTI.Member(3, 0x28)] public String Description;
    }

    [RTTI.Serializable(0xC1461CA09F045118, GameType.DS)]
    public class DensityGraphProgram : RTTIRefObject
    {
        [RTTI.Member(3, 0x20)] public uint64 WorldDataUsageMask;
        [RTTI.Member(2, 0x28)] public uint64 TextureUsageMask;
        [RTTI.Member(4, 0x40)] public Ref<ShaderResource> BakedShader;
        [RTTI.Member(5, 0x90)] public EDensityJobType BakedShaderJobType;
        [RTTI.Member(6, 0x98)] public MurmurHashValue Hash;
    }

    [RTTI.Serializable(0x108B4758D357F24F, GameType.DS)]
    public class DensityHeightConcavity : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public float SampleRadius;
    }

    [RTTI.Serializable(0xBCF40DDA390F74FF, GameType.DS)]
    public class DensityHeightConvexity : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public float SampleRadius;
    }

    [RTTI.Serializable(0x367E65A331C03EC4, GameType.DS)]
    public class DensityHeightMap : DensityNodeBase
    {
        [RTTI.Member(3, 0x20)] public Ref<CurveResource> CurveSlope;
        [RTTI.Member(2, 0x28)] public Ref<CurveResource> CurveHeight;
    }

    [RTTI.Serializable(0xA95310017E3853E, GameType.DS)]
    public class DensityInvert : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<DensityNodeBase> InputDensity;
    }

    [RTTI.Serializable(0x6FB5226338A1E082, GameType.DS)]
    public class DensityMaskMap : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<Texture> Texture;
        [RTTI.Member(4, 0x28)] public Ref<CurveResource> Curve;
        [RTTI.Member(3, 0x30)] public ETextureChannel Channel;
    }

    [RTTI.Serializable(0x829FB7BA0ADA1F4, GameType.DS)]
    public class DensityMax : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DensityNodeBase>> Inputs;
    }

    [RTTI.Serializable(0xFB7F1D8D69ABC6F3, GameType.DS)]
    public class DensityMin : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DensityNodeBase>> Inputs;
    }

    [RTTI.Serializable(0xCCE2F79DC1A270AE, GameType.DS)]
    public class DensityMultiply : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DensityNodeBase>> Inputs;
    }

    [RTTI.Serializable(0x57B44415280B09E7, GameType.DS)]
    public class DensityNodeBase : Resource
    {
    }

    [RTTI.Serializable(0x2E45752CDDEE970B, GameType.DS)]
    public class DensityPower : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<DensityNodeBase> InBaseValue;
        [RTTI.Member(3, 0x28)] public Ref<DensityNodeBase> InExponentValue;
    }

    [RTTI.Serializable(0xAC355A76B299DE0E, GameType.DS)]
    public class DensitySetRange : DensityNodeBase
    {
        [RTTI.Member(3, 0x20)] public float InMin;
        [RTTI.Member(2, 0x24)] public float InMax;
        [RTTI.Member(5, 0x28)] public float OutMin;
        [RTTI.Member(4, 0x2C)] public float OutMax;
        [RTTI.Member(6, 0x30)] public bool Clamp;
        [RTTI.Member(7, 0x38)] public Ref<DensityNodeBase> InputDensity;
    }

    [RTTI.Serializable(0xA502882931193201, GameType.DS)]
    public class DensitySubtract : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<DensityNodeBase> BaseValue;
        [RTTI.Member(3, 0x28)] public Ref<DensityNodeBase> SubtractValue;
    }

    [RTTI.Serializable(0xB763C94B9353118F, GameType.DS)]
    public class DensityTileU : DensityNodeBase
    {
    }

    [RTTI.Serializable(0x3928AEEEC302E869, GameType.DS)]
    public class DensityTileV : DensityNodeBase
    {
    }

    [RTTI.Serializable(0xDC7397460EC96DD7, GameType.DS)]
    public class DensityWorldDataMap : DensityNodeBase
    {
        [RTTI.Member(2, 0x20)] public Ref<CurveResource> Curve;
        [RTTI.Member(3, 0x28)] public Ref<WorldDataType> WorldDataType;
        [RTTI.Member(4, 0x30)] public ETextureChannel Channel;
    }

    [RTTI.Serializable(0xC3277660905C7FD0, GameType.DS)]
    public class DepthOfFieldSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public float NearFuzzy;
        [RTTI.Member(2, 0x4, "Settings")] public float NearSharp;
        [RTTI.Member(3, 0x8, "Settings")] public float FarSharp;
        [RTTI.Member(4, 0xC, "Settings")] public float FarFuzzy;
        [RTTI.Member(5, 0x10, "Settings")] public float MaxFuzzyNear;
        [RTTI.Member(6, 0x14, "Settings")] public float MaxFuzzyFar;
        [RTTI.Member(7, 0x18, "Settings")] public float Cutoff;
        [RTTI.Member(8, 0x1C, "Settings")] public EDepthOfFieldQuality Quality;
        [RTTI.Member(10, 0x1D, "Formula")] public bool Enabled;
        [RTTI.Member(11, 0x20, "Formula")] public float Aperture;
        [RTTI.Member(12, 0x24, "Formula")] public float FocusDistance;
        [RTTI.Member(13, 0x28, "Formula")] public float HorizontalFOV;
        [RTTI.Member(14, 0x2C, "Formula")] public float FocusRegionScale;
        [RTTI.Member(15, 0x30, "Formula")] public float NearFuzzyScale;
        [RTTI.Member(16, 0x34, "Formula")] public float FarFuzzyScale;
        [RTTI.Member(18, 0x38, "Options")] public float LayerOcclusion;
    }

    [RTTI.Serializable(0x94B13E1A9BC81AE8, GameType.DS)]
    public class DepthOfFieldSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public DepthOfFieldSettings DepthOfFieldSettings;
    }

    [RTTI.Serializable(0x4C273C75876E4A6A, GameType.DS)]
    public class DestroyComponentAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EntityComponentResource> ComponentResource;
        [RTTI.Member(5, 0x30, "Logic")] public bool DestroyMultiple;
    }

    [RTTI.Serializable(0xEBC3AB5000535991, GameType.DS)]
    public class Destructibility : EntityComponent
    {
    }

    [RTTI.Serializable(0x3BCBA5303BA231B5, GameType.DS)]
    public class DestructibilityConstraint : Resource
    {
        [RTTI.Member(2, 0x20)] public bool Enabled;
        [RTTI.Member(3, 0x28)] public Ref<DestructibilityPart> PartA;
        [RTTI.Member(4, 0x30)] public Ref<DestructibilityPart> PartB;
        [RTTI.Member(5, 0x38)] public Ref<PhysicsConstraintResource> Resource;
        [RTTI.Member(6, 0x40)] public String ReferenceFrameHelperNode;
    }

    [RTTI.Serializable(0x991092E06E6F3B3F, GameType.DS)]
    public class DestructibilityConstraintState : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DestructibilityConstraint> Constraint;
        [RTTI.Member(3, 0x28)] public bool Enabled;
    }

    [RTTI.Serializable(0xA0D7792EE6E6C74D, GameType.DS)]
    public class DestructibilityConstraintSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA342B388BC6EEF4A, GameType.DS)]
    public class DestructibilityHitReaction : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<DamageTypeResource>> ReactOnDamageTypeResources;
        [RTTI.Member(3, 0x30)] public Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
        [RTTI.Member(4, 0x38)] public float DamageModifier;
        [RTTI.Member(5, 0x3C)] public float CoreDamageModifier;
        [RTTI.Member(6, 0x40)] public CPtr<EntityAction> HitAction;
        [RTTI.Member(7, 0x48)] public Ref<GraphProgramResource> HitProgram;
        [RTTI.Member(8, 0x50)] public Ref<OverrideGraphProgramResource> HitOverrideProgram;
        [RTTI.Member(9, 0x58)] public CPtr<EntityAction> TransitionAction;
        [RTTI.Member(10, 0x60)] public Ref<GraphProgramResource> TransitionProgram;
        [RTTI.Member(11, 0x68)] public Ref<OverrideGraphProgramResource> TransitionOverrideProgram;
        [RTTI.Member(12, 0x70)] public Ref<DestructibilityPartStateResource> TransitionPartState;
        [RTTI.Member(13, 0x78)] public bool SkipExecutionOnThroughTransition;
        [RTTI.Member(14, 0x80)] public Array<Ref<DestructibilitySpawnDebrisEntity>> DestructibilitySpawnDebrisEntities;
        [RTTI.Member(15, 0x90)] public Ref<GraphProgramResource> DebrisGroupSpawnProgram;
        [RTTI.Member(16, 0x98)] public Ref<OverrideGraphProgramResource> DebrisGroupSpawnOverrideProgram;
        [RTTI.Member(17, 0xA0)] public Ref<EntityResource> DebrisEntityResource;
        [RTTI.Member(18, 0xA8)] public Ref<GraphProgramResource> DebrisEntitySpawnProgram;
        [RTTI.Member(19, 0xB0)] public Ref<OverrideGraphProgramResource> DebrisEntitySpawnOverrideProgram;
        [RTTI.Member(20, 0xB8)] public float DebrisSpawnProbability;
        [RTTI.Member(21, 0xBC)] public float PassOnDamageImpulseFactor;
    }

    [RTTI.Serializable(0x6960A7193C0DC27F, GameType.DS)]
    public class DestructibilityPart : DestructibilityPartBase
    {
        [RTTI.Member(2, 0x20)] public bool Enabled;
        [RTTI.Member(3, 0x24)] public float Health;
        [RTTI.Member(4, 0x28)] public bool DamageSponge;
        [RTTI.Member(5, 0x2C)] public float DamageToEntityMultiplier;
        [RTTI.Member(6, 0x30)] public bool ClampCoreDamageToPartHealth;
        [RTTI.Member(7, 0x31)] public bool LimitMaxCoreHealth;
        [RTTI.Member(8, 0x38)] public String BoneName;
        [RTTI.Member(9, 0x40)] public Mat44 LocalMatrix;
        [RTTI.Member(10, 0x80)] public Ref<RandomMatrixResourceBase> RandomLocalMatrix;
        [RTTI.Member(11, 0x88)] public Ref<DestructibilityPartStateResource> InitialState;
        [RTTI.Member(12, 0x90)] public Array<Ref<TagProperty>> TagProperties;
    }

    [RTTI.Serializable(0xAAA14D987E99CEEA, GameType.DS)]
    public class DestructibilityPartBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x29A04C13B2B83A18, GameType.DS)]
    public class DestructibilityPartBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2B9816FCEA3D4F28, GameType.DS)]
    public class DestructibilityPartGroup : DestructibilityPartBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<DestructibilityPartBase>> Parts;
        [RTTI.Member(4, 0x30, "Logic")] public bool Enabled;
    }

    [RTTI.Serializable(0x51C6938A3B19F820, GameType.DS)]
    public class DestructibilityPartGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2DF85ED26C51972E, GameType.DS)]
    public class DestructibilityPartState : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DestructibilityPart> Part;
        [RTTI.Member(3, 0x28)] public float Health;
        [RTTI.Member(4, 0x2C)] public bool Enabled;
        [RTTI.Member(5, 0x30)] public Ref<DestructibilityPartStateResource> Resource;
        [RTTI.Member(6, 0x40)] public Mat44 OffsetMatrix;
    }

    [RTTI.Serializable(0x3990832FAADCB299, GameType.DS)]
    public class DestructibilityPartStateResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "State")] public Ref<ModelPartResource> ModelPartResource;
        [RTTI.Member(4, 0x28, "State")] public float MinimumHealth;
        [RTTI.Member(5, 0x2C, "State")] public float MinimumHealthFraction;
        [RTTI.Member(6, 0x30, "State")] public float MaximumHealth;
        [RTTI.Member(7, 0x34, "State")] public float MaximumHealthFraction;
        [RTTI.Member(8, 0x38, "State")] public Array<Ref<DestructibilityHitReaction>> HitReactions;
        [RTTI.Member(9, 0x50, "State")] public Mat44 OffsetMatrix;
        [RTTI.Member(10, 0x90, "State")] public bool HasLockPosition;
        [RTTI.Member(25, 0x91, "AI")] public bool IsShootable;
        [RTTI.Member(17, 0x94, "PhysicsCollision")] public float ReceivedDamageFactor;
        [RTTI.Member(18, 0x98, "PhysicsCollision")] public float ReceivedImpulseFactor;
        [RTTI.Member(19, 0x9C, "PhysicsCollision")] public float MinReceivedDamage;
        [RTTI.Member(20, 0xA0, "PhysicsCollision")] public float AppliedDamageFactor;
        [RTTI.Member(21, 0xA4, "PhysicsCollision")] public float AppliedImpulseFactor;
        [RTTI.Member(22, 0xA8, "PhysicsCollision")] public float MinDamagerColliderMass;
        [RTTI.Member(23, 0xAC, "PhysicsCollision")] public float MaxAppliedDamage;
        [RTTI.Member(11, 0xB0, "State")] public CPtr<EntityAction> ActivateAction;
        [RTTI.Member(12, 0xB8, "State")] public CPtr<EntityAction> MaximumHealthAction;
        [RTTI.Member(13, 0xC0, "State")] public String HealthShaderVariableName;
        [RTTI.Member(14, 0xC8, "State")] public Ref<CurveResource> HealthShaderVariableCurve;
        [RTTI.Member(15, 0xD0, "State")] public bool ApplyHealthShaderOnPart;
    }

    [RTTI.Serializable(0x7902799B7804C20A, GameType.DS)]
    public class DestructibilityPartStateResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x10342B8BBD4EF03D, GameType.DS)]
    public class DestructibilityPartSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6ED813A397678BC5, GameType.DS)]
    public class DestructibilityRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xCC95489BA1912227, GameType.DS)]
    public class DestructibilityResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool Invulnerable;
        [RTTI.Member(4, 0x24, "Logic")] public float InitialHealth;
        [RTTI.Member(5, 0x28, "Logic")] public bool DieAtZeroHealth;
        [RTTI.Member(6, 0x30, "Logic")] public Array<Ref<DestructibilityState>> InitialStates;
        [RTTI.Member(7, 0x40, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(8, 0x50, "Logic")] public Ref<DestructibilityPart> DefaultDamagePart;
        [RTTI.Member(9, 0x58, "Logic")] public Ref<DestructibilityPart> MainPhysicsPart;
        [RTTI.Member(10, 0x60, "Logic")] public Array<Ref<DestructibilityConstraint>> Constraints;
        [RTTI.Member(11, 0x70, "Logic")] public Array<Ref<AIFaction>> InvulnerableToFactions;
        [RTTI.Member(12, 0x80, "Logic")] public bool CanOnlyBeDamagedByPlayer;
        [RTTI.Member(13, 0x81, "Logic")] public bool RemoveWhenDead;
        [RTTI.Member(14, 0x84, "Logic")] public float RemoveWhenDeadDelay;
        [RTTI.Member(16, 0x88, "Logic")] public bool KillChildsOnDestruction;
        [RTTI.Member(17, 0x90, "Logic")] public Ref<DamageTypeResource> KillChildsDamageTypeResource;
        [RTTI.Member(30, 0x98, "PhysicsCollision")] public float ReceivedDamageFactor;
        [RTTI.Member(31, 0x9C, "PhysicsCollision")] public float ReceivedImpulseFactor;
        [RTTI.Member(32, 0xA0, "PhysicsCollision")] public float MinReceivedDamage;
        [RTTI.Member(33, 0xA4, "PhysicsCollision")] public float AppliedDamageFactor;
        [RTTI.Member(34, 0xA8, "PhysicsCollision")] public float AppliedImpulseFactor;
        [RTTI.Member(35, 0xAC, "PhysicsCollision")] public float MinDamagerColliderMass;
        [RTTI.Member(36, 0xB0, "PhysicsCollision")] public float MaxAppliedDamage;
        [RTTI.Member(18, 0xB4, "Logic")] public float LifeTime;
        [RTTI.Member(19, 0xB8, "Logic")] public float DamageTickTime;
        [RTTI.Member(20, 0xBC, "Logic")] public float DamagePerTick;
        [RTTI.Member(21, 0xC0, "Logic")] public float SelfDestructHealthLimit;
        [RTTI.Member(15, 0xC8, "Logic")] public CPtr<EntityAction> DeathAction;
        [RTTI.Member(23, 0xD0, "Network")] public bool UseSimpleNetworkReplication;
        [RTTI.Member(25, 0xD4, "AI")] public float FallDamageRange;
        [RTTI.Member(26, 0xD8, "AI")] public float ExplosionRange;
        [RTTI.Member(27, 0xDC, "AI")] public float LightRange;
        [RTTI.Member(28, 0xE0, "AI")] public String TargetSignal;
        [RTTI.Member(38, 0xE8, "Representation")] public Array<Ref<ModelPartMeshReplacementResource>> PartMeshReplacements;
        [RTTI.Member(39, 0x130, "Representation")] public Array<Ref<MeshResourceBase>> PartMeshResources;
    }

    [RTTI.Serializable(0x89CE36578C5A75D2, GameType.DS)]
    public class DestructibilityRetractionMover : Mover
    {
    }

    [RTTI.Serializable(0x273B6EF0261A05D, GameType.DS)]
    public class DestructibilityRetractionMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "Logic")] public float RotationSpeed;
        [RTTI.Member(8, 0x2C, "Logic")] public float MaxRetractionSpeed;
        [RTTI.Member(9, 0x30, "Logic")] public float RetractionAcceleration;
        [RTTI.Member(10, 0x34, "Logic")] public float BlendTime;
        [RTTI.Member(11, 0x38, "Logic")] public float DecelerationFactor;
    }

    [RTTI.Serializable(0x970A9B011445CC85, GameType.DS)]
    public class DestructibilitySpawnDebrisEntity : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityResource> DebrisEntityResource;
        [RTTI.Member(3, 0x28)] public Ref<GraphProgramResource> DebrisEntitySpawnProgram;
        [RTTI.Member(4, 0x30)] public Ref<OverrideGraphProgramResource> DebrisEntitySpawnOverrideProgram;
        [RTTI.Member(5, 0x38)] public EDebrisEntityLifetime DebrisEntityLifeTime;
        [RTTI.Member(6, 0x40)] public String HelperNode;
        [RTTI.Member(7, 0x50)] public Mat44 Matrix;
        [RTTI.Member(8, 0x90)] public float DebrisSpawnProbability;
        [RTTI.Member(9, 0x94)] public float PassOnDamageImpulseFactor;
    }

    [RTTI.Serializable(0x8350A966D6CFD949, GameType.DS)]
    public class DestructibilityState : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Health;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DestructibilityPartState>> PartStates;
        [RTTI.Member(5, 0x38, "Logic")] public Array<Ref<DestructibilityConstraintState>> ConstraintStates;
    }

    [RTTI.Serializable(0x88CBD5D9B659A718, GameType.DS)]
    public class DestructibilitySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6B4D1AEEC20ABD53, GameType.DS)]
    public class DestructiblePartToHitLocationMapping
    {
        [RTTI.Member(0, 0x0)] public Ref<DestructibilityPart> Part;
        [RTTI.Member(1, 0x8)] public EHitLocation HitLocation;
    }

    [RTTI.Serializable(0x3BDAE0FE26176A1A, GameType.DS)]
    public class DeviceInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String DeviceType;
        [RTTI.Member(3, 0x28)] public String Manufacturer;
        [RTTI.Member(4, 0x30)] public String ModelName;
        [RTTI.Member(5, 0x38)] public String ModelNumber;
    }

    [RTTI.Serializable(0x1E95470AFBA9E06F, GameType.DS)]
    public class DieAction : EntityAction
    {
    }

    [RTTI.Serializable(0xA6F27606A516CC21, GameType.DS)]
    public class DisableAnimationEventsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x9C0751B5DC9B1980, GameType.DS)]
    public class DisableAnimationEventsEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x7E4D896C85483930, GameType.DS)]
    public class DisableConstraintsAction : EnableConstraintsAction
    {
    }

    [RTTI.Serializable(0xA4B94FB00C2877E5, GameType.DS)]
    public class DisableDynamicPrefabEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x24F99F5E6EF99B61, GameType.DS)]
    public class DisableDynamicPrefabEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public UUIDRef<EntityPlaceHolder> TargetEntity;
        [RTTI.Member(9, 0x40, "Logic")] public GGUUID TargetEntityUUID;
    }

    [RTTI.Serializable(0xE5768C34F9D7668A, GameType.DS)]
    public class DisableEntityCollisionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8DBC974A7FAACDB8, GameType.DS)]
    public class DisableEntityCollisionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x94D3BEAE9C4DFE29, GameType.DS)]
    public class DisableIKEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x43960912C0F71731, GameType.DS)]
    public class DisableIKEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool DisablePredictiveTerrain;
        [RTTI.Member(10, 0x41, "Logic")] public bool DisableHipIK;
        [RTTI.Member(11, 0x42, "Logic")] public bool DisableMoverTerrainCorrection;
    }

    [RTTI.Serializable(0x3339E71A237067A5, GameType.DS)]
    public class DisableInventoryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4DD2FDBB1B828F20, GameType.DS)]
    public class DisablePoseDeformerAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public bool Disable;
    }

    [RTTI.Serializable(0xDAE3E72C29082D93, GameType.DS)]
    public class DisableSensorsInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xEB4BF8C5F4CA8BF2, GameType.DS)]
    public class DisableSensorsResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool DisableAural;
        [RTTI.Member(10, 0x41, "Logic")] public bool DisableVisual;
        [RTTI.Member(11, 0x42, "Logic")] public bool DisableHaptic;
        [RTTI.Member(12, 0x43, "Logic")] public bool DisableRadar;
        [RTTI.Member(13, 0x44, "Logic")] public bool DisableProximity;
    }

    [RTTI.Serializable(0x675DEF52A4B2CF92, GameType.DS)]
    public class DiscRocketMover : ThrowableMover
    {
    }

    [RTTI.Serializable(0x703FDB2BA412F849, GameType.DS)]
    public class DiscRocketMoverResource : ThrowableMoverResource
    {
        [RTTI.Member(37, 0xF0, "Launch")] public float LaunchDelay;
        [RTTI.Member(38, 0xF4, "Launch")] public float LaunchRange;
        [RTTI.Member(39, 0xF8, "Launch")] public float LaunchHeight;
        [RTTI.Member(40, 0xFC, "Launch")] public float LaunchBuffer;
        [RTTI.Member(41, 0x100, "Launch")] public Ref<CurveResource> LaunchSpringSpeed;
        [RTTI.Member(43, 0x108, "Hover")] public bool DynamicTargeting;
        [RTTI.Member(44, 0x10C, "Hover")] public float TargetingDuration;
        [RTTI.Member(45, 0x110, "Hover")] public Ref<CurveResource> TargetingSpringHeading;
        [RTTI.Member(46, 0x118, "Hover")] public Ref<CurveResource> TargetingSpringPitch;
        [RTTI.Member(47, 0x120, "Hover")] public EPhysicsCollisionLayerGame TargetingCollisionLayer;
        [RTTI.Member(48, 0x128, "Hover")] public Ref<LaserBeamResource> TargetingLaserResource;
        [RTTI.Member(50, 0x130, "Attack")] public float AttackBuffer;
        [RTTI.Member(51, 0x138, "Attack")] public Ref<CurveResource> AttackSpringSpeed;
        [RTTI.Member(52, 0x140, "Attack")] public CPtr<EntityAction> AttackAction;
    }

    [RTTI.Serializable(0xEF2752162CCA4E8D, GameType.DS)]
    public class DiscoverableArea : ResourceWithName
    {
        [RTTI.Member(11, 0x38, "Generic")] public Ref<ConditionResource> EnableCondition;
        [RTTI.Member(19, 0x40, "States")] public Array<Ref<DiscoverableAreaStateManipulator>> IndicatedManipulators;
        [RTTI.Member(21, 0x50, "States")] public Array<Ref<DiscoverableAreaStateManipulator>> DiscoveredManipulators;
        [RTTI.Member(22, 0x60, "States")] public Array<Ref<DiscoverableAreaStateManipulator>> CompletedManipulators;
        [RTTI.Member(7, 0x70, "Generic")] public UUIDRef<WorldNode> DiscoverableObject;
        [RTTI.Member(10, 0x80, "Generic")] public UUIDRef<AreaLandmark> FogOfWarArea;
        [RTTI.Member(12, 0x90, "Generic")] public UUIDRef<MappedInterior> Interior;
        [RTTI.Member(6, 0xD0, "Generic")] public Ref<DiscoverableAreaResource> Resource;
        [RTTI.Member(13, 0xD8, "Generic")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(14, 0xE0, "Generic")] public Ref<UITexture> IndicatedIcon;
        [RTTI.Member(15, 0xE8, "Generic")] public Ref<UITexture> DiscoveredIcon;
        [RTTI.Member(16, 0xF0, "Generic")] public Ref<UITexture> CompletedIcon;
        [RTTI.Member(17, 0xF8, "Generic")] public Ref<AIMarker> FastTravelLocation;
        [RTTI.Member(8, 0x100, "Generic")] public int Level;
        [RTTI.Member(9, 0x104, "Generic")] public float IndicatedDistance;
        [RTTI.Member(20, 0x108, "States")] public bool AutoDiscoverAreasInsideMyTrigger;
        [RTTI.Member(5, 0x10C, "Generic")] public EDiscoveryState InitialState;
    }

    [RTTI.Serializable(0xBC4B9527C5153C89, GameType.DS)]
    public class DiscoverableAreaInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x2026714B35F27174, GameType.DS)]
    public class DiscoverableAreaInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC54AF0AFB34271AD, GameType.DS)]
    public class DiscoverableAreaPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4E6EB9E9402E7352, GameType.DS)]
    public class DiscoverableAreaPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(13, 0x60, "StateSettings")] public Ref<PlayerNotificationResource> DiscoveryNotification;
        [RTTI.Member(9, 0x68, "EnteringLeaving")] public Ref<PlayerNotificationResource> EnteredNotification;
        [RTTI.Member(10, 0x70, "EnteringLeaving")] public Ref<PlayerNotificationResource> ExitedNotification;
        [RTTI.Member(14, 0x78, "StateSettings")] public Ref<LocalizedTextResource> CompletedAreaText;
        [RTTI.Member(3, 0x80, "UIBindings")] public Ref<UIMarkerTag> MarkerTypeBinding;
        [RTTI.Member(4, 0x88, "UIBindings")] public Ref<UIMarkerTag> IconBinding;
        [RTTI.Member(5, 0x90, "UIBindings")] public Ref<UIMarkerTag> IconColorBinding;
        [RTTI.Member(6, 0x98, "UIBindings")] public Ref<UIMarkerTag> NameBinding;
        [RTTI.Member(7, 0xA0, "UIBindings")] public Ref<UIMarkerTag> DescriptionBinding;
        [RTTI.Member(11, 0xA8, "EnteringLeaving")] public float AreaEnteredExitedNotificationTimer;
        [RTTI.Member(17, 0xAC, "Distances")] public float Nearby;
        [RTTI.Member(18, 0xB0, "Distances")] public float Factor;
        [RTTI.Member(15, 0xB4, "StateSettings")] public float IndicatedIconOpacity;
    }

    [RTTI.Serializable(0xC91E43726D4D814, GameType.DS)]
    public class DiscoverableAreaResource : Resource
    {
        [RTTI.Member(15, 0x20, "Generic")] public FRGBAColor BorderColor;
        [RTTI.Member(3, 0x30, "Generic")] public Ref<LocalizedTextResource> Type;
        [RTTI.Member(4, 0x38, "Generic")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(5, 0x48, "Generic")] public Ref<UITexture> IndicatedIcon;
        [RTTI.Member(6, 0x50, "Generic")] public Ref<UITexture> DiscoveredIcon;
        [RTTI.Member(7, 0x58, "Generic")] public Ref<UITexture> CompletedIcon;
        [RTTI.Member(17, 0x60, "Logic")] public Array<Ref<CollectableRobot>> CollectableRobots;
        [RTTI.Member(18, 0x70, "Logic")] public Ref<QuestMarkerResource> QuestMarker;
        [RTTI.Member(14, 0x78, "Generic")] public Ref<FastTravelSettingsResource> FastTravelSettings;
        [RTTI.Member(10, 0x80, "Generic")] public Ref<UIMarkerFilter> MapIconFilter;
        [RTTI.Member(12, 0x88, "Generic")] public float IndicatedDistance;
        [RTTI.Member(13, 0x8C, "Generic")] public float HUDVisibilityDistance;
        [RTTI.Member(11, 0x90, "Generic")] public bool ShouldRevealIconFilter;
        [RTTI.Member(8, 0x91, "Generic")] public bool ShowsEnteredExitedNotification;
        [RTTI.Member(9, 0x92, "Generic")] public bool ShowCompletedDescription;
    }

    [RTTI.Serializable(0xE5064A68B10750BE, GameType.DS)]
    public class DiscoverableAreaStateManipulator : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ConditionResource> Condition;
        [RTTI.Member(4, 0x28, "Logic")] public bool ShowUIMessages;
    }

    [RTTI.Serializable(0x542C89403016CCDF, GameType.DS)]
    public class DiscreteAmmoEjector : AmmoEjector
    {
    }

    [RTTI.Serializable(0xDC9F50EA6A9F912B, GameType.DS)]
    public class DiscreteAmmoEjectorRep : AmmoEjectorRep
    {
    }

    [RTTI.Serializable(0x59F3E16F7F4EA1F1, GameType.DS)]
    public class DiscreteAmmoEjectorResource : AmmoEjectorResource
    {
        [RTTI.Member(62, 0x160, "Logic")] public CPtr<EntityAction> EjectAction;
        [RTTI.Member(64, 0x168, "VisualEffects")] public Ref<ParticleSystemResource> CaseEjectParticles;
        [RTTI.Member(65, 0x170, "VisualEffects")] public float CaseEjectParticlesDelay;
        [RTTI.Member(67, 0x178, "Charged")] public Ref<ChargedValueFloat> ExitVelocityMultiplier;
        [RTTI.Member(69, 0x180, "ScatterBurst")] public bool ScatterBurst;
        [RTTI.Member(70, 0x184, "ScatterBurst")] public float ScatterBurstDistanceAtTarget;
        [RTTI.Member(71, 0x188, "ScatterBurst")] public float ScatterBurstRadius;
        [RTTI.Member(72, 0x18C, "ScatterBurst")] public float ScatterBurstAngleOffset;
        [RTTI.Member(73, 0x190, "ScatterBurst")] public float ScatterBurstAngleMin;
        [RTTI.Member(74, 0x194, "ScatterBurst")] public float ScatterBurstAngleMax;
        [RTTI.Member(76, 0x198, "Targeting")] public bool FindWorldIfNoTarget;
        [RTTI.Member(77, 0x19C, "Targeting")] public EPhysicsCollisionLayerGame FindWorldCollisionLayer;
    }

    [RTTI.Serializable(0x415CEF9A706B2950, GameType.DS)]
    public class DismountEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x61A4A0454BC8623F, GameType.DS)]
    public class DismountEventResource : PausableEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool DismountImmediately;
    }

    [RTTI.Serializable(0xEA7E67E08221E33D, GameType.DS)]
    public class DismountMode : MountDismountMode
    {
        [RTTI.Member(7, 0x40, "Logic")] public bool IsFallbackDismountMode;
    }

    [RTTI.Serializable(0x9FF46978C5F6D2E6, GameType.DS)]
    public class DismountModeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7E2E79EFA9D7F8A, GameType.DS)]
    public class DispensableCategoryResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int MaximumEntities;
        [RTTI.Member(4, 0x24, "Logic")] public float NearRange;
        [RTTI.Member(5, 0x28, "Logic")] public float FarRange;
        [RTTI.Member(6, 0x2C, "Logic")] public float MinimumTime;
    }

    [RTTI.Serializable(0xCB96F6DAE6A17D57, GameType.DS)]
    public class DispensableCategoryResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3A4D7C5745E3FE58, GameType.DS)]
    public class DispensableEntityManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x539B11751AF3EF5, GameType.DS)]
    public class DispensableEntityManagerSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<DispensableCategoryResource> DefaultCategory;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DispensableCategoryResource>> Categories;
    }

    [RTTI.Serializable(0x97BB1D63E2DC3A7, GameType.DS)]
    public class DispensableEntityManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x33AD11FF0C6F3D8, GameType.DS)]
    public class DisplayStatDefinition : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<UITexture> UIStatIcon;
        [RTTI.Member(4, 0x28, "General")] public Ref<UITexture> UIStatIconLarge;
        [RTTI.Member(5, 0x30, "General")] public Ref<LocalizedTextResource> StatName;
        [RTTI.Member(6, 0x38, "General")] public Ref<LocalizedTextResource> Description;
    }

    [RTTI.Serializable(0x75E13CBA7CE69268, GameType.DS)]
    public class DistanceFadeRanges
    {
        [RTTI.Member(0, 0x0)] public float NearStart;
        [RTTI.Member(1, 0x4)] public float NearEnd;
        [RTTI.Member(2, 0x8)] public float FarStart;
        [RTTI.Member(3, 0xC)] public float FarEnd;
    }

    [RTTI.Serializable(0x488222ACB0585A3C, GameType.DS)]
    public class DistantCubemapRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> AverageColorComputeShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> BuildSkydomeColorComputeShader;
    }

    [RTTI.Serializable(0x92A9C6059813FEB2, GameType.DS)]
    public class DistantFogRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(4, 0x20, "Shaders")] public Ref<ShaderResource> BlurShader;
        [RTTI.Member(3, 0x28, "Shaders")] public Ref<ShaderResource> RayTraceShader;
    }

    [RTTI.Serializable(0xFA3E0813CBD18F68, GameType.DS)]
    public class DoFApertureSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CurveResource> FocusBracketCurve;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CurveResource> FocusFalloffCurve;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<CurveResource> MaxFuzzyNearCurve;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<CurveResource> MaxFuzzyFarCurve;
    }

    [RTTI.Serializable(0xBE5F824768DE3780, GameType.DS)]
    public class DodgeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x74FA1E20026A3694, GameType.DS)]
    public class DodgeComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Animation")] public String DodgeAnimTagName;
        [RTTI.Member(4, 0x28, "Animation")] public String DodgeAnimVarName;
        [RTTI.Member(6, 0x30, "Unlocks")] public Ref<PerkLevel> ExtendedDodgePerk;
        [RTTI.Member(7, 0x38, "Unlocks")] public String ExtendedDodgeAnimName;
    }

    [RTTI.Serializable(0x98BB3EC318F539DD, GameType.DS)]
    public class DoubleKillComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB17B71ABCB1C1D94, GameType.DS)]
    public class DoubleKillComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x3AE407A775227DCC, GameType.DS)]
    public class DrawFlags
    {
        [RTTI.Member(6, 0x0, "General", true)] public float ShadowBiasMultiplier;
        [RTTI.Member(7, 0x0, "General", true)] public EShadowBiasMode ShadowBiasMode;
        [RTTI.Member(8, 0x0, "General", true)] public bool DisableOcclusionCulling;
        [RTTI.Member(9, 0x0, "General", true)] public bool DisableDepthOnlyPass;
        [RTTI.Member(5, 0x0, "General", true)] public EViewLayer ViewLayer;
        [RTTI.Member(3, 0x0, "General", true)] public EDrawPartType RenderType;
        [RTTI.Member(1, 0x0, "General")] public uint32 Data;
        [RTTI.Member(2, 0x0, "General", true)] public bool CastShadows;
        [RTTI.Member(10, 0x0, "General", true)] public bool VoxelizeLightBake;
        [RTTI.Member(4, 0x0, "General", true)] public EShadowCull ShadowCullMode;
    }

    [RTTI.Serializable(0xACE72A932D3150C, GameType.DS)]
    public class DrawableCullInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 Flags;
    }

    [RTTI.Serializable(0xAFB456A6D41B69B0, GameType.DS)]
    public class DrawableObjectInstance
    {
        [RTTI.Member(0, 0x1C)] public DrawableCullInfo CullInfo;
        [RTTI.Member(1, 0x30)] public float LodDistanceScale;
    }

    [RTTI.Serializable(0xAC62202466C784E2, GameType.DS)]
    public class DropModResource : Resource
    {
        [RTTI.Member(2, 0x20)] public HashSet<GGUUID> EntityTypeUUIDs;
        [RTTI.Member(3, 0x30)] public HashSet<GGUUID> SpawnSetupsTypeUUIDs;
        [RTTI.Member(4, 0x40)] public bool MustHaveBeenSpawnedThroughGroup;
        [RTTI.Member(5, 0x48)] public Array<Ref<ItemProbabilityResource>> Items;
    }

    [RTTI.Serializable(0xC6E22D23CE0B4416, GameType.DS)]
    public class DsCheckStationGraphCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x3E9DFBEF519E1023, GameType.DS)]
    public class DsCheckStationGraphCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6CD7F3D1A7D92649, GameType.DS)]
    public class DsGameActorCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0x912D2C0A021963F5, GameType.DS)]
    public class DsGameActorCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x12E5D39025FBDBE8, GameType.DS)]
    public class DsHiggsGraphCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xB72F148FA4D22147, GameType.DS)]
    public class DsHiggsGraphCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF76A83761A21BA, GameType.DS)]
    public class DsMuleManagerGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x55D13BC720FC1720, GameType.DS)]
    public class DsMuleMissionCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xC81752E917EEE98, GameType.DS)]
    public class DsMuleMissionCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC07A3644A37499A, GameType.DS)]
    public class DsNpcGeneralCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xC4D5EB0E9541208F, GameType.DS)]
    public class DsNpcGeneralCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAD2FE094BFE8EAD0, GameType.DS)]
    public class DsNpcManagerGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8E66C1D5CE9BECE8, GameType.DS)]
    public class DummySoundInstance : SoundInstance
    {
    }

    [RTTI.Serializable(0xE7DB03E2CD6509C8, GameType.DS)]
    public class DynamicHelperLocatorInstance : BoneLocatorInstance
    {
        [RTTI.Member(3, 0x1C0, "Locator")] public Array<CPtr<LocatorInstance>> DependentLocators;
    }

    [RTTI.Serializable(0x1FF885C1E8FD9206, GameType.DS)]
    public class DynamicHelperLocatorResource : BoneLocatorResource
    {
    }

    [RTTI.Serializable(0xBA55AB90425187AE, GameType.DS)]
    public class DynamicLibrary : Resource
    {
        [RTTI.Member(2, 0x20)] public String Filename;
        [RTTI.Member(3, 0x28)] public Array<uint8> Data;
    }

    [RTTI.Serializable(0x8BA4C9A1089F1152, GameType.DS)]
    public class DynamicLightingSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<Texture> AmbientBRDFTexture;
        [RTTI.Member(3, 0x28)] public Ref<MaterialLightingResource> MaterialLightingResource;
        [RTTI.Member(4, 0x30)] public Ref<Texture> GGXLTCMatrixTexture;
        [RTTI.Member(5, 0x38)] public Ref<Texture> GGXLTCAmplitudeTexture;
    }

    [RTTI.Serializable(0xF901186AA3B694CD, GameType.DS)]
    public class DynamicMaterialBindings
    {
        [RTTI.Member(0, 0x0)] public Array<MaterialBindingInfo> mMaterialBindings;
    }

    [RTTI.Serializable(0xF0D805186C74DEB, GameType.DS)]
    public class DynamicPrefabCommand : RTTIObject
    {
    }

    [RTTI.Serializable(0xF04E2210838FB7D8, GameType.DS)]
    public class DynamicPrefabCommandSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC2052CF975C75270, GameType.DS)]
    public class DynamicPrefabEntity : Entity
    {
    }

    [RTTI.Serializable(0x4D73B5E8E506D9B1, GameType.DS)]
    public class DynamicPrefabEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "General")] public Ref<PrefabResource> PrefabResource;
    }

    [RTTI.Serializable(0x10330CF2842C237, GameType.DS)]
    public class DynamicQuestManager : RTTIObject
    {
        [RTTI.Member(1, 0x30, "Saving", true)] public Array<CPtr<GeneratedQuestSave>> Saves;
    }

    [RTTI.Serializable(0x4EF2521ABC65E8D4, GameType.DS)]
    public class DynamicSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(12, 0x58, "Logic")] public bool ShouldWaitDependency;
    }

    [RTTI.Serializable(0xB359BE1D18941C3, GameType.DS)]
    public class DynamicSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x95DC999E67534E4A, GameType.DS)]
    public class DynamicSequenceEntityVariableSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6441212627BEDB0D, GameType.DS)]
    public class DynamicSpawnEcotopeSetup : Resource
    {
        [RTTI.Member(4, 0x20, "General")] public bool NeedsNavmesh;
        [RTTI.Member(5, 0x24, "General")] public float Density;
        [RTTI.Member(6, 0x28, "General")] public float SpawnRadius;
        [RTTI.Member(7, 0x2C, "General")] public float DespawnRadius;
        [RTTI.Member(3, 0x30, "General")] public Ref<SpawnSetupNonPlaceholder> SpawnSetup;
    }

    [RTTI.Serializable(0xE6C241A5879AA3BA, GameType.DS)]
    public class DynamicSpawnManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<DynamicSpawnEcotopeSetup>> DynamicSpawnEcotopeSetups;
        [RTTI.Member(4, 0x30, "General")] public Ref<ConditionResource> EnableCondition;
    }

    [RTTI.Serializable(0x777CCFA93002641C, GameType.DS)]
    public class ECliffVoiceSituationType_int32
    {
        [RTTI.Member(0, 0x0)] public ECliffVoiceSituationType Key;
        [RTTI.Member(1, 0x4)] public int32 Value;
    }

    [RTTI.Serializable(0x8225B30C815D220E, GameType.DS)]
    public class EDSWeaponId_AimCacheSpecificSetting
    {
        [RTTI.Member(0, 0x0)] public EDSWeaponId Key;
        [RTTI.Member(1, 0x4)] public AimCacheSpecificSetting Value;
    }

    [RTTI.Serializable(0x60299788FD534970, GameType.DS)]
    public class EchoScanComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEA87620F080D9F71, GameType.DS)]
    public class EchoScanComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float AntiStealthPatchRadius;
    }

    [RTTI.Serializable(0x37B3FBB4B1DB0092, GameType.DS)]
    public class EconomyManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EntityResource> CurrencyItem;
        [RTTI.Member(5, 0x28, "Texts")] public Ref<LocalizedTextResource> RarityCommon;
        [RTTI.Member(6, 0x30, "Texts")] public Ref<LocalizedTextResource> RarityUncommon;
        [RTTI.Member(7, 0x38, "Texts")] public Ref<LocalizedTextResource> RarityRare;
        [RTTI.Member(8, 0x40, "Texts")] public Ref<LocalizedTextResource> RarityVeryRare;
        [RTTI.Member(9, 0x48, "Texts")] public Ref<LocalizedTextResource> ModificationName;
        [RTTI.Member(10, 0x50, "Texts")] public Ref<LocalizedTextResource> WeaponModificationType;
        [RTTI.Member(11, 0x58, "Texts")] public Ref<LocalizedTextResource> OutfitModificationType;
    }

    [RTTI.Serializable(0xAC237B395CDCBBF6, GameType.DS)]
    public class EconomyManagerResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE8A692338DA249BB, GameType.DS)]
    public class Ecotope : Resource
    {
        [RTTI.Member(2, 0x38)] public Ref<EcotopeInfo> EcotopeInfo;
        [RTTI.Member(3, 0x40)] public Ref<PlacementBase> PlacementRoot;
        [RTTI.Member(4, 0x48)] public Ref<TerrainMaterial> TerrainMaterial;
    }

    [RTTI.Serializable(0x53C702BC15FE099F, GameType.DS)]
    public class EcotopeInfo : Resource
    {
        [RTTI.Member(2, 0x20)] public uint8 EcotopeIndex;
        [RTTI.Member(3, 0x28)] public StreamingRef<Ecotope> Ecotope;
    }

    [RTTI.Serializable(0x47837D773AD41EAE, GameType.DS)]
    public class EcotopeMapping : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<Ecotope> Ecotope;
        [RTTI.Member(3, 0x28)] public Ref<WorldDataType> EcotopeMap;
        [RTTI.Member(4, 0x30)] public uint8 Mode;
    }

    [RTTI.Serializable(0xDD98832A63BBCEF4, GameType.DS)]
    public class EcotopeOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6640DD1A4352BE8D, GameType.DS)]
    public class EcotopeOverrideComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xEA759ABD65437342, GameType.DS)]
    public class EcotopeOverrideComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int8 EcotopeIndexOverrideValue;
        [RTTI.Member(4, 0x24, "Logic")] public float EcotopeEffectOverrideValue;
    }

    [RTTI.Serializable(0xE76F6A8EC9EC8C11, GameType.DS)]
    public class EcotopeTile : Resource
    {
        [RTTI.Member(2, 0x20)] public IVec2 GridCoordinates;
        [RTTI.Member(3, 0x28)] public EEcotopeSamplingMode EcotopeSamplingMode;
        [RTTI.Member(4, 0x30)] public Array<Ref<EcotopeMapping>> Ecotopes;
    }

    [RTTI.Serializable(0x3E5043820284A0DD, GameType.DS)]
    public class EffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x280614341E99ED90, GameType.DS)]
    public class EffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x477353C35B64B367, GameType.DS)]
    public class EffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "AttachLocation")] public String HelperNodeName;
        [RTTI.Member(4, 0x30, "AttachLocation")] public Mat44 LocalMatrix;
        [RTTI.Member(5, 0x70, "AttachLocation")] public bool AlignToWorld;
        [RTTI.Member(6, 0x71, "AttachLocation")] public bool AlignToEntity;
        [RTTI.Member(7, 0x72, "AttachLocation")] public bool AutoFollow;
        [RTTI.Member(11, 0x74, "Logic")] public float LifeTime;
        [RTTI.Member(9, 0x78, "Logic")] public bool AutoDestroy;
        [RTTI.Member(10, 0x79, "Logic")] public bool AutoDestroyEntity;
        [RTTI.Member(35, 0x80, "SoundEffects")] public Ref<SoundResource> SoundResource;
        [RTTI.Member(36, 0x88, "SoundEffects")] public bool SoundIs3D;
        [RTTI.Member(37, 0x8C, "SoundEffects")] public float SoundPreDelay;
        [RTTI.Member(38, 0x90, "SoundEffects")] public float SoundPreDelayRandom;
        [RTTI.Member(39, 0x98, "SoundEffects")] public Ref<SoundMixStateResource> SoundMixStateResource;
        [RTTI.Member(19, 0xA0, "VisualEffects")] public Ref<ParticleSystemResource> ParticleResource;
        [RTTI.Member(20, 0xA8, "VisualEffects")] public float ParticlePreDelay;
        [RTTI.Member(21, 0xAC, "VisualEffects")] public float ParticlePreDelayRandom;
        [RTTI.Member(22, 0xB0, "VisualEffects")] public bool ParticlesLoseOwnershipOnDie;
        [RTTI.Member(13, 0xB8, "Physics")] public Ref<ForceFieldResource> ForceFieldResource;
        [RTTI.Member(23, 0xC0, "VisualEffects")] public Ref<ShakeResource> ShakeResource;
        [RTTI.Member(24, 0xC8, "VisualEffects")] public Ref<LightResource> LightResource;
        [RTTI.Member(25, 0xD0, "VisualEffects")] public Vec3 LightForward;
        [RTTI.Member(26, 0xE0, "VisualEffects")] public Ref<CurveResource> LightIntensityCurve;
        [RTTI.Member(27, 0xE8, "VisualEffects")] public Ref<CurveResource> LightRangeCurve;
        [RTTI.Member(28, 0xF0, "VisualEffects")] public bool LightIsLooping;
        [RTTI.Member(29, 0xF4, "VisualEffects")] public float LightVisibleThreshold;
        [RTTI.Member(30, 0xF8, "VisualEffects")] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(31, 0x100, "VisualEffects")] public Ref<ScreenEffectResource> ScreenEffectResource;
        [RTTI.Member(32, 0x108, "VisualEffects")] public bool ScreenEffectIsGlobal;
        [RTTI.Member(33, 0x109, "VisualEffects")] public bool ScreenEffectIsLooping;
        [RTTI.Member(17, 0x10A, "Visibility")] public bool IgnoreEntityVisiblity;
        [RTTI.Member(15, 0x10B, "Network")] public bool MustBeReplicated;
    }

    [RTTI.Serializable(0xC79A02FBCB160900, GameType.DS)]
    public class EffectComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x67669A5629E96F12, GameType.DS)]
    public class EjectEffectsLocationResource : Resource
    {
        [RTTI.Member(9, 0x20)] public String MuzzleFlashTP;
        [RTTI.Member(2, 0x28)] public String MuzzleFlashFP;
        [RTTI.Member(10, 0x30)] public String MuzzleSmokeTP;
        [RTTI.Member(3, 0x38)] public String MuzzleSmokeFP;
        [RTTI.Member(11, 0x40)] public String ChargeTP;
        [RTTI.Member(4, 0x48)] public String ChargeFP;
        [RTTI.Member(12, 0x50)] public String ChargeSoundTP;
        [RTTI.Member(5, 0x58)] public String ChargeSoundFP;
        [RTTI.Member(13, 0x60)] public String FireLightTP;
        [RTTI.Member(6, 0x68)] public String FireLightFP;
        [RTTI.Member(14, 0x70)] public String FireSoundTP;
        [RTTI.Member(7, 0x78)] public String FireSoundFP;
        [RTTI.Member(15, 0x80)] public String ReloadTP;
        [RTTI.Member(8, 0x88)] public String ReloadFP;
    }

    [RTTI.Serializable(0x14A31ECDFE778B61, GameType.DS)]
    public class EjectEffectsLocationResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x900F0D9CFF1F2C00, GameType.DS)]
    public class EjectLocationResource : Resource
    {
        [RTTI.Member(2, 0x20)] public String DirectionHelper;
        [RTTI.Member(3, 0x28)] public String BulletPlayer;
        [RTTI.Member(7, 0x30)] public String BulletAI;
        [RTTI.Member(8, 0x38)] public String TracerTP;
        [RTTI.Member(4, 0x40)] public String TracerFP;
        [RTTI.Member(9, 0x48)] public String CaseEjectTP;
        [RTTI.Member(5, 0x50)] public String CaseEjectFP;
        [RTTI.Member(10, 0x58)] public String PilotLightTP;
        [RTTI.Member(6, 0x60)] public String PilotLightFP;
        [RTTI.Member(11, 0x68)] public Array<Ref<EjectEffectsLocationResource>> EffectsLocations;
    }

    [RTTI.Serializable(0xF57D4B1B2EFFF201, GameType.DS)]
    public class EjectLocationResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2DD520DC2E4A6EBC, GameType.DS)]
    public class EmbeddedFileResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<uint8> Data;
    }

    [RTTI.Serializable(0x1CA0220A5B22688B, GameType.DS)]
    public class EmitterMeshShapeData
    {
        [RTTI.Member(0, 0x0)] public Array<EmitterVertex> Position;
        [RTTI.Member(1, 0x10)] public Ref<StaticMeshResource> Mesh;
    }

    [RTTI.Serializable(0xAA6B6813C125614C, GameType.DS)]
    public class EmitterVertex
    {
        [RTTI.Member(0, 0x0)] public Vec3 Position;
        [RTTI.Member(1, 0x10)] public Vec3 Direction;
    }

    [RTTI.Serializable(0x7DAA47D711081B93, GameType.DS)]
    public class EmptyPickUpAnimationTypeResource : PickUpAnimationTypeResource
    {
    }

    [RTTI.Serializable(0x9D3690989DCC7664, GameType.DS)]
    public class EnableConstraintsAction : EntityAction
    {
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<DestructibilityConstraint>> Constraints;
    }

    [RTTI.Serializable(0x62CDFA08B7DABA0E, GameType.DS)]
    public class EnableContextualSpeechEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE536BE2461146CE5, GameType.DS)]
    public class EnableContextualSpeechEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool EnableSpeech;
    }

    [RTTI.Serializable(0xE36A409BF82EFDF3, GameType.DS)]
    public class EnablePartsAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(5, 0x38, "Logic")] public bool Enable;
        [RTTI.Member(6, 0x39, "Logic")] public bool InitiallyActive;
        [RTTI.Member(7, 0x3A, "Logic")] public bool ActOnCurrentPart;
    }

    [RTTI.Serializable(0xABF6B3ABD49F8979, GameType.DS)]
    public class EnableShadowsAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0xB592D0B2771D66B8, GameType.DS)]
    public class EntitlementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xED5A058433A4FC7F, GameType.DS)]
    public class EntitlementComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EntitlementResource> Entitlement;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0x8C23B5892AF79F7F, GameType.DS)]
    public class EntitlementResource : Resource
    {
        [RTTI.Member(2, 0x20)] public String UnifiedEntitlementKey;
        [RTTI.Member(4, 0x28)] public Ref<DSGameCatalogueListItem> ListItem;
        [RTTI.Member(5, 0x30)] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(3, 0x38)] public uint32 Hash;
    }

    [RTTI.Serializable(0xEA94D5F962502DF7, GameType.DS)]
    public class EntitlementResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x14CAB3070D228D41, GameType.DS)]
    public class Entity : RTTIRefObject
    {
        [RTTI.Member(14, 0x0, "Hierarchy", true)] public CPtr<Entity> Parent;
        [RTTI.Member(5, 0x0, "General", true)] public uint32 Flags;
        [RTTI.Member(4, 0x58, "General")] public StreamingRef<EntityResource> Resource;
        [RTTI.Member(12, 0x90, "Components", true)] public EntityComponentContainer Components;
        [RTTI.Member(9, 0xB0, "Components", true)] public CPtr<Mover> Mover;
        [RTTI.Member(10, 0xB8, "Components", true)] public CPtr<Model> Model;
        [RTTI.Member(11, 0xC0, "Components", true)] public CPtr<Destructibility> Destructibility;
        [RTTI.Member(3, 0xC8, "General")] public WorldTransform Orientation;
        [RTTI.Member(6, 0x178, "General", true)] public CPtr<AIFaction> Faction;
        [RTTI.Member(7, 0x260, "General", true)] public Ref<EntityActivationPolicy> ActivationPolicy;
    }

    [RTTI.Serializable(0xE4F2D26A13C96630, GameType.DS)]
    public class EntityAction : Resource
    {
        [RTTI.Member(2, 0x20)] public bool IsThreadSafe;
    }

    [RTTI.Serializable(0xAADF804151D62FFE, GameType.DS)]
    public class EntityActionContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x9A675256E3B59CE9, GameType.DS)]
    public class EntityActionContextActivator : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x6CBF8FDE06DCB872, GameType.DS)]
    public class EntityActionContextAttackEvent : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xE9CAA197D3B4DFBD, GameType.DS)]
    public class EntityActionContextComponentResource : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xF869C60BC8AE8657, GameType.DS)]
    public class EntityActionContextDamageType : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x7A9FC0A4D900B974, GameType.DS)]
    public class EntityActionContextElement : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x91FB645F6A85A8D3, GameType.DS)]
    public class EntityActionContextInstigator : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x2FACFED6B9E6C120, GameType.DS)]
    public class EntityActionContextModelPartIndex : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x460E8CC6F2346E7A, GameType.DS)]
    public class EntityActionContextNormal : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x4FC436D33A426B6B, GameType.DS)]
    public class EntityActionContextPhysicsImpulse : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x97ADEF58007D9AF, GameType.DS)]
    public class EntityActionContextPosition : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x33FE552F8E307506, GameType.DS)]
    public class EntityActionContextRandomGenerator : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x9EB07FC8EF3F5838, GameType.DS)]
    public class EntityActionContextStreamingRef : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xB7BDCA1073C0B6D3, GameType.DS)]
    public class EntityActionContextTransform : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x3C32FBC35721ED9E, GameType.DS)]
    public class EntityActionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x194BFF0F105BDA6, GameType.DS)]
    public class EntityActionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<EntityActorResource> InstigatorActorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<EntityActorResource> ActivatorActorResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<EntityAction> EntityActionStart;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<EntityAction> EntityActionStop;
    }

    [RTTI.Serializable(0xA93272F5202AEEF5, GameType.DS)]
    public class EntityActivationPolicy : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
    }

    [RTTI.Serializable(0xF410786369614EB1, GameType.DS)]
    public class EntityActivationPolicyCache : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<EntityActivationPolicy> BoundToSceneActivationPolicy;
        [RTTI.Member(3, 0x28)] public Ref<EntityActivationPolicy> PlacementActivationPolicy;
        [RTTI.Member(4, 0x30)] public Ref<EntityActivationPolicy> BoundToSequenceActivationPolicy;
        [RTTI.Member(5, 0x38)] public Ref<EntityActivationPolicy> SpawnpointActivationPolicy;
        [RTTI.Member(6, 0x40)] public Ref<EntityActivationPolicy> CrowdActivationPolicy;
        [RTTI.Member(7, 0x48)] public Ref<EntityActivationPolicy> DynamicSpawnActivationPolicy;
        [RTTI.Member(8, 0x50)] public Ref<EntityActivationPolicy> EntityGroupMemberActivationPolicy;
    }

    [RTTI.Serializable(0xD677D3F8EDB089C7, GameType.DS)]
    public class EntityActorInstance : EntityActorInstanceBase
    {
    }

    [RTTI.Serializable(0xA942F91074EE604F, GameType.DS)]
    public class EntityActorInstanceBase : ActorInstance
    {
    }

    [RTTI.Serializable(0xCD359A28414011F0, GameType.DS)]
    public class EntityActorResource : ActorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public String EntityName;
        [RTTI.Member(9, 0x3C, "Logic")] public bool Invulnerable;
        [RTTI.Member(10, 0x3D, "Logic")] public bool StopSequenceWhenEntityDies;
        [RTTI.Member(11, 0x3E, "Logic")] public bool UnBindActorWhenEntityDies;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(13, 0x48, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
        [RTTI.Member(14, 0x58, "Logic")] public int WaitUntilBindDuration;
        [RTTI.Member(15, 0x5C, "Logic")] public bool UnBindActorOnDamage;
        [RTTI.Member(16, 0x5D, "Logic")] public bool DismountActorOnBind;
        [RTTI.Member(17, 0x5E, "Logic")] public bool MakeIgnoredByAI;
        [RTTI.Member(18, 0x5F, "Logic")] public bool EndOnFinalTransform;
    }

    [RTTI.Serializable(0x30579C8B5808649D, GameType.DS)]
    public class EntityArrayComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x22C1BFAC842A0452, GameType.DS)]
    public class EntityArrayComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xAC658BFE66771D53, GameType.DS)]
    public class EntityArrayComponentResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBD58EA82F815793C, GameType.DS)]
    public class EntityArrayComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBD24208C27480F1D, GameType.DS)]
    public class EntityAwarenessQuestTrigger : EntityListQuestTrigger
    {
        [RTTI.Member(6, 0x38, "Logic")] public EAwarenessType AwarenessType;
    }

    [RTTI.Serializable(0xCBB197D85E6F36F3, GameType.DS)]
    public class EntityAwarenessQuestTriggerInstance : EntityListQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x3F8BD22A2BD298F4, GameType.DS)]
    public class EntityBasedQuestTrigger : QuestTrigger
    {
        [RTTI.Member(5, 0x40, "Logic")] public Array<GGUUID> EntityTypeUUIDs;
        [RTTI.Member(3, 0x50, "Logic")] public Array<GGUUID> SpawnSetupUUID;
        [RTTI.Member(4, 0x60, "Logic")] public Array<GGUUID> SpawnSourceUUIDs;
        [RTTI.Member(6, 0x70, "Logic")] public int Amount;
        [RTTI.Member(7, 0x74, "Logic")] public bool MustHaveBeenSpawnedThroughGroup;
    }

    [RTTI.Serializable(0xEDE75EFE89117F27, GameType.DS)]
    public class EntityComponent : RTTIRefObject
    {
        [RTTI.Member(3, 0x30, "General", true)] public Ref<EntityComponentResource> Resource;
        [RTTI.Member(4, 0x48, "General", true)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x586A4426CAD07C0B, GameType.DS)]
    public class EntityComponentContainer
    {
        [RTTI.Member(0, 0x0, true)] public Array<CPtr<EntityComponent>> Components;
    }

    [RTTI.Serializable(0x8C43B5C8D10F76A4, GameType.DS)]
    public class EntityComponentRep : RTTIObject
    {
    }

    [RTTI.Serializable(0x7619CB816B6502F6, GameType.DS)]
    public class EntityComponentResource : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x944A897F5553897A, GameType.DS)]
    public class EntityComponentSet : EntityComponent
    {
    }

    [RTTI.Serializable(0x6FD56E2AFDCCF794, GameType.DS)]
    public class EntityComponentSetResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResources;
        [RTTI.Member(4, 0x30, "Logic")] public EEntityComponentSetMode Mode;
    }

    [RTTI.Serializable(0xA7D00C33FC7DB807, GameType.DS)]
    public class EntityComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4436E5D5F7D8A5F7, GameType.DS)]
    public class EntityDeathQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(9, 0x78, "Logic")] public bool PerformInitialCheck;
    }

    [RTTI.Serializable(0x8A9D8899AC8AE70B, GameType.DS)]
    public class EntityGraphProgramSpawnCommand : SpawnCommand
    {
        [RTTI.Member(4, 0x60)] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(5, 0x68)] public Ref<OverrideGraphProgramResource> OverrideGraphProgram;
    }

    [RTTI.Serializable(0x93A0A6F2080AF680, GameType.DS)]
    public class EntityImpostorResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<StaticMeshResource> MeshResource;
        [RTTI.Member(3, 0x28)] public float Speed;
        [RTTI.Member(4, 0x2C)] public float MaxDrawDistance;
        [RTTI.Member(5, 0x30)] public bool AlignUpWithWorld;
    }

    [RTTI.Serializable(0x51AEAF4694A59EBE, GameType.DS)]
    public class EntityInstanceCollisionQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xB12E138DAE953323, GameType.DS)]
    public class EntityInstanceDeathQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x9556C23A5F8A7F04, GameType.DS)]
    public class EntityInstanceHitReactionQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xD4158AA5F3FCDA94, GameType.DS)]
    public class EntityInstanceObtainedQuestTriggerInstance : ObtainItemsQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x2E3DB2DE11A0AE5, GameType.DS)]
    public class EntityInstanceProperty : EntityInstancePropertyBase
    {
        [RTTI.Member(9, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0xF8ABD828D207869E, GameType.DS)]
    public class EntityInstancePropertyBase : Fact
    {
    }

    [RTTI.Serializable(0x68704A1CDD6AF4C7, GameType.DS)]
    public class EntityInstancePropertyValue : PropertyValue
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<EntityInstancePropertyBase> Property;
    }

    [RTTI.Serializable(0x4290130A3A220D98, GameType.DS)]
    public class EntityInstanceScannedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xE90500672E78BFD5, GameType.DS)]
    public class EntityInstanceSpottedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x453B5A3B7663E2B9, GameType.DS)]
    public class EntityInstanceUsedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x92C781073468D251, GameType.DS)]
    public class EntityInventoryViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x7BDAE88F0020F703, GameType.DS)]
    public class EntityLifetime
    {
    }

    [RTTI.Serializable(0x804BAF7D940BD1E5, GameType.DS)]
    public class EntityLifetimeGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD5969D6AD8699C84, GameType.DS)]
    public class EntityListQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<UUIDRef<SpawnSetupNonPlaceholder>> SpawnSetups;
        [RTTI.Member(4, 0x30, "Logic")] public bool TriggerForAnyEntity;
    }

    [RTTI.Serializable(0x9915B0E4B7E729CA, GameType.DS)]
    public class EntityListQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x471F7F4AE07BBEFF, GameType.DS)]
    public class EntityPlaceHolder : WorldNode
    {
        [RTTI.Member(6, 0x60, "General")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(9, 0x68, "General")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
        [RTTI.Member(7, 0x80, "General", true)] public Ref<EntityActivationPolicy> ActivationPolicy;
        [RTTI.Member(8, 0x88, "General")] public Array<Ref<FactValueBase>> Facts;
        [RTTI.Member(11, 0x98, "General")] public GGUUID OriginalUUID;
        [RTTI.Member(10, 0xA8, "General")] public int8 DestructibilityState;
        [RTTI.Member(5, 0xAA, "General")] public bool FactsArePersistent;
        [RTTI.Member(13, 0xB0, "General")] public Ref<PrefabResource> PrefabResource;
        [RTTI.Member(12, 0xB8, "General")] public uint32 NameHash;
    }

    [RTTI.Serializable(0xECC248102A261406, GameType.DS)]
    public class EntityPlaceHolderSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public StreamingRef<EntityPlaceHolder> EntityPlaceHolder;
        [RTTI.Member(12, 0x60)] public bool IsInterpolationEnabled;
    }

    [RTTI.Serializable(0xEEA69A7757EBBB56, GameType.DS)]
    public class EntityPlaceHolderSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x9E6A802C7E391385, GameType.DS)]
    public class EntityPlaceHolderSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x42474F858C0800C6, GameType.DS)]
    public class EntityProjectileAmmoResource : AmmoResource
    {
        [RTTI.Member(38, 0x130, "Logic")] public Ref<EntityResource> ProjectileResource;
        [RTTI.Member(39, 0x138, "Logic")] public Ref<GraphProgramResource> ProjectileDecoratorGraph;
        [RTTI.Member(40, 0x140, "Logic")] public Ref<OverrideGraphProgramResource> ProjectileDecoratorGraphOverride;
        [RTTI.Member(41, 0x148, "Logic")] public Ref<EntityResource> PreviewProjectileResource;
        [RTTI.Member(42, 0x150, "Logic")] public Ref<GraphProgramResource> PreviewDecoratorGraph;
        [RTTI.Member(43, 0x158, "Logic")] public Ref<OverrideGraphProgramResource> PreviewDecoratorGraphOverride;
        [RTTI.Member(44, 0x160, "Logic")] public Ref<GraphProgramResource> PreviewAbortedGraph;
        [RTTI.Member(45, 0x168, "Logic")] public Ref<OverrideGraphProgramResource> PreviewAbortedGraphOverride;
        [RTTI.Member(49, 0x170, "EjectSettings")] public Ref<CurveResource> ExitVelocityCurve;
        [RTTI.Member(50, 0x178, "EjectSettings")] public float InitialOffsetAngle;
        [RTTI.Member(46, 0x17C, "Logic")] public float OverwriteImpactRadius;
        [RTTI.Member(47, 0x180, "Logic")] public Ref<PhysicsCollisionResource> FirstPhysicsCollisionResource;
        [RTTI.Member(52, 0x1B8, "AI")] public ETrajectorySolveMethod SolveMethod;
        [RTTI.Member(53, 0x1BC, "AI")] public bool UseLinearTargetReachableCheck;
    }

    [RTTI.Serializable(0x5F6697700F8F5613, GameType.DS)]
    public class EntityProximityQuestTrigger : EntityListQuestTrigger
    {
        [RTTI.Member(6, 0x38, "Logic")] public float Distance;
        [RTTI.Member(7, 0x3C, "Logic")] public bool TriggerWhenOutside;
    }

    [RTTI.Serializable(0xB2B3440DA49DC68F, GameType.DS)]
    public class EntityProximityQuestTriggerInstance : EntityListQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x3D6B5E7805A46F7A, GameType.DS)]
    public class EntityQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x596CF9EBB8EB3937, GameType.DS)]
    public class EntityRep : RTTIObject
    {
        [RTTI.BaseClass(0x10)] public DrawableObjectInstance @DrawableObjectInstance;
    }

    [RTTI.Serializable(0xBD1CA9C659B266FD, GameType.DS)]
    public class EntityResource : ResourceWithNameHash
    {
        [RTTI.BaseClass(0x28)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(11, 0x0, "Logic")] public bool Lockable;
        [RTTI.Member(12, 0x0, "Logic")] public bool ZoomLockable;
        [RTTI.Member(8, 0x40, "Logic")] public EUpdateFrequency UpdateFrequency;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<EntityActivationPolicy> ActivationPolicy;
        [RTTI.Member(13, 0x58, "Logic")] public Ref<ModelResource> ModelResource;
        [RTTI.Member(27, 0x60, "Network")] public bool MustBeReplicated;
        [RTTI.Member(14, 0x61, "Logic")] public bool SlideOffFrom;
        [RTTI.Member(15, 0x62, "Logic")] public bool JumpableFrom;
        [RTTI.Member(25, 0x68, "AI")] public Ref<AIFaction> DefaultFaction;
        [RTTI.Member(22, 0x70, "LOD")] public bool SkipUpdateWhenRepNotVisible;
        [RTTI.Member(23, 0x74, "LOD")] public float MaxUpdateDistance;
        [RTTI.Member(9, 0x78, "Logic")] public bool AdjustUpdateFrequency;
        [RTTI.Member(17, 0x79, "Logic")] public bool DisableCollisionWithParent;
        [RTTI.Member(29, 0x7A, "Scene")] public bool CanPlaceNoTilePosition;
        [RTTI.Member(30, 0x7B, "Scene")] public bool CanPlaceLeargeScene;
        [RTTI.Member(20, 0x7C, "Logic")] public bool DisableAppplyDamageImpulse;
        [RTTI.Member(18, 0x80, "Logic")] public CPtr<EntityAction> InitialAction;
        [RTTI.Member(19, 0x88, "Logic")] public CPtr<EntityAction> ContactAction;
        [RTTI.Member(16, 0x90, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
    }

    [RTTI.Serializable(0xB325D25327269594, GameType.DS)]
    public class EntityResourceQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x5642C6A8DEFC3AE6, GameType.DS)]
    public class EntityResourceQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0x194270BEBFE4409A, GameType.DS)]
    public class EntityResourceSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(13, 0x60, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
    }

    [RTTI.Serializable(0x38178B4C7E50B2E2, GameType.DS)]
    public class EntityResourceSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x136774EB314FB088, GameType.DS)]
    public class EntityResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x689695D0524DD08, GameType.DS)]
    public class EntityScannedQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(9, 0x78, "Logic")] public bool PerformInitialCheck;
        [RTTI.Member(10, 0x79, "Logic")] public bool AllowDoubleScanning;
    }

    [RTTI.Serializable(0xEE722ED8D957C365, GameType.DS)]
    public class EntitySoundGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x785992DA961E10E9, GameType.DS)]
    public class EntitySoundNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x132044F170D23D92, GameType.DS)]
    public class EntitySoundNodeStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0x3F7DFEC3F7C9FE6A, GameType.DS)]
    public class EntitySpawnedCollisionQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xDC308D5EA7861C6C, GameType.DS)]
    public class EntitySpawnedDeathQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x6D32C57A4794F7DF, GameType.DS)]
    public class EntitySpawnedHitReactionQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x7A622857B2C29E36, GameType.DS)]
    public class EntitySpawnedObtainedQuestTriggerInstance : ObtainItemsQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xA2C2E23F94E1AAF9, GameType.DS)]
    public class EntitySpawnedScannedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x1ACF59F515F850FD, GameType.DS)]
    public class EntitySpawnedSpottedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x59B4AE756118613D, GameType.DS)]
    public class EntitySpawnedUsedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x391C68AC6878D06A, GameType.DS)]
    public class EntitySpottedQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(9, 0x78, "Logic")] public bool PerformInitialCheck;
        [RTTI.Member(10, 0x79, "Logic")] public UUIDRef<SpottableComponentResource> SpottableComponent;
    }

    [RTTI.Serializable(0xE61FD66A8FD4A5D9, GameType.DS)]
    public class EntitySticker : EntityComponent
    {
    }

    [RTTI.Serializable(0x36E6AA02713958BF, GameType.DS)]
    public class EntityStickerResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Vec3 StickNormal;
        [RTTI.Member(4, 0x30, "Logic")] public float StickOffset;
        [RTTI.Member(5, 0x34, "Logic")] public bool AlignWithSurface;
        [RTTI.Member(6, 0x38, "Logic")] public float ReleaseTime;
        [RTTI.Member(7, 0x3C, "Logic")] public bool ShouldBeDestroyedOnAutoRelease;
        [RTTI.Member(8, 0x3D, "Logic")] public bool CanStickOnce;
        [RTTI.Member(9, 0x3E, "Logic")] public bool CanStickToWorld;
        [RTTI.Member(10, 0x3F, "Logic")] public bool CanStickToHumans;
        [RTTI.Member(11, 0x40, "Logic")] public bool CanStickToEntities;
        [RTTI.Member(12, 0x41, "Logic")] public bool CanStickToFriendlies;
        [RTTI.Member(13, 0x42, "Logic")] public bool ShouldBeDispensableAfterStick;
        [RTTI.Member(14, 0x48, "Logic")] public Ref<DispensableCategoryResource> DispensableCategory;
        [RTTI.Member(21, 0x50, "Representation")] public Ref<SoundResource> StickSoundResource;
        [RTTI.Member(15, 0x58, "Logic")] public CPtr<EntityAction> StuckAction;
        [RTTI.Member(16, 0x60, "Logic")] public CPtr<EntityAction> StickIgnoredAction;
        [RTTI.Member(17, 0x68, "Logic")] public Ref<GraphProgramResource> StickConditionProgram;
        [RTTI.Member(18, 0x70, "Logic")] public bool HasCollisionWhileStuck;
        [RTTI.Member(19, 0x78, "Logic")] public Ref<MoverResource> UnstickMoverResource;
    }

    [RTTI.Serializable(0xEAA64076F070CB1F, GameType.DS)]
    public class EntitySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEEFF76C9046F3C7A, GameType.DS)]
    public class EntityTypeCollisionQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x1D17540A5BECA164, GameType.DS)]
    public class EntityTypeDeathQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x9F7E214B14CA975A, GameType.DS)]
    public class EntityTypeHitReactionQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xA22A5299F6109952, GameType.DS)]
    public class EntityTypeObtainedQuestTriggerInstance : ObtainItemsQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xBB13FBBAB90A8066, GameType.DS)]
    public class EntityTypeScannedQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x46A76491C8C4AE9B, GameType.DS)]
    public class EntityTypeSpottedQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xC552CA2BB65F0B3E, GameType.DS)]
    public class EntityTypeUsedQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xCD62C996CAC802C4, GameType.DS)]
    public class EntityUsedQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(9, 0x78, "Logic")] public bool PerformInitialCheck;
        [RTTI.Member(10, 0x79, "Logic")] public bool AllowDoubleUse;
    }

    [RTTI.Serializable(0x12EE0426C2998362, GameType.DS)]
    public class EnumFact : Fact
    {
        [RTTI.Member(9, 0x30, "Logic")] public Ref<EnumFactEntry> DefaultValue;
        [RTTI.Member(10, 0x38, "Logic")] public Ref<EnumFactDefinition> EnumDefinition;
    }

    [RTTI.Serializable(0xE7225228410B92C0, GameType.DS)]
    public class EnumFactConditionResource : FactConditionResource
    {
        [RTTI.Member(4, 0x30, "Logic")] public Ref<EnumFact> EnumFact;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<EnumFactEntry> EnumFactEntry;
        [RTTI.Member(3, 0x40, "Logic")] public EFactConditionContextMode ContextMode;
        [RTTI.Member(6, 0x41, "Logic")] public EFactConditionCompareOperator CompareType;
    }

    [RTTI.Serializable(0xD5273899E6B082DC, GameType.DS)]
    public class EnumFactDefinition : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<EnumFactEntry>> EnumValues;
    }

    [RTTI.Serializable(0xD91716B58198721B, GameType.DS)]
    public class EnumFactEntry : ResourceWithName
    {
    }

    [RTTI.Serializable(0xD99922B08172521F, GameType.DS)]
    public class EnumFactSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4C9262170B87A37F, GameType.DS)]
    public class EnumFactValue : FactValueBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EnumFact> TypedFact;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EnumFactEntry> TypedValue;
    }

    [RTTI.Serializable(0xF42E096E2D41D6B, GameType.DS)]
    public class EnvelopeData
    {
        [RTTI.Member(0, 0x0)] public EnvelopeSegment_MAX_ENVELOPE_SEGMENTS<EnvelopeSegment> Segments;
        [RTTI.Member(1, 0x0)] public EEnvelopeMode Mode;
    }

    [RTTI.Serializable(0x52CB97C26DF6CD22, GameType.DS)]
    public class EnvelopeResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EnvelopeData Data;
    }

    [RTTI.Serializable(0x5B710C9211DF3E24, GameType.DS)]
    public class EnvelopeSegment
    {
        [RTTI.Member(0, 0x0)] public LinearGainFloat TargetLevel;
        [RTTI.Member(1, 0x4)] public float Exponent;
        [RTTI.Member(2, 0x8)] public float Duration;
    }

    [RTTI.Serializable(0xDCA02898C2C034F5, GameType.DS)]
    public class EnvelopeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0xBF858C747B283035, GameType.DS)]
    public class EnvironmentInteractionManager : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<EnvironmentInteractionSystem>> Systems;
    }

    [RTTI.Serializable(0x8B13A617E6101A19, GameType.DS)]
    public class EnvironmentInteractionPositionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x56C086E8BB58DE8D, GameType.DS)]
    public class EnvironmentInteractionPositionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "General")] public Ref<LocatorResource> OverridePosition;
    }

    [RTTI.Serializable(0xA7C6F81F4463B234, GameType.DS)]
    public class EnvironmentInteractionRenderSettings
    {
        [RTTI.Member(0, 0x4)] public EEnvironmentInteractionWorldSize WorldSize;
        [RTTI.Member(1, 0x6)] public EEnvironmentInteractionTexRes TextureResolution;
        [RTTI.Member(2, 0x8)] public float PixelJitterFactor;
        [RTTI.Member(3, 0xC)] public float NonUniformExponent;
        [RTTI.Member(4, 0x10)] public bool RenderMovingObjectsOnly;
    }

    [RTTI.Serializable(0xCCE14297F19857C1, GameType.DS)]
    public class EnvironmentInteractionRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> SkinnedRenderShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> InstancedRenderShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> BatchedRenderShader;
    }

    [RTTI.Serializable(0x309E0B35993AF3FD, GameType.DS)]
    public class EnvironmentInteractionSystem : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x2F9D8FC99B3EDDCA, GameType.DS)]
    public class EnvironmentInteractionTargetsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public EnvironmentInteractionTargets Targets;
    }

    [RTTI.Serializable(0x672142D72FB0BDA5, GameType.DS)]
    public class EnvironmentSound : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<SoundResource> Sound;
        [RTTI.Member(3, 0x28)] public int MinInstanceCount;
        [RTTI.Member(4, 0x2C)] public int MaxInstanceCount;
        [RTTI.Member(5, 0x30)] public float MinElevation;
        [RTTI.Member(6, 0x34)] public float MaxElevation;
        [RTTI.Member(7, 0x38)] public float RespawnDistance;
        [RTTI.Member(8, 0x3C)] public float RespawnPoint;
        [RTTI.Member(9, 0x40)] public float MinDistance;
        [RTTI.Member(10, 0x50)] public BoundingBox3 Bounds;
    }

    [RTTI.Serializable(0x9C350926E0FEEEC4, GameType.DS)]
    public class EnvironmentSoundGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1F44986CE2D7092, GameType.DS)]
    public class EnvironmentSoundSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x21190739C889411A, GameType.DS)]
    public class EpicCacheAchievement
    {
        [RTTI.Member(0, 0x0, true)] public int Id;
    }

    [RTTI.Serializable(0x3FE4CBEBE6B9C46C, GameType.DS)]
    public class EpicCacheStat
    {
        [RTTI.Member(0, 0x0, true)] public String Name;
        [RTTI.Member(1, 0x8, true)] public int Value;
    }

    [RTTI.Serializable(0x5D4474793E9D1668, GameType.DS)]
    public class EquipSlot : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EEquipSlotType SlotType;
        [RTTI.Member(4, 0x24, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x9F622239DA8B05F2, GameType.DS)]
    public class EquipmentSlotComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFFDA565D9028EAB3, GameType.DS)]
    public class EquipmentSlotComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<EquipSlot>> EquipSlots;
    }

    [RTTI.Serializable(0x4892DFD0CF82F475, GameType.DS)]
    public class EquipmentSlotComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x92FE438CE5E6C8E4, GameType.DS)]
    public class EquipmentStatsDisplaySystem : CoreObject
    {
    }

    [RTTI.Serializable(0x3202D136412140B7, GameType.DS)]
    public class EquipmentStatsDisplaySystemResource : Resource
    {
        [RTTI.Member(20, 0x20, "DamageTypes")] public Ref<DamageTypeResource> Fire;
        [RTTI.Member(21, 0x28, "DamageTypes")] public Ref<DamageTypeResource> Cryo;
        [RTTI.Member(22, 0x30, "DamageTypes")] public Ref<DamageTypeResource> Shock;
        [RTTI.Member(23, 0x38, "DamageTypes")] public Ref<DamageTypeResource> Poison;
        [RTTI.Member(24, 0x40, "DamageTypes")] public Ref<DamageTypeResource> Tear;
        [RTTI.Member(4, 0x48, "Effectiveness")] public Ref<DisplayStatDefinition> DamageEffectiveness;
        [RTTI.Member(9, 0x50, "Effectiveness")] public Ref<DisplayStatDefinition> TearEffectiveness;
        [RTTI.Member(5, 0x58, "Effectiveness")] public Ref<DisplayStatDefinition> FireEffectiveness;
        [RTTI.Member(6, 0x60, "Effectiveness")] public Ref<DisplayStatDefinition> CryoEffectiveness;
        [RTTI.Member(7, 0x68, "Effectiveness")] public Ref<DisplayStatDefinition> ShockEffectiveness;
        [RTTI.Member(8, 0x70, "Effectiveness")] public Ref<DisplayStatDefinition> PoisonEffectiveness;
        [RTTI.Member(13, 0x78, "Resistances")] public Ref<DisplayStatDefinition> RangedDamageResistance;
        [RTTI.Member(14, 0x80, "Resistances")] public Ref<DisplayStatDefinition> MeleeDamageResistance;
        [RTTI.Member(15, 0x88, "Resistances")] public Ref<DisplayStatDefinition> FireResistance;
        [RTTI.Member(16, 0x90, "Resistances")] public Ref<DisplayStatDefinition> CryoResistance;
        [RTTI.Member(17, 0x98, "Resistances")] public Ref<DisplayStatDefinition> ShockResistance;
        [RTTI.Member(18, 0xA0, "Resistances")] public Ref<DisplayStatDefinition> PoisonResistance;
        [RTTI.Member(10, 0xA8, "Effectiveness")] public Ref<DisplayStatDefinition> Stealth;
        [RTTI.Member(11, 0xB0, "Effectiveness")] public Ref<DisplayStatDefinition> Handling;
        [RTTI.Member(2, 0xB8)] public int ModificationBarSize;
    }

    [RTTI.Serializable(0x87EA50B4E837636F, GameType.DS)]
    public class EquipmentViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xFC29E9EFCF478F50, GameType.DS)]
    public class ErrorMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int ErrorCode;
    }

    [RTTI.Serializable(0xC8246B4FCB5303D4, GameType.DS)]
    public class EventFunctionMapping
    {
        [RTTI.Member(0, 0x8)] public int FunctionIndex;
        [RTTI.Member(1, 0x10)] public String EventRTTIName;
    }

    [RTTI.Serializable(0x4C85F2C3B32F701A, GameType.DS)]
    public class EventInstance : CoreObject
    {
    }

    [RTTI.Serializable(0x8C1A238280881722, GameType.DS)]
    public class EventResource : Resource
    {
        [RTTI.Member(4, 0x20, "Event")] public int StartFrame;
        [RTTI.Member(3, 0x24, "Event")] public bool Enabled;
    }

    [RTTI.Serializable(0xF708CF07CD644E62, GameType.DS)]
    public class ExclusionArea : ParentWorldNode
    {
        [RTTI.Member(6, 0x70)] public Ref<TerrainHull> Hull;
    }

    [RTTI.Serializable(0x391964D2F7423354, GameType.DS)]
    public class ExecuteNodeGraphAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<OverrideGraphProgramResource> OverrideGraphProgram;
        [RTTI.Member(6, 0x38, "Logic")] public bool AllowMultiThreadedExecution;
    }

    [RTTI.Serializable(0x834AE75D3ABB6766, GameType.DS)]
    public class ExecuteOnChildAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(5, 0x30, "Logic")] public bool Recursive;
    }

    [RTTI.Serializable(0x25FA12E946A555C6, GameType.DS)]
    public class ExecuteOnParentAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<EntityAction> Action;
    }

    [RTTI.Serializable(0xC8BA6404F84405EF, GameType.DS)]
    public class ExertionAnimationEvent : Resource
    {
        [RTTI.Member(3, 0x20, "EventLogic")] public String AnimEventText;
        [RTTI.Member(4, 0x28, "EventLogic")] public EExertionAnimationEventTriggerType TriggerType;
        [RTTI.Member(5, 0x30, "EventLogic")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(6, 0x38, "EventLogic")] public float CooldownDuration;
    }

    [RTTI.Serializable(0x6938C5DEA6789402, GameType.DS)]
    public class ExertionEventComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2BBE87051EACB236, GameType.DS)]
    public class ExertionEventComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<ExertionAnimationEvent>> Events;
    }

    [RTTI.Serializable(0x9177B40B73C87E33, GameType.DS)]
    public class ExplorationSystemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float FogOfWarRevealDistance;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<UIMarkerTag> CustomMarkerType;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<UIMarkerTag> CustomMarkerIconBinding;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<UIMarkerTag> CustomMarkerTitleBinding;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<UITexture> CustomMarkerIcon;
        [RTTI.Member(8, 0x48, "Logic")] public Ref<LocalizedTextResource> CustomMarkerTitle;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<WorldDataType> TerrainHeightMapDataType;
        [RTTI.Member(10, 0x58, "Logic")] public Ref<WorldDataType> ObjectHeightMapDataType;
        [RTTI.Member(11, 0x60, "Logic")] public float CustomMarkerRemovalDistance;
        [RTTI.Member(12, 0x64, "Logic")] public float MarkerHighlightTime;
        [RTTI.Member(13, 0x68, "Logic")] public Array<Ref<UIMarkerFilter>> MapIconFilters;
    }

    [RTTI.Serializable(0xF42D4E52D0AA5E7A, GameType.DS)]
    public class Explosion : Entity
    {
    }

    [RTTI.Serializable(0xC7C8A9EFD740AD5A, GameType.DS)]
    public class ExplosionOnContactComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x653D804EF424E0DD, GameType.DS)]
    public class ExplosionResource : EntityResource
    {
        [RTTI.Member(32, 0x100, "Logic")] public Ref<AreaTargetingSettings> TargetingSettings;
        [RTTI.Member(44, 0x108, "VisualEffects")] public Ref<MaterialTypeResource> ExplosionMaterialTypeResource;
        [RTTI.Member(45, 0x110, "VisualEffects")] public Ref<MaterialTypeResource> ExplosionContactMaterialTypeResource;
        [RTTI.Member(46, 0x118, "VisualEffects")] public float ExplosionMaterialTypeRadius;
        [RTTI.Member(52, 0x11C, "LineExplosion")] public bool LineExplosion;
        [RTTI.Member(53, 0x120, "LineExplosion")] public Vec3 Start;
        [RTTI.Member(54, 0x130, "LineExplosion")] public Vec3 End;
        [RTTI.Member(31, 0x140, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(33, 0x150, "Logic")] public float ShockWaveSpeed;
        [RTTI.Member(34, 0x154, "Logic")] public float ShockWaveImpactSpeed;
        [RTTI.Member(35, 0x158, "Logic")] public bool AlignWithCollisionNormal;
        [RTTI.Member(36, 0x15C, "Logic")] public float SurfaceOffset;
        [RTTI.Member(48, 0x160, "AI")] public Ref<AIAuralStimulusResource> ExplosionSoundStimulus;
        [RTTI.Member(38, 0x168, "Logic")] public Ref<CurveResource> ExplosionShapeCurve;
        [RTTI.Member(39, 0x170, "Logic")] public bool ShapedExplosionIsHorizontal;
        [RTTI.Member(40, 0x171, "Logic")] public bool OnlyDamageEnemyFaction;
        [RTTI.Member(41, 0x172, "Logic")] public bool IgnoreInstigator;
        [RTTI.Member(42, 0x173, "Logic")] public bool IgnoreAttachedEntities;
        [RTTI.Member(37, 0x174, "Logic")] public bool AlwaysCollapseEntityHits;
        [RTTI.Member(49, 0x178, "AI")] public EAIDangerAreaType AIDangerAreaType;
        [RTTI.Member(50, 0x17C, "AI")] public bool SetInstigatorOnPerceptionEvent;
    }

    [RTTI.Serializable(0x5153A6D41FA47449, GameType.DS)]
    public class ExplosionResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1907E58DBE672BF7, GameType.DS)]
    public class ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x91BB0344AA2A5EB, GameType.DS)]
    public class ExportedSymbols
    {
    }

    [RTTI.Serializable(0xA8841E6C1706FC65, GameType.DS)]
    public class ExposedEntityActionInfo
    {
        [RTTI.Member(0, 0x0)] public String Identifier;
        [RTTI.Member(1, 0x8)] public CPtr<EntityAction> EntityAction;
    }

    [RTTI.Serializable(0xF0FF39920FE2AA79, GameType.DS)]
    public class ExposedEntityActionsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x99EBDFE19C835B18, GameType.DS)]
    public class ExposedEntityActionsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<ExposedEntityActionInfo> ExposedEntityActions;
    }

    [RTTI.Serializable(0x4E01EDEF8C591126, GameType.DS)]
    public class ExposedEventAttribute
    {
        [RTTI.Member(0, 0x0)] public Ref<EventResource> EventResource;
        [RTTI.Member(1, 0x8)] public String AttributeName;
        [RTTI.Member(2, 0x10)] public String ExposedName;
    }

    [RTTI.Serializable(0x46A932284DEA1A32, GameType.DS)]
    public class ExposedEventAttributeList
    {
        [RTTI.Member(0, 0x0)] public Array<ExposedEventAttribute> ExposedEventAttributes;
    }

    [RTTI.Serializable(0x987751596455762E, GameType.DS)]
    public class ExposedEventMapping
    {
        [RTTI.Member(0, 0x0)] public String ExposedName;
        [RTTI.Member(1, 0x8)] public Ref<EventResource> EventResource;
    }

    [RTTI.Serializable(0x910250AD33A77E12, GameType.DS)]
    public class ExposureSettings
    {
        [RTTI.Member(8, 0x0, "Settings")] public float AdjustPercentPerSecond;
        [RTTI.Member(9, 0x10, "Settings")] public FRect ExposureMeteringRectangle;
        [RTTI.Member(10, 0x20, "Settings")] public float WhiteBalanceStrength;
        [RTTI.Member(11, 0x24, "Settings")] public float WhiteBalanceMaxOutlier;
        [RTTI.Member(2, 0x30, "Settings")] public float MidpointMeteredEV;
        [RTTI.Member(3, 0x34, "Settings")] public float MidpointLockedRange;
        [RTTI.Member(4, 0x38, "Settings")] public float MidpointCompensation;
        [RTTI.Member(5, 0x3C, "Settings")] public float MaxCompensationDecrease;
        [RTTI.Member(6, 0x40, "Settings")] public float MaxCompensationIncrease;
        [RTTI.Member(7, 0x44, "Settings")] public float CompensationPerMeteredEV;
        [RTTI.Member(1, 0x48, "Settings")] public bool OnlyAddMidpointCompensation;
        [RTTI.Member(12, 0x4C, "Settings")] public float MinExposureValue;
        [RTTI.Member(13, 0x50, "Settings")] public float MaxExposureValue;
        [RTTI.Member(14, 0x54, "Settings")] public float MaxExposureIncrease;
        [RTTI.Member(15, 0x58, "Settings")] public float MaxExposureDecrease;
        [RTTI.Member(16, 0x5C, "Settings")] public float OverExposureValue;
    }

    [RTTI.Serializable(0x6FDA7C501FC769F9, GameType.DS)]
    public class ExposureSettingsInstance : ExposureSettingsResource
    {
    }

    [RTTI.Serializable(0xED6AE30966D22DCE, GameType.DS)]
    public class ExposureSettingsResource : Resource
    {
        [RTTI.Member(10, 0x20, "Settings")] public float AdjustPercentPerSecond;
        [RTTI.Member(11, 0x30, "Settings")] public FRect ExposureMeteringRectangle;
        [RTTI.Member(12, 0x40, "Settings")] public float WhiteBalanceStrength;
        [RTTI.Member(13, 0x44, "Settings")] public float WhiteBalanceMaxOutlier;
        [RTTI.Member(4, 0x50, "Settings")] public float MidpointMeteredEV;
        [RTTI.Member(5, 0x54, "Settings")] public float MidpointLockedRange;
        [RTTI.Member(6, 0x58, "Settings")] public float MidpointCompensation;
        [RTTI.Member(7, 0x5C, "Settings")] public float MaxCompensationDecrease;
        [RTTI.Member(8, 0x60, "Settings")] public float MaxCompensationIncrease;
        [RTTI.Member(9, 0x64, "Settings")] public float CompensationPerMeteredEV;
        [RTTI.Member(3, 0x68, "Settings")] public bool OnlyAddMidpointCompensation;
        [RTTI.Member(14, 0x6C, "Settings")] public float MinExposureValue;
        [RTTI.Member(15, 0x70, "Settings")] public float MaxExposureValue;
        [RTTI.Member(16, 0x74, "Settings")] public float MaxExposureIncrease;
        [RTTI.Member(17, 0x78, "Settings")] public float MaxExposureDecrease;
        [RTTI.Member(18, 0x7C, "Settings")] public float OverExposureValue;
    }

    [RTTI.Serializable(0x84BA1732687E8CDB, GameType.DS)]
    public class ExternalAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBFBE359DAA2E95EE, GameType.DS)]
    public class ExternalAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ExternalAnimationConfiguration>> PoseConfigurations;
        [RTTI.Member(3, 0x30)] public Ref<SkeletonAnimationResource> DefaultAnimationResource;
        [RTTI.Member(6, 0x38)] public Ref<MorphemeEventMappingsResource> EventMappings;
        [RTTI.Member(7, 0x40)] public Ref<DSAnimCustomResource> CustomResource;
        [RTTI.Member(4, 0x48)] public bool LoopDefaultAnimation;
        [RTTI.Member(5, 0x49)] public bool IgnoreDefaultAnimationRootBone;
    }

    [RTTI.Serializable(0xC1C89ED6241995E9, GameType.DS)]
    public class ExternalAnimationConfiguration : ResourceWithName
    {
        [RTTI.Member(4, 0x28)] public String StartSequenceVariableName;
        [RTTI.Member(5, 0x30)] public String PartialBlendWeightName;
        [RTTI.Member(6, 0x38)] public bool DisableAnimationManager;
        [RTTI.Member(7, 0x39)] public bool DisableAnimationManagerOnLOD;
    }

    [RTTI.Serializable(0x5E6F471BE21B6347, GameType.DS)]
    public class ExtraAmmoComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9F9CBF1000E83022, GameType.DS)]
    public class ExtraAmmoComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<ExtraAmmoModifier>> ExtraAmmoModifiers;
    }

    [RTTI.Serializable(0xED5174E663ADADB7, GameType.DS)]
    public class ExtraAmmoModifier : CoreObject
    {
        [RTTI.Member(3, 0x20)] public int ExtraRoundsPerMagazine;
        [RTTI.Member(2, 0x24)] public int ExtraRoundsTotal;
        [RTTI.Member(4, 0x28)] public Ref<AmmoType> AmmoType;
        [RTTI.Member(5, 0x30)] public Ref<TagProperty> RequiredTag;
    }

    [RTTI.Serializable(0xDC198D1D26AF8136, GameType.DS)]
    public class ExtraArmorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5B5C47361594E3F7, GameType.DS)]
    public class ExtraArmorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float ExtraArmor;
        [RTTI.Member(4, 0x24, "Logic")] public float DepletionDelay;
        [RTTI.Member(5, 0x28, "Logic")] public float DepletionRate;
        [RTTI.Member(6, 0x30, "Logic")] public Array<Ref<DamageTypeResource>> ExcludedDamageTypes;
    }

    [RTTI.Serializable(0x15F8D0DEAE41F937, GameType.DS)]
    public class ExtraArmorComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9206AD2B2513DCC1, GameType.DS)]
    public class ExtraHealthComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8A72AFFA96D16BE1, GameType.DS)]
    public class ExtraHealthComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float ExtraHealth;
        [RTTI.Member(4, 0x24, "Logic")] public bool StartFilled;
    }

    [RTTI.Serializable(0x6F30669EA81B4FAC, GameType.DS)]
    public class ExtraHealthComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4D392C8A549B7322, GameType.DS)]
    public class EyeLookAtEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF5A6E924D97481F9, GameType.DS)]
    public class EyeLookAtEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0x2C4618B7FFF50B99, GameType.DS)]
    public class FArc
    {
        [RTTI.Member(0, 0x0)] public FOrientation Start;
        [RTTI.Member(1, 0x4)] public FOrientation End;
    }

    [RTTI.Serializable(0xA8797159F1A749F0, GameType.DS)]
    public class FOrientation
    {
        [RTTI.Member(0, 0x0)] public float Angle;
    }

    [RTTI.Serializable(0xDD93A3080511263D, GameType.DS)]
    public class FRGBAColor
    {
        [RTTI.Member(0, 0x0)] public float R;
        [RTTI.Member(1, 0x4)] public float G;
        [RTTI.Member(2, 0x8)] public float B;
        [RTTI.Member(3, 0xC)] public float A;
    }

    [RTTI.Serializable(0x5C2820BB38B8F222, GameType.DS)]
    public class FRGBChroma
    {
        [RTTI.Member(0, 0x0)] public FRGBColor RGB;
    }

    [RTTI.Serializable(0xA6C28FAA559677E0, GameType.DS)]
    public class FRGBColor
    {
        [RTTI.Member(0, 0x0)] public float R;
        [RTTI.Member(1, 0x4)] public float G;
        [RTTI.Member(2, 0x8)] public float B;
    }

    [RTTI.Serializable(0xD246FA10D3F617C6, GameType.DS)]
    public class FRange
    {
        [RTTI.Member(0, 0x0)] public float Min;
        [RTTI.Member(1, 0x4)] public float Max;
    }

    [RTTI.Serializable(0x167B336446D5999B, GameType.DS)]
    public class FRect
    {
        [RTTI.Member(0, 0x0)] public float Left;
        [RTTI.Member(1, 0x4)] public float Top;
        [RTTI.Member(2, 0x8)] public float Right;
        [RTTI.Member(3, 0xC)] public float Bottom;
    }

    [RTTI.Serializable(0x352CF045DF137051, GameType.DS)]
    public class FSize
    {
        [RTTI.Member(0, 0x0)] public float Width;
        [RTTI.Member(1, 0x4)] public float Height;
    }

    [RTTI.Serializable(0x84F74D2D3726FBA9, GameType.DS)]
    public class FaceTowardsEventInstance : AimAtEventInstance
    {
    }

    [RTTI.Serializable(0x69B05A6A392A1657, GameType.DS)]
    public class FaceTowardsEventResource : AimAtEventResource
    {
    }

    [RTTI.Serializable(0x9D100B72372C5EB1, GameType.DS)]
    public class FacialAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x557D80DA3ED8F439, GameType.DS)]
    public class FacialAnimationComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x2670AC10DBFAF794, GameType.DS)]
    public class FacialAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x20, "Representation")] public Ref<MeshResourceBase> FacialMesh;
        [RTTI.Member(6, 0x28, "Representation")] public Ref<Skeleton> FacialSkeleton;
        [RTTI.Member(7, 0x30, "Representation")] public Ref<SkinnedMeshBoneBoundingBoxes> BoneBoundingBoxes;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<SkeletonAnimationResource> FacialAnimation;
        [RTTI.Member(8, 0x50, "Representation")] public Array<FacialAnimationLOD> LODs;
        [RTTI.Member(9, 0x60, "Representation")] public Ref<PoseDeformerResource> PoseDeformer;
        [RTTI.Member(10, 0x78, "Representation")] public String HeadOrientationBone;
        [RTTI.Member(11, 0x80, "Representation")] public Vec3 HeadOrientationForward;
        [RTTI.Member(12, 0x90, "Representation")] public float HeadMaxVisibleAngle;
    }

    [RTTI.Serializable(0x9A8BB5479B15B79A, GameType.DS)]
    public class FacialAnimationComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7FD9A515ECA6A890, GameType.DS)]
    public class FacialAnimationEventInstance : FacialAnimationEventInstanceBase
    {
    }

    [RTTI.Serializable(0xF09749FE0BEBEA59, GameType.DS)]
    public class FacialAnimationEventInstanceBase : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x20DDB3DA6EB4F844, GameType.DS)]
    public class FacialAnimationEventResource : FacialAnimationEventResourceBase
    {
        [RTTI.Member(15, 0x60, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
    }

    [RTTI.Serializable(0x7ACD2D935E55214A, GameType.DS)]
    public class FacialAnimationEventResourceBase : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(13, 0x50, "Logic")] public Ref<CurveResource> BlendCurveResource;
        [RTTI.Member(14, 0x58, "Logic")] public int BlendOutAfterEventNumFrames;
    }

    [RTTI.Serializable(0xCFF66B0048B438D2, GameType.DS)]
    public class FacialAnimationLOD
    {
        [RTTI.Member(0, 0x0)] public float Distance;
        [RTTI.Member(1, 0x8)] public Ref<FacialAnimationProgramResource> ProgramResource;
        [RTTI.Member(2, 0x18)] public Ref<GraphProgramResource> OverrideAnimGraphProgramResource;
        [RTTI.Member(3, 0x20)] public bool DisablePoseDeformer;
        [RTTI.Member(4, 0x70)] public Array<int> CorrespondingJoints;
        [RTTI.Member(5, 0x80)] public Array<int> CorrespondingControls;
    }

    [RTTI.Serializable(0xA1DA85062C520712, GameType.DS)]
    public class FacialAnimationProgramResource : ProgramResource
    {
        [RTTI.Member(7, 0x48, "Logic")] public String ProceduralRigSourceFile;
    }

    [RTTI.Serializable(0x212F1E3AF0BF1F51, GameType.DS)]
    public class FacialEmotionAnimationResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
    }

    [RTTI.Serializable(0x26AB4CAAAA93282B, GameType.DS)]
    public class FacialEmotionEventInstance : FacialAnimationEventInstanceBase
    {
    }

    [RTTI.Serializable(0xCF404379D49ED259, GameType.DS)]
    public class FacialEmotionEventResource : FacialAnimationEventResourceBase
    {
    }

    [RTTI.Serializable(0xBEC7C5F43BD64D76, GameType.DS)]
    public class Fact : Property
    {
        [RTTI.Member(7, 0x28, "Logic")] public bool Persistent;
    }

    [RTTI.Serializable(0x7F65791999F68B85, GameType.DS)]
    public class FactBasedContextualEmotion : ContextualEmotion
    {
        [RTTI.Member(10, 0x68, "Logic")] public Ref<BooleanFact> Fact;
    }

    [RTTI.Serializable(0xAE3DE8947084C0CF, GameType.DS)]
    public class FactCollectionResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<FactValueBase>> Facts;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<FactCollectionResource>> FactCollections;
    }

    [RTTI.Serializable(0x99E290863EAD3803, GameType.DS)]
    public class FactCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(13, 0xF0, "General")] public Ref<BooleanFact> Fact;
        [RTTI.Member(14, 0xF8, "General")] public Array<Ref<BooleanFact>> Facts;
    }

    [RTTI.Serializable(0xC592B521E5A9390E, GameType.DS)]
    public class FactConditionInstance : ConditionInstance
    {
    }

    [RTTI.Serializable(0x8F0D917790A58B7D, GameType.DS)]
    public class FactConditionResource : ConditionResource
    {
    }

    [RTTI.Serializable(0x5797E50E5581DE47, GameType.DS)]
    public class FactDatabaseApplicationContext : CoreObject
    {
    }

    [RTTI.Serializable(0xA98B9B487427CAC0, GameType.DS)]
    public class FactDatabaseApplicationContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAC3032A2E9D3FB9B, GameType.DS)]
    public class FactDatabaseGlobalContext : CoreObject
    {
    }

    [RTTI.Serializable(0xF72E0CF98A2AFABF, GameType.DS)]
    public class FactDatabaseGlobalContextSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x96354EA941C3AB1B, GameType.DS)]
    public class FactDatabaseResource : Resource
    {
        [RTTI.Member(3, 0x20, "EntityFacts")] public Ref<BooleanFact> IsDeadFact;
    }

    [RTTI.Serializable(0xEC08F6EA25E2BBFC, GameType.DS)]
    public class FactDatabaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB82BD855EC5EB3BB, GameType.DS)]
    public class FactMapping : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<IntegerFact> Fact;
        [RTTI.Member(1, 0x10)] public String Key;
    }

    [RTTI.Serializable(0xE992210E357C3DE5, GameType.DS)]
    public class FactMusicPreset
    {
        [RTTI.Member(1, 0x0, "General")] public String PresetName;
        [RTTI.Member(2, 0x8, "General")] public String ExitPresetName;
        [RTTI.Member(3, 0x10, "General")] public Ref<EnumFactEntry> FactValue;
    }

    [RTTI.Serializable(0xCEC7C56FFD82D2E9, GameType.DS)]
    public class FactMusicPresetCollection : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<FactMusicPreset> MusicPresets;
        [RTTI.Member(4, 0x30, "General")] public Ref<EnumFact> Fact;
    }

    [RTTI.Serializable(0x6F02AEE6FBCFA227, GameType.DS)]
    public class FactMusicPresetCollectionSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x250A49D2D7D8C3F5, GameType.DS)]
    public class FactMusicPresetSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1D4FA2C312EA6A24, GameType.DS)]
    public class FactPauseEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x1D4CC17CCEE98A9F, GameType.DS)]
    public class FactPauseEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x30, "Logic")] public ESequenceFactContextType FactContextType;
        [RTTI.Member(7, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<BooleanFact> UnpauseFact;
    }

    [RTTI.Serializable(0x6608C43D95FE69D4, GameType.DS)]
    public class FactStatModifierResource : ActiveStatModifierResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<BooleanFact> Fact;
    }

    [RTTI.Serializable(0xAA142D7D88F24B35, GameType.DS)]
    public class FactValueBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xE1881B57671D028B, GameType.DS)]
    public class FactionOverride
    {
        [RTTI.Member(0, 0x0)] public Ref<AIFaction> FromFaction;
        [RTTI.Member(1, 0x8)] public Ref<AIFaction> ToFaction;
    }

    [RTTI.Serializable(0x5BCD8C7214E5AF32, GameType.DS)]
    public class FactionOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x28A6D00BC09D36EC, GameType.DS)]
    public class FactionOverrideComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<FactionOverride> FactionOverrides;
    }

    [RTTI.Serializable(0xE9A388A37ADC1DCA, GameType.DS)]
    public class FactionSwitchRequestKIN : MatchRequest
    {
        [RTTI.Member(4, 0x38)] public String PlaylistID;
        [RTTI.Member(5, 0x40)] public String GameId;
        [RTTI.Member(6, 0x48)] public String TargetFaction;
    }

    [RTTI.Serializable(0xC5947F281E559627, GameType.DS)]
    public class FastTravelSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> AllowCondition;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<OverrideGraphProgramResource> AllowOverrideCondition;
        [RTTI.Member(7, 0x30, "Cost")] public Ref<BooleanFact> ConsumeItemsFact;
        [RTTI.Member(8, 0x38, "Cost")] public Ref<EntityResource> ConsumedItemResource;
        [RTTI.Member(9, 0x40, "Cost")] public int ConsumedItemCount;
        [RTTI.Member(5, 0x44, "Logic")] public float MinimalTravelDistance;
    }

    [RTTI.Serializable(0x43404F52F590556E, GameType.DS)]
    public class FastTravelSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x9696984CC1601932, GameType.DS)]
    public class FastTravelSystemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> StartedFastTravelGraph;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<GraphProgramResource> FinishedFastTravelGraph;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<BooleanFact> HUDDisplayFact;
        [RTTI.Member(6, 0x38, "Logic")] public float HUDDisplayTime;
        [RTTI.Member(7, 0x3C, "Logic")] public float MinimalFastTravelDistance;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<IntegerFact> FastTravelCountFact;
        [RTTI.Member(9, 0x48, "Logic")] public Ref<BooleanFact> IsUsingFastTravelFact;
    }

    [RTTI.Serializable(0xDFBB17F886570F74, GameType.DS)]
    public class FastTravelSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x60848EF35099CADB, GameType.DS)]
    public class FireDurationsAnimationReference : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float FireDuration;
        [RTTI.Member(4, 0x24, "Logic")] public float ChamberRoundDuration;
        [RTTI.Member(5, 0x28, "Logic")] public float AfterBurstFiringDuration;
    }

    [RTTI.Serializable(0x27AD0119D81FCF15, GameType.DS)]
    public class FirstPersonHitEffectsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ShakeResource>> HitResponseShakes;
        [RTTI.Member(3, 0x30)] public Ref<CurveResource> HitEffectDistanceFactorCurve;
        [RTTI.Member(4, 0x38)] public Ref<CurveResource> HitEffectDamageFactorCurve;
        [RTTI.Member(5, 0x40)] public Ref<AnimatedScreenEffectResource> HitBloodScreenEffectResource;
        [RTTI.Member(6, 0x48)] public int Priority;
        [RTTI.Member(7, 0x4C)] public bool IdenticalPriorityOverrides;
        [RTTI.Member(8, 0x50)] public Ref<RumbleResource> RumbleResource;
    }

    [RTTI.Serializable(0xDE86A90DF00AED81, GameType.DS)]
    public class FixedPositionMover : Mover
    {
    }

    [RTTI.Serializable(0x3100D1951F04F432, GameType.DS)]
    public class FixedPositionMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x3E65A0AE81A01826, GameType.DS)]
    public class FlickerLight : CoreObject
    {
        [RTTI.Member(4, 0x20)] public float JitterFactor;
        [RTTI.Member(5, 0x24)] public bool SineWave;
        [RTTI.Member(2, 0x28)] public float MinIntensity;
        [RTTI.Member(3, 0x2C)] public float MaxIntensity;
        [RTTI.Member(6, 0x30)] public float SineFrequency;
        [RTTI.Member(7, 0x34)] public float SineAmplitude;
        [RTTI.Member(8, 0x38)] public float SineBase;
        [RTTI.Member(9, 0x3C)] public bool SmoothInterpolate;
        [RTTI.Member(10, 0x40)] public float UpdateFrequency;
        [RTTI.Member(11, 0x44)] public uint RandomSeed;
    }

    [RTTI.Serializable(0x796C4DB5E4AE59C9, GameType.DS)]
    public class FloatAnimationVariableValue
    {
        [RTTI.Member(0, 0x0)] public String Variable;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0x9F9CD2EFBEC10AD0, GameType.DS)]
    public class FloatFact : Fact
    {
        [RTTI.Member(9, 0x30, "Logic")] public float DefaultValue;
    }

    [RTTI.Serializable(0x9F81A41391FEDC2E, GameType.DS)]
    public class FloatFactConditionResource : FactConditionResource
    {
        [RTTI.Member(4, 0x30, "Logic")] public Ref<FloatFact> FloatFact;
        [RTTI.Member(3, 0x38, "Logic")] public EFactConditionContextMode ContextMode;
        [RTTI.Member(6, 0x39, "Logic")] public EFactConditionCompareOperator CompareType;
        [RTTI.Member(5, 0x3C, "Logic")] public int Value;
    }

    [RTTI.Serializable(0x96C9758C90443FE4, GameType.DS)]
    public class FloatFactValue : FactValueBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<FloatFact> TypedFact;
        [RTTI.Member(4, 0x28, "Logic")] public float TypedValue;
    }

    [RTTI.Serializable(0x14B4A36EF837DEF7, GameType.DS)]
    public class FloatProperty : FloatPropertyBase
    {
        [RTTI.Member(11, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x6189DE0CAFABC5D2, GameType.DS)]
    public class FloatPropertyBase : FloatFact
    {
    }

    [RTTI.Serializable(0x71834FBF5BC21025, GameType.DS)]
    public class FloatPropertyValue : PropertyValue
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<FloatPropertyBase> Property;
        [RTTI.Member(4, 0x28, "General")] public float Value;
    }

    [RTTI.Serializable(0xF58E7B9581761C2A, GameType.DS)]
    public class FloorSlopeDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3624CCA7DE1245BF, GameType.DS)]
    public class FloorSlopeDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String LongitudinalSlopeAngleAnimVarName;
        [RTTI.Member(4, 0x28, "Logic")] public String LateralSlopeAngleAnimVarName;
        [RTTI.Member(5, 0x30, "Logic")] public EFloorSlopeDetectionMethod DetectionMethod;
        [RTTI.Member(6, 0x34, "Logic")] public FloorSlopeDetectionProbeSettings ProbeSettings;
        [RTTI.Member(7, 0x58, "Logic")] public FRange AllowedLongitudinalAngleRange;
        [RTTI.Member(8, 0x60, "Logic")] public FRange AllowedLateralAngleRange;
        [RTTI.Member(9, 0x68, "Logic")] public bool UseAmphibiousCollisionLayer;
        [RTTI.Member(10, 0x69, "Logic")] public bool ExcludeCollisionGroupEntity;
    }

    [RTTI.Serializable(0x212642190826C0BF, GameType.DS)]
    public class FloorSlopeDetectionProbeSettings
    {
        [RTTI.Member(0, 0x0)] public float ProbeRadius;
        [RTTI.Member(1, 0x4)] public float PlaneExtension;
        [RTTI.Member(2, 0x8)] public bool AlignProbesToCollisionCapsule;
        [RTTI.Member(3, 0xC)] public float ProbeDistanceFront;
        [RTTI.Member(4, 0x10)] public float ProbeDistanceBack;
        [RTTI.Member(5, 0x14)] public float ProbeDistanceLeft;
        [RTTI.Member(6, 0x18)] public float ProbeDistanceRight;
        [RTTI.Member(7, 0x1C)] public FRange ProbeVerticalRange;
    }

    [RTTI.Serializable(0xDBC2FAD30ACFA840, GameType.DS)]
    public class FlyoverCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0x493347E0E4560E6F, GameType.DS)]
    public class FlyoverCameraEntityRep : CameraEntityRep
    {
    }

    [RTTI.Serializable(0xB3AC1206091277AC, GameType.DS)]
    public class FlyoverCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(55, 0x1B8, "Logic")] public float ForwardSpeed;
        [RTTI.Member(56, 0x1BC, "Logic")] public float StrafeSpeed;
        [RTTI.Member(57, 0x1C0, "Logic")] public float UpDownSpeed;
        [RTTI.Member(58, 0x1C4, "Logic")] public float HeadingSpeed;
        [RTTI.Member(59, 0x1C8, "Logic")] public float PitchSpeed;
        [RTTI.Member(60, 0x1CC, "Logic")] public float MinPitch;
        [RTTI.Member(61, 0x1D0, "Logic")] public float MaxPitch;
        [RTTI.Member(62, 0x1D4, "Logic")] public float RollSpeed;
        [RTTI.Member(63, 0x1D8, "Logic")] public float MinRoll;
        [RTTI.Member(64, 0x1DC, "Logic")] public float MaxRoll;
    }

    [RTTI.Serializable(0x1FE05DB03339694C, GameType.DS)]
    public class FlyoverDeathCameraEntity : DeathCameraEntity
    {
    }

    [RTTI.Serializable(0xB225904F972F07AC, GameType.DS)]
    public class FlyoverDeathCameraEntityRep : DeathCameraEntityRep
    {
    }

    [RTTI.Serializable(0x2EDF9064A315BFD1, GameType.DS)]
    public class FlyoverDeathCameraEntityResource : DeathCameraEntityResource
    {
        [RTTI.Member(58, 0x1C0, "Logic")] public float PlayerScreenPosition;
        [RTTI.Member(59, 0x1C4, "Logic")] public float TargetScreenPosition;
        [RTTI.Member(60, 0x1C8, "Logic")] public float DistanceFromPlayer;
        [RTTI.Member(61, 0x1CC, "Logic")] public float VerticalAngleIfSuicide;
        [RTTI.Member(62, 0x1D0, "Logic")] public bool TrackTargetWhenNotVisible;
        [RTTI.Member(63, 0x1D4, "Logic")] public float CameraSmoothness;
        [RTTI.Member(64, 0x1D8, "Logic")] public float GetUpCameraSmoothness;
        [RTTI.Member(65, 0x1DC, "Logic")] public float CameraCollisionRadius;
        [RTTI.Member(66, 0x1E0, "Logic")] public float MinHeightAbovePlayer;
        [RTTI.Member(67, 0x1E8, "Logic")] public Ref<CurveResource> GetUpDistanceCurve;
        [RTTI.Member(68, 0x1F0, "Logic")] public Array<String> LookAtTargetTypes;
    }

    [RTTI.Serializable(0xCDEA86123ED7AB0C, GameType.DS)]
    public class FocusAlertSignal : WorldNode
    {
        [RTTI.Member(5, 0x68, "Logic")] public bool FactsArePersistent;
        [RTTI.Member(9, 0x70, "Logic")] public Ref<BooleanFact> IsScannedFact;
        [RTTI.Member(10, 0x78, "Logic")] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(11, 0x80, "Logic")] public Ref<ParticleSystemResource> ScannedParticleSystemResource;
        [RTTI.Member(7, 0x88, "Logic")] public Ref<ConditionResource> EnabledCondition;
        [RTTI.Member(6, 0x90, "Logic")] public Array<Ref<FocusScannedInfo>> FocusScannedInfo;
        [RTTI.Member(8, 0xA0, "Logic")] public float DetectionRange;
        [RTTI.Member(13, 0xA4, "Entity")] public UUIDRef<Spawnpoint> Spawnpoint;
        [RTTI.Member(14, 0xC0, "Entity")] public Vec3 EntityOffset;
    }

    [RTTI.Serializable(0xDF718083D98BD282, GameType.DS)]
    public class FocusAlertSignalDisableCondition
    {
        [RTTI.Member(0, 0x0)] public Ref<ConditionResource> Condition;
        [RTTI.Member(1, 0x8)] public float Duration;
    }

    [RTTI.Serializable(0x6B9387B8731ECAF7, GameType.DS)]
    public class FocusAlertSignalManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x6DAEE03F5C4A80E0, GameType.DS)]
    public class FocusAlertSignalSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC519011D22F82DBB, GameType.DS)]
    public class FocusCollisionTrigger : CollisionTrigger
    {
    }

    [RTTI.Serializable(0xD28FFD9138045EDC, GameType.DS)]
    public class FocusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5D15AD8FF96A012B, GameType.DS)]
    public class FocusComponentResource : EntityComponentResource
    {
        [RTTI.Member(7, 0x20, "OutlineEntity")] public Ref<EntityResource> OutlineEntityResource;
        [RTTI.Member(8, 0x28, "OutlineEntity")] public float OutlineEntityRemoveDelay;
        [RTTI.Member(22, 0x30, "Tagging")] public Ref<SoundResource> TaggedSoundEffect;
        [RTTI.Member(23, 0x38, "Tagging")] public Ref<SoundResource> UnTaggedSoundEffect;
        [RTTI.Member(3, 0x40, "Logic")] public float LookInputTreshHold;
        [RTTI.Member(5, 0x44, "Logic")] public float MaxActivationDelay;
        [RTTI.Member(10, 0x48, "Representation")] public String IsActiveAnimVarName;
        [RTTI.Member(11, 0x50, "Representation")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(13, 0x58, "FocusTarget")] public float FocusTargetAngle;
        [RTTI.Member(14, 0x5C, "FocusTarget")] public float FocusPatternRotationSpeed;
        [RTTI.Member(15, 0x60, "FocusTarget")] public int FocusPatternRayCount;
        [RTTI.Member(16, 0x64, "FocusTarget")] public float FocusPatternRememberTime;
        [RTTI.Member(17, 0x68, "FocusTarget")] public Ref<CurveResource> FocusPatternCurve;
        [RTTI.Member(18, 0x70, "FocusTarget")] public float FocusAimDistanceWeight;
        [RTTI.Member(19, 0x74, "FocusTarget")] public float FocusAimAngleWeight;
        [RTTI.Member(25, 0x78, "Scanning")] public float ScanningDelay;
        [RTTI.Member(21, 0x7C, "Tagging")] public float TaggedPatrolPathRange;
        [RTTI.Member(27, 0x80, "FocusModeTagging")] public float FocusModeTagRange;
        [RTTI.Member(28, 0x84, "FocusModeTagging")] public float FocusModeTagFadeDistance;
        [RTTI.Member(30, 0x88, "Tracking")] public float TrackingRange;
        [RTTI.Member(31, 0x90, "Tracking")] public Ref<BooleanFact> IsTracksVisibleFact;
        [RTTI.Member(4, 0x98, "Logic")] public Ref<BooleanFact> IsFocusAllowedInSequencesFact;
        [RTTI.Member(33, 0xA0, "FocusAlertSignal")] public Ref<SoundResource> SignalAlertSound;
        [RTTI.Member(34, 0xA8, "FocusAlertSignal")] public String SignalAlertSoundHelperName;
        [RTTI.Member(35, 0xB0, "FocusAlertSignal")] public float SignalScanningRadius;
        [RTTI.Member(36, 0xB4, "FocusAlertSignal")] public float SignalScanningDuration;
        [RTTI.Member(37, 0xB8, "FocusAlertSignal")] public Array<FocusAlertSignalDisableCondition> SignalDisableConditions;
    }

    [RTTI.Serializable(0x49D958DAA9BD6915, GameType.DS)]
    public class FocusComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB0F2FB93A9D4225C, GameType.DS)]
    public class FocusLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x89517CB0AC26FE15, GameType.DS)]
    public class FocusLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x803337A59DBBEF70, GameType.DS)]
    public class FocusOcclusionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD7C9759EF0F96C2E, GameType.DS)]
    public class FocusOcclusionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3993080F65AC92D7, GameType.DS)]
    public class FocusOcclusionComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x46EFB7FD52F6460B, GameType.DS)]
    public class FocusScannableBase : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> LocalizerResource;
        [RTTI.Member(4, 0x28, "Modifiers")] public bool VulnerableToAllDamage;
        [RTTI.Member(5, 0x30, "Modifiers")] public Array<Ref<DamageTypeResource>> Vulnerabilities;
        [RTTI.Member(6, 0x40, "Modifiers")] public bool ResistantToAllDamage;
        [RTTI.Member(7, 0x48, "Modifiers")] public Array<Ref<DamageTypeResource>> Resistances;
    }

    [RTTI.Serializable(0x47CC6B94858BDA9D, GameType.DS)]
    public class FocusScannableBody : FocusScannableBase
    {
        [RTTI.Member(9, 0x58, "HUD")] public Ref<UITexture> UIDisplayIcon;
        [RTTI.Member(10, 0x60, "HUD")] public Ref<UITexture> UIHighlightedIcon;
    }

    [RTTI.Serializable(0x5DDE35230EC0CEA, GameType.DS)]
    public class FocusScannableCategory : Resource
    {
        [RTTI.Member(3, 0x20, "Scanning")] public Ref<LocalizedTextResource> LocalizerResource;
        [RTTI.Member(4, 0x28, "Scanning")] public Array<Ref<FocusScannableObject>> ScannableObject;
        [RTTI.Member(6, 0x38, "HUD")] public Ref<UITexture> UIDisplayIcon;
        [RTTI.Member(7, 0x40, "HUD")] public Ref<UITexture> UIDestroyedIcon;
        [RTTI.Member(8, 0x48, "HUD")] public Ref<UITexture> UIHighlightedIcon;
        [RTTI.Member(9, 0x50, "HUD")] public Ref<UITexture> UIHiddenIcon;
    }

    [RTTI.Serializable(0x7E4B4E5EA17CF3F3, GameType.DS)]
    public class FocusScannableObject : FocusScannableBase
    {
        [RTTI.Member(8, 0x58)] public Ref<ConditionResource> DisplayCondition;
        [RTTI.Member(9, 0x60)] public Ref<TagProperty> TagProperty;
    }

    [RTTI.Serializable(0x5ABFC6274DEAC30E, GameType.DS)]
    public class FocusScannedInfo : Resource
    {
        [RTTI.Member(3, 0x20, "Scanning")] public Ref<LocalizedTextResource> ScannedTitle;
        [RTTI.Member(4, 0x28, "Scanning")] public Ref<LocalizedTextResource> ScannedSubTitle;
        [RTTI.Member(5, 0x30, "Scanning")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(6, 0x38, "Scanning")] public Ref<FocusTargetType> FocusTargetType;
        [RTTI.Member(7, 0x40, "Scanning")] public Array<Ref<FocusScannableCategory>> ScannableCategories;
        [RTTI.Member(8, 0x50, "Scanning")] public Ref<FocusScannableBody> ScannableBody;
        [RTTI.Member(11, 0x58, "Outline")] public Array<Ref<TagProperty>> OcclusionCullingDisabledTags;
        [RTTI.Member(9, 0x68, "Scanning")] public Ref<ConditionResource> ConditionResource;
    }

    [RTTI.Serializable(0x8C9CD0D021A5EC83, GameType.DS)]
    public class FocusTargetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4752805012B4F124, GameType.DS)]
    public class FocusTargetComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<BooleanFact> FocusTargetInvalidFact;
        [RTTI.Member(4, 0x28, "Logic")] public bool IsTargetWhenFriendly;
        [RTTI.Member(5, 0x29, "Logic")] public bool IsPlayerInSameFocusTriggerRequired;
        [RTTI.Member(6, 0x2C, "Logic")] public float FocusTargetOverrideDistance;
        [RTTI.Member(14, 0x30, "Scanning")] public float ScanningDuration;
        [RTTI.Member(15, 0x38, "Scanning")] public Ref<CameraMagnetTagResource> ScanningPartCameraMagnetTagResource;
        [RTTI.Member(16, 0x40, "Scanning")] public Ref<FocusScannedInfo> DefaultScannedInfo;
        [RTTI.Member(17, 0x48, "Scanning")] public Array<Ref<FocusScannedInfo>> ConditionalScannedInfo;
        [RTTI.Member(8, 0x58, "Tagging")] public bool Taggable;
        [RTTI.Member(9, 0x60, "Tagging")] public Ref<UIMarkerStackGroupType> StackGroupType;
        [RTTI.Member(10, 0x68, "Tagging")] public Ref<UIMarkerTag> MarkerType;
        [RTTI.Member(11, 0x70, "Tagging")] public Ref<UIMarkerTag> IconBinding;
        [RTTI.Member(12, 0x78, "Tagging")] public Ref<UITexture> Icon;
        [RTTI.Member(19, 0x80, "PatrolPath")] public Ref<TrackingPathSettings> TrackingPathSettings;
    }

    [RTTI.Serializable(0x7F3565CE6CD00163, GameType.DS)]
    public class FocusTargetComponentResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x95482DE2A5C174B4, GameType.DS)]
    public class FocusTargetComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBD31BF8571A683FB, GameType.DS)]
    public class FocusTargetType : Resource
    {
        [RTTI.Member(9, 0x20, "Type")] public Ref<LocalizedTextResource> FriendlyName;
        [RTTI.Member(10, 0x28, "Type")] public Ref<LocalizedTextResource> HostileName;
        [RTTI.Member(11, 0x30, "Type")] public Ref<LocalizedTextResource> CorruptedName;
        [RTTI.Member(12, 0x38, "Type")] public Ref<LocalizedTextResource> DeadName;
        [RTTI.Member(13, 0x40, "Type")] public Ref<UITexture> UIIcon;
        [RTTI.Member(14, 0x50, "Type")] public FRGBAColor Color;
        [RTTI.Member(17, 0x60, "Info")] public Ref<LocalizedTextResource> DeadDescription;
        [RTTI.Member(16, 0x68, "Info")] public bool ShowModifiersWhenAlive;
        [RTTI.Member(3, 0x69, "Level")] public bool FriendlyLevelShown;
        [RTTI.Member(4, 0x6A, "Level")] public bool EnemyLevelShown;
        [RTTI.Member(5, 0x6B, "Level")] public bool FriendlyTypeIndicatorShown;
        [RTTI.Member(6, 0x6C, "Level")] public bool EnemyTypeIndicatorShown;
        [RTTI.Member(8, 0x6D, "Type")] public bool FactionIndicatorShown;
    }

    [RTTI.Serializable(0xAD95CE46E2BD1395, GameType.DS)]
    public class FogSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public FRGBAColor Color;
        [RTTI.Member(3, 0x10, "Settings")] public float Brightness;
        [RTTI.Member(2, 0x14, "Settings")] public float Depth;
    }

    [RTTI.Serializable(0x7C8CFA72B4357AEF, GameType.DS)]
    public class FoliageMaterial
    {
        [RTTI.Member(0, 0x0)] public FRGBColor TranslucencyIntensity;
    }

    [RTTI.Serializable(0x1F8471B89029D869, GameType.DS)]
    public class FontCodePointGlyphInfo
    {
        [RTTI.Member(1, 0x0, true)] public wchar Char;
        [RTTI.Member(2, 0x0)] public FontGlyphMetrics GlyphMetrics;
        [RTTI.Member(0, 0x4)] public ucs4 CodePoint;
        [RTTI.Member(3, 0x10)] public GlyphContourList GlyphContourList;
    }

    [RTTI.Serializable(0x71CFBA0E2F36BD4E, GameType.DS)]
    public class FontGlyphMetrics
    {
        [RTTI.Member(0, 0x0)] public float AdvanceWidth;
    }

    [RTTI.Serializable(0x97E041C168833384, GameType.DS)]
    public class FontKerningPair
    {
        [RTTI.Member(0, 0x0)] public ucs4 First;
        [RTTI.Member(1, 0x4)] public ucs4 Second;
        [RTTI.Member(2, 0x8)] public float Kerning;
    }

    [RTTI.Serializable(0xE0E68D6C7B7B08F3, GameType.DS)]
    public class FontResource : Resource
    {
        [RTTI.Member(2, 0x20)] public FontResourceData FontResourceData;
    }

    [RTTI.Serializable(0xEF821CCCE57556C8, GameType.DS)]
    public class FontResourceData
    {
        [RTTI.Member(3, 0x0, true)] public Array<FontCodePointGlyphInfo> CharInfo;
        [RTTI.Member(0, 0x0)] public String TypefaceName;
        [RTTI.Member(1, 0x8)] public FontTextMetrics TextMetrics;
        [RTTI.Member(2, 0x18)] public Array<FontCodePointGlyphInfo> CodePointInfo;
        [RTTI.Member(4, 0x28)] public Array<FontKerningPair> KerningPairs;
    }

    [RTTI.Serializable(0x97545C8766E4EE73, GameType.DS)]
    public class FontResourceLanguageOverride
    {
        [RTTI.Member(0, 0x0)] public ELanguage Language;
        [RTTI.Member(1, 0x8)] public Ref<FontResource> Font;
    }

    [RTTI.Serializable(0xD772C0C6D53FCAB5, GameType.DS)]
    public class FontTextMetrics
    {
        [RTTI.Member(0, 0x0)] public float Height;
        [RTTI.Member(1, 0x4)] public float Ascent;
        [RTTI.Member(2, 0x8)] public float Descent;
        [RTTI.Member(3, 0xC)] public float EmHeight;
    }

    [RTTI.Serializable(0xA5373318F4D6526B, GameType.DS)]
    public class FootPlacementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1062C792FE52177D, GameType.DS)]
    public class FootPlacementComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String HipIKWeightAnimVarName;
        [RTTI.Member(3, 0x28)] public String PredictiveTerrainAnimVarName;
    }

    [RTTI.Serializable(0xB4DC8AFB58F65424, GameType.DS)]
    public class FootstepAuralStimulusResource : Resource
    {
        [RTTI.Member(2, 0x20)] public float MinimumSpeed;
        [RTTI.Member(3, 0x24)] public float MaximumSpeed;
        [RTTI.Member(4, 0x28)] public Ref<AIAuralStimulusResource> AIAuralStimulusResource;
    }

    [RTTI.Serializable(0xC889087324568AA4, GameType.DS)]
    public class FootstepAuralStimulusResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x526FC9AA616DDAA3, GameType.DS)]
    public class ForceFieldEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x59714AE7BEBE6EA3, GameType.DS)]
    public class ForceFieldEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<ForceFieldResource> ForceFieldResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0x1727DD0ABAD83C6A, GameType.DS)]
    public class ForceFieldInstance : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public Ref<ForceFieldResource> Resource;
    }

    [RTTI.Serializable(0xC30BC78844138FDF, GameType.DS)]
    public class ForceFieldManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x2ACA6220967FDDA1, GameType.DS)]
    public class ForceFieldManagerSettings : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<WorldDataType> WaterHeightDataType;
        [RTTI.Member(3, 0x28)] public Ref<WorldDataType> WaterFlowDataType;
    }

    [RTTI.Serializable(0x4BDEC0FF20E38D1F, GameType.DS)]
    public class ForceFieldManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD2B1D51A012D188, GameType.DS)]
    public class ForceFieldResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public ForceFieldSettings Settings;
    }

    [RTTI.Serializable(0xD0426F59302A164B, GameType.DS)]
    public class ForceFieldSettings
    {
        [RTTI.Member(1, 0x0, "General")] public EForceFieldShape Shape;
        [RTTI.Member(2, 0x4, "General")] public EForceBehaviour ForceBehaviour;
        [RTTI.Member(3, 0x8, "General")] public EForceType ForceType;
        [RTTI.Member(4, 0xC, "General")] public EForceFieldFlowDriver FlowDriver;
        [RTTI.Member(5, 0x10, "General")] public Mat44 Transform;
        [RTTI.Member(6, 0x90, "General")] public Quat ForceOrientation;
        [RTTI.Member(7, 0x120, "General")] public float FadeRange;
        [RTTI.Member(8, 0x124, "General")] public float Strength;
        [RTTI.Member(9, 0x128, "General")] public float TurbulenceAnimationSpeed;
        [RTTI.Member(10, 0x12C, "General")] public float TurbulenceSpatialVariation;
        [RTTI.Member(11, 0x130, "General")] public float TurbulenceAmount;
        [RTTI.Member(12, 0x150, "General")] public float TurbulenceShaping;
        [RTTI.Member(13, 0x154, "General")] public float TurbulenceVerticalAnimation;
        [RTTI.Member(14, 0x158, "General")] public uint8 Priority;
        [RTTI.Member(15, 0x15C, "General")] public float FlowAnimationSpeed;
        [RTTI.Member(16, 0x160, "General")] public float MaxFlowSpeed;
        [RTTI.Member(17, 0x164, "General")] public float MinFlowSpeed;
        [RTTI.Member(18, 0x168, "General")] public float FlowSpatialVariation;
        [RTTI.Member(19, 0x16C, "General")] public float MinFlowSpeedClamp;
        [RTTI.Member(20, 0x1A0, "General")] public EForceFieldFilter Filter;
        [RTTI.Member(21, 0x1A4, "General")] public ForceFieldCategoryMask CategoryMask;
    }

    [RTTI.Serializable(0x77DB2DFE510A3720, GameType.DS)]
    public class ForceFieldSpringSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public SpringAttr Special;
        [RTTI.Member(3, 0x40)] public SpringAttr Grass;
        [RTTI.Member(4, 0x60)] public SpringAttr Plant;
        [RTTI.Member(5, 0x80)] public SpringAttr Tree;
    }

    [RTTI.Serializable(0xB73232A5C89C5174, GameType.DS)]
    public class ForceFieldSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<Texture> NoiseTexture;
        [RTTI.Member(3, 0x28)] public Ref<Texture> BlackTexture;
        [RTTI.Member(4, 0x30)] public Ref<Texture> GrayTexture;
        [RTTI.Member(8, 0x38)] public Ref<ShaderResource> ForceFieldTextureResetCompute;
        [RTTI.Member(5, 0x40)] public Ref<ShaderResource> ForceFieldQueryCompute;
        [RTTI.Member(6, 0x48)] public Ref<ShaderResource> ForceFieldTextureMainCompute;
        [RTTI.Member(7, 0x50)] public Ref<ShaderResource> ForceFieldVisualize;
        [RTTI.Member(10, 0x58, "NearProbe")] public IVec3 NearProbe_Resolution;
        [RTTI.Member(11, 0x70, "NearProbe")] public Vec3 NearProbe_Extends;
        [RTTI.Member(13, 0x80, "MidProbe")] public IVec3 MidProbe_Resolution;
        [RTTI.Member(14, 0x90, "MidProbe")] public Vec3 MidProbe_Extends;
        [RTTI.Member(16, 0xA0, "FarProbe")] public IVec3 FarProbe_Resolution;
        [RTTI.Member(17, 0xB0, "FarProbe")] public Vec3 FarProbe_Extends;
    }

    [RTTI.Serializable(0x8772280423C99BD6, GameType.DS)]
    public class ForceMinimumLodComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAD7D41D4AC2D8437, GameType.DS)]
    public class ForceMinimumLodComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x208DA61769DE11E0, GameType.DS)]
    public class ForceMinimumLodComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int MinimumLodIndex;
    }

    [RTTI.Serializable(0x6F66A8B31AD15D83, GameType.DS)]
    public class ForceSmartObjectAreaToHighLoDEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7CB47B5D0C39AABE, GameType.DS)]
    public class ForceSmartObjectAreaToHighLoDEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public UUIDRef<SmartObjectArea> SmartObjectArea;
    }

    [RTTI.Serializable(0xDB26361BD4983EA3, GameType.DS)]
    public class ForceUpdateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAFE2E5BE6FEA1280, GameType.DS)]
    public class ForgetFactAction : MemoryFactActionBase
    {
    }

    [RTTI.Serializable(0xA926AE648E0A4A61, GameType.DS)]
    public class Frustum
    {
        [RTTI.Member(0, 0x0)] public PlaneEq Plane0;
        [RTTI.Member(1, 0x10)] public PlaneEq Plane1;
        [RTTI.Member(2, 0x20)] public PlaneEq Plane2;
        [RTTI.Member(3, 0x30)] public PlaneEq Plane3;
        [RTTI.Member(4, 0x40)] public PlaneEq Plane4;
        [RTTI.Member(5, 0x50)] public PlaneEq Plane5;
        [RTTI.Member(6, 0x60)] public int PlaneCount;
    }

    [RTTI.Serializable(0x5C7C8C043A85B16B, GameType.DS)]
    public class FullBodyAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xBF58BD0416CD6B63, GameType.DS)]
    public class FullBodyAnimationEventResource : FullBodyAnimationEventResourceBase
    {
        [RTTI.Member(17, 0x60, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(18, 0x68, "Logic")] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(20, 0x70, "Logic")] public ERootBoneMode RootBoneMode;
        [RTTI.Member(19, 0x74, "Logic")] public bool NoMorpheme;
    }

    [RTTI.Serializable(0x8ABECA01B0AAC516, GameType.DS)]
    public class FullBodyAnimationEventResourceBase : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(13, 0x50, "Logic")] public Ref<CurveResource> TimeCurve;
        [RTTI.Member(14, 0x58, "Logic")] public bool Loop;
        [RTTI.Member(15, 0x59, "Logic")] public bool UpdateFirst;
        [RTTI.Member(16, 0x5C, "Logic")] public float BlendInSec;
    }

    [RTTI.Serializable(0x78B692FBE8C4E7F7, GameType.DS)]
    public class GBufferSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> CopyAccumulationBufferShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> DepthHalfToQuarterCheckerboardPixelShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> DepthPyramidHalfPixelShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> DepthPyramidHalfShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> DepthPyramidMaxShader;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> DepthPyramidMinShader;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> DepthPyramidQuarterShader;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> HalfResAttrDownscaleShader;
        [RTTI.Member(10, 0x60)] public Ref<ShaderResource> UpdateHalfResMinDepthShader;
        [RTTI.Member(11, 0x68)] public Ref<ShaderResource> GBufferOverrideShader;
        [RTTI.Member(12, 0x70)] public Ref<ShaderResource> ScreenWipeClearShader;
        [RTTI.Member(13, 0x78)] public Ref<ShaderResource> ScreenWipeCopyAlbedoShader;
        [RTTI.Member(14, 0x80)] public Ref<ShaderResource> ScreenWipeCopyGammaAlbedoShader;
        [RTTI.Member(15, 0x88)] public Ref<ShaderResource> ScreenWipeCopyAmbientOcclusionShader;
        [RTTI.Member(16, 0x90)] public Ref<ShaderResource> ScreenWipeCopyBinormalsShader;
        [RTTI.Member(17, 0x98)] public Ref<ShaderResource> ScreenWipeCopyGreyscaleAlbedoShader;
        [RTTI.Member(18, 0xA0)] public Ref<ShaderResource> ScreenWipeCopyNormalsShader;
        [RTTI.Member(19, 0xA8)] public Ref<ShaderResource> ScreenWipeCopyPositionShader;
        [RTTI.Member(20, 0xB0)] public Ref<ShaderResource> ScreenWipeCopyRGBShader;
        [RTTI.Member(21, 0xB8)] public Ref<ShaderResource> ScreenWipeCopyShadowCubemapShader;
        [RTTI.Member(22, 0xC0)] public Ref<ShaderResource> ScreenWipeCopyShadowMapShader;
        [RTTI.Member(23, 0xC8)] public Ref<ShaderResource> ScreenWipeCopyTangentsShader;
        [RTTI.Member(24, 0xD0)] public Ref<ShaderResource> ScreenWipeDiffusionShader;
        [RTTI.Member(25, 0xD8)] public Ref<ShaderResource> ScreenWipeMotionVectorsShader;
        [RTTI.Member(26, 0xE0)] public Ref<ShaderResource> ScreenWipeRoughnessShader;
        [RTTI.Member(27, 0xE8)] public Ref<ShaderResource> ScreenWipeSpecularIntensityShader;
        [RTTI.Member(28, 0xF0)] public Ref<ShaderResource> ScreenWipeMaterialIDShader;
        [RTTI.Member(29, 0xF8)] public Ref<ShaderResource> ScreenWipeTranslucencyShader;
        [RTTI.Member(30, 0x100)] public Ref<ShaderResource> ScreenWipeVolumeLightAmount3DShader;
        [RTTI.Member(31, 0x108)] public Ref<ShaderResource> LightComplexityShader;
    }

    [RTTI.Serializable(0x8D1DCF5DE77E095E, GameType.DS)]
    public class GCoreGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2ED13EB5638DD283, GameType.DS)]
    public class GCoreSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<FactDatabaseResource> FactDatabaseResource;
        [RTTI.Member(3, 0x28)] public Ref<DispensableEntityManagerSettings> DispensableEntityManagerSettings;
        [RTTI.Member(4, 0x30)] public Ref<PhysicsContactEffectSystemSettings> PhysicsContactEffectSystemSettings;
        [RTTI.Member(5, 0x38)] public Ref<DamageTypeResourceSettings> DamageTypeResourceSettings;
        [RTTI.Member(6, 0x40)] public Ref<FontResource> LargeDebugFontResource;
        [RTTI.Member(7, 0x48)] public Ref<AttachToWorldMatrixMoverResource> AttachToWorldMatrixMover;
        [RTTI.Member(8, 0x50)] public Ref<AttachToWorldMatrixMoverResource> AttachToWorldPositionMover;
        [RTTI.Member(9, 0x58)] public Ref<AttachToPartMoverResource> AttachToPartMover;
        [RTTI.Member(10, 0x60)] public Ref<AttachToHelperMoverResource> AttachToHelperMover;
        [RTTI.Member(11, 0x68)] public Ref<MounterMoverResource> MounterMover;
        [RTTI.Member(12, 0x70)] public Ref<SimplePathMoverResource> SimplePathMover;
        [RTTI.Member(13, 0x78)] public Ref<AttachPhysicsRagdollToHelperMoverResource> AttachPhysicsRagdollToHelperMover;
        [RTTI.Member(14, 0x80)] public Ref<AttachToHelperPositionMoverResource> AttachToHelperPositionMover;
        [RTTI.Member(15, 0x88)] public Ref<EntityResource> GraphAnimationDebugEntity;
    }

    [RTTI.Serializable(0x72751DB098EF99A1, GameType.DS)]
    public class GGUUID_GGUUID
    {
        [RTTI.Member(0, 0x0)] public GGUUID Key;
        [RTTI.Member(1, 0x10)] public GGUUID Value;
    }

    [RTTI.Serializable(0x569061B027306CA3, GameType.DS)]
    public class GGUUID_SceneEntityImpostorInfo
    {
        [RTTI.Member(0, 0x0)] public GGUUID Key;
        [RTTI.Member(1, 0x10)] public SceneEntityImpostorInfo Value;
    }

    [RTTI.Serializable(0xE35E974A5DD8C501, GameType.DS)]
    public class GSequenceNetworkSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> SequenceNetworkAlreadyBoundMessage;
    }

    [RTTI.Serializable(0xCDB8A1FD95AFD866, GameType.DS)]
    public class GSequenceSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<SequenceResourceBase> SubSequenceResource14_99Hz;
        [RTTI.Member(3, 0x28)] public Ref<SequenceResourceBase> SubSequenceResource29_97Hz;
        [RTTI.Member(4, 0x30)] public Ref<SequenceResourceBase> SubSequenceResource59_94Hz;
        [RTTI.Member(5, 0x38)] public Ref<SequenceEntityResource> SequenceEntityResource14_99Hz;
        [RTTI.Member(6, 0x40)] public Ref<SequenceEntityResource> SequenceEntityResource29_97Hz;
        [RTTI.Member(7, 0x48)] public Ref<SequenceEntityResource> SequenceEntityResource59_94Hz;
        [RTTI.Member(8, 0x50)] public Ref<EntityResource> ModelActorEntityResource;
        [RTTI.Member(9, 0x58)] public Ref<AttachToSequenceLocatorMoverResource> AttachToSequenceLocatorMoverResource;
        [RTTI.Member(10, 0x60)] public Ref<DoFApertureSettings> DoFApertureSettings;
        [RTTI.Member(11, 0x68)] public Ref<FacialEmotionAnimationResource> FacialEmotionAnimationDefault;
        [RTTI.Member(12, 0x70)] public Ref<SpringLocatorSettings> SpringLocatorSettings;
        [RTTI.Member(13, 0x78)] public Ref<SmoothAimLocatorSettings> SmoothAimLocatorSettings;
    }

    [RTTI.Serializable(0x1E1E3783D9DBA46B, GameType.DS)]
    public class GStreamingSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<Game> GameAssets;
        [RTTI.Member(3, 0x28)] public Ref<EntityActivationPolicyCache> ActivationPolicyCache;
    }

    [RTTI.Serializable(0x18D68A3D2B02AA4, GameType.DS)]
    public class Game : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<LevelGroup>> LevelGroups;
    }

    [RTTI.Serializable(0x142917A2C05BA350, GameType.DS)]
    public class GameActor : RTTIObject
    {
    }

    [RTTI.Serializable(0x4BE4B6144B748BC3, GameType.DS)]
    public class GameActorLocator : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "General")] public String Name;
        [RTTI.Member(8, 0x88, "General")] public GGUUID OriginalUUID;
        [RTTI.Member(9, 0xA0, "General")] public Ref<ArtPartsVariationResource> VariationSetting;
    }

    [RTTI.Serializable(0x2A2B00FAB39851E1, GameType.DS)]
    public class GameActorLocatorSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public StreamingRef<GameActorLocator> GameActorLocator;
    }

    [RTTI.Serializable(0x32A8E076282E2A56, GameType.DS)]
    public class GameActorLocatorSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x1B533F5CEEA7A77B, GameType.DS)]
    public class GameActorLocatorSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7E1346BFD96D593F, GameType.DS)]
    public class GameActorSetup : ResourceWithName
    {
    }

    [RTTI.Serializable(0x52D3DCF7B07C942F, GameType.DS)]
    public class GameActorSetupSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public Ref<GameActorSetup> GameActorSetup;
    }

    [RTTI.Serializable(0x1DC168343740C606, GameType.DS)]
    public class GameActorSetupSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x95866779EC36E0C2, GameType.DS)]
    public class GameActorSpecificData : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "GameActor")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(7, 0x40, "GameActor")] public Ref<EntityImpostorResource> ImpostorResource;
    }

    [RTTI.Serializable(0xC8F11806ED788549, GameType.DS)]
    public class GameActorUnit : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xAEF5C168E2A4ED66, GameType.DS)]
    public class GameActorUnitResource : RTTIRefObject
    {
        [RTTI.Member(5, 0x20, "GameActor")] public uint32 MaxInstanceCount;
        [RTTI.Member(6, 0x24, "GameActor")] public uint32 MaxEntityCount;
        [RTTI.Member(7, 0x28, "GameActor")] public uint32 MaxImpostorCount;
        [RTTI.Member(8, 0x2C, "GameActor")] public uint32 InitialCreateEntityCount;
        [RTTI.Member(9, 0x30, "GameActor")] public bool IsDefaultUnit;
        [RTTI.Member(10, 0x38, "GameActor")] public StreamingRef<GameActorSpecificData> DefaultSpecificData;
        [RTTI.Member(3, 0x40, "General", true)] public GGUUID OriginalUUID;
        [RTTI.Member(11, 0x50, "GameActor")] public uint32 NameHash;
    }

    [RTTI.Serializable(0xFD971CE4BA9A9798, GameType.DS)]
    public class GameGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC1CFE126428EB27B, GameType.DS)]
    public class GameInputJoystickResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public uint8 ButtonPressureForPress;
        [RTTI.Member(4, 0x28, "General")] public Array<ButtonPressureOverride> ButtonPressureOverrides;
        [RTTI.Member(6, 0x38, "Touchpad")] public int MaxHistoryCount;
        [RTTI.Member(7, 0x3C, "Touchpad")] public int RequiredHistoryCount;
        [RTTI.Member(8, 0x40, "Touchpad")] public float HorizontalDistanceThreshold;
        [RTTI.Member(9, 0x44, "Touchpad")] public float VerticalDistanceThreshold;
    }

    [RTTI.Serializable(0x65E47D3C0DC583E, GameType.DS)]
    public class GameLibSettingMissionManagerGameMode
    {
        [RTTI.Member(0, 0x0)] public EGameMode GameMode;
        [RTTI.Member(1, 0x8)] public Ref<MissionManagerResource> MissionManagerResource;
    }

    [RTTI.Serializable(0x4CA8973DD54735E6, GameType.DS)]
    public class GameLibSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EconomyManagerResource> EconomyManagerResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<PlayerLoadoutManagerResource> PlayerLoadoutManagerResource;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<EquipmentStatsDisplaySystemResource> EquipmentStatsDisplaySystemResource;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<BulletSystemResource> BulletSystemResource;
        [RTTI.Member(7, 0x48, "Logic")] public Ref<AttackEventManagerResource> AttackEventManagerResource;
        [RTTI.Member(8, 0x50, "Logic")] public Ref<GameViewResource> GameViewResource;
        [RTTI.Member(9, 0x58, "Logic")] public Ref<GameInputJoystickResource> DefaultGameInputJoystickResource;
        [RTTI.Member(10, 0x60, "Logic")] public Array<GameLibSettingMissionManagerGameMode> MissionManagerResources;
        [RTTI.Member(11, 0x70, "Logic")] public Ref<DamageAreaManagerResource> DamageAreaManagerResource;
        [RTTI.Member(12, 0x78, "Logic")] public Ref<WorldEncounterManagerResource> WorldEncounterManagerResource;
        [RTTI.Member(18, 0x80, "Quests")] public Ref<QuestSystemResource> QuestSystemResource;
        [RTTI.Member(14, 0x88, "Controller")] public Array<Ref<ControllerConfigResource>> ControllerConfigs;
        [RTTI.Member(16, 0x98, "KeyBinding")] public Array<Ref<DSFunctionKeyBindDefinitionResource>> KeyBindDefinitions;
        [RTTI.Member(20, 0xA8, "GameSettings")] public Ref<GameSettingsResource> GameSettingsResource;
        [RTTI.Member(22, 0xB8, "Camera")] public Ref<PhotoModeResource> PhotoModeResource;
        [RTTI.Member(23, 0xC0, "Camera")] public Ref<CameraMagnetManagerResource> CameraMagnetManager;
        [RTTI.Member(24, 0xC8, "Camera")] public Ref<FlyoverCameraEntityResource> FlyoverCameraResource;
        [RTTI.Member(25, 0xD0, "Camera")] public Ref<ViewportSetupsResource> ViewportSetupsResource;
        [RTTI.Member(27, 0xE0, "Movie")] public float PreRenderedMovieSubtitleSize;
        [RTTI.Member(29, 0xE8, "Sequence")] public Ref<BooleanFact> InCinematicFact;
        [RTTI.Member(31, 0xF0, "Saving")] public Ref<LocalizedTextResource> AutomaticSaveGameText;
        [RTTI.Member(32, 0xF8, "Saving")] public Ref<LocalizedTextResource> ManualSaveGameText;
        [RTTI.Member(33, 0x100, "Saving")] public Ref<LocalizedTextResource> QuickSaveGameText;
        [RTTI.Member(34, 0x108, "Saving")] public Ref<LocalizedTextResource> UserProfileText;
        [RTTI.Member(35, 0x110, "Saving")] public Ref<LocalizedTextResource> SaveGameForNewerVersionText;
        [RTTI.Member(36, 0x118, "Saving")] public Ref<LocalizedTextResource> NewSaveGameDialogText;
        [RTTI.Member(37, 0x120, "Saving")] public Ref<LocalizedTextResource> SaveGameTitlePlayerLevelText;
        [RTTI.Member(38, 0x128, "Saving")] public Ref<SoundMixStateResource> ManualSaveMixState;
        [RTTI.Member(52, 0x130, "Menu")] public Ref<InGameMenuResource> InGameMenuResource;
        [RTTI.Member(54, 0x138, "Network")] public Ref<EmbeddedFileResource> DefaultSessionImageResource;
        [RTTI.Member(56, 0x140, "AI")] public Ref<AIIndividualComponentResource> DefaultPlayerAIIndividualComponentResource;
        [RTTI.Member(58, 0x148, "Trophies")] public Ref<TrophySystemResource> TrophySystemResource;
        [RTTI.Member(60, 0x150, "HUD")] public Ref<HUDLogicGroupContainerResource> HUDLogicGroupContainerResource;
        [RTTI.Member(62, 0x158, "LocationMarkerDiscovering")] public Ref<LocationMarkerDiscovererSettings> LocationMarkerDiscovererSettings;
        [RTTI.Member(64, 0x160, "LocationMarker")] public Ref<LocationMarkerBreadcrumbingSettings> LocationMarkerBreadcrumbingSettings;
        [RTTI.Member(66, 0x168, "Map")] public Ref<ExplorationSystemResource> ExplorationSystemResource;
        [RTTI.Member(68, 0x170, "Map")] public Ref<ShaderResource> MapHeightSampleComputeResource;
        [RTTI.Member(69, 0x178, "Map")] public Ref<ShaderResource> WorldMapMapShaderResource;
        [RTTI.Member(67, 0x180, "Map")] public Ref<MapResource> MapResource;
        [RTTI.Member(71, 0x188, "Entitlements")] public Array<Ref<EntitlementResource>> DLCEntitlements;
        [RTTI.Member(80, 0x198, "Textures")] public Ref<Texture> GrainFilterTexture;
        [RTTI.Member(81, 0x1A0, "Textures")] public Ref<Texture> MouseCursorsTexture;
        [RTTI.Member(83, 0x1A8, "Area")] public Ref<DSAreaSettings> DSAreaSettings;
        [RTTI.Member(85, 0x1B0, "Npc")] public UUIDRef<DSGazerManagerResource> GazerManagerResource;
        [RTTI.Member(86, 0x1C0, "Npc")] public UUIDRef<DSHunterManagerResource> HunterManagerResource;
        [RTTI.Member(87, 0x1D0, "Npc")] public Ref<DSBgmManagerResource> BgmManagerResource;
        [RTTI.Member(90, 0x1D8, "Mission")] public Ref<DSMissionSystemResourceData> MissionSystemResource;
        [RTTI.Member(91, 0x1E0, "Mission")] public Ref<IntegerFact> StoryProgressionFact;
        [RTTI.Member(93, 0x1E8, "DataLibrary")] public Ref<DSDataLibrarySystemResource> DataLibrarySystemResource;
        [RTTI.Member(95, 0x1F0, "Player")] public Ref<DSPlayerSystemConfig> PlayerSystemComfig;
        [RTTI.Member(88, 0x1F8, "Npc")] public UUIDRef<DSCatcherManagerResource> CatcherManagerResource;
        [RTTI.Member(97, 0x208, "Road")] public UUIDRef<DSRoadBakeResource> RoadBakeResource;
        [RTTI.Member(98, 0x218, "Road")] public UUIDRef<DSCurvedInstancingRenderEffectListResource> RoadDecalResource;
        [RTTI.Member(100, 0x228, "Weather")] public UUIDRef<EntityResource> WeatherVisualisationEntity;
        [RTTI.Member(102, 0x238, "Delivery")] public UUIDRef<DSConstructionPointManagerConfig> ConstructionPointManagerConfig;
        [RTTI.Member(104, 0x248, "Like")] public Ref<DSLikeSettingsResource> DSLikeSettingsResource;
        [RTTI.Member(106, 0x250, "Residents")] public Ref<DSResidentsSystemResource> DSResidentsSystemResource;
        [RTTI.Member(108, 0x258, "DSPlayRecord")] public Ref<DSPlayRecordSettingsResource> DSPlayRecordSettingsResource;
        [RTTI.Member(110, 0x260, "Catalogue")] public Ref<ObjectCollection> DSCatalogueSettings;
        [RTTI.Member(112, 0x268, "Equipment")] public Ref<ObjectCollection> DSEquipmentSettings;
        [RTTI.Member(39, 0x270, "Saving")] public Ref<LocalizedTextResource> DSSaveGameTitleProgressMissionText;
        [RTTI.Member(40, 0x278, "Saving")] public Ref<LocalizedTextResource> DSSaveGameTitleClearedMissionText;
        [RTTI.Member(41, 0x280, "Saving")] public Ref<LocalizedTextResource> DSSaveGameTitleProgressNightmareMissionText;
        [RTTI.Member(42, 0x288, "Saving")] public Ref<LocalizedTextResource> DSSaveGameTitleClearedNightmareMissionText;
        [RTTI.Member(43, 0x290, "Saving")] public Ref<LocalizedTextResource> DSProgressSupplyMissionText;
        [RTTI.Member(44, 0x298, "Saving")] public Ref<LocalizedTextResource> DSClearedSupplyMissionText;
        [RTTI.Member(45, 0x2A0, "Saving")] public Ref<LocalizedTextResource> DSWarningWhenLoadingOldVersionSaveDataText;
        [RTTI.Member(46, 0x2A8, "Saving")] public Ref<LocalizedTextResource> DSFailedReadSaveDataCommonText;
        [RTTI.Member(47, 0x2B0, "Saving")] public Ref<LocalizedTextResource> DSFailedWriteSaveDataCommonText;
        [RTTI.Member(48, 0x2B8, "Saving")] public Ref<LocalizedTextResource> DSFailedReadSaveDataBrokenText;
        [RTTI.Member(49, 0x2C0, "Saving")] public Ref<LocalizedTextResource> DSFailedReadSaveDataFileNotFoundText;
        [RTTI.Member(50, 0x2C8, "Saving")] public Ref<LocalizedTextResource> DSQuitGameText;
        [RTTI.Member(72, 0x2D0, "Entitlements")] public Ref<LocalizedTextResource> FoundColorChangeDlcText;
        [RTTI.Member(73, 0x2D8, "Entitlements")] public Ref<LocalizedTextResource> FoundProtectorDlcText;
        [RTTI.Member(74, 0x2E0, "Entitlements")] public Ref<LocalizedTextResource> FoundSkeltonDlcText;
        [RTTI.Member(75, 0x2E8, "Entitlements")] public Ref<LocalizedTextResource> NotFoundColorChangeDlcText;
        [RTTI.Member(76, 0x2F0, "Entitlements")] public Ref<LocalizedTextResource> NotFoundProtectorDlcText;
        [RTTI.Member(77, 0x2F8, "Entitlements")] public Ref<LocalizedTextResource> NotFoundSkeltonDlcText;
        [RTTI.Member(78, 0x300, "Entitlements")] public Ref<LocalizedTextResource> DlcItemCRText;
        [RTTI.Member(114, 0x308, "RiskAndRecommend")] public Ref<DSRiskDescriptionResource> RiskDescription;
        [RTTI.Member(116, 0x310, "Speech")] public Ref<DSTalkManagerGameSettingsResource> DSTalkManagerGameSettings;
        [RTTI.Member(118, 0x318, "DSNetwork")] public Ref<DSNetLocalizedTextResource> DSNetLocalizedTextResource;
        [RTTI.Member(119, 0x320, "DSNetwork")] public Ref<DSSystemSettings> DSSystemSettings;
    }

    [RTTI.Serializable(0xC6C6536D0632900F, GameType.DS)]
    public class GameMenuGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB5B1C8B829DA053A, GameType.DS)]
    public class GameModuleSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6DF02CC6DD205981, GameType.DS)]
    public class GameMovie : RTTIObject
    {
    }

    [RTTI.Serializable(0xC6F7DDCCC9D89A64, GameType.DS)]
    public class GameMovieSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA14054D68D47BDF4, GameType.DS)]
    public class GameRoundSettings : CoreObject
    {
        [RTTI.Member(2, 0x20)] public String LevelID;
    }

    [RTTI.Serializable(0x2F5E29B4A81A8420, GameType.DS)]
    public class GameSchedule : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xCDC1E21F42169D2A, GameType.DS)]
    public class GameScheduleEntry : RTTIObject
    {
    }

    [RTTI.Serializable(0xCE46CBD0606A13C2, GameType.DS)]
    public class GameScheduleEntryResource : Resource
    {
        [RTTI.Member(2, 0x20)] public float StartTime;
        [RTTI.Member(3, 0x24)] public float StartTimeVariation;
        [RTTI.Member(4, 0x28)] public int StartDay;
        [RTTI.Member(5, 0x2C)] public float ContinuousPlanWaitTime;
    }

    [RTTI.Serializable(0xF027AF0255642CE5, GameType.DS)]
    public class GameScheduleResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<GameScheduleEntryResource>> Entries;
        [RTTI.Member(4, 0x30, "Logic")] public bool Continuous;
    }

    [RTTI.Serializable(0x3C74F9087FB788DB, GameType.DS)]
    public class GameScheduleResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5501AF90058325FB, GameType.DS)]
    public class GameSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Version")] public int VersionNumber;
        [RTTI.Member(46, 0x24, "PlayerSettings")] public bool DefaultLateJoinersAllowed;
        [RTTI.Member(24, 0x28, "Missions")] public Array<MissionSettings> MissionSettings;
        [RTTI.Member(25, 0x38, "Missions")] public Array<int> MissionTimeLimitSelection;
        [RTTI.Member(12, 0x4C, "Timers")] public float DefaultDeathCamTime;
        [RTTI.Member(31, 0x50, "PlayerSettings")] public bool UseSpawnWaves;
        [RTTI.Member(13, 0x54, "Timers")] public int DefaultRespawnTimer;
        [RTTI.Member(14, 0x58, "Timers")] public int DefaultGracePeriod;
        [RTTI.Member(15, 0x5C, "Timers")] public int DefaultInactivityKickTime;
        [RTTI.Member(16, 0x60, "Timers")] public Array<int> RespawnTimerSelection;
        [RTTI.Member(17, 0x70, "Timers")] public int DefaultTimeBetweenMissions;
        [RTTI.Member(9, 0x74, "RankGroup")] public bool DefaultRankGroupEnabled;
        [RTTI.Member(10, 0x78, "RankGroup")] public int DefaultRankGroup;
        [RTTI.Member(18, 0x7C, "Timers")] public int DefaultPreGameLobbyWaitTime;
        [RTTI.Member(19, 0x80, "Timers")] public Array<int> PreGameLobbyWaitTimeSelection;
        [RTTI.Member(20, 0x90, "Timers")] public int DefaultPostGameLobbyWaitTime;
        [RTTI.Member(27, 0x94, "Weapons")] public bool DefaultFriendlyFireEnabled;
        [RTTI.Member(51, 0x95, "PlayerSettings")] public bool ShowEnemiesOnRadar;
        [RTTI.Member(52, 0x96, "PlayerSettings")] public bool ShowAmmoCounter;
        [RTTI.Member(53, 0x98, "PlayerSettings")] public EAmmoSettings AmmoSettings;
        [RTTI.Member(36, 0xA0, "PlayerSettings")] public Array<int> WarzoneMaxPlayerCountSelection;
        [RTTI.Member(38, 0xC0, "PlayerSettings")] public Array<int> OperationsMaxPlayerCountSelection;
        [RTTI.Member(32, 0xE0, "PlayerSettings")] public int DefaultMaxPlayerSpectatorCount;
        [RTTI.Member(33, 0xE4, "PlayerSettings")] public int DefaultMaxAdminSpectatorCount;
        [RTTI.Member(34, 0xE8, "PlayerSettings")] public int DefaultMinClientCount;
        [RTTI.Member(75, 0xEC, "Clans")] public int DefaultClansMinPlayerCount;
        [RTTI.Member(37, 0xF0, "PlayerSettings")] public int DefaultOperationsMaxPlayerCount;
        [RTTI.Member(39, 0xF4, "PlayerSettings")] public int DefaultSkirmishMaxPlayerCount;
        [RTTI.Member(35, 0xF8, "PlayerSettings")] public int DefaultWarzoneMaxPlayerCount;
        [RTTI.Member(76, 0xFC, "Clans")] public int DefaultClansForfeitTimer;
        [RTTI.Member(77, 0x100, "Clans")] public Ref<LocalizedTextResource> BotClanTag;
        [RTTI.Member(29, 0x108, "PlayerSettings")] public EPlayerHealthSettings DefaultPlayerHealthSettings;
        [RTTI.Member(30, 0x10C, "PlayerSettings")] public EHealthRegenerationSettings DefaultHealthRegenerationSettings;
        [RTTI.Member(40, 0x110, "PlayerSettings")] public int DefaultMaxBotCount;
        [RTTI.Member(41, 0x118, "PlayerSettings")] public Array<int> MaxBotCountSelection;
        [RTTI.Member(42, 0x128, "PlayerSettings")] public bool DefaultSplitScreenGame;
        [RTTI.Member(43, 0x129, "PlayerSettings")] public bool DefaultBotzoneGame;
        [RTTI.Member(44, 0x12A, "PlayerSettings")] public bool DefaultPracticeGame;
        [RTTI.Member(45, 0x12C, "PlayerSettings")] public EGameMode DefaultGameMode;
        [RTTI.Member(47, 0x130, "PlayerSettings")] public bool DefaultIsCustomGame;
        [RTTI.Member(48, 0x131, "PlayerSettings")] public bool DefaultIsAdminCreatedGame;
        [RTTI.Member(49, 0x132, "PlayerSettings")] public bool DefaultCampaignScoringEnabled;
        [RTTI.Member(21, 0x134, "Timers")] public float PlayerAssistTimeOut;
        [RTTI.Member(22, 0x138, "Timers")] public float TimeEnemiesVisibleAfterFiring;
        [RTTI.Member(57, 0x13C, "SmartSpawning")] public int TimeOut;
        [RTTI.Member(50, 0x140, "PlayerSettings")] public ECloseCombatSettings CloseCombatSettings;
        [RTTI.Member(59, 0x144, "EarlyDeaths")] public float EarlyDeathDetectionDuration;
        [RTTI.Member(60, 0x148, "EarlyDeaths")] public int EarlyDeathPreventionDeathCount;
        [RTTI.Member(62, 0x150, "PlaylistSettings")] public Ref<LocalizedTextResource> PlaylistUGCRestrictedName;
        [RTTI.Member(64, 0x158, "PlaylistFilter")] public String FeaturedPlaylistTag;
        [RTTI.Member(65, 0x160, "PlaylistFilter")] public String GGPlaylistTag;
        [RTTI.Member(66, 0x168, "PlaylistFilter")] public String ClanTag;
        [RTTI.Member(67, 0x170, "PlaylistFilter")] public String NewbieTag;
        [RTTI.Member(68, 0x178, "PlaylistFilter")] public String LastPlayedTag;
        [RTTI.Member(69, 0x180, "PlaylistFilter")] public String RecentlyPlayedTag;
        [RTTI.Member(70, 0x188, "PlaylistFilter")] public String PopularTag;
        [RTTI.Member(73, 0x190, "ColorBlindSupport")] public Array<ColorScheme> ColorSchemes;
        [RTTI.Member(72, 0x1A0, "ColorBlindSupport")] public RGBAColor NeutralColor;
        [RTTI.Member(54, 0x1A5, "PlayerSettings")] public bool DefaultPartiesAllowed;
        [RTTI.Member(55, 0x1A8, "PlayerSettings")] public int FactionSwitchingMinPlayerDifference;
        [RTTI.Member(5, 0x1AC, "StartSettings")] public bool AllowSaveGames;
        [RTTI.Member(6, 0x1B0, "StartSettings")] public String SpawnMarker;
        [RTTI.Member(7, 0x1B8, "StartSettings")] public Array<Ref<FactValueBase>> InitialFacts;
    }

    [RTTI.Serializable(0xF346C68F861F77D3, GameType.DS)]
    public class GameSettingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x410471DFDE35DC5A, GameType.DS)]
    public class GameSoundSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public StreamingRef<GraphProgramResource> SoundUpdateProgram;
        [RTTI.Member(3, 0x28)] public Ref<SamplePatternResource> SoundEnvironmentSamplePattern;
        [RTTI.Member(4, 0x30)] public Array<Ref<SoundEnvironment>> SoundEnvironments;
    }

    [RTTI.Serializable(0xE7A90F72CCA431D9, GameType.DS)]
    public class GameSoundSystemAssetsRtDbg : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<FontResource> MusicWindowFont;
    }

    [RTTI.Serializable(0xE988BF6FA7483886, GameType.DS)]
    public class GameState : CoreObject
    {
    }

    [RTTI.Serializable(0xA711839AA9712D8C, GameType.DS)]
    public class GameStatsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEBFE0241B0B90C5C, GameType.DS)]
    public class GameStatsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float MultiKillDuration;
        [RTTI.Member(4, 0x28, "Logic")] public Array<GameStatsLootItemRarityToFactMapping> LootItemRartiyToCounterFacts;
    }

    [RTTI.Serializable(0x12CA91A16E556B8F, GameType.DS)]
    public class GameStatsDamageEntry : GameStatsEntryBase
    {
        [RTTI.Member(6, 0x30, "Player")] public Array<Ref<TagProperty>> PlayerProperties;
        [RTTI.Member(7, 0x40, "Player")] public Array<Ref<BooleanFact>> PlayerFacts;
        [RTTI.Member(10, 0x50, "Damager")] public Array<Ref<DamageTypeResource>> DamageTypes;
        [RTTI.Member(11, 0x60, "Damager")] public Array<Ref<DamageTypeResource>> ExcludeDamageTypes;
        [RTTI.Member(12, 0x70, "Damager")] public HashSet<GGUUID> WeaponUUIDs;
        [RTTI.Member(13, 0x80, "Damager")] public HashSet<GGUUID> WeaponModeUUIDs;
        [RTTI.Member(9, 0x90, "Damager")] public Array<EDamageFlagsGameExported> DamageFlags;
        [RTTI.Member(15, 0xA0, "Victim")] public Array<Ref<TagProperty>> VictimEntityProperties;
        [RTTI.Member(16, 0xB0, "Victim")] public Array<Ref<BooleanFact>> VictimFacts;
        [RTTI.Member(17, 0xC0, "Victim")] public Array<Ref<TagProperty>> VictimDestructibilityTags;
        [RTTI.Member(18, 0xD0, "Victim")] public Array<Ref<TagProperty>> VictimTransitionDestructibilityTags;
        [RTTI.Member(19, 0xE0, "Victim")] public Array<UUIDRef<HitReactionResource>> VictimHitReactions;
        [RTTI.Member(20, 0xF0, "Victim")] public bool TriggerOnPinDown;
        [RTTI.Member(21, 0xF1, "Victim")] public bool TriggerOnEntityStuckTo;
        [RTTI.Member(22, 0xF4, "Victim")] public int TriggerOnKillCount;
        [RTTI.Member(23, 0xF8, "Victim")] public bool TriggerOncePerAttack;
        [RTTI.Member(24, 0x100, "Victim")] public String ExposedActionTrigger;
    }

    [RTTI.Serializable(0x28E2E2CEDA5957EF, GameType.DS)]
    public class GameStatsEntryBase : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<BooleanFact> IsTrackedFact;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<IntegerFact> CounterFact;
    }

    [RTTI.Serializable(0x12683C4088448B13, GameType.DS)]
    public class GameStatsLootItemRarityToFactMapping
    {
        [RTTI.Member(1, 0x0, "Logic")] public Ref<IntegerFact> CounterFact;
        [RTTI.Member(2, 0x8, "Logic")] public EInventoryItemRarity ItemRarity;
    }

    [RTTI.Serializable(0xD661A5CA43E7C67F, GameType.DS)]
    public class GameStatsTrackingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3846748BDBFA80CF, GameType.DS)]
    public class GameStatsTrackingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<GameStatsDamageEntry>> KillStats;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<GameStatsDamageEntry>> DamageStats;
        [RTTI.Member(5, 0x40, "Logic")] public Array<Ref<GameStatsDamageEntry>> HitReactionStats;
        [RTTI.Member(6, 0x50, "Logic")] public Array<Ref<GameStatsDamageEntry>> TransitionStats;
        [RTTI.Member(7, 0x60, "Logic")] public Array<Ref<GameStatsDamageEntry>> PinDownStats;
        [RTTI.Member(8, 0x70, "Logic")] public Array<Ref<GameStatsDamageEntry>> EntityStuckToStats;
        [RTTI.Member(9, 0x80, "Logic")] public Array<Ref<GameStatsDamageEntry>> ExposedActionStats;
    }

    [RTTI.Serializable(0x4E1F399C86E11443, GameType.DS)]
    public class GameViewResource : Resource
    {
        [RTTI.Member(3, 0x20, "VisualEffects")] public Ref<ScreenEffectResource> HealthScreenEffectResource;
        [RTTI.Member(4, 0x28, "VisualEffects")] public Ref<CurveResource> HealthScreenEffectVisibilityCurve;
        [RTTI.Member(5, 0x30, "VisualEffects")] public float HealthScreenEffectFadeOutDuration;
        [RTTI.Member(6, 0x34, "VisualEffects")] public float HealthScreenEffectFadeOutDelay;
        [RTTI.Member(13, 0x38, "RumbleEffects")] public float HealthLowRumblePct;
        [RTTI.Member(14, 0x40, "RumbleEffects")] public Ref<RumbleResource> HealthLowRumbleResource;
        [RTTI.Member(7, 0x48, "VisualEffects")] public Ref<AnimatedScreenEffectResource> FadeOutScreenEffectResource;
        [RTTI.Member(8, 0x50, "VisualEffects")] public Ref<AnimatedScreenEffectResource> FadeInScreenEffectResourceWhite;
        [RTTI.Member(9, 0x58, "VisualEffects")] public Ref<AnimatedScreenEffectResource> FadeInScreenEffectResourceBlack;
        [RTTI.Member(10, 0x60, "VisualEffects")] public Ref<AnimatedScreenEffectResource> LoadingToGameFadeEffectResource;
        [RTTI.Member(11, 0x68, "VisualEffects")] public Ref<AnimatedScreenEffectResource> MenuToGameScreenEffectResource;
        [RTTI.Member(18, 0x70, "HUD")] public Ref<HUDResource> HUD;
        [RTTI.Member(16, 0x78, "Display")] public float HorizontalReferenceFOV;
    }

    [RTTI.Serializable(0xE4F9F4FE27763919, GameType.DS)]
    public class GameWorldTimeState : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "TimeOfDay")] public float TimeOfDay;
        [RTTI.Member(4, 0x2C, "TimeOfDay")] public bool EnableDayNightCycle;
    }

    [RTTI.Serializable(0xF54648B434A42680, GameType.DS)]
    public class GearMovementSoundComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x32F92EFF2698724, GameType.DS)]
    public class GearMovementSoundComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x754AA0D2AF5969A2, GameType.DS)]
    public class GearMovementSoundComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<SoundResource> GearMovementSound;
        [RTTI.Member(4, 0x28, "Logic")] public String GearMovementSoundHelperName;
    }

    [RTTI.Serializable(0xC88F0E137E4729CF, GameType.DS)]
    public class GenerateComputeJobSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> GenerateCompute;
    }

    [RTTI.Serializable(0xA56B125130C33F54, GameType.DS)]
    public class GenericPlacement : ConcretePlacement
    {
        [RTTI.Member(25, 0x90)] public float EffectiveFootprint;
        [RTTI.Member(26, 0x94)] public float MaxPlacementDistance;
        [RTTI.Member(27, 0x98)] public Array<Ref<RTTIRefObject>> PlacementTargets;
        [RTTI.Member(28, 0xA8)] public Array<Ref<PlacementComponent>> PlacementComponents;
    }

    [RTTI.Serializable(0x9E92DDE068BB8EC9, GameType.DS)]
    public class GeometryObject : WorldNode
    {
        [RTTI.BaseClass(0x60)] public DrawableObjectInstance @DrawableObjectInstance;
    }

    [RTTI.Serializable(0xAF2AE8398AD34C0A, GameType.DS)]
    public class GestureCollectionResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<GestureResource>> GestureResources;
    }

    [RTTI.Serializable(0x2715799C050555AD, GameType.DS)]
    public class GestureComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB2BE594D5AF30940, GameType.DS)]
    public class GestureComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GestureCollectionResource> Gestures;
    }

    [RTTI.Serializable(0xBCB07D0973AFCD6C, GameType.DS)]
    public class GestureComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA978FEC5D9CEEC8E, GameType.DS)]
    public class GestureEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x80A81E7D03B9D914, GameType.DS)]
    public class GestureEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public String GestureName;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<LocatorResource> LocatorResource;
    }

    [RTTI.Serializable(0x6C1964FE4E8F8BAD, GameType.DS)]
    public class GestureResource : Resource
    {
        [RTTI.Member(2, 0x20)] public String Name;
        [RTTI.Member(3, 0x30)] public int GestureType;
        [RTTI.Member(4, 0x34)] public FRange HeadingRange;
        [RTTI.Member(5, 0x3C)] public EGestureBodyParts BodyParts;
        [RTTI.Member(6, 0x40)] public GestureUsageMask UsageMask;
        [RTTI.Member(7, 0x44)] public bool RequiredForSignal;
    }

    [RTTI.Serializable(0x66747C202885E54, GameType.DS)]
    public class GestureUsageMask
    {
        [RTTI.Member(0, 0x0)] public int32 _GestureUsageMask;
    }

    [RTTI.Serializable(0xE56A7983E963C1F3, GameType.DS)]
    public class GliderControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x318291A32D8D6F1A, GameType.DS)]
    public class GliderControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float HeadingSpeed;
        [RTTI.Member(4, 0x24, "Logic")] public float PitchSpeed;
        [RTTI.Member(5, 0x28, "Logic")] public float RollSpeed;
        [RTTI.Member(6, 0x2C, "Logic")] public float HorizontalRestoreSpeed;
        [RTTI.Member(7, 0x30, "Logic")] public float StallNoseDownSpeed;
        [RTTI.Member(8, 0x34, "Logic")] public bool InvertYAxis;
        [RTTI.Member(9, 0x35, "Logic")] public bool UseRelativeToCameraMode;
        [RTTI.Member(10, 0x36, "Logic")] public bool UseButtonsForPitch;
        [RTTI.Member(11, 0x38, "Logic")] public Ref<CameraEntityResource> Camera;
        [RTTI.Member(12, 0x40, "Logic")] public float CameraActivationDuration;
        [RTTI.Member(13, 0x44, "Logic")] public float CameraDeactivationDuration;
        [RTTI.Member(14, 0x48, "Logic")] public bool AllowPreviousEntityControl;
        [RTTI.Member(15, 0x50, "Logic")] public Array<EDeviceFunction> SuspendedDeviceFunctions;
    }

    [RTTI.Serializable(0xEA9E6BEDE4627A28, GameType.DS)]
    public class GliderMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0x42F850AC473044E3, GameType.DS)]
    public class GliderMoverResource : PhysicsMoverResource
    {
        [RTTI.Member(17, 0x58, "Logic")] public float LiftFactor;
        [RTTI.Member(18, 0x60, "Logic")] public Vec3 DragFactor;
        [RTTI.Member(19, 0x70, "Logic")] public float MaxSpeed;
        [RTTI.Member(20, 0x74, "Logic")] public float MaxHorizontalSpeed;
        [RTTI.Member(21, 0x78, "Logic")] public float Gravity;
        [RTTI.Member(22, 0x7C, "Logic")] public bool KeepAnimationHorizontal;
    }

    [RTTI.Serializable(0x71DC405A1F892BD, GameType.DS)]
    public class GliderMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2D2B3828527EFA24, GameType.DS)]
    public class GlobalAppRenderVariableInfo
    {
        [RTTI.Member(0, 0x10)] public String Name;
        [RTTI.Member(1, 0x18)] public float DefaultValue;
        [RTTI.Member(2, 0x1C)] public bool IsUseSystem;
    }

    [RTTI.Serializable(0x2A84147C6FC0C00C, GameType.DS)]
    public class GlobalAppRenderVariableValues
    {
        [RTTI.Member(0, 0x0)] public float_GLOBAL_APP_RENDER_VAR_COUNT<float> Values;
    }

    [RTTI.Serializable(0x882B273366E26242, GameType.DS)]
    public class GlobalDamageModifier : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<PlayerDamageModifierForDamageType> SpecificPlayerDamageDealtSettings;
        [RTTI.Member(4, 0x30, "General")] public PlayerDamageModifier PlayerDamageDealtSettings;
        [RTTI.Member(5, 0x50, "General")] public PlayerDamageModifier PlayerDamageTakenSettings;
        [RTTI.Member(6, 0x70, "General")] public Array<Ref<AttackerToVictimDamageModifier>> FactionSettings;
    }

    [RTTI.Serializable(0xEB1E881E3642E927, GameType.DS)]
    public class GlobalRenderVariableInfo
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float DefaultValue;
    }

    [RTTI.Serializable(0xA5D005706E3CA9C, GameType.DS)]
    public class GlobalRenderVariableInfoSet : CoreObject
    {
        [RTTI.Member(2, 0x20)] public GlobalRenderVariableInfo_GLOBAL_RENDER_VAR_COUNT<GlobalRenderVariableInfo> Variables;
        [RTTI.Member(3, 0x120)] public GlobalAppRenderVariableInfo_GLOBAL_APP_RENDER_VAR_COUNT<GlobalAppRenderVariableInfo> AppVariables;
    }

    [RTTI.Serializable(0x317FB0D3952A647E, GameType.DS)]
    public class GlobalRenderVariableValues
    {
        [RTTI.Member(0, 0x0)] public float_GLOBAL_RENDER_VAR_COUNT<float> Values;
    }

    [RTTI.Serializable(0x3791E11136078110, GameType.DS)]
    public class GlyphContour
    {
        [RTTI.Member(0, 0x0)] public Array<GlyphContourCmd> CommandList;
        [RTTI.Member(1, 0x10)] public Array<Vec2Pack> Points;
    }

    [RTTI.Serializable(0x7A8F545B73783111, GameType.DS)]
    public class GlyphContourCmd
    {
        [RTTI.Member(0, 0x0)] public uint8 CmdData;
    }

    [RTTI.Serializable(0xC61E3BC02AB02FE3, GameType.DS)]
    public class GlyphContourList
    {
        [RTTI.Member(0, 0x0)] public BoundingBox2 Bounds;
        [RTTI.Member(1, 0x20)] public Array<GlyphContour> GlyphContours;
    }

    [RTTI.Serializable(0x9CE4066606CCD4BB, GameType.DS)]
    public class Gradient : Resource
    {
        [RTTI.Member(7, 0x0, "General")] public int StartAlphaPegID;
        [RTTI.Member(5, 0x0, "General")] public int StartColorPegID;
        [RTTI.Member(6, 0x0, "General")] public int EndColorPegID;
        [RTTI.Member(8, 0x0, "General")] public int EndAlphaPegID;
        [RTTI.Member(3, 0x20, "General")] public Array<ColorPeg> ColorPegs;
        [RTTI.Member(4, 0x30, "General")] public Array<AlphaPeg> AlphaPegs;
        [RTTI.Member(9, 0x48, "General")] public int NumberOfSamples;
        [RTTI.Member(10, 0x4C, "General")] public uint16 NextPegId;
    }

    [RTTI.Serializable(0x35BFA21A2A82C354, GameType.DS)]
    public class GrainSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public float Size;
        [RTTI.Member(4, 0x28, "Settings")] public Ref<TextureLUT> IntensityLUT;
        [RTTI.Member(5, 0x30, "Settings")] public float Intensity;
    }

    [RTTI.Serializable(0x6D129F853CA1FD90, GameType.DS)]
    public class GraphAnimationManager : AnimationManager
    {
    }

    [RTTI.Serializable(0x5DB087B3937F231B, GameType.DS)]
    public class GraphAnimationManagerResource : AnimationManagerResource
    {
        [RTTI.Member(6, 0xC0, "Logic")] public Ref<GraphProgramResource> AnimationGraphProgramResource;
        [RTTI.Member(7, 0xC8, "Logic")] public Ref<OverrideGraphProgramResource> OverrideAnimationGraphProgramResource;
        [RTTI.Member(8, 0xD0, "Logic")] public String AnimationGraphOuput;
        [RTTI.Member(9, 0xD8, "Logic")] public Ref<JointSetCollectionResource> JointCollection;
        [RTTI.Member(10, 0xE0, "Logic")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(11, 0xE8, "Logic")] public Ref<MorphemeEventMappingsResource> MorphemeEventMappings;
    }

    [RTTI.Serializable(0x56BD297BA3D92EFC, GameType.DS)]
    public class GraphConditionAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<GraphProgramResource> Condition;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<OverrideGraphProgramResource> OverrideCondition;
        [RTTI.Member(9, 0x48, "Logic")] public bool AllowMultiThreadedExecution;
    }

    [RTTI.Serializable(0xAF13C4B876B47749, GameType.DS)]
    public class GraphConditionInstance : ConditionInstance
    {
    }

    [RTTI.Serializable(0x770FB13C2B3C4939, GameType.DS)]
    public class GraphConditionResource : ConditionResource
    {
        [RTTI.Member(3, 0x30, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
    }

    [RTTI.Serializable(0x7AC0660862D614BE, GameType.DS)]
    public class GraphKjpSoundGraphNodeGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE73983C3DB09A8BC, GameType.DS)]
    public class GraphProgramInstance : ProgramInstance
    {
    }

    [RTTI.Serializable(0x9D6597EEF8D1DC74, GameType.DS)]
    public class GraphProgramResource : ProgramResource
    {
        [RTTI.BaseClass(0x50)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(10, 0x68, "Graph")] public Array<ProgramParameter> StateParameters;
        [RTTI.Member(11, 0x88, "Graph")] public Array<Ref<StateObjectResource>> StateResources;
        [RTTI.Member(13, 0x98, "Graph")] public Ref<NodeConstantsResource> ExposedDataResource;
        [RTTI.Member(12, 0xA0, "Graph")] public Array<EventFunctionMapping> EventFunctionIndexMap;
        [RTTI.Member(14, 0xC0, "Graph")] public Array<RTTIHandle> RequiredVirtualTypes;
    }

    [RTTI.Serializable(0x63BEACBFB0ED1F30, GameType.DS)]
    public class GraphProgramResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3760ADC03F9BF77, GameType.DS)]
    public class GraphProgramStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0x5ACA108DE4163FC4, GameType.DS)]
    public class GraphProgramStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(7, 0x50, "General")] public Array<Ref<StreamingProgramResource>> StreamingPrograms;
    }

    [RTTI.Serializable(0x76088C3C8509AFE6, GameType.DS)]
    public class GraphPropertyGameGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDA597518B1A9594B, GameType.DS)]
    public class GraphPropertyGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4B88A13D0F57D23A, GameType.DS)]
    public class GraphSoundEvent
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float Time;
    }

    [RTTI.Serializable(0x9ED653212B9098D1, GameType.DS)]
    public class GraphSoundGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9FC8AD9ACFA626B2, GameType.DS)]
    public class GraphSoundInstance : SoundInstance
    {
    }

    [RTTI.Serializable(0x58FE642BAC7D31DA, GameType.DS)]
    public class GraphSoundResource : SoundResource
    {
        [RTTI.Member(41, 0x2A8, "Sound")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(42, 0x2B0, "Sound")] public Array<GraphSoundEvent> Events;
        [RTTI.Member(43, 0x2C0, "Sound")] public EGraphSoundUpdateRate UpdateRate;
        [RTTI.Member(44, 0x2C4, "Sound")] public bool SaveVoiceStateOnSuspend;
    }

    [RTTI.Serializable(0x74C9345E7C74DF6D, GameType.DS)]
    public class GraphWwiseGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x932E9E7F43FEDF65, GameType.DS)]
    public class GraphicsGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x578E2CED802E1AB, GameType.DS)]
    public class GravityPocket : Entity
    {
    }

    [RTTI.Serializable(0x26D2DFBF180AAB31, GameType.DS)]
    public class GravityPocketResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Physics")] public Ref<PhysicsGravityPocketResource> PhysicsGravityPocketResource;
    }

    [RTTI.Serializable(0x33D3D9AD2602D516, GameType.DS)]
    public class GrenadeEjector : DiscreteAmmoEjector
    {
    }

    [RTTI.Serializable(0x151C872747BC6AE5, GameType.DS)]
    public class GrenadeEjectorResource : DiscreteAmmoEjectorResource
    {
        [RTTI.Member(82, 0x1A0, "EjectSettings")] public float InitialOffsetAngle;
        [RTTI.Member(83, 0x1B0, "EjectSettings")] public Vec3 InitialOrientation;
        [RTTI.Member(84, 0x1C0, "EjectSettings")] public Vec3 RandomInitialOrientation;
        [RTTI.Member(85, 0x1D0, "EjectSettings")] public bool UseEjectorDirection;
        [RTTI.Member(89, 0x1D4, "Accuracy")] public float RandomImpactSphereRadius;
        [RTTI.Member(79, 0x1D8, "Logic")] public bool IgnoreOwnerVelocity;
        [RTTI.Member(86, 0x1D9, "EjectSettings")] public bool FiredStraightUp;
        [RTTI.Member(87, 0x1E0, "EjectSettings")] public Ref<CurveResource> PitchMappingCurve;
        [RTTI.Member(80, 0x1E8, "Logic")] public float MinRadius;
        [RTTI.Member(91, 0x1EC, "AI")] public EAIAttackType AttackType;
        [RTTI.Member(93, 0x1F0, "TrajectoryAssist")] public float TrajectoryAssistMaxAdjustmentAngle;
        [RTTI.Member(94, 0x1F8, "TrajectoryAssist")] public Ref<CurveResource> TrajectoryAssistRadiusOverDistance;
        [RTTI.Member(101, 0x200, "Charged")] public Ref<ChargedValueFloat> TrajectoryAssistRadiusMultiplier;
        [RTTI.Member(95, 0x208, "TrajectoryAssist")] public Ref<TagProperty> TrajectoryAssistHighValuePartTag;
        [RTTI.Member(96, 0x210, "TrajectoryAssist")] public Ref<TagProperty> TrajectoryAssistIgnoreFactionPartTag;
        [RTTI.Member(97, 0x218, "TrajectoryAssist")] public float TrajectoryAssistHighValueRadiusModifier;
        [RTTI.Member(98, 0x220, "TrajectoryAssist")] public Ref<GraphProgramResource> TrajectoryAssistRadiusMultiplierGraph;
        [RTTI.Member(99, 0x228, "TrajectoryAssist")] public float TrajectoryAssistRadiusMultiplierForHumanoids;
    }

    [RTTI.Serializable(0x987F57513AEFCD54, GameType.DS)]
    public class GrenadeTriggerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9558D8F4CA1FF4F1, GameType.DS)]
    public class GrenadeTriggerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF124105177BFBA7D, GameType.DS)]
    public class GrenadeTriggerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float DetonateTime;
        [RTTI.Member(4, 0x24, "Logic")] public float DetonateTimeVariation;
        [RTTI.Member(8, 0x28, "SoundEffects")] public Ref<SoundResource> DetonateTimeSoundResource;
        [RTTI.Member(5, 0x30, "Logic")] public bool ExplodeOnControlledEntityContact;
        [RTTI.Member(6, 0x34, "Logic")] public ETimerStartType TimerStartType;
    }

    [RTTI.Serializable(0x820CB1B8911A44C1, GameType.DS)]
    public class GrenadeTriggerComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8F7CA503A12E83F7, GameType.DS)]
    public class GridPanelCellTag : VisualTag
    {
    }

    [RTTI.Serializable(0x6AE1343AD78F0DE0, GameType.DS)]
    public class GridPanelCellWidget : Widget
    {
    }

    [RTTI.Serializable(0xC9BED8167A29716E, GameType.DS)]
    public class GridPanelTag : VisualTag
    {
    }

    [RTTI.Serializable(0x9BA0B2597198ECD5, GameType.DS)]
    public class GridPanelWidget : Widget
    {
    }

    [RTTI.Serializable(0xCB7AD734D7554BB9, GameType.DS)]
    public class GridRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> ProjectedGridShader;
    }

    [RTTI.Serializable(0x50EA917DD67488DE, GameType.DS)]
    public class GriefManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x8CE5AAAB935FE9E8, GameType.DS)]
    public class GriefReason : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int reasonId;
        [RTTI.Member(1, 0x10)] public String reasonText;
    }

    [RTTI.Serializable(0xBD845047C6625C00, GameType.DS)]
    public class GriefReasons : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<GriefReason> behaviorReasons;
        [RTTI.Member(3, 0x30)] public Array<GriefReason> contentReasons;
    }

    [RTTI.Serializable(0x1D6AC64793B0765D, GameType.DS)]
    public class GriefReportItem : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int reason;
        [RTTI.Member(3, 0x28)] public String consoleId;
        [RTTI.Member(4, 0x30)] public String contentId;
        [RTTI.Member(5, 0x38)] public String reportLanguageCode;
        [RTTI.Member(6, 0x40)] public int64 creationDate;
        [RTTI.Member(7, 0x48)] public String owner;
        [RTTI.Member(8, 0x50)] public String description;
        [RTTI.Member(9, 0x58)] public String extraInfo;
    }

    [RTTI.Serializable(0xBA72B23021109EDE, GameType.DS)]
    public class GroundProjectileMover : ThrowableMover
    {
    }

    [RTTI.Serializable(0x307AF1A1A0FDA9A0, GameType.DS)]
    public class GroundProjectileMoverResource : ThrowableMoverResource
    {
        [RTTI.Member(37, 0xF0, "Ground")] public Ref<CurveResource> DistanceOverTime;
        [RTTI.Member(38, 0xF8, "Ground")] public float GroundCheckRange;
        [RTTI.Member(39, 0xFC, "Ground")] public EPhysicsCollisionLayerGame GroundCheckLayer;
        [RTTI.Member(40, 0x100, "Ground")] public float HeightOffGround;
    }

    [RTTI.Serializable(0x56394AD5A32C5E5C, GameType.DS)]
    public class GroundToAirTransitionComponent : EntityComponent
    {
        [RTTI.Member(5, 0x50, true)] public EMovementStateGroundToAir MovementState;
        [RTTI.Member(6, 0x78, true)] public WorldPosition LandingPosition;
        [RTTI.Member(7, 0xB0, true)] public float TakeOffActivationTime;
    }

    [RTTI.Serializable(0xFA2DABBAEDCA9BC9, GameType.DS)]
    public class GroundToAirTransitionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<MoverResource> GroundMoverResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<AIAirMoverResource> AirMoverResource;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Ref<EntityComponentSetResource>> LandingConfigurations;
        [RTTI.Member(6, 0x40, "Logic")] public Array<Ref<EntityComponentSetResource>> TakeOffConfigurations;
        [RTTI.Member(8, 0x50, "Animation")] public String InAirAnimVarName;
        [RTTI.Member(9, 0x58, "Animation")] public String TakeOffAnimVarName;
        [RTTI.Member(10, 0x60, "Animation")] public String LandingAnimVarName;
        [RTTI.Member(11, 0x68, "Animation")] public String LandingPositionAnimVarName;
        [RTTI.Member(12, 0x70, "Animation")] public String LandingAngleAnimVarName;
        [RTTI.Member(13, 0x78, "Animation")] public String LandingOrientationAnimVarName;
        [RTTI.Member(14, 0x80, "Animation")] public String OnGroundAnimTagName;
        [RTTI.Member(15, 0x88, "Animation")] public String InAirAnimTagName;
        [RTTI.Member(16, 0x90, "Animation", true)] public String AirSpawnStateAnimTagName;
        [RTTI.Member(17, 0x98, "Animation")] public AnimationNodeID AirSpawnAnimStateNode;
    }

    [RTTI.Serializable(0x35BEFD69C2BEA398, GameType.DS)]
    public class GroundToAirTransitionComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBCC811BFB96E952B, GameType.DS)]
    public class GuaranteedHitProjectileComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8F81B6991ACE53D, GameType.DS)]
    public class GuaranteedHitProjectileComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x913E5EC46633B750, GameType.DS)]
    public class HUDCrosshairBulletIndicatorSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public ECrosshairBulletIndicatorType BulletIndicatorType;
        [RTTI.Member(3, 0x28)] public Array<Ref<HUDImageResource>> BulletAvailableHUDImages;
        [RTTI.Member(4, 0x38)] public Array<Ref<HUDImageResource>> BulletUnavailableHUDImages;
        [RTTI.Member(5, 0x48)] public Ref<CurveResource> BulletEjectedScaleCurve;
    }

    [RTTI.Serializable(0x320565049932D1B0, GameType.DS)]
    public class HUDCrosshairChargeLevelIndicatorSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<HUDImageResource>> ChargeAvailableHUDImages;
        [RTTI.Member(3, 0x30)] public Array<Ref<HUDImageResource>> ChargeUnavailableHUDImages;
        [RTTI.Member(4, 0x40)] public Ref<CurveResource> ChargeAvailableScaleCurve;
        [RTTI.Member(5, 0x48)] public Ref<CurveResource> RetainingChargeScaleCurve;
    }

    [RTTI.Serializable(0xA6188E4BA6376651, GameType.DS)]
    public class HUDCrosshairPart : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<HUDElementResource> HUDElement;
        [RTTI.Member(6, 0x28, "Animation")] public Array<Ref<HUDCrosshairPartTimelineAnimationSettings>> TimelineAnimations;
        [RTTI.Member(7, 0x38, "Animation")] public Ref<HUDCrosshairPartSpreadAnimationSettings> SpreadAnimationSettings;
        [RTTI.Member(8, 0x40, "Animation")] public Ref<HUDCrosshairPartChargeAnimationSettings> ChargeAnimationSettings;
        [RTTI.Member(3, 0x48)] public IVec2 Offset;
        [RTTI.Member(4, 0x50)] public bool FactionColorChange;
        [RTTI.Member(9, 0x51, "Animation")] public ECrosshairPartAnimationTrigger DefaultAnimationTrigger;
    }

    [RTTI.Serializable(0x76E0B906CD0DF65A, GameType.DS)]
    public class HUDCrosshairPartChargeAnimationSettings : Resource
    {
        [RTTI.Member(3, 0x20)] public float Factor;
        [RTTI.Member(2, 0x24)] public float Orientation;
        [RTTI.Member(4, 0x28)] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(5, 0x30)] public Ref<CurveResource> ScaleCurve;
        [RTTI.Member(6, 0x38)] public Ref<CurveResource> AmmoChargeBlendCurve;
        [RTTI.Member(7, 0x40)] public Ref<CurveResource> AmmoChargeScaleCurve;
    }

    [RTTI.Serializable(0x8BE2D9D21CFA3BDD, GameType.DS)]
    public class HUDCrosshairPartSpreadAnimationSettings : Resource
    {
        [RTTI.Member(3, 0x20)] public float Factor;
        [RTTI.Member(2, 0x24)] public float Orientation;
        [RTTI.Member(4, 0x28)] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(5, 0x30)] public Ref<CurveResource> ScaleCurve;
    }

    [RTTI.Serializable(0x72553522BCC3473B, GameType.DS)]
    public class HUDCrosshairPartTimelineAnimationSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public ECrosshairPartAnimationTrigger AnimationTrigger;
        [RTTI.Member(3, 0x21)] public bool DoesLoop;
        [RTTI.Member(4, 0x28)] public Ref<HUDLogicTimelineResource> AnimationTimeLine;
    }

    [RTTI.Serializable(0x4D16C667ED7628A0, GameType.DS)]
    public class HUDCrosshairSettings : Resource
    {
        [RTTI.Member(9, 0x20, "General")] public Array<Ref<HUDCrosshairPart>> Parts;
        [RTTI.Member(7, 0x30, "General")] public Ref<HUDCrosshairBulletIndicatorSettings> BulletIndicatorSettings;
        [RTTI.Member(8, 0x38, "General")] public Ref<HUDCrosshairChargeLevelIndicatorSettings> ChargeLevelIndicatorSettings;
        [RTTI.Member(3, 0x40, "General")] public bool AlwaysDisplay;
        [RTTI.Member(4, 0x41, "General")] public bool ShowWhenUnableToFire;
        [RTTI.Member(5, 0x44, "General")] public int MaxSpreadToPixelMapping;
        [RTTI.Member(6, 0x48, "General")] public int MaxChargeToPixelMapping;
    }

    [RTTI.Serializable(0x76AA2EEF43433069, GameType.DS)]
    public class HUDEffectSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<ScreenEffectResource> ScreenEffect;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> ScreenEffectCurve;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> ZoomCurve;
        [RTTI.Member(3, 0x18)] public Ref<CurveResource> FOVCurve;
    }

    [RTTI.Serializable(0x80E14AA1C59A028F, GameType.DS)]
    public class HUDElement : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x35A08B8E906BCB6E, GameType.DS)]
    public class HUDElementResource : ResourceWithName
    {
        [RTTI.Member(12, 0x28, "Snap")] public EHUDSnap Type;
        [RTTI.Member(13, 0x2C, "Snap")] public EHUDUnits UnitsPositionX;
        [RTTI.Member(14, 0x30, "Snap")] public EHUDUnits UnitsPositionY;
        [RTTI.Member(15, 0x34, "Snap")] public EHUDUnits UnitsSizeX;
        [RTTI.Member(16, 0x38, "Snap")] public EHUDUnits UnitsSizeY;
        [RTTI.Member(17, 0x40, "Snap")] public Vec3 Position;
        [RTTI.Member(18, 0x50, "Snap")] public ISize Size;
        [RTTI.Member(5, 0x58, "General")] public float FadeInTime;
        [RTTI.Member(6, 0x5C, "General")] public float FadeOutTime;
        [RTTI.Member(7, 0x60, "General")] public bool IsShown;
        [RTTI.Member(23, 0x68, "Aggregate")] public Array<Ref<HUDElementResource>> ChildElements;
        [RTTI.Member(8, 0x80, "General")] public FRGBAColor Color;
        [RTTI.Member(19, 0x90, "Snap")] public Vec3 Rotation;
        [RTTI.Member(9, 0xA0, "General")] public EHUDBlendMode BlendMode;
        [RTTI.Member(20, 0xA4, "Snap")] public EHUDSnap RotationalPivot;
        [RTTI.Member(10, 0xA8, "General")] public bool IsOnForeground;
        [RTTI.Member(21, 0xAC, "Snap")] public float Scale;
    }

    [RTTI.Serializable(0x4AFC4A54E7B0C118, GameType.DS)]
    public class HUDEntityHelper : HUDHelper
    {
    }

    [RTTI.Serializable(0x16BE783AC6675D37, GameType.DS)]
    public class HUDGroupShowOption
    {
        [RTTI.Member(0, 0x0, true)] public GGUUID LogicGroupResourceUUID;
        [RTTI.Member(1, 0x10, true)] public EHUDShowOption HUDShowOption;
    }

    [RTTI.Serializable(0x42A5288CEF736F71, GameType.DS)]
    public class HUDHelper : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x1DFAD520A20D26E9, GameType.DS)]
    public class HUDImage : HUDElement
    {
    }

    [RTTI.Serializable(0x9DEA9704A4C4F6BA, GameType.DS)]
    public class HUDImageResource : HUDElementResource
    {
        [RTTI.Member(27, 0xB0, "Image")] public EHUDImageMode Mode;
        [RTTI.Member(25, 0xB8, "Image")] public Ref<UITexture> UITexture;
        [RTTI.Member(26, 0xC0, "Image")] public Ref<Texture> MaskTexture;
        [RTTI.Member(28, 0xC8, "Image")] public bool FlipHorizontal;
        [RTTI.Member(29, 0xC9, "Image")] public bool FlipVertical;
    }

    [RTTI.Serializable(0xB477284019E25AAD, GameType.DS)]
    public class HUDLanguageFontSizeOverride
    {
        [RTTI.Member(0, 0x0)] public ELanguage Language;
        [RTTI.Member(1, 0x4)] public int FontSize;
    }

    [RTTI.Serializable(0x12BAC3E058C2905C, GameType.DS)]
    public class HUDLayer : HUDElement
    {
    }

    [RTTI.Serializable(0xCEAE1DF3D87969FD, GameType.DS)]
    public class HUDLayerResource : HUDElementResource
    {
        [RTTI.Member(25, 0xB0, "Logic")] public EHUDLayer Layer;
    }

    [RTTI.Serializable(0x698DDC717A45C2ED, GameType.DS)]
    public class HUDLogicElementExpander : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0xCC4DA458175AECC9, GameType.DS)]
    public class HUDLogicElementExpanderResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(4, 0x30)] public EHUDLogicElementExpanderPivot Pivot;
        [RTTI.Member(5, 0x34)] public EHUDLogicElementExpanderAxes Axes;
        [RTTI.Member(6, 0x38)] public Ref<CurveResource> ScaleCurve;
    }

    [RTTI.Serializable(0xA3354786FE30BEAE, GameType.DS)]
    public class HUDLogicElementFader : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x5793C91B064BB411, GameType.DS)]
    public class HUDLogicElementFaderResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(4, 0x30)] public EHUDLogicElementFaderMode Mode;
        [RTTI.Member(5, 0x34)] public bool RecurseChildrenToo;
        [RTTI.Member(6, 0x38)] public Ref<CurveResource> FadeCurve;
        [RTTI.Member(7, 0x40)] public bool OnlyFadeOutIfShown;
    }

    [RTTI.Serializable(0xA10A0703A31CD0CD, GameType.DS)]
    public class HUDLogicGroupContainerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<HUDLogicGroupResource>> HUDLogicGroupResources;
    }

    [RTTI.Serializable(0x3282E7D48B18988B, GameType.DS)]
    public class HUDLogicGroupInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x8F40FED32892984E, GameType.DS)]
    public class HUDLogicGroupResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<UUIDRef<HUDLogicResource>> HUDLogicResources;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<HUDLogicGroupShowState>> HUDLogicShowStates;
        [RTTI.Member(6, 0x40, "Visibility")] public EHUDShowOption DefaultShowOption;
        [RTTI.Member(7, 0x48, "Visibility")] public Ref<LocalizedTextResource> ListName;
        [RTTI.Member(9, 0x50, "InitialHighlight")] public Ref<CurveResource> HighlightCurveResource;
        [RTTI.Member(10, 0x60, "InitialHighlight")] public FRGBAColor HighlightColor;
    }

    [RTTI.Serializable(0xD62C5C74DB34D23D, GameType.DS)]
    public class HUDLogicGroupResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA9D6A27E0B960038, GameType.DS)]
    public class HUDLogicGroupShowState : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EHUDShowOption ShowOption;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<ConditionResource> ShowOnCondition;
        [RTTI.Member(5, 0x30, "Logic")] public Array<EDeviceFunction> ShowOnDeviceFunctions;
        [RTTI.Member(6, 0x40, "Logic")] public bool ShowOnTouch;
        [RTTI.Member(8, 0x44, "Actions")] public float VisibilityTimer;
        [RTTI.Member(9, 0x48, "Actions")] public float FadeTime;
        [RTTI.Member(10, 0x50, "Actions")] public Ref<GraphProgramResource> OnVisibilityChangedGraph;
    }

    [RTTI.Serializable(0x7C9408EE909C2CB2, GameType.DS)]
    public class HUDLogicInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0xC46D726077653024, GameType.DS)]
    public class HUDLogicResource : Resource
    {
        [RTTI.Member(8, 0x20, "ShouldBeDisplayed")] public Array<Ref<ConditionResource>> DisplayConditions;
        [RTTI.Member(5, 0x30, "ShouldBeDisplayed")] public bool WhenAlive;
        [RTTI.Member(6, 0x31, "ShouldBeDisplayed")] public bool WhenDead;
        [RTTI.Member(7, 0x32, "ShouldBeDisplayed")] public bool InPartialHUD;
        [RTTI.Member(3, 0x38, "Elements")] public Ref<HUDElementResource> RootElement;
    }

    [RTTI.Serializable(0xB462CD8113C2EB79, GameType.DS)]
    public class HUDLogicShaderVariableAnimator : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x51287BE64230EE61, GameType.DS)]
    public class HUDLogicShaderVariableAnimatorResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(4, 0x30)] public String VariableName;
        [RTTI.Member(5, 0x38)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0xFB5CE1F4AC711C, GameType.DS)]
    public class HUDLogicSoundItem : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x18AD535CE88CCA88, GameType.DS)]
    public class HUDLogicSoundItemResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(5, 0x30, "Logic")] public Ref<SoundResource> Sound;
    }

    [RTTI.Serializable(0x5A9DEE92670294FB, GameType.DS)]
    public class HUDLogicTextFontSizer : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0xFED5B5366A3B2264, GameType.DS)]
    public class HUDLogicTextFontSizerResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(4, 0x30)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x14B28F418769FA52, GameType.DS)]
    public class HUDLogicTimeline : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x94D1A2566B45F7F5, GameType.DS)]
    public class HUDLogicTimelineItem : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x8FF6A4DE6DEEA5BD, GameType.DS)]
    public class HUDLogicTimelineItemResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<HUDElementResource> Element;
        [RTTI.Member(3, 0x28)] public float Duration;
    }

    [RTTI.Serializable(0x7714C2D3F85C27D2, GameType.DS)]
    public class HUDLogicTimelineKey : Resource
    {
        [RTTI.Member(2, 0x20)] public float StartTime;
        [RTTI.Member(3, 0x28)] public Ref<HUDLogicTimelineItemResource> Item;
    }

    [RTTI.Serializable(0x8D179BCC7FEEE19, GameType.DS)]
    public class HUDLogicTimelineResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(4, 0x30)] public Array<Ref<HUDLogicTimelineKey>> Keys;
    }

    [RTTI.Serializable(0x2AE28F357FB097A5, GameType.DS)]
    public class HUDNameComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF2B39188889F52C3, GameType.DS)]
    public class HUDNameComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xADE3AD70824D1F10, GameType.DS)]
    public class HUDNameComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(5, 0x28, "Representation")] public String PositionHelperName;
        [RTTI.Member(4, 0x30, "Representation")] public bool ShowInSequence;
        [RTTI.Member(6, 0x34, "Representation")] public float MaxFriendlyDrawDistance;
        [RTTI.Member(7, 0x38, "Representation")] public float MaxEnemyDrawDistance;
        [RTTI.Member(8, 0x3C, "Representation")] public ENameExposureType EnemyExposure;
        [RTTI.Member(9, 0x40, "Representation")] public ENameExposureType FriendlyExposure;
        [RTTI.Member(10, 0x44, "Representation")] public bool HideWhenObscured;
    }

    [RTTI.Serializable(0x3FE4F35205C2966D, GameType.DS)]
    public class HUDNotificationType : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> TitleResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LocalizedTextResource> TextResource;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<LocalizedTextResource> PromptResource;
    }

    [RTTI.Serializable(0xE8454DE462DC6B3C, GameType.DS)]
    public class HUDResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<HUDElementResource> RootElement;
        [RTTI.Member(4, 0x28, "General")] public Ref<HUDElementResource> SafeArea;
        [RTTI.Member(5, 0x30, "General")] public Array<Ref<HUDLogicResource>> Logic;
        [RTTI.Member(6, 0x40, "General")] public Ref<ButtonIconCollection> ButtonIconCollection;
        [RTTI.Member(7, 0x48, "General")] public Ref<ImageMap> TextImageMap;
        [RTTI.Member(8, 0x50, "General")] public Ref<ShaderResource> Shader;
        [RTTI.Member(9, 0x58, "General")] public Ref<ShaderResource> GlobalSamplerShader;
        [RTTI.Member(10, 0x60, "General")] public Ref<ShaderResource> BlurShader;
        [RTTI.Member(11, 0x68, "General")] public float FOV;
    }

    [RTTI.Serializable(0x963F66781535F6A6, GameType.DS)]
    public class HUDRestoreState : RTTIRefObject
    {
        [RTTI.Member(3, 0x28, "StateSaving", true)] public Array<GGUUID> HUDResources;
    }

    [RTTI.Serializable(0xC1CCDEECB0419A69, GameType.DS)]
    public class HUDShader : HUDElement
    {
    }

    [RTTI.Serializable(0x9B6F6311A521648B, GameType.DS)]
    public class HUDShaderResource : HUDElementResource
    {
        [RTTI.Member(25, 0xB0, "Shader")] public Ref<UIEffectResource> Effect;
    }

    [RTTI.Serializable(0x133683D46869731C, GameType.DS)]
    public class HUDText : HUDElement
    {
    }

    [RTTI.Serializable(0x38A2C0264157ADE5, GameType.DS)]
    public class HUDTextResource : HUDElementResource
    {
        [RTTI.Member(25, 0xB0, "Text")] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(26, 0xB8, "Text")] public WString Text;
        [RTTI.Member(27, 0xC0, "Text")] public Ref<Typeface> Typeface;
        [RTTI.Member(28, 0xC8, "Text")] public String Style;
        [RTTI.Member(29, 0xD0, "Text")] public int FontSize;
        [RTTI.Member(30, 0xD8, "Text")] public Array<HUDLanguageFontSizeOverride> FontSizeOverrides;
        [RTTI.Member(34, 0xE8, "Snap")] public EHUDTextMode Mode;
        [RTTI.Member(31, 0xF0, "Text")] public String DataBindingName;
        [RTTI.Member(35, 0xF8, "Snap")] public EHUDTextAlign Align;
        [RTTI.Member(37, 0xF9, "Shader")] public EUIGlyphShaderAnimationType GlyphAnimationType;
        [RTTI.Member(32, 0xFA, "Text")] public bool IgnoreAdditionalSize;
    }

    [RTTI.Serializable(0x11657443CC36BBCC, GameType.DS)]
    public class HUDTexturePanLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x8802C2EE6ED82D7A, GameType.DS)]
    public class HUDTexturePanLogicResource : HUDLogicResource
    {
        [RTTI.Member(10, 0x40, "Logic")] public Ref<GraphProgramResource> XDeltaProgram;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<GraphProgramResource> YDeltaProgram;
    }

    [RTTI.Serializable(0xC7AADB742A9514D7, GameType.DS)]
    public class HUDTimelineBasedLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xDF8EEE01AFFC8BF8, GameType.DS)]
    public class HUDTimelineBasedLogicResource : HUDLogicResource
    {
        [RTTI.Member(10, 0x40, "Logic")] public Ref<HUDLogicTimelineResource> AppearTimeline;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<HUDLogicTimelineResource> DisappearTimeline;
    }

    [RTTI.Serializable(0xB743D056DD8C0FAA, GameType.DS)]
    public class HUDVitalStatusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x32529F4CEC86233, GameType.DS)]
    public class HUDVitalStatusComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float DisplayTime;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LocalizedTextResource> LowAmmoMessage;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<LocalizedTextResource> NoAmmoMessage;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<LocalizedTextResource> DropOnWieldMessage;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<TagProperty> IgnoreAmmoTag;
    }

    [RTTI.Serializable(0x902E3A4D6D02C0B3, GameType.DS)]
    public class HairBundle
    {
        [RTTI.Member(0, 0x0)] public Array<HairStrand> Strands;
        [RTTI.Member(1, 0x10)] public int Material;
    }

    [RTTI.Serializable(0x88648400C9AFDC2E, GameType.DS)]
    public class HairInstance : GeometryObject
    {
        [RTTI.Member(7, 0xE0, "General")] public Ref<HairResource> Resource;
    }

    [RTTI.Serializable(0x9CC0FAD06E456315, GameType.DS)]
    public class HairMaterial
    {
        [RTTI.Member(0, 0x0)] public FRGBColor SpecularColor;
        [RTTI.Member(1, 0x10)] public Vec2 AnisoRoughnessModifier;
        [RTTI.Member(2, 0x20)] public float TangentShift;
        [RTTI.Member(3, 0x24)] public float ConeAngleMultiplier;
        [RTTI.Member(4, 0x28)] public float SpecularIntensity;
        [RTTI.Member(5, 0x2C)] public float SpecularParameter;
    }

    [RTTI.Serializable(0x85C5B969AE4DDD9B, GameType.DS)]
    public class HairModelComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDBFB7750098274D3, GameType.DS)]
    public class HairModelComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xADF5C630FC9B06C2, GameType.DS)]
    public class HairModelComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<HairResource> HairResource;
    }

    [RTTI.Serializable(0x77D40BEB6E85D157, GameType.DS)]
    public class HairModelComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDB8D6B2203079D12, GameType.DS)]
    public class HairPose
    {
        [RTTI.Member(0, 0x0)] public Array<HairBundle> Bundles;
    }

    [RTTI.Serializable(0xCF6972380898254, GameType.DS)]
    public class HairResource : MeshResourceBase
    {
        [RTTI.Member(19, 0x80, "Geometry")] public Array<HairPose> Poses;
        [RTTI.Member(15, 0x90, "Simulation")] public Ref<HairSimMaterialList> MaterialList;
        [RTTI.Member(20, 0xA0, "Geometry")] public BoundingBox3 BoundingBox;
        [RTTI.Member(18, 0xC0, "Geometry")] public Mat44 LocalMatrix;
        [RTTI.Member(7, 0x100, "General")] public bool ReduceNumVertices;
        [RTTI.Member(8, 0x104, "General")] public int NumFollowStrands;
        [RTTI.Member(9, 0x108, "General")] public float MaxFollowRadius;
        [RTTI.Member(12, 0x110, "Collision")] public Array<BoundingSphere> Spheres;
        [RTTI.Member(13, 0x120, "Collision")] public Array<Capsule> Capsules;
        [RTTI.Member(16, 0x130, "Simulation")] public HairSimulationSettings SimulationSettings;
        [RTTI.Member(21, 0x148, "Geometry")] public Array<Ref<DataBufferResource>> InitialHairPositionsDataBufferResources;
        [RTTI.Member(22, 0x158, "Geometry")] public Ref<DataBufferResource> HairStrandTypeDataBufferResource;
        [RTTI.Member(23, 0x160, "Geometry")] public Ref<DataBufferResource> FollowHairRootOffsetDataBufferResource;
        [RTTI.Member(24, 0x168, "Geometry")] public Ref<DataBufferResource> HairRestLengthDataBuffer;
        [RTTI.Member(25, 0x170, "Geometry")] public Ref<DataBufferResource> HairRefVecsInLocalFrameDataBuffer;
        [RTTI.Member(26, 0x178, "Geometry")] public Ref<DataBufferResource> GlobalRotationsDataBuffer;
        [RTTI.Member(27, 0x180, "Geometry")] public Array<HairSkinnedMeshLod> MeshLods;
        [RTTI.Member(10, 0x190, "General")] public Array<float> LODMeshDistances;
        [RTTI.Member(29, 0x1A0, "Lighting")] public DrawFlags DrawFlags;
    }

    [RTTI.Serializable(0x232362224937E3C1, GameType.DS)]
    public class HairSimMaterial
    {
        [RTTI.Member(0, 0x0)] public float Damping;
        [RTTI.Member(1, 0x4)] public float LocalStiffness;
        [RTTI.Member(2, 0x8)] public float GlobalStiffness;
        [RTTI.Member(3, 0xC)] public float GlobalMatchRange;
    }

    [RTTI.Serializable(0xE99488759AE658A2, GameType.DS)]
    public class HairSimMaterialList : CoreObject
    {
        [RTTI.Member(3, 0x20, "Materials")] public Array<HairSimMaterial> Materials;
    }

    [RTTI.Serializable(0x94C99B301B4BC83B, GameType.DS)]
    public class HairSimulationSettings
    {
        [RTTI.Member(1, 0x0, "Common")] public bool IntegrationEnabled;
        [RTTI.Member(2, 0x1, "Common")] public bool LocalConstraintsEnabled;
        [RTTI.Member(3, 0x2, "Common")] public bool LengthConstraintsEnabled;
        [RTTI.Member(4, 0x3, "Common")] public bool CollisionDetectionEnabled;
        [RTTI.Member(5, 0x4, "Common")] public bool GuidesEnabled;
        [RTTI.Member(6, 0x8, "Common")] public int NumLocalShapeIterations;
        [RTTI.Member(7, 0xC, "Common")] public int NumLengthConstraintIterations;
        [RTTI.Member(8, 0x10, "Common")] public float Gravity;
        [RTTI.Member(9, 0x14, "Common")] public float WindInfluence;
    }

    [RTTI.Serializable(0x282E4F4C1900089B, GameType.DS)]
    public class HairSkinnedMesh
    {
        [RTTI.Member(0, 0x0)] public Ref<RenderEffectResource> SkinnedRenderEffectResource;
        [RTTI.Member(1, 0x8)] public Ref<VertexArrayResource> SkinnedVertexArray;
        [RTTI.Member(2, 0x10)] public Ref<IndexArrayResource> SkinnedIndexArray;
        [RTTI.Member(3, 0x18)] public Ref<DataBufferResource> SkinnedPositionDataBufferResource;
        [RTTI.Member(4, 0x20)] public Ref<DataBufferResource> SkinnedBlendIndicesDataBufferResource;
        [RTTI.Member(5, 0x28)] public Ref<DataBufferResource> SkinnedBlendWeightsDataBufferResource;
    }

    [RTTI.Serializable(0x4D5B8F8532A613E6, GameType.DS)]
    public class HairSkinnedMeshLod
    {
        [RTTI.Member(0, 0x0)] public Array<HairSkinnedMesh> SkinnedMeshes;
    }

    [RTTI.Serializable(0xF49A88A27352C1CB, GameType.DS)]
    public class HairStrand
    {
        [RTTI.Member(0, 0x0)] public Array<Vec4> Vertices;
        [RTTI.Member(1, 0x10)] public bool IsGuide;
    }

    [RTTI.Serializable(0x5F080C7F1DAED71E, GameType.DS)]
    public class HairSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> HairSimBlendPose;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> HairSimIntegrate;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> HairSimLocalConstraints;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> HairSimLocalConstraintsWithIteration;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> HairSimCollisionTangents;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> HairSimPrepareFollowHair;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> HairSimUpdateFollowHair;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> HairSkinUpdate;
    }

    [RTTI.Serializable(0x95BE24803BCAB5FB, GameType.DS)]
    public class HandleClanInviteRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public bool Accept;
        [RTTI.Member(3, 0x28)] public String Tag;
    }

    [RTTI.Serializable(0xB44CBE69DDE55FCA, GameType.DS)]
    public class HandleParentAnimationEventComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE51D791D3AB77E07, GameType.DS)]
    public class HandleParentAnimationEventComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<ActionPerAnimationEvent> ActionsPerEvent;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<EntityAction> OnDetachFromParentAction;
    }

    [RTTI.Serializable(0x67FE2E8BFDF10486, GameType.DS)]
    public class HapticWaveResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public int OutSamples;
        [RTTI.Member(4, 0x24, "General")] public int OutSamplingRate;
        [RTTI.Member(5, 0x28, "General")] public int DataSamples;
        [RTTI.Member(6, 0x2C, "General")] public int DataSamplingRate;
        [RTTI.Member(7, 0x30, "General")] public Array<uint8> Waves;
    }

    [RTTI.Serializable(0x184C3E08F81B1FE0, GameType.DS)]
    public class HasComponentAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<EntityComponentResource> EntityComponentResource;
        [RTTI.Member(8, 0x40, "Logic")] public bool OnlyCheckType;
    }

    [RTTI.Serializable(0x30DF9E255FF30AE2, GameType.DS)]
    public class HeadGestureEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF2061B28DE42FA04, GameType.DS)]
    public class HeadGestureEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<HeadGestureSettings> HeadGestureSettings;
    }

    [RTTI.Serializable(0x437DE6B905B7A487, GameType.DS)]
    public class HeadGestureSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public AnimationVariableSettings AnimationVariableSettings;
        [RTTI.Member(4, 0x40, "Logic")] public float GestureDuration;
    }

    [RTTI.Serializable(0x89230275FD738AC8, GameType.DS)]
    public class HeadLookAtEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD58F8757D5D3963C, GameType.DS)]
    public class HeadLookAtEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<IKRotationSpeedSettings> IKRotationSpeedSettings;
    }

    [RTTI.Serializable(0x777507BCA987E072, GameType.DS)]
    public class HealEntityAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public float Amount;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<DestructibilityPart> Part;
        [RTTI.Member(6, 0x38, "Logic")] public bool ActOnCurrentPart;
    }

    [RTTI.Serializable(0xDE28B38F5839E2BB, GameType.DS)]
    public class HealOverTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x10F90B2F6E17B53D, GameType.DS)]
    public class HealOverTimeComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x25EE2A04133E6B32, GameType.DS)]
    public class HealthBarComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDAC3CAE3ED639183, GameType.DS)]
    public class HealthBarComponentDisplaySettings
    {
        [RTTI.Member(0, 0x0)] public float MaxDisplayDistance;
        [RTTI.Member(1, 0x4)] public bool DisplayOnlyWhenHostile;
        [RTTI.Member(2, 0x5)] public bool HideWhenFullHealth;
        [RTTI.Member(6, 0x6)] public bool DisplayInCombat;
        [RTTI.Member(3, 0x7)] public bool DisplayOnDamage;
        [RTTI.Member(4, 0x8)] public float DisplayOnDamageTimer;
        [RTTI.Member(5, 0xC)] public bool DisplayWhenTargeted;
        [RTTI.Member(7, 0xD)] public bool DisplayByDefault;
    }

    [RTTI.Serializable(0x4480F0BED3EF624A, GameType.DS)]
    public class HealthBarComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float FadeOutDelay;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<HUDImageResource> HealthBarImageResource;
        [RTTI.Member(6, 0x30, "VisibleLogic")] public HealthBarComponentDisplaySettings DefaultDisplaySettings;
        [RTTI.Member(7, 0x40, "VisibleLogic")] public Array<ConditionalHealthBarComponentDisplaySettings> ConditionalDisplaySettings;
    }

    [RTTI.Serializable(0x942E121C83AB12DF, GameType.DS)]
    public class HealthHUDNotificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4A00DBFB43565DD0, GameType.DS)]
    public class HealthHUDNotificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x20, "Logic")] public Ref<PlayerNotificationResource> HealedNotification;
        [RTTI.Member(3, 0x28, "Logic")] public Ref<PlayerNotificationResource> DamagedNotification;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<PlayerNotificationResource> FullHealthNotification;
    }

    [RTTI.Serializable(0xE99843BC22AB887B, GameType.DS)]
    public class HealthRegenerationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2DB81EDA1303C79F, GameType.DS)]
    public class HealthRegenerationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Threshold;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<HealthRegenerationParamsBase> DefaultRegeneration;
    }

    [RTTI.Serializable(0x72586537F9368A83, GameType.DS)]
    public class HealthRegenerationDurationParams : HealthRegenerationParamsBase
    {
        [RTTI.Member(5, 0x28, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0x12618799DF4C00AC, GameType.DS)]
    public class HealthRegenerationParams : HealthRegenerationParamsBase
    {
        [RTTI.Member(5, 0x28, "Logic")] public float InitialSpeed;
        [RTTI.Member(6, 0x2C, "Logic")] public float MaximumSpeed;
        [RTTI.Member(7, 0x30, "Logic")] public float Acceleration;
    }

    [RTTI.Serializable(0xC75A87F5B18E2CA0, GameType.DS)]
    public class HealthRegenerationParamsBase : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Delay;
    }

    [RTTI.Serializable(0x3E78A2DDBF0C5EBC, GameType.DS)]
    public class HideActorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5C27524F27A3728B, GameType.DS)]
    public class HideActorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool HideMesh;
        [RTTI.Member(10, 0x41, "Logic")] public bool DisableCollision;
        [RTTI.Member(11, 0x42, "Logic")] public bool IncludeChildEntities;
        [RTTI.Member(12, 0x43, "Logic")] public bool DisableActorSounds;
    }

    [RTTI.Serializable(0x73097B5BD3DCD77E, GameType.DS)]
    public class HideAllPlayersEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE2494BC02DBBB370, GameType.DS)]
    public class HideAllPlayersEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xC83CCF4E6B0E2FBB, GameType.DS)]
    public class HideHUDEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4DC4CC556A5F75FD, GameType.DS)]
    public class HideHUDEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Array<UUIDRef<HUDLogicResource>> ExcludeElements;
        [RTTI.Member(9, 0x40, "Logic")] public float FadeInDuration;
        [RTTI.Member(10, 0x44, "Logic")] public float FadeOutDuration;
    }

    [RTTI.Serializable(0x483B5F7193ACE9A6, GameType.DS)]
    public class HideInventoryItemsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB01C336B6C026641, GameType.DS)]
    public class HideInventoryItemsEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x675967E63C3DD918, GameType.DS)]
    public class HideMultiMeshPartEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF900D7C225AE85C4, GameType.DS)]
    public class HideMultiMeshPartEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<MultiMeshActorResource> MultiMeshActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Array<int> PartIndices;
    }

    [RTTI.Serializable(0x398D751145419A1B, GameType.DS)]
    public class HintedLightProbeCreationProperties
    {
        [RTTI.Member(0, 0x0)] public bool CreateLightProbeOnFloorBelow;
        [RTTI.Member(1, 0x4)] public float FloorLightProbeZOffset;
        [RTTI.Member(2, 0x8)] public bool CreateLightProbeOnSurface;
        [RTTI.Member(3, 0x9)] public bool CreateLightProbeOnCeilingAbove;
        [RTTI.Member(4, 0xC)] public float CeilingLightProbeZOffset;
        [RTTI.Member(5, 0x10)] public bool IgnoreValidRegsionArea;
    }

    [RTTI.Serializable(0x6ACC32B77494605B, GameType.DS)]
    public class HitLocationMapping
    {
        [RTTI.Member(0, 0x0)] public EHitLocation Source;
        [RTTI.Member(1, 0x4)] public EHitLocation Target;
    }

    [RTTI.Serializable(0xEA9C211CDDC2C3DF, GameType.DS)]
    public class HitReactionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x78EC9D3BB1CB5B3, GameType.DS)]
    public class HitReactionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<HitReactionPartResource>> Parts;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<HitReactionSeverityModifier>> DefaultModifiers;
        [RTTI.Member(5, 0x40, "Logic")] public Ref<GraphProgramResource> HitReactionSelectionProgram;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<OverrideGraphProgramResource> HitReactionSelectionOverrideProgram;
        [RTTI.Member(7, 0x50, "Logic")] public Array<Ref<HitReactionSet>> ReactionSets;
        [RTTI.Member(8, 0x60, "Logic")] public HashMap<GGUUID_GGUUID> DestructToReactionPart;
        [RTTI.Member(9, 0x80, "Logic")] public HashMap<String_GGUUID> JointNameToReactoinPart;
    }

    [RTTI.Serializable(0x35623DB9EE1AAEAA, GameType.DS)]
    public class HitReactionComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x90855BC54DE730F3, GameType.DS)]
    public class HitReactionCooldown
    {
        [RTTI.Member(1, 0x0, "Logic")] public float LockedCooldown;
        [RTTI.Member(2, 0x4, "Logic")] public float EscalationTime;
    }

    [RTTI.Serializable(0x53AC282EC20B1EA3, GameType.DS)]
    public class HitReactionCooldownResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<HitReactionCooldown> CooldownSequence;
        [RTTI.Member(4, 0x30, "Logic")] public int SharedCooldownId;
    }

    [RTTI.Serializable(0x3399ABB5DADF3C51, GameType.DS)]
    public class HitReactionDisplaySettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public FRGBAColor HUDColor;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<UITexture> UIHUDTexture;
        [RTTI.Member(5, 0x38, "Logic")] public bool OnlyShowDuration;
    }

    [RTTI.Serializable(0x894F3A7996537BB9, GameType.DS)]
    public class HitReactionPartResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<String> JointNames;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<DestructibilityPart>> DestructibilityParts;
        [RTTI.Member(5, 0x40, "Logic")] public int HitLocation;
    }

    [RTTI.Serializable(0x14A7DD1D718757B6, GameType.DS)]
    public class HitReactionQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(9, 0x78, "Logic")] public Array<GGUUID> HitReactionUUIDs;
    }

    [RTTI.Serializable(0x893FF0EEA3417BE6, GameType.DS)]
    public class HitReactionResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float ReactionLimit;
        [RTTI.Member(4, 0x24, "Logic")] public float ReactionLimitFactor;
        [RTTI.Member(5, 0x28, "Logic")] public float ReactionLimitHealthFactor;
        [RTTI.Member(6, 0x2C, "Logic")] public float DecayLimitFactor;
        [RTTI.Member(7, 0x30, "Logic")] public float ReactionThreshold;
        [RTTI.Member(9, 0x34, "Logic")] public int ReactionPriority;
        [RTTI.Member(10, 0x38, "Logic")] public float ReactionDuration;
        [RTTI.Member(11, 0x3C, "Logic")] public bool DisallowAccumulationWhileActive;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<HitReactionCooldownResource> ReactionCooldown;
        [RTTI.Member(13, 0x48, "Logic")] public float CancellationDamageThreshold;
        [RTTI.Member(14, 0x4C, "Logic")] public bool RememberReactionOnPriorityCancel;
        [RTTI.Member(8, 0x50, "Logic")] public EReactionPassThroughType ReactionPassThroughType;
        [RTTI.Member(15, 0x58, "Logic")] public Ref<GraphProgramResource> CheckAllowedGraphProgram;
        [RTTI.Member(16, 0x60, "Logic")] public Ref<OverrideGraphProgramResource> CheckAllowedGraphOverrideProgram;
        [RTTI.Member(17, 0x68, "Logic")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(18, 0x70, "Logic")] public Ref<OverrideGraphProgramResource> OverrideGraphProgram;
        [RTTI.Member(19, 0x78, "Logic")] public Ref<GraphProgramResource> StopGraphProgram;
        [RTTI.Member(20, 0x80, "Logic")] public Ref<OverrideGraphProgramResource> OverrideStopGraphProgram;
        [RTTI.Member(21, 0x88, "Logic")] public Array<Ref<DamageTypeResource>> ThresholdIgnoredDamageTypes;
        [RTTI.Member(22, 0x98, "Logic")] public bool SpawnDestructibilityDebris;
        [RTTI.Member(23, 0xA0, "Logic")] public Ref<DamageTypeResource> DebrisSpawnDamageTypeResource;
    }

    [RTTI.Serializable(0x90CE3EF834C7F824, GameType.DS)]
    public class HitReactionSeries : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB033E0A8A56475B2, GameType.DS)]
    public class HitReactionSeriesResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<DamageTypeResource>> ReactOnDamageTypeResources;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
        [RTTI.Member(5, 0x38, "Logic")] public Array<Ref<HitReactionResource>> HitReactions;
        [RTTI.Member(6, 0x48, "Logic")] public EHitReactionCycleMode HitReactionCycleMode;
        [RTTI.Member(7, 0x50, "Logic")] public Ref<HitReactionSeverityProperty> SeverityAccumulationProperty;
        [RTTI.Member(8, 0x58, "Logic")] public Array<Ref<HitReactionPartResource>> Parts;
        [RTTI.Member(9, 0x68, "Logic")] public bool IgnoreInconsequentialParts;
        [RTTI.Member(10, 0x69, "Logic")] public bool UsePartMultipliers;
        [RTTI.Member(11, 0x6C, "Logic")] public EHitReactionAccumulationType AccumulationType;
        [RTTI.Member(12, 0x70, "Logic")] public bool AllowReactionOnDeadPart;
        [RTTI.Member(13, 0x71, "Logic")] public bool AllowReactionPostMortem;
        [RTTI.Member(15, 0x78, "Representation")] public Ref<HitReactionDisplaySettingsResource> DisplaySettings;
    }

    [RTTI.Serializable(0x937C33356D7BCB78, GameType.DS)]
    public class HitReactionSeriesSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAA8861503AF3FAE3, GameType.DS)]
    public class HitReactionSet : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<HitReactionSeriesResource>> HitReactionSeries;
    }

    [RTTI.Serializable(0x57E477645A3D31B4, GameType.DS)]
    public class HitReactionSeverityModifier : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Multiplier;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<HitReactionPartResource>> ApplicableParts;
        [RTTI.Member(5, 0x38, "Logic")] public Array<Ref<DamageTypeResource>> ApplicableDamageTypeResources;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<DamageTypeGroup> ApplicableDamageTypeGroup;
        [RTTI.Member(7, 0x50, "Logic")] public float Duration;
        [RTTI.Member(8, 0x58, "Logic")] public Array<Ref<HitReactionSeriesResource>> RestrictedToSeries;
    }

    [RTTI.Serializable(0xE5E73FBF0FAD296F, GameType.DS)]
    public class HitReactionSeverityProperty : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float DecayRate;
        [RTTI.Member(4, 0x28, "Logic")] public String AccumulationShaderVariableID;
        [RTTI.Member(5, 0x30, "Logic")] public float DecayDelay;
        [RTTI.Member(6, 0x38, "Logic")] public Array<Ref<HitReactionSeverityProperty>> LinkedDecaySeverityProperties;
    }

    [RTTI.Serializable(0x229F1186FF232EA9, GameType.DS)]
    public class HitReactionsGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC5CE2625036560A, GameType.DS)]
    public class HitResponse : EntityComponent
    {
    }

    [RTTI.Serializable(0x2D45F745C1B0B2B4, GameType.DS)]
    public class HitResponseBehaviour : Resource
    {
        [RTTI.Member(3, 0x20, "Behaviour")] public HitResponseBehaviourInput Input;
        [RTTI.Member(4, 0x68, "Behaviour")] public Ref<HitResponseBehaviourOutput> Output;
    }

    [RTTI.Serializable(0x47E719BD40DEA04A, GameType.DS)]
    public class HitResponseBehaviourInput
    {
        [RTTI.Member(0, 0x0)] public bool IsLethal;
        [RTTI.Member(1, 0x1)] public bool MortallyWounded;
        [RTTI.Member(2, 0x4)] public float MinImpactSeverity;
        [RTTI.Member(3, 0x8)] public Ref<DamageTypeGroup> DamageTypeGroup;
        [RTTI.Member(4, 0x10)] public Array<EHitDirection> HitDirections;
        [RTTI.Member(5, 0x20)] public FArc HitDirectionAngle;
        [RTTI.Member(6, 0x28)] public Array<EHitLocation> HitLocations;
        [RTTI.Member(7, 0x38)] public EMountedState MountedState;
        [RTTI.Member(8, 0x3C)] public FRange HealthRange;
    }

    [RTTI.Serializable(0xF39F235F229C6AD4, GameType.DS)]
    public class HitResponseBehaviourOutput : Resource
    {
        [RTTI.Member(2, 0x20)] public EHitResponseType HitResponseType;
        [RTTI.Member(3, 0x24)] public EAnimationDamageType AnimationReactionType;
        [RTTI.Member(4, 0x28)] public Array<int> AnimationVariants;
        [RTTI.Member(5, 0x38)] public int AnimationHitStrength;
        [RTTI.Member(6, 0x3C)] public float Duration;
        [RTTI.Member(7, 0x40)] public float ImpulseFactor;
        [RTTI.Member(8, 0x44)] public float OverridingImpulse;
        [RTTI.Member(9, 0x48)] public float RotateAimSpeedFactor;
        [RTTI.Member(10, 0x4C)] public float RotateAimSpeedRecoverFactor;
        [RTTI.Member(11, 0x50)] public EPointOfAimRotation PointOfAimRotation;
        [RTTI.Member(12, 0x54)] public float FallOffRate;
        [RTTI.Member(13, 0x58)] public float KeepOutputTime;
        [RTTI.Member(14, 0x5C)] public bool AllowMoreSevereResponses;
        [RTTI.Member(15, 0x60)] public Ref<HumanoidDeadStateResource> CustomDeadStateResource;
        [RTTI.Member(16, 0x68)] public Ref<AISignalType> AISignalType;
        [RTTI.Member(17, 0x70)] public Ref<FirstPersonHitEffectsResource> FirstPersonHitEffectsResource;
        [RTTI.Member(18, 0x80)] public Ref<AttachedDamageParticlesComponentResource> AttachedParticlesResource;
        [RTTI.Member(19, 0x88)] public bool Force3rdPersonHitReaction;
        [RTTI.Member(20, 0x89)] public bool ForceStagger;
        [RTTI.Member(21, 0x8A)] public bool AlignToImpact;
    }

    [RTTI.Serializable(0xD5B223DF6B79A209, GameType.DS)]
    public class HitResponseResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<HitResponseBehaviour>> Behaviours;
        [RTTI.Member(4, 0x30, "Logic")] public float FallOffRate;
        [RTTI.Member(5, 0x34, "Logic")] public float RotateAimSpeedFallOff;
        [RTTI.Member(6, 0x38, "Logic")] public float MaxImpactSeverity;
        [RTTI.Member(7, 0x3C, "Logic")] public float MaxImpulseLimit;
        [RTTI.Member(8, 0x40, "Logic")] public float MaxRagdollError;
        [RTTI.Member(9, 0x44, "Logic")] public float MaxDistanceToCamera;
        [RTTI.Member(10, 0x48, "Logic")] public Array<DestructiblePartToHitLocationMapping> DestructiblePartToHitLocationMapping;
        [RTTI.Member(11, 0x58, "Logic")] public Array<EHitLocation> MappedHitLocations;
        [RTTI.Member(12, 0x68, "Logic")] public Ref<HumanoidDeadStateResource> DeadStateResource;
        [RTTI.Member(13, 0x70, "Logic")] public Ref<DamageTypeGroup> DisableZoomDamageTypeGroup;
        [RTTI.Member(14, 0x78, "Logic")] public float DisableZoomTime;
        [RTTI.Member(15, 0x7C, "Logic")] public float MovingThreshold;
        [RTTI.Member(16, 0x80, "Logic")] public bool UseRagdoll;
        [RTTI.Member(17, 0x88, "Logic")] public String StaggerDisabledAnimTagName;
        [RTTI.Member(18, 0x90, "Logic")] public String HitResponseDisabledAnimTagName;
        [RTTI.Member(19, 0x98, "Logic")] public Ref<DamageTypeGroup> IgnoredDamageTypes;
        [RTTI.Member(20, 0xA0, "Logic")] public Ref<DamageTypeGroup> IgnoredContinuousDamageTypesWhenDead;
        [RTTI.Member(21, 0xA8, "Logic")] public Ref<DamageTypeGroup> MeleeDamageTypes;
    }

    [RTTI.Serializable(0xED7A235CEE578748, GameType.DS)]
    public class HorseJumpResource : Resource
    {
        [RTTI.Member(3, 0x20, "Animation")] public Ref<WarpedAnimation> Animation;
        [RTTI.Member(4, 0x28, "Animation")] public Ref<WarpedAnimation> PreAnimation;
        [RTTI.Member(5, 0x30, "Animation")] public Ref<WarpedAnimation> PostAnimation;
        [RTTI.Member(13, 0x38, "Conditions")] public FRange AllowedWarpDistanceUp;
        [RTTI.Member(14, 0x40, "Conditions")] public FRange AllowedWarpDistanceForward;
        [RTTI.Member(15, 0x48, "Conditions")] public FRange AllowedWarpDistanceRight;
        [RTTI.Member(16, 0x50, "Conditions")] public int MaxPosture;
        [RTTI.Member(17, 0x54, "Conditions")] public int MinPosture;
        [RTTI.Member(18, 0x58, "Conditions")] public ERequiredJumpMovementState RequiredMovementState;
        [RTTI.Member(19, 0x5C, "Conditions")] public float CollisionRadius;
        [RTTI.Member(20, 0x60, "Conditions")] public float CollisionCapsuleLength;
        [RTTI.Member(21, 0x64, "Conditions")] public bool CheckForObstacleCollision;
        [RTTI.Member(6, 0x68, "Animation")] public Array<Vec3> Trajectory;
        [RTTI.Member(7, 0x80, "Animation")] public Vec3 TrajectoryCollisionMidPoint;
        [RTTI.Member(8, 0x90, "Animation")] public float TrajectoryCollisionMidPointTimeFactor;
        [RTTI.Member(9, 0xA0, "Animation")] public Vec3 GroundContactAtTakeOff;
        [RTTI.Member(10, 0xB0, "Animation")] public Vec3 GroundContactAtLanding;
        [RTTI.Member(11, 0xC0, "Animation")] public float EarlyJumpStartDistance;
    }

    [RTTI.Serializable(0x7D92950A81A2641F, GameType.DS)]
    public class HorseSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public EPlayerNumber RiderPlayerNumber;
    }

    [RTTI.Serializable(0x7212D015D7D991E0, GameType.DS)]
    public class HorseSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xFA7207BF03CC8086, GameType.DS)]
    public class HtnAtom
    {
    }

    [RTTI.Serializable(0x7C89783D1D589BB6, GameType.DS)]
    public class HtnFactDatabase
    {
    }

    [RTTI.Serializable(0x3AF70DD4EE2E947A, GameType.DS)]
    public class HtnSymbol
    {
    }

    [RTTI.Serializable(0x3AD2E38CFD61EE51, GameType.DS)]
    public class HtnSymbolSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x579C72C2E8B2B01C, GameType.DS)]
    public class Humanoid : ControlledEntity
    {
    }

    [RTTI.Serializable(0xF39E2C639D1A2D11, GameType.DS)]
    public class HumanoidAIFallState : HumanoidInAirState
    {
    }

    [RTTI.Serializable(0x603F85A9086ACB4D, GameType.DS)]
    public class HumanoidAIFallStateResource : HumanoidInAirStateResource
    {
    }

    [RTTI.Serializable(0xCD9A3BF7249B138C, GameType.DS)]
    public class HumanoidAIWalkState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xB6391A2CF631CC86, GameType.DS)]
    public class HumanoidAIWalkStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Posture")] public Array<HumanoidPostureToStanceCarryMapEntry> PostureToStanceCarryMap;
        [RTTI.Member(17, 0x58, "Movement")] public float SprintThreshold;
    }

    [RTTI.Serializable(0x1600B576184DA9F7, GameType.DS)]
    public class HumanoidAirControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x72B7F03B5D4BB410, GameType.DS)]
    public class HumanoidAirControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public float DetectionDurationAfterApex;
        [RTTI.Member(4, 0x24, "General")] public float TrajectorySampleTimeStep;
        [RTTI.Member(5, 0x28, "General")] public String JumpTakeOffStateName;
        [RTTI.Member(6, 0x30, "General")] public HumanoidAirControlCurvedTrajectorySettings ParkourableCurvedTrajectorySettings;
        [RTTI.Member(7, 0x4C, "General")] public HumanoidAirControlCurvedTrajectorySettings ZiplineCurvedTrajectorySettings;
        [RTTI.Member(8, 0x68, "General")] public HumanoidAirControlLinearTrajectorySettings LinearTrajectorySettings;
        [RTTI.Member(10, 0x74, "TargetScoreCalculation")] public float DistanceToInitialTrajectoryWeight;
        [RTTI.Member(11, 0x78, "TargetScoreCalculation")] public float DistanceToInitialTakeOffWeight;
        [RTTI.Member(12, 0x7C, "TargetScoreCalculation")] public float AngleBetweenTakeOffAndTargetWeight;
        [RTTI.Member(13, 0x80, "TargetScoreCalculation")] public float ScaleRatioWeight;
        [RTTI.Member(15, 0x84, "Logic")] public bool AutoSnapToTarget;
    }

    [RTTI.Serializable(0x3ED33FC4E888E1C1, GameType.DS)]
    public class HumanoidAirControlCurvedTrajectorySettings
    {
        [RTTI.Member(0, 0x0)] public FRange MaxChangeInVelocity;
        [RTTI.Member(1, 0x8)] public FRange MaxChangeInVelocitySprinting;
        [RTTI.Member(2, 0x10)] public FRange MaxDistanceBetweenOrignalTrajectoryAndTarget;
        [RTTI.Member(3, 0x18)] public float MaxChangeInTurnSpeed;
    }

    [RTTI.Serializable(0xF63554768CE24A31, GameType.DS)]
    public class HumanoidAirControlLinearTrajectorySettings
    {
        [RTTI.Member(0, 0x0)] public float MinMoveSpeed;
        [RTTI.Member(1, 0x4)] public float MaxTargetDistance;
        [RTTI.Member(2, 0x8)] public float MaxTargetTurnAngle;
    }

    [RTTI.Serializable(0xC4E3A52B7A656257, GameType.DS)]
    public class HumanoidController : Controller
    {
    }

    [RTTI.Serializable(0x8106685DB6A83DF8, GameType.DS)]
    public class HumanoidControllerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x776B85AF1E6493B7, GameType.DS)]
    public class HumanoidDeadState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x99770C561F406311, GameType.DS)]
    public class HumanoidDeadStateResource : HumanoidSubStateResource
    {
    }

    [RTTI.Serializable(0xA56834882B8FB2DA, GameType.DS)]
    public class HumanoidDismountMode : DismountMode
    {
        [RTTI.Member(9, 0x48, "Logic")] public EStance Stance;
        [RTTI.Member(10, 0x4C, "Logic")] public EHumanoidDismountMovement HumanoidDismountMovement;
        [RTTI.Member(11, 0x50, "Logic")] public EStance AnimationEndStance;
        [RTTI.Member(12, 0x54, "Logic")] public bool HasCollision;
    }

    [RTTI.Serializable(0x192E29BD0F25B871, GameType.DS)]
    public class HumanoidInAirState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x69A2AEBE4F18000A, GameType.DS)]
    public class HumanoidInAirStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Jumping")] public Array<int> JumpAnimationVariantWeights;
        [RTTI.Member(16, 0x58, "Jumping")] public bool AllowDiveIntoWaterOnJump;
        [RTTI.Member(18, 0x60, "Turning")] public Ref<CurveResource> CombatTurnSpeedByVelocityCurve;
        [RTTI.Member(42, 0x68, "Animation", true)] public String JumpAnimTagName;
        [RTTI.Member(39, 0x70, "Private")] public AnimationTagID JumpAnimTag;
        [RTTI.Member(43, 0x78, "Animation", true)] public String StuckToWallAnimTagName;
        [RTTI.Member(40, 0x80, "Private")] public AnimationTagID StuckToWallAnimTag;
        [RTTI.Member(20, 0x84, "Smoothing")] public float SmoothTimeMovementSpeedIncreasing;
        [RTTI.Member(21, 0x88, "Smoothing")] public float SmoothTimeMovementSpeedDecreasing;
        [RTTI.Member(23, 0x8C, "AirDodge")] public float MinAirDodgeSpeed;
        [RTTI.Member(25, 0x90, "LowGravity")] public float LowGravityOverride;
        [RTTI.Member(26, 0x94, "LowGravity")] public float LowGravitySmoothOutDuration;
        [RTTI.Member(44, 0x98, "Animation")] public String LowGravityFactorAnimVarName;
        [RTTI.Member(28, 0xA0, "WallSlide")] public Vec3 WallSlideHandsCollisionProbeStartOffset;
        [RTTI.Member(30, 0xB0, "WallSlide")] public Vec3 WallSlideFeetCollisionProbeStartOffset;
        [RTTI.Member(29, 0xC0, "WallSlide")] public Vec3 WallSlideHandsCollisionProbeEndOffset;
        [RTTI.Member(31, 0xD0, "WallSlide")] public Vec3 WallSlideFeetCollisionProbeEndOffset;
        [RTTI.Member(32, 0xE0, "WallSlide")] public float WallSlideCollisionProbeRadius;
        [RTTI.Member(33, 0xE4, "WallSlide")] public float WallSlideGravity;
        [RTTI.Member(34, 0xE8, "WallSlide")] public float WallSlideDuration;
        [RTTI.Member(35, 0xEC, "WallSlide")] public float WallSlideMinTakeOffTime;
        [RTTI.Member(36, 0xF0, "WallSlide")] public float WallSlideTakeOffMinAngle;
        [RTTI.Member(37, 0xF4, "WallSlide")] public float WallSlideTakeOffMaxAngle;
    }

    [RTTI.Serializable(0xF514CC8F01E55FBE, GameType.DS)]
    public class HumanoidJoystickWalkState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x38586CF205461A20, GameType.DS)]
    public class HumanoidJoystickWalkStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(17, 0x48, "Logic")] public Ref<CurveResource> WalkTurnSpeedByVelocityCurve;
        [RTTI.Member(18, 0x50, "Logic")] public Ref<CurveResource> CrouchTurnSpeedByVelocityCurve;
        [RTTI.Member(19, 0x58, "Logic")] public Ref<CurveResource> CombatTurnSpeedByVelocityCurve;
        [RTTI.Member(20, 0x60, "Logic")] public Ref<CurveResource> MovementDirectionBlendStrengthCurve;
        [RTTI.Member(21, 0x68, "Logic")] public Ref<CurveResource> TorsoAngleBlendStrengthCurve;
        [RTTI.Member(22, 0x70, "Logic")] public Ref<CurveResource> BankTurnVelocityCurve;
        [RTTI.Member(23, 0x78, "Logic")] public Ref<CurveResource> BankSpeedFactorCurve;
        [RTTI.Member(24, 0x80, "Logic")] public float BankValueGain;
        [RTTI.Member(15, 0x84, "Logic")] public FRange SprintForwardAngularRange;
        [RTTI.Member(16, 0x8C, "Logic")] public FRange WalkForwardAngularRange;
        [RTTI.Member(31, 0x94, "Aim")] public FRange AimRotationComfortRange;
        [RTTI.Member(50, 0xA0, "Animation", true)] public String IdleAnimTagName;
        [RTTI.Member(34, 0xA8, "Private")] public AnimationTagID IdleAnimTag;
        [RTTI.Member(51, 0xB0, "Animation", true)] public String StartAnimTagName;
        [RTTI.Member(35, 0xB8, "Private")] public AnimationTagID StartAnimTag;
        [RTTI.Member(52, 0xC0, "Animation", true)] public String StartDirectionAnimTagName;
        [RTTI.Member(36, 0xC8, "Private")] public AnimationTagID StartDirectionAnimTag;
        [RTTI.Member(53, 0xD0, "Animation", true)] public String CycleAnimTagName;
        [RTTI.Member(37, 0xD8, "Private")] public AnimationTagID CycleAnimTag;
        [RTTI.Member(54, 0xE0, "Animation", true)] public String SprintAnimTagName;
        [RTTI.Member(38, 0xE8, "Private")] public AnimationTagID SprintAnimTag;
        [RTTI.Member(55, 0xF0, "Animation", true)] public String StopAnimTagName;
        [RTTI.Member(39, 0xF8, "Private")] public AnimationTagID StopAnimTag;
        [RTTI.Member(56, 0x100, "Animation", true)] public String CrouchAnimTagName;
        [RTTI.Member(40, 0x108, "Private")] public AnimationTagID CrouchAnimTag;
        [RTTI.Member(57, 0x110, "Animation", true)] public String CombatAnimTagName;
        [RTTI.Member(41, 0x118, "Private")] public AnimationTagID CombatAnimTag;
        [RTTI.Member(32, 0x120, "Aim", true)] public String IsAimedAnimTagName;
        [RTTI.Member(42, 0x128, "Private")] public AnimationTagID IsAimedAnimTag;
        [RTTI.Member(58, 0x130, "Animation", true)] public String TurningAnimTagName;
        [RTTI.Member(43, 0x138, "Private")] public AnimationTagID TurningAnimTag;
        [RTTI.Member(59, 0x140, "Animation", true)] public String Turn180AnimTagName;
        [RTTI.Member(44, 0x148, "Private")] public AnimationTagID Turn180AnimTag;
        [RTTI.Member(60, 0x150, "Animation", true)] public String SlidingAnimTagName;
        [RTTI.Member(45, 0x158, "Private")] public AnimationTagID SlidingAnimTag;
        [RTTI.Member(61, 0x160, "Animation", true)] public String TacticalToCombatAnimTagName;
        [RTTI.Member(46, 0x168, "Private")] public AnimationTagID TacticalToCombatAnimTag;
        [RTTI.Member(62, 0x170, "Animation", true)] public String DefaultStandIdleAnimStateName;
        [RTTI.Member(47, 0x178, "Private")] public AnimationNodeID DefaultStandIdleAnimStateNode;
        [RTTI.Member(63, 0x180, "Animation", true)] public String DefaultCrouchIdleAnimStateName;
        [RTTI.Member(48, 0x188, "Private")] public AnimationNodeID DefaultCrouchIdleAnimStateNode;
        [RTTI.Member(25, 0x18C, "Logic")] public float StartSmoothTime;
        [RTTI.Member(26, 0x190, "Logic")] public float StopSmoothTime;
        [RTTI.Member(27, 0x194, "Logic")] public float StartToMoveSmoothTime;
        [RTTI.Member(28, 0x198, "Logic")] public float TurnspeedWhileStarting;
        [RTTI.Member(29, 0x19C, "Logic")] public float MaxCrouchWaterHeight;
        [RTTI.Member(65, 0x1A0, "BumpIntoEnvironment")] public float BumpMaxAngleBetweenNormalAndInput;
        [RTTI.Member(66, 0x1A4, "BumpIntoEnvironment")] public float BumpMinTimeToStopMove;
        [RTTI.Member(67, 0x1A8, "BumpIntoEnvironment")] public float BumpMinTimeDiffBetweenActualAndDesiredVelocity;
        [RTTI.Member(68, 0x1AC, "BumpIntoEnvironment")] public float BumpVerticalEpsilon;
        [RTTI.Member(69, 0x1B0, "BumpIntoEnvironment")] public float BumpForwardDistance;
        [RTTI.Member(70, 0x1B4, "BumpIntoEnvironment")] public float SlideMinDiffBetweenActualAndDesiredVelocity;
        [RTTI.Member(71, 0x1B8, "BumpIntoEnvironment")] public float SlideMinTimeDiffBetweenActualAndDesiredVelocity;
        [RTTI.Member(72, 0x1BC, "BumpIntoEnvironment")] public float SlideMinHeight;
    }

    [RTTI.Serializable(0x3842CAAF241030B8, GameType.DS)]
    public class HumanoidKnockDownState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xC411BD8C773A9A2E, GameType.DS)]
    public class HumanoidKnockDownStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Logic")] public bool AttachGunBoneToHandBone;
        [RTTI.Member(16, 0x50, "Logic")] public Ref<DamageTypeResource> FallingDamageTypeResource;
        [RTTI.Member(19, 0x58, "Animation", true)] public String FallingOverAnimTagName;
        [RTTI.Member(25, 0x60, "Private")] public AnimationTagID FallingOverAnimTag;
        [RTTI.Member(20, 0x68, "Animation", true)] public String GetUpAnimTagName;
        [RTTI.Member(26, 0x70, "Private")] public AnimationTagID GetUpAnimTag;
        [RTTI.Member(21, 0x78, "Animation", true)] public String WoundedAnimTagName;
        [RTTI.Member(27, 0x80, "Private")] public AnimationTagID WoundedAnimTag;
        [RTTI.Member(22, 0x88, "Animation")] public String GetUpMotionTableEntryStateName;
        [RTTI.Member(23, 0x90, "Animation")] public String GetUpSwimMotionTableEntryStateName;
        [RTTI.Member(17, 0x98, "Logic")] public Ref<FloatFact> KnockDownDurationTimeLeftFact;
    }

    [RTTI.Serializable(0xF9EFF3DD15976A44, GameType.DS)]
    public class HumanoidMountMode : MountMode
    {
        [RTTI.Member(7, 0x40, "Logic")] public EStance Stance;
        [RTTI.Member(8, 0x44, "Logic")] public bool HasCollisionDuringMounting;
        [RTTI.Member(9, 0x45, "Logic")] public bool HasCollisionDuringMounted;
    }

    [RTTI.Serializable(0x43975C1049597FE6, GameType.DS)]
    public class HumanoidMountState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xC1799845077EE885, GameType.DS)]
    public class HumanoidMountStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Logic")] public Ref<TagProperty> DisallowWeaponUseProperty;
    }

    [RTTI.Serializable(0xC54FA6FFB59EB2FE, GameType.DS)]
    public class HumanoidMover : Mover
    {
    }

    [RTTI.Serializable(0x545D9089FDA9C324, GameType.DS)]
    public class HumanoidMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "Logic")] public float MaxFallSpeed;
        [RTTI.Member(8, 0x2C, "Logic")] public float LeavingOnGroundStateDelay;
        [RTTI.Member(9, 0x30, "Logic")] public bool CompensateForwardVelocityOnUphillSlope;
    }

    [RTTI.Serializable(0x37D62C69E9A2B2F5, GameType.DS)]
    public class HumanoidMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4C0CDB3C55B7EAB8, GameType.DS)]
    public class HumanoidParkourBoostedJumpState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x75B05D00019B7BC8, GameType.DS)]
    public class HumanoidParkourBoostedJumpStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(22, 0x48, "Animation", true)] public String JumpAnimTagName;
        [RTTI.Member(20, 0x50, "Private")] public AnimationTagID JumpAnimTag;
        [RTTI.Member(15, 0x54, "Logic")] public float NoAttachmentDuration;
        [RTTI.Member(16, 0x58, "Logic")] public float LocomotionVelocityScaleFactor;
        [RTTI.Member(18, 0x60, "Logic")] public Ref<CurveResource> SidewaysAirFrictionOverTimeCurve;
        [RTTI.Member(17, 0x68, "Logic")] public Ref<CurveResource> ForwardSpeedOverTimeCurve;
    }

    [RTTI.Serializable(0x795B11C7B02AEB8A, GameType.DS)]
    public class HumanoidParkourDismountMode : DismountMode
    {
    }

    [RTTI.Serializable(0x6DD8A211E9C57FD8, GameType.DS)]
    public class HumanoidParkourState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x3B124A45D98FB075, GameType.DS)]
    public class HumanoidParkourStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Logic")] public String PerchedWalkStateName;
        [RTTI.Member(18, 0x50, "Animation", true)] public String TurningTag;
        [RTTI.Member(19, 0x58, "Animation")] public AnimationTagID TurningTagID;
        [RTTI.Member(20, 0x60, "Animation", true)] public String ParkouringTag;
        [RTTI.Member(21, 0x68, "Animation")] public AnimationTagID ParkouringTagID;
        [RTTI.Member(16, 0x6C, "Logic")] public float AttachmentCoolDownDuration;
    }

    [RTTI.Serializable(0x191F0BC04B54CED, GameType.DS)]
    public class HumanoidParkourTransition : ParkourTransition
    {
        [RTTI.Member(22, 0xE0, "Conditions")] public FRange AllowedWarpDistanceUp;
        [RTTI.Member(23, 0xE8, "Conditions")] public FRange AllowedWarpDistanceForward;
        [RTTI.Member(24, 0xF0, "Conditions")] public FRange AllowedWarpDistanceRight;
        [RTTI.Member(25, 0xF8, "Conditions")] public FRange AllowedWarpAngleDifference;
        [RTTI.Member(26, 0x100, "Conditions")] public float AllowedWarpDisplacement;
        [RTTI.Member(28, 0x108, "Animation")] public Ref<WarpedAnimation> WarpedAnimation;
        [RTTI.Member(29, 0x110, "Animation")] public Ref<WarpedAnimation> WarpedAnimationAlternative;
        [RTTI.Member(30, 0x118, "Animation")] public Ref<WarpedAnimation> UnchainedPostAnimation;
        [RTTI.Member(31, 0x120, "Animation")] public Ref<WarpedAnimation> ChainedJumpPostAnimation;
        [RTTI.Member(34, 0x128, "Debugging")] public bool ShowInJumpTransitionsWindow;
        [RTTI.Member(32, 0x129, "Animation")] public bool IgnorePostDisplacementEventMotionForMetrics;
    }

    [RTTI.Serializable(0x6C110924E9910EAF, GameType.DS)]
    public class HumanoidPostureToStanceCarryMapEntry
    {
        [RTTI.Member(0, 0x0)] public String PostureID;
        [RTTI.Member(1, 0x10)] public EStance Stance;
        [RTTI.Member(2, 0x14)] public ECarryModes CarryMode;
    }

    [RTTI.Serializable(0x72D86CBDB82EF073, GameType.DS)]
    public class HumanoidRep : EntityRep
    {
    }

    [RTTI.Serializable(0x59F9C75129066DB7, GameType.DS)]
    public class HumanoidResource : ControlledEntityResource
    {
        [RTTI.Member(39, 0x130, "Logic")] public String HeadBone;
        [RTTI.Member(40, 0x138, "Logic")] public String ChestBone;
        [RTTI.Member(41, 0x140, "Logic")] public String PelvisBone;
        [RTTI.Member(42, 0x148, "Logic")] public String WalkLeftBone;
        [RTTI.Member(43, 0x150, "Logic")] public String WalkRightBone;
        [RTTI.Member(44, 0x158, "Logic")] public String SlideFootBone;
        [RTTI.Member(45, 0x160, "Logic")] public Ref<DestructibilityPart> HeadPart;
        [RTTI.Member(46, 0x168, "Logic")] public bool IsHeadshotAllowed;
        [RTTI.Member(47, 0x16C, "Logic")] public float HeadshotDamageModifier;
        [RTTI.Member(48, 0x170, "Logic")] public float HeadshotMaxSpread;
        [RTTI.Member(49, 0x178, "Logic")] public Array<Ref<DestructibilityPart>> LegParts;
        [RTTI.Member(77, 0x188, "Logic")] public float MinimalStaminaRequiredForSprint;
        [RTTI.Member(78, 0x18C, "Logic")] public float StaminaIncrease;
        [RTTI.Member(79, 0x190, "Logic")] public float StaminaDecreaseSprint;
        [RTTI.Member(80, 0x194, "Logic")] public float SprintMaxWaterDepth;
        [RTTI.Member(81, 0x198, "Logic")] public float JumpStaminaCost;
        [RTTI.Member(82, 0x19C, "Logic")] public float JumpStaminaNeeded;
        [RTTI.Member(83, 0x1A0, "Logic")] public float JumpOnForce;
        [RTTI.Member(84, 0x1A4, "Logic")] public float JumpOnLaunchTime;
        [RTTI.Member(85, 0x1A8, "Logic")] public float JumpMinForwardSpeed;
        [RTTI.Member(86, 0x1AC, "Logic")] public float JumpMaxWaterDepth;
        [RTTI.Member(87, 0x1B0, "Logic")] public bool CanFireWhileJumping;
        [RTTI.Member(88, 0x1B4, "Logic")] public float DodgeStaminaCost;
        [RTTI.Member(89, 0x1B8, "Logic")] public Ref<StaminaUsageType> SprintStaminaUsageType;
        [RTTI.Member(90, 0x1C0, "Logic")] public Ref<StaminaUsageType> JumpStaminaUsageType;
        [RTTI.Member(91, 0x1C8, "Logic")] public Ref<StaminaUsageType> DodgeStaminaUsageType;
        [RTTI.Member(92, 0x1D0, "Logic")] public float LandDuration;
        [RTTI.Member(50, 0x1D4, "Logic")] public float MaxWalkSlope;
        [RTTI.Member(51, 0x1D8, "Logic")] public float MaxStepHeight;
        [RTTI.Member(52, 0x1DC, "Logic")] public float AimNoiseFactor;
        [RTTI.Member(53, 0x1E0, "Logic")] public float MaxAngleBetweenGunAndAim;
        [RTTI.Member(54, 0x1E4, "Logic")] public float MovementAcceleration;
        [RTTI.Member(55, 0x1E8, "Logic")] public float MovementDeceleration;
        [RTTI.Member(56, 0x1EC, "Logic")] public float HeadingAcceleration;
        [RTTI.Member(74, 0x1F0, "Logic")] public float SlideToMountPositionSpeed;
        [RTTI.Member(57, 0x200, "Logic")] public Vec3 StandingEyePosition;
        [RTTI.Member(58, 0x210, "Logic")] public Vec3 CrouchEyePosition;
        [RTTI.Member(59, 0x220, "Logic")] public Vec3 StandAimOffset;
        [RTTI.Member(60, 0x230, "Logic")] public Vec3 CrouchAimOffset;
        [RTTI.Member(61, 0x240, "Logic")] public Ref<PhysicsCharacterMoverResource> PhysicsCharacterMoverResource;
        [RTTI.Member(62, 0x248, "Logic")] public float StanceSwitchDurationDown;
        [RTTI.Member(63, 0x24C, "Logic")] public float StanceSwitchDurationUp;
        [RTTI.Member(93, 0x250, "Logic")] public float TurnSpeed;
        [RTTI.Member(94, 0x254, "Logic")] public float StandingSprintSpeed;
        [RTTI.Member(95, 0x258, "Logic")] public float StandingForwardSpeed;
        [RTTI.Member(96, 0x25C, "Logic")] public float StandingBackwardSpeed;
        [RTTI.Member(97, 0x260, "Logic")] public float StandingStrafeSpeed;
        [RTTI.Member(98, 0x264, "Logic")] public float CrouchForwardSpeed;
        [RTTI.Member(99, 0x268, "Logic")] public float CrouchBackwardSpeed;
        [RTTI.Member(100, 0x26C, "Logic")] public float CrouchStrafeSpeed;
        [RTTI.Member(101, 0x270, "Logic")] public float CombatStandingForwardSpeed;
        [RTTI.Member(102, 0x274, "Logic")] public float CombatStandingBackwardSpeed;
        [RTTI.Member(103, 0x278, "Logic")] public float CombatStandingStrafeSpeed;
        [RTTI.Member(104, 0x27C, "Logic")] public float CombatCrouchForwardSpeed;
        [RTTI.Member(105, 0x280, "Logic")] public float CombatCrouchBackwardSpeed;
        [RTTI.Member(106, 0x284, "Logic")] public float CombatCrouchStrafeSpeed;
        [RTTI.Member(107, 0x288, "Logic")] public float MaxForwardSpeed;
        [RTTI.Member(108, 0x28C, "Logic")] public float MaxBackwardSpeed;
        [RTTI.Member(109, 0x290, "Logic")] public float MaxStrafeSpeed;
        [RTTI.Member(110, 0x294, "Logic")] public float MaxSprintSpeed;
        [RTTI.Member(111, 0x298, "Logic")] public float MinStandingSpeedPlayer;
        [RTTI.Member(112, 0x29C, "Logic")] public float MinCrouchSpeedPlayer;
        [RTTI.Member(113, 0x2A0, "Logic")] public bool CanWalkAndAim;
        [RTTI.Member(115, 0x2B0, "Logic")] public BoundingBox3 CrouchUseBox;
        [RTTI.Member(116, 0x2D0, "Logic")] public float PickupUseAngle;
        [RTTI.Member(114, 0x2D8, "Logic")] public Array<Ref<HumanoidSubStateResource>> SubStates;
        [RTTI.Member(127, 0x2E8, "MovementInterpolation")] public float HorizontalCatchUpGain;
        [RTTI.Member(128, 0x2EC, "MovementInterpolation")] public float MaxCatchUpHorizontalDisplacement;
        [RTTI.Member(129, 0x2F0, "MovementInterpolation")] public float VerticalGain;
        [RTTI.Member(131, 0x2F8, "Representation")] public Ref<SoundResource> GearMovementSound;
        [RTTI.Member(132, 0x300, "Representation")] public Ref<MaterialTypeResource> FootstepDownMaterialTypeResource;
        [RTTI.Member(133, 0x308, "Representation")] public Ref<MaterialTypeResource> FootstepUpMaterialTypeResource;
        [RTTI.Member(134, 0x310, "Representation")] public float SlowFootstepVelocityThreshold;
        [RTTI.Member(135, 0x318, "Representation")] public Ref<MaterialTypeResource> SlowFootstepDownMaterialTypeResource;
        [RTTI.Member(136, 0x320, "Representation")] public Ref<MaterialTypeResource> SlowFootstepUpMaterialTypeResource;
        [RTTI.Member(137, 0x328, "Representation")] public Ref<MaterialTypeResource> SprintFootstepDownMaterialTypeResource;
        [RTTI.Member(138, 0x330, "Representation")] public Ref<MaterialTypeResource> SprintFootstepUpMaterialTypeResource;
        [RTTI.Member(139, 0x338, "Representation")] public Ref<MaterialTypeResource> CrouchFootstepDownMaterialTypeResource;
        [RTTI.Member(140, 0x340, "Representation")] public Ref<MaterialTypeResource> CrouchFootstepUpMaterialTypeResource;
        [RTTI.Member(141, 0x348, "Representation")] public Ref<MaterialTypeResource> FootstepDragMaterialTypeResource;
        [RTTI.Member(142, 0x350, "Representation")] public Ref<MaterialTypeResource> JumpMaterialTypeResource;
        [RTTI.Member(143, 0x358, "Representation")] public Ref<MaterialTypeResource> LandMaterialTypeResource;
        [RTTI.Member(147, 0x360, "Representation")] public Ref<MaterialTypeResource> SilentFootstepDownMaterialTypeResource;
        [RTTI.Member(148, 0x368, "Representation")] public Ref<MaterialTypeResource> SilentFootstepUpMaterialTypeResource;
        [RTTI.Member(64, 0x370, "Logic")] public Ref<CurveResource> ImpactDamagePerMeterPerSecondCurve;
        [RTTI.Member(65, 0x378, "Logic")] public Ref<CurveResource> ImpactDamagePerFallingHeightCurve;
        [RTTI.Member(66, 0x380, "Logic")] public float MinDamageLinearVelocity;
        [RTTI.Member(67, 0x384, "Logic")] public float MinDamageAngularVelocity;
        [RTTI.Member(68, 0x388, "Logic")] public float MinDamageMass;
        [RTTI.Member(69, 0x38C, "Logic")] public float ImpactImpulseHumanoidScale;
        [RTTI.Member(70, 0x390, "Logic")] public float DamageFactor;
        [RTTI.Member(71, 0x394, "Logic")] public float MinTimeForWalkingDamage;
        [RTTI.Member(72, 0x398, "Logic")] public float WalkingDamageFactor;
        [RTTI.Member(73, 0x39C, "Logic")] public float WalkingDamageEndDelay;
        [RTTI.Member(144, 0x3A0, "Representation")] public Ref<AISignalType> DeathSignalType;
        [RTTI.Member(145, 0x3A8, "Representation")] public Ref<AISignalType> HeadshotSignalType;
        [RTTI.Member(150, 0x3B0, "AI")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(151, 0x3B8, "AI")] public Ref<GraphProgramResource> VisualStimulusSelectorProgramResource;
        [RTTI.Member(152, 0x3C0, "AI")] public Ref<GraphProgramResource> FootstepStimulusSelectorProgramResource;
        [RTTI.Member(153, 0x3C8, "AI")] public Ref<AIAuralStimulusResource> FootStepSoundStimulus;
        [RTTI.Member(154, 0x3D0, "AI")] public float FootStepSoundStimulusCrouchModifier;
        [RTTI.Member(155, 0x3D4, "AI")] public float QuietFootStepSoundStimulusModifier;
        [RTTI.Member(156, 0x3D8, "AI")] public float FootstepMinSpeed;
        [RTTI.Member(157, 0x3DC, "AI")] public float FootstepMaxSpeed;
        [RTTI.Member(158, 0x3E0, "AI")] public Ref<AIAuralStimulusResource> HitScreamSoundStimulus;
        [RTTI.Member(159, 0x3E8, "AI")] public Ref<AIAuralStimulusResource> DeathScreamSoundStimulus;
        [RTTI.Member(146, 0x3F0, "Representation")] public Ref<FirstPersonHitEffectsResource> FirstPersonBulletWhizzEffects;
        [RTTI.Member(160, 0x3F8, "AI")] public EStance LowestAllowedStance;
        [RTTI.Member(162, 0x400, "HitResponse")] public Ref<HitResponseResource> HitResponseResource;
        [RTTI.Member(163, 0x408, "HitResponse")] public Array<DestructiblePartToHitLocationMapping> DestructiblePartToHitLocationMapping;
        [RTTI.Member(164, 0x418, "HitResponse")] public String DeadAnimTagName;
        [RTTI.Member(117, 0x420, "Logic")] public Ref<DamageTypeResource> SlideDamageTypeResource;
        [RTTI.Member(118, 0x428, "Logic")] public float SlideDamage;
        [RTTI.Member(119, 0x42C, "Logic")] public float SlideImpulse;
        [RTTI.Member(120, 0x430, "Logic")] public float SlideImpulseHumanoidFactor;
        [RTTI.Member(121, 0x434, "Logic")] public float SlideImpactSeverity;
        [RTTI.Member(122, 0x438, "Logic")] public float MaxSlideIncline;
        [RTTI.Member(123, 0x43C, "Logic")] public float GravityOverride;
        [RTTI.Member(75, 0x440, "Logic")] public Ref<DamageTypeResource> ImpactDamageTypeResource;
        [RTTI.Member(76, 0x448, "Logic")] public float MinSpeedForImpact;
        [RTTI.Member(166, 0x44C, "Network")] public bool StopReplicationWhenDead;
        [RTTI.Member(168, 0x450, "Jumping")] public float PlayerMaxAirTurnAngleInDegrees;
        [RTTI.Member(169, 0x458, "Jumping")] public Ref<CurveResource> PlayerMaxTurnSpeedWhileJumpingCurve;
        [RTTI.Member(170, 0x460, "Jumping")] public Ref<CurveResource> PlayerMaxTurnSpeedWhileJumpingHeadFirstCurve;
        [RTTI.Member(171, 0x468, "Jumping")] public bool PlayerUseAnimationDrivenJumping;
        [RTTI.Member(172, 0x469, "Jumping")] public bool PlayerKeepForwardMomentum;
        [RTTI.Member(173, 0x46C, "Jumping")] public float PlayerAirFriction;
        [RTTI.Member(174, 0x470, "Jumping")] public float PlayerAirBrakeAngleInDegrees;
        [RTTI.Member(175, 0x474, "Jumping")] public float PlayerAirBrakeFactor;
        [RTTI.Member(176, 0x478, "Jumping")] public float PlayerMinTakeOffForwardSpeed;
        [RTTI.Member(124, 0x47C, "Logic")] public float WaterDepthForWalkingToSwimmingTransition;
        [RTTI.Member(125, 0x480, "Logic")] public float WaterDepthForSwimmingToWalkingTransition;
    }

    [RTTI.Serializable(0x828BEFCB413545EF, GameType.DS)]
    public class HumanoidResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1A3C50DCBCBEFF1C, GameType.DS)]
    public class HumanoidRopePullingState : HumanoidJoystickWalkState
    {
    }

    [RTTI.Serializable(0x92C5862AEB39538B, GameType.DS)]
    public class HumanoidRopePullingStateResource : HumanoidJoystickWalkStateResource
    {
    }

    [RTTI.Serializable(0x5BD511F4052A10, GameType.DS)]
    public class HumanoidRunningSlideState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xA6E4FBDCD9C42AB6, GameType.DS)]
    public class HumanoidRunningSlideStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Logic")] public Ref<CurveResource> TurnSpeedByVelocityCurve;
        [RTTI.Member(16, 0x50, "Logic")] public Ref<CurveResource> CombatTurnSpeedByVelocityCurve;
        [RTTI.Member(17, 0x58, "Logic")] public float MinSlideSpeed;
        [RTTI.Member(18, 0x5C, "Logic")] public float InitialSlideSpeed;
        [RTTI.Member(20, 0x60, "Logic")] public Ref<CurveResource> DecelerationCurve;
        [RTTI.Member(19, 0x68, "Logic")] public float AbortSpeedThreshold;
        [RTTI.Member(21, 0x6C, "Logic")] public bool UseAnimationDrivenDeceleration;
        [RTTI.Member(22, 0x70, "Logic", true)] public String SlidingAnimTagName;
        [RTTI.Member(30, 0x78, "Private")] public AnimationTagID SlidingAnimTag;
        [RTTI.Member(23, 0x80, "Logic")] public Ref<CurveResource> SlideBrakeCurve;
        [RTTI.Member(24, 0x88, "Logic")] public float SlideBrakeAngle;
        [RTTI.Member(25, 0x90, "Logic")] public Ref<CurveResource> BankTurnVelocityCurve;
        [RTTI.Member(26, 0x98, "Logic")] public Ref<CurveResource> BankSpeedFactorCurve;
        [RTTI.Member(27, 0xA0, "Logic")] public float BankValueGain;
        [RTTI.Member(28, 0xA4, "Logic")] public FRange ValidAimRange;
    }

    [RTTI.Serializable(0xDD82966BFC674713, GameType.DS)]
    public class HumanoidSlideState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xB6938E59D2E21F24, GameType.DS)]
    public class HumanoidSlideStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(22, 0x48, "Logic")] public Ref<CurveResource> WalkTurnSpeedByVelocityCurve;
        [RTTI.Member(23, 0x50, "Logic")] public Ref<CurveResource> CrouchTurnSpeedByVelocityCurve;
        [RTTI.Member(24, 0x58, "Logic")] public Ref<CurveResource> AccelerationBySlopeAngelCurve;
        [RTTI.Member(15, 0x60, "Logic")] public float ActivateSlopeAngle;
        [RTTI.Member(16, 0x64, "Logic")] public float DeactivateSlopeAngle;
        [RTTI.Member(17, 0x68, "Logic")] public float MinSpeed;
        [RTTI.Member(18, 0x6C, "Logic")] public float MaxSpeed;
        [RTTI.Member(19, 0x70, "Logic")] public float ActivateDuration;
        [RTTI.Member(20, 0x74, "Logic")] public float DeactivateDuration;
        [RTTI.Member(21, 0x78, "Logic")] public float SpeedBlendFactor;
        [RTTI.Member(25, 0x7C, "Logic")] public float CollisionOffsetForward;
        [RTTI.Member(26, 0x80, "Logic")] public float CollisionRadius;
        [RTTI.Member(27, 0x88, "Logic")] public Array<EPhysicsCollisionLayerGame> DisallowedCollisionLayers;
        [RTTI.Member(29, 0x98, "Actions")] public bool AllowCloseCombat;
        [RTTI.Member(30, 0x99, "Actions")] public bool AllowDodge;
    }

    [RTTI.Serializable(0x8FC9159BDA974B5A, GameType.DS)]
    public class HumanoidSpreadSettings : SpreadSettings
    {
        [RTTI.Member(10, 0x48, "Spread")] public Ref<CurveResource> MoveSpeedSpreadCurve;
        [RTTI.Member(11, 0x50, "Spread")] public Ref<CurveResource> ZoomedMoveSpeedSpreadCurve;
        [RTTI.Member(12, 0x58, "Spread")] public Ref<CurveResource> LookSpeedSpreadCurve;
        [RTTI.Member(9, 0x60, "Spread")] public Ref<CurveResource> ZoomOverTimeSpreadCurve;
    }

    [RTTI.Serializable(0x34A09451DFFC52F0, GameType.DS)]
    public class HumanoidStaggerState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x6C615B28DEB9C585, GameType.DS)]
    public class HumanoidStaggerStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Logic")] public Array<String> AnimationStateNames;
    }

    [RTTI.Serializable(0xD1A5E70A9F7D3BDF, GameType.DS)]
    public class HumanoidSubState : CoreObject
    {
    }

    [RTTI.Serializable(0x314A12BE35F66238, GameType.DS)]
    public class HumanoidSubStateResource : Resource
    {
        [RTTI.Member(4, 0x20, "Logic")] public bool SupportsStandIdle;
        [RTTI.Member(5, 0x21, "Logic")] public bool SupportsStandTactical;
        [RTTI.Member(6, 0x22, "Logic")] public bool SupportsStandCombat;
        [RTTI.Member(7, 0x23, "Logic")] public bool SupportsCrouchIdle;
        [RTTI.Member(8, 0x24, "Logic")] public bool SupportsCrouchTactical;
        [RTTI.Member(9, 0x25, "Logic")] public bool SupportsCrouchCombat;
        [RTTI.Member(10, 0x26, "Logic")] public bool SupportsLCrouchIdle;
        [RTTI.Member(11, 0x27, "Logic")] public bool SupportsLCrouchTactical;
        [RTTI.Member(12, 0x28, "Logic")] public bool SupportsLCrouchCombat;
        [RTTI.Member(3, 0x30, "Logic")] public Ref<AnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(13, 0x38, "Logic")] public Array<HumanoidSubStateSupportedStanceCarryMapEntry> SupportedStanceCarryMap;
    }

    [RTTI.Serializable(0x2DC75985E7C1DC6B, GameType.DS)]
    public class HumanoidSubStateSupportedStanceCarryMapEntry
    {
        [RTTI.Member(0, 0x0)] public EStance Stance;
        [RTTI.Member(1, 0x4)] public ECarryModes CarryMode;
    }

    [RTTI.Serializable(0x8D94420C8B7D130D, GameType.DS)]
    public class HumanoidSwimState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x13F6BB7075383794, GameType.DS)]
    public class HumanoidSwimStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Logic")] public float SwimSpeed;
        [RTTI.Member(16, 0x4C, "Logic")] public float SprintSwimSpeed;
        [RTTI.Member(17, 0x50, "Logic")] public float MaxUnderWaterSwimDepth;
        [RTTI.Member(18, 0x54, "Logic")] public float UnderWaterSwimSpeed;
        [RTTI.Member(19, 0x58, "Logic")] public float UnderWaterSprintSwimSpeed;
        [RTTI.Member(57, 0x60, "Unlocks")] public Ref<PerkLevel> SprintSwimPerk;
        [RTTI.Member(58, 0x68, "Unlocks")] public Array<SwimStatePerkMapping> PerkMapping;
        [RTTI.Member(22, 0x78, "Logic")] public Ref<CurveResource> MaxAccelerationPerSpeedCurve;
        [RTTI.Member(23, 0x80, "Logic")] public float MaxTurnAcceleration;
        [RTTI.Member(20, 0x88, "Logic")] public Ref<CurveResource> SwimForwardSpeedToHeadingSpeedModifierCurve;
        [RTTI.Member(21, 0x90, "Logic")] public Ref<CurveResource> SwimSprintForwardSpeedToHeadingSpeedModifierCurve;
        [RTTI.Member(24, 0x98, "Logic")] public float UnderWaterMinStamina;
        [RTTI.Member(25, 0xA0, "Logic")] public Ref<CurveResource> UnderwaterHoldBreathDurationCurve;
        [RTTI.Member(26, 0xA8, "Logic")] public Ref<CurveResource> UnderwaterBreathDeacreaseModifierCurve;
        [RTTI.Member(28, 0xB0, "Logic")] public float UnderWaterDamagePerSecond;
        [RTTI.Member(29, 0xB4, "Logic")] public float CurrentsBlendDuration;
        [RTTI.Member(30, 0xC0, "Logic")] public Vec3 SwimmingCollisionCapsuleOffset;
        [RTTI.Member(31, 0xD0, "Logic")] public Vec3 IdleCollisionCapsuleOffset;
        [RTTI.Member(27, 0xE0, "Logic")] public Ref<StaminaUsageType> UnderWaterStaminaUsageType;
        [RTTI.Member(49, 0xE8, "Animation")] public Ref<CurveResource> BankTurnVelocityCurve;
        [RTTI.Member(35, 0xF0, "Logic")] public Ref<CurveResource> PitchToVerticalVelocity;
        [RTTI.Member(34, 0xF8, "Logic")] public Ref<CurveResource> StickInputToGravityCurve;
        [RTTI.Member(36, 0x100, "Logic")] public Ref<CurveResource> SwimSpeedToVerticalBoostCurve;
        [RTTI.Member(37, 0x108, "Logic")] public Ref<CurveResource> MaxVerticalBoostAccelerationCurve;
        [RTTI.Member(38, 0x110, "Logic")] public Ref<CurveResource> VerticalSpeedSmoothFactorCurve;
        [RTTI.Member(32, 0x118, "Logic")] public Ref<DamageTypeResource> DrowningDamageType;
        [RTTI.Member(33, 0x120, "Logic")] public float DieByDrowningDuration;
        [RTTI.Member(50, 0x128, "Animation")] public String SwimPitchAnimVarName;
        [RTTI.Member(51, 0x130, "Animation")] public String InWaterAnimTagName;
        [RTTI.Member(52, 0x138, "Animation")] public String TransitionToSwimAnimTagName;
        [RTTI.Member(53, 0x140, "Animation")] public String TransitionToUnderWaterAnimTagName;
        [RTTI.Member(54, 0x148, "Animation")] public String UnderWaterAnimTagName;
        [RTTI.Member(55, 0x150, "Animation")] public String SwimmingAnimTagName;
        [RTTI.Member(42, 0x158, "Dodge")] public float InitialDodgeSpeed;
        [RTTI.Member(43, 0x15C, "Dodge")] public float DodgeDeceleration;
        [RTTI.Member(45, 0x160, "WaterFall")] public float WaterFallSlopeAngle;
        [RTTI.Member(46, 0x164, "WaterFall")] public float WaterFallBlendInDuration;
        [RTTI.Member(47, 0x168, "WaterFall")] public float WaterFallBlendOutDuration;
        [RTTI.Member(39, 0x16C, "Logic")] public bool InvertPitchWhenSwimmingUnderWaterTowardsCamera;
        [RTTI.Member(40, 0x16D, "Logic")] public bool EnableUnderwaterStealth;
    }

    [RTTI.Serializable(0x3D274DF865B475E4, GameType.DS)]
    public class HumanoidSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC161BD776D17A43A, GameType.DS)]
    public class HumanoidVaultState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x6E773ACB00222ABC, GameType.DS)]
    public class HumanoidVaultStateResource : HumanoidSubStateResource
    {
    }

    [RTTI.Serializable(0x13516B15753B245A, GameType.DS)]
    public class HumanoidVaultTransition : Resource
    {
        [RTTI.Member(3, 0x20, "Animation")] public Ref<LocalizedTextResource> HUDText;
        [RTTI.Member(23, 0x28, "Conditions")] public Ref<HumanoidVaultTransitionCondition> Condition;
        [RTTI.Member(4, 0x30, "Animation", true)] public String VaultContactJointName;
        [RTTI.Member(5, 0x38, "Animation", true)] public AnimationEventID VaultDisplacementAnimEvent;
        [RTTI.Member(6, 0x3C, "Animation")] public float OverrideTurnSpeed;
        [RTTI.Member(7, 0x40, "Animation")] public bool AllowWield;
        [RTTI.Member(8, 0x48, "Animation")] public Ref<WarpedAnimation> StartAnimation;
        [RTTI.Member(9, 0x50, "Animation")] public Ref<WarpedAnimation> MidAnimation;
        [RTTI.Member(10, 0x58, "Animation")] public Ref<WarpedAnimation> EndAnimation;
        [RTTI.Member(11, 0x60, "Animation")] public Vec3 VaultContactPosition;
        [RTTI.Member(12, 0x70, "Animation")] public Vec3 VaultMidDisplacement;
        [RTTI.Member(13, 0x80, "Animation")] public Mat44 VaultMidTurn;
        [RTTI.Member(14, 0xC0, "Animation")] public Vec3 VaultObjectDepth;
        [RTTI.Member(15, 0xD0, "Animation")] public Vec3 VaultEndDisplacement;
        [RTTI.Member(16, 0xE0, "Animation")] public Vec3 VaultLandDisplacement;
        [RTTI.Member(17, 0xF0, "Animation")] public Vec3 VaultContactWarpOffset;
        [RTTI.Member(21, 0x100, "Collision")] public Array<Vec3> CollisionCapsulePath;
        [RTTI.Member(19, 0x110, "Collision")] public EAnimationTransitionCollisionPath CollisionPathType;
        [RTTI.Member(20, 0x114, "Collision")] public AnimationEventID CollisionPathAnimEvent;
        [RTTI.Member(24, 0x118, "Conditions")] public Ref<BooleanFact> DisallowFact;
        [RTTI.Member(26, 0x120, "Camera")] public Ref<CameraModeResource> CameraMode;
    }

    [RTTI.Serializable(0x79ED25D7A413093D, GameType.DS)]
    public class HumanoidVaultTransitionCondition : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EVaultObstacleType VaultObstacleType;
        [RTTI.Member(4, 0x24, "Logic")] public EVaultType VaultType;
        [RTTI.Member(5, 0x28, "Logic")] public EDeviceFunction VaultButton;
        [RTTI.Member(7, 0x2C, "Logic")] public bool NeedsLineOfSight;
        [RTTI.Member(6, 0x2D, "Logic")] public bool RequiresSprinting;
        [RTTI.Member(8, 0x2E, "Logic")] public bool RequiresSwimming;
        [RTTI.Member(9, 0x30, "Logic")] public EStance RequiredStance;
        [RTTI.Member(10, 0x34, "Logic")] public ECarryModes RequiredCarryMode;
        [RTTI.Member(11, 0x38, "Logic")] public bool EndInFall;
        [RTTI.Member(12, 0x39, "Logic")] public bool EndInSwimming;
        [RTTI.Member(13, 0x3A, "Logic")] public bool EndInParkour;
        [RTTI.Member(23, 0x3C, "Logic")] public EVaultEndInParkourType EndParkourType;
        [RTTI.Member(24, 0x40, "Logic")] public EVaultEndInParkourAnnotationDirection EndParkourAnnotationDirection;
        [RTTI.Member(14, 0x44, "Logic")] public bool Cancelable;
        [RTTI.Member(15, 0x48, "Logic")] public float MaxAngle;
        [RTTI.Member(16, 0x4C, "Logic")] public FRange MovementStickInput;
        [RTTI.Member(17, 0x54, "Logic")] public FRange SpeedRange;
        [RTTI.Member(18, 0x5C, "Logic")] public FRange MaxHeightDifference;
        [RTTI.Member(19, 0x64, "Logic")] public FRange MaxDisplacementDifferenceForward;
        [RTTI.Member(20, 0x6C, "Logic")] public FRange MaxDisplacementDifferenceRight;
        [RTTI.Member(21, 0x74, "Logic")] public FRange MaxDisplacementDifferenceUp;
        [RTTI.Member(22, 0x7C, "Logic")] public FRange MaxLandingHeightDifference;
        [RTTI.Member(25, 0x84, "Logic")] public float MinimumWaterDepth;
    }

    [RTTI.Serializable(0x90DEC79627CC3E22, GameType.DS)]
    public class HumanoidZiplineState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xFE342BD937FF8612, GameType.DS)]
    public class HumanoidZiplineStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(15, 0x48, "Logic")] public bool AllowControlDuringZipline;
        [RTTI.Member(16, 0x50, "Logic")] public String ZiplineAnimationVarName;
        [RTTI.Member(17, 0x58, "Logic")] public float MaxZiplineSpeed;
        [RTTI.Member(18, 0x5C, "Logic")] public float MaxZiplineTurnSpeed;
        [RTTI.Member(19, 0x60, "Logic")] public float ZiplineAcceleration;
        [RTTI.Member(20, 0x64, "Logic")] public float ZiplineBrakeFriction;
        [RTTI.Member(21, 0x68, "Logic")] public float ZiplineBrakeAngle;
        [RTTI.Member(22, 0x6C, "Logic")] public float ZiplineAccelerateInputAngle;
        [RTTI.Member(23, 0x70, "Logic")] public float ZiplineAccelerateInputStickFactor;
        [RTTI.Member(24, 0x74, "Logic")] public float MinZiplineBrakeSpeed;
        [RTTI.Member(26, 0x78, "Logic")] public float AttachmentCoolDownDuration;
        [RTTI.Member(27, 0x7C, "Logic")] public float ZiplineDeactivateBoostFactor;
        [RTTI.Member(28, 0x80, "Logic")] public float ZiplineDeactivateDistance;
        [RTTI.Member(29, 0x84, "Logic")] public float ZiplineDeactivateSpeedDifference;
        [RTTI.Member(31, 0x88, "Animation", true)] public String ZiplineMountAnimTagName;
        [RTTI.Member(34, 0x90, "Private")] public AnimationTagID ZiplineMountAnimTag;
        [RTTI.Member(32, 0x98, "Animation", true)] public String ZiplineDismountAnimTagName;
        [RTTI.Member(35, 0xA0, "Private")] public AnimationTagID ZiplineDismountAnimTag;
        [RTTI.Member(25, 0xA8, "Logic")] public Ref<CurveResource> ZiplineFrictionPerAngleCurve;
        [RTTI.Member(37, 0xB0, "Item")] public Ref<InventoryEntityResource> ZiplineIventoryItem;
    }

    [RTTI.Serializable(0x6B866DFDFDA8F700, GameType.DS)]
    public class HwBindingHandle
    {
        [RTTI.Member(0, 0x0)] public uint64 Handle;
    }

    [RTTI.Serializable(0xD2FE8B1F70AFC6AA, GameType.DS)]
    public class HwSamplerData
    {
        [RTTI.Member(0, 0x0)] public uint32 PackedData;
    }

    [RTTI.Serializable(0x19FFB74FAF0073E6, GameType.DS)]
    public class IActorModifier
    {
    }

    [RTTI.Serializable(0x20B09DFA77AA8A9E, GameType.DS)]
    public class IDSCoverAndAnimModelComponentBase : IDSCoverModelComponentBase
    {
    }

    [RTTI.Serializable(0x4901A606C61D19E7, GameType.DS)]
    public class IDSCoverAndAnimModelComponentRepBase : DSCoverModelComponentRepBase
    {
    }

    [RTTI.Serializable(0x53F93E133678147F, GameType.DS)]
    public class IDSCoverModelComponentBase : EntityComponent
    {
    }

    [RTTI.Serializable(0xF65FD7C1E374836E, GameType.DS)]
    public class IDSReInitInterface
    {
    }

    [RTTI.Serializable(0x577A2FF09C937F9, GameType.DS)]
    public class IKRotationSpeedSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public FRange HeadingComfortRange;
        [RTTI.Member(4, 0x28, "Logic")] public FRange PitchComfortRange;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<CurveResource> MaxRotationSpeedForAngle;
        [RTTI.Member(6, 0x38, "Logic")] public float MaxRotationAcceleration;
    }

    [RTTI.Serializable(0x33D63CF0BA1A833B, GameType.DS)]
    public class IObjectActivationSet
    {
    }

    [RTTI.Serializable(0x85C95C43A2B391D2, GameType.DS)]
    public class IParticleSysVar
    {
        [RTTI.Member(0, 0x0)] public int Value;
        [RTTI.Member(1, 0x4)] public int Variation;
    }

    [RTTI.Serializable(0xAD5617F78F37CA04, GameType.DS)]
    public class IRange
    {
        [RTTI.Member(0, 0x0)] public int Min;
        [RTTI.Member(1, 0x4)] public int Max;
    }

    [RTTI.Serializable(0x403C6E2CF1C15C81, GameType.DS)]
    public class IRect
    {
        [RTTI.Member(0, 0x0)] public int Left;
        [RTTI.Member(1, 0x4)] public int Top;
        [RTTI.Member(2, 0x8)] public int Right;
        [RTTI.Member(3, 0xC)] public int Bottom;
    }

    [RTTI.Serializable(0xB45ABCA0E62A352C, GameType.DS)]
    public class IScalableEvent
    {
        [RTTI.Member(1, 0x8, "Scalable")] public int ClipOffset;
        [RTTI.Member(2, 0xC, "Scalable")] public float ClipSpeed;
    }

    [RTTI.Serializable(0xD640C6671A9F54E9, GameType.DS)]
    public class ISize
    {
        [RTTI.Member(0, 0x0)] public int Width;
        [RTTI.Member(1, 0x4)] public int Height;
    }

    [RTTI.Serializable(0x7A44EC1A57770EFF, GameType.DS)]
    public class IVec3
    {
        [RTTI.Member(0, 0x0)] public int X;
        [RTTI.Member(1, 0x4)] public int Y;
        [RTTI.Member(2, 0x8)] public int Z;
    }

    [RTTI.Serializable(0xBF70D7F3F3CD8C21, GameType.DS)]
    public class IVec4
    {
        [RTTI.Member(0, 0x0)] public int X;
        [RTTI.Member(1, 0x4)] public int Y;
        [RTTI.Member(2, 0x8)] public int Z;
        [RTTI.Member(3, 0xC)] public int W;
    }

    [RTTI.Serializable(0xF263EC00E718A3D9, GameType.DS)]
    public class IgnoreCollisionWithEntitiesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC8A2B4AC4465590A, GameType.DS)]
    public class IgnoreCollisionWithEntitiesComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<CPtr<EntityResource>> EntityResourcesToIgnore;
    }

    [RTTI.Serializable(0xF2C59008BC4EBC01, GameType.DS)]
    public class ImageBlenderSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> ComputeColorizeShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> ComputeColorCubeShader;
    }

    [RTTI.Serializable(0x85452DB585C95A7E, GameType.DS)]
    public class ImageEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD7EDDFD7B31F3204, GameType.DS)]
    public class ImageEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<UITexture> Image;
    }

    [RTTI.Serializable(0xAC2801C83870C914, GameType.DS)]
    public class ImageMap : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<ImageMapEntry> Entries;
    }

    [RTTI.Serializable(0x51C07CE310588882, GameType.DS)]
    public class ImageMapEntry
    {
        [RTTI.Member(1, 0x0, "General")] public String ID;
        [RTTI.Member(2, 0x8, "General")] public Ref<UITexture> Texture;
    }

    [RTTI.Serializable(0x82EA0ACA19AB6F6A, GameType.DS)]
    public class ImpactEffectAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Settings")] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(5, 0x30, "Settings")] public String HelperNode;
        [RTTI.Member(6, 0x38, "Settings")] public bool AlignToEntity;
        [RTTI.Member(7, 0x40, "Settings")] public Vec3 StartOffset;
        [RTTI.Member(8, 0x50, "Settings")] public Vec3 EndOffset;
        [RTTI.Member(9, 0x60, "Settings")] public EPhysicsCollisionLayerGame CollisionLayer;
    }

    [RTTI.Serializable(0xD03A050CF3F40376, GameType.DS)]
    public class ImpactEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x71B301C482C2AE0D, GameType.DS)]
    public class ImpactEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE163B6298B64075A, GameType.DS)]
    public class ImpactEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Settings")] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(4, 0x28, "Settings")] public EContactType ContactType;
        [RTTI.Member(5, 0x30, "Settings")] public String HelperNode;
        [RTTI.Member(6, 0x40, "Settings")] public Vec3 StartOffset;
        [RTTI.Member(7, 0x50, "Settings")] public Vec3 EndOffset;
        [RTTI.Member(8, 0x60, "Settings")] public bool AlignToWorld;
        [RTTI.Member(9, 0x64, "Settings")] public float ContactForce;
        [RTTI.Member(10, 0x68, "Settings")] public Ref<CurveResource> RaycastFrequencyOverDistance;
    }

    [RTTI.Serializable(0x43FBB699A4E40816, GameType.DS)]
    public class ImpactEffectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC8AB97498D994E07, GameType.DS)]
    public class ImpactEffectEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(10, 0x40, "Logic")] public float EffectMass;
        [RTTI.Member(11, 0x44, "Logic")] public float RayCastOffset;
        [RTTI.Member(12, 0x48, "Logic")] public float RayCastLength;
        [RTTI.Member(13, 0x4C, "Logic")] public EContactType ContactType;
    }

    [RTTI.Serializable(0xE9308EB5C421A963, GameType.DS)]
    public class ImpactEffectLight
    {
        [RTTI.Member(0, 0x0)] public Ref<LightResource> LightResource;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> IntensityCurve;
        [RTTI.Member(2, 0x10)] public bool IsLooping;
        [RTTI.Member(3, 0x14)] public float Offset;
    }

    [RTTI.Serializable(0xA29D02491FBB7F2, GameType.DS)]
    public class ImpactEffectOverrideBox : WorldNode
    {
        [RTTI.Member(5, 0x70, "Logic")] public int Priority;
        [RTTI.Member(6, 0x74, "Logic")] public EImpactEffectOverrideMode Mode;
        [RTTI.Member(7, 0x78, "Logic")] public Ref<ImpactEffectResourceCollection> Collection;
    }

    [RTTI.Serializable(0xFFF5DCC43CC36838, GameType.DS)]
    public class ImpactEffectParticles
    {
        [RTTI.Member(0, 0x0)] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(1, 0x8)] public float MaxLifeTime;
        [RTTI.Member(2, 0xC)] public float AlignToReflectionVectorFactor;
        [RTTI.Member(3, 0x10)] public Ref<CurveResource> CurveEmitterRatioResource;
    }

    [RTTI.Serializable(0x3A58643D7F9C59D1, GameType.DS)]
    public class ImpactEffectRegionOverride
    {
        [RTTI.Member(0, 0x0)] public Array<ERegion> Regions;
        [RTTI.Member(1, 0x10)] public Ref<ImpactEffectResource> OverrideEffect;
    }

    [RTTI.Serializable(0xD0733D1472EFD2CF, GameType.DS)]
    public class ImpactEffectResource : Resource
    {
        [RTTI.Member(6, 0x0, "Logic")] public bool UsableForCollidingAndBouncing;
        [RTTI.Member(8, 0x0, "Logic")] public bool UsableForRolling;
        [RTTI.Member(5, 0x0, "Logic")] public bool UsableForCollidingAndResting;
        [RTTI.Member(7, 0x0, "Logic")] public bool UsableForSliding;
        [RTTI.Member(3, 0x20, "Logic")] public Ref<MaterialTypeResource> MaterialTypeResourceA;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<MaterialTypeResource> MaterialTypeResourceB;
        [RTTI.Member(10, 0x38, "Effects")] public ImpactEffectSound Sound;
        [RTTI.Member(11, 0x58, "Effects")] public Array<ImpactEffectParticles> ParticleEffects;
        [RTTI.Member(12, 0x68, "Effects")] public Ref<DecalResource> DecalResource;
        [RTTI.Member(13, 0x70, "Effects")] public ImpactEffectLight Light;
        [RTTI.Member(14, 0x88, "Effects")] public Ref<ShakeResource> CameraShakeResource;
        [RTTI.Member(15, 0x90, "Effects")] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(16, 0x98, "Effects")] public Ref<ForceFieldResource> ForceFieldResource;
        [RTTI.Member(17, 0xA0, "Effects")] public Ref<GraphProgramResource> StartGraph;
        [RTTI.Member(19, 0xA8, "Effects")] public bool OverridesSound;
        [RTTI.Member(20, 0xA9, "Effects")] public bool OverridesParticles;
        [RTTI.Member(21, 0xAA, "Effects")] public bool OverridesDecal;
        [RTTI.Member(22, 0xAB, "Effects")] public bool OverridesLight;
        [RTTI.Member(23, 0xAC, "Effects")] public bool OverridesCameraShake;
        [RTTI.Member(24, 0xAD, "Effects")] public bool OverridesRumble;
        [RTTI.Member(25, 0xAE, "Effects")] public bool OverridesForceField;
        [RTTI.Member(26, 0xB0, "Effects")] public float MaxDistanceToCamera;
        [RTTI.Member(18, 0xB8, "Effects")] public Array<ImpactEffectRegionOverride> RegionOverrides;
    }

    [RTTI.Serializable(0x9C64C1FD6331A6DA, GameType.DS)]
    public class ImpactEffectResourceCollection : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<ImpactEffectResource>> Effects;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<ImpactEffectResourceCollection>> Collections;
        [RTTI.Member(5, 0x50, "Logic")] public Array<SerializableDecalMaterialTypeMask> DecalMaterialTypeMaskMap;
    }

    [RTTI.Serializable(0xFE425C36301B0705, GameType.DS)]
    public class ImpactEffectSound
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(1, 0x10)] public float VolumeFactor;
        [RTTI.Member(2, 0x14)] public float MassRangeLight;
        [RTTI.Member(3, 0x18)] public float MassRangeHeavy;
    }

    [RTTI.Serializable(0x2594F27710037833, GameType.DS)]
    public class ImpactEffectSystemSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float ImpulseFactor;
        [RTTI.Member(4, 0x24, "Logic")] public float ForceFactor;
        [RTTI.Member(5, 0x28, "Logic")] public float VelocityFactor;
        [RTTI.Member(6, 0x2C, "Logic")] public float AngularVelocityFactor;
    }

    [RTTI.Serializable(0xE70708672AC99664, GameType.DS)]
    public class ImpactEffectSystemSettingsGame : ImpactEffectSystemSettings
    {
        [RTTI.Member(8, 0x30, "Game")] public Ref<MaterialTypeResource> AirMaterialTypeResource;
    }

    [RTTI.Serializable(0x1E4913BC530F8489, GameType.DS)]
    public class ImpactMaterialTypeRemapComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8E11DA0B1B3AA368, GameType.DS)]
    public class ImpactMaterialTypeRemapComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<MaterialTypeReplacement> MaterialTypeReplacements;
    }

    [RTTI.Serializable(0x41CE0A75206B8697, GameType.DS)]
    public class ImpulseResponseResource : Resource
    {
        [RTTI.Member(7, 0x20, "ImpulseResponse")] public Array<uint8> Data;
        [RTTI.Member(3, 0x30, "Source")] public int NoiseFloorThreshold;
        [RTTI.Member(4, 0x34, "Source")] public int RMSNormalizationLevel;
        [RTTI.Member(5, 0x38, "Source")] public bool ForReverbPreset;
    }

    [RTTI.Serializable(0xB0E3D80BFCCA99C4, GameType.DS)]
    public class InGameIDToTextResource
    {
        [RTTI.Member(0, 0x0)] public String InGameID;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> Resource;
    }

    [RTTI.Serializable(0xFDEA66BA20D5238D, GameType.DS)]
    public class InGameMenuResource : MenuResource
    {
        [RTTI.Member(24, 0xC0, "Properties")] public Ref<ButtonIconCollection> ButtonIconCollection;
        [RTTI.Member(25, 0xC8, "Properties")] public Ref<ImageMap> TextImageMap;
        [RTTI.Member(52, 0xD0, "Audio")] public Ref<SoundMixStateResource> GamePausedSoundMix;
        [RTTI.Member(53, 0xD8, "Audio")] public Ref<SoundMixStateResource> GameRunningSoundMix;
        [RTTI.Member(54, 0xE0, "Audio")] public Ref<SoundMixStateResource> MenuCollectableSoundMix;
        [RTTI.Member(55, 0xE8, "Audio")] public Ref<SoundMixStateResource> MenuBinkSoundMix;
        [RTTI.Member(26, 0xF0, "Properties")] public Ref<EntityAction> SaveGameAction;
        [RTTI.Member(27, 0xF8, "Properties")] public Ref<MovieResource> MainMenuBackgroundMovie;
        [RTTI.Member(28, 0x100, "Properties")] public Array<MenuPageScreenEffect> MenuPageScreenEffects;
        [RTTI.Member(29, 0x110, "Properties")] public Ref<ConditionResource> CanOpenInGameMainMenuCondition;
        [RTTI.Member(30, 0x118, "Properties")] public Ref<EnumFactEntry> ShowPlayGoLoadingMenuQuest;
        [RTTI.Member(31, 0x120, "Properties")] public Ref<BooleanFact> CreditsDoneFact;
        [RTTI.Member(33, 0x128, "Pages")] public Ref<MenuPage> StartupIntro;
        [RTTI.Member(34, 0x130, "Pages")] public Ref<MenuPage> BasicLoading;
        [RTTI.Member(35, 0x138, "Pages")] public Ref<MenuPage> CampaignLoading;
        [RTTI.Member(36, 0x140, "Pages")] public Ref<MenuPage> FirstTimeBootupLoadingPage;
        [RTTI.Member(37, 0x148, "Pages")] public Ref<MenuPage> FirstTimeBootupIntroPage;
        [RTTI.Member(38, 0x150, "Pages")] public Ref<MenuPage> Movie;
        [RTTI.Member(39, 0x158, "Pages")] public Ref<MenuPage> SkipSequence;
        [RTTI.Member(40, 0x160, "Pages")] public Ref<MenuPage> IngameMainMenu;
        [RTTI.Member(41, 0x168, "Pages")] public Ref<MenuPage> IngameOptions;
        [RTTI.Member(42, 0x170, "Pages")] public Ref<MenuPage> IngameMerchant;
        [RTTI.Member(43, 0x178, "Pages")] public Ref<MenuPage> IngameLoot;
        [RTTI.Member(44, 0x180, "Pages")] public Ref<MenuPage> IngameCrafting;
        [RTTI.Member(45, 0x188, "Pages")] public Ref<MenuPage> IngamePerks;
        [RTTI.Member(46, 0x190, "Pages")] public Ref<MenuPage> IngameNotebook;
        [RTTI.Member(47, 0x198, "Pages")] public Ref<MenuPage> EndCredits;
        [RTTI.Member(48, 0x1A0, "Pages")] public Ref<MenuPage> Robot;
        [RTTI.Member(49, 0x1A8, "Pages")] public Ref<MenuPage> SkippedSequenceLoading;
        [RTTI.Member(50, 0x1B0, "Pages")] public Ref<MenuPage> NetworkError;
        [RTTI.Member(57, 0x1B8, "ToastMessages")] public Ref<LocalizedTextResource> ControllerDisconnected;
        [RTTI.Member(58, 0x1C0, "ToastMessages")] public Ref<LocalizedTextResource> FirstPlayerControllerDisconnected;
        [RTTI.Member(59, 0x1D0, "ToastMessages")] public Ref<LocalizedTextResource> VoiceChatUnavailable;
        [RTTI.Member(60, 0x1D8, "ToastMessages")] public Ref<LocalizedTextResource> MatchAssignmentWrongBuild;
        [RTTI.Member(61, 0x1E0, "ToastMessages")] public Ref<LocalizedTextResource> PartyJoinNotAllowed;
    }

    [RTTI.Serializable(0x76AFF683FE30C8BB, GameType.DS)]
    public class InactiveEntity : RTTIObject
    {
    }

    [RTTI.Serializable(0xA0D3841EF450E3C9, GameType.DS)]
    public class IncreaseIntPropertyAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<IntProperty> Property;
        [RTTI.Member(5, 0x30, "Logic")] public int ValueToAdd;
    }

    [RTTI.Serializable(0x56DF7EA4F0CB045, GameType.DS)]
    public class IndirectLightingBakeZone : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(12, 0x100, "General")] public ELightbakeZoneRestriction LightbakeZoneRestriction;
        [RTTI.Member(13, 0x104, "General")] public ELightbakeZoneQuality LightbakeZoneQuality;
        [RTTI.Member(14, 0x108, "General")] public ELightbakeZoneOrientation LightbakeZoneOrientation;
        [RTTI.Member(15, 0x10C, "General")] public ELightmapEncodeColorScale LightmapEncodeColorScale;
        [RTTI.Member(16, 0x110, "General")] public float CompositeOrder;
        [RTTI.Member(17, 0x114, "General")] public bool ForScene;
        [RTTI.Member(18, 0x118, "General")] public int MinStepNbhd;
        [RTTI.Member(19, 0x11C, "General")] public bool UseHighQualitySkyVis;
        [RTTI.Member(20, 0x120, "General")] public float DistanceFade;
    }

    [RTTI.Serializable(0xFA268BC2D25990A1, GameType.DS)]
    public class IndoorClimate : ClimateBase
    {
        [RTTI.Member(7, 0x30, "General")] public float OutdoorWindInfluence;
    }

    [RTTI.Serializable(0x8D9E259ADB460964, GameType.DS)]
    public class InheritedAttrBase : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xA8FC783CA6C6E861, GameType.DS)]
    public class InheritedLinearGainFloat
    {
        [RTTI.Member(0, 0x0)] public LinearGainFloat Value;
        [RTTI.Member(1, 0x4)] public bool IsOverridden;
    }

    [RTTI.Serializable(0xE3989A6718E23119, GameType.DS)]
    public class InheritedMusicPriorityGroupRef
    {
        [RTTI.Member(0, 0x0)] public Ref<MusicPriorityGroup> Value;
        [RTTI.Member(1, 0x8)] public bool IsOverridden;
    }

    [RTTI.Serializable(0x8011F0696EEE6738, GameType.DS)]
    public class InheritedMusicTransition
    {
        [RTTI.Member(0, 0x0)] public MusicTransition Value;
        [RTTI.Member(1, 0xC)] public bool IsOverridden;
    }

    [RTTI.Serializable(0x6511F7B63FDBFC8E, GameType.DS)]
    public class InitialFactsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2F69A9C1E619EB89, GameType.DS)]
    public class InitialFactsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<FactValueBase>> FactValues;
    }

    [RTTI.Serializable(0x1F2B9D617DF7FDA6, GameType.DS)]
    public class InstigatorData
    {
        [RTTI.Member(1, 0x0, "Logic")] public WeakPtr<Player> Player;
        [RTTI.Member(2, 0x18, "Logic")] public WeakPtr<Entity> Entity;
        [RTTI.Member(3, 0x30, "Logic")] public CPtr<AIFaction> Faction;
        [RTTI.Member(4, 0x38, "Logic")] public uint8 Flags;
    }

    [RTTI.Serializable(0xA840109226D8D6D7, GameType.DS)]
    public class InstigatorDataSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x809566F3712D2C26, GameType.DS)]
    public class IntProperty : IntPropertyBase
    {
        [RTTI.Member(11, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x68EF4812B475FF9F, GameType.DS)]
    public class IntPropertyBase : IntegerFact
    {
    }

    [RTTI.Serializable(0xAF40F48D2EAD1921, GameType.DS)]
    public class IntPropertyValue : PropertyValue
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<IntPropertyBase> Property;
        [RTTI.Member(4, 0x28, "General")] public int Value;
    }

    [RTTI.Serializable(0x5DBCF93EA371509, GameType.DS)]
    public class IntegerFact : Fact
    {
        [RTTI.Member(9, 0x30, "Logic")] public int DefaultValue;
    }

    [RTTI.Serializable(0x9CB7BC90A943287E, GameType.DS)]
    public class IntegerFactConditionResource : FactConditionResource
    {
        [RTTI.Member(4, 0x30, "Logic")] public Ref<IntegerFact> IntegerFact;
        [RTTI.Member(3, 0x38, "Logic")] public EFactConditionContextMode ContextMode;
        [RTTI.Member(6, 0x39, "Logic")] public EFactConditionCompareOperator CompareType;
        [RTTI.Member(5, 0x3C, "Logic")] public int Value;
    }

    [RTTI.Serializable(0x3EFA1F28B57089D4, GameType.DS)]
    public class IntegerFactValue : FactValueBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<IntegerFact> TypedFact;
        [RTTI.Member(4, 0x28, "Logic")] public int TypedValue;
    }

    [RTTI.Serializable(0xFBA3F1F847CF5D64, GameType.DS)]
    public class InterruptEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB56AE49A10BD6032, GameType.DS)]
    public class InterruptEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x824D62D1516599F8, GameType.DS)]
    public class InvalidatePhysicsContactsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB288A8322A067D4E, GameType.DS)]
    public class InvalidatePhysicsContactsComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xF064E3C2132A37D6, GameType.DS)]
    public class Inventory : EntityComponent
    {
    }

    [RTTI.Serializable(0xE547152F94EB1B05, GameType.DS)]
    public class InventoryActionAbility : InventoryEntity
    {
    }

    [RTTI.Serializable(0x49E5E256B6D14C1D, GameType.DS)]
    public class InventoryActionAbilityResource : InventoryEntityResource
    {
        [RTTI.Member(73, 0x1D0, "Ability")] public CPtr<EntityAction> UseAction;
        [RTTI.Member(74, 0x1D8, "Ability")] public CPtr<EntityAction> DeactivateAction;
        [RTTI.Member(75, 0x1E0, "Ability")] public float Duration;
        [RTTI.Member(76, 0x1E8, "Ability")] public Ref<FloatProperty> EndTimeProperty;
        [RTTI.Member(77, 0x1F0, "Ability")] public bool AutoUse;
        [RTTI.Member(78, 0x1F1, "Ability")] public bool SingleShot;
        [RTTI.Member(79, 0x1F2, "Ability")] public bool UseAgainToDeactivate;
        [RTTI.Member(80, 0x1F8, "Ability")] public Ref<ActionAbilityUseCondition> UseCondition;
        [RTTI.Member(81, 0x200, "Ability")] public Ref<GraphProgramResource> EnabledGraphProgram;
        [RTTI.Member(82, 0x208, "Ability")] public bool SingleUse;
    }

    [RTTI.Serializable(0x7446F05E54BB593C, GameType.DS)]
    public class InventoryCapacityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x74EF549FAB73C83, GameType.DS)]
    public class InventoryCapacityComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x38, "UI")] public Ref<LocalizedTextResource> WeaponInventoryFullDescription;
        [RTTI.Member(7, 0x40, "UI")] public Ref<LocalizedTextResource> ToolInventoryFullDescription;
        [RTTI.Member(5, 0x48, "UI")] public Ref<LocalizedTextResource> AmmoPouchInventoryFullDescription;
        [RTTI.Member(8, 0x50, "UI")] public Ref<LocalizedTextResource> ModificationInventoryFullDescription;
        [RTTI.Member(6, 0x58, "UI")] public Ref<LocalizedTextResource> OutfitInventoryFullDescription;
        [RTTI.Member(3, 0x60, "UI")] public Ref<LocalizedTextResource> ResourceInventoryFullDescription;
        [RTTI.Member(10, 0x78, "UI")] public Ref<LocalizedTextResource> WeaponCategoryName;
        [RTTI.Member(13, 0x80, "UI")] public Ref<LocalizedTextResource> ToolCategoryName;
        [RTTI.Member(11, 0x88, "UI")] public Ref<LocalizedTextResource> AmmoCategoryName;
        [RTTI.Member(14, 0x90, "UI")] public Ref<LocalizedTextResource> ModificationCategoryName;
        [RTTI.Member(12, 0x98, "UI")] public Ref<LocalizedTextResource> OutfitCategoryName;
        [RTTI.Member(9, 0xA0, "UI")] public Ref<LocalizedTextResource> ResourceCategoryName;
        [RTTI.Member(15, 0xA8, "UI")] public Ref<LocalizedTextResource> SpecialCategoryName;
        [RTTI.Member(16, 0xB0, "UI")] public Ref<LocalizedTextResource> LootBoxCategoryName;
        [RTTI.Member(18, 0xB8, "Slots")] public Array<InventoryCategorySize> SlotBasedCategories;
    }

    [RTTI.Serializable(0x6054ACED341DA606, GameType.DS)]
    public class InventoryCapacityComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8FF99830783AFA71, GameType.DS)]
    public class InventoryCapacityModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3ED0BD62F8AA53E, GameType.DS)]
    public class InventoryCapacityModificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Slots")] public Array<InventoryCategorySize> SlotCapacityIncreases;
    }

    [RTTI.Serializable(0x10A34CD1E6E1DFB7, GameType.DS)]
    public class InventoryCategorySize
    {
        [RTTI.Member(0, 0x0)] public EInventoryCategory Category;
        [RTTI.Member(1, 0x4)] public int SlotCapacity;
    }

    [RTTI.Serializable(0x1AAE506F4069F607, GameType.DS)]
    public class InventoryCollection : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<InventoryCollectionItem> Items;
    }

    [RTTI.Serializable(0xA7C25D938FEF84F6, GameType.DS)]
    public class InventoryCollectionItem
    {
        [RTTI.Member(0, 0x0)] public Ref<EntityResource> ItemResource;
        [RTTI.Member(1, 0x8)] public int Amount;
    }

    [RTTI.Serializable(0x92A5FA8087857B82, GameType.DS)]
    public class InventoryCollectionSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD63D71C110435109, GameType.DS)]
    public class InventoryController : EntityComponent
    {
    }

    [RTTI.Serializable(0xFEC07D5A05FB2EEB, GameType.DS)]
    public class InventoryControllerRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x1BD91F8D61DB213E, GameType.DS)]
    public class InventoryControllerResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x20, "Logic")] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(6, 0x28, "Logic")] public Ref<ScreenEffectResource> ScreenEffectResource;
        [RTTI.Member(17, 0x30, "Sound")] public Ref<SoundResource> SelectionActivatedSound;
        [RTTI.Member(18, 0x38, "Sound")] public Ref<SoundResource> SelectionChangedSound;
        [RTTI.Member(19, 0x40, "Sound")] public Ref<SoundResource> WeaponOrAmmoSwitchSound;
        [RTTI.Member(20, 0x48, "Sound")] public Ref<SoundResource> ToolSwitchSound;
        [RTTI.Member(21, 0x50, "Sound")] public Ref<SoundResource> ToolUseFailedSound;
        [RTTI.Member(22, 0x58, "Sound")] public Ref<SoundResource> QuickCraftSucceededSound;
        [RTTI.Member(23, 0x60, "Sound")] public Ref<SoundResource> QuickCraftFailedSound;
        [RTTI.Member(24, 0x68, "Sound")] public Ref<SoundResource> QuickCraftingSound;
        [RTTI.Member(25, 0x70, "Sound")] public Ref<SoundMixStateResource> SelectionSoundMixState;
        [RTTI.Member(10, 0x78, "Logic")] public Ref<ContextualSpeechEvent> InventoryFullSpeechEvent;
        [RTTI.Member(27, 0x80, "Animation")] public String RelaxedAnimTagName;
        [RTTI.Member(15, 0x88, "Logic")] public Ref<ConditionResource> InputAllowedCondition;
        [RTTI.Member(12, 0x90, "Logic")] public float DPadStopMovementTime;
        [RTTI.Member(13, 0x94, "Logic")] public float ToolAimCameraDelay;
        [RTTI.Member(14, 0x98, "Logic")] public Ref<BooleanFact> UseAimCameraForToolFact;
        [RTTI.Member(4, 0xA0, "Logic")] public float QuickCraftHoldTime;
        [RTTI.Member(3, 0xA4, "Logic")] public bool IsQuickCraftingEnabled;
        [RTTI.Member(29, 0xA8, "GameSpeed")] public float SelectionTimeScale;
        [RTTI.Member(30, 0xAC, "GameSpeed")] public float SelectionTimeScaleBlendInDuration;
        [RTTI.Member(31, 0xB0, "GameSpeed")] public float SelectionTimeScaleBlendOutDuration;
        [RTTI.Member(7, 0xB4, "Logic")] public float AngularDeadzonePerSlot;
        [RTTI.Member(33, 0xB8, "WieldDirective")] public float WeaponOperationTimeout;
        [RTTI.Member(34, 0xBC, "WieldDirective")] public float WeaponAutoWieldMinimumTime;
        [RTTI.Member(35, 0xC0, "WieldDirective")] public float WeaponStowDelayAfterAutoWield;
        [RTTI.Member(36, 0xC4, "WieldDirective")] public float AutoStowSlopeAngleThreshold;
        [RTTI.Member(37, 0xC8, "WieldDirective")] public float WeaponAutoWieldCoolDown;
        [RTTI.Member(38, 0xD0, "WieldDirective")] public Ref<ConditionResource> AutoWieldCondition;
        [RTTI.Member(8, 0xD8, "Logic")] public Ref<BooleanFact> InventorySelectionActiveFact;
        [RTTI.Member(9, 0xE0, "Logic")] public Ref<BooleanFact> ChildAloyFact;
        [RTTI.Member(11, 0xE8, "Logic")] public Array<Ref<PerkLevel>> UnlockableAbilities;
    }

    [RTTI.Serializable(0x5842E0799CA5A399, GameType.DS)]
    public class InventoryControllerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAE1F723D586A4921, GameType.DS)]
    public class InventoryEntity : Entity
    {
    }

    [RTTI.Serializable(0xB8D061E3EAF277F6, GameType.DS)]
    public class InventoryEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x6ED8B3FA7E239C6F, GameType.DS)]
    public class InventoryEntityResource : EntityResource
    {
        [RTTI.Member(59, 0x100, "HUD")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(31, 0x108, "Logic")] public int InventoryId;
        [RTTI.Member(32, 0x110, "Logic")] public Array<String> AnimationSetTags;
        [RTTI.Member(61, 0x120, "Animation")] public float StowTime;
        [RTTI.Member(62, 0x124, "Animation")] public float QuickStowTime;
        [RTTI.Member(63, 0x128, "Animation")] public float NormalWieldTime;
        [RTTI.Member(64, 0x12C, "Animation")] public float QuickWieldTime;
        [RTTI.Member(65, 0x130, "Animation")] public String AdditionalWieldAnimVarName;
        [RTTI.Member(53, 0x138, "Logic")] public float StowedScale;
        [RTTI.Member(50, 0x140, "Logic")] public CPtr<EntityAction> WieldAction;
        [RTTI.Member(51, 0x148, "Logic")] public CPtr<EntityAction> StowAction;
        [RTTI.Member(52, 0x150, "Logic")] public CPtr<EntityAction> RemovedAction;
        [RTTI.Member(67, 0x158, "DisabledTimeAfterUse")] public float Time;
        [RTTI.Member(69, 0x160, "Handling")] public Vec3 StandAimOffset;
        [RTTI.Member(70, 0x170, "Handling")] public Vec3 CrouchAimOffset;
        [RTTI.Member(71, 0x180, "Handling")] public bool AttachAimToCamera;
        [RTTI.Member(48, 0x188, "Logic")] public String GunBoneOverride;
        [RTTI.Member(56, 0x190, "Representation")] public Ref<MoverResource> StowMoverResource;
        [RTTI.Member(47, 0x198, "Logic")] public String GunAimOverrideHelperName;
        [RTTI.Member(46, 0x1A0, "Logic")] public bool NeedsAimAlignment;
        [RTTI.Member(49, 0x1A1, "Logic")] public bool DisablesInventorySelection;
        [RTTI.Member(57, 0x1A8, "Representation")] public Ref<SoundResource> ActiveSound;
        [RTTI.Member(33, 0x1B0, "Logic")] public float ButtonActivationTime;
        [RTTI.Member(34, 0x1B4, "Logic")] public bool AllowsMoving;
        [RTTI.Member(35, 0x1B5, "Logic")] public bool AllowMovingWhileOperating;
        [RTTI.Member(36, 0x1B6, "Logic")] public bool AllowsCrouching;
        [RTTI.Member(37, 0x1B7, "Logic")] public bool AllowsJumping;
        [RTTI.Member(38, 0x1B8, "Logic")] public bool AllowsDodging;
        [RTTI.Member(39, 0x1B9, "Logic")] public bool AllowsVaulting;
        [RTTI.Member(40, 0x1BA, "Logic")] public bool AllowsSliding;
        [RTTI.Member(41, 0x1BB, "Logic")] public bool AllowsSprinting;
        [RTTI.Member(42, 0x1BC, "Logic")] public bool StowOnExtendedMovement;
        [RTTI.Member(44, 0x1BD, "Logic")] public bool CanWieldWhileMounted;
        [RTTI.Member(43, 0x1BE, "Logic")] public bool CanActivateWhileFallingAndJumping;
        [RTTI.Member(45, 0x1BF, "Logic")] public ECanActivateWhileSwimming CanActivateWhileSwimming;
        [RTTI.Member(54, 0x1C0, "Logic")] public Ref<GraphProgramResource> UseConditionGraph;
    }

    [RTTI.Serializable(0x9D2C56F70B8AAFEB, GameType.DS)]
    public class InventoryHUDNotificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4065A7F681777D92, GameType.DS)]
    public class InventoryHUDNotificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PlayerNotificationResource> ItemAddedNotification;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<PlayerNotificationResource> ItemRemovedNotification;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<PlayerNotificationResource> ItemEquippedNotification;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<PlayerNotificationResource> ItemUnequippedNotification;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<PlayerNotificationResource> ItemConstructedNotification;
        [RTTI.Member(10, 0x48, "NonStackableItems")] public Ref<PlayerNotificationResource> NonStackableItems_CraftedNotification;
        [RTTI.Member(11, 0x50, "NonStackableItems")] public Ref<PlayerNotificationResource> NonStackableItems_PickedUpNotification;
        [RTTI.Member(12, 0x58, "NonStackableItems")] public Ref<PlayerNotificationResource> NonStackableItems_DroppedNotification;
        [RTTI.Member(13, 0x60, "NonStackableItems")] public Ref<PlayerNotificationResource> NonStackableItems_ObtainedNotification;
        [RTTI.Member(14, 0x68, "NonStackableItems")] public Ref<PlayerNotificationResource> NonStackableItems_RemovedNotification;
        [RTTI.Member(16, 0x70, "StackableItems")] public Ref<PlayerNotificationResource> StackableItems_CraftedNotification;
        [RTTI.Member(17, 0x78, "StackableItems")] public Ref<PlayerNotificationResource> StackableItems_PickedUpNotification;
        [RTTI.Member(18, 0x80, "StackableItems")] public Ref<PlayerNotificationResource> StackableItems_DroppedNotification;
        [RTTI.Member(19, 0x88, "StackableItems")] public Ref<PlayerNotificationResource> StackableItems_ObtainedNotification;
        [RTTI.Member(20, 0x90, "StackableItems")] public Ref<PlayerNotificationResource> StackableItems_RemovedNotification;
        [RTTI.Member(8, 0x98, "Logic")] public Ref<PlayerNotificationPriority> NotificationPriority;
    }

    [RTTI.Serializable(0x20A07C83119763FB, GameType.DS)]
    public class InventoryItem : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xC89B09D11CEA59D4, GameType.DS)]
    public class InventoryItemComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3B72863ECA4F20C7, GameType.DS)]
    public class InventoryItemComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "UI")] public Ref<LocalizedTextResource> LocalizedItemName;
        [RTTI.Member(4, 0x28, "UI")] public Ref<LocalizedTextResource> LocalizedItemDescription;
        [RTTI.Member(5, 0x30, "UI")] public Array<Ref<LocalizedTextResource>> ItemLocations;
        [RTTI.Member(6, 0x40, "UI")] public Array<Ref<LocalizedTextResource>> ItemUses;
        [RTTI.Member(7, 0x50, "UI")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(8, 0x58, "UI")] public Ref<UITexture> UIIconInactiveTexture;
        [RTTI.Member(9, 0x60, "UI")] public UUIDRef<UITexture> PreviewTexture;
        [RTTI.Member(10, 0x70, "UI")] public Ref<StatsDisplayResource> StatsDisplayResource;
        [RTTI.Member(11, 0x78, "UI")] public Ref<MovieResource> Movie;
        [RTTI.Member(13, 0x80, "Equipping")] public EEquipSlotType EquipSlotType;
        [RTTI.Member(14, 0x81, "Equipping")] public bool EquipsAutomatically;
        [RTTI.Member(15, 0x82, "Equipping")] public bool MustBeWieldedOrDropped;
        [RTTI.Member(17, 0x83, "Stacking")] public bool IsStackable;
        [RTTI.Member(18, 0x88, "Stacking")] public Array<int> MaxStackSize;
        [RTTI.Member(19, 0x98, "Stacking")] public Ref<IntegerFact> MaxStackSizeLevel;
        [RTTI.Member(21, 0xA0, "Dropping")] public bool IsDroppable;
        [RTTI.Member(22, 0xA8, "Dropping")] public Array<Ref<EntityComponentResource>> DroppedComponents;
        [RTTI.Member(24, 0xB8, "Misc")] public EInventoryItemRarity Rarity;
        [RTTI.Member(25, 0xB9, "Misc")] public EInventoryCategory CategoryOverride;
        [RTTI.Member(26, 0xBA, "Misc")] public bool PreventSaveToInventory;
        [RTTI.Member(27, 0xBC, "Misc")] public int SellValue;
        [RTTI.Member(29, 0xC0, "Events")] public Ref<GraphProgramResource> AddedToInventory;
        [RTTI.Member(30, 0xC8, "Events")] public Ref<GraphProgramResource> RemovedFromInventory;
        [RTTI.Member(32, 0xD0, "Quests")] public UUIDRef<QuestResource> Quest;
    }

    [RTTI.Serializable(0x66B6FB41BF75D807, GameType.DS)]
    public class InventoryItemRestoreState : RTTIRefObject
    {
        [RTTI.Member(2, 0x28)] public GGUUID ItemUUID;
        [RTTI.Member(3, 0x38)] public int Amount;
        [RTTI.Member(4, 0x40)] public StreamingRef<EntityResource> ItemResource;
        [RTTI.Member(5, 0x48)] public Array<Ref<InventoryItemRuntimeDataRestoreState>> RuntimeDataStates;
    }

    [RTTI.Serializable(0xFA68E12590C6B5CC, GameType.DS)]
    public class InventoryItemRuntimeData : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x8F936D6A8F5F9699, GameType.DS)]
    public class InventoryItemRuntimeDataCollection : StateObject
    {
    }

    [RTTI.Serializable(0xD05541230412D46B, GameType.DS)]
    public class InventoryItemRuntimeDataRestoreState : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x9E37CD8C5FE41324, GameType.DS)]
    public class InventoryItemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x57CB219ADE97E25A, GameType.DS)]
    public class InventoryLootPackageViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x3FC6DEA8EDD2F33A, GameType.DS)]
    public class InventoryPackageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x92A6A68D059D871E, GameType.DS)]
    public class InventoryPackageComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x28, "Logic")] public Array<Ref<LootSlot>> LootSlots;
        [RTTI.Member(4, 0x38, "Logic")] public Ref<LocalizedTextResource> UnOpenedItemNameModifier;
        [RTTI.Member(5, 0x40, "Logic")] public Ref<LocalizedTextResource> OpenedItemNameModifier;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<UITexture> OpenedUIIconTexture;
    }

    [RTTI.Serializable(0xB600B197998D280D, GameType.DS)]
    public class InventoryResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Dropping")] public Ref<EntityResource> DropCollectionEntity;
        [RTTI.Member(4, 0x28, "Dropping")] public float DropCollectionEntityRange;
        [RTTI.Member(5, 0x30, "Dropping")] public Ref<DispensableCategoryResource> DroppedItemDispensableCategory;
    }

    [RTTI.Serializable(0x5AFE4DB0B2585513, GameType.DS)]
    public class InventoryRestoreState : RTTIRefObject
    {
        [RTTI.Member(2, 0x28, true)] public Array<Ref<InventoryItemRestoreState>> InventoryItems;
        [RTTI.Member(3, 0x38, true)] public Array<GGUUID> SceneObjects;
        [RTTI.Member(4, 0x48, true)] public Array<GGUUID> ItemsOnceReceived;
        [RTTI.Member(5, 0x58, true)] public Array<Ref<BuyBackItemRestoreState>> BuyBackItemList;
        [RTTI.Member(6, 0x68, true)] public Array<Ref<StoredItemsRestoreState>> StoredItems;
    }

    [RTTI.Serializable(0x3E12A2C87D4D7378, GameType.DS)]
    public class InventorySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB3110A5F2E472D01, GameType.DS)]
    public class InventoryWeapon : InventoryEntity
    {
    }

    [RTTI.Serializable(0xC68A6583BCAC9819, GameType.DS)]
    public class InventoryWeaponResource : InventoryEntityResource
    {
        [RTTI.Member(73, 0x1D0, "Logic")] public bool ResetWeaponModeOnStow;
        [RTTI.Member(88, 0x1D4, "Animation")] public float WeaponModeSwitchStartDuration;
        [RTTI.Member(89, 0x1D8, "Animation")] public float WeaponModeSwitchFinishDuration;
        [RTTI.Member(74, 0x1DC, "Logic")] public bool ShouldUnloadWeaponOnModeSwitch;
        [RTTI.Member(86, 0x1E0, "Handling")] public float CarrySpeedModifier;
        [RTTI.Member(75, 0x1E4, "Logic")] public bool ShouldRotateToAim;
        [RTTI.Member(91, 0x1E8, "HUD")] public Ref<HUDCrosshairSettings> CombatCrosshair;
        [RTTI.Member(76, 0x1F0, "Logic")] public Ref<AimDeviationResource> AimDeviationResource;
        [RTTI.Member(77, 0x1F8, "Logic")] public bool CanOnlyFireAtHostiles;
        [RTTI.Member(78, 0x1F9, "Logic")] public bool RequiresCombatToFire;
        [RTTI.Member(79, 0x1FA, "Logic")] public bool AllowHipFire;
        [RTTI.Member(80, 0x1FB, "Logic")] public bool DropOnFireLastRound;
        [RTTI.Member(81, 0x1FC, "Logic")] public bool HasRecoverableRecoil;
        [RTTI.Member(82, 0x1FD, "Logic")] public bool FindTargetByRayCollision;
        [RTTI.Member(83, 0x200, "Logic")] public CPtr<EntityAction> StartAimingAction;
        [RTTI.Member(84, 0x208, "Logic")] public CPtr<EntityAction> StopAimingAction;
    }

    [RTTI.Serializable(0x773A12E1F876F87C, GameType.DS)]
    public class InventoryWeaponSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDBCFC4F2D06F2FB7, GameType.DS)]
    public class InverseWarpMountMode : MountMode
    {
    }

    [RTTI.Serializable(0x73349070BA1B6EC6, GameType.DS)]
    public class IsDeadAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0xB1C8BE519E42F8B, GameType.DS)]
    public class IsPartDeadAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<DestructibilityPart> Part;
    }

    [RTTI.Serializable(0xBAE938B365B2020B, GameType.DS)]
    public class IsSpecifiedEntityAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public UUIDRef<EntityResource> EntityResource;
        [RTTI.Member(8, 0x48, "Logic")] public String EntityType;
    }

    [RTTI.Serializable(0x36294B12170A23DB, GameType.DS)]
    public class IssueCreationParams : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public HashMap<String_IssueCreationProperty> Properties;
    }

    [RTTI.Serializable(0xF18F5F81511AFF2E, GameType.DS)]
    public class IssueCreationProperty : RTTIObject
    {
        [RTTI.Member(0, 0x50)] public String Value;
    }

    [RTTI.Serializable(0x5DD99CC3A61DAE0A, GameType.DS)]
    public class IssueCreationUserSettings : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public IssueProject Project;
        [RTTI.Member(3, 0x60)] public IssueType IssueType;
    }

    [RTTI.Serializable(0xC17C479F4F5B299, GameType.DS)]
    public class IssueData : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Key;
        [RTTI.Member(3, 0x28)] public WString Assignee;
        [RTTI.Member(4, 0x30)] public WString Summary;
        [RTTI.Member(5, 0x38)] public WString Status;
        [RTTI.Member(6, 0x40)] public WString Priority;
        [RTTI.Member(7, 0x48)] public WorldPosition Location;
        [RTTI.Member(8, 0x60)] public WString Resolution;
        [RTTI.Member(9, 0x68)] public WString IssueType;
        [RTTI.Member(10, 0x70)] public WString CustomType;
        [RTTI.Member(11, 0x78)] public Array<IssueLink> OutgoingLinks;
        [RTTI.Member(12, 0x88)] public Array<IssueLink> IncomingLinks;
        [RTTI.Member(13, 0x98)] public GGUUID AssetID;
        [RTTI.Member(14, 0xA8)] public WString AssetType;
        [RTTI.Member(15, 0xB0)] public Array<WString> Labels;
        [RTTI.Member(16, 0xC0)] public WString Level;
        [RTTI.Member(17, 0xC8)] public WString Class;
    }

    [RTTI.Serializable(0x94D2DEA12CC86110, GameType.DS)]
    public class IssueField
    {
        [RTTI.Member(0, 0x20)] public String Name;
        [RTTI.Member(1, 0x28)] public String Format;
        [RTTI.Member(3, 0x30)] public Array<String> AllowedValues;
        [RTTI.Member(2, 0x40)] public bool HasAutoComplete;
        [RTTI.Member(4, 0x41)] public bool Required;
    }

    [RTTI.Serializable(0xFCB4293A9B22CEBA, GameType.DS)]
    public class IssueLink : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public WString LinkKey;
        [RTTI.Member(1, 0x10)] public WString LinkType;
    }

    [RTTI.Serializable(0x7520527191220A63, GameType.DS)]
    public class IssuePriorityMetadata : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public RGBAColor StatusColor;
        [RTTI.Member(3, 0x28)] public Array<uint8> IconPNG;
        [RTTI.Member(4, 0x38)] public WString Name;
        [RTTI.Member(5, 0x40)] public int ID;
    }

    [RTTI.Serializable(0x41C444BCE7CB159D, GameType.DS)]
    public class IssueProject
    {
        [RTTI.Member(0, 0x20)] public String Key;
        [RTTI.Member(1, 0x30)] public Array<IssueType> IssueTypes;
    }

    [RTTI.Serializable(0xD4E0232C821315DF, GameType.DS)]
    public class IssueTrackingSettings : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String BaseAddress;
        [RTTI.Member(3, 0x28)] public String BaseAddressTestServer;
        [RTTI.Member(4, 0x30)] public Array<String> VisibleIssueFields;
        [RTTI.Member(5, 0x40)] public Array<String> IssueCreationIssueFields;
        [RTTI.Member(6, 0x50)] public Array<String> IssueCreationIssueFieldsTestServer;
    }

    [RTTI.Serializable(0xD3F2A6DF280C33B7, GameType.DS)]
    public class IssueTrackingUser : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Name;
        [RTTI.Member(3, 0x28)] public String EmailAddress;
        [RTTI.Member(4, 0x30)] public WString DisplayName;
        [RTTI.Member(5, 0x38)] public bool Active;
    }

    [RTTI.Serializable(0x1776C0FE633FA412, GameType.DS)]
    public class IssueType
    {
        [RTTI.Member(0, 0x20)] public String Name;
        [RTTI.Member(1, 0x28)] public HashMap<String_IssueField> Fields;
    }

    [RTTI.Serializable(0xBD1C0001EF853F0C, GameType.DS)]
    public class ItemOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC87B11CB7F016061, GameType.DS)]
    public class ItemOverrideComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x760EA5CC39BC0817, GameType.DS)]
    public class ItemProbabilityResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<EntityResource>> ItemTypes;
        [RTTI.Member(3, 0x30)] public int Amount;
        [RTTI.Member(4, 0x34)] public float Probability;
        [RTTI.Member(5, 0x38)] public float ProbabilityProgression;
    }

    [RTTI.Serializable(0xEE30BABBEB74C34A, GameType.DS)]
    public class ItemQuestReward : QuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<EntityResource> Item;
        [RTTI.Member(8, 0x40, "Logic")] public int Amount;
        [RTTI.Member(9, 0x44, "Logic")] public bool AllowOverflow;
    }

    [RTTI.Serializable(0xCE846D19BEB676B0, GameType.DS)]
    public class ItemRecipe : CraftingRecipe
    {
        [RTTI.Member(9, 0x58, "Logic")] public Ref<EntityResource> Item;
        [RTTI.Member(10, 0x60, "Logic")] public int Amount;
        [RTTI.Member(11, 0x64, "Logic")] public int UpgradedAmount;
        [RTTI.Member(12, 0x68, "Logic")] public Ref<MovieResource> Movie;
    }

    [RTTI.Serializable(0xDF74703C0A12374F, GameType.DS)]
    public class JobQuestDetailsUIDataBinding : QuestDetailsUIDataBinding
    {
        [RTTI.Member(2, 0x18)] public Ref<LocalizedTextResource> Item;
    }

    [RTTI.Serializable(0x9A88AEBADF1EF24F, GameType.DS)]
    public class JobQuestReward : QuestReward
    {
    }

    [RTTI.Serializable(0x6D765FC6706E30D, GameType.DS)]
    public class JoinGameRequestKIN : MatchRequest
    {
        [RTTI.Member(4, 0x38)] public String BuildID;
        [RTTI.Member(5, 0x40)] public String PlaylistID;
        [RTTI.Member(6, 0x48)] public String GameID;
    }

    [RTTI.Serializable(0x6489D2CDF3DA4D29, GameType.DS)]
    public class JoinPlayerRequest : MatchRequest
    {
        [RTTI.Member(4, 0x38)] public String TargetOnlineID;
        [RTTI.Member(5, 0x40)] public bool MustJoinGroup;
    }

    [RTTI.Serializable(0xD7BDECAC3779F9E9, GameType.DS)]
    public class JoinPlayerRequestKIN : JoinPlayerRequest
    {
        [RTTI.Member(6, 0x48)] public String BuildID;
    }

    [RTTI.Serializable(0x43837E21CF0943C2, GameType.DS)]
    public class JoinPlaylistMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String PlaylistID;
    }

    [RTTI.Serializable(0x5039FB0AB0E19D75, GameType.DS)]
    public class Joint
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public int16 ParentIndex;
    }

    [RTTI.Serializable(0x74F493E34B4FAB41, GameType.DS)]
    public class JointData
    {
        [RTTI.Member(0, 0x0)] public int JointId;
        [RTTI.Member(1, 0x10)] public RagdollJoint _JointData;
    }

    [RTTI.Serializable(0xB1A2134194CB261D, GameType.DS)]
    public class JointID
    {
        [RTTI.Member(0, 0x0)] public String JointName;
    }

    [RTTI.Serializable(0x1DC76AD404049C7, GameType.DS)]
    public class JointSetCollectionResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<JointSetIDToJointSet> Collection;
        [RTTI.Member(3, 0x48)] public Array<WeightedJointSetIDToJointSet> WeightedCollection;
    }

    [RTTI.Serializable(0xF9E69820E8F22F29, GameType.DS)]
    public class JointSetID : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xBF38000C0FD213C8, GameType.DS)]
    public class JointSetIDToJointSet
    {
        [RTTI.Member(0, 0x0)] public Ref<JointSetID> ID;
        [RTTI.Member(1, 0x8)] public Ref<JointSetResource> JointSet;
    }

    [RTTI.Serializable(0x49DFA98071DDB55E, GameType.DS)]
    public class JointSetResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<String> Joints;
        [RTTI.Member(3, 0x30)] public Array<Ref<JointSetResource>> SubSets;
        [RTTI.Member(4, 0x40)] public Array<DSJointWeight> Weights;
    }

    [RTTI.Serializable(0xD86E848C05E3319C, GameType.DS)]
    public class JoystickInputLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xB2FE893551B4332D, GameType.DS)]
    public class JoystickInputLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(11, 0x40, "Input")] public float HeadingSpeed;
        [RTTI.Member(12, 0x44, "Input")] public FRange HeadingLimits;
        [RTTI.Member(13, 0x4C, "Input")] public float PitchSpeed;
        [RTTI.Member(14, 0x50, "Input")] public FRange PitchLimits;
    }

    [RTTI.Serializable(0x6C5A3B3AA23EE7F5, GameType.DS)]
    public class JumpEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x93AD2A8C3F2007E8, GameType.DS)]
    public class JumpEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LabelEventResource> JumpLabelResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LabelEventResource> ReturnLabelResource;
        [RTTI.Member(10, 0x40, "Logic")] public int BlendFrames;
    }

    [RTTI.Serializable(0xFE3B1FFF8EC685D4, GameType.DS)]
    public class KJPAIJumpLink : AIJumpLink
    {
        [RTTI.Member(10, 0xA0)] public float ConnectionRadius;
        [RTTI.Member(11, 0xA4)] public bool SnapToTerrain;
        [RTTI.Member(12, 0xA8)] public Ref<NavMeshBuilderSettings> NavmeshAlignment;
        [RTTI.Member(13, 0xB0)] public float MinValidHeight;
        [RTTI.Member(14, 0xB4)] public float MaxValidHeight;
        [RTTI.Member(15, 0xB8)] public float MinValidDepth;
        [RTTI.Member(16, 0xBC)] public float MaxValidDepth;
        [RTTI.Member(17, 0xC0)] public float DesiredEntrySpeed;
        [RTTI.Member(18, 0xC4)] public float MaxExitSpeed;
        [RTTI.Member(19, 0xC8)] public WorldPosition JumpStartGroundPosition;
        [RTTI.Member(20, 0xE0)] public WorldPosition JumpEndGroundPosition;
        [RTTI.Member(21, 0xF8)] public bool Valid;
        [RTTI.Member(22, 0xF9)] public bool ValidStart;
        [RTTI.Member(23, 0xFA)] public bool ValidEnd;
        [RTTI.Member(24, 0xFD)] public bool StartCustomizedByUser;
        [RTTI.Member(25, 0xFE)] public bool EndCustomizedByUser;
    }

    [RTTI.Serializable(0x58073B1534C3AE1D, GameType.DS)]
    public class KJPAIJumpLinkGenerator : WorldNode
    {
        [RTTI.Member(5, 0x60, "JumpLinkGeneration")] public float Radius;
        [RTTI.Member(6, 0x68, "JumpLinkGeneration")] public Ref<NavMeshBuilderSettings> NavMeshSettings;
    }

    [RTTI.Serializable(0x31685562EDA42748, GameType.DS)]
    public class KJPAbsoluteTimeCurvePlaceholderEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC4513FA410A8735, GameType.DS)]
    public class KJPAbsoluteTimeCurvePlaceholderEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<AbsoluteTimeCurveResource> Curve;
    }

    [RTTI.Serializable(0x1316EFF2C6B166A, GameType.DS)]
    public class KJPAddEntityToShadowCompartmentListEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x869218F96E5DBE8B, GameType.DS)]
    public class KJPAddEntityToShadowCompartmentListEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x6D32E4A4DA16F11, GameType.DS)]
    public class KJPAddPaintEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x95A8123E39F98CDB, GameType.DS)]
    public class KJPAddPaintEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public uint32 PaintValueR_Layer0;
        [RTTI.Member(10, 0x3C, "Logic")] public uint32 PaintValueG_Layer0;
        [RTTI.Member(11, 0x40, "Logic")] public uint32 PaintValueB_Layer0;
        [RTTI.Member(12, 0x44, "Logic")] public uint32 PaintValueA_Layer0;
        [RTTI.Member(13, 0x48, "Logic")] public uint32 PaintValueR_Layer1;
        [RTTI.Member(14, 0x4C, "Logic")] public uint32 PaintValueG_Layer1;
        [RTTI.Member(15, 0x50, "Logic")] public uint32 PaintValueB_Layer1;
        [RTTI.Member(16, 0x54, "Logic")] public uint32 PaintValueA_Layer1;
        [RTTI.Member(17, 0x60, "Logic")] public Vec4 PaintValueLayer0;
        [RTTI.Member(18, 0x70, "Logic")] public Vec4 PaintValueLayer1;
        [RTTI.Member(19, 0x80, "Logic")] public bool IsSub;
        [RTTI.Member(20, 0x81, "Logic")] public bool IsClear;
    }

    [RTTI.Serializable(0x7C5E0332BB5144C1, GameType.DS)]
    public class KJPAnimatedAmbientVolumeEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB6A1B13B52381C65, GameType.DS)]
    public class KJPAnimatedAmbientVolumeEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public UUIDRef<AmbientVolume> AmbientVolumeData;
        [RTTI.Member(11, 0x40, "Logic")] public Ref<AmbientVolumeResource> MakeVolumeResource;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<CurveResource> OverrideAOScale;
        [RTTI.Member(10, 0x58, "Logic")] public bool KeepAnimatedChange;
    }

    [RTTI.Serializable(0x777BAA3851E9E40A, GameType.DS)]
    public class KJPAnimatedLayeredIrradianceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x970D58F48E529DDD, GameType.DS)]
    public class KJPAnimatedLayeredIrradianceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public UUIDRef<LayeredIrradianceDataForScene> LayeredIrradianceData;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<CurveResource> AffectScale;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<CurveResource> CompositeOrder;
        [RTTI.Member(11, 0x50, "Logic")] public bool KeepAnimatedChange;
    }

    [RTTI.Serializable(0xEC938FA830805E7F, GameType.DS)]
    public class KJPAnimatedLightEventInstance : LightEventInstanceBase
    {
    }

    [RTTI.Serializable(0x985D57E74FFD1C74, GameType.DS)]
    public class KJPAnimatedLightEventResource : LightEventResourceBase
    {
        [RTTI.Member(17, 0x68, "Logic")] public UUIDRef<Light> Light;
        [RTTI.Member(33, 0x78, "MiscSettings")] public Ref<CurveResource> DepthBiasCurveResource;
        [RTTI.Member(22, 0x80, "SpotLight")] public Ref<CurveResource> ConeAngleCurveResource;
        [RTTI.Member(23, 0x88, "SpotLight")] public Ref<CurveResource> HotSpotAngleCurveResource;
        [RTTI.Member(26, 0x90, "SpotLight")] public Ref<CurveResource> NearRangeCurveResource;
        [RTTI.Member(27, 0x98, "SpotLight")] public Ref<CurveResource> FarRangeCurveResource;
        [RTTI.Member(28, 0xA0, "SpotLight")] public Ref<CurveResource> DepthFadeRatioCurveResource;
        [RTTI.Member(34, 0xA8, "MiscSettings")] public Ref<CurveResource> VolumeLightAmountCurveResource;
        [RTTI.Member(35, 0xB0, "MiscSettings")] public Ref<CurveResource> VolumeLightAmountMinScaleCurveResource;
        [RTTI.Member(18, 0xB8, "Logic")] public Ref<CurveResource> AnimatedIntensityScale;
        [RTTI.Member(19, 0xC0, "Logic")] public OptionalAnimatableValue AnimatableEmitSpecular;
        [RTTI.Member(20, 0xE0, "Logic")] public OptionalAnimatableValue AnimatableCastShadow;
        [RTTI.Member(24, 0x100, "SpotLight")] public OptionalAnimatableValue ShadowConeAngle;
        [RTTI.Member(25, 0x120, "SpotLight")] public OptionalAnimatableValue ShadowHotSpotAngle;
        [RTTI.Member(30, 0x140, "OmniLight")] public OptionalAnimatableValue OmniFadeRadius;
        [RTTI.Member(31, 0x160, "OmniLight")] public OptionalAnimatableValue OmniFadeRatio;
    }

    [RTTI.Serializable(0xF48FB36C016F04A1, GameType.DS)]
    public class KJPAnimatedMirrorSurfaceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x227E689110BD79F1, GameType.DS)]
    public class KJPAnimatedMirrorSurfaceEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public UUIDRef<MirrorSurface> MirrirSurface;
        [RTTI.Member(13, 0x50, "Logic")] public OptionalAnimatableValue AnimatableActive;
    }

    [RTTI.Serializable(0xE604A41E8412E6DB, GameType.DS)]
    public class KJPAnimatedPostProcessEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x44721D6490AFD0E8, GameType.DS)]
    public class KJPAnimatedPostProcessEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "General")] public UUIDRef<RenderZone> RenderZone;
        [RTTI.Member(9, 0x40, "General")] public Ref<ScreenEffectResource> ScreenEffect;
        [RTTI.Member(10, 0x48, "General")] public Ref<CurveResource> BlendWeightCurve;
        [RTTI.Member(12, 0x50, "Blur")] public Ref<CurveResource> BlurPositionX;
        [RTTI.Member(13, 0x58, "Blur")] public Ref<CurveResource> BlurPositionY;
        [RTTI.Member(14, 0x60, "Blur")] public Ref<CurveResource> BlurInnerRadius;
        [RTTI.Member(15, 0x68, "Blur")] public Ref<CurveResource> BlurOuterRadius;
        [RTTI.Member(16, 0x70, "Blur")] public Ref<CurveResource> BlurScale;
        [RTTI.Member(17, 0x78, "Blur")] public Ref<CurveResource> MotionBlurScaleCenterX;
        [RTTI.Member(18, 0x80, "Blur")] public Ref<CurveResource> MotionBlurScaleCenterY;
        [RTTI.Member(19, 0x88, "Blur")] public Ref<CurveResource> MotionBlurScaleInner;
        [RTTI.Member(20, 0x90, "Blur")] public Ref<CurveResource> MotionBlurScaleOuter;
        [RTTI.Member(21, 0x98, "Blur")] public Ref<CurveResource> MotionBlurScaleInnerRadius;
        [RTTI.Member(22, 0xA0, "Blur")] public Ref<CurveResource> MotionBlurScaleOuterRadius;
        [RTTI.Member(23, 0xA8, "Blur")] public Ref<CurveResource> MotionBlurMaxBokeValue;
        [RTTI.Member(24, 0xB0, "Blur")] public bool BlurOverrideEnabled;
        [RTTI.Member(26, 0xB8, "Exposure")] public Ref<CurveResource> MinExposureValue;
        [RTTI.Member(27, 0xC0, "Exposure")] public Ref<CurveResource> MaxExposureValue;
        [RTTI.Member(28, 0xC8, "Exposure")] public Ref<CurveResource> MaxExposureIncrease;
        [RTTI.Member(29, 0xD0, "Exposure")] public Ref<CurveResource> MaxExposureDecrease;
        [RTTI.Member(30, 0xD8, "Exposure")] public Ref<CurveResource> OverExposureValue;
        [RTTI.Member(31, 0xE0, "Exposure")] public bool ExposureOverrideEnabled;
        [RTTI.Member(33, 0xE8, "LightShaft")] public bool Enabled;
        [RTTI.Member(34, 0xE9, "LightShaft")] public bool UseAngularOffsetsDirectly;
        [RTTI.Member(35, 0xEA, "LightShaft")] public bool UseTemporalFilter;
        [RTTI.Member(36, 0xF0, "LightShaft")] public Ref<CurveResource> HorizontalAngularOffset;
        [RTTI.Member(37, 0xF8, "LightShaft")] public Ref<CurveResource> VerticalAngularOffset;
        [RTTI.Member(38, 0x100, "LightShaft")] public Ref<CurveResource> MaskPower;
        [RTTI.Member(39, 0x108, "LightShaft")] public Ref<CurveResource> Intensity;
        [RTTI.Member(40, 0x110, "LightShaft")] public Ref<CurveResource> FalloffAnglePower;
        [RTTI.Member(41, 0x118, "LightShaft")] public Ref<CurveResource> BlendColorR;
        [RTTI.Member(42, 0x120, "LightShaft")] public Ref<CurveResource> BlendColorG;
        [RTTI.Member(43, 0x128, "LightShaft")] public Ref<CurveResource> BlendColorB;
        [RTTI.Member(44, 0x130, "LightShaft")] public Ref<CurveResource> BlendColorA;
        [RTTI.Member(45, 0x138, "LightShaft")] public Ref<CurveResource> MultiplyColorR;
        [RTTI.Member(46, 0x140, "LightShaft")] public Ref<CurveResource> MultiplyColorG;
        [RTTI.Member(47, 0x148, "LightShaft")] public Ref<CurveResource> MultiplyColorB;
        [RTTI.Member(48, 0x150, "LightShaft")] public Ref<CurveResource> MultiplyColorA;
        [RTTI.Member(49, 0x158, "LightShaft")] public Ref<CurveResource> RadialBlurDecay;
        [RTTI.Member(50, 0x160, "LightShaft")] public Ref<CurveResource> RadialBlurDistanceMultiplier;
        [RTTI.Member(51, 0x168, "LightShaft")] public Ref<CurveResource> RadialBlurWeight;
        [RTTI.Member(52, 0x170, "LightShaft")] public Ref<CurveResource> RadialBlurAttenuationMultiplier;
        [RTTI.Member(53, 0x178, "LightShaft")] public bool LightShaftOverrideEnabled;
        [RTTI.Member(55, 0x180, "OpticalAberration")] public bool DistortionEnabled;
        [RTTI.Member(57, 0x181, "OpticalAberration")] public bool ChromaticAberrationEnabled;
        [RTTI.Member(56, 0x188, "OpticalAberration")] public Ref<CurveResource> DistortionIntensity;
        [RTTI.Member(58, 0x190, "OpticalAberration")] public Ref<CurveResource> ChromaticAberrationIntensity;
        [RTTI.Member(59, 0x198, "OpticalAberration")] public bool OpticalAberrationOverrideEnabled;
        [RTTI.Member(61, 0x1A0, "Bloom")] public Ref<CurveResource> BlackPoint;
        [RTTI.Member(62, 0x1A8, "Bloom")] public Ref<CurveResource> WhitePoint;
        [RTTI.Member(63, 0x1B0, "Bloom")] public Ref<CurveResource> Strength;
        [RTTI.Member(64, 0x1B8, "Bloom")] public Ref<CurveResource> SuppressFireflies;
        [RTTI.Member(65, 0x1C0, "Bloom")] public bool BloomEnabled;
    }

    [RTTI.Serializable(0xCC53502495AA8E9A, GameType.DS)]
    public class KJPAnimatedSHLightVolumeEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1F5F3D02D7B9574D, GameType.DS)]
    public class KJPAnimatedSHLightVolumeEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public UUIDRef<SHLightVolume> TargetSHLightVolume;
        [RTTI.Member(14, 0x40, "Logic")] public Ref<SHLightVolumeResource> MakeVolumeResource;
        [RTTI.Member(15, 0x48, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<CurveResource> OverridePositiveIntensity;
        [RTTI.Member(10, 0x58, "Logic")] public Ref<CurveResource> OverrideNegativeIntensity;
        [RTTI.Member(11, 0x60, "Logic")] public Ref<CurveResource> OverrideSkyVisibility;
        [RTTI.Member(12, 0x68, "Logic")] public Ref<CurveResource> OverrideBlendWeight;
        [RTTI.Member(13, 0x70, "Logic")] public bool KeepAnimatedChange;
    }

    [RTTI.Serializable(0x92DD8E986FCC0035, GameType.DS)]
    public class KJPAnimatedShaderEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE0B1D7D5962E9588, GameType.DS)]
    public class KJPAnimatedShaderEventResource : TimedEventResource
    {
        [RTTI.Member(10, 0x38, "Logic")] public String ShaderVariable;
        [RTTI.Member(9, 0x40, "Logic")] public String ArtPartsMeshName;
        [RTTI.Member(8, 0x48, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<CurveResource> CurveResource;
        [RTTI.Member(12, 0x59, "Logic")] public bool ResetOnStop;
        [RTTI.Member(13, 0x5A, "Logic")] public bool AddOriginalValue;
    }

    [RTTI.Serializable(0x3DB7102B017EC460, GameType.DS)]
    public class KJPAnimatedShaderFloat3EventResource : TimedEventResource
    {
        [RTTI.Member(10, 0x30, "Logic")] public String ShaderVariable;
        [RTTI.Member(9, 0x38, "Logic")] public String ArtPartsMeshName;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<CurveResource> CurveResourceX;
        [RTTI.Member(12, 0x50, "Logic")] public Ref<CurveResource> CurveResourceY;
        [RTTI.Member(13, 0x58, "Logic")] public Ref<CurveResource> CurveResourceZ;
        [RTTI.Member(14, 0x61, "Logic")] public bool ResetOnStop;
        [RTTI.Member(15, 0x62, "Logic")] public bool AddOriginalValue;
    }

    [RTTI.Serializable(0x8E5096668BED3630, GameType.DS)]
    public class KJPAnimatedShaderFloat4EventResource : TimedEventResource
    {
        [RTTI.Member(10, 0x30, "Logic")] public String ShaderVariable;
        [RTTI.Member(9, 0x38, "Logic")] public String ArtPartsMeshName;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<CurveResource> CurveResourceX;
        [RTTI.Member(12, 0x50, "Logic")] public Ref<CurveResource> CurveResourceY;
        [RTTI.Member(13, 0x58, "Logic")] public Ref<CurveResource> CurveResourceZ;
        [RTTI.Member(14, 0x60, "Logic")] public Ref<CurveResource> CurveResourceW;
        [RTTI.Member(15, 0x69, "Logic")] public bool ResetOnStop;
        [RTTI.Member(16, 0x6A, "Logic")] public bool AddOriginalValue;
    }

    [RTTI.Serializable(0x47B669BF4A247C6B, GameType.DS)]
    public class KJPBlastAttackEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE7ABEC965DAFE93B, GameType.DS)]
    public class KJPBlastAttackEventResource : TimedEventResource
    {
        [RTTI.Member(9, 0x30, "Transform")] public String HelperName;
        [RTTI.Member(8, 0x38, "Transform")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(11, 0x40, "Attack")] public EDSAttackId AttackId;
        [RTTI.Member(13, 0x44, "Attack")] public EPhysicsCollisionLayerGame LayerForAttack;
        [RTTI.Member(12, 0x48, "Attack")] public float OverwriteRange;
    }

    [RTTI.Serializable(0x7EA8356849EB5E18, GameType.DS)]
    public class KJPBoostMeshEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xEB20BA5413CD5EA8, GameType.DS)]
    public class KJPBoostMeshEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public Ref<MeshResourceBase> MeshResource;
    }

    [RTTI.Serializable(0xE6346BED859E5D4, GameType.DS)]
    public class KJPBulletEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x9143876BDA6C1A77, GameType.DS)]
    public class KJPBulletEventResource : TimedEventResource
    {
        [RTTI.Member(9, 0x30, "Transform")] public String HelperName;
        [RTTI.Member(8, 0x38, "Transform")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(11, 0x40, "Weapon")] public EDSWeaponId WeaponId;
        [RTTI.Member(12, 0x41, "Weapon")] public EDSMagazineId MagazineId;
        [RTTI.Member(13, 0x44, "Weapon")] public float FiringIntervalTime;
        [RTTI.Member(14, 0x48, "Weapon")] public float SpreadAngle;
        [RTTI.Member(15, 0x4C, "Weapon")] public bool IsIgnoreCharacter;
        [RTTI.Member(16, 0x50, "Weapon")] public Ref<EffectComponentResource> MuzzleEffectResource;
    }

    [RTTI.Serializable(0x628F7362986826FC, GameType.DS)]
    public class KJPCascadeShadowSettings
    {
        [RTTI.Member(0, 0x4)] public KjpCascadeShadowParam Cascade_0;
        [RTTI.Member(1, 0xC)] public KjpCascadeShadowParam Cascade_1;
    }

    [RTTI.Serializable(0x5B9541D62EE29E4A, GameType.DS)]
    public class KJPCascadeShadowSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public KJPCascadeShadowSettings Settings;
    }

    [RTTI.Serializable(0xB4096DD89664B170, GameType.DS)]
    public class KJPCubemapZoneEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x12E18B80B54E0211, GameType.DS)]
    public class KJPCubemapZoneEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "General")] public Ref<CubemapZone> CubemapZone;
        [RTTI.Member(9, 0x38, "General")] public Ref<CurveResource> IntensityCurveResource;
        [RTTI.Member(10, 0x40, "General")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(11, 0x48, "General")] public bool KeepAnimatedChange;
    }

    [RTTI.Serializable(0x358C22B222220A02, GameType.DS)]
    public class KJPDecalManagerEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x44AC9AE7518EC0CB, GameType.DS)]
    public class KJPDecalManagerEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EDecalManagerEventType EventType;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<CurveResource> AlphaCurveResource;
    }

    [RTTI.Serializable(0xF25448A80E6FC2C5, GameType.DS)]
    public class KJPEnableCapsuleComponentEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8E3CB66C5E7005D9, GameType.DS)]
    public class KJPEnableCapsuleComponentEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x6EAE2962E1C0CF7C, GameType.DS)]
    public class KJPEnableEntityCollisionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x394538D785EE0DDA, GameType.DS)]
    public class KJPEnableEntityCollisionEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool Enable;
        [RTTI.Member(10, 0x41, "Logic")] public bool KeepState;
    }

    [RTTI.Serializable(0x578813459EA384D7, GameType.DS)]
    public class KJPEnvironmentInteractionControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x46C669A6E5B48962, GameType.DS)]
    public class KJPEnvironmentInteractionControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool SkipUpdate;
        [RTTI.Member(9, 0x31, "Logic")] public bool DisableSnowMud;
    }

    [RTTI.Serializable(0xF6B570A35228194F, GameType.DS)]
    public class KJPExtraForwardComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7CB70BBF72F0B26, GameType.DS)]
    public class KJPExtraForwardComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF3E238D1DD7912BC, GameType.DS)]
    public class KJPExtraForwardComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool EnableExtraForward;
    }

    [RTTI.Serializable(0x8BAEEA478F9905CC, GameType.DS)]
    public class KJPFactPauseSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC4CFF6EAFA2F48B9, GameType.DS)]
    public class KJPFactPauseSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public ESequenceFactContextType FactContextType;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<BooleanFact> UnpauseFact;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<GraphProgramResource> PausedGraphProgram;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<GraphProgramResource> UnpausedGraphProgram;
        [RTTI.Member(13, 0x60, "Logic")] public bool IsInverted;
        [RTTI.Member(14, 0x61, "Logic")] public bool RestrictSoundPause;
    }

    [RTTI.Serializable(0xC18EED44E04C9D40, GameType.DS)]
    public class KJPFactPlaceholder : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<RTTIRefObject> Fact;
        [RTTI.Member(1, 0x10)] public String Value;
    }

    [RTTI.Serializable(0xDBAEC461595E20BB, GameType.DS)]
    public class KJPFogSettings
    {
        [RTTI.Member(1, 0x0, "Common")] public float ShadowInfluence;
        [RTTI.Member(2, 0x4, "Common")] public float LongDistanceShadowInfluence;
        [RTTI.Member(3, 0x8, "Common")] public float FakeAmbientOcclusion;
        [RTTI.Member(4, 0xC, "Common")] public float SunlightAttenuationByHaze;
        [RTTI.Member(6, 0x10, "Haze")] public Vec4 HazeDiffuseAlbedo;
        [RTTI.Member(7, 0x20, "Haze")] public Vec4 HazeSpecularAlbedo;
        [RTTI.Member(8, 0x30, "Haze")] public float HazeRayleighDensity;
        [RTTI.Member(9, 0x34, "Haze")] public float HazeMieDensity;
        [RTTI.Member(10, 0x38, "Haze")] public float HazeMieAbsorption;
        [RTTI.Member(11, 0x3C, "Haze")] public float HazeCurvature;
        [RTTI.Member(12, 0x40, "Haze")] public float HazeScaleHeight;
        [RTTI.Member(13, 0x44, "Haze")] public float HazeNear;
        [RTTI.Member(14, 0x48, "Haze")] public float HazeLightShaftIntensity;
        [RTTI.Member(16, 0x50, "GlobalVolumetricFog")] public Vec4 GlobalFogDiffuseAlbedo;
        [RTTI.Member(17, 0x60, "GlobalVolumetricFog")] public Vec4 GlobalFogEmission;
        [RTTI.Member(18, 0x70, "GlobalVolumetricFog")] public float GlobalFogRayleighDensity;
        [RTTI.Member(19, 0x74, "GlobalVolumetricFog")] public float GlobalFogMieDensity;
        [RTTI.Member(20, 0x78, "GlobalVolumetricFog")] public float GlobalFogMieAbsorption;
        [RTTI.Member(21, 0x7C, "GlobalVolumetricFog")] public float GlobalFogCurvature;
        [RTTI.Member(22, 0x80, "GlobalVolumetricFog")] public float GlobalFogScaleHeight;
        [RTTI.Member(23, 0x84, "GlobalVolumetricFog")] public float GlobalFogHeightBias;
        [RTTI.Member(24, 0x88, "GlobalVolumetricFog")] public float GlobalFogNear;
        [RTTI.Member(25, 0x8C, "GlobalVolumetricFog")] public float GlobalFogFar;
        [RTTI.Member(27, 0x90, "HeightMapFog")] public Vec4 HeightMapFogAlbedo;
        [RTTI.Member(28, 0xA0, "HeightMapFog")] public float HeightMapFogMieDensity;
        [RTTI.Member(29, 0xA4, "HeightMapFog")] public float HeightMapFogHeightBias;
        [RTTI.Member(30, 0xA8, "HeightMapFog")] public float HeightMapFogHeightScale;
        [RTTI.Member(31, 0xAC, "HeightMapFog")] public float HeightMapFogStartDistance;
        [RTTI.Member(32, 0xB0, "HeightMapFog")] public float HeightMapFogEndDistance;
        [RTTI.Member(34, 0xC0, "WeatherMapFog")] public Vec4 WeatherMapFogAlbedo;
        [RTTI.Member(36, 0xD0, "WeatherMapFog")] public float WeatherMapFogMieAbsorption;
        [RTTI.Member(35, 0xD4, "WeatherMapFog")] public float WeatherMapFogMieDensity;
        [RTTI.Member(37, 0xD8, "WeatherMapFog")] public float WeatherMapFogScaleHeight;
        [RTTI.Member(38, 0xDC, "WeatherMapFog")] public float WeatherMapFogHeightBias;
        [RTTI.Member(39, 0xE0, "WeatherMapFog")] public float WeatherMapFogInfection;
        [RTTI.Member(41, 0xE4, "Noise")] public float NoiseExponent;
        [RTTI.Member(42, 0xE8, "Noise")] public float NoiseScale;
    }

    [RTTI.Serializable(0x5773842DAE4FF915, GameType.DS)]
    public class KJPFogSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public KJPFogSettings Settings;
    }

    [RTTI.Serializable(0x22F633150B9807D6, GameType.DS)]
    public class KJPForceCameraPredictionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xCB633230E0CF6FB1, GameType.DS)]
    public class KJPForceCameraPredictionEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public UUIDRef<SequenceNetworkResource> SequenceNetwork;
    }

    [RTTI.Serializable(0xBBC35574BD9E746E, GameType.DS)]
    public class KJPForceFieldResetEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE5FD9413390393CE, GameType.DS)]
    public class KJPForceFieldResetEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float ResetTime;
    }

    [RTTI.Serializable(0xD3097DE23BE6CCC5, GameType.DS)]
    public class KJPGameMovieEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x861078627D11E12D, GameType.DS)]
    public class KJPGameMovieEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<MovieResource> MovieResource;
        [RTTI.Member(9, 0x38, "Logic")] public int MovieStartFrame;
        [RTTI.Member(10, 0x3C, "Logic")] public bool ImmediatelyTransition;
    }

    [RTTI.Serializable(0xB2FB4CBB296F5D5, GameType.DS)]
    public class KJPHideActorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x93D49F50ADB8B7CC, GameType.DS)]
    public class KJPHideActorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<CurveResource> VisibilityCurve;
        [RTTI.Member(10, 0x48, "Logic")] public bool ExcludeChildren;
        [RTTI.Member(11, 0x49, "Logic")] public bool IsForced;
    }

    [RTTI.Serializable(0xE68D95057726415B, GameType.DS)]
    public class KJPHideMeshEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5B6AEF32F5128518, GameType.DS)]
    public class KJPHideMeshEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public String MeshName;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<CurveResource> VisibilityCurve;
        [RTTI.Member(11, 0x50, "Logic")] public bool HideMesh;
        [RTTI.Member(12, 0x51, "Logic")] public bool KeepVisibility;
    }

    [RTTI.Serializable(0x2CAC590FFA109E51, GameType.DS)]
    public class KJPLightAnimatedEventInstance : KJPLightEventInstance
    {
        [RTTI.Member(3, 0x78, "General")] public WorldTransform Orientation;
        [RTTI.Member(4, 0x140, "General")] public CPtr<LocatorInstance> ParentLocator;
    }

    [RTTI.Serializable(0x651E6E82E17FFA1C, GameType.DS)]
    public class KJPLightAnimatedEventResource : KJPLightEventResource
    {
        [RTTI.Member(34, 0x180, "Logic")] public Ref<LocatorResource> ParentLocator;
        [RTTI.Member(35, 0x188, "Logic")] public AnimatableValue TranslateX;
        [RTTI.Member(36, 0x1A0, "Logic")] public AnimatableValue TranslateY;
        [RTTI.Member(37, 0x1B8, "Logic")] public AnimatableValue TranslateZ;
        [RTTI.Member(38, 0x1D0, "Logic")] public AnimatableValue RotateX;
        [RTTI.Member(39, 0x1E8, "Logic")] public AnimatableValue RotateY;
        [RTTI.Member(40, 0x200, "Logic")] public AnimatableValue RotateZ;
    }

    [RTTI.Serializable(0x303A09804618A5, GameType.DS)]
    public class KJPLightEventInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xB3E94C13A414C2E4, GameType.DS)]
    public class KJPLightEventResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Light")] public OptionalAnimatableValue Intensity;
        [RTTI.Member(9, 0x50, "Light")] public Ref<LightResource> LightResource;
        [RTTI.Member(14, 0x60, "Light")] public Vec3 LightForward;
        [RTTI.Member(11, 0x70, "Light", true)] public bool KeepIntensity;
        [RTTI.Member(12, 0x71, "Light")] public bool KeepState;
        [RTTI.Member(13, 0x72, "Light")] public bool DontResetOnStop;
        [RTTI.Member(10, 0x73, "Light")] public bool LoopIntensity;
        [RTTI.Member(30, 0x78, "MiscSettings")] public Ref<CurveResource> DepthBiasCurveResource;
        [RTTI.Member(19, 0x80, "SpotLight")] public Ref<CurveResource> ConeAngleCurveResource;
        [RTTI.Member(20, 0x88, "SpotLight")] public Ref<CurveResource> HotSpotAngleCurveResource;
        [RTTI.Member(23, 0x90, "SpotLight")] public Ref<CurveResource> NearRangeCurveResource;
        [RTTI.Member(24, 0x98, "SpotLight")] public Ref<CurveResource> FarRangeCurveResource;
        [RTTI.Member(25, 0xA0, "SpotLight")] public Ref<CurveResource> DepthFadeRatioCurveResource;
        [RTTI.Member(31, 0xA8, "MiscSettings")] public Ref<CurveResource> VolumeLightAmountCurveResource;
        [RTTI.Member(32, 0xB0, "MiscSettings")] public Ref<CurveResource> VolumeLightAmountMinScaleCurveResource;
        [RTTI.Member(15, 0xB8, "Light")] public Ref<CurveResource> AnimatedIntensityScale;
        [RTTI.Member(16, 0xC0, "Light")] public OptionalAnimatableValue AnimatableEmitSpecular;
        [RTTI.Member(17, 0xE0, "Light")] public OptionalAnimatableValue AnimatableCastShadow;
        [RTTI.Member(21, 0x100, "SpotLight")] public OptionalAnimatableValue ShadowConeAngle;
        [RTTI.Member(22, 0x120, "SpotLight")] public OptionalAnimatableValue ShadowHotSpotAngle;
        [RTTI.Member(27, 0x140, "OmniLight")] public OptionalAnimatableValue OmniFadeRadius;
        [RTTI.Member(28, 0x160, "OmniLight")] public OptionalAnimatableValue OmniFadeRatio;
    }

    [RTTI.Serializable(0xC4CADE1025341C58, GameType.DS)]
    public class KJPLightPositionEventInstance : KJPLightEventInstance
    {
    }

    [RTTI.Serializable(0xAFF83359FB2A1B7C, GameType.DS)]
    public class KJPLightPositionEventResource : KJPLightEventResource
    {
        [RTTI.Member(34, 0x180, "Logic")] public WorldTransform WorldMatrix;
        [RTTI.Member(35, 0x1C0, "Logic")] public bool RelativeToSequence;
        [RTTI.Member(36, 0x1C1, "Logic")] public bool IsFixed;
    }

    [RTTI.Serializable(0x69357A67339FE6CA, GameType.DS)]
    public class KJPLightRelativePositionEventInstance : KJPLightEventInstance
    {
    }

    [RTTI.Serializable(0x9B115C903FC6D224, GameType.DS)]
    public class KJPLightRelativePositionEventResource : KJPLightEventResource
    {
        [RTTI.Member(34, 0x180, "Logic")] public Ref<LocatorResource> ParentLocatorResource;
        [RTTI.Member(35, 0x190, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xB4A2A172E1B7EC35, GameType.DS)]
    public class KJPLightningEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7B097C796FC292D7, GameType.DS)]
    public class KJPLightningEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Transform")] public Ref<LocatorResource> LocatorEntityActorResource;
        [RTTI.Member(10, 0x38, "Attribute")] public EKJPLightningEventMode Mode;
        [RTTI.Member(13, 0x40, "Attribute")] public Ref<CurveResource> IntensityCurve;
        [RTTI.Member(12, 0x48, "Attribute")] public float Intensity;
        [RTTI.Member(14, 0x4C, "Attribute")] public float LifeTime;
        [RTTI.Member(15, 0x50, "Attribute")] public float Radius;
        [RTTI.Member(11, 0x54, "Attribute")] public bool UseAutoExposure;
    }

    [RTTI.Serializable(0x8DFDD22CCACA251C, GameType.DS)]
    public class KJPLongDistanceShadowFlatBlendWeightEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4B762DF457B62A9B, GameType.DS)]
    public class KJPLongDistanceShadowFlatBlendWeightEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> BlendWeight;
    }

    [RTTI.Serializable(0x29A0364D0B6F5541, GameType.DS)]
    public class KJPMenuPauseSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC971AA4AD1FB025E, GameType.DS)]
    public class KJPMenuPauseSequenceEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xCC49C7A7C427EFBF, GameType.DS)]
    public class KJPOpticalAberrationSettings
    {
        [RTTI.Member(1, 0x0, "Distortion")] public bool DistortionEnabled;
        [RTTI.Member(2, 0x4, "Distortion")] public float DistortionIntensity;
        [RTTI.Member(3, 0x8, "Distortion")] public float DistortionFalloffIntensity;
        [RTTI.Member(4, 0xC, "Distortion")] public float DistortionFalloffPower0;
        [RTTI.Member(5, 0x10, "Distortion")] public float DistortionFalloffPower1;
        [RTTI.Member(6, 0x14, "Distortion")] public EKJPDistortionFalloffType DistortionFalloffType;
        [RTTI.Member(7, 0x18, "Distortion")] public bool DistortionUseScreenAspectRatio;
        [RTTI.Member(9, 0x19, "ChromaticAberration")] public bool ChromaticAberrationEnabled;
        [RTTI.Member(10, 0x1C, "ChromaticAberration")] public EKJPChromaticAberrationSampleCount ChromaticAberrationSampleCount;
        [RTTI.Member(11, 0x20, "ChromaticAberration")] public float ChromaticAberrationIntensity;
    }

    [RTTI.Serializable(0x387E33374F1CFD3F, GameType.DS)]
    public class KJPOpticalAberrationSettingsInstance : KJPOpticalAberrationSettingsResource
    {
    }

    [RTTI.Serializable(0x28A7593DD3A94A63, GameType.DS)]
    public class KJPOpticalAberrationSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public KJPOpticalAberrationSettings KJPOpticalAberrationSettings;
    }

    [RTTI.Serializable(0x1E56D05437356A13, GameType.DS)]
    public class KJPOverrideCameraDoFEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF7349C8F2AA90407, GameType.DS)]
    public class KJPOverrideCameraDoFEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<CurveResource> Aperture;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<CurveResource> FocusDistance;
        [RTTI.Member(23, 0x48, "TransitionByAperture")] public Ref<CurveResource> FocusBracketCurve;
        [RTTI.Member(24, 0x50, "TransitionByAperture")] public Ref<CurveResource> FocusFalloffCurve;
        [RTTI.Member(26, 0x58, "MaxFuzzyByAperture")] public Ref<CurveResource> MaxFuzzyNearCurve;
        [RTTI.Member(27, 0x60, "MaxFuzzyByAperture")] public Ref<CurveResource> MaxFuzzyFarCurve;
        [RTTI.Member(19, 0x68, "TransitionByFrame")] public Ref<CurveResource> FocalRegionCurve;
        [RTTI.Member(20, 0x70, "TransitionByFrame")] public Ref<CurveResource> NearTransitionCurve;
        [RTTI.Member(21, 0x78, "TransitionByFrame")] public Ref<CurveResource> FarTransitionCurve;
        [RTTI.Member(10, 0x80, "Logic")] public float DegreeOfFocusBreathing;
        [RTTI.Member(12, 0x88, "Formula")] public bool Enabled;
        [RTTI.Member(13, 0x90, "Formula")] public Ref<CurveResource> FocusRegionScale;
        [RTTI.Member(14, 0x98, "Formula")] public Ref<CurveResource> NearFuzzyScale;
        [RTTI.Member(15, 0xA0, "Formula")] public Ref<CurveResource> FarFuzzyScale;
        [RTTI.Member(17, 0xA8, "Options")] public Ref<CurveResource> LayerOcclusion;
    }

    [RTTI.Serializable(0x491409BAAB2595E0, GameType.DS)]
    public class KJPOverrideCameraPropertiesEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xCC7F030CE8D0D9AE, GameType.DS)]
    public class KJPOverrideCameraPropertiesEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> NearPlane;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<CurveResource> FarPlane;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<CurveResource> EnableCameraCut;
    }

    [RTTI.Serializable(0x2323B26794F004A0, GameType.DS)]
    public class KJPOverrideCascadeEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x2ED83EFAB9A599DC, GameType.DS)]
    public class KJPOverrideCascadeEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public uint32 Index;
        [RTTI.Member(9, 0x34, "Logic")] public float Distance;
        [RTTI.Member(10, 0x38, "Logic")] public Ref<CurveResource> DistanceCurve;
    }

    [RTTI.Serializable(0xD9EAF1BCFC63D72B, GameType.DS)]
    public class KJPParticleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x662DD0F52202CF1C, GameType.DS)]
    public class KJPParticleEventResource : TimedEventResource
    {
        [RTTI.Member(12, 0x30, "Particle")] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(9, 0x38, "Transform")] public String HelperName;
        [RTTI.Member(8, 0x40, "Transform")] public Ref<LocatorResource> LocatorEntityActorResource;
        [RTTI.Member(27, 0x48, "Size")] public Ref<CurveResource> SizeCurve;
        [RTTI.Member(29, 0x50, "EmitRate")] public Ref<CurveResource> EmitRateCurve;
        [RTTI.Member(35, 0x58, "Rotation")] public Ref<CurveResource> RotationXCurve;
        [RTTI.Member(36, 0x60, "Rotation")] public Ref<CurveResource> RotationYCurve;
        [RTTI.Member(37, 0x68, "Rotation")] public Ref<CurveResource> RotationZCurve;
        [RTTI.Member(22, 0x70, "TranslateOffset")] public Ref<CurveResource> TranslateXCurve;
        [RTTI.Member(23, 0x78, "TranslateOffset")] public Ref<CurveResource> TranslateYCurve;
        [RTTI.Member(24, 0x80, "TranslateOffset")] public Ref<CurveResource> TranslateZCurve;
        [RTTI.Member(32, 0x88, "Color")] public Ref<CurveResource> ColorAlphaCurve;
        [RTTI.Member(31, 0x90, "Color")] public RGBAColor BaseColor;
        [RTTI.Member(34, 0x94, "Rotation")] public ERotationOrder RotationOrder;
        [RTTI.Member(14, 0x98, "Particle")] public uint32 RandomSeed;
        [RTTI.Member(20, 0x9C, "Repeat")] public float RepeatSecond;
        [RTTI.Member(13, 0xA0, "Particle")] public bool AutoRandomSeed;
        [RTTI.Member(25, 0xA1, "TranslateOffset")] public bool TranslateIsAlignToWorld;
        [RTTI.Member(38, 0xA2, "Rotation")] public bool RotationIsAlignToWorld;
        [RTTI.Member(19, 0xA3, "Repeat")] public bool Repeat;
        [RTTI.Member(15, 0xA4, "Particle")] public bool NotSyncParentVisible;
        [RTTI.Member(16, 0xA5, "Particle")] public bool ForceTrailConnectFromMatrix;
        [RTTI.Member(10, 0xA6, "Transform")] public bool HelperIsTranslateOnly;
        [RTTI.Member(17, 0xA7, "Particle")] public bool LoseOwnershipOnStop;
    }

    [RTTI.Serializable(0x345E67B8F5AFE944, GameType.DS)]
    public class KJPParticleSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> ParticleGPUInitMemZeroFillShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> ParticleGPUInitEmissionShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> ParticleGPUEmissionShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> ParticleGPUInitSimulationShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> ParticleGPUSimulationShader;
        [RTTI.Member(7, 0x48)] public Ref<Texture> ParticleGPUEmissionNoiseTexture;
    }

    [RTTI.Serializable(0xD5569FF2C595BA36, GameType.DS)]
    public class KJPParticleSystemEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6E2AAD71BBC02031, GameType.DS)]
    public class KJPParticleSystemEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "System")] public bool ClearLoseOwnershipParticles;
    }

    [RTTI.Serializable(0x27DB33BA4BE1B683, GameType.DS)]
    public class KJPPauseSequenceEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x82C0F6958907D1CE, GameType.DS)]
    public class KJPPauseSequenceEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public float PauseTime;
        [RTTI.Member(7, 0x2C, "Logic")] public bool RestrictSoundPause;
    }

    [RTTI.Serializable(0x80034D2DB3A334F0, GameType.DS)]
    public class KJPPlayerBoneConstraintLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x6891F031823AAAD8, GameType.DS)]
    public class KJPPlayerBoneConstraintLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public WorldTransform WorldMatrix;
        [RTTI.Member(9, 0x70, "Logic")] public String BoneName;
        [RTTI.Member(10, 0x78, "Logic")] public float MinimumHeight;
        [RTTI.Member(11, 0x7C, "Logic")] public bool RelativeToSequence;
    }

    [RTTI.Serializable(0xB988431615C8F91, GameType.DS)]
    public class KJPPositionConstraintLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x48E592DDF079C63F, GameType.DS)]
    public class KJPPositionConstraintLocatorResource : LocatorResource
    {
        [RTTI.Member(9, 0x30, "Logic")] public String BoneName;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(10, 0x40, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xEDED8F8FE13073E9, GameType.DS)]
    public class KJPPostProcessSettingsInstance : PostProcessSettingsResource
    {
    }

    [RTTI.Serializable(0x896AB661C3EB53AA, GameType.DS)]
    public class KJPRenderControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x625748F75CFBF6D1, GameType.DS)]
    public class KJPRenderControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "RealtimeReflection")] public Ref<CurveResource> RealtimeReflection_Enabled;
        [RTTI.Member(9, 0x38, "RealtimeReflection")] public Ref<CurveResource> Weight;
        [RTTI.Member(10, 0x40, "RealtimeReflection")] public Ref<CurveResource> OffsetX;
        [RTTI.Member(11, 0x48, "RealtimeReflection")] public Ref<CurveResource> OffsetY;
        [RTTI.Member(13, 0x50, "OcclusionCulling")] public Ref<CurveResource> OcclusionCulling_Enabled;
        [RTTI.Member(15, 0x58, "SkyLightRendering")] public Ref<CurveResource> FullFaceRenderEnabled;
        [RTTI.Member(17, 0x60, "AAResolver")] public Ref<CurveResource> Override;
        [RTTI.Member(18, 0x68, "AAResolver")] public float InMotionThreshold;
        [RTTI.Member(20, 0x70, "Placement")] public Ref<CurveResource> Visibility;
        [RTTI.Member(22, 0x78, "Misc")] public bool TriggerGPUCaptureAtStart;
    }

    [RTTI.Serializable(0x844D4B445EFCCA24, GameType.DS)]
    public class KJPRenderEffectSwapper : Resource
    {
        [RTTI.Member(5, 0x20, "Representation")] public Array<uint32> HashKeys;
        [RTTI.Member(6, 0x30, "Representation")] public Array<Ref<KJPRenderEffectSwapperElement>> SwapperElements;
        [RTTI.Member(3, 0x40, "Representation")] public int NumMeshes;
        [RTTI.Member(4, 0x44, "Representation")] public int NumVariation;
    }

    [RTTI.Serializable(0xE6C1DEC3D5F12398, GameType.DS)]
    public class KJPRenderEffectSwapperComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD2885D1DD87831C6, GameType.DS)]
    public class KJPRenderEffectSwapperComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x2AE01D6F44D38ED9, GameType.DS)]
    public class KJPRenderEffectSwapperComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String SwapRenderEffectName;
        [RTTI.Member(4, 0x28, "Logic")] public bool ResetWhenRemove;
    }

    [RTTI.Serializable(0xAFFF265F7FAAE969, GameType.DS)]
    public class KJPRenderEffectSwapperElement : Resource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Array<GGUUID> UUIDKeys;
        [RTTI.Member(4, 0x30, "Representation")] public Array<Array<Ref<RenderEffectResource>>> RenderEffectValues;
    }

    [RTTI.Serializable(0xE430DEF44CEB6C34, GameType.DS)]
    public class KJPResetPBDEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xBFAFD511596AF0C1, GameType.DS)]
    public class KJPResetPBDEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(12, 0x40, "Logic")] public int ResetFrameCount;
        [RTTI.Member(9, 0x44, "Logic")] public bool Teleport;
        [RTTI.Member(10, 0x45, "Logic")] public bool KeepState;
        [RTTI.Member(11, 0x46, "Logic")] public bool IncludeChildren;
    }

    [RTTI.Serializable(0xCD4A7EB6223F6E55, GameType.DS)]
    public class KJPSampleEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE25274E115435E57, GameType.DS)]
    public class KJPSampleEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Parameters")] public int32 IntValue;
        [RTTI.Member(4, 0x24, "Parameters")] public float FloatValue;
    }

    [RTTI.Serializable(0xAC551882F2A99B1E, GameType.DS)]
    public class KJPSetCameraOffsetToPlayerEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3CBBB0A93B32AB3E, GameType.DS)]
    public class KJPSetCameraOffsetToPlayerEventResource : TimedEventResource
    {
        [RTTI.Member(7, 0x30)] public Vec3 OffsetToPlayer;
    }

    [RTTI.Serializable(0x6FD57736C25932E2, GameType.DS)]
    public class KJPSetCameraShakeMultiplierEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xFC8579ED34F92B31, GameType.DS)]
    public class KJPSetCameraShakeMultiplierEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public AnimatableValue CameraShakeMultiplier;
    }

    [RTTI.Serializable(0x78F38D73F4FD3E66, GameType.DS)]
    public class KJPSetDefaultShadowCompartmentListEnabledEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1ECBC4F8D1A2CCAA, GameType.DS)]
    public class KJPSetDefaultShadowCompartmentListEnabledEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool IsEnabled;
    }

    [RTTI.Serializable(0x3748F3873BABBB70, GameType.DS)]
    public class KJPSetModelScaleFactorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF13EF3CC3783B2D1, GameType.DS)]
    public class KJPSetModelScaleFactorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<CurveResource> ScaleFactorCurve;
    }

    [RTTI.Serializable(0x29EAB4E77560A662, GameType.DS)]
    public class KJPSetNextSequenceCameraEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x63E2BB1514100396, GameType.DS)]
    public class KJPSetNextSequenceCameraEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Vec3 Position;
        [RTTI.Member(9, 0x40, "Logic")] public Quat Rotation;
        [RTTI.Member(10, 0x50, "Logic")] public bool RelativeToSequence;
    }

    [RTTI.Serializable(0xDD828C560297406F, GameType.DS)]
    public class KJPSetPBDGlobalParamEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xFD6F0271B609D42F, GameType.DS)]
    public class KJPSetPBDGlobalParamEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<CurveResource> WorldMotionThreshold;
        [RTTI.Member(9, 0x38, "Logic")] public bool EnableOverrideDeltaTime;
    }

    [RTTI.Serializable(0x9277DF597E81EC3B, GameType.DS)]
    public class KJPSetPBDMaxDistanceMultiplierEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6C15EB00C556A753, GameType.DS)]
    public class KJPSetPBDMaxDistanceMultiplierEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(13, 0x50, "Logic")] public AnimatableValue PBDMaxDistanceMultiplier;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<CurveResource> PBDWorldMotionInfluenceMultiplier;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<CurveResource> PBDForceUpdate;
        [RTTI.Member(16, 0x78, "Logic")] public bool IncludeChildren;
        [RTTI.Member(17, 0x79, "Logic")] public bool KeepState;
    }

    [RTTI.Serializable(0xA06DEF3C0B5E1FC, GameType.DS)]
    public class KJPSetPostCheckerboardBokehShaderEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8D221F87637CF25B, GameType.DS)]
    public class KJPSetPostCheckerboardBokehShaderEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool IsEnabled;
    }

    [RTTI.Serializable(0xE85BCF0AC80B506D, GameType.DS)]
    public class KJPSpawnEntityEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x2CB29D9EA40131E0, GameType.DS)]
    public class KJPSpawnEntityEventResource : TimedEventResource
    {
        [RTTI.Member(9, 0x30, "Logic")] public Ref<LocatorResource> LocatorResource;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(10, 0x40, "Logic")] public String HelperName;
        [RTTI.Member(11, 0x50, "Logic")] public Vec3 Impulse;
        [RTTI.Member(12, 0x60, "Logic")] public Vec3 AngularVelocity;
    }

    [RTTI.Serializable(0x3FE742290A63A189, GameType.DS)]
    public class KJPSubtitleEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x17F5B6C706FE44CC, GameType.DS)]
    public class KJPSubtitleEventResource : PausableEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SentenceResource> SentenceResource;
        [RTTI.Member(9, 0x38, "Logic")] public bool PausingEnabled;
        [RTTI.Member(10, 0x3C, "Logic")] public int BlendInNumFrames;
        [RTTI.Member(11, 0x40, "Logic")] public int BlendOutNumFrames;
    }

    [RTTI.Serializable(0x466A26875290551C, GameType.DS)]
    public class KJPTeleportEntityEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x9A22B42957B633B2, GameType.DS)]
    public class KJPTeleportEntityEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(7, 0x30, "Logic")] public bool RecalculatePose;
        [RTTI.Member(8, 0x31, "Logic")] public bool TeleportPBD;
    }

    [RTTI.Serializable(0xBD736CD5EC96B65C, GameType.DS)]
    public class KJPUnBindPlayerActorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x85A7EEA6E4FFED35, GameType.DS)]
    public class KJPUnBindPlayerActorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> PlayerEntityActor;
        [RTTI.Member(9, 0x38, "Logic")] public Array<Ref<EntityActorResource>> Targets;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<EntityActorResource> EntityActor0;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<EntityActorResource> EntityActor1;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<EntityActorResource> EntityActor2;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<EntityActorResource> EntityActor3;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<EntityActorResource> EntityActor4;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<EntityActorResource> EntityActor5;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<EntityActorResource> EntityActor6;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<EntityActorResource> EntityActor7;
        [RTTI.Member(18, 0x88, "Logic")] public Ref<EntityActorResource> EntityActor8;
        [RTTI.Member(19, 0x90, "Logic")] public Ref<EntityActorResource> EntityActor9;
        [RTTI.Member(20, 0x98, "Logic")] public Ref<EntityActorResource> EntityActor10;
        [RTTI.Member(21, 0xA0, "Logic")] public Ref<EntityActorResource> EntityActor11;
        [RTTI.Member(22, 0xA8, "Logic")] public Ref<EntityActorResource> EntityActor12;
        [RTTI.Member(23, 0xB0, "Logic")] public Ref<EntityActorResource> EntityActor13;
        [RTTI.Member(24, 0xB8, "Logic")] public Ref<EntityActorResource> EntityActor14;
        [RTTI.Member(25, 0xC0, "Logic")] public Ref<EntityActorResource> EntityActor15;
    }

    [RTTI.Serializable(0x713221EB50C6A84A, GameType.DS)]
    public class KJPUpperLayerAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x453D04BA6DF2F94D, GameType.DS)]
    public class KJPUpperLayerAnimationEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<JointSetResource> JointSetResource;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<CurveResource> BlendInCurve;
        [RTTI.Member(12, 0x50, "Logic")] public Ref<CurveResource> BlendOutCurve;
    }

    [RTTI.Serializable(0xD3A0DDAD66A12B27, GameType.DS)]
    public class KJPVariableActorPlaceholderInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0xBAC38A4C6A5C6E3A, GameType.DS)]
    public class KJPVariableActorPlaceholderResource : EntityActorResource
    {
        [RTTI.Member(20, 0x60, "Logic")] public String ExposedEntityName;
    }

    [RTTI.Serializable(0x8718B021ACDAA421, GameType.DS)]
    public class KJPXPath
    {
        [RTTI.Member(0, 0x0)] public uint64 Union0;
        [RTTI.Member(1, 0x8)] public uint64 Union1;
        [RTTI.Member(2, 0x10)] public uint64 Union2;
        [RTTI.Member(3, 0x18)] public uint64 Union3;
        [RTTI.Member(4, 0x20)] public uint64 Union4;
        [RTTI.Member(5, 0x28)] public uint64 Union5;
        [RTTI.Member(6, 0x30)] public uint64 Union6;
        [RTTI.Member(7, 0x38)] public uint64 Union7;
    }

    [RTTI.Serializable(0xE82E3F12F36FCD64, GameType.DS)]
    public class KickPlayerRequest : MatchMessage
    {
        [RTTI.Member(3, 0x28)] public String TargetID;
        [RTTI.Member(4, 0x30)] public String GameID;
        [RTTI.Member(5, 0x38)] public bool CancelVote;
    }

    [RTTI.Serializable(0xD8398750B710BFCE, GameType.DS)]
    public class KickPlayerRequestKIN : KickPlayerRequest
    {
        [RTTI.Member(6, 0x40)] public String PlaylistID;
    }

    [RTTI.Serializable(0xFEB6DDDA03F788C8, GameType.DS)]
    public class KickVotingManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xEF3642C608379282, GameType.DS)]
    public class KillEntityAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public bool Suicide;
        [RTTI.Member(5, 0x29, "Logic")] public bool StartsAttackEventChain;
    }

    [RTTI.Serializable(0xA3EBC746EDFAABB2, GameType.DS)]
    public class KillEventResource : RemoveActorEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<DestructibilityPart> Part;
        [RTTI.Member(10, 0x48, "Logic")] public bool ShowEffects;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<LocatorResource> SourceLocatorResource;
        [RTTI.Member(12, 0x58, "Logic")] public float ImpulseModule;
    }

    [RTTI.Serializable(0xB56FFBD9D8812376, GameType.DS)]
    public class KillPartsAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(5, 0x38, "Logic")] public bool OverrideDamageType;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(7, 0x48, "Logic")] public bool StartsAttackEventChain;
    }

    [RTTI.Serializable(0x6A4F571B19EA099E, GameType.DS)]
    public class KjpCascadeShadowParam
    {
        [RTTI.Member(0, 0x0)] public float Distance;
        [RTTI.Member(1, 0x4)] public float Bias;
    }

    [RTTI.Serializable(0x8B674B52EF2FE9CD, GameType.DS)]
    public class KjpSoundGraphNode : RTTIObject
    {
    }

    [RTTI.Serializable(0xF39879CF64CB87E7, GameType.DS)]
    public class KnockDownDismountMode : DismountMode
    {
    }

    [RTTI.Serializable(0xB0684606489A3EEA, GameType.DS)]
    public class KnockDownStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD2DBBA5F4B6B4C2A, GameType.DS)]
    public class KnockDownStateComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String IsActiveAnimTagName;
        [RTTI.Member(4, 0x28, "Logic")] public String GetUpAnimTagName;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<KnockDownStateEntryResource> DefaultKnockDown;
    }

    [RTTI.Serializable(0x63327F6C040D2E30, GameType.DS)]
    public class KnockDownStateComponentResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBAF0FD7CE978AE9D, GameType.DS)]
    public class KnockDownStateComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x648ED53C5964B709, GameType.DS)]
    public class KnockDownStateEntry
    {
    }

    [RTTI.Serializable(0xA41EAB4CEEA15E75, GameType.DS)]
    public class KnockDownStateEntryResource : Resource
    {
        [RTTI.Member(3, 0x20, "AI")] public bool DisablePerception;
        [RTTI.Member(5, 0x28, "Logic")] public String Animation;
        [RTTI.Member(6, 0x30, "Logic")] public float DamageThreshold;
        [RTTI.Member(7, 0x34, "Logic")] public float ActivationTimeOut;
        [RTTI.Member(8, 0x38, "Logic")] public Array<Ref<KnockDownStateEntryResource>> AllowedTransitions;
    }

    [RTTI.Serializable(0x7CCB07EC10FAFD9E, GameType.DS)]
    public class KnockDownStateEntryResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF47A0D70671B04F7, GameType.DS)]
    public class LabelEventResource : EventResource
    {
    }

    [RTTI.Serializable(0x1ACEAEBAB250A212, GameType.DS)]
    public class Landmark : ParentWorldNode
    {
        [RTTI.Member(6, 0x70)] public float VerticalOffset;
    }

    [RTTI.Serializable(0x3810D3036D188C7F, GameType.DS)]
    public class LandmarkSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2C4EC65CDD6111BD, GameType.DS)]
    public class LaserBeamInstance : GeometryObject
    {
    }

    [RTTI.Serializable(0x33F4BFE7F64F19BB, GameType.DS)]
    public class LaserBeamResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float BeamWidth;
        [RTTI.Member(4, 0x24, "Logic")] public float DotRadius;
        [RTTI.Member(8, 0x28, "Representation")] public Ref<CurveResource> FadeOverDistanceCurve;
        [RTTI.Member(6, 0x30, "Representation")] public String RangeShaderVariable;
        [RTTI.Member(7, 0x38, "Representation")] public float RangeShaderThreshold;
        [RTTI.Member(9, 0x40, "Representation")] public Ref<RenderEffectResource> BeamRenderEffectsResource;
        [RTTI.Member(10, 0x48, "Representation")] public Ref<RenderEffectResource> DotRenderEffectsResource;
        [RTTI.Member(11, 0x50, "Representation")] public RGBAColor Color;
    }

    [RTTI.Serializable(0xB5B056DEA2D671F2, GameType.DS)]
    public class LaserComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x685E1E89F6D16F0B, GameType.DS)]
    public class LaserComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x178EC7BD2508F9C, GameType.DS)]
    public class LaserComponentResource : EntityComponentResource
    {
        [RTTI.Member(9, 0x20, "VisualEffects")] public Ref<LaserBeamResource> LaserBeamResource;
        [RTTI.Member(10, 0x28, "VisualEffects")] public Ref<LightResource> LaserLightResource;
        [RTTI.Member(3, 0x30, "Logic")] public String HelperName;
        [RTTI.Member(4, 0x40, "Logic")] public Vec3 LaserDirection;
        [RTTI.Member(5, 0x50, "Logic")] public Vec3 LaserOffset;
        [RTTI.Member(6, 0x60, "Logic")] public float MaxLaserLength;
        [RTTI.Member(7, 0x64, "Logic")] public float LaserFalloffLength;
        [RTTI.Member(11, 0x68, "VisualEffects")] public Ref<MaterialTypeResource> ImpactMaterialTypeResource;
    }

    [RTTI.Serializable(0xD834E28A7ACD2E12, GameType.DS)]
    public class LastingHealComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7F372241628E2AFC, GameType.DS)]
    public class LastingHealComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<HealthRegenerationParamsBase> RegenParams;
    }

    [RTTI.Serializable(0xCEDCDFC41E03E5CE, GameType.DS)]
    public class LastingHealComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x36F087322F622F92, GameType.DS)]
    public class LayerGroupMask
    {
        [RTTI.Member(0, 0x0)] public uint64_PLACEMENT_LAYER_MASK_SIZE<uint64> MaskData;
    }

    [RTTI.Serializable(0x67B51E5CF19AF214, GameType.DS)]
    public class LayerTag : Tag
    {
    }

    [RTTI.Serializable(0x65C8632D1B1466F2, GameType.DS)]
    public class LayeredIrradianceData : CoreObject
    {
        [RTTI.Member(2, 0x20)] public LightCollectionIdentifier Identifier;
        [RTTI.Member(3, 0x40)] public BoundingBox3 Bounds;
        [RTTI.Member(4, 0x70)] public Ref<Texture> ProbeAxis;
        [RTTI.Member(5, 0x80)] public Array<float> HeightDeltaRange;
        [RTTI.Member(6, 0x90)] public Ref<Texture> ProbeColorAlephBeth;
        [RTTI.Member(7, 0x98)] public Vec3 ProbeColorReconstructionScale;
    }

    [RTTI.Serializable(0xD318582108045EBF, GameType.DS)]
    public class LayeredIrradianceDataForRegion : CoreObject
    {
        [RTTI.Member(2, 0x20)] public ELightbakeZoneRestriction LightbakeZoneRestriction;
        [RTTI.Member(3, 0x30)] public BoundingBox3 Region;
        [RTTI.Member(4, 0x50)] public WorldTransform WorldToLocal;
        [RTTI.Member(5, 0x90)] public WorldTransform LocalToWorld;
        [RTTI.Member(6, 0xD0)] public BoundingBox3 LocalBounds;
        [RTTI.Member(13, 0xF0, true)] public float AffectScale;
        [RTTI.Member(14, 0xF4, true)] public float DistanceFade;
        [RTTI.Member(15, 0xF8)] public uint ForwardRenderingPriority;
        [RTTI.Member(7, 0xFC)] public float CompositeOrder;
        [RTTI.Member(8, 0x100)] public Array<Ref<LayeredIrradianceData>> IrradianceDataList;
        [RTTI.Member(9, 0x110)] public Ref<Texture> SharedSkyVis;
        [RTTI.Member(10, 0x118)] public Ref<Texture> SharedProbeHeightDelta;
        [RTTI.Member(11, 0x120)] public Array<float> SharedHeightDeltaRange;
        [RTTI.Member(12, 0x130)] public float ColumnSpacing;
    }

    [RTTI.Serializable(0x946115FE94A83FB2, GameType.DS)]
    public class LayeredIrradianceDataForScene : LayeredIrradianceDataForTile
    {
        [RTTI.Member(3, 0x30)] public WorldTransform InitializedWorldTransform;
        [RTTI.Member(4, 0x70, true)] public WorldTransform SceneWorldTransform;
        [RTTI.Member(8, 0xB0)] public Array<WorldTransform> ChildTransforms;
        [RTTI.Member(5, 0xC0, true)] public bool SceneTransInitialize;
        [RTTI.Member(6, 0xC4, true)] public float AffectScale;
        [RTTI.Member(7, 0xC8, true)] public float CompositeOrder;
    }

    [RTTI.Serializable(0xAABCE9F37ECB19A3, GameType.DS)]
    public class LayeredIrradianceDataForTile : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<LayeredIrradianceDataForRegion>> LayeredIrradianceDataForRegionList;
    }

    [RTTI.Serializable(0x9B3767E771C1620B, GameType.DS)]
    public class LeadingMagnetComponent : CameraMagnetComponent
    {
    }

    [RTTI.Serializable(0x7D3D303F751A4138, GameType.DS)]
    public class LeadingMagnetComponentResource : CameraMagnetComponentResource
    {
        [RTTI.Member(18, 0x80, "Range")] public Ref<CurveResource> HeadingToRangeScaler;
        [RTTI.Member(19, 0x88, "Range")] public Ref<CurveResource> PitchToRangeScaler;
        [RTTI.Member(20, 0x90, "Range")] public Ref<CurveResource> SpeedToRangeScaler;
        [RTTI.Member(22, 0x98, "Height")] public Ref<CurveResource> HeadingToHeightScaler;
        [RTTI.Member(23, 0xA0, "Height")] public Ref<CurveResource> PitchToHeightScaler;
        [RTTI.Member(24, 0xA8, "Height")] public Ref<CurveResource> SpeedToHeightScaler;
        [RTTI.Member(26, 0xB0, "Elevation")] public EPhysicsCollisionLayerGame ElevationCollisionLayer;
        [RTTI.Member(27, 0xB4, "Elevation")] public float MaxElevationOffset;
    }

    [RTTI.Serializable(0xDDFEFCCB2A1CD823, GameType.DS)]
    public class LegendHoldTag : VisualTag
    {
    }

    [RTTI.Serializable(0x9B3E730405F9B9FF, GameType.DS)]
    public class LegendHoldWidget : Widget
    {
    }

    [RTTI.Serializable(0x3CFD899FB550CD57, GameType.DS)]
    public class LegendIcon
    {
        [RTTI.Member(0, 0x0)] public ELegendButton Button;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> Texture;
        [RTTI.Member(2, 0x10)] public Ref<UITexture> PressAndHoldTexture;
        [RTTI.Member(3, 0x18)] public EFloating Alignment;
    }

    [RTTI.Serializable(0xDA4A4F3A65D6B8E1, GameType.DS)]
    public class LegendTag : VisualTag
    {
    }

    [RTTI.Serializable(0x11682D6A6B48DFB6, GameType.DS)]
    public class LegendWidget : Widget
    {
    }

    [RTTI.Serializable(0xEC3C69D1257E8E99, GameType.DS)]
    public class LensFlareApertureSettings
    {
        [RTTI.Member(1, 0x0, "Shape")] public EApertureShape Type;
        [RTTI.Member(2, 0x8, "Shape")] public Ref<Texture> Texture;
        [RTTI.Member(3, 0x10, "Shape")] public float Orientation;
        [RTTI.Member(4, 0x14, "Shape")] public float OrientationRandom;
        [RTTI.Member(5, 0x18, "Shape")] public int PolygonSides;
        [RTTI.Member(6, 0x1C, "Shape")] public float PolygonRoundness;
        [RTTI.Member(7, 0x20, "Shape")] public float BladeNotching;
        [RTTI.Member(9, 0x24, "Appearance")] public float Smoothness;
        [RTTI.Member(10, 0x28, "Appearance")] public float SmoothnessRandom;
        [RTTI.Member(11, 0x2C, "Appearance")] public float OutlineIntensity;
        [RTTI.Member(12, 0x30, "Appearance")] public float OutlineThickness;
        [RTTI.Member(13, 0x34, "Appearance")] public float OutlineFeathering;
    }

    [RTTI.Serializable(0x7DC16885E68E025C, GameType.DS)]
    public class LensFlareCompletionSettings
    {
        [RTTI.Member(0, 0x0)] public float Completion;
        [RTTI.Member(1, 0x4)] public float Feathering;
        [RTTI.Member(2, 0x8)] public float Rotation;
        [RTTI.Member(3, 0x10)] public ECompletionAutoRotate AutoRotate;
    }

    [RTTI.Serializable(0xAC3171DE539D5893, GameType.DS)]
    public class LensFlareElementResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public LensFlareSettings GlobalSettings;
        [RTTI.Member(4, 0x70, "Settings")] public LensFlareElementSettings Settings;
        [RTTI.Member(5, 0x130, "Settings")] public LensFlareTriggerSettings TriggerSettings;
        [RTTI.Member(6, 0x1B0, "Settings")] public LensFlareCompletionSettings CompletionSettings;
        [RTTI.Member(8, 0x360, "Runtime")] public Array<uint32> ColorTableData;
        [RTTI.Member(10, 0x370, "Runtime")] public Ref<Texture> NoiseTable;
        [RTTI.Member(9, 0x378, "Runtime")] public Ref<Texture> ColorTable;
    }

    [RTTI.Serializable(0x8A9E0B8E33F311FE, GameType.DS)]
    public class LensFlareElementSettings
    {
        [RTTI.Member(1, 0x0, "Common")] public float Brightness;
        [RTTI.Member(2, 0x4, "Common")] public float Scale;
        [RTTI.Member(3, 0x10, "Common")] public Vec2 Stretch;
        [RTTI.Member(4, 0x20, "Common")] public Vec2 Distance;
        [RTTI.Member(5, 0x30, "Common")] public float Rotation;
        [RTTI.Member(6, 0x34, "Common")] public EElementAutoRotate AutoRotate;
        [RTTI.Member(7, 0x40, "Common")] public Vec2 Offset;
        [RTTI.Member(8, 0x50, "Common")] public EElementTranslation Translation;
        [RTTI.Member(9, 0x60, "Common")] public Vec2 CustomTranslation;
        [RTTI.Member(10, 0x70, "Common")] public float AspectRatio;
        [RTTI.Member(12, 0x74, "Colour")] public EElementColor ColorSource;
        [RTTI.Member(13, 0x80, "Colour")] public FRGBAColor Color1;
        [RTTI.Member(14, 0x90, "Colour")] public FRGBAColor Color2;
        [RTTI.Member(15, 0xA0, "Colour")] public float GradientLoops;
        [RTTI.Member(16, 0xA4, "Colour")] public float GradientOffset;
        [RTTI.Member(17, 0xA8, "Colour")] public bool ReverseGradient;
        [RTTI.Member(18, 0xAC, "Colour")] public float ColorRandom;
        [RTTI.Member(20, 0xB0, "Advanced")] public bool IgnoreGlobalBrightness;
        [RTTI.Member(21, 0xB1, "Advanced")] public bool IgnoreGlobalScale;
        [RTTI.Member(22, 0xB2, "Advanced")] public bool IgnoreGlobalRotation;
        [RTTI.Member(23, 0xB3, "Advanced")] public bool Ignore3DPerspective;
    }

    [RTTI.Serializable(0x3EA4AC117D4EAE2A, GameType.DS)]
    public class LensFlareGlintResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareGlintSettings GlintSettings;
    }

    [RTTI.Serializable(0xC1F532571E86FA9, GameType.DS)]
    public class LensFlareGlintSettings
    {
        [RTTI.Member(1, 0x0, "Shape")] public int Complexity;
        [RTTI.Member(2, 0x4, "Shape")] public float Length;
        [RTTI.Member(3, 0x8, "Shape")] public float LengthRandom;
        [RTTI.Member(4, 0xC, "Shape")] public float Thickness;
        [RTTI.Member(5, 0x10, "Shape")] public float SpacingRandom;
        [RTTI.Member(6, 0x14, "Shape")] public float Orientation;
        [RTTI.Member(7, 0x18, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0x177A95C764B41DCE, GameType.DS)]
    public class LensFlareGlowResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareGlowSettings GlowSettings;
    }

    [RTTI.Serializable(0x69330A82C538A4CA, GameType.DS)]
    public class LensFlareGlowSettings
    {
        [RTTI.Member(1, 0x0, "Appearance")] public float Gamma;
    }

    [RTTI.Serializable(0x708209E1BEBC2043, GameType.DS)]
    public class LensFlareHoopResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareHoopSettings HoopSettings;
    }

    [RTTI.Serializable(0x632748574D0E17AD, GameType.DS)]
    public class LensFlareHoopSettings
    {
        [RTTI.Member(1, 0x0, "Appearance")] public int Complexity;
        [RTTI.Member(2, 0x4, "Appearance")] public bool Continuous;
        [RTTI.Member(3, 0x8, "Appearance")] public float Detail;
        [RTTI.Member(4, 0xC, "Appearance")] public float Length;
        [RTTI.Member(5, 0x10, "Appearance")] public float LineThickness;
        [RTTI.Member(6, 0x14, "Appearance")] public float LineSpacing;
        [RTTI.Member(7, 0x18, "Appearance")] public int RandomSeed;
    }

    [RTTI.Serializable(0x647B30D0CBB90A0A, GameType.DS)]
    public class LensFlareInstance : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public Ref<LensFlareResource> Resource;
        [RTTI.Member(6, 0x68, "General")] public CPtr<Light> Following;
        [RTTI.Member(7, 0x70, "General")] public float Brightness;
        [RTTI.Member(9, 0x74, "General")] public bool Background;
        [RTTI.Member(8, 0x80, "General")] public Vec3 Offset;
        [RTTI.Member(10, 0x90, "General")] public FRGBAColor Tint;
        [RTTI.Member(11, 0xA0, "General")] public float Scale;
        [RTTI.Member(15, 0xA4, "Advanced")] public float VisibilityConeInnerAngle;
        [RTTI.Member(16, 0xA8, "Advanced")] public float VisibilityConeOuterAngle;
        [RTTI.Member(13, 0xAC, "Advanced")] public float OffscreenFadeInner;
        [RTTI.Member(14, 0xB0, "Advanced")] public float OffscreenFadeOuter;
        [RTTI.Member(17, 0xB4, "Advanced")] public float OcclusionSize;
        [RTTI.Member(18, 0xB8, "Advanced")] public float DepthBias;
        [RTTI.Member(19, 0xBC, "Advanced")] public bool UseLightColor;
        [RTTI.Member(21, 0xC0, "Internal")] public Vec2 VisibilityConeScaleBias;
        [RTTI.Member(22, 0xD0, "Internal")] public Vec2 OffscreenFadeScaleBias;
    }

    [RTTI.Serializable(0xE7C01C1C0BB7AD8F, GameType.DS)]
    public class LensFlareIrisResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareIrisSettings IrisSettings;
        [RTTI.Member(13, 0x3A0, "Settings")] public LensFlareApertureSettings ApertureSettings;
        [RTTI.Member(14, 0x3D8, "Settings")] public bool Singular;
    }

    [RTTI.Serializable(0x4A58091EECF1077C, GameType.DS)]
    public class LensFlareIrisSettings
    {
        [RTTI.Member(1, 0x0, "Layout")] public int ObjectCount;
        [RTTI.Member(2, 0x4, "Layout")] public float Spread;
        [RTTI.Member(4, 0x8, "Variations")] public float SpreadRandom;
        [RTTI.Member(5, 0xC, "Variations")] public float ScaleRandom;
        [RTTI.Member(6, 0x10, "Variations")] public float BrightnessRandom;
        [RTTI.Member(7, 0x14, "Variations")] public float RotationRandom;
        [RTTI.Member(8, 0x18, "Variations")] public float OffsetRandom;
        [RTTI.Member(9, 0x1C, "Variations")] public int RandomSeed;
    }

    [RTTI.Serializable(0xE8D2421AFBBA3942, GameType.DS)]
    public class LensFlareManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xACDA0350BFC71950, GameType.DS)]
    public class LensFlareRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<Texture> DefaultTexture;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> GlintShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> GlowShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> HoopShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> IrisShader;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> IrisTextureShader;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> ShimmerShader;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> RingShader;
        [RTTI.Member(10, 0x60)] public Ref<ShaderResource> SparkleShader;
        [RTTI.Member(11, 0x68)] public Ref<ShaderResource> SpikeBallShader;
        [RTTI.Member(12, 0x70)] public Ref<ShaderResource> StreakShader;
        [RTTI.Member(13, 0x78)] public Ref<ShaderResource> LensFlareVisibilityShader;
    }

    [RTTI.Serializable(0xA65FFF05813F9B36, GameType.DS)]
    public class LensFlareResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public LensFlareSettings Settings;
        [RTTI.Member(4, 0x70, "General")] public Array<Ref<LensFlareElementResource>> Elements;
    }

    [RTTI.Serializable(0x20BC870688FE6BAE, GameType.DS)]
    public class LensFlareRingResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareRingSettings RingSettings;
    }

    [RTTI.Serializable(0xA06441991E6788DE, GameType.DS)]
    public class LensFlareRingSettings
    {
        [RTTI.Member(1, 0x0, "Shape")] public float Thickness;
        [RTTI.Member(2, 0x4, "Shape")] public float InsideFeathering;
        [RTTI.Member(3, 0x8, "Shape")] public float OutsideFeathering;
        [RTTI.Member(4, 0xC, "Shape")] public int DummyToFixEditor;
    }

    [RTTI.Serializable(0xCC7A242870EF9B2E, GameType.DS)]
    public class LensFlareSettings
    {
        [RTTI.Member(1, 0x0, "General")] public float Scale;
        [RTTI.Member(2, 0x4, "General")] public float AspectRatio;
        [RTTI.Member(3, 0x10, "General")] public FRGBAColor Color;
        [RTTI.Member(4, 0x20, "General")] public int Seed;
        [RTTI.Member(6, 0x24, "Matte")] public int MatteBoxShape;
        [RTTI.Member(7, 0x28, "Matte")] public float MatteBoxStart;
        [RTTI.Member(8, 0x2C, "Matte")] public float MatteBoxFade;
        [RTTI.Member(10, 0x30, "Advanced")] public float Brightness;
        [RTTI.Member(11, 0x34, "Advanced")] public float OffscreenFadeInner;
        [RTTI.Member(12, 0x38, "Advanced")] public float OffscreenFadeOuter;
        [RTTI.Member(13, 0x3C, "Advanced")] public float VisibilityConeInnerAngle;
        [RTTI.Member(14, 0x40, "Advanced")] public float VisibilityConeOuterAngle;
        [RTTI.Member(15, 0x44, "Advanced")] public float OcclusionSize;
        [RTTI.Member(16, 0x48, "Advanced")] public float DepthBias;
        [RTTI.Member(17, 0x4C, "Advanced")] public bool UseLightColor;
    }

    [RTTI.Serializable(0x700F9015104F0751, GameType.DS)]
    public class LensFlareShimmerResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareShimmerSettings ShimmerSettings;
    }

    [RTTI.Serializable(0xC1FAB9D9FECDBCBD, GameType.DS)]
    public class LensFlareShimmerSettings
    {
        [RTTI.Member(1, 0x0, "Shape")] public int Complexity;
        [RTTI.Member(2, 0x4, "Shape")] public float Detail;
        [RTTI.Member(3, 0x8, "Shape")] public float Orientation;
        [RTTI.Member(4, 0xC, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0x50F732D0CA229CAB, GameType.DS)]
    public class LensFlareSparkleResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareSparkleSettings SparkleSettings;
    }

    [RTTI.Serializable(0x912A883CA5BA8862, GameType.DS)]
    public class LensFlareSparkleSettings
    {
        [RTTI.Member(1, 0x0, "Appearance")] public int Complexity;
        [RTTI.Member(2, 0x4, "Appearance")] public float Length;
        [RTTI.Member(3, 0x8, "Appearance")] public float LengthRandom;
        [RTTI.Member(4, 0xC, "Appearance")] public float Thickness;
        [RTTI.Member(5, 0x10, "Appearance")] public float ThicknessRandom;
        [RTTI.Member(6, 0x14, "Appearance")] public float BrightnessRandom;
        [RTTI.Member(7, 0x18, "Appearance")] public float Spread;
        [RTTI.Member(8, 0x1C, "Appearance")] public float SpreadRandom;
        [RTTI.Member(9, 0x20, "Appearance")] public float SpacingRandom;
        [RTTI.Member(10, 0x24, "Appearance")] public float ShapeOrientation;
        [RTTI.Member(11, 0x28, "Appearance")] public int RandomSeed;
    }

    [RTTI.Serializable(0x67706A65FD180F5A, GameType.DS)]
    public class LensFlareSpikeBallResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareSpikeBallSettings SpikeBallSettings;
    }

    [RTTI.Serializable(0x661E1B1BC0E82E47, GameType.DS)]
    public class LensFlareSpikeBallSettings
    {
        [RTTI.Member(1, 0x0, "Shape")] public int Complexity;
        [RTTI.Member(2, 0x4, "Shape")] public float Length;
        [RTTI.Member(3, 0x8, "Shape")] public float LengthRandom;
        [RTTI.Member(4, 0xC, "Shape")] public float Thickness;
        [RTTI.Member(5, 0x10, "Shape")] public float ThicknessRandom;
        [RTTI.Member(6, 0x14, "Shape")] public float BrightnessRandom;
        [RTTI.Member(7, 0x18, "Shape")] public float SpacingRandom;
        [RTTI.Member(8, 0x1C, "Shape")] public float Orientation;
        [RTTI.Member(9, 0x20, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0xA583B3487C8DC6A5, GameType.DS)]
    public class LensFlareStreakResource : LensFlareElementResource
    {
        [RTTI.Member(12, 0x380, "Settings")] public LensFlareStreakSettings StreakSettings;
    }

    [RTTI.Serializable(0x48FCC62C2D25854C, GameType.DS)]
    public class LensFlareStreakSettings
    {
        [RTTI.Member(1, 0x0, "Shape")] public float Length;
        [RTTI.Member(2, 0x4, "Shape")] public float Thickness;
        [RTTI.Member(3, 0x8, "Shape")] public float CoreIntensity;
        [RTTI.Member(4, 0xC, "Shape")] public float Symmetry;
        [RTTI.Member(5, 0x10, "Shape")] public float FanEnds;
        [RTTI.Member(6, 0x14, "Shape")] public float FanFeathering;
        [RTTI.Member(7, 0x18, "Shape")] public int ReplicatorCopies;
        [RTTI.Member(8, 0x1C, "Shape")] public float ReplicatorAngle;
        [RTTI.Member(9, 0x20, "Shape")] public float ScaleRandom;
        [RTTI.Member(10, 0x24, "Shape")] public float SpacingRandom;
        [RTTI.Member(11, 0x28, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0x8D2905DDC96AB72, GameType.DS)]
    public class LensFlareTriggerSettings
    {
        [RTTI.Member(1, 0x0, "Effects")] public bool EnableTrigger;
        [RTTI.Member(2, 0x4, "Effects")] public float BrightnessOffset;
        [RTTI.Member(3, 0x8, "Effects")] public float ScaleOffset;
        [RTTI.Member(4, 0x10, "Effects")] public Vec2 StretchOffset;
        [RTTI.Member(5, 0x20, "Effects")] public float RotationOffset;
        [RTTI.Member(6, 0x30, "Effects")] public FRGBAColor ColorShift;
        [RTTI.Member(7, 0x40, "Effects")] public ELensFlareTriggerType TriggerType;
        [RTTI.Member(8, 0x44, "Effects")] public ELensFlareTriggerMode TriggerMode;
        [RTTI.Member(10, 0x48, "Shape")] public bool InvertTrigger;
        [RTTI.Member(11, 0x4C, "Shape")] public float BorderWidth;
        [RTTI.Member(12, 0x50, "Shape")] public float Expansion;
        [RTTI.Member(13, 0x54, "Shape")] public float InnerFalloffRange;
        [RTTI.Member(14, 0x58, "Shape")] public float OuterFalloffRange;
        [RTTI.Member(15, 0x5C, "Shape")] public ELensFlareTriggerFalloff FalloffType;
        [RTTI.Member(16, 0x60, "Shape")] public Vec2 TriggerStretch;
        [RTTI.Member(17, 0x70, "Shape")] public Vec2 TriggerOffset;
    }

    [RTTI.Serializable(0x424A2AC15C0EF02A, GameType.DS)]
    public class Level : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public EUpdateFrequency UpdateFrequency;
        [RTTI.Member(6, 0x2C, "General")] public float BroadPhaseSize;
        [RTTI.Member(7, 0x30, "General")] public int MaxPhysicsBodies;
        [RTTI.Member(8, 0x34, "General")] public int MaxPhysicsMotions;
        [RTTI.Member(9, 0x38, "General")] public WorldPosition BroadPhaseOrigin;
        [RTTI.Member(10, 0x50, "General")] public WorldBoundingBox3 WorldBounds;
        [RTTI.Member(12, 0x80, "General")] public float WorldTileSize;
        [RTTI.Member(11, 0x88, "General")] public StreamingRef<LevelData> LevelData;
    }

    [RTTI.Serializable(0xBCBAA96FB892CBCD, GameType.DS)]
    public class LevelBasedPlayerLoadouts
    {
        [RTTI.Member(0, 0x0)] public IRange LevelRange;
        [RTTI.Member(1, 0x8)] public Array<Ref<PlayerLoadout>> Loadouts;
    }

    [RTTI.Serializable(0xED804EB4AABF58F1, GameType.DS)]
    public class LevelBasedXpReward : Resource
    {
        [RTTI.Member(3, 0x20, "XpPerLevel")] public Array<int> XpPerLevel;
    }

    [RTTI.Serializable(0x8EC7D8E309FE53E5, GameType.DS)]
    public class LevelBasedXpRewardSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x36274D2289724B1A, GameType.DS)]
    public class LevelData : CoreObject
    {
        [RTTI.Member(7, 0x20, "PlayGo")] public Ref<CollisionTrigger> InitialArea;
        [RTTI.Member(8, 0x28, "PlayGo")] public Ref<CollisionTrigger> HighDetailArea;
        [RTTI.Member(3, 0x30, "General")] public Array<Ref<StreamingStrategyResource>> StrategyResources;
        [RTTI.Member(4, 0x60, "General")] public Array<String> GlobalStreamingStrategyBlacklistedTypes;
        [RTTI.Member(5, 0x70, "General")] public Array<String> GlobalStreamingStrategyWhitelistedTypes;
        [RTTI.Member(10, 0x88, "Effects")] public Ref<Texture> FogHeightMap;
        [RTTI.Member(11, 0x90, "Effects")] public BoundingBox3 FogHeightMapBounds;
        [RTTI.Member(13, 0xB0, "EnvironmentInteraction")] public Ref<EnvironmentInteractionManager> EnvironmentInteractionManager;
    }

    [RTTI.Serializable(0xDBDC689E46C7F160, GameType.DS)]
    public class LevelDataGame : LevelData
    {
        [RTTI.Member(15, 0xC0, "General")] public StreamingRef<LevelSettings> LevelSettings;
    }

    [RTTI.Serializable(0x7E13E6F24DF90EF1, GameType.DS)]
    public class LevelGroup : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public Array<Ref<Level>> Levels;
    }

    [RTTI.Serializable(0xB8B2B3402EEA751B, GameType.DS)]
    public class LevelSettings : Resource
    {
        [RTTI.Member(4, 0x20, "Player")] public Ref<DSPlayerEntityResource> DSPlayerEntityResource;
        [RTTI.Member(3, 0x28, "Player")] public Array<PlayerCharacterEntry> PlayerCharacters;
        [RTTI.Member(6, 0x38, "AI")] public Ref<AIManagerResourceGame> AIManager;
        [RTTI.Member(8, 0x40, "World")] public Ref<CollectableManagerResource> CollectableManager;
        [RTTI.Member(9, 0x48, "World")] public Ref<FastTravelSystemResource> FastTravelSystem;
        [RTTI.Member(10, 0x50, "World")] public Ref<LoadingHintSystemResource> LoadingHintSystem;
        [RTTI.Member(18, 0x58, "Map")] public Ref<EmbeddedFileResource> SessionImage;
        [RTTI.Member(16, 0x60, "Weather")] public Ref<WeatherSystem> WeatherSystem;
        [RTTI.Member(12, 0x68, "Crowds")] public Ref<CrowdManagerResource> CrowdManager;
        [RTTI.Member(14, 0x70, "DynamicSpawns")] public Ref<DynamicSpawnManagerResource> DynamicSpawnManager;
        [RTTI.Member(20, 0x78, "SpawnMap")] public float Heading;
        [RTTI.Member(35, 0x7C, "MissionDelays")] public float PreMissionDelay;
        [RTTI.Member(36, 0x80, "MissionDelays")] public float PostMissionDelay;
        [RTTI.Member(22, 0x88, "PostProcess")] public Ref<PostProcessSettingsResource> Settings;
        [RTTI.Member(24, 0x90, "Effects")] public Ref<AmbienceManager> AmbienceManager;
        [RTTI.Member(25, 0x98, "Effects")] public Ref<ScreenEffectResource> HealthScreenEffectResource;
        [RTTI.Member(26, 0xA0, "Effects")] public Ref<AnimatedScreenEffectResource> FadeOutScreenEffectResource;
        [RTTI.Member(27, 0xA8, "Effects")] public Ref<AnimatedScreenEffectResource> FadeInScreenEffectResource;
        [RTTI.Member(28, 0xB0, "Effects")] public Ref<AnimatedScreenEffectResource> FellThroughWorldEffectResource;
        [RTTI.Member(29, 0xB8, "Effects")] public Ref<AnimatedScreenEffectResource> LoadingFadeInEffectResource;
        [RTTI.Member(30, 0xC0, "Effects")] public Ref<ImpactEffectResourceCollection> ImpactEffectResourceCollection;
        [RTTI.Member(33, 0xC8, "Effects")] public Ref<AuroraStaticSettings> AuroraSettings;
        [RTTI.Member(38, 0xD0, "View")] public float SplitscreenLODMultOverride;
        [RTTI.Member(31, 0xD8, "Effects")] public Ref<Texture> FogHeightMap;
        [RTTI.Member(32, 0xE0, "Effects")] public BoundingBox3 FogHeightMapBounds;
        [RTTI.Member(40, 0x100, "ForceFieldSettings")] public Ref<ForceFieldSpringSettings> SpringSettings;
        [RTTI.Member(41, 0x108, "ForceFieldSettings")] public Ref<ForceFieldManagerSettings> ForcefieldManagerSettings;
        [RTTI.Member(45, 0x110, "TimeOfDay")] public float InitialTimeOfDay;
        [RTTI.Member(46, 0x114, "TimeOfDay")] public float DurationOfOneDayInSeconds;
        [RTTI.Member(47, 0x118, "TimeOfDay")] public bool InitialEnableDayNightCycle;
        [RTTI.Member(48, 0x119, "TimeOfDay")] public bool RandomizeTimeOfDay;
        [RTTI.Member(43, 0x120, "EnvironmentInteraction")] public Ref<EnvironmentInteractionManager> EnvironmentInteractionManager;
    }

    [RTTI.Serializable(0xB5871AAC17444287, GameType.DS)]
    public class LevelSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF66BBF40E02F11CE, GameType.DS)]
    public class Light : GeometryObject
    {
        [RTTI.Member(7, 0x168, "General")] public ELightAreaType LightAreaType;
        [RTTI.Member(25, 0x16C, "Color")] public FRGBChroma LightColor;
        [RTTI.Member(26, 0x178, "Color")] public float Intensity;
        [RTTI.Member(20, 0x17C, "General")] public bool OverrideResourceValues;
        [RTTI.Member(28, 0x180, "Interactivity")] public ELayerOperation LayerOp;
        [RTTI.Member(29, 0x184, "Interactivity")] public bool CastShadows;
        [RTTI.Member(30, 0x188, "Interactivity")] public EForwardShadowCastMode ForwardShadowCastMode;
        [RTTI.Member(31, 0x18C, "Interactivity")] public bool UsePreciseRendering;
        [RTTI.Member(32, 0x18D, "Interactivity")] public bool AffectFirstPersonOnly;
        [RTTI.Member(8, 0x190, "General")] public EFalloffType FalloffType;
        [RTTI.Member(10, 0x1A0, "General")] public Vec2 LightDimensions;
        [RTTI.Member(11, 0x1B0, "General")] public float DiffusionEffect;
        [RTTI.Member(9, 0x1D0, "General")] public Ref<LightResource> Resource;
        [RTTI.Member(34, 0x1D8, "Attachments")] public Ref<LensFlareInstance> LensFlare;
        [RTTI.Member(12, 0x1E4, "General")] public float VolumeLightAmount;
        [RTTI.Member(13, 0x1E8, "General")] public float VolumeLightAmountMinScale;
        [RTTI.Member(14, 0x1EC, "General")] public int VolumeLightSampleCount;
        [RTTI.Member(15, 0x1F0, "General")] public float VolumeHenyeyGreensteinG;
        [RTTI.Member(16, 0x1F4, "General")] public FRange DistanceFadeRange;
        [RTTI.Member(17, 0x1FC, "General")] public FRange NearFadeRange;
        [RTTI.Member(18, 0x204, "General")] public bool RenderToLightSamplingBuffer;
        [RTTI.Member(19, 0x208, "General")] public FRange LightSamplingFadeRange;
        [RTTI.Member(35, 0x238, "Attachments")] public Ref<FlickerLight> FlickerLight;
        [RTTI.Member(21, 0x249, "General")] public uint8 FwdPriority;
        [RTTI.Member(22, 0x24A, "General")] public bool Enable;
        [RTTI.Member(23, 0x24C, "General")] public float AnimatedIntensityScale;
    }

    [RTTI.Serializable(0xA9CBF0D127F6A5BB, GameType.DS)]
    public class LightBakeOnlyVisible : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> _LightBakeOnlyVisible;
        [RTTI.Member(3, 0x30)] public Array<Ref<StaticMeshResource>> StaticMeshResourceList;
    }

    [RTTI.Serializable(0xC8BAB9E5649D3239, GameType.DS)]
    public class LightCollectionIdentifier
    {
        [RTTI.Member(0, 0x0)] public ELightCollectionIdentifierMode Mode;
        [RTTI.Member(1, 0x8)] public String Identifier;
        [RTTI.Member(2, 0x10)] public float TimeOfDay;
    }

    [RTTI.Serializable(0xF45B5089A83DEA8F, GameType.DS)]
    public class LightComposeRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> LightCompose;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> LightComposeWithCapsuleOcclusionShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> LightComposeSky;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> LightComposeTiledFull;
        [RTTI.Member(6, 0x48)] public Ref<ShaderResource> LightComposeWithCapsuleOcclusionTiledFull;
        [RTTI.Member(7, 0x50)] public Ref<ShaderResource> LightComposeWithCubemapIrradianceOverride;
        [RTTI.Member(8, 0x58)] public Ref<ShaderResource> LightComposeWithCubemapIrradianceOverrideTiled;
        [RTTI.Member(9, 0x60)] public Ref<ShaderResource> LightComposeSetupTiles;
        [RTTI.Member(10, 0x68)] public Ref<ShaderResource> LightComposeSkyCompute;
        [RTTI.Member(11, 0x70)] public Ref<ShaderResource> LightComposeDepthMaxCapture;
        [RTTI.Member(12, 0x78)] public Ref<ShaderResource> LightComposeIrradianceIndex;
        [RTTI.Member(13, 0x80)] public Ref<ShaderResource> LightComposeFilterIndexer;
        [RTTI.Member(14, 0x88)] public Ref<ShaderResource> LightComposeFilterDebug;
        [RTTI.Member(15, 0x90)] public Ref<ShaderResource> LightComposeIrradianceFull;
        [RTTI.Member(16, 0x98)] public Ref<ShaderResource> LightComposeWithGIBuffer;
    }

    [RTTI.Serializable(0xADD4C4D088650C0C, GameType.DS)]
    public class LightEventInstance : LightEventInstanceBase
    {
    }

    [RTTI.Serializable(0x900F883AF8261CFE, GameType.DS)]
    public class LightEventInstanceBase : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE9FB04EED787B00C, GameType.DS)]
    public class LightEventResource : LightEventResourceBase
    {
        [RTTI.Member(17, 0x68, "Logic")] public Ref<LightResource> LightResource;
        [RTTI.Member(18, 0x70, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(19, 0x80, "Logic")] public Vec3 LightForward;
        [RTTI.Member(35, 0x90, "MiscSettings")] public Ref<CurveResource> DepthBiasCurveResource;
        [RTTI.Member(24, 0x98, "SpotLight")] public Ref<CurveResource> ConeAngleCurveResource;
        [RTTI.Member(25, 0xA0, "SpotLight")] public Ref<CurveResource> HotSpotAngleCurveResource;
        [RTTI.Member(28, 0xA8, "SpotLight")] public Ref<CurveResource> NearRangeCurveResource;
        [RTTI.Member(29, 0xB0, "SpotLight")] public Ref<CurveResource> FarRangeCurveResource;
        [RTTI.Member(30, 0xB8, "SpotLight")] public Ref<CurveResource> DepthFadeRatioCurveResource;
        [RTTI.Member(36, 0xC0, "MiscSettings")] public Ref<CurveResource> VolumeLightAmountCurveResource;
        [RTTI.Member(37, 0xC8, "MiscSettings")] public Ref<CurveResource> VolumeLightAmountMinScaleCurveResource;
        [RTTI.Member(20, 0xD0, "Logic")] public Ref<CurveResource> AnimatedIntensityScale;
        [RTTI.Member(21, 0xD8, "Logic")] public OptionalAnimatableValue AnimatableEmitSpecular;
        [RTTI.Member(22, 0xF8, "Logic")] public OptionalAnimatableValue AnimatableCastShadow;
        [RTTI.Member(26, 0x118, "SpotLight")] public OptionalAnimatableValue ShadowConeAngle;
        [RTTI.Member(27, 0x138, "SpotLight")] public OptionalAnimatableValue ShadowHotSpotAngle;
        [RTTI.Member(32, 0x158, "OmniLight")] public OptionalAnimatableValue OmniFadeRadius;
        [RTTI.Member(33, 0x178, "OmniLight")] public OptionalAnimatableValue OmniFadeRatio;
    }

    [RTTI.Serializable(0xAE418CB346F1614C, GameType.DS)]
    public class LightEventResourceBase : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public OptionalAnimatableValue Intensity;
        [RTTI.Member(13, 0x60, "Logic")] public bool LoopIntensity;
        [RTTI.Member(14, 0x61, "Logic", true)] public bool KeepIntensity;
        [RTTI.Member(15, 0x62, "Logic")] public bool KeepState;
        [RTTI.Member(16, 0x63, "Logic")] public bool DontResetOnStop;
    }

    [RTTI.Serializable(0xC586B31D6FDAF721, GameType.DS)]
    public class LightProbeExcludeZone : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(12, 0x100, "General")] public String Name;
    }

    [RTTI.Serializable(0x163A45338C8CE003, GameType.DS)]
    public class LightProbeHintSurface : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(12, 0x100, "General")] public HintedLightProbeCreationProperties HintedLightProbeCreationProperties;
    }

    [RTTI.Serializable(0xD60BE0F8EBD20001, GameType.DS)]
    public class LightProbeHintZone : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(12, 0x100, "General")] public LightProbePlacementHint LightProbePlacementHint;
    }

    [RTTI.Serializable(0xAC216717B972B358, GameType.DS)]
    public class LightProbePlacementHint
    {
        [RTTI.Member(0, 0x0)] public EIndirectLightingProbeHint IndirectLightingProbeHint;
        [RTTI.Member(1, 0x4)] public float GrowShrink;
    }

    [RTTI.Serializable(0x5B895B15633B8875, GameType.DS)]
    public class LightResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        [RTTI.Member(6, 0x28, "General")] public ELightAreaType LightAreaType;
        [RTTI.Member(9, 0x30, "General")] public Vec4 AreaLightParams;
        [RTTI.Member(23, 0x40, "Color")] public FRGBAColor LightColor;
        [RTTI.Member(24, 0x50, "Color")] public float Intensity;
        [RTTI.Member(7, 0x60, "General")] public Vec2 LightDimensions;
        [RTTI.Member(8, 0x70, "General")] public float DiffusionEffect;
        [RTTI.Member(29, 0x74, "Interactivity")] public ELayerOperation LayerOp;
        [RTTI.Member(25, 0x78, "Color")] public bool EmitDiffuse;
        [RTTI.Member(26, 0x79, "Color")] public bool EmitSpecular;
        [RTTI.Member(27, 0x7A, "Color")] public bool EmitTranslucency;
        [RTTI.Member(30, 0x7B, "Interactivity")] public bool CastShadows;
        [RTTI.Member(31, 0x7B, "Interactivity", true)] public bool CastDynamicShadows;
        [RTTI.Member(32, 0x7C, "Interactivity")] public EForwardShadowCastMode ForwardShadowCastMode;
        [RTTI.Member(33, 0x80, "Interactivity")] public bool UsePreciseRendering;
        [RTTI.Member(34, 0x81, "Interactivity")] public bool AffectFirstPersonOnly;
        [RTTI.Member(4, 0x84, "General")] public EFalloffType FalloffType;
        [RTTI.Member(36, 0x90, "Attachments")] public Vec3 CoronaOffset;
        [RTTI.Member(37, 0xA0, "Attachments")] public Ref<LensFlareResource> LensFlare;
        [RTTI.Member(10, 0xA8, "General")] public float VolumeLightAmount;
        [RTTI.Member(11, 0xAC, "General")] public float VolumeLightAmountMinScale;
        [RTTI.Member(12, 0xB0, "General")] public int VolumeLightSampleCount;
        [RTTI.Member(13, 0xB4, "General")] public float VolumeHenyeyGreensteinG;
        [RTTI.Member(14, 0xB8, "General")] public FRange DistanceFadeRange;
        [RTTI.Member(15, 0xC0, "General")] public FRange NearFadeRange;
        [RTTI.Member(16, 0xC8, "General")] public bool RenderToLightSamplingBuffer;
        [RTTI.Member(17, 0xCC, "General")] public FRange LightSamplingFadeRange;
        [RTTI.Member(38, 0xD8, "Attachments")] public Ref<FlickerLight> FlickerLight;
        [RTTI.Member(18, 0xE0, "General")] public String IntensityGlobalRenderVariableName;
        [RTTI.Member(19, 0xEC, "General")] public uint8 FwdPriority;
        [RTTI.Member(20, 0xED, "General")] public bool Enable;
        [RTTI.Member(21, 0xF0, "General")] public ELightUnitType Unit;
        [RTTI.Member(5, 0xF8, "General")] public Ref<RenderEffectResource> RenderEffectsResource;
    }

    [RTTI.Serializable(0x7FBD0DEBF1F2428, GameType.DS)]
    public class LightShadowed : Light
    {
        [RTTI.Member(37, 0x270, "Color")] public int ShadowMapSize;
        [RTTI.Member(38, 0x274, "Color")] public int FilterSamplesCount;
        [RTTI.Member(39, 0x278, "Color")] public float DepthBias;
        [RTTI.Member(40, 0x27C, "Color")] public float FilterSize;
        [RTTI.Member(41, 0x280, "Color")] public float ScreenSizeThreshold;
        [RTTI.Member(42, 0x284, "Color")] public float ShadowMapSizeThreshold;
        [RTTI.Member(43, 0x290, "Color")] public Vec2 StopShadowCastingSizeRange;
        [RTTI.Member(44, 0x2A0, "Color")] public Vec2 StopShadowCastingDistanceRange;
        [RTTI.Member(45, 0x2B0, "Color")] public Vec4 ShadowMapSizeLODDistances;
        [RTTI.Member(46, 0x2C0, "Color")] public EShadowmapCacheForStaticGeometry ShadowmapCacheMethod;
        [RTTI.Member(47, 0x2C4, "Color")] public bool IsBakeOnly;
        [RTTI.Member(48, 0x2C8, "Color")] public Ref<LightShadowedRenderVolume> RenderVolume;
    }

    [RTTI.Serializable(0x9DB81010C68C4CD9, GameType.DS)]
    public class LightShadowedRenderVolume : WorldNode
    {
        [RTTI.BaseClass(0x60)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(9, 0xA0, true)] public GGUUID CopiedBaseUUID;
    }

    [RTTI.Serializable(0xC5D9E7996890864C, GameType.DS)]
    public class LightShadowedResource : LightResource
    {
        [RTTI.Member(40, 0x100, "General")] public int ShadowMapSize;
        [RTTI.Member(41, 0x104, "General")] public int FilterSamplesCount;
        [RTTI.Member(42, 0x108, "General")] public float DepthBias;
        [RTTI.Member(43, 0x10C, "General")] public float FilterSize;
        [RTTI.Member(44, 0x110, "General")] public float ScreenSizeThreshold;
        [RTTI.Member(45, 0x114, "General")] public float ShadowMapSizeThreshold;
        [RTTI.Member(46, 0x120, "General")] public Vec2 StopShadowCastingSizeRange;
        [RTTI.Member(47, 0x130, "General")] public Vec2 StopShadowCastingDistanceRange;
        [RTTI.Member(48, 0x140, "General")] public Vec4 ShadowMapSizeLODDistances;
        [RTTI.Member(49, 0x150, "General")] public EShadowmapCacheForStaticGeometry ShadowmapCacheMethod;
        [RTTI.Member(50, 0x154, "General")] public bool IsBakeOnly;
        [RTTI.Member(51, 0x158, "General")] public Ref<LightShadowedRenderVolume> RenderVolume;
    }

    [RTTI.Serializable(0xF23B17B867492530, GameType.DS)]
    public class LightShaftRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> LightShaftMaskGenShader;
    }

    [RTTI.Serializable(0x8256E225EBBAD3F3, GameType.DS)]
    public class LightShaftSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public bool Enabled;
        [RTTI.Member(4, 0x0, "Settings")] public bool OccluderCalcCorrection;
        [RTTI.Member(2, 0x1, "Settings")] public bool UseAngularOffsetsDirectly;
        [RTTI.Member(3, 0x2, "Settings")] public bool UseTemporalFilter;
        [RTTI.Member(5, 0x4, "Settings")] public float HorizontalAngularOffset;
        [RTTI.Member(6, 0x8, "Settings")] public float VerticalAngularOffset;
        [RTTI.Member(7, 0xC, "Settings")] public float MaskPower;
        [RTTI.Member(8, 0x10, "Settings")] public float Intensity;
        [RTTI.Member(9, 0x14, "Settings")] public float FalloffAnglePower;
        [RTTI.Member(10, 0x20, "Settings")] public FRGBAColor BlendColor;
        [RTTI.Member(11, 0x30, "Settings")] public FRGBAColor MultiplyColor;
        [RTTI.Member(13, 0x40, "RadialBlurSettings")] public float Decay;
        [RTTI.Member(14, 0x44, "RadialBlurSettings")] public float DistanceMultiplier;
        [RTTI.Member(15, 0x48, "RadialBlurSettings")] public float Weight;
        [RTTI.Member(16, 0x4C, "RadialBlurSettings")] public float AttenuationMultiplier;
    }

    [RTTI.Serializable(0xC4801A4D74E21430, GameType.DS)]
    public class LightShaftSettingsInstance : LightShaftSettingsResource
    {
    }

    [RTTI.Serializable(0x2EDEC6C71B4716CF, GameType.DS)]
    public class LightShaftSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public LightShaftSettings LightShaftSettings;
    }

    [RTTI.Serializable(0x6F17ECE800DC58F5, GameType.DS)]
    public class LightbakeOnlyGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x780E8BF4B7CF802C, GameType.DS)]
    public class LightingManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xEDF1F0285D4E98B3, GameType.DS)]
    public class LightingRigComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x56D3ECB16BB88C05, GameType.DS)]
    public class LightingRigComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xBEF86699C1C5AE77, GameType.DS)]
    public class LightingRigComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "VisualEffects")] public Ref<LightResource> LightResource;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<OverrideGraphProgramResource> OverrideLightRepPropertiesGraph;
    }

    [RTTI.Serializable(0x3BF292C0D5449FC0, GameType.DS)]
    public class LikableActionConfig
    {
        [RTTI.Member(0, 0x0)] public LikableActionMoveSpeedConfig MoveSpeed;
        [RTTI.Member(1, 0x18)] public LikableActionJumpConfig Jump;
    }

    [RTTI.Serializable(0xBD00C176200EF92E, GameType.DS)]
    public class LikableActionJumpConfig
    {
        [RTTI.Member(0, 0x0)] public uint32 LikablePoint;
        [RTTI.Member(1, 0x4)] public float UpperHeight;
        [RTTI.Member(2, 0x8)] public float LowerHeight;
        [RTTI.Member(3, 0xC)] public float MaxHeightRangeBetweenStartToEnd;
        [RTTI.Member(4, 0x10)] public float MinHeightRangeBetweenStartToEnd;
    }

    [RTTI.Serializable(0x352F444E0A193F00, GameType.DS)]
    public class LikableActionMoveSpeedConfig
    {
        [RTTI.Member(0, 0x0)] public uint32 LikablePoint;
        [RTTI.Member(1, 0x4)] public float MinWeight;
        [RTTI.Member(2, 0x8)] public float MaxWeight;
        [RTTI.Member(3, 0xC)] public float TimeForClear;
        [RTTI.Member(4, 0x10)] public float SpeedForClearAtMinWeight;
        [RTTI.Member(5, 0x14)] public float SpeedForClearAtMaxWeight;
    }

    [RTTI.Serializable(0x2561C125F791C65B, GameType.DS)]
    public class LimitConcurrentEntitiesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5B1CAC3A4332628F, GameType.DS)]
    public class LimitConcurrentEntitiesComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String Group;
        [RTTI.Member(4, 0x28, "Logic")] public int MaxAmount;
        [RTTI.Member(5, 0x2C, "Logic")] public bool LimitIsPerPlayer;
    }

    [RTTI.Serializable(0xFAC54C35DEC29500, GameType.DS)]
    public class LinearLUT_8
    {
        [RTTI.Member(0, 0x10)] public Vec3 Sample0;
        [RTTI.Member(1, 0x20)] public Vec3 Sample1;
        [RTTI.Member(2, 0x30)] public Vec3 Sample2;
        [RTTI.Member(3, 0x40)] public Vec3 Sample3;
        [RTTI.Member(4, 0x50)] public Vec3 Sample4;
        [RTTI.Member(5, 0x60)] public Vec3 Sample5;
        [RTTI.Member(6, 0x70)] public Vec3 Sample6;
        [RTTI.Member(7, 0x80)] public Vec3 Sample7;
    }

    [RTTI.Serializable(0xB37C5B3D9316F1D6, GameType.DS)]
    public class LinearPlacementBufferSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> PlacementInitCompute;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> PlacementAllocCompute;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> PlacementMatrixCopyCompute;
    }

    [RTTI.Serializable(0x1A2D47F82DC49805, GameType.DS)]
    public class LinkToEventInReferencedSequence
    {
        [RTTI.Member(0, 0x0)] public Ref<EventResource> EventResource;
        [RTTI.Member(1, 0x8)] public String AttributeName;
        [RTTI.Member(2, 0x10)] public Ref<EventResource> ReferencedEventResource;
    }

    [RTTI.Serializable(0xC6487A498B433D83, GameType.DS)]
    public class LinkedSoundParameterComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x25D22C4E2D609F37, GameType.DS)]
    public class LinkedSoundParameterComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<LinkedSoundParameterGroup>> Groups;
    }

    [RTTI.Serializable(0x1307B4C110B6E7BD, GameType.DS)]
    public class LinkedSoundParameterGroup : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<NameToSoundParameterMapping> AnimationEventToSoundParameterMapping;
        [RTTI.Member(3, 0x30)] public Array<NameToSoundParameterMapping> AnimationTagToSoundParameterMapping;
        [RTTI.Member(4, 0x40)] public Array<BoolPropertyToSoundParameterMapping> BoolPropertyToSoundParameterMapping;
        [RTTI.Member(5, 0x50)] public Array<BooleanFactToSoundParameterMapping> BooleanFactToSoundParameterMapping;
        [RTTI.Member(6, 0x60)] public String AnythingSetSoundParameterName;
        [RTTI.Member(7, 0x68)] public String AnythingNotSetSoundParameterName;
    }

    [RTTI.Serializable(0x7BB8F0575DDD41F9, GameType.DS)]
    public class ListItemTag : VisualTag
    {
    }

    [RTTI.Serializable(0x81CC619803664AE0, GameType.DS)]
    public class ListItemWidget : Widget
    {
    }

    [RTTI.Serializable(0xD5E6D066C4A4BFB7, GameType.DS)]
    public class ListTag : VisualTag
    {
    }

    [RTTI.Serializable(0xDBC98A9C8903933B, GameType.DS)]
    public class ListWidget : Widget
    {
    }

    [RTTI.Serializable(0xB69F56CC9B5B528B, GameType.DS)]
    public class LoadingHint : Resource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Ref<LocalizedTextResource> Hint;
        [RTTI.Member(7, 0x28, "Logic")] public Ref<LoadingHintConditionBase> Condition;
        [RTTI.Member(4, 0x30, "Representation")] public float DisplayTime;
        [RTTI.Member(6, 0x34, "Logic")] public int Cooldown;
    }

    [RTTI.Serializable(0x429D7C29C7B0F806, GameType.DS)]
    public class LoadingHintConditionAnd : LoadingHintConditionBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<LoadingHintConditionBase>> LoadingHintConditions;
    }

    [RTTI.Serializable(0xC5AA527AA88815C3, GameType.DS)]
    public class LoadingHintConditionBase : Resource
    {
    }

    [RTTI.Serializable(0x1A8709688580C98D, GameType.DS)]
    public class LoadingHintConditionBooleanFact : LoadingHintConditionBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<BooleanFact> BooleanFact;
    }

    [RTTI.Serializable(0x140CBC02D5172D67, GameType.DS)]
    public class LoadingHintConditionCauseOfDeath : LoadingHintConditionBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<UUIDRef<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(4, 0x30, "Logic")] public Array<UUIDRef<EntityResource>> KillerEntityResources;
        [RTTI.Member(5, 0x40, "Logic")] public Array<UUIDRef<EntityResource>> KillerWeaponResources;
    }

    [RTTI.Serializable(0x8798CFD87E51F5B, GameType.DS)]
    public class LoadingHintConditionEntitlement : LoadingHintConditionBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EntitlementResource> Entitlement;
    }

    [RTTI.Serializable(0xE82ACBF786E0ECF6, GameType.DS)]
    public class LoadingHintConditionEnumFact : LoadingHintConditionBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EnumFact> EnumFact;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EnumFactEntry> EnumFactEntry;
        [RTTI.Member(5, 0x30, "Logic")] public bool AllowGreaterValues;
        [RTTI.Member(6, 0x31, "Logic")] public bool AllowSmallerValues;
    }

    [RTTI.Serializable(0xA29D13F71794AD8, GameType.DS)]
    public class LoadingHintConditionItemAcquired : LoadingHintConditionBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public UUIDRef<EntityResource> Item;
    }

    [RTTI.Serializable(0x194E5D7AC9968107, GameType.DS)]
    public class LoadingHintConditionOr : LoadingHintConditionBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<LoadingHintConditionBase>> LoadingHintConditions;
    }

    [RTTI.Serializable(0xA920F412F43468E1, GameType.DS)]
    public class LoadingHintGroup : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<LoadingHint>> LoadingHints;
        [RTTI.Member(4, 0x30, "Logic")] public int Priority;
        [RTTI.Member(5, 0x34, "Logic")] public int MaxDisplayCountPerLoadingScreen;
        [RTTI.Member(6, 0x38, "Logic")] public int Cooldown;
    }

    [RTTI.Serializable(0x90139009FDA205FA, GameType.DS)]
    public class LoadingHintSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x9732F2C3A47F7C9B, GameType.DS)]
    public class LoadingHintSystemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<LoadingHintGroup>> LoadingHintGroups;
        [RTTI.Member(4, 0x34, "Logic")] public float TimeBetweenHints;
    }

    [RTTI.Serializable(0x1D68E0C914AB952E, GameType.DS)]
    public class LocalizedAnimationResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<AnimationResourceTranslation> Animations;
    }

    [RTTI.Serializable(0xAC6B4B45359918C7, GameType.DS)]
    public class LocalizedFontResource : FontResource
    {
        [RTTI.Member(3, 0x58)] public Array<FontResourceLanguageOverride> LanguageOverrides;
    }

    [RTTI.Serializable(0x4F5415F692C8510C, GameType.DS)]
    public class LocalizedShaderVariableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x33467DB78CB64449, GameType.DS)]
    public class LocalizedShaderVariableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE5CBC0589E5C0799, GameType.DS)]
    public class LocalizedShaderVariableComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<ELanguage> Languages;
        [RTTI.Member(4, 0x30, "Logic")] public String LanguageShaderVariable;
    }

    [RTTI.Serializable(0xA2FE933E7E76C534, GameType.DS)]
    public class LocalizedSoundPreset : CoreObject
    {
        [RTTI.Member(4, 0x20, "Sound")] public float DefaultVolume;
        [RTTI.Member(18, 0x24, "Sound")] public float DefaultLfeVolume;
        [RTTI.Member(12, 0x28, "Sound")] public float WetLevel;
        [RTTI.Member(7, 0x2C, "Sound")] public float MinDist;
        [RTTI.Member(8, 0x30, "Sound")] public float MaxDist;
        [RTTI.Member(9, 0x34, "Sound")] public float SubtitleMaxDist;
        [RTTI.Member(5, 0x38, "Sound")] public float PressureLevel;
        [RTTI.Member(10, 0x3C, "Sound")] public float AttenuationLinearity;
        [RTTI.Member(11, 0x40, "Sound")] public float AttenuationSlope;
        [RTTI.Member(3, 0x48, "Sound")] public Ref<SoundGroup> Group;
        [RTTI.Member(6, 0x50, "Sound")] public bool UsesHDRSystem;
        [RTTI.Member(19, 0x51, "Sound")] public bool AffectedByTimeScale;
        [RTTI.Member(17, 0x54, "Sound")] public float InitialRMS;
        [RTTI.Member(13, 0x58, "Sound")] public float WetMinRange;
        [RTTI.Member(14, 0x5C, "Sound")] public float WetMaxRange;
        [RTTI.Member(15, 0x60, "Sound")] public float WetLevelBias;
        [RTTI.Member(16, 0x64, "Sound")] public float PanModificationDistance;
        [RTTI.Member(20, 0x68, "Sound")] public float OcclusionFactor;
        [RTTI.Member(21, 0x6C, "Sound")] public float ObstructionFactor;
        [RTTI.Member(22, 0x70, "Sound")] public float DopplerFactor;
        [RTTI.Member(23, 0x74, "Sound")] public float MaxAzimuthDelta;
        [RTTI.Member(24, 0x78, "Sound")] public bool ProximityRadio;
        [RTTI.Member(25, 0x79, "Sound")] public bool ShouldAlsoPanToCenter;
        [RTTI.Member(27, 0x80, "MixState")] public Ref<SoundMixStateResource> SoundMixState;
        [RTTI.Member(29, 0x88, "Wave")] public EWaveDataEncodingHint DesiredEncoding;
        [RTTI.Member(30, 0x8C, "Wave")] public EWaveDataEncodingQuality EncodingQuality;
        [RTTI.Member(32, 0x90, "Obstruction")] public float ObstructionRadius;
        [RTTI.Member(34, 0x98, "Wwise")] public WwiseName ExternalSourceCookie;
        [RTTI.Member(35, 0xA8, "Wwise")] public uint8 Flags;
    }

    [RTTI.Serializable(0xC36E0954599C5BEE, GameType.DS)]
    public class LocalizedText
    {
    }

    [RTTI.Serializable(0x156ECF583D0AC300, GameType.DS)]
    public class LocalizedTextGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4C04342C7E7207AE, GameType.DS)]
    public class LocalizedTextResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE85BFB0C99129D0D, GameType.DS)]
    public class LocalizedTextSuggestionResource : Resource
    {
        [RTTI.Member(2, 0x20)] public String QAChangeID;
        [RTTI.Member(3, 0x28)] public String RecordType;
        [RTTI.Member(4, 0x30)] public String RecordKey;
        [RTTI.Member(5, 0x38)] public String RecordLanguage;
        [RTTI.Member(6, 0x40)] public WString OriginalSourceText;
        [RTTI.Member(7, 0x48)] public WString NewText;
        [RTTI.Member(8, 0x50)] public WString NewAnnotation;
        [RTTI.Member(9, 0x58)] public ETranslationStatus NewApproved;
        [RTTI.Member(10, 0x60)] public String DevTrackNr;
        [RTTI.Member(11, 0x68)] public String QACreatedOn;
        [RTTI.Member(12, 0x70)] public String QACreatedBy;
        [RTTI.Member(13, 0x78)] public int GGHandled;
        [RTTI.Member(14, 0x80)] public String GGHandledOn;
        [RTTI.Member(15, 0x88)] public String GGHandledBy;
        [RTTI.Member(16, 0x90)] public String GGHandledReason;
        [RTTI.Member(17, 0x98)] public Ref<LocalizedTextResource> Record;
    }

    [RTTI.Serializable(0x626FE1A4AA2B72CE, GameType.DS)]
    public class LocalizerCategory : CoreObject
    {
        [RTTI.Member(2, 0x20)] public bool ExportForTranslation;
        [RTTI.Member(3, 0x24)] public int OrderIndex;
    }

    [RTTI.Serializable(0x9DC3FA15705B547C, GameType.DS)]
    public class LocalizerLevel : CoreObject
    {
        [RTTI.Member(2, 0x20)] public bool ExportForTranslation;
        [RTTI.Member(3, 0x24)] public int OrderIndex;
    }

    [RTTI.Serializable(0xB099FD91E053A, GameType.DS)]
    public class LocalizerVariable
    {
    }

    [RTTI.Serializable(0x4E0C586B7AC26653, GameType.DS)]
    public class LocalizerVariableSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9E31C7CEB4FD3E1E, GameType.DS)]
    public class LocationAndUUID
    {
        [RTTI.Member(0, 0x0)] public String Location;
        [RTTI.Member(1, 0x10)] public GGUUID UUID;
    }

    [RTTI.Serializable(0xB17D1837AD1AD123, GameType.DS)]
    public class LocationMarkerBreadcrumbingSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocationMarkerBreadcrumbingSettingsEntry> DefaultBreadcrumbSettings;
        [RTTI.Member(3, 0x28)] public Array<Ref<LocationMarkerBreadcrumbingSettingsEntryBase>> ConditionalBreadcrumbSettings;
    }

    [RTTI.Serializable(0x29A27EF39FEC008A, GameType.DS)]
    public class LocationMarkerBreadcrumbingSettingsEntry : LocationMarkerBreadcrumbingSettingsEntryBase
    {
        [RTTI.Member(3, 0x28)] public float ApproachDistance;
        [RTTI.Member(4, 0x2C)] public float SeekDistance;
        [RTTI.Member(5, 0x30)] public float MinDistance;
        [RTTI.Member(6, 0x34)] public float PortalMarkerHeight;
        [RTTI.Member(7, 0x38)] public float RoadMarkerHeight;
        [RTTI.Member(8, 0x3C)] public float AngleTestMinimumDistance;
        [RTTI.Member(9, 0x40)] public float MaxRoadSegmentAngle;
        [RTTI.Member(10, 0x44)] public float MaxPlayerToNodeAngle;
    }

    [RTTI.Serializable(0x31A526D4F4F28B3C, GameType.DS)]
    public class LocationMarkerBreadcrumbingSettingsEntryBase : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<ConditionResource> Condition;
    }

    [RTTI.Serializable(0xE76862F9673D69D5, GameType.DS)]
    public class LocationMarkerBreadcrumbingSettingsEntryGroup : LocationMarkerBreadcrumbingSettingsEntryBase
    {
        [RTTI.Member(3, 0x28)] public Array<Ref<LocationMarkerBreadcrumbingSettingsEntryBase>> BreadcrumbSettings;
    }

    [RTTI.Serializable(0x9E63CEC8E083B07, GameType.DS)]
    public class LocationMarkerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1E9AF8E4AE117909, GameType.DS)]
    public class LocationMarkerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> MarkerText;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<UITexture> Icon;
        [RTTI.Member(11, 0x30, "Logic")] public Ref<UIMarkerTag> MarkerType;
        [RTTI.Member(12, 0x38, "Logic")] public Ref<UIMarkerTag> IconBinding;
        [RTTI.Member(13, 0x40, "Logic")] public Ref<UIMarkerTag> TextBinding;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<ConditionResource> EnableMarkerCondition;
        [RTTI.Member(14, 0x50, "Logic")] public Ref<UIMarkerStackGroupType> StackGroupType;
        [RTTI.Member(7, 0x58, "Logic")] public float HUDDisplayDistance;
        [RTTI.Member(8, 0x5C, "Logic")] public float CompassDisplayDistance;
        [RTTI.Member(9, 0x60, "Logic")] public bool ShowOnMap;
        [RTTI.Member(10, 0x61, "Logic")] public bool EnableRotations;
        [RTTI.Member(4, 0x62, "Logic")] public bool ShowWhenDead;
    }

    [RTTI.Serializable(0xF6612B03E60497CB, GameType.DS)]
    public class LocationMarkerDiscovererSettings : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EnumFact> DiscoveryState;
        [RTTI.Member(3, 0x28)] public Ref<EnumFactEntry> UndiscoveredValue;
        [RTTI.Member(4, 0x30)] public Ref<EnumFactEntry> IndicatedValue;
        [RTTI.Member(5, 0x38)] public Ref<EnumFactEntry> DiscoveredValue;
        [RTTI.Member(6, 0x40)] public float PositionMarkerDiscoveryDistance;
    }

    [RTTI.Serializable(0x10B0D43C6A320DB4, GameType.DS)]
    public class LocationProximityQuestTrigger : QuestTrigger
    {
        [RTTI.Member(4, 0x20, "Logic")] public float Distance;
        [RTTI.Member(5, 0x24, "Logic")] public bool TriggerWhenOutside;
        [RTTI.Member(3, 0x25, "Logic")] public UUIDRef<WorldNode> Node;
    }

    [RTTI.Serializable(0xEA365DBA88BD3C3, GameType.DS)]
    public class LocationProximityQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x9B1AF45AE96EA668, GameType.DS)]
    public class LocatorInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x79EE5898FE305A66, GameType.DS)]
    public class LocatorResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xD599102B8DDD75E7, GameType.DS)]
    public class LockableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x253450081200124A, GameType.DS)]
    public class LockableComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x30, "Logic")] public Array<String> KindOF;
    }

    [RTTI.Serializable(0x8E13E48268ED7616, GameType.DS)]
    public class LocomotionMover : Mover
    {
    }

    [RTTI.Serializable(0x9EA39ADDAF6B7346, GameType.DS)]
    public class LocomotionMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xC9F7D124CF362983, GameType.DS)]
    public class LodDistanceOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB7B0D666F30D2DCD, GameType.DS)]
    public class LodDistanceOverrideComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x780E816721ADB77C, GameType.DS)]
    public class LodDistanceOverrideComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float LodDistanceScale;
    }

    [RTTI.Serializable(0x36B88667B0A33134, GameType.DS)]
    public class LodMeshResource : MeshResourceBase
    {
        [RTTI.Member(8, 0x80, "Mesh")] public float MaxDistance;
        [RTTI.Member(7, 0x88, "Mesh")] public Array<LodMeshResourcePart> Meshes;
    }

    [RTTI.Serializable(0x8E6AD921C921DC, GameType.DS)]
    public class LodMeshResourcePart
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x8)] public float Distance;
    }

    [RTTI.Serializable(0x890BFAB6D51002E9, GameType.DS)]
    public class LookAtComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x911F0BA5F79556E4, GameType.DS)]
    public class LookAtEntitiesEventInstance : ConditionalLookEventInstance
    {
    }

    [RTTI.Serializable(0x56CEBE7EEE4C0795, GameType.DS)]
    public class LookAtEntitiesEventResource : ConditionalLookEventResource
    {
        [RTTI.Member(21, 0x88, "Logic")] public bool LookAtHumanoids;
        [RTTI.Member(22, 0x89, "Logic")] public bool LookAtPlayers;
        [RTTI.Member(23, 0x8A, "Logic")] public bool LookAtAmbientEvents;
    }

    [RTTI.Serializable(0x1D6CEE4DEC90EF2B, GameType.DS)]
    public class LookAtEventInstance : LookEventInstance
    {
    }

    [RTTI.Serializable(0x96EE9AEF2B50BB7E, GameType.DS)]
    public class LookAtEventResource : LookEventResource
    {
        [RTTI.Member(11, 0x48, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0xA7D765B04A9FEF1C, GameType.DS)]
    public class LookAtTargetEventInstance : LookAtEventInstance
    {
    }

    [RTTI.Serializable(0xC87886AE7021A797, GameType.DS)]
    public class LookAtTargetEventResource : LookAtEventResource
    {
    }

    [RTTI.Serializable(0xC38655DB5433D208, GameType.DS)]
    public class LookEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD6E54B407B8265C4, GameType.DS)]
    public class LookEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool JustGlance;
    }

    [RTTI.Serializable(0x878FBCABE3B8C2D7, GameType.DS)]
    public class LookIKComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA258F1F859F6676D, GameType.DS)]
    public class LookIKComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool LookHeadingFullyRotational;
        [RTTI.Member(4, 0x24, "Logic")] public FRange LookHeadingRange;
        [RTTI.Member(5, 0x2C, "Logic")] public FRange LookPitchRange;
        [RTTI.Member(6, 0x34, "Logic")] public float MaxAcceleration;
        [RTTI.Member(7, 0x38, "Logic")] public float MaxSpeed;
        [RTTI.Member(9, 0x40, "Logic")] public String LookAtActiveAnimVarName;
        [RTTI.Member(10, 0x48, "Logic")] public String LookIKTargetAnimVarName;
        [RTTI.Member(11, 0x50, "Logic")] public String LookIKWeightAnimVarName;
        [RTTI.Member(12, 0x58, "Logic")] public String LookPitchAnimVarName;
        [RTTI.Member(13, 0x60, "Logic")] public String LookHeadingAnimVarName;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(14, 0x70, "Logic")] public float IKWeightBlendDuration;
        [RTTI.Member(15, 0x74, "Logic")] public float IKWeightBlendOutDuration;
        [RTTI.Member(18, 0x78, "IK")] public String RootIKBone;
        [RTTI.Member(19, 0x80, "IK")] public String EndIKBone;
        [RTTI.Member(20, 0x88, "IK")] public FRange MaxIKHeadingRange;
        [RTTI.Member(21, 0x90, "IK")] public FRange MaxIKPitchRange;
        [RTTI.Member(16, 0x98, "Logic")] public String DisableLookIKAnimTagName;
    }

    [RTTI.Serializable(0x8C11B0E5C84F9F6D, GameType.DS)]
    public class LootComponent : PickUpComponentBase
    {
    }

    [RTTI.Serializable(0x348292BCBE582F28, GameType.DS)]
    public class LootComponentResource : PickUpComponentBaseResource
    {
        [RTTI.Member(18, 0xA8, "Loot")] public bool IsLootPersistent;
        [RTTI.Member(19, 0xA9, "Loot")] public bool IsLootingAllowedWhileAlive;
        [RTTI.Member(20, 0xAA, "Loot")] public bool ClearInventoryWhenAddingLoot;
        [RTTI.Member(21, 0xAC, "Loot")] public float AutoMenuCloseBufferDistance;
        [RTTI.Member(22, 0xB0, "Loot")] public UUIDRef<MenuPage> MenuPage;
        [RTTI.Member(23, 0xC0, "Loot")] public Array<Ref<LootSlot>> LootSlots;
        [RTTI.Member(24, 0xD0, "Loot")] public Array<RewardDestructibilityTagToLootItemMapping> LootableParts;
    }

    [RTTI.Serializable(0x40A460F5DD549B73, GameType.DS)]
    public class LootComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAA0E244D1DD10B0A, GameType.DS)]
    public class LootContainerInterface
    {
    }

    [RTTI.Serializable(0xF37309A5C39E4B83, GameType.DS)]
    public class LootData : LootDataInterface
    {
        [RTTI.Member(7, 0x30, "Logic")] public Array<Ref<LootDataInterface>> LootItems;
        [RTTI.Member(6, 0x40, "Logic")] public int RollCount;
        [RTTI.Member(8, 0x44, "Logic")] public bool ItemsShouldBeUnique;
    }

    [RTTI.Serializable(0x6AEEB47F69C038E7, GameType.DS)]
    public class LootDataInterface : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Probability;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LootDataSettings> DataSettings;
    }

    [RTTI.Serializable(0x449D4E7C7B44A659, GameType.DS)]
    public class LootDataSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int RollBufferCount;
        [RTTI.Member(4, 0x24, "Logic")] public float IncrementPercentage;
        [RTTI.Member(5, 0x28, "Logic")] public ELootDataIncrementType IncrementType;
    }

    [RTTI.Serializable(0x3E83CE673E45DB62, GameType.DS)]
    public class LootItem : LootDataInterface
    {
        [RTTI.Member(6, 0x30, "Logic")] public Ref<EntityResource> ItemResource;
        [RTTI.Member(7, 0x38, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0xFFAA0F015458280, GameType.DS)]
    public class LootSlot : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<LootDataInterface>> LootData;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<LootSlotSettings> Settings;
    }

    [RTTI.Serializable(0xD176199F0A8289F1, GameType.DS)]
    public class LootSlotPerkSettings : RTTIObject
    {
        [RTTI.Member(1, 0x8, "Logic")] public Ref<PerkLevel> PerkLevel;
        [RTTI.Member(2, 0x10, "Logic")] public float PercentageChance;
    }

    [RTTI.Serializable(0x29A9778A244DC25A, GameType.DS)]
    public class LootSlotSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<LootSlotPerkSettings> LootSlotPerkSettings;
        [RTTI.Member(4, 0x30, "Logic")] public float DefaultPercentageChance;
    }

    [RTTI.Serializable(0x8B939F2AACAC9A2B, GameType.DS)]
    public class LureEnemyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x95866BFD28364D7E, GameType.DS)]
    public class LureEnemyComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AISignalType> LureSignal;
        [RTTI.Member(4, 0x28, "Logic")] public String LureGesture;
        [RTTI.Member(5, 0x38, "Logic")] public float TargetConeAngle;
        [RTTI.Member(6, 0x3C, "Logic")] public float MaxDistance;
    }

    [RTTI.Serializable(0xB6B4831D4FD06E48, GameType.DS)]
    public class Magazine : WeaponPart
    {
    }

    [RTTI.Serializable(0xA1D54DD9C52F19AE, GameType.DS)]
    public class MagazineRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x5E62C3D8CCF5BB1E, GameType.DS)]
    public class MagazineResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool InfiniteAmmo;
        [RTTI.Member(4, 0x21, "Logic")] public bool AlwaysFullMagOnLoad;
        [RTTI.Member(5, 0x22, "Logic")] public bool InfiniteReserves;
        [RTTI.Member(6, 0x24, "Logic")] public int RoundsPerMagazine;
        [RTTI.Member(7, 0x28, "Logic")] public bool ShouldAddAmmoToCurrentMag;
        [RTTI.Member(8, 0x30, "Logic")] public Ref<AmmoType> AmmoType;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<AmmoResource> DefaultAmmoResource;
        [RTTI.Member(10, 0x40, "Logic")] public Array<Ref<AmmoMutatorResource>> AmmoMutators;
        [RTTI.Member(28, 0x50, "HUD")] public int AmmoLowWarningAmount;
        [RTTI.Member(11, 0x54, "Logic")] public int InitialAmmo;
        [RTTI.Member(13, 0x58, "Reload")] public float RoundsPerCycle;
        [RTTI.Member(14, 0x60, "Reload")] public Ref<ReloadDurationSettings> ReloadDurationsNormal;
        [RTTI.Member(15, 0x68, "Reload")] public Ref<ReloadDurationSettings> ReloadDurationsRaised;
        [RTTI.Member(16, 0x70, "Reload")] public bool OneCyclePerReload;
        [RTTI.Member(19, 0x78, "Animations")] public Ref<ReloadDurationsAnimationReference> ReloadDurationsAnimationReference;
        [RTTI.Member(18, 0x80, "Animations")] public String ReloadAnimTagName;
        [RTTI.Member(21, 0x88, "SoundEffects")] public Ref<SoundResource> ReloadStartSound;
        [RTTI.Member(22, 0x90, "SoundEffects")] public Ref<SoundResource> ReloadCycleSound;
        [RTTI.Member(23, 0x98, "SoundEffects")] public Ref<SoundResource> ReloadFinishSound;
        [RTTI.Member(25, 0xA0, "VisualEffects")] public Ref<ParticleSystemResource> ReloadParticles;
        [RTTI.Member(26, 0xA8, "VisualEffects")] public float ReloadParticlesDelay;
    }

    [RTTI.Serializable(0x5A468BCA6C6EF6F0, GameType.DS)]
    public class MagnetLookAtSettings
    {
        [RTTI.Member(0, 0x0)] public bool Apply;
        [RTTI.Member(1, 0x4)] public float Duration;
        [RTTI.Member(2, 0x8)] public float CooldownTimer;
    }

    [RTTI.Serializable(0xC14284870BDA8E2, GameType.DS)]
    public class MapMarkerFontSettings
    {
        [RTTI.Member(3, 0x0)] public FRGBAColor FontColor;
        [RTTI.Member(4, 0x10)] public FRGBAColor ShadowColor;
        [RTTI.Member(6, 0x20)] public Vec2 ShadowOffset;
        [RTTI.Member(1, 0x30)] public Ref<FontResource> Font;
        [RTTI.Member(2, 0x38)] public int FontSize;
        [RTTI.Member(5, 0x3C)] public float ShadowOutlineOffset;
        [RTTI.Member(0, 0x40)] public ELanguage Language;
    }

    [RTTI.Serializable(0xC43353670F43F227, GameType.DS)]
    public class MapProjectionSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Rendering")] public Ref<CurveResource> DepthScale;
        [RTTI.Member(4, 0x28, "Rendering")] public float DepthBias;
        [RTTI.Member(7, 0x2C, "HeightData")] public float MaxDepth;
        [RTTI.Member(8, 0x30, "HeightData")] public float StoredDepthScale;
        [RTTI.Member(5, 0x34, "Rendering")] public float RenderPlaneZ;
    }

    [RTTI.Serializable(0x830DB248A7619885, GameType.DS)]
    public class MapResource : Resource
    {
        [RTTI.Member(3, 0x20, "Selection")] public Ref<CurveResource> Selection_ZoomSpeed;
        [RTTI.Member(4, 0x28, "Selection")] public float DeadZone;
        [RTTI.Member(5, 0x2C, "Selection")] public float MaxZoom;
        [RTTI.Member(6, 0x30, "Selection")] public float InitialZoom;
        [RTTI.Member(7, 0x34, "Selection")] public bool AlwaysUseInitialZoom;
        [RTTI.Member(8, 0x38, "Selection")] public FRange InteriorMapZoom;
        [RTTI.Member(9, 0x40, "Selection")] public Ref<CurveResource> ScrollSpeed;
        [RTTI.Member(10, 0x48, "Selection")] public float ScrollDampeningFactor;
        [RTTI.Member(11, 0x50, "Selection")] public Ref<UITexture> SelectionImage;
        [RTTI.Member(12, 0x58, "Selection")] public float SelectionScale;
        [RTTI.Member(13, 0x5C, "Selection")] public float SelectionRadius;
        [RTTI.Member(14, 0x60, "Selection")] public Ref<CurveResource> SelectionMagnetStrengthForSpeedCurve;
        [RTTI.Member(16, 0x68, "Touchpad")] public Ref<CurveResource> Touchpad_ZoomSpeed;
        [RTTI.Member(17, 0x70, "Touchpad")] public Ref<CurveResource> HorizontalScrollSpeed;
        [RTTI.Member(18, 0x78, "Touchpad")] public Ref<CurveResource> TouchVerticalScrollSpeed;
        [RTTI.Member(20, 0x80, "View")] public float WidthInWorldCoords;
        [RTTI.Member(22, 0x88, "Markers")] public Ref<Texture> OffscreenMarkerTexture;
        [RTTI.Member(23, 0x90, "Markers")] public int OffscreenMarkerBorderWidth;
        [RTTI.Member(24, 0x98, "Markers")] public Ref<ShaderResource> MapAreaSDFShader;
        [RTTI.Member(25, 0xA0, "Markers")] public Ref<ShaderResource> MapRoadShader;
        [RTTI.Member(26, 0xA8, "Markers")] public Ref<MapRoadRenderSettingsResource> RoadRenderSettings;
        [RTTI.Member(40, 0xB0, "ShowOnMap")] public float PanningSpeed;
        [RTTI.Member(41, 0xB8, "ShowOnMap")] public Ref<CurveResource> ZoomLevelForDistance;
        [RTTI.Member(42, 0xC0, "ShowOnMap")] public Ref<CurveResource> ShowOnMapZoomLevelTrajectory;
        [RTTI.Member(43, 0xC8, "ShowOnMap")] public Ref<CurveResource> ShowOnMapDistanceTrajectory;
        [RTTI.Member(45, 0xD4, "ZoomLevels")] public float Medium;
        [RTTI.Member(46, 0xD8, "ZoomLevels")] public float High;
        [RTTI.Member(27, 0xE0, "Markers")] public MapMarkerFontSettings TitleFontSettings;
        [RTTI.Member(28, 0x130, "Markers")] public Array<MapMarkerFontSettings> TitleFontSettingsOverrides;
        [RTTI.Member(29, 0x140, "Markers")] public MapMarkerFontSettings DetailsFontSettings;
        [RTTI.Member(30, 0x190, "Markers")] public Array<MapMarkerFontSettings> DetailsFontSettingsOverrides;
        [RTTI.Member(33, 0x1A0, "Markers")] public Ref<UIMarkerTag> IconBinding;
        [RTTI.Member(34, 0x1A8, "Markers")] public Ref<UIMarkerTag> IconColorBinding;
        [RTTI.Member(35, 0x1B0, "Markers")] public Ref<UIMarkerTag> TitleBinding;
        [RTTI.Member(36, 0x1B8, "Markers")] public Ref<UIMarkerTag> DescriptionBinding;
        [RTTI.Member(37, 0x1C0, "Markers")] public Ref<UITexture> HighlightIcon;
        [RTTI.Member(38, 0x1C8, "Markers")] public Ref<UITexture> WaypointIcon;
        [RTTI.Member(31, 0x1D0, "Markers")] public float OnDifferentMapOpacity;
        [RTTI.Member(32, 0x1D8, "Markers")] public Ref<UITexture> StairwellIcon;
        [RTTI.Member(48, 0x1E0, "RevealQueue")] public float QueueAnimationTime;
    }

    [RTTI.Serializable(0x24D0787FD7185D72, GameType.DS)]
    public class MapRoadRenderSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<UITexture> RoadTexture;
        [RTTI.Member(4, 0x28, "Logic")] public float RoadWidth;
        [RTTI.Member(5, 0x2C, "Logic")] public float DistanceBetweenRoadSteps;
        [RTTI.Member(6, 0x30, "Logic")] public float Smoothness;
    }

    [RTTI.Serializable(0xE40C70E74B65295C, GameType.DS)]
    public class MapTag : VisualTag
    {
    }

    [RTTI.Serializable(0xFFB3BEA43E28FB34, GameType.DS)]
    public class MapTextureTile
    {
        [RTTI.Member(0, 0x0)] public Ref<Texture> ColorTexture;
        [RTTI.Member(1, 0x8)] public Ref<Texture> DepthTexture;
    }

    [RTTI.Serializable(0x39F93A20AB8A72D3, GameType.DS)]
    public class MapTextureTileRow
    {
        [RTTI.Member(0, 0x0)] public Array<MapTextureTile> Textures;
    }

    [RTTI.Serializable(0xBF31D3C71966411E, GameType.DS)]
    public class MapViewController : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4045E1B2E7F9D1AD, GameType.DS)]
    public class MapWidget : Widget
    {
    }

    [RTTI.Serializable(0xF3044036791F2572, GameType.DS)]
    public class MapZone : MapZoneBase
    {
        [RTTI.Member(6, 0x80)] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0x8657751BA6FDB3F6, GameType.DS)]
    public class MapZoneBase : ParentWorldNode
    {
    }

    [RTTI.Serializable(0x5D5AFE8AD04ED379, GameType.DS)]
    public class MapZonePortal : MapZoneBase
    {
        [RTTI.Member(7, 0x70, "Shared")] public Ref<MapZonePortalSide> SideA;
        [RTTI.Member(8, 0x78, "Shared")] public Ref<MapZonePortalSide> SideB;
    }

    [RTTI.Serializable(0xA44DBC76454EC195, GameType.DS)]
    public class MapZonePortalSide : WorldNode
    {
        [RTTI.Member(9, 0x80)] public Vec3 MarkerOffset;
        [RTTI.Member(4, 0x90)] public Ref<ConditionResource> Lock;
        [RTTI.Member(5, 0x98)] public UUIDRef<MapZone> Zone;
        [RTTI.Member(6, 0xB8)] public float ExtraTraversalCost;
        [RTTI.Member(7, 0xBC)] public bool IgnoreDistanceCost;
        [RTTI.Member(8, 0xBD)] public bool CanBeEnteredFromThisSide;
    }

    [RTTI.Serializable(0xB672436ED4E61E3A, GameType.DS)]
    public class MapZoneRevealArea : ParentWorldNode
    {
        [RTTI.Member(8, 0x70, "Logic")] public Array<Ref<CollisionTrigger>> AreaTriggers;
        [RTTI.Member(7, 0x98, "Logic")] public EMapZoneRevealAreaMode TriggerMode;
    }

    [RTTI.Serializable(0x9482EFB360EF5C61, GameType.DS)]
    public class MapZoneSection : MapZone
    {
        [RTTI.Member(8, 0xB0)] public Array<Ref<MapZoneRevealArea>> RevealAreas;
        [RTTI.Member(7, 0xC8)] public bool IsStairwell;
    }

    [RTTI.Serializable(0xECE255DAC5654077, GameType.DS)]
    public class MappedExterior : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "Logic")] public Array<Ref<MapZoneSection>> Sections;
        [RTTI.Member(8, 0x80, "Logic")] public Array<Ref<MapZonePortal>> Portals;
    }

    [RTTI.Serializable(0xE2917469F10F748E, GameType.DS)]
    public class MappedFloor : ParentWorldNode
    {
        [RTTI.Member(8, 0x78, "Logic")] public bool UpdateFogOfWar;
        [RTTI.Member(7, 0x80, "Logic")] public Array<Ref<MapZoneSection>> Sections;
        [RTTI.Member(9, 0x98, "Logic")] public Array<MappedFloorTextureRect> Textures;
        [RTTI.Member(10, 0xA8, "Logic")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0xD6AA52D89F80EABF, GameType.DS)]
    public class MappedFloorTextureRect
    {
        [RTTI.Member(2, 0x0, "Logic")] public FRect Rectangle;
        [RTTI.Member(1, 0x10, "Logic")] public StreamingRef<Texture> Texture;
    }

    [RTTI.Serializable(0xF188D24A3C5C34F, GameType.DS)]
    public class MappedInterior : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "Logic")] public Array<Ref<MappedFloor>> Floors;
        [RTTI.Member(8, 0x80, "Logic")] public Array<Ref<MapZonePortal>> Portals;
        [RTTI.Member(9, 0xA0, "Logic")] public int MapInitialFloorIndex;
        [RTTI.Member(10, 0xA4, "Logic")] public EFloorNrDirection FloorIndexOrder;
        [RTTI.Member(11, 0xA8, "Logic")] public Ref<AmbienceCycle> BakeOverrideCycle;
    }

    [RTTI.Serializable(0x17BDE79ED6A29303, GameType.DS)]
    public class MasterBusSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<SoundMasterParametersResource>> SoundMasterParameters;
    }

    [RTTI.Serializable(0xC21A91B0F3EB4D5D, GameType.DS)]
    public class MasterColorizeSettings
    {
        [RTTI.Member(1, 0x0, "Settings")] public FRGBAColor ShadowColor;
        [RTTI.Member(2, 0x10, "Settings")] public FRGBAColor MidtoneColor;
        [RTTI.Member(3, 0x20, "Settings")] public FRGBAColor HighlightColor;
        [RTTI.Member(4, 0x30, "Settings")] public float Contrast;
        [RTTI.Member(5, 0x34, "Settings")] public float Brightness;
        [RTTI.Member(6, 0x38, "Settings")] public float Gain;
        [RTTI.Member(7, 0x3C, "Settings")] public float Gamma;
        [RTTI.Member(8, 0x40, "Settings")] public float Depth;
    }

    [RTTI.Serializable(0xB95C6811B59F0376, GameType.DS)]
    public class Mat34
    {
        [RTTI.Member(0, 0x0)] public Vec4Pack Row0;
        [RTTI.Member(1, 0x10)] public Vec4Pack Row1;
        [RTTI.Member(2, 0x20)] public Vec4Pack Row2;
    }

    [RTTI.Serializable(0x16FC45E819F7E789, GameType.DS)]
    public class Mat44
    {
        [RTTI.Member(0, 0x0)] public Vec4 Col0;
        [RTTI.Member(1, 0x10)] public Vec4 Col1;
        [RTTI.Member(2, 0x20)] public Vec4 Col2;
        [RTTI.Member(3, 0x30)] public Vec4 Col3;
    }

    [RTTI.Serializable(0xEAE445B3C2491E4, GameType.DS)]
    public class MatchAssignment : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String RequestUUID;
        [RTTI.Member(3, 0x28)] public String OriginRequestUUID;
        [RTTI.Member(4, 0x30)] public int64 Version;
        [RTTI.Member(5, 0x38)] public String GameID;
    }

    [RTTI.Serializable(0xCDA947D77E942C1A, GameType.DS)]
    public class MatchAssignmentHandler : RTTIObject
    {
    }

    [RTTI.Serializable(0xCB8431791E6AFD1E, GameType.DS)]
    public class MatchAssignmentKIN : MatchAssignment
    {
        [RTTI.Member(6, 0x40)] public Ref<TurbineContext> TurbineContext;
        [RTTI.Member(7, 0x48)] public String Faction;
        [RTTI.Member(8, 0x50)] public String BuildID;
        [RTTI.Member(9, 0x58)] public String PlaylistID;
        [RTTI.Member(10, 0x60)] public int PlaylistVersion;
        [RTTI.Member(11, 0x64)] public int CurrentRound;
        [RTTI.Member(12, 0x68)] public int64 GameCreationTime;
        [RTTI.Member(13, 0x70)] public bool IsSpectator;
    }

    [RTTI.Serializable(0xF96E31556DE30049, GameType.DS)]
    public class MatchCancelRequest : MatchMessage
    {
        [RTTI.Member(3, 0x28)] public String TargetUUID;
    }

    [RTTI.Serializable(0xB0239587FC62E399, GameType.DS)]
    public class MatchCancelRequestKIN : MatchCancelRequest
    {
        [RTTI.Member(4, 0x30)] public String Playlist;
    }

    [RTTI.Serializable(0x6ED1D37C7698FB40, GameType.DS)]
    public class MatchGame : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String GameID;
        [RTTI.Member(3, 0x28)] public int64 Version;
        [RTTI.Member(4, 0x30)] public int64 CreationTime;
        [RTTI.Member(5, 0x38)] public Array<Ref<MatchPlayerGroup>> PlayerGroups;
    }

    [RTTI.Serializable(0x8E850436A596AA5, GameType.DS)]
    public class MatchGameKIN : MatchGame
    {
        [RTTI.Member(6, 0x48)] public String BuildID;
        [RTTI.Member(7, 0x50)] public Ref<TurbineContext> TurbineContext;
        [RTTI.Member(8, 0x58)] public int CurrentRound;
        [RTTI.Member(9, 0x60)] public String PlaylistID;
        [RTTI.Member(10, 0x68)] public int MaxPlayerCount;
        [RTTI.Member(11, 0x6C)] public int CurrentRunTime;
        [RTTI.Member(12, 0x70)] public int ExpectedTimeRemaining;
        [RTTI.Member(13, 0x74)] public int NextRoundIndex;
        [RTTI.Member(14, 0x78)] public Array<Ref<MatchPlayerKIN>> Spectators;
    }

    [RTTI.Serializable(0x35E354334F026C52, GameType.DS)]
    public class MatchGameUpdate : MatchMessage
    {
        [RTTI.Member(3, 0x28)] public Ref<MatchGame> Game;
    }

    [RTTI.Serializable(0x83A68AADB34B048D, GameType.DS)]
    public class MatchGameUpdateKIN : MatchGameUpdate
    {
        [RTTI.Member(4, 0x30)] public String ClanPlayerGroup1;
        [RTTI.Member(5, 0x38)] public String ClanPlayerGroup2;
    }

    [RTTI.Serializable(0xF2AF0E9F5B641DBD, GameType.DS)]
    public class MatchMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String UUID;
    }

    [RTTI.Serializable(0x1355057D551AB109, GameType.DS)]
    public class MatchPlayer : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public WString AccountID;
    }

    [RTTI.Serializable(0x83F7295429AB6415, GameType.DS)]
    public class MatchPlayerGroup : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String RequestID;
        [RTTI.Member(3, 0x28)] public Array<Ref<MatchPlayer>> Players;
    }

    [RTTI.Serializable(0xB147D052F37FCC99, GameType.DS)]
    public class MatchPlayerKIN : MatchPlayer
    {
        [RTTI.Member(3, 0x28)] public MatchSkillRating SkillRating;
        [RTTI.Member(4, 0x40)] public String Faction;
        [RTTI.Member(5, 0x48)] public int GameJoinTimeMs;
        [RTTI.Member(6, 0x4C)] public int XpEarned;
        [RTTI.Member(7, 0x50)] public Array<Ref<PingTime>> PingTimes;
        [RTTI.Member(8, 0x60)] public WString ClanTag;
    }

    [RTTI.Serializable(0xC879D9EBB4835E1C, GameType.DS)]
    public class MatchRequest : MatchMessage
    {
        [RTTI.Member(3, 0x28)] public Array<Ref<MatchPlayer>> Players;
    }

    [RTTI.Serializable(0x554FC011842F8591, GameType.DS)]
    public class MatchRequestKIN : MatchRequest
    {
        [RTTI.Member(4, 0x38)] public String BuildID;
        [RTTI.Member(5, 0x40)] public Array<String> PreferredMaps;
        [RTTI.Member(6, 0x50)] public Array<String> AvailableMaps;
        [RTTI.Member(7, 0x60)] public String Playlist;
    }

    [RTTI.Serializable(0x7892458F28A8EC4C, GameType.DS)]
    public class MatchRequestResult : MatchResult
    {
        [RTTI.Member(2, 0x20)] public String RequestUUID;
        [RTTI.Member(3, 0x28)] public float Progress;
        [RTTI.Member(5, 0x30)] public HashMap<String_double> Attributes;
        [RTTI.Member(4, 0x40)] public Array<Ref<MatchAssignment>> Assignments;
    }

    [RTTI.Serializable(0x810388BC66BDBB22, GameType.DS)]
    public class MatchResult : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x628864AFD54D3503, GameType.DS)]
    public class MatchSkillRating : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public double Value;
        [RTTI.Member(1, 0x10)] public double RD;
    }

    [RTTI.Serializable(0x7B725F65F7A1D0E0, GameType.DS)]
    public class MaterialBindingInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingHandle;
        [RTTI.Member(1, 0x4)] public uint32 BindingType;
        [RTTI.Member(2, 0x8)] public uint32 BindingIdx;
    }

    [RTTI.Serializable(0xB063FE35EFB53D28, GameType.DS)]
    public class MaterialConfigResourceMap : Resource
    {
    }

    [RTTI.Serializable(0x212D54A2521BA69F, GameType.DS)]
    public class MaterialLightingResource : Resource
    {
        [RTTI.Member(2, 0x20)] public HairMaterial HairMaterial;
        [RTTI.Member(3, 0x50)] public SkinMaterial SkinMaterial;
        [RTTI.Member(4, 0x64)] public FoliageMaterial FoliageMaterial;
        [RTTI.Member(5, 0x70)] public bool UseGGX;
    }

    [RTTI.Serializable(0x8C7D6873379B060D, GameType.DS)]
    public class MaterialTypeReplacement
    {
        [RTTI.Member(0, 0x0)] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(1, 0x8)] public Ref<MaterialTypeResource> ReplacementMaterialTypeResource;
    }

    [RTTI.Serializable(0xE296AC3208270039, GameType.DS)]
    public class MaterialTypeResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public MaterialType MaterialType;
        [RTTI.Member(4, 0x28, "General")] public Array<Ref<MaterialTypeResource>> DerivedMaterialTypeResources;
        [RTTI.Member(5, 0x38, "General")] public CPtr<MaterialTypeResource> BaseMaterialTypeResource;
        [RTTI.Member(6, 0x40, "General")] public RGBAColor DebugColor;
        [RTTI.Member(7, 0x44, "General")] public EMaterialDebugType DebugType;
        [RTTI.Member(9, 0x48, "Options")] public bool BlocksVision;
        [RTTI.Member(10, 0x49, "Options")] public bool BlocksAIBulletFireTest;
        [RTTI.Member(18, 0x4C, "Sound")] public float TransmissionLoss;
        [RTTI.Member(20, 0x50, "SpeedModifier")] public float StandSpeedModifier;
        [RTTI.Member(21, 0x54, "SpeedModifier")] public float CrouchSpeedModifier;
        [RTTI.Member(22, 0x58, "SpeedModifier")] public float FrictionModifier;
        [RTTI.Member(11, 0x5C, "Options")] public int BlockingPower;
        [RTTI.Member(12, 0x60, "Options")] public float Hardness;
        [RTTI.Member(13, 0x64, "Options")] public bool BlocksExplosion;
        [RTTI.Member(14, 0x65, "Options")] public bool MuddyInTheRain;
        [RTTI.Member(15, 0x66, "Options")] public bool IsNaturalMaterial;
        [RTTI.Member(16, 0x68, "Options")] public EDSMaterialConfigType MaterialConfigType;
    }

    [RTTI.Serializable(0xF5E3FAC3B21A6C53, GameType.DS)]
    public class MaterialTypeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x913F1FE780869328, GameType.DS)]
    public class MaxHealthStatModifierResource : ActiveStatModifierResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ExtraHealthComponentResource> ExtraHealthComponent;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CurveResource> RatingToHealthCurve;
    }

    [RTTI.Serializable(0xAC4C348C5C0BDA31, GameType.DS)]
    public class MeleeAttackAnimationResource : Resource
    {
        [RTTI.Member(12, 0x20, "Animation")] public String StrikeAnimTagName;
        [RTTI.Member(3, 0x28, "Logic")] public Ref<EntityComponentResource> DamageComponent;
        [RTTI.Member(5, 0x30, "ChainedAttacks")] public EMeleeAttackRotationRestriction RotationRestriction;
        [RTTI.Member(6, 0x31, "ChainedAttacks")] public bool AllowChainedLightAttack;
        [RTTI.Member(7, 0x32, "ChainedAttacks")] public bool AllowChainedHeavyAttack;
        [RTTI.Member(8, 0x33, "ChainedAttacks")] public bool AllowChainedChargedAttack;
        [RTTI.Member(9, 0x34, "ChainedAttacks")] public bool AllowChainedJumpAttack;
        [RTTI.Member(10, 0x35, "ChainedAttacks")] public bool AllowChainedDashAttack;
    }

    [RTTI.Serializable(0xB15E7E4652333D85, GameType.DS)]
    public class MeleeAttackEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x66D7C0529FE16EEF, GameType.DS)]
    public class MeleeAttackEventResource : PausableEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0x20046E0FBB288075, GameType.DS)]
    public class MeleeBlockComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9D466683E2058732, GameType.DS)]
    public class MeleeBlockComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<MonitoredAnimationResource> BlockAnimation;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<MeleeBlockModifier>> BlockModifiers;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<DamageSettings> ParryDamageSettings;
        [RTTI.Member(6, 0x40, "Logic")] public float BlockStrength;
    }

    [RTTI.Serializable(0x400E17B40F77FD1F, GameType.DS)]
    public class MeleeBlockComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x95701ABB877676A5, GameType.DS)]
    public class MeleeBlockModifier : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<DamageTypeGroup> DamageTypeGroup;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(5, 0x38, "Logic")] public float DamageCap;
        [RTTI.Member(6, 0x3C, "Logic")] public float DamageMultiplier;
        [RTTI.Member(7, 0x40, "Logic")] public float ImpactSeverityCap;
        [RTTI.Member(8, 0x44, "Logic")] public float ImpactSeverityMultiplier;
    }

    [RTTI.Serializable(0x593E4ED28CA6E6C1, GameType.DS)]
    public class MeleeDamageBox : MeleeDamageShapeType
    {
        [RTTI.Member(4, 0x70)] public BoundingBox3 Box;
    }

    [RTTI.Serializable(0x32B661F15F80373D, GameType.DS)]
    public class MeleeDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDDC840E2AB1C0219, GameType.DS)]
    public class MeleeDamageComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x59209D97B58F0844, GameType.DS)]
    public class MeleeDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<MeleeDamageShapeResource>> DamageShapes;
        [RTTI.Member(4, 0x30, "Logic")] public bool StartsAttackEventChain;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<AIAuralStimulusResource> AuralStimulusOnImpact;
    }

    [RTTI.Serializable(0x1AEB570F9E4F0F21, GameType.DS)]
    public class MeleeDamageDirectionalShapeCurve : MeleeDamageShapeType
    {
        [RTTI.Member(4, 0x70)] public Ref<CurveResource> ShapeCurve;
    }

    [RTTI.Serializable(0x443E699B906FBBC5, GameType.DS)]
    public class MeleeDamageShapeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<MeleeDamageShapeType>> ShapeTypes;
        [RTTI.Member(4, 0x30, "Logic")] public bool UseSweptDamage;
        [RTTI.Member(5, 0x31, "Logic")] public bool CanHitWorld;
        [RTTI.Member(6, 0x38, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(7, 0x48, "Logic")] public EMeleeDamageImpulseDirectionType ImpulseDirectionType;
        [RTTI.Member(8, 0x50, "Logic")] public Vec3 EntityImpulseDirection;
        [RTTI.Member(9, 0x60, "Logic")] public Ref<MaterialTypeResource> DamageMaterialTypeResource;
        [RTTI.Member(10, 0x68, "Logic")] public Ref<MaterialTypeResource> BlockedMaterialTypeResource;
        [RTTI.Member(11, 0x70, "Logic")] public float GuardBreakStrength;
        [RTTI.Member(12, 0x74, "Logic")] public bool ApplyImpactAnimationOnParent;
        [RTTI.Member(13, 0x78, "Logic")] public float ImpactAnimationSpeed;
        [RTTI.Member(14, 0x7C, "Logic")] public float ImpactAnimationDuration;
        [RTTI.Member(15, 0x80, "Logic")] public float TargetImpactAnimationSpeed;
        [RTTI.Member(16, 0x84, "Logic")] public float TargetImpactAnimationDuration;
        [RTTI.Member(17, 0x88, "Logic")] public CPtr<EntityAction> DamageAction;
        [RTTI.Member(18, 0x90, "Logic")] public Ref<GraphProgramResource> ModifyDamageGraphResource;
    }

    [RTTI.Serializable(0x17ECF6FD2581A1DB, GameType.DS)]
    public class MeleeDamageShapeType : Resource
    {
        [RTTI.Member(2, 0x20)] public String DamageLocationHelper;
        [RTTI.Member(3, 0x30)] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xD456B36122D66267, GameType.DS)]
    public class MeleeDamageSphere : MeleeDamageShapeType
    {
        [RTTI.Member(4, 0x70)] public float Radius;
    }

    [RTTI.Serializable(0x8E11E3EB9A7660, GameType.DS)]
    public class MeleeMagnetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x85B1E7939C7CA239, GameType.DS)]
    public class MeleeMagnetComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Target")] public Ref<CameraMagnetTagResource> TargetTag;
    }

    [RTTI.Serializable(0xD3EF9AC8A7513F14, GameType.DS)]
    public class MeleeWeaponAttackTypeResource : Resource
    {
        [RTTI.Member(7, 0x20, "Animation")] public Array<String> StrikeAnimVarNames;
        [RTTI.Member(3, 0x30, "Logic")] public float ChargeDuration;
        [RTTI.Member(8, 0x38, "Animation")] public Array<Ref<AIFaction>> AlwaysEvaluateFactions;
        [RTTI.Member(9, 0x48, "Animation")] public Array<Ref<BooleanFact>> IgnoreTargetFacts;
        [RTTI.Member(10, 0x58, "Animation")] public Ref<CurveResource> DistanceAutoAimAngleCurve;
        [RTTI.Member(11, 0x60, "Animation")] public float MaxAutoAimDistance;
        [RTTI.Member(12, 0x64, "Animation")] public FRange MaxHeightDifference;
        [RTTI.Member(13, 0x6C, "Animation")] public float WarpDistanceFromTarget;
        [RTTI.Member(14, 0x70, "Animation")] public float InAirMeleeStrikeRadius;
        [RTTI.Member(15, 0x80, "Animation")] public Vec3 InAirMeleeStrikeOffset;
        [RTTI.Member(4, 0x90, "Logic")] public float MeleeMoveMaxTurnSpeed;
        [RTTI.Member(5, 0x94, "Logic")] public float MeleeMoveSpeedModifier;
    }

    [RTTI.Serializable(0xC4941CAA686C81DE, GameType.DS)]
    public class MeleeWeaponComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x68709642257079A7, GameType.DS)]
    public class MeleeWeaponComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x6BDAF7ABBA6D27FD, GameType.DS)]
    public class MeleeWeaponComponentResource : EntityComponentResource
    {
        [RTTI.Member(8, 0x20, "Logic")] public Ref<MeleeWeaponAttackTypeResource> LightAttackType;
        [RTTI.Member(9, 0x28, "Logic")] public Ref<MeleeWeaponAttackTypeResource> HeavyAttackType;
        [RTTI.Member(10, 0x30, "Logic")] public Ref<MeleeWeaponAttackTypeResource> ChargedAttackType;
        [RTTI.Member(11, 0x38, "Logic")] public Ref<MeleeWeaponAttackTypeResource> JumpAttackType;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<MeleeWeaponAttackTypeResource> DashAttackType;
        [RTTI.Member(13, 0x48, "Logic")] public Array<Ref<MeleeAttackAnimationResource>> AllAttackAnimations;
        [RTTI.Member(3, 0x58, "Logic")] public int MaxQueueLength;
        [RTTI.Member(4, 0x5C, "Logic")] public float MaxAllowedRotation;
        [RTTI.Member(5, 0x60, "Logic")] public float RotationClampThreshold;
        [RTTI.Member(15, 0x68, "Animation")] public String ChargedAttackAnimVarName;
        [RTTI.Member(16, 0x70, "Animation")] public String ChargingAnimTagName;
        [RTTI.Member(6, 0x78, "Logic")] public float HitNoDamageStaggerImpactSeverity;
        [RTTI.Member(7, 0x7C, "Logic")] public float HitWorldFloorAngle;
        [RTTI.Member(17, 0x80, "Animation")] public String MeleeSwingIndexAnimName;
        [RTTI.Member(19, 0x88, "Unlocks")] public String MeleeSkillLevelAnimVarName;
        [RTTI.Member(20, 0x90, "Unlocks")] public Array<Ref<PerkLevel>> MeleeSkillLevelPerks;
    }

    [RTTI.Serializable(0x45624611FE6DF00C, GameType.DS)]
    public class MeleeWeaponComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD32365404DA0ACA, GameType.DS)]
    public class MeleeWeaponMode : WeaponMode
    {
    }

    [RTTI.Serializable(0xD752529121703303, GameType.DS)]
    public class MeleeWeaponModeAnimationInfoBase : Resource
    {
    }

    [RTTI.Serializable(0x6B68D4F3AE8D9C51, GameType.DS)]
    public class MeleeWeaponModeAnimationInfoDirectional : MeleeWeaponModeAnimationInfoBase
    {
        [RTTI.Member(2, 0x20)] public String AnimationVariableName;
        [RTTI.Member(3, 0x28)] public Array<MeleeWeaponModeAnimationInfoValuePair> AttackValuePairs;
        [RTTI.Member(4, 0x38)] public bool Switch;
        [RTTI.Member(5, 0x39)] public ESwitchInputSelectionMethod InputSelectionMethod;
    }

    [RTTI.Serializable(0xAB17FE48D25F5C8E, GameType.DS)]
    public class MeleeWeaponModeAnimationInfoSource : MeleeWeaponModeAnimationInfoBase
    {
        [RTTI.Member(2, 0x20)] public float Duration;
        [RTTI.Member(3, 0x24)] public float UpdateTargetDuration;
        [RTTI.Member(4, 0x28)] public float UpdateTargetOverrideDuration;
        [RTTI.Member(5, 0x2C)] public float PrimaryDamageTime;
        [RTTI.Member(6, 0x30)] public Vec3 PrimaryDamageBonePosition;
        [RTTI.Member(7, 0x40)] public Vec3 PrimaryDamagePosition;
        [RTTI.Member(8, 0x50)] public float PrimaryDamageRotation;
        [RTTI.Member(9, 0x54)] public float EndOfAllDamageTime;
        [RTTI.Member(10, 0x60)] public Vec3 PostDamageDisplacement;
        [RTTI.Member(11, 0x70)] public bool HasSupportForMovingEnd;
    }

    [RTTI.Serializable(0xDD5B2D6B6A081B6F, GameType.DS)]
    public class MeleeWeaponModeAnimationInfoValuePair
    {
        [RTTI.Member(0, 0x0)] public Ref<MeleeWeaponModeAnimationInfoBase> AttackInfo;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0x91B7D71C9F4A22CA, GameType.DS)]
    public class MeleeWeaponModeAttackState : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String StateName;
        [RTTI.Member(4, 0x28, "Logic")] public int AnimationEndSyncEventIndex;
        [RTTI.Member(5, 0x2C, "Logic")] public AnimationEventID MovingEndAnimEvent;
        [RTTI.Member(6, 0x30, "Logic")] public String PrimaryDamageHelper;
        [RTTI.Member(7, 0x40, "Logic")] public Vec3 PrimaryDamageOffset;
        [RTTI.Member(8, 0x50, "Logic")] public AnimationEventID PrimaryDamageAnimEvent;
        [RTTI.Member(9, 0x54, "Logic")] public bool PlansAheadWhenAboutToStop;
        [RTTI.Member(10, 0x55, "Logic")] public bool ProjectDamageToRootboneTrajectory;
    }

    [RTTI.Serializable(0xF78A3EC2E300CF32, GameType.DS)]
    public class MeleeWeaponModeDamageEvent : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public CPtr<EntityAction> StartDamageAction;
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<EntityAction> StopDamageAction;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Ref<EntityComponentResource>> DamageComponents;
        [RTTI.Member(7, 0x40, "Animation")] public String AnimationEvent;
    }

    [RTTI.Serializable(0x9DF2F796199AF0AE, GameType.DS)]
    public class MeleeWeaponModeExitState : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String StateName;
        [RTTI.Member(4, 0x28, "Logic")] public AnimationNodeID StateID;
        [RTTI.Member(5, 0x2C, "Logic")] public float Duration;
        [RTTI.Member(6, 0x30, "Logic")] public int SyncEventIndex;
    }

    [RTTI.Serializable(0xF58B95337E22B343, GameType.DS)]
    public class MeleeWeaponModeResource : WeaponModeResource
    {
        [RTTI.Member(9, 0x50, "Logic")] public String TriggerAnimVarName;
        [RTTI.Member(12, 0x58, "Logic")] public float TriggerDurationAnimVarName;
        [RTTI.Member(10, 0x60, "Logic")] public String BreakoutAnimVarName;
        [RTTI.Member(11, 0x68, "Logic")] public String SuccessAnimVarName;
        [RTTI.Member(13, 0x70, "Logic")] public String ControlAnimVarName;
        [RTTI.Member(14, 0x78, "Logic")] public float ControlAnimVarValue;
        [RTTI.Member(20, 0x80, "Logic")] public String IsActiveAnimTagName;
        [RTTI.Member(21, 0x88, "Logic")] public String DirectionAnimVarName;
        [RTTI.Member(22, 0x90, "Logic")] public String DistanceAnimVarName;
        [RTTI.Member(23, 0x98, "Logic")] public String MovingEnterAnimVarName;
        [RTTI.Member(15, 0xA0, "Logic")] public Array<Ref<MeleeWeaponModeAttackState>> AnimationAttackStates;
        [RTTI.Member(16, 0xB0, "Logic")] public Array<AnimationNodeID> AnimationAttackStateNodeIDs;
        [RTTI.Member(17, 0xC0, "Logic")] public Array<Ref<MeleeWeaponModeAnimationInfoBase>> AnimationInfo;
        [RTTI.Member(18, 0xD0, "Logic")] public Ref<MorphemeAnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(19, 0xD8, "Logic", true)] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(24, 0xE0, "Logic")] public CPtr<EntityAction> StartAction;
        [RTTI.Member(25, 0xE8, "Logic")] public CPtr<EntityAction> StopAction;
        [RTTI.Member(26, 0xF0, "Logic")] public CPtr<EntityAction> StartActionOnTarget;
        [RTTI.Member(27, 0xF8, "Logic")] public CPtr<EntityAction> StopActionOnTarget;
        [RTTI.Member(28, 0x100, "Logic")] public CPtr<EntityAction> HitAction;
        [RTTI.Member(29, 0x108, "Logic")] public Array<Ref<MeleeWeaponModeDamageEvent>> DamageEvents;
        [RTTI.Member(30, 0x118, "Logic")] public float DamageClamp;
        [RTTI.Member(31, 0x11C, "Logic")] public float DurationOverride;
        [RTTI.Member(32, 0x120, "Logic")] public bool DisableTranslationPastTarget;
        [RTTI.Member(33, 0x124, "Logic")] public FRange DistanceClamp;
        [RTTI.Member(34, 0x130, "Logic")] public Ref<WarpedAnimation> WarpedAnimation;
        [RTTI.Member(35, 0x138, "Logic")] public String ForcedMountAnimTagName;
        [RTTI.Member(36, 0x140, "Logic")] public String ForcedMountSuccessfulAnimVarName;
        [RTTI.Member(37, 0x148, "Logic")] public String ForcedMountBoxHelper;
        [RTTI.Member(38, 0x150, "Logic")] public BoundingBox3 ForcedMountBox;
        [RTTI.Member(39, 0x170, "Logic")] public Ref<MountModeID> ForcedMountModeID;
        [RTTI.Member(42, 0x190, "AI")] public float DamageRadius;
        [RTTI.Member(43, 0x198, "AI")] public Array<Ref<VolumetricAnnotation>> TriggerVolumes;
        [RTTI.Member(44, 0x1A8, "AI")] public Array<Ref<VolumetricAnnotation>> ExclusionVolumes;
        [RTTI.Member(45, 0x1B8, "AI")] public Array<Ref<VolumetricAnnotation>> MeleeLimitationVolumes;
        [RTTI.Member(40, 0x1CC, "Logic")] public bool CanAttackCorpses;
        [RTTI.Member(49, 0x1D0, "Attach")] public String AttachTargetToHelperOnHit;
        [RTTI.Member(46, 0x1D8, "AI")] public EAttackNodePolicy AttackMode;
        [RTTI.Member(47, 0x1DC, "AI")] public float CollisionRadiusOverride;
    }

    [RTTI.Serializable(0x8CBCAC9E77769A5C, GameType.DS)]
    public class MeleeWeaponModeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD7379E62E9E99AD6, GameType.DS)]
    public class MeleeWeaponModeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCA3C3FB2EBB855F7, GameType.DS)]
    public class MemoryFactActionBase : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public String Fact;
    }

    [RTTI.Serializable(0x23945F4CC0E9A02F, GameType.DS)]
    public class Menu : CoreObject
    {
    }

    [RTTI.Serializable(0x1C8D586F7B9F1A36, GameType.DS)]
    public class MenuActionBackToPage : MenuActionOpenPage
    {
    }

    [RTTI.Serializable(0x1DC1A19C966E6D81, GameType.DS)]
    public class MenuActionCloseDialog : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public CPtr<MenuVisualResource> Dialog;
    }

    [RTTI.Serializable(0x5DAC3F1F82B78F36, GameType.DS)]
    public class MenuActionControlAnimation : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public EMenuAnimationAction Action;
        [RTTI.Member(3, 0x28)] public Ref<MenuVisualResource> Target;
        [RTTI.Member(5, 0x30)] public Ref<MenuAnimationResource> Animation;
        [RTTI.Member(4, 0x38)] public EMenuAnimationTrigger Trigger;
    }

    [RTTI.Serializable(0x2EF86A20CFCC64A7, GameType.DS)]
    public class MenuActionControlMovie : MenuActionResource
    {
        [RTTI.Member(3, 0x20)] public EMenuMovieAction Action;
        [RTTI.Member(2, 0x28)] public Ref<MenuMovieResource> MenuMovieResource;
    }

    [RTTI.Serializable(0x600D1B8CA2BD2A9A, GameType.DS)]
    public class MenuActionCustomFunction : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public CPtr<MenuFunctionResource> FunctionClass;
        [RTTI.Member(3, 0x28)] public String FunctionName;
        [RTTI.Member(4, 0x30)] public Array<String> Arguments;
    }

    [RTTI.Serializable(0xD03973F5B7217CEB, GameType.DS)]
    public class MenuActionDisableNavigation : MenuActionResource
    {
    }

    [RTTI.Serializable(0x91D8D52AEE9B8E9, GameType.DS)]
    public class MenuActionEnableNavigation : MenuActionResource
    {
    }

    [RTTI.Serializable(0xA63480C43C658343, GameType.DS)]
    public class MenuActionGraphProgram : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0xC086CB42CB3F77, GameType.DS)]
    public class MenuActionHideElement : MenuActionTagProperty
    {
    }

    [RTTI.Serializable(0x5385C3420EB80F73, GameType.DS)]
    public class MenuActionInstanceMethod : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public CPtr<MenuElementResource> Controller;
        [RTTI.Member(3, 0x28)] public String Function;
    }

    [RTTI.Serializable(0xCF2E7671AAA1C869, GameType.DS)]
    public class MenuActionOpenDialog : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public CPtr<MenuVisualResource> Dialog;
    }

    [RTTI.Serializable(0x315EC0F5516D9DC5, GameType.DS)]
    public class MenuActionOpenPage : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public UUIDRef<MenuPage> Page;
        [RTTI.Member(3, 0x30)] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(4, 0x40)] public CPtr<MenuElementResource> TargetElement;
    }

    [RTTI.Serializable(0xDD23C1ADB2BDB7C, GameType.DS)]
    public class MenuActionOpenVKB : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> Label;
        [RTTI.Member(3, 0x28)] public Ref<LocalizedTextResource> DefaultText;
        [RTTI.Member(4, 0x30)] public int MaxCharLength;
        [RTTI.Member(5, 0x34)] public int VKBOptions;
    }

    [RTTI.Serializable(0xF3FDD5977E73223E, GameType.DS)]
    public class MenuActionPlaySound : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public Ref<SoundResource> Sound;
        [RTTI.Member(3, 0x28)] public EUpdateFrequency Frequency;
        [RTTI.Member(4, 0x2C)] public int DelayFrame;
    }

    [RTTI.Serializable(0x2E560637CC8CB4DD, GameType.DS)]
    public class MenuActionQuitMenu : MenuActionResource
    {
    }

    [RTTI.Serializable(0xF631AC27D05E0028, GameType.DS)]
    public class MenuActionResource : CoreObject
    {
    }

    [RTTI.Serializable(0xBF74363911B4278C, GameType.DS)]
    public class MenuActionSetFocus : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public EMenuActionFocusType Type;
        [RTTI.Member(3, 0x28)] public CPtr<MenuVisualResource> TargetElement;
        [RTTI.Member(4, 0x30)] public bool FindTargetInChildElements;
    }

    [RTTI.Serializable(0xB8EBED663E76783F, GameType.DS)]
    public class MenuActionShowElement : MenuActionTagProperty
    {
    }

    [RTTI.Serializable(0x8B2D00CE3B30D374, GameType.DS)]
    public class MenuActionTagProperty : MenuActionResource
    {
        [RTTI.Member(2, 0x20)] public CPtr<MenuVisualResource> TargetElement;
    }

    [RTTI.Serializable(0x74D4288820B0C61F, GameType.DS)]
    public class MenuAnimationBinding : CoreObject
    {
        [RTTI.Member(4, 0x20, "Properties")] public Ref<MenuAnimationResource> Animation;
        [RTTI.Member(5, 0x28, "Properties")] public EMenuAnimationTrigger Trigger;
        [RTTI.Member(6, 0x29, "Properties")] public bool TriggerInverseAnimation;
        [RTTI.Member(7, 0x30, "Properties")] public Ref<MenuDataBinding> Delay;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<MenuActionResource> OnAnimationStart;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<MenuActionResource> OnAnimationEnd;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<MenuActionResource> OnAnimationLoop;
        [RTTI.Member(3, 0x50, "Properties")] public bool Ignored;
    }

    [RTTI.Serializable(0x3795E9BF88E1261D, GameType.DS)]
    public class MenuAnimationInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xF44C4660F56EFC78, GameType.DS)]
    public class MenuAnimationKeyFrame : Resource
    {
        [RTTI.Member(3, 0x20, "Properties")] public int FrameNumber;
        [RTTI.Member(4, 0x24, "Properties")] public float Value;
        [RTTI.Member(5, 0x28, "Properties")] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0xED4E01FF28F22818, GameType.DS)]
    public class MenuAnimationResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Properties")] public ELoopMode LoopMode;
        [RTTI.Member(6, 0x2C, "Properties")] public EUpdateFrequency Frequency;
        [RTTI.Member(7, 0x30, "Properties")] public int Blendtime;
        [RTTI.Member(8, 0x38, "Properties")] public Array<Ref<MenuElementAnimationResource>> PropertyAnimations;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<MenuActionResource> OnAnimationStart;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<MenuActionResource> OnAnimationEnd;
    }

    [RTTI.Serializable(0xBDC3B1D90A426B89, GameType.DS)]
    public class MenuArrayBinding : MenuDataBinding
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<MenuDataBinding>> Elements;
    }

    [RTTI.Serializable(0xC1C7995EB644A212, GameType.DS)]
    public class MenuBoolBinding : MenuDataBinding
    {
        [RTTI.Member(2, 0x20)] public bool Value;
    }

    [RTTI.Serializable(0x9B2511A442594F3D, GameType.DS)]
    public class MenuCameraAnimationPropertyResource : MenuPropertyAnimationResource
    {
        [RTTI.Member(4, 0x38)] public EMenuCameraProperty TargetProperty;
    }

    [RTTI.Serializable(0xEE806196A636FCB5, GameType.DS)]
    public class MenuCameraResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Orientation")] public Vec3 Position;
        [RTTI.Member(4, 0x30, "Orientation")] public Vec3 LookAt;
        [RTTI.Member(5, 0x40, "Orientation")] public Vec3 Up;
        [RTTI.Member(9, 0x50, "Frustum")] public float HorizontalFOV;
        [RTTI.Member(7, 0x54, "Frustum")] public float NearPlane;
        [RTTI.Member(8, 0x58, "Frustum")] public float FarPlane;
    }

    [RTTI.Serializable(0xE99D9B16DF8425BE, GameType.DS)]
    public class MenuCatalogRobotPartResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<UITexture> Texture;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<UITexture> PreviewTexture;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<FocusScannableBase> PartScannableBase;
    }

    [RTTI.Serializable(0xC156CF844FE4F63A, GameType.DS)]
    public class MenuDataBinding : CoreObject
    {
    }

    [RTTI.Serializable(0x89257E3D468AAEE1, GameType.DS)]
    public class MenuDataResource : MenuElementResource
    {
        [RTTI.Member(7, 0x30, "Properties")] public Ref<DataSourceResource> DataSourceResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<MenuActionResource> OnDataChanged;
    }

    [RTTI.Serializable(0x1BD8931266CA0982, GameType.DS)]
    public class MenuDataResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF310A3C594D95330, GameType.DS)]
    public class MenuDataSourceBinding : MenuDataBinding
    {
        [RTTI.Member(2, 0x20)] public KJPXPath KJPXPath;
        [RTTI.Member(3, 0x60)] public CPtr<MenuElementResource> DataResource;
    }

    [RTTI.Serializable(0x73B2C4E46BBCEFC0, GameType.DS)]
    public class MenuElementAnimationInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x8172952FF89C9082, GameType.DS)]
    public class MenuElementAnimationResource : Resource
    {
        [RTTI.Member(2, 0x20)] public bool Ignored;
    }

    [RTTI.Serializable(0x2DF4C4CEF0B7BEA6, GameType.DS)]
    public class MenuElementResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public bool Ignored;
    }

    [RTTI.Serializable(0xBEDBF2AC7B9E3C66, GameType.DS)]
    public class MenuElementResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8105657B3575A145, GameType.DS)]
    public class MenuEventBinding : CoreObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public EMenuEvent Event;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<MenuActionResource> Action;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Ref<MenuActionResource>> Actions;
    }

    [RTTI.Serializable(0xC4DFE226D445EF19, GameType.DS)]
    public class MenuFunctionBinding : MenuDataBinding
    {
        [RTTI.Member(2, 0x20)] public EMenuFunctionBindingVariable Variable;
    }

    [RTTI.Serializable(0x850D098078D35902, GameType.DS)]
    public class MenuFunctionResource : MenuElementResource
    {
    }

    [RTTI.Serializable(0xF9C57FECB47802A5, GameType.DS)]
    public class MenuGridPanelCellResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x198, "Properties")] public Ref<MenuDataBinding> SkipCursor;
    }

    [RTTI.Serializable(0x1223154E81565DE8, GameType.DS)]
    public class MenuGridPanelResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(54, 0x190, "Logic")] public Ref<MenuActionResource> OnChange;
        [RTTI.Member(48, 0x198, "Properties")] public WString DefaultValue;
        [RTTI.Member(49, 0x1A0, "Properties")] public Ref<MenuDataBinding> ColumnCount;
        [RTTI.Member(50, 0x1A8, "Properties")] public int RowCount;
        [RTTI.Member(59, 0x1AC, "ScrollBehavior")] public int ScrollTopOffset;
        [RTTI.Member(60, 0x1B0, "ScrollBehavior")] public int ScrollBottomOffset;
        [RTTI.Member(61, 0x1B4, "ScrollBehavior")] public int ScrollRightOffset;
        [RTTI.Member(62, 0x1B8, "ScrollBehavior")] public int ScrollLeftOffset;
        [RTTI.Member(57, 0x1BC, "ScrollBar")] public int HorizontalScrollbarOffset;
        [RTTI.Member(63, 0x1C0, "ScrollBehavior")] public float ScrollSpeedX;
        [RTTI.Member(64, 0x1C4, "ScrollBehavior")] public float ScrollSpeedY;
        [RTTI.Member(52, 0x1C8, "Properties")] public bool VerticalCycling;
        [RTTI.Member(65, 0x1C9, "ScrollBehavior")] public bool ScrollFading;
        [RTTI.Member(56, 0x1CA, "ScrollBar")] public bool ShowScrollbar;
        [RTTI.Member(51, 0x1CB, "Properties")] public bool SkipDisabledCells;
        [RTTI.Member(66, 0x1CC, "ScrollBehavior")] public bool CanScrollWithoutFocus;
        [RTTI.Member(67, 0x1CD, "ScrollBehavior")] public bool ManualOffsetCaluculation;
        [RTTI.Member(68, 0x1CE, "ScrollBehavior")] public bool IsEnableMouseScroll;
        [RTTI.Member(69, 0x1CF, "ScrollBehavior")] public bool CanThroughMouseScrollEvent;
        [RTTI.Member(70, 0x1D0, "ScrollBehavior")] public bool CanScrollIndexChangeByMouse;
        [RTTI.Member(71, 0x1D1, "ScrollBehavior")] public bool CanScrollInModalDialogByMouse;
    }

    [RTTI.Serializable(0xFC3AAF5AFDE275A9, GameType.DS)]
    public class MenuImageLoaderSystemResource : Resource
    {
        [RTTI.Member(4, 0x20, "General")] public Array<MenuStreamingTexture> MenuStreamingTextures;
        [RTTI.Member(3, 0x30, "General")] public Ref<UITexture> FallbackTexture;
    }

    [RTTI.Serializable(0xC53D3E227B9B8032, GameType.DS)]
    public class MenuLayerResource : MenuElementResource
    {
        [RTTI.Member(7, 0x30, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(8, 0x40, "Properties")] public CPtr<MenuVisualResource> DefaultFocus;
        [RTTI.Member(9, 0x48, "Properties")] public bool ShowLegend;
        [RTTI.Member(10, 0x49, "Properties")] public bool HideMessage;
    }

    [RTTI.Serializable(0xE50B0F9E2B3921E6, GameType.DS)]
    public class MenuLegendHoldResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(49, 0x190, "HoldElements")] public Ref<MenuTextureResource> MainTextureElement;
        [RTTI.Member(50, 0x198, "HoldElements")] public Ref<MenuElementResource> HoldPanelElement;
        [RTTI.Member(51, 0x1A0, "HoldElements")] public Ref<MenuTextureResource> HoldTextureElement;
        [RTTI.Member(52, 0x1A8, "HoldElements")] public Array<Ref<UITexture>> HoldTextures;
        [RTTI.Member(54, 0x1B8, "HoldAnimations")] public Ref<MenuAnimationResource> HoldResetAnimation;
        [RTTI.Member(55, 0x1C0, "HoldAnimations")] public Ref<MenuAnimationResource> HoldStartAnimation;
        [RTTI.Member(56, 0x1C8, "HoldAnimations")] public Ref<MenuAnimationResource> HoldIdleAnimation;
        [RTTI.Member(57, 0x1D0, "HoldAnimations")] public Ref<MenuAnimationResource> HoldFinishAnimation;
        [RTTI.Member(58, 0x1D8, "HoldAnimations")] public uint64 HoldFinishAnimatingMs;
        [RTTI.Member(60, 0x1E0, "HoldSounds")] public Ref<SoundResource> HoldBgSound;
        [RTTI.Member(61, 0x1E8, "HoldSounds")] public Array<Ref<SoundResource>> HoldStepSounds;
    }

    [RTTI.Serializable(0xF13C3EDDF0365496, GameType.DS)]
    public class MenuLegendHoldResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC126CA1311DC7326, GameType.DS)]
    public class MenuLegendLabelResource : CoreObject
    {
        [RTTI.Member(3, 0x20, "Properties")] public ELegendButton Button;
        [RTTI.Member(4, 0x28, "Properties")] public Ref<MenuDataBinding> Text;
        [RTTI.Member(5, 0x30, "Properties")] public CPtr<MenuLegendResource> TargetLegend;
        [RTTI.Member(6, 0x38, "Properties")] public Ref<MenuDataBinding> Enabled;
        [RTTI.Member(7, 0x40, "Properties")] public Ref<MenuDataBinding> Visible;
        [RTTI.Member(8, 0x48, "Properties")] public Ref<MenuDataBinding> Hold;
    }

    [RTTI.Serializable(0xE50EADCF23E353E5, GameType.DS)]
    public class MenuLegendLabelResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x70CFA2178E50ED3A, GameType.DS)]
    public class MenuLegendResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public Ref<MenuDataBinding> IsShowGamepadOnly;
    }

    [RTTI.Serializable(0xB9B96D4B0CC80AC3, GameType.DS)]
    public class MenuLegendResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x43741833A8118814, GameType.DS)]
    public class MenuLinearFunctionBinding : MenuFunctionBinding
    {
        [RTTI.Member(3, 0x28)] public float Offset;
        [RTTI.Member(4, 0x2C)] public float Multiplier;
    }

    [RTTI.Serializable(0xE267A5D998F3336B, GameType.DS)]
    public class MenuListItemResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public Ref<MenuDataBinding> Selectable;
        [RTTI.Member(49, 0x198, "Properties")] public Ref<MenuDataBinding> SkipCursor;
    }

    [RTTI.Serializable(0xF3F8457DD8972178, GameType.DS)]
    public class MenuListResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public Ref<MenuDataBinding> DefaultValue;
        [RTTI.Member(49, 0x198, "Properties")] public float ScrollSpeed;
        [RTTI.Member(50, 0x19C, "Properties")] public bool ShowScrollBar;
        [RTTI.Member(51, 0x19D, "Properties")] public bool AlwaysShowScrollbarBg;
        [RTTI.Member(52, 0x1A0, "Properties")] public float ScrollAreaRatio;
        [RTTI.Member(53, 0x1A4, "Properties")] public bool Wrapping;
        [RTTI.Member(54, 0x1A5, "Properties")] public bool UseAnalogStickInput_;
        [RTTI.Member(55, 0x1A6, "Properties")] public bool IsFadeTopAndBottom;
        [RTTI.Member(56, 0x1A7, "Properties")] public bool IsUseOffscreenRenderTarget;
        [RTTI.Member(57, 0x1A8, "Properties")] public EMenuOrientation ListItemsOrientation;
        [RTTI.Member(58, 0x1B0, "Properties")] public MenuStyleAttributeFloat SelectedItemOffset;
        [RTTI.Member(59, 0x1C8, "Properties")] public bool SelectedItemFromStart;
        [RTTI.Member(60, 0x1D0, "Properties")] public Array<float> GradationOffsetZ;
        [RTTI.Member(61, 0x1E0, "Properties")] public Array<float> GradationOpacity;
        [RTTI.Member(62, 0x1F0, "Properties")] public bool UseHeadderScroll;
        [RTTI.Member(63, 0x1F4, "Properties")] public int UseCursorSkipIndex;
        [RTTI.Member(64, 0x1F8, "Properties")] public bool CanScrollWithoutFocus;
        [RTTI.Member(65, 0x1F9, "Properties")] public bool CanScrollIndexChangeByMouse;
        [RTTI.Member(66, 0x1FA, "Properties")] public bool CanScrollInModalDialogByMouse;
        [RTTI.Member(67, 0x1FB, "Properties")] public bool IsEnableMouseScroll;
        [RTTI.Member(68, 0x1FC, "Properties")] public bool CanThroughMouseScrollEvent;
        [RTTI.Member(69, 0x1FD, "Properties")] public bool CanChangeIndexByWheelInRange;
    }

    [RTTI.Serializable(0xD52C13A4DBDDD726, GameType.DS)]
    public class MenuLocalizedTextBinding : MenuDataBinding
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(3, 0x28)] public Array<MenuLocalizedTextParameter> Parameters;
    }

    [RTTI.Serializable(0xFDB35CACB4F736A6, GameType.DS)]
    public class MenuLocalizedTextParameter
    {
        [RTTI.Member(0, 0x0)] public String ParameterName;
        [RTTI.Member(1, 0x8)] public Ref<MenuDataBinding> ParameterValue;
    }

    [RTTI.Serializable(0x6437016F58A31D44, GameType.DS)]
    public class MenuLocalizerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<InGameIDToTextResource> InGameIDToResources;
    }

    [RTTI.Serializable(0xF3EF92F95D9F7A78, GameType.DS)]
    public class MenuMapResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public Ref<MenuDataBinding> ShowSelector;
    }

    [RTTI.Serializable(0x9E65F62C92430FAC, GameType.DS)]
    public class MenuModule : Module
    {
    }

    [RTTI.Serializable(0xD6763AD91500CD7E, GameType.DS)]
    public class MenuMovieEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x726E50165C45CB8E, GameType.DS)]
    public class MenuMovieEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public Ref<MovieResource> MovieResource;
        [RTTI.Member(7, 0x30, "Logic")] public int MovieStartFrame;
    }

    [RTTI.Serializable(0xFCBB3B78FDA4268E, GameType.DS)]
    public class MenuMovieResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Ref<MenuDataBinding> Source;
        [RTTI.Member(48, 0x188, "Properties")] public Ref<MenuDataBinding> StartFrame;
        [RTTI.Member(49, 0x190, "Properties")] public Ref<MenuDataBinding> LoopFrame;
        [RTTI.Member(50, 0x198, "Properties")] public bool FullScreen;
        [RTTI.Member(51, 0x199, "Properties")] public bool StartFromLastKeyFrame;
        [RTTI.Member(53, 0x1A0, "Logic")] public Array<MovieFrameMenuActionBinding> FrameActions;
        [RTTI.Member(54, 0x1B0, "Logic")] public Ref<MenuActionResource> OnMovieEnd;
    }

    [RTTI.Serializable(0xD06C00F88CC0B70D, GameType.DS)]
    public class MenuMovieResourceBinding : MenuObjectBinding
    {
        [RTTI.Member(2, 0x20)] public Ref<MovieResource> Value;
    }

    [RTTI.Serializable(0x915A019B39B3666, GameType.DS)]
    public class MenuNode : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x7A3540EBADA087A3, GameType.DS)]
    public class MenuObjectBinding : MenuDataBinding
    {
    }

    [RTTI.Serializable(0x322ED751A373BB78, GameType.DS)]
    public class MenuOffScreenRenderingManagerSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> UIOffScreenComposite;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> UIBlurComposite;
    }

    [RTTI.Serializable(0x602F61927820C4EA, GameType.DS)]
    public class MenuPage : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Properties")] public Ref<MenuLayerResource> PageRoot;
        [RTTI.Member(6, 0x30, "Properties")] public bool HasErrorHandler;
        [RTTI.Member(7, 0x31, "Properties")] public bool CanCloseMenu;
        [RTTI.Member(8, 0x32, "Properties")] public bool DisplayHUD;
        [RTTI.Member(9, 0x33, "Properties")] public EHAlign HUDHorizontalAlign;
        [RTTI.Member(10, 0x38, "Properties")] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(11, 0x48, "Properties")] public bool ForceOpaque;
        [RTTI.Member(12, 0x4C, "Properties")] public float FadeInDuration;
        [RTTI.Member(13, 0x50, "Properties")] public float FadeOutDuration;
        [RTTI.Member(14, 0x58, "Properties")] public Ref<SoundResource> GameToMenuTransitionSound;
        [RTTI.Member(15, 0x60, "Properties")] public bool TargetFrameRateOverrideEnabled;
        [RTTI.Member(16, 0x61, "Properties")] public EUpdateFrequency TargetFrameRateOverride;
    }

    [RTTI.Serializable(0x7A0FBF84328A75E8, GameType.DS)]
    public class MenuPageScreenEffect
    {
        [RTTI.Member(0, 0x0)] public UUIDRef<MenuPage> MenuPage;
        [RTTI.Member(1, 0x10)] public Ref<ScreenEffectResource> ScreenEffect;
    }

    [RTTI.Serializable(0xB4E248E43B875DD2, GameType.DS)]
    public class MenuPageSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4F1F7652CAE43BB4, GameType.DS)]
    public class MenuPanelResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(50, 0x190, "ScrollBehavior")] public bool Scrollable;
        [RTTI.Member(51, 0x194, "ScrollBehavior")] public EPanelScrollType ScrollType;
        [RTTI.Member(52, 0x198, "ScrollBehavior")] public bool ScrollbarAutoHide;
        [RTTI.Member(48, 0x19A, "Properties")] public EMenuBlendMode BlendMode;
    }

    [RTTI.Serializable(0x44E3B09AE9839CC9, GameType.DS)]
    public class MenuPolygonResource : MenuVisualResource
    {
        [RTTI.Member(48, 0x180, "Properties")] public Array<IVec2> Vertices;
        [RTTI.Member(47, 0x190, "Properties")] public bool Closed;
        [RTTI.Member(49, 0x198, "Properties")] public MenuStyleAttributeRGBAColor VertexColor;
        [RTTI.Member(50, 0x1B0, "Properties")] public Ref<MenuDataBinding> VertexTextureBinding;
        [RTTI.Member(51, 0x1B8, "Properties")] public Ref<UITexture> VertexTexture;
        [RTTI.Member(52, 0x1C0, "Properties")] public MenuStyleAttributeRGBAColor FillColor;
        [RTTI.Member(53, 0x1D8, "Properties")] public Ref<MenuDataBinding> FillTextureBinding;
        [RTTI.Member(54, 0x1E0, "Properties")] public Ref<UITexture> FillTexture;
        [RTTI.Member(55, 0x1E8, "Properties")] public MenuStyleAttributeRGBAColor LineColor;
        [RTTI.Member(56, 0x200, "Properties")] public float LineWidth;
        [RTTI.Member(57, 0x208, "Properties")] public Ref<MenuDataBinding> LineTextureBinding;
        [RTTI.Member(58, 0x210, "Properties")] public Ref<UITexture> LineTexture;
    }

    [RTTI.Serializable(0xC86B1B908C2D9238, GameType.DS)]
    public class MenuPrefabAtomArrayValue : MenuPrefabPropertyValue
    {
        [RTTI.Member(3, 0x28)] public Array<String> Value;
        [RTTI.Member(4, 0x38)] public EMenuPrefabArrayPropertyMode Mode;
    }

    [RTTI.Serializable(0xBCD054427F8D8088, GameType.DS)]
    public class MenuPrefabAtomValue : MenuPrefabPropertyValue
    {
        [RTTI.Member(3, 0x28)] public String Value;
    }

    [RTTI.Serializable(0xCEF9FEE8C3709DC7, GameType.DS)]
    public class MenuPrefabDefinition : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<MenuElementResource> Structure;
        [RTTI.Member(3, 0x28)] public Array<Ref<MenuPrefabProperty>> ExposedProperties;
    }

    [RTTI.Serializable(0xE12DFA15029125C6, GameType.DS)]
    public class MenuPrefabObjectArrayValue : MenuPrefabPropertyValue
    {
        [RTTI.Member(3, 0x28)] public Array<Ref<RTTIRefObject>> Value;
        [RTTI.Member(4, 0x38)] public EMenuPrefabArrayPropertyMode Mode;
    }

    [RTTI.Serializable(0xA06E503E08702BCD, GameType.DS)]
    public class MenuPrefabObjectValue : MenuPrefabPropertyValue
    {
        [RTTI.Member(3, 0x28)] public Ref<RTTIRefObject> Value;
    }

    [RTTI.Serializable(0x1B45EF8FB0D67F5B, GameType.DS)]
    public class MenuPrefabProperty : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<MenuPrefabPropertyTarget>> Properties;
    }

    [RTTI.Serializable(0xB8F8EC078230A1BC, GameType.DS)]
    public class MenuPrefabPropertyTarget : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<RTTIRefObject> RootElement;
        [RTTI.Member(3, 0x28)] public String AttributeGroup;
        [RTTI.Member(4, 0x30)] public String AttributeName;
        [RTTI.Member(5, 0x38)] public int ArrayIndex;
    }

    [RTTI.Serializable(0x37E898A1463AD0C9, GameType.DS)]
    public class MenuPrefabPropertyValue : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<MenuPrefabProperty> Property;
    }

    [RTTI.Serializable(0x54C3AD0D8A6258C5, GameType.DS)]
    public class MenuPrefabResource : MenuElementResource
    {
        [RTTI.Member(6, 0x30)] public Ref<MenuPrefabDefinition> Definition;
        [RTTI.Member(7, 0x38)] public Array<Ref<MenuPrefabPropertyValue>> Values;
    }

    [RTTI.Serializable(0xE65A303A129DB64E, GameType.DS)]
    public class MenuProgressBarBlockResource : MenuProgressBarResource
    {
        [RTTI.Member(70, 0x210, "Styles")] public Ref<MenuStyleClass> BarFilledPositive;
        [RTTI.Member(71, 0x218, "Styles")] public Ref<MenuStyleClass> BarFilledNegative;
    }

    [RTTI.Serializable(0xBB712BF400576DB8, GameType.DS)]
    public class MenuProgressBarResource : MenuSliderResource
    {
        [RTTI.Member(54, 0x1B0, "Properties")] public Ref<MenuDataBinding> CompareValue;
        [RTTI.Member(55, 0x1B8, "Properties")] public Ref<MenuDataBinding> BarFillTime;
        [RTTI.Member(56, 0x1C0, "Properties")] public bool ProgressTextVisible;
        [RTTI.Member(58, 0x1C8, "Styles")] public Ref<MenuStyleClass> Background;
        [RTTI.Member(59, 0x1D0, "Styles")] public Ref<MenuStyleClass> BarEmpty;
        [RTTI.Member(60, 0x1D8, "Styles")] public Ref<MenuStyleClass> BarFilled;
        [RTTI.Member(61, 0x1E0, "Styles")] public Ref<MenuStyleClass> BarNotch;
        [RTTI.Member(68, 0x1E8, "Sound")] public Ref<SoundResource> ScrollingSound;
        [RTTI.Member(63, 0x1F0, "Mouse")] public Vec2 NotchReceivableRange;
        [RTTI.Member(64, 0x200, "Mouse")] public bool CanChangeInModalDialogByMouse;
        [RTTI.Member(65, 0x201, "Mouse")] public bool CanChangeValueWithoutFocus;
        [RTTI.Member(67, 0x202, "Sound")] public bool IsEnableScrollingSound;
    }

    [RTTI.Serializable(0x1ACFCAD13D6DFBFD, GameType.DS)]
    public class MenuPropertyAnimationResource : Resource
    {
        [RTTI.Member(3, 0x20)] public bool Ignored;
        [RTTI.Member(2, 0x28)] public Array<Ref<MenuAnimationKeyFrame>> KeyFrames;
    }

    [RTTI.Serializable(0x9899280BE0F05367, GameType.DS)]
    public class MenuQuadraticFunctionBinding : MenuLinearFunctionBinding
    {
        [RTTI.Member(5, 0x30)] public float Acceleration;
    }

    [RTTI.Serializable(0xF2ECA076299F1F89, GameType.DS)]
    public class MenuQuestTrigger : QuestTrigger
    {
    }

    [RTTI.Serializable(0xD6E0F0FF000C963, GameType.DS)]
    public class MenuQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x65731FA8C805BACA, GameType.DS)]
    public class MenuRadialSectorResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public int StartAngle;
        [RTTI.Member(49, 0x194, "Properties")] public int EndAngle;
    }

    [RTTI.Serializable(0xF215638F070A737F, GameType.DS)]
    public class MenuRadialWheelResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
    }

    [RTTI.Serializable(0xCEA7B2B552D6E756, GameType.DS)]
    public class MenuResource : Resource
    {
        [RTTI.Member(3, 0x20, "Properties")] public ISize ScreenSize;
        [RTTI.Member(4, 0x28, "Properties")] public Ref<MenuLegendResource> DefaultLegend;
        [RTTI.Member(5, 0x30, "Properties")] public Ref<MenuToastMessageResource> DefaultToastMessage;
        [RTTI.Member(6, 0x38, "Properties")] public Ref<MenuImageLoaderSystemResource> ImageLoaderResource;
        [RTTI.Member(10, 0x40, "Properties")] public Array<Ref<MenuStyleClass>> StyleCollection;
        [RTTI.Member(11, 0x50, "Properties")] public Ref<MenuLocalizerResource> MenuLocalizerResource;
        [RTTI.Member(7, 0x58, "Properties")] public int PressAndHoldTime;
        [RTTI.Member(8, 0x5C, "Properties")] public int PressAndHoldStartTime;
        [RTTI.Member(9, 0x60, "Properties")] public Ref<RumbleResource> PressAndHoldRumble;
        [RTTI.Member(18, 0x68, "ToastMessages")] public Ref<LocalizedTextResource> CensoredToastMessage;
        [RTTI.Member(19, 0x70, "ToastMessages")] public Ref<LocalizedTextResource> SanitizedToastMessage;
        [RTTI.Member(21, 0x78, "Audio")] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(22, 0x88, "Audio")] public Ref<ReverbPresetResource> ReverbPreset;
        [RTTI.Member(13, 0x90, "Pages")] public Ref<MenuPage> StartPage;
        [RTTI.Member(14, 0x98, "Pages")] public Ref<MenuPage> ErrorPage;
        [RTTI.Member(16, 0xA0, "AdditionalPages")] public Array<Ref<MenuPage>> Pages;
    }

    [RTTI.Serializable(0x1F374B9145C4F08B, GameType.DS)]
    public class MenuRotationPivot
    {
        [RTTI.Member(0, 0x0)] public EHAlign HorizontalAnchor;
        [RTTI.Member(1, 0x1)] public EVAlign VerticalAnchor;
        [RTTI.Member(2, 0x10)] public Vec3 AnchorOffset;
        [RTTI.Member(3, 0x20)] public bool IsSet;
    }

    [RTTI.Serializable(0xBEA988D7B2BF1F38, GameType.DS)]
    public class MenuSaveDataDialog : RTTIObject
    {
    }

    [RTTI.Serializable(0x66CA004E56BBEC7A, GameType.DS)]
    public class MenuSaveDataDialogSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x55C499486204B9B0, GameType.DS)]
    public class MenuScrollingPanelResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public float ScrollingSpeed;
        [RTTI.Member(61, 0x198, "Logic")] public Ref<MenuActionResource> OnScrollingFinished;
        [RTTI.Member(49, 0x1A0, "Properties")] public bool UseLeftStick;
        [RTTI.Member(50, 0x1A1, "Properties")] public bool UseRightStick;
        [RTTI.Member(51, 0x1A2, "Properties")] public bool UseDpadLeft;
        [RTTI.Member(52, 0x1A3, "Properties")] public bool IsFadeTopAndBottom;
        [RTTI.Member(53, 0x1A4, "Properties")] public bool IsAutoResetScrollPosition;
        [RTTI.Member(54, 0x1A5, "Properties")] public bool IsStartingBottomScroll;
        [RTTI.Member(55, 0x1A8, "Properties")] public float ScrollingSkipOffset;
        [RTTI.Member(56, 0x1AC, "Properties")] public bool CanScrollWithoutFocus;
        [RTTI.Member(57, 0x1AD, "Properties")] public bool CanScrollInModalDialogByMouse;
        [RTTI.Member(58, 0x1AE, "Properties")] public bool IsEnableMouseScroll;
        [RTTI.Member(59, 0x1AF, "Properties")] public bool CanThroughMouseScrollEvent;
    }

    [RTTI.Serializable(0x3BB6E6E8A4D738C5, GameType.DS)]
    public class MenuSelectViewItemResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
    }

    [RTTI.Serializable(0x4E4040A40E3BB1B8, GameType.DS)]
    public class MenuSelectViewResource : MenuListItemResource
    {
        [RTTI.Member(51, 0x1A0, "Properties")] public Ref<MenuDataBinding> DefaultValue;
        [RTTI.Member(54, 0x1B0, "Logic")] public Ref<MenuActionResource> OnChange;
        [RTTI.Member(52, 0x1B8, "Properties")] public bool UseAnalogStickInput_;
    }

    [RTTI.Serializable(0xCB2EC1BEB0C9C60B, GameType.DS)]
    public class MenuSentenceGroupResourceBinding : MenuObjectBinding
    {
        [RTTI.Member(2, 0x20)] public Ref<SentenceGroupResource> Value;
    }

    [RTTI.Serializable(0x9B03E71ECC53BAC7, GameType.DS)]
    public class MenuShaderPropertyAnimationResource : MenuPropertyAnimationResource
    {
        [RTTI.Member(4, 0x38)] public String TargetShaderVariable;
    }

    [RTTI.Serializable(0x4033C2B2C6338346, GameType.DS)]
    public class MenuSliderResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Ref<MenuDataBinding> MinValue;
        [RTTI.Member(48, 0x188, "Properties")] public Ref<MenuDataBinding> MaxValue;
        [RTTI.Member(49, 0x190, "Properties")] public Ref<MenuDataBinding> CurrentValue;
        [RTTI.Member(50, 0x198, "Properties")] public Ref<MenuDataBinding> Step;
        [RTTI.Member(52, 0x1A0, "Logic")] public Ref<MenuActionResource> OnChange;
    }

    [RTTI.Serializable(0x9124BB7B5EFC0867, GameType.DS)]
    public class MenuSpeechResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Ref<MenuDataBinding> Source;
        [RTTI.Member(48, 0x188, "Properties")] public Ref<MenuDataBinding> SubtitleClass;
        [RTTI.Member(49, 0x190, "Properties")] public Ref<MenuDataBinding> ShowSubtitles;
        [RTTI.Member(51, 0x198, "Logic")] public Ref<MenuActionResource> OnSpeechEnd;
    }

    [RTTI.Serializable(0x640B503F8C67281C, GameType.DS)]
    public class MenuStateMachineResource : MenuElementResource
    {
        [RTTI.Member(7, 0x30, "Properties")] public Ref<GraphProgramResource> StateMachine;
    }

    [RTTI.Serializable(0x9AE3585A18B3D4D3, GameType.DS)]
    public class MenuStreamingTexture
    {
        [RTTI.Member(0, 0x0)] public String TextureName;
        [RTTI.Member(1, 0x8)] public StreamingRef<Texture> Texture;
    }

    [RTTI.Serializable(0xB2EF1BBFD1F9356, GameType.DS)]
    public class MenuStringBinding : MenuDataBinding
    {
        [RTTI.Member(2, 0x20)] public WString Value;
    }

    [RTTI.Serializable(0x72815060DE815105, GameType.DS)]
    public class MenuStyle : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String Selector;
        [RTTI.Member(4, 0x28, "General")] public String ElementType;
        [RTTI.Member(5, 0x30, "General")] public bool AppliedOnFocus;
        [RTTI.Member(6, 0x31, "General")] public bool AppliedOnDisabled;
        [RTTI.Member(7, 0x38, "General")] public Array<Ref<MenuStyle>> BaseStyles;
        [RTTI.Member(50, 0x48, "Properties")] public MenuStyleAttributeRGBAColor Color;
        [RTTI.Member(53, 0x60, "Properties")] public MenuStyleAttributeFloat opacity;
        [RTTI.Member(54, 0x78, "Properties")] public EOpacityMode opacity_mode;
        [RTTI.Member(9, 0x80, "Position")] public MenuStyleAttributeFloat top;
        [RTTI.Member(10, 0x98, "Position")] public MenuStyleAttributeFloat left;
        [RTTI.Member(23, 0xB0, "Alignment")] public EVerticalAlignment vertical_align;
        [RTTI.Member(22, 0xB4, "Alignment")] public EFloating _float;
        [RTTI.Member(55, 0xB8, "Properties")] public EStacking stacking;
        [RTTI.Member(24, 0xC0, "Alignment")] public Vec3 Rotation;
        [RTTI.Member(25, 0xD0, "Alignment")] public MenuRotationPivot RotationPivot;
        [RTTI.Member(26, 0x100, "Alignment")] public MenuStyleAttributeVec2 ScaleXY;
        [RTTI.Member(14, 0x120, "Alignment")] public MenuStyleAttributeInt margin_top;
        [RTTI.Member(15, 0x138, "Alignment")] public MenuStyleAttributeInt margin_left;
        [RTTI.Member(16, 0x150, "Alignment")] public MenuStyleAttributeInt margin_right;
        [RTTI.Member(17, 0x168, "Alignment")] public MenuStyleAttributeInt margin_bottom;
        [RTTI.Member(18, 0x180, "Alignment")] public MenuStyleAttributeInt padding_top;
        [RTTI.Member(19, 0x198, "Alignment")] public MenuStyleAttributeInt padding_left;
        [RTTI.Member(20, 0x1B0, "Alignment")] public MenuStyleAttributeInt padding_right;
        [RTTI.Member(21, 0x1C8, "Alignment")] public MenuStyleAttributeInt padding_bottom;
        [RTTI.Member(11, 0x1E0, "Position")] public MenuStyleAttributeFloat width;
        [RTTI.Member(12, 0x1F8, "Position")] public MenuStyleAttributeFloat height;
        [RTTI.Member(51, 0x210, "Properties")] public MenuStyleAttributeInt border_width;
        [RTTI.Member(52, 0x228, "Properties")] public MenuStyleAttributeRGBAColor border_color;
        [RTTI.Member(28, 0x240, "Background")] public ETextureRepeat background_repeat_mm;
        [RTTI.Member(30, 0x248, "Background")] public Ref<UITexture> background_texture_tl;
        [RTTI.Member(31, 0x250, "Background")] public Ref<UITexture> background_texture_tm;
        [RTTI.Member(32, 0x258, "Background")] public Ref<UITexture> background_texture_tr;
        [RTTI.Member(33, 0x260, "Background")] public Ref<UITexture> background_texture_ml;
        [RTTI.Member(34, 0x268, "Background")] public Ref<UITexture> background_texture_mm;
        [RTTI.Member(35, 0x270, "Background")] public Ref<UITexture> background_texture_mr;
        [RTTI.Member(36, 0x278, "Background")] public Ref<UITexture> background_texture_bl;
        [RTTI.Member(37, 0x280, "Background")] public Ref<UITexture> background_texture_bm;
        [RTTI.Member(38, 0x288, "Background")] public Ref<UITexture> background_texture_br;
        [RTTI.Member(39, 0x290, "Background")] public IVec2 background_image_tl_off;
        [RTTI.Member(40, 0x298, "Background")] public IVec2 background_image_tm_off;
        [RTTI.Member(41, 0x2A0, "Background")] public IVec2 background_image_tr_off;
        [RTTI.Member(42, 0x2A8, "Background")] public IVec2 background_image_ml_off;
        [RTTI.Member(43, 0x2B0, "Background")] public IVec2 background_image_mm_off;
        [RTTI.Member(44, 0x2B8, "Background")] public IVec2 background_image_mr_off;
        [RTTI.Member(45, 0x2C0, "Background")] public IVec2 background_image_bl_off;
        [RTTI.Member(46, 0x2C8, "Background")] public IVec2 background_image_bm_off;
        [RTTI.Member(47, 0x2D0, "Background")] public IVec2 background_image_br_off;
        [RTTI.Member(29, 0x2D8, "Background")] public MenuStyleAttributeFloat background_depth_offset;
        [RTTI.Member(48, 0x2F0, "Background")] public MenuStyleAttributeRGBAColor background_overlay_image_color;
        [RTTI.Member(57, 0x308, "Effects")] public EMenuBlendMode blend_mode;
        [RTTI.Member(58, 0x309, "Effects")] public EMenuBlendMode text_blend_mode;
        [RTTI.Member(59, 0x30C, "Effects")] public EWidgetLayer target_layer;
        [RTTI.Member(60, 0x310, "Effects")] public MenuStyleAttributeFloat depth_offset;
        [RTTI.Member(61, 0x328, "Effects")] public MenuStyleAttributeFloat blur_amount;
        [RTTI.Member(62, 0x340, "Effects")] public EChildrenClipMode children_clip;
        [RTTI.Member(63, 0x348, "Effects")] public Ref<UIEffectResource> Shader;
        [RTTI.Member(65, 0x350, "Sounds")] public Ref<MenuStyleSound> sounds;
        [RTTI.Member(67, 0x358, "Animation")] public Array<Ref<MenuAnimationBinding>> Bindings;
    }

    [RTTI.Serializable(0xE8E4C354A168CD4C, GameType.DS)]
    public class MenuStyleAttributeBase
    {
        [RTTI.Member(0, 0x8)] public bool IsSet;
    }

    [RTTI.Serializable(0x7A6D745EC985CD6C, GameType.DS)]
    public class MenuStyleAttributeFloat : MenuStyleAttributeBase
    {
        [RTTI.Member(1, 0x10)] public float Value;
    }

    [RTTI.Serializable(0xD07B47C65196F6F3, GameType.DS)]
    public class MenuStyleAttributeInt : MenuStyleAttributeBase
    {
        [RTTI.Member(1, 0x10)] public int Value;
    }

    [RTTI.Serializable(0x823BB09572CD99AF, GameType.DS)]
    public class MenuStyleAttributeRGBAColor : MenuStyleAttributeBase
    {
        [RTTI.Member(1, 0x10)] public RGBAColor Value;
    }

    [RTTI.Serializable(0x292BC8C2A8F748DF, GameType.DS)]
    public class MenuStyleAttributeVec2 : MenuStyleAttributeBase
    {
        [RTTI.Member(1, 0x10)] public Vec2 Value;
    }

    [RTTI.Serializable(0xE61795EB43398426, GameType.DS)]
    public class MenuStyleClass : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String ClassName;
        [RTTI.Member(4, 0x28, "General")] public Array<Ref<MenuStyle>> Styles;
    }

    [RTTI.Serializable(0x6F12FFC46053ED21, GameType.DS)]
    public class MenuStyleClassBinding : MenuObjectBinding
    {
        [RTTI.Member(2, 0x20)] public Ref<MenuStyleClass> Value;
    }

    [RTTI.Serializable(0xFF0DC3C081817BF2, GameType.DS)]
    public class MenuStyleLegend : MenuStyle
    {
        [RTTI.Member(69, 0x370, "Legend")] public MenuStyleAttributeFloat LabelTextureSpacing;
        [RTTI.Member(70, 0x388, "Legend")] public MenuStyleAttributeFloat ElementSpacing;
        [RTTI.Member(76, 0x3A0, "Legend")] public String PressAndHoldVariable;
        [RTTI.Member(75, 0x3A8, "Legend")] public Ref<UIEffectResource> PressAndHoldShader;
        [RTTI.Member(71, 0x3B0, "Legend")] public MenuStyleAttributeRGBAColor LabelTextureEnabledColor;
        [RTTI.Member(72, 0x3C8, "Legend")] public MenuStyleAttributeRGBAColor LabelTextureDisabledColor;
        [RTTI.Member(73, 0x3E0, "Legend")] public Array<LegendIcon> LegendIcons;
        [RTTI.Member(74, 0x3F0, "Legend")] public Array<DSLegendIconBinding> LegendIconBindings;
    }

    [RTTI.Serializable(0x4CB1A8686EBD0BC0, GameType.DS)]
    public class MenuStyleProgressBarBlock : MenuStyle
    {
        [RTTI.Member(70, 0x370, "ProgressBarBlock")] public MenuStyleAttributeFloat OffsetX;
        [RTTI.Member(69, 0x388, "ProgressBarBlock")] public Array<ProgressBarBlock> BlockTextures;
        [RTTI.Member(71, 0x398, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor PositiveColor;
        [RTTI.Member(72, 0x3B0, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor NegativeColor;
        [RTTI.Member(73, 0x3C8, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor NeutralColor;
        [RTTI.Member(74, 0x3E0, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor EmptyColor;
    }

    [RTTI.Serializable(0xE4705EE9EE48333F, GameType.DS)]
    public class MenuStyleSelectView : MenuStyle
    {
        [RTTI.Member(69, 0x370, "SelectView")] public Ref<UITexture> PreviousItemTexture;
        [RTTI.Member(70, 0x378, "SelectView")] public MenuStyleAttributeInt PreviousItemWidth;
        [RTTI.Member(71, 0x390, "SelectView")] public Ref<UITexture> NextItemTexture;
        [RTTI.Member(72, 0x398, "SelectView")] public MenuStyleAttributeInt NextItemWidth;
        [RTTI.Member(73, 0x3B0, "SelectView")] public MenuStyleAttributeInt ItemChangeScrollTime;
    }

    [RTTI.Serializable(0xB3A6BA837E0DE0A4, GameType.DS)]
    public class MenuStyleSelector
    {
        [RTTI.Member(0, 0x0)] public String TypeName;
        [RTTI.Member(1, 0x8)] public String ClassName;
        [RTTI.Member(2, 0x10)] public bool OnFocus;
        [RTTI.Member(3, 0x11)] public bool OnDisabled;
    }

    [RTTI.Serializable(0x895FD13A73D00C9C, GameType.DS)]
    public class MenuStyleSound : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<SoundResource> accept_handled;
        [RTTI.Member(3, 0x28)] public Ref<SoundResource> accept_unhandled;
        [RTTI.Member(4, 0x30)] public Ref<SoundResource> cancel_handled;
        [RTTI.Member(5, 0x38)] public Ref<SoundResource> cancel_unhandled;
        [RTTI.Member(6, 0x40)] public Ref<SoundResource> left_handled;
        [RTTI.Member(7, 0x48)] public Ref<SoundResource> left_unhandled;
        [RTTI.Member(8, 0x50)] public Ref<SoundResource> right_handled;
        [RTTI.Member(9, 0x58)] public Ref<SoundResource> right_unhandled;
        [RTTI.Member(10, 0x60)] public Ref<SoundResource> up_handled;
        [RTTI.Member(11, 0x68)] public Ref<SoundResource> up_unhandled;
        [RTTI.Member(12, 0x70)] public Ref<SoundResource> down_handled;
        [RTTI.Member(13, 0x78)] public Ref<SoundResource> down_unhandled;
        [RTTI.Member(14, 0x80)] public Ref<SoundResource> dpad_left_handled;
        [RTTI.Member(15, 0x88)] public Ref<SoundResource> dpad_left_unhandled;
        [RTTI.Member(16, 0x90)] public Ref<SoundResource> dpad_right_handled;
        [RTTI.Member(17, 0x98)] public Ref<SoundResource> dpad_right_unhandled;
        [RTTI.Member(18, 0xA0)] public Ref<SoundResource> dpad_up_handled;
        [RTTI.Member(19, 0xA8)] public Ref<SoundResource> dpad_up_unhandled;
        [RTTI.Member(20, 0xB0)] public Ref<SoundResource> dpad_down_handled;
        [RTTI.Member(21, 0xB8)] public Ref<SoundResource> dpad_down_unhandled;
        [RTTI.Member(22, 0xC0)] public Ref<SoundResource> tableft_handled;
        [RTTI.Member(23, 0xC8)] public Ref<SoundResource> tableft_unhandled;
        [RTTI.Member(24, 0xD0)] public Ref<SoundResource> tabright_handled;
        [RTTI.Member(25, 0xD8)] public Ref<SoundResource> tabright_unhandled;
        [RTTI.Member(26, 0xE0)] public Ref<SoundResource> square_handled;
        [RTTI.Member(27, 0xE8)] public Ref<SoundResource> square_unhandled;
        [RTTI.Member(28, 0xF0)] public Ref<SoundResource> triangle_handled;
        [RTTI.Member(29, 0xF8)] public Ref<SoundResource> triangle_unhandled;
        [RTTI.Member(30, 0x100)] public Ref<SoundResource> start_handled;
        [RTTI.Member(31, 0x108)] public Ref<SoundResource> start_unhandled;
        [RTTI.Member(32, 0x110)] public Ref<SoundResource> ingame_intel_handled;
        [RTTI.Member(33, 0x118)] public Ref<SoundResource> ingame_intel_unhandled;
        [RTTI.Member(34, 0x120)] public Ref<SoundResource> pressandhold_start_handled;
        [RTTI.Member(35, 0x128)] public Ref<SoundResource> pressandhold_start_unhandled;
        [RTTI.Member(36, 0x130)] public Ref<SoundResource> pressandhold_finish_handled;
        [RTTI.Member(37, 0x138)] public Ref<SoundResource> pressandhold_finish_unhandled;
        [RTTI.Member(38, 0x140)] public Ref<SoundResource> scrolling_sound;
        [RTTI.Member(39, 0x148)] public Ref<SoundResource> progress_bar_scrolling_sound;
    }

    [RTTI.Serializable(0x93AD441DDB61B14, GameType.DS)]
    public class MenuStyleTabHeader : MenuStyle
    {
        [RTTI.Member(69, 0x370, "TabHeader")] public MenuStyleAttributeFloat TabMargin;
    }

    [RTTI.Serializable(0x7DA63E6F16727205, GameType.DS)]
    public class MenuStyleText : MenuStyle
    {
        [RTTI.Member(69, 0x370, "Font")] public Ref<Typeface> Family;
        [RTTI.Member(70, 0x378, "Font")] public String StyleName;
        [RTTI.Member(77, 0x380, "Font")] public ETextHAlignment Alignment;
        [RTTI.Member(82, 0x384, "Font")] public ETextOrientation Orientation;
        [RTTI.Member(71, 0x388, "Font")] public MenuStyleAttributeFloat Size;
        [RTTI.Member(72, 0x3A0, "Font")] public MenuStyleAttributeFloat CJKSize;
        [RTTI.Member(73, 0x3B8, "Font")] public MenuStyleAttributeFloat ArabicSize;
        [RTTI.Member(74, 0x3D0, "Font")] public MenuStyleAttributeFloat MinimumSize;
        [RTTI.Member(78, 0x3E8, "Font")] public bool AutoAdjustSizeForSafeArea;
        [RTTI.Member(79, 0x3EC, "Font")] public float Leading;
        [RTTI.Member(80, 0x3F0, "Font")] public bool AdjustLineHeightForTextIcons;
        [RTTI.Member(75, 0x3F4, "Font")] public ETextWhiteSpace Whitespace;
        [RTTI.Member(81, 0x3F8, "Font")] public ETextOverflow Overflow;
        [RTTI.Member(76, 0x3FC, "Font")] public ETextTransform Transform;
        [RTTI.Member(83, 0x400, "Font")] public bool IconUseFontColor;
    }

    [RTTI.Serializable(0x45AEB4282B94ED1D, GameType.DS)]
    public class MenuSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ShaderResource>> TextureShaders;
    }

    [RTTI.Serializable(0x7FB9289D643317FA, GameType.DS)]
    public class MenuTabHeaderResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public IRect TabRect;
    }

    [RTTI.Serializable(0xF258012DB2945207, GameType.DS)]
    public class MenuTabResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public Ref<MenuDataBinding> Label;
    }

    [RTTI.Serializable(0xD4F90A63A697AC63, GameType.DS)]
    public class MenuTabboxResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public EMenuInputFunction PrevTabFunction;
        [RTTI.Member(49, 0x194, "Properties")] public EMenuInputFunction NextTabFunction;
        [RTTI.Member(50, 0x198, "Properties")] public Ref<Texture> PreviousTabIcon;
        [RTTI.Member(51, 0x1A0, "Properties")] public Ref<Texture> NextTabIcon;
        [RTTI.Member(53, 0x1A8, "Logic")] public Ref<MenuActionResource> OnNextTab;
        [RTTI.Member(54, 0x1B0, "Logic")] public Ref<MenuActionResource> OnPreviousTab;
    }

    [RTTI.Serializable(0xEC4905D6D64A1065, GameType.DS)]
    public class MenuTabpaneResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(48, 0x190, "Properties")] public bool DefaultPane;
        [RTTI.Member(49, 0x198, "Properties")] public CPtr<MenuVisualResource> DefaultFocus;
    }

    [RTTI.Serializable(0xF846033F78B2B377, GameType.DS)]
    public class MenuTemplateResource : MenuElementResource
    {
        [RTTI.Member(7, 0x30, "Properties")] public Ref<MenuElementResource> DataSource;
        [RTTI.Member(8, 0x38, "Properties")] public KJPXPath KJPXPath;
        [RTTI.Member(9, 0x78, "Properties")] public Array<Ref<MenuElementResource>> TemplateElements;
    }

    [RTTI.Serializable(0xA78ECA0E7AC61AEC, GameType.DS)]
    public class MenuTextResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Ref<MenuDataBinding> Text;
        [RTTI.Member(48, 0x188, "Properties")] public ETextHAlignment HorizontalAlign;
        [RTTI.Member(51, 0x18C, "AutoScroll")] public float ScrollVelocity;
        [RTTI.Member(52, 0x190, "AutoScroll")] public float ScrollPreDelay;
        [RTTI.Member(53, 0x194, "AutoScroll")] public float ScrollPostDelay;
        [RTTI.Member(54, 0x198, "AutoScroll")] public float ScrollFadeDuration;
        [RTTI.Member(56, 0x19C, "ShaderAnimation")] public EUIGlyphShaderAnimationType AnimationType;
        [RTTI.Member(50, 0x19D, "AutoScroll")] public EUITextScrollType ScrollType;
        [RTTI.Member(58, 0x19E, "FontSize")] public bool IgnoreAdditionalSize;
    }

    [RTTI.Serializable(0x8EB5A7D979E1A434, GameType.DS)]
    public class MenuTextureBinding : MenuObjectBinding
    {
        [RTTI.Member(2, 0x20)] public Ref<UITexture> Value;
    }

    [RTTI.Serializable(0x957BB291E655A466, GameType.DS)]
    public class MenuTextureResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Ref<MenuDataBinding> Source;
        [RTTI.Member(48, 0x188, "Properties")] public Ref<MenuDataBinding> Texture;
        [RTTI.Member(52, 0x190, "Properties")] public ETextureRepeat Tiling;
        [RTTI.Member(49, 0x198, "Properties")] public Ref<UITexture> SourceLoading;
        [RTTI.Member(50, 0x1A0, "Properties")] public Ref<UITexture> SourceFailed;
        [RTTI.Member(51, 0x1A8, "Properties")] public float Scale;
        [RTTI.Member(53, 0x1AC, "Properties")] public EMenuBlendMode BlendMode;
        [RTTI.Member(54, 0x1B0, "Properties")] public MenuStyleAttributeRGBAColor Color;
    }

    [RTTI.Serializable(0x4E910021252DE06C, GameType.DS)]
    public class MenuTimerResource : MenuElementResource
    {
        [RTTI.Member(7, 0x30, "Properties")] public int Countdown;
        [RTTI.Member(8, 0x34, "Properties")] public bool ResetOnInput;
        [RTTI.Member(9, 0x35, "Properties")] public bool StartPaused;
        [RTTI.Member(11, 0x38, "Logic")] public Ref<MenuActionResource> OnTimerEnd;
    }

    [RTTI.Serializable(0xCA18F3B8FEF17DA0, GameType.DS)]
    public class MenuToastMessageResource : MenuVisualResource
    {
        [RTTI.Member(47, 0x180, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
    }

    [RTTI.Serializable(0x86B7604D5F98E2D7, GameType.DS)]
    public class MenuVisualResource : MenuElementResource
    {
        [RTTI.Member(12, 0x30, "Properties")] public Ref<MenuDataBinding> Enabled;
        [RTTI.Member(13, 0x38, "Properties")] public Ref<MenuDataBinding> StyleClasses;
        [RTTI.Member(14, 0x40, "Properties")] public Ref<MenuDataBinding> Visible;
        [RTTI.Member(30, 0x48, "Properties")] public Ref<MenuDataBinding> AppearDisabled;
        [RTTI.Member(34, 0x50, "Effect")] public Ref<UIEffectResource> Shader;
        [RTTI.Member(35, 0x58, "Effect")] public Ref<MenuCameraResource> Camera;
        [RTTI.Member(15, 0x60, "Properties")] public int X;
        [RTTI.Member(16, 0x64, "Properties")] public int Y;
        [RTTI.Member(17, 0x68, "Properties")] public int Z;
        [RTTI.Member(18, 0x6C, "Properties")] public int Width;
        [RTTI.Member(19, 0x70, "Properties")] public bool AutoWidth;
        [RTTI.Member(20, 0x74, "Properties")] public int MaxWidth;
        [RTTI.Member(21, 0x78, "Properties")] public int Height;
        [RTTI.Member(22, 0x7C, "Properties")] public bool AutoHeight;
        [RTTI.Member(23, 0x80, "Properties")] public int MaxHeight;
        [RTTI.Member(24, 0x84, "Properties")] public bool AutoSizeParent;
        [RTTI.Member(25, 0x88, "Properties")] public Ref<MenuDataBinding> Value;
        [RTTI.Member(7, 0x90, "Layout")] public Vec3 Rotation;
        [RTTI.Member(8, 0xA0, "Layout")] public MenuRotationPivot RotationPivot;
        [RTTI.Member(9, 0xD0, "Layout")] public MenuStyleAttributeVec2 ScaleXY;
        [RTTI.Member(10, 0xF0, "Layout")] public EChildrenClipMode Clipping;
        [RTTI.Member(26, 0xF4, "Properties")] public EFloating Align;
        [RTTI.Member(27, 0xF8, "Properties")] public EVerticalAlignment Valign;
        [RTTI.Member(28, 0x100, "Properties")] public CPtr<MenuElementResource> FollowFocus;
        [RTTI.Member(29, 0x108, "Properties")] public Array<CPtr<MenuVisualResource>> VisibleOnFocus;
        [RTTI.Member(32, 0x118, "Background")] public MenuStyleAttributeRGBAColor Color;
        [RTTI.Member(37, 0x130, "Logic")] public Array<Ref<MenuEventBinding>> EventHandlers;
        [RTTI.Member(39, 0x140, "Legend")] public Array<Ref<MenuLegendLabelResource>> Labels;
        [RTTI.Member(41, 0x150, "Animation")] public Array<Ref<MenuAnimationBinding>> Bindings;
        [RTTI.Member(43, 0x160, "Mouse")] public Ref<MenuDataBinding> CanHandleMouseEventOnlyFocusPath;
        [RTTI.Member(44, 0x168, "Mouse")] public Ref<MenuDataBinding> CanHandleMouseEventInModalDialog;
        [RTTI.Member(45, 0x170, "Mouse")] public Ref<MenuDataBinding> IgnoreClippingRange;
    }

    [RTTI.Serializable(0xAD1464845DD1B53C, GameType.DS)]
    public class MenuVisualResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1726F9F90D7EF0A5, GameType.DS)]
    public class MenuWidgetPropertyAnimationResource : MenuPropertyAnimationResource
    {
        [RTTI.Member(4, 0x38)] public EMenuAnimatableProperty TargetProperty;
    }

    [RTTI.Serializable(0x78C965BFD1DB03EA, GameType.DS)]
    public class MenuXPathAnimationInstance : MenuElementAnimationInstance
    {
    }

    [RTTI.Serializable(0xE0EAFC98455B04AB, GameType.DS)]
    public class MenuXPathAnimationResource : MenuElementAnimationResource
    {
        [RTTI.Member(3, 0x28)] public KJPXPath KJPXPath;
        [RTTI.Member(4, 0x68)] public Array<Ref<MenuPropertyAnimationResource>> PropertyAnimations;
    }

    [RTTI.Serializable(0xD3DE3A78270794AA, GameType.DS)]
    public class MeshExportRegion : WorldNode
    {
        [RTTI.Member(6, 0x60)] public float MinimumLodDistance;
        [RTTI.Member(7, 0x64)] public float PlacementLodDistance;
        [RTTI.Member(11, 0x68)] public bool ExportTerrainGeometry;
        [RTTI.Member(12, 0x69)] public bool TerrainVertexColors;
        [RTTI.Member(9, 0x6A)] public bool ExportSceneGeometry;
        [RTTI.Member(10, 0x6B)] public bool ExportPlacementGeometry;
        [RTTI.Member(8, 0x6C)] public float TerrainSampleScale;
        [RTTI.Member(4, 0x70)] public bool ExportToOrigin;
        [RTTI.Member(5, 0x71)] public bool ExportToDSCinematicsDirectory;
    }

    [RTTI.Serializable(0x2AD784F7BFE6B30F, GameType.DS)]
    public class MeshHierachyShaderOverrides
    {
        [RTTI.Member(0, 0x8)] public Array<MeshShaderOverrides> MeshOverrides;
    }

    [RTTI.Serializable(0xE42C90195DC81520, GameType.DS)]
    public class MeshHierarchyInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 MITNodeSize;
        [RTTI.Member(1, 0x4)] public uint32 PrimitiveCount;
        [RTTI.Member(2, 0x8)] public uint16 MeshCount;
        [RTTI.Member(3, 0xA)] public uint16 StaticMeshCount;
        [RTTI.Member(4, 0xC)] public uint16 LodMeshCount;
        [RTTI.Member(5, 0xE)] public uint16 PackedData;
    }

    [RTTI.Serializable(0x200FBDA847816F63, GameType.DS)]
    public class MeshInstanceLOD
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x8)] public int PrimitiveCount;
        [RTTI.Member(2, 0xC)] public int TriangleCount;
        [RTTI.Member(3, 0x10)] public float MaxDistance;
        [RTTI.Member(4, 0x14)] public uint MaxCellSize;
        [RTTI.Member(5, 0x18)] public uint MaxCellCount;
    }

    [RTTI.Serializable(0x967237BF475630EF, GameType.DS)]
    public class MeshInstanceManager : GeometryObject
    {
        [RTTI.Member(8, 0xC0, "Generated")] public Array<MeshInstanceLOD> LODs;
        [RTTI.Member(9, 0xE0, "Generated")] public BoundingBox3 RootBounds;
        [RTTI.Member(10, 0x100, "Generated")] public BoundingBox3 CullBounds;
        [RTTI.Member(11, 0x120, "Generated")] public BoundingBox3 MeshBounds;
        [RTTI.Member(12, 0x140, "Generated")] public BoundingBox3 MeshExtents;
        [RTTI.Member(13, 0x160, "Generated")] public Array<float> LODDistances;
        [RTTI.Member(14, 0x170, "Generated")] public BakedInstanceData InstanceData;
        [RTTI.Member(15, 0x190, "Generated")] public Array<QuadTreeCell> InstanceTree;
        [RTTI.Member(16, 0x1A0, "Generated")] public Array<uint32> InstanceRemapTable;
        [RTTI.Member(17, 0x1B0, "Generated")] public int DrawableSetupBlockSize;
    }

    [RTTI.Serializable(0xE12A053CC0AB80A3, GameType.DS)]
    public class MeshPaintRenderSystemAssets : SystemAssets
    {
        [RTTI.Member(15, 0x20, "Shaders")] public Ref<ShaderResource> SimpleCopy;
        [RTTI.Member(16, 0x28, "Shaders")] public Ref<ShaderResource> UIMapShader;
        [RTTI.Member(17, 0x30, "Shaders")] public Ref<Texture> Layer_A_Dummy_Texture;
        [RTTI.Member(18, 0x38, "Shaders")] public Ref<Texture> Layer_B_Dummy_Texture;
        [RTTI.Member(19, 0x40, "Shaders")] public Ref<Texture> UnPaintMask_Texture;
        [RTTI.Member(3, 0x48, "Shaders")] public Ref<ShaderResource> NoSkinForUVSet1;
        [RTTI.Member(4, 0x50, "Shaders")] public Ref<ShaderResource> NoSkinForUVSet2;
        [RTTI.Member(5, 0x58, "Shaders")] public Ref<ShaderResource> NoSkinForUVSet3;
        [RTTI.Member(6, 0x60, "Shaders")] public Ref<ShaderResource> SkinNoWeightForUVSet1;
        [RTTI.Member(7, 0x68, "Shaders")] public Ref<ShaderResource> SkinNoWeightForUVSet2;
        [RTTI.Member(8, 0x70, "Shaders")] public Ref<ShaderResource> SkinNoWeightForUVSet3;
        [RTTI.Member(9, 0x78, "Shaders")] public Ref<ShaderResource> Skin4WeightsForUVSet1;
        [RTTI.Member(10, 0x80, "Shaders")] public Ref<ShaderResource> Skin4WeightsForUVSet2;
        [RTTI.Member(11, 0x88, "Shaders")] public Ref<ShaderResource> Skin4WeightsForUVSet3;
        [RTTI.Member(12, 0x90, "Shaders")] public Ref<ShaderResource> Skin8WeightsForUVSet1;
        [RTTI.Member(13, 0x98, "Shaders")] public Ref<ShaderResource> Skin8WeightsForUVSet2;
        [RTTI.Member(14, 0xA0, "Shaders")] public Ref<ShaderResource> Skin8WeightsForUVSet3;
    }

    [RTTI.Serializable(0xB0C0BDE6F53B6B89, GameType.DS)]
    public class MeshPaintRenderSystemOldAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Shaders")] public Ref<ShaderResource> NoSkinForUVSet1;
        [RTTI.Member(4, 0x28, "Shaders")] public Ref<ShaderResource> NoSkinForUVSet2;
        [RTTI.Member(5, 0x30, "Shaders")] public Ref<ShaderResource> NoSkinForUVSet3;
        [RTTI.Member(6, 0x38, "Shaders")] public Ref<ShaderResource> SkinNoWeightForUVSet1;
        [RTTI.Member(7, 0x40, "Shaders")] public Ref<ShaderResource> SkinNoWeightForUVSet2;
        [RTTI.Member(8, 0x48, "Shaders")] public Ref<ShaderResource> SkinNoWeightForUVSet3;
        [RTTI.Member(9, 0x50, "Shaders")] public Ref<ShaderResource> Skin4WeightsForUVSet1;
        [RTTI.Member(10, 0x58, "Shaders")] public Ref<ShaderResource> Skin4WeightsForUVSet2;
        [RTTI.Member(11, 0x60, "Shaders")] public Ref<ShaderResource> Skin4WeightsForUVSet3;
        [RTTI.Member(12, 0x68, "Shaders")] public Ref<ShaderResource> Skin8WeightsForUVSet1;
        [RTTI.Member(13, 0x70, "Shaders")] public Ref<ShaderResource> Skin8WeightsForUVSet2;
        [RTTI.Member(14, 0x78, "Shaders")] public Ref<ShaderResource> Skin8WeightsForUVSet3;
    }

    [RTTI.Serializable(0x8BDD394BC2FEFBD4, GameType.DS)]
    public class MeshPaintTextureComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x248FB7EDBF509C59, GameType.DS)]
    public class MeshPaintTextureComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x9794DA31835B5F58, GameType.DS)]
    public class MeshPaintTextureComponentResource : EntityComponentResource, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(5, 0x28)] public Array<MeshPaintTextureInfomation> ReplaceInfo;
        [RTTI.Member(2, 0x38)] public float AdjustEdgePixelSize;
        [RTTI.Member(3, 0x3C)] public bool InitializeActivation;
        [RTTI.Member(4, 0x3D)] public bool InitialBoostHandle;
        [RTTI.Member(6, 0x40)] public EPAINT_Mode DebugPaintMode;
        [RTTI.Member(7, 0x44)] public EPAINT_Operation DebugPaintOperation;
        [RTTI.Member(9, 0x50)] public Vec4 DebugPaintValue;
        [RTTI.Member(8, 0x60)] public int DebugPaintLayer;
        [RTTI.Member(10, 0x64)] public float DebugPaintRaduis;
        [RTTI.Member(11, 0x68)] public float DebugPaintRemapping;
        [RTTI.Member(12, 0x6C)] public bool DebugGraduallyClean;
        [RTTI.Member(13, 0x70)] public Vec4 DebugGraduallyValue;
        [RTTI.Member(14, 0x80)] public bool DebugPaintDisplay;

        public void DeserializeExtraData(BinaryReader reader) => throw new NotImplementedException();
        public void SerializeExtraData(BinaryWriter writer) => throw new NotImplementedException();
    }

    [RTTI.Serializable(0xFD4A8DB440978B89, GameType.DS)]
    public class MeshPaintTextureInfomation
    {
        [RTTI.Member(0, 0x0)] public uint TextureSize;
        [RTTI.Member(1, 0x8)] public String RelplaceNodeName;
    }

    [RTTI.Serializable(0xF3AAA8E1D636B138, GameType.DS)]
    public class MeshPlacement : ConcretePlacement
    {
        [RTTI.Member(28, 0x90)] public float MaxRenderDistance;
        [RTTI.Member(27, 0x94)] public float Footprint;
        [RTTI.Member(25, 0x98)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(26, 0xA0)] public Array<Ref<RTTIRefObject>> PlacementTargets;
    }

    [RTTI.Serializable(0x2879C7EF5EAF5865, GameType.DS)]
    public class MeshResourceBase : Resource
    {
        [RTTI.Member(5, 0x28)] public uint StaticDataBlockSize;
        [RTTI.Member(2, 0x40)] public BoundingBox3 BoundingBox;
        [RTTI.Member(3, 0x60)] public DrawableCullInfo CullInfo;
        [RTTI.Member(4, 0x64)] public MeshHierarchyInfo MeshHierarchyInfo;
    }

    [RTTI.Serializable(0xEB50020360172905, GameType.DS)]
    public class MeshResourceOverrides
    {
        [RTTI.Member(0, 0x0)] public bool DisableStaticDecals;
    }

    [RTTI.Serializable(0xAE8A7BB17A246379, GameType.DS)]
    public class MeshResourcePathStorage
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> RootMeshResource;
        [RTTI.Member(1, 0x8)] public Array<int> ChildPathIndices;
    }

    [RTTI.Serializable(0xC657FF5EC4468E9D, GameType.DS)]
    public class MeshShaderOverrides
    {
        [RTTI.Member(0, 0x0)] public MeshResourcePathStorage MeshResourcePath;
        [RTTI.Member(1, 0x18)] public int32 MITNodeHandle;
        [RTTI.Member(2, 0x20)] public Array<RenderEffectShaderOverrides> FxOverrides;
        [RTTI.Member(3, 0x30)] public MeshResourceOverrides MeshResourceOverrides;
    }

    [RTTI.Serializable(0xB6420CD8DBA4796C, GameType.DS)]
    public class MessageData : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x29DDAF24AE3F9FE7, GameType.DS)]
    public class MirrorSurface : WorldNode
    {
        [RTTI.Member(5, 0x90, "General")] public Ref<MirrorSurfaceResource> Resource;
    }

    [RTTI.Serializable(0x7C31B35D4501B8EF, GameType.DS)]
    public class MirrorSurfaceGeometry : GeometryObject
    {
    }

    [RTTI.Serializable(0xDE2A470828921512, GameType.DS)]
    public class MirrorSurfaceResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<RenderEffectResource> RenderEffectResourceUsingVertexArray;
    }

    [RTTI.Serializable(0xCB281D99E4063296, GameType.DS)]
    public class Mission : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0x37663BF6651912B2, GameType.DS)]
    public class MissionCampaign : Mission
    {
    }

    [RTTI.Serializable(0xBC8CC1A596380107, GameType.DS)]
    public class MissionCampaignResource : MissionResource
    {
        [RTTI.Member(24, 0xA8, "MissionFailed")] public float DefaultDelay;
        [RTTI.Member(25, 0xAC, "MissionFailed")] public float MaxDelay;
        [RTTI.Member(26, 0xB0, "MissionFailed")] public bool EndWhenAllPlayersAreDead;
    }

    [RTTI.Serializable(0x371C4B873595BD64, GameType.DS)]
    public class MissionEvent
    {
        [RTTI.Member(0, 0x0)] public int Value;
        [RTTI.Member(1, 0x8)] public String Event;
    }

    [RTTI.Serializable(0x1A4BEF0B274135EE, GameType.DS)]
    public class MissionManager : Entity
    {
    }

    [RTTI.Serializable(0xF803B09A1CC7B6F1, GameType.DS)]
    public class MissionManagerResource : EntityResource
    {
        [RTTI.Member(32, 0x100, "Logic")] public bool StopOnFirstLostMission;
        [RTTI.Member(33, 0x101, "Logic")] public bool EnableRandomMissionSelection;
        [RTTI.Member(38, 0x108, "Representation")] public String WinMessage;
        [RTTI.Member(39, 0x110, "Representation")] public String LoseMessage;
        [RTTI.Member(40, 0x118, "Representation")] public String DrawMessage;
        [RTTI.Member(34, 0x120, "Logic")] public Ref<IntegerFact> MissionWinCounterFact;
        [RTTI.Member(35, 0x128, "Logic")] public Ref<IntegerFact> MissionLostCounterFact;
        [RTTI.Member(36, 0x130, "Logic")] public Ref<IntegerFact> MissionDrawCounterFact;
        [RTTI.Member(31, 0x138, "Logic")] public Array<Ref<MissionResource>> Missions;
    }

    [RTTI.Serializable(0x3C34830DDF23E63C, GameType.DS)]
    public class MissionResource : Resource
    {
        [RTTI.Member(3, 0x20, "EndConditions")] public float TimeLimit;
        [RTTI.Member(4, 0x24, "EndConditions")] public int ObjectiveLimit;
        [RTTI.Member(11, 0x28, "Events")] public Array<MissionEvent> TimeLeftEvents;
        [RTTI.Member(6, 0x38, "Mission")] public Ref<AIFaction> Faction;
        [RTTI.Member(7, 0x40, "Mission")] public String MissionWinMessageTag;
        [RTTI.Member(8, 0x48, "Mission")] public String MissionLossMessageTag;
        [RTTI.Member(9, 0x50, "Mission")] public String MissionInitialSpawnPoint;
        [RTTI.Member(15, 0x58, "CounterMission")] public Ref<AIFaction> CounterFaction;
        [RTTI.Member(16, 0x60, "CounterMission")] public String CounterMissionWinMessageTag;
        [RTTI.Member(17, 0x68, "CounterMission")] public String CounterMissionLossMessageTag;
        [RTTI.Member(18, 0x70, "CounterMission")] public String CounterMissionInitialSpawnPoint;
        [RTTI.Member(20, 0x78, "Scoring")] public String MissionDrawMessageTag;
        [RTTI.Member(22, 0x80, "Script")] public String MissionTimeLeftCallback;
        [RTTI.Member(12, 0x88, "Events")] public Array<MissionEvent> FriendlyScoreEvents;
        [RTTI.Member(13, 0x98, "Events")] public Array<MissionEvent> EnemyScoreEvents;
    }

    [RTTI.Serializable(0x5B965BDF76F473A3, GameType.DS)]
    public class MockupGeometry : ParentWorldNode
    {
        [RTTI.BaseClass(0x70)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(11, 0xB0)] public Ref<PhysicsCollisionInstance> PhysicsCollisionInstance;
        [RTTI.Member(12, 0xB8)] public Ref<StaticMeshInstance> StaticMeshInstance;
    }

    [RTTI.Serializable(0x2C9650F433A6F625, GameType.DS)]
    public class ModdableItemRuntimeData : InventoryItemRuntimeData
    {
    }

    [RTTI.Serializable(0xD3E24D9C7F20A9B1, GameType.DS)]
    public class ModdableItemRuntimeDataRestoreState : InventoryItemRuntimeDataRestoreState
    {
        [RTTI.Member(2, 0x28)] public Array<StatModification> PermanentModifications;
        [RTTI.Member(3, 0x38)] public Array<Ref<InventoryItemRestoreState>> SocketedModificationItemStates;
    }

    [RTTI.Serializable(0xC2C7DB876E5EE32, GameType.DS)]
    public class Model : EntityComponent
    {
    }

    [RTTI.Serializable(0xCC9E51A118652DA3, GameType.DS)]
    public class ModelActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0xB9E2F42D96137361, GameType.DS)]
    public class ModelActorResource : EntityActorResource
    {
    }

    [RTTI.Serializable(0x87BCE6413140F3C0, GameType.DS)]
    public class ModelLodBiasEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA4935E6F21FCA946, GameType.DS)]
    public class ModelLodBiasEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public float LodDistanceScale;
    }

    [RTTI.Serializable(0xC8D955C1A8563780, GameType.DS)]
    public class ModelPartMeshReplacementResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<MeshResourceBase>> MeshResources;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<MeshResourceBase> ReplacementMeshResource;
        [RTTI.Member(5, 0x48, "Logic")] public String HelperName;
    }

    [RTTI.Serializable(0xCDBCD0D1DCA09A23, GameType.DS)]
    public class ModelPartResource : ResourceWithNameHash
    {
        [RTTI.Member(5, 0x28, "General")] public Ref<MeshResourceBase> MeshResource;
        [RTTI.Member(6, 0x40, "General")] public Ref<SkinnedMeshBoneBoundingBoxes> BoneBoundingBoxes;
        [RTTI.Member(7, 0x48, "General")] public Ref<PhysicsCollisionResource> PhysicsResource;
        [RTTI.Member(8, 0x50, "General")] public EPhysicsMotionType PartMotionType;
        [RTTI.Member(9, 0x58, "General")] public String HelperNode;
        [RTTI.Member(11, 0x60, "Optimization")] public ERenderEffectAllocationMode RenderEffectAllocationMode;
    }

    [RTTI.Serializable(0x878CB244C7A4637C, GameType.DS)]
    public class ModelRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x885C3466410310D9, GameType.DS)]
    public class ModelResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "General")] public Array<Ref<ModelPartResource>> ModelPartResources;
        [RTTI.Member(3, 0x30, "General")] public Ref<ArtPartsDataResource> ArtPartsDataResource;
        [RTTI.Member(7, 0x38, "General")] public EViewLayer ViewLayer;
        [RTTI.Member(8, 0x3C, "General")] public EActiveView ActiveView;
        [RTTI.Member(5, 0x40, "General")] public Array<Ref<SkeletonHelpers>> Helpers;
        [RTTI.Member(6, 0x50, "General")] public String HelperName;
    }

    [RTTI.Serializable(0x342F9BE4C6333FA, GameType.DS)]
    public class ModelSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDC11A917C6DB1A75, GameType.DS)]
    public class ModificationItemComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x28589C7E2A8B6946, GameType.DS)]
    public class ModificationItemComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<StatModificationTypeCandidate>> StatCandidates;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<CurveResource> RatingSpread;
        [RTTI.Member(7, 0x38, "Splits")] public float SingleStatWeight;
        [RTTI.Member(8, 0x3C, "Splits")] public float SecondaryStatWeight;
        [RTTI.Member(9, 0x40, "Splits")] public float TertiaryStatWeight;
        [RTTI.Member(10, 0x44, "Splits")] public float SingleStatRatingThreshold;
        [RTTI.Member(11, 0x48, "Splits")] public float TripleStatRatingThreshold;
        [RTTI.Member(12, 0x4C, "Splits")] public float PrimaryRatingMultiplierOnSecondary;
        [RTTI.Member(13, 0x50, "Splits")] public float PrimaryRatingMultiplierOnTertiary;
        [RTTI.Member(14, 0x54, "Splits")] public float SecondaryRatingMultiplier;
        [RTTI.Member(15, 0x58, "Splits")] public float SecondaryRatingMultiplierOnTertiary;
        [RTTI.Member(16, 0x5C, "Splits")] public float TertiaryRatingMultiplier;
        [RTTI.Member(5, 0x60, "Logic")] public EModificationItemCategory Category;
    }

    [RTTI.Serializable(0x27F25CF3E4FD71D, GameType.DS)]
    public class ModificationItemComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD87B014ADF6FA453, GameType.DS)]
    public class ModificationItemRuntimeData : InventoryItemRuntimeData
    {
    }

    [RTTI.Serializable(0x1616CEE72223F2EB, GameType.DS)]
    public class ModificationItemRuntimeDataRestoreState : InventoryItemRuntimeDataRestoreState
    {
        [RTTI.Member(2, 0x28)] public Array<StatModification> Modifications;
    }

    [RTTI.Serializable(0xCA5106266F6C3EFB, GameType.DS)]
    public class ModificationItemUseLocationPromptUIDataBinding : UseLocationPromptUIDataBinding
    {
        [RTTI.Member(2, 0x18)] public CPtr<LocalizedTextResource> MOD_TYPE;
        [RTTI.Member(3, 0x20)] public int MOD_RATING;
    }

    [RTTI.Serializable(0xBC206E457CFD31D2, GameType.DS)]
    public class ModificationSocketComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7FBD58500DBEA6D0, GameType.DS)]
    public class ModificationSocketComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EModificationSocketActivationType ActivationType;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<ModificationSocketResource>> DisplayedSockets;
        [RTTI.Member(5, 0x38, "Logic")] public Array<Ref<EntityResource>> PreSocketedModificationItems;
    }

    [RTTI.Serializable(0x4B5580DE1D3EE91F, GameType.DS)]
    public class ModificationSocketComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x41DB6DABB7755789, GameType.DS)]
    public class ModificationSocketResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<StatModificationSocketType>> AllowedSocketTypes;
    }

    [RTTI.Serializable(0xF638C7D767B8FD5A, GameType.DS)]
    public class ModificationViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x6542FBCBC236C845, GameType.DS)]
    public class ModifierStatDisplayEntry : StatDisplayEntryBase
    {
        [RTTI.Member(5, 0x28, "General")] public Ref<CurveResource> StatModifierCurve;
        [RTTI.Member(6, 0x30, "General")] public float DesiredMinimumMultiplier;
        [RTTI.Member(7, 0x38, "General")] public Ref<LocalizedTextResource> ModifierName;
        [RTTI.Member(8, 0x40, "General")] public Ref<LocalizedTextResource> ModifierDescription;
    }

    [RTTI.Serializable(0x9D22197499194417, GameType.DS)]
    public class Module : CoreObject
    {
    }

    [RTTI.Serializable(0xADECF643861E2A95, GameType.DS)]
    public class MoneyQuestReward : SummableQuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public Array<int> Money;
    }

    [RTTI.Serializable(0xEED8D4C5D8220F4B, GameType.DS)]
    public class MonitoredAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE8589CDAE64F5358, GameType.DS)]
    public class MonitoredAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<MonitoredAnimationResource>> Animations;
    }

    [RTTI.Serializable(0xFA97F2248BA0E7E9, GameType.DS)]
    public class MonitoredAnimationComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x954A28B2B9030F17, GameType.DS)]
    public class MonitoredAnimationResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String FriendlyName;
        [RTTI.Member(4, 0x28, "Logic")] public String TriggerAnimVarName;
        [RTTI.Member(5, 0x30, "Logic")] public Array<FloatAnimationVariableValue> FloatAnimVars;
        [RTTI.Member(6, 0x40, "Logic")] public String IsActiveAnimTagName;
        [RTTI.Member(7, 0x48, "Logic")] public AnimationEventID IsActiveAnimEvent;
        [RTTI.Member(8, 0x4C, "Logic")] public bool NeedsTargetDependency;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<GraphProgramResource> OnStartGraph;
        [RTTI.Member(10, 0x58, "Logic")] public Ref<OverrideGraphProgramResource> OnStartGraphOverride;
        [RTTI.Member(11, 0x60, "Logic")] public Ref<GraphProgramResource> OnStopGraph;
        [RTTI.Member(12, 0x68, "Logic")] public Ref<OverrideGraphProgramResource> OnStopGraphOverride;
        [RTTI.Member(13, 0x70, "Logic")] public Ref<GraphProgramResource> OnActiveUpdateGraph;
        [RTTI.Member(14, 0x78, "Logic")] public Ref<OverrideGraphProgramResource> OnActiveUpdateGraphOverride;
    }

    [RTTI.Serializable(0xCC65AEB5E70B4D83, GameType.DS)]
    public class MorphemeAnimationGraphBaseInstance
    {
    }

    [RTTI.Serializable(0x7EA2AF9B7EB0CAC6, GameType.DS)]
    public class MorphemeAnimationGraphBaseResource : Resource
    {
    }

    [RTTI.Serializable(0xD327F672C521BA54, GameType.DS)]
    public class MorphemeAnimationGraphInstance
    {
    }

    [RTTI.Serializable(0xD2B29CAE038FFC78, GameType.DS)]
    public class MorphemeAnimationGraphInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1B6D0E0CEC41D652, GameType.DS)]
    public class MorphemeAnimationGraphResource : MorphemeAnimationGraphBaseResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> AnimationGraphProgramResource;
        [RTTI.Member(4, 0x28, "Logic")] public String AnimationGraphOuput;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<JointSetCollectionResource> JointCollection;
    }

    [RTTI.Serializable(0x669C8CEF89A0ABF2, GameType.DS)]
    public class MorphemeAnimationManager : AnimationManager
    {
    }

    [RTTI.Serializable(0xB9E47758675FA7D2, GameType.DS)]
    public class MorphemeAnimationManagerResource : AnimationManagerResource
    {
        [RTTI.BaseClass(0xC0)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(9, 0xD8, "Logic")] public Ref<MorphemeNetworkDefResource> MorphemeNetworkDef;
        [RTTI.Member(10, 0xE0, "Logic")] public Ref<AnimationSetMap> AnimationSetMap;
        [RTTI.Member(11, 0xE8, "Logic")] public AnimationSet DefaultAnimationSet;
        [RTTI.Member(12, 0xF0, "Logic")] public Ref<Skeleton> DefaultSkeleton;
        [RTTI.Member(13, 0xF8, "Logic")] public float MaxRandomTimeOffset;
        [RTTI.Member(15, 0x100, "MotionTable")] public Ref<MotionTableResource> MotionTableResource;
    }

    [RTTI.Serializable(0xEEE268C550A7F960, GameType.DS)]
    public class MorphemeAnimationTargetMapping
    {
        [RTTI.Member(0, 0x0)] public String AnimationTarget;
        [RTTI.Member(1, 0x8)] public String SkeletonPrefix;
        [RTTI.Member(2, 0x10)] public Ref<Skeleton> Skeleton;
        [RTTI.Member(3, 0x18)] public Array<MorphemeAnimationTargetOffsetSizeCouple> Offsets;
    }

    [RTTI.Serializable(0x6660B3713DB4A678, GameType.DS)]
    public class MorphemeAnimationTargetOffsetSizeCouple
    {
        [RTTI.Member(0, 0x0)] public uint32 Offset;
        [RTTI.Member(1, 0x4)] public uint32 Length;
    }

    [RTTI.Serializable(0x3292F00C1E66A832, GameType.DS)]
    public class MorphemeAsset
    {
        [RTTI.Member(0, 0x0)] public Array<uint8> Data;
        [RTTI.Member(1, 0x10)] public uint32 AssetID;
        [RTTI.Member(2, 0x14)] public int32 AssetType;
        [RTTI.Member(3, 0x18)] public int64 AssetSize;
    }

    [RTTI.Serializable(0x8929DF257EB9B725, GameType.DS)]
    public class MorphemeEventMappingsResource : Resource
    {
        [RTTI.Member(2, 0x50)] public Array<MorphemeTextEventMapping> TextEventMappings;
        [RTTI.Member(3, 0x60)] public Array<MorphemeSoundEventMapping> SoundEventMappings;
        [RTTI.Member(4, 0x70)] public Ref<MorphemeRumbleEventMappingsResource> RumbleEventMappings;
        [RTTI.Member(5, 0x78)] public Array<MorphemeGroupTextEventMapping> GroupTextEventMappings;
    }

    [RTTI.Serializable(0x65D187A44048784E, GameType.DS)]
    public class MorphemeGroupTextEventMapping
    {
        [RTTI.Member(0, 0x8)] public AnimationEventID EventIndex;
        [RTTI.Member(1, 0xC)] public AnimationEventID EventIndexEnd;
        [RTTI.Member(2, 0x10)] public String Text;
    }

    [RTTI.Serializable(0x88B9A5ECA8219A6A, GameType.DS)]
    public class MorphemeNetworkDefResource : Resource
    {
        [RTTI.Member(12, 0x20, "Logic")] public Array<String> NodeNames;
        [RTTI.Member(3, 0x30, "Logic")] public Array<MorphemeAsset> MorphemeAssets;
        [RTTI.Member(4, 0x40, "Logic")] public Array<String> ControlParameters;
        [RTTI.Member(5, 0x50, "Logic")] public Array<String> Messages;
        [RTTI.Member(6, 0x70, "Logic")] public Array<Ref<MorphemeAnimationResource>> Animations;
        [RTTI.Member(7, 0x80, "Logic")] public HashMap<String_int> AnimationTags;
        [RTTI.Member(8, 0x90, "Logic")] public Ref<MorphemeEventMappingsResource> Mappings;
        [RTTI.Member(9, 0x98, "Logic")] public Ref<SkeletonTargetTree> SkeletonTargetTree;
        [RTTI.Member(16, 0xA0, "Logic")] public Array<MorphemeProceduralLookNodeMapping> ProceduralLookNodeMappings;
        [RTTI.Member(17, 0xC0, "Logic")] public Array<MorphemeNodeToAnimationGraphMapping> AnimationGraphNodeMappings;
        [RTTI.Member(10, 0xE0, "Logic")] public Array<MorphemeAnimationTargetMapping> AnimationTargetMap;
        [RTTI.Member(11, 0xF0, "Logic")] public Array<MorphemeAnimationTargetOffsetSizeCouple> DefaultOffsets;
        [RTTI.Member(13, 0x100, "Logic")] public AnimationNodeID AnimSetNodeID;
        [RTTI.Member(18, 0x148, "Logic")] public HashMap<String_AnimationNodeID> NodeNameIDMap;
        [RTTI.Member(14, 0x17C, "Logic")] public bool EnableUpdateTrajectory;
        [RTTI.Member(15, 0x17D, "Logic")] public bool EnableUpdateSampledEvents;
    }

    [RTTI.Serializable(0x136B2C6EBA4899DF, GameType.DS)]
    public class MorphemeNodeToAnimationGraphMapping
    {
        [RTTI.Member(0, 0x0, true)] public String AnimNodeName;
        [RTTI.Member(1, 0x8)] public AnimationNodeID AnimNode;
        [RTTI.Member(2, 0x10)] public Ref<MorphemeAnimationGraphBaseResource> AnimationGraphResource;
    }

    [RTTI.Serializable(0x66FE7A5EF74D410C, GameType.DS)]
    public class MorphemeProceduralLookNodeMapping
    {
        [RTTI.Member(0, 0x0, true)] public String AnimNodeName;
        [RTTI.Member(1, 0x8)] public AnimationNodeID AnimNode;
        [RTTI.Member(3, 0x10)] public Ref<Skeleton> Skeleton;
        [RTTI.Member(2, 0x18)] public Ref<ProceduralLookResource> ProceduralLookResource;
    }

    [RTTI.Serializable(0x99914CCDC1034D2D, GameType.DS)]
    public class MorphemeRumbleEventMapping
    {
        [RTTI.Member(0, 0x0)] public AnimationEventID ID;
        [RTTI.Member(1, 0x8)] public Ref<RumbleResource> Rumble;
        [RTTI.Member(2, 0x10)] public String HelperName;
    }

    [RTTI.Serializable(0x80C217524AF78753, GameType.DS)]
    public class MorphemeRumbleEventMappingsResource : Resource
    {
        [RTTI.Member(2, 0x30)] public Array<MorphemeRumbleEventMapping> RumbleEventMappings;
    }

    [RTTI.Serializable(0x29FD4FBCAD73775E, GameType.DS)]
    public class MorphemeSoundEventMapping
    {
        [RTTI.Member(0, 0x0)] public AnimationEventID ID;
        [RTTI.Member(1, 0x8)] public Ref<SoundResource> Sound;
        [RTTI.Member(2, 0x10)] public String HelperName;
    }

    [RTTI.Serializable(0x942C9D94DDD0D156, GameType.DS)]
    public class MorphemeSoundEventRemapComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x667624403F2F5032, GameType.DS)]
    public class MorphemeSoundEventRemapComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<MorphemeSoundEventMapping> RemapMorphemeSoundEvents;
    }

    [RTTI.Serializable(0x442C8FE6C6BEF519, GameType.DS)]
    public class MorphemeTextEventMapping
    {
        [RTTI.Member(0, 0x0)] public AnimationEventID ID;
        [RTTI.Member(1, 0x8)] public String Text;
    }

    [RTTI.Serializable(0x82D7ACE61DE38409, GameType.DS)]
    public class MorphemeVariableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1333E91F3758D027, GameType.DS)]
    public class MorphemeVariableComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public String VariableName;
        [RTTI.Member(3, 0x28)] public float Variable;
    }

    [RTTI.Serializable(0x1B59FCE1DDFBCD88, GameType.DS)]
    public class MortallyWoundedComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x190C848DEABEA8E3, GameType.DS)]
    public class MortallyWoundedComponentResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x20, "General")] public bool IsInvulnerableWhileStandingUp;
        [RTTI.Member(3, 0x28, "General")] public CPtr<EntityAction> OnMortallyWoundedAction;
        [RTTI.Member(4, 0x30, "General")] public CPtr<EntityAction> OnReviveAction;
        [RTTI.Member(6, 0x38, "General")] public float AutoReviveTime;
        [RTTI.Member(7, 0x3C, "General")] public float ReviveHealTarget;
        [RTTI.Member(8, 0x40, "General")] public float ReviveRegenTarget;
        [RTTI.Member(9, 0x44, "General")] public float ReviveRegenTime;
    }

    [RTTI.Serializable(0x86EC6B10131ABFF0, GameType.DS)]
    public class MortallyWoundedComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x318C22C4F8BE4488, GameType.DS)]
    public class MotionAimControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAFAAD0C046ED46C5, GameType.DS)]
    public class MotionAimControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CurveResource> MagnitudeDampeningCurve;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CurveResource> VelocityDampeningCurve;
    }

    [RTTI.Serializable(0x7D3DD98F21F38311, GameType.DS)]
    public class MotionTableContentsGenerationResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<String> FixedSampledFloatAnimVarNames;
        [RTTI.Member(4, 0x30, "General")] public Array<String> SampledAnimStateNames;
        [RTTI.Member(5, 0x40, "General")] public String SampledAnimTagName;
        [RTTI.Member(7, 0x48, "General")] public Array<String> AdditionalBoneNames;
        [RTTI.Member(6, 0x58, "General")] public EUpdateFrequency SampleFrequency;
    }

    [RTTI.Serializable(0x96D1E7CB9DFF9D22, GameType.DS)]
    public class MotionTableResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<String> SampledAnimationVariableNames;
        [RTTI.Member(4, 0x30, "General")] public HashMap<String_int> SampledAnimationVariableIndices;
        [RTTI.Member(5, 0x40, "General")] public Array<Ref<AnimationMotionBase>> MotionTableEntries;
        [RTTI.Member(6, 0x70, "General")] public Array<String> MotionTableEntryNames;
    }

    [RTTI.Serializable(0x77A3174E4E41C462, GameType.DS)]
    public class MountDismountMode : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<MountModeID> ID;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<MountVariableRange>> MountVariableRanges;
        [RTTI.Member(5, 0x38, "Logic")] public String DisplacementEventText;
    }

    [RTTI.Serializable(0xC2BD3F47A67B08AF, GameType.DS)]
    public class MountEventInstance : MoveToEventInstance
    {
    }

    [RTTI.Serializable(0xCA7CCBF55757D9DE, GameType.DS)]
    public class MountEventResource : MoveToEventResource
    {
        [RTTI.Member(16, 0x68, "Logic")] public String UseLocationName;
        [RTTI.Member(17, 0x70, "Logic")] public bool ImmediateMount;
    }

    [RTTI.Serializable(0x5DC67C5BE4DEF5C8, GameType.DS)]
    public class MountMode : MountDismountMode
    {
    }

    [RTTI.Serializable(0x410F9BD00D4C4925, GameType.DS)]
    public class MountModeID : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Generated")] public String Identifier;
    }

    [RTTI.Serializable(0x40CB263B9EA454B5, GameType.DS)]
    public class MountModeIDSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4ED7AB551FECF743, GameType.DS)]
    public class MountModeMountPoints
    {
        [RTTI.Member(0, 0x0)] public HashMap<AnimationSet_Array_MountPoint> MountPointsPerAnimationSet;
    }

    [RTTI.Serializable(0xE637B62E91D775A9, GameType.DS)]
    public class MountModeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB81144A13896498C, GameType.DS)]
    public class MountPoint
    {
        [RTTI.Member(1, 0x0, "Logic")] public AnimationSet AnimationSet;
        [RTTI.Member(2, 0x10, "Logic")] public Mat44 Transform;
        [RTTI.Member(3, 0x50, "Logic")] public Mat44 RootTransform;
        [RTTI.Member(4, 0x90, "Logic")] public Array<float> AnimationVariableValues;
        [RTTI.Member(5, 0xA0, "Logic")] public Array<Vec3> Trajectory;
        [RTTI.Member(6, 0xB0, "Logic")] public float DisplacementStartTime;
        [RTTI.Member(7, 0xB4, "Logic")] public float DisplacementEndTime;
    }

    [RTTI.Serializable(0x47B84EFB1720BA7A, GameType.DS)]
    public class MountUseLocationsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7B6C3526FBB8B74A, GameType.DS)]
    public class MountUseLocationsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<UseLocationCondition>> UseLocationConditions;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<MountModeID> MountModeID;
        [RTTI.Member(6, 0x40, "Logic")] public bool RequestNetOwnership;
    }

    [RTTI.Serializable(0x1F102F4733A36CC8, GameType.DS)]
    public class MountUseLocationsManagerComponent : AIUsableComponent
    {
    }

    [RTTI.Serializable(0xD2D1A775B5708DCD, GameType.DS)]
    public class MountVariableRange : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String VariableName;
        [RTTI.Member(4, 0x28, "Logic")] public FRange VariableRange;
        [RTTI.Member(5, 0x30, "Logic")] public float VariableStep;
        [RTTI.Member(6, 0x34, "Logic")] public bool IsControlledByMountableComponent;
    }

    [RTTI.Serializable(0x41DB94CFC7CAA745, GameType.DS)]
    public class MountableComponent : EntityComponent
    {
        [RTTI.Member(5, 0x50, true)] public EMountRequest MountRequest;
        [RTTI.Member(6, 0x51, true)] public EMountState MountState;
        [RTTI.Member(7, 0x58, true)] public CPtr<Entity> Mounter;
    }

    [RTTI.Serializable(0x1905B7764547BC54, GameType.DS)]
    public class MountableComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public UUIDRef<MountableID> MountableID;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<AnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(5, 0x38, "Logic", true)] public Ref<SkinnedModelResource> SkinnedModelResource;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<Skeleton> MounterSkeleton;
        [RTTI.Member(7, 0x48, "Logic")] public Array<String> AnimationSetTags;
        [RTTI.Member(8, 0x58, "Logic")] public Array<String> MounterAnimationSets;
        [RTTI.Member(9, 0x68, "Logic")] public String MounterStateTag;
        [RTTI.Member(10, 0x70, "Logic")] public Ref<MounterComponentResource> MounterComponentResource;
        [RTTI.Member(11, 0x78, "Logic")] public String MountAnimation;
        [RTTI.Member(12, 0x80, "Logic")] public String MounterAnimationSetAnimVarName;
        [RTTI.Member(13, 0x88, "Logic")] public String MountStateAnimationVariable;
        [RTTI.Member(14, 0x90, "Logic")] public String AttachHelper;
        [RTTI.Member(15, 0x98, "Logic")] public AnimationMountStateLogic AnimationMountStateLogic;
        [RTTI.Member(16, 0xA0, "Logic")] public String MountingAnimationLogicName;
        [RTTI.Member(17, 0xA8, "Logic")] public String MountedAnimationLogicName;
        [RTTI.Member(18, 0xB0, "Logic")] public String DismountingAnimationLogicName;
        [RTTI.Member(19, 0xB8, "Logic")] public String DismountedAnimationLogicName;
        [RTTI.Member(20, 0xC0, "Logic")] public String BreakOutDismountAnimationEventName;
        [RTTI.Member(21, 0xC8, "Logic")] public Array<Ref<MountMode>> MountModes;
        [RTTI.Member(30, 0xD8, "Generated")] public Array<MountModeMountPoints> MountPointsPerMode;
        [RTTI.Member(22, 0xE8, "Logic")] public Array<Ref<DismountMode>> DismountModes;
        [RTTI.Member(31, 0xF8, "Generated")] public Array<MountModeMountPoints> DismountPointsPerMode;
        [RTTI.Member(23, 0x108, "Logic")] public Ref<DismountMode> MounterDeathDismountMode;
        [RTTI.Member(24, 0x110, "Logic")] public CPtr<EntityAction> StartMountAction;
        [RTTI.Member(25, 0x118, "Logic")] public CPtr<EntityAction> StopMountAction;
        [RTTI.Member(26, 0x120, "Logic")] public CPtr<EntityAction> StartDismountAction;
        [RTTI.Member(27, 0x128, "Logic")] public CPtr<EntityAction> StopDismountAction;
        [RTTI.Member(28, 0x130, "Logic")] public TagPropertyLinkCollection TagProperties;
    }

    [RTTI.Serializable(0x8901632517C3EEEF, GameType.DS)]
    public class MountableComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4A37EF11A2FDA2CF, GameType.DS)]
    public class MountableID : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB2364B70A2DE73CB, GameType.DS)]
    public class MountableIDSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC94D7FC91A593EF4, GameType.DS)]
    public class MounterComponent : EntityComponent
    {
        [RTTI.Member(5, 0x50, true)] public CPtr<MountableComponent> MountableComponent;
        [RTTI.Member(6, 0x58, true)] public CPtr<MoverResource> PreviousMoverResource;
    }

    [RTTI.Serializable(0x7421DD42F773AC04, GameType.DS)]
    public class MounterComponentGame : MounterComponent
    {
    }

    [RTTI.Serializable(0xB98E97DE249843C4, GameType.DS)]
    public class MounterComponentGameResource : MounterComponentResource
    {
        [RTTI.Member(10, 0x50, "Logic")] public bool IsContextualActionAllowed;
        [RTTI.Member(11, 0x51, "Logic")] public bool ShouldUpdateNearbyAnnotations;
        [RTTI.Member(12, 0x52, "Logic")] public bool IsVaultingAllowed;
        [RTTI.Member(13, 0x53, "Logic")] public bool IsVegetationCoverAllowed;
    }

    [RTTI.Serializable(0xB9642EAA15DD8A25, GameType.DS)]
    public class MounterComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public CPtr<EntityAction> StartMountAction;
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<EntityAction> StopMountAction;
        [RTTI.Member(5, 0x30, "Logic")] public CPtr<EntityAction> StartDismountAction;
        [RTTI.Member(6, 0x38, "Logic")] public CPtr<EntityAction> StopDismountAction;
        [RTTI.Member(8, 0x40, "Animation")] public Array<String> BoolAnimVarNames;
    }

    [RTTI.Serializable(0x279DFE40A0B973D9, GameType.DS)]
    public class MounterComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA0D1DF9B47C06DCB, GameType.DS)]
    public class MounterMover : Mover
    {
    }

    [RTTI.Serializable(0xFAC4508101CF1D15, GameType.DS)]
    public class MounterMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xBA17390B578BBC9B, GameType.DS)]
    public class MoveToEventInstance : SubGoalPausableEventInstance
    {
    }

    [RTTI.Serializable(0xBF29B69C69C9D85A, GameType.DS)]
    public class MoveToEventResource : SubGoalPausableEventResource
    {
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Array<Ref<LocatorResource>> TargetLocatorResources;
        [RTTI.Member(11, 0x58, "Logic")] public Ref<AIContextHintResource> MoveContext;
        [RTTI.Member(12, 0x60, "Logic")] public bool PauseUntilArrival;
        [RTTI.Member(13, 0x61, "Logic")] public bool StopExactlyAtDestination;
        [RTTI.Member(14, 0x62, "Logic")] public bool FaceToTargetRotation;
    }

    [RTTI.Serializable(0xC8E78281FE849ECD, GameType.DS)]
    public class Mover : EntityComponent
    {
    }

    [RTTI.Serializable(0x3C780F949FCE9804, GameType.DS)]
    public class MoverResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool SupportsDynamicParts;
        [RTTI.Member(5, 0x21, "NetworkedPhysics")] public bool ShouldApplyImpulseOnRemote;
    }

    [RTTI.Serializable(0x14A095220A4DCF95, GameType.DS)]
    public class MoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x69F5EE5C1668CECA, GameType.DS)]
    public class MovieFade
    {
        [RTTI.Member(0, 0x0)] public int FadeFrame;
        [RTTI.Member(1, 0x4)] public int FadeDuration;
        [RTTI.Member(2, 0x8)] public int FadeDownDuration;
        [RTTI.Member(3, 0xC)] public int FadeUpDuration;
        [RTTI.Member(4, 0x10)] public EMovieFadePurpose FadePurpose;
    }

    [RTTI.Serializable(0xCED31F7ABEDA2763, GameType.DS)]
    public class MovieFrameMenuActionBinding
    {
        [RTTI.Member(0, 0x0)] public int FrameNumber;
        [RTTI.Member(1, 0x8)] public Ref<MenuActionResource> Action;
    }

    [RTTI.Serializable(0xD7CE5DD903C7CAB4, GameType.DS)]
    public class MovieResource : Resource
    {
        [RTTI.Member(10, 0x0, "Logic", true)] public bool ShouldRunIn30Hz;
        [RTTI.Member(4, 0x20, "Logic")] public Array<MovieSkipLocation> SkipLocations;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<SubtitlesResource> Subtitles;
        [RTTI.Member(6, 0x38, "Logic")] public Array<MovieFade> Fades;
        [RTTI.Member(7, 0x48, "Logic")] public bool Looping;
        [RTTI.Member(8, 0x49, "Logic")] public bool IsLoadingMovie;
        [RTTI.Member(9, 0x4A, "Logic")] public bool CanBeSkipped;
        [RTTI.Member(11, 0x4B, "Logic")] public bool ShouldRunIn29_97Hz;
        [RTTI.Member(3, 0x50, "Logic")] public String MovieFile;
        [RTTI.Member(14, 0x58, "Volume")] public float MasterVolume;
        [RTTI.Member(15, 0x5C, "Volume")] public float MandS_FrontLeftRightVolume;
        [RTTI.Member(16, 0x60, "Volume")] public float MandS_CenterVolume;
        [RTTI.Member(17, 0x64, "Volume")] public float MandS_LfeVolume;
        [RTTI.Member(18, 0x68, "Volume")] public float MandS_SurroundLeftRightVolume;
        [RTTI.Member(19, 0x6C, "Volume")] public float VoiceVolume;
        [RTTI.Member(21, 0x70, "Variant")] public bool Has3DVariant;
        [RTTI.Member(23, 0x71, "Loading")] public bool TryPreloadAll;
        [RTTI.Member(24, 0x74, "Loading")] public EMovieMemoryType MemoryType;
        [RTTI.Member(12, 0x78, "Logic")] public bool ControlGameSoundFade;
    }

    [RTTI.Serializable(0x14B129D0A14CC56E, GameType.DS)]
    public class MovieResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4049C609F349EC75, GameType.DS)]
    public class MovieSkipLocation
    {
        [RTTI.Member(0, 0x0)] public ESkipLocationType Type;
        [RTTI.Member(1, 0x4)] public int FrameOffset;
        [RTTI.Member(2, 0x8)] public int EndFrame;
    }

    [RTTI.Serializable(0x18D059265FF05156, GameType.DS)]
    public class MovieTag : VisualTag
    {
    }

    [RTTI.Serializable(0x3D3D49DC58BCF9F7, GameType.DS)]
    public class MovieTagSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBA5D550EC4185124, GameType.DS)]
    public class MovieWidget : Widget
    {
    }

    [RTTI.Serializable(0xE8DA3ED4BFBF6C61, GameType.DS)]
    public class MsRequestInvisible : MsgBase
    {
    }

    [RTTI.Serializable(0xCB039A7B8AFECD78, GameType.DS)]
    public class MsgAI : MsgScene
    {
        [RTTI.Member(0, 0x0)] public CPtr<Entity> Sender;
        [RTTI.Member(1, 0x30)] public String MessageId;
    }

    [RTTI.Serializable(0x72FCDF0F7684C7A5, GameType.DS)]
    public class MsgAIAlertLevelChanged : MsgAI
    {
        [RTTI.Member(2, 0x38)] public EAlertLevel AlertLevel;
        [RTTI.Member(3, 0x3C)] public EAlertLevel OldAlertLevel;
        [RTTI.Member(4, 0x40)] public bool HasAlertLevelIncreased;
    }

    [RTTI.Serializable(0x7CF7BC05E8BA2F75, GameType.DS)]
    public class MsgAIAttack : MsgScene
    {
        [RTTI.Member(1, 0x0)] public CPtr<Entity> Sender;
        [RTTI.Member(2, 0x0)] public CPtr<Entity> Target;
        [RTTI.Member(0, 0x18)] public EMsgAIAttackState State;
        [RTTI.Member(3, 0x50)] public UUIDRef<MsgAIAttackId> AttackId;
    }

    [RTTI.Serializable(0x95FD8F37277D7F95, GameType.DS)]
    public class MsgAIAttackId : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xC5D5F0DBA811C145, GameType.DS)]
    public class MsgAIAttackIdSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x44A9E42FBE25C263, GameType.DS)]
    public class MsgAICanControlEntity : MsgBase
    {
    }

    [RTTI.Serializable(0xC41FF6F2F618B809, GameType.DS)]
    public class MsgAICanReportToOtherEntities : MsgBase
    {
    }

    [RTTI.Serializable(0xE82CE5DE61763085, GameType.DS)]
    public class MsgAIDisableStagger : MsgBase
    {
    }

    [RTTI.Serializable(0x2910E70EB1C247F4, GameType.DS)]
    public class MsgAIEvent : MsgAI
    {
        [RTTI.Member(2, 0x38)] public String CustomData;
    }

    [RTTI.Serializable(0x3BE175ABAAE42AF4, GameType.DS)]
    public class MsgAIEventExpired : MsgBase
    {
    }

    [RTTI.Serializable(0x585FE8CD9257BA18, GameType.DS)]
    public class MsgAIEventPerceived : MsgBase
    {
    }

    [RTTI.Serializable(0x67D2B8544C982C77, GameType.DS)]
    public class MsgAIGroupSpawned : MsgScene
    {
        [RTTI.Member(0, 0x18)] public Ref<AIBehaviorGroup> AIBehaviorGroup;
    }

    [RTTI.Serializable(0x97CD52398BFCACDD, GameType.DS)]
    public class MsgAIOrderArrived : MsgAI
    {
    }

    [RTTI.Serializable(0x7DC840B5A67819ED, GameType.DS)]
    public class MsgAIOrderCompleted : MsgAI
    {
    }

    [RTTI.Serializable(0x40FAC4EC331545F5, GameType.DS)]
    public class MsgAIOrderFailed : MsgAI
    {
    }

    [RTTI.Serializable(0xB4E9F2DE3E0D6CF1, GameType.DS)]
    public class MsgAIPatrolPathChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xC2DC73160525ADD8, GameType.DS)]
    public class MsgAISequenceEvent : MsgAI
    {
        [RTTI.Member(2, 0x38)] public String EventData;
    }

    [RTTI.Serializable(0x3165BE49447A62CF, GameType.DS)]
    public class MsgAIWriteFacts : MsgBase
    {
    }

    [RTTI.Serializable(0xCFA43BA4E09C9818, GameType.DS)]
    public class MsgActiveViewportsChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x574DCE225A5A7401, GameType.DS)]
    public class MsgAddCameraModifier : MsgBase
    {
    }

    [RTTI.Serializable(0x5F1D1B447FEAA4C5, GameType.DS)]
    public class MsgAddComponent : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<EntityComponent> Component;
    }

    [RTTI.Serializable(0xE211DE1B6EB9BC5E, GameType.DS)]
    public class MsgAddXp : MsgBase
    {
    }

    [RTTI.Serializable(0xFB790CD37C22BE9F, GameType.DS)]
    public class MsgAddedToEntityManager : MsgBase
    {
    }

    [RTTI.Serializable(0xE25BC0D7D4E7DAE2, GameType.DS)]
    public class MsgAddedToScene : MsgBase
    {
    }

    [RTTI.Serializable(0x538A426C54BC231E, GameType.DS)]
    public class MsgAdjustImpactProperties : MsgBase
    {
    }

    [RTTI.Serializable(0x1B22C2EECCD1263, GameType.DS)]
    public class MsgAimRotationSpeedSettings : MsgBase
    {
    }

    [RTTI.Serializable(0x8EECE4F58C2927CC, GameType.DS)]
    public class MsgAmmoChargeLevelChanged : MsgWeaponModeBase
    {
        [RTTI.Member(0, 0x18)] public int CurrentCharge;
        [RTTI.Member(1, 0x1C)] public int PreviousCharge;
        [RTTI.Member(2, 0x20)] public bool IsOvercharged;
    }

    [RTTI.Serializable(0x8F27E4F60ACE5B3D, GameType.DS)]
    public class MsgAmmoConsumed : MsgBase
    {
    }

    [RTTI.Serializable(0x6CC3EE568F832DCB, GameType.DS)]
    public class MsgAmmoDeselected : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0x733F122203E21083, GameType.DS)]
    public class MsgAmmoSelected : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0x68A03C0E1E9DC3BF, GameType.DS)]
    public class MsgAmmoUnloaded : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0x63E3AB40187BF59C, GameType.DS)]
    public class MsgAnimationEventEnds : MsgBase
    {
    }

    [RTTI.Serializable(0x127F8DC73A33A151, GameType.DS)]
    public class MsgAnimationEventStarts : MsgBase
    {
    }

    [RTTI.Serializable(0x8F3DC1F78FB6ED37, GameType.DS)]
    public class MsgAnimationRumbleEvent : MsgBase
    {
    }

    [RTTI.Serializable(0x8CBD7CDF36AC34BB, GameType.DS)]
    public class MsgAnimationSoundEvent : MsgBase
    {
    }

    [RTTI.Serializable(0x89EDFD7B7CC9B82B, GameType.DS)]
    public class MsgAnimationStateEvaluation : MsgBase
    {
    }

    [RTTI.Serializable(0xB822B638A3963DF9, GameType.DS)]
    public class MsgAnimationTextEvent : MsgBase
    {
        [RTTI.Member(1, 0x10)] public AnimationEventID EventID;
        [RTTI.Member(0, 0x18)] public String EventText;
        [RTTI.Member(2, 0x20)] public bool IsDurationEvent;
        [RTTI.Member(3, 0x21)] public bool IsStarted;
    }

    [RTTI.Serializable(0x83DD78D1981257BA, GameType.DS)]
    public class MsgAnyObjectChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x62D31630EFF846C8, GameType.DS)]
    public class MsgApplyWeaponSettings : MsgBase
    {
    }

    [RTTI.Serializable(0x600F16101640CEE5, GameType.DS)]
    public class MsgArcComplete : MsgBase
    {
        [RTTI.Member(0, 0x10)] public WorldPosition To;
        [RTTI.Member(1, 0x28)] public WorldPosition From;
        [RTTI.Member(2, 0x40)] public WorldPosition Current;
        [RTTI.Member(3, 0x58)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x5C)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x60)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0xE7FC3387C5A18, GameType.DS)]
    public class MsgArcHit : MsgBase
    {
        [RTTI.Member(6, 0x0, true)] public CPtr<Entity> HitEntity;
        [RTTI.Member(0, 0x10)] public WorldPosition To;
        [RTTI.Member(1, 0x28)] public WorldPosition From;
        [RTTI.Member(2, 0x40)] public WorldPosition Current;
        [RTTI.Member(3, 0x58)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x5C)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x60)] public EArcTargetType CurrentType;
        [RTTI.Member(7, 0x80)] public WorldPosition Position;
        [RTTI.Member(8, 0xA0)] public Vec3 Normal;
    }

    [RTTI.Serializable(0x127544289A69B3A1, GameType.DS)]
    public class MsgArcJump : MsgBase
    {
        [RTTI.Member(0, 0x10)] public WorldPosition To;
        [RTTI.Member(1, 0x28)] public WorldPosition From;
        [RTTI.Member(2, 0x40)] public WorldPosition Current;
        [RTTI.Member(3, 0x58)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x5C)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x60)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0x48E7A0733DA06C9F, GameType.DS)]
    public class MsgArcStart : MsgBase
    {
        [RTTI.Member(0, 0x10)] public WorldPosition To;
        [RTTI.Member(1, 0x28)] public WorldPosition From;
        [RTTI.Member(2, 0x40)] public WorldPosition Current;
        [RTTI.Member(3, 0x58)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x5C)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x60)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0xB3EE3E2F36242232, GameType.DS)]
    public class MsgArcUpdate : MsgBase
    {
        [RTTI.Member(0, 0x10)] public WorldPosition To;
        [RTTI.Member(1, 0x28)] public WorldPosition From;
        [RTTI.Member(2, 0x40)] public WorldPosition Current;
        [RTTI.Member(3, 0x58)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x5C)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x60)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0xE12454907E886231, GameType.DS)]
    public class MsgArtPartsChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x1E693DAE22EB01D2, GameType.DS)]
    public class MsgArtPartsWillChange : MsgBase
    {
    }

    [RTTI.Serializable(0x7E0BCB7934EB3A69, GameType.DS)]
    public class MsgAssignedToInventory : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x283021EB44EFF4A6, GameType.DS)]
    public class MsgAttachToEntity : MsgBase
    {
    }

    [RTTI.Serializable(0xDDD72656E84C33F, GameType.DS)]
    public class MsgAttachedToSequenceNetwork : MsgBase
    {
    }

    [RTTI.Serializable(0x8381E39F78B95495, GameType.DS)]
    public class MsgAudioLogStartedPlaying : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x40)] public UUIDRef<SentenceGroupResource> SentenceGroup;
    }

    [RTTI.Serializable(0x7081AAD89774F43A, GameType.DS)]
    public class MsgAudioLogStoppedPlaying : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x40)] public UUIDRef<SentenceGroupResource> SentenceGroup;
        [RTTI.Member(2, 0x50)] public bool Aborted;
    }

    [RTTI.Serializable(0xAEA5BC26657CFDE5, GameType.DS)]
    public class MsgAutoWieldNextItemFailed : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x116B2103729512A8, GameType.DS)]
    public class MsgBaggagePickedByPlayer : MsgBase
    {
    }

    [RTTI.Serializable(0x4365D2FC747FA5C3, GameType.DS)]
    public class MsgBase : RTTIObject
    {
    }

    [RTTI.Serializable(0x662DF43967EC0694, GameType.DS)]
    public class MsgBecameCurrentItem : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x116E2372E69EE7BF, GameType.DS)]
    public class MsgBodyVariantChanged : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<BodyVariant> BodyVariant;
    }

    [RTTI.Serializable(0x6620E8FFA3F188CB, GameType.DS)]
    public class MsgBooleanFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(1, 0x20)] public CPtr<BooleanFact> Fact;
        [RTTI.Member(2, 0x28)] public bool Value;
    }

    [RTTI.Serializable(0x47E71AE4A99091A3, GameType.DS)]
    public class MsgBoundToSequence : MsgBase
    {
    }

    [RTTI.Serializable(0x4F49B0E233D11DFC, GameType.DS)]
    public class MsgBuildMeshHierarchy : MsgBase
    {
    }

    [RTTI.Serializable(0x49D60EA9C6059277, GameType.DS)]
    public class MsgCameraActorActivate : MsgCameraActorUpdate
    {
    }

    [RTTI.Serializable(0x5F0B903E85F204C1, GameType.DS)]
    public class MsgCameraActorDeactivate : MsgCameraActorActivate
    {
    }

    [RTTI.Serializable(0xFA06DF13375F5D08, GameType.DS)]
    public class MsgCameraActorUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xAC87BF054A30AC16, GameType.DS)]
    public class MsgCanBeResurrected : MsgBase
    {
    }

    [RTTI.Serializable(0xA2DB8B4BD2B3805B, GameType.DS)]
    public class MsgCanExpressGesture : MsgBase
    {
    }

    [RTTI.Serializable(0xED23452BFF50AF5F, GameType.DS)]
    public class MsgCanExpressSignal : MsgSignalBase
    {
    }

    [RTTI.Serializable(0xC15E715133916B43, GameType.DS)]
    public class MsgCanExpressTalk : MsgBase
    {
    }

    [RTTI.Serializable(0x910CD82CA7C99BB4, GameType.DS)]
    public class MsgCanMelee : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xBA3C3D8882629AD4, GameType.DS)]
    public class MsgCanReceiveDamage : MsgBase
    {
    }

    [RTTI.Serializable(0xF9AED8E768D1085E, GameType.DS)]
    public class MsgCanRequestMeleeAttack : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x86E7D3A468890928, GameType.DS)]
    public class MsgCanSetCameraVisibility : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x2CB57F757DD717E, GameType.DS)]
    public class MsgCanShowPopup : MsgBase
    {
    }

    [RTTI.Serializable(0x40AD08CD082930DE, GameType.DS)]
    public class MsgCanShowTracker : MsgBase
    {
    }

    [RTTI.Serializable(0xEE06B4A596A0DF20, GameType.DS)]
    public class MsgCartActiveControl : MsgBase
    {
    }

    [RTTI.Serializable(0xE88A8F43A40A4297, GameType.DS)]
    public class MsgChildEntityAdded : MsgBase
    {
    }

    [RTTI.Serializable(0x70693737426E6FF1, GameType.DS)]
    public class MsgClampMeleeDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x1BA566339CF20F50, GameType.DS)]
    public class MsgCollectStreamingHandleGroupData : MsgBase
    {
    }

    [RTTI.Serializable(0x19657199C9328A2E, GameType.DS)]
    public class MsgCombatHonorUnlocked : MsgBase
    {
        [RTTI.Member(0, 0x10)] public String RewardName;
    }

    [RTTI.Serializable(0x47909C5D9A0DBDDF, GameType.DS)]
    public class MsgConditionChanged : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x40)] public UUIDRef<ConditionResource> ConditionResource;
        [RTTI.Member(2, 0x50)] public bool Value;
    }

    [RTTI.Serializable(0xB0092B649C408613, GameType.DS)]
    public class MsgConstructionCommand : MsgBase
    {
    }

    [RTTI.Serializable(0xC4BD5872F03C7051, GameType.DS)]
    public class MsgConstructionLevelUp : MsgBase
    {
    }

    [RTTI.Serializable(0xC95C34981AFA8C67, GameType.DS)]
    public class MsgContactPoint : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Collider;
    }

    [RTTI.Serializable(0x90F726CAE205563B, GameType.DS)]
    public class MsgContactPointAdded : MsgContactPoint
    {
        [RTTI.Member(1, 0x40, true)] public WorldPosition Position;
        [RTTI.Member(2, 0x60, true)] public Vec3 Normal;
        [RTTI.Member(3, 0x70, true)] public float Distance;
        [RTTI.Member(4, 0xC0, true)] public float ProjectedVelocity;
        [RTTI.Member(5, 0xD0, true)] public Vec3 RelativeVelocity;
        [RTTI.Member(6, 0xE0, true)] public Vec3 RelativeAngularVelocity;
        [RTTI.Member(7, 0xF0, true)] public CPtr<MaterialTypeResource> MaterialTypeResourceA;
        [RTTI.Member(8, 0xF8, true)] public CPtr<MaterialTypeResource> MaterialTypeResourceB;
    }

    [RTTI.Serializable(0x34F6C334F7E5FD85, GameType.DS)]
    public class MsgContactPointProcess : MsgContactPoint
    {
    }

    [RTTI.Serializable(0x3D5BBD71C05E0A50, GameType.DS)]
    public class MsgContactPointRemoved : MsgContactPoint
    {
    }

    [RTTI.Serializable(0x89E1BB03E71E3F3C, GameType.DS)]
    public class MsgContactPointValidate : MsgBase
    {
    }

    [RTTI.Serializable(0x2F2D6F8C7B471EDC, GameType.DS)]
    public class MsgCountdownTimer : MsgScene
    {
        [RTTI.Member(0, 0x18)] public CPtr<CountdownTimer> Timer;
    }

    [RTTI.Serializable(0xC1431C4EC6B0B071, GameType.DS)]
    public class MsgCountdownTimerLapsed : MsgCountdownTimer
    {
    }

    [RTTI.Serializable(0xA868CA7CAB1056F9, GameType.DS)]
    public class MsgCountdownTimerPaused : MsgCountdownTimer
    {
    }

    [RTTI.Serializable(0x53755E3F850AC014, GameType.DS)]
    public class MsgCountdownTimerStarted : MsgCountdownTimer
    {
    }

    [RTTI.Serializable(0xE5B9DF09197EA7BA, GameType.DS)]
    public class MsgCoverAndAnimModelModifyAnimatedPose : MsgBase
    {
    }

    [RTTI.Serializable(0x27FC2308AE4F9BB, GameType.DS)]
    public class MsgCrafted : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<CraftingRecipe> Recipe;
        [RTTI.Member(1, 0x18)] public int Amount;
        [RTTI.Member(2, 0x1C)] public bool Succeeded;
    }

    [RTTI.Serializable(0x2C35514E4873C205, GameType.DS)]
    public class MsgCreateCollisionVolume : MsgBase
    {
    }

    [RTTI.Serializable(0xDC11541A901B2393, GameType.DS)]
    public class MsgCreateComponent : MsgBase
    {
        [RTTI.Member(0, 0x10)] public Ref<EntityComponentResource> Resource;
    }

    [RTTI.Serializable(0xCC7AD2EE9F48FACC, GameType.DS)]
    public class MsgCustomBase : MsgBase
    {
    }

    [RTTI.Serializable(0xD93232A2A4E2316D, GameType.DS)]
    public class MsgCustomBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x528AAA3D0B26AC3F, GameType.DS)]
    public class MsgDSAIActive : MsgBase
    {
    }

    [RTTI.Serializable(0xDD87C90D81D484EB, GameType.DS)]
    public class MsgDSAISuspend : MsgBase
    {
    }

    [RTTI.Serializable(0xC0C6229CD91AB274, GameType.DS)]
    public class MsgDSAddKnowledgeLostWarrior : MsgBase
    {
    }

    [RTTI.Serializable(0xE4F6810357DF1FDB, GameType.DS)]
    public class MsgDSAttachableObjectRemove : MsgBase
    {
    }

    [RTTI.Serializable(0xF5E1A214D4B3CC29, GameType.DS)]
    public class MsgDSBaggage2SetWorldTransform : MsgBase
    {
    }

    [RTTI.Serializable(0x370B55EEBAB35F78, GameType.DS)]
    public class MsgDSBolagunTargetCheck : MsgBase
    {
    }

    [RTTI.Serializable(0x9055230EE7CA89C7, GameType.DS)]
    public class MsgDSCarriableUpdateOffset : MsgBase
    {
    }

    [RTTI.Serializable(0xF2DE3530130404D6, GameType.DS)]
    public class MsgDSCheckAIActive : MsgBase
    {
    }

    [RTTI.Serializable(0x2EAEB764DBA64ED2, GameType.DS)]
    public class MsgDSCountTimerNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public Ref<DSCountTimerBase> DSCountTimerBase;
        [RTTI.Member(1, 0x20)] public EMsgSceneDSCountTimerMessageType MessageType;
    }

    [RTTI.Serializable(0xB36A2732CC180972, GameType.DS)]
    public class MsgDSDamageCaused : MsgBase
    {
    }

    [RTTI.Serializable(0xCCFCB27B9FC4DC7, GameType.DS)]
    public class MsgDSEntityActiveRequest : MsgBase
    {
    }

    [RTTI.Serializable(0xEB179ADEC611F843, GameType.DS)]
    public class MsgDSForgetKnowledge : MsgBase
    {
    }

    [RTTI.Serializable(0xD6CD911AFF81715, GameType.DS)]
    public class MsgDSGameActorSetMarker : MsgBase
    {
    }

    [RTTI.Serializable(0x2F68743063F2F727, GameType.DS)]
    public class MsgDSGetAimTarget : MsgBase
    {
    }

    [RTTI.Serializable(0x35DDAF36A16C03C0, GameType.DS)]
    public class MsgDSGetGameActorTransformInfo : MsgBase
    {
    }

    [RTTI.Serializable(0x4F35013BC415D0CD, GameType.DS)]
    public class MsgDSGetKnowledge : MsgBase
    {
    }

    [RTTI.Serializable(0xED2ABFDBE8B0D01D, GameType.DS)]
    public class MsgDSGetPatrolPath : MsgBase
    {
    }

    [RTTI.Serializable(0xEE452B9E58388C27, GameType.DS)]
    public class MsgDSHideWeapon : MsgBase
    {
    }

    [RTTI.Serializable(0x1EDE45576537B072, GameType.DS)]
    public class MsgDSHiggsTarryDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x43E6A6773451D0B0, GameType.DS)]
    public class MsgDSIsNoticeAndKnowlegeRequested : MsgBase
    {
    }

    [RTTI.Serializable(0xBDF072B9E50275E3, GameType.DS)]
    public class MsgDSIsPhotoModeCollision : MsgBase
    {
    }

    [RTTI.Serializable(0xC5424E3490C21E8, GameType.DS)]
    public class MsgDSIsValidBloodDamage : MsgBase
    {
    }

    [RTTI.Serializable(0xD0EBADB7030E149C, GameType.DS)]
    public class MsgDSMoveTo : MsgBase
    {
    }

    [RTTI.Serializable(0x2428701514E5D4B0, GameType.DS)]
    public class MsgDSMuleAttack : MsgBase
    {
    }

    [RTTI.Serializable(0xE86676134E00200B, GameType.DS)]
    public class MsgDSMuleCancelAttack : MsgBase
    {
    }

    [RTTI.Serializable(0x8B2317CF3E1F0732, GameType.DS)]
    public class MsgDSMuleContinueAttack : MsgDSMuleAttack
    {
    }

    [RTTI.Serializable(0x741B1916D08AE99F, GameType.DS)]
    public class MsgDSMuleRegistCP : MsgBase
    {
    }

    [RTTI.Serializable(0xB0B3AD6DB99E6002, GameType.DS)]
    public class MsgDSNpcVoiceEvent : MsgBase
    {
    }

    [RTTI.Serializable(0x4D62985B5A23F56D, GameType.DS)]
    public class MsgDSPatrolPathNodeAction : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x18)] public Ref<DSPatrolPathNodeAction> NodeAction;
    }

    [RTTI.Serializable(0xA5E9A91872FA8486, GameType.DS)]
    public class MsgDSPhotoModeModelOpacityGetOpacity : MsgBase
    {
    }

    [RTTI.Serializable(0x5F78957ED7A5B58A, GameType.DS)]
    public class MsgDSPickUp : MsgBase
    {
    }

    [RTTI.Serializable(0x6F2563B604027E94, GameType.DS)]
    public class MsgDSPlayFacialAnimation : MsgPlayFacialAnimation
    {
    }

    [RTTI.Serializable(0x99E9D94F533B55E5, GameType.DS)]
    public class MsgDSPlayerFloating : MsgBase
    {
    }

    [RTTI.Serializable(0xB28277EC2F931057, GameType.DS)]
    public class MsgDSPutDown : MsgBase
    {
    }

    [RTTI.Serializable(0x96DDC882C76813E4, GameType.DS)]
    public class MsgDSQueryMoverDebugSettings : MsgBase
    {
    }

    [RTTI.Serializable(0xF12193930906BD36, GameType.DS)]
    public class MsgDSRoadTracking : MsgBase
    {
    }

    [RTTI.Serializable(0x29B02A2AA4867092, GameType.DS)]
    public class MsgDSSceneCustom : MsgScene
    {
        [RTTI.Member(0, 0x18)] public CPtr<Scene> Sender;
        [RTTI.Member(1, 0x20)] public String ID;
        [RTTI.Member(2, 0x28)] public uint32 Hash;
        [RTTI.Member(3, 0x2C)] public int Integer01;
        [RTTI.Member(4, 0x30)] public int Integer02;
    }

    [RTTI.Serializable(0x2BE562EF36158698, GameType.DS)]
    public class MsgDSSetKnowledge : MsgBase
    {
    }

    [RTTI.Serializable(0x8BD3A3BCF165328B, GameType.DS)]
    public class MsgDSSetPatrolPath : MsgBase
    {
    }

    [RTTI.Serializable(0x1EFC502A3715356B, GameType.DS)]
    public class MsgDSSharedGimmickTrigger : MsgBase
    {
    }

    [RTTI.Serializable(0x5246D82404CDF57C, GameType.DS)]
    public class MsgDSSharedWarriorsNotice : MsgBase
    {
    }

    [RTTI.Serializable(0x64C7C34BA5051F6, GameType.DS)]
    public class MsgDSStartTalk : MsgBase
    {
    }

    [RTTI.Serializable(0xC66B655D1D34651F, GameType.DS)]
    public class MsgDSSummonedWarrior : MsgBase
    {
    }

    [RTTI.Serializable(0x848CD2C17AB99D1D, GameType.DS)]
    public class MsgDSTurtorialSurveyWaterRed : MsgScene
    {
    }

    [RTTI.Serializable(0x65C9FD81DD47AF6D, GameType.DS)]
    public class MsgDSUpdateBgm : MsgBase
    {
    }

    [RTTI.Serializable(0x5545E9E93AAD5D24, GameType.DS)]
    public class MsgDSVoiceTriggerEvent : MsgBase
    {
        [RTTI.Member(0, 0x10)] public int SoundEventIndex;
    }

    [RTTI.Serializable(0xC7FA2537FCAB8B5C, GameType.DS)]
    public class MsgDSWeaponHitResult : MsgBase
    {
    }

    [RTTI.Serializable(0xD693CD2D0BD152F5, GameType.DS)]
    public class MsgDamage : MsgScene
    {
        [RTTI.Member(12, 0x0, true)] public CPtr<AttackEventLink> AttackEvent;
        [RTTI.Member(6, 0x0, true)] public CPtr<Entity> InstigatorEntity;
        [RTTI.Member(8, 0x0, true)] public WorldPosition Position;
        [RTTI.Member(10, 0x0, true)] public CPtr<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(13, 0x0, true)] public CPtr<Entity> Victim;
        [RTTI.Member(7, 0x0, true)] public CPtr<InstigatorData> Instigator;
        [RTTI.Member(0, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(5, 0x0, true)] public CPtr<Player> InstigatorPlayer;
        [RTTI.Member(1, 0x0, true)] public float CoreAmount;
        [RTTI.Member(4, 0x0, true)] public CPtr<Entity> Damager;
        [RTTI.Member(2, 0x30, true)] public Vec3 Impulse;
        [RTTI.Member(3, 0x44, true)] public float ImpactSeverity;
        [RTTI.Member(9, 0x70, true)] public Vec3 Normal;
        [RTTI.Member(11, 0x88, true)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0x6309E3D5BD0D39A, GameType.DS)]
    public class MsgDamageCaused : MsgBase
    {
        [RTTI.Member(8, 0x0, true)] public CPtr<Entity> Receiver;
        [RTTI.Member(9, 0x0, true)] public CPtr<AttackEventLink> AttackEvent;
        [RTTI.Member(6, 0x0)] public EDamageFlags DamageFlags;
        [RTTI.Member(0, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x40)] public Vec3 ImpactImpulse;
        [RTTI.Member(2, 0x50)] public float ImpactImpulseHumanoidFactor;
        [RTTI.Member(3, 0x54)] public float ImpactSeverity;
        [RTTI.Member(4, 0x80)] public Vec3 Normal;
        [RTTI.Member(5, 0x98)] public int ModelPartIndex;
        [RTTI.Member(7, 0xE0)] public float DamageDone;
    }

    [RTTI.Serializable(0xD2EE350056F9ACD2, GameType.DS)]
    public class MsgDamageCausedReport : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public float DamageDone;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> Receiver;
    }

    [RTTI.Serializable(0x6191F5CF5DE7A245, GameType.DS)]
    public class MsgDamageReceivedThisFrame : MsgBase
    {
        [RTTI.Member(0, 0x10, true)] public float DamageReceived;
    }

    [RTTI.Serializable(0x8CE378143B71F880, GameType.DS)]
    public class MsgDeconstructPlacedEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x6F4BE6DD48EB0F67, GameType.DS)]
    public class MsgDestroyCollisionVolume : MsgBase
    {
    }

    [RTTI.Serializable(0xDE708EC64A75162B, GameType.DS)]
    public class MsgDestructibilityPartHealthChanged : MsgBase
    {
        [RTTI.Member(0, 0x10)] public int ModelPartIndex;
        [RTTI.Member(1, 0x14)] public float OldHealth;
        [RTTI.Member(2, 0x18)] public float NewHealth;
    }

    [RTTI.Serializable(0xDD9CFE809A403C0D, GameType.DS)]
    public class MsgDestructibilityPartHit : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x40)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0xFF914232B873E1CB, GameType.DS)]
    public class MsgDestructibilityPartTransition : MsgBase
    {
        [RTTI.Member(0, 0xC0)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0xF10CC90F8C26F58A, GameType.DS)]
    public class MsgDetachFromEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x7BCDB733C1483018, GameType.DS)]
    public class MsgDetachedFromSequenceNetwork : MsgBase
    {
    }

    [RTTI.Serializable(0xBC00C0ABDBDCF08F, GameType.DS)]
    public class MsgDisableModelPartCollision : MsgBase
    {
    }

    [RTTI.Serializable(0x73B22D483E278254, GameType.DS)]
    public class MsgDisablePathObject : MsgBase
    {
    }

    [RTTI.Serializable(0x3A0FB45BEE4B04A4, GameType.DS)]
    public class MsgDiscoverableAreaInstanceAdded : MsgBase
    {
    }

    [RTTI.Serializable(0xCEBC84CA1613BEFB, GameType.DS)]
    public class MsgDiscoverableAreaInstanceRemoved : MsgBase
    {
    }

    [RTTI.Serializable(0xBE0AEBA6A1518F30, GameType.DS)]
    public class MsgDismount : MsgBase
    {
    }

    [RTTI.Serializable(0x24B8260FCBADC2D0, GameType.DS)]
    public class MsgDodgeStarted : MsgBase
    {
    }

    [RTTI.Serializable(0x883D24591759E28D, GameType.DS)]
    public class MsgDropped : MsgInventoryBaseScene
    {
    }

    [RTTI.Serializable(0x42C3805B4370CC93, GameType.DS)]
    public class MsgDsActivateTile : MsgBase
    {
    }

    [RTTI.Serializable(0x798F952E334C7BBD, GameType.DS)]
    public class MsgDsAiAction : MsgBase
    {
    }

    [RTTI.Serializable(0xBA847A0A8E08B6B4, GameType.DS)]
    public class MsgDsAiActionCheckPriority : MsgBase
    {
    }

    [RTTI.Serializable(0x402FB370E1F09074, GameType.DS)]
    public class MsgDsAiActionInterruptHighPriorityAction : MsgBase
    {
    }

    [RTTI.Serializable(0xE243EFCD320605C5, GameType.DS)]
    public class MsgDsAntiGravityActivation : MsgBase
    {
    }

    [RTTI.Serializable(0xB91D6695811BA4AA, GameType.DS)]
    public class MsgDsConstructionEvent : MsgBase
    {
        [RTTI.Member(0, 0x10)] public int32 TerminalId;
        [RTTI.Member(1, 0x18)] public WorldTransform WorldTransform;
        [RTTI.Member(2, 0x58)] public uint32 EventNameHash;
        [RTTI.Member(3, 0x60)] public Vec3 VectorParameter;
        [RTTI.Member(4, 0x70)] public int32 ExternalValue;
    }

    [RTTI.Serializable(0x40A5809B0FF9A19, GameType.DS)]
    public class MsgDsNotify : MsgBase
    {
    }

    [RTTI.Serializable(0xF4E6649BC91579FF, GameType.DS)]
    public class MsgDsNotifyFromPlayer : MsgDsNotify
    {
    }

    [RTTI.Serializable(0x2BAE4E329E4E28EB, GameType.DS)]
    public class MsgDsSharedNotice : MsgBase
    {
    }

    [RTTI.Serializable(0xEF6CAE17648118FA, GameType.DS)]
    public class MsgDsSharedVehicleNotice : MsgDsSharedNotice
    {
    }

    [RTTI.Serializable(0xC896133F1742F4B1, GameType.DS)]
    public class MsgEnableAttachedLights : MsgBase
    {
    }

    [RTTI.Serializable(0xD8984CAFACED251, GameType.DS)]
    public class MsgEnableKeepUp : MsgBase
    {
    }

    [RTTI.Serializable(0x38A9EA7ED1FD000F, GameType.DS)]
    public class MsgEnableModelPart : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Model> Model;
        [RTTI.Member(1, 0x28, true)] public int ModelPartIndex;
        [RTTI.Member(2, 0x2C, true)] public bool Enabled;
    }

    [RTTI.Serializable(0x9C1F105808B87D9, GameType.DS)]
    public class MsgEnableModelPartCollision : MsgBase
    {
    }

    [RTTI.Serializable(0x2F251040CA580E43, GameType.DS)]
    public class MsgEnablePathObject : MsgBase
    {
    }

    [RTTI.Serializable(0xB26972637F85B5B3, GameType.DS)]
    public class MsgEndSetupWhenContinueGame : MsgScene
    {
        [RTTI.Member(0, 0x18)] public ESaveGameRestoreReason RestoreReason;
    }

    [RTTI.Serializable(0x4A7EAB29D5091794, GameType.DS)]
    public class MsgEndUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0x1F6C7899BB8F555D, GameType.DS)]
    public class MsgEntityActivationPolicyChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x406A46319D7B7836, GameType.DS)]
    public class MsgEntityAddedToScene : MsgSceneEntityBase
    {
        [RTTI.Member(2, 0x0, true)] public bool EntityWasSpawned;
        [RTTI.Member(1, 0x40)] public CPtr<WorldNode> Source;
    }

    [RTTI.Serializable(0x94CB09C34770E7A5, GameType.DS)]
    public class MsgEntityAttachedToSequenceNetwork : MsgBase
    {
    }

    [RTTI.Serializable(0x2D05EA2130704624, GameType.DS)]
    public class MsgEntityDetachedFromSequenceNetwork : MsgBase
    {
    }

    [RTTI.Serializable(0x7D1BBA432A9E8FB6, GameType.DS)]
    public class MsgEntityDie : MsgSceneEntityBase
    {
        [RTTI.Member(9, 0x0, true)] public CPtr<EntityResource> WeaponResource;
        [RTTI.Member(8, 0x0, true)] public CPtr<InstigatorData> Instigator;
        [RTTI.Member(7, 0x0, true)] public CPtr<Entity> InstigatorEntity;
        [RTTI.Member(10, 0x0, true)] public WorldPosition Position;
        [RTTI.Member(11, 0x0, true)] public Vec3 Normal;
        [RTTI.Member(13, 0x0, true)] public int ModelPartIndex;
        [RTTI.Member(12, 0x0, true)] public CPtr<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(5, 0x0, true)] public CPtr<Entity> Damager;
        [RTTI.Member(1, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(2, 0x0, true)] public float CoreAmount;
        [RTTI.Member(4, 0x0, true)] public float ImpactSeverity;
        [RTTI.Member(14, 0x0, true)] public CPtr<AttackEventLink> AttackEvent;
        [RTTI.Member(6, 0x0, true)] public CPtr<Player> InstigatorPlayer;
        [RTTI.Member(3, 0x0, true)] public Vec3 Impulse;
    }

    [RTTI.Serializable(0xDFE3C6EAF5A2D13D, GameType.DS)]
    public class MsgEntityEjected : MsgWeaponModeBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> EntityProjectile;
    }

    [RTTI.Serializable(0x39FD18843D085070, GameType.DS)]
    public class MsgEntityEnterState : MsgStateMachineEnterState
    {
    }

    [RTTI.Serializable(0x17AAC9F270797304, GameType.DS)]
    public class MsgEntityInit : MsgBase
    {
        [RTTI.Member(0, 0x0)] public bool IsInitMode;
    }

    [RTTI.Serializable(0x544584E18BAD2023, GameType.DS)]
    public class MsgEntityKilled : MsgBase
    {
        [RTTI.Member(8, 0x0, true)] public CPtr<AttackEventLink> AttackEvent;
        [RTTI.Member(7, 0x0, true)] public CPtr<Entity> KilledEntity;
        [RTTI.Member(6, 0x0)] public EDamageFlags DamageFlags;
        [RTTI.Member(0, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x20)] public Vec3 ImpactImpulse;
        [RTTI.Member(2, 0x30)] public float ImpactImpulseHumanoidFactor;
        [RTTI.Member(3, 0x34)] public float ImpactSeverity;
        [RTTI.Member(4, 0x60)] public Vec3 Normal;
        [RTTI.Member(5, 0x78)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0x4198348FE2F4BF90, GameType.DS)]
    public class MsgEntityLeaveState : MsgStateMachineLeaveState
    {
    }

    [RTTI.Serializable(0x6B7E174A45FB29B5, GameType.DS)]
    public class MsgEntityLive : MsgBase
    {
    }

    [RTTI.Serializable(0x15E6A3921B23A4DD, GameType.DS)]
    public class MsgEntityOwnershipChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x74742F5DBD42F4E4, GameType.DS)]
    public class MsgEntityPlaced : MsgBase
    {
    }

    [RTTI.Serializable(0x1FAA2D7CCA9052BA, GameType.DS)]
    public class MsgEntityPostUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xE27E54B50C03BE63, GameType.DS)]
    public class MsgEntityPreUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x4469B9AE6412816, GameType.DS)]
    public class MsgEntityRemovedFromScene : MsgSceneEntityBase
    {
    }

    [RTTI.Serializable(0x7ECE5C4AB9FA86EA, GameType.DS)]
    public class MsgEntityRepTeleported : MsgBase
    {
    }

    [RTTI.Serializable(0xABF46CB647087657, GameType.DS)]
    public class MsgEntityRepUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xE16D3887B6686FD4, GameType.DS)]
    public class MsgEntityRepUpdateVisualBounds : MsgBase
    {
    }

    [RTTI.Serializable(0xC66B9B290E31C90C, GameType.DS)]
    public class MsgEntityReplacedWithImpostor : MsgBase
    {
    }

    [RTTI.Serializable(0x6EEC5A63A2B048CD, GameType.DS)]
    public class MsgEntityRestoredFromImpostor : MsgBase
    {
    }

    [RTTI.Serializable(0x9FC2395B381686EB, GameType.DS)]
    public class MsgEntitySleep : MsgBase
    {
    }

    [RTTI.Serializable(0x551F8A8DD70F9CF, GameType.DS)]
    public class MsgEntitySpawnCanceled : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<SpawnpointBase> Spawnpoint;
    }

    [RTTI.Serializable(0xB8C345EE36B5B12E, GameType.DS)]
    public class MsgEntitySpawnedPreCustomization : MsgSceneEntityBase
    {
    }

    [RTTI.Serializable(0x8B429EE1A3CFFB26, GameType.DS)]
    public class MsgEntitySpotted : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> SpottedEntity;
        [RTTI.Member(1, 0x28)] public UUIDRef<SpottableComponentResource> SpottableComponentResource;
    }

    [RTTI.Serializable(0x81011C028683F42B, GameType.DS)]
    public class MsgEntityStartSkippingUpdates : MsgBase
    {
    }

    [RTTI.Serializable(0xB2CDA2E3032CB1F2, GameType.DS)]
    public class MsgEntityStartSpawning : MsgBase
    {
    }

    [RTTI.Serializable(0xF0F7AC9C1846F02B, GameType.DS)]
    public class MsgEntityStopSkippingUpdates : MsgBase
    {
    }

    [RTTI.Serializable(0xFD4CAE9592824D5B, GameType.DS)]
    public class MsgEntityStuckTo : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> StickerEntity;
        [RTTI.Member(1, 0x18)] public CPtr<MaterialTypeResource> MaterialTypeResource;
    }

    [RTTI.Serializable(0xC342B957572E3EC1, GameType.DS)]
    public class MsgEntityTeleported : MsgBase
    {
    }

    [RTTI.Serializable(0x43CEB43B053F0E1B, GameType.DS)]
    public class MsgEntityUpdate : MsgBase
    {
        [RTTI.Member(0, 0x1C)] public float DeltaTime;
    }

    [RTTI.Serializable(0x57562BE2BA4A4D18, GameType.DS)]
    public class MsgEntityUpdateFrequencyChange : MsgBase
    {
    }

    [RTTI.Serializable(0xC6DEA60135670818, GameType.DS)]
    public class MsgEntityUpdateVisualBounds : MsgBase
    {
    }

    [RTTI.Serializable(0x5616E26F0E7E7327, GameType.DS)]
    public class MsgEntityVisualBoundsChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x9116B0ABF48EC781, GameType.DS)]
    public class MsgEntityWake : MsgBase
    {
    }

    [RTTI.Serializable(0x2249A2324D7A7838, GameType.DS)]
    public class MsgEnumFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(1, 0x20)] public CPtr<EnumFact> Fact;
        [RTTI.Member(2, 0x28)] public GGUUID Value;
    }

    [RTTI.Serializable(0x46BB0C09409E3E37, GameType.DS)]
    public class MsgEquipped : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0xF4494186422ADEC7, GameType.DS)]
    public class MsgEstimateTimeOfDeath : MsgBase
    {
    }

    [RTTI.Serializable(0x1E81495FC8FAD500, GameType.DS)]
    public class MsgExpressSignal : MsgSignalBase
    {
    }

    [RTTI.Serializable(0x296F06F8F1C1DF13, GameType.DS)]
    public class MsgExternalAnimationRootBoneCalculated : MsgBase
    {
    }

    [RTTI.Serializable(0xD29991D717CB9541, GameType.DS)]
    public class MsgFactChangedBase : MsgBase
    {
        [RTTI.Member(0, 0x10)] public GGUUID Context;
    }

    [RTTI.Serializable(0xE6C0B700C6CA1A09, GameType.DS)]
    public class MsgFactionChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x3B3AAD13C575EAFC, GameType.DS)]
    public class MsgFinishedLooting : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x40)] public bool IsEmpty;
    }

    [RTTI.Serializable(0xA91E3157FFB0459D, GameType.DS)]
    public class MsgFinishedStow : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0xD35B06B101038859, GameType.DS)]
    public class MsgFinishedWield : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0xCAA13B4D37D0FA7, GameType.DS)]
    public class MsgFireFixedGun : MsgBase
    {
    }

    [RTTI.Serializable(0xF97B52258BE89B55, GameType.DS)]
    public class MsgFlinched : MsgBase
    {
    }

    [RTTI.Serializable(0x1A01519921DBBD24, GameType.DS)]
    public class MsgFloatFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(1, 0x20)] public CPtr<FloatFact> Fact;
        [RTTI.Member(2, 0x28)] public float Value;
    }

    [RTTI.Serializable(0x30F07CB60F5AF8A2, GameType.DS)]
    public class MsgFocusAlertSignalScanned : MsgScene
    {
        [RTTI.Member(0, 0x18)] public CPtr<FocusAlertSignal> FocusAlertSignal;
        [RTTI.Member(1, 0x20)] public bool FirstTime;
    }

    [RTTI.Serializable(0xD8C457111C9063EC, GameType.DS)]
    public class MsgFocusCollisionTriggerUpdatesRequired : MsgBase
    {
    }

    [RTTI.Serializable(0xC34697FA60D07CA4, GameType.DS)]
    public class MsgFocusHasAlertSignal : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x30)] public bool HasAlertSignal;
    }

    [RTTI.Serializable(0x6411A7E8941D7D2F, GameType.DS)]
    public class MsgFocusModeActivated : MsgBase
    {
    }

    [RTTI.Serializable(0xA43135936DA4236A, GameType.DS)]
    public class MsgFocusModeDeactivated : MsgBase
    {
    }

    [RTTI.Serializable(0xCE32579AD427E04E, GameType.DS)]
    public class MsgFocusModeDeactivating : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool IsVantageFocusActivated;
    }

    [RTTI.Serializable(0xA574F28D4E38C00A, GameType.DS)]
    public class MsgFocusScanning : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x28)] public bool IsScanned;
        [RTTI.Member(2, 0x29)] public bool IsBeingScanned;
    }

    [RTTI.Serializable(0xE3BEABD07DF0C7E4, GameType.DS)]
    public class MsgFocusStartScanningPart : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x28)] public bool ModelPartIndex;
    }

    [RTTI.Serializable(0x2CBA716C28A3D558, GameType.DS)]
    public class MsgFocusTargetHighlighted : MsgBase
    {
    }

    [RTTI.Serializable(0x586ED3F0A5DF62B0, GameType.DS)]
    public class MsgFocusTargetIsBeingScanned : MsgScene
    {
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> ScanningEntity;
        [RTTI.Member(2, 0x48)] public bool IsBeingScanned;
    }

    [RTTI.Serializable(0x4B185F07F48D0B5B, GameType.DS)]
    public class MsgFocusTargetScanned : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x30)] public bool IsScanned;
    }

    [RTTI.Serializable(0x6E24E53443221231, GameType.DS)]
    public class MsgFocusTrackingPathFocused : MsgScene
    {
        [RTTI.Member(0, 0x18)] public CPtr<TrackingPath> TrackingPath;
        [RTTI.Member(1, 0x20)] public bool IsFocused;
    }

    [RTTI.Serializable(0x4D91013092F8455C, GameType.DS)]
    public class MsgFocusVantageActivated : MsgBase
    {
    }

    [RTTI.Serializable(0x4386401A08381DFD, GameType.DS)]
    public class MsgForceResetEntity : MsgBase
    {
    }

    [RTTI.Serializable(0xEA42F5B583499B6B, GameType.DS)]
    public class MsgForceResetGameActor : MsgForceResetEntity
    {
    }

    [RTTI.Serializable(0xD55B0F44A0DAD832, GameType.DS)]
    public class MsgGameActorChangeLOD : MsgBase
    {
    }

    [RTTI.Serializable(0xAFE9147B455C50E8, GameType.DS)]
    public class MsgGameActorLocatorChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x1C5856C6209509C8, GameType.DS)]
    public class MsgGameActorSequenceOccupied : MsgBase
    {
    }

    [RTTI.Serializable(0xD4561374D0DFE6FB, GameType.DS)]
    public class MsgGameActorSequenceRequired : MsgBase
    {
    }

    [RTTI.Serializable(0xDC5217CDB969645, GameType.DS)]
    public class MsgGameStatsDamageEntryProgressed : MsgBase
    {
    }

    [RTTI.Serializable(0x12999A4210A70C85, GameType.DS)]
    public class MsgGetAccuracyImprovements : MsgBase
    {
    }

    [RTTI.Serializable(0x2A6FC66B215DC282, GameType.DS)]
    public class MsgGetActiveModifications : MsgBase
    {
    }

    [RTTI.Serializable(0x66051ABB1F80AB1, GameType.DS)]
    public class MsgGetActiveWeaponAttackEvent : MsgBase
    {
    }

    [RTTI.Serializable(0xE01A786F579574FA, GameType.DS)]
    public class MsgGetAdditiveCameraRotation : MsgBase
    {
    }

    [RTTI.Serializable(0x3AF4FB62C05E1CCC, GameType.DS)]
    public class MsgGetAimAngleLimits : MsgBase
    {
    }

    [RTTI.Serializable(0xFADF53FF5B2830EB, GameType.DS)]
    public class MsgGetAimAssist : MsgBase
    {
    }

    [RTTI.Serializable(0x95EA70E86033A024, GameType.DS)]
    public class MsgGetAimFromPosition : MsgBase
    {
    }

    [RTTI.Serializable(0x30EBB574EC5B793D, GameType.DS)]
    public class MsgGetAimMagnetPosition : MsgBase
    {
    }

    [RTTI.Serializable(0xD57023BC1015D0CE, GameType.DS)]
    public class MsgGetAimParms : MsgBase
    {
    }

    [RTTI.Serializable(0x4671D72A3A51B97E, GameType.DS)]
    public class MsgGetAimTargetAndVelocity : MsgBase
    {
    }

    [RTTI.Serializable(0xACD55B944139040D, GameType.DS)]
    public class MsgGetAnimatedPose : MsgBase
    {
    }

    [RTTI.Serializable(0xBEE3EB852DA61A16, GameType.DS)]
    public class MsgGetAnimationSetTags : MsgBase
    {
    }

    [RTTI.Serializable(0xBEA71CE74B59D2CF, GameType.DS)]
    public class MsgGetArmor : MsgBase
    {
    }

    [RTTI.Serializable(0x8A0B025C52B7BC7C, GameType.DS)]
    public class MsgGetBaggagePerSlot : MsgBase
    {
    }

    [RTTI.Serializable(0x6231FC49C253D7C4, GameType.DS)]
    public class MsgGetBoolValue : MsgBase
    {
    }

    [RTTI.Serializable(0x82CBC9F303D234D5, GameType.DS)]
    public class MsgGetCenterLocation : MsgBase
    {
    }

    [RTTI.Serializable(0xE0A2564A7416C458, GameType.DS)]
    public class MsgGetCullInfo : MsgBase
    {
    }

    [RTTI.Serializable(0x10C92938357644A3, GameType.DS)]
    public class MsgGetDSPlayerSaveInfo : MsgBase
    {
    }

    [RTTI.Serializable(0x5AEEE618046FECAE, GameType.DS)]
    public class MsgGetDSPlayerSubspaceWorkInfo : MsgBase
    {
    }

    [RTTI.Serializable(0x659724D8064E4409, GameType.DS)]
    public class MsgGetDestinationRotation : MsgBase
    {
    }

    [RTTI.Serializable(0x197004B9E889BFB8, GameType.DS)]
    public class MsgGetDirectableAgent : MsgBase
    {
    }

    [RTTI.Serializable(0xEF115D820AF581E, GameType.DS)]
    public class MsgGetDisallowedNavMeshAreaTags : MsgBase
    {
    }

    [RTTI.Serializable(0xE0A9ED6406B6D09E, GameType.DS)]
    public class MsgGetDisguise : MsgBase
    {
    }

    [RTTI.Serializable(0x3041176970B77D48, GameType.DS)]
    public class MsgGetDisplayName : MsgBase
    {
    }

    [RTTI.Serializable(0xEC139FBB60C7E6EC, GameType.DS)]
    public class MsgGetEnergy : MsgBase
    {
    }

    [RTTI.Serializable(0x825CCFFB0F7DDAF7, GameType.DS)]
    public class MsgGetEntityMatrixProvider : MsgBase
    {
    }

    [RTTI.Serializable(0xFF5694B66FF908C8, GameType.DS)]
    public class MsgGetEntityRepMatrixProvider : MsgBase
    {
    }

    [RTTI.Serializable(0xA17D8832E9DFF064, GameType.DS)]
    public class MsgGetEntityRepTransformProvider : MsgBase
    {
    }

    [RTTI.Serializable(0xB465E058F248C39A, GameType.DS)]
    public class MsgGetEntityTransformProvider : MsgBase
    {
    }

    [RTTI.Serializable(0xC06E390EC6272097, GameType.DS)]
    public class MsgGetFloatValue : MsgBase
    {
    }

    [RTTI.Serializable(0xF96B9A365A199DF1, GameType.DS)]
    public class MsgGetFloorInfo : MsgBase
    {
    }

    [RTTI.Serializable(0x2440168F43A3468C, GameType.DS)]
    public class MsgGetFloorProbeClampDistances : MsgBase
    {
    }

    [RTTI.Serializable(0xC3178254DE71E012, GameType.DS)]
    public class MsgGetGameActorWorldTransform : MsgBase
    {
    }

    [RTTI.Serializable(0xACCBE19C5AA86351, GameType.DS)]
    public class MsgGetHUDCrosshairSettings : MsgBase
    {
    }

    [RTTI.Serializable(0x241B1C24AC764D3B, GameType.DS)]
    public class MsgGetInAirTargetAnnotationAttachPoint : MsgBase
    {
    }

    [RTTI.Serializable(0x82A622EFFC3F2F2D, GameType.DS)]
    public class MsgGetInitialPose : MsgBase
    {
    }

    [RTTI.Serializable(0xF284C2743BBF95D4, GameType.DS)]
    public class MsgGetIntValue : MsgBase
    {
    }

    [RTTI.Serializable(0x6CBFE43B6C707ED3, GameType.DS)]
    public class MsgGetLookAngleLimits : MsgBase
    {
    }

    [RTTI.Serializable(0x99D7DEC95C7DEA52, GameType.DS)]
    public class MsgGetLootableItems : MsgBase
    {
    }

    [RTTI.Serializable(0xFB42406840E1694C, GameType.DS)]
    public class MsgGetMaxFitAmount : MsgBase
    {
    }

    [RTTI.Serializable(0xE2277A16EC382206, GameType.DS)]
    public class MsgGetMeleeAttackEvent : MsgBase
    {
    }

    [RTTI.Serializable(0xCA10726585F5C0DA, GameType.DS)]
    public class MsgGetMountPosition : MsgBase
    {
    }

    [RTTI.Serializable(0x201270323451CA11, GameType.DS)]
    public class MsgGetMovementInput : MsgBase
    {
    }

    [RTTI.Serializable(0xE77A5CE0C3A7221C, GameType.DS)]
    public class MsgGetMoverRemainingBaseTurnAngle : MsgBase
    {
    }

    [RTTI.Serializable(0xB3F5708480C60D19, GameType.DS)]
    public class MsgGetNavMeshBubbleRadiusModifier : MsgBase
    {
    }

    [RTTI.Serializable(0x9F1A459E76EAE150, GameType.DS)]
    public class MsgGetOrientationHelper : MsgBase
    {
    }

    [RTTI.Serializable(0xFFFE0DC06DF7F0AF, GameType.DS)]
    public class MsgGetPositionValue : MsgBase
    {
    }

    [RTTI.Serializable(0x50C392C8F1A564A5, GameType.DS)]
    public class MsgGetPotentialContextualActionsOnVictim : MsgBase
    {
    }

    [RTTI.Serializable(0xF0BA64A0BB0BC77, GameType.DS)]
    public class MsgGetProjectileDestroyed : MsgBase
    {
    }

    [RTTI.Serializable(0x97EDB21288D7175B, GameType.DS)]
    public class MsgGetPushResponse : MsgBase
    {
    }

    [RTTI.Serializable(0x522B1E75A4E14EDC, GameType.DS)]
    public class MsgGetQuest : MsgBase
    {
    }

    [RTTI.Serializable(0xFF716176D6801CA1, GameType.DS)]
    public class MsgGetRounds : MsgBase
    {
    }

    [RTTI.Serializable(0x34B24C0E3E6C6D2C, GameType.DS)]
    public class MsgGetSelectedWeaponMode : MsgBase
    {
    }

    [RTTI.Serializable(0xB8A37A6453240A0A, GameType.DS)]
    public class MsgGetSequenceAIIndividual : MsgBase
    {
    }

    [RTTI.Serializable(0x5548DDA15F19BBCB, GameType.DS)]
    public class MsgGetSequencePlayer : MsgBase
    {
    }

    [RTTI.Serializable(0x460ADE5B0C0F07B3, GameType.DS)]
    public class MsgGetSkinnedModelPoseDeformer : MsgBase
    {
    }

    [RTTI.Serializable(0x86EAF7345D765AE2, GameType.DS)]
    public class MsgGetStaggerInfo : MsgBase
    {
    }

    [RTTI.Serializable(0x32EC6662BEF4D338, GameType.DS)]
    public class MsgGetTalkState : MsgBase
    {
    }

    [RTTI.Serializable(0x30D0336332040C44, GameType.DS)]
    public class MsgGetTargetCapsuleTransforms : MsgBase
    {
    }

    [RTTI.Serializable(0xB0986B27CD676FB4, GameType.DS)]
    public class MsgGetUsability : MsgBase
    {
    }

    [RTTI.Serializable(0xAAAB598D334D6789, GameType.DS)]
    public class MsgGetUsabilityForUser : MsgBase
    {
    }

    [RTTI.Serializable(0xDFED0F4F3C5EF7DB, GameType.DS)]
    public class MsgGetUseLocationByIndex : MsgBase
    {
    }

    [RTTI.Serializable(0xDFC9AB9955104E88, GameType.DS)]
    public class MsgGetUseLocationBySectionName : MsgBase
    {
    }

    [RTTI.Serializable(0xC5F87287B95FFF9, GameType.DS)]
    public class MsgGetUseLocationPrompt : MsgBase
    {
    }

    [RTTI.Serializable(0x125758E24F257D93, GameType.DS)]
    public class MsgGetUseLocations : MsgBase
    {
    }

    [RTTI.Serializable(0x260B34EA3109028F, GameType.DS)]
    public class MsgGetUseLocationsForSmartObject : MsgBase
    {
    }

    [RTTI.Serializable(0xFF073EB4CFB53B06, GameType.DS)]
    public class MsgGetUsePrecondition : MsgBase
    {
    }

    [RTTI.Serializable(0xF5EC5FD35AAA344D, GameType.DS)]
    public class MsgGetUseSpeedModifier : MsgBase
    {
    }

    [RTTI.Serializable(0x35B29A41AA6BFD26, GameType.DS)]
    public class MsgGetVisualNodeHelperNames : MsgBase
    {
    }

    [RTTI.Serializable(0x341F0D2B29E2E800, GameType.DS)]
    public class MsgGetWeaponInputOverride : MsgBase
    {
    }

    [RTTI.Serializable(0x985894127305BDF1, GameType.DS)]
    public class MsgGetWeaponParameters : MsgBase
    {
    }

    [RTTI.Serializable(0xA54254E811B5FCB4, GameType.DS)]
    public class MsgGetXpLevel : MsgBase
    {
    }

    [RTTI.Serializable(0xEAED2D457EE3B3D0, GameType.DS)]
    public class MsgGetgDsActionEventHandler : MsgBase
    {
    }

    [RTTI.Serializable(0x10AE4F6CAF4CCF88, GameType.DS)]
    public class MsgGroupMemberDied : MsgBase
    {
    }

    [RTTI.Serializable(0xF35456808A89C177, GameType.DS)]
    public class MsgHUDHidePopup : MsgBase
    {
    }

    [RTTI.Serializable(0x61D6074DD49C12CD, GameType.DS)]
    public class MsgHUDShowNotification : MsgBase
    {
    }

    [RTTI.Serializable(0xB638AB7399E0C41D, GameType.DS)]
    public class MsgHUDShowPopup : MsgHUDShowNotification
    {
    }

    [RTTI.Serializable(0x9D9A55C669688254, GameType.DS)]
    public class MsgHUDUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x48953A8478120A7F, GameType.DS)]
    public class MsgHackIsDisabled : MsgBase
    {
    }

    [RTTI.Serializable(0x10B8FDE6BB7819E0, GameType.DS)]
    public class MsgHandleInput : MsgBase
    {
    }

    [RTTI.Serializable(0xCD4E7532885C5E82, GameType.DS)]
    public class MsgHasAttachedEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x18404AF0F536E26C, GameType.DS)]
    public class MsgHeal : MsgBase
    {
    }

    [RTTI.Serializable(0x53F2F22FF41208B7, GameType.DS)]
    public class MsgHidePlayerNotification : MsgBase
    {
    }

    [RTTI.Serializable(0x588C9BD802A800F, GameType.DS)]
    public class MsgHitReactionTriggered : MsgBase
    {
    }

    [RTTI.Serializable(0x77D3C502F276271A, GameType.DS)]
    public class MsgIncomingDelayedDamage : MsgBase
    {
        [RTTI.Member(2, 0x0)] public CPtr<Entity> Damager;
        [RTTI.Member(3, 0x0)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(0, 0x10)] public float Delay;
        [RTTI.Member(1, 0x18)] public WorldPosition Origin;
        [RTTI.Member(4, 0x58)] public CPtr<AttackEventContext> AttackEvent;
    }

    [RTTI.Serializable(0x454FBFCAF47E264A, GameType.DS)]
    public class MsgIncreaseComboLevel : MsgBase
    {
    }

    [RTTI.Serializable(0xB5A29750053924A1, GameType.DS)]
    public class MsgInit : MsgBase
    {
    }

    [RTTI.Serializable(0xA5F1AA56D195D67B, GameType.DS)]
    public class MsgInitAnimationManager : MsgBase
    {
    }

    [RTTI.Serializable(0x57BB520DC9BFDA4E, GameType.DS)]
    public class MsgInitMeshHierarchy : MsgBase
    {
    }

    [RTTI.Serializable(0xCB7A4E4358302D7B, GameType.DS)]
    public class MsgInitMover : MsgBase
    {
    }

    [RTTI.Serializable(0x2BA908276DA9A979, GameType.DS)]
    public class MsgInput : MsgBase
    {
    }

    [RTTI.Serializable(0x9927E6FB7F7E42EE, GameType.DS)]
    public class MsgInstigatorFactionChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x1A160CFB9D02BA53, GameType.DS)]
    public class MsgIntegerFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(1, 0x20)] public CPtr<IntegerFact> Fact;
        [RTTI.Member(2, 0x28)] public int Value;
    }

    [RTTI.Serializable(0xE53FD3B6595D833A, GameType.DS)]
    public class MsgInterruptGesture : MsgBase
    {
    }

    [RTTI.Serializable(0x1D868B4C2B97C1FC, GameType.DS)]
    public class MsgInventoryBase : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<InventoryItem> Item;
    }

    [RTTI.Serializable(0x475FC25725D50F0C, GameType.DS)]
    public class MsgInventoryBaseScene : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x0, true)] public CPtr<InventoryItem> Item;
    }

    [RTTI.Serializable(0xC6B797CD5D0CD8E9, GameType.DS)]
    public class MsgInventoryCapacityModified : MsgBase
    {
    }

    [RTTI.Serializable(0x944C9FA50CBF73CE, GameType.DS)]
    public class MsgInventoryEntityActivated : MsgBase
    {
    }

    [RTTI.Serializable(0xBDD2B2915D3244EB, GameType.DS)]
    public class MsgInventoryEntityDeactivated : MsgBase
    {
    }

    [RTTI.Serializable(0xB13F7E44B5295953, GameType.DS)]
    public class MsgInventoryItemAdded : MsgInventoryBaseScene
    {
        [RTTI.Member(2, 0x48)] public EInventoryItemAddType AddType;
        [RTTI.Member(3, 0x4C)] public int AddedAmount;
    }

    [RTTI.Serializable(0xE5EE6A317FB46F8B, GameType.DS)]
    public class MsgInventoryItemAmountChanged : MsgInventoryBaseScene
    {
        [RTTI.Member(2, 0x48)] public int OldAmount;
        [RTTI.Member(3, 0x4C)] public int NewAmount;
        [RTTI.Member(4, 0x50)] public bool IsTransfer;
    }

    [RTTI.Serializable(0xFE4FDCDE8FF01683, GameType.DS)]
    public class MsgInventoryItemRemoved : MsgInventoryBaseScene
    {
        [RTTI.Member(2, 0x48)] public EInventoryItemRemoveType RemoveType;
        [RTTI.Member(3, 0x4C)] public int RemovedAmount;
    }

    [RTTI.Serializable(0x2BAAFAFF8593D131, GameType.DS)]
    public class MsgIsAboutToStopMovement : MsgBase
    {
    }

    [RTTI.Serializable(0x640B71BEBEA53052, GameType.DS)]
    public class MsgIsAi : MsgBase
    {
    }

    [RTTI.Serializable(0x713633B6556A455F, GameType.DS)]
    public class MsgIsAimAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x3546AF366228DFF0, GameType.DS)]
    public class MsgIsAllowedBase : MsgBase
    {
        [RTTI.Member(0, 0x0)] public bool Disallow;
    }

    [RTTI.Serializable(0xDFB28FCA27182C28, GameType.DS)]
    public class MsgIsAllowedWithRequiredComponentBase : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool HasRequiredComponent;
        [RTTI.Member(1, 0x11)] public bool Disallow;
    }

    [RTTI.Serializable(0xBA84019A10178C85, GameType.DS)]
    public class MsgIsAttackingAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xDB190867B369CE1F, GameType.DS)]
    public class MsgIsBreakOutOfDismountRequested : MsgBase
    {
    }

    [RTTI.Serializable(0x5121064626D0B79E, GameType.DS)]
    public class MsgIsCombatAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x324E66F5C756DEE0, GameType.DS)]
    public class MsgIsContextualActionAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x3779094D888AF476, GameType.DS)]
    public class MsgIsContextualSpeechAllowed : MsgIsAllowedWithRequiredComponentBase
    {
    }

    [RTTI.Serializable(0xD2ABC53370BDFF59, GameType.DS)]
    public class MsgIsControllerMovementAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xB0B95283B57093A4, GameType.DS)]
    public class MsgIsDeathBeingDelayed : MsgBase
    {
    }

    [RTTI.Serializable(0xAB63950BE52AE80E, GameType.DS)]
    public class MsgIsDisabled : MsgBase
    {
    }

    [RTTI.Serializable(0xEC98D2FDD58332C3, GameType.DS)]
    public class MsgIsDodgeAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xC815B43BC3106454, GameType.DS)]
    public class MsgIsDropItemAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x8303474E7BAFF3B9, GameType.DS)]
    public class MsgIsEntityDataStreamingIn : MsgBase
    {
    }

    [RTTI.Serializable(0xAA1C1518F5E7C64A, GameType.DS)]
    public class MsgIsEntityLootable : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool IsLootable;
        [RTTI.Member(1, 0x11)] public bool HasRemainingLoot;
    }

    [RTTI.Serializable(0xEBA79D3D0521C4A5, GameType.DS)]
    public class MsgIsFireAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x5540DB2A6420665B, GameType.DS)]
    public class MsgIsFireRequestAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x2F1806A5FFCB4E73, GameType.DS)]
    public class MsgIsFocusAllowed : MsgIsAllowedWithRequiredComponentBase
    {
    }

    [RTTI.Serializable(0x51DBDC26A399BB02, GameType.DS)]
    public class MsgIsFocusTargetAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xD2413B66D3442C20, GameType.DS)]
    public class MsgIsHandlingPopup : MsgBase
    {
    }

    [RTTI.Serializable(0x90CCF5BFBD55C2CA, GameType.DS)]
    public class MsgIsHealable : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x586AABE02BE8300B, GameType.DS)]
    public class MsgIsInStealth : MsgBase
    {
    }

    [RTTI.Serializable(0xF0D1F5915E913006, GameType.DS)]
    public class MsgIsInventoryActionDisabled : MsgBase
    {
    }

    [RTTI.Serializable(0x5B058E77FB733E2, GameType.DS)]
    public class MsgIsInventoryItemSwitchAllowed : MsgIsAllowedBase
    {
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> Item;
    }

    [RTTI.Serializable(0x4418246D578BE3B7, GameType.DS)]
    public class MsgIsItemRemovalAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x393E7A778BE39AB6, GameType.DS)]
    public class MsgIsJumpAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x98729FAD888C8085, GameType.DS)]
    public class MsgIsLookIKAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x516F598E504D42B2, GameType.DS)]
    public class MsgIsMeleeAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xABDBC0C193C7FB3, GameType.DS)]
    public class MsgIsMortallyWounded : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x32DF50A18D4629CB, GameType.DS)]
    public class MsgIsMountingAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x7A77BAA4191E5E1A, GameType.DS)]
    public class MsgIsMovementAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xDDF720A9E9D4AFF, GameType.DS)]
    public class MsgIsMoverWarpAnimationPlaying : MsgBase
    {
    }

    [RTTI.Serializable(0x71D9B73CD0B48BB2, GameType.DS)]
    public class MsgIsOpenMainMenuAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x5269114061B70590, GameType.DS)]
    public class MsgIsOperating : MsgBase
    {
    }

    [RTTI.Serializable(0x714954681A0BC74A, GameType.DS)]
    public class MsgIsPerkAbilityActive : MsgBase
    {
    }

    [RTTI.Serializable(0x1F590F6A415249DE, GameType.DS)]
    public class MsgIsPerkAbilityAvailable : MsgBase
    {
    }

    [RTTI.Serializable(0xDEBF39D20F6BD45C, GameType.DS)]
    public class MsgIsPerkLevelUnlocked : MsgBase
    {
    }

    [RTTI.Serializable(0x528E49DB222C6A6, GameType.DS)]
    public class MsgIsPushResponseAllowed : MsgBase
    {
    }

    [RTTI.Serializable(0xCE604F188DF7447D, GameType.DS)]
    public class MsgIsPushResponseTriggered : MsgBase
    {
    }

    [RTTI.Serializable(0xDEF8687C394AC45D, GameType.DS)]
    public class MsgIsReloadAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x83412AC9DB8D0658, GameType.DS)]
    public class MsgIsRopePullAllowed : MsgIsAllowedWithRequiredComponentBase
    {
    }

    [RTTI.Serializable(0x55360FBBA0D510E2, GameType.DS)]
    public class MsgIsRotationWhileClaimingUseLocationAllowed : MsgIsAllowedWithRequiredComponentBase
    {
    }

    [RTTI.Serializable(0xA0C7D2FD48382329, GameType.DS)]
    public class MsgIsSelectedItemUseAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xFABCB6260643D0C3, GameType.DS)]
    public class MsgIsSprintAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xD0BB3D6600AB1441, GameType.DS)]
    public class MsgIsStanceChangeAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xBD6723F92D5BC5EB, GameType.DS)]
    public class MsgIsTalkingContextual : MsgBase
    {
    }

    [RTTI.Serializable(0x4F65CFB115464C5C, GameType.DS)]
    public class MsgIsUpdatingInventoryAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x313303701FE7B146, GameType.DS)]
    public class MsgIsUseLocationClaimAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x785FF78C69E6A8FB, GameType.DS)]
    public class MsgIsVaultingAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x57F1FC64111F101C, GameType.DS)]
    public class MsgIsWeaponSwitchRequired : MsgBase
    {
    }

    [RTTI.Serializable(0x3C1F48BE1972DCA2, GameType.DS)]
    public class MsgIsWieldAllowed : MsgIsAllowedBase
    {
        [RTTI.Member(1, 0x18)] public bool Immediate;
    }

    [RTTI.Serializable(0xD826DEDB48D8981C, GameType.DS)]
    public class MsgItemFirstTimeInInventory : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x22DC62B70916FD10, GameType.DS)]
    public class MsgJoystick : MsgInput
    {
    }

    [RTTI.Serializable(0xD0BBB3692BE22EF0, GameType.DS)]
    public class MsgJoystickAimTargetSettings : MsgBase
    {
    }

    [RTTI.Serializable(0x2DCD9EE9D9CD572A, GameType.DS)]
    public class MsgKeyboard : MsgInput
    {
    }

    [RTTI.Serializable(0x9C35ECC67BE8494E, GameType.DS)]
    public class MsgKnockedDown : MsgBase
    {
    }

    [RTTI.Serializable(0xA75A2C8D2124838A, GameType.DS)]
    public class MsgLethalDamageApplied : MsgBase
    {
        [RTTI.Member(0, 0x0)] public bool DeathAborted;
    }

    [RTTI.Serializable(0xAFEC69A4E0A21683, GameType.DS)]
    public class MsgLevelChanged : MsgBase
    {
        [RTTI.Member(0, 0x10)] public int Level;
    }

    [RTTI.Serializable(0x7D2E3ED0AACDB4AF, GameType.DS)]
    public class MsgLevelUp : MsgBase
    {
        [RTTI.Member(0, 0x10)] public int Level;
    }

    [RTTI.Serializable(0xE2D28923DB6E1E35, GameType.DS)]
    public class MsgLookRotationSpeedSettings : MsgBase
    {
    }

    [RTTI.Serializable(0x7922462248E60A6, GameType.DS)]
    public class MsgMeleeDamageHitEffects : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x18)] public WorldPosition HitPosition;
        [RTTI.Member(2, 0x30)] public Vec3 HitDirection;
        [RTTI.Member(3, 0x40)] public Vec3 HitNormal;
        [RTTI.Member(4, 0x50)] public CPtr<MaterialTypeResource> HitMaterialTypeResource;
        [RTTI.Member(5, 0x58)] public float DamageAmount;
        [RTTI.Member(6, 0x60)] public CPtr<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0x7200A3770951DC92, GameType.DS)]
    public class MsgMeleeDamageHitResult : MsgBase
    {
    }

    [RTTI.Serializable(0x33FB107F53417F7A, GameType.DS)]
    public class MsgMeleeHitBlocked : MsgBase
    {
    }

    [RTTI.Serializable(0xD7E2931383DFE4B, GameType.DS)]
    public class MsgMeleeHitIncoming : MsgBase
    {
    }

    [RTTI.Serializable(0xC8AFFD2CB8FCE148, GameType.DS)]
    public class MsgMissionBaggageNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int BaggageGameActorId;
        [RTTI.Member(2, 0x20)] public uint32 BaggageName;
        [RTTI.Member(3, 0x24)] public uint32 CatalogueName;
        [RTTI.Member(4, 0x28)] public uint64 MissionId;
        [RTTI.Member(5, 0x30)] public int Parameter0;
        [RTTI.Member(6, 0x34)] public int Parameter1;
        [RTTI.Member(7, 0x38)] public int Parameter2;
        [RTTI.Member(8, 0x3C)] public int Parameter3;
    }

    [RTTI.Serializable(0xDBDCB7AB02B42387, GameType.DS)]
    public class MsgMissionBgmPhaseChanged : MsgScene
    {
        [RTTI.Member(0, 0x18)] public EDSBgmPhase NewPhase;
        [RTTI.Member(1, 0x19)] public EDSBgmPhase OldPhase;
    }

    [RTTI.Serializable(0x8F0A87800A231624, GameType.DS)]
    public class MsgMissionCatcherNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int Parameter0;
        [RTTI.Member(2, 0x20)] public int Parameter1;
    }

    [RTTI.Serializable(0xFF459654DDE719FB, GameType.DS)]
    public class MsgMissionDeliveryPointNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int GameActorId;
        [RTTI.Member(2, 0x20)] public int ConstructionId;
        [RTTI.Member(3, 0x24)] public EDSConstructionPointType DeliveryPointType;
        [RTTI.Member(4, 0x28)] public int Parameter0;
        [RTTI.Member(5, 0x2C)] public int Parameter1;
        [RTTI.Member(6, 0x30)] public int Parameter2;
        [RTTI.Member(7, 0x34)] public int Parameter3;
    }

    [RTTI.Serializable(0x49DD1127BAE2E517, GameType.DS)]
    public class MsgMissionEventTimerNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public uint64 MissionID;
        [RTTI.Member(1, 0x20)] public int TimerID;
        [RTTI.Member(2, 0x24)] public EMsgMissionEventTimerMessageType MessageType;
        [RTTI.Member(3, 0x28)] public float TriggerSplitTime;
        [RTTI.Member(4, 0x2C)] public float CurTimerSeconds;
    }

    [RTTI.Serializable(0x37072AE49E58DD39, GameType.DS)]
    public class MsgMissionGameActorNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public EDSGameActorType SenderType;
        [RTTI.Member(1, 0x1C)] public uint32 SenderID;
        [RTTI.Member(2, 0x20)] public int Identifier;
        [RTTI.Member(3, 0x24)] public int Parameter0;
        [RTTI.Member(4, 0x28)] public int Parameter1;
        [RTTI.Member(5, 0x2C)] public int Parameter2;
        [RTTI.Member(6, 0x30)] public int Parameter3;
    }

    [RTTI.Serializable(0x281EAFD77B7EE374, GameType.DS)]
    public class MsgMissionGeneralNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int Parameter0;
        [RTTI.Member(2, 0x20)] public int Parameter1;
    }

    [RTTI.Serializable(0x471256D1F3F8970E, GameType.DS)]
    public class MsgMissionHunterNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int Parameter0;
        [RTTI.Member(2, 0x20)] public int Parameter1;
    }

    [RTTI.Serializable(0x178525191AE55335, GameType.DS)]
    public class MsgMissionImmediatelyNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int Parameter0;
        [RTTI.Member(2, 0x20)] public int Parameter1;
    }

    [RTTI.Serializable(0x2F8D37B844E1D3C, GameType.DS)]
    public class MsgMissionNoticePlayerSendsLike : MsgScene
    {
        [RTTI.Member(0, 0x18)] public EDSSendsLikeRecipientType RecipientType;
        [RTTI.Member(1, 0x1C)] public uint32 NameHash;
        [RTTI.Member(2, 0x20)] public int32 SendLike;
    }

    [RTTI.Serializable(0x712CC4E4D30BA22A, GameType.DS)]
    public class MsgMissionNpcDefeat : MsgScene
    {
        [RTTI.Member(0, 0x18)] public uint32 GameActorIdCode;
        [RTTI.Member(1, 0x1C)] public uint32 Attacker;
        [RTTI.Member(2, 0x20)] public EDSNpcDefeatType Type;
        [RTTI.Member(3, 0x24)] public EDSAttackId AttackId;
    }

    [RTTI.Serializable(0x35BE41D3198B347E, GameType.DS)]
    public class MsgMissionPlayerNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int Parameter0;
        [RTTI.Member(2, 0x20)] public int Parameter1;
        [RTTI.Member(3, 0x24)] public int Parameter2;
        [RTTI.Member(4, 0x28)] public int Parameter3;
    }

    [RTTI.Serializable(0x4982C49FE544239, GameType.DS)]
    public class MsgMissionSceneFromSequence : MsgScene
    {
        [RTTI.Member(0, 0x18)] public uint32 ValueHash;
    }

    [RTTI.Serializable(0x7930F89639574EA8, GameType.DS)]
    public class MsgMissionUINotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public EDSUIMessageSenderType Sender;
        [RTTI.Member(1, 0x1C)] public EDSUIMessageEventType EventType;
        [RTTI.Member(2, 0x20)] public uint32 Value;
    }

    [RTTI.Serializable(0x888631FB183C4384, GameType.DS)]
    public class MsgModelChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xF88C51545B2E3B43, GameType.DS)]
    public class MsgModelPartsChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x792FF60A690910EC, GameType.DS)]
    public class MsgModelResourceChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x6B8D380EDC4E0CB3, GameType.DS)]
    public class MsgModificationSocketed : MsgInventoryBase
    {
        [RTTI.Member(1, 0x0, true)] public CPtr<InventoryItem> ModdedItem;
    }

    [RTTI.Serializable(0xF73CEB3281FE515, GameType.DS)]
    public class MsgModifyAirMoverPhysicsClampSize : MsgBase
    {
    }

    [RTTI.Serializable(0xB9E12F2644975AF, GameType.DS)]
    public class MsgModifyAnimatedPose : MsgBase
    {
    }

    [RTTI.Serializable(0x9E13971BFAF6947, GameType.DS)]
    public class MsgModifyDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x18B5E0A48D303AD8, GameType.DS)]
    public class MsgModifyDamageDealt : MsgBase
    {
    }

    [RTTI.Serializable(0x407F55476654CC21, GameType.DS)]
    public class MsgModifyDamageFlags : MsgBase
    {
        [RTTI.Member(0, 0x10)] public EDamageFlagsGameExported DamageFlags;
    }

    [RTTI.Serializable(0xA9DF8F8DD9F2433C, GameType.DS)]
    public class MsgModifyHumanoidMovement : MsgBase
    {
        [RTTI.Member(2, 0x10)] public Vec3 Movement;
        [RTTI.Member(3, 0x20)] public float TurnSpeed;
        [RTTI.Member(4, 0x24)] public bool ResetVerticalVelocity;
        [RTTI.Member(0, 0x28)] public CPtr<Humanoid> Humanoid;
        [RTTI.Member(1, 0x30)] public float DeltaTime;
    }

    [RTTI.Serializable(0x89FBA3266DE7EB40, GameType.DS)]
    public class MsgModifyHumanoidMovementSpace : MsgBase
    {
    }

    [RTTI.Serializable(0xF5A484537F6E3C43, GameType.DS)]
    public class MsgModifyInventoryItemStack : MsgBase
    {
    }

    [RTTI.Serializable(0x2516822FFBF4D6CC, GameType.DS)]
    public class MsgModifyLookAngles : MsgBase
    {
    }

    [RTTI.Serializable(0x14A199CB5935A70B, GameType.DS)]
    public class MsgModifyMaxLocalMovementSpeed : MsgBase
    {
        [RTTI.Member(1, 0x10)] public float ForwardSpeed;
        [RTTI.Member(2, 0x14)] public float SprintSpeed;
        [RTTI.Member(3, 0x18)] public float BackwardSpeed;
        [RTTI.Member(4, 0x1C)] public float StrafeSpeed;
        [RTTI.Member(0, 0x20)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0xB4465B461E8B3BCD, GameType.DS)]
    public class MsgModifyModelLOD : MsgBase
    {
    }

    [RTTI.Serializable(0x7209EBD89930D33E, GameType.DS)]
    public class MsgModifyModelRepLOD : MsgBase
    {
    }

    [RTTI.Serializable(0xA693C7B91D0855B, GameType.DS)]
    public class MsgModifyOrientationSpeed : MsgBase
    {
        [RTTI.Member(1, 0x10)] public float HeadingSpeed;
        [RTTI.Member(2, 0x14)] public float PitchSpeed;
        [RTTI.Member(0, 0x18)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x62787B3B643EE45A, GameType.DS)]
    public class MsgModifyReloadSpeed : MsgBase
    {
        [RTTI.Member(0, 0x10)] public float ReloadSpeedModifier;
    }

    [RTTI.Serializable(0x7E22E7687DF19452, GameType.DS)]
    public class MsgMountBase : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> Mounter;
    }

    [RTTI.Serializable(0x47F4FE9D9575A372, GameType.DS)]
    public class MsgMountBlockedFromArea : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> Rider;
        [RTTI.Member(1, 0x18)] public CPtr<Entity> Mount;
    }

    [RTTI.Serializable(0x76E9F526A1DF33BB, GameType.DS)]
    public class MsgMounterBase : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> MountableObject;
    }

    [RTTI.Serializable(0x2229E58CDDCEFE6B, GameType.DS)]
    public class MsgMounterDetachedDuringDismount : MsgBase
    {
    }

    [RTTI.Serializable(0xE19C2407675228F6, GameType.DS)]
    public class MsgMounterStartDismount : MsgMounterBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x7E6709793E42FDD, GameType.DS)]
    public class MsgMounterStartMount : MsgMounterBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0xC5137E413C76815, GameType.DS)]
    public class MsgMounterStopDismount : MsgMounterBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x9E8A880D28D4765E, GameType.DS)]
    public class MsgMounterStopMount : MsgMounterBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0xAAD71A8B38875F3B, GameType.DS)]
    public class MsgMouse : MsgInput
    {
    }

    [RTTI.Serializable(0x76A3933C8B5CE523, GameType.DS)]
    public class MsgMoverArrived : MsgSceneEntityBase
    {
    }

    [RTTI.Serializable(0x97D993A1BF2A45F2, GameType.DS)]
    public class MsgMoverHasIgnited : MsgBase
    {
    }

    [RTTI.Serializable(0x16DDEB8EC5156703, GameType.DS)]
    public class MsgNavMeshBubbleReplaced : MsgBase
    {
    }

    [RTTI.Serializable(0x3765F49072024416, GameType.DS)]
    public class MsgNoAmmoWarning : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<AmmoResource> AmmoResource;
        [RTTI.Member(1, 0x18)] public bool CanCraftAmmo;
    }

    [RTTI.Serializable(0xCBB1BB2E78216EBB, GameType.DS)]
    public class MsgNoLongerCurrentItem : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x887D49FE028FFDCE, GameType.DS)]
    public class MsgNotifyAIOnDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x5657E3B34CF3A42C, GameType.DS)]
    public class MsgNotifyMissionScene : MsgScene
    {
        [RTTI.Member(0, 0x18)] public uint32 ValueHash;
    }

    [RTTI.Serializable(0xF44A22959B80E1E6, GameType.DS)]
    public class MsgObjectChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xF84028827838350E, GameType.DS)]
    public class MsgOnEnterMenu : MsgBase
    {
    }

    [RTTI.Serializable(0xE04E94D2059DB43E, GameType.DS)]
    public class MsgOnExitMenu : MsgBase
    {
    }

    [RTTI.Serializable(0xD48E1814D2094F00, GameType.DS)]
    public class MsgOnSentenceGroupFinished : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x40)] public UUIDRef<SentenceGroupResource> SentenceGroup;
        [RTTI.Member(2, 0x50)] public bool Aborted;
    }

    [RTTI.Serializable(0x5B48DFA326774701, GameType.DS)]
    public class MsgOnSetFOVByCameraActorInstance : MsgBase
    {
    }

    [RTTI.Serializable(0x50D12CFE724CD0AF, GameType.DS)]
    public class MsgOnSetFuzzyByCameraActorInstance : MsgBase
    {
    }

    [RTTI.Serializable(0x50095841B4BF0191, GameType.DS)]
    public class MsgOnSetWorldTransformByAttachToSequenceLocatorMover : MsgBase
    {
    }

    [RTTI.Serializable(0x9F4755F28492A777, GameType.DS)]
    public class MsgOnTalkEvent : MsgBase
    {
    }

    [RTTI.Serializable(0x50D2459E02E8B2BD, GameType.DS)]
    public class MsgOnVoiceCleared : MsgVoiceBase
    {
    }

    [RTTI.Serializable(0x1395DE349A45A54, GameType.DS)]
    public class MsgOnVoiceSet : MsgVoiceBase
    {
    }

    [RTTI.Serializable(0x8240B63AC844FDA4, GameType.DS)]
    public class MsgOutOfWorldBounds : MsgBase
    {
    }

    [RTTI.Serializable(0xAC5ADBD39532BCA0, GameType.DS)]
    public class MsgOutsideBroadPhase : MsgBase
    {
    }

    [RTTI.Serializable(0x1CB4533DEE0EAE4A, GameType.DS)]
    public class MsgOverrideObserverTransform : MsgBase
    {
    }

    [RTTI.Serializable(0xAAEC8FB928C6AFBD, GameType.DS)]
    public class MsgPBDReset : MsgBase
    {
    }

    [RTTI.Serializable(0x3E2DCC3556CEE4F3, GameType.DS)]
    public class MsgPBDTeleport : MsgBase
    {
    }

    [RTTI.Serializable(0xE6F18D5E007CBF15, GameType.DS)]
    public class MsgParentChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xE986F1D2ED4EAFD7, GameType.DS)]
    public class MsgPatrolPathTagged : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool IsTagged;
    }

    [RTTI.Serializable(0xAE6EE37FBBFE737, GameType.DS)]
    public class MsgPauseEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x21A375B05A52D864, GameType.DS)]
    public class MsgPerkLevelUnlocked : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<PerkLevel> Perk;
    }

    [RTTI.Serializable(0xBE4093BF39B3050, GameType.DS)]
    public class MsgPhysicsCharacterCanPushRequest : MsgBase
    {
    }

    [RTTI.Serializable(0x8E98B024FD767AB5, GameType.DS)]
    public class MsgPickedUp : MsgInventoryBaseScene
    {
    }

    [RTTI.Serializable(0x1D5A31F9203755BA, GameType.DS)]
    public class MsgPinDownStarted : MsgBase
    {
    }

    [RTTI.Serializable(0xFD3BA849EBCDDB75, GameType.DS)]
    public class MsgPlayFacialAnimation : MsgBase
    {
    }

    [RTTI.Serializable(0x7367B2C7326BB9F, GameType.DS)]
    public class MsgPlayGearSound : MsgBase
    {
    }

    [RTTI.Serializable(0x45DB33D8F7934ED5, GameType.DS)]
    public class MsgPlayMonitoredAnimation : MsgBase
    {
    }

    [RTTI.Serializable(0x65148D07BBC7BCBC, GameType.DS)]
    public class MsgPlayerFactionChanged : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Player> Player;
        [RTTI.Member(1, 0x18)] public CPtr<AIFaction> OldFaction;
    }

    [RTTI.Serializable(0xDDAF08476D21607F, GameType.DS)]
    public class MsgPlayerKilled : MsgBase
    {
    }

    [RTTI.Serializable(0xCE67A165A4D86532, GameType.DS)]
    public class MsgPlayerRestored : MsgBase
    {
    }

    [RTTI.Serializable(0xCBD1C6E7BFD1F820, GameType.DS)]
    public class MsgPlayerSpawned : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> SpawnedEntity;
        [RTTI.Member(1, 0x18)] public int Wave;
        [RTTI.Member(2, 0x1C)] public bool IsFirstSpawn;
    }

    [RTTI.Serializable(0xCBC58A832CF889D1, GameType.DS)]
    public class MsgPostAnimationUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xDA1D133F0876EC29, GameType.DS)]
    public class MsgPostApplyArtPartsVariation : MsgBase
    {
    }

    [RTTI.Serializable(0x1A32F0325FB6D081, GameType.DS)]
    public class MsgPostApplyHighLevelControllerResut : MsgBase
    {
    }

    [RTTI.Serializable(0xC2154A55360FF2DB, GameType.DS)]
    public class MsgPostCreateVehicleEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x54F78564D7E5463, GameType.DS)]
    public class MsgPostLoad : MsgBase
    {
    }

    [RTTI.Serializable(0x4AFC3D0639CBEDA8, GameType.DS)]
    public class MsgPostMoverUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x4F66A72C23893F11, GameType.DS)]
    public class MsgPostNetStateToComponents : MsgBase
    {
    }

    [RTTI.Serializable(0xFDFCBB0D77C01B90, GameType.DS)]
    public class MsgPostRemoveArtPartsVariation : MsgBase
    {
    }

    [RTTI.Serializable(0x1C81C22316990727, GameType.DS)]
    public class MsgPostSkinnedModelDeformer : MsgBase
    {
    }

    [RTTI.Serializable(0x3C4E8E14C7C273FD, GameType.DS)]
    public class MsgPostSkinnedModelUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xCE2550815148A3A8, GameType.DS)]
    public class MsgPostSpawnHumanoid : MsgBase
    {
    }

    [RTTI.Serializable(0xD2B786E14BDF3C0D, GameType.DS)]
    public class MsgPrepareForRemoval : MsgBase
    {
    }

    [RTTI.Serializable(0x13A90BCDA8FAEEF6, GameType.DS)]
    public class MsgProjectileExploded : MsgBase
    {
        [RTTI.Member(0, 0x10)] public WorldTransform WorldTransform;
    }

    [RTTI.Serializable(0x6C94E76A85CCE1B5, GameType.DS)]
    public class MsgPropertiesUpdated : MsgBase
    {
    }

    [RTTI.Serializable(0x3553C6F86BF30ABC, GameType.DS)]
    public class MsgQuestObjectiveUpdated : MsgBase
    {
    }

    [RTTI.Serializable(0x35256F82321BB6CF, GameType.DS)]
    public class MsgQuestProgress : MsgBase
    {
    }

    [RTTI.Serializable(0x4FC1B3986F163F20, GameType.DS)]
    public class MsgQuestRewound : MsgBase
    {
    }

    [RTTI.Serializable(0xB87204DAB6A09A2B, GameType.DS)]
    public class MsgQuestTracked : MsgBase
    {
    }

    [RTTI.Serializable(0xE3C6F97A0E1DCD50, GameType.DS)]
    public class MsgReactsToDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x3CDB4C5CC4B433EC, GameType.DS)]
    public class MsgReadBinary : RTTIObject
    {
    }

    [RTTI.Serializable(0xAF952C0DB76D437C, GameType.DS)]
    public class MsgRecheckFloor : MsgBase
    {
    }

    [RTTI.Serializable(0x52A737FB2A67CCA, GameType.DS)]
    public class MsgReduceEnergy : MsgBase
    {
    }

    [RTTI.Serializable(0x79D61A09580CF1B0, GameType.DS)]
    public class MsgRefreshModifications : MsgBase
    {
    }

    [RTTI.Serializable(0xDADFEE3846897449, GameType.DS)]
    public class MsgReloadAbort : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0xD065121479E83C74, GameType.DS)]
    public class MsgReloadCycle : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0x5FC2D00664D85BEA, GameType.DS)]
    public class MsgReloadFinish : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0xC7CD2471A871032, GameType.DS)]
    public class MsgReloadStart : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0xE13A43E4AA4867BD, GameType.DS)]
    public class MsgRemoveCameraModifier : MsgBase
    {
    }

    [RTTI.Serializable(0x1B98A5D178BC1959, GameType.DS)]
    public class MsgRemoveComponent : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<EntityComponent> Component;
    }

    [RTTI.Serializable(0x8F672C77EEBBD21E, GameType.DS)]
    public class MsgRemoveSubtitle : MsgBase
    {
    }

    [RTTI.Serializable(0x8DD41819610A7E16, GameType.DS)]
    public class MsgRemovedFromScene : MsgBase
    {
    }

    [RTTI.Serializable(0x272FA4240265869, GameType.DS)]
    public class MsgRequestDSPlayerOneShotImpactEffect : MsgBase
    {
    }

    [RTTI.Serializable(0x4EBB37AC8408C55D, GameType.DS)]
    public class MsgRequestDismount : MsgBase
    {
    }

    [RTTI.Serializable(0xF1804F5CED97FEBB, GameType.DS)]
    public class MsgRequestGesture : MsgBase
    {
    }

    [RTTI.Serializable(0x7C56B8BE564C2B6D, GameType.DS)]
    public class MsgRequestHighLevelUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xCB9C0CC4BB7475C2, GameType.DS)]
    public class MsgRequestMeleeWeaponModeOperationBase : MsgRequestWeaponOperationBase
    {
    }

    [RTTI.Serializable(0xCC970011E03D72C6, GameType.DS)]
    public class MsgRequestPlayerInteractiveAction : MsgBase
    {
    }

    [RTTI.Serializable(0x78B04584D5E13E9B, GameType.DS)]
    public class MsgRequestRangedWeaponModeOperationBase : MsgRequestWeaponOperationBase
    {
    }

    [RTTI.Serializable(0xD95A7F9F61B6FF27, GameType.DS)]
    public class MsgRequestWeaponAim : MsgRequestWeaponOperationBase
    {
    }

    [RTTI.Serializable(0x6F32FEFA298FBD25, GameType.DS)]
    public class MsgRequestWeaponFire : MsgRequestRangedWeaponModeOperationBase
    {
    }

    [RTTI.Serializable(0xC39A17EFD85F9355, GameType.DS)]
    public class MsgRequestWeaponMeleeAttack : MsgRequestMeleeWeaponModeOperationBase
    {
    }

    [RTTI.Serializable(0x730744FC4B0177EE, GameType.DS)]
    public class MsgRequestWeaponMode : MsgRequestWeaponOperationBase
    {
    }

    [RTTI.Serializable(0xE0F0575BBB73B6CC, GameType.DS)]
    public class MsgRequestWeaponOperationBase : MsgBase
    {
    }

    [RTTI.Serializable(0x9C657C28343C8159, GameType.DS)]
    public class MsgRequestWeaponReload : MsgRequestRangedWeaponModeOperationBase
    {
    }

    [RTTI.Serializable(0xACFF3C47B7E3471E, GameType.DS)]
    public class MsgRequestWeaponReloadAbort : MsgRequestRangedWeaponModeOperationBase
    {
    }

    [RTTI.Serializable(0x69279C4EAF627F28, GameType.DS)]
    public class MsgRequestWeaponTriggerState : MsgRequestWeaponOperationBase
    {
    }

    [RTTI.Serializable(0xED5B701B45408B82, GameType.DS)]
    public class MsgRequestWeaponZoomSwitch : MsgRequestWeaponOperationBase
    {
    }

    [RTTI.Serializable(0x33ECF508278A79A3, GameType.DS)]
    public class MsgResetAimAssist : MsgBase
    {
    }

    [RTTI.Serializable(0x2DA827AA533256F4, GameType.DS)]
    public class MsgResetAimMagnets : MsgBase
    {
    }

    [RTTI.Serializable(0xDC561EEFB34F2369, GameType.DS)]
    public class MsgResetForSequenceBinding : MsgBase
    {
    }

    [RTTI.Serializable(0x3675DB2EF370EE37, GameType.DS)]
    public class MsgResetPlayerCamera : MsgBase
    {
    }

    [RTTI.Serializable(0x7512581F98DFD1B7, GameType.DS)]
    public class MsgRestoreFromInventoryItemRuntimeData : MsgBase
    {
    }

    [RTTI.Serializable(0x6469A1C1A8270785, GameType.DS)]
    public class MsgResumeController : MsgBase
    {
    }

    [RTTI.Serializable(0x54F8F420AB9D31BE, GameType.DS)]
    public class MsgRetractingPartAborted : MsgBase
    {
    }

    [RTTI.Serializable(0x71B26D1F0B20D58E, GameType.DS)]
    public class MsgRetractingPartActivating : MsgBase
    {
    }

    [RTTI.Serializable(0x88DF0119B69F6379, GameType.DS)]
    public class MsgRetractingPartReturning : MsgBase
    {
    }

    [RTTI.Serializable(0x7C23579638502E76, GameType.DS)]
    public class MsgRopeAnchorAttached : MsgBase
    {
    }

    [RTTI.Serializable(0xA74DB5151F29B9A, GameType.DS)]
    public class MsgRopeAnchorBase : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> Anchor;
    }

    [RTTI.Serializable(0x5BB4A1772FD0434D, GameType.DS)]
    public class MsgRopeAnchorBreakFreeStart : MsgRopeAnchorBase
    {
        [RTTI.Member(1, 0x18)] public bool SingleShot;
        [RTTI.Member(2, 0x19)] public bool WillBePinned;
    }

    [RTTI.Serializable(0x9AE367E5AFB051CF, GameType.DS)]
    public class MsgRopeAnchorBreakFreeStop : MsgRopeAnchorBase
    {
    }

    [RTTI.Serializable(0x61389B4EF9140D5E, GameType.DS)]
    public class MsgRopeAnchorBreakImminent : MsgRopeAnchorBase
    {
    }

    [RTTI.Serializable(0xD92F0E1278F5AF50, GameType.DS)]
    public class MsgRopeAnchorConnected : MsgBase
    {
        [RTTI.Member(0, 0x10)] public Vec3 Direction;
        [RTTI.Member(1, 0x20)] public float Length;
        [RTTI.Member(2, 0x24)] public bool SuccessfulConnection;
    }

    [RTTI.Serializable(0x954A0FAE92A8A86D, GameType.DS)]
    public class MsgRopeAnchorInvalid : MsgBase
    {
    }

    [RTTI.Serializable(0x3E15ED83C98983EA, GameType.DS)]
    public class MsgRopeAnchorMissed : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool FiredAtTarget;
    }

    [RTTI.Serializable(0x7CAC3D9861601EB7, GameType.DS)]
    public class MsgRopeAnchorPinned : MsgRopeAnchorBase
    {
        [RTTI.Member(1, 0x18)] public float PinnedTimeRemaining;
    }

    [RTTI.Serializable(0xFC8874C0ABEBF27B, GameType.DS)]
    public class MsgRopeAnchorPullback : MsgBase
    {
    }

    [RTTI.Serializable(0xB527550968BBB50D, GameType.DS)]
    public class MsgRopeBroken : MsgBase
    {
    }

    [RTTI.Serializable(0x7719E1D63D9A14E9, GameType.DS)]
    public class MsgRopeConnected : MsgBase
    {
    }

    [RTTI.Serializable(0xB6715B37369560E5, GameType.DS)]
    public class MsgRouteMoverArrived : MsgMoverArrived
    {
        [RTTI.Member(1, 0x40)] public CPtr<Route> Route;
    }

    [RTTI.Serializable(0xF63C87AC7008445B, GameType.DS)]
    public class MsgSaveToInventoryItemRuntimeData : MsgBase
    {
    }

    [RTTI.Serializable(0x8681CB0E7F826449, GameType.DS)]
    public class MsgSayContextualSpeech : MsgBase
    {
    }

    [RTTI.Serializable(0x61DBB3A104830EAB, GameType.DS)]
    public class MsgSayContextualSpeechResponse : MsgBase
    {
    }

    [RTTI.Serializable(0x7DA1D323EE599A32, GameType.DS)]
    public class MsgScene : MsgBase
    {
    }

    [RTTI.Serializable(0x1976A5B45AF85DFB, GameType.DS)]
    public class MsgSceneCatcherNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public int Identifier;
        [RTTI.Member(1, 0x1C)] public int Parameter0;
        [RTTI.Member(2, 0x20)] public int Parameter1;
    }

    [RTTI.Serializable(0xFFA3146C69791C39, GameType.DS)]
    public class MsgSceneCustom : MsgScene
    {
        [RTTI.Member(0, 0x18)] public CPtr<Scene> Sender;
        [RTTI.Member(1, 0x20)] public String ID;
    }

    [RTTI.Serializable(0x4BE3011E0C449E3C, GameType.DS)]
    public class MsgSceneDoneActivating : MsgScene
    {
    }

    [RTTI.Serializable(0x378F76BE63A6F26, GameType.DS)]
    public class MsgSceneDoneSpawning : MsgScene
    {
    }

    [RTTI.Serializable(0xC535915197B153C9, GameType.DS)]
    public class MsgSceneEnterState : MsgStateMachineEnterState
    {
    }

    [RTTI.Serializable(0xA70297EB71A83824, GameType.DS)]
    public class MsgSceneEntityBase : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x48EF3253C4A84DAC, GameType.DS)]
    public class MsgSceneEntitySpotted : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> SpotterEntity;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> SpottedEntity;
    }

    [RTTI.Serializable(0xA7F3CEAE06FA1CF5, GameType.DS)]
    public class MsgSceneEntityUpdate : MsgSceneUpdate
    {
    }

    [RTTI.Serializable(0x34E07207FCECE3CA, GameType.DS)]
    public class MsgSceneIsStartableChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xDCBCDF849709F429, GameType.DS)]
    public class MsgSceneLeaveState : MsgStateMachineLeaveState
    {
    }

    [RTTI.Serializable(0x26AF834B06AF54EB, GameType.DS)]
    public class MsgSceneMoved : MsgBase
    {
    }

    [RTTI.Serializable(0xC0225F5C69C4F347, GameType.DS)]
    public class MsgSceneRestrictionChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x882AC0B6608B731C, GameType.DS)]
    public class MsgSceneStart : MsgBase
    {
    }

    [RTTI.Serializable(0x5E786FC4A205CD9, GameType.DS)]
    public class MsgSceneStop : MsgScene
    {
        [RTTI.Member(0, 0x18)] public CPtr<Scene> StoppedScene;
    }

    [RTTI.Serializable(0x15BCC9E8DF6466FA, GameType.DS)]
    public class MsgSceneUpdate : MsgScene
    {
        [RTTI.Member(0, 0x18, true)] public float DeltaTime;
    }

    [RTTI.Serializable(0x3119CE2C92ADAAF4, GameType.DS)]
    public class MsgSelectAmmoSlot : MsgBase
    {
    }

    [RTTI.Serializable(0x963EFDA5273102D9, GameType.DS)]
    public class MsgSelectInventoryItem : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x923D781DCD0B026D, GameType.DS)]
    public class MsgSelectPlayerCameraMode : MsgBase
    {
    }

    [RTTI.Serializable(0x94CEE3F396061DF0, GameType.DS)]
    public class MsgSequenceMessageJump : MsgBase
    {
    }

    [RTTI.Serializable(0x67BE2C936D5340F6, GameType.DS)]
    public class MsgSequenceMessageStart : MsgScene
    {
        [RTTI.Member(0, 0x18)] public String Message;
    }

    [RTTI.Serializable(0x349D3224D158A234, GameType.DS)]
    public class MsgSequenceMessageStop : MsgScene
    {
        [RTTI.Member(0, 0x18)] public String Message;
    }

    [RTTI.Serializable(0xFD892B94E3BCBB52, GameType.DS)]
    public class MsgSequenceNetworkFinished : MsgBase
    {
    }

    [RTTI.Serializable(0xFCBF2979C393E7C4, GameType.DS)]
    public class MsgSequenceNetworkNodeBase : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<SequenceNetworkNodeInstance> Node;
    }

    [RTTI.Serializable(0x322050FBA4AAC8CD, GameType.DS)]
    public class MsgSequenceNetworkNodeFinished : MsgBase
    {
    }

    [RTTI.Serializable(0xE87C08D93D7FC3DD, GameType.DS)]
    public class MsgSequenceNetworkNodeStarted : MsgBase
    {
    }

    [RTTI.Serializable(0x18DDB360C201AF42, GameType.DS)]
    public class MsgSequenceNetworkStarted : MsgBase
    {
    }

    [RTTI.Serializable(0x795E4036AF2243A8, GameType.DS)]
    public class MsgSequenceNetworkUseLocationActivated : MsgSequenceNetworkNodeBase
    {
    }

    [RTTI.Serializable(0x41B93B91147CDAF9, GameType.DS)]
    public class MsgSequenceNetworkUseLocationDeactivated : MsgSequenceNetworkNodeBase
    {
    }

    [RTTI.Serializable(0xF8C99CF3ED58C55B, GameType.DS)]
    public class MsgSequenceNetworkVariableUnbound : MsgBase
    {
    }

    [RTTI.Serializable(0x4847B05E990BEB09, GameType.DS)]
    public class MsgSetAttackEvent : MsgBase
    {
    }

    [RTTI.Serializable(0xCE5890B926D9206, GameType.DS)]
    public class MsgSetCameraVisibility : MsgBase
    {
    }

    [RTTI.Serializable(0xC8279BACA4BBBE6A, GameType.DS)]
    public class MsgSetCloakAiBodyVisualStimuli : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool Enabled;
    }

    [RTTI.Serializable(0xE5D9F434BB88C8AD, GameType.DS)]
    public class MsgSetDesiredStance : MsgBase
    {
    }

    [RTTI.Serializable(0x225F2C34191A3C39, GameType.DS)]
    public class MsgSetFactorModelUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x17E8FB4F3004461C, GameType.DS)]
    public class MsgSetFloatValue : MsgBase
    {
    }

    [RTTI.Serializable(0x51BDE6D773ED51D8, GameType.DS)]
    public class MsgSetGameActorId : MsgBase
    {
    }

    [RTTI.Serializable(0xCA9C1A05ACA86537, GameType.DS)]
    public class MsgSetPotentialContextualActionsOnVictim : MsgBase
    {
    }

    [RTTI.Serializable(0x2E8971C82D26C314, GameType.DS)]
    public class MsgSetProjectileDestroyed : MsgBase
    {
    }

    [RTTI.Serializable(0x13AE02C3E9EDCEB4, GameType.DS)]
    public class MsgShadowCastingChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x23DE7C14C7037A12, GameType.DS)]
    public class MsgShieldActivated : MsgBase
    {
    }

    [RTTI.Serializable(0x881E406A6BD3DD14, GameType.DS)]
    public class MsgShieldDeactivated : MsgBase
    {
    }

    [RTTI.Serializable(0x4598730517967E12, GameType.DS)]
    public class MsgShouldUpdateFloorSlopeAngle : MsgBase
    {
    }

    [RTTI.Serializable(0xC45EE11BD5A8322D, GameType.DS)]
    public class MsgShouldUpdateNearbyAnnotations : MsgBase
    {
    }

    [RTTI.Serializable(0xC8A9E9F55126CD7, GameType.DS)]
    public class MsgShowHeadgearChanged : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool Show;
    }

    [RTTI.Serializable(0x97D07C33B230EC82, GameType.DS)]
    public class MsgShowPlayerNotification : MsgBase
    {
    }

    [RTTI.Serializable(0x40C5842922F6738C, GameType.DS)]
    public class MsgShowSubtitle : MsgBase
    {
    }

    [RTTI.Serializable(0x5A8198928753A775, GameType.DS)]
    public class MsgSignalBase : MsgBase
    {
    }

    [RTTI.Serializable(0xD82551AD0FD5469A, GameType.DS)]
    public class MsgSleepAIIndividual : MsgBase
    {
    }

    [RTTI.Serializable(0x1EF2DD21C088FFD2, GameType.DS)]
    public class MsgSpawnEntityNotify : MsgScene
    {
        [RTTI.Member(0, 0x18)] public GGUUID OriginalUUID;
        [RTTI.Member(1, 0x28)] public bool IsSpawn;
    }

    [RTTI.Serializable(0xF213B387F902B89, GameType.DS)]
    public class MsgSpawnedInAir : MsgBase
    {
    }

    [RTTI.Serializable(0xB4ECBCFC84E1590E, GameType.DS)]
    public class MsgSpawnedWave : MsgBase
    {
    }

    [RTTI.Serializable(0x286ECC9D16358CAF, GameType.DS)]
    public class MsgSpeedModifierRemoved : MsgBase
    {
    }

    [RTTI.Serializable(0x1373FD09784B629F, GameType.DS)]
    public class MsgSpotAndMarkDetectedEntity : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> DetectedEntity;
        [RTTI.Member(1, 0x18)] public CPtr<SpottableComponent> DetectedSpottableComponent;
        [RTTI.Member(2, 0x20)] public CPtr<Entity> SpotterEntity;
        [RTTI.Member(3, 0x28)] public float MaxDistance;
    }

    [RTTI.Serializable(0xB87680435832ADD, GameType.DS)]
    public class MsgStaggered : MsgBase
    {
    }

    [RTTI.Serializable(0x1BD34212AD75CEA6, GameType.DS)]
    public class MsgStartBlocking : MsgBase
    {
    }

    [RTTI.Serializable(0x99E4A700FB577C55, GameType.DS)]
    public class MsgStartCameraUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xF6A2317CF0522F0F, GameType.DS)]
    public class MsgStartContextualEmotion : MsgBase
    {
    }

    [RTTI.Serializable(0x89AB7C2E68317B24, GameType.DS)]
    public class MsgStartDismount : MsgMountBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x5F431749E8457A62, GameType.DS)]
    public class MsgStartMount : MsgMountBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0x62B27D1C59F9BFFC, GameType.DS)]
    public class MsgStartTalk : MsgBase
    {
    }

    [RTTI.Serializable(0xF855AAB0F5875A4, GameType.DS)]
    public class MsgStartUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0xE14EA597D3B1F97D, GameType.DS)]
    public class MsgStartedHealthRegeneration : MsgBase
    {
    }

    [RTTI.Serializable(0x1E8A152562855FF1, GameType.DS)]
    public class MsgStartedLooting : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> LootingEntity;
        [RTTI.Member(2, 0x58)] public EInventoryItemRarity ItemRarity;
    }

    [RTTI.Serializable(0xAFFA6044F4272062, GameType.DS)]
    public class MsgStartedStow : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x2494366AD1FD7EAA, GameType.DS)]
    public class MsgStartedWield : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x90779E03E911C05B, GameType.DS)]
    public class MsgStateMachineEnterState : MsgBase
    {
    }

    [RTTI.Serializable(0x5D16F32DA793259C, GameType.DS)]
    public class MsgStateMachineLeaveState : MsgBase
    {
    }

    [RTTI.Serializable(0xDD9B6C98130FF6A9, GameType.DS)]
    public class MsgStick : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> ContactEntity;
        [RTTI.Member(1, 0x20)] public CPtr<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(2, 0x28)] public WorldTransform WorldTransform;
        [RTTI.Member(3, 0x70)] public Vec3 Normal;
    }

    [RTTI.Serializable(0x1B6BF719CC78E600, GameType.DS)]
    public class MsgStickIgnored : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> IgnoredEntity;
        [RTTI.Member(1, 0x18)] public CPtr<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(2, 0x20)] public WorldTransform WorldTransform;
    }

    [RTTI.Serializable(0xA30F2A3DB218851F, GameType.DS)]
    public class MsgStopBlending : MsgBase
    {
    }

    [RTTI.Serializable(0xD574508008739247, GameType.DS)]
    public class MsgStopBlocking : MsgBase
    {
    }

    [RTTI.Serializable(0x89DA9D51587FAABB, GameType.DS)]
    public class MsgStopDelayingDeath : MsgBase
    {
    }

    [RTTI.Serializable(0xF9142C3FB40438C5, GameType.DS)]
    public class MsgStopDismount : MsgMountBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x4D0A28AD651160A, GameType.DS)]
    public class MsgStopFacialAnimation : MsgBase
    {
    }

    [RTTI.Serializable(0x65186560939BEB6A, GameType.DS)]
    public class MsgStopMount : MsgMountBase
    {
        [RTTI.Member(2, 0x58, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0x152C7EE2518DC6A8, GameType.DS)]
    public class MsgStopPlayerTool : MsgBase
    {
    }

    [RTTI.Serializable(0x18968E10B5814A05, GameType.DS)]
    public class MsgStopTalk : MsgBase
    {
    }

    [RTTI.Serializable(0xA7DAB4890481168, GameType.DS)]
    public class MsgStoppedHealthRegeneration : MsgBase
    {
        [RTTI.Member(0, 0x10)] public bool FinishedRegeneration;
    }

    [RTTI.Serializable(0xF7BD2D2D296A98AA, GameType.DS)]
    public class MsgStunnedStatus : MsgBase
    {
    }

    [RTTI.Serializable(0x397BAC7B6D80D10A, GameType.DS)]
    public class MsgSuspendController : MsgBase
    {
    }

    [RTTI.Serializable(0x95F72BC93EF7C09A, GameType.DS)]
    public class MsgTagged : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x28)] public bool IsTagged;
        [RTTI.Member(2, 0x29)] public bool IsTaggedByFocusMode;
    }

    [RTTI.Serializable(0x58AFA99D239993EF, GameType.DS)]
    public class MsgThreat : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Observer;
    }

    [RTTI.Serializable(0xB72040AFCD3448FB, GameType.DS)]
    public class MsgThreatIdentified : MsgThreat
    {
    }

    [RTTI.Serializable(0xF620E29B358F3EA2, GameType.DS)]
    public class MsgThreatSuspected : MsgThreat
    {
    }

    [RTTI.Serializable(0xDFC65CDFEEB578C0, GameType.DS)]
    public class MsgTrackerHidden : MsgBase
    {
    }

    [RTTI.Serializable(0x7F29BA9BE50F37D5, GameType.DS)]
    public class MsgTrackerShown : MsgBase
    {
    }

    [RTTI.Serializable(0x8AA94A675CD40513, GameType.DS)]
    public class MsgTrigger : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x40)] public Ref<CollisionTrigger> Trigger;
    }

    [RTTI.Serializable(0x3CD22A211BE6E9FE, GameType.DS)]
    public class MsgTriggerComponentEntered : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> TriggeringEntity;
        [RTTI.Member(1, 0x18)] public CPtr<TriggerComponentResource> TriggerComponentResource;
        [RTTI.Member(2, 0x20)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x95860B3188997D1A, GameType.DS)]
    public class MsgTriggerComponentExited : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> TriggeringEntity;
        [RTTI.Member(1, 0x18)] public CPtr<TriggerComponentResource> TriggerComponentResource;
        [RTTI.Member(2, 0x20)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0xC8D3794EAF57AFA7, GameType.DS)]
    public class MsgTriggerCustomEvent : MsgBase
    {
        [RTTI.Member(0, 0x10)] public String Identifier;
    }

    [RTTI.Serializable(0xAC8765ADF908BE10, GameType.DS)]
    public class MsgTriggerEntered : MsgTrigger
    {
    }

    [RTTI.Serializable(0x6FCEB8C61CF01888, GameType.DS)]
    public class MsgTriggerExited : MsgTrigger
    {
    }

    [RTTI.Serializable(0x17680B1C1B9E9F0D, GameType.DS)]
    public class MsgTriggerExposedAction : MsgTriggerCustomEvent
    {
    }

    [RTTI.Serializable(0xAC890C024B46037B, GameType.DS)]
    public class MsgTriggerPerkAbility : MsgBase
    {
    }

    [RTTI.Serializable(0xBCA8B187F6601CBB, GameType.DS)]
    public class MsgTriggerProjectileExplosion : MsgBase
    {
    }

    [RTTI.Serializable(0xAC23227A0E93D035, GameType.DS)]
    public class MsgTriggerRemoved : MsgTrigger
    {
    }

    [RTTI.Serializable(0x40DED29D5ACBAE1D, GameType.DS)]
    public class MsgUnassignedFromInventory : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0x5B01F4338F110EF0, GameType.DS)]
    public class MsgUnboundFromSequence : MsgBase
    {
    }

    [RTTI.Serializable(0x320D1F3C4624AA25, GameType.DS)]
    public class MsgUnequipped : MsgInventoryBase
    {
    }

    [RTTI.Serializable(0xA9E5E3C988332AE4, GameType.DS)]
    public class MsgUnstick : MsgBase
    {
    }

    [RTTI.Serializable(0xBB87B633BCE338A2, GameType.DS)]
    public class MsgUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x670E7369DF167F24, GameType.DS)]
    public class MsgUpdateAIFact : MsgBase
    {
    }

    [RTTI.Serializable(0x5AB5B225D34B556D, GameType.DS)]
    public class MsgUpdateAimAssist : MsgBase
    {
    }

    [RTTI.Serializable(0x1E21DB0A3DD1C438, GameType.DS)]
    public class MsgUpdateAimMagnets : MsgBase
    {
    }

    [RTTI.Serializable(0xB877FF349FCB4F17, GameType.DS)]
    public class MsgUpdateBaseTransform : MsgBase
    {
    }

    [RTTI.Serializable(0xB97231CEA47BE46F, GameType.DS)]
    public class MsgUpdateBlending : MsgBase
    {
    }

    [RTTI.Serializable(0x1A795BAF7735517, GameType.DS)]
    public class MsgUpdateCameraVisibility : MsgBase
    {
    }

    [RTTI.Serializable(0x8C86DF17D88B8551, GameType.DS)]
    public class MsgUpdateFacialAnimValues : MsgBase
    {
    }

    [RTTI.Serializable(0xAC1639A0DFC50B7F, GameType.DS)]
    public class MsgUpdateGestureTarget : MsgBase
    {
    }

    [RTTI.Serializable(0x28AD421E0C946B30, GameType.DS)]
    public class MsgUpdateJointTransform : MsgBase
    {
    }

    [RTTI.Serializable(0x295A043D8F46EAD9, GameType.DS)]
    public class MsgUpdateMeshHierarchy : MsgBase
    {
    }

    [RTTI.Serializable(0xDAAE7D9AE96C167C, GameType.DS)]
    public class MsgUse : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> User;
        [RTTI.Member(1, 0x21)] public bool IsUsed;
    }

    [RTTI.Serializable(0x43B79DF649806F57, GameType.DS)]
    public class MsgUseCancelled : MsgBase
    {
    }

    [RTTI.Serializable(0xE01E477B9366CD82, GameType.DS)]
    public class MsgUseInventoryItem : MsgBase
    {
    }

    [RTTI.Serializable(0xD9B5CC472BD8B0EC, GameType.DS)]
    public class MsgUseLocationClaimed : MsgSceneEntityBase
    {
        [RTTI.Member(1, 0x0)] public CPtr<Entity> User;
    }

    [RTTI.Serializable(0x23CA41FFA2BBDF5D, GameType.DS)]
    public class MsgUseLocationClaimedReleased : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> User;
    }

    [RTTI.Serializable(0x84DAB5BD3AC23F96, GameType.DS)]
    public class MsgUseLocationOwnershipFailed : MsgBase
    {
    }

    [RTTI.Serializable(0x9299AF7A845629EF, GameType.DS)]
    public class MsgUseLocationReleaseClaim : MsgBase
    {
    }

    [RTTI.Serializable(0x2560736137EFC18C, GameType.DS)]
    public class MsgUsePlayerTool : MsgBase
    {
    }

    [RTTI.Serializable(0x1593F1B87BC90466, GameType.DS)]
    public class MsgUseSmartObjectBase : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> SmartObject;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> User;
    }

    [RTTI.Serializable(0xCAA76C6F772923C8, GameType.DS)]
    public class MsgUsedEntity : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> UsedEntity;
    }

    [RTTI.Serializable(0x7975E373FCCAF1DB, GameType.DS)]
    public class MsgUserEndUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0x6599990BD59F5847, GameType.DS)]
    public class MsgUserStartUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0xC815B5E2CE1BE907, GameType.DS)]
    public class MsgValidatePositions : MsgBase
    {
    }

    [RTTI.Serializable(0x1F23EA962F8A0A6C, GameType.DS)]
    public class MsgVec3FactChanged : MsgFactChangedBase
    {
        [RTTI.Member(1, 0x20)] public CPtr<Vec3Fact> Fact;
        [RTTI.Member(2, 0x30)] public Vec3 Value;
    }

    [RTTI.Serializable(0xDA81ED8CCB63CB5E, GameType.DS)]
    public class MsgVehicleDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x89E71750BF49F3D1, GameType.DS)]
    public class MsgVehiclePassenger : MsgBase
    {
    }

    [RTTI.Serializable(0x1F6429F3A4A62CA2, GameType.DS)]
    public class MsgVehicleRequest : MsgBase
    {
    }

    [RTTI.Serializable(0x3C3DE295F5479EA2, GameType.DS)]
    public class MsgVisibilityChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x9CCE0F2244CE2A51, GameType.DS)]
    public class MsgVoiceBase : MsgBase
    {
    }

    [RTTI.Serializable(0xDA0E92B42B1F5455, GameType.DS)]
    public class MsgWantsDismount : MsgBase
    {
    }

    [RTTI.Serializable(0xDBEBF3F59BF6F39D, GameType.DS)]
    public class MsgWantsQuickWieldStow : MsgBase
    {
    }

    [RTTI.Serializable(0x2A4C5920618176DF, GameType.DS)]
    public class MsgWantsToDoMovingStart : MsgBase
    {
    }

    [RTTI.Serializable(0x341D6BD3DF3FFCFD, GameType.DS)]
    public class MsgWeaponChargeAborted : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0xA14A34E78BF04287, GameType.DS)]
    public class MsgWeaponFired : MsgBase
    {
        [RTTI.Member(0, 0x10)] public CPtr<Entity> Weapon;
        [RTTI.Member(1, 0x18)] public bool Silenced;
    }

    [RTTI.Serializable(0x796CBA37A04344CF, GameType.DS)]
    public class MsgWeaponModeBase : MsgBase
    {
    }

    [RTTI.Serializable(0xFD0EF6C8E5356BA5, GameType.DS)]
    public class MsgWeaponModeChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x5211F138F2D2E39D, GameType.DS)]
    public class MsgWorldDataMapOverlayUpdated : MsgBase
    {
    }

    [RTTI.Serializable(0xFD23C45BE8CCE273, GameType.DS)]
    public class MsgWorldDataMapUpdated : MsgBase
    {
    }

    [RTTI.Serializable(0xF1A413A49F82CCA2, GameType.DS)]
    public class MsgWorldDataTileUpdated : MsgBase
    {
    }

    [RTTI.Serializable(0x120F367BF1535335, GameType.DS)]
    public class MsgWorldPositionFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(1, 0x20)] public CPtr<WorldPositionFact> Fact;
        [RTTI.Member(2, 0x28)] public WorldPosition Value;
    }

    [RTTI.Serializable(0xADE22FDC23E8799B, GameType.DS)]
    public class MsgXpChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x88452E9E6ECC11AA, GameType.DS)]
    public class MsgZoomIndexUpdated : MsgBase
    {
        [RTTI.Member(0, 0x10)] public int CurrentZoomIndex;
        [RTTI.Member(1, 0x14)] public int PreviousZoomIndex;
    }

    [RTTI.Serializable(0x917571152D30804A, GameType.DS)]
    public class MultiAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Array<CPtr<EntityAction>> Actions;
    }

    [RTTI.Serializable(0x44797727FDBE5168, GameType.DS)]
    public class MultiBlendedMeshInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC0, "General")] public Ref<MultiBlendedMeshResource> Resource;
    }

    [RTTI.Serializable(0x792E1D1FAB5A50CB, GameType.DS)]
    public class MultiBlendedMeshResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<BlendedMeshEntry> BlendedMeshes;
    }

    [RTTI.Serializable(0xF0693E83B8A4C398, GameType.DS)]
    public class MultiMeshActorResource : ModelActorResource
    {
        [RTTI.Member(20, 0x60, "Logic")] public Ref<SkinnedModelResource> SkinnedModelResource;
    }

    [RTTI.Serializable(0xA224F802A4670C0C, GameType.DS)]
    public class MultiMeshAnimationEventResource : FullBodyAnimationEventResourceBase
    {
        [RTTI.Member(17, 0x60, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
    }

    [RTTI.Serializable(0x9FC36C15337A680A, GameType.DS)]
    public class MultiMeshResource : MeshResourceBase
    {
        [RTTI.Member(7, 0x80, "Mesh")] public Array<MultiMeshResourcePart> Parts;
    }

    [RTTI.Serializable(0x467B9AC953B5146A, GameType.DS)]
    public class MultiMeshResourcePart
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x8)] public WorldTransform Transform;
    }

    [RTTI.Serializable(0xF3321B69AF505074, GameType.DS)]
    public class MultiSpawnpoint : SpawnpointBase
    {
        [RTTI.Member(28, 0x160, "Item")] public int Amount;
    }

    [RTTI.Serializable(0xC08B50DEFBC7815A, GameType.DS)]
    public class MultiSpawnpointSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x736A0CB40CCBCFBF, GameType.DS)]
    public class MurmurHashValue
    {
        [RTTI.Member(0, 0x0)] public uint8 Data0;
        [RTTI.Member(1, 0x1)] public uint8 Data1;
        [RTTI.Member(2, 0x2)] public uint8 Data2;
        [RTTI.Member(3, 0x3)] public uint8 Data3;
        [RTTI.Member(4, 0x4)] public uint8 Data4;
        [RTTI.Member(5, 0x5)] public uint8 Data5;
        [RTTI.Member(6, 0x6)] public uint8 Data6;
        [RTTI.Member(7, 0x7)] public uint8 Data7;
        [RTTI.Member(8, 0x8)] public uint8 Data8;
        [RTTI.Member(9, 0x9)] public uint8 Data9;
        [RTTI.Member(10, 0xA)] public uint8 Data10;
        [RTTI.Member(11, 0xB)] public uint8 Data11;
        [RTTI.Member(12, 0xC)] public uint8 Data12;
        [RTTI.Member(13, 0xD)] public uint8 Data13;
        [RTTI.Member(14, 0xE)] public uint8 Data14;
        [RTTI.Member(15, 0xF)] public uint8 Data15;
    }

    [RTTI.Serializable(0x79826860DD686F67, GameType.DS)]
    public class MusicClipEvent : MusicEvent
    {
        [RTTI.Member(3, 0x28)] public MusicTime Duration;
        [RTTI.Member(4, 0x30)] public EMusicClipType Type;
        [RTTI.Member(5, 0x38)] public Ref<MusicClipTrack> Track;
        [RTTI.Member(6, 0x40)] public Ref<WaveResource> Wave;
        [RTTI.Member(7, 0x48)] public Ref<EnvelopeResource> Envelope;
    }

    [RTTI.Serializable(0xBE7FB17361A78DE9, GameType.DS)]
    public class MusicClipTrack : MusicTrack
    {
        [RTTI.Member(2, 0x20)] public LinearGainFloat Gain;
        [RTTI.Member(3, 0x28)] public Ref<SoundGroup> SoundGroup;
    }

    [RTTI.Serializable(0x315457E09D7F3F5F, GameType.DS)]
    public class MusicCue : MusicCueBase
    {
        [RTTI.Member(6, 0x68)] public Array<Ref<MusicEvent>> Events;
        [RTTI.Member(8, 0x88, "Settings")] public float InitialTempo;
        [RTTI.Member(9, 0x8C, "Settings")] public MusicTimeSignature InitialTimeSignature;
        [RTTI.Member(10, 0x90, "Settings")] public Ref<GraphConditionResource> TriggerCondition;
        [RTTI.Member(11, 0x98, "Settings")] public Ref<MusicCue> NextCue;
    }

    [RTTI.Serializable(0xF235030BB9FD022B, GameType.DS)]
    public class MusicCueBase : InheritedAttrBase
    {
        [RTTI.Member(2, 0x28)] public InheritedMusicPriorityGroupRef PriorityGroup;
        [RTTI.Member(3, 0x38)] public InheritedLinearGainFloat Volume;
        [RTTI.Member(4, 0x40)] public InheritedMusicTransition EnterTransition;
        [RTTI.Member(5, 0x50)] public InheritedMusicTransition ExitTransition;
    }

    [RTTI.Serializable(0xBDA51664651632EC, GameType.DS)]
    public class MusicCueContainer : MusicCueBase
    {
        [RTTI.Member(6, 0x68)] public Array<Ref<MusicCueContainer>> Children;
        [RTTI.Member(7, 0x78)] public Array<Ref<MusicCue>> Cues;
    }

    [RTTI.Serializable(0x7AAD4215B60DC2DA, GameType.DS)]
    public class MusicEvent : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public BeatTime StartTime;
    }

    [RTTI.Serializable(0x2656F8AC23B192AD, GameType.DS)]
    public class MusicFactEntry : EnumFactEntry
    {
        [RTTI.Member(5, 0x28, "General")] public String ExitPresetName;
    }

    [RTTI.Serializable(0x4272C10835F3A93A, GameType.DS)]
    public class MusicJumpEvent : MusicMarkerEvent
    {
        [RTTI.Member(3, 0x28)] public Ref<MusicEvent> Target;
        [RTTI.Member(4, 0x30)] public EMusicJumpConditionType ConditionType;
        [RTTI.Member(5, 0x38)] public Ref<GraphConditionResource> GraphCondition;
    }

    [RTTI.Serializable(0x48A62C02702FE4E9, GameType.DS)]
    public class MusicMarkerEvent : MusicEvent
    {
    }

    [RTTI.Serializable(0x4C649B957695EED5, GameType.DS)]
    public class MusicMarkerTrack : MusicTrack
    {
    }

    [RTTI.Serializable(0x4A1BC111D6FCA7C5, GameType.DS)]
    public class MusicPriorityGroup : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x6235DD772D17BF28, GameType.DS)]
    public class MusicProject : Resource
    {
        [RTTI.Member(2, 0x28)] public Ref<MusicCueContainer> RootCueContainer;
        [RTTI.Member(3, 0x30)] public Array<Ref<MusicClipTrack>> Tracks;
        [RTTI.Member(4, 0x40)] public Ref<MusicMarkerTrack> MarkerTrack;
        [RTTI.Member(5, 0x48)] public Array<Ref<MusicPriorityGroup>> PriorityGroups;
    }

    [RTTI.Serializable(0xEBB96BDA4F16E127, GameType.DS)]
    public class MusicSubmixBinding
    {
        [RTTI.Member(0, 0x0)] public String TrackName;
        [RTTI.Member(1, 0x8)] public Ref<SubmixResource> Submix;
    }

    [RTTI.Serializable(0x91B5DCDEF2134C2E, GameType.DS)]
    public class MusicTempoEvent : MusicEvent
    {
        [RTTI.Member(3, 0x28)] public float Tempo;
    }

    [RTTI.Serializable(0x1F1EE0CD6857DAB7, GameType.DS)]
    public class MusicTimeSignature
    {
        [RTTI.Member(0, 0x0)] public uint8 Upper;
        [RTTI.Member(1, 0x1)] public ETimeSignatureDenominator Lower;
    }

    [RTTI.Serializable(0x977587490C4246AC, GameType.DS)]
    public class MusicTimeSignatureEvent : MusicEvent
    {
        [RTTI.Member(3, 0x28)] public MusicTimeSignature TimeSignature;
    }

    [RTTI.Serializable(0x662257769A738F83, GameType.DS)]
    public class MusicTrack : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x805FD2CA436806F, GameType.DS)]
    public class MusicTransition
    {
        [RTTI.Member(0, 0x0)] public EMusicSyncMode SyncMode;
        [RTTI.Member(2, 0x1)] public EMusicTransitionUnit Unit;
        [RTTI.Member(1, 0x4)] public float Duration;
        [RTTI.Member(3, 0x8)] public float CurveExponent;
    }

    [RTTI.Serializable(0x420AA7123760D010, GameType.DS)]
    public class NPCSchedule : GameSchedule
    {
    }

    [RTTI.Serializable(0x7FA53DF9BD05686C, GameType.DS)]
    public class NPCScheduleActivity : RTTIObject
    {
    }

    [RTTI.Serializable(0xA8B8DD1A7442B3FC, GameType.DS)]
    public class NPCScheduleActivityResource : Resource
    {
        [RTTI.Member(4, 0x20)] public CPtr<EntityAction> StartAction;
        [RTTI.Member(5, 0x28)] public CPtr<EntityAction> StopAction;
        [RTTI.Member(3, 0x30)] public bool IsImmediateAction;
        [RTTI.Member(2, 0x38)] public Ref<SmartObjectDesireComponentResource> SmartObjectDesireComponent;
    }

    [RTTI.Serializable(0x83FFA638167EFB64, GameType.DS)]
    public class NPCScheduleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD86D2E15FB2CD054, GameType.DS)]
    public class NPCScheduleComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<NPCScheduleResource> NPCSchedule;
    }

    [RTTI.Serializable(0xD4F303CC74F4A9BA, GameType.DS)]
    public class NPCScheduleEntry : GameScheduleEntry
    {
    }

    [RTTI.Serializable(0x8729332034FD858, GameType.DS)]
    public class NPCScheduleEntryGroupToken : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x88A25DED97FB4B91, GameType.DS)]
    public class NPCScheduleEntryResource : GameScheduleEntryResource
    {
        [RTTI.Member(6, 0x30)] public Ref<NPCScheduleLocationResource> Location;
        [RTTI.Member(7, 0x38)] public Ref<NPCScheduleActivityResource> Activity;
        [RTTI.Member(8, 0x40)] public Ref<NPCScheduleEntryGroupToken> GroupToken;
        [RTTI.Member(9, 0x48)] public Ref<EnumFactEntry> FormationPosition;
        [RTTI.Member(10, 0x50)] public bool AllowPairWalking;
    }

    [RTTI.Serializable(0x6E96B5863A38847, GameType.DS)]
    public class NPCScheduleLocation : RTTIObject
    {
    }

    [RTTI.Serializable(0x8F85349231976D66, GameType.DS)]
    public class NPCScheduleLocationArea : NPCScheduleLocation
    {
    }

    [RTTI.Serializable(0xCE14D3BD775B0AE7, GameType.DS)]
    public class NPCScheduleLocationAreaResource : NPCScheduleLocationResource
    {
        [RTTI.Member(2, 0x20)] public UUIDRef<SmartObjectArea> Area;
        [RTTI.Member(3, 0x30)] public Ref<AIContextHintResource> MoveContext;
    }

    [RTTI.Serializable(0x68FD52A687804029, GameType.DS)]
    public class NPCScheduleLocationResource : Resource
    {
    }

    [RTTI.Serializable(0x6D9C0437E52DB856, GameType.DS)]
    public class NPCScheduleManager
    {
    }

    [RTTI.Serializable(0x785291E44A3711FC, GameType.DS)]
    public class NPCScheduleManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xED4BEFE502AB9BB7, GameType.DS)]
    public class NPCScheduleResource : GameScheduleResource
    {
    }

    [RTTI.Serializable(0xEAAD0322FB4AD67F, GameType.DS)]
    public class NPCScheduleResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3ADEDA239F6CB7DD, GameType.DS)]
    public class NameToSoundParameterMapping
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String SoundParameterName;
    }

    [RTTI.Serializable(0x2513B23C1BF19522, GameType.DS)]
    public class NamedDataSourceResource : DataSourceResource
    {
        [RTTI.Member(6, 0x28, "Properties")] public String DataSourceName;
    }

    [RTTI.Serializable(0x6DA3308D5F530C0F, GameType.DS)]
    public class NamedSoundResource : ResourceWithNameHash
    {
        [RTTI.Member(5, 0x28, "Sound")] public Ref<SoundResource> SoundResource;
    }

    [RTTI.Serializable(0xB4295EF346704056, GameType.DS)]
    public class NavMesh : CoreObject
    {
        [RTTI.Member(3, 0x50, "General")] public Array<NavMeshTileInfo> TileInfoMap;
    }

    [RTTI.Serializable(0x2FD5054F912BFE10, GameType.DS)]
    public class NavMeshArea : ParentWorldNode
    {
        [RTTI.Member(6, 0x90)] public String AreaName;
        [RTTI.Member(7, 0x98)] public Ref<TerrainHull> Hull;
        [RTTI.Member(8, 0xA0)] public Array<Ref<NavMeshAreaTag>> AreaTags;
    }

    [RTTI.Serializable(0xE508E70E58BFF721, GameType.DS)]
    public class NavMeshAreaObjectList
    {
        [RTTI.Member(0, 0x0)] public Array<CPtr<NavMeshObject>> ObjectList;
    }

    [RTTI.Serializable(0xC3F66A1DE42DBC84, GameType.DS)]
    public class NavMeshAreaSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE7898045E904E4F4, GameType.DS)]
    public class NavMeshAreaTag : Resource
    {
    }

    [RTTI.Serializable(0xD093C287EA134B40, GameType.DS)]
    public class NavMeshBuilder : CoreObject
    {
    }

    [RTTI.Serializable(0x351F2E2277BEF90B, GameType.DS)]
    public class NavMeshBuilderSettings : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float CharacterRadius;
        [RTTI.Member(4, 0x24, "General")] public float CharacterHeight;
        [RTTI.Member(7, 0x28, "General")] public float WalkableClimbWorld;
        [RTTI.Member(8, 0x2C, "General")] public float MinRegionArea;
        [RTTI.Member(6, 0x30, "General")] public float VoxelSize;
        [RTTI.Member(5, 0x34, "General")] public int TileSize;
        [RTTI.Member(9, 0x38, "General")] public float IgnoreWaterLevel;
        [RTTI.Member(10, 0x3C, "General")] public float ShallowWaterLevel;
        [RTTI.Member(11, 0x40, "General")] public bool CanSwim;
        [RTTI.Member(12, 0x41, "General")] public bool SupportsJumpLinks;
        [RTTI.Member(13, 0x42, "General")] public bool EnableDetailMesh;
        [RTTI.Member(14, 0x43, "General")] public bool IsVehicle;
        [RTTI.Member(15, 0x44, "General")] public bool DislikeUps;
        [RTTI.Member(16, 0x48, "General")] public float WalkableSlopeAngle;
    }

    [RTTI.Serializable(0x63B1FD869DE83267, GameType.DS)]
    public class NavMeshBuilderSettingsSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA267DC0F3F997799, GameType.DS)]
    public class NavMeshObject
    {
    }

    [RTTI.Serializable(0xC624327DCF08C22B, GameType.DS)]
    public class NavMeshObjectAreaList
    {
        [RTTI.Member(0, 0x8)] public Array<int> AreaList;
    }

    [RTTI.Serializable(0xD4DB22C1A44BD769, GameType.DS)]
    public class NavMeshTileInfo
    {
        [RTTI.Member(0, 0x0)] public Array<NavMeshObjectAreaList> ObjectAreaList;
        [RTTI.Member(1, 0x10)] public Array<NavMeshAreaObjectList> AreaObjectsList;
    }

    [RTTI.Serializable(0xD60339D719002A17, GameType.DS)]
    public class NetControlledEntity : NetEntity
    {
    }

    [RTTI.Serializable(0xB402AE31106D85DD, GameType.DS)]
    public class NetEntity : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0x2FA3045B01273CE7, GameType.DS)]
    public class NetErrorHandlerGame : RTTIObject
    {
    }

    [RTTI.Serializable(0xED5B1C08E13F8697, GameType.DS)]
    public class NetExplosion : NetEntity
    {
    }

    [RTTI.Serializable(0x24DDF654DA3026DC, GameType.DS)]
    public class NetHumanoid : NetControlledEntity
    {
    }

    [RTTI.Serializable(0xC197BFB4E13BBB76, GameType.DS)]
    public class NetManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xA35FA17871EB1762, GameType.DS)]
    public class NetManagerGame : RTTIObject
    {
    }

    [RTTI.Serializable(0x824F2495740E510E, GameType.DS)]
    public class NetMissionManager : NetEntity
    {
    }

    [RTTI.Serializable(0x96519E38468DEC3D, GameType.DS)]
    public class NetMutex : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0xF5760F6AE3A45E5, GameType.DS)]
    public class NetNpManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x2A044B6CB34D0C95, GameType.DS)]
    public class NetPartyManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x732AD635F962FD11, GameType.DS)]
    public class NetPlayer : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD3CCC3EFDFE604D5, GameType.DS)]
    public class NetPlayerGame : NetPlayer
    {
    }

    [RTTI.Serializable(0x9BCE956A0BF86C87, GameType.DS)]
    public class NetPlayerManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xD16D3EB96EEBB7D, GameType.DS)]
    public class NetReplicatedObject : RTTIObject
    {
    }

    [RTTI.Serializable(0x8E657D9BF73D7B0A, GameType.DS)]
    public class NetSequence : NetEntity
    {
    }

    [RTTI.Serializable(0x69F719F3C1EAAA99, GameType.DS)]
    public class NetSessionManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xBF07B684CD5FBF9, GameType.DS)]
    public class NetThrowable : NetEntity
    {
    }

    [RTTI.Serializable(0xD330460F48989BBD, GameType.DS)]
    public class NetworkLink : RTTIObject
    {
    }

    [RTTI.Serializable(0x45D966D5F2DB23D9, GameType.DS)]
    public class NodeConstantsInstance
    {
        [RTTI.Member(1, 0x0, "General")] public Ref<NodeConstantsResource> Resource;
    }

    [RTTI.Serializable(0xA5C881DE0556BA88, GameType.DS)]
    public class NodeConstantsResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<ProgramParameter> Parameters;
        [RTTI.Member(3, 0x40)] public Array<int> ExposedObjectsIndices;
        [RTTI.Member(4, 0x50)] public Array<int> ExposedUUIDRefIndices;
    }

    [RTTI.Serializable(0x9CE1F71EFDDFBC5, GameType.DS)]
    public class NodeGraphAIBehaviorGroupVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<AIBehaviorGroup> Object;
    }

    [RTTI.Serializable(0xAD283F5A14A67488, GameType.DS)]
    public class NodeGraphAdvancedTypesGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x34A0DAD851B17444, GameType.DS)]
    public class NodeGraphArtPartsAnimationResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsAnimationResource> Object;
    }

    [RTTI.Serializable(0x6D1BAC1D5EF3922F, GameType.DS)]
    public class NodeGraphArtPartsCoverAndAnimResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsCoverAndAnimResource> Object;
    }

    [RTTI.Serializable(0xB559137888B4AF4C, GameType.DS)]
    public class NodeGraphArtPartsCoverModelResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsCoverModelResource> Object;
    }

    [RTTI.Serializable(0x1210F0496A4EFCF4, GameType.DS)]
    public class NodeGraphArtPartsEffectGroupResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsEffectGroupResource> Object;
    }

    [RTTI.Serializable(0x3E2C8BE540C0161D, GameType.DS)]
    public class NodeGraphArtPartsEffectResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsEffectResource> Object;
    }

    [RTTI.Serializable(0x7FB6231F75262BC1, GameType.DS)]
    public class NodeGraphArtPartsExtraResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsExtraResource> Object;
    }

    [RTTI.Serializable(0xD4A80FAE8D8C7237, GameType.DS)]
    public class NodeGraphArtPartsSubModelExtraResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsSubModelExtraResource> Object;
    }

    [RTTI.Serializable(0x8A457C45CDE6C254, GameType.DS)]
    public class NodeGraphArtPartsSubModelResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsSubModelResource> Object;
    }

    [RTTI.Serializable(0xD5F40142F547397, GameType.DS)]
    public class NodeGraphArtPartsSubModelWithChildrenResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsSubModelWithChildrenResource> Object;
    }

    [RTTI.Serializable(0x6A4754D83E3C8CA9, GameType.DS)]
    public class NodeGraphArtPartsVariationResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ArtPartsVariationResource> Object;
    }

    [RTTI.Serializable(0x8B8AA0108576D675, GameType.DS)]
    public class NodeGraphAttachedLightsComponentResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<AttachedLightsComponentResource> Object;
    }

    [RTTI.Serializable(0xCC3AA52154179AB6, GameType.DS)]
    public class NodeGraphBodyVariantInterfaceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<BodyVariantInterface> Object;
    }

    [RTTI.Serializable(0xB3994125219444A2, GameType.DS)]
    public class NodeGraphBodyVariantUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<BodyVariant> Object;
    }

    [RTTI.Serializable(0xCB340CE73DEDFB81, GameType.DS)]
    public class NodeGraphBoolVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public bool Value;
    }

    [RTTI.Serializable(0xCC2EEDACB6303A61, GameType.DS)]
    public class NodeGraphBooleanFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<BooleanFact> Object;
    }

    [RTTI.Serializable(0x7D4B954AB5206DB1, GameType.DS)]
    public class NodeGraphBoostMeshStreamingForArtPartsDataResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<BoostMeshStreamingForArtPartsDataResource> Object;
    }

    [RTTI.Serializable(0xF760E9D83334FDC, GameType.DS)]
    public class NodeGraphChildEntityComponentResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ChildEntityComponentResource> Object;
    }

    [RTTI.Serializable(0x5AF4D7C8E3648988, GameType.DS)]
    public class NodeGraphComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAED5F0F6B7C4FD60, GameType.DS)]
    public class NodeGraphComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<OverrideGraphProgramResource> OverrideGraphProgramResource;
        [RTTI.Member(5, 0x30, "General")] public ENodeGraphComponentReplicationMode ReplicationMode;
    }

    [RTTI.Serializable(0xCA8DD7FCABB51F4E, GameType.DS)]
    public class NodeGraphControlFlow
    {
    }

    [RTTI.Serializable(0xAB41E9D365BF877D, GameType.DS)]
    public class NodeGraphCraftingRecipeUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<CraftingRecipe> Object;
    }

    [RTTI.Serializable(0xA3B67B901BADAEBA, GameType.DS)]
    public class NodeGraphCurveResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<CurveResource> Object;
    }

    [RTTI.Serializable(0xEBD549C92C2FADFB, GameType.DS)]
    public class NodeGraphDSCoverModelPreComputedResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DSCoverModelPreComputedResource> Object;
    }

    [RTTI.Serializable(0x5F2DA5B0C9BDAABE, GameType.DS)]
    public class NodeGraphDSDeliveryPointInfoResourceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DSDeliveryPointInfoResource> Object;
    }

    [RTTI.Serializable(0x6D098756530BB1E, GameType.DS)]
    public class NodeGraphDSKnotSpaceSubEntityStreamResourceInterfaceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<DSKnotSpaceSubEntityStreamResourceInterface> Object;
    }

    [RTTI.Serializable(0xCC5B99D56C6F2C5F, GameType.DS)]
    public class NodeGraphDSKnotSpaceSubEntityStreamResourceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<DSKnotSpaceSubEntityStreamResource> Object;
    }

    [RTTI.Serializable(0x50F0DAF597974026, GameType.DS)]
    public class NodeGraphDSLocatorUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DSLocator> Object;
    }

    [RTTI.Serializable(0xDF79BC98620A17C1, GameType.DS)]
    public class NodeGraphDSMissionBaggageResourceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DSMissionBaggageResource> Object;
    }

    [RTTI.Serializable(0x411D384FB613DD3B, GameType.DS)]
    public class NodeGraphDSMissionResourceBaseUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DSMissionResourceBase> Object;
    }

    [RTTI.Serializable(0x8DDFD5C707630F2D, GameType.DS)]
    public class NodeGraphDSPlayerBodyVariantInterfaceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<DSPlayerBodyVariantInterface> Object;
    }

    [RTTI.Serializable(0x806EDA6E7F6172E5, GameType.DS)]
    public class NodeGraphDSPlayerBodyVariantUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<DSPlayerBodyVariant> Object;
    }

    [RTTI.Serializable(0x4D111292054294CD, GameType.DS)]
    public class NodeGraphDSPlayerPadCheckBoxesUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<DSPlayerPadCheckBoxes> Object;
    }

    [RTTI.Serializable(0xF9C7F461758994C2, GameType.DS)]
    public class NodeGraphDSUIMissionResultUnlockFunctionDialogResourceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DSUIMissionResultUnlockFunctionDialogResource> Object;
    }

    [RTTI.Serializable(0x9AE53F22C223B219, GameType.DS)]
    public class NodeGraphDSUIMissionResultUnlockFunctionWithTextureDialogResourceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DSUIMissionResultUnlockFunctionWithTextureDialogResource> Object;
    }

    [RTTI.Serializable(0xA21B0C82A1FB3765, GameType.DS)]
    public class NodeGraphDamageSettingsVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DamageSettings> Object;
    }

    [RTTI.Serializable(0xF16DFB7A380A80E8, GameType.DS)]
    public class NodeGraphDestructibilityPartBaseVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DestructibilityPartBase> Object;
    }

    [RTTI.Serializable(0x406B19669BDC32ED, GameType.DS)]
    public class NodeGraphDestructibilityPartGroupVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DestructibilityPartGroup> Object;
    }

    [RTTI.Serializable(0x2615A5ECA544DE71, GameType.DS)]
    public class NodeGraphDestructibilityPartVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<DestructibilityPart> Object;
    }

    [RTTI.Serializable(0x2682974DA49ED99C, GameType.DS)]
    public class NodeGraphEffectComponentResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<EffectComponentResource> Object;
    }

    [RTTI.Serializable(0x86EA429BE5A033E1, GameType.DS)]
    public class NodeGraphEntityComponentResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<EntityComponentResource> Object;
    }

    [RTTI.Serializable(0x5F3FC08B1E57C824, GameType.DS)]
    public class NodeGraphEntityPlaceHolderVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<EntityPlaceHolder> Object;
    }

    [RTTI.Serializable(0x406A661F74E598AD, GameType.DS)]
    public class NodeGraphEntityResourceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<EntityResource> Object;
    }

    [RTTI.Serializable(0x9494BD4DBCE77AD8, GameType.DS)]
    public class NodeGraphEntityResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> Object;
    }

    [RTTI.Serializable(0xA431CA1ECD2DFB96, GameType.DS)]
    public class NodeGraphEnumFactEntryVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<EnumFactEntry> Object;
    }

    [RTTI.Serializable(0x13D41FF42A033660, GameType.DS)]
    public class NodeGraphEnumFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<EnumFact> Object;
    }

    [RTTI.Serializable(0xE5081520413B85C, GameType.DS)]
    public class NodeGraphEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x35F95783448E93E2, GameType.DS)]
    public class NodeGraphEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<GraphProgramResource> StartGraphProgram;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<GraphProgramResource> StopGraphProgram;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<GraphProgramResource> UpdateGraphProgram;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<EntityActorResource> Actor;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<EntityActorResource> ReferenceActor;
        [RTTI.Member(13, 0x60, "Logic")] public bool ShouldScheduleStartProgram;
    }

    [RTTI.Serializable(0xC94537E7EBD288F4, GameType.DS)]
    public class NodeGraphFRGBAColorVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x30)] public FRGBAColor Value;
    }

    [RTTI.Serializable(0xB929F201F0C9FAFC, GameType.DS)]
    public class NodeGraphFRGBColorVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public FRGBColor Value;
    }

    [RTTI.Serializable(0x19A88577E2FFA769, GameType.DS)]
    public class NodeGraphFloatFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<FloatFact> Object;
    }

    [RTTI.Serializable(0x36120E54BC2351AE, GameType.DS)]
    public class NodeGraphFloatVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public float Value;
    }

    [RTTI.Serializable(0xA427560581940937, GameType.DS)]
    public class NodeGraphGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF40BD9E6955D0311, GameType.DS)]
    public class NodeGraphInt64VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public int64 Value;
    }

    [RTTI.Serializable(0x784FC030F4F9A5F4, GameType.DS)]
    public class NodeGraphIntVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public int Value;
    }

    [RTTI.Serializable(0x39B19A0766E379BB, GameType.DS)]
    public class NodeGraphIntegerFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<IntegerFact> Object;
    }

    [RTTI.Serializable(0x14D69177144A9519, GameType.DS)]
    public class NodeGraphMat44VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x30)] public Mat44 Value;
    }

    [RTTI.Serializable(0x8A3CD7DED4429003, GameType.DS)]
    public class NodeGraphMaterialTypeResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<MaterialTypeResource> Object;
    }

    [RTTI.Serializable(0xF36ABB7BA4E0238B, GameType.DS)]
    public class NodeGraphMemoryGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1D7DB9621EB9BC10, GameType.DS)]
    public class NodeGraphMenuPageUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<MenuPage> Object;
    }

    [RTTI.Serializable(0x2DED237935969084, GameType.DS)]
    public class NodeGraphModelPartResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ModelPartResource> Object;
    }

    [RTTI.Serializable(0xD1737CF817110E2F, GameType.DS)]
    public class NodeGraphMsgAIAttackIdUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<MsgAIAttackId> Object;
    }

    [RTTI.Serializable(0xACE4DFFBF750395A, GameType.DS)]
    public class NodeGraphPlayerOutfitThemeVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<PlayerOutfitTheme> Object;
    }

    [RTTI.Serializable(0xF4D6A04F7F42D973, GameType.DS)]
    public class NodeGraphPlayerOutfitVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<PlayerOutfit> Object;
    }

    [RTTI.Serializable(0xCE5B8C8BA3BFD61C, GameType.DS)]
    public class NodeGraphQuatVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x30)] public Quat Value;
    }

    [RTTI.Serializable(0xD62FF2AB565BFCD3, GameType.DS)]
    public class NodeGraphResourceSetVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<ResourceSet> Object;
    }

    [RTTI.Serializable(0x2AC6FA130D2E31E8, GameType.DS)]
    public class NodeGraphResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<RTTIRefObject> Object;
    }

    [RTTI.Serializable(0x8F246589FE6E603D, GameType.DS)]
    public class NodeGraphSentenceGroupVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<SentenceGroupResource> Object;
    }

    [RTTI.Serializable(0xD30680E42ECDFFF2, GameType.DS)]
    public class NodeGraphSkeletonAnimationResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<SkeletonAnimationResource> Object;
    }

    [RTTI.Serializable(0x709AB4B7BA11E42D, GameType.DS)]
    public class NodeGraphSpawnpointVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<Spawnpoint> Object;
    }

    [RTTI.Serializable(0xF527FCA61AEB89B2, GameType.DS)]
    public class NodeGraphStringVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public String Value;
    }

    [RTTI.Serializable(0x5B80C65005CC028F, GameType.DS)]
    public class NodeGraphUInt32VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public uint32 Value;
    }

    [RTTI.Serializable(0x3B6C976F67629D97, GameType.DS)]
    public class NodeGraphUIntVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public uint Value;
    }

    [RTTI.Serializable(0xCE86A8A06C2297E3, GameType.DS)]
    public class NodeGraphVariableOverride : Resource
    {
        [RTTI.Member(2, 0x20)] public String VariableId;
    }

    [RTTI.Serializable(0x2C04FFEA8B0F5A0D, GameType.DS)]
    public class NodeGraphVec2VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x30)] public Vec2 Value;
    }

    [RTTI.Serializable(0x6D27DB80D7E3B6BA, GameType.DS)]
    public class NodeGraphVec3FactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<Vec3Fact> Object;
    }

    [RTTI.Serializable(0x1D62E18BBDA90C56, GameType.DS)]
    public class NodeGraphVec3VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x30)] public Vec3 Value;
    }

    [RTTI.Serializable(0x1A4D8D74622CC44D, GameType.DS)]
    public class NodeGraphVec4VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x30)] public Vec4 Value;
    }

    [RTTI.Serializable(0x6C8B561AFED23185, GameType.DS)]
    public class NodeGraphWorldPositionFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public Ref<WorldPositionFact> Object;
    }

    [RTTI.Serializable(0x281399AE9A0C7EFD, GameType.DS)]
    public class NodeGraphWorldPositionVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public WorldPosition Value;
    }

    [RTTI.Serializable(0xB7187F8E28E73AA0, GameType.DS)]
    public class NodeGraphWorldTransformVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(3, 0x28)] public WorldTransform Value;
    }

    [RTTI.Serializable(0xE6AA2D288FA1B1B7, GameType.DS)]
    public class NotAllowedInTemplate
    {
    }

    [RTTI.Serializable(0x23AF90C433E4DCED, GameType.DS)]
    public class OTGCAddMissionOrderBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int64 MissionStaticId;
        [RTTI.Member(3, 0x28)] public int32 QpidId;
        [RTTI.Member(4, 0x30)] public String MissionType;
        [RTTI.Member(5, 0x38)] public String OnlineMissionType;
        [RTTI.Member(6, 0x40)] public uint16 AreaHash;
        [RTTI.Member(7, 0x44)] public int32 StartLocationId;
        [RTTI.Member(8, 0x48)] public CPtr<OTGCMissionDynamicLocationInfo> DynamicStartInfo;
        [RTTI.Member(9, 0x50)] public int32 EndLocationId;
        [RTTI.Member(10, 0x58)] public CPtr<OTGCMissionDynamicLocationInfo> DynamicEndInfo;
        [RTTI.Member(11, 0x60)] public Array<Ref<OTGCMissionBaggage>> Baggages;
        [RTTI.Member(12, 0x70)] public Ref<OTGCMissionAnnihilation> Annihilation;
        [RTTI.Member(13, 0x78)] public Ref<OTGCMissionPlayerInfo> PlayerInfo;
        [RTTI.Member(14, 0x80)] public Ref<OTGCMissionSupplyInfo> SupplyInfo;
        [RTTI.Member(15, 0x88)] public Ref<OTGCMissionDynamicMissionInfo> DynamicMissionInfo;
    }

    [RTTI.Serializable(0x972DD1CC82CA7A90, GameType.DS)]
    public class OTGCAddMissionsBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCAddMissionOrderBody>> Missions;
    }

    [RTTI.Serializable(0x8E949E89B2771D86, GameType.DS)]
    public class OTGCAuthQuery : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String Zone;
        [RTTI.Member(1, 0x10)] public String Provider;
        [RTTI.Member(2, 0x18)] public String Code;
    }

    [RTTI.Serializable(0xD900CFD3862ECCC5, GameType.DS)]
    public class OTGCAuthResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public OTGCAuthResponseUser User;
        [RTTI.Member(3, 0x60)] public OTGCAuthResponseSession Session;
    }

    [RTTI.Serializable(0xB86ACF6F78D432AF, GameType.DS)]
    public class OTGCAuthResponseSession : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public WString Zone;
        [RTTI.Member(1, 0x10)] public WString Token;
        [RTTI.Member(2, 0x18)] public WString Gateway;
        [RTTI.Member(3, 0x20)] public HashMap<String_String> Properties;
        [RTTI.Member(4, 0x30)] public Array<WString> Roles;
    }

    [RTTI.Serializable(0x3742D820531AE64D, GameType.DS)]
    public class OTGCAuthResponseUser : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public WString Provider;
        [RTTI.Member(1, 0x10)] public WString ProviderId;
        [RTTI.Member(2, 0x18)] public String Id;
        [RTTI.Member(3, 0x20)] public HashMap<String_String> Entity;
        [RTTI.Member(4, 0x30)] public WString DisplayNameOld;
        [RTTI.Member(5, 0x38)] public String DisplayName;
    }

    [RTTI.Serializable(0xAE343C61B9569913, GameType.DS)]
    public class OTGCBinaryResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public Array<uint8> Binary;
    }

    [RTTI.Serializable(0x214BBB9FA63CA94, GameType.DS)]
    public class OTGCBridgeInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 Angle;
    }

    [RTTI.Serializable(0xE4D8B19D3DE5B03F, GameType.DS)]
    public class OTGCComment : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<int32> Phrases;
        [RTTI.Member(3, 0x30)] public String Writer;
        [RTTI.Member(4, 0x38)] public int32 LikePoint;
        [RTTI.Member(5, 0x3C)] public int8 ParentIndex;
        [RTTI.Member(6, 0x3D)] public bool IsDeleted;
        [RTTI.Member(7, 0x40)] public String ReferenceObject;
    }

    [RTTI.Serializable(0x9C1F035C359C9A40, GameType.DS)]
    public class OTGCCommonErrorResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Status;
        [RTTI.Member(3, 0x28)] public uint32 Code;
        [RTTI.Member(4, 0x30)] public String Message;
    }

    [RTTI.Serializable(0x5B0DAA6299432ABB, GameType.DS)]
    public class OTGCCommonErrorResponseOld : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int HttpStatus;
        [RTTI.Member(3, 0x28)] public WString Code;
        [RTTI.Member(4, 0x30)] public WString Message;
    }

    [RTTI.Serializable(0xE202A486DA2CF512, GameType.DS)]
    public class OTGCCommonLikePointResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public WString Id;
        [RTTI.Member(3, 0x28)] public int Lp;
    }

    [RTTI.Serializable(0x719308DA31D4B8A3, GameType.DS)]
    public class OTGCCommonPostBaggage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String State;
        [RTTI.Member(3, 0x28)] public int Life;
        [RTTI.Member(4, 0x2C)] public int Endurance;
        [RTTI.Member(5, 0x30)] public Array<int> MapIndex;
        [RTTI.Member(6, 0x40)] public Array<int> Position;
    }

    [RTTI.Serializable(0x2DF0BFCFC614F979, GameType.DS)]
    public class OTGCCommonQueryGrid : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int GridX;
        [RTTI.Member(1, 0xC)] public int GridY;
        [RTTI.Member(2, 0x10)] public int WorldNameHash;
    }

    [RTTI.Serializable(0x8954AAE5EB43747A, GameType.DS)]
    public class OTGCCommonResponseBaggage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public WString Id;
        [RTTI.Member(3, 0x28)] public int Type;
        [RTTI.Member(4, 0x30)] public WString Owner;
        [RTTI.Member(5, 0x38)] public WString Creator;
        [RTTI.Member(6, 0x40)] public int Life;
        [RTTI.Member(7, 0x44)] public int Endurance;
        [RTTI.Member(8, 0x48)] public WString State;
        [RTTI.Member(9, 0x50)] public Array<int> MapIndex;
        [RTTI.Member(10, 0x60)] public Array<int> Position;
    }

    [RTTI.Serializable(0x20CF85D78F363C92, GameType.DS)]
    public class OTGCCommonResponseBaggage2 : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 BaggageListItemNameHash;
        [RTTI.Member(3, 0x24)] public int32 MissionId;
        [RTTI.Member(4, 0x28)] public WString Creator;
        [RTTI.Member(5, 0x30)] public int Life;
        [RTTI.Member(6, 0x34)] public int Endurance;
        [RTTI.Member(7, 0x38)] public int32 Handle;
    }

    [RTTI.Serializable(0x903B8FB3200ECE31, GameType.DS)]
    public class OTGCCommonResponseBaggageResult : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int ErrorCode;
        [RTTI.Member(1, 0x10)] public WString ErrorMessage;
        [RTTI.Member(2, 0x18)] public Ref<OTGCCommonResponseBaggage> Baggage;
    }

    [RTTI.Serializable(0x2B7F223D83B37924, GameType.DS)]
    public class OTGCCreateObjectPost : RTTIRefObject
    {
        [RTTI.Member(5, 0x20)] public String ObjectType;
        [RTTI.Member(2, 0x28)] public int GridX;
        [RTTI.Member(3, 0x2C)] public int GridY;
        [RTTI.Member(4, 0x30)] public int WorldNameHash;
        [RTTI.Member(6, 0x34)] public int X;
        [RTTI.Member(7, 0x38)] public int Y;
        [RTTI.Member(8, 0x3C)] public int Z;
        [RTTI.Member(9, 0x40)] public int Rx;
        [RTTI.Member(10, 0x44)] public int Ry;
        [RTTI.Member(11, 0x48)] public int Rz;
        [RTTI.Member(12, 0x4C)] public int32 Exponent;
        [RTTI.Member(13, 0x50)] public int32 Qpid;
        [RTTI.Member(14, 0x58)] public String SubType;
        [RTTI.Member(15, 0x60)] public int32 Priority;
        [RTTI.Member(16, 0x68)] public Ref<OTGCComment> Comment;
        [RTTI.Member(17, 0x70)] public Ref<OTGCRopeInfo> RopeInfo;
        [RTTI.Member(18, 0x78)] public Ref<OTGCStoneInfo> StoneInfo;
        [RTTI.Member(19, 0x80)] public Ref<OTGCBridgeInfo> BridgeInfo;
        [RTTI.Member(20, 0x88)] public Ref<OTGCParkingInfo> ParkingInfo;
        [RTTI.Member(21, 0x90)] public Ref<OTGCVehicleInfo> VehicleInfo;
        [RTTI.Member(22, 0x98)] public Ref<OTGCExtraInfo> ExtraInfo;
        [RTTI.Member(23, 0xA0)] public Ref<OTGCCustomizeInfo> CustomizeInfo;
    }

    [RTTI.Serializable(0x76A846270FB2FEE9, GameType.DS)]
    public class OTGCCreateObjectQuery : OTGCCommonQueryGrid
    {
        [RTTI.Member(3, 0x18)] public String ObjectType;
        [RTTI.Member(4, 0x20)] public int8 IsUnderConstruction;
    }

    [RTTI.Serializable(0x481DA7AD06909765, GameType.DS)]
    public class OTGCCreateRoadBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 StartLocationId;
        [RTTI.Member(3, 0x24)] public int32 EndLocationId;
        [RTTI.Member(4, 0x28)] public uint32 AreaHash;
        [RTTI.Member(5, 0x2C)] public uint32 DataVersion;
        [RTTI.Member(6, 0x30)] public uint32 PathLength;
        [RTTI.Member(7, 0x34)] public uint32 MaxHeightDifference;
        [RTTI.Member(8, 0x38)] public int32 StartQpid;
        [RTTI.Member(9, 0x3C)] public int32 EndQpid;
        [RTTI.Member(10, 0x40)] public String Data;
    }

    [RTTI.Serializable(0x4F3616BD9FE0924D, GameType.DS)]
    public class OTGCCustomizeInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint32 CustomizeParam;
        [RTTI.Member(3, 0x24)] public uint32 Color;
    }

    [RTTI.Serializable(0xFD96D180996AB17C, GameType.DS)]
    public class OTGCDeleteMissionsBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Creator;
        [RTTI.Member(3, 0x28)] public String Id;
    }

    [RTTI.Serializable(0x39A83611E220CD5F, GameType.DS)]
    public class OTGCDeleteMissionsBodyArray : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCDeleteMissionsBody>> Container;
    }

    [RTTI.Serializable(0xC3141A61CC92C7C1, GameType.DS)]
    public class OTGCDeleteMissionsBodyArrayOld : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCDeleteMissionsBody>> Container;
    }

    [RTTI.Serializable(0x22B6FB9D481605C3, GameType.DS)]
    public class OTGCDeleteObjectQuery : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
    }

    [RTTI.Serializable(0xB268EF023F2A9375, GameType.DS)]
    public class OTGCDiscoverResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public OTGCDiscoverResponseTitle Title;
        [RTTI.Member(3, 0x30)] public HashMap<String_OTGCDiscoverResponsePresence> Presences;
    }

    [RTTI.Serializable(0xD586E3D7E15313AD, GameType.DS)]
    public class OTGCDiscoverResponsePresence : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public bool Available;
        [RTTI.Member(1, 0x10)] public WString Domain;
        [RTTI.Member(2, 0x18)] public WString Zone;
        [RTTI.Member(3, 0x20)] public WString Auth;
        [RTTI.Member(4, 0x28)] public HashMap<String_WString> Properties;
    }

    [RTTI.Serializable(0xE42659B9DE7ADDEF, GameType.DS)]
    public class OTGCDiscoverResponseTitle : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public WString Id;
    }

    [RTTI.Serializable(0x5D5E739F11153588, GameType.DS)]
    public class OTGCExtraInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 AlternativeQpidId;
    }

    [RTTI.Serializable(0xFC3BEB866871C2B1, GameType.DS)]
    public class OTGCFindMissionsBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint32 AreaId;
        [RTTI.Member(4, 0x24)] public uint32 Limit;
        [RTTI.Member(3, 0x28)] public Array<int32> QpidIds;
    }

    [RTTI.Serializable(0xA810C0B9E29187A9, GameType.DS)]
    public class OTGCFindQpidObjectsBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 QpidId;
        [RTTI.Member(3, 0x24)] public int32 AreaId;
        [RTTI.Member(4, 0x28)] public Array<String> Users;
        [RTTI.Member(5, 0x38)] public Ref<OTGCFindQpidObjectsRoad> Road;
        [RTTI.Member(6, 0x40)] public Ref<OTGCFindMissionsBody> Mission;
        [RTTI.Member(7, 0x48)] public Ref<OTGCFindQpidWorldObjects> Object;
    }

    [RTTI.Serializable(0xD06C3DC638FD2F15, GameType.DS)]
    public class OTGCFindQpidObjectsResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<OTGCFindQpidObjectsResponseSet> Normal;
    }

    [RTTI.Serializable(0x8A008D9C7CFFDE4D, GameType.DS)]
    public class OTGCFindQpidObjectsResponseSet : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCRoadResponse>> Road;
        [RTTI.Member(3, 0x30)] public Array<Ref<OTGCMission>> Mission;
        [RTTI.Member(4, 0x40)] public Array<Ref<OTGCObjectResponse>> ObjectA;
        [RTTI.Member(5, 0x50)] public Array<Ref<OTGCObjectResponse>> ObjectB;
        [RTTI.Member(6, 0x60)] public Array<Ref<OTGCObjectResponse>> ObjectD;
        [RTTI.Member(7, 0x70)] public Array<Ref<OTGCObjectResponse>> ObjectE;
        [RTTI.Member(8, 0x80)] public Array<Ref<OTGCObjectResponse>> ObjectP;
    }

    [RTTI.Serializable(0x4439E6BF76D04A51, GameType.DS)]
    public class OTGCFindQpidObjectsRoad : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<int32> EndQpids;
        [RTTI.Member(3, 0x30)] public int32 RequiredLocationId;
        [RTTI.Member(4, 0x34)] public int32 PrioritizedLocationId;
        [RTTI.Member(5, 0x38)] public int32 Version;
        [RTTI.Member(6, 0x3C)] public int32 Count;
    }

    [RTTI.Serializable(0xCC9236819DDAF473, GameType.DS)]
    public class OTGCFindQpidWorldObjects : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public HashMap<String_int> Counts;
    }

    [RTTI.Serializable(0x4A26F6C7812B822D, GameType.DS)]
    public class OTGCFindRoadsPost : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 StartLocationId;
        [RTTI.Member(3, 0x24)] public int32 EndLocationId;
        [RTTI.Member(4, 0x28)] public uint32 AreaHash;
        [RTTI.Member(5, 0x2C)] public uint32 DataVersion;
        [RTTI.Member(6, 0x30)] public int32 Count;
        [RTTI.Member(7, 0x34)] public bool IsDebug;
    }

    [RTTI.Serializable(0x4EBB4C3F46ED299C, GameType.DS)]
    public class OTGCFindRoadsResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCRoadResponse>> Container;
    }

    [RTTI.Serializable(0x188DC1D5B55D938B, GameType.DS)]
    public class OTGCGetLikeHistoryOneResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int64 Time;
        [RTTI.Member(3, 0x28)] public String Oid;
        [RTTI.Member(4, 0x30)] public int LikePoint;
        [RTTI.Member(5, 0x34)] public int LikePointAuto;
        [RTTI.Member(6, 0x38)] public String UidFrom;
        [RTTI.Member(7, 0x40)] public int32 SummarizedCount;
    }

    [RTTI.Serializable(0x248D66C6CDDF65E8, GameType.DS)]
    public class OTGCGetLikeHistoryQuery : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Uid;
        [RTTI.Member(3, 0x28)] public int64 Since;
    }

    [RTTI.Serializable(0xC288679BFE8EDB05, GameType.DS)]
    public class OTGCGetLikeHistoryResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCGetLikeHistoryOneResponse>> Histories;
    }

    [RTTI.Serializable(0x93E5CF1708D5801B, GameType.DS)]
    public class OTGCGetLikeHistoryResponseOld : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCGetLikeHistoryOneResponse>> Histories;
    }

    [RTTI.Serializable(0x9420BA18E1D66ED1, GameType.DS)]
    public class OTGCGetPlayerProfileParam : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String AccountId;
        [RTTI.Member(3, 0x28)] public uint32 Filter;
        [RTTI.Member(4, 0x30)] public Array<int32> QpidIds;
    }

    [RTTI.Serializable(0x552AE6D05E47FB45, GameType.DS)]
    public class OTGCGetPlayerProfileParamArray : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCGetPlayerProfileParam>> Container;
    }

    [RTTI.Serializable(0xFF6C902AEACE72E5, GameType.DS)]
    public class OTGCGetPlayerProfileParamArrayOld : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCGetPlayerProfileParam>> Container;
    }

    [RTTI.Serializable(0xAA5FD4D01BEC66D0, GameType.DS)]
    public class OTGCGetQpidObjectsPost : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> Container;
    }

    [RTTI.Serializable(0x82C65DFA8870164B, GameType.DS)]
    public class OTGCGetQpidObjectsPostOld : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> Container;
    }

    [RTTI.Serializable(0xF52B4AF43E9A4E92, GameType.DS)]
    public class OTGCGetRelationshipsOneResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String UidTarget;
        [RTTI.Member(3, 0x28)] public int64 Time;
    }

    [RTTI.Serializable(0xD9F3BDEBC643ED93, GameType.DS)]
    public class OTGCGetRelationshipsQuery : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Uid;
    }

    [RTTI.Serializable(0x7011B44CD051F21, GameType.DS)]
    public class OTGCGetRelationshipsResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCGetRelationshipsOneResponse>> Strand;
        [RTTI.Member(3, 0x30)] public Array<Ref<OTGCGetRelationshipsOneResponse>> History;
    }

    [RTTI.Serializable(0x394EE5FDA2D06884, GameType.DS)]
    public class OTGCGetRoadDataQuery : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
    }

    [RTTI.Serializable(0x580A11CEE79E4F90, GameType.DS)]
    public class OTGCGetRoadDataResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Data;
    }

    [RTTI.Serializable(0x6D2C3C93D94525, GameType.DS)]
    public class OTGCGetVersionResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public WString Version;
        [RTTI.Member(3, 0x28)] public int32 Major;
        [RTTI.Member(4, 0x2C)] public int32 Minor;
    }

    [RTTI.Serializable(0x907B0DA05C640AC0, GameType.DS)]
    public class OTGCGetWastesBaggage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 QpidId;
        [RTTI.Member(3, 0x28)] public String UserId;
        [RTTI.Member(4, 0x30)] public String BaggageId;
        [RTTI.Member(5, 0x38)] public OTGCWastedBaggageData Item;
    }

    [RTTI.Serializable(0xBEF2D98F0E1EF38B, GameType.DS)]
    public class OTGCHighwayConstructionData : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int32 ConstrucionId;
        [RTTI.Member(1, 0x10)] public int64 LastLoginDate;
    }

    [RTTI.Serializable(0xFDF619CAC748F2FC, GameType.DS)]
    public class OTGCHighwayContributor : RTTIRefObject
    {
        [RTTI.Member(3, 0x20)] public String UserId;
        [RTTI.Member(2, 0x28)] public int64 Like;
    }

    [RTTI.Serializable(0x5FCBAC9F93A301D3, GameType.DS)]
    public class OTGCHighwayContributors : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 ConstructionId;
        [RTTI.Member(3, 0x28)] public Array<Ref<OTGCHighwayContributor>> Contributors;
    }

    [RTTI.Serializable(0xB93F6AB771BA07D0, GameType.DS)]
    public class OTGCHighwayDeleteResourcesBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 ConstrucionId;
        [RTTI.Member(3, 0x28)] public Array<int> ResourceIds;
    }

    [RTTI.Serializable(0xA5A9FC6DF9B5211F, GameType.DS)]
    public class OTGCHighwayGetResourcesBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<OTGCHighwayConstructionData> Constructions;
        [RTTI.Member(3, 0x30)] public Array<int> ResourceIds;
    }

    [RTTI.Serializable(0x81D062B82E104334, GameType.DS)]
    public class OTGCHighwayGetResourcesResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCHighwayPutResource>> PutResources;
        [RTTI.Member(3, 0x30)] public Array<Ref<OTGCHighwayContributors>> Contributors;
        [RTTI.Member(4, 0x40)] public int64 UsersLike;
    }

    [RTTI.Serializable(0xA2E6ADB26B2CAFD0, GameType.DS)]
    public class OTGCHighwayLike : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String UserId;
        [RTTI.Member(1, 0x10)] public int64 Like;
    }

    [RTTI.Serializable(0xA096F8FF068D7BE, GameType.DS)]
    public class OTGCHighwayLikesBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<OTGCHighwayLike> HighwayLikes;
    }

    [RTTI.Serializable(0x89E844CF3F9B174B, GameType.DS)]
    public class OTGCHighwayPutHistory : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int32 ConstructionId;
        [RTTI.Member(1, 0xC)] public int32 ResourceId;
        [RTTI.Member(2, 0x10)] public int32 Num;
    }

    [RTTI.Serializable(0xCA0211FC3F7D48F9, GameType.DS)]
    public class OTGCHighwayPutResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public int32 ConstructionId;
        [RTTI.Member(4, 0x2C)] public int32 ResourceId;
        [RTTI.Member(5, 0x30)] public int64 PutNum;
        [RTTI.Member(6, 0x38)] public int64 UsersPutNum;
    }

    [RTTI.Serializable(0x4EC925D61580C8BD, GameType.DS)]
    public class OTGCHighwayPutResourcesBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<OTGCHighwayPutHistory> PutHistories;
    }

    [RTTI.Serializable(0x2E40AC9B516E230C, GameType.DS)]
    public class OTGCHighwayPutResourcesResponse : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int ErrorCode;
    }

    [RTTI.Serializable(0x3B42F6EAEA835A65, GameType.DS)]
    public class OTGCLookupBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> Ids;
    }

    [RTTI.Serializable(0xE0692BBD8FD07FD6, GameType.DS)]
    public class OTGCLookupOneResponse : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String Account;
        [RTTI.Member(1, 0x10)] public String BoundAccount;
        [RTTI.Member(2, 0x18)] public String DisplayName;
        [RTTI.Member(3, 0x20)] public String Provider;
    }

    [RTTI.Serializable(0xD363A448D863B61D, GameType.DS)]
    public class OTGCLookupResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<OTGCLookupOneResponse> Container;
    }

    [RTTI.Serializable(0x5ADB835432CD59D7, GameType.DS)]
    public class OTGCLookupResponseOld : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<OTGCLookupOneResponse> Container;
    }

    [RTTI.Serializable(0x221B6E2D54424B81, GameType.DS)]
    public class OTGCMission : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public WString Id;
        [RTTI.Member(3, 0x28)] public int64 MissionStaticId;
        [RTTI.Member(4, 0x30)] public int32 QpidId;
        [RTTI.Member(5, 0x38)] public WString MissionType;
        [RTTI.Member(6, 0x40)] public WString OnlineMissionType;
        [RTTI.Member(7, 0x48)] public int16 AreaHash;
        [RTTI.Member(8, 0x4C)] public int32 StartLocationId;
        [RTTI.Member(9, 0x50)] public Ref<OTGCMissionDynamicLocationInfo> DynamicStartInfo;
        [RTTI.Member(10, 0x58)] public int32 EndLocationId;
        [RTTI.Member(11, 0x60)] public Ref<OTGCMissionDynamicLocationInfo> DynamicEndInfo;
        [RTTI.Member(12, 0x68)] public int64 RegisteredTime;
        [RTTI.Member(13, 0x70)] public int64 ExpirationTime;
        [RTTI.Member(14, 0x78)] public WString Creator;
        [RTTI.Member(15, 0x80)] public WString Worker;
        [RTTI.Member(16, 0x88)] public WString ProgressState;
        [RTTI.Member(17, 0x90)] public int32 DeliveredLocationId;
        [RTTI.Member(18, 0x98)] public Ref<OTGCMissionDynamicLocationInfo> DynamicDeliveredInfo;
        [RTTI.Member(19, 0xA0)] public Array<Ref<OTGCMissionBaggage>> Baggages;
        [RTTI.Member(20, 0xB0)] public Ref<OTGCMissionAnnihilation> Annihilation;
        [RTTI.Member(21, 0xB8)] public Ref<OTGCMissionPlayerInfo> PlayerInfo;
        [RTTI.Member(22, 0xC0)] public Ref<OTGCMissionSupplyInfo> SupplyInfo;
        [RTTI.Member(23, 0xC8)] public Ref<OTGCMissionDynamicMissionInfo> DynamicMissionInfo;
        [RTTI.Member(24, 0xD0)] public Array<WString> Relations;
    }

    [RTTI.Serializable(0xBE791D0894BC9BCA, GameType.DS)]
    public class OTGCMissionAmmoInfo : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String AmmoId;
        [RTTI.Member(1, 0x10)] public int16 ClipCount;
        [RTTI.Member(2, 0x12)] public int16 Count;
    }

    [RTTI.Serializable(0x8CFF839197A357FF, GameType.DS)]
    public class OTGCMissionAnnihilation : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 Radius;
        [RTTI.Member(3, 0x24)] public int32 X;
        [RTTI.Member(4, 0x28)] public int32 Y;
        [RTTI.Member(5, 0x2C)] public int32 Z;
    }

    [RTTI.Serializable(0x27F4722D16C38484, GameType.DS)]
    public class OTGCMissionArray : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCMission>> Container;
    }

    [RTTI.Serializable(0xC9C552592F23EDA6, GameType.DS)]
    public class OTGCMissionBaggage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 NameHash;
        [RTTI.Member(3, 0x24)] public int32 UserIndex;
        [RTTI.Member(4, 0x28)] public int32 X;
        [RTTI.Member(5, 0x2C)] public int32 Y;
        [RTTI.Member(6, 0x30)] public int32 Z;
        [RTTI.Member(7, 0x34)] public float Amount;
        [RTTI.Member(8, 0x38)] public Array<OTGCMissionAmmoInfo> AmmoInfo;
        [RTTI.Member(9, 0x48)] public int8 IsReturned;
    }

    [RTTI.Serializable(0x4E52CE01E6724BCB, GameType.DS)]
    public class OTGCMissionDestInfo : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String ObjectId;
        [RTTI.Member(1, 0x10)] public CPtr<OTGCMissionObjectInfo> Arg;
    }

    [RTTI.Serializable(0x84AB76F33119D3EA, GameType.DS)]
    public class OTGCMissionDynamicLocationInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String LocationId;
        [RTTI.Member(3, 0x28)] public int32 X;
        [RTTI.Member(4, 0x2C)] public int32 Y;
        [RTTI.Member(5, 0x30)] public int32 Z;
    }

    [RTTI.Serializable(0x83B37E1A288E8063, GameType.DS)]
    public class OTGCMissionDynamicMissionInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint32 ClientNameHash;
        [RTTI.Member(3, 0x24)] public uint32 RewardNameHash;
    }

    [RTTI.Serializable(0xF66AF479A843D22A, GameType.DS)]
    public class OTGCMissionObjectInfo : OTGCCreateObjectQuery
    {
        [RTTI.Member(5, 0x28)] public Ref<OTGCCreateObjectPost> Detail;
    }

    [RTTI.Serializable(0x5C52FE7F9227F87D, GameType.DS)]
    public class OTGCMissionPlayerInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 X;
        [RTTI.Member(3, 0x24)] public int32 Y;
        [RTTI.Member(4, 0x28)] public int32 Z;
    }

    [RTTI.Serializable(0x2FB94397B9CDD811, GameType.DS)]
    public class OTGCMissionSupplyInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint32 ItemHash;
        [RTTI.Member(3, 0x24)] public uint32 Num;
    }

    [RTTI.Serializable(0xFBB382B8229D0028, GameType.DS)]
    public class OTGCMissions : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCMission>> Missions;
    }

    [RTTI.Serializable(0x517F71F70A72CB0E, GameType.DS)]
    public class OTGCObjectConstructionHistory : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public WString Contributor;
        [RTTI.Member(3, 0x28)] public int64 Time;
        [RTTI.Member(4, 0x30)] public Array<int> AddedMaterials;
    }

    [RTTI.Serializable(0x82BE8AB72FD5E5BB, GameType.DS)]
    public class OTGCObjectConstructionMaterials : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Contributor;
        [RTTI.Member(3, 0x28)] public int64 Time;
        [RTTI.Member(4, 0x30)] public Array<int> Materials;
        [RTTI.Member(5, 0x40)] public Array<int> MaterialsToRepair;
    }

    [RTTI.Serializable(0x65FAB3EDFFDF4FB6, GameType.DS)]
    public class OTGCObjectRecycleMaterials : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Contributor;
        [RTTI.Member(3, 0x28)] public int64 Time;
        [RTTI.Member(4, 0x30)] public Array<int> Materials;
    }

    [RTTI.Serializable(0xED9845FDD5EFB3B8, GameType.DS)]
    public class OTGCObjectResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public String Creator;
        [RTTI.Member(4, 0x30)] public String ObjectType;
        [RTTI.Member(5, 0x38)] public Array<int> MapIndex;
        [RTTI.Member(6, 0x48)] public Array<int> Location;
        [RTTI.Member(7, 0x58)] public Array<int> Rot;
        [RTTI.Member(8, 0x68)] public int32 Exponent;
        [RTTI.Member(9, 0x6C)] public int32 LikePoint;
        [RTTI.Member(10, 0x70)] public int64 UpdatedTime;
        [RTTI.Member(11, 0x78)] public int32 Qpid;
        [RTTI.Member(12, 0x80)] public Array<Ref<OTGCObjectConstructionMaterials>> ConstructionMaterials;
        [RTTI.Member(13, 0x90)] public Array<Ref<OTGCObjectRecycleMaterials>> RecycleMaterials;
        [RTTI.Member(14, 0xA0)] public Array<Ref<OTGCCommonResponseBaggage2>> Baggages2;
        [RTTI.Member(15, 0xB0)] public String SubType;
        [RTTI.Member(16, 0xB8)] public Array<Ref<OTGCComment>> Comment;
        [RTTI.Member(17, 0xC8)] public Ref<OTGCRopeInfo> RopeInfo;
        [RTTI.Member(18, 0xD0)] public Ref<OTGCStoneInfo> StoneInfo;
        [RTTI.Member(19, 0xD8)] public Ref<OTGCBridgeInfo> BridgeInfo;
        [RTTI.Member(20, 0xE0)] public Ref<OTGCParkingInfo> ParkingInfo;
        [RTTI.Member(21, 0xE8)] public Ref<OTGCVehicleInfo> VehicleInfo;
        [RTTI.Member(22, 0xF0)] public Ref<OTGCExtraInfo> ExtraInfo;
        [RTTI.Member(23, 0xF8)] public Ref<OTGCCustomizeInfo> CustomizeInfo;
        [RTTI.Member(24, 0x100)] public Array<String> Tags;
    }

    [RTTI.Serializable(0xCD6F9993F9300784, GameType.DS)]
    public class OTGCParkingInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 LocationId;
        [RTTI.Member(3, 0x28)] public String DynamicLocationId;
        [RTTI.Member(4, 0x30)] public int32 CurrentQpidId;
        [RTTI.Member(5, 0x34)] public bool IsParking;
    }

    [RTTI.Serializable(0xF427B043002B2DE0, GameType.DS)]
    public class OTGCPlayerProfile : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String AccountId;
        [RTTI.Member(3, 0x28)] public Ref<OTGCPlayerProfileBasic> Basic;
        [RTTI.Member(4, 0x30)] public Ref<OTGCPlayerProfileDetail> Detail;
    }

    [RTTI.Serializable(0x46C61E6A9A2C31E4, GameType.DS)]
    public class OTGCPlayerProfileArray : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCPlayerProfile>> Container;
    }

    [RTTI.Serializable(0xEE5CB6BEEFC5E804, GameType.DS)]
    public class OTGCPlayerProfileArrayOld : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCPlayerProfile>> Container;
    }

    [RTTI.Serializable(0x8B62890FDC5E964F, GameType.DS)]
    public class OTGCPlayerProfileBasic : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint32 Nickname;
        [RTTI.Member(3, 0x24)] public uint32 DeliveryRank;
        [RTTI.Member(4, 0x28)] public uint64 EvaluationSpeed;
        [RTTI.Member(5, 0x30)] public uint64 EvaluationSafety;
        [RTTI.Member(6, 0x38)] public uint64 EvaluationDelivery;
        [RTTI.Member(7, 0x40)] public uint64 EvaluationService;
        [RTTI.Member(8, 0x48)] public uint64 EvaluationBridge;
        [RTTI.Member(9, 0x50)] public int64 ReceivedLikeOnline;
        [RTTI.Member(10, 0x58)] public int64 ReceivedLikeNpc;
        [RTTI.Member(11, 0x60)] public uint64 MovingDistance;
        [RTTI.Member(12, 0x68)] public uint64 DeliveryWeight;
        [RTTI.Member(13, 0x70)] public uint32 DeliveryBaggage;
        [RTTI.Member(14, 0x74)] public uint32 LegendCount;
        [RTTI.Member(15, 0x78)] public uint32 SuperLegendCount;
        [RTTI.Member(16, 0x7C)] public uint32 SSSSLegendCount;
        [RTTI.Member(17, 0x80)] public uint64 MusicOpenTracks;
        [RTTI.Member(18, 0x88)] public uint32 LastLogin;
    }

    [RTTI.Serializable(0xEDCA36707B0D4FB1, GameType.DS)]
    public class OTGCPlayerProfileDetail : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint64 EvaluationSpeed;
        [RTTI.Member(3, 0x28)] public uint64 EvaluationSafety;
        [RTTI.Member(4, 0x30)] public uint64 EvaluationDelivery;
        [RTTI.Member(5, 0x38)] public uint64 EvaluationService;
        [RTTI.Member(6, 0x40)] public uint64 EvaluationBridge;
        [RTTI.Member(7, 0x48)] public uint64 MusicOpenTracks;
        [RTTI.Member(8, 0x50)] public int64 ReceivedLikeOnline;
        [RTTI.Member(9, 0x58)] public int64 ReceivedLikeNpc;
    }

    [RTTI.Serializable(0x14A5990DF92A7A1C, GameType.DS)]
    public class OTGCReCreateObjectPost : OTGCCreateObjectPost
    {
        [RTTI.Member(24, 0xA8)] public String Id;
        [RTTI.Member(25, 0xB0)] public int32 LikePoint;
        [RTTI.Member(26, 0xB8)] public Array<String> Tags;
        [RTTI.Member(27, 0xC8)] public Array<Ref<OTGCObjectConstructionMaterials>> ConstructionMaterials;
        [RTTI.Member(28, 0xD8)] public Array<Ref<OTGCObjectRecycleMaterials>> RecycleMaterials;
    }

    [RTTI.Serializable(0x7B5F7A61AB79EE6E, GameType.DS)]
    public class OTGCRefreshObjectBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public int32 Qpid;
    }

    [RTTI.Serializable(0x4C4FED28C80D5CD1, GameType.DS)]
    public class OTGCRefreshRoadQuery : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public int32 QpidStart;
        [RTTI.Member(4, 0x2C)] public int32 QpidEnd;
    }

    [RTTI.Serializable(0xCC3F6EAD7D0C041, GameType.DS)]
    public class OTGCReserveRoadUploadPost : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 StartLocationId;
        [RTTI.Member(3, 0x24)] public int32 EndLocationId;
        [RTTI.Member(4, 0x28)] public uint32 AreaHash;
        [RTTI.Member(5, 0x2C)] public uint32 DataVersion;
        [RTTI.Member(6, 0x30)] public uint32 PathLength;
        [RTTI.Member(7, 0x34)] public uint32 MaxHeightDifference;
        [RTTI.Member(8, 0x38)] public int32 StartQpid;
        [RTTI.Member(9, 0x3C)] public int32 EndQpid;
    }

    [RTTI.Serializable(0xC82A5F24DC33D4BF, GameType.DS)]
    public class OTGCResponseEmpty : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x632384CCD8B2F3E3, GameType.DS)]
    public class OTGCRoadResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public int32 StartLocationId;
        [RTTI.Member(4, 0x2C)] public int32 EndLocationId;
        [RTTI.Member(5, 0x30)] public uint32 AreaHash;
        [RTTI.Member(6, 0x34)] public uint32 DataVersion;
        [RTTI.Member(7, 0x38)] public String UploadId;
        [RTTI.Member(8, 0x40)] public String Url;
        [RTTI.Member(9, 0x48)] public String Creator;
        [RTTI.Member(10, 0x50)] public int32 LikePoint;
        [RTTI.Member(11, 0x54)] public int32 StartQpid;
        [RTTI.Member(12, 0x58)] public int32 EndQpid;
    }

    [RTTI.Serializable(0x3867BBF61CEAED45, GameType.DS)]
    public class OTGCRopeInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 Pitch;
        [RTTI.Member(3, 0x24)] public int32 Heading;
        [RTTI.Member(4, 0x28)] public int32 Len;
    }

    [RTTI.Serializable(0x39FC2416F8D4FC3D, GameType.DS)]
    public class OTGCSendLikeQuery : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Oid;
        [RTTI.Member(3, 0x28)] public String Ot;
        [RTTI.Member(4, 0x30)] public String Et;
        [RTTI.Member(5, 0x38)] public int32 Lp;
        [RTTI.Member(6, 0x3C)] public int32 LpAuto;
        [RTTI.Member(7, 0x40)] public int32 Idx;
        [RTTI.Member(8, 0x48)] public String User;
    }

    [RTTI.Serializable(0x17207C444CD71817, GameType.DS)]
    public class OTGCSetConstructionMaterialsBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public Array<uint32> MaterialCounts;
        [RTTI.Member(4, 0x38)] public Array<uint32> MaterialToRepairCounts;
    }

    [RTTI.Serializable(0xF67EB5E95A94C8C5, GameType.DS)]
    public class OTGCSetMissionProgressBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Creator;
        [RTTI.Member(3, 0x28)] public String Id;
        [RTTI.Member(4, 0x30)] public String ProgressState;
        [RTTI.Member(5, 0x38)] public Array<Ref<OTGCMissionBaggage>> Baggages;
        [RTTI.Member(6, 0x48)] public int32 DeliveredLocationId;
        [RTTI.Member(7, 0x50)] public Ref<OTGCMissionDynamicLocationInfo> DynamicDeliveredInfo;
        [RTTI.Member(8, 0x58)] public int32 QpidId;
    }

    [RTTI.Serializable(0xD1DCA1525E9A60F8, GameType.DS)]
    public class OTGCSetRecycleMaterialsBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public Array<uint32> MaterialCounts;
    }

    [RTTI.Serializable(0xB44E328D70560B66, GameType.DS)]
    public class OTGCSetStrandBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> AddAccount;
        [RTTI.Member(3, 0x30)] public Array<String> DelAccount;
    }

    [RTTI.Serializable(0x869BEC42C507573A, GameType.DS)]
    public class OTGCStoneInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 RestingCount;
    }

    [RTTI.Serializable(0x18FFA6584A72C84E, GameType.DS)]
    public class OTGCUpdateObjectBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Id;
        [RTTI.Member(3, 0x28)] public Ref<OTGCStoneInfo> StoneInfo;
        [RTTI.Member(4, 0x30)] public Ref<OTGCParkingInfo> ParkingInfo;
        [RTTI.Member(5, 0x38)] public Ref<OTGCVehicleInfo> VehicleInfo;
        [RTTI.Member(6, 0x40)] public Ref<OTGCCustomizeInfo> CustomizeInfo;
    }

    [RTTI.Serializable(0xC2CA36E69402BEF5, GameType.DS)]
    public class OTGCUpdateObjectsTagBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Tag;
        [RTTI.Member(3, 0x28)] public Array<String> Add;
        [RTTI.Member(4, 0x38)] public Array<String> Del;
    }

    [RTTI.Serializable(0xE00D85F2759A65C5, GameType.DS)]
    public class OTGCUpdateObjectsTagResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCObjectResponse>> Objects;
    }

    [RTTI.Serializable(0x63683E33313EB744, GameType.DS)]
    public class OTGCVehicleInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 LocationId;
        [RTTI.Member(3, 0x28)] public String DynamicLocationId;
        [RTTI.Member(4, 0x30)] public int32 CurrentQpidId;
        [RTTI.Member(5, 0x34)] public bool IsParking;
        [RTTI.Member(6, 0x35)] public bool IsLost;
        [RTTI.Member(7, 0x38)] public int32 CustomizeType;
        [RTTI.Member(8, 0x3C)] public int32 CustomizeColor;
        [RTTI.Member(9, 0x40)] public Array<int32> NewPosition;
        [RTTI.Member(10, 0x50)] public Array<int32> NewRotation;
        [RTTI.Member(11, 0x60)] public int32 Exponent;
    }

    [RTTI.Serializable(0x97203CD7AB733334, GameType.DS)]
    public class OTGCWastedBaggageData : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int32 ItemHash;
        [RTTI.Member(1, 0xC)] public int32 X;
        [RTTI.Member(2, 0x10)] public int32 Y;
        [RTTI.Member(3, 0x14)] public int32 Z;
    }

    [RTTI.Serializable(0x24C6304A798E751F, GameType.DS)]
    public class OTGCWastedDeleteRequest : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String UserId;
        [RTTI.Member(1, 0x10)] public String BaggageId;
    }

    [RTTI.Serializable(0xF435B1F463591EB0, GameType.DS)]
    public class OTGCWastesDeleteBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<OTGCWastedDeleteRequest> DeleteRequests;
    }

    [RTTI.Serializable(0x3C0B06E99956269E, GameType.DS)]
    public class OTGCWastesGetBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<OTGCWastesQpidData> Qpids;
    }

    [RTTI.Serializable(0x32689C04F3F1D1C9, GameType.DS)]
    public class OTGCWastesGetResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<OTGCGetWastesBaggage>> Wasteds;
        [RTTI.Member(3, 0x30)] public int64 UpdateDate;
    }

    [RTTI.Serializable(0x9E92A4A0C7FC9332, GameType.DS)]
    public class OTGCWastesPutBody : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 QpidId;
        [RTTI.Member(3, 0x28)] public Array<OTGCWastedBaggageData> WastedBaggages;
    }

    [RTTI.Serializable(0xFF22C4D8EBFC5272, GameType.DS)]
    public class OTGCWastesQpidData : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int32 QpidId;
        [RTTI.Member(1, 0x10)] public int64 LastLoginDate;
    }

    [RTTI.Serializable(0xFA4F8BDBCB86669F, GameType.DS)]
    public class OTGCZygoAuthQuery : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String Provider;
        [RTTI.Member(1, 0x10)] public String Code;
    }

    [RTTI.Serializable(0x2C0E3948249364EE, GameType.DS)]
    public class OTGCZygoDiscoverResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public OTGCDiscoverResponseTitle Project;
        [RTTI.Member(3, 0x30)] public HashMap<String_OTGCZygoDiscoverResponseEnv> Environments;
    }

    [RTTI.Serializable(0xF84943388DFA27E, GameType.DS)]
    public class OTGCZygoDiscoverResponseEnv : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public String Auth;
        [RTTI.Member(1, 0x10)] public String PsnEnvironment;
    }

    [RTTI.Serializable(0xE530EE67E3415501, GameType.DS)]
    public class ObjectAttributeAnimatorInstance : CoreObject
    {
        [RTTI.Member(3, 0x20, "Animator")] public Ref<ObjectAttributeAnimatorResource> Resource;
    }

    [RTTI.Serializable(0xAF349AEED3F78AE0, GameType.DS)]
    public class ObjectAttributeAnimatorManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x64052586AD2CF7D2, GameType.DS)]
    public class ObjectAttributeAnimatorResource : ObjectAttributeAnimatorResourceBase
    {
        [RTTI.Member(5, 0x28, "Animator")] public ELoopMode LoopMode;
    }

    [RTTI.Serializable(0xBB7F1FC77E1A0C41, GameType.DS)]
    public class ObjectAttributeAnimatorResourceBase : Resource
    {
        [RTTI.Member(3, 0x20, "Animate")] public float AnimationDuration;
    }

    [RTTI.Serializable(0xFE3632BAEC5735FC, GameType.DS)]
    public class ObjectAttributeAnimatorSetInstance : ObjectAttributeAnimatorInstance
    {
        [RTTI.Member(5, 0x38, "Animator")] public Array<Ref<ObjectAttributeAnimatorInstance>> ObjectAttributeAnimators;
    }

    [RTTI.Serializable(0x9B0B085535A92283, GameType.DS)]
    public class ObjectAttributeAnimatorSetResource : ObjectAttributeAnimatorResource
    {
        [RTTI.Member(7, 0x30, "Animator")] public Array<Ref<ObjectAttributeAnimatorResource>> ObjectAttributeAnimators;
    }

    [RTTI.Serializable(0xF3586131B4F18516, GameType.DS)]
    public class ObjectCollection : CoreObject
    {
        [RTTI.BaseClass(0x20)] public RTTIRefObjectSet @RTTIRefObjectSet;
    }

    [RTTI.Serializable(0x54B99DA1CB12714A, GameType.DS)]
    public class ObjectCollectionSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAA902D505016C380, GameType.DS)]
    public class ObjectManager : CoreObject
    {
    }

    [RTTI.Serializable(0x17B84B2D1CE665F5, GameType.DS)]
    public class ObstacleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8AD63CCF2533DA, GameType.DS)]
    public class ObstacleComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EObstacleType ObstacleType;
        [RTTI.Member(4, 0x24, "Logic")] public EObstacleShape ObstacleShape;
        [RTTI.Member(5, 0x30, "Logic")] public BoundingBox3 LocalBoundingBox;
        [RTTI.Member(6, 0x50, "Logic")] public int SoftObstacleDestructDamage;
        [RTTI.Member(7, 0x54, "Logic")] public bool InvalidForVehicle;
    }

    [RTTI.Serializable(0x8AAEA9C477877851, GameType.DS)]
    public class ObtainItemsQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(9, 0x78, "Logic")] public bool MakeQuestItem;
        [RTTI.Member(10, 0x79, "Logic")] public bool PerformInitialCheck;
    }

    [RTTI.Serializable(0xA6A060D607855B71, GameType.DS)]
    public class ObtainItemsQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xD86F98DAFC5F77E9, GameType.DS)]
    public class OcclusionSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> DepthCaptureShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> HTileCaptureShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> ClearShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> DownsampleShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> VisualiseShader;
    }

    [RTTI.Serializable(0x2C49A054DCD40A4B, GameType.DS)]
    public class OdradekReactionConfig
    {
        [RTTI.Member(1, 0x0, "Logic")] public float Distance;
        [RTTI.Member(2, 0x4, "Logic")] public float Interval;
    }

    [RTTI.Serializable(0x3CA22DF2B6BBC80F, GameType.DS)]
    public class OmniLight : LightShadowed
    {
        [RTTI.Member(50, 0x2D0, "General")] public float FadeRatio;
        [RTTI.Member(51, 0x2D4, "General")] public float Radius;
        [RTTI.Member(52, 0x2D8, "General")] public float ShadowConeAngle;
        [RTTI.Member(53, 0x2DC, "General")] public float ShadowHotspotAngle;
        [RTTI.Member(54, 0x2E0, "General")] public float ShadowNearPlane;
    }

    [RTTI.Serializable(0x7B1DC7708CBFB498, GameType.DS)]
    public class OmniLightResource : LightShadowedResource
    {
        [RTTI.Member(53, 0x160, "Color")] public float FadeRatio;
        [RTTI.Member(54, 0x164, "Color")] public float Radius;
        [RTTI.Member(55, 0x168, "Color")] public float ShadowConeAngle;
        [RTTI.Member(56, 0x16C, "Color")] public float ShadowHotspotAngle;
        [RTTI.Member(58, 0x170, "Color")] public float ShadowNearPlane;
        [RTTI.Member(57, 0x174, "Color")] public bool OmniShadows;
    }

    [RTTI.Serializable(0x96384F86F834879F, GameType.DS)]
    public class OpenMenuAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public UUIDRef<MenuPage> MenuPage;
        [RTTI.Member(5, 0x38, "Logic")] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(6, 0x48, "Logic")] public bool PauseGame;
    }

    [RTTI.Serializable(0xC70D49793BE72032, GameType.DS)]
    public class OpenMenuParameter
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String Value;
    }

    [RTTI.Serializable(0xA596BD19678613BA, GameType.DS)]
    public class OpenMenuParameters : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<OpenMenuParameter> Parameters;
    }

    [RTTI.Serializable(0x8D785C68766AED95, GameType.DS)]
    public class OpenMenuParametersSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAA23A02FCBC16A4E, GameType.DS)]
    public class OpenMenuSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x15FBD9F5F99F8630, GameType.DS)]
    public class OpenMenuSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x78857D584159F274, GameType.DS)]
    public class OptionalAnimatableValue : AnimatableValue
    {
        [RTTI.Member(2, 0x18)] public bool Enabled;
    }

    [RTTI.Serializable(0xF6CD617EEDBB4F22, GameType.DS)]
    public class OrFactConditionResource : FactConditionResource
    {
        [RTTI.Member(3, 0x30, "Logic")] public Array<Ref<FactConditionResource>> Conditions;
        [RTTI.Member(4, 0x40, "Logic")] public bool IsInverted;
    }

    [RTTI.Serializable(0x3D6DD25A646BE439, GameType.DS)]
    public class OrbitCameraActorInstance : EntityActorInstanceBase
    {
    }

    [RTTI.Serializable(0x273FF2EB6FD7FA70, GameType.DS)]
    public class OrbitCameraActorResource : ActorResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<CameraEntityResource> CameraEntityResource;
        [RTTI.Member(13, 0x48, "Logic")] public Ref<LocatorResource> PrimaryLookAt;
        [RTTI.Member(14, 0x50, "Logic")] public Ref<LocatorResource> SecondaryLookAt;
        [RTTI.Member(15, 0x58, "Logic")] public Ref<LocatorResource> PrimaryOrientation;
        [RTTI.Member(18, 0x60, "Logic")] public Vec3 TargetOffset;
        [RTTI.Member(20, 0x70, "Logic")] public AnimatableValue AnimatableFactor;
        [RTTI.Member(16, 0x88, "Logic")] public float SmoothTime;
        [RTTI.Member(19, 0x90, "Logic")] public AnimatableValue AnimatableDistance;
        [RTTI.Member(21, 0xA8, "Logic")] public AnimatableValue AnimatableOrbitAngle;
        [RTTI.Member(22, 0xC0, "Logic")] public AnimatableValue AnimatableVerticalOrbitAngle;
        [RTTI.Member(17, 0xD8, "Logic")] public AnimatableValue AnimatableLookAtBias;
        [RTTI.Member(23, 0xF0, "Logic")] public AnimatableValue AnimatableFOV;
        [RTTI.Member(24, 0x108, "Logic")] public AnimatableValue AnimatableViewOffsetX;
        [RTTI.Member(25, 0x120, "Logic")] public AnimatableValue AnimatableViewOffsetY;
    }

    [RTTI.Serializable(0x23CFDA50594FA13, GameType.DS)]
    public class OrientationHelper
    {
        [RTTI.Member(2, 0x0)] public Mat44 Matrix;
        [RTTI.Member(0, 0x40)] public String Name;
        [RTTI.Member(1, 0x48)] public int Index;
    }

    [RTTI.Serializable(0xE8420DA0BF05ADA3, GameType.DS)]
    public class OrientedBox
    {
        [RTTI.Member(0, 0x0)] public Mat44 Matrix;
        [RTTI.Member(1, 0x40)] public Vec3 Extents;
    }

    [RTTI.Serializable(0x213A0F97D3E380A4, GameType.DS)]
    public class OtherEntityLifetimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF6B83635B0D036DC, GameType.DS)]
    public class OutOfBoundsAreaTag
    {
        [RTTI.Member(0, 0x0)] public Ref<NavMeshAreaTag> NavMeshAreaTag;
        [RTTI.Member(1, 0x8)] public Ref<ConditionResource> ActiveCondition;
    }

    [RTTI.Serializable(0xF25B440CBECB9754, GameType.DS)]
    public class OutOfBoundsNavMeshArea : NavMeshArea
    {
        [RTTI.Member(9, 0xB0)] public Ref<LocalizedTextResource> NotAllowedInAreaText;
    }

    [RTTI.Serializable(0xF3864A9EA6C563C3, GameType.DS)]
    public class OutOfBoundsQueryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB501153D2FA2F591, GameType.DS)]
    public class OutOfBoundsQueryComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<OutOfBoundsAreaTag> OutOfBoundsAreaTags;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<ContextualSpeechEvent> ContextualSpeechEvent;
    }

    [RTTI.Serializable(0x7D7A39DC5F540184, GameType.DS)]
    public class OutfitCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0xCBA8C9622E884A27, GameType.DS)]
    public class OutfitStreamingData : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "Logic")] public Array<OutfitStreamingDataModelPart> ModelParts;
        [RTTI.Member(7, 0x48, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponents;
        [RTTI.Member(8, 0x58, "Logic")] public Array<Ref<FactValueBase>> Facts;
    }

    [RTTI.Serializable(0x4B5FD3E0A31B38CB, GameType.DS)]
    public class OutfitStreamingDataModelPart
    {
        [RTTI.Member(2, 0x0, "Logic")] public Ref<ConditionResource> EnabledCondition;
        [RTTI.Member(1, 0x8, "Logic")] public Ref<ModelPartResource> ModelPartResource;
    }

    [RTTI.Serializable(0xD041C13F50D7C8B3, GameType.DS)]
    public class OvalAreaLandmark : AreaLandmark
    {
        [RTTI.Member(9, 0x90, "Area")] public FSize Size;
        [RTTI.Member(10, 0x98, "Area")] public float Height;
    }

    [RTTI.Serializable(0xD44280AF0B531F0E, GameType.DS)]
    public class OverloadedBaggageConfig
    {
        [RTTI.Member(1, 0x0, "Logic")] public float PositionTraceRate;
        [RTTI.Member(2, 0x4, "Logic")] public float AngularTraceRate;
        [RTTI.Member(3, 0x10, "Logic")] public Vec3 DistanceLimitMin;
        [RTTI.Member(4, 0x20, "Logic")] public Vec3 DistanceLimitMax;
        [RTTI.Member(5, 0x30, "Logic")] public Vec3 AngularDifferenceLimitMin;
        [RTTI.Member(6, 0x40, "Logic")] public Vec3 AngularDifferenceLimitMax;
        [RTTI.Member(7, 0x50, "Logic")] public float PositionMultiplier;
        [RTTI.Member(8, 0x54, "Logic")] public float AngularMultiplier;
        [RTTI.Member(9, 0x58, "Logic")] public float GravityValue;
    }

    [RTTI.Serializable(0x7D0EF63A99A0A031, GameType.DS)]
    public class OverrideAirSceneRestrictionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDD4A4C6A94E3402, GameType.DS)]
    public class OverrideAirSceneRestrictionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public WorldPosition Position;
        [RTTI.Member(4, 0x38, "Logic")] public float Radius;
    }

    [RTTI.Serializable(0xB6AB03D71A0A37EF, GameType.DS)]
    public class OverrideAutoContextInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4AE692FDE02A2AAE, GameType.DS)]
    public class OverrideAutoContextResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<AIContextHintResource> ContextHint;
    }

    [RTTI.Serializable(0xE25DA10B3134952C, GameType.DS)]
    public class OverrideCameraDoFEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xBEC5D01E275E2CA, GameType.DS)]
    public class OverrideCameraDoFEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<CameraActorResource> CameraActorResource;
        [RTTI.Member(13, 0x50, "Logic")] public AnimatableValue AnimatableAperture;
        [RTTI.Member(14, 0x68, "Logic")] public AnimatableValue AnimatableFocusDistance;
        [RTTI.Member(15, 0x80, "Logic")] public float DegreeOfFocusBreathing;
    }

    [RTTI.Serializable(0x7B08676BA7E7FB96, GameType.DS)]
    public class OverrideEyeColorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x41482FC6862368FE, GameType.DS)]
    public class OverrideEyeColorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<AIEyeColorHintResource> EyeColorResource;
    }

    [RTTI.Serializable(0xAA791487333DEDCA, GameType.DS)]
    public class OverrideGraphProgramResource : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(5, 0x40)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(6, 0x48)] public Array<Ref<NodeGraphVariableOverride>> VariableOverrides;
    }

    [RTTI.Serializable(0x4B97B474C24E991A, GameType.DS)]
    public class PBDBodyResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<PBDVertexDesc> Vertices;
        [RTTI.Member(4, 0x30, "General")] public Array<PBDConstraintDesc> Constraints;
        [RTTI.Member(5, 0x40, "General")] public Array<uint16> TriangleIndexList;
        [RTTI.Member(6, 0x50, "General")] public float GlobalMotionDamping;
        [RTTI.Member(7, 0x54, "General")] public float ForceFieldInfluence;
        [RTTI.Member(8, 0x58, "General")] public float Drag;
        [RTTI.Member(9, 0x5C, "General")] public float Lift;
        [RTTI.Member(11, 0x60, "Cached")] public int ConstraintSizeRT;
    }

    [RTTI.Serializable(0xA2E40518E68C0161, GameType.DS)]
    public class PBDConstraintDesc
    {
        [RTTI.Member(0, 0x0)] public EPBDConstraintDescType Type;
        [RTTI.Member(1, 0x4)] public float Stiffness;
        [RTTI.Member(2, 0x8)] public uint16 VtxIndex0;
        [RTTI.Member(3, 0xA)] public uint16 VtxIndex1;
        [RTTI.Member(4, 0xC)] public uint16 VtxIndex2;
        [RTTI.Member(5, 0xE)] public uint16 VtxIndex3;
    }

    [RTTI.Serializable(0x58089FFB0D759D0A, GameType.DS)]
    public class PBDDeformedSkinnedMesh : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<PBDBodyResource> PBDBodyResource;
        [RTTI.Member(3, 0x28)] public Ref<RegularSkinnedMeshResourceBase> SkinnedMesh;
        [RTTI.Member(4, 0x30)] public PBDPoseMapper PoseMapper;
        [RTTI.Member(5, 0x40)] public Ref<SkinnedPointsResource> SkinAttachedPoints;
    }

    [RTTI.Serializable(0x8020FB3130526D08, GameType.DS)]
    public class PBDEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6FB32A30E108C4E7, GameType.DS)]
    public class PBDEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float SphereRadius;
        [RTTI.Member(4, 0x28, "Logic")] public String HelperNode;
    }

    [RTTI.Serializable(0x2A97E759F9A00E66, GameType.DS)]
    public class PBDGraphExtInput
    {
    }

    [RTTI.Serializable(0xD8BE3F4BEB03225A, GameType.DS)]
    public class PBDGraphGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDF699AF60AB3476E, GameType.DS)]
    public class PBDGraphSimBody
    {
        [RTTI.Member(0, 0x0)] public Ref<PBDBodyResource> Body;
        [RTTI.Member(1, 0x8)] public Array<PBDVertexTopologyDesc> VtxTopologyList;
        [RTTI.Member(2, 0x18)] public Array<PBDVtxSkinBinding> VtxSkinBindingListRT;
    }

    [RTTI.Serializable(0xDF1BEFDBEA029319, GameType.DS)]
    public class PBDNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x7858C24C3F2B847B, GameType.DS)]
    public class PBDNodeStateResource : StateObjectResource
    {
        [RTTI.Member(2, 0x20)] public int SolverIterations;
        [RTTI.Member(3, 0x24)] public float SolverUpdateFreq;
        [RTTI.Member(4, 0x28)] public float Friction;
        [RTTI.Member(5, 0x2C)] public float Restitution;
        [RTTI.Member(6, 0x30)] public bool WorldMotionLimitEnabled;
        [RTTI.Member(7, 0x34)] public float WorldMotionLimit;
        [RTTI.Member(8, 0x38)] public float WorldMotionInfluence;
        [RTTI.Member(9, 0x40)] public Array<PBDGraphSimBody> BodyList;
        [RTTI.Member(10, 0x50)] public Ref<Skeleton> Skeleton;
        [RTTI.Member(11, 0x58)] public Array<Mat44> InvBindMatrices;
    }

    [RTTI.Serializable(0x63D4A4DF6C4B7DA5, GameType.DS)]
    public class PBDPoseMapper
    {
        [RTTI.Member(0, 0x0)] public Array<float> VtxToMatrixMapping;
    }

    [RTTI.Serializable(0x3848124A4B784C75, GameType.DS)]
    public class PBDVertexDesc
    {
        [RTTI.Member(0, 0x0)] public Vec3 Position;
        [RTTI.Member(1, 0x10)] public float Mass;
        [RTTI.Member(2, 0x14)] public float Area;
        [RTTI.Member(3, 0x18)] public float MaxDistance;
        [RTTI.Member(4, 0x1C)] public float Backstop;
    }

    [RTTI.Serializable(0xF9D1F83283770E2E, GameType.DS)]
    public class PBDVertexTopologyDesc
    {
        [RTTI.Member(0, 0x0)] public Array<uint16> IdxList;
    }

    [RTTI.Serializable(0x6714FF0562C796B0, GameType.DS)]
    public class PBDVtxSkinBinding
    {
        [RTTI.Member(0, 0x0)] public uint16_PBD_MAX_SKIN_WEIGHTS<uint16> InflIdx;
        [RTTI.Member(1, 0x8)] public uint8_PBD_MAX_SKIN_WEIGHTS<uint8> Weights;
    }

    [RTTI.Serializable(0x7534741F5EBD076D, GameType.DS)]
    public class PCoreFuncGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDB11F63D1B80C8B9, GameType.DS)]
    public class PCoreGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4E2C56F64AF6922E, GameType.DS)]
    public class PGeometryGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD1C86D7CC2DDB410, GameType.DS)]
    public class PMathGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6C43F5EADEDCCDB3, GameType.DS)]
    public class PMathGroupGlobals : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE6F65B5A11A5F783, GameType.DS)]
    public class PODVariant
    {
        [RTTI.Member(0, 0x0)] public EPODVariantType Type;
        [RTTI.Member(1, 0x4)] public uint32 BinaryValue;
    }

    [RTTI.Serializable(0xE2A3FEB8B29A79DF, GameType.DS)]
    public class POSFuncGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDE5FC5432E0BD880, GameType.DS)]
    public class PRTTIGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2729B78B87418922, GameType.DS)]
    public class PackageItemRuntimeData : InventoryItemRuntimeData
    {
    }

    [RTTI.Serializable(0x92FEB57BC7E2B155, GameType.DS)]
    public class PackageItemRuntimeDataRestoreState : InventoryItemRuntimeDataRestoreState
    {
        [RTTI.Member(2, 0x28)] public bool IsOpened;
        [RTTI.Member(3, 0x30)] public Array<Ref<InventoryItemRestoreState>> Items;
    }

    [RTTI.Serializable(0x7DE91861621C138F, GameType.DS)]
    public class PackageUseLocationPromptUIDataBinding : UseLocationPromptUIDataBinding
    {
        [RTTI.Member(2, 0x18)] public CPtr<LocalizedTextResource> PACKAGE_STATE;
    }

    [RTTI.Serializable(0xA20E80EC6CB51BE1, GameType.DS)]
    public class PaintJob : RTTIObject
    {
    }

    [RTTI.Serializable(0x396BD2204881752F, GameType.DS)]
    public class PanelTag : VisualTag
    {
    }

    [RTTI.Serializable(0xFA336EE6BB5FF103, GameType.DS)]
    public class PanelWidget : Widget
    {
    }

    [RTTI.Serializable(0xFB0FBC3B7B6FE6A3, GameType.DS)]
    public class ParameterizedHapticWaveResource : HapticWaveResource
    {
        [RTTI.Member(9, 0x40, "General")] public float Frequency;
        [RTTI.Member(11, 0x44, "General")] public float Length;
        [RTTI.Member(12, 0x48, "General")] public float Velocity;
        [RTTI.Member(13, 0x4C, "General")] public float Pan;
        [RTTI.Member(14, 0x50, "General")] public float EnvelopeAttack;
        [RTTI.Member(15, 0x54, "General")] public float EnvelopeDecay;
        [RTTI.Member(16, 0x58, "General")] public float EnvelopeSustaine;
        [RTTI.Member(17, 0x5C, "General")] public float EnvelopeRelease;
        [RTTI.Member(18, 0x60, "General")] public float PhaseShiftL;
        [RTTI.Member(19, 0x64, "General")] public float PhaseShiftR;
        [RTTI.Member(20, 0x68, "General")] public float Duty;
        [RTTI.Member(23, 0x6C, "General")] public float SweepRate;
        [RTTI.Member(25, 0x70, "General")] public float LFOFrequency;
        [RTTI.Member(26, 0x74, "General")] public float LFOModulateScale;
        [RTTI.Member(21, 0x78, "General")] public bool SweepEnable;
        [RTTI.Member(24, 0x79, "General")] public bool LFOModulate;
        [RTTI.Member(10, 0x7A, "General")] public uint8 WaveType;
        [RTTI.Member(22, 0x7B, "General")] public uint8 SweepType;
    }

    [RTTI.Serializable(0x7D090045200EDD01, GameType.DS)]
    public class ParametricEqResource : Resource
    {
        [RTTI.Member(3, 0x20, "Params")] public ESoundFilterMode Mode;
        [RTTI.Member(4, 0x24, "Params")] public float Gain;
        [RTTI.Member(5, 0x28, "Params")] public float Frequency;
        [RTTI.Member(6, 0x2C, "Params")] public float QValue;
    }

    [RTTI.Serializable(0x924C5ADB2F8C4523, GameType.DS)]
    public class ParentWorldNode : WorldNode
    {
        [RTTI.Member(5, 0x68, "General")] public bool ChildTransformsRelative;
    }

    [RTTI.Serializable(0xEA94A45FBFF08131, GameType.DS)]
    public class ParentWorldNodeOverridable : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "Override")] public Ref<WorldNode> Overrider;
    }

    [RTTI.Serializable(0xE441024A40E3FEC8, GameType.DS)]
    public class ParkourComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC820518F9FAD135, GameType.DS)]
    public class ParkourComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ParkourTransitionSettings> ParkourTransitionSettings;
        [RTTI.Member(5, 0x28, "AI")] public Ref<AIHapticStimulusResource> ClimbingHapticStimulus;
        [RTTI.Member(6, 0x30, "AI")] public Array<String> ParkourVisualNodeBones;
    }

    [RTTI.Serializable(0x5A7B714A7EFB9B90, GameType.DS)]
    public class ParkourInitialAttachmentSettings
    {
        [RTTI.Member(0, 0x0)] public float DurationOnFoot;
        [RTTI.Member(1, 0x4)] public float DurationWithHandsWithFootSupport;
        [RTTI.Member(2, 0x8)] public float DurationWithHandsWithoutFootSupport;
        [RTTI.Member(3, 0xC)] public float FactorStrength;
    }

    [RTTI.Serializable(0x222450B01165F882, GameType.DS)]
    public class ParkourLimbOffset
    {
        [RTTI.Member(0, 0x0)] public String JointName;
        [RTTI.Member(1, 0x10)] public Vec3 ResolvedOffset;
    }

    [RTTI.Serializable(0xA5DA706B17FB2B80, GameType.DS)]
    public class ParkourPathSegment : RTTIRefObject
    {
        [RTTI.Member(2, 0x28)] public CPtr<AnnotationLinkNode> From;
        [RTTI.Member(3, 0x30)] public CPtr<AnnotationLinkNode> To;
        [RTTI.Member(4, 0x38)] public WorldPosition FloorPosition;
        [RTTI.Member(5, 0x50)] public Array<Ref<ParkourTransition>> Transitions;
    }

    [RTTI.Serializable(0xFB7B716C75C3BDF3, GameType.DS)]
    public class ParkourTransition : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public ParkourTransitionMetrics TransitionMetrics;
        [RTTI.Member(5, 0x90, "Conditions")] public ParkourTransitionCondition Pre;
        [RTTI.Member(6, 0x9A, "Conditions")] public ParkourTransitionCondition Post;
        [RTTI.Member(7, 0xA4, "Conditions")] public EParkourTransitionType TransitionType;
        [RTTI.Member(8, 0xA8, "Conditions")] public Ref<EnumFactEntry> TransitionTypeFactValue;
        [RTTI.Member(9, 0xB0, "Conditions")] public String TransitionAnnotationTag;
        [RTTI.Member(10, 0xB8, "Conditions")] public bool OrientEntityTowardsDestination;
        [RTTI.Member(11, 0xB9, "Conditions")] public bool RequiresJumpButtonPress;
        [RTTI.Member(13, 0xBC, "Debugging")] public RGBAColor DebugColor;
        [RTTI.Member(15, 0xC0, "Collision")] public EAnimationTransitionCollisionPath CollisionPathType;
        [RTTI.Member(16, 0xC4, "Collision")] public AnimationEventID CollisionPathAnimEvent;
        [RTTI.Member(18, 0xC8, "Camera")] public Ref<CameraModeResource> CameraMode;
        [RTTI.Member(20, 0xD0, "Scoring")] public float AdditionalSearchScore;
    }

    [RTTI.Serializable(0xF4AAA45A6A07B257, GameType.DS)]
    public class ParkourTransitionCondition
    {
        [RTTI.Member(0, 0x0)] public bool OnFoot_Point;
        [RTTI.Member(1, 0x1)] public bool OnFoot_Bar_Perpendicular;
        [RTTI.Member(2, 0x2)] public bool OnFoot_Bar_Parallel;
        [RTTI.Member(3, 0x3)] public bool OnFoot_Ground_Standing;
        [RTTI.Member(4, 0x4)] public bool OnFoot_Ground_Crouched;
        [RTTI.Member(5, 0x5)] public bool Hanging_With_FootSupport;
        [RTTI.Member(6, 0x6)] public bool Hanging_Without_FootSupport;
        [RTTI.Member(7, 0x7)] public bool OnLadder_With_FootSupport;
        [RTTI.Member(8, 0x8)] public bool OnLadder_Without_FootSupport;
        [RTTI.Member(9, 0x9)] public bool IsAiming;
    }

    [RTTI.Serializable(0x3B4D7F67F258E013, GameType.DS)]
    public class ParkourTransitionDetectionLimits
    {
        [RTTI.Member(0, 0x0)] public Array<Vec2> MeshVertices;
        [RTTI.Member(1, 0x10)] public EParkourTransitionLimitAxis MeshAxisX;
        [RTTI.Member(2, 0x11)] public EParkourTransitionLimitAxis MeshAxisY;
        [RTTI.Member(3, 0x18)] public Array<Triangle2D> MeshTriangles;
        [RTTI.Member(4, 0x28)] public EParkourTransitionLimitSimpleShape SimpleShapeType;
        [RTTI.Member(5, 0x30)] public Vec2 SimpleShapeRadius;
        [RTTI.Member(6, 0x40)] public EParkourTransitionLimitAxis SimpleShapeAxisX;
        [RTTI.Member(7, 0x41)] public EParkourTransitionLimitAxis SimpleShapeAxisY;
    }

    [RTTI.Serializable(0xE89455BB2E7B05D, GameType.DS)]
    public class ParkourTransitionMetrics
    {
        [RTTI.Member(0, 0x0)] public Mat44 TotalTransform;
        [RTTI.Member(1, 0x40)] public float TotalHeadingDelta;
        [RTTI.Member(2, 0x48)] public Array<Vec3> CollisionCapsulePath;
        [RTTI.Member(3, 0x60)] public Vec3 CollisionCapsulePathEndOffsetFromRootBone;
    }

    [RTTI.Serializable(0xD50BE26E7373968, GameType.DS)]
    public class ParkourTransitionSettings : CoreObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public String ClimbIdleWithFootSupportStateName;
        [RTTI.Member(4, 0x28, "Logic")] public String ClimbIdleWithoutFootSupportStateName;
        [RTTI.Member(5, 0x30, "Logic")] public Vec3 ClimbIdleWithFootSupportOffset;
        [RTTI.Member(6, 0x40, "Logic")] public Vec3 ClimbIdleWithoutFootSupportOffset;
        [RTTI.Member(37, 0x50, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsOnFootToOnFootPerched;
        [RTTI.Member(38, 0xA0, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsOnFootToOnFootOnGround;
        [RTTI.Member(39, 0xF0, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsOnFootToWithHands;
        [RTTI.Member(40, 0x140, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsWithHandsWithFootSupport;
        [RTTI.Member(41, 0x190, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsWithHandsWithoutFootSupport;
        [RTTI.Member(7, 0x1E0, "Logic")] public Vec3 CollisionCapsuleOffsetOnFoot;
        [RTTI.Member(8, 0x1F0, "Logic")] public Vec3 CollisionCapsuleOffsetWithHands;
        [RTTI.Member(11, 0x200, "Logic")] public Vec3 ReachOriginOffsetOnFoot;
        [RTTI.Member(12, 0x210, "Logic")] public Vec3 ReachOriginOffsetWithHands;
        [RTTI.Member(43, 0x220, "Animation")] public Array<Ref<ParkourTransition>> Transitions;
        [RTTI.Member(31, 0x230, "FootPlacement")] public ParkourLimbOffset LeftFootOffsetInIdle;
        [RTTI.Member(32, 0x250, "FootPlacement")] public ParkourLimbOffset RightFootOffsetInIdle;
        [RTTI.Member(33, 0x270, "FootPlacement")] public FRange FeetPushDistanceRange;
        [RTTI.Member(34, 0x278, "FootPlacement")] public float FootSupportDetectionRadius;
        [RTTI.Member(35, 0x27C, "FootPlacement")] public float SecondaryFootSupportOffset;
        [RTTI.Member(14, 0x280, "HandPlacement")] public ParkourLimbOffset LeftHandOffsetInIdleWithFootSupport;
        [RTTI.Member(15, 0x2A0, "HandPlacement")] public ParkourLimbOffset RightHandOffsetInIdleWithFootSupport;
        [RTTI.Member(16, 0x2C0, "HandPlacement")] public ParkourLimbOffset LeftHandOffsetInIdleWithoutFootSupport;
        [RTTI.Member(17, 0x2E0, "HandPlacement")] public ParkourLimbOffset RightHandOffsetInIdleWithoutFootSupport;
        [RTTI.Member(18, 0x300, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckStartWithFootSupport;
        [RTTI.Member(19, 0x310, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckStartWithFootSupport;
        [RTTI.Member(20, 0x320, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckEndWithFootSupport;
        [RTTI.Member(21, 0x330, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckEndWithFootSupport;
        [RTTI.Member(22, 0x340, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckStartWithoutFootSupport;
        [RTTI.Member(23, 0x350, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckStartWithoutFootSupport;
        [RTTI.Member(24, 0x360, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckEndWithoutFootSupport;
        [RTTI.Member(25, 0x370, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckEndWithoutFootSupport;
        [RTTI.Member(27, 0x380, "HandPlacement")] public Vec3 HandSupportLeftFingersOffset;
        [RTTI.Member(28, 0x390, "HandPlacement")] public Vec3 HandSupportRightFingersOffset;
        [RTTI.Member(26, 0x3A0, "HandPlacement")] public float HandSupportDetectionRadius;
        [RTTI.Member(29, 0x3A4, "HandPlacement")] public float PerchedOnSegmentTurnAngleThreshold;
        [RTTI.Member(9, 0x3A8, "Logic")] public Ref<MorphemeAnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(10, 0x3B0, "Logic", true)] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(44, 0x3C0, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportInnerLeft;
        [RTTI.Member(45, 0x3D0, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportInnerLeft;
        [RTTI.Member(46, 0x3E0, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportOuterLeft;
        [RTTI.Member(47, 0x3F0, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportOuterLeft;
        [RTTI.Member(48, 0x400, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportInnerRight;
        [RTTI.Member(49, 0x410, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportInnerRight;
        [RTTI.Member(50, 0x420, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportOuterRight;
        [RTTI.Member(51, 0x430, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportOuterRight;
        [RTTI.Member(53, 0x440, "AI")] public Ref<NavMeshBuilderSettings> NavMeshSettings;
    }

    [RTTI.Serializable(0xD57D1E1B60E532A, GameType.DS)]
    public class PartData
    {
        [RTTI.Member(0, 0x0)] public int PartId;
        [RTTI.Member(1, 0x10)] public RagdollPart _PartData;
    }

    [RTTI.Serializable(0x3E893F2E57223E9C, GameType.DS)]
    public class PartialAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA79618E61C63904C, GameType.DS)]
    public class PartialAnimationEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(13, 0x50, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(14, 0x58, "Logic")] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(15, 0x60, "Logic")] public Ref<PartialAnimationSettings> PartialAnimationSettings;
        [RTTI.Member(16, 0x68, "Logic")] public bool Loop;
    }

    [RTTI.Serializable(0x4A896AD20B4C22C7, GameType.DS)]
    public class PartialAnimationSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public AnimationVariableSettings BoneSetSettings;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<ExternalAnimationConfiguration> AnimationConfiguration;
    }

    [RTTI.Serializable(0x9982A9A113E54BB, GameType.DS)]
    public class ParticleControlledAttribute
    {
        [RTTI.Member(1, 0x0, "General")] public Ref<CurveResource> Curve;
        [RTTI.Member(2, 0x8, "General")] public EParticleControlledAttributeSource SourceValue;
        [RTTI.Member(3, 0x10, "General")] public String AttributeName;
    }

    [RTTI.Serializable(0x8677EAA03A88EC6, GameType.DS)]
    public class ParticleEmitter : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public EEmitterShape Shape;
        [RTTI.Member(4, 0x24, "Settings")] public bool EmitOnSurface;
        [RTTI.Member(6, 0x28, "Settings")] public EEmitAxis EmitAxis;
        [RTTI.Member(21, 0x2C, "Settings")] public EParticleEmitRateUnits ParticleRateUnit;
        [RTTI.Member(17, 0x30, "Settings")] public IParticleSysVar StartParticleCount;
        [RTTI.Member(7, 0x30, "Settings", true)] public int NumberOfStartParticles;
        [RTTI.Member(8, 0x34, "Settings", true)] public IParticleSysVar NumberOfStartParticlesVar;
        [RTTI.Member(19, 0x38, "Settings")] public ParticleSysVar OffAxisVariable;
        [RTTI.Member(20, 0x40, "Settings")] public ParticleSysVar OffPlaneVariable;
        [RTTI.Member(18, 0x48, "Settings")] public ParticleSysVar ParticleRateVariable;
        [RTTI.Member(37, 0x50, "Settings")] public ParticleSysVar DelayVariable;
        [RTTI.Member(9, 0x50, "Settings", true)] public float Delay;
        [RTTI.Member(10, 0x54, "Settings", true)] public float DelayVar;
        [RTTI.Member(11, 0x58, "Settings", true)] public float Burst;
        [RTTI.Member(38, 0x58, "Settings")] public ParticleSysVar BurstVariable;
        [RTTI.Member(12, 0x5C, "Settings", true)] public float BurstVar;
        [RTTI.Member(39, 0x60, "Settings")] public ParticleSysVar PauseVariable;
        [RTTI.Member(13, 0x60, "Settings", true)] public float Pause;
        [RTTI.Member(14, 0x64, "Settings", true)] public float PauseVar;
        [RTTI.Member(15, 0x68, "Settings", true)] public float Duration;
        [RTTI.Member(40, 0x68, "Settings")] public ParticleSysVar DurationVariable;
        [RTTI.Member(16, 0x6C, "Settings", true)] public float DurationVar;
        [RTTI.Member(28, 0x70, "Settings")] public ParticleSysVar EmitterLengthVar;
        [RTTI.Member(29, 0x78, "Settings")] public ParticleSysVar EmitterWidthVar;
        [RTTI.Member(30, 0x80, "Settings")] public ParticleSysVar EmitterHeightVar;
        [RTTI.Member(31, 0x88, "Settings")] public ParticleSysVar PositionX;
        [RTTI.Member(32, 0x90, "Settings")] public ParticleSysVar PositionY;
        [RTTI.Member(33, 0x98, "Settings")] public ParticleSysVar PositionZ;
        [RTTI.Member(34, 0xA0, "Settings")] public ParticleSysVar RotationX;
        [RTTI.Member(35, 0xA8, "Settings")] public ParticleSysVar RotationY;
        [RTTI.Member(36, 0xB0, "Settings")] public ParticleSysVar RotationZ;
        [RTTI.Member(25, 0xB8, "Settings")] public ParticleRandomSeedMode TimingRandomSeedMode;
        [RTTI.Member(26, 0xBC, "Settings")] public int TimingRandomSeed;
        [RTTI.Member(22, 0xC0, "Settings")] public float VelocityFactor;
        [RTTI.Member(24, 0xC4, "Settings")] public float VelocityFactorClampScale;
        [RTTI.Member(23, 0xC8, "Settings")] public bool VelocityFactorClamped;
        [RTTI.Member(5, 0xC9, "Settings")] public bool EmitInversed;
        [RTTI.Member(27, 0xD0, "Settings")] public Vec2 ClipRangeMinMax;
        [RTTI.Member(42, 0xE0, "Settings")] public Array<EmitterVertex> MeshEmitterVertices;
        [RTTI.Member(41, 0xF0, "Settings")] public EMeshEmitterSpawnOrder MeshEmitterSpawnOrder;
        [RTTI.Member(43, 0xF8, "Settings")] public Ref<StaticMeshResource> MeshEmitterMesh;
        [RTTI.Member(44, 0x108, "Settings")] public Ref<GraphProgramResource> GraphProgramResource;
    }

    [RTTI.Serializable(0xF00CAB16CF4B7FC8, GameType.DS)]
    public class ParticleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x86EC5DBC300CA49B, GameType.DS)]
    public class ParticleEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<ParticleSystemResource> ParticleSystemResourceCensored;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(11, 0x48, "Logic")] public int FadeOutOffset;
        [RTTI.Member(12, 0x4C, "Logic")] public bool SoftFadeOut;
        [RTTI.Member(13, 0x50, "Logic")] public Array<ParticleEventVirtualEmitter> VirtualEmitters;
    }

    [RTTI.Serializable(0xB3E95D6921AF4682, GameType.DS)]
    public class ParticleEventVirtualEmitter
    {
        [RTTI.Member(0, 0x0)] public int FrameOffset;
        [RTTI.Member(1, 0x10)] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xC4FFCD9BB93D9210, GameType.DS)]
    public class ParticleModifierSettings
    {
        [RTTI.Member(1, 0x0, "General")] public uint ActiveModifiers;
        [RTTI.Member(3, 0x8, "Size")] public Ref<CurveResource> SizeCurve;
        [RTTI.Member(4, 0x10, "Size")] public bool ModulateExternalSize;
        [RTTI.Member(6, 0x18, "Color")] public Ref<Gradient> ColorGradient;
        [RTTI.Member(7, 0x20, "Color")] public Ref<Gradient> SecondaryColorGradient;
        [RTTI.Member(9, 0x128, "Color")] public bool ModulateExternalColor;
        [RTTI.Member(8, 0x129, "Color")] public bool UseSecondaryColorVariation;
        [RTTI.Member(10, 0x12C, "Color")] public float ColorHueVariation;
        [RTTI.Member(11, 0x130, "Color")] public float ColorLightnessVariation;
        [RTTI.Member(13, 0x134, "Rotation")] public ParticleSysVar RotationSpeedPitch;
        [RTTI.Member(14, 0x13C, "Rotation")] public ParticleSysVar RotationSpeedRoll;
        [RTTI.Member(15, 0x144, "Rotation")] public ParticleSysVar RotationSpeedYaw;
        [RTTI.Member(16, 0x14C, "Rotation")] public float RotationFriction;
        [RTTI.Member(18, 0x150, "Physics")] public Vec3 Gravity;
        [RTTI.Member(19, 0x160, "Physics")] public ParticleSysValue Friction;
        [RTTI.Member(20, 0x170, "Physics")] public bool UseFrictionCurve;
        [RTTI.Member(21, 0x174, "Physics")] public float ForceFieldInfluence;
        [RTTI.Member(22, 0x178, "Physics")] public float UseSurfaceRoundness;
        [RTTI.Member(25, 0x17C, "WaterInteraction")] public bool WaterInteractionEnabled;
        [RTTI.Member(26, 0x180, "WaterInteraction")] public float WaterBuoyancyFactor;
        [RTTI.Member(27, 0x184, "WaterInteraction")] public float WaterCollisionRadius;
        [RTTI.Member(23, 0x188, "Physics")] public bool MoveWithCamera;
        [RTTI.Member(29, 0x190, "Brownian")] public ParticleSysValue BrownianMotion;
        [RTTI.Member(30, 0x1A0, "Brownian")] public float BrownianMotionFrequency;
        [RTTI.Member(31, 0x1B0, "Brownian")] public Vec3 BrownianMotionScale;
        [RTTI.Member(33, 0x1C0, "WorldCollision")] public EParticleCollisionMode CollisionMode;
        [RTTI.Member(34, 0x1C4, "WorldCollision")] public ParticleSysVar CollisionBounce;
        [RTTI.Member(35, 0x1CC, "WorldCollision")] public ParticleSysVar CollisionSlide;
        [RTTI.Member(36, 0x1D4, "WorldCollision")] public bool StickOnImpact;
        [RTTI.Member(37, 0x1D5, "WorldCollision")] public bool DieOnImpact;
        [RTTI.Member(38, 0x1D8, "WorldCollision")] public float CollisionRadiusScale;
        [RTTI.Member(39, 0x1DC, "WorldCollision")] public float CollisionDelay;
        [RTTI.Member(40, 0x1E0, "WorldCollision")] public float CollisionHardness;
        [RTTI.Member(41, 0x1E4, "WorldCollision")] public float CollisionDisableRange;
        [RTTI.Member(42, 0x1E8, "WorldCollision")] public Ref<MaterialTypeResource> CollisionMaterialTypeResource;
        [RTTI.Member(43, 0x1F0, "WorldCollision")] public int16 CollisionMask;
        [RTTI.Member(44, 0x1F2, "WorldCollision")] public bool SpawnImpactEffects;
        [RTTI.Member(46, 0x1F3, "WorldCollision")] public bool WaterContactEnabled;
        [RTTI.Member(45, 0x1F4, "WorldCollision")] public float ImpactEffectVelocityThreshold;
        [RTTI.Member(48, 0x200, "FrustumTiling")] public Vec3 BoxSize;
        [RTTI.Member(49, 0x210, "FrustumTiling")] public float DepthOffset;
    }

    [RTTI.Serializable(0x6790B31B3FB1D128, GameType.DS)]
    public class ParticlePropertySettings
    {
        [RTTI.Member(1, 0x0, "General")] public EAxisType AxisLock;
        [RTTI.Member(2, 0x4, "General")] public ParticleSysVar LifeSpawn;
        [RTTI.Member(4, 0xC, "General")] public ParticleSysVar Velocity;
        [RTTI.Member(8, 0x14, "General")] public ParticleSysVar SizeSpawn;
        [RTTI.Member(7, 0x1C, "General")] public ParticleSysVar AngleSpawnZ;
        [RTTI.Member(5, 0x24, "General")] public ParticleSysVar AngleSpawnX;
        [RTTI.Member(6, 0x2C, "General")] public ParticleSysVar AngleSpawnY;
        [RTTI.Member(9, 0x40, "General")] public FRGBAColor BaseColor;
        [RTTI.Member(10, 0x50, "General")] public Array<Ref<ParticleSystemResource>> SpawningParticleSystems;
        [RTTI.Member(14, 0x60, "General")] public Array<Ref<PostProcessEffectorResource>> PostProcessEffectors;
        [RTTI.Member(15, 0x70, "General")] public Array<Ref<ForceFieldResource>> SpawningForceFields;
        [RTTI.Member(11, 0x80, "General")] public Array<Ref<StaticMeshResource>> SpawningMeshes;
        [RTTI.Member(12, 0x90, "General")] public Array<ParticleControlledAttribute> SpawnedMeshShaderVariables;
        [RTTI.Member(13, 0xA0, "General")] public bool DisableParallelRenderDataUpdate;
        [RTTI.Member(29, 0xA1, "General")] public bool SpawnLights;
        [RTTI.Member(30, 0xA2, "General")] public bool LightsEmitSpecular;
        [RTTI.Member(31, 0xA4, "General")] public float LightRangeScale;
        [RTTI.Member(32, 0xA8, "General")] public float LightIntensity;
        [RTTI.Member(33, 0xAC, "General")] public float LightColorSaturation;
        [RTTI.Member(16, 0xB0, "General")] public bool Spawn2DParticles;
        [RTTI.Member(17, 0xB4, "General")] public EParticleShape Shape;
        [RTTI.Member(18, 0xB8, "General")] public EParticlePivotAligment PivotAlignment;
        [RTTI.Member(19, 0xBC, "General")] public float Roundedness;
        [RTTI.Member(20, 0xC0, "General")] public float AspectRatio;
        [RTTI.Member(21, 0xC0, "General")] public ParticleSysVar AspectRatioVar;
        [RTTI.Member(22, 0xC8, "General")] public Ref<CurveResource> AspectRatioCurve;
        [RTTI.Member(24, 0xD0, "General")] public ESelfShadowMode SelfShadowMode;
        [RTTI.Member(25, 0xD4, "General")] public float SelfShadowStrength;
        [RTTI.Member(26, 0xD8, "General")] public float LightingSaturation;
        [RTTI.Member(27, 0xDC, "General")] public float ParticleTranslucency;
        [RTTI.Member(28, 0xE0, "General")] public int MeshSubDivisions;
        [RTTI.Member(37, 0xE4, "Visibility")] public EParticleFadeMode FadeMode;
        [RTTI.Member(38, 0xE8, "Visibility")] public float FadeStartNear;
        [RTTI.Member(39, 0xEC, "Visibility")] public float FadeStartFar;
        [RTTI.Member(40, 0xF0, "Visibility")] public float FadeEndNear;
        [RTTI.Member(41, 0xF4, "Visibility")] public float FadeEndFar;
        [RTTI.Member(23, 0xF8, "General")] public bool UseObjectSpace;
        [RTTI.Member(3, 0xF9, "General")] public bool InfiniteLife;
        [RTTI.Member(34, 0xFC, "General")] public float MotionVectorScaleFactor;
        [RTTI.Member(35, 0x100, "General")] public Array<ParticleControlledAttribute> ParticleVertexAttributes;
    }

    [RTTI.Serializable(0x29E99D0D6B9F221D, GameType.DS)]
    public class ParticleShaderVariable
    {
        [RTTI.Member(1, 0x0, "General")] public String VariableID;
        [RTTI.Member(2, 0x8, "General")] public float Value;
    }

    [RTTI.Serializable(0x163173D109A3C0AB, GameType.DS)]
    public class ParticleSysValue
    {
        [RTTI.Member(0, 0x0)] public float Value;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x194294658B1F0803, GameType.DS)]
    public class ParticleSysVar
    {
        [RTTI.Member(0, 0x0)] public float Value;
        [RTTI.Member(1, 0x4)] public float Variation;
    }

    [RTTI.Serializable(0x6DB328D6A755DAE2, GameType.DS)]
    public class ParticleSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> LightSamplingWithVertexGenerationShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> LightSamplingShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> ParticleStatsInitCompute;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> ParticleUpdateCompute;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> ParticleUpdateComputeNoVal;
    }

    [RTTI.Serializable(0xD03A2BA4975B2394, GameType.DS)]
    public class ParticleSystemInstance : GeometryObject
    {
        [RTTI.Member(7, 0x26C, "General")] public bool Active;
        [RTTI.Member(8, 0x278, "General")] public Ref<ParticleSystemResource> Resource;
    }

    [RTTI.Serializable(0x70C3DDAECBD8F62C, GameType.DS)]
    public class ParticleSystemInstanceGame : ParticleSystemInstance
    {
    }

    [RTTI.Serializable(0x17EB0337B0BFC938, GameType.DS)]
    public class ParticleSystemInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1DC62D1B96D621B8, GameType.DS)]
    public class ParticleSystemManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x25B6FE6BFE2BEF3F, GameType.DS)]
    public class ParticleSystemResource : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(23, 0x0, "Rendering")] public ESortOrder SortOrder;
        [RTTI.Member(24, 0x0, "Rendering")] public ESortMode SortMode;
        [RTTI.Member(56, 0x40, "Settings")] public ParticlePropertySettings PropertySettings;
        [RTTI.Member(55, 0x150, "Settings")] public ParticleModifierSettings ModifierSettings;
        [RTTI.Member(48, 0x370, "Objects")] public Array<Ref<ParticleSystemResource>> Resources;
        [RTTI.Member(51, 0x380, "Settings")] public bool SingleShot;
        [RTTI.Member(52, 0x381, "Settings")] public bool UseOcclusionCulling;
        [RTTI.Member(6, 0x384, "General")] public EParticleSystemUpdateMode UpdateMode;
        [RTTI.Member(7, 0x388, "General")] public float ClipDistance;
        [RTTI.Member(8, 0x38C, "General")] public float ClipDistanceNotVisible;
        [RTTI.Member(49, 0x390, "Objects")] public Array<Ref<ParticleEmitter>> Emitters;
        [RTTI.Member(14, 0x3AC, "Rendering")] public bool Stretch;
        [RTTI.Member(18, 0x3AD, "Rendering")] public bool RandomFlipU;
        [RTTI.Member(19, 0x3AE, "Rendering")] public bool RandomFlipV;
        [RTTI.Member(15, 0x3B0, "Rendering")] public float StretchFactor;
        [RTTI.Member(16, 0x3B4, "Rendering")] public bool UseConstantStretchFactor;
        [RTTI.Member(17, 0x3B5, "Rendering")] public bool UseScreenSpaceVelocityStretch;
        [RTTI.Member(20, 0x3B8, "Rendering")] public float TrailTextureScaleU;
        [RTTI.Member(21, 0x3BC, "Rendering")] public bool ForceTrailConnectFromMatrixPosition;
        [RTTI.Member(54, 0x3BD, "Settings")] public bool Enable30fpsMovementMode;
        [RTTI.Member(22, 0x3BE, "Rendering")] public bool CastShadows;
        [RTTI.Member(37, 0x3C0, "Rendering")] public Ref<LightResource> LightResource;
        [RTTI.Member(38, 0x3C8, "Rendering")] public String LightIntensityGlobalRenderVarName;
        [RTTI.Member(36, 0x3D8, "Rendering")] public Ref<RenderEffectResource> RenderEffectResource;
        [RTTI.Member(42, 0x3E0, "Rendering")] public Ref<RenderEffectResource> LightSamplingRenderEffectRes;
        [RTTI.Member(44, 0x3E8, "Rendering")] public Ref<RenderEffectResource> RenderEffectResourceUsingVertexArray;
        [RTTI.Member(45, 0x3F0, "Rendering")] public Ref<RenderEffectResource> LightSamplingRenderEffectUsingVertexArray;
        [RTTI.Member(46, 0x3F8, "Rendering")] public uint32 AvailableRenderTechniqueMask;
        [RTTI.Member(39, 0x400, "Rendering")] public Array<ParticleShaderVariable> ShaderVariables;
        [RTTI.Member(28, 0x410, "Rendering")] public int DeltaU;
        [RTTI.Member(29, 0x414, "Rendering")] public int DeltaV;
        [RTTI.Member(30, 0x418, "Rendering")] public float SubTexAnimFreq;
        [RTTI.Member(31, 0x41C, "Rendering")] public bool SubTexAnimRandom;
        [RTTI.Member(32, 0x420, "Rendering")] public int SubTexAnimStartFrame;
        [RTTI.Member(33, 0x424, "Rendering")] public EParticleSubTexAnimationSrc SubTexAnimAnimationSource;
        [RTTI.Member(34, 0x428, "Rendering")] public bool SubTexAnimUseSingleRow;
        [RTTI.Member(35, 0x42C, "Rendering")] public int SubTexAnimSingleRowIndex;
        [RTTI.Member(25, 0x438, "Rendering")] public bool EnableParticleInjectionSorting;
        [RTTI.Member(26, 0x43C, "Rendering")] public float LodDistanceQuarterHalf;
        [RTTI.Member(27, 0x440, "Rendering")] public float LodDistanceHalfFull;
        [RTTI.Member(13, 0x448, "Rendering")] public DrawableCullInfo CullInfo;
        [RTTI.Member(40, 0x44C, "Rendering")] public bool UseLightSamplingBuffer;
        [RTTI.Member(41, 0x450, "Rendering")] public ELightSamplingResolution LightSamplingResolution;
        [RTTI.Member(43, 0x454, "Rendering")] public float ShadowInfluence;
        [RTTI.Member(9, 0x458, "General")] public Ref<GraphProgramResource> ProgramResource;
        [RTTI.Member(58, 0xAE0, "TimeScale")] public DistanceFadeRanges TimeScaleRanges;
        [RTTI.Member(59, 0xAF0, "TimeScale")] public float TimeScaleRandomMin;
        [RTTI.Member(60, 0xAF4, "TimeScale")] public float TimeScaleRandomMax;
        [RTTI.Member(64, 0xAF8, "PreUpdateOption")] public uint16 NumPreUpdateFrames;
        [RTTI.Member(61, 0xAFA, "TimeScale")] public bool EnableTimeScaleRange;
        [RTTI.Member(53, 0xAFC, "Settings")] public bool AllowPlayWhenApplicationPause;
        [RTTI.Member(63, 0xAFD, "PreUpdateOption")] public bool EnablePreUpdate;
        [RTTI.Member(66, 0xAFE, "ChildOption")] public bool EnableSyncVisible;
        [RTTI.Member(10, 0xB00, "General")] public Ref<SoundResource> SoundResource;
        [RTTI.Member(11, 0xB08, "General")] public bool UseSoundForParticle;
    }

    [RTTI.Serializable(0xE7ED0B32DDF73E51, GameType.DS)]
    public class PartyMatchmakingInfo : RTTIObject
    {
    }

    [RTTI.Serializable(0xDD3205E84C7E92AB, GameType.DS)]
    public class PartyMatchmakingService : RTTIObject
    {
    }

    [RTTI.Serializable(0x36DAD330CDC9F318, GameType.DS)]
    public class PatchCollisionVolume : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int NotBeforeBuildNumber;
        [RTTI.Member(3, 0x24)] public int NotAfterBuildNumber;
        [RTTI.Member(4, 0x28)] public String LevelID;
        [RTTI.Member(5, 0x30)] public int CollisionLayer;
        [RTTI.Member(6, 0x38)] public String Transform;
    }

    [RTTI.Serializable(0xF6A41D771A49E379, GameType.DS)]
    public class PathElement
    {
        [RTTI.Member(2, 0x0)] public Vec3Pack Position;
        [RTTI.Member(0, 0xC)] public float Time;
        [RTTI.Member(3, 0x10)] public Quat Rotation;
        [RTTI.Member(4, 0x20)] public Vec3Pack Scaling;
        [RTTI.Member(1, 0x2C)] public float Distance;
    }

    [RTTI.Serializable(0xDB1A61F593D8C735, GameType.DS)]
    public class PathHelperNodeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x473D9C63AF3219CF, GameType.DS)]
    public class PathHelperNodeComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xD0F0F3E8F1DBB021, GameType.DS)]
    public class PathHelperNodeComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<PathHelperNodeResource>> PathHelpers;
    }

    [RTTI.Serializable(0xD20D95C88D7347C6, GameType.DS)]
    public class PathHelperNodeComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1FBE5F04BFD867C6, GameType.DS)]
    public class PathHelperNodeResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public String ParentHelperName;
        [RTTI.Member(6, 0x30, "General")] public Ref<PathResource> PathResource;
        [RTTI.Member(7, 0x38, "General")] public EPathMode PathMode;
        [RTTI.Member(8, 0x3C, "General")] public float Speed;
        [RTTI.Member(9, 0x40, "General")] public bool Looping;
    }

    [RTTI.Serializable(0x7E775F447C396DB2, GameType.DS)]
    public class PathHelperNodeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6BCDA6FAF4A0B942, GameType.DS)]
    public class PathLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x21388756C665607E, GameType.DS)]
    public class PathLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> PositionLocator;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(10, 0x40, "Logic")] public int ClipOffset;
        [RTTI.Member(11, 0x44, "Logic")] public float ClipSpeed;
        [RTTI.Member(12, 0x48, "Logic")] public bool RelativeToSequence;
    }

    [RTTI.Serializable(0xBCA0B304E3A474DC, GameType.DS)]
    public class PathMover : Mover
    {
    }

    [RTTI.Serializable(0xCFA94C5D3387DD0A, GameType.DS)]
    public class PathMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(8, 0x30, "Logic")] public EPathMode PathMode;
        [RTTI.Member(9, 0x34, "Logic")] public bool Looping;
        [RTTI.Member(10, 0x38, "Logic")] public float Speed;
        [RTTI.Member(11, 0x3C, "Logic")] public bool HighSyncFreq;
        [RTTI.Member(12, 0x3D, "Logic")] public bool AlignUpWithWorld;
    }

    [RTTI.Serializable(0x1967C54B283FF8E0, GameType.DS)]
    public class PathMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x71643AA2C4E3668E, GameType.DS)]
    public class PathResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<PathElement> Samples;
        [RTTI.Member(4, 0x30, "General")] public float SampleRate;
    }

    [RTTI.Serializable(0x597A5112D87266AF, GameType.DS)]
    public class PathResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x880688CD4A893D33, GameType.DS)]
    public class PatrolSpawnCommand : SpawnCommand
    {
        [RTTI.Member(5, 0x60, "Logic")] public Ref<AIPatrolPath> PatrolPath;
    }

    [RTTI.Serializable(0x89B46B43D61D9FC, GameType.DS)]
    public class PausableEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x86191EF36389AE52, GameType.DS)]
    public class PausableEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Event")] public int PauseFrame;
    }

    [RTTI.Serializable(0x67BE2A1D4F1EF1AC, GameType.DS)]
    public class PauseEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xBBCE19B8575B8E2F, GameType.DS)]
    public class PauseEventResource : EventResource
    {
    }

    [RTTI.Serializable(0x8F05302D40DD71B0, GameType.DS)]
    public class PegBase
    {
        [RTTI.Member(2, 0x0, "General")] public uint16 ID;
        [RTTI.Member(1, 0x8, "General")] public float Position;
    }

    [RTTI.Serializable(0x39E0C915A54AE17B, GameType.DS)]
    public class PerTileVolumeSampler : CoreObject
    {
        [RTTI.Member(2, 0x20)] public BoundingBox3 Bounds;
        [RTTI.Member(3, 0x40)] public Ref<Texture> DistanceField;
        [RTTI.Member(4, 0x48)] public Ref<Texture> UpperLowerHeightField;
    }

    [RTTI.Serializable(0x564A42B652CA8B86, GameType.DS)]
    public class Perk : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PerkLevel> FirstPerkLevel;
    }

    [RTTI.Serializable(0x85046BCBB17962F5, GameType.DS)]
    public class PerkCategory : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<Perk>> Perks;
        [RTTI.Member(5, 0x38, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0x7B6285C7F5D67D23, GameType.DS)]
    public class PerkDurationMapping : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<PerkLevel> PerkLevel;
        [RTTI.Member(1, 0x10)] public int AdditionalSegments;
    }

    [RTTI.Serializable(0x8F7094A334C0F393, GameType.DS)]
    public class PerkLevel : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "Logic")] public int RequiredLevel;
        [RTTI.Member(7, 0x3C, "Logic")] public int Tier;
        [RTTI.Member(8, 0x40, "Logic")] public int Cost;
        [RTTI.Member(9, 0x48, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResources;
        [RTTI.Member(10, 0x60, "Logic")] public Ref<EntitlementResource> RequiredEntitlement;
        [RTTI.Member(11, 0x68, "Logic")] public Array<Ref<PerkLevel>> RequiredPerks;
        [RTTI.Member(12, 0x78, "Logic")] public Array<Ref<PerkLevel>> NextPerkLevel;
        [RTTI.Member(13, 0x88, "Logic")] public Ref<PerkLevel> ReplacedByPerkLevel;
        [RTTI.Member(14, 0x98, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(15, 0xA0, "Logic")] public Ref<LocalizedTextResource> DisplayDescription;
        [RTTI.Member(16, 0xA8, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(17, 0xB0, "Logic")] public Ref<UITexture> UIFoundryIconLocked;
        [RTTI.Member(18, 0xB8, "Logic")] public Ref<UITexture> UIFoundryIconUnlocked;
        [RTTI.Member(19, 0xC0, "Logic")] public Ref<MovieResource> Movie;
        [RTTI.Member(20, 0xC8, "Logic")] public String MenuIdentifier;
    }

    [RTTI.Serializable(0x70C46975D9C9CDF1, GameType.DS)]
    public class PerkPointQuestReward : SummableQuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0xC4A75D1E94C5EBD9, GameType.DS)]
    public class PerkQuestReward : QuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<PerkLevel> Perk;
    }

    [RTTI.Serializable(0x2D9E66FA3889491F, GameType.DS)]
    public class PerkRewardGroup : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<CPtr<PerkSet>> PerkSets;
    }

    [RTTI.Serializable(0x79006CB5518B1E74, GameType.DS)]
    public class PerkSet : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<Texture> IconNewlyObtained;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<Texture> IconObtained;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<Texture> IconNotObtained;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<UITexture> UIIconNewlyObtained;
        [RTTI.Member(8, 0x48, "Logic")] public Ref<UITexture> UIIconObtained;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<UITexture> UIIconNotObtained;
        [RTTI.Member(10, 0x58, "Logic")] public Array<Ref<PerkLevel>> Perks;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<PerkRewardGroup> Group;
    }

    [RTTI.Serializable(0x8C3AEDA2F8F2B156, GameType.DS)]
    public class PerkSetQuestReward : QuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<PerkSet> PerkSet;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<QuestRewardSet> QuestRewardSetForPerks;
    }

    [RTTI.Serializable(0x2B3B8CE0193F358A, GameType.DS)]
    public class PhotoMode : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x11C3864E0E13C5DE, GameType.DS)]
    public class PhotoModeBodyPoseLookAtSettings : CoreObject
    {
        [RTTI.Member(2, 0x20)] public bool LookAtAllowed;
        [RTTI.Member(3, 0x24)] public float WeightSpine;
        [RTTI.Member(4, 0x28)] public float WeightNeck;
        [RTTI.Member(5, 0x2C)] public float WeightHead;
    }

    [RTTI.Serializable(0x26381693D2218D04, GameType.DS)]
    public class PhotoModeBodyPoseRequiredBooleanFact
    {
        [RTTI.Member(0, 0x0)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0x10FB09B929B73A7B, GameType.DS)]
    public class PhotoModeBodyPoseSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public Ref<SkeletonAnimationResource> BodyAnimation;
        [RTTI.Member(2, 0x10)] public float Time;
        [RTTI.Member(3, 0x14)] public float Duration;
        [RTTI.Member(4, 0x18)] public float PlaybackSpeed;
        [RTTI.Member(5, 0x1C)] public bool Loop;
        [RTTI.Member(6, 0x1D)] public bool PingPong;
        [RTTI.Member(7, 0x20)] public int RepeatCount;
        [RTTI.Member(8, 0x24)] public float EndTime;
        [RTTI.Member(10, 0x28, "Requirements")] public Array<PhotoModeBodyPoseRequiredBooleanFact> Facts;
        [RTTI.Member(12, 0x38, "LookAt")] public float LookAtNeutralHeadingOffset;
        [RTTI.Member(13, 0x40, "LookAt")] public Ref<PhotoModeBodyPoseLookAtSettings> LookAtSettings;
    }

    [RTTI.Serializable(0xFF548D7DBD57B0A5, GameType.DS)]
    public class PhotoModeColorizeSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public StreamingRef<ColorizeSettingsResource> ColorizeSettings;
    }

    [RTTI.Serializable(0x444386566CBDC0EE, GameType.DS)]
    public class PhotoModeDepthOfFieldApertureSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0x6C1728DAA22D0913, GameType.DS)]
    public class PhotoModeFacialExpressionSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public Ref<SkeletonAnimationResource> FacialAnimation;
        [RTTI.Member(2, 0x10)] public int Frame;
    }

    [RTTI.Serializable(0x5127FFEA2B39CD3E, GameType.DS)]
    public class PhotoModeGreetingTextUIDataBinding : UIDataBinding
    {
        [RTTI.Member(0, 0x8)] public Ref<LocalizedTextResource> Area;
        [RTTI.Member(1, 0x10)] public Ref<LocalizedTextResource> Weather;
        [RTTI.Member(2, 0x18)] public Ref<LocalizedTextResource> DayNight;
    }

    [RTTI.Serializable(0xE21008B602F2F1C9, GameType.DS)]
    public class PhotoModeKJPOpticalAberrationSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public Ref<KJPOpticalAberrationSettingsResource> OpticalSettings;
    }

    [RTTI.Serializable(0xAFEC2FF4D4468EF3, GameType.DS)]
    public class PhotoModeLogoSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public String MenuVisibilityFlag;
    }

    [RTTI.Serializable(0xE5406AA5A56CDD53, GameType.DS)]
    public class PhotoModeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Conditions")] public Ref<ConditionResource> CanControlCameraCondition;
        [RTTI.Member(4, 0x28, "Conditions")] public Ref<BooleanFact> InPhotoModeFact;
        [RTTI.Member(6, 0x30, "Pan")] public FRange PanXRange;
        [RTTI.Member(7, 0x38, "Pan")] public float PanXSpeed;
        [RTTI.Member(8, 0x3C, "Pan")] public FRange PanZRange;
        [RTTI.Member(9, 0x44, "Pan")] public float PanZSpeed;
        [RTTI.Member(11, 0x48, "FOV")] public IRange FOVRange;
        [RTTI.Member(12, 0x50, "FOV")] public int FOVIncrement;
        [RTTI.Member(14, 0x54, "ViewRoll")] public IRange ViewRollRange;
        [RTTI.Member(15, 0x5C, "ViewRoll")] public int ViewRollIncrement;
        [RTTI.Member(17, 0x60, "ViewRange")] public FRange ViewRangeScaleMultiplierRange;
        [RTTI.Member(18, 0x68, "ViewRange")] public float ViewRangeScaleChangePerSecond;
        [RTTI.Member(20, 0x6C, "TimeOfDay")] public int TimeOfDayIncrement;
        [RTTI.Member(21, 0x70, "TimeOfDay")] public Ref<CurveResource> TimeOfDayChangeCurve;
        [RTTI.Member(23, 0x78, "Overlays")] public Array<PhotoModeTextureSettings> OverlayTextures;
        [RTTI.Member(25, 0x88, "Borders")] public Array<PhotoModeTextureSettings> BorderTextures;
        [RTTI.Member(27, 0x98, "Logos")] public Array<PhotoModeLogoSettings> SmallLogoSettings;
        [RTTI.Member(29, 0xA8, "Optical")] public Array<PhotoModeKJPOpticalAberrationSettings> OpticalSettings;
        [RTTI.Member(55, 0xB8, "Sound")] public Ref<SoundResource> NGSound;
        [RTTI.Member(31, 0xC0, "Colorize")] public Array<PhotoModeColorizeSettings> ColorizeSettings;
        [RTTI.Member(33, 0xD0, "Vignette")] public Array<PhotoModeVignetteSizeSettings> VignetteSizeSettings;
        [RTTI.Member(37, 0xE0, "DepthOfField")] public Array<PhotoModeDepthOfFieldApertureSettings> ApertureSettings;
        [RTTI.Member(35, 0xF0, "DepthOfField")] public IRange FocusDistanceRange;
        [RTTI.Member(36, 0xF8, "DepthOfField")] public int FocusDistanceIncrement;
        [RTTI.Member(38, 0x100, "DepthOfField")] public Ref<CurveResource> FocusBracketCurve;
        [RTTI.Member(39, 0x108, "DepthOfField")] public Ref<CurveResource> FocusFalloffCurve;
        [RTTI.Member(40, 0x110, "DepthOfField")] public Ref<CurveResource> MaxFuzzyNearCurve;
        [RTTI.Member(41, 0x118, "DepthOfField")] public Ref<CurveResource> MaxFuzzyFarCurve;
        [RTTI.Member(43, 0x120, "Grain")] public Ref<GrainSettingsResource> GrainSettings;
        [RTTI.Member(44, 0x128, "Grain")] public Ref<GrainSettingsResource> EmptyGrainSettings;
        [RTTI.Member(47, 0x130, "Poses")] public Array<PhotoModeBodyPoseSettings> BodyPoses;
        [RTTI.Member(46, 0x140, "Poses")] public Array<BodyPoseSwitchDisallowBoolProperty> DisallowBodyPoseSwitchProperties;
        [RTTI.Member(48, 0x158, "Poses")] public Array<PhotoModeFacialExpressionSettings> FacialExpressions;
        [RTTI.Member(50, 0x168, "Greetings")] public Ref<GraphProgramResource> GreetingsTextGraphResource;
        [RTTI.Member(51, 0x170, "Greetings")] public Ref<LocalizedTextResource> GreetingsText;
        [RTTI.Member(52, 0x178, "Greetings")] public Ref<LocalizedTextResource> FallbackGreetingsText;
        [RTTI.Member(53, 0x180, "Greetings")] public Ref<LocalizedTextResource> DiscoverableAreaType;
    }

    [RTTI.Serializable(0x8692B42576E8F7BD, GameType.DS)]
    public class PhotoModeTextureSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public StreamingRef<UITexture> Texture;
        [RTTI.Member(2, 0x10)] public Ref<MenuStyleClass> Style;
    }

    [RTTI.Serializable(0xA63860725DDB3FE4, GameType.DS)]
    public class PhotoModeVignetteSizeSettings
    {
        [RTTI.Member(0, 0x0)] public float InnerRadius;
        [RTTI.Member(1, 0x4)] public float OuterRadius;
    }

    [RTTI.Serializable(0x995E44A890B21154, GameType.DS)]
    public class PhysicsBallAndSocketConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(10, 0x40, "BallAndSocketConstraint")] public Vec3 Pivot;
    }

    [RTTI.Serializable(0xCEF74287FB6DCB8B, GameType.DS)]
    public class PhysicsBoxPhantom : PhysicsPhantom
    {
    }

    [RTTI.Serializable(0xF432680259FCD004, GameType.DS)]
    public class PhysicsCharacterMover : PhysicsInstance
    {
    }

    [RTTI.Serializable(0x9A8452B4B1DD5CF8, GameType.DS)]
    public class PhysicsCharacterMoverProxy : PhysicsCharacterMover
    {
    }

    [RTTI.Serializable(0xC886250389C7A2C0, GameType.DS)]
    public class PhysicsCharacterMoverResource : PhysicsResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float StandingHeight;
        [RTTI.Member(9, 0x34, "Logic")] public float CrouchingHeight;
        [RTTI.Member(10, 0x38, "Logic")] public float MiniHeight;
        [RTTI.Member(11, 0x3C, "Logic")] public float Radius;
        [RTTI.Member(12, 0x40, "Logic")] public float Mass;
        [RTTI.Member(13, 0x44, "Logic")] public float Strength;
        [RTTI.Member(14, 0x48, "Logic")] public float InnerScale;
        [RTTI.Member(15, 0x4C, "Logic")] public float ParkourRadius;
        [RTTI.Member(16, 0x50, "Logic")] public float ParkourHeight;
        [RTTI.Member(17, 0x54, "Logic")] public float SwimmingRadius;
        [RTTI.Member(18, 0x58, "Logic")] public float SwimmingHeight;
        [RTTI.Member(20, 0x60, "Representation")] public Ref<MaterialTypeResource> MaterialTypeResource;
    }

    [RTTI.Serializable(0xF488F12DCAA30E71, GameType.DS)]
    public class PhysicsCharacterMoverRigidBody : PhysicsCharacterMover
    {
    }

    [RTTI.Serializable(0x81E8CE925BE5FC93, GameType.DS)]
    public class PhysicsCollapsedCollisionResource : PhysicsCollisionResource
    {
    }

    [RTTI.Serializable(0x969C6327797A9D39, GameType.DS)]
    public class PhysicsCollisionGroupsResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<CollisionGroup> CollisionGroups;
    }

    [RTTI.Serializable(0xE59AB7DFD80B9421, GameType.DS)]
    public class PhysicsCollisionInstance : PhysicsInstance
    {
        [RTTI.Member(8, 0x98, "Physics")] public WorldTransform Orientation;
        [RTTI.Member(9, 0xD8, "Physics")] public bool Active;
    }

    [RTTI.Serializable(0x3650BFD5E3DDF318, GameType.DS)]
    public class PhysicsCollisionResource : PhysicsResource
    {
        [RTTI.Member(9, 0x0, "General")] public PhysicsCollisionFilterInfo CollisionFilterInfo;
        [RTTI.Member(8, 0x38, "General")] public EPhysicsShapeType ShapeType;
        [RTTI.Member(21, 0x3C, "General")] public EPhysicsQualityType QualityType;
        [RTTI.Member(10, 0x40, "General")] public Vec3 CenterOfMass;
        [RTTI.Member(11, 0x54, "General")] public float Mass;
        [RTTI.Member(12, 0x58, "General")] public float Density;
        [RTTI.Member(13, 0x5C, "General")] public float Restitution;
        [RTTI.Member(14, 0x60, "General")] public float Friction;
        [RTTI.Member(15, 0x64, "General")] public float LinearDamping;
        [RTTI.Member(16, 0x68, "General")] public float AngularDamping;
        [RTTI.Member(17, 0x6C, "General")] public float BuoyancyFactor;
        [RTTI.Member(18, 0x70, "General")] public float DragFactor;
        [RTTI.Member(19, 0x74, "General")] public float GravityFactor;
        [RTTI.Member(20, 0x80, "General")] public Vec3 CenterOfMassOffset;
        [RTTI.Member(22, 0x90, "General")] public float MaxAngularVelocity;
        [RTTI.Member(23, 0x94, "General")] public float MaxLinearVelocity;
        [RTTI.Member(24, 0x98, "General")] public float MaxContactImpulse;
        [RTTI.Member(25, 0x9C, "General")] public bool ComputeMassDistribution;
        [RTTI.Member(27, 0xA0, "Generated")] public Ref<PhysicsShapeResource> PhysicsShapeResource;
    }

    [RTTI.Serializable(0x9AC53296D06AE1E5, GameType.DS)]
    public class PhysicsConstraintInstance : CoreObject
    {
    }

    [RTTI.Serializable(0x479758D1769BAEF0, GameType.DS)]
    public class PhysicsConstraintResource : PhysicsResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float BreakThreshold;
    }

    [RTTI.Serializable(0x8F9BE77B8A02AFCF, GameType.DS)]
    public class PhysicsConstraintResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF8ADC67274BDA485, GameType.DS)]
    public class PhysicsContactEffectSystemSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Global")] public int MaxObjectPairs;
        [RTTI.Member(4, 0x24, "Global")] public float MinBounceImpulse;
        [RTTI.Member(5, 0x28, "Global")] public float ContactTimeUntilResting;
        [RTTI.Member(7, 0x2C, "PerObjectPair")] public float MinDelayAfterBounce;
        [RTTI.Member(8, 0x30, "PerObjectPair")] public int MaxSlidingContacts;
        [RTTI.Member(9, 0x34, "PerObjectPair")] public int MaxRollingContacts;
    }

    [RTTI.Serializable(0x900F91B77A786E0F, GameType.DS)]
    public class PhysicsDBBRagdollInstance : PhysicsInstance
    {
    }

    [RTTI.Serializable(0xBBA1A8826D6A3AE4, GameType.DS)]
    public class PhysicsDBBRagdollResource : PhysicsResource
    {
        [RTTI.Member(8, 0x30, "Effect")] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(10, 0x38, "OnWater")] public int HeadIndex;
        [RTTI.Member(11, 0x3C, "OnWater")] public float HeadBuoyancyFactor;
        [RTTI.Member(12, 0x40, "OnWater")] public float BodyBuoyancyFactor;
        [RTTI.Member(13, 0x44, "OnWater")] public float LegBuoyancyFactor;
        [RTTI.Member(14, 0x48, "OnWater")] public float DragFactor;
        [RTTI.Member(15, 0x4C, "OnWater")] public float ImpulseFactor;
    }

    [RTTI.Serializable(0x8FCFFE974C1A5DF, GameType.DS)]
    public class PhysicsDamageImpulseModifier
    {
        [RTTI.Member(0, 0x0)] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x8)] public float ImpulseModifier;
    }

    [RTTI.Serializable(0xEAE13BE59CEC1807, GameType.DS)]
    public class PhysicsFixedConstraintResource : PhysicsConstraintResource
    {
    }

    [RTTI.Serializable(0x99D808D6A26F738D, GameType.DS)]
    public class PhysicsGravityPocket : PhysicsInstance
    {
    }

    [RTTI.Serializable(0x21AE178657F6E106, GameType.DS)]
    public class PhysicsGravityPocketResource : PhysicsResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public bool CentricGravity;
        [RTTI.Member(9, 0x40, "Logic")] public Vec3 Gravity;
        [RTTI.Member(10, 0x50, "Logic")] public Vec3 GravityCenterLocalOffset;
        [RTTI.Member(11, 0x60, "Logic")] public bool Repulsive;
        [RTTI.Member(13, 0x61, "Logic")] public bool InteractWithRestingObjects;
        [RTTI.Member(14, 0x62, "Logic")] public bool UsePocketOrientation;
        [RTTI.Member(12, 0x68, "Logic")] public Ref<PhysicsCollisionResource> CollisionResource;
    }

    [RTTI.Serializable(0x8FAA995D50547F10, GameType.DS)]
    public class PhysicsHeightMapOffsetCollisionResource : PhysicsCollisionResource
    {
        [RTTI.Member(29, 0xB0, "Physics")] public Ref<PhysicsCollisionResource> MapCollisionResource;
        [RTTI.Member(30, 0xB8, "Physics")] public float Offset;
    }

    [RTTI.Serializable(0xF14F5730D22B30C6, GameType.DS)]
    public class PhysicsHingeConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(10, 0x40, "HingeConstraint")] public Vec3 Pivot;
        [RTTI.Member(11, 0x50, "HingeConstraint")] public Vec3 Axis;
    }

    [RTTI.Serializable(0x22EE6864187176FA, GameType.DS)]
    public class PhysicsImpulseEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x185DCADFC8EA69FF, GameType.DS)]
    public class PhysicsImpulseEventResource : EventResource
    {
        [RTTI.Member(6, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(7, 0x38, "Logic")] public Ref<LocatorResource> SourceLocatorResource;
        [RTTI.Member(8, 0x40, "Logic")] public float ImpulseModule;
    }

    [RTTI.Serializable(0x73771BD14107207E, GameType.DS)]
    public class PhysicsInstance : CoreObject
    {
        [RTTI.Member(4, 0x0, "Physics")] public PhysicsCollisionFilterInfo CollisionFilterInfo;
        [RTTI.Member(3, 0x30, "Physics")] public Ref<PhysicsResource> Resource;
        [RTTI.Member(5, 0x89, "Physics")] public bool IgnoreAnnhilation;
        [RTTI.Member(6, 0x8A, "Physics")] public bool IgnorePhysicsMarge;
    }

    [RTTI.Serializable(0x5EEB4B122B1E3B9C, GameType.DS)]
    public class PhysicsLimitedHingeConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(10, 0x40, "LimitedHingeConstraint")] public Vec3 Pivot;
        [RTTI.Member(11, 0x50, "LimitedHingeConstraint")] public Vec3 Axis;
        [RTTI.Member(12, 0x60, "LimitedHingeConstraint")] public float MaxFrictionTorque;
        [RTTI.Member(13, 0x64, "LimitedHingeConstraint")] public float MinAngularLimit;
        [RTTI.Member(14, 0x68, "LimitedHingeConstraint")] public float MaxAngularLimit;
        [RTTI.Member(15, 0x6C, "LimitedHingeConstraint")] public float AngularLimitsTauFactor;
        [RTTI.Member(16, 0x70, "LimitedHingeConstraint")] public Ref<PhysicsMotorResource> PhysicsMotorResource;
    }

    [RTTI.Serializable(0xE6516D42D87DF1EC, GameType.DS)]
    public class PhysicsMaterialTypeResourceMap : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<MaterialTypeResource> MaterialType_0;
        [RTTI.Member(3, 0x28)] public Ref<MaterialTypeResource> MaterialType_1;
        [RTTI.Member(4, 0x30)] public Ref<MaterialTypeResource> MaterialType_2;
        [RTTI.Member(5, 0x38)] public Ref<MaterialTypeResource> MaterialType_3;
        [RTTI.Member(6, 0x40)] public Ref<MaterialTypeResource> MaterialType_4;
        [RTTI.Member(7, 0x48)] public Ref<MaterialTypeResource> MaterialType_5;
        [RTTI.Member(8, 0x50)] public Ref<MaterialTypeResource> MaterialType_6;
        [RTTI.Member(9, 0x58)] public Ref<MaterialTypeResource> MaterialType_7;
        [RTTI.Member(10, 0x60)] public Ref<MaterialTypeResource> MaterialType_8;
        [RTTI.Member(11, 0x68)] public Ref<MaterialTypeResource> MaterialType_9;
        [RTTI.Member(12, 0x70)] public Ref<MaterialTypeResource> MaterialType_10;
        [RTTI.Member(13, 0x78)] public Ref<MaterialTypeResource> MaterialType_11;
        [RTTI.Member(14, 0x80)] public Ref<MaterialTypeResource> MaterialType_12;
        [RTTI.Member(15, 0x88)] public Ref<MaterialTypeResource> MaterialType_13;
        [RTTI.Member(16, 0x90)] public Ref<MaterialTypeResource> MaterialType_14;
        [RTTI.Member(17, 0x98)] public Ref<MaterialTypeResource> MaterialType_15;
        [RTTI.Member(18, 0xA0)] public Ref<MaterialTypeResource> MaterialType_16;
        [RTTI.Member(19, 0xA8)] public Ref<MaterialTypeResource> MaterialType_17;
        [RTTI.Member(20, 0xB0)] public Ref<MaterialTypeResource> MaterialType_18;
        [RTTI.Member(21, 0xB8)] public Ref<MaterialTypeResource> MaterialType_19;
        [RTTI.Member(22, 0xC0)] public Ref<MaterialTypeResource> MaterialType_20;
        [RTTI.Member(23, 0xC8)] public Ref<MaterialTypeResource> MaterialType_21;
        [RTTI.Member(24, 0xD0)] public Ref<MaterialTypeResource> MaterialType_22;
        [RTTI.Member(25, 0xD8)] public Ref<MaterialTypeResource> MaterialType_23;
        [RTTI.Member(26, 0xE0)] public Ref<MaterialTypeResource> MaterialType_24;
        [RTTI.Member(27, 0xE8)] public Ref<MaterialTypeResource> MaterialType_25;
        [RTTI.Member(28, 0xF0)] public Ref<MaterialTypeResource> MaterialType_26;
        [RTTI.Member(29, 0xF8)] public Ref<MaterialTypeResource> MaterialType_27;
        [RTTI.Member(30, 0x100)] public Ref<MaterialTypeResource> MaterialType_28;
        [RTTI.Member(31, 0x108)] public Ref<MaterialTypeResource> MaterialType_29;
        [RTTI.Member(32, 0x110)] public Ref<MaterialTypeResource> MaterialType_30;
        [RTTI.Member(33, 0x118)] public Ref<MaterialTypeResource> MaterialType_31;
        [RTTI.Member(34, 0x120)] public Ref<MaterialTypeResource> MaterialType_32;
        [RTTI.Member(35, 0x128)] public Ref<MaterialTypeResource> MaterialType_33;
        [RTTI.Member(36, 0x130)] public Ref<MaterialTypeResource> MaterialType_34;
        [RTTI.Member(37, 0x138)] public Ref<MaterialTypeResource> MaterialType_35;
        [RTTI.Member(38, 0x140)] public Ref<MaterialTypeResource> MaterialType_36;
        [RTTI.Member(39, 0x148)] public Ref<MaterialTypeResource> MaterialType_37;
        [RTTI.Member(40, 0x150)] public Ref<MaterialTypeResource> MaterialType_38;
        [RTTI.Member(41, 0x158)] public Ref<MaterialTypeResource> MaterialType_39;
        [RTTI.Member(42, 0x160)] public Ref<MaterialTypeResource> MaterialType_40;
        [RTTI.Member(43, 0x168)] public Ref<MaterialTypeResource> MaterialType_41;
        [RTTI.Member(44, 0x170)] public Ref<MaterialTypeResource> MaterialType_42;
        [RTTI.Member(45, 0x178)] public Ref<MaterialTypeResource> MaterialType_43;
        [RTTI.Member(46, 0x180)] public Ref<MaterialTypeResource> MaterialType_44;
        [RTTI.Member(47, 0x188)] public Ref<MaterialTypeResource> MaterialType_45;
        [RTTI.Member(48, 0x190)] public Ref<MaterialTypeResource> MaterialType_46;
        [RTTI.Member(49, 0x198)] public Ref<MaterialTypeResource> MaterialType_47;
        [RTTI.Member(50, 0x1A0)] public Ref<MaterialTypeResource> MaterialType_48;
        [RTTI.Member(51, 0x1A8)] public Ref<MaterialTypeResource> MaterialType_49;
        [RTTI.Member(52, 0x1B0)] public Ref<MaterialTypeResource> MaterialType_50;
        [RTTI.Member(53, 0x1B8)] public Ref<MaterialTypeResource> MaterialType_51;
        [RTTI.Member(54, 0x1C0)] public Ref<MaterialTypeResource> MaterialType_52;
        [RTTI.Member(55, 0x1C8)] public Ref<MaterialTypeResource> MaterialType_53;
        [RTTI.Member(56, 0x1D0)] public Ref<MaterialTypeResource> MaterialType_54;
        [RTTI.Member(57, 0x1D8)] public Ref<MaterialTypeResource> MaterialType_55;
        [RTTI.Member(58, 0x1E0)] public Ref<MaterialTypeResource> MaterialType_56;
        [RTTI.Member(59, 0x1E8)] public Ref<MaterialTypeResource> MaterialType_57;
        [RTTI.Member(60, 0x1F0)] public Ref<MaterialTypeResource> MaterialType_58;
        [RTTI.Member(61, 0x1F8)] public Ref<MaterialTypeResource> MaterialType_59;
        [RTTI.Member(62, 0x200)] public Ref<MaterialTypeResource> MaterialType_60;
        [RTTI.Member(63, 0x208)] public Ref<MaterialTypeResource> MaterialType_61;
        [RTTI.Member(64, 0x210)] public Ref<MaterialTypeResource> MaterialType_62;
        [RTTI.Member(65, 0x218)] public Ref<MaterialTypeResource> MaterialType_63;
        [RTTI.Member(66, 0x220)] public Ref<MaterialTypeResource> MaterialType_64;
        [RTTI.Member(67, 0x228)] public Ref<MaterialTypeResource> MaterialType_65;
        [RTTI.Member(68, 0x230)] public Ref<MaterialTypeResource> MaterialType_66;
        [RTTI.Member(69, 0x238)] public Ref<MaterialTypeResource> MaterialType_67;
        [RTTI.Member(70, 0x240)] public Ref<MaterialTypeResource> MaterialType_68;
        [RTTI.Member(71, 0x248)] public Ref<MaterialTypeResource> MaterialType_69;
        [RTTI.Member(72, 0x250)] public Ref<MaterialTypeResource> MaterialType_70;
        [RTTI.Member(73, 0x258)] public Ref<MaterialTypeResource> MaterialType_71;
        [RTTI.Member(74, 0x260)] public Ref<MaterialTypeResource> MaterialType_72;
        [RTTI.Member(75, 0x268)] public Ref<MaterialTypeResource> MaterialType_73;
        [RTTI.Member(76, 0x270)] public Ref<MaterialTypeResource> MaterialType_74;
        [RTTI.Member(77, 0x278)] public Ref<MaterialTypeResource> MaterialType_75;
        [RTTI.Member(78, 0x280)] public Ref<MaterialTypeResource> MaterialType_76;
        [RTTI.Member(79, 0x288)] public Ref<MaterialTypeResource> MaterialType_77;
        [RTTI.Member(80, 0x290)] public Ref<MaterialTypeResource> MaterialType_78;
        [RTTI.Member(81, 0x298)] public Ref<MaterialTypeResource> MaterialType_79;
        [RTTI.Member(82, 0x2A0)] public Ref<MaterialTypeResource> MaterialType_80;
        [RTTI.Member(83, 0x2A8)] public Ref<MaterialTypeResource> MaterialType_81;
        [RTTI.Member(84, 0x2B0)] public Ref<MaterialTypeResource> MaterialType_82;
        [RTTI.Member(85, 0x2B8)] public Ref<MaterialTypeResource> MaterialType_83;
        [RTTI.Member(86, 0x2C0)] public Ref<MaterialTypeResource> MaterialType_84;
        [RTTI.Member(87, 0x2C8)] public Ref<MaterialTypeResource> MaterialType_85;
        [RTTI.Member(88, 0x2D0)] public Ref<MaterialTypeResource> MaterialType_86;
        [RTTI.Member(89, 0x2D8)] public Ref<MaterialTypeResource> MaterialType_87;
        [RTTI.Member(90, 0x2E0)] public Ref<MaterialTypeResource> MaterialType_88;
        [RTTI.Member(91, 0x2E8)] public Ref<MaterialTypeResource> MaterialType_89;
        [RTTI.Member(92, 0x2F0)] public Ref<MaterialTypeResource> MaterialType_90;
        [RTTI.Member(93, 0x2F8)] public Ref<MaterialTypeResource> MaterialType_91;
        [RTTI.Member(94, 0x300)] public Ref<MaterialTypeResource> MaterialType_92;
        [RTTI.Member(95, 0x308)] public Ref<MaterialTypeResource> MaterialType_93;
        [RTTI.Member(96, 0x310)] public Ref<MaterialTypeResource> MaterialType_94;
        [RTTI.Member(97, 0x318)] public Ref<MaterialTypeResource> MaterialType_95;
        [RTTI.Member(98, 0x320)] public Ref<MaterialTypeResource> MaterialType_96;
        [RTTI.Member(99, 0x328)] public Ref<MaterialTypeResource> MaterialType_97;
        [RTTI.Member(100, 0x330)] public Ref<MaterialTypeResource> MaterialType_98;
        [RTTI.Member(101, 0x338)] public Ref<MaterialTypeResource> MaterialType_99;
        [RTTI.Member(102, 0x340)] public Ref<MaterialTypeResource> MaterialType_100;
        [RTTI.Member(103, 0x348)] public Ref<MaterialTypeResource> MaterialType_101;
        [RTTI.Member(104, 0x350)] public Ref<MaterialTypeResource> MaterialType_102;
        [RTTI.Member(105, 0x358)] public Ref<MaterialTypeResource> MaterialType_103;
        [RTTI.Member(106, 0x360)] public Ref<MaterialTypeResource> MaterialType_104;
        [RTTI.Member(107, 0x368)] public Ref<MaterialTypeResource> MaterialType_105;
        [RTTI.Member(108, 0x370)] public Ref<MaterialTypeResource> MaterialType_106;
        [RTTI.Member(109, 0x378)] public Ref<MaterialTypeResource> MaterialType_107;
        [RTTI.Member(110, 0x380)] public Ref<MaterialTypeResource> MaterialType_108;
        [RTTI.Member(111, 0x388)] public Ref<MaterialTypeResource> MaterialType_109;
        [RTTI.Member(112, 0x390)] public Ref<MaterialTypeResource> MaterialType_110;
        [RTTI.Member(113, 0x398)] public Ref<MaterialTypeResource> MaterialType_111;
        [RTTI.Member(114, 0x3A0)] public Ref<MaterialTypeResource> MaterialType_112;
        [RTTI.Member(115, 0x3A8)] public Ref<MaterialTypeResource> MaterialType_113;
        [RTTI.Member(116, 0x3B0)] public Ref<MaterialTypeResource> MaterialType_114;
        [RTTI.Member(117, 0x3B8)] public Ref<MaterialTypeResource> MaterialType_115;
        [RTTI.Member(118, 0x3C0)] public Ref<MaterialTypeResource> MaterialType_116;
        [RTTI.Member(119, 0x3C8)] public Ref<MaterialTypeResource> MaterialType_117;
        [RTTI.Member(120, 0x3D0)] public Ref<MaterialTypeResource> MaterialType_118;
        [RTTI.Member(121, 0x3D8)] public Ref<MaterialTypeResource> MaterialType_119;
        [RTTI.Member(122, 0x3E0)] public Ref<MaterialTypeResource> MaterialType_120;
        [RTTI.Member(123, 0x3E8)] public Ref<MaterialTypeResource> MaterialType_121;
        [RTTI.Member(124, 0x3F0)] public Ref<MaterialTypeResource> MaterialType_122;
        [RTTI.Member(125, 0x3F8)] public Ref<MaterialTypeResource> MaterialType_123;
        [RTTI.Member(126, 0x400)] public Ref<MaterialTypeResource> MaterialType_124;
        [RTTI.Member(127, 0x408)] public Ref<MaterialTypeResource> MaterialType_125;
        [RTTI.Member(128, 0x410)] public Ref<MaterialTypeResource> MaterialType_126;
        [RTTI.Member(129, 0x418)] public Ref<MaterialTypeResource> MaterialType_127;
    }

    [RTTI.Serializable(0x4EE79BF4B54E69CF, GameType.DS)]
    public class PhysicsModelMover : Mover
    {
    }

    [RTTI.Serializable(0xC4E6DCF23F0D9822, GameType.DS)]
    public class PhysicsModelMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x23B25B0652ADEC37, GameType.DS)]
    public class PhysicsMotorResource : PhysicsResource
    {
    }

    [RTTI.Serializable(0x8970247E1581EA1D, GameType.DS)]
    public class PhysicsMover : Mover
    {
    }

    [RTTI.Serializable(0xBD7DF37F28A3B64E, GameType.DS)]
    public class PhysicsMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "General")] public bool InitiallyActive;
        [RTTI.Member(11, 0x2C, "NetworkedPhysics")] public float IgnoreLimit;
        [RTTI.Member(12, 0x30, "NetworkedPhysics")] public float ImpulseLimit;
        [RTTI.Member(13, 0x34, "NetworkedPhysics")] public float AngleIgnoreLimit;
        [RTTI.Member(14, 0x38, "NetworkedPhysics")] public float AngleImpulseLimit;
        [RTTI.Member(15, 0x3C, "NetworkedPhysics")] public float InterpolatedTeleportLimit;
        [RTTI.Member(8, 0x40, "General")] public Array<PhysicsDamageImpulseModifier> DamageImpulseModifiers;
        [RTTI.Member(9, 0x50, "General")] public String BoneToReset;
    }

    [RTTI.Serializable(0xB6F69C3C424B40A1, GameType.DS)]
    public class PhysicsMultiMaterialShapeResource : PhysicsShapeResource
    {
        [RTTI.Member(3, 0x30, "General")] public Array<Ref<MaterialTypeResource>> MaterialTypeResource;
    }

    [RTTI.Serializable(0x915E734A760A19D6, GameType.DS)]
    public class PhysicsMultiShapeResource : PhysicsShapeResource
    {
        [RTTI.Member(3, 0x30, "General")] public Array<Ref<PhysicsShapeResource>> Parts;
    }

    [RTTI.Serializable(0x1EDB87B91071D0E5, GameType.DS)]
    public class PhysicsPhantom : RTTIObject
    {
    }

    [RTTI.Serializable(0x6C9662655947C2F4, GameType.DS)]
    public class PhysicsPositionMotorResource : PhysicsMotorResource
    {
        [RTTI.Member(8, 0x30, "PositionMotor")] public float MinForce;
        [RTTI.Member(9, 0x34, "PositionMotor")] public float MaxForce;
        [RTTI.Member(10, 0x38, "PositionMotor")] public float Tau;
        [RTTI.Member(11, 0x3C, "PositionMotor")] public float Damping;
        [RTTI.Member(12, 0x40, "PositionMotor")] public float ProportionalRecoveryVelocity;
        [RTTI.Member(13, 0x44, "PositionMotor")] public float ConstantRecoveryVelocity;
    }

    [RTTI.Serializable(0x2EE8ECE8A3B8C792, GameType.DS)]
    public class PhysicsPrismaticConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(10, 0x40, "PrismaticConstraint")] public Vec3 Pivot;
        [RTTI.Member(11, 0x50, "PrismaticConstraint")] public Vec3 Axis;
        [RTTI.Member(12, 0x60, "PrismaticConstraint")] public float MinLinearLimit;
        [RTTI.Member(13, 0x64, "PrismaticConstraint")] public float MaxLinearLimit;
        [RTTI.Member(14, 0x68, "PrismaticConstraint")] public float MaxFrictionForce;
        [RTTI.Member(15, 0x70, "PrismaticConstraint")] public Ref<PhysicsMotorResource> PhysicsMotorResource;
    }

    [RTTI.Serializable(0x276A6FBDFD94FEE9, GameType.DS)]
    public class PhysicsRagdollConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(10, 0x40, "RagdollConstraint")] public Vec3 Pivot;
        [RTTI.Member(11, 0x50, "RagdollConstraint")] public Vec3 PlaneAxis;
        [RTTI.Member(12, 0x60, "RagdollConstraint")] public float PlaneMinAngularLimit;
        [RTTI.Member(13, 0x64, "RagdollConstraint")] public float PlaneMaxAngularLimit;
        [RTTI.Member(14, 0x68, "RagdollConstraint")] public Ref<PhysicsMotorResource> PlanePhysicsMotorResource;
        [RTTI.Member(15, 0x70, "RagdollConstraint")] public Vec3 TwistAxis;
        [RTTI.Member(16, 0x80, "RagdollConstraint")] public float TwistMinAngularLimit;
        [RTTI.Member(17, 0x84, "RagdollConstraint")] public float TwistMaxAngularLimit;
        [RTTI.Member(18, 0x88, "RagdollConstraint")] public Ref<PhysicsMotorResource> TwistPhysicsMotorResource;
        [RTTI.Member(19, 0x90, "RagdollConstraint")] public float ConeMin;
        [RTTI.Member(20, 0x94, "RagdollConstraint")] public float ConeMax;
        [RTTI.Member(21, 0x98, "RagdollConstraint")] public Ref<PhysicsMotorResource> ConePhysicsMotorResource;
        [RTTI.Member(22, 0xA0, "RagdollConstraint")] public float MaxFrictionTorque;
        [RTTI.Member(23, 0xA4, "RagdollConstraint")] public float AngularLimitsTauFactor;
        [RTTI.Member(24, 0xA8, "RagdollConstraint")] public float MaxLinearImpulse;
        [RTTI.Member(25, 0xAC, "RagdollConstraint")] public float MaxAngularImpulse;
    }

    [RTTI.Serializable(0x1A989D95E4A286D9, GameType.DS)]
    public class PhysicsRagdollInstance : PhysicsInstance
    {
    }

    [RTTI.Serializable(0xE9711D1B3204FDE3, GameType.DS)]
    public class PhysicsResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float TimeItTakesToRefloat;
        [RTTI.Member(4, 0x24, "General")] public float TimeStaysAfloat;
        [RTTI.Member(5, 0x28, "General")] public float TimeToSink;
        [RTTI.Member(6, 0x2C, "General")] public float FactorForceFields;
    }

    [RTTI.Serializable(0x71F9F6716E87D88D, GameType.DS)]
    public class PhysicsSimpleShapeResource : PhysicsShapeResource
    {
        [RTTI.Member(3, 0x30, "General")] public Ref<MaterialTypeResource> MaterialTypeResource;
    }

    [RTTI.Serializable(0xF763DFED96A45F8D, GameType.DS)]
    public class PhysicsSkeleton : PhysicsResource
    {
        [RTTI.Member(7, 0x30)] public Array<PhysicsSkeletonBone> Bones;
    }

    [RTTI.Serializable(0x370348D815D79956, GameType.DS)]
    public class PhysicsSkeletonBone
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(2, 0x10)] public Mat44 ReferencePose;
        [RTTI.Member(1, 0x50)] public int16 ParentIndex;
    }

    [RTTI.Serializable(0x68B2468A5FDD0D23, GameType.DS)]
    public class PhysicsStiffSpringConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(10, 0x40, "StiffSpringConstraint")] public Vec3 Pivot;
        [RTTI.Member(11, 0x50, "StiffSpringConstraint")] public float Length;
    }

    [RTTI.Serializable(0x5202B1DE5CF266A6, GameType.DS)]
    public class PhysicsVelocityMotorResource : PhysicsMotorResource
    {
        [RTTI.Member(8, 0x30, "VelocityMotor")] public float Tau;
        [RTTI.Member(9, 0x34, "VelocityMotor")] public float VelocityTarget;
    }

    [RTTI.Serializable(0xECCD3B663C04603E, GameType.DS)]
    public class PhysicsWaterPool : PhysicsWaterPoolBase
    {
    }

    [RTTI.Serializable(0x236AEB37F8EBE5D7, GameType.DS)]
    public class PhysicsWaterPoolBase : PhysicsInstance
    {
        [RTTI.Member(8, 0xA0, "General")] public WorldTransform WorldTransform;
    }

    [RTTI.Serializable(0xAA5AD7DFE3E871CB, GameType.DS)]
    public class PhysicsWaterPoolBaseResource : PhysicsResource
    {
        [RTTI.Member(8, 0x30, "General")] public float Buoyancy;
        [RTTI.Member(9, 0x34, "General")] public float FluidDensity;
        [RTTI.Member(10, 0x38, "General")] public float DragCoefficient;
        [RTTI.Member(11, 0x40, "General")] public Ref<PhysicsCollisionResource> CollisionResource;
    }

    [RTTI.Serializable(0xFF5B35CA05453AC, GameType.DS)]
    public class PhysicsWaterPoolFromHeightMap : PhysicsWaterPoolBase
    {
    }

    [RTTI.Serializable(0x275EB0FBD80B9E05, GameType.DS)]
    public class PhysicsWaterPoolFromHeightMapResource : PhysicsWaterPoolBaseResource
    {
    }

    [RTTI.Serializable(0x13577AFE2E491F6C, GameType.DS)]
    public class PhysicsWaterPoolResource : PhysicsWaterPoolBaseResource
    {
    }

    [RTTI.Serializable(0x2EBCCF65927A1484, GameType.DS)]
    public class PhysicsWorld : CoreObject
    {
    }

    [RTTI.Serializable(0x5948E7F568813C78, GameType.DS)]
    public class PickUpAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x66DFF4E2A23A304A, GameType.DS)]
    public class PickUpAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Animation")] public String PickUpAnimVarName;
        [RTTI.Member(4, 0x28, "Animation")] public String PickUpAngleAnimVarName;
        [RTTI.Member(5, 0x30, "Animation")] public String PickUpHeightAnimVarName;
        [RTTI.Member(6, 0x38, "Animation")] public String PickUpAnimTagName;
        [RTTI.Member(7, 0x40, "Animation")] public String PickUpTypeAnimVarName;
        [RTTI.Member(8, 0x48, "Animation")] public String PickUpAnimEventText;
        [RTTI.Member(9, 0x50, "Animation")] public float PickUpAnimEventTimeout;
        [RTTI.Member(11, 0x58, "Loot")] public Ref<BooleanFact> IsLootingFact;
    }

    [RTTI.Serializable(0x803165EBEC51D6EF, GameType.DS)]
    public class PickUpAnimationTypeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int PickUpType;
        [RTTI.Member(4, 0x24, "Logic")] public bool IsPickUpWhileSwimmingAllowed;
        [RTTI.Member(5, 0x25, "Logic")] public bool IsPickUpWhileRidingMountAllowed;
        [RTTI.Member(6, 0x26, "Logic")] public EPickUpAnimationWieldDirective WieldDirective;
    }

    [RTTI.Serializable(0x6B94F15815AA077B, GameType.DS)]
    public class PickUpComponent : PickUpComponentBase
    {
    }

    [RTTI.Serializable(0xDD91024DE341FB06, GameType.DS)]
    public class PickUpComponentBase : EntityComponent
    {
    }

    [RTTI.Serializable(0x6E60A8C6648337A9, GameType.DS)]
    public class PickUpComponentBaseRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xEDB3F326C4171863, GameType.DS)]
    public class PickUpComponentBaseResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Loot")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(4, 0x30, "Loot")] public Vec3 UseLocationWSOffset;
        [RTTI.Member(5, 0x40, "Loot")] public Vec3 PickUpPositionLSOffsetForAnimation;
        [RTTI.Member(6, 0x50, "Loot")] public bool StowWeaponOnUse;
        [RTTI.Member(7, 0x58, "Loot")] public String HelperName;
        [RTTI.Member(8, 0x60, "Loot")] public Ref<EffectComponentResource> PickupEffectComponentResource;
        [RTTI.Member(9, 0x68, "Loot")] public Ref<PickUpAnimationTypeResource> PickUpAnimationTypeResource;
        [RTTI.Member(10, 0x70, "Loot")] public bool MustPlayPickUpAnimation;
        [RTTI.Member(12, 0x78, "Representation")] public Ref<SoundResource> PickupSoundResource;
        [RTTI.Member(14, 0x80, "Logic")] public Array<Ref<EntityComponentResource>> EnabledEntityComponentResources;
        [RTTI.Member(16, 0x90, "Water")] public float MaxUnderwaterDepth;
    }

    [RTTI.Serializable(0x3C97F1E836DD9A61, GameType.DS)]
    public class PickUpComponentBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3BB9D362EB3A41FA, GameType.DS)]
    public class PickUpComponentResource : PickUpComponentBaseResource
    {
        [RTTI.Member(18, 0xA0, "PickUp")] public Ref<EntityResource> Item;
        [RTTI.Member(19, 0xA8, "PickUp")] public int Amount;
        [RTTI.Member(20, 0xB0, "PickUp")] public Ref<LocalizedTextResource> FullFailureMessage;
        [RTTI.Member(21, 0xB8, "PickUp")] public Ref<GraphProgramResource> PickUpAmountModifierGraphProgramResource;
        [RTTI.Member(22, 0xC0, "PickUp")] public Ref<PickUpReactivationType> ReactivationType;
    }

    [RTTI.Serializable(0xCBD85B92EF6265F1, GameType.DS)]
    public class PickUpComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6B6ED750E400B8EA, GameType.DS)]
    public class PickUpControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x467BB022C0899363, GameType.DS)]
    public class PickUpControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PerkLevel> HeavyPickUpPerk;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<ConditionResource> ShowAllPickupEffectsConditionResource;
    }

    [RTTI.Serializable(0x33DE1DBDB5ED557C, GameType.DS)]
    public class PickUpGraphComponent : PickUpComponentBase
    {
    }

    [RTTI.Serializable(0x8D2361BFF876E4E1, GameType.DS)]
    public class PickUpGraphComponentResource : PickUpComponentBaseResource
    {
        [RTTI.Member(18, 0xA0, "GraphPrograms")] public Ref<GraphProgramResource> EnabledGraph;
        [RTTI.Member(19, 0xA8, "GraphPrograms")] public Ref<OverrideGraphProgramResource> OverrideEnabledGraph;
        [RTTI.Member(20, 0xB0, "GraphPrograms")] public Ref<GraphProgramResource> UsabilityGraph;
        [RTTI.Member(21, 0xB8, "GraphPrograms")] public Ref<OverrideGraphProgramResource> OverrideUsabilityGraph;
        [RTTI.Member(22, 0xC0, "GraphPrograms")] public Ref<GraphProgramResource> UseGraph;
        [RTTI.Member(23, 0xC8, "GraphPrograms")] public Ref<OverrideGraphProgramResource> OverrideUseGraph;
    }

    [RTTI.Serializable(0x308278C8CC408CD7, GameType.DS)]
    public class PickUpMsgPlayerInventoryStateChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x738FACB1AFEE16DD, GameType.DS)]
    public class PickUpMsgPlayerPerkStateChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xF5CABE354951386B, GameType.DS)]
    public class PickUpMsgSetVisibility : MsgBase
    {
    }

    [RTTI.Serializable(0xE958CD34132C8911, GameType.DS)]
    public class PickUpReactivationType : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int ReactivationTime;
    }

    [RTTI.Serializable(0x2848BAEB22AC4AA2, GameType.DS)]
    public class PinDownComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5308C84DB4B3E8A1, GameType.DS)]
    public class PinDownComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float CombinedAnchorStrengthToPin;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<CurveResource>> RequiredAnchorStrengthToPinCurves;
        [RTTI.Member(5, 0x38, "Logic")] public float AnchorStrengthThreshold;
        [RTTI.Member(6, 0x40, "Logic")] public CPtr<EntityAction> TieDownAction;
        [RTTI.Member(7, 0x48, "Logic")] public String DelayTiedownAnimTagName;
        [RTTI.Member(8, 0x50, "Logic")] public String PinnedAnimVarName;
        [RTTI.Member(9, 0x58, "Logic")] public String PinnedAnimTagName;
        [RTTI.Member(10, 0x60, "Logic")] public float PinnedDuration;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<CurveResource> PinnedDurationDifficultyCurve;
        [RTTI.Member(12, 0x70, "Logic")] public bool IgnoreTieDownWhileKnockedDown;
        [RTTI.Member(13, 0x74, "Logic")] public float BreakFreeDuration;
        [RTTI.Member(14, 0x78, "Logic")] public AnimationEventID BreakFreeShortAnimEvent;
        [RTTI.Member(15, 0x7C, "Logic")] public AnimationEventID BreakFreeLeftAnimEvent;
        [RTTI.Member(16, 0x80, "Logic")] public AnimationEventID BreakFreeRightAnimEvent;
        [RTTI.Member(17, 0x84, "Logic")] public int BreakFreeRopesPerEvent;
        [RTTI.Member(19, 0x88, "Logic")] public float BreakFreeStartDelay;
        [RTTI.Member(20, 0x8C, "Logic")] public float AddedBreakFreeDelayPerRope;
        [RTTI.Member(21, 0x90, "Logic")] public float ClampDelayOnFinalRope;
        [RTTI.Member(25, 0x98, "Pullback")] public String PullbackAnimVarName;
        [RTTI.Member(26, 0xA0, "Pullback")] public String PullbackAnimTagName;
        [RTTI.Member(27, 0xA8, "Pullback")] public Array<FloatAnimationVariableValue> AdditionalPullbackAnimVars;
        [RTTI.Member(28, 0xB8, "Pullback")] public int NumPullbacksToStartBreak;
        [RTTI.Member(29, 0xC0, "Pullback")] public String BreakFreeAnimVarName;
        [RTTI.Member(30, 0xC8, "Pullback")] public String BreakFreeAnimTagName;
        [RTTI.Member(18, 0xD0, "Logic")] public float BreakFreeDamageThreshold;
        [RTTI.Member(22, 0xD4, "Logic")] public float AIDamageThresholdMultiplier;
        [RTTI.Member(23, 0xD8, "Logic")] public float WaitForPinnedAnimationTime;
    }

    [RTTI.Serializable(0x18834D28A8DDEED3, GameType.DS)]
    public class PinDownComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEFA9B929B777E05F, GameType.DS)]
    public class PingListResult : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ServerLocation>> Locations;
    }

    [RTTI.Serializable(0x3E09F4FDCDEEDF89, GameType.DS)]
    public class PingService : RTTIObject
    {
    }

    [RTTI.Serializable(0xC53E7AF192CC8A2B, GameType.DS)]
    public class PingTime : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Location;
        [RTTI.Member(3, 0x28)] public uint16 AverageTimeMs;
        [RTTI.Member(4, 0x2A)] public uint8 LossPercentage;
    }

    [RTTI.Serializable(0x57054DD2824E672, GameType.DS)]
    public class PlaceOnLocatorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7E4A442790283428, GameType.DS)]
    public class PlaceOnLocatorEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(10, 0x48, "Logic")] public float BlendInDuration;
    }

    [RTTI.Serializable(0x1EB7815EBC593540, GameType.DS)]
    public class PlacementBakeData : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<PrefabResource> Target;
        [RTTI.Member(5, 0x28)] public IVec2 TileIndex;
        [RTTI.Member(3, 0x30)] public Array<Mat34> Instances;
        [RTTI.Member(4, 0x40)] public Array<PlacementJobBakeLookup> Indices;
        [RTTI.Member(6, 0x50)] public EPlacementChunkSizeSetting ChunkSize;
        [RTTI.Member(7, 0x54)] public float PlacementDistance;
    }

    [RTTI.Serializable(0xA7DFD6A99207C64C, GameType.DS)]
    public class PlacementBakePrefabCollection : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General", true)] public Array<Ref<PrefabInstance>> Objects;
        [RTTI.Member(4, 0x30, "General")] public Array<Ref<PlacementLayer>> BakedLayers;
        [RTTI.Member(5, 0x40, "General")] public EPlacementChunkSizeSetting ChunkSize;
        [RTTI.Member(6, 0x44, "General")] public float PlacementDistance;
        [RTTI.Member(7, 0x48, "General")] public IVec2 TargetTile;
    }

    [RTTI.Serializable(0x65CC7875EB37E897, GameType.DS)]
    public class PlacementBase : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<DensityNodeBase> DensityGraph;
    }

    [RTTI.Serializable(0xEADC9F2DD97546CF, GameType.DS)]
    public class PlacementComponent : Resource
    {
        [RTTI.Member(7, 0x20, "Placement")] public EPlacementRotationType RotationType;
        [RTTI.Member(8, 0x24, "Placement")] public float RotationOffset;
        [RTTI.Member(9, 0x28, "Placement")] public float RotationVariance;
        [RTTI.Member(10, 0x2C, "Placement")] public float BaseElevation;
        [RTTI.Member(11, 0x30, "Placement")] public float ElevationVariance;
        [RTTI.Member(13, 0x34, "Tilting")] public float RandomTiltFactor;
        [RTTI.Member(15, 0x38, "Tilting")] public float TerrainTiltFactor;
        [RTTI.Member(14, 0x3C, "Tilting")] public float UpTiltFactor;
        [RTTI.Member(16, 0x40, "Tilting")] public Vec3 ManualTilt;
        [RTTI.Member(18, 0x50, "Scaling")] public float Scale;
        [RTTI.Member(19, 0x54, "Scaling")] public float ScaleVariance;
        [RTTI.Member(2, 0x60)] public float MaxPlacementDistance;
        [RTTI.Member(3, 0x64)] public float DensityScale;
        [RTTI.Member(4, 0x68)] public Ref<DensityNodeBase> DensityGraph;
        [RTTI.Member(5, 0x70)] public Array<Ref<RTTIRefObject>> PlacementTargets;
    }

    [RTTI.Serializable(0x8BABC32A6A8CC805, GameType.DS)]
    public class PlacementComputeJobSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> PlacementCompute;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> PlacementComputeDebug;
    }

    [RTTI.Serializable(0x1915623F271FFF58, GameType.DS)]
    public class PlacementJobBakeLookup
    {
        [RTTI.Member(0, 0x0)] public PlacementJobIndex JobIndex;
        [RTTI.Member(1, 0x4)] public int InstanceStartIndex;
        [RTTI.Member(2, 0x8)] public int InstanceCount;
    }

    [RTTI.Serializable(0xB2C666EB19EFCB95, GameType.DS)]
    public class PlacementJobIndex
    {
        [RTTI.Member(0, 0x0)] public uint32 Data;
    }

    [RTTI.Serializable(0xAA0E0E0B0C70173F, GameType.DS)]
    public class PlacementLayer : RTTIRefObject
    {
        [RTTI.Member(2, 0x50)] public float PlacementDistance;
        [RTTI.Member(3, 0x58)] public Ref<PlacementBakeData> BakedData;
        [RTTI.Member(4, 0x60)] public Ref<PlacementProceduralData> ProcData;
        [RTTI.Member(5, 0x70)] public Ref<PlacementLayer> ParentLayer;
    }

    [RTTI.Serializable(0x158574DF5C46E619, GameType.DS)]
    public class PlacementLayerGroup : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<PlacementResourceRegister> Register;
        [RTTI.Member(3, 0x28)] public Array<Ref<PlacementLayer>> Layers;
        [RTTI.Member(4, 0x38)] public Array<PlacementTriggerRange> TriggerRanges;
        [RTTI.Member(5, 0xA0)] public Ref<PlacementTile> ParentTile;
    }

    [RTTI.Serializable(0x6299169101D60101, GameType.DS)]
    public class PlacementMesh : GeometryObject
    {
    }

    [RTTI.Serializable(0x750196C0A7120AB8, GameType.DS)]
    public class PlacementProceduralData : RTTIRefObject
    {
        [RTTI.Member(2, 0x28)] public Ref<DensityGraphProgram> DensityProgram;
        [RTTI.Member(3, 0x30)] public Ref<PlacementBase> Placement;
        [RTTI.Member(10, 0x38)] public uint Priority;
        [RTTI.Member(8, 0x3C)] public EPlacementChunkSizeSetting ChunkSizeSetting;
        [RTTI.Member(9, 0x40)] public EPlacementUsageMask UsageMask;
        [RTTI.Member(6, 0x44)] public float StencilScale;
        [RTTI.Member(7, 0x48)] public float DensityScale;
        [RTTI.Member(4, 0x50)] public Ref<WorldDataType> HeightWorldDataType;
        [RTTI.Member(5, 0x58)] public Ref<WorldDataType> EcotopeIndexDataType;
        [RTTI.Member(11, 0x60)] public Ref<PlacementComponent> Component;
    }

    [RTTI.Serializable(0xD9D2DA27E0DF40A5, GameType.DS)]
    public class PlacementResourceRegister : Resource
    {
        [RTTI.Member(2, 0x28)] public Array<Ref<Texture>> Textures;
        [RTTI.Member(3, 0x38)] public Array<Ref<CurveResource>> Curves;
        [RTTI.Member(4, 0x48)] public Array<FRange> CurveRanges;
        [RTTI.Member(5, 0x58)] public Ref<Texture> CurveTexture;
        [RTTI.Member(6, 0x60)] public Ref<WorldDataPacking> WorldDataPacking;
    }

    [RTTI.Serializable(0x18B2BE31BF2D9BFC, GameType.DS)]
    public class PlacementSet : PlacementBase
    {
        [RTTI.Member(3, 0x28)] public Array<Ref<PlacementBase>> Children;
        [RTTI.Member(4, 0x38)] public ESetDensityBehavior DensityBehavior;
        [RTTI.Member(5, 0x3C)] public bool NormalizeDensity;
        [RTTI.Member(6, 0x40)] public float DensityScale;
        [RTTI.Member(7, 0x48)] public Ref<WorldDataType> HeightMap;
    }

    [RTTI.Serializable(0xEB5FC25A5806B8BA, GameType.DS)]
    public class PlacementTarget
    {
        [RTTI.Member(0, 0x0)] public Ref<RTTIRefObject> Object;
        [RTTI.Member(1, 0x10)] public Mat44 Transform;
    }

    [RTTI.Serializable(0x2F8D786D07E19A72, GameType.DS)]
    public class PlacementTile : WorldNode
    {
        [RTTI.Member(4, 0x60)] public Ref<WorldDataType> HeightWorldData;
        [RTTI.Member(7, 0x68)] public Ref<PlacementLayerGroup> LayerGroup;
        [RTTI.Member(5, 0x80)] public Ref<EcotopeTile> EcotopeTile;
        [RTTI.Member(6, 0x88)] public Ref<PlacementBase> Placement;
        [RTTI.Member(8, 0x90)] public Array<Ref<WorldDataPlacementMap>> GeneratedMaps;
        [RTTI.Member(9, 0xA0, true)] public Array<Ref<PlacementBakePrefabCollection>> BakedPlacements;
        [RTTI.Member(10, 0xB0, true)] public EDensityJobBakeType ShaderBakeType;
    }

    [RTTI.Serializable(0x2EC83B61996A3D9A, GameType.DS)]
    public class PlacementTriggerRange
    {
        [RTTI.Member(0, 0x0)] public LayerGroupMask Mask;
        [RTTI.Member(1, 0x40)] public float Range;
    }

    [RTTI.Serializable(0x7074167B7A3DB8ED, GameType.DS)]
    public class PlaneEq
    {
        [RTTI.Member(0, 0x0)] public Vec3 Normal;
        [RTTI.Member(1, 0xC)] public float Constant;
    }

    [RTTI.Serializable(0x61E65A7AED20E66A, GameType.DS)]
    public class PlantComputeJobSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> PlantComputeConstraints;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> PlantComputeResolve;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> PlantComputeIntegrate;
    }

    [RTTI.Serializable(0xFC200D5A421748D2, GameType.DS)]
    public class PlayGoManagerGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEC5AB1DE49B3EB9A, GameType.DS)]
    public class PlayWarpedAnimation : CoreObject
    {
        [RTTI.Member(2, 0x20)] public String Identifier;
        [RTTI.Member(3, 0x30)] public Ref<WarpedAnimation> WarpedAnimation;
        [RTTI.Member(4, 0x38)] public bool HasMovingEnd;
    }

    [RTTI.Serializable(0xE396727199A04A56, GameType.DS)]
    public class PlayWarpedAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD7F4668A8636792, GameType.DS)]
    public class PlayWarpedAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<PlayWarpedAnimation>> WarpedAnimations;
    }

    [RTTI.Serializable(0x9CCE8F377082F3B5, GameType.DS)]
    public class Player : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0x76265CAFFFE5B276, GameType.DS)]
    public class PlayerActionConfig2
    {
        [RTTI.Member(1, 0x8, "Logic")] public float UseEvadeLung;
        [RTTI.Member(2, 0xC, "Logic")] public float UseEvadeLung_InWater;
        [RTTI.Member(3, 0x10, "Logic")] public float UseEvadeStamina;
        [RTTI.Member(4, 0x14, "Logic")] public float UseOneStepLung;
        [RTTI.Member(5, 0x18, "Logic")] public float UseOneStepLung_InWater;
        [RTTI.Member(6, 0x1C, "Logic")] public float UseOneStepStamina;
        [RTTI.Member(7, 0x20, "Logic")] public float UseComboLung;
        [RTTI.Member(8, 0x24, "Logic")] public float UseComboStamina;
        [RTTI.Member(9, 0x28, "Logic")] public float UseBaggageComboLung;
        [RTTI.Member(10, 0x2C, "Logic")] public float UseBaggageComboStamina;
        [RTTI.Member(11, 0x30, "Logic")] public float CanTackleLung;
        [RTTI.Member(12, 0x34, "Logic")] public float UseTackleLung;
        [RTTI.Member(13, 0x38, "Logic")] public float UseTackleStamina;
        [RTTI.Member(14, 0x3C, "Logic")] public float UseHunterSwingLung;
        [RTTI.Member(15, 0x40, "Logic")] public float UseHunterSwingStamina;
        [RTTI.Member(16, 0x44, "Logic")] public float UseHunterSwingLung_AddEveryHunter;
        [RTTI.Member(17, 0x48, "Logic")] public float UseHunterSwingStamina_AddEveryHunter;
        [RTTI.Member(18, 0x4C, "Logic")] public int32 UseHunterSwing_AddEveryHunterNumLimit;
        [RTTI.Member(19, 0x50, "Logic")] public float UseHunterPreSwingLung;
        [RTTI.Member(20, 0x54, "Logic")] public float UseHunterPreSwingStamina;
        [RTTI.Member(21, 0x58, "Logic")] public float NearOtherDeleveryOrHoloRecoveryStamina;
        [RTTI.Member(22, 0x5C, "Logic")] public float NearOtherDeleveryOrHoloRecoveryLung;
        [RTTI.Member(23, 0x60, "Logic")] public float AccessoryStamina_RemoveStaminaRate;
        [RTTI.Member(24, 0x64, "Logic")] public float BalanceSkeletonAddLoadingCapacity;
        [RTTI.Member(25, 0x68, "Logic")] public float BalanceSkeletonAddLoadingCapacityLv2;
        [RTTI.Member(26, 0x6C, "Logic")] public float BalanceSkeletonAddLoadingCapacityLv3;
        [RTTI.Member(27, 0x70, "Logic")] public float SpeedSkeletonAddLoadingCapacity;
        [RTTI.Member(28, 0x74, "Logic")] public float SpeedSkeletonAddLoadingCapacityLv2;
        [RTTI.Member(29, 0x78, "Logic")] public float SpeedSkeletonAddLoadingCapacityLv3;
        [RTTI.Member(30, 0x7C, "Logic")] public float PowerSkeletonBoostBaggageLoadingWeightRate;
        [RTTI.Member(31, 0x80, "Logic")] public float PowerGlovePunchUseBatteryValue;
        [RTTI.Member(32, 0x84, "Logic")] public float RiverDrivenFinishKeepLungTime;
        [RTTI.Member(33, 0x88, "Logic")] public float PickupBaggageFinishKeepLungTime;
        [RTTI.Member(34, 0x8C, "Logic")] public float UseRiverDriveStaminaPreSec;
        [RTTI.Member(35, 0x90, "Logic")] public float RecoveryRainShelterSkipStamina;
        [RTTI.Member(36, 0x94, "Logic")] public float RecoveryRainShelterSkipBlood;
        [RTTI.Member(37, 0x98, "Logic")] public float UseStaminaRateByShoesBrokenOrBareFoot;
        [RTTI.Member(38, 0x9C, "Logic")] public float MoveRate_StandStopBreath;
        [RTTI.Member(39, 0xA0, "Logic")] public float MoveRate_CrouchStopBreath;
        [RTTI.Member(40, 0xA4, "Logic")] public float AdrenalineAddLoadingCapacity;
        [RTTI.Member(41, 0xA8, "Logic")] public float AdrenalineUnbalanceRateLimit;
        [RTTI.Member(42, 0xAC, "Logic")] public float BreathStopToRecoveryLungRateInPoisonGassArea;
        [RTTI.Member(43, 0xB0, "Logic")] public float RemoveLungByJumpLandInToWater;
        [RTTI.Member(44, 0xB4, "Logic")] public float RemoveLungByJumpLandInToWater_GuardMode;
        [RTTI.Member(45, 0xB8, "Logic")] public float GetOneLikeToStaminaRecoverValue;
        [RTTI.Member(46, 0xBC, "Logic")] public float GetOneLikeToFatigueRecoverValue;
        [RTTI.Member(47, 0xC0, "Logic")] public float GravityGloveFarBaggagePickableDistance;
        [RTTI.Member(48, 0xC4, "Logic")] public float GravityGloveFarBaggagePickableAngle;
        [RTTI.Member(49, 0xC8, "Logic")] public float GravityGloveUseBatteryValue;
        [RTTI.Member(50, 0xCC, "Logic")] public float HighSpeedRiverDriveSpeedMin;
        [RTTI.Member(51, 0xD0, "Logic")] public float HighSpeedRiverDriveSpeedMax;
        [RTTI.Member(52, 0xD4, "Logic")] public float HighSpeedRiverDriveCamDistance;
        [RTTI.Member(53, 0xD8, "Logic")] public float CartFallDamageHeight;
        [RTTI.Member(54, 0xDC, "Logic")] public float SlopeDownCamFOV;
        [RTTI.Member(55, 0xE0, "Logic")] public float SlopeDownCamDistance;
        [RTTI.Member(56, 0xE4, "Logic")] public float RoadPoleWindNoizeSoundCheckRadius;
        [RTTI.Member(57, 0xE8, "Logic")] public float HeadCrabAbsorbBloodPerSec;
        [RTTI.Member(58, 0xEC, "Logic")] public float HeadCrabBloodToStaminaRate;
        [RTTI.Member(59, 0xF0, "Logic")] public float HeadCrabAbsorbFinishStaminaRate;
        [RTTI.Member(60, 0xF4, "Logic")] public float HeadCrabAbsorbStartStaminaRate;
        [RTTI.Member(61, 0xF8, "Logic")] public float HeadCrabAbsorbDisableFatigueRate;
    }

    [RTTI.Serializable(0xF2F78822AF4BE939, GameType.DS)]
    public class PlayerActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0xC2AF505C0C92CA9C, GameType.DS)]
    public class PlayerActorResource : EntityActorResource
    {
        [RTTI.Member(20, 0x60, "Logic")] public EPlayerNumber PlayerNumber;
        [RTTI.Member(21, 0x68, "Logic")] public String PlayerName;
        [RTTI.Member(22, 0x70, "Logic")] public bool BindPlayerEntity;
    }

    [RTTI.Serializable(0x41054D31F40C0724, GameType.DS)]
    public class PlayerBBConfig
    {
        [RTTI.Member(1, 0x0, "Logic")] public Array<int32> BBDownCheckNumList;
        [RTTI.Member(2, 0x10, "Logic")] public Array<int32> BBDownCheckBattleAdjustList;
        [RTTI.Member(3, 0x20, "Logic")] public float BBDownEndureInstanceStressEfficient;
        [RTTI.Member(4, 0x24, "Logic")] public float SubjectiveBBCameraDownTime;
        [RTTI.Member(5, 0x28, "Logic")] public float SubjectiveBBOffset;
        [RTTI.Member(6, 0x2C, "Logic")] public float SubjectiveBBBezierAdjust;
        [RTTI.Member(8, 0x30, "Logic")] public float BBDandleEnableTime;
        [RTTI.Member(9, 0x34, "Logic")] public float BBOffsetNeedTime;
        [RTTI.Member(7, 0x38, "Logic")] public float BBSenserVoiceDelayTime;
        [RTTI.Member(10, 0x3C, "Logic")] public float BBWaterHeightAdjust;
        [RTTI.Member(11, 0x40, "Logic")] public float BBCatherBigCryingTime;
        [RTTI.Member(12, 0x44, "Logic")] public float BBCatherSmallCryingTime;
        [RTTI.Member(13, 0x48, "Logic")] public float BBStressUpEfficientByAccessory;
        [RTTI.Member(14, 0x4C, "Logic")] public float BBVelocityCheckSec;
        [RTTI.Member(15, 0x50, "Logic")] public float BBTPStoFPSTime;
        [RTTI.Member(16, 0x54, "Logic")] public int32 BBMusicGoodEnableTime;
        [RTTI.Member(17, 0x58, "Logic")] public int32 BBMusicGoodDisableTime;
        [RTTI.Member(18, 0x5C, "Logic")] public float BBPodWaterEfficientBottom;
        [RTTI.Member(19, 0x60, "Logic")] public float BBPodWaterEfficientTop;
        [RTTI.Member(20, 0x64, "Logic")] public float BBAdrenalineModeReserveStress;
        [RTTI.Member(21, 0x68, "Logic")] public int32 UsualLikeValue;
        [RTTI.Member(22, 0x6C, "Logic")] public int32 BaggageLikeValue;
        [RTTI.Member(23, 0x70, "Logic")] public int32 FinishChiliingAreaLikeValue;
        [RTTI.Member(24, 0x74, "Logic")] public int32 AdditionalLikeValue;
        [RTTI.Member(25, 0x78, "Logic")] public int32 KojiproLike;
        [RTTI.Member(26, 0x7C, "Logic")] public int32 CathcerLike;
        [RTTI.Member(27, 0x80, "Logic")] public int32 KojiproLikeNeedSec;
        [RTTI.Member(28, 0x84, "Logic")] public int32 CatcherLikeNeedSec;
        [RTTI.Member(29, 0x88, "Logic")] public int32 AffectionAddLike4;
        [RTTI.Member(30, 0x8C, "Logic")] public int32 AffectionAddLike6;
        [RTTI.Member(31, 0x90, "Logic")] public int32 AffectionAddLike8;
        [RTTI.Member(32, 0x94, "Logic")] public int32 AffectionAddLike10;
        [RTTI.Member(33, 0x98, "Logic")] public float VehicleSpeedLikeEfficient;
    }

    [RTTI.Serializable(0x2F2FCA937FE66A31, GameType.DS)]
    public class PlayerBareFootConfig
    {
        [RTTI.Member(1, 0x0, "Logic")] public float FrostNeedTime;
        [RTTI.Member(2, 0x4, "Logic")] public float FrostRecoveryTime;
    }

    [RTTI.Serializable(0xA1D6B62DD6A38911, GameType.DS)]
    public class PlayerCarrierLevel
    {
    }

    [RTTI.Serializable(0xAEBDC6979A26469B, GameType.DS)]
    public class PlayerCarrierLevelConfig
    {
        [RTTI.Member(1, 0x0, "Logic")] public Array<PlayerCarrierSafetyLevel> CarrierSafetyLevel;
        [RTTI.Member(2, 0x10, "Logic")] public Array<PlayerCarrierSpeedyLevel> SpeedyLevelArray;
        [RTTI.Member(3, 0x20, "Logic")] public Array<PlayerCarrierLoadingLevel> LoadingLevelArray;
    }

    [RTTI.Serializable(0x81D7A0B214EA1D68, GameType.DS)]
    public class PlayerCarrierLoadingLevel : PlayerCarrierLevel
    {
        [RTTI.Member(1, 0x8, "Logic")] public float AddLoadingCapacity;
        [RTTI.Member(2, 0xC, "Logic")] public float AddLoadingActionCapacity;
    }

    [RTTI.Serializable(0x60DD74B6139CDA6, GameType.DS)]
    public class PlayerCarrierSafetyLevel : PlayerCarrierLevel
    {
        [RTTI.Member(1, 0x8, "Logic")] public float ConsciousDamageRate;
        [RTTI.Member(2, 0xC, "Logic")] public float RemoveRiverLungRate;
        [RTTI.Member(3, 0x10, "Logic")] public float RemoveHeavySlopeLungRate;
    }

    [RTTI.Serializable(0x365B130015314EC9, GameType.DS)]
    public class PlayerCarrierSpeedyLevel : PlayerCarrierLevel
    {
        [RTTI.Member(1, 0x8, "Logic")] public float AddFatigueRate;
        [RTTI.Member(2, 0xC, "Logic")] public float StopBreathRemoveLungRate;
    }

    [RTTI.Serializable(0xDF1837795CDA5E1F, GameType.DS)]
    public class PlayerCharacterEntry
    {
        [RTTI.Member(0, 0x0)] public String ID;
        [RTTI.Member(1, 0x8)] public StreamingRef<HumanoidResource> Character;
        [RTTI.Member(2, 0x10)] public Ref<ConditionResource> Condition;
    }

    [RTTI.Serializable(0x6DF0F653DF1FF7FD, GameType.DS)]
    public class PlayerCollisionQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x28, "Logic")] public Array<UUIDRef<CollisionTrigger>> CollisionTriggers;
        [RTTI.Member(4, 0x38, "Logic")] public bool TriggerOnExit;
    }

    [RTTI.Serializable(0x33E02A81695EDEC1, GameType.DS)]
    public class PlayerCollisionQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x9741AF0D779627B0, GameType.DS)]
    public class PlayerConfig2
    {
        [RTTI.Member(1, 0x0, "CarrierLevel")] public PlayerCarrierLevelConfig CarrierLevelConfig;
        [RTTI.Member(3, 0x30, "Difficulty")] public PlayerDifficultyConfig Difficulty_VeryEazy;
        [RTTI.Member(4, 0x60, "Difficulty")] public PlayerDifficultyConfig Difficulty_Eazy;
        [RTTI.Member(5, 0x90, "Difficulty")] public PlayerDifficultyConfig Difficulty_Normal;
        [RTTI.Member(6, 0xC0, "Difficulty")] public PlayerDifficultyConfig Difficulty_Hard;
        [RTTI.Member(7, 0xF0, "Difficulty")] public PlayerDifficultyConfig Difficulty_VeryHard;
        [RTTI.Member(9, 0x120, "Logic")] public PlayerHiggsTarryConfig HiggsTarryConfig;
        [RTTI.Member(10, 0x1B0, "Logic")] public PlayerBBConfig BBConfig;
        [RTTI.Member(11, 0x250, "Logic")] public PlayerBareFootConfig BareFootConfig;
        [RTTI.Member(12, 0x258, "Logic")] public PlayerActionConfig2 PlayerActionConfig2;
        [RTTI.Member(13, 0x358, "Logic")] public PlayerVoiceConfig PlayerVoiceConfig;
    }

    [RTTI.Serializable(0x13D2E6AC85A1D782, GameType.DS)]
    public class PlayerConfigData
    {
        [RTTI.Member(6, 0x0, "Logic")] public float InitialLife;
        [RTTI.Member(7, 0x4, "Logic")] public float MaxLife;
        [RTTI.Member(10, 0x8, "Logic")] public float InitialStamina;
        [RTTI.Member(11, 0xC, "Logic")] public float MaxStamina;
        [RTTI.Member(8, 0x10, "Logic")] public float InitialFatigue;
        [RTTI.Member(9, 0x14, "Logic")] public float MaxFatigue;
        [RTTI.Member(12, 0x18, "Logic")] public float InitialConsciousness;
        [RTTI.Member(13, 0x1C, "Logic")] public float MaxConsciousness;
        [RTTI.Member(14, 0x20, "Logic")] public float LoadingZeroKeepMoveLoadingRate;
        [RTTI.Member(15, 0x24, "Logic")] public float MaximumLoadingCapacity;
        [RTTI.Member(16, 0x28, "Logic")] public float MaximumActionLoadingCapacity;
        [RTTI.Member(17, 0x2C, "Logic")] public float StaminaLoadingCapacityRate_StartRate;
        [RTTI.Member(18, 0x30, "Logic")] public float StaminaLoadingCapacityRate_EndRate;
        [RTTI.Member(19, 0x34, "Logic")] public float MaximumStaminaLoadingCapacityRate;
        [RTTI.Member(20, 0x38, "Logic")] public float MinimumStaminaLoadingCapacityRate;
        [RTTI.Member(21, 0x3C, "Logic")] public float BloodLossStartLifeRate;
        [RTTI.Member(22, 0x40, "Logic")] public float RunToDashDefaultInterTime;
        [RTTI.Member(23, 0x44, "Logic")] public float ForceCliffMaxClimbHeight;
        [RTTI.Member(24, 0x48, "Logic")] public float ForceCliffMaxClimbHeight_Loading;
        [RTTI.Member(25, 0x4C, "Logic")] public float ForceCliffMaxClimbHeight_LoadingCapOver;
        [RTTI.Member(26, 0x54, "Logic")] public float NukarumiHeight;
        [RTTI.Member(27, 0x58, "Logic")] public float HunterCatchPlayerDownHeight;
        [RTTI.Member(28, 0x5C, "Logic")] public float InertiaDisableMoveDistance;
        [RTTI.Member(29, 0x60, "Logic")] public float InertiaDisableMoveFadeOutDistance;
        [RTTI.Member(209, 0x6C, "ActiveSkeleton")] public float RemoveSpeedSkeletonBatteryByJump;
        [RTTI.Member(231, 0x70, "Fall")] public float FallDamageHeightRangeMin;
        [RTTI.Member(232, 0x74, "Fall")] public float FallDamageHeightRangeMiddle;
        [RTTI.Member(233, 0x78, "Fall")] public float FallDamageHeightRangeMax;
        [RTTI.Member(234, 0x7C, "Fall")] public float FallDamageRangeMin;
        [RTTI.Member(235, 0x80, "Fall")] public float FallDamageRangeMiddle;
        [RTTI.Member(236, 0x84, "Fall")] public float FallDamageRangeMax;
        [RTTI.Member(237, 0x88, "Fall")] public float FallStaminaDamageRangeMin;
        [RTTI.Member(238, 0x8C, "Fall")] public float FallStaminaDamageRangeMiddle;
        [RTTI.Member(239, 0x90, "Fall")] public float FallStaminaDamageRangeMax;
        [RTTI.Member(240, 0x94, "Fall")] public float FallDamageDumpHeight;
        [RTTI.Member(241, 0x98, "Fall")] public float FallDamageDropHeight;
        [RTTI.Member(3, 0xA0, "Floor")] public PlayerFloorDefaultConfig Floor_Default;
        [RTTI.Member(4, 0x310, "Floor")] public Array<PlayerFloorOverrideConfig> Floor_Override;
        [RTTI.Member(140, 0x320, "Blood")] public float LimitOfBloodRateForUsingBloodWeapon;
        [RTTI.Member(141, 0x324, "Blood")] public float LimitOfBloodRateForTumbleDamage;
        [RTTI.Member(142, 0x328, "Blood")] public float LimitOfBloodRateForFootDamage;
        [RTTI.Member(143, 0x32C, "Blood")] public float BloodRateForEasilyTumbling;
        [RTTI.Member(144, 0x330, "Blood")] public float BloodRateForSlowlyMoving;
        [RTTI.Member(145, 0x334, "Blood")] public float LimitOfBloodRateForAutoRecovery;
        [RTTI.Member(146, 0x338, "Blood")] public float SpeedOfAutoRevoeryBlood;
        [RTTI.Member(147, 0x33C, "Blood")] public float SpeedOfAutoRevoeryBloodFromBloodPack;
        [RTTI.Member(163, 0x340, "Stamina")] public float SpeedOfAutoRevoeryConsciosness;
        [RTTI.Member(148, 0x344, "Blood")] public float BloodRateOfAfterResurrection;
        [RTTI.Member(149, 0x348, "Blood")] public float BloodReoverWait;
        [RTTI.Member(165, 0x34C, "Consciosness")] public float ConsciosnessRecoverWait;
        [RTTI.Member(150, 0x350, "Blood")] public float BloodRateForStartingDecreasingLungCapacity;
        [RTTI.Member(151, 0x354, "Blood")] public float BloodRateForFinishingDecreasingLungCapacity;
        [RTTI.Member(152, 0x358, "Blood")] public float LungCapacityRateWhenBloodRateIsSmall;
        [RTTI.Member(153, 0x35C, "Blood")] public float BloodRateForStartingDecreasingStamina;
        [RTTI.Member(154, 0x360, "Blood")] public float BloodRateForFinishingDecreasingStamina;
        [RTTI.Member(155, 0x364, "Blood")] public float StaminaRateWhenBloodRateIsSmall;
        [RTTI.Member(160, 0x368, "Stamina")] public float FatigueRateForStartingDecreasingStamina;
        [RTTI.Member(161, 0x36C, "Stamina")] public float FatigueRateForFinishingDecreasingStamina;
        [RTTI.Member(162, 0x370, "Stamina")] public float StaminaRateWhenFatigueRateIsBig;
        [RTTI.Member(156, 0x374, "Blood")] public float BloodRateForStartingDecreasingConsciousness;
        [RTTI.Member(157, 0x378, "Blood")] public float BloodRateForFinishingDecreasingConsciousness;
        [RTTI.Member(158, 0x37C, "Blood")] public float ConsciousnessRateWhenBloodRateIsSmall;
        [RTTI.Member(30, 0x380, "Logic")] public float MaxBBStress;
        [RTTI.Member(31, 0x384, "Logic")] public float BBStressIncreaseSpeedInMoving;
        [RTTI.Member(32, 0x388, "Logic")] public float BBStressIncreaseSpeedInBreathStopping;
        [RTTI.Member(33, 0x38C, "Logic")] public float BBStressIncreaseSpeedInUsingMask;
        [RTTI.Member(34, 0x390, "Logic")] public float BBStressIncreaseSpeedWhenCatcher;
        [RTTI.Member(35, 0x394, "Logic")] public float BBStressIncreaseSpeedWhenGazerIsNear;
        [RTTI.Member(36, 0x398, "Logic")] public float DistanceToGazerOfBBStressIncreasing;
        [RTTI.Member(37, 0x39C, "Logic")] public float BBStressIncreaseSpeedInWater;
        [RTTI.Member(38, 0x3A0, "Logic")] public float BBStressIncreaseRateWhenBadAction;
        [RTTI.Member(39, 0x3A4, "Logic")] public float BBStressIncreaseTimeWhenBadAction;
        [RTTI.Member(40, 0x3A8, "Logic")] public float BBStressIncreaseRateWhenBadActionEndure;
        [RTTI.Member(41, 0x3AC, "Logic")] public float BBStressIncreaseTimeWhenBadActionEndure;
        [RTTI.Member(42, 0x3B0, "Logic")] public float BBStressIncreaseRateWhenKillHuman;
        [RTTI.Member(43, 0x3B4, "Logic")] public float BBStressIncreaseTimeWhenKillHuman;
        [RTTI.Member(44, 0x3B8, "Logic")] public float BBStressIncreaseRateWhenGazerFound;
        [RTTI.Member(45, 0x3BC, "Logic")] public float BBStressIncreaseTimeWhenGazerFound;
        [RTTI.Member(46, 0x3C0, "Logic")] public float BBStressRecoverRateWhenLookingBB;
        [RTTI.Member(47, 0x3C4, "Logic")] public float BBStressRecoverRateWhenGoodAction;
        [RTTI.Member(48, 0x3C8, "Logic")] public float BBStressRecoverTimeWhenGoodAction;
        [RTTI.Member(49, 0x3CC, "Logic")] public float BBStressRecoverRateWhenGoodActionS;
        [RTTI.Member(50, 0x3D0, "Logic")] public float BBStressRecoverTimeWhenGoodActionS;
        [RTTI.Member(51, 0x3D4, "Logic")] public float BBStressRecoverRateWhenDandling;
        [RTTI.Member(52, 0x3D8, "Logic")] public float BBStressRecoverRateWhenPlayMusic;
        [RTTI.Member(53, 0x3DC, "Logic")] public float BBStressInstanceIncreaseRateWhenBadAction;
        [RTTI.Member(54, 0x3E0, "Logic")] public float BBStressInstanceIncreaseRateWhenKillHuman;
        [RTTI.Member(55, 0x3E4, "Logic")] public float BBDandlingBoredTime;
        [RTTI.Member(56, 0x3E8, "Logic")] public float BBLookingBoredTime;
        [RTTI.Member(57, 0x3EC, "Logic")] public float BBBlockDandlingTime;
        [RTTI.Member(58, 0x3F0, "Logic")] public float BBBlockDandlingTimeBecauseKilledHuman;
        [RTTI.Member(59, 0x3F4, "Logic")] public float BBConfortableRunningSpeed;
        [RTTI.Member(60, 0x3F8, "Logic")] public float BBConfortableCartSpeed;
        [RTTI.Member(61, 0x3FC, "Logic")] public float BBConfortableVehicleSpeed;
        [RTTI.Member(62, 0x400, "Logic")] public float BBConfortableSpeedTimeOfRecoveringStress;
        [RTTI.Member(63, 0x404, "Logic")] public float BBInWaterInfoLogTime;
        [RTTI.Member(64, 0x408, "Logic")] public float BBInWaterFinishTime;
        [RTTI.Member(65, 0x40C, "Logic")] public int32 BBGoodActionFromSpecifiedEntityRemoveMinutes;
        [RTTI.Member(66, 0x410, "Logic")] public int32 BBLikeReOpenSecond;
        [RTTI.Member(67, 0x414, "Logic")] public float BBLikeStaminaRecoverRate;
        [RTTI.Member(68, 0x418, "Logic")] public float BBLikeFatigueRecoverRate;
        [RTTI.Member(69, 0x41C, "Logic")] public int32 BBLikeDroppedBaggageRemoveTime;
        [RTTI.Member(70, 0x420, "Logic")] public int32 BBLikeFinishBTBattleNeedTime;
        [RTTI.Member(71, 0x424, "Logic")] public float BBBackTimeFromSubjectiveLook;
        [RTTI.Member(72, 0x428, "Logic")] public float BBDandlingVelStressRecoverBonusEfficient;
        [RTTI.Member(73, 0x42C, "Logic")] public float BBDandlingVelContinueRecoverBonusEfficient;
        [RTTI.Member(74, 0x430, "Logic")] public float BBDandlingVelGoodTimeNeedTime;
        [RTTI.Member(75, 0x434, "Logic")] public float BBDandlingVelGoodTimeResetTime;
        [RTTI.Member(76, 0x438, "Logic")] public float BBDandlingVelBadTimeNeedTime;
        [RTTI.Member(77, 0x43C, "Logic")] public float BBDandlingVelBadTimeResetTime;
        [RTTI.Member(78, 0x440, "Logic")] public float BBDandlingVelGoodNum;
        [RTTI.Member(79, 0x444, "Logic")] public float BBDandlingVelBadNum;
        [RTTI.Member(80, 0x448, "Logic")] public float BBDandlingPressureGoodNum;
        [RTTI.Member(81, 0x44C, "Logic")] public float BBDandlingPressureBadNum;
        [RTTI.Member(82, 0x450, "Logic")] public float BBThemeNeedTime;
        [RTTI.Member(83, 0x454, "Logic")] public float BBThemeNeedTimeFor00660;
        [RTTI.Member(84, 0x458, "Logic")] public float RemoveConsciousnessPerSecBreathStopLastKeep;
        [RTTI.Member(85, 0x45C, "Logic")] public float MaxStaminaDecreaseSpeedInBreathStopping;
        [RTTI.Member(86, 0x460, "Logic")] public float MaxStaminaDecreaseLimitRate;
        [RTTI.Member(87, 0x464, "Logic")] public float LungCapacity;
        [RTTI.Member(88, 0x468, "Logic")] public float LungCapacityDecreaseSpeedInBreathStopping;
        [RTTI.Member(89, 0x46C, "Logic")] public float LungCapacityDecreaseSpeedInBreathStoppingWhenMoving;
        [RTTI.Member(90, 0x470, "Logic")] public float LungCapacityBreathStopOneHandRate;
        [RTTI.Member(91, 0x474, "Logic")] public float LungCapacityMoveBreathStopOneHandRate;
        [RTTI.Member(92, 0x478, "Logic")] public float LungCapacityRecoverSpeed;
        [RTTI.Member(93, 0x47C, "Logic")] public float LungCapacityRateOfBreathStoppingAfterEmpty;
        [RTTI.Member(94, 0x480, "Logic")] public float MoveSpeedOfLungCapacityRecoverSpeedBecomesMin;
        [RTTI.Member(95, 0x484, "Logic")] public float LungCapacityRecoverSpeedMinRate;
        [RTTI.Member(136, 0x488, "Lung")] public float mRecoveryLungByClimbIdle_Rate;
        [RTTI.Member(137, 0x48C, "Lung")] public float mRecoveryLungByClimbIdle_OneHandGuardRate;
        [RTTI.Member(138, 0x490, "Lung")] public float mRecoveryLungByClimbIdle_DoubleHandGuardRate;
        [RTTI.Member(96, 0x494, "Logic")] public float StaminaRateForStartingDecreasingLungCapacity;
        [RTTI.Member(97, 0x498, "Logic")] public float StaminaRateForFinishingDecreasingLungCapacity;
        [RTTI.Member(98, 0x49C, "Logic")] public float LungCapacityRateWhenStaminaRateIsSmall;
        [RTTI.Member(127, 0x4A0, "Lung")] public float RemoveLungByRiver_Value;
        [RTTI.Member(128, 0x4A4, "Lung")] public float RemoveLungByCalmSea_ValueRateFromRiver;
        [RTTI.Member(129, 0x4A8, "Lung")] public float RemoveLungByRiver_RiverPushMultRateMax;
        [RTTI.Member(130, 0x4AC, "Lung")] public float RemoveLungByRiver_RiverDepthMultRateMax;
        [RTTI.Member(131, 0x4B0, "Lung")] public float RemoveLungByRiver_OneHandGuardMultRate;
        [RTTI.Member(132, 0x4B4, "Lung")] public float RemoveLungByRiver_DoubleHandGuardMultRate;
        [RTTI.Member(133, 0x4B8, "Lung")] public float RecoveryLungByRiverIdle_Rate;
        [RTTI.Member(134, 0x4BC, "Lung")] public float RecoveryLungByRiverIdle_OneHandGuardRate;
        [RTTI.Member(135, 0x4C0, "Lung")] public float RecoveryLungByRiverIdle_DoubleHandGuardRate;
        [RTTI.Member(109, 0x4C4, "Logic")] public float River_NoSlipDownWaterDepthMin;
        [RTTI.Member(110, 0x4C8, "Logic")] public float River_NoSlipDownWaterPowerRateMin;
        [RTTI.Member(111, 0x4CC, "Logic")] public float River_NoSlipDownWaterDepthMax;
        [RTTI.Member(112, 0x4D0, "Logic")] public float River_NoSlipDownWaterPowerRateMax;
        [RTTI.Member(108, 0x4D4, "Logic")] public float River_NoSlipDownWaterDepthMinForce;
        [RTTI.Member(113, 0x4D8, "Logic")] public float WaterMoveInputMin_MoveScale;
        [RTTI.Member(114, 0x4DC, "Logic")] public float WaterHeavyStopDepth;
        [RTTI.Member(115, 0x4E0, "Logic")] public float WaterHeavyStopDepth_MoveScale;
        [RTTI.Member(116, 0x4E4, "Logic")] public float TarSwamp_DownStartDepth;
        [RTTI.Member(117, 0x4E8, "Logic")] public float TarSwamp_DownDepthMax;
        [RTTI.Member(118, 0x4EC, "Logic")] public float TarSwamp_MoveDownDepthPerMeter;
        [RTTI.Member(119, 0x4F0, "Logic")] public float TarSwamp_IdleDownDepthPerSec;
        [RTTI.Member(99, 0x4F4, "Logic")] public float StartTakeABreakTimeWhenStaminaMax;
        [RTTI.Member(100, 0x4F8, "Logic")] public float StartTakeABreakTimeWhenStaminaMin;
        [RTTI.Member(101, 0x4FC, "Logic")] public float StaminaMaxRateForStartTakeABreakTime;
        [RTTI.Member(102, 0x500, "Logic")] public float StaminaMinRateForStartTakeABreakTime;
        [RTTI.Member(121, 0x504, "Logic")] public float TarryMoveRunScale;
        [RTTI.Member(122, 0x508, "Logic")] public float TarryMoveDashScale;
        [RTTI.Member(123, 0x50C, "Logic")] public float DistanceOfEchoToFriendlyNPC;
        [RTTI.Member(124, 0x510, "Logic")] public float DistanceOfEchoToFriendlyMule;
        [RTTI.Member(167, 0x514, "Action")] public float HunterHpWhenPlayerDragged;
        [RTTI.Member(172, 0x518, "Action")] public float mHunterDragGroundKeepSpeedRate;
        [RTTI.Member(173, 0x51C, "Action")] public float mHunterDragGroundKeepRemoveLungPerSec;
        [RTTI.Member(174, 0x520, "Action")] public float mHunterDragGroundKeepRecoveryLungPerSec;
        [RTTI.Member(175, 0x524, "Action")] public float mHunterDragKeepOutRecoveryWaitTime;
        [RTTI.Member(176, 0x528, "Action")] public float mHunterDragNoGroundKeepKickPower;
        [RTTI.Member(177, 0x52C, "Action")] public float mHunterDragGroundKeepKickPower;
        [RTTI.Member(178, 0x530, "Action")] public float mHunterDragGoalKickPower;
        [RTTI.Member(214, 0x534, "Equiped")] public float RemoveStaminaRate_EquipedHat;
        [RTTI.Member(215, 0x538, "Equiped")] public float RemoveStaminaRate_EquipedMask;
        [RTTI.Member(195, 0x53C, "ActiveSkeleton")] public float PullRateMultiplier;
        [RTTI.Member(196, 0x540, "ActiveSkeleton")] public float InputRateMultiplier;
        [RTTI.Member(197, 0x544, "ActiveSkeleton")] public float MoveSpeedMultiplier;
        [RTTI.Member(198, 0x548, "ActiveSkeleton")] public float DashSpeedMultiplier;
        [RTTI.Member(199, 0x54C, "ActiveSkeleton")] public float StanceChangeTimeMultiplier;
        [RTTI.Member(200, 0x550, "ActiveSkeleton")] public float DecreaseHeightOfFalling;
        [RTTI.Member(201, 0x554, "ActiveSkeleton")] public float BatteryDecreaseSpeedMultiplierAtMaxWeight;
        [RTTI.Member(202, 0x558, "ActiveSkeleton")] public float BatteryRecoverSpeedMultiplierAtMaxWeight;
        [RTTI.Member(203, 0x55C, "ActiveSkeleton")] public float WeightOfBatteryInfluenceMax;
        [RTTI.Member(204, 0x560, "ActiveSkeleton")] public float KeepMoveSpeedTimeForSpeedCharging;
        [RTTI.Member(205, 0x564, "ActiveSkeleton")] public float MinMoveSpeedForSpeedCharging;
        [RTTI.Member(206, 0x568, "ActiveSkeleton")] public float MaxMoveSpeedForSpeedCharging;
        [RTTI.Member(207, 0x56C, "ActiveSkeleton")] public float SpeedChargingSpeedAtMinMoveSpeed;
        [RTTI.Member(208, 0x570, "ActiveSkeleton")] public float SpeedChargingSpeedAtMaxMoveSpeed;
        [RTTI.Member(210, 0x574, "ActiveSkeleton")] public float PowerSkeletonAddLoadingCapacity;
        [RTTI.Member(211, 0x578, "ActiveSkeleton")] public float PowerSkeletonAddLoadingCapacityLv2;
        [RTTI.Member(212, 0x57C, "ActiveSkeleton")] public float PowerSkeletonAddLoadingCapacityLv3;
        [RTTI.Member(181, 0x580, "Baggage")] public float MinPadPressedTimeOfPickUpBaggage;
        [RTTI.Member(182, 0x584, "Baggage")] public float MaxPadPressedTimeOfPickUpBaggage;
        [RTTI.Member(183, 0x588, "Baggage")] public float MinBaggagePickableDistance;
        [RTTI.Member(184, 0x58C, "Baggage")] public float MaxBaggagePickableDistance;
        [RTTI.Member(185, 0x590, "Baggage")] public float BaggagePickableDistanceByHand;
        [RTTI.Member(186, 0x594, "Baggage")] public float BaggagePickableByHandForwardOffset;
        [RTTI.Member(187, 0x598, "Baggage")] public float BaggagePickableDistanceMultiplierForMyBaggage;
        [RTTI.Member(188, 0x59C, "Baggage")] public float BaggageTakeableDistanceByDeliveryMule;
        [RTTI.Member(190, 0x5A0, "Eat")] public float EatLevelThresholdForMany;
        [RTTI.Member(191, 0x5A4, "Eat")] public float EatLevelThresholdForHuge;
        [RTTI.Member(192, 0x5A8, "Eat")] public float TasteLevelThresholdForGood;
        [RTTI.Member(193, 0x5AC, "Eat")] public float TasteLevelThresholdForDelicious;
        [RTTI.Member(217, 0x5B0, "Battery")] public Array<float> BatteryCapacityOfEachLevel;
        [RTTI.Member(103, 0x5C0, "Logic")] public float SlipStartLungRate_NoGuardMode;
        [RTTI.Member(104, 0x5C4, "Logic")] public float SlipStartLungRate_GuardMode;
        [RTTI.Member(105, 0x5C8, "Logic")] public float ClimbingGuardModeRemoveLungRate;
        [RTTI.Member(106, 0x5CC, "Logic")] public float GuardModeInterruptionDelayMin;
        [RTTI.Member(107, 0x5D0, "Logic")] public float GuardModeInterruptionDelayMax;
        [RTTI.Member(168, 0x5D4, "Action")] public float HunterDragDangerStartDistance;
        [RTTI.Member(169, 0x5D8, "Action")] public float HunterDragDangerDamageRateMaxDistance;
        [RTTI.Member(170, 0x5DC, "Action")] public float HunterDragDangerStartDamageRate;
        [RTTI.Member(171, 0x5E0, "Action")] public float HunterDragDangerMaxDamageRate;
        [RTTI.Member(179, 0x5E4, "Action")] public float HunterCatchAddLoadingOverHeightPerKg;
        [RTTI.Member(120, 0x5E8, "Logic")] public float GraceTimeFromStopToTireTransition;
        [RTTI.Member(125, 0x5EC, "Logic")] public float SnowBodyEffectEcotopeValue;
        [RTTI.Member(219, 0x5F0, "LikableAction")] public LikableActionConfig LikableActionConfig;
        [RTTI.Member(221, 0x61C, "Shoes")] public ShoesConfig ShoesConfig;
        [RTTI.Member(223, 0x6D8, "Rest")] public RestConfig RestConfig;
        [RTTI.Member(225, 0x890, "Condition")] public ConditionConfig ConditionConfig;
        [RTTI.Member(227, 0x998, "Cart")] public DSPlayerCartConfig CartConfig;
        [RTTI.Member(1, 0x9A0, "Config2")] public PlayerConfig2 Config2;
        [RTTI.Member(229, 0x2FA0, "Camouf")] public Ref<DSPlayerCamoufConfig> CamoufConfig;
    }

    [RTTI.Serializable(0xB71E469450AC5CE, GameType.DS)]
    public class PlayerConversationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC8D87F71E841EF9, GameType.DS)]
    public class PlayerConversationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<BooleanFact> IsActiveFact;
    }

    [RTTI.Serializable(0xE80AF16EC90B6492, GameType.DS)]
    public class PlayerDamageModifier
    {
        [RTTI.Member(0, 0x0)] public float DamageModifier;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> DamageModifierCurve;
        [RTTI.Member(2, 0x10)] public float SeverityModifier;
        [RTTI.Member(3, 0x18)] public Ref<CurveResource> SeverityModifierCurve;
    }

    [RTTI.Serializable(0x95CA11D720C62FF, GameType.DS)]
    public class PlayerDamageModifierForDamageType
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<DamageTypeResource>> DamageTypes;
        [RTTI.Member(1, 0x10)] public Ref<DamageTypeGroup> DamageTypeGroup;
        [RTTI.Member(2, 0x18)] public PlayerDamageModifier DamageModifier;
    }

    [RTTI.Serializable(0x6DCDB7CCDD377B8E, GameType.DS)]
    public class PlayerDifficultyConfig
    {
        [RTTI.Member(1, 0x8, "Logic")] public float RemoveStaminaRate;
        [RTTI.Member(2, 0xC, "Logic")] public float AddFatigueRate;
        [RTTI.Member(3, 0x10, "Logic")] public float LifeDamageRate;
        [RTTI.Member(4, 0x14, "Logic")] public float ConsciousnessDamageRate;
        [RTTI.Member(5, 0x18, "Logic")] public float StaminaDamageRate;
        [RTTI.Member(6, 0x1C, "Logic")] public float UnbalanceRateLimit;
        [RTTI.Member(7, 0x20, "Logic")] public float StaminaDecPerSec_BalanceOut;
        [RTTI.Member(8, 0x24, "Logic")] public float BreathStopRemoveLungRate;
        [RTTI.Member(9, 0x28, "Logic")] public float BreathStopMoveRemoveLungRate;
        [RTTI.Member(10, 0x2C, "Logic")] public float LungRecoverSpeedRate;
    }

    [RTTI.Serializable(0x2AF855CA0B299359, GameType.DS)]
    public class PlayerEquipConfiguration
    {
        [RTTI.Member(1, 0x0, "Tools")] public Array<StreamingRef<EntityResource>> EquippedTools;
        [RTTI.Member(3, 0x10, "Tools")] public bool EquipHorseCall;
        [RTTI.Member(2, 0x11, "Tools")] public bool EquipLureEnemy;
        [RTTI.Member(4, 0x18, "Tools")] public StreamingRef<EntityResource> DPadUpTool;
        [RTTI.Member(6, 0x20, "Tools")] public StreamingRef<EntityResource> DPadLeftTool;
        [RTTI.Member(8, 0x28, "Tools")] public StreamingRef<EntityResource> DPadDownTool;
        [RTTI.Member(10, 0x30, "Tools")] public StreamingRef<EntityResource> DPadRightTool;
        [RTTI.Member(5, 0x38, "Tools")] public EPerkAbility DPadUpAbility;
        [RTTI.Member(7, 0x39, "Tools")] public EPerkAbility DPadLeftAbility;
        [RTTI.Member(9, 0x3A, "Tools")] public EPerkAbility DPadDownAbility;
        [RTTI.Member(11, 0x3B, "Tools")] public EPerkAbility DPadRightAbility;
        [RTTI.Member(13, 0x40, "Weapons")] public Ref<PlayerLoadoutItem> TopWeapon;
        [RTTI.Member(14, 0x48, "Weapons")] public Ref<PlayerLoadoutItem> LeftWeapon;
        [RTTI.Member(15, 0x50, "Weapons")] public Ref<PlayerLoadoutItem> BottomWeapon;
        [RTTI.Member(16, 0x58, "Weapons")] public Ref<PlayerLoadoutItem> RightWeapon;
        [RTTI.Member(17, 0x60, "Weapons")] public Ref<PlayerLoadoutItem> MeleeWeapon;
        [RTTI.Member(19, 0x68, "Outfit")] public Ref<PlayerLoadoutItem> Outfit;
    }

    [RTTI.Serializable(0x4CC2EBF01AF8C4B, GameType.DS)]
    public class PlayerFacePaint : Resource
    {
        [RTTI.Member(4, 0x20, "Logic")] public Array<Ref<RenderEffectShaderOverridesResource>> ShaderOverrides;
        [RTTI.Member(3, 0x30, "Logic")] public Ref<LocalizedTextResource> MenuText;
    }

    [RTTI.Serializable(0x4570E8E98955661E, GameType.DS)]
    public class PlayerFacePaintSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7F0ED3DF0377CEEA, GameType.DS)]
    public class PlayerFloorConfig
    {
        [RTTI.Member(1, 0x8, "MoveRateModify_Base")] public float MoveRateModify_Base_MoveRate_Dash;
        [RTTI.Member(2, 0xC, "MoveRateModify_Base")] public float MoveRateModify_Base_MoveRate_Run;
        [RTTI.Member(3, 0x10, "MoveRateModify_Base")] public float MoveRateModify_Base_MoveRate_CrouchOrGunHold;
        [RTTI.Member(40, 0x14, "MoveRateInterpSpeed")] public float InterpSpeed_SpeedUp_Move;
        [RTTI.Member(41, 0x18, "MoveRateInterpSpeed")] public float InterpSpeed_SpeedDown_Move;
        [RTTI.Member(42, 0x1C, "MoveRateInterpSpeed")] public float InterpSpeed_SpeedUp_Idle;
        [RTTI.Member(43, 0x20, "MoveRateInterpSpeed")] public float InterpSpeed_SpeedDown_Idle;
        [RTTI.Member(45, 0x24, "Slope_Plane")] public float SlopePlane_MoveRate_Dash_Loading;
        [RTTI.Member(46, 0x28, "Slope_Plane")] public float SlopePlane_MoveRate_Run_Loading;
        [RTTI.Member(47, 0x2C, "Slope_Plane")] public float SlopePlane_MoveRate_CrouchOrGunHold_Loading;
        [RTTI.Member(51, 0x30, "Slope_Plane")] public float SlopePlane_ToMoveInterpTime;
        [RTTI.Member(52, 0x34, "Slope_Plane")] public float SlopePlane_ToIdleInterpTime_FromDash;
        [RTTI.Member(53, 0x38, "Slope_Plane")] public float SlopePlane_ToIdleInterpTime_FromRun;
        [RTTI.Member(54, 0x3C, "Slope_Plane")] public float SlopePlane_ToMoveInterpTime_Loading;
        [RTTI.Member(55, 0x40, "Slope_Plane")] public float SlopePlane_ToIdleInterpTime_Loading_FromDash;
        [RTTI.Member(56, 0x44, "Slope_Plane")] public float SlopePlane_ToIdleInterpTime_Loading_FromRun;
        [RTTI.Member(57, 0x48, "Slope_Plane")] public float SlopePlane_ToMoveInterpTime_LoadingCapOver;
        [RTTI.Member(58, 0x4C, "Slope_Plane")] public float SlopePlane_ToIdleInterpTime_LoadingCapOver_FromDash;
        [RTTI.Member(59, 0x50, "Slope_Plane")] public float SlopePlane_ToIdleInterpTime_LoadingCapOver_FromRun;
        [RTTI.Member(60, 0x54, "Slope_Plane")] public float SlopePlane_RuntToDashInterpTime;
        [RTTI.Member(61, 0x58, "Slope_Plane")] public float SlopePlane_RuntToDashInterpTime_Loading;
        [RTTI.Member(62, 0x5C, "Slope_Plane")] public float SlopePlane_RuntToDashInterpTime_LoadingCapOver;
        [RTTI.Member(64, 0x60, "Slope_Up")] public float SlopeUp_StartAngle;
        [RTTI.Member(65, 0x64, "Slope_Up")] public float SlopeUp_EndAngle;
        [RTTI.Member(66, 0x68, "Slope_Up")] public float SlopeUp_MulMoveRate_Dash;
        [RTTI.Member(67, 0x6C, "Slope_Up")] public float SlopeUp_MulMoveRate_Run;
        [RTTI.Member(68, 0x70, "Slope_Up")] public float SlopeUp_MulMoveRate_CrouchOrGunHold;
        [RTTI.Member(69, 0x74, "Slope_Up")] public float SlopeUp_MulMoveRate_Dash_Loading;
        [RTTI.Member(70, 0x78, "Slope_Up")] public float SlopeUp_MulMoveRate_Run_Loading;
        [RTTI.Member(71, 0x7C, "Slope_Up")] public float SlopeUp_MulMoveRate_CrouchOrGunHold_Loading;
        [RTTI.Member(72, 0x80, "Slope_Up")] public float SlopeUp_MulMoveRate_Dash_LoadingCapOver;
        [RTTI.Member(73, 0x84, "Slope_Up")] public float SlopeUp_MulMoveRate_Run_LoadingCapOver;
        [RTTI.Member(74, 0x88, "Slope_Up")] public float SlopeUp_MulMoveRate_CrouchOrGunHold_LoadingCapOver;
        [RTTI.Member(75, 0x8C, "Slope_Up")] public float SlopeUp_MoveRate_Dash_Over45;
        [RTTI.Member(76, 0x90, "Slope_Up")] public float SlopeUp_MoveRate_Run_Over45;
        [RTTI.Member(77, 0x94, "Slope_Up")] public float SlopeUp_ToMoveInterpTime;
        [RTTI.Member(78, 0x98, "Slope_Up")] public float SlopeUp_ToIdleInterpTime;
        [RTTI.Member(79, 0x9C, "Slope_Up")] public float SlopeUp_ToMoveInterpTime_Loading;
        [RTTI.Member(80, 0xA0, "Slope_Up")] public float SlopeUp_ToIdleInterpTime_Loading;
        [RTTI.Member(81, 0xA4, "Slope_Up")] public float SlopeUp_ToMoveInterpTime_LoadingCapOver;
        [RTTI.Member(82, 0xA8, "Slope_Up")] public float SlopeUp_ToIdleInterpTime_LoadingCapOver;
        [RTTI.Member(83, 0xAC, "Slope_Up")] public float SlopeUp_RuntToDashInterpTime;
        [RTTI.Member(84, 0xB0, "Slope_Up")] public float SlopeUp_RuntToDashInterpTime_Loading;
        [RTTI.Member(85, 0xB4, "Slope_Up")] public float SlopeUp_RuntToDashInterpTime_LoadingCapOver;
        [RTTI.Member(94, 0xB8, "Slope_Down")] public float SlopeDown_StartAngle;
        [RTTI.Member(95, 0xBC, "Slope_Down")] public float SlopeDown_EndAngle;
        [RTTI.Member(96, 0xC0, "Slope_Down")] public float SlopeDown_MultipleMoveRate_Dash;
        [RTTI.Member(97, 0xC4, "Slope_Down")] public float SlopeDown_MultipleMoveRate_Run;
        [RTTI.Member(98, 0xC8, "Slope_Down")] public float SlopeDown_MultipleMoveRate_CrouchOrGunHold;
        [RTTI.Member(99, 0xCC, "Slope_Down")] public float SlopeDown_MulMoveRate_Dash_Loading;
        [RTTI.Member(100, 0xD0, "Slope_Down")] public float SlopeDown_MulMoveRate_Run_Loading;
        [RTTI.Member(101, 0xD4, "Slope_Down")] public float SlopeDown_MulMoveRate_CrouchOrGunHold_Loading;
        [RTTI.Member(102, 0xD8, "Slope_Down")] public float SlopeDown_MulMoveRate_Dash_LoadingCapOver;
        [RTTI.Member(103, 0xDC, "Slope_Down")] public float SlopeDown_MulMoveRate_Run_LoadingCapOver;
        [RTTI.Member(104, 0xE0, "Slope_Down")] public float SlopeDown_MulMoveRate_CrouchOrGunHold_LoadingCapOver;
        [RTTI.Member(105, 0xE4, "Slope_Down")] public float SlopeDown_ToMoveInterpTime;
        [RTTI.Member(106, 0xE8, "Slope_Down")] public float SlopeDown_ToIdleInterpTime;
        [RTTI.Member(107, 0xEC, "Slope_Down")] public float SlopeDown_ToMoveInterpTime_Loading;
        [RTTI.Member(108, 0xF0, "Slope_Down")] public float SlopeDown_ToIdleInterpTime_Loading;
        [RTTI.Member(109, 0xF4, "Slope_Down")] public float SlopeDown_ToMoveInterpTime_LoadingCapOver;
        [RTTI.Member(110, 0xF8, "Slope_Down")] public float SlopeDown_ToIdleInterpTime_LoadingCapOver;
        [RTTI.Member(111, 0xFC, "Slope_Down")] public float SlopeDown_RuntToDashInterpTime;
        [RTTI.Member(112, 0x100, "Slope_Down")] public float SlopeDown_RuntToDashInterpTime_Loading;
        [RTTI.Member(113, 0x104, "Slope_Down")] public float SlopeDown_RuntToDashInterpTime_LoadingCapOver;
        [RTTI.Member(114, 0x108, "Slope_Down")] public float SlopeDown_AngleGotoAngleInterpSpeed;
        [RTTI.Member(115, 0x10C, "Slope_Down")] public float SlopeDown_AngleGotoAngleInterpSpeed_Loading;
        [RTTI.Member(116, 0x110, "Slope_Down")] public float SlopeDown_AngleGotoAngleInterpSpeed_LoadingCapOver;
        [RTTI.Member(117, 0x114, "Slope_Down")] public float SlopeDown_AngleRecoveryAngleInterpSpeed;
        [RTTI.Member(118, 0x118, "Slope_Down")] public float SlopeDown_AngleRecoveryAngleInterpSpeed_Loading;
        [RTTI.Member(119, 0x11C, "Slope_Down")] public float SlopeDown_AngleRecoveryAngleInterpSpeed_LoadingCapOver;
        [RTTI.Member(120, 0x120, "Slope_Down")] public float SlopeDown_AngleRecoveryAngleKeepTime;
        [RTTI.Member(121, 0x124, "Slope_Down")] public float SlopeDown_AngleRecoveryAngleKeepTime_Loading;
        [RTTI.Member(122, 0x128, "Slope_Down")] public float SlopeDown_AngleRecoveryAngleKeepTime_LoadingCapOver;
        [RTTI.Member(5, 0x12C, "MoveRateModify_TimeFall")] public float MoveRateModify_TimeFall_MoveRate_Dash;
        [RTTI.Member(6, 0x130, "MoveRateModify_TimeFall")] public float MoveRateModify_TimeFall_MoveRate_Run;
        [RTTI.Member(7, 0x134, "MoveRateModify_TimeFall")] public float MoveRateModify_TimeFall_MoveRate_CrouchOrGunHold;
        [RTTI.Member(9, 0x138, "MoveRateModify_TimeFall_ActiveSkeleton")] public float MoveRateModify_TimeFall_ActiveSkeleton_MoveRate_Dash;
        [RTTI.Member(10, 0x13C, "MoveRateModify_TimeFall_ActiveSkeleton")] public float MoveRateModify_TimeFall_ActiveSkeleton_MoveRate_Run;
        [RTTI.Member(11, 0x140, "MoveRateModify_TimeFall_ActiveSkeleton")] public float MoveRateModify_TimeFall_ActiveSkeleton_MoveRate_CrouchOrGunHold;
        [RTTI.Member(13, 0x144, "MoveRateModify_BloodLoss")] public float MoveRate_Dash_BloodLoss;
        [RTTI.Member(14, 0x148, "MoveRateModify_BloodLoss")] public float MoveRate_Run_BloodLoss;
        [RTTI.Member(15, 0x14C, "MoveRateModify_BloodLoss")] public float MoveRate_CrouchOrGunHold_BloodLoss;
        [RTTI.Member(17, 0x150, "MoveRateModify_BreakShoes")] public float MoveRate_Dash_BreakShoes;
        [RTTI.Member(18, 0x154, "MoveRateModify_BreakShoes")] public float MoveRate_Run_BreakShoes;
        [RTTI.Member(19, 0x158, "MoveRateModify_BreakShoes")] public float MoveRate_CrouchOrGunHold_BreakShoes;
        [RTTI.Member(21, 0x15C, "MoveRateModifyMult_StealthPlant")] public float MoveRate_Dash_StealthPlant;
        [RTTI.Member(22, 0x160, "MoveRateModifyMult_StealthPlant")] public float MoveRate_Run_StealthPlant;
        [RTTI.Member(23, 0x164, "MoveRateModifyMult_StealthPlant")] public float MoveRate_CrouchOrGunHold_StealthPlant;
        [RTTI.Member(25, 0x168, "MoveRateModifyMult_AdrenalineMode")] public float MoveRate_Dash_Adrenaline;
        [RTTI.Member(26, 0x16C, "MoveRateModifyMult_AdrenalineMode")] public float MoveRate_Run_Adrenaline;
        [RTTI.Member(27, 0x170, "MoveRateModifyMult_AdrenalineMode")] public float MoveRate_CrouchOrGunHold_Adrenaline;
        [RTTI.Member(28, 0x174, "MoveRateModifyMult_AdrenalineMode")] public float MoveRate_Dash_LoadingCapOver_Adrenaline;
        [RTTI.Member(29, 0x178, "MoveRateModifyMult_AdrenalineMode")] public float MoveRate_Run_LoadingCapOver_Adrenaline;
        [RTTI.Member(30, 0x17C, "MoveRateModifyMult_AdrenalineMode")] public float MoveRate_CrouchOrGunHold_LoadingCapOver_Adrenaline;
        [RTTI.Member(32, 0x180, "MoveRateModifyMult_EquipWeapon")] public float MoveRate_Dash_EquipWeapon;
        [RTTI.Member(33, 0x184, "MoveRateModifyMult_EquipWeapon")] public float MoveRate_Run_EquipWeapon;
        [RTTI.Member(34, 0x188, "MoveRateModifyMult_EquipWeapon")] public float MoveRate_CrouchOrGunHold_EquipWeapon;
        [RTTI.Member(36, 0x18C, "MoveRateModifyMult_GunHold")] public float MoveRate_Dash_GunHold;
        [RTTI.Member(37, 0x190, "MoveRateModifyMult_GunHold")] public float MoveRate_Run_GunHold;
        [RTTI.Member(38, 0x194, "MoveRateModifyMult_GunHold")] public float MoveRate_Crouch_GunHold;
        [RTTI.Member(124, 0x198, "TimeFall")] public float ToTimeFallMoveRateTime;
        [RTTI.Member(125, 0x19C, "TimeFall")] public float ToNormalMoveRateTime;
        [RTTI.Member(127, 0x1A0, "Stamina")] public float MoveRateDown_Stamina_Dash;
        [RTTI.Member(128, 0x1A4, "Stamina")] public float MoveRateDown_Stamina_Run;
        [RTTI.Member(161, 0x1AC, "Etc")] public float ForceNukarumiRateMinForMotion;
        [RTTI.Member(142, 0x1B0, "Pull")] public float SlipTryStepDiffAngle_Dash;
        [RTTI.Member(143, 0x1B4, "Pull")] public float SlipTryStepDiffAngle_Wet_Dash;
        [RTTI.Member(144, 0x1B8, "Pull")] public float SlipTryStepDiffAngle_Loading_Dash;
        [RTTI.Member(145, 0x1BC, "Pull")] public float SlipTryStepDiffAngle_LoadingCapOver_Dash;
        [RTTI.Member(146, 0x1C0, "Pull")] public float SlipTryStepDiffAngle_InTheZone_Dash;
        [RTTI.Member(132, 0x1C4, "Pull")] public float SlipTryStepDiffAngle_Walk;
        [RTTI.Member(133, 0x1C8, "Pull")] public float SlipTryStepDiffAngle_Wet_Walk;
        [RTTI.Member(134, 0x1CC, "Pull")] public float SlipTryStepDiffAngle_Loading_Walk;
        [RTTI.Member(135, 0x1D0, "Pull")] public float SlipTryStepDiffAngle_LoadingCapOver_Walk;
        [RTTI.Member(136, 0x1D4, "Pull")] public float SlipTryStepDiffAngle_InTheZone_Walk;
        [RTTI.Member(137, 0x1D8, "Pull")] public float SlipTryStepDiffAngle_Run;
        [RTTI.Member(138, 0x1DC, "Pull")] public float SlipTryStepDiffAngle_Wet_Run;
        [RTTI.Member(139, 0x1E0, "Pull")] public float SlipTryStepDiffAngle_Loading_Run;
        [RTTI.Member(140, 0x1E4, "Pull")] public float SlipTryStepDiffAngle_LoadingCapOver_Run;
        [RTTI.Member(141, 0x1E8, "Pull")] public float SlipTryStepDiffAngle_InTheZone_Run;
        [RTTI.Member(158, 0x1EC, "SlipSlide")] public float SlipSlideTryDeltaTurnAngleMin;
        [RTTI.Member(159, 0x1F0, "SlipSlide")] public float SlipSlideTryDeltaTurnAngleMax;
        [RTTI.Member(147, 0x1F4, "Pull")] public float PullVelocity_SlopeRate;
        [RTTI.Member(148, 0x1F8, "Pull")] public float PullVelocity_Loading;
        [RTTI.Member(149, 0x1FC, "Pull")] public float PullVelocity_LoadingCapOver;
        [RTTI.Member(150, 0x200, "Pull")] public float PullVelocity_NukarumiRate;
        [RTTI.Member(151, 0x204, "Pull")] public float PullInput_SlopeRate;
        [RTTI.Member(152, 0x208, "Pull")] public float PullInput_Loading;
        [RTTI.Member(153, 0x20C, "Pull")] public float PullInput_LoadingCapOver;
        [RTTI.Member(154, 0x210, "Pull")] public float PullInput_NukarumiRate;
        [RTTI.Member(155, 0x214, "Pull")] public float PullVelocity_WalkRunMaxRate;
        [RTTI.Member(156, 0x218, "Pull")] public float PullVelocity_DashRunMaxRate;
        [RTTI.Member(48, 0x21C, "Slope_Plane")] public float SlopePlane_MoveRate_Dash_LoadingCapOver;
        [RTTI.Member(49, 0x220, "Slope_Plane")] public float SlopePlane_MoveRate_Run_LoadingCapOver;
        [RTTI.Member(50, 0x224, "Slope_Plane")] public float SlopePlane_MoveRate_CrouchOrGunHold_LoadingCapOver;
        [RTTI.Member(168, 0x228, "Slide")] public float SlideSlopeAngle;
        [RTTI.Member(169, 0x22C, "Slide")] public float SlideSlopeAngle_Rain;
        [RTTI.Member(170, 0x230, "Slide")] public float SafetySlopeAngle;
        [RTTI.Member(171, 0x234, "Slide")] public float SafetySlopeAngle_Rain;
        [RTTI.Member(129, 0x238, "Stamina")] public float RemoveLung_Move;
        [RTTI.Member(130, 0x23C, "Stamina")] public float RemoveStaminaRate_Move;
        [RTTI.Member(89, 0x240, "Slope_Up")] public float SlipSlopeRemoveLungPerMeter_Normal;
        [RTTI.Member(90, 0x244, "Slope_Up")] public float SlipSlopeRemoveLungPerMeter_Loading;
        [RTTI.Member(91, 0x248, "Slope_Up")] public float SlipSlopeRemoveLungPerMeter_LoadingCapOver;
        [RTTI.Member(92, 0x24C, "Slope_Up")] public float SlipSlopeRemoveLungPerMeterRate_StickMin;
        [RTTI.Member(86, 0x250, "Slope_Up")] public float SlopeRemoveLungPerMeter_Normal;
        [RTTI.Member(87, 0x254, "Slope_Up")] public float SlopeRemoveLungPerMeter_Loading;
        [RTTI.Member(88, 0x258, "Slope_Up")] public float SlopeRemoveLungPerMeter_LoadingCapOver;
        [RTTI.Member(162, 0x25C, "Etc")] public float LandBadRoadRate;
        [RTTI.Member(165, 0x260, "Etc")] public float ShoesDamageRate_VeryHard;
        [RTTI.Member(166, 0x264, "Etc")] public float LandedDamageRate_VeryHard;
        [RTTI.Member(163, 0x268, "Etc")] public EDSPlayerGroundEffectType GroundEffectType;
        [RTTI.Member(164, 0x269, "Etc")] public EDSPlayerTakeABreakType TakeABreakType;
    }

    [RTTI.Serializable(0xAEAA855BFA98ECC8, GameType.DS)]
    public class PlayerFloorDefaultConfig : PlayerFloorConfig
    {
    }

    [RTTI.Serializable(0x73744860CF93C9AA, GameType.DS)]
    public class PlayerFloorOverrideConfig : PlayerFloorConfig
    {
        [RTTI.Member(173, 0x270, "Logic")] public EDSMaterialConfigType MaterialConfigType;
    }

    [RTTI.Serializable(0x902ED1709D39286D, GameType.DS)]
    public class PlayerGameSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9AACBA27BDC467A8, GameType.DS)]
    public class PlayerHiggsTarryConfig
    {
        [RTTI.Member(3, 0x0, "Logic")] public bool IsStockChangeOffset;
        [RTTI.Member(1, 0x4, "Logic")] public float BaseCameraOffsetX;
        [RTTI.Member(2, 0x8, "Logic")] public float BaseCameraOffsetY;
        [RTTI.Member(4, 0xC, "Logic")] public bool IsCamAutoStockChange;
        [RTTI.Member(9, 0x10, "PunchAttack")] public float BasePunchDamageValue;
        [RTTI.Member(10, 0x14, "PunchAttack")] public float BasePlayerPunchAtkValue;
        [RTTI.Member(18, 0x18, "Cryptobiosios")] public float RecoveryConsciousnessValue;
        [RTTI.Member(19, 0x1C, "Cryptobiosios")] public float RecoveryLungValue;
        [RTTI.Member(14, 0x20, "Guard")] public float Guard_DamageLung;
        [RTTI.Member(16, 0x24, "Sway")] public float Sway_DamageLung;
        [RTTI.Member(24, 0x28, "HeadButt")] public float HeadButt_DamageLungPerSec;
        [RTTI.Member(26, 0x2C, "HeadButt")] public float HeadButt_RecoveryButtonPressPower;
        [RTTI.Member(27, 0x30, "HeadButt")] public float HeadButt_RecoveryButtonNoPressSpeedSec;
        [RTTI.Member(25, 0x34, "HeadButt")] public float BiteDamageConsciousness;
        [RTTI.Member(28, 0x38, "HeadButt")] public float HeadButtDamageConsciousness;
        [RTTI.Member(30, 0x3C, "ChokSleeper")] public float DamageConsciousnessPerSec;
        [RTTI.Member(31, 0x40, "ChokSleeper")] public float ChokSleeper_DamageLungPerSec;
        [RTTI.Member(35, 0x44, "ChokSleeper")] public float DamageRateWhen30Per;
        [RTTI.Member(32, 0x48, "ChokSleeper")] public float ChokSleeper_RecoveryButtonPressPower;
        [RTTI.Member(33, 0x4C, "ChokSleeper")] public float ChokSleeper_RecoveryButtonNoPressSpeedSec;
        [RTTI.Member(34, 0x50, "ChokSleeper")] public float LoopToForceDeadTime;
        [RTTI.Member(37, 0x54, "Clinch")] public float Clinch_DamageLungPerSec;
        [RTTI.Member(38, 0x58, "Clinch")] public float Clinch_RecoveryButtonPressPower;
        [RTTI.Member(39, 0x5C, "Clinch")] public float Clinch_RecoveryButtonNoPressSpeedSec;
        [RTTI.Member(11, 0x60, "PunchAttack")] public float NormalPunchLung;
        [RTTI.Member(12, 0x64, "PunchAttack")] public float TirePunchLung;
        [RTTI.Member(6, 0x68, "AutoRecovery")] public float AutoLungRecoverySec;
        [RTTI.Member(7, 0x6C, "AutoRecovery")] public float AutoLungDamageToRecoveryTime;
        [RTTI.Member(20, 0x70, "Cryptobiosios")] public float StartCryptByAfterActivedTimerWhenTire;
        [RTTI.Member(21, 0x74, "Cryptobiosios")] public float StartCryptByAfterActivedTimerWhenAny;
        [RTTI.Member(22, 0x78, "Cryptobiosios")] public float HiggsGetTime;
        [RTTI.Member(41, 0x7C, "FinishPunch")] public float PreFinishLoopToForceFinishTime;
        [RTTI.Member(43, 0x80, "Difficulty")] public float VeryEazy_DamageRate;
        [RTTI.Member(44, 0x84, "Difficulty")] public float Eazy_DamageRate;
        [RTTI.Member(45, 0x88, "Difficulty")] public float Hard_DamageRate;
    }

    [RTTI.Serializable(0x567BC3399B10E16, GameType.DS)]
    public class PlayerInteractiveNotification : PlayerNotification
    {
    }

    [RTTI.Serializable(0x882FE130D3A367EF, GameType.DS)]
    public class PlayerInteractiveNotificationResource : PlayerNotificationResource
    {
        [RTTI.Member(11, 0x38, "Interaction")] public EDeviceFunction Function;
        [RTTI.Member(12, 0x3C, "Interaction")] public EStickFunction StickFunction;
        [RTTI.Member(13, 0x40, "Interaction")] public float StickAngle;
        [RTTI.Member(14, 0x44, "Interaction")] public float StickRange;
        [RTTI.Member(15, 0x48, "Interaction")] public float StickValue;
        [RTTI.Member(16, 0x4C, "Interaction")] public float InputActiveTime;
    }

    [RTTI.Serializable(0x9D4B09EFAB61753F, GameType.DS)]
    public class PlayerLoadout : RTTIRefObject
    {
        [RTTI.Member(4, 0x28)] public Array<StreamingRef<CraftingRecipe>> UnlockedCraftingRecipes;
        [RTTI.Member(5, 0x38)] public Array<StreamingRef<CraftingRecipe>> CraftOnAquiringLoadout;
        [RTTI.Member(2, 0x48)] public bool ConsumePerkPointsWhenAvailable;
        [RTTI.Member(3, 0x50)] public Array<StreamingRef<PerkLevel>> UnlockedPerks;
        [RTTI.Member(6, 0x60)] public Array<Ref<PlayerLoadoutItem>> Items;
        [RTTI.Member(7, 0x70)] public PlayerEquipConfiguration EquipConfig;
    }

    [RTTI.Serializable(0x8002BD99692492CE, GameType.DS)]
    public class PlayerLoadoutItem : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public StreamingRef<EntityResource> ItemResource;
        [RTTI.Member(3, 0x28)] public int Amount;
    }

    [RTTI.Serializable(0x50A73591132FC64C, GameType.DS)]
    public class PlayerLoadoutManagerResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<LevelBasedPlayerLoadouts> LevelBasedLoadouts;
        [RTTI.Member(3, 0x30)] public Array<Ref<PlayerLoadout>> PresetLoadouts;
    }

    [RTTI.Serializable(0xB6BBA7568B8D3ED, GameType.DS)]
    public class PlayerLoadoutManagerResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x81142C50FAC7DCD1, GameType.DS)]
    public class PlayerLoadoutModdableItem : PlayerLoadoutItem
    {
        [RTTI.Member(4, 0x30)] public Array<PlayerLoadoutModificationItem> Modifications;
    }

    [RTTI.Serializable(0x61362D03C606D57E, GameType.DS)]
    public class PlayerLoadoutModificationItem
    {
        [RTTI.Member(0, 0x0)] public StreamingRef<EntityResource> ModificationResource;
        [RTTI.Member(1, 0x8)] public GGUUID ModificationUUID;
    }

    [RTTI.Serializable(0x115C03F273F7AFA0, GameType.DS)]
    public class PlayerLookAtPointLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x5EE92F41199E5CAE, GameType.DS)]
    public class PlayerLookAtPointLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public EPlayerNumber PlayerNumber;
        [RTTI.Member(9, 0x38, "Logic")] public String PlayerName;
    }

    [RTTI.Serializable(0x1E6015CDEB53125E, GameType.DS)]
    public class PlayerLookAtTargetEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB0A36F3B018D4943, GameType.DS)]
    public class PlayerLookAtTargetEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<AIMarkerLocatorResource> AIMarkerLocatorResource;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x862F47C5CD9FB063, GameType.DS)]
    public class PlayerNotification : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x8004E2CC3CC588E6, GameType.DS)]
    public class PlayerNotificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9AC7AC96BA02A022, GameType.DS)]
    public class PlayerNotificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float PopupDelay;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<ConditionResource>> DisplayConditions;
        [RTTI.Member(5, 0x38, "Logic")] public Array<Ref<PlayerNotificationPriority>> PlayerNotificationPriorities;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<HUDLogicGroupResource> TutorialHUDLogicGroupResource;
    }

    [RTTI.Serializable(0x58F005E821FFD392, GameType.DS)]
    public class PlayerNotificationComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x34F77D8D437DA1D8, GameType.DS)]
    public class PlayerNotificationPriority : Resource
    {
    }

    [RTTI.Serializable(0x2E72848F9996C713, GameType.DS)]
    public class PlayerNotificationPrioritySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD74A40C911176EF5, GameType.DS)]
    public class PlayerNotificationResource : Resource
    {
        [RTTI.Member(3, 0x20, "HUD")] public Ref<HUDNotificationType> Notification;
        [RTTI.Member(6, 0x28, "Popup")] public float DisplayTime;
        [RTTI.Member(9, 0x2C, "Log")] public float LogCacheDuration;
        [RTTI.Member(5, 0x30, "Popup")] public bool DisplaysPopup;
        [RTTI.Member(7, 0x31, "Popup")] public bool HideWhileInSequence;
    }

    [RTTI.Serializable(0x9AD49837484C3D76, GameType.DS)]
    public class PlayerNotificationResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xACF93DEDB1E23341, GameType.DS)]
    public class PlayerOpenMenuNotification : PlayerInteractiveNotification
    {
    }

    [RTTI.Serializable(0x1E0ECAD9C9D19C9, GameType.DS)]
    public class PlayerOpenMenuNotificationResource : PlayerInteractiveNotificationResource
    {
        [RTTI.Member(18, 0x50, "Menu")] public UUIDRef<MenuPage> MenuPage;
        [RTTI.Member(19, 0x60, "Menu")] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(20, 0x70, "Menu")] public bool PauseGame;
    }

    [RTTI.Serializable(0xB580951E69E4892B, GameType.DS)]
    public class PlayerOutfit : Resource
    {
        [RTTI.Member(3, 0x20, "Description")] public Ref<LocalizedTextResource> LocName;
        [RTTI.Member(4, 0x28, "Description")] public Ref<UITexture> IconTexture;
        [RTTI.Member(6, 0x30, "Logic")] public Array<Ref<PlayerOutfitPart>> OutfitParts;
        [RTTI.Member(7, 0x40, "Logic")] public Array<PlayerOutfitSetBonus> SetBonuses;
    }

    [RTTI.Serializable(0xB45380A8285AB4F6, GameType.DS)]
    public class PlayerOutfitComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x28639B1AF7189CB1, GameType.DS)]
    public class PlayerOutfitComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xC9EA7FA56C0C75AF, GameType.DS)]
    public class PlayerOutfitComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<PlayerOutfitTheme>> Themes;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<PlayerOutfitGenericSlot>> GenericSlots;
        [RTTI.Member(5, 0x40, "Logic")] public Ref<PlayerFacePaint> DefaultFacePaint;
        [RTTI.Member(6, 0x48, "Logic")] public Array<Ref<PlayerFacePaint>> FacePaints;
        [RTTI.Member(7, 0x58, "Logic")] public Ref<BooleanFact> HideHeadgearFact;
    }

    [RTTI.Serializable(0xE21C416377670FE8, GameType.DS)]
    public class PlayerOutfitComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6678D282EB2C4EA2, GameType.DS)]
    public class PlayerOutfitGenericSlot : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PlayerOutfitSlotType> SlotType;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<PlayerOutfitPart> DefaultOutfitPart;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Ref<PlayerOutfitPart>> OutfitParts;
    }

    [RTTI.Serializable(0xC43088B285384AE3, GameType.DS)]
    public class PlayerOutfitItemComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1ED99820731FDF60, GameType.DS)]
    public class PlayerOutfitItemComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<PlayerOutfitPart>> PlayerOutfitParts;
    }

    [RTTI.Serializable(0x5E271B037973F759, GameType.DS)]
    public class PlayerOutfitPart : Resource
    {
        [RTTI.Member(3, 0x20, "Description")] public Ref<LocalizedTextResource> LocName;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<PlayerOutfitSlotType> SlotType;
        [RTTI.Member(6, 0x30, "Logic")] public StreamingRef<OutfitStreamingData> StreamingData;
    }

    [RTTI.Serializable(0x6DEE599D8199D225, GameType.DS)]
    public class PlayerOutfitPartSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBAC7FF4CAB84B20C, GameType.DS)]
    public class PlayerOutfitSetBonus
    {
        [RTTI.Member(2, 0x0, "Logic")] public Ref<EntityComponentResource> AddedComponent;
        [RTTI.Member(3, 0x8, "Logic")] public Ref<StatModificationTypeResource> StatModificationType;
        [RTTI.Member(4, 0x10, "Logic")] public int StatModificationRating;
        [RTTI.Member(1, 0x14, "Logic")] public int RequiredPartCount;
    }

    [RTTI.Serializable(0x5604A361671189F4, GameType.DS)]
    public class PlayerOutfitShaderEffect : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<RenderEffectShaderOverridesResource>> ShaderOverrides;
    }

    [RTTI.Serializable(0x7756B1023636B911, GameType.DS)]
    public class PlayerOutfitShaderEffectSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x64042BAE7CF1D601, GameType.DS)]
    public class PlayerOutfitSlotType : Resource
    {
    }

    [RTTI.Serializable(0x9069636B9BCCBF94, GameType.DS)]
    public class PlayerOutfitSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2190E35C9618608B, GameType.DS)]
    public class PlayerOutfitTheme : Resource
    {
        [RTTI.Member(3, 0x20, "Description")] public Ref<LocalizedTextResource> LocName;
        [RTTI.Member(4, 0x28, "Description")] public Ref<UITexture> IconTexture;
        [RTTI.Member(6, 0x30, "Logic")] public Array<Ref<PlayerOutfit>> Outfits;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<PlayerOutfit> DefaultOutfit;
        [RTTI.Member(8, 0x48, "Logic")] public StreamingRef<BodyVariant> BodyVariant;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<PlayerOutfitShaderEffect> DefaultShaderEffect;
        [RTTI.Member(10, 0x58, "Logic")] public Array<Ref<PlayerOutfitShaderEffect>> ShaderEffects;
    }

    [RTTI.Serializable(0x853371AF18CF7937, GameType.DS)]
    public class PlayerOutfitThemeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5707B352A14696EB, GameType.DS)]
    public class PlayerParams
    {
        [RTTI.Member(0, 0x0, true)] public uint8 DrawHUD;
        [RTTI.Member(1, 0x10, true)] public ControllerConfig ControllerConfig;
    }

    [RTTI.Serializable(0xE117008250AEF8EE, GameType.DS)]
    public class PlayerParkourComponent : ParkourComponent
    {
    }

    [RTTI.Serializable(0xF18C7A682C60216E, GameType.DS)]
    public class PlayerParkourComponentResource : ParkourComponentResource
    {
        [RTTI.Member(8, 0x40, "Logic")] public Ref<CurveResource> PerchedWalkSpeedCurve;
        [RTTI.Member(9, 0x50, "Logic")] public float PerchedWalkAcceleration;
        [RTTI.Member(10, 0x54, "Logic")] public float PerchedWalkDeceleration;
        [RTTI.Member(11, 0x58, "Logic")] public float PerchedSprintSpeedMultiplier;
        [RTTI.Member(63, 0x5C, "Control")] public float MaxAngleBetweenInputAndJumpOnFoot;
        [RTTI.Member(64, 0x60, "Control")] public float MaxAngleBetweenInputAndJumpWithHands;
        [RTTI.Member(13, 0x64, "Logic")] public float CollisionTestOffsetBelowHangMoving;
        [RTTI.Member(14, 0x68, "Logic")] public float CollisionTestOffsetBelowHangIdle;
        [RTTI.Member(24, 0x6C, "Logic", true)] public FRange AimComfortRangeIdle;
        [RTTI.Member(25, 0x74, "Logic")] public FRange AimComfortRangeIdleRadians;
        [RTTI.Member(26, 0x7C, "Logic", true)] public FRange AimComfortRangeMoving;
        [RTTI.Member(27, 0x84, "Logic")] public FRange AimComfortRangeMovingRadians;
        [RTTI.Member(12, 0x90, "Logic")] public Array<String> AutoTraversableAnnotationTags;
        [RTTI.Member(15, 0xA0, "Logic")] public float LookDistance;
        [RTTI.Member(16, 0xA4, "Logic")] public FRange StepOffAllowedHeightDifference;
        [RTTI.Member(17, 0xAC, "Logic")] public float StepOffReattachmentPreventionRadius;
        [RTTI.Member(18, 0xB0, "Logic")] public Array<Vec3> JumpOffTargetCollisionCheckStartOffsets;
        [RTTI.Member(19, 0xC0, "Logic")] public float JumpOffTargetMaxHeight;
        [RTTI.Member(20, 0xC4, "Logic")] public float JumpOffTargetScorePenalty;
        [RTTI.Member(21, 0xC8, "Logic")] public float JumpOffTargetMaxForwardAngle;
        [RTTI.Member(22, 0xCC, "Logic")] public float PullUpToGroundScorePenalty;
        [RTTI.Member(23, 0xD0, "Logic")] public float PullUpToGroundAdditionalAllowedExtraHeight;
        [RTTI.Member(28, 0xD8, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithFootSupportStandingAnimation;
        [RTTI.Member(30, 0xE0, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithFootSupportCrouchedAnimation;
        [RTTI.Member(29, 0xF0, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithoutFootSupportStandingAnimation;
        [RTTI.Member(31, 0xF8, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithoutFootSupportCrouchedAnimation;
        [RTTI.Member(32, 0x108, "Logic")] public Array<Ref<DamageTypeResource>> IgnoredDamageTypesCausedByParkourableEntity;
        [RTTI.Member(33, 0x118, "Logic")] public float DeviationAngleSearchWeight;
        [RTTI.Member(66, 0x120, "Unlocks")] public Ref<PerkLevel> AimWhileParkouringPerk;
        [RTTI.Member(34, 0x128, "Logic")] public Ref<CurveResource> ViewAngleTransitionScoreCurve;
        [RTTI.Member(35, 0x130, "Logic")] public float PerchedOnPointMinTurnAngle;
        [RTTI.Member(36, 0x134, "Logic")] public float MaxLedgeClimbOverDropHeight;
        [RTTI.Member(37, 0x138, "Logic")] public float MaxLedgeClimbOverSlopeAngle;
        [RTTI.Member(38, 0x13C, "Logic")] public float LedgeClimbOverCapsuleZOffset;
        [RTTI.Member(39, 0x140, "Logic")] public float AutoDetachFromClimbDistanceIntoWater;
        [RTTI.Member(40, 0x144, "Logic")] public float AutoDetachFromPerchedDistanceIntoWater;
        [RTTI.Member(53, 0x148, "Facts")] public Ref<BooleanFact> IsTransitioningFact;
        [RTTI.Member(54, 0x150, "Facts")] public Ref<EnumFact> TransitionTypeFact;
        [RTTI.Member(56, 0x158, "Camera")] public Ref<CameraModeResource> DefaultCameraModeWithHandsWithFootSupport;
        [RTTI.Member(57, 0x160, "Camera")] public Ref<CameraModeResource> DefaultCameraModeWithHandsWithoutFootSupport;
        [RTTI.Member(58, 0x168, "Camera")] public Ref<CameraModeResource> DefaultCameraModeOnFoot;
        [RTTI.Member(60, 0x170, "Camera")] public Ref<CameraMagnetTagResource> ReachMagnetTag;
        [RTTI.Member(61, 0x178, "Camera")] public Ref<CameraMagnetTagResource> ParkourMagnetTag;
        [RTTI.Member(41, 0x180, "Logic")] public float MaxClimbCollisionOnStaticAnnotationPushAwayDistance;
        [RTTI.Member(42, 0x184, "Logic")] public float MaxClimbCollisionOnMovingAnnotationPushAwayDistance;
        [RTTI.Member(68, 0x188, "HitResponse")] public float DetachWithHandsFlinchSeverity;
        [RTTI.Member(43, 0x18C, "Logic")] public ParkourInitialAttachmentSettings DisplacementSmoothAttachmentSettings;
        [RTTI.Member(44, 0x19C, "Logic")] public ParkourInitialAttachmentSettings TurnSmoothAttachmentSettings;
        [RTTI.Member(45, 0x1AC, "Logic")] public float FacingDirectionSmoothFactor;
        [RTTI.Member(46, 0x1B0, "Logic")] public bool AllowBoostedJump;
        [RTTI.Member(47, 0x1B4, "Logic")] public float BoostedJumpAngleSmoothFactor;
        [RTTI.Member(48, 0x1B8, "Logic")] public FRange AllowedTakeOffAngleRange;
        [RTTI.Member(49, 0x1C0, "Logic")] public float BoostedJumpPreparationMagnetDistance;
        [RTTI.Member(50, 0x1C4, "Logic")] public float MinimumBoostedJumpPreparationDuration;
        [RTTI.Member(51, 0x1C8, "Logic")] public String PreparingBoostedJumpAnimTagName;
        [RTTI.Member(59, 0x1D0, "Camera")] public Ref<CameraModeResource> PreparingBoostedJumpCameraMode;
    }

    [RTTI.Serializable(0x83992A0AF4DC74DC, GameType.DS)]
    public class PlayerParkourComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5252CDC17A548391, GameType.DS)]
    public class PlayerPhotoModePoseAnimation
    {
        [RTTI.Member(1, 0x8, "Logic")] public Ref<SkeletonAnimationResource> Animation;
        [RTTI.Member(2, 0x10, "Logic")] public bool HideWeapon;
        [RTTI.Member(3, 0x11, "Logic")] public bool HideHandBaggage;
        [RTTI.Member(4, 0x12, "Logic")] public bool HideBB;
        [RTTI.Member(5, 0x13, "Logic")] public bool AttachBB;
        [RTTI.Member(7, 0x14, "IK")] public bool DisableFootIK;
        [RTTI.Member(8, 0x15, "IK")] public bool UseLeftHandToLegIK;
        [RTTI.Member(9, 0x16, "IK")] public bool UseRightHandToLegIK;
        [RTTI.Member(10, 0x18, "IK")] public float LookIKWeightMax;
        [RTTI.Member(11, 0x1C, "IK")] public float LookIKSpineSideRate;
        [RTTI.Member(12, 0x20, "IK")] public float LookIKSpineHeightRate;
    }

    [RTTI.Serializable(0x99083C0263A95457, GameType.DS)]
    public class PlayerProfile : RTTIRefObject
    {
        [RTTI.Member(2, 0xE8, true)] public SystemParams SystemParams;
        [RTTI.Member(3, 0x170, true)] public Array<PlayerParams> PlayerParams;
        [RTTI.Member(4, 0x260, true)] public DSPlayerProfile DSPlayerProfile;
        [RTTI.Member(5, 0x650, true)] public DSDLCProfile DSDLCProfile;
        [RTTI.Member(6, 0x698, true)] public Array<EpicCacheAchievement> FailedCacheAchievementCaches;
        [RTTI.Member(7, 0x6A8, true)] public Array<EpicCacheStat> FailedCacheStatCaches;
    }

    [RTTI.Serializable(0x628C470005A62F0, GameType.DS)]
    public class PlayerProfileOnline : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x41604589EB46396, GameType.DS)]
    public class PlayerProfileSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x93F0AE28EE25D0E5, GameType.DS)]
    public class PlayerRepellingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9FE1B91323CF26A, GameType.DS)]
    public class PlayerRepellingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public BoundingBox3 BoundingBox;
        [RTTI.Member(4, 0x40, "Logic")] public String HelperName;
        [RTTI.Member(5, 0x48, "Logic")] public float RepelSpeed;
    }

    [RTTI.Serializable(0x7CC7A51E24AA578, GameType.DS)]
    public class PlayerRestoreState : RTTIObject
    {
        [RTTI.Member(1, 0x18, "StateSaving", true)] public GGUUID UUID;
        [RTTI.Member(2, 0x28, "StateSaving", true)] public StreamingRef<EntityResource> EntityResource;
        [RTTI.Member(3, 0x30, "StateSaving", true)] public WorldTransform WorldTransform;
        [RTTI.Member(4, 0x70, "StateSaving", true)] public bool RestartOnSpawned;
        [RTTI.Member(5, 0x78, "StateSaving", true)] public Array<uint8> PropertyData;
        [RTTI.Member(6, 0x88, "StateSaving", true)] public Ref<HUDRestoreState> HUDRestoreState;
    }

    [RTTI.Serializable(0x2DCD02F93D9203C1, GameType.DS)]
    public class PlayerSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public EPlayerNumber PlayerNumber;
    }

    [RTTI.Serializable(0x1C453BB161F36D3D, GameType.DS)]
    public class PlayerSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x12323B44CCD03712, GameType.DS)]
    public class PlayerSoundMixComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB6A695A9054E5F60, GameType.DS)]
    public class PlayerSoundMixComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "MixStates")] public Ref<SoundMixStateResource> MortallyWoundedSoundMixState;
        [RTTI.Member(4, 0x28, "MixStates")] public Ref<SoundMixStateResource> DeathSoundMixState;
        [RTTI.Member(5, 0x30, "MixStates")] public Ref<SoundMixStateResource> SprintSoundMixState;
        [RTTI.Member(6, 0x38, "MixStates")] public Ref<SoundMixStateResource> ZoomedWeaponSoundMixState;
        [RTTI.Member(7, 0x40, "MixStates")] public Ref<SoundMixStateResource> ReloadingWeaponSoundMixState;
    }

    [RTTI.Serializable(0xEC3B929A59B93DDD, GameType.DS)]
    public class PlayerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6222459513202F3A, GameType.DS)]
    public class PlayerToolComponent : SimpleAnimationItemOverrideComponent
    {
    }

    [RTTI.Serializable(0x8B2064491A1CB5B5, GameType.DS)]
    public class PlayerToolComponentResource : SimpleAnimationItemOverrideComponentResource
    {
        [RTTI.Member(11, 0x48, "Logic")] public float UseAnimationTimeout;
        [RTTI.Member(12, 0x50, "Logic")] public String UseToolActivateAnimEventText;
        [RTTI.Member(14, 0x58, "Logic")] public String StowActiveWeaponIfAttachedToHelper;
        [RTTI.Member(13, 0x60, "Logic")] public bool UseAnimationEventToTriggerFire;
        [RTTI.Member(15, 0x61, "Logic")] public bool Aimable;
    }

    [RTTI.Serializable(0x9CA71E2047B5E4CB, GameType.DS)]
    public class PlayerVoiceConfig
    {
        [RTTI.Member(1, 0x0, "Logic")] public float HoldBaggageBaggageWeight;
        [RTTI.Member(2, 0x4, "Logic")] public float HoldBaggageLoadingWeightRate;
        [RTTI.Member(3, 0x8, "Logic")] public float UnderConstructionCheckTime;
        [RTTI.Member(4, 0xC, "Logic")] public float UnderConstructionVoiceTime;
        [RTTI.Member(5, 0x10, "Logic")] public float AliveHumanFinishBTBattleFirstDelayTime;
        [RTTI.Member(6, 0x14, "Logic")] public float AliveHumanFinishBTBattleSecondDelayTime;
    }

    [RTTI.Serializable(0x850A9A50288E6955, GameType.DS)]
    public class Playlist : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ID;
        [RTTI.Member(3, 0x28)] public Ref<PlaylistData> Data;
    }

    [RTTI.Serializable(0x1647B0069170A141, GameType.DS)]
    public class PlaylistBuilder : RTTIObject
    {
    }

    [RTTI.Serializable(0x24E1FC02F6B1C714, GameType.DS)]
    public class PlaylistData : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int Version;
    }

    [RTTI.Serializable(0x90C4B29660134D50, GameType.DS)]
    public class PlaylistDataVersionRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String PlaylistID;
        [RTTI.Member(3, 0x28)] public int Version;
    }

    [RTTI.Serializable(0xE3FC882CBDE484D2, GameType.DS)]
    public class PlaylistFilter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<PlaylistFilterPredicate>> Predicates;
    }

    [RTTI.Serializable(0x1E03253DC56D874F, GameType.DS)]
    public class PlaylistFilterPredicate : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Key;
        [RTTI.Member(3, 0x28)] public EPlaylistFilterOperation Operation;
        [RTTI.Member(4, 0x30)] public Array<String> Values;
    }

    [RTTI.Serializable(0x51003DF2DF8A76FE, GameType.DS)]
    public class PlaylistHistory : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String PlaylistID;
        [RTTI.Member(3, 0x28)] public int64 StartTime;
        [RTTI.Member(4, 0x30)] public int64 EndTime;
    }

    [RTTI.Serializable(0x3CD02A6D362F6720, GameType.DS)]
    public class PlaylistHistoryProfile : RTTIRefObject
    {
        [RTTI.Member(2, 0x28)] public Array<Ref<PlaylistHistory>> PlaylistHistory;
        [RTTI.Member(3, 0x38)] public Array<Ref<PlaylistHistory>> ClanPlaylistHistory;
    }

    [RTTI.Serializable(0xB8E5377FDCE2AA5E, GameType.DS)]
    public class PlaylistIDList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> PlaylistIDs;
    }

    [RTTI.Serializable(0xFB324D5B4F494D2E, GameType.DS)]
    public class PlaylistInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ID;
        [RTTI.Member(3, 0x28)] public Array<Ref<PlaylistTag>> Tags;
        [RTTI.Member(4, 0x38)] public int PlayerCount;
    }

    [RTTI.Serializable(0x48AFEEF8A30DA534, GameType.DS)]
    public class PlaylistInfoByFilterRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<PlaylistFilter> Filter;
        [RTTI.Member(3, 0x28)] public int PageIndex;
        [RTTI.Member(4, 0x2C)] public int PageSize;
        [RTTI.Member(5, 0x30)] public String RequiredTag;
    }

    [RTTI.Serializable(0x55B66149F664E50D, GameType.DS)]
    public class PlaylistInfoByTagsRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> Tags;
        [RTTI.Member(3, 0x30)] public String RequiredTag;
    }

    [RTTI.Serializable(0x248A10717F500EE, GameType.DS)]
    public class PlaylistInfoResult : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<PlaylistInfo>> PlaylistInfo;
        [RTTI.Member(3, 0x30)] public int TotalPlaylists;
    }

    [RTTI.Serializable(0x76B1CE4D9CB8156F, GameType.DS)]
    public class PlaylistLoader : RTTIObject
    {
    }

    [RTTI.Serializable(0x8E0D0A50755B2ABA, GameType.DS)]
    public class PlaylistTag : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Tag;
        [RTTI.Member(3, 0x28)] public int CreationTime;
    }

    [RTTI.Serializable(0xB2CB2F15DE5CAE5, GameType.DS)]
    public class PlaylistsResult : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<Playlist>> Playlists;
    }

    [RTTI.Serializable(0xDCCC6E54D8C1070A, GameType.DS)]
    public class PolygonTag : VisualTag
    {
    }

    [RTTI.Serializable(0xD2005D98D188238, GameType.DS)]
    public class PolygonWidget : Widget
    {
    }

    [RTTI.Serializable(0x91B21498B7B65AD6, GameType.DS)]
    public class PoseDeformerBindingInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingHandle;
        [RTTI.Member(1, 0x4)] public uint32 BindingType;
        [RTTI.Member(2, 0x8)] public int BindingIdx;
    }

    [RTTI.Serializable(0x6DC05DA40F7851E2, GameType.DS)]
    public class PoseDeformerResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(4, 0x28, "General")] public Ref<GraphProgramResource> DeformerProgram;
        [RTTI.Member(5, 0x30, "General")] public bool IsUsingPBD;
        [RTTI.Member(6, 0x38, "General")] public Array<PoseDeformerBindingInfo> InputBindings;
        [RTTI.Member(7, 0x48, "General")] public Array<PoseDeformerBindingInfo> OutputBindings;
        [RTTI.Member(8, 0x58, "General")] public DynamicMaterialBindings MaterialBindings;
    }

    [RTTI.Serializable(0xDEF9FB4ECBEA95B3, GameType.DS)]
    public class PoseID : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xAC4731F67306D51, GameType.DS)]
    public class PositionLandmark : Landmark
    {
    }

    [RTTI.Serializable(0x5A8BEB5FCB794094, GameType.DS)]
    public class PositionLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xBF263B447EF21E7, GameType.DS)]
    public class PositionLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public WorldTransform WorldMatrix;
        [RTTI.Member(9, 0x70, "Logic")] public bool RelativeToSequence;
        [RTTI.Member(10, 0x71, "Logic")] public bool IsFixed;
    }

    [RTTI.Serializable(0x8C63341F72FF35A0, GameType.DS)]
    public class PostProcessCompositorNodeSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> DepthResolveShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> MotionVectorShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> MotionBlurShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> MotionBlurHiresShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> MotionBlurApplyShader;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> BloomCaptureShader;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> BloomIntegrateShader;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> BloomUpsampleShader;
        [RTTI.Member(10, 0x60)] public Ref<ShaderResource> IlrVignetteShader;
        [RTTI.Member(11, 0x68)] public Ref<ShaderResource> IlrElementShader;
        [RTTI.Member(12, 0x70)] public Ref<ShaderResource> GrainWeightShader;
        [RTTI.Member(13, 0x78)] public Ref<ShaderResource> DownscaleSceneShader;
        [RTTI.Member(14, 0x80)] public Ref<ShaderResource> NormalizedFilterShader;
        [RTTI.Member(15, 0x88)] public Ref<ShaderResource> AccumulateBloomShader;
        [RTTI.Member(16, 0x90)] public Ref<ShaderResource> DofMblurApplyCocShader;
        [RTTI.Member(17, 0x98)] public Ref<ShaderResource> DofMinMaxCoCFullResQuarterShader;
        [RTTI.Member(18, 0xA0)] public Ref<ShaderResource> DofMinMaxCoCQuarterSixteenShader;
        [RTTI.Member(19, 0xA8)] public Ref<ShaderResource> DofMinMaxCoCDilateShader;
        [RTTI.Member(20, 0xB0)] public Ref<ShaderResource> DofWeightsShader;
        [RTTI.Member(21, 0xB8)] public Ref<ShaderResource> DofWeightsWideShader;
        [RTTI.Member(22, 0xC0)] public Ref<ShaderResource> DofBlurShader;
        [RTTI.Member(23, 0xC8)] public Ref<ShaderResource> DofBlurShaderEvenFrameShader;
        [RTTI.Member(24, 0xD0)] public Ref<ShaderResource> DofPostBlurShader;
        [RTTI.Member(25, 0xD8)] public Ref<ShaderResource> DofBlurHighQualityShader;
        [RTTI.Member(26, 0xE0)] public Ref<ShaderResource> DofSmoothRGBShader;
        [RTTI.Member(27, 0xE8)] public Ref<ShaderResource> DofSmoothRGBOcclusionShader;
        [RTTI.Member(28, 0xF0)] public Ref<ShaderResource> DofSmoothRShader;
        [RTTI.Member(29, 0xF8)] public Ref<ShaderResource> FullComposeShader;
        [RTTI.Member(30, 0x100)] public Ref<ShaderResource> FullComposeDistortionShader;
        [RTTI.Member(31, 0x108)] public Ref<ShaderResource> FullComposeChromatic3Shader;
        [RTTI.Member(32, 0x110)] public Ref<ShaderResource> FullComposeChromatic5Shader;
        [RTTI.Member(33, 0x118)] public Ref<ShaderResource> FullComposeDistortionChromatic3Shader;
        [RTTI.Member(34, 0x120)] public Ref<ShaderResource> FullComposeDistortionChromatic5Shader;
        [RTTI.Member(35, 0x128)] public Ref<ShaderResource> MinimalComposeShader;
        [RTTI.Member(36, 0x130)] public Ref<ShaderResource> MiniatureLightBufferInputShader;
        [RTTI.Member(37, 0x138)] public Ref<ShaderResource> CubeVisualisationShader;
        [RTTI.Member(38, 0x140)] public Ref<ShaderResource> MaxMinConstructionShaderAR;
        [RTTI.Member(39, 0x148)] public Ref<ShaderResource> MaxMinConstructionShaderRR;
        [RTTI.Member(40, 0x150)] public Ref<ShaderResource> PostHdrBinkMovie;
    }

    [RTTI.Serializable(0xFF65EE87EA02B9F5, GameType.DS)]
    public class PostProcessEffectorInstance : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public Ref<PostProcessEffectorResource> Resource;
    }

    [RTTI.Serializable(0x4126F47E80639FC8, GameType.DS)]
    public class PostProcessEffectorManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x9A09EE5F82E9A82A, GameType.DS)]
    public class PostProcessEffectorResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<PostProcessSettingsResource> PostProcessSettings;
        [RTTI.Member(4, 0x28, "General")] public float FadeStart;
        [RTTI.Member(5, 0x2C, "General")] public float FadeRange;
        [RTTI.Member(6, 0x30, "General")] public float DistanceFactor;
        [RTTI.Member(7, 0x34, "General")] public float LookAtFactor;
        [RTTI.Member(8, 0x38, "General")] public float LookAtPower;
        [RTTI.Member(9, 0x3C, "General")] public float LookIntoFactor;
        [RTTI.Member(10, 0x40, "General")] public float LookIntoPower;
        [RTTI.Member(11, 0x44, "General")] public int Priority;
        [RTTI.Member(12, 0x48, "General")] public bool UseScreenVisibilityQuery;
        [RTTI.Member(13, 0x4C, "General")] public int ScreenVisibilityQuerySize;
        [RTTI.Member(14, 0x50, "General")] public float MinScreenVisibilityFactor;
    }

    [RTTI.Serializable(0xDEF46C45669A3367, GameType.DS)]
    public class PostProcessSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public Ref<ColorizeSettingsResource> ColorizeSettings;
        [RTTI.Member(4, 0x28, "Settings")] public Ref<GrainSettingsResource> GrainSettings;
        [RTTI.Member(5, 0x30, "Settings")] public Ref<BlurSettingsResource> BlurSettings;
        [RTTI.Member(6, 0x38, "Settings")] public Ref<BloomSettingsResource> BloomSettings;
        [RTTI.Member(7, 0x40, "Settings")] public Ref<DepthOfFieldSettingsResource> DepthOfFieldSettings;
        [RTTI.Member(8, 0x48, "Settings")] public Ref<VignetteSettingsResource> VignetteSettings;
        [RTTI.Member(9, 0x50, "Settings")] public Ref<ExposureSettingsResource> ExposureSettings;
        [RTTI.Member(10, 0x58, "Settings")] public Ref<SSAOSettingsResource> SSAOSettings;
        [RTTI.Member(11, 0x60, "Settings")] public Ref<BokehSettingsResource> BokehSettings;
        [RTTI.Member(12, 0x68, "Settings")] public Ref<CameraSettingsResource> CameraSettings;
        [RTTI.Member(13, 0x70, "Settings")] public Ref<LightShaftSettingsResource> SunShaftSettings;
        [RTTI.Member(14, 0x78, "Settings")] public Ref<KJPOpticalAberrationSettingsResource> KJPOpticalAberrationSettings;
    }

    [RTTI.Serializable(0x2A99BF1F147683E3, GameType.DS)]
    public class PostSkinnedModelCustomizedAttachToHelperMover : CustomizedAttachToHelperMover
    {
    }

    [RTTI.Serializable(0xCCCE05A5DAC12B2A, GameType.DS)]
    public class PostSkinnedModelCustomizedAttachToHelperMoverResource : CustomizedAttachToHelperMoverResource
    {
    }

    [RTTI.Serializable(0x6FDAEE8764D1C04B, GameType.DS)]
    public class PostureEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3FF754C03060D301, GameType.DS)]
    public class PostureEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<PostureSettings> PostureSettings;
    }

    [RTTI.Serializable(0x5821A517B10875FE, GameType.DS)]
    public class PostureSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public AnimationVariableSettings AnimationVariableSettings;
    }

    [RTTI.Serializable(0x43B55EB2F028C666, GameType.DS)]
    public class PotentialParkourTarget : PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0x26CC49132FC832E5, GameType.DS)]
    public class PotentialTakeDownTarget : PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0xE019DDD24FA3492B, GameType.DS)]
    public class PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0xCA54DF07F8ABFE75, GameType.DS)]
    public class PotentialZiplineTarget : PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0xF88C1685E6ACC80, GameType.DS)]
    public class PrecipitationOcclusionSystem : EnvironmentInteractionSystem
    {
        [RTTI.Member(6, 0xC8, "Logic")] public float DryTime;
        [RTTI.Member(7, 0xCC, "Logic")] public float WetTime;
        [RTTI.Member(4, 0xD0, "Rendering")] public float FrustumHeight;
        [RTTI.Member(3, 0xD4, "Rendering")] public EnvironmentInteractionRenderSettings Rendering;
    }

    [RTTI.Serializable(0x316D7CB19E7476FF, GameType.DS)]
    public class PrecipitationOcclusionSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> UpdateShader;
    }

    [RTTI.Serializable(0x61AF7931CD8058D5, GameType.DS)]
    public class PrecomputedAtmosphereSettings
    {
        [RTTI.Member(2, 0x0)] public Vec3 OuterSunIntensity;
        [RTTI.Member(3, 0x10)] public Vec3 SkyColorTint;
        [RTTI.Member(5, 0x20)] public Vec3 InnerSkyTint;
        [RTTI.Member(4, 0x30)] public Vec3 InnerSunTint;
        [RTTI.Member(0, 0x40)] public float Turbidity;
        [RTTI.Member(1, 0x44)] public float MieAsymmetry;
        [RTTI.Member(6, 0x48)] public float SunShapeIntensity;
        [RTTI.Member(7, 0x4C)] public float SunShapeSize;
        [RTTI.Member(8, 0x50)] public float ApparentSkyBrightness;
    }

    [RTTI.Serializable(0x2D08E4CD97C9ECF2, GameType.DS)]
    public class PrecomputedAtmosphereSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public PrecomputedAtmosphereSettings Settings;
    }

    [RTTI.Serializable(0xA066CA182AC8087A, GameType.DS)]
    public class PrefabBaseInstance : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "General")] public Array<PrefabObjectOverrides> Overrides;
        [RTTI.Member(8, 0x98, "General")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0xBE81C6DC6FACEEB8, GameType.DS)]
    public class PrefabInstance : PrefabBaseInstance
    {
        [RTTI.Member(10, 0xB0, "General")] public Ref<PrefabResource> Prefab;
    }

    [RTTI.Serializable(0x1BD0B5C85A150531, GameType.DS)]
    public class PrefabObjectOverrides
    {
        [RTTI.Member(0, 0x0)] public GGUUID RuntimeObject;
        [RTTI.Member(1, 0x10)] public Mat44 Orientation;
        [RTTI.Member(2, 0x50)] public bool IsRemoved;
        [RTTI.Member(3, 0x51)] public bool IsTransformOverridden;
        [RTTI.Member(4, 0x58)] public Array<PrefabPODAttributeOverride> AttributeOverrides;
        [RTTI.Member(5, 0x68)] public Array<PrefabShaderOverride> ShaderOverrides;
    }

    [RTTI.Serializable(0x3F19EAD8D34AB82A, GameType.DS)]
    public class PrefabPODAttributeOverride
    {
        [RTTI.Member(0, 0x0)] public String Group;
        [RTTI.Member(1, 0x8)] public String Name;
        [RTTI.Member(2, 0x10)] public PODVariant Value;
    }

    [RTTI.Serializable(0x88D76748A619F52E, GameType.DS)]
    public class PrefabResource : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0x152A5417A7B22E74, GameType.DS)]
    public class PrefabShaderOverride
    {
        [RTTI.Member(0, 0x0)] public String VariableID;
        [RTTI.Member(1, 0x8)] public int ElementCount;
        [RTTI.Member(2, 0x10)] public Vec4 Value;
    }

    [RTTI.Serializable(0x11A497DF175CC438, GameType.DS)]
    public class PreferredInTemplate
    {
    }

    [RTTI.Serializable(0xD05789EAE3ACBF02, GameType.DS)]
    public class PrefetchList : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<AssetPath> Files;
        [RTTI.Member(4, 0x30, "General")] public Array<int32> Sizes;
        [RTTI.Member(5, 0x40, "General")] public Array<int32> Links;
    }

    [RTTI.Serializable(0xB5B07AA8BF828CC, GameType.DS)]
    public class PrimitiveBlendShapeMask
    {
        [RTTI.Member(0, 0x0)] public uint32 Mask0;
        [RTTI.Member(1, 0x4)] public uint32 Mask1;
        [RTTI.Member(2, 0x8)] public uint32 Mask2;
        [RTTI.Member(3, 0xC)] public uint32 Mask3;
    }

    [RTTI.Serializable(0xAAA8DF11F21BD936, GameType.DS)]
    public class PrimitiveDeltaDeformation
    {
        [RTTI.Member(0, 0x0)] public Array<VertexDeltaDeformation> Deformations;
    }

    [RTTI.Serializable(0xEE49D93DA4C1F4B8, GameType.DS)]
    public class PrimitiveResource : Resource
    {
        [RTTI.Member(2, 0x20)] public PrimitiveResourceFlags Flags;
        [RTTI.Member(3, 0x28)] public Ref<VertexArrayResource> VertexArray;
        [RTTI.Member(4, 0x30)] public Ref<IndexArrayResource> IndexArray;
        [RTTI.Member(5, 0x40)] public BoundingBox3 BoundingBox;
        [RTTI.Member(6, 0x60)] public Ref<SKDTreeResource> SKDTree;
        [RTTI.Member(7, 0x68)] public int StartIndex;
        [RTTI.Member(8, 0x6C)] public int EndIndex;
        [RTTI.Member(9, 0x70)] public uint32 Hash;
    }

    [RTTI.Serializable(0x1A01EE1CCBD81919, GameType.DS)]
    public class PrimitiveResourceFlags
    {
        [RTTI.Member(0, 0x0)] public uint32 Flags;
    }

    [RTTI.Serializable(0x2D40A3C29B1437F7, GameType.DS)]
    public class PrimitiveSkinInfo
    {
        [RTTI.Member(0, 0x0)] public EPrimitiveSkinInfoType Type;
        [RTTI.Member(2, 0x4)] public ESkinnedVtxType SkinVtxTypes;
        [RTTI.Member(1, 0x8)] public PrimitiveBlendShapeMask BlendShapeMask;
        [RTTI.Member(3, 0x18)] public int VertexCount;
        [RTTI.Member(4, 0x1C)] public int VertexComputeNbtCount;
        [RTTI.Member(5, 0x20)] public Ref<DataBufferResource> VtxTriListBuffer;
        [RTTI.Member(6, 0x28)] public Array<VertexSkin> VerticesSkin;
        [RTTI.Member(7, 0x38)] public Array<VertexSkinNBT> VerticesSkinNBT;
    }

    [RTTI.Serializable(0x56984F58E188F780, GameType.DS)]
    public class PrimitivesGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3BE0DDA3D8D138A2, GameType.DS)]
    public class PrismResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<ConvexPolygonalPrismData> ConvexPrisms;
        [RTTI.Member(3, 0x30)] public Array<WorldPosition> Points;
    }

    [RTTI.Serializable(0xB449A2254BBA6184, GameType.DS)]
    public class PrivateRoomConfig : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "CameraRange")] public PrivateRoomDisplayIconRange ExitRoomIconRange;
        [RTTI.Member(4, 0x38, "CameraRange")] public PrivateRoomDisplayIconRange DirectExitRoomIconRange;
        [RTTI.Member(5, 0x50, "CameraRange")] public PrivateRoomDisplayIconRange ShowerRoomIconRange;
        [RTTI.Member(6, 0x68, "CameraRange")] public PrivateRoomDisplayIconRange ShowCaseIconRange;
        [RTTI.Member(7, 0x80, "CameraRange")] public PrivateRoomDisplayIconRange BBToolIconRange;
        [RTTI.Member(8, 0x98, "CameraRange")] public PrivateRoomDisplayIconRange FastTravelIconRange;
        [RTTI.Member(9, 0xB0, "CameraRange")] public PrivateRoomDisplayIconRange EnterRoomIconRange;
        [RTTI.Member(10, 0xC8, "CameraRange")] public PrivateRoomDisplayIconRange UseWCIconRange;
        [RTTI.Member(11, 0xE0, "CameraRange")] public PrivateRoomDisplayIconRange ToUrinateIconRange;
        [RTTI.Member(12, 0xF8, "CameraRange")] public PrivateRoomDisplayIconRange ToFecesIconRange;
        [RTTI.Member(13, 0x110, "CameraRange")] public PrivateRoomDisplayIconRange UseWashBasinIconRange;
        [RTTI.Member(14, 0x128, "CameraRange")] public PrivateRoomDisplayIconRange ShowSuitIconRange;
        [RTTI.Member(15, 0x140, "CameraRange")] public PrivateRoomDisplayIconRange CustomizeBackpackIconRange;
        [RTTI.Member(16, 0x158, "CameraRange")] public PrivateRoomDisplayIconRange UseTerminalIconRange;
        [RTTI.Member(17, 0x170, "CameraRange")] public PrivateRoomDisplayIconRange ShowTableIconRange;
        [RTTI.Member(18, 0x188, "CameraRange")] public PrivateRoomDisplayIconRange WatchFigure;
        [RTTI.Member(19, 0x1A0, "CameraRange")] public PrivateRoomDisplayIconRange ShowDreamCatcher;
        [RTTI.Member(20, 0x1B8, "CameraRange")] public PrivateRoomDisplayIconRange RemoveCap;
        [RTTI.Member(21, 0x1D0, "CameraRange")] public PrivateRoomDisplayIconRange RemoveGlasses;
        [RTTI.Member(22, 0x1E8, "CameraRange")] public PrivateRoomDisplayIconRange LookLeftRange;
        [RTTI.Member(23, 0x200, "CameraRange")] public PrivateRoomDisplayIconRange LookRightRange;
        [RTTI.Member(24, 0x218, "CameraRange")] public PrivateRoomDisplayIconRange GestureThumbsUp;
        [RTTI.Member(25, 0x230, "CameraRange")] public PrivateRoomDisplayIconRange GesturePleaseLook;
        [RTTI.Member(26, 0x248, "CameraRange")] public PrivateRoomDisplayIconRange GestureStepping;
        [RTTI.Member(27, 0x260, "CameraRange")] public PrivateRoomDisplayIconRange LookRight90;
        [RTTI.Member(28, 0x278, "CameraRange")] public PrivateRoomDisplayIconRange LookRight45;
        [RTTI.Member(29, 0x290, "CameraRange")] public PrivateRoomDisplayIconRange LookFront0;
        [RTTI.Member(30, 0x2A8, "CameraRange")] public PrivateRoomDisplayIconRange LookLeft45;
        [RTTI.Member(31, 0x2C0, "CameraRange")] public PrivateRoomDisplayIconRange LookLeft90;
        [RTTI.Member(32, 0x2D8, "CameraRange")] public PrivateRoomDisplayIconRange LookUp;
        [RTTI.Member(33, 0x2F0, "CameraRange")] public PrivateRoomDisplayIconRange LookDown;
        [RTTI.Member(34, 0x308, "CameraRange")] public PrivateRoomDisplayIconRange WatchMap;
        [RTTI.Member(35, 0x320, "CameraRange")] public PrivateRoomDisplayIconRange WatchEntrance;
        [RTTI.Member(36, 0x338, "CameraRange")] public PrivateRoomDisplayIconRange WatchSuit;
        [RTTI.Member(37, 0x350, "CameraRange")] public PrivateRoomDisplayIconRange WatchWeapon;
        [RTTI.Member(38, 0x368, "CameraRange")] public PrivateRoomDisplayIconRange WatchShower;
        [RTTI.Member(39, 0x380, "CameraRange")] public PrivateRoomDisplayIconRange WatchWashroom;
        [RTTI.Member(40, 0x398, "CameraRange")] public PrivateRoomDisplayIconRange Leving;
        [RTTI.Member(41, 0x3B0, "CameraRange")] public PrivateRoomDisplayIconRange GroinA;
        [RTTI.Member(42, 0x3C8, "CameraRange")] public PrivateRoomDisplayIconRange BustA;
        [RTTI.Member(44, 0x3E0, "RobCameraDemo")] public float R3CountInterval;
        [RTTI.Member(45, 0x3E4, "RobCameraDemo")] public int R3TriggerTimes;
    }

    [RTTI.Serializable(0x93325DE39AFC6B68, GameType.DS)]
    public class PrivateRoomDisplayIconRange
    {
        [RTTI.Member(0, 0x0)] public float RotXMin;
        [RTTI.Member(1, 0x4)] public float RotXMax;
        [RTTI.Member(2, 0x8)] public float RotYMin;
        [RTTI.Member(3, 0xC)] public float RotYMax;
        [RTTI.Member(4, 0x10)] public EDSPrivateRoomIconType IconType;
        [RTTI.Member(5, 0x14)] public float ZoomTimeToAction;
    }

    [RTTI.Serializable(0xA8D3D0E207F32B74, GameType.DS)]
    public class ProbabilityAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public float Probability;
    }

    [RTTI.Serializable(0xC1DEB13FE73E1C0C, GameType.DS)]
    public class ProceduralLookResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String ModifiedJointName;
    }

    [RTTI.Serializable(0xFAC0FE8B1BB622CA, GameType.DS)]
    public class ProceduralLookStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x2C5866B1434BBC5F, GameType.DS)]
    public class ProfileOwnerData : RTTIRefObject
    {
        [RTTI.Member(3, 0x20)] public String UUID;
        [RTTI.Member(2, 0x28)] public String ProfileOwnerName;
        [RTTI.Member(4, 0x30)] public Ref<RTTIRefObject> ProfileData;
    }

    [RTTI.Serializable(0xE1F05FB8CEE7A937, GameType.DS)]
    public class ProfileStatus : ProfileOwnerData
    {
    }

    [RTTI.Serializable(0x1E994E13295FC7F6, GameType.DS)]
    public class ProfileUpdatedMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ProfileOwner;
    }

    [RTTI.Serializable(0x5ED57548272AF3F2, GameType.DS)]
    public class ProgramInstance : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<ProgramResource> Resource;
    }

    [RTTI.Serializable(0x37C36446DC7F0034, GameType.DS)]
    public class ProgramParameter
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String TypeName;
        [RTTI.Member(3, 0x18)] public Array<uint8> DefaultData;
        [RTTI.Member(4, 0x30)] public Ref<RTTIRefObject> DefaultObject;
        [RTTI.Member(5, 0x38)] public Ref<RTTIRefObject> HardLinkedDefaultObject;
        [RTTI.Member(6, 0x40)] public UUIDRef<RTTIRefObject> DefaultObjectUUID;
        [RTTI.Member(7, 0x60)] public EDefaultDataStorageType DefaultDataStorageType;
        [RTTI.Member(2, 0x61)] public bool IsEvent;
    }

    [RTTI.Serializable(0x3D12F7E558590E42, GameType.DS)]
    public class ProgramResource : Resource
    {
        [RTTI.Member(3, 0x20, "Program")] public Array<ProgramResourceEntryPoint> EntryPointsData;
        [RTTI.Member(5, 0x38, "Program")] public uint64 StorageHash;
        [RTTI.Member(4, 0x40, "Program")] public bool CompileRuntimeDebug;
    }

    [RTTI.Serializable(0x177715018F040811, GameType.DS)]
    public class ProgramResourceEntryPoint
    {
        [RTTI.Member(0, 0x0)] public Array<ProgramParameter> InputParameters;
        [RTTI.Member(1, 0x20)] public Array<ProgramParameter> OutputParameters;
        [RTTI.Member(2, 0x40)] public String EntryPoint;
    }

    [RTTI.Serializable(0x22435212BD4C7C0E, GameType.DS)]
    public class ProgressBarBlock
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> BlockTexture;
        [RTTI.Member(1, 0x8)] public IVec2 BlockTextureOffset;
    }

    [RTTI.Serializable(0x5CB77BCD33D0B473, GameType.DS)]
    public class ProgressBarBlockWidget : Widget
    {
    }

    [RTTI.Serializable(0x8325EB7096C9AA9E, GameType.DS)]
    public class ProgressBarTag : SliderTag
    {
    }

    [RTTI.Serializable(0x7FD42D36C3BE02B2, GameType.DS)]
    public class ProgressBarWidget : Widget
    {
    }

    [RTTI.Serializable(0x3434CE1181631FD3, GameType.DS)]
    public class ProjectileTrailComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAE66A3A77E180533, GameType.DS)]
    public class ProjectileTrailComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xFA72BC970D36D883, GameType.DS)]
    public class ProjectileTrailComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "AttachLocation")] public String HelperNodeName;
        [RTTI.Member(5, 0x28, "Logic")] public float LifeTime;
        [RTTI.Member(6, 0x2C, "Logic")] public bool DestroyOnContact;
        [RTTI.Member(7, 0x2D, "Logic")] public bool DestroyOnStick;
        [RTTI.Member(8, 0x2E, "Logic")] public bool DestroyOnStickIgnored;
        [RTTI.Member(9, 0x2F, "Logic")] public bool DestroyOnExplode;
        [RTTI.Member(11, 0x30, "VisualEffects")] public Ref<ParticleSystemResource> ParticleResource;
    }

    [RTTI.Serializable(0x37413FF53E9F25EC, GameType.DS)]
    public class Property : ResourceWithName
    {
        [RTTI.Member(5, 0x0, "General")] public uint32 Flags;
    }

    [RTTI.Serializable(0xCCEA57C756A56FB6, GameType.DS)]
    public class PropertyBasedContextualEmotion : ContextualEmotion
    {
        [RTTI.Member(10, 0x68, "Logic")] public Ref<BoolPropertyBase> Property;
    }

    [RTTI.Serializable(0x47B407CDA58A9E63, GameType.DS)]
    public class PropertyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x76B45CE1B89136DB, GameType.DS)]
    public class PropertyComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<PropertyContainerResource> ContainerResource;
    }

    [RTTI.Serializable(0x60230B66B5D4F630, GameType.DS)]
    public class PropertyComponentResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE5BDA61D07DEB931, GameType.DS)]
    public class PropertyComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x41FC62A6BF66B788, GameType.DS)]
    public class PropertyContainer
    {
        [RTTI.Member(1, 0x10, "StateSaving", true)] public CPtr<PropertyContainerResource> Resource;
    }

    [RTTI.Serializable(0x56D82CBEDBD079B2, GameType.DS)]
    public class PropertyContainerResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<PropertyValue>> PropertyValues;
    }

    [RTTI.Serializable(0x8B8E3D077F6EEACA, GameType.DS)]
    public class PropertyNameLinkMapEntry
    {
        [RTTI.Member(0, 0x10)] public int Type;
        [RTTI.Member(1, 0x18)] public Ref<Property> Property;
    }

    [RTTI.Serializable(0x65B621A6A9381629, GameType.DS)]
    public class PropertyValue : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB85C7CAB1FAA21D3, GameType.DS)]
    public class ProximityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEDF1F5F9A729C77C, GameType.DS)]
    public class ProximityComponentResource : EntityComponentResource
    {
        [RTTI.Member(8, 0x70, "Filter")] public OrientedBox OrientedBox;
        [RTTI.Member(9, 0xC0, "Filter")] public bool AlignToWorld;
        [RTTI.Member(10, 0xC1, "Filter")] public bool IsSpherical;
        [RTTI.Member(3, 0xC8, "Logic")] public CPtr<EntityAction> EnterAction;
        [RTTI.Member(4, 0xD0, "Logic")] public CPtr<EntityAction> ExitAction;
        [RTTI.Member(11, 0xD8, "Filter")] public bool ExcludeAI;
        [RTTI.Member(12, 0xD9, "Filter")] public bool ExcludePlayer;
        [RTTI.Member(5, 0xE0, "Logic")] public CPtr<EntityAction> EnterActionOnTriggerer;
        [RTTI.Member(6, 0xE8, "Logic")] public CPtr<EntityAction> ExitActionOnTriggerer;
        [RTTI.Member(14, 0xF0, "Filter")] public bool TriggerAlways;
        [RTTI.Member(13, 0xF8, "Filter")] public String EntityType;
    }

    [RTTI.Serializable(0xBA6BAD6EEDEBD06A, GameType.DS)]
    public class ProximityIndicatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAAFF7D9C6C8C4B1D, GameType.DS)]
    public class ProximityIndicatorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float MaxRange;
        [RTTI.Member(4, 0x24, "Logic")] public float IgnoreInstigatorDuration;
        [RTTI.Member(5, 0x28, "Logic")] public bool OnlyShowIfObserverCanBeDamagedByEntity;
    }

    [RTTI.Serializable(0x7A31A146A725152B, GameType.DS)]
    public class PushResponseComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1FDD6DFD4E6BAA13, GameType.DS)]
    public class PushResponseComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Logic")] public float MinimumPusherSpeed;
        [RTTI.Member(3, 0x24, "Logic")] public float CooldownDuration;
        [RTTI.Member(6, 0x28, "Trigger")] public Ref<GraphProgramResource> OnTriggerGraph;
    }

    [RTTI.Serializable(0x442C981D1D729A02, GameType.DS)]
    public class PushTriggerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x60611B5365A822EE, GameType.DS)]
    public class PushTriggerComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x384BE9B29478C1A3, GameType.DS)]
    public class QuadTreeCell
    {
        [RTTI.Member(0, 0x0)] public uint128 Data;
    }

    [RTTI.Serializable(0x648796B00C99723E, GameType.DS)]
    public class Quat
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
        [RTTI.Member(3, 0xC)] public float W;
    }

    [RTTI.Serializable(0x4C11440F9F0764B3, GameType.DS)]
    public class QueryTriggersComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD5AB77F12D2EF102, GameType.DS)]
    public class QueryTriggersComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xDE59FF691CA8D60F, GameType.DS)]
    public class QuestCategory : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Logic")] public Ref<UITexture> ActiveIcon;
        [RTTI.Member(6, 0x30, "Logic")] public Ref<UITexture> InactiveIcon;
        [RTTI.Member(7, 0x38, "Logic")] public Ref<LocalizedTextResource> CategoryName;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<LocalizedTextResource> OpenQuestsTitle;
        [RTTI.Member(9, 0x48, "Logic")] public Ref<LocalizedTextResource> NoQuestsTitle;
        [RTTI.Member(10, 0x50, "Logic")] public Ref<LocalizedTextResource> CompletedQuestsTitle;
        [RTTI.Member(11, 0x58, "Logic")] public Ref<LocalizedTextResource> NewNotificationTitle;
        [RTTI.Member(12, 0x60, "Logic")] public Ref<LocalizedTextResource> UpdatedNotificationTitle;
        [RTTI.Member(13, 0x68, "Logic")] public Ref<LocalizedTextResource> CompletedNotificationTitle;
        [RTTI.Member(14, 0x70, "Logic")] public Ref<LocalizedTextResource> FailedNotificationTitle;
    }

    [RTTI.Serializable(0xF6AE249B1FFBA016, GameType.DS)]
    public class QuestChainLink : CoreObject
    {
        [RTTI.Member(2, 0x20)] public UUIDRef<QuestSection> Start;
        [RTTI.Member(3, 0x30)] public UUIDRef<QuestSection> End;
    }

    [RTTI.Serializable(0x5B5967E4286E3DA2, GameType.DS)]
    public class QuestChainQuestTrigger : QuestTrigger
    {
    }

    [RTTI.Serializable(0xD2B61BA1A90A21D5, GameType.DS)]
    public class QuestChainQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x71F4E49FEB4AA718, GameType.DS)]
    public class QuestChainResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<QuestChainLink>> Links;
    }

    [RTTI.Serializable(0x1327E6F2DFFE7EB5, GameType.DS)]
    public class QuestDebugInitializer : Resource
    {
        [RTTI.Member(4, 0x20, "Logic")] public Ref<GraphProgramResource> Program;
        [RTTI.Member(3, 0x28, "Logic")] public Ref<WorldNode> Location;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<QuestSection> QuestStart;
        [RTTI.Member(6, 0x38, "Logic")] public bool CompletePrevious;
    }

    [RTTI.Serializable(0x1F5CC205BFBEEE2F, GameType.DS)]
    public class QuestDetailsUIDataBinding : UIDataBinding
    {
        [RTTI.Member(0, 0x8)] public Ref<LocalizedTextResource> Title;
        [RTTI.Member(1, 0x10)] public Ref<LocalizedTextResource> Description;
    }

    [RTTI.Serializable(0xA8780C4568B39A9C, GameType.DS)]
    public class QuestEntityObjective : QuestMarkerObjective
    {
        [RTTI.Member(26, 0xA8, "Logic")] public Array<GGUUID> SpawnSetupUUID;
        [RTTI.Member(27, 0xB8, "Logic")] public bool MustHaveBeenSpawnedThroughGroup;
    }

    [RTTI.Serializable(0xF761742046EE926B, GameType.DS)]
    public class QuestEntityObjectiveInstance : QuestMarkerObjectiveInstance
    {
    }

    [RTTI.Serializable(0x8D589BBBA789E309, GameType.DS)]
    public class QuestGenerationSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> CraftObjectiveText;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LocalizedTextResource> ObtainObjectiveText;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<LocalizedTextResource> ReturnToMerchantObjectiveText;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<LocalizedTextResource> MoneyObjectiveText;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<LocalizedTextResource> DefaultStatusText;
        [RTTI.Member(10, 0x48, "Logic")] public Ref<LocalizedTextResource> CraftingJobName;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<LocalizedTextResource> CraftingJobDescription;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<LocalizedTextResource> PurchaseJobName;
        [RTTI.Member(13, 0x60, "Logic")] public Ref<LocalizedTextResource> PurchaseJobDescription;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<LocalizedTextResource> TradeJobName;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<LocalizedTextResource> TradeJobDescription;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<LocalizedTextResource> GatherItemsObejctiveText;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<LocalizedTextResource> GatherMoneyObjectiveText;
        [RTTI.Member(8, 0x88, "Logic")] public Ref<QuestType> DynamicQuestType;
        [RTTI.Member(9, 0x90, "Logic")] public Ref<QuestCategory> JobQuestCategory;
        [RTTI.Member(18, 0x98, "Logic")] public Array<Ref<TradeItemJobInfo>> TradeItemInfos;
    }

    [RTTI.Serializable(0x1D0DE42857FF7B14, GameType.DS)]
    public class QuestInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x45A676E7057576F7, GameType.DS)]
    public class QuestInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE31DDD244230BB57, GameType.DS)]
    public class QuestItemTrackingObjective : QuestObjective
    {
        [RTTI.Member(24, 0x98, "Logic")] public GGUUID ItemUUID;
        [RTTI.Member(25, 0xA8, "Logic")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(22, 0xB0, "Logic")] public int Amount;
        [RTTI.Member(23, 0xB4, "Logic")] public bool PutMarker;
    }

    [RTTI.Serializable(0xDF4392E832569BD7, GameType.DS)]
    public class QuestItemTrackingObjectiveInstance : QuestMarkerObjectiveInstance
    {
    }

    [RTTI.Serializable(0x43820AF821E3C635, GameType.DS)]
    public class QuestLocationObjective : QuestMarkerObjective
    {
        [RTTI.Member(26, 0xA8, "Logic")] public Array<GGUUID> WorldNodeUUIDs;
        [RTTI.Member(27, 0xB8, "Logic")] public float AreaBuffer;
    }

    [RTTI.Serializable(0x9C0DF43BAD716F10, GameType.DS)]
    public class QuestLocationObjectiveInstance : QuestMarkerObjectiveInstance
    {
    }

    [RTTI.Serializable(0xB302D027EE66E0AA, GameType.DS)]
    public class QuestMarkerObjective : QuestObjective
    {
        [RTTI.Member(22, 0x98, "Logic")] public Ref<QuestMarkerResource> MarkerResourceOverride;
        [RTTI.Member(23, 0xA0, "Logic")] public bool RemoveMarkersWhenTriggered;
        [RTTI.Member(24, 0xA1, "Logic")] public bool CountMarkers;
    }

    [RTTI.Serializable(0xE117E536CC3B1811, GameType.DS)]
    public class QuestMarkerObjectiveInstance : QuestObjectiveInstance
    {
    }

    [RTTI.Serializable(0x66F007F38043C50E, GameType.DS)]
    public class QuestMarkerResource : Resource
    {
        [RTTI.Member(3, 0x20, "States")] public Ref<QuestMarkerStateSettings> Normal;
        [RTTI.Member(4, 0x28, "States")] public Ref<QuestMarkerStateSettings> Tracked;
        [RTTI.Member(7, 0x30, "Logic")] public FRGBAColor AreaColor;
        [RTTI.Member(6, 0x40, "Logic")] public Array<Ref<UITexture>> NumberIcons;
        [RTTI.Member(8, 0x50, "Logic")] public float IndicatedDistance;
    }

    [RTTI.Serializable(0x8807BDAEFA7F3A53, GameType.DS)]
    public class QuestMarkerStateSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<UITexture> Icon;
        [RTTI.Member(3, 0x28)] public Ref<UITexture> BreadcrumbIcon;
        [RTTI.Member(5, 0x30)] public Ref<LocationMarkerBreadcrumbingSettings> BreadcrumbSettings;
        [RTTI.Member(4, 0x38)] public Ref<UIMarkerStackGroupType> GroupType;
    }

    [RTTI.Serializable(0xFB3AF251819F7BA2, GameType.DS)]
    public class QuestMessageHandler : RTTIObject
    {
    }

    [RTTI.Serializable(0x906CFE9153A5321A, GameType.DS)]
    public class QuestObjective : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<LocalizedTextResource> StatusText;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<LocalizedTextResource> Popup;
        [RTTI.Member(7, 0x48, "Logic")] public bool Optional;
        [RTTI.Member(17, 0x49, "Visibility")] public bool ShowCompleted;
        [RTTI.Member(18, 0x4A, "Visibility")] public bool ShowFailed;
        [RTTI.Member(14, 0x4B, "Notification")] public bool Notify;
        [RTTI.Member(19, 0x4C, "Visibility")] public bool VisibleInTracker;
        [RTTI.Member(20, 0x4D, "Visibility")] public bool VisibleInLog;
        [RTTI.Member(10, 0x50, "Logic")] public EBehaviourOnHide BehaviourOnHide;
        [RTTI.Member(8, 0x58, "Logic")] public Ref<GraphProgramResource> ShowCondition;
        [RTTI.Member(9, 0x60, "Logic")] public EParentObjectiveVisibilityLogic ParentObjectiveLogic;
        [RTTI.Member(11, 0x68, "Logic")] public CPtr<QuestSection> QuestSection;
        [RTTI.Member(12, 0x80, "Logic")] public Array<FactMapping> ParserFacts;
        [RTTI.Member(15, 0x90, "Notification")] public bool UpdateOnlyWhenTracked;
    }

    [RTTI.Serializable(0xFCDCE020AD9DC3C, GameType.DS)]
    public class QuestObjectiveInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x8C26D94E566AEE61, GameType.DS)]
    public class QuestObjectiveSave : RTTIObject
    {
        [RTTI.Member(1, 0x10, "StateSaving", true)] public WString StatusText;
        [RTTI.Member(4, 0x18, "StateSaving", true)] public float StatusValue;
        [RTTI.Member(2, 0x20, "StateSaving", true)] public Array<GGUUID> UUIDs;
        [RTTI.Member(3, 0x30, "StateSaving", true)] public Array<int> Values;
        [RTTI.Member(5, 0x40, "StateSaving", true)] public int TimeStamp;
    }

    [RTTI.Serializable(0x2864464ECF9BCFA, GameType.DS)]
    public class QuestProgressedQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<UUIDRef<QuestSection>> QuestSections;
        [RTTI.Member(4, 0x30, "Logic")] public EQuestSectionDependencyType DependencyType;
    }

    [RTTI.Serializable(0x51F24E6520B828B6, GameType.DS)]
    public class QuestProgressedQuestTriggerInstance : QuestStateQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x57E4E2A7BFBD411F, GameType.DS)]
    public class QuestResource : Resource
    {
        [RTTI.Member(13, 0x20, "Logic")] public Array<Ref<QuestDebugInitializer>> DebugInitializers;
        [RTTI.Member(20, 0x30, "Versioning")] public Ref<GraphProgramResource> PatchCondition;
        [RTTI.Member(19, 0x38, "Versioning")] public Ref<GraphProgramResource> PatchProgram;
        [RTTI.Member(16, 0x40, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(3, 0x50, "Story")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(4, 0x58, "Story")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<QuestType> QuestType;
        [RTTI.Member(5, 0x70, "Story")] public Array<Ref<QuestSection>> StartSections;
        [RTTI.Member(6, 0x80, "Story")] public Ref<UITexture> IconTexture;
        [RTTI.Member(9, 0x88, "Logic")] public bool InitiallyAvailable;
        [RTTI.Member(10, 0x90, "Logic")] public Array<Ref<QuestCategory>> Categories;
        [RTTI.Member(11, 0xA0, "Logic")] public Ref<EnumFact> QuestStateFact;
        [RTTI.Member(12, 0xA8, "Logic")] public Ref<IntegerFact> RepeatCounterFact;
        [RTTI.Member(18, 0xB0, "Versioning")] public int Version;
        [RTTI.Member(15, 0xB4, "Logic")] public bool IsCountedForGameCompletion;
        [RTTI.Member(14, 0xB8, "Logic")] public int Level;
    }

    [RTTI.Serializable(0xF3E95C2E5B6B171F, GameType.DS)]
    public class QuestResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7AF04C59DBDCABDA, GameType.DS)]
    public class QuestReward : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<QuestRewardSet> RewardSet;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<GraphProgramResource> ConditionGraph;
        [RTTI.Member(5, 0x30, "Logic")] public bool Revealed;
    }

    [RTTI.Serializable(0x86803D158D333D06, GameType.DS)]
    public class QuestRewardSet : Resource
    {
        [RTTI.Member(5, 0x20, "Rewards")] public Ref<PlayerNotificationResource> Rewards_Notification;
        [RTTI.Member(6, 0x28, "Rewards")] public Ref<PlayerNotificationPriority> Rewards_Priority;
        [RTTI.Member(8, 0x30, "Celebration")] public Ref<PlayerNotificationResource> Celebration_Notification;
        [RTTI.Member(9, 0x38, "Celebration")] public Ref<PlayerNotificationPriority> Celebration_Priority;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<LocalizedTextResource> SetName;
    }

    [RTTI.Serializable(0xA7A373F199E63422, GameType.DS)]
    public class QuestSection : Resource
    {
        [RTTI.Member(3, 0x20, "QuestFlow")] public Ref<QuestTrigger> Trigger;
        [RTTI.Member(7, 0x28, "QuestFlow")] public Array<Ref<QuestSection>> NextSections;
        [RTTI.Member(8, 0x38, "QuestFlow")] public Array<CPtr<QuestSection>> BlockSections;
        [RTTI.Member(9, 0x48, "QuestFlow")] public Array<Ref<QuestSection>> SubSections;
        [RTTI.Member(20, 0x58, "Logic")] public EQuestSectionCompletionType CompleteLogic;
        [RTTI.Member(21, 0x5C, "Logic")] public EQuestSectionCompletionType BlockLogic;
        [RTTI.Member(23, 0x60, "Logic")] public EQuestSectionType SectionType;
        [RTTI.Member(4, 0x68, "QuestFlow")] public Ref<GraphProgramResource> ActivateCondition;
        [RTTI.Member(13, 0x70, "Logic")] public Ref<GraphProgramResource> OnActivateExecute;
        [RTTI.Member(5, 0x78, "QuestFlow")] public Ref<GraphProgramResource> CompleteCondition;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<GraphProgramResource> OnCompleteExecute;
        [RTTI.Member(6, 0x88, "QuestFlow")] public Ref<GraphProgramResource> BlockCondition;
        [RTTI.Member(15, 0x90, "Logic")] public Ref<GraphProgramResource> OnBlockExecute;
        [RTTI.Member(24, 0x98, "Logic")] public Array<Ref<DropModResource>> DropModifiers;
        [RTTI.Member(25, 0xA8, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(22, 0xB0, "Logic")] public EActivationType ActivationLogic;
        [RTTI.Member(27, 0xB8, "Data")] public Array<Ref<QuestReward>> Rewards;
        [RTTI.Member(30, 0xC8, "Goals")] public Array<Ref<QuestObjective>> Objectives;
        [RTTI.Member(19, 0xD8, "Logic")] public Ref<EnumFact> QuestSectionStateFact;
        [RTTI.Member(28, 0xE0, "Data")] public CPtr<QuestResource> Quest;
        [RTTI.Member(16, 0xE8, "Logic")] public bool SaveOnComplete;
        [RTTI.Member(17, 0xE9, "Logic")] public bool ReuseLastSaveLocation;
        [RTTI.Member(18, 0xF0, "Logic")] public Ref<AIMarker> RespawnMarker;
        [RTTI.Member(10, 0xF8, "QuestFlow")] public bool Repeat;
        [RTTI.Member(11, 0xF9, "QuestFlow")] public bool Required;
    }

    [RTTI.Serializable(0x3F3345395ECBDE3D, GameType.DS)]
    public class QuestSectionInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x85E7DE0D8178BE5C, GameType.DS)]
    public class QuestSectionUpdateQueue : RTTIObject
    {
        [RTTI.Member(1, 0x50, "StateSave", true)] public Array<GGUUID> AddedQuestSections_Completion;
        [RTTI.Member(2, 0x60, "StateSave", true)] public Array<GGUUID> AddedQuestSections_Block;
    }

    [RTTI.Serializable(0x9DB69B6D47199163, GameType.DS)]
    public class QuestStateQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x824CFCB3ED1BC1AF, GameType.DS)]
    public class QuestSystemResource : Resource
    {
        [RTTI.Member(3, 0x28, "Logic")] public Ref<EnumFactEntry> QuestUnavailableEnumValue;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<EnumFactEntry> QuestAvailableEnumValue;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<EnumFactEntry> QuestInProgressEnumValue;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<EnumFactEntry> QuestSucceededEnumValue;
        [RTTI.Member(7, 0x48, "Logic")] public Ref<EnumFactEntry> QuestFailedEnumValue;
        [RTTI.Member(8, 0x50, "Logic")] public Ref<EnumFactEntry> QuestSectionUnavailableEnumValue;
        [RTTI.Member(9, 0x58, "Logic")] public Ref<EnumFactEntry> QuestSectionAvailableEnumValue;
        [RTTI.Member(10, 0x60, "Logic")] public Ref<EnumFactEntry> QuestSectionCompletedEnumValue;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<EnumFactEntry> QuestSectionBlockedEnumValue;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<LocalizedTextResource> MoneyRewardText;
        [RTTI.Member(13, 0x78, "Logic")] public Ref<LocalizedTextResource> XpRewardText;
        [RTTI.Member(14, 0x80, "Logic")] public Ref<LocalizedTextResource> PerkPointRewardText;
        [RTTI.Member(15, 0x88, "Logic")] public Ref<LocalizedTextResource> RewardText;
        [RTTI.Member(23, 0x90, "Display")] public Ref<UITexture> UIMoneyRewardIcon;
        [RTTI.Member(24, 0x98, "Display")] public Ref<UITexture> UIXpRewardIcon;
        [RTTI.Member(25, 0xA0, "Display")] public Ref<UITexture> UIPerkPointRewardIcon;
        [RTTI.Member(16, 0xA8, "Logic")] public Ref<QuestGenerationSettings> QuestGenerationSettings;
        [RTTI.Member(26, 0xB0, "Display")] public Ref<PlayerNotificationResource> PopupNotification;
        [RTTI.Member(17, 0xB8, "Logic")] public Array<Ref<QuestCategory>> QuestCategories;
        [RTTI.Member(28, 0xC8, "ActivityRewards")] public Ref<EnumFact> ActivityRewardFact;
        [RTTI.Member(29, 0xD0, "ActivityRewards")] public Ref<EnumFactEntry> ActivityGoldenMedal;
        [RTTI.Member(30, 0xD8, "ActivityRewards")] public Ref<EnumFactEntry> ActivitySilverMedal;
        [RTTI.Member(31, 0xE0, "ActivityRewards")] public Ref<EnumFactEntry> ActivityBronzeMedal;
        [RTTI.Member(32, 0xE8, "ActivityRewards")] public Ref<EnumFactEntry> ActivityNoMedal;
        [RTTI.Member(19, 0xF0, "Logic")] public Ref<EnumFact> MainQuestProgressFact;
        [RTTI.Member(20, 0xF8, "Logic")] public Ref<QuestCategory> MainQuestCategory;
        [RTTI.Member(34, 0x100, "PerkSetRewards")] public Ref<BooleanFact> PerkSetFact;
        [RTTI.Member(18, 0x108, "Logic")] public Array<Ref<QuestType>> TrackingPriorityTypes;
        [RTTI.Member(21, 0x118, "Logic")] public Array<Ref<QuestChainResource>> QuestChains;
        [RTTI.Member(44, 0x128, "MarkerSettings")] public Ref<LocalizedTextResource> NewQuestMarkerText;
        [RTTI.Member(36, 0x130, "MarkerSettings")] public Ref<UIMarkerTag> MarkerType;
        [RTTI.Member(37, 0x138, "MarkerSettings")] public Ref<UIMarkerTag> IconBinding;
        [RTTI.Member(38, 0x140, "MarkerSettings")] public Ref<UIMarkerTag> IconColorBinding;
        [RTTI.Member(39, 0x148, "MarkerSettings")] public Ref<UIMarkerTag> BreadcrumbIconBinding;
        [RTTI.Member(40, 0x150, "MarkerSettings")] public Ref<UIMarkerTag> NumberIconBinding;
        [RTTI.Member(41, 0x158, "MarkerSettings")] public Ref<UIMarkerTag> TitleTextBinding;
        [RTTI.Member(42, 0x160, "MarkerSettings")] public Ref<UIMarkerTag> DescriptionTextBinding;
        [RTTI.Member(43, 0x168, "MarkerSettings")] public float MarkerIndicatedOpacity;
        [RTTI.Member(46, 0x170, "ToastMessages")] public Ref<LocalizedTextResource> AddedNewJobQuest;
        [RTTI.Member(47, 0x178, "ToastMessages")] public Ref<LocalizedTextResource> QuestTracked;
        [RTTI.Member(48, 0x180, "ToastMessages")] public Ref<LocalizedTextResource> QuestNotTracked;
    }

    [RTTI.Serializable(0x4B5131E67EFB7C6B, GameType.DS)]
    public class QuestSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE043725B79E55C11, GameType.DS)]
    public class QuestTrackingPathObjective : QuestObjective
    {
        [RTTI.Member(22, 0x98, "Logic")] public GGUUID TrackingPathUUID;
        [RTTI.Member(23, 0xA8, "Logic")] public Array<GGUUID> NodeUUIDs;
        [RTTI.Member(24, 0xB8, "Logic")] public float AreaRadius;
        [RTTI.Member(25, 0xBC, "Logic")] public float AreaHeight;
        [RTTI.Member(26, 0xC0, "Logic")] public float AreaBuffer;
        [RTTI.Member(27, 0xC4, "Logic")] public float MarkerOffset;
    }

    [RTTI.Serializable(0x44B94B350181807A, GameType.DS)]
    public class QuestTrackingPathObjectiveInstance : QuestObjectiveInstance
    {
    }

    [RTTI.Serializable(0x6E1A1F6F31E91340, GameType.DS)]
    public class QuestTrackingQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool Tracked;
    }

    [RTTI.Serializable(0xB12E9BB5C049E5F4, GameType.DS)]
    public class QuestTrackingQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x76D1AEE66EBE1DA9, GameType.DS)]
    public class QuestTrackingRepresentationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9F04B6EDF61697DD, GameType.DS)]
    public class QuestTrackingRepresentationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EDeviceFunction Function;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<MenuPage> QuestMenu;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Ref<PlayerNotificationResource>> QuestStartedNotifications;
        [RTTI.Member(6, 0x40, "Logic")] public Array<Ref<PlayerNotificationResource>> QuestEndedNotifications;
    }

    [RTTI.Serializable(0x527923D4C75E2DD4, GameType.DS)]
    public class QuestTrigger : Resource
    {
    }

    [RTTI.Serializable(0x91BEA680A6EA9865, GameType.DS)]
    public class QuestTriggerInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0xB9BE091635851A1E, GameType.DS)]
    public class QuestType : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool VisibleInMenu;
        [RTTI.Member(11, 0x21, "Repeating")] public bool Repeatable;
        [RTTI.Member(4, 0x22, "Logic")] public bool Unique;
        [RTTI.Member(8, 0x23, "Logic")] public bool Tracked;
        [RTTI.Member(30, 0x24, "Display")] public bool MarkItemsInMenu;
        [RTTI.Member(12, 0x28, "Repeating")] public Array<int> RepeatCooldown;
        [RTTI.Member(14, 0x38, "Notifications")] public Ref<PlayerNotificationResource> ActiveStartedNotification;
        [RTTI.Member(15, 0x40, "Notifications")] public Ref<PlayerNotificationResource> InactiveStartedNotification;
        [RTTI.Member(16, 0x48, "Notifications")] public Ref<PlayerNotificationResource> CompletedNotification;
        [RTTI.Member(17, 0x50, "Notifications")] public Ref<PlayerNotificationResource> FailedNotification;
        [RTTI.Member(18, 0x58, "Notifications")] public Ref<PlayerNotificationResource> ActiveProgressedNotification;
        [RTTI.Member(19, 0x60, "Notifications")] public Ref<PlayerNotificationResource> InactiveProgressedNotification;
        [RTTI.Member(20, 0x68, "Notifications")] public Ref<PlayerNotificationResource> LeavingAreaNotification;
        [RTTI.Member(22, 0x70, "Notifications")] public Ref<PlayerNotificationResource> DefaultRewardNotification;
        [RTTI.Member(23, 0x78, "Notifications")] public Ref<PlayerNotificationPriority> FinishedNotificationPriority;
        [RTTI.Member(24, 0x80, "Notifications")] public Ref<PlayerNotificationPriority> ProgressedNotificationPriority;
        [RTTI.Member(25, 0x88, "Notifications")] public Ref<PlayerNotificationPriority> StartedNotificationPriority;
        [RTTI.Member(26, 0x90, "Notifications")] public Ref<PlayerNotificationPriority> ObjectivePopupNotificationPriority;
        [RTTI.Member(27, 0x98, "Notifications")] public Ref<PlayerNotificationPriority> RewardNotificationPriority;
        [RTTI.Member(28, 0xA0, "Notifications")] public Ref<PlayerNotificationPriority> AreaNotificationPriority;
        [RTTI.Member(5, 0xA8, "Logic")] public Ref<QuestMarkerResource> StartMarker;
        [RTTI.Member(6, 0xB0, "Logic")] public Ref<QuestMarkerResource> ProgressMarker;
        [RTTI.Member(7, 0xB8, "Logic")] public Ref<QuestMarkerResource> EndMarker;
        [RTTI.Member(9, 0xD0, "Logic")] public bool BoundToArea;
        [RTTI.Member(21, 0xD4, "Notifications")] public float LeavingAreaSize;
    }

    [RTTI.Serializable(0xF2CB0B5D732194C2, GameType.DS)]
    public class QuestsViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x624A0962DBA01C5, GameType.DS)]
    public class QuickDrawComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1EB2737D6C97505A, GameType.DS)]
    public class QuickDrawComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<String> AllowedAnimationTagNames;
        [RTTI.Member(4, 0x30, "Logic")] public float ChargeRateModifier;
        [RTTI.Member(5, 0x34, "Logic")] public float TargetingConeAngle;
        [RTTI.Member(6, 0x38, "Logic")] public float TargetingRange;
    }

    [RTTI.Serializable(0x1911D5F288D41444, GameType.DS)]
    public class RGBAColor
    {
        [RTTI.Member(2, 0x0)] public uint8 B;
        [RTTI.Member(1, 0x1)] public uint8 G;
        [RTTI.Member(0, 0x2)] public uint8 R;
        [RTTI.Member(3, 0x3)] public uint8 A;
    }

    [RTTI.Serializable(0xBA75946B4D0BB48C, GameType.DS)]
    public class RGBAColorRev
    {
        [RTTI.Member(0, 0x0)] public uint8 R;
        [RTTI.Member(1, 0x1)] public uint8 G;
        [RTTI.Member(2, 0x2)] public uint8 B;
        [RTTI.Member(3, 0x3)] public uint8 A;
    }

    [RTTI.Serializable(0xE5BDA84E976BF518, GameType.DS)]
    public class RTTIBool : RTTIPrimitive
    {
        [RTTI.Member(2, 0x20)] public bool Value;
    }

    [RTTI.Serializable(0x4AC7DEE5316D428D, GameType.DS)]
    public class RTTIDouble : RTTIPrimitive
    {
        [RTTI.Member(2, 0x20)] public double Value;
    }

    [RTTI.Serializable(0x986E759413DCA6B, GameType.DS)]
    public class RTTIFloat : RTTIPrimitive
    {
        [RTTI.Member(2, 0x20)] public float Value;
    }

    [RTTI.Serializable(0xB1CE5CE83F7B9C18, GameType.DS)]
    public class RTTIHandle
    {
        [RTTI.Member(0, 0x0, true)] public uint64 StaticTypePtr;
        [RTTI.Member(1, 0x8)] public String StaticTypeName;
        [RTTI.Member(2, 0x10)] public Ref<VirtualRTTIResource> VirtualResource;
    }

    [RTTI.Serializable(0x3C8904521B49F2C6, GameType.DS)]
    public class RTTIHandleObject : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public RTTIHandle Handle;
    }

    [RTTI.Serializable(0x651E31543E869B9D, GameType.DS)]
    public class RTTIHandleObjectSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x94B37EB65446259F, GameType.DS)]
    public class RTTIInt : RTTIPrimitive
    {
        [RTTI.Member(2, 0x20)] public int Value;
    }

    [RTTI.Serializable(0x34BF59ED999489CC, GameType.DS)]
    public class RTTIInt64 : RTTIPrimitive
    {
        [RTTI.Member(2, 0x20)] public int64 Value;
    }

    [RTTI.Serializable(0x69F066DDC22139DB, GameType.DS)]
    public class RTTIObject
    {
    }

    [RTTI.Serializable(0xA4BEC94B2F2D117B, GameType.DS)]
    public class RTTIObjectTweak : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int NotBeforeBuildNumber;
        [RTTI.Member(3, 0x24)] public int NotAfterBuildNumber;
        [RTTI.Member(4, 0x28)] public Array<Ref<RTTIObjectTweakValue>> Values;
    }

    [RTTI.Serializable(0xE008B3280E93BBFD, GameType.DS)]
    public class RTTIObjectTweakValue : CoreObject
    {
        [RTTI.Member(2, 0x20)] public UUIDRef<RTTIRefObject> RootObject;
        [RTTI.Member(3, 0x30)] public String RootUUID;
        [RTTI.Member(4, 0x38)] public String Path;
        [RTTI.Member(5, 0x40)] public String Value;
    }

    [RTTI.Serializable(0x81545079DF62B967, GameType.DS)]
    public class RTTIPrimitive : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xAA11412EDB60ECBC, GameType.DS)]
    public class RTTIRefObject : RTTIObject
    {
        [RTTI.Member(1, 0x8, "General")] public GGUUID ObjectUUID;
    }

    [RTTI.Serializable(0xB79B49EADD3AF8FB, GameType.DS)]
    public class RTTIRefObjectSet
    {
        [RTTI.Member(1, 0x18, "General")] public Array<Ref<RTTIRefObject>> Objects;
    }

    [RTTI.Serializable(0xCE908F8E7AF542D6, GameType.DS)]
    public class RTTIString : RTTIPrimitive
    {
        [RTTI.Member(2, 0x20)] public String Value;
    }

    [RTTI.Serializable(0x91397519A752C8BC, GameType.DS)]
    public class RadialBlurRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> RadialBlurShader;
    }

    [RTTI.Serializable(0x8C207577E84C2530, GameType.DS)]
    public class RadialSectorTag : VisualTag
    {
    }

    [RTTI.Serializable(0xB5461AEB929541CA, GameType.DS)]
    public class RadialSectorWidget : Widget
    {
    }

    [RTTI.Serializable(0x644A68FC2094A24D, GameType.DS)]
    public class RadialWheelTag : VisualTag
    {
    }

    [RTTI.Serializable(0xA2C56D3B08F12610, GameType.DS)]
    public class RadialWheelWidget : Widget
    {
    }

    [RTTI.Serializable(0x7C39D263E7155452, GameType.DS)]
    public class RagdollComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCC1DB249B3981988, GameType.DS)]
    public class RagdollComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PhysicsRagdollResource> RagdollResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<PhysicsSkeleton> AnimatedPhysicsSkeleton;
        [RTTI.Member(6, 0x48, "Logic")] public float StressThreshold;
        [RTTI.Member(8, 0x50, "Attach")] public Array<String> AttachableHelpers;
    }

    [RTTI.Serializable(0xD86CFE9B34F3BC43, GameType.DS)]
    public class RagdollComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5A737222570FCAE8, GameType.DS)]
    public class RagdollJoint
    {
        [RTTI.Member(0, 0x90)] public float ConeAngle;
        [RTTI.Member(1, 0x94)] public float PlaneMinAngle;
        [RTTI.Member(2, 0x98)] public float PlaneMaxAngle;
        [RTTI.Member(3, 0x9C)] public float TwistMinAngle;
        [RTTI.Member(4, 0xA0)] public float TwistMaxAngle;
        [RTTI.Member(5, 0xA4)] public float Stiffness;
        [RTTI.Member(7, 0xA8)] public float RecoverFactor;
        [RTTI.Member(6, 0xAC)] public float Damping;
        [RTTI.Member(8, 0xB0)] public float RecoverSpeed;
        [RTTI.Member(9, 0xB4)] public float Response;
        [RTTI.Member(10, 0xB8)] public float MaxForce;
    }

    [RTTI.Serializable(0x474840FE6BC8BF3C, GameType.DS)]
    public class RagdollMover : Mover
    {
    }

    [RTTI.Serializable(0x9C78392FECB3613F, GameType.DS)]
    public class RagdollMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x7918330FD2414E05, GameType.DS)]
    public class RagdollPart
    {
        [RTTI.Member(0, 0x94)] public float Radius;
        [RTTI.Member(1, 0x98)] public float Length;
    }

    [RTTI.Serializable(0xDA6650AC7210DD9F, GameType.DS)]
    public class RainbowAndSundogSettings
    {
        [RTTI.Member(0, 0x0)] public float RainbowIntensity;
        [RTTI.Member(1, 0x4)] public float SundogIntensity;
    }

    [RTTI.Serializable(0x277B0D9D5D35E3A, GameType.DS)]
    public class RainbowAndSundogSettingsResource : CoreObject
    {
        [RTTI.Member(2, 0x20)] public RainbowAndSundogSettings Settings;
    }

    [RTTI.Serializable(0xA9F1589FBD2C9161, GameType.DS)]
    public class RandomAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Array<CPtr<EntityAction>> ActionsToChooseFrom;
    }

    [RTTI.Serializable(0x7D581E2FCE24F689, GameType.DS)]
    public class RandomMatrixListResource : RandomMatrixResourceBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Mat44> Matrices;
    }

    [RTTI.Serializable(0x89E1EE0D57C3C91D, GameType.DS)]
    public class RandomMatrixResource : RandomMatrixResourceBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<RandomVectorResource> Position;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<RandomVectorResource> Orientation;
    }

    [RTTI.Serializable(0x7E4A680F6C9A67E2, GameType.DS)]
    public class RandomMatrixResourceBase : Resource
    {
    }

    [RTTI.Serializable(0xAEF3E614DA29513F, GameType.DS)]
    public class RandomSimpleSoundResource : SimpleSoundResource
    {
        [RTTI.Member(45, 0x110, "RandomVariations")] public Array<Ref<WaveResource>> Waves;
    }

    [RTTI.Serializable(0x8D98B81FC41C43A0, GameType.DS)]
    public class RandomVectorResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Vec3 Min;
        [RTTI.Member(4, 0x30, "Logic")] public Vec3 Max;
    }

    [RTTI.Serializable(0x4707D97FD54BE9C7, GameType.DS)]
    public class RangeFinderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6CA165AA4BA98560, GameType.DS)]
    public class RangeFinderComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float MaxRange;
    }

    [RTTI.Serializable(0x1AFCE32566314CA6, GameType.DS)]
    public class RangedWeaponMode : WeaponMode
    {
    }

    [RTTI.Serializable(0xF752EFB1A41F3618, GameType.DS)]
    public class RangedWeaponModeRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x47C986A860593D27, GameType.DS)]
    public class RangedWeaponModeResource : WeaponModeResource
    {
        [RTTI.Member(9, 0x50, "Logic")] public Ref<AmmoEjectorResource> EjectorResource;
        [RTTI.Member(10, 0x58, "Logic")] public Ref<MagazineResource> MagazineResource;
        [RTTI.Member(11, 0x60, "Logic")] public float AimRaycastLength;
        [RTTI.Member(12, 0x64, "Logic")] public int AnimationId;
        [RTTI.Member(13, 0x68, "Logic")] public bool IsSilenced;
        [RTTI.Member(14, 0x70, "Logic")] public CPtr<EntityAction> SelectedAction;
        [RTTI.Member(15, 0x78, "Logic")] public CPtr<EntityAction> DeselectedAction;
        [RTTI.Member(31, 0x80, "EjectSettings")] public Array<Ref<EjectLocationResource>> EjectLocations;
        [RTTI.Member(16, 0x90, "Logic")] public Ref<WeaponAccuracyResource> AccuracyResource;
        [RTTI.Member(17, 0x98, "Logic")] public Ref<WeaponZoomResource> ZoomResource;
        [RTTI.Member(18, 0xA0, "Logic")] public bool RequiresZoomModeToFire;
        [RTTI.Member(19, 0xA1, "Logic")] public bool AllowZoomSwitchDuringFire;
        [RTTI.Member(20, 0xA8, "Logic")] public Ref<WeaponChargeResource> ChargeResource;
        [RTTI.Member(21, 0xB0, "Logic")] public bool CanChargeWhileOverheated;
        [RTTI.Member(22, 0xB8, "Logic")] public Ref<WeaponAmmoChargerResource> AmmoChargerResource;
        [RTTI.Member(23, 0xC0, "Logic")] public Ref<WeaponSpinResource> SpinResource;
        [RTTI.Member(24, 0xC8, "Logic")] public Ref<WeaponOverheatResource> OverheatResource;
        [RTTI.Member(25, 0xD0, "Logic")] public Ref<WeaponCookResource> CookResource;
        [RTTI.Member(26, 0xD8, "Logic")] public Ref<WeaponAmmoTetherResource> AmmoTetherResource;
        [RTTI.Member(27, 0xE0, "Logic")] public Array<Ref<WeaponPartResource>> AdditionalParts;
        [RTTI.Member(37, 0xF0, "Aim")] public String AimFromHelper;
        [RTTI.Member(38, 0xF8, "Aim")] public float VerticalAimOffsetAngle;
        [RTTI.Member(28, 0xFC, "Logic")] public EWeaponStanceRaiseType StanceRaiseType;
        [RTTI.Member(29, 0x100, "Logic")] public float RaiseTimeout;
        [RTTI.Member(33, 0x104, "AI")] public EWeaponStanceRaiseType AIStanceRaiseType;
        [RTTI.Member(34, 0x108, "AI")] public float AIRaiseTimeout;
        [RTTI.Member(35, 0x10C, "AI")] public EAIBodyAlignmentMode BodyAlignmentMode;
    }

    [RTTI.Serializable(0x687FDE7A24377B32, GameType.DS)]
    public class RangedWeaponModeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x9C5BB14B79348789, GameType.DS)]
    public class RangedWeaponModeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAFF8338F8FE7CB62, GameType.DS)]
    public class ReactOnImpactComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA6517B846AB984C1, GameType.DS)]
    public class ReactOnImpactComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float MinVelocity;
        [RTTI.Member(4, 0x24, "Logic")] public bool RemoveAfterImpact;
        [RTTI.Member(5, 0x25, "Logic")] public bool IgnoreCollisionWithInstigatorEntity;
        [RTTI.Member(7, 0x28, "Representation")] public Ref<MaterialTypeResource> MaterialTypeResource;
    }

    [RTTI.Serializable(0x361C252613EFF5EC, GameType.DS)]
    public class RecordAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x429286FD87C78F11, GameType.DS)]
    public class ReduceIncomingAIDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x56C840C8E0C8157B, GameType.DS)]
    public class ReduceIncomingAIDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CurveResource> DamageMultiplierOverHealth;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CurveResource> SeverityMultiplierOverHealth;
        [RTTI.Member(5, 0x30, "Logic")] public bool DenyKillingBlow;
        [RTTI.Member(6, 0x38, "Logic")] public Array<Ref<AIFaction>> ExcludeFactions;
        [RTTI.Member(7, 0x48, "Logic")] public Array<Ref<AIFaction>> IncludeFactions;
    }

    [RTTI.Serializable(0xADF0C47954FEA4F5, GameType.DS)]
    public class ReferencedSequenceEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<SequenceResource> ReferencedSequenceResource;
        [RTTI.Member(13, 0x48, "Logic")] public Array<ExposedEventMapping> ExposedEventMapping;
        [RTTI.Member(14, 0x58, "Logic")] public Array<Ref<EventResource>> DisabledEventResources;
        [RTTI.Member(15, 0x68, "Logic")] public Array<LinkToEventInReferencedSequence> LinksToEventsInReferencedSequence;
        [RTTI.Member(16, 0x78, "Logic")] public float CachedClipDuration;
    }

    [RTTI.Serializable(0x338924525F0F24F3, GameType.DS)]
    public class ReflectionRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> RaymarchShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> FilterReflectionBlurShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> ResolveGlossyShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> TemporalFilteringShader;
    }

    [RTTI.Serializable(0x88D2B52BECDCE690, GameType.DS)]
    public class ReflectionRendererSystemAssetsOld : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> ReflectionRaytraceCompute;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> ReflectionRaytraceComputeDebug;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> ReflectionDownsample;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> ReflectionGlossFilter;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> ReflectionGloss;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> ReflectionTemporalDilate;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> ReflectionPrevSceneCopy;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> ReflectionMaskGenerate;
    }

    [RTTI.Serializable(0xD40C19AE1D16D98E, GameType.DS)]
    public class RegularSkinnedMeshResourceBase : SkinnedMeshResource
    {
        [RTTI.Member(14, 0x0, "Lighting", true)] public EViewLayer ViewLayer;
        [RTTI.Member(15, 0x0, "Lighting", true)] public EShadowCull ShadowCullMode;
        [RTTI.Member(12, 0x0, "Lighting", true)] public bool CastDynamicShadows;
        [RTTI.Member(11, 0x0, "Lighting", true)] public bool CastShadows;
        [RTTI.Member(13, 0x0, "Lighting", true)] public EDrawPartType RenderType;
        [RTTI.Member(16, 0x0, "Lighting", true)] public bool VoxelizeBaking;
        [RTTI.Member(10, 0x90, "Lighting")] public DrawFlags DrawFlags;
        [RTTI.Member(18, 0x94, "Skinning")] public ESkinningDeformerType DeformerType;
        [RTTI.Member(19, 0x98, "Skinning")] public Ref<SkinnedMeshIndexedJointBindings> SkinnedMeshJointBindings;
        [RTTI.Member(20, 0xA0, "Skinning")] public Ref<SkinnedMeshBoneBoundingBoxes> SkinnedMeshBoneBoundingBoxes;
    }

    [RTTI.Serializable(0x8EB29E71F97E460F, GameType.DS)]
    public class RegularSkinnedMeshResourceSkinInfo : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<PrimitiveSkinInfo> Parts;
        [RTTI.Member(3, 0x30)] public Array<BlendTargetDeformation> BlendTargetDeforms;
    }

    [RTTI.Serializable(0x8857A93952E35468, GameType.DS)]
    public class RelativeGroupFader
    {
        [RTTI.Member(0, 0x0)] public Ref<SoundGroup> Group;
        [RTTI.Member(1, 0x8)] public int Volume;
        [RTTI.Member(2, 0xC)] public int WetVolume;
        [RTTI.Member(3, 0x10)] public float Pitch;
        [RTTI.Member(4, 0x14)] public float Occlusion;
        [RTTI.Member(5, 0x18)] public bool IsDominant;
        [RTTI.Member(6, 0x19)] public bool IsLocked;
    }

    [RTTI.Serializable(0xB258063AC79F5144, GameType.DS)]
    public class RelativePositionLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x4C5622EF6421A989, GameType.DS)]
    public class RelativePositionLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> ParentLocatorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0x3EE19D099C9F7137, GameType.DS)]
    public class RelativeSoundMixResource : Resource
    {
        [RTTI.Member(4, 0x20, "Mix")] public Array<RelativeGroupFader> Faders;
        [RTTI.Member(3, 0x30, "Mix")] public bool IsSuperDominant;
    }

    [RTTI.Serializable(0xD91DDF47F91C6003, GameType.DS)]
    public class ReliableMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String UUID;
        [RTTI.Member(3, 0x28)] public Ref<RTTIRefObject> Message;
    }

    [RTTI.Serializable(0x185E6B3A05E85444, GameType.DS)]
    public class ReloadDurationSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float StartDuration;
        [RTTI.Member(4, 0x24, "Logic")] public float FirstCycleDuration;
        [RTTI.Member(5, 0x28, "Logic")] public float CycleDuration;
        [RTTI.Member(6, 0x2C, "Logic")] public float FinishDuration;
    }

    [RTTI.Serializable(0xE4DFEDB38B476951, GameType.DS)]
    public class ReloadDurationsAnimationReference : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<ReloadDurationSettings> ReloadDurationsNormal;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<ReloadDurationSettings> ReloadDurationsRaised;
    }

    [RTTI.Serializable(0xF9F5028E25D10152, GameType.DS)]
    public class RememberFactAction : MemoryFactActionBase
    {
        [RTTI.Member(6, 0x30, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0x6B4AE60F459C9934, GameType.DS)]
    public class RemoveActorEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x117298956329944B, GameType.DS)]
    public class RemoveActorEventResource : EventResource
    {
        [RTTI.Member(6, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0xEC9FCD2C869DA4C2, GameType.DS)]
    public class RemoveEntityAction : EntityAction
    {
    }

    [RTTI.Serializable(0x2DE17C5617FC348A, GameType.DS)]
    public class RemoveInventoryItemAction : EntityAction
    {
        [RTTI.Member(5, 0x28, "Logic")] public bool DropPickUp;
        [RTTI.Member(4, 0x30, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(6, 0x38, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0xD52B74F473CB8168, GameType.DS)]
    public class RenderDataStreamingHintData : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Settings")] public ERenderDataHintDataType DataType;
        [RTTI.Member(4, 0x28, "Settings")] public Array<RenderDataStreamingHintObject> HintObjects;
        [RTTI.Member(5, 0x38, "Settings")] public Array<RenderDataStreamingHintDataEntry> Entries;
    }

    [RTTI.Serializable(0xF3790500D9856B25, GameType.DS)]
    public class RenderDataStreamingHintDataArea : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Vec3> SampleLocations;
        [RTTI.Member(3, 0x30)] public WorldTransform Orientation;
        [RTTI.Member(4, 0x70)] public Shape2DExtrusion InputDataArea;
        [RTTI.Member(5, 0xB0)] public int MaxSampleLocations;
        [RTTI.Member(6, 0xC0)] public BoundingBox3 FinalDataArea;
        [RTTI.Member(7, 0xE0)] public Ref<RenderDataStreamingHintData> HintData;
        [RTTI.Member(8, 0xE8)] public Array<RenderDataStreamingHintDataKdtreeNode> KdTreeNodes;
    }

    [RTTI.Serializable(0x208BE1121C423C06, GameType.DS)]
    public class RenderDataStreamingHintDataAreaResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "Settings")] public String Name;
        [RTTI.Member(6, 0x30, "Settings")] public String BinaryPath;
        [RTTI.Member(7, 0x38, "Settings")] public Array<Ref<RenderDataStreamingHintDataArea>> Areas;
    }

    [RTTI.Serializable(0x6F9113693B3D3036, GameType.DS)]
    public class RenderDataStreamingHintDataEntry
    {
        [RTTI.Member(0, 0x0)] public Vec3 Location;
        [RTTI.Member(1, 0x10)] public uint32 StreamingMemorySize;
        [RTTI.Member(2, 0x18)] public uint32 ObjectCount;
        [RTTI.Member(3, 0x20)] public Array<uint16> LODData;
    }

    [RTTI.Serializable(0xDEFC089177439132, GameType.DS)]
    public class RenderDataStreamingHintDataKdtreeNode
    {
        [RTTI.Member(0, 0x0)] public Vec3Pack Position;
        [RTTI.Member(1, 0xC)] public int32 PackedData;
    }

    [RTTI.Serializable(0x23E955DC696576C6, GameType.DS)]
    public class RenderDataStreamingHintObject
    {
        [RTTI.Member(0, 0x0)] public MurmurHashValue DataHash;
    }

    [RTTI.Serializable(0xCB3C78DDF315006E, GameType.DS)]
    public class RenderDataStreamingSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> StreamingPriorityComputeShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> StreamingCheckActivationShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> StreamingPriorityAppMipComputeShader;
    }

    [RTTI.Serializable(0x7CB457841D78E306, GameType.DS)]
    public class RenderEffectInstance : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<RenderEffectResource> Resource;
        [RTTI.Member(4, 0x28, "General")] public CPtr<RenderTechniqueSet> TechniqueSet;
    }

    [RTTI.Serializable(0xDC6575D6CE542895, GameType.DS)]
    public class RenderEffectInstanceImp0 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xBC51616CC77CE23D, GameType.DS)]
    public class RenderEffectInstanceImp1 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x847453661286773F, GameType.DS)]
    public class RenderEffectInstanceImp10 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x481BDA2531F77AC6, GameType.DS)]
    public class RenderEffectInstanceImp11 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xE2D8F37B7920BAA, GameType.DS)]
    public class RenderEffectInstanceImp12 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x68EC5C6152A9FF9D, GameType.DS)]
    public class RenderEffectInstanceImp13 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xFF1661582DFF6798, GameType.DS)]
    public class RenderEffectInstanceImp14 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x310D0D5FCC2C09D7, GameType.DS)]
    public class RenderEffectInstanceImp15 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x28915B9B0BA7AE0D, GameType.DS)]
    public class RenderEffectInstanceImp16 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x9E3D87DD6F4CB14D, GameType.DS)]
    public class RenderEffectInstanceImp17 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x388DE7678217A733, GameType.DS)]
    public class RenderEffectInstanceImp18 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xFA66BD716101BE82, GameType.DS)]
    public class RenderEffectInstanceImp19 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x76FC55F64719E004, GameType.DS)]
    public class RenderEffectInstanceImp2 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xBBC366F5788D04C7, GameType.DS)]
    public class RenderEffectInstanceImp20 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x3264F8F2D8315FE1, GameType.DS)]
    public class RenderEffectInstanceImp21 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xE6764B25F43A5783, GameType.DS)]
    public class RenderEffectInstanceImp22 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x2C7192373E237FBB, GameType.DS)]
    public class RenderEffectInstanceImp23 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x5820B50370F81928, GameType.DS)]
    public class RenderEffectInstanceImp24 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x7B9F204074402190, GameType.DS)]
    public class RenderEffectInstanceImp25 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x2FA3C08738040C1E, GameType.DS)]
    public class RenderEffectInstanceImp26 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xF7EA59763D2F3C2E, GameType.DS)]
    public class RenderEffectInstanceImp27 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x4CDE3057E955CF4E, GameType.DS)]
    public class RenderEffectInstanceImp3 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x8AA92F49F98FAAEA, GameType.DS)]
    public class RenderEffectInstanceImp4 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x9BA78BA62666E791, GameType.DS)]
    public class RenderEffectInstanceImp5 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x4CB4EF3AC6362CD7, GameType.DS)]
    public class RenderEffectInstanceImp6 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x7F228FE2C8788E9C, GameType.DS)]
    public class RenderEffectInstanceImp7 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xD43AA3978506096F, GameType.DS)]
    public class RenderEffectInstanceImp8 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0x4AF82DF5ECD7D023, GameType.DS)]
    public class RenderEffectInstanceImp9 : RenderEffectInstance
    {
    }

    [RTTI.Serializable(0xE844B010BF3CFD73, GameType.DS)]
    public class RenderEffectResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        [RTTI.Member(4, 0x28, "General")] public Array<RenderTechniqueSet> TechniqueSets;
        [RTTI.Member(5, 0x38, "General")] public ESortMode SortMode;
        [RTTI.Member(6, 0x3C, "General")] public ESortOrder SortOrder;
        [RTTI.Member(7, 0x40, "General")] public ERenderEffectType EffectType;
        [RTTI.Member(8, 0x44, "General")] public bool MakeAccumulationBufferCopy;
        [RTTI.Member(9, 0x45, "General")] public bool ForwardIgonoreLocalIndirectLighting;
        [RTTI.Member(10, 0x4C, "General")] public EnvironmentInteractionTargets EnvironmentInteractionTargets;
    }

    [RTTI.Serializable(0xF754A0A8D7B26836, GameType.DS)]
    public class RenderEffectShaderOverrides
    {
        [RTTI.Member(0, 0x0)] public int PrimitiveIndex;
        [RTTI.Member(1, 0x8)] public Array<ShaderTextureBinding> ShaderTextureOverrides;
        [RTTI.Member(2, 0x18)] public Array<ShaderVariableBinding> ShaderVariableOverrides;
    }

    [RTTI.Serializable(0x225E45E69D283021, GameType.DS)]
    public class RenderEffectShaderOverridesResource : Resource
    {
        [RTTI.Member(2, 0x20)] public RenderEffectShaderOverrides ShaderOverrides;
    }

    [RTTI.Serializable(0xE9D251392B0146D8, GameType.DS)]
    public class RenderTechnique
    {
        [RTTI.Member(1, 0x0, "General")] public RenderTechniqueState RenderTechniqueState;
        [RTTI.Member(7, 0x8, "General")] public SRTBindingCache SRTBindingCache;
        [RTTI.Member(2, 0x38, "General")] public ERenderTechniqueType TechniqueType;
        [RTTI.Member(8, 0x3C, "General")] public bool GPUSkinned;
        [RTTI.Member(9, 0x3D, "General")] public bool WriteGlobalVertexCache;
        [RTTI.Member(10, 0x3E, "General")] public bool CameraFacing;
        [RTTI.Member(12, 0x3F, "General")] public bool InitiallyEnabled;
        [RTTI.Member(11, 0x40, "General")] public uint32 MaterialLayerID;
        [RTTI.Member(4, 0x48, "General")] public Array<SamplerBindingWithHandle> SamplerBindings;
        [RTTI.Member(5, 0x58, "General")] public Array<TextureBindingWithHandle> TextureBindings;
        [RTTI.Member(6, 0x68, "General")] public Array<VariableBindingWithHandle> VariableBindings;
        [RTTI.Member(3, 0x78, "General")] public Ref<ShaderResource> Shader;
        [RTTI.Member(13, 0x98, "General")] public RenderTechniqueID ID;
        [RTTI.Member(14, 0xA0, "General")] public bool ForceLODFadeEmulation;
    }

    [RTTI.Serializable(0x92EC3D093813628E, GameType.DS)]
    public class RenderTechniqueID
    {
        [RTTI.Member(0, 0x0)] public uint64 Hash;
    }

    [RTTI.Serializable(0x8F6EE270B51AADBD, GameType.DS)]
    public class RenderTechniqueSet
    {
        [RTTI.Member(3, 0x0, "General")] public Array<RenderTechnique> RenderTechniques;
        [RTTI.Member(1, 0x10, "General")] public ERenderTechniqueSetType Type;
        [RTTI.Member(2, 0x14, "General")] public ERenderEffectType EffectType;
        [RTTI.Member(4, 0x4C, "General")] public uint32 AvailableTechniquesMask;
        [RTTI.Member(5, 0x50, "General")] public uint32 InitiallyEnabledTechniquesMask;
    }

    [RTTI.Serializable(0x72869318817B0B97, GameType.DS)]
    public class RenderTechniqueState
    {
        [RTTI.Member(7, 0x0, "General", true)] public bool HasAlphaTest;
        [RTTI.Member(8, 0x0, "General", true)] public bool EnableDepthClamp;
        [RTTI.Member(10, 0x0, "General", true)] public uint32 ColorMask;
        [RTTI.Member(11, 0x0, "General")] public uint16 PackedData;
        [RTTI.Member(6, 0x0, "General", true)] public EAlphaDepth DepthTestFunc;
        [RTTI.Member(9, 0x0, "General", true)] public float DepthBias;
        [RTTI.Member(5, 0x0, "General", true)] public bool WriteDepth;
        [RTTI.Member(1, 0x0, "General", true)] public bool Wireframe;
        [RTTI.Member(4, 0x0, "General", true)] public ELayerOperation BlendMode;
        [RTTI.Member(3, 0x0, "General", true)] public ECull CullMode;
        [RTTI.Member(2, 0x0, "General", true)] public bool UseStencil;
        [RTTI.Member(12, 0x2, "General")] public HalfFloat PackedDepthBias;
        [RTTI.Member(13, 0x4, "General")] public uint32 PackedColorMask;
    }

    [RTTI.Serializable(0x93A38C3796348FD9, GameType.DS)]
    public class RenderZone : WorldNode
    {
        [RTTI.BaseClass(0x60)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(16, 0xA0, "Render")] public float FarPlane;
        [RTTI.Member(11, 0xA4, "General")] public float FadeDistance;
        [RTTI.Member(12, 0xA8, "General")] public ERenderZoneFadeRegion FadeRegion;
        [RTTI.Member(10, 0xAC, "General")] public int Priority;
        [RTTI.Member(13, 0xB0, "General")] public float DefaultIntensity;
        [RTTI.Member(17, 0xB8, "Render")] public Ref<Texture> CubemapTexture;
        [RTTI.Member(14, 0xC0, "General")] public bool SkipStreamingHighLODs;
        [RTTI.Member(18, 0xD0, "Render")] public Vec4 ReflectionCubeIntensity;
        [RTTI.Member(19, 0xE0, "Render")] public bool ForceSunlightDisable;
        [RTTI.Member(20, 0xF0, "Render")] public float KjpZoneSunScale;
        [RTTI.Member(22, 0xF8, "GameSpecific")] public Ref<PostProcessSettingsResource> PostProcessSettings;
        [RTTI.Member(23, 0x100, "GameSpecific")] public ExposureSettings ExposureSettings;
        [RTTI.Member(24, 0x160, "GameSpecific")] public float ExposureSettingsWeight;
        [RTTI.Member(25, 0x168, "GameSpecific")] public Array<RenderZoneParticleEffect> ParticleEffects;
        [RTTI.Member(26, 0x178, "GameSpecific")] public Ref<ClimateBase> Climate;
    }

    [RTTI.Serializable(0x9C4ABB82227E1C95, GameType.DS)]
    public class RenderZoneManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x3F217FB9DD6EE3FD, GameType.DS)]
    public class RenderZoneParticleEffect
    {
        [RTTI.Member(1, 0x0, "General")] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(2, 0x8, "General")] public float EmitRate;
    }

    [RTTI.Serializable(0xEF4BD858EB8C39DA, GameType.DS)]
    public class RenderingContextDrawHelpersSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> DepthPrimeRenderShader;
    }

    [RTTI.Serializable(0x6B44132D4CE6014A, GameType.DS)]
    public class RenderingPrimitiveResource : PrimitiveResource
    {
        [RTTI.Member(11, 0x80, "General")] public Ref<RenderEffectResource> RenderEffects;
    }

    [RTTI.Serializable(0xE1B581A10AAD8AB9, GameType.DS)]
    public class ReplaceTextureSetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x540070383DA74437, GameType.DS)]
    public class ReplaceTextureSetComponentResource : EntityComponentResource, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(2, 0x20)] public Ref<TextureSet> ReplaceTextureSet;
        [RTTI.Member(3, 0x28)] public String RelplaceNodeName;

        public void DeserializeExtraData(BinaryReader reader) => throw new NotImplementedException();
        public void SerializeExtraData(BinaryWriter writer) => throw new NotImplementedException();
    }

    [RTTI.Serializable(0xEF469AD94938B77B, GameType.DS)]
    public class RequestOwnershipEvent : RTTIObject
    {
    }

    [RTTI.Serializable(0x59737A3F23B722DA, GameType.DS)]
    public class ResetDelayedActionAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public CPtr<DelayedAction> Action;
    }

    [RTTI.Serializable(0x8EDA8C88B52F220E, GameType.DS)]
    public class ResistanceStatModifierResource : ActiveStatModifierResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<DamageModifierComponentResource> DamageModifierComponent;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CurveResource> RatingToResistanceCurve;
    }

    [RTTI.Serializable(0x427090533D93D98A, GameType.DS)]
    public class Resource : CoreObject
    {
    }

    [RTTI.Serializable(0xCB27F531BF9E24F8, GameType.DS)]
    public class ResourceID : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public RTTIHandle Type;
    }

    [RTTI.Serializable(0x2C16C378B8A675BB, GameType.DS)]
    public class ResourceIDSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA3EB87F15FCDD4D3, GameType.DS)]
    public class ResourceSelectorBase : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<Resource> Resource;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<ResourceSelectorBase>> Selectors;
    }

    [RTTI.Serializable(0xA64915B1E7857921, GameType.DS)]
    public class ResourceSet : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<ResourceSetEntry> Entries;
    }

    [RTTI.Serializable(0x3E369ABD6D6B09C6, GameType.DS)]
    public class ResourceSetEntry
    {
        [RTTI.Member(1, 0x0, "General")] public Ref<ResourceID> ID;
        [RTTI.Member(2, 0x8, "General")] public Ref<RTTIRefObject> Resource;
    }

    [RTTI.Serializable(0x8EDCDA99E810BDB, GameType.DS)]
    public class ResourceSetSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBC5672CA3A1C549, GameType.DS)]
    public class ResourceWithName : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String Name;
    }

    [RTTI.Serializable(0x1157DF0F956BE95F, GameType.DS)]
    public class ResourceWithNameHash : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public uint32 NameHash;
    }

    [RTTI.Serializable(0x15EFD1BF2759BAA0, GameType.DS)]
    public class ResponseCurve
    {
        [RTTI.Member(0, 0x0)] public float LowerInput;
        [RTTI.Member(1, 0x4)] public float Range;
        [RTTI.Member(2, 0x8)] public Array<float> Samples;
    }

    [RTTI.Serializable(0xDBF936B83DD7BA82, GameType.DS)]
    public class RestConfig
    {
        [RTTI.Member(0, 0x0)] public float BatteryRecoverSpeedMultiplier;
        [RTTI.Member(1, 0x4)] public float BloodRecoverSpeedMultiplier;
        [RTTI.Member(2, 0x8)] public float BloodRecoverLimitRate;
        [RTTI.Member(3, 0x10)] public float BBStressRecoverSpeed;
        [RTTI.Member(4, 0x14)] public float BBStressRecoverLimitRate;
        [RTTI.Member(5, 0x18)] public float StaminaRecoverValuePerSec;
        [RTTI.Member(6, 0x1C)] public float StaminaRecoverRateInRain;
        [RTTI.Member(7, 0x20)] public float StaminaRecoverRateWithMassage;
        [RTTI.Member(8, 0x24)] public float StaminaRecoverRateWithBB;
        [RTTI.Member(9, 0x28)] public float StaminaRecoverRateWithNap;
        [RTTI.Member(10, 0x2C)] public float StaminaRecoverRateWithSleep;
        [RTTI.Member(11, 0x30)] public float StaminaRecoverRateWithChangeShoes;
        [RTTI.Member(12, 0x34)] public float StaminaRecoverRateWithRepairShoes;
        [RTTI.Member(13, 0x38)] public float StaminaRecoverRateWithEasy;
        [RTTI.Member(14, 0x3C)] public float StaminaRecoverRateWithEasyCold;
        [RTTI.Member(15, 0x40)] public float StaminaRecoverRateWithOnsenIdle;
        [RTTI.Member(16, 0x44)] public float AutoActionInterval;
        [RTTI.Member(17, 0x48)] public float NapActionInterval;
        [RTTI.Member(40, 0x4C, "ResetPointLevel")] public RestPlaceLevelConfig Level0;
        [RTTI.Member(41, 0x5C, "ResetPointLevel")] public RestPlaceLevelConfig Level1;
        [RTTI.Member(42, 0x6C, "ResetPointLevel")] public RestPlaceLevelConfig Level2;
        [RTTI.Member(43, 0x7C, "ResetPointLevel")] public RestPlaceLevelConfig Level3;
        [RTTI.Member(44, 0x8C, "ResetPointLevel")] public RestPlaceLevelConfig Level4;
        [RTTI.Member(18, 0x9C)] public float FatigueRecoverValuePerSec;
        [RTTI.Member(19, 0xA0)] public float FatigueRecoverRateInRain;
        [RTTI.Member(20, 0xA4)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelInRain;
        [RTTI.Member(21, 0xA8)] public float FatigueRecoverRateWithMassage;
        [RTTI.Member(22, 0xAC)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithMassage;
        [RTTI.Member(23, 0xB0)] public float FatigueRecoverRateWithBB;
        [RTTI.Member(24, 0xB4)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithBB;
        [RTTI.Member(25, 0xB8)] public float FatigueRecoverRateWithNap;
        [RTTI.Member(26, 0xBC)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithNap;
        [RTTI.Member(27, 0xC0)] public float FatigueRecoverRateWithSleep;
        [RTTI.Member(28, 0xC4)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithSleep;
        [RTTI.Member(29, 0xC8)] public float FatigueRecoverRateWithChangeShoes;
        [RTTI.Member(30, 0xCC)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithChangeShoes;
        [RTTI.Member(31, 0xD0)] public float FatigueRecoverRateWithRepairShoes;
        [RTTI.Member(32, 0xD4)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelRepairShoes;
        [RTTI.Member(33, 0xD8)] public float FatigueRecoverRateWithEasy;
        [RTTI.Member(34, 0xDC)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithEasy;
        [RTTI.Member(35, 0xE0)] public float FatigueRecoverRateWithEasyCold;
        [RTTI.Member(36, 0xE4)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithEasyCold;
        [RTTI.Member(37, 0xE8)] public float FatigueRecoverRateWithOnsenIdle;
        [RTTI.Member(38, 0xEC)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevelWithOnsenIdle;
        [RTTI.Member(46, 0xF0, "OnsenColor")] public SpaColorConfig WhiteMilky;
        [RTTI.Member(47, 0x118, "OnsenColor")] public SpaColorConfig Red;
        [RTTI.Member(48, 0x140, "OnsenColor")] public SpaColorConfig Brown;
        [RTTI.Member(49, 0x168, "OnsenColor")] public SpaColorConfig Green;
        [RTTI.Member(50, 0x190, "OnsenColor")] public SpaColorConfig Blue;
    }

    [RTTI.Serializable(0x6A2A5798681DDD5A, GameType.DS)]
    public class RestPlaceLevelConfig
    {
        [RTTI.Member(0, 0x0)] public float BloodRecoverSpeedMultiplier;
        [RTTI.Member(1, 0x4)] public float ConsciosnessRecoverSpeedMultiplier;
        [RTTI.Member(2, 0x8)] public float StaminaRecoverSpeedMultiplier;
        [RTTI.Member(3, 0xC)] public float FatigueRecoverSpeedMultiplier;
    }

    [RTTI.Serializable(0x29B50D9BBE9ACB1F, GameType.DS)]
    public class RetractingPartsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA7DA3736D1A6AF0F, GameType.DS)]
    public class RetractingPartsComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float RetractionSphereRadius;
        [RTTI.Member(4, 0x24, "Logic")] public float SelectionInterval;
        [RTTI.Member(5, 0x28, "Logic")] public int NumPartsPerSelectionInterval;
        [RTTI.Member(6, 0x2C, "Logic")] public float ActivationTime;
        [RTTI.Member(7, 0x30, "Logic")] public float MaxDistance;
        [RTTI.Member(8, 0x38, "Logic")] public Ref<DestructibilityRetractionMoverResource> Mover;
    }

    [RTTI.Serializable(0x8D7A4623DD24D4C4, GameType.DS)]
    public class RetractingPartsComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF2556CA46A2C8902, GameType.DS)]
    public class ReturnEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x7D1BC97F067713A3, GameType.DS)]
    public class ReturnEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public int BlendFrames;
    }

    [RTTI.Serializable(0x637598864CB28374, GameType.DS)]
    public class ReverbPresetResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public bool EnableMfdnReverb;
        [RTTI.Member(4, 0x21, "General")] public bool EnableConvolutionReverb;
        [RTTI.Member(42, 0x28, "MfdnReverb")] public float EffectLevel;
        [RTTI.Member(45, 0x2C, "MfdnReverb")] public float EarlyReflectionsDelay;
        [RTTI.Member(46, 0x30, "MfdnReverb")] public float EarlyReflectionsTimeFactor;
        [RTTI.Member(47, 0x34, "MfdnReverb")] public float EarlyReflectionsLevel;
        [RTTI.Member(48, 0x38, "MfdnReverb")] public float EarlyReflectionsSlapback;
        [RTTI.Member(49, 0x3C, "MfdnReverb")] public float EarlyReflectionsHFRatio;
        [RTTI.Member(50, 0x40, "MfdnReverb")] public float DecayTime;
        [RTTI.Member(51, 0x44, "MfdnReverb")] public float DecayLevel;
        [RTTI.Member(52, 0x48, "MfdnReverb")] public float DecayHFRatio;
        [RTTI.Member(53, 0x4C, "MfdnReverb")] public float DecayDiffusion;
        [RTTI.Member(54, 0x50, "MfdnReverb")] public float DiffuseTailHfReference;
        [RTTI.Member(43, 0x54, "MfdnReverb")] public float EffectLowPassCutoff;
        [RTTI.Member(44, 0x58, "MfdnReverb")] public float EffectHighPassCutoff;
        [RTTI.Member(56, 0x5C, "ReverbModification")] public float EarlyReflectionsDelayMod;
        [RTTI.Member(57, 0x60, "ReverbModification")] public float EarlyReflectionsTimeFactorMod;
        [RTTI.Member(58, 0x64, "ReverbModification")] public float EarlyReflectionsLevelMod;
        [RTTI.Member(59, 0x68, "ReverbModification")] public float EarlyReflectionsSlapbackMod;
        [RTTI.Member(60, 0x6C, "ReverbModification")] public float EarlyReflectionsHFRatioMod;
        [RTTI.Member(10, 0x70, "ConvolutionReverb")] public Ref<ImpulseResponseResource> ImpulseResponse;
        [RTTI.Member(11, 0x78, "ConvolutionReverb")] public bool Reverse;
        [RTTI.Member(12, 0x7C, "ConvolutionReverb")] public float StartOffset;
        [RTTI.Member(13, 0x80, "ConvolutionReverb")] public float StopOffset;
        [RTTI.Member(14, 0x84, "ConvolutionReverb")] public float Gain;
        [RTTI.Member(15, 0x88, "ConvolutionReverb")] public float AttackTime;
        [RTTI.Member(16, 0x8C, "ConvolutionReverb")] public int AttackAlpha;
        [RTTI.Member(17, 0x90, "ConvolutionReverb")] public float SustainTime;
        [RTTI.Member(18, 0x94, "ConvolutionReverb")] public float ReleaseTime;
        [RTTI.Member(19, 0x98, "ConvolutionReverb")] public int ReleaseAlpha;
        [RTTI.Member(21, 0xA0, "DelayLine")] public float MaxAbsolutePitchDeviation;
        [RTTI.Member(22, 0xA4, "DelayLine")] public float LowPassCoefficient;
        [RTTI.Member(23, 0xA8, "DelayLine")] public EDelayLineTapIndex FeedbackTap;
        [RTTI.Member(24, 0xAC, "DelayLine")] public bool UseZeroDelayTap;
        [RTTI.Member(25, 0xB0, "DelayLine")] public float InputGain;
        [RTTI.Member(26, 0xB4, "DelayLine")] public float OutputGain;
        [RTTI.Member(27, 0xB8, "DelayLine")] public float FeedbackGain;
        [RTTI.Member(28, 0xBC, "DelayLine")] public float FeedforwardGain;
        [RTTI.Member(29, 0xC0, "DelayLine")] public float DelayTimeTap0;
        [RTTI.Member(32, 0xC4, "DelayLine")] public float DelayTimeTap1;
        [RTTI.Member(35, 0xC8, "DelayLine")] public float DelayTimeTap2;
        [RTTI.Member(38, 0xCC, "DelayLine")] public float DelayTimeTap3;
        [RTTI.Member(30, 0xD0, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap0;
        [RTTI.Member(33, 0xD8, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap1;
        [RTTI.Member(36, 0xE0, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap2;
        [RTTI.Member(39, 0xE8, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap3;
        [RTTI.Member(31, 0xF0, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap0;
        [RTTI.Member(34, 0xF8, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap1;
        [RTTI.Member(37, 0x100, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap2;
        [RTTI.Member(40, 0x108, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap3;
        [RTTI.Member(5, 0x110, "General")] public bool RotateWithListener;
        [RTTI.Member(6, 0x114, "General")] public float Focus;
        [RTTI.Member(7, 0x118, "General")] public float FadeTime;
        [RTTI.Member(8, 0x11C, "General")] public bool SuppressDrySignal;
    }

    [RTTI.Serializable(0x51E3C229FADFC5A8, GameType.DS)]
    public class ReverbSubmixResource : SubmixResource
    {
    }

    [RTTI.Serializable(0xC7DCEAFA497CD3DC, GameType.DS)]
    public class RewardDestructibilityTagToLootItemMapping
    {
        [RTTI.Member(2, 0x0, "Logic")] public Ref<TagProperty> TagProperty;
        [RTTI.Member(1, 0x8, "Logic")] public Ref<EntityResource> LootItem;
    }

    [RTTI.Serializable(0x10AB41CE1514AE24, GameType.DS)]
    public class RingSegmentVolumetricAnnotation : VolumetricAnnotation
    {
        [RTTI.Member(6, 0x38, "Logic")] public FRange DistanceRange;
        [RTTI.Member(7, 0x40, "Logic")] public FRange DistanceRangeSquared;
        [RTTI.Member(8, 0x48, "Logic")] public float MaxAbsHeading;
        [RTTI.Member(9, 0x4C, "Logic")] public float MaxAbsHeadingCos;
        [RTTI.Member(10, 0x50, "Logic")] public FRange HeightRange;
        [RTTI.Member(11, 0x58, "Logic")] public float ReferenceHeading;
        [RTTI.Member(12, 0x60, "Logic")] public Quat ReferenceRotation;
    }

    [RTTI.Serializable(0x83E862ABBB4B8EEA, GameType.DS)]
    public class River : Route
    {
    }

    [RTTI.Serializable(0xBDF9810EBD0CF485, GameType.DS)]
    public class RiverNode : RouteNode
    {
        [RTTI.Member(12, 0xE0, "RiverBed")] public float RiverBed_CenterOffset;
        [RTTI.Member(13, 0xE4, "RiverBed")] public float Depth;
        [RTTI.Member(14, 0xE8, "RiverBed")] public float RiverBed_MaskTiling;
        [RTTI.Member(15, 0xEC, "RiverBed")] public float RiverBed_MaskHeightScale;
        [RTTI.Member(17, 0xF0, "RiverBank")] public float RiverBank_CenterOffset;
        [RTTI.Member(18, 0xF4, "RiverBank")] public float RiverBank_MaskTiling;
        [RTTI.Member(19, 0xF8, "RiverBank")] public float RiverBank_MaskHeightScale;
        [RTTI.Member(21, 0xFC, "FloodPlane")] public float WidthLeft;
        [RTTI.Member(22, 0x100, "FloodPlane")] public float WidthRight;
    }

    [RTTI.Serializable(0xDE1E0B68337D82CE, GameType.DS)]
    public class Road : Route
    {
        [RTTI.Member(10, 0xB0, "Debug")] public FRGBAColor DebugColor;
        [RTTI.Member(8, 0xC0)] public ERoadBakeDataMode BakeMode;
    }

    [RTTI.Serializable(0xA14E7A972EA5BE9C, GameType.DS)]
    public class RoadConnection
    {
    }

    [RTTI.Serializable(0x7BE3DF7E861C422, GameType.DS)]
    public class RoadJunction
    {
    }

    [RTTI.Serializable(0x2219E73D2D02CBD8, GameType.DS)]
    public class RoadLink : RoadConnection
    {
    }

    [RTTI.Serializable(0xF2FAB08065CF606C, GameType.DS)]
    public class RoadNode : RouteNode
    {
        [RTTI.Member(12, 0xE0, "Logic")] public float HeightFalloff;
        [RTTI.Member(14, 0xE4, "Logic")] public float ProfileScale;
        [RTTI.Member(16, 0xE8, "Logic")] public float Mask0Tiling;
        [RTTI.Member(17, 0xEC, "Logic")] public float Mask1Tiling;
        [RTTI.Member(18, 0xF0, "Logic")] public float MaskHeightScale;
        [RTTI.Member(19, 0xF4, "Logic")] public float MaskBreakUpScale;
        [RTTI.Member(13, 0xF8, "Logic")] public ERoadNodeProfileType ProfileType;
        [RTTI.Member(15, 0xFC, "Logic")] public ERoadNodeSnapMode SnapMode;
    }

    [RTTI.Serializable(0x3566A05296DFA407, GameType.DS)]
    public class RobotTrackingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x98D0B496F0A8A300, GameType.DS)]
    public class RobotTrackingComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x1EA43C083E1B4CA, GameType.DS)]
    public class RobotTrackingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Representation")] public Ref<SoundResource> TrackingSound;
        [RTTI.Member(4, 0x28, "Representation")] public Ref<CurveResource> SoundVolumeOverDistance;
        [RTTI.Member(5, 0x30, "Representation")] public Ref<CurveResource> SoundFrequencyOverDistance;
        [RTTI.Member(6, 0x38, "Representation")] public Ref<CurveResource> SoundVolumePerAngle;
        [RTTI.Member(7, 0x40, "Representation")] public Ref<CurveResource> SoundFrequencyPerAngle;
        [RTTI.Member(8, 0x48, "Representation")] public String ShaderVariableName;
        [RTTI.Member(9, 0x50, "Representation")] public Ref<CurveResource> ShaderVariableAnimationCurve;
    }

    [RTTI.Serializable(0x88F34C2634CB401B, GameType.DS)]
    public class Rocket : Throwable
    {
    }

    [RTTI.Serializable(0x88D6DEE49C9589EB, GameType.DS)]
    public class RocketMover : ThrowableMover
    {
    }

    [RTTI.Serializable(0xAB820D882010C4ED, GameType.DS)]
    public class RocketMoverResource : ThrowableMoverResource
    {
        [RTTI.Member(37, 0xF0, "Logic")] public float Acceleration;
        [RTTI.Member(38, 0xF4, "Logic")] public float MaxVelocity;
        [RTTI.Member(40, 0xF8, "Logic")] public float BurnoutTime;
        [RTTI.Member(42, 0xFC, "DelayedIgnition")] public bool Enable;
        [RTTI.Member(43, 0x100, "DelayedIgnition")] public float ActivationTime;
        [RTTI.Member(45, 0x104, "Homing")] public float FallToHomeTime;
        [RTTI.Member(39, 0x108, "Logic")] public float OvershootExplodeRange;
    }

    [RTTI.Serializable(0x676447C5B22DA5FB, GameType.DS)]
    public class RocketRep : ThrowableRep
    {
    }

    [RTTI.Serializable(0xA99AA54C0EC3C29F, GameType.DS)]
    public class RocketResource : ThrowableResource
    {
        [RTTI.Member(76, 0x1D0, "Logic")] public float FuseTime;
        [RTTI.Member(82, 0x1D8, "VisualEffects")] public Ref<EffectComponentResource> IgnitionEffectComponent;
        [RTTI.Member(79, 0x1E0, "Bounce")] public float MinimumDistanceToTarget;
        [RTTI.Member(80, 0x1E4, "Bounce")] public float BounceAngleOffset;
        [RTTI.Member(77, 0x1E8, "Logic")] public float NoExplosionRemoveTime;
        [RTTI.Member(83, 0x1F0, "VisualEffects")] public Ref<LaserBeamResource> TargetLaser;
    }

    [RTTI.Serializable(0x8EBE0EA40ED9F44E, GameType.DS)]
    public class RootDevice : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<DeviceInfo> DeviceInfo;
    }

    [RTTI.Serializable(0x281ECAB17485FBBC, GameType.DS)]
    public class RopeAmmoResource : EntityProjectileAmmoResource
    {
        [RTTI.Member(55, 0x1C0, "Logic")] public Ref<RopeAnchorComponentResource> RopeAnchorComponentResource;
    }

    [RTTI.Serializable(0x955E4B83B0313140, GameType.DS)]
    public class RopeAnchorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF33719DDB4021F99, GameType.DS)]
    public class RopeAnchorComponentResource : EntityComponentResource
    {
        [RTTI.Member(7, 0x20, "Anchor")] public float PullbackSlack;
        [RTTI.Member(8, 0x24, "Anchor")] public float BreakSlack;
        [RTTI.Member(9, 0x28, "Anchor")] public float TensileStrength;
        [RTTI.Member(3, 0x2C, "Logic")] public ERopeMode RopeMode;
        [RTTI.Member(4, 0x30, "Logic")] public float AutoFireSecondAnchorTime;
        [RTTI.Member(5, 0x34, "Logic")] public float AutoFireForwardOffset;
        [RTTI.Member(12, 0x38, "TripWire")] public float TripwireLifeTime;
        [RTTI.Member(13, 0x40, "TripWire")] public Ref<RopeManagerComponentResource> ConnectedRopeManager;
        [RTTI.Member(10, 0x48, "Anchor")] public Array<Ref<DamageSettings>> BreakingDamageSettings;
        [RTTI.Member(15, 0x58, "Climbable")] public float ZiplineAngleThreshold;
    }

    [RTTI.Serializable(0x59907CC4776FAEA7, GameType.DS)]
    public class RopeAnchorEjector : GrenadeEjector
    {
    }

    [RTTI.Serializable(0x8619CB46151D733C, GameType.DS)]
    public class RopeAnchorEjectorRep : DiscreteAmmoEjectorRep
    {
    }

    [RTTI.Serializable(0x2846EBC6D43B2DD0, GameType.DS)]
    public class RopeAnchorEjectorResource : GrenadeEjectorResource
    {
        [RTTI.Member(103, 0x230, "Logic")] public float RetrievalTimeout;
        [RTTI.Member(104, 0x234, "Logic")] public float RetrievalSpeed;
        [RTTI.Member(105, 0x238, "Logic")] public Ref<RumbleResource> RetrievalRumble;
        [RTTI.Member(106, 0x240, "Logic")] public Ref<RopePullingComponentResource> PullingComponent;
        [RTTI.Member(107, 0x248, "Logic")] public Ref<GraphProgramResource> EvaluateTargetGraphResource;
    }

    [RTTI.Serializable(0x93FC09F89993BEEF, GameType.DS)]
    public class RopeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB677C2E2400328, GameType.DS)]
    public class RopeComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD8C154D44A249814, GameType.DS)]
    public class RopeManagerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9C22FFCD84FB0023, GameType.DS)]
    public class RopeManagerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool DispensableOnBroken;
        [RTTI.Member(4, 0x28, "Logic")] public String HelperNodeFirstEnd;
        [RTTI.Member(5, 0x30, "Logic")] public String HelperNodeSecondEnd;
        [RTTI.Member(6, 0x38, "Logic")] public float PullStrength;
        [RTTI.Member(7, 0x3C, "Logic")] public float ForceStretchLength;
        [RTTI.Member(8, 0x40, "Logic")] public float MaxLength;
        [RTTI.Member(9, 0x44, "Logic")] public float DamageStretchLength;
        [RTTI.Member(10, 0x48, "Logic")] public float DamageAmount;
        [RTTI.Member(11, 0x50, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(12, 0x58, "Logic")] public CPtr<EntityAction> FirstRopeEndContactAction;
        [RTTI.Member(13, 0x60, "Logic")] public CPtr<EntityAction> SecondRopeEndContactAction;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<GraphProgramResource> FirstRopeEndBreakProgram;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<GraphProgramResource> SecondRopeEndBreakProgram;
        [RTTI.Member(16, 0x78, "Logic")] public Ref<GraphProgramResource> FirstRopeEndRemoveProgram;
        [RTTI.Member(17, 0x80, "Logic")] public Ref<GraphProgramResource> SecondRopeEndRemoveProgram;
        [RTTI.Member(23, 0x88, "Representation")] public Ref<EntityResource> RopeEntityResource;
        [RTTI.Member(18, 0x90, "Logic")] public bool ExcludeInstigatorFromCollision;
        [RTTI.Member(19, 0x91, "Logic")] public bool OnlyCollideWithHostiles;
        [RTTI.Member(20, 0x92, "Logic")] public bool AutoConnectByInstigator;
        [RTTI.Member(21, 0x93, "Logic")] public bool BreakOnCollision;
        [RTTI.Member(24, 0x98, "Representation")] public Ref<SoundResource> TensionSoundResource;
        [RTTI.Member(26, 0xA0, "Physics")] public Ref<PhysicsCollisionResource> PhysicsCollisionResource;
        [RTTI.Member(27, 0xA8, "Physics")] public float PhysicsCollisionThickness;
        [RTTI.Member(28, 0xAC, "Physics")] public float PhysicsCollisionHeight;
    }

    [RTTI.Serializable(0x705E4FC5E96C0048, GameType.DS)]
    public class RopeManagerComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5D25760406B59C1B, GameType.DS)]
    public class RopeMesh : GeometryObject
    {
    }

    [RTTI.Serializable(0x2221E2BC441D020E, GameType.DS)]
    public class RopePullingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBC08BA5A8D9BA48, GameType.DS)]
    public class RopePullingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> StartGraph;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<GraphProgramResource> StopGraph;
    }

    [RTTI.Serializable(0x910815461F71DBE1, GameType.DS)]
    public class Route : WorldDataShape
    {
    }

    [RTTI.Serializable(0x5A5CE60B8DCF88B4, GameType.DS)]
    public class RouteMover : Mover
    {
    }

    [RTTI.Serializable(0xD052C029A1EADD88, GameType.DS)]
    public class RouteMoverResource : MoverResource
    {
        [RTTI.Member(6, 0x28)] public bool AutoConnect;
        [RTTI.Member(7, 0x2C)] public float Speed;
        [RTTI.Member(8, 0x30)] public bool AlignUpToWorld;
    }

    [RTTI.Serializable(0x2583D53539611BAC, GameType.DS)]
    public class RouteMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x616433521FA9E03C, GameType.DS)]
    public class RouteNode : WorldDataShapeNode
    {
        [RTTI.Member(10, 0x90, "Logic")] public float Width;
    }

    [RTTI.Serializable(0x645C28BFB76E401A, GameType.DS)]
    public class RouteSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCA985E1457E76E7A, GameType.DS)]
    public class RumbleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x76DA9F69CB7D4A40, GameType.DS)]
    public class RumbleEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0xCA4B3A48E49CDEAF, GameType.DS)]
    public class RumbleResource : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "General")] public float Duration;
        [RTTI.Member(7, 0x40, "General")] public Ref<CurveResource> SmallMotorCurve;
        [RTTI.Member(8, 0x48, "General")] public Ref<CurveResource> BigMotorCurve;
        [RTTI.Member(9, 0x50, "General")] public Ref<CurveResource> LeftTriggerCurve;
        [RTTI.Member(10, 0x58, "General")] public Ref<CurveResource> RightTriggerCurve;
        [RTTI.Member(11, 0x60, "General")] public float FirstPointTime;
        [RTTI.Member(12, 0x64, "General")] public bool Is3D;
        [RTTI.Member(13, 0x68, "General")] public FRange Range;
        [RTTI.Member(14, 0x70, "General")] public bool IsLooping;
        [RTTI.Member(16, 0x71, "Occlusion")] public bool DoOcclusion;
        [RTTI.Member(17, 0x74, "Occlusion")] public float SmallMotorOcclusionMultiplier;
        [RTTI.Member(18, 0x78, "Occlusion")] public Ref<CurveResource> SmallMotorOcclusionCurve;
        [RTTI.Member(19, 0x80, "Occlusion")] public float BigMotorOcclusionMultiplier;
        [RTTI.Member(20, 0x88, "Occlusion")] public Ref<CurveResource> BigMotorOcclusionCurve;
        [RTTI.Member(21, 0x90, "Occlusion")] public float LeftTriggerOcclusionMultiplier;
        [RTTI.Member(22, 0x98, "Occlusion")] public Ref<CurveResource> LeftTriggerOcclusionCurve;
        [RTTI.Member(23, 0xA0, "Occlusion")] public float RightTriggerOcclusionMultiplier;
        [RTTI.Member(24, 0xA8, "Occlusion")] public Ref<CurveResource> RightTriggerOcclusionCurve;
        [RTTI.Member(26, 0xB0, "Extension")] public Ref<HapticWaveResource> HapticWaveResource;
    }

    [RTTI.Serializable(0xE6BE1B8A20EDAC4B, GameType.DS)]
    public class SHLightVolume : WorldNode
    {
        [RTTI.BaseClass(0x60)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(9, 0xB0)] public Ref<SHLightVolumeResource> Resource;
    }

    [RTTI.Serializable(0xB06F56908CBDCC94, GameType.DS)]
    public class SHLightVolumeManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x90381340C53AA2C9, GameType.DS)]
    public class SHLightVolumeResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Vec3 PositiveFadeIn;
        [RTTI.Member(3, 0x30)] public Vec3 NegativeFadeIn;
        [RTTI.Member(4, 0x40)] public int Priority;
        [RTTI.Member(5, 0x50)] public Vec2 InitialBoxSize;
        [RTTI.Member(6, 0x60)] public float InitialBoxHeight;
        [RTTI.Member(8, 0x70)] public Vec3 PositiveLightColor;
        [RTTI.Member(9, 0x80)] public Vec3 NegativeLightColor;
        [RTTI.Member(10, 0x90)] public float PositiveIntensity;
        [RTTI.Member(11, 0x94)] public float NegativeIntensity;
        [RTTI.Member(12, 0x98)] public float SkyVisibility;
        [RTTI.Member(13, 0x9C)] public float BlendWeight;
        [RTTI.Member(7, 0xA0)] public ESHVOLUME_LODLevel LODFadeLevel;
    }

    [RTTI.Serializable(0x1140D335C0BB1E8E, GameType.DS)]
    public class SHVector4x9
    {
        [RTTI.Member(0, 0x0)] public Vec4 SHVec0;
        [RTTI.Member(1, 0x10)] public Vec4 SHVec1;
        [RTTI.Member(2, 0x20)] public Vec4 SHVec2;
        [RTTI.Member(3, 0x30)] public Vec4 SHVec3;
        [RTTI.Member(4, 0x40)] public Vec4 SHVec4;
        [RTTI.Member(5, 0x50)] public Vec4 SHVec5;
        [RTTI.Member(6, 0x60)] public Vec4 SHVec6;
        [RTTI.Member(7, 0x70)] public Vec4 SHVec7;
        [RTTI.Member(8, 0x80)] public Vec4 SHVec8;
    }

    [RTTI.Serializable(0xA5F1EFC59AB0CF86, GameType.DS)]
    public class SKDTree
    {
        [RTTI.Member(1, 0x0, "General")] public BoundingBox3 Bounds;
        [RTTI.Member(2, 0x20, "General")] public Array<SKDTreeNode> TreeData;
    }

    [RTTI.Serializable(0x66534260304788CD, GameType.DS)]
    public class SKDTreeNode
    {
        [RTTI.Member(0, 0x0)] public float MaxLo;
        [RTTI.Member(1, 0x4)] public float MaxHi;
        [RTTI.Member(2, 0x8)] public uint16 PackedData0;
        [RTTI.Member(3, 0xA)] public uint16 PackedData1;
    }

    [RTTI.Serializable(0x8DF7A7AC45BF4387, GameType.DS)]
    public class SKDTreeResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public SKDTree SKDTree;
    }

    [RTTI.Serializable(0x6D529FA86E24B18E, GameType.DS)]
    public class SRTBindingCache
    {
        [RTTI.Member(0, 0x0)] public uint8 TextureBindingMask;
        [RTTI.Member(1, 0x2)] public uint16 BindingDataMask;
        [RTTI.Member(2, 0x8)] public uint64 SRTEntriesMask;
        [RTTI.Member(3, 0x10)] public Array<uint16> BindingDataIndices;
        [RTTI.Member(4, 0x20)] public Array<HwBindingHandle> SRTEntryHandles;
    }

    [RTTI.Serializable(0xA606BCEBD3D8D5A1, GameType.DS)]
    public class SRTElement
    {
        [RTTI.Member(1, 0x0)] public String SubSetName;
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(2, 0x18)] public int ResourceIndex;
        [RTTI.Member(3, 0x1C)] public int16 Offset;
        [RTTI.Member(4, 0x1E)] public int16 ArrayCount;
        [RTTI.Member(5, 0x20)] public ESRTElementType Type;
        [RTTI.Member(6, 0x21)] public ESRTElementFormat Format;
    }

    [RTTI.Serializable(0x78F4A5A2E69A442D, GameType.DS)]
    public class SRTEntry
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String ElementDescSetName;
        [RTTI.Member(2, 0x10)] public Array<SRTElement> Elements;
        [RTTI.Member(3, 0x20)] public uint8 ArrayCount;
        [RTTI.Member(4, 0x21)] public ESRTUpdateFrequency UpdateFrequency;
        [RTTI.Member(5, 0x22)] public ESRTStorageMode StorageMode;
        [RTTI.Member(6, 0x24)] public EProgramTypeMask ProgramTypeMask;
    }

    [RTTI.Serializable(0x1AFCF070E89DD9D2, GameType.DS)]
    public class SRT_RTTI_AccumulationBindings
    {
    }

    [RTTI.Serializable(0xE9B2689D2C286008, GameType.DS)]
    public class SRT_RTTI_AlbedoBindings
    {
    }

    [RTTI.Serializable(0xF0936D3BF243387F, GameType.DS)]
    public class SRT_RTTI_AtmosphericScatteringCB
    {
    }

    [RTTI.Serializable(0x5DA0F3B7C3528234, GameType.DS)]
    public class SRT_RTTI_AuroraBlurCB
    {
    }

    [RTTI.Serializable(0xDE7B5581055536D4, GameType.DS)]
    public class SRT_RTTI_AuroraRendererCB
    {
    }

    [RTTI.Serializable(0x79F00C4DBC46A86F, GameType.DS)]
    public class SRT_RTTI_BatchCustomData
    {
    }

    [RTTI.Serializable(0x22CAD5FC44EF01E, GameType.DS)]
    public class SRT_RTTI_BatchInfo
    {
    }

    [RTTI.Serializable(0x8D78776495F137D1, GameType.DS)]
    public class SRT_RTTI_CapsuleCollider
    {
    }

    [RTTI.Serializable(0xE053D079059271C1, GameType.DS)]
    public class SRT_RTTI_CloudDomeBlendCB
    {
    }

    [RTTI.Serializable(0x22A7077AA0DCA9CA, GameType.DS)]
    public class SRT_RTTI_CloudRendererCB
    {
    }

    [RTTI.Serializable(0x1A7DAB00F6549742, GameType.DS)]
    public class SRT_RTTI_ComputeSkinningVtxNbtType
    {
    }

    [RTTI.Serializable(0x1BB242F4348C108A, GameType.DS)]
    public class SRT_RTTI_ComputeSkinningVtxPos
    {
    }

    [RTTI.Serializable(0x22CEA8BEB86D01E0, GameType.DS)]
    public class SRT_RTTI_CubemapZone2SRTData
    {
    }

    [RTTI.Serializable(0x1FD0A332FD5C9D11, GameType.DS)]
    public class SRT_RTTI_DSTarEffectRayCheckComputeJobResources
    {
    }

    [RTTI.Serializable(0x6D6FFDB2B7F786A6, GameType.DS)]
    public class SRT_RTTI_DSTarEffectRayCheckQueryData
    {
    }

    [RTTI.Serializable(0xD936204AF31470B7, GameType.DS)]
    public class SRT_RTTI_DSTextureReaderComputeJobResources
    {
    }

    [RTTI.Serializable(0xE42A587185F89E8, GameType.DS)]
    public class SRT_RTTI_DeferredLightSamplingPerPassData
    {
    }

    [RTTI.Serializable(0x43B8E344DCCF836B, GameType.DS)]
    public class SRT_RTTI_DensityMapComputeParams
    {
    }

    [RTTI.Serializable(0x3D69A9ED7E236DCA, GameType.DS)]
    public class SRT_RTTI_DepthStencilBindings
    {
    }

    [RTTI.Serializable(0xEE08A54C4600B744, GameType.DS)]
    public class SRT_RTTI_DistantFogRendererCB
    {
    }

    [RTTI.Serializable(0x52E4D655904469C2, GameType.DS)]
    public class SRT_RTTI_EmitSlot
    {
    }

    [RTTI.Serializable(0xEEFEA7AF5A80F3CA, GameType.DS)]
    public class SRT_RTTI_ForceFieldComputeParams
    {
    }

    [RTTI.Serializable(0x5F932837A1DCB945, GameType.DS)]
    public class SRT_RTTI_ForceFieldDesc
    {
    }

    [RTTI.Serializable(0x8CDB0033BE1081CC, GameType.DS)]
    public class SRT_RTTI_ForceFieldSample
    {
    }

    [RTTI.Serializable(0x3700184F90A77C3C, GameType.DS)]
    public class SRT_RTTI_ForceFieldSampleResult
    {
    }

    [RTTI.Serializable(0xA123DA1E604C27B4, GameType.DS)]
    public class SRT_RTTI_ForceFieldtoTextureComputeJobParams
    {
    }

    [RTTI.Serializable(0x39D997750B6DF1F0, GameType.DS)]
    public class SRT_RTTI_ForwardPassIndirectConstants
    {
    }

    [RTTI.Serializable(0xE520B31DB88079CC, GameType.DS)]
    public class SRT_RTTI_ForwardPassIndirectParams
    {
    }

    [RTTI.Serializable(0xE644812084E9416D, GameType.DS)]
    public class SRT_RTTI_GBufferBindings
    {
    }

    [RTTI.Serializable(0xE80C996D1DF8E4E1, GameType.DS)]
    public class SRT_RTTI_GPUParticle
    {
    }

    [RTTI.Serializable(0x6EE4E83748564546, GameType.DS)]
    public class SRT_RTTI_GPUParticleSystemStats
    {
    }

    [RTTI.Serializable(0xAFB2FEB313E690C1, GameType.DS)]
    public class SRT_RTTI_GPUParticleUpdateParams
    {
    }

    [RTTI.Serializable(0xDA0AA0F82455AAE6, GameType.DS)]
    public class SRT_RTTI_GenerateComputeOutput
    {
    }

    [RTTI.Serializable(0xDD6A553465DD0916, GameType.DS)]
    public class SRT_RTTI_GenerateComputeParams
    {
    }

    [RTTI.Serializable(0x45EAC48253A68301, GameType.DS)]
    public class SRT_RTTI_GlobalConstants
    {
    }

    [RTTI.Serializable(0xDF393F5BE57DD7D7, GameType.DS)]
    public class SRT_RTTI_HairCollissionCB
    {
    }

    [RTTI.Serializable(0x73EB8D8A5DAB0CA3, GameType.DS)]
    public class SRT_RTTI_HairSimCB
    {
    }

    [RTTI.Serializable(0x7274566BA2247F3A, GameType.DS)]
    public class SRT_RTTI_HairSkinCB
    {
    }

    [RTTI.Serializable(0xF91AEDC116CAFFBE, GameType.DS)]
    public class SRT_RTTI_HeightFogSettingsCB
    {
    }

    [RTTI.Serializable(0xA9430828D618D0D4, GameType.DS)]
    public class SRT_RTTI_ImageBlendComputeConstants
    {
    }

    [RTTI.Serializable(0xBDD441008792F7CA, GameType.DS)]
    public class SRT_RTTI_ImageBlendComputeLayerInfo
    {
    }

    [RTTI.Serializable(0x5D7B91410A0C0707, GameType.DS)]
    public class SRT_RTTI_ImpactData
    {
    }

    [RTTI.Serializable(0xBDDCF84D5369536D, GameType.DS)]
    public class SRT_RTTI_InputData0
    {
    }

    [RTTI.Serializable(0xB451D4F5F0F332CC, GameType.DS)]
    public class SRT_RTTI_InstanceData
    {
    }

    [RTTI.Serializable(0xA7AD21C27B02890E, GameType.DS)]
    public class SRT_RTTI_InstanceWork
    {
    }

    [RTTI.Serializable(0xFD2A140197490FC8, GameType.DS)]
    public class SRT_RTTI_InteractionData
    {
    }

    [RTTI.Serializable(0x55833C1AB136AE5, GameType.DS)]
    public class SRT_RTTI_LensFlareConstants
    {
    }

    [RTTI.Serializable(0xDD2EA3D0FE9F3721, GameType.DS)]
    public class SRT_RTTI_LensFlareData
    {
    }

    [RTTI.Serializable(0x6F1EE9405537F435, GameType.DS)]
    public class SRT_RTTI_LightComposeIrradianceFullParams
    {
    }

    [RTTI.Serializable(0x478164CB00A24ACB, GameType.DS)]
    public class SRT_RTTI_LightComposeIrradianceFullParamsDx11
    {
    }

    [RTTI.Serializable(0x16E5FAAF9767B3E5, GameType.DS)]
    public class SRT_RTTI_LightComposeOutputParams
    {
    }

    [RTTI.Serializable(0xD4B2357E78ED23D0, GameType.DS)]
    public class SRT_RTTI_LightComposeTileParams
    {
    }

    [RTTI.Serializable(0xF6DE23DE45AE558C, GameType.DS)]
    public class SRT_RTTI_LightVolumeConstants
    {
    }

    [RTTI.Serializable(0xCA85442D7790A31E, GameType.DS)]
    public class SRT_RTTI_LightingMaterial
    {
    }

    [RTTI.Serializable(0xAF65B6A29AB992A9, GameType.DS)]
    public class SRT_RTTI_LightingProjectiveTextureData
    {
    }

    [RTTI.Serializable(0x218FD1760C5423FA, GameType.DS)]
    public class SRT_RTTI_LinearBufferComputeParams
    {
    }

    [RTTI.Serializable(0xE760180FC7E33D98, GameType.DS)]
    public class SRT_RTTI_LinearBufferState
    {
    }

    [RTTI.Serializable(0x80A5A095E8EA76AA, GameType.DS)]
    public class SRT_RTTI_LinkedListDepthValue
    {
    }

    [RTTI.Serializable(0x343DC6AC69D2B9D4, GameType.DS)]
    public class SRT_RTTI_MetaLight
    {
    }

    [RTTI.Serializable(0xC336EEED6604E656, GameType.DS)]
    public class SRT_RTTI_NormalBindings
    {
    }

    [RTTI.Serializable(0xEE62B919920B7545, GameType.DS)]
    public class SRT_RTTI_OcclusionCaptureBindings
    {
    }

    [RTTI.Serializable(0xB115CCC6C4482170, GameType.DS)]
    public class SRT_RTTI_OcclusionClearBindings
    {
    }

    [RTTI.Serializable(0xA5D6D753A4D9C8ED, GameType.DS)]
    public class SRT_RTTI_OcclusionDownsampleBindings
    {
    }

    [RTTI.Serializable(0xE2FE09BF1F9BEFC3, GameType.DS)]
    public class SRT_RTTI_OffscreenParams
    {
    }

    [RTTI.Serializable(0xCCB489BEC58A2135, GameType.DS)]
    public class SRT_RTTI_ParticleUpdateComputeParams
    {
    }

    [RTTI.Serializable(0x2B938053A3076F0B, GameType.DS)]
    public class SRT_RTTI_ParticleVertexGenerationDynamicParams
    {
    }

    [RTTI.Serializable(0x66AD3CECCCA3FF26, GameType.DS)]
    public class SRT_RTTI_ParticleVertexGenerationStaticParams
    {
    }

    [RTTI.Serializable(0xD7F6EFA4417D1629, GameType.DS)]
    public class SRT_RTTI_PlacementCommonSamplers
    {
    }

    [RTTI.Serializable(0x570171ED78D87B87, GameType.DS)]
    public class SRT_RTTI_PlacementComputeParams
    {
    }

    [RTTI.Serializable(0xA0A371B9FB22481B, GameType.DS)]
    public class SRT_RTTI_PlacementMatrixData
    {
    }

    [RTTI.Serializable(0x5C6EF096660F9BCC, GameType.DS)]
    public class SRT_RTTI_PlacementPipelineState
    {
    }

    [RTTI.Serializable(0xB431CC8570A3E5C8, GameType.DS)]
    public class SRT_RTTI_PlantComputeParams
    {
    }

    [RTTI.Serializable(0xF925586DCF84D854, GameType.DS)]
    public class SRT_RTTI_PostProcessDoFParams
    {
    }

    [RTTI.Serializable(0x7266CB4FFC2918D5, GameType.DS)]
    public class SRT_RTTI_PrecipitationOcclusionSampleParams
    {
    }

    [RTTI.Serializable(0xF2186029E03530ED, GameType.DS)]
    public class SRT_RTTI_PrecipitationOcclusionUpdateParams
    {
    }

    [RTTI.Serializable(0xE7F9A3FC923BF00E, GameType.DS)]
    public class SRT_RTTI_QueryClusterBindings
    {
    }

    [RTTI.Serializable(0xBA0AA3B53C44F15F, GameType.DS)]
    public class SRT_RTTI_QueryGlobalBindings
    {
    }

    [RTTI.Serializable(0xE05BDCF807AD230D, GameType.DS)]
    public class SRT_RTTI_QueryOutputBindings
    {
    }

    [RTTI.Serializable(0xE7A671E72D6067B1, GameType.DS)]
    public class SRT_RTTI_QueryPackedOutputBindings
    {
    }

    [RTTI.Serializable(0x27A2998E259063AF, GameType.DS)]
    public class SRT_RTTI_QueryShaderBounds
    {
    }

    [RTTI.Serializable(0x91F4615F7176012F, GameType.DS)]
    public class SRT_RTTI_QueryShaderConstants
    {
    }

    [RTTI.Serializable(0x56FFDF4311971291, GameType.DS)]
    public class SRT_RTTI_QueryShaderInstance
    {
    }

    [RTTI.Serializable(0xEB1C8B1181718C9A, GameType.DS)]
    public class SRT_RTTI_QueryShaderLod
    {
    }

    [RTTI.Serializable(0x3ECA4754CC562016, GameType.DS)]
    public class SRT_RTTI_QueryShaderMatrix
    {
    }

    [RTTI.Serializable(0x49D426CF20A29C5, GameType.DS)]
    public class SRT_RTTI_QueryShaderObject
    {
    }

    [RTTI.Serializable(0xB3D71151D10FC51A, GameType.DS)]
    public class SRT_RTTI_QueryShaderSetup
    {
    }

    [RTTI.Serializable(0x90B3A531845A9068, GameType.DS)]
    public class SRT_RTTI_QueryTileBindings
    {
    }

    [RTTI.Serializable(0xC54A5204AFD3E343, GameType.DS)]
    public class SRT_RTTI_RasterizerVariables
    {
    }

    [RTTI.Serializable(0x1670F5944BE9302E, GameType.DS)]
    public class SRT_RTTI_RasterizerVariablesExtended
    {
    }

    [RTTI.Serializable(0x8E7D5D5EFE69562D, GameType.DS)]
    public class SRT_RTTI_ReflectanceBindings
    {
    }

    [RTTI.Serializable(0x8D0D98380B5013E3, GameType.DS)]
    public class SRT_RTTI_RenderPassBindings
    {
    }

    [RTTI.Serializable(0x8F5AF8BB66018E40, GameType.DS)]
    public class SRT_RTTI_SSParticle
    {
    }

    [RTTI.Serializable(0xB5F87E810DFF1F19, GameType.DS)]
    public class SRT_RTTI_ShaderFogSettings
    {
    }

    [RTTI.Serializable(0x7E67ADE99481ACF7, GameType.DS)]
    public class SRT_RTTI_ShaderLightVolumeSettings
    {
    }

    [RTTI.Serializable(0x258ED352BBD2353F, GameType.DS)]
    public class SRT_RTTI_ShadowCubeMapSampleBindings
    {
    }

    [RTTI.Serializable(0xE154765B93556044, GameType.DS)]
    public class SRT_RTTI_ShadowMapConstants
    {
    }

    [RTTI.Serializable(0x1824AE144E97730, GameType.DS)]
    public class SRT_RTTI_ShadowMapSampleBindings
    {
    }

    [RTTI.Serializable(0xC59DB53CBA13FFE, GameType.DS)]
    public class SRT_RTTI_ShadowMapSampleConstants
    {
    }

    [RTTI.Serializable(0x712F64DF73A6DF82, GameType.DS)]
    public class SRT_RTTI_SharedTiledVertexParams
    {
    }

    [RTTI.Serializable(0xBD59A4F77743CC38, GameType.DS)]
    public class SRT_RTTI_SimulationLink
    {
    }

    [RTTI.Serializable(0xB799165F6DD3F700, GameType.DS)]
    public class SRT_RTTI_SimulationPointSettings
    {
    }

    [RTTI.Serializable(0x2FBBA2BA19090D92, GameType.DS)]
    public class SRT_RTTI_SkinnedMeshBatchData
    {
    }

    [RTTI.Serializable(0x7091F900DB4AA404, GameType.DS)]
    public class SRT_RTTI_SkinnedMeshInstanceData
    {
    }

    [RTTI.Serializable(0xA7314DDBE18C25CC, GameType.DS)]
    public class SRT_RTTI_SnowInteractionBatchSampleParams
    {
    }

    [RTTI.Serializable(0x4C4AC88E39B65B39, GameType.DS)]
    public class SRT_RTTI_SnowInteractionSampleParams
    {
    }

    [RTTI.Serializable(0xD50E27A7057CBF25, GameType.DS)]
    public class SRT_RTTI_SnowInteractionUpdateParams
    {
    }

    [RTTI.Serializable(0xD57BC5581078F6BC, GameType.DS)]
    public class SRT_RTTI_SoundCollisionMapEntry
    {
    }

    [RTTI.Serializable(0xAF57B29A867B0D7D, GameType.DS)]
    public class SRT_RTTI_SoundInstanceData
    {
    }

    [RTTI.Serializable(0x8D92C90147D01948, GameType.DS)]
    public class SRT_RTTI_SoundObstructionData
    {
    }

    [RTTI.Serializable(0x38B229E144605731, GameType.DS)]
    public class SRT_RTTI_SoundObstructionSampleComputeJobResources
    {
    }

    [RTTI.Serializable(0xD71618C556D095, GameType.DS)]
    public class SRT_RTTI_StreamingCheckActivationComputeJobResources
    {
    }

    [RTTI.Serializable(0x5D7D985CBEF0110B, GameType.DS)]
    public class SRT_RTTI_StreamingPriorityGPUComputeJobResources
    {
    }

    [RTTI.Serializable(0xD4944B844FED9528, GameType.DS)]
    public class SRT_RTTI_SunShadowProjectionConstants
    {
    }

    [RTTI.Serializable(0xFC36FFF637A1271F, GameType.DS)]
    public class SRT_RTTI_SunShadowProjectionSettings
    {
    }

    [RTTI.Serializable(0x545F21A51AD1D810, GameType.DS)]
    public class SRT_RTTI_SunShadowSampleConstants
    {
    }

    [RTTI.Serializable(0xB0FA7668022EF366, GameType.DS)]
    public class SRT_RTTI_SunShadowSampleSettings
    {
    }

    [RTTI.Serializable(0x919ACCAE1576357, GameType.DS)]
    public class SRT_RTTI_Texture3DBlurCB
    {
    }

    [RTTI.Serializable(0xBEFDB57B14534A1A, GameType.DS)]
    public class SRT_RTTI_VegetationInteractionSampleParams
    {
    }

    [RTTI.Serializable(0x83B31A073833F5DE, GameType.DS)]
    public class SRT_RTTI_VegetationInteractionUpdateParams
    {
    }

    [RTTI.Serializable(0x2BDF64E650646666, GameType.DS)]
    public class SRT_RTTI_ViewConstants
    {
    }

    [RTTI.Serializable(0x5645B78F8D59C433, GameType.DS)]
    public class SRT_RTTI_VolumeLightAreaCB
    {
    }

    [RTTI.Serializable(0xF2D38960B3AE292F, GameType.DS)]
    public class SRT_RTTI_WaterInteractionSampleParams
    {
    }

    [RTTI.Serializable(0xD5E9B20EE0C3DE08, GameType.DS)]
    public class SRT_RTTI_WorldDataCacheComputeJobResources
    {
    }

    [RTTI.Serializable(0xC8372EA346E234FC, GameType.DS)]
    public class SRT_RTTI_WorldDataProbeTextureCopyCB
    {
    }

    [RTTI.Serializable(0x5339D2B8987FB75E, GameType.DS)]
    public class SRT_RTTI_WorldDataTileSRTData
    {
    }

    [RTTI.Serializable(0x48118E500BC381AD, GameType.DS)]
    public class SRT_RTTI_WorldDataTypePackingSRTData
    {
    }

    [RTTI.Serializable(0x21E757740A024A7A, GameType.DS)]
    public class SRT_RTTI_WorldMapHeightSampleComputeResources
    {
    }

    [RTTI.Serializable(0x3AEB87E58D98D8CB, GameType.DS)]
    public class SRT_RTTI_float
    {
    }

    [RTTI.Serializable(0x60D05D04790741A3, GameType.DS)]
    public class SRT_RTTI_float2
    {
    }

    [RTTI.Serializable(0x696490301D279D50, GameType.DS)]
    public class SRT_RTTI_float3
    {
    }

    [RTTI.Serializable(0x960697B893A82A0F, GameType.DS)]
    public class SRT_RTTI_float4
    {
    }

    [RTTI.Serializable(0xC6EA40795135EED4, GameType.DS)]
    public class SRT_RTTI_int
    {
    }

    [RTTI.Serializable(0xB6804A97C32C1F80, GameType.DS)]
    public class SRT_RTTI_int2
    {
    }

    [RTTI.Serializable(0xC5AE416E7A923A3E, GameType.DS)]
    public class SRT_RTTI_int3
    {
    }

    [RTTI.Serializable(0x254FC20DB639F7BE, GameType.DS)]
    public class SRT_RTTI_int4
    {
    }

    [RTTI.Serializable(0x994E23EB38188F79, GameType.DS)]
    public class SRT_RTTI_uint
    {
    }

    [RTTI.Serializable(0xA704C4502B227BD3, GameType.DS)]
    public class SRT_RTTI_uint2
    {
    }

    [RTTI.Serializable(0xE3BB2417DA7D66AC, GameType.DS)]
    public class SRT_RTTI_uint3
    {
    }

    [RTTI.Serializable(0x2DEB3ABF2100D22C, GameType.DS)]
    public class SRT_RTTI_uint4
    {
    }

    [RTTI.Serializable(0xAD5CFD8252EF3D1F, GameType.DS)]
    public class SSAORendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> SSAOShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> SSAOFilterShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> SSAOTemporalFilterShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> SSAODownSampleShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> SSAOInjectionShader;
    }

    [RTTI.Serializable(0xEA1B9824AE4C364C, GameType.DS)]
    public class SSAOSettingsResource : Resource
    {
        [RTTI.Member(5, 0x40, "Settings")] public float Intensity;
        [RTTI.Member(3, 0x48, "Settings")] public float Directionality;
        [RTTI.Member(4, 0x50, "Settings")] public Vec3 Direction;
        [RTTI.Member(6, 0x70, "Settings")] public Array<TextureLUTEntry> RadiusSettings;
    }

    [RTTI.Serializable(0x5B8E1162AB632EA4, GameType.DS)]
    public class SamplePatternResource : Resource
    {
        [RTTI.Member(3, 0x20, "Data")] public Array<Vec3> SamplePoints;
        [RTTI.Member(4, 0x30, "Data")] public Vec3 Range;
        [RTTI.Member(5, 0x40, "Data")] public Array<float> Distances;
    }

    [RTTI.Serializable(0x129FB4C1A7E441C6, GameType.DS)]
    public class SampledAnimationEvent
    {
        [RTTI.Member(1, 0x0, "General")] public AnimationEventID AnimationEvent;
        [RTTI.Member(2, 0x4, "General")] public float Duration;
        [RTTI.Member(3, 0x8, "General")] public float Fraction;
    }

    [RTTI.Serializable(0x8EA6D994A02EF481, GameType.DS)]
    public class SampledAnimationEventTrack
    {
        [RTTI.Member(1, 0x0, "General")] public int ID;
        [RTTI.Member(3, 0x8, "General")] public HashSet<AnimationEventID> EventIDs;
        [RTTI.Member(2, 0x18, "General")] public Array<SampledAnimationEvent> Events;
    }

    [RTTI.Serializable(0x67A1923D7EBBD719, GameType.DS)]
    public class SamplerBindingWithHandle : ShaderSamplerBinding
    {
        [RTTI.Member(2, 0x8)] public HwBindingHandle SamplerBindingHandle;
    }

    [RTTI.Serializable(0x5F9290FC72ED8416, GameType.DS)]
    public class SavePoint : AIMarker
    {
        [RTTI.Member(7, 0x70, "Logic")] public Ref<ConditionResource> Condition;
        [RTTI.Member(8, 0x78, "Logic")] public Ref<DiscoverableArea> DiscoverableArea;
    }

    [RTTI.Serializable(0xE972BB7195F206EE, GameType.DS)]
    public class ScaleEntityFromAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCC96705D86D22410, GameType.DS)]
    public class ScaleEntityFromAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String ScaleMessageName;
        [RTTI.Member(4, 0x28, "Logic")] public String ScaleMessagePresetName;
    }

    [RTTI.Serializable(0x465351B9AD25090F, GameType.DS)]
    public class ScavengeHelperComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6EEB1FB1A0EA05C, GameType.DS)]
    public class ScavengeHelperComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<ScavengeHelperResource>> Helpers;
    }

    [RTTI.Serializable(0xFB94BD9BE465E277, GameType.DS)]
    public class ScavengeHelperResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String HelperName;
        [RTTI.Member(4, 0x28, "General")] public float Radius;
    }

    [RTTI.Serializable(0x81B875D2AA3213B, GameType.DS)]
    public class Scene : PrefabBaseInstance
    {
        [RTTI.Member(26, 0x118, "General")] public Ref<ConditionResource> ActivateCondition;
        [RTTI.Member(22, 0x120, "General")] public Array<Ref<ScenePrefabInstance>> SubScenes;
        [RTTI.Member(23, 0x130, "General")] public Array<Ref<Scene>> SubScenesNonPrefab;
        [RTTI.Member(24, 0x140, "General")] public Ref<ObjectCollection> NonStreamingObjectCollection;
        [RTTI.Member(25, 0x158, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
        [RTTI.Member(27, 0x160, "General")] public StreamingRef<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(28, 0x168, "General")] public StreamingRef<OverrideGraphProgramResource> OverrideGraphProgramResource;
        [RTTI.Member(30, 0x170, "Generated")] public Ref<SceneObjectInfo> GeneratedObjectInfo;
        [RTTI.Member(10, 0x1C0, "General")] public Array<SpawnSetupOverride> SpawnSetupOverrides;
        [RTTI.Member(11, 0x1D0, "General")] public Array<SpawnFactOverride> SpawnFactOverrides;
        [RTTI.Member(14, 0x208, "General")] public bool AutoStart;
        [RTTI.Member(15, 0x209, "General")] public bool ResetStartedOutsideActivationRadius;
        [RTTI.Member(12, 0x20A, "General")] public bool FactsArePersistent;
        [RTTI.Member(13, 0x210, "General")] public Array<Ref<FactValueBase>> Facts;
        [RTTI.Member(32, 0x221, "Streaming")] public bool NeedsCollision;
        [RTTI.Member(33, 0x222, "Streaming")] public bool NeedsLoadingScreen;
        [RTTI.Member(34, 0x223, "Streaming")] public bool IgnoreHeight;
        [RTTI.Member(35, 0x224, "Streaming")] public bool BoostStreamingPriority;
        [RTTI.Member(38, 0x228, "Streaming")] public float EncounterRadius;
        [RTTI.Member(39, 0x22C, "Streaming")] public float ActivationRadius;
        [RTTI.Member(40, 0x240, "Streaming")] public ESceneActivationType ActivationType;
        [RTTI.Member(16, 0x258, "General")] public Ref<ConditionResource> StreamingCondition;
        [RTTI.Member(36, 0x28A, "Streaming")] public bool IsInsideEncounterDeactivate;
        [RTTI.Member(37, 0x28B, "Streaming")] public bool IsInHighTileDeactivate;
        [RTTI.Member(47, 0x298, "WorldEncounter", true)] public bool IsEnabled;
        [RTTI.Member(21, 0x2E0, "General")] public Ref<SceneExtensionParameter> ExtensionParameter;
        [RTTI.Member(45, 0x36B, "PlayGo")] public bool ExcludeFromInitialChunk;
        [RTTI.Member(17, 0x370, "General")] public Ref<BooleanFact> ForceUnloadFact;
        [RTTI.Member(18, 0x378, "General")] public Ref<BooleanFact> ForceDeactivateFact;
        [RTTI.Member(19, 0x380, "General")] public Ref<BooleanFact> ForceHintFact;
        [RTTI.Member(20, 0x388, "General")] public Ref<RTTIRefObject> ForceFactContext;
        [RTTI.Member(41, 0x390, "Streaming")] public float OverrideHintRadius;
        [RTTI.Member(42, 0x394, "Streaming")] public float DebugScale;
        [RTTI.Member(43, 0x398, "Streaming")] public float MinimumLoadTime;
    }

    [RTTI.Serializable(0x3D79AD8DE91F06A8, GameType.DS)]
    public class SceneActivationCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(13, 0xF0, "General")] public ESceneActivationTriggerType TriggerType;
    }

    [RTTI.Serializable(0x89F12E3A7F54D497, GameType.DS)]
    public class SceneComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x30B25F05FDBF4D34, GameType.DS)]
    public class SceneComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool BroadcastToAllScenes;
    }

    [RTTI.Serializable(0xE7018AD0394B8E6B, GameType.DS)]
    public class SceneComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x61A80D5E9CA27A74, GameType.DS)]
    public class SceneEntityImpostorInfo
    {
        [RTTI.Member(0, 0x0)] public Ref<EntityImpostorResource> ImpostorResource;
        [RTTI.Member(1, 0x8)] public Ref<AIRoad> ImpostorRoute;
        [RTTI.Member(2, 0x10)] public EEntityImpostorDirection ImpostorRouteDirection;
        [RTTI.Member(3, 0x18)] public Ref<BooleanFact> ImpostorVisibleFact;
    }

    [RTTI.Serializable(0x878AE2623FBCF50C, GameType.DS)]
    public class SceneEventListener
    {
    }

    [RTTI.Serializable(0x370B943788A86408, GameType.DS)]
    public class SceneExtensionParameter : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public bool IsActiveForBaking;
    }

    [RTTI.Serializable(0xB4DDC51B95BA092D, GameType.DS)]
    public class SceneForwardRendererSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> ForwardRendererCompositeShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> ForwardDepthResolveShader;
    }

    [RTTI.Serializable(0xE0317628012AEF9F, GameType.DS)]
    public class SceneInstance : ScenePrefabInstance
    {
        [RTTI.Member(37, 0x150, "General")] public Ref<Scene> SceneResource;
    }

    [RTTI.Serializable(0xA2299D6E339F47F3, GameType.DS)]
    public class SceneInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7FFE1D958322C5F8, GameType.DS)]
    public class SceneManager : SceneEventListener
    {
    }

    [RTTI.Serializable(0x981E1BBBECAD691, GameType.DS)]
    public class SceneObjectInfo : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<SceneObjectInfoEntry> ObjectInfos;
        [RTTI.Member(3, 0x30)] public HashMap<GGUUID_SceneEntityImpostorInfo> EntityImpostors;
    }

    [RTTI.Serializable(0x9C701AB04870D0D6, GameType.DS)]
    public class SceneObjectInfoEntry
    {
        [RTTI.Member(0, 0x0)] public GGUUID UUID;
        [RTTI.Member(1, 0x10)] public Mat44 LocalTransform;
    }

    [RTTI.Serializable(0xEDC1312EB3FC3E70, GameType.DS)]
    public class ScenePrefabInstance : PrefabBaseInstance
    {
        [RTTI.Member(10, 0xB0, "Prefab")] public Ref<Scene> SourceScene;
        [RTTI.Member(12, 0xB8, "General")] public Array<SpawnSetupOverride> SpawnSetupOverrides;
        [RTTI.Member(13, 0xC8, "General")] public Array<SpawnFactOverride> SpawnFactOverrides;
        [RTTI.Member(16, 0xD8, "General")] public bool AutoStart;
        [RTTI.Member(17, 0xD9, "General")] public bool ResetStartedOutsideActivationRadius;
        [RTTI.Member(14, 0xDA, "General")] public bool FactsArePersistent;
        [RTTI.Member(15, 0xE0, "General")] public Array<Ref<FactValueBase>> Facts;
        [RTTI.Member(27, 0xF0, "Streaming")] public bool NeedsCollision;
        [RTTI.Member(28, 0xF1, "Streaming")] public bool NeedsLoadingScreen;
        [RTTI.Member(29, 0xF2, "Streaming")] public bool IgnoreHeight;
        [RTTI.Member(25, 0xF8, "General")] public Ref<SceneExtensionParameter> ExtensionParameter;
        [RTTI.Member(21, 0x100, "General")] public Ref<BooleanFact> ForceUnloadFact;
        [RTTI.Member(22, 0x108, "General")] public Ref<BooleanFact> ForceDeactivateFact;
        [RTTI.Member(23, 0x110, "General")] public Ref<BooleanFact> ForceHintFact;
        [RTTI.Member(24, 0x118, "General")] public Ref<RTTIRefObject> ForceFactContext;
        [RTTI.Member(33, 0x120, "Streaming")] public float OverrideHintRadius;
        [RTTI.Member(34, 0x124, "Streaming")] public float DebugScale;
        [RTTI.Member(35, 0x128, "Streaming")] public float MinimumLoadTime;
        [RTTI.Member(30, 0x130, "Streaming")] public float EncounterRadius;
        [RTTI.Member(31, 0x134, "Streaming")] public float ActivationRadius;
        [RTTI.Member(32, 0x138, "Streaming")] public ESceneActivationType ActivationType;
        [RTTI.Member(20, 0x13C, "General")] public EActivateConditionRelation ResourceActivateConditionRelation;
        [RTTI.Member(18, 0x140, "General")] public Ref<ConditionResource> StreamingCondition;
        [RTTI.Member(19, 0x148, "General")] public Ref<ConditionResource> ActivateCondition;
    }

    [RTTI.Serializable(0x4FCA78DE92D06007, GameType.DS)]
    public class ScenePrefabInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5E7FFEFBD6052997, GameType.DS)]
    public class SceneRemovalActivationPolicy : EntityActivationPolicy
    {
        [RTTI.Member(5, 0x38, "Logic")] public float DeactivationRadius;
    }

    [RTTI.Serializable(0x9D4E14B6A690471C, GameType.DS)]
    public class SceneRenderDeferredSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Textures")] public Ref<Texture> LightVolumeSampleNoise1Texture;
        [RTTI.Member(4, 0x28, "Textures")] public Ref<Texture> LightVolumeSampleNoise2Texture;
        [RTTI.Member(5, 0x30, "Textures")] public Ref<Texture> LightVolumeSampleNoise3Texture;
    }

    [RTTI.Serializable(0xE159DD6E759CEB32, GameType.DS)]
    public class SceneRenderUtilSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ScreenSpaceQueryResource> ScreenSpaceQueryResource;
    }

    [RTTI.Serializable(0xE3DC5815849D6455, GameType.DS)]
    public class SceneResource : Scene
    {
    }

    [RTTI.Serializable(0xD9D5BF6BB59525FE, GameType.DS)]
    public class SceneSchedule : GameSchedule
    {
    }

    [RTTI.Serializable(0x15B0706D7C346B24, GameType.DS)]
    public class SceneScheduleEntry : GameScheduleEntry
    {
    }

    [RTTI.Serializable(0xEAB22412CB70C738, GameType.DS)]
    public class SceneScheduleEntryResource : GameScheduleEntryResource
    {
        [RTTI.Member(6, 0x30)] public Ref<AIMarker> StartLocation;
        [RTTI.Member(7, 0x38)] public Ref<AIMarker> EndLocation;
    }

    [RTTI.Serializable(0xD17D5D6BE4F3C5FA, GameType.DS)]
    public class SceneScheduleResource : GameScheduleResource
    {
        [RTTI.Member(6, 0x38, "Scene")] public float SimulatedMovementSpeed;
    }

    [RTTI.Serializable(0x6F4E68210CD884, GameType.DS)]
    public class SceneSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x649BDEE74AA58FFE, GameType.DS)]
    public class ScheduledScene : Scene
    {
        [RTTI.Member(49, 0x3A0, "Schedule")] public Ref<SceneScheduleResource> Schedule;
        [RTTI.Member(50, 0x3B0, "Schedule")] public EAIRoadUsableBy UsesRoads;
    }

    [RTTI.Serializable(0x9EBC1B9D0FDC5508, GameType.DS)]
    public class ScheduledSceneInstance : ScheduledScenePrefabInstance
    {
        [RTTI.Member(40, 0x160, "General")] public Ref<Scene> SceneResource;
    }

    [RTTI.Serializable(0x1EE413C0A8039282, GameType.DS)]
    public class ScheduledScenePrefabInstance : ScenePrefabInstance
    {
        [RTTI.Member(37, 0x150, "Schedule")] public Ref<SceneScheduleResource> Schedule;
        [RTTI.Member(38, 0x158, "Schedule")] public EAIRoadUsableBy UsesRoads;
    }

    [RTTI.Serializable(0xE99F5B88125692A1, GameType.DS)]
    public class ScreenEffectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA20949D192B7F2CC, GameType.DS)]
    public class ScreenEffectEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<ScreenEffectResource> ScreenEffectResource;
        [RTTI.Member(13, 0x48, "Logic")] public float BlendWeight;
        [RTTI.Member(14, 0x50, "Logic")] public Ref<CurveResource> BlendWeightCurveResource;
        [RTTI.Member(15, 0x58, "Logic")] public bool AutoScaleCurve;
    }

    [RTTI.Serializable(0xD7BC5480976D7651, GameType.DS)]
    public class ScreenEffectResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<PostProcessSettingsResource> PostProcessSettingsResource;
        [RTTI.Member(3, 0x28)] public float BlendWeight;
        [RTTI.Member(4, 0x2C)] public int Priority;
    }

    [RTTI.Serializable(0x474E72A1BB8B4678, GameType.DS)]
    public class ScreenSpaceQueryResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<RenderEffectResource> RenderEffectsResource;
    }

    [RTTI.Serializable(0xD002089C3669BFB1, GameType.DS)]
    public class ScreenSpaceVisibilityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE1729AE41C658375, GameType.DS)]
    public class ScreenSpaceVisibilityComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xD495FEE9FCC931CC, GameType.DS)]
    public class ScreenSpaceVisibilityManager : RTTIObject
    {
        [RTTI.BaseClass(0x10)] public DrawableObjectInstance @DrawableObjectInstance;
    }

    [RTTI.Serializable(0x2D171B14B16F707, GameType.DS)]
    public class ScriptGameGlobal
    {
        [RTTI.Member(0, 0x0, true)] public String Name;
        [RTTI.Member(1, 0x8, true)] public float Value;
    }

    [RTTI.Serializable(0xCBBED1C4B8BB3B39, GameType.DS)]
    public class ScriptInterface : CoreObject
    {
    }

    [RTTI.Serializable(0xAF007861AD34ECAE, GameType.DS)]
    public class ScriptPauseEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x5B75A74D0E4A193C, GameType.DS)]
    public class ScriptPauseEventResource : PauseEventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public String Message;
    }

    [RTTI.Serializable(0xCF14628CA7A887EA, GameType.DS)]
    public class ScrollbarWidget : Widget
    {
    }

    [RTTI.Serializable(0xE21C7E251F6611A1, GameType.DS)]
    public class ScrollingPanelTag : VisualTag
    {
    }

    [RTTI.Serializable(0x60971A26CA2329C2, GameType.DS)]
    public class ScrollingPanelWidget : Widget
    {
    }

    [RTTI.Serializable(0x68FE963D9BA02E26, GameType.DS)]
    public class SelectResource : ResourceSelectorBase
    {
    }

    [RTTI.Serializable(0x26B5EB357B9D30E7, GameType.DS)]
    public class SelectResourceByAnimTag : SelectResource
    {
        [RTTI.Member(6, 0x38, "Logic")] public ESelectByPropertyContext Context;
        [RTTI.Member(7, 0x40, "Logic")] public Array<SelectResourceByAnimTagTest> Tests;
    }

    [RTTI.Serializable(0xD972F021063609D5, GameType.DS)]
    public class SelectResourceByAnimTagTest
    {
        [RTTI.Member(0, 0x0)] public String Tag;
    }

    [RTTI.Serializable(0x168E2F392EF211E2, GameType.DS)]
    public class SelectResourceByBool : SelectResourceByProperty
    {
        [RTTI.Member(8, 0x40, "Logic")] public Array<SelectResourceByBoolTest> Tests;
    }

    [RTTI.Serializable(0x9C189D006F26FF15, GameType.DS)]
    public class SelectResourceByBoolFact : SelectResourceByFact
    {
        [RTTI.Member(8, 0x40, "Logic")] public Array<SelectResourceByBoolFactTest> Tests;
    }

    [RTTI.Serializable(0xD80FDC3E9A23A6A6, GameType.DS)]
    public class SelectResourceByBoolFactTest
    {
        [RTTI.Member(0, 0x0)] public Ref<BooleanFact> Link;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0x30204DFBE5911797, GameType.DS)]
    public class SelectResourceByBoolTest
    {
        [RTTI.Member(0, 0x0)] public Ref<BoolPropertyBase> Link;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0x53B1052380CE40B0, GameType.DS)]
    public class SelectResourceByCameraMode : SelectResource
    {
        [RTTI.Member(6, 0x38, "Logic")] public Array<SelectResourceByCameraModeTest> Tests;
    }

    [RTTI.Serializable(0x75A5C42838C9B8E1, GameType.DS)]
    public class SelectResourceByCameraModeTest
    {
        [RTTI.Member(0, 0x0)] public ECameraModeComparator Compare;
        [RTTI.Member(1, 0x8)] public Ref<CameraModeResource> Mode;
    }

    [RTTI.Serializable(0xBC22FEEBD6C6518A, GameType.DS)]
    public class SelectResourceByCondition : SelectResource
    {
        [RTTI.Member(6, 0x38, "Logic")] public Array<Ref<ConditionResource>> Tests;
    }

    [RTTI.Serializable(0x8B792C674D6321E8, GameType.DS)]
    public class SelectResourceByEnumFact : SelectResourceByFact
    {
        [RTTI.Member(8, 0x40, "Logic")] public Array<SelectResourceByEnumFactTest> Tests;
    }

    [RTTI.Serializable(0xD30886C9DDCD7DA1, GameType.DS)]
    public class SelectResourceByEnumFactTest
    {
        [RTTI.Member(0, 0x0)] public Ref<EnumFact> Link;
        [RTTI.Member(1, 0x8)] public Ref<EnumFactEntry> Value;
        [RTTI.Member(2, 0x10)] public EComparator Compare;
    }

    [RTTI.Serializable(0x946AE5CCB940F3D9, GameType.DS)]
    public class SelectResourceByFact : SelectResource
    {
        [RTTI.Member(6, 0x38, "Logic")] public ESelectByFactContext Context;
    }

    [RTTI.Serializable(0xB0EA0253513F24B6, GameType.DS)]
    public class SelectResourceByFloat : SelectResourceByProperty
    {
        [RTTI.Member(8, 0x40, "Logic")] public Array<SelectResourceByFloatTest> Tests;
    }

    [RTTI.Serializable(0x3F25729C924AAC39, GameType.DS)]
    public class SelectResourceByFloatFact : SelectResourceByFact
    {
        [RTTI.Member(8, 0x40, "Logic")] public Array<SelectResourceByFloatFactTest> Tests;
    }

    [RTTI.Serializable(0x4B036C7F5746A43D, GameType.DS)]
    public class SelectResourceByFloatFactTest
    {
        [RTTI.Member(0, 0x0)] public Ref<FloatFact> Link;
        [RTTI.Member(2, 0x8)] public float Value;
        [RTTI.Member(1, 0xC)] public EComparator Compare;
    }

    [RTTI.Serializable(0x44D256512A8655A9, GameType.DS)]
    public class SelectResourceByFloatTest
    {
        [RTTI.Member(0, 0x0)] public Ref<FloatPropertyBase> Link;
        [RTTI.Member(1, 0x8)] public EComparator Compare;
        [RTTI.Member(2, 0xC)] public float Value;
    }

    [RTTI.Serializable(0xFA4A853460BA1A9C, GameType.DS)]
    public class SelectResourceByGraphProgram : SelectResource
    {
        [RTTI.Member(6, 0x38, "Logic")] public Array<Ref<GraphProgramResource>> Tests;
    }

    [RTTI.Serializable(0x49A0E34E1609C7F2, GameType.DS)]
    public class SelectResourceByInt : SelectResourceByProperty
    {
        [RTTI.Member(8, 0x40, "Logic")] public Array<SelectResourceByIntTest> Tests;
    }

    [RTTI.Serializable(0x750C22E36FD2CD50, GameType.DS)]
    public class SelectResourceByIntTest
    {
        [RTTI.Member(0, 0x0)] public Ref<IntPropertyBase> Link;
        [RTTI.Member(1, 0x8)] public EComparator Compare;
        [RTTI.Member(2, 0xC)] public int Value;
    }

    [RTTI.Serializable(0x847DFED7F6AF354C, GameType.DS)]
    public class SelectResourceByIntegerFact : SelectResourceByFact
    {
        [RTTI.Member(8, 0x40, "Logic")] public Array<SelectResourceByIntegerFactTest> Tests;
    }

    [RTTI.Serializable(0x6C2D46CE628598F9, GameType.DS)]
    public class SelectResourceByIntegerFactTest
    {
        [RTTI.Member(0, 0x0)] public Ref<IntegerFact> Link;
        [RTTI.Member(2, 0x8)] public int Value;
        [RTTI.Member(1, 0xC)] public EComparator Compare;
    }

    [RTTI.Serializable(0x23168C282A3884C3, GameType.DS)]
    public class SelectResourceByProperty : SelectResource
    {
        [RTTI.Member(6, 0x38, "Logic")] public ESelectByPropertyContext Context;
    }

    [RTTI.Serializable(0x8960A79AC0619C44, GameType.DS)]
    public class SelectViewItemTag : VisualTag
    {
    }

    [RTTI.Serializable(0xA6806BD18BDD8DBB, GameType.DS)]
    public class SelectViewItemWidget : Widget
    {
    }

    [RTTI.Serializable(0xC18B4DCB3C03F4EE, GameType.DS)]
    public class SelectViewTag : ListItemTag
    {
    }

    [RTTI.Serializable(0x83F6CFDD8D561809, GameType.DS)]
    public class SelectViewWidget : Widget
    {
    }

    [RTTI.Serializable(0xA6C423FE3B740A5A, GameType.DS)]
    public class SendMessageEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x29117268DDF0D183, GameType.DS)]
    public class SendMessageEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public String Message;
    }

    [RTTI.Serializable(0x1EBDE51154254DA5, GameType.DS)]
    public class SendMessageToClientsRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> RecipientOnlineIDs;
        [RTTI.Member(3, 0x30)] public Ref<MessageData> MessageData;
    }

    [RTTI.Serializable(0xC144982A3EE1E95D, GameType.DS)]
    public class SentenceGroupResource : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "General")] public ESentenceGroupType Type;
        [RTTI.Member(7, 0x40, "General")] public Array<Ref<SentenceResource>> Sentences;
    }

    [RTTI.Serializable(0x8C3344BB240E7D, GameType.DS)]
    public class SentenceGroupResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAD7F486B5DD745A4, GameType.DS)]
    public class SentenceResource : Resource
    {
        [RTTI.Member(4, 0x20, "General")] public ESentenceDelivery Delivery;
        [RTTI.Member(5, 0x24, "General")] public float PostDelay;
        [RTTI.Member(3, 0x28, "General")] public bool ShowSubtitles;
        [RTTI.Member(6, 0x30, "General")] public Ref<LocalizedSimpleSoundResource> SimpleSound;
        [RTTI.Member(7, 0x38, "General")] public Ref<LocalizedAnimationResource> Animation;
        [RTTI.Member(8, 0x40, "General")] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(9, 0x48, "General")] public Ref<VoiceResource> Voice;
    }

    [RTTI.Serializable(0x1CF432CC3EB4824, GameType.DS)]
    public class SentenceResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x25E9540FF0E3BBD2, GameType.DS)]
    public class Sequence : Entity
    {
    }

    [RTTI.Serializable(0xD4B6DCE94FB34562, GameType.DS)]
    public class SequenceBlendSettings
    {
        [RTTI.Member(0, 0x0)] public int BlendFrames;
    }

    [RTTI.Serializable(0xD5E76AF839BBF3A3, GameType.DS)]
    public class SequenceCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0x272F413AC587940, GameType.DS)]
    public class SequenceCameraEntityRep : CameraEntityRep
    {
    }

    [RTTI.Serializable(0xE5036B7A9234B73F, GameType.DS)]
    public class SequenceCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(55, 0x1B8, "Input")] public float HeadingSpeed;
        [RTTI.Member(56, 0x1BC, "Input")] public float MinHeading;
        [RTTI.Member(57, 0x1C0, "Input")] public float MaxHeading;
        [RTTI.Member(58, 0x1C4, "Input")] public float PitchSpeed;
        [RTTI.Member(59, 0x1C8, "Input")] public float MinPitch;
        [RTTI.Member(60, 0x1CC, "Input")] public float MaxPitch;
    }

    [RTTI.Serializable(0x7D5C0844286C31AB, GameType.DS)]
    public class SequenceComponent : EntityComponent
    {
        [RTTI.Member(6, 0x50, "Sequence", true)] public CPtr<Sequence> Sequence;
    }

    [RTTI.Serializable(0x56F74E8BCC96C2E8, GameType.DS)]
    public class SequenceComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x32697FDC321731B6, GameType.DS)]
    public class SequenceEntity : Entity
    {
    }

    [RTTI.Serializable(0xE2C548976B8FFD43, GameType.DS)]
    public class SequenceEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x77385CBF298FDAA, GameType.DS)]
    public class SequenceEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0xDE68B01EED41C160, GameType.DS)]
    public class SequenceEntityVariable : SequenceLocatorVariable
    {
        [RTTI.Member(5, 0x30, "Logic")] public bool StopOnDeath;
        [RTTI.Member(6, 0x31, "Logic")] public bool StopOnDamage;
        [RTTI.Member(7, 0x32, "Logic")] public bool StopOnAlerted;
        [RTTI.Member(8, 0x33, "Logic")] public bool DismountOnAlertedOrDamage;
        [RTTI.Member(9, 0x38, "Logic")] public Array<Ref<BooleanFact>> IsActiveFacts;
        [RTTI.Member(10, 0x48, "Logic")] public Array<Ref<EntityComponentResource>> ExtraComponents;
    }

    [RTTI.Serializable(0x94A6E8F84C8118D3, GameType.DS)]
    public class SequenceEntityVariableInstance : SequenceLocatorVariableInstance
    {
    }

    [RTTI.Serializable(0xCC84B2AEA50E8AFE, GameType.DS)]
    public class SequenceEntityVariableSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x663F1C278D265BBD, GameType.DS)]
    public class SequenceEventEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC80789D0222A7BAB, GameType.DS)]
    public class SequenceEventEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<SequenceResource> SequenceResource;
    }

    [RTTI.Serializable(0x99059072DBC8B4B6, GameType.DS)]
    public class SequenceHideBehaviorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB5DD9C2732C393BA, GameType.DS)]
    public class SequenceHideBehaviorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public ESequenceHideBehavior HideBehavior;
    }

    [RTTI.Serializable(0x26A3DFFEB8A5CDA8, GameType.DS)]
    public class SequenceLocatorVariable : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<SequenceLocatorVariable>> Children;
    }

    [RTTI.Serializable(0x560278413AF8E518, GameType.DS)]
    public class SequenceLocatorVariableInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x64A94C4D76A1FB47, GameType.DS)]
    public class SequenceNetworkAIObstacle : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<AIDynamicObstacleCircleResource> ObstacleResource;
        [RTTI.Member(3, 0x28)] public Ref<AIFaction> ObstacleFaction;
    }

    [RTTI.Serializable(0xC07331127211CCD7, GameType.DS)]
    public class SequenceNetworkBooleanFactNode : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public Ref<BooleanFact> Fact;
        [RTTI.Member(3, 0x28)] public ESequenceNetworkFactContextType FactContextType;
        [RTTI.Member(4, 0x30)] public Ref<SequenceNetworkNode> TrueNode;
        [RTTI.Member(5, 0x38)] public Ref<SequenceNetworkNode> FalseNode;
    }

    [RTTI.Serializable(0xBE339A8941E3C664, GameType.DS)]
    public class SequenceNetworkBooleanFactNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x2DFE58D2731DAD0F, GameType.DS)]
    public class SequenceNetworkBranch : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public Array<CPtr<SequenceNetworkNode>> Nodes;
        [RTTI.Member(3, 0x30)] public ESequenceNetworkBranchSelectionMode NodeSelectionMode;
    }

    [RTTI.Serializable(0x9E5AAE8EF28B846A, GameType.DS)]
    public class SequenceNetworkBranchInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0xF41A50A80C751B63, GameType.DS)]
    public class SequenceNetworkComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1B5338297CBB2E76, GameType.DS)]
    public class SequenceNetworkComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<SequenceNetworkResource> SequenceNetwork;
    }

    [RTTI.Serializable(0x46120E95E7005CD1, GameType.DS)]
    public class SequenceNetworkComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAB3F9728C0AEFDB3, GameType.DS)]
    public class SequenceNetworkCondition : SequenceNetworkConditionBase
    {
        [RTTI.Member(4, 0x30)] public CPtr<GraphProgramResource> Condition;
    }

    [RTTI.Serializable(0xEA4F5525B3348245, GameType.DS)]
    public class SequenceNetworkConditionBase : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public CPtr<SequenceNetworkNode> True;
        [RTTI.Member(3, 0x28)] public CPtr<SequenceNetworkNode> False;
    }

    [RTTI.Serializable(0x612ED5B314822B18, GameType.DS)]
    public class SequenceNetworkConditionBaseInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0xFA2F3529F1EA7F7E, GameType.DS)]
    public class SequenceNetworkConditionInstance : SequenceNetworkConditionBaseInstance
    {
    }

    [RTTI.Serializable(0x47BE38F79B4DBC2E, GameType.DS)]
    public class SequenceNetworkCrateCarryingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8F4445E82D15E231, GameType.DS)]
    public class SequenceNetworkCrateCarryingComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Data")] public Ref<SequenceNetworkNode> WithCrateNode;
        [RTTI.Member(4, 0x28, "Data")] public Ref<SequenceNetworkNode> WithoutCrateNode;
        [RTTI.Member(5, 0x30, "Data")] public Ref<EntityResource> CrateResource;
        [RTTI.Member(6, 0x38, "Data")] public Ref<BooleanFact> CrateCarryingFact;
    }

    [RTTI.Serializable(0xCC3A0CD236A5F702, GameType.DS)]
    public class SequenceNetworkDismountMode
    {
        [RTTI.Member(0, 0x0)] public Ref<SequenceEntityVariable> Variable;
        [RTTI.Member(1, 0x8)] public WorldTransform DismountTransform;
        [RTTI.Member(2, 0x48)] public bool DismountTransformIsRelative;
        [RTTI.Member(3, 0x50)] public HashSet<GGUUID> ReachableFromNodes;
        [RTTI.Member(4, 0x60)] public HashSet<GGUUID> DismountingNodes;
        [RTTI.Member(5, 0x70)] public HashSet<GGUUID> WantsDismountNodes;
        [RTTI.Member(6, 0x80)] public String Name;
    }

    [RTTI.Serializable(0x22F83BF14A74C412, GameType.DS)]
    public class SequenceNetworkEnumFactEntryToNode : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<EnumFactEntry> Value;
        [RTTI.Member(3, 0x28)] public Ref<SequenceNetworkNode> Node;
    }

    [RTTI.Serializable(0x364A2FE4781C20E2, GameType.DS)]
    public class SequenceNetworkEnumFactNode : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public Ref<EnumFact> Fact;
        [RTTI.Member(3, 0x28)] public ESequenceNetworkFactContextType FactContextType;
        [RTTI.Member(4, 0x30)] public Array<Ref<SequenceNetworkEnumFactEntryToNode>> ValuesToNodes;
    }

    [RTTI.Serializable(0x1A1D4C6A73F0C29A, GameType.DS)]
    public class SequenceNetworkEnumFactNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x69F2B7A0C5D5A04B, GameType.DS)]
    public class SequenceNetworkInstance : RTTIRefObject
    {
        [RTTI.Member(3, 0x50, "General")] public CPtr<SequenceNetworkResource> Resource;
    }

    [RTTI.Serializable(0xD4AE5BCC81938AB8, GameType.DS)]
    public class SequenceNetworkInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2B3569153BAECB14, GameType.DS)]
    public class SequenceNetworkInterruptHandler : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<InterruptEventResource> InterruptEvent;
        [RTTI.Member(3, 0x28)] public CPtr<SequenceNetworkNode> Node;
    }

    [RTTI.Serializable(0x2A8C36C1750B8747, GameType.DS)]
    public class SequenceNetworkMemberComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6781CE8A75AB420B, GameType.DS)]
    public class SequenceNetworkMountMode
    {
        [RTTI.Member(0, 0x0)] public CPtr<SequenceNetworkUseLocation> SequenceNetworkUseLocation;
        [RTTI.Member(1, 0x8)] public WorldTransform MountTransform;
        [RTTI.Member(2, 0x48)] public bool MountIsRelative;
    }

    [RTTI.Serializable(0x175757B2A2CA6CB7, GameType.DS)]
    public class SequenceNetworkNode : CoreObject
    {
    }

    [RTTI.Serializable(0x670D8591F21BA1F7, GameType.DS)]
    public class SequenceNetworkNodeGraphNode : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(3, 0x28)] public CPtr<SequenceNetworkNode> NextNode;
    }

    [RTTI.Serializable(0xAA82AA12869D3D18, GameType.DS)]
    public class SequenceNetworkNodeGraphNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x79A8370286D70445, GameType.DS)]
    public class SequenceNetworkNodeInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x6A5CD5E3C5A05EF2, GameType.DS)]
    public class SequenceNetworkNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDBB43987F65A7C14, GameType.DS)]
    public class SequenceNetworkOwnerSequenceEntityVariable : SequenceEntityVariable
    {
    }

    [RTTI.Serializable(0x2D1815C9681D283E, GameType.DS)]
    public class SequenceNetworkOwnerSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x159B1A5F3BF2DAFE, GameType.DS)]
    public class SequenceNetworkPlayerChoiceEntry : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> DisplayLabel;
        [RTTI.Member(3, 0x28)] public CPtr<SequenceNetworkNode> Node;
        [RTTI.Member(4, 0x30)] public bool MarkWhenChosen;
        [RTTI.Member(5, 0x31)] public EPlayerChoiceLocation Location;
    }

    [RTTI.Serializable(0x41F912DA0CAABBD6, GameType.DS)]
    public class SequenceNetworkPlayerChoiceNode : SequenceNetworkSequenceNodeBase
    {
        [RTTI.Member(12, 0x68)] public Array<Ref<SequenceNetworkPlayerChoiceEntry>> Entries;
        [RTTI.Member(13, 0x78)] public Ref<LocalizedTextResource> DisplayTitle;
    }

    [RTTI.Serializable(0x41C12C0886A6071B, GameType.DS)]
    public class SequenceNetworkPlayerChoiceNodeInstance : SequenceNetworkSequenceNodeBaseInstance
    {
    }

    [RTTI.Serializable(0x52CD11B8A9564EE3, GameType.DS)]
    public class SequenceNetworkPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x83410604EABDBA67, GameType.DS)]
    public class SequenceNetworkPlayerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x88604DB35B15574E, GameType.DS)]
    public class SequenceNetworkPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Sound")] public Ref<SoundResource> SelectionChangedSound;
    }

    [RTTI.Serializable(0x63E6DBC5BA2B82AE, GameType.DS)]
    public class SequenceNetworkQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<GGUUID> NodeUUIDs;
        [RTTI.Member(4, 0x30, "Logic")] public int AmountRequired;
        [RTTI.Member(5, 0x34, "Logic")] public bool PerformInitialCheck;
    }

    [RTTI.Serializable(0x8FE1414C8A6A206A, GameType.DS)]
    public class SequenceNetworkQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x34400452DD8FFFCF, GameType.DS)]
    public class SequenceNetworkResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<SequenceNetworkNode> RootNode;
        [RTTI.Member(3, 0x28)] public Array<Ref<SequenceNetworkNode>> Nodes;
        [RTTI.Member(4, 0x38)] public ESequenceNetworkFactContextType NodeFactContext;
        [RTTI.Member(5, 0x40)] public Array<Ref<SequenceLocatorVariable>> EntityVariables;
        [RTTI.Member(6, 0x50)] public Array<Ref<SharedPositionVariable>> SharedPositions;
        [RTTI.Member(7, 0x60)] public bool AutoStart;
        [RTTI.Member(8, 0x61)] public bool AutoDestroy;
        [RTTI.Member(9, 0x62)] public bool ResetWhenAborted;
        [RTTI.Member(17, 0x65, "Generated")] public bool EnableCanStartCallback;
        [RTTI.Member(21, 0x66, "Placement")] public bool IsPlacementAreaRequestEnabled;
        [RTTI.Member(19, 0x70, "Placement")] public Vec3 PlacementAreaOffset;
        [RTTI.Member(20, 0x80, "Placement")] public float PlacementAreaSize;
        [RTTI.Member(11, 0x84)] public bool NeedsPlayerDependency;
        [RTTI.Member(10, 0x88)] public Ref<SequenceNetworkAIObstacle> AIObstacle;
        [RTTI.Member(13, 0x90, "Generated")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(14, 0x98, "Generated")] public Array<SequenceNetworkMountMode> MountModes;
        [RTTI.Member(15, 0xA8, "Generated")] public Array<SequenceNetworkDismountMode> DismountModes;
        [RTTI.Member(16, 0xB8, "Generated")] public Array<UUIDRef<SequenceNetworkResource>> ForwardSequenceNetworks;
    }

    [RTTI.Serializable(0x11FFE20E6496310E, GameType.DS)]
    public class SequenceNetworkResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA6CE3ABCCDE2FD5F, GameType.DS)]
    public class SequenceNetworkSequenceNode : SequenceNetworkSequenceNodeBase
    {
        [RTTI.Member(12, 0x68)] public CPtr<SequenceNetworkNode> NextNode;
    }

    [RTTI.Serializable(0xD62E38469E596BDE, GameType.DS)]
    public class SequenceNetworkSequenceNodeBase : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public Ref<SequenceResource> Sequence;
        [RTTI.Member(3, 0x28)] public bool PlayOnce;
        [RTTI.Member(4, 0x29)] public bool ImmediatelyTransition;
        [RTTI.Member(5, 0x2A)] public bool IgnorePlacementHint;
        [RTTI.Member(6, 0x2C)] public uint16 CameraPredictionQuality;
        [RTTI.Member(7, 0x30)] public float CameraPredictionDistance;
        [RTTI.Member(11, 0x38)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(8, 0x40)] public CPtr<SequenceNetworkNode> InterruptNode;
        [RTTI.Member(9, 0x48)] public Array<Ref<SequenceNetworkInterruptHandler>> InterruptHandlers;
        [RTTI.Member(10, 0x58)] public Array<Ref<SequenceNetworkTransition>> Transitions;
    }

    [RTTI.Serializable(0xB72C9AC68679E43B, GameType.DS)]
    public class SequenceNetworkSequenceNodeBaseInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x8E0719DD5751F76C, GameType.DS)]
    public class SequenceNetworkSequenceNodeInstance : SequenceNetworkSequenceNodeBaseInstance
    {
    }

    [RTTI.Serializable(0xC91FC9A42E81F6, GameType.DS)]
    public class SequenceNetworkSmartUseLocation : SequenceNetworkUseLocation
    {
        [RTTI.Member(18, 0xD0, "AI")] public Ref<SmartObjectComponentResource> SmartObjectComponentResource;
        [RTTI.Member(19, 0xD8, "AI")] public ECrowdImpostorAnimationState ImpostorStance;
        [RTTI.Member(20, 0xE0, "AI")] public WorldTransform ImpostorTranform;
        [RTTI.Member(21, 0x120, "AI")] public bool ImpostorTranformIsRelative;
        [RTTI.Member(22, 0x128, "AI")] public Array<Ref<FactValueBase>> ItemFactValues;
    }

    [RTTI.Serializable(0x74830CC5DF3C2160, GameType.DS)]
    public class SequenceNetworkSmartUseLocationInstance : SequenceNetworkUseLocationInstance
    {
    }

    [RTTI.Serializable(0x51C16C3FDEF404EA, GameType.DS)]
    public class SequenceNetworkStreamingBoosterInstance : RTTIRefObject
    {
        [RTTI.Member(3, 0x30, "Logic")] public Array<Ref<MeshResourceBase>> MeshResources;
        [RTTI.Member(4, 0x40, "Logic")] public float MinLodDistance;
        [RTTI.Member(6, 0x44, "Logic")] public int MipLevel;
        [RTTI.Member(5, 0x48, "Logic")] public ERenderDataStreamingObjectBoostMode BoostMode;
    }

    [RTTI.Serializable(0x68D8ACEDCF8B5AFA, GameType.DS)]
    public class SequenceNetworkTeleportPlayerNode : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public CPtr<SequenceNetworkNode> NextNode;
        [RTTI.Member(3, 0x28)] public Ref<WorldNode> TeleportLocation;
    }

    [RTTI.Serializable(0xA3FEABEF50EC94DE, GameType.DS)]
    public class SequenceNetworkTeleportPlayerNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x1ED9518BCFCFFCCE, GameType.DS)]
    public class SequenceNetworkTransition : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public SequenceNetworkTransitionTarget Target;
        [RTTI.Member(3, 0x30)] public SequenceNetworkTransitionSource Source;
        [RTTI.Member(4, 0x40)] public SequenceBlendSettings Settings;
    }

    [RTTI.Serializable(0x7ACFCA8CA76D6A73, GameType.DS)]
    public class SequenceNetworkTransitionSource
    {
        [RTTI.Member(0, 0x0)] public ESequenceNetworkTransitionSourceType Type;
        [RTTI.Member(1, 0x8)] public Ref<RTTIRefObject> Object;
    }

    [RTTI.Serializable(0x7197E2C12F6941E3, GameType.DS)]
    public class SequenceNetworkTransitionTarget
    {
        [RTTI.Member(0, 0x0)] public ESequenceNetworkTransitionTargetType Type;
        [RTTI.Member(1, 0x8)] public Ref<SequenceNetworkSequenceNodeBase> SequenceNode;
    }

    [RTTI.Serializable(0xD55DA350468CF287, GameType.DS)]
    public class SequenceNetworkUseLocation : SequenceNetworkNode
    {
        [RTTI.Member(2, 0x20)] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(3, 0x30)] public Mat44 LocalMatrix;
        [RTTI.Member(4, 0x70)] public bool PlaceOnAnimationStart;
        [RTTI.Member(5, 0x78)] public CPtr<SequenceNetworkNode> Node;
        [RTTI.Member(6, 0x80)] public CPtr<SequenceNetworkNode> ImmediateNode;
        [RTTI.Member(7, 0x88)] public Ref<SequenceEntityVariable> UserEntityVariable;
        [RTTI.Member(8, 0x90)] public Ref<SequenceEntityVariable> Owner;
        [RTTI.Member(9, 0x98)] public bool PlaceOnOwner;
        [RTTI.Member(10, 0xA0)] public String PlaceOnOwnerHelper;
        [RTTI.Member(11, 0xA8)] public bool MoveSequenceNetworkToOwner;
        [RTTI.Member(13, 0xB0, "AI")] public String SectionName;
        [RTTI.Member(14, 0xB8, "AI")] public bool AllowWhenMoving;
        [RTTI.Member(15, 0xBC, "AI")] public uint32 MountCost;
        [RTTI.Member(16, 0xC0, "AI")] public Ref<SequenceNetworkUseLocationGroup> Group;
    }

    [RTTI.Serializable(0x68CFE7775DDEC569, GameType.DS)]
    public class SequenceNetworkUseLocationGroup : Resource
    {
    }

    [RTTI.Serializable(0x23769953A32C993F, GameType.DS)]
    public class SequenceNetworkUseLocationInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x1BBAB7D8E41F6697, GameType.DS)]
    public class SequenceNetworkWantsDismountNode : SequenceNetworkConditionBase
    {
        [RTTI.Member(4, 0x30)] public Ref<SequenceEntityVariable> EntityVariable;
    }

    [RTTI.Serializable(0xFB946BC90078988F, GameType.DS)]
    public class SequenceNetworkWantsDismountNodeInstance : SequenceNetworkConditionBaseInstance
    {
    }

    [RTTI.Serializable(0xE64F9D6E6B01EE3D, GameType.DS)]
    public class SequenceOriginLocatorVariable : SequenceLocatorVariable
    {
    }

    [RTTI.Serializable(0x9A2F03080403D00C, GameType.DS)]
    public class SequenceOriginLocatorVariableInstance : SequenceLocatorVariableInstance
    {
    }

    [RTTI.Serializable(0xE5E503059672A67A, GameType.DS)]
    public class SequencePositionLocatorVariable : SequenceLocatorVariable
    {
        [RTTI.Member(5, 0x30, "Logic")] public WorldTransform Offset;
    }

    [RTTI.Serializable(0x5CADAC44510FB2, GameType.DS)]
    public class SequencePositionLocatorVariableInstance : SequenceLocatorVariableInstance
    {
    }

    [RTTI.Serializable(0xDDE0345B81E2B945, GameType.DS)]
    public class SequenceRep : EntityRep
    {
    }

    [RTTI.Serializable(0x81C9E9F0A678A560, GameType.DS)]
    public class SequenceResource : SequenceResourceBase
    {
        [RTTI.Member(74, 0x108, "Network")] public bool SyncFrameCounter;
        [RTTI.Member(61, 0x109, "Logic")] public bool ShouldTeleportActors;
        [RTTI.Member(59, 0x10A, "Logic")] public bool IsKeepUpEnabled;
        [RTTI.Member(49, 0x10B, "Logic")] public bool InterpPreviousSequenceCamera;
        [RTTI.Member(34, 0x10C, "Logic")] public ESequenceLoopMode LoopMode;
        [RTTI.Member(41, 0x10D, "Logic")] public ESequenceCameraInterpMode CameraInterpModeOnEnd;
        [RTTI.Member(42, 0x10E, "Logic")] public ESequenceCameraTransitionFunction CameraInTransitionFunction;
        [RTTI.Member(43, 0x10F, "Logic")] public ESequenceCameraTransitionFunction CameraOutTransitionFunction;
        [RTTI.Member(39, 0x110, "Logic")] public float CameraInterpSecondOnStart;
        [RTTI.Member(40, 0x114, "Logic")] public float CameraInterpSecondOnEnd;
        [RTTI.Member(45, 0x118, "Logic")] public float InterpSecondOnStart;
        [RTTI.Member(46, 0x11C, "Logic")] public float InterpSecondOnEnd;
        [RTTI.Member(44, 0x120, "Logic")] public float InterpSecondFromKeepPositionToGameCamera;
        [RTTI.Member(47, 0x124, "Logic")] public float InterpSecondToGameCamera;
        [RTTI.Member(48, 0x128, "Logic")] public String InterpGameCameraName;
        [RTTI.Member(56, 0x130, "Logic")] public int MasterSequenceCounterOffset;
        [RTTI.Member(50, 0x134, "Logic")] public bool IsEnableFacialInterpOnStart;
        [RTTI.Member(35, 0x135, "Logic")] public bool AutoStart;
        [RTTI.Member(36, 0x136, "Logic")] public bool AutoDestroy;
        [RTTI.Member(76, 0x137, "Streaming")] public bool GenerateStreamingHintData;
        [RTTI.Member(37, 0x138, "Logic")] public Array<Ref<EventResource>> Events;
        [RTTI.Member(32, 0x148)] public ExposedEventAttributeList ExposedEventAttributeList;
        [RTTI.Member(80, 0x158, "Private")] public int StopFrame;
        [RTTI.Member(81, 0x160, "Private")] public Array<Ref<SortedEvent>> SortedEvents;
        [RTTI.Member(83, 0x190, "Private")] public Array<CPtr<SetGlobalLodBiasEventResource>> GlobalLodEvents;
        [RTTI.Member(82, 0x1A0, "Private")] public Array<CPtr<SortedEvent>> EntityActorEvents;
        [RTTI.Member(38, 0x1C1, "Logic")] public bool SuppressUpdates;
        [RTTI.Member(57, 0x1C2, "Logic")] public bool SuppressCameraCutForNextSequence;
        [RTTI.Member(58, 0x1C3, "Logic")] public bool ForceCameraCutEnabled;
        [RTTI.Member(60, 0x1C4, "Logic")] public bool ShouldTeleportPBDOnStart;
        [RTTI.Member(63, 0x1C5, "Logic")] public bool ShouldTeleportPBDOnStop;
        [RTTI.Member(64, 0x1C6, "Logic")] public bool ShouldDelayStart;
        [RTTI.Member(69, 0x1C7, "Logic")] public bool EnableCameraSpeedInterp;
        [RTTI.Member(78, 0x1C8, "Streaming")] public Ref<RenderDataStreamingHintData> StreamingHintData;
        [RTTI.Member(77, 0x1D0, "Streaming")] public String StreamingHintDataPath;
        [RTTI.Member(54, 0x1E9, "Logic")] public bool HasMasterSequenceCounter;
        [RTTI.Member(55, 0x1EA, "Logic")] public bool UseMasterSequenceCounter;
        [RTTI.Member(51, 0x1EB, "Logic")] public bool IsEnablePlayerTransparency;
        [RTTI.Member(52, 0x1EC, "Logic")] public bool IsEnableNearPlayerTransparency;
        [RTTI.Member(62, 0x1ED, "Logic")] public bool ShouldStartNextFrame;
        [RTTI.Member(53, 0x1EE, "Logic")] public bool IsGameCameraUpdateEnabled;
        [RTTI.Member(65, 0x1EF, "Logic")] public bool NeedsMasterSequenceDependency;
        [RTTI.Member(66, 0x1F0, "Logic")] public bool NeedsPlayerDependency;
        [RTTI.Member(67, 0x1F1, "Logic")] public bool OverridePBDDeltaTime;
        [RTTI.Member(68, 0x1F2, "Logic")] public bool EnableNextShotPrediction;
        [RTTI.Member(70, 0x1F3, "Logic")] public bool EnableFastInterpCameraDoF;
        [RTTI.Member(71, 0x1F4, "Logic")] public bool EnableCropping;
        [RTTI.Member(72, 0x1F5, "Logic")] public bool IsCinematic;
    }

    [RTTI.Serializable(0xF6047D25796A911A, GameType.DS)]
    public class SequenceResourceBase : EntityResource
    {
        [RTTI.Member(31, 0x100, "General")] public String Name;
    }

    [RTTI.Serializable(0xB3D5D58E79267F69, GameType.DS)]
    public class SequenceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF390E33315E48D95, GameType.DS)]
    public class SequencedHapticWaveEventItem
    {
        [RTTI.Member(1, 0x0, "General")] public uint8 DataIndex;
        [RTTI.Member(2, 0x4, "General")] public float Time;
    }

    [RTTI.Serializable(0x2BEC330340FDFF31, GameType.DS)]
    public class SequencedHapticWaveResource : HapticWaveResource
    {
        [RTTI.Member(9, 0x40, "General")] public Array<Ref<ParameterizedHapticWaveResource>> ParameterizedHapticWaveResources;
        [RTTI.Member(10, 0x50, "General")] public Array<SequencedHapticWaveEventItem> SequenceItems;
    }

    [RTTI.Serializable(0xDDDCC371174048A4, GameType.DS)]
    public class SerializableDecalMaterialTypeMask
    {
        [RTTI.Member(0, 0x0)] public Ref<DecalResource> DecalResource;
        [RTTI.Member(1, 0x8)] public Ref<MaterialTypeResource> MaterialTypeResourceA;
        [RTTI.Member(2, 0x10)] public SerializableGeometryMaterialTypeMask MaterialTypeMask;
    }

    [RTTI.Serializable(0xDB8A06C37859B657, GameType.DS)]
    public class SerializableGeometryMaterialTypeMask
    {
        [RTTI.Member(0, 0x0)] public uint32 Field0;
        [RTTI.Member(1, 0x4)] public uint32 Field1;
        [RTTI.Member(2, 0x8)] public uint32 Field2;
        [RTTI.Member(3, 0xC)] public uint32 Field3;
        [RTTI.Member(4, 0x10)] public uint32 Field4;
        [RTTI.Member(5, 0x14)] public uint32 Field5;
        [RTTI.Member(6, 0x18)] public uint32 Field6;
        [RTTI.Member(7, 0x1C)] public uint32 Field7;
    }

    [RTTI.Serializable(0x42859AA4516CDC0B, GameType.DS)]
    public class ServerAddress : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String IP;
        [RTTI.Member(3, 0x28)] public int Port;
    }

    [RTTI.Serializable(0xF2461862437FF3AE, GameType.DS)]
    public class ServerClan : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Tag;
        [RTTI.Member(3, 0x28)] public String Name;
        [RTTI.Member(4, 0x38)] public int MaxSize;
        [RTTI.Member(5, 0x40)] public uint64 CreationTime;
        [RTTI.Member(6, 0x48)] public Array<Ref<ServerClanMember>> Members;
    }

    [RTTI.Serializable(0xD8C9EFB97599BF7A, GameType.DS)]
    public class ServerClanInvite : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String InviterID;
        [RTTI.Member(3, 0x28)] public String TargetID;
        [RTTI.Member(4, 0x30)] public String ClanTag;
        [RTTI.Member(5, 0x38)] public int64 CreationDate;
    }

    [RTTI.Serializable(0x488AE9B60E275C0B, GameType.DS)]
    public class ServerClanInviteList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ServerClanInvite>> Invites;
    }

    [RTTI.Serializable(0x3F74B11202D65906, GameType.DS)]
    public class ServerClanList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ServerClan>> Clan;
    }

    [RTTI.Serializable(0x23FD565317E87481, GameType.DS)]
    public class ServerClanMatchReport : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ClanTag;
        [RTTI.Member(3, 0x28)] public String OpponentTag;
        [RTTI.Member(4, 0x30)] public uint64 StartTime;
    }

    [RTTI.Serializable(0xA3B6212A6D0E896A, GameType.DS)]
    public class ServerClanMatchReportResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ServerClanMatchReport>> Reports;
    }

    [RTTI.Serializable(0x766EA90F06C70191, GameType.DS)]
    public class ServerClanMember : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ID;
        [RTTI.Member(3, 0x28)] public ClanRole Role;
    }

    [RTTI.Serializable(0xB0E501EE7536CFA7, GameType.DS)]
    public class ServerClanMemberTag : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String MemberID;
        [RTTI.Member(3, 0x28)] public String ClanTag;
    }

    [RTTI.Serializable(0xFB576DD5E63D4AFC, GameType.DS)]
    public class ServerClanMemberTagList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ServerClanMemberTag>> Tags;
    }

    [RTTI.Serializable(0x521C5AF90E2D8456, GameType.DS)]
    public class ServerClanResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<String> Errors;
        [RTTI.Member(3, 0x30)] public ClanStatus Status;
    }

    [RTTI.Serializable(0x2F1B1306AF6F94B1, GameType.DS)]
    public class ServerCollectableResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public bool Success;
        [RTTI.Member(3, 0x28)] public Array<Ref<CollectableData>> Data;
    }

    [RTTI.Serializable(0x7D5E233924648C3D, GameType.DS)]
    public class ServerCollectableTimer : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String TimerID;
        [RTTI.Member(3, 0x28)] public int64 StartTime;
        [RTTI.Member(4, 0x30)] public int64 Interval;
    }

    [RTTI.Serializable(0x5B5480E6B3978A75, GameType.DS)]
    public class ServerCollectableTimerResponse : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public uint64 CurrentServerTimeInMs;
        [RTTI.Member(3, 0x28)] public Array<Ref<ServerCollectableTimer>> Timers;
    }

    [RTTI.Serializable(0x56DDBAFA681C302E, GameType.DS)]
    public class ServerCollection : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<RTTIRefObject>> Items;
    }

    [RTTI.Serializable(0xAABC078E65FC6CEE, GameType.DS)]
    public class ServerConnectionRule : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ID;
        [RTTI.Member(3, 0x28)] public Array<int> RetryIntervals;
        [RTTI.Member(4, 0x38)] public int RetryMax;
        [RTTI.Member(5, 0x3C)] public int ConnectTimeout;
        [RTTI.Member(6, 0x40)] public int ResponseTimeout;
    }

    [RTTI.Serializable(0xDAF60DFA4E7A5E49, GameType.DS)]
    public class ServerHeartBeat : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xC8471DEF29E6DB59, GameType.DS)]
    public class ServerInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Environment;
        [RTTI.Member(3, 0x28)] public EServerType ServerType;
        [RTTI.Member(4, 0x30)] public String ServerVersion;
        [RTTI.Member(5, 0x38)] public String ServerBuildNumber;
        [RTTI.Member(6, 0x40)] public String ServerBuildDate;
        [RTTI.Member(7, 0x48)] public String SystemSettingsVersion;
        [RTTI.Member(8, 0x50)] public String SystemSettingsClientVersion;
        [RTTI.Member(9, 0x58)] public uint64 ClusterID;
        [RTTI.Member(10, 0x60)] public uint64 Timestamp;
    }

    [RTTI.Serializable(0xC9BF66BF3B828231, GameType.DS)]
    public class ServerLocation : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Location;
        [RTTI.Member(3, 0x28)] public Array<Ref<ServerAddress>> Servers;
    }

    [RTTI.Serializable(0x6002A9EDC09F7B68, GameType.DS)]
    public class ServerProfileOwnerList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ProfileOwnerData>> Profile;
        [RTTI.Member(3, 0x30)] public HashMap<String_String> LogContext;
    }

    [RTTI.Serializable(0x42274390FD490EB1, GameType.DS)]
    public class ServerProfileUpdateResult : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ProfileOwner;
        [RTTI.Member(3, 0x28)] public String UUID;
        [RTTI.Member(4, 0x30)] public EProfileUpdateStatus StatusCode;
    }

    [RTTI.Serializable(0x5D63B1B07B422A87, GameType.DS)]
    public class ServerSetting : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Key;
        [RTTI.Member(3, 0x28)] public Ref<RTTIRefObject> Value;
        [RTTI.Member(4, 0x30)] public int64 Version;
    }

    [RTTI.Serializable(0xC6D07119535D04D4, GameType.DS)]
    public class ServerSettingVersion : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int64 KnownVersion;
        [RTTI.Member(3, 0x28)] public int64 TargetVersion;
    }

    [RTTI.Serializable(0xC001280B7961E765, GameType.DS)]
    public class ServerSettingsList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<ServerSetting>> Entry;
        [RTTI.Member(3, 0x30)] public int64 Version;
    }

    [RTTI.Serializable(0xEEF9FC8805182F8B, GameType.DS)]
    public class ServerSystemSettingsVersionMessage : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int64 Version;
    }

    [RTTI.Serializable(0x81B28AF7A3E5CB34, GameType.DS)]
    public class ServerTimeUnit : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int64 TimeMs;
    }

    [RTTI.Serializable(0x871C01F9D5E2A9E5, GameType.DS)]
    public class ServerURN : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ID;
        [RTTI.Member(3, 0x28)] public String Rule;
        [RTTI.Member(4, 0x30)] public String URN;
        [RTTI.Member(5, 0x38)] public String ContentType;
        [RTTI.Member(6, 0x40)] public EHTTPRequestMethod Method;
    }

    [RTTI.Serializable(0xBEE25797915C2018, GameType.DS)]
    public class SetAiStimuliModifierAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public float Modifer;
    }

    [RTTI.Serializable(0xFE0125BE08138F76, GameType.DS)]
    public class SetAnimationVariableAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public String AnimationVariableName;
        [RTTI.Member(5, 0x30, "Logic")] public float Value;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<CurveResource> ValuePerDamageCurve;
    }

    [RTTI.Serializable(0xCAAA00D042F60968, GameType.DS)]
    public class SetBoolPropertyAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<BoolPropertyBase> Property;
        [RTTI.Member(5, 0x30, "Logic")] public bool Value;
    }

    [RTTI.Serializable(0xC6A5C9811BEA82C5, GameType.DS)]
    public class SetBooleanFactAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<BooleanFact> Fact;
        [RTTI.Member(5, 0x30, "Logic")] public bool Value;
        [RTTI.Member(6, 0x31, "Logic")] public bool Global;
    }

    [RTTI.Serializable(0x7A99E534DFD62888, GameType.DS)]
    public class SetCloakAiBodyVisualStimuliAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0xDF3E082B841BA415, GameType.DS)]
    public class SetEnumFactAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EnumFact> Fact;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<EnumFactEntry> Value;
        [RTTI.Member(6, 0x38, "Logic")] public bool Global;
    }

    [RTTI.Serializable(0xDA34F3EF9F458DBA, GameType.DS)]
    public class SetFacialEmotionEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x47FB9AC3D6A70C26, GameType.DS)]
    public class SetFacialEmotionEventResource : EventResource
    {
        [RTTI.Member(6, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(7, 0x38, "Logic")] public Ref<FacialEmotionAnimationResource> FacialEmotionAnimation;
    }

    [RTTI.Serializable(0xF70E11C55C97BA24, GameType.DS)]
    public class SetFactEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4B0D9F6AA9A6389E, GameType.DS)]
    public class SetFactEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public ESequenceFactContextType FactContextType;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(10, 0x48, "Logic")] public Array<Ref<FactValueBase>> FactValues;
        [RTTI.Member(11, 0x58, "Logic")] public bool RestoreFacts;
        [RTTI.Member(12, 0x60, "Logic")] public Array<KJPFactPlaceholder> Facts;
    }

    [RTTI.Serializable(0xB9BAF2204BC3D4EF, GameType.DS)]
    public class SetFactionAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public String FactionName;
        [RTTI.Member(5, 0x30, "Logic")] public EFactionSetMode FactionSetMode;
    }

    [RTTI.Serializable(0xC976342C28EBD9FA, GameType.DS)]
    public class SetFloatFactEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x752E3821CB518C77, GameType.DS)]
    public class SetFloatFactEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(14, 0x48, "Logic")] public ESequenceFactContextType FactContextType;
        [RTTI.Member(15, 0x50, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(12, 0x58, "Logic")] public Ref<FloatFact> FloatFact;
        [RTTI.Member(13, 0x60, "Logic")] public AnimatableValue Value;
        [RTTI.Member(16, 0x78, "Logic")] public bool RestoreFact;
    }

    [RTTI.Serializable(0xD5D08624A707CC05, GameType.DS)]
    public class SetFloatPropertyAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<FloatPropertyBase> Property;
        [RTTI.Member(5, 0x30, "Logic")] public float Value;
    }

    [RTTI.Serializable(0xE57EE2465609099C, GameType.DS)]
    public class SetFocusEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD94EE0B12CA55ED0, GameType.DS)]
    public class SetFocusEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool Active;
        [RTTI.Member(10, 0x41, "Logic")] public bool RestoreState;
    }

    [RTTI.Serializable(0x145AD87982DFD287, GameType.DS)]
    public class SetGlobalLodBiasEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x51B929F3AD2B2C74, GameType.DS)]
    public class SetGlobalLodBiasEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public float LodDistanceScale;
    }

    [RTTI.Serializable(0x69624037869E97C0, GameType.DS)]
    public class SetIntPropertyAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<IntPropertyBase> Property;
        [RTTI.Member(5, 0x30, "Logic")] public int Value;
    }

    [RTTI.Serializable(0xE20DEC6B6996B0BE, GameType.DS)]
    public class SetMoverAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<MoverResource> Mover;
        [RTTI.Member(5, 0x30, "Logic")] public EMoverActionParentLinking ParentLinking;
    }

    [RTTI.Serializable(0xC7A2C4EB286D0192, GameType.DS)]
    public class SetPartsLocalOffsetAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Action")] public Array<Ref<DestructibilityPart>> Parts;
        [RTTI.Member(5, 0x38, "Action")] public bool ActOnCurrentPart;
        [RTTI.Member(6, 0x40, "Action")] public Mat44 Matrix;
        [RTTI.Member(7, 0x80, "Action")] public Ref<RandomMatrixResourceBase> RandomMatrix;
    }

    [RTTI.Serializable(0xB0F93A876EC00E23, GameType.DS)]
    public class SetPathHelperNodeAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<PathHelperNodeComponentResource> ComponentResource;
        [RTTI.Member(5, 0x30, "Logic")] public String Name;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(7, 0x40, "Logic")] public float Speed;
        [RTTI.Member(8, 0x44, "Logic")] public float AccelerationTime;
        [RTTI.Member(9, 0x48, "Logic")] public bool Looping;
    }

    [RTTI.Serializable(0xE0B0D5F4A03A0C42, GameType.DS)]
    public class SetShaderVariableAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(5, 0x38, "Logic")] public bool ActOnCurrentPart;
        [RTTI.Member(6, 0x40, "Logic")] public String ShaderVariableID;
        [RTTI.Member(7, 0x48, "Logic")] public float Value;
        [RTTI.Member(8, 0x4C, "Logic")] public FRange RandomValue;
        [RTTI.Member(9, 0x54, "Logic")] public ERandomShaderVariableType Randomization;
        [RTTI.Member(10, 0x58, "Logic")] public float BlendUnitsPerSecond;
    }

    [RTTI.Serializable(0x3CD6E35CCC2EDD0A, GameType.DS)]
    public class SetTimeOfDayEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x18AB846A843320B2, GameType.DS)]
    public class SetTimeOfDayEventResouce : TimedEventResource
    {
        [RTTI.Member(10, 0x30, "Logic")] public int Hour;
        [RTTI.Member(11, 0x34, "Logic")] public int Minute;
        [RTTI.Member(9, 0x38, "Logic")] public bool SetTimeOfDay;
        [RTTI.Member(8, 0x39, "Logic")] public bool PauseTimeOfDay;
    }

    [RTTI.Serializable(0x90D81421EC084F1A, GameType.DS)]
    public class SetVisibilityAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0x466072DC6AA36C2C, GameType.DS)]
    public class SetVolumeEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xF9A014551B9A4003, GameType.DS)]
    public class SetVolumeEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Logic")] public float Volume;
        [RTTI.Member(7, 0x2C, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0xB64F6FF58495568B, GameType.DS)]
    public class SeverityStatDisplayEntry : StatDisplayEntry
    {
        [RTTI.Member(7, 0x30, "General")] public Ref<DamageSettings> DamageSettings;
    }

    [RTTI.Serializable(0xFBF41C7276F4A46D, GameType.DS)]
    public class ShaderAnimComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x38DB93FBC87F9161, GameType.DS)]
    public class ShaderAnimComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x48AA98A4C8F4DA8, GameType.DS)]
    public class ShaderAnimComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<ShaderAnimCurveSet>> ShaderAnimationStartCurveSets;
        [RTTI.Member(4, 0x30, "General")] public Array<Ref<ShaderAnimCurveSet>> ShaderAnimationCurveSets;
        [RTTI.Member(5, 0x40, "General")] public Array<Ref<ShaderAnimCurveSet>> ShaderAnimationEndCurveSets;
        [RTTI.Member(6, 0x50, "General")] public bool IsAutoDestroy;
        [RTTI.Member(8, 0x51, "RandomStart")] public bool IsRandomStart;
        [RTTI.Member(11, 0x52, "DelayStart")] public bool IsDelayStart;
        [RTTI.Member(9, 0x54, "RandomStart")] public float RandomStartTimeRate;
        [RTTI.Member(12, 0x58, "DelayStart")] public float DelayStartTime;
    }

    [RTTI.Serializable(0x2729271C07CFF2B7, GameType.DS)]
    public class ShaderAnimComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7929D52663C50D0D, GameType.DS)]
    public class ShaderAnimCurveSet : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String VariableID;
        [RTTI.Member(4, 0x28, "General")] public String ModelPartName;
        [RTTI.Member(6, 0x30, "General")] public Array<Ref<CurveResource>> CurveResources;
        [RTTI.Member(5, 0x40, "General")] public int MaterialIndex;
        [RTTI.Member(7, 0x44, "General")] public bool IsLoop;
        [RTTI.Member(8, 0x45, "General")] public bool IsAnimateInRealTime;
    }

    [RTTI.Serializable(0x8550EAB2733D463C, GameType.DS)]
    public class ShaderAnimationAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(5, 0x38, "Logic")] public bool ActOnCurrentPart;
        [RTTI.Member(6, 0x40, "Logic")] public String ShaderVariableID;
        [RTTI.Member(7, 0x48, "Logic")] public Ref<CurveResource> ShaderAnimationCurve;
        [RTTI.Member(8, 0x50, "Logic")] public bool IsLooping;
        [RTTI.Member(9, 0x54, "Logic")] public float BlendUnitsPerSecond;
        [RTTI.Member(10, 0x58, "Logic")] public bool AnimateInRealTime;
    }

    [RTTI.Serializable(0x7DF01C707185ED39, GameType.DS)]
    public class ShaderAnimatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8B71A1E37FF37275, GameType.DS)]
    public class ShaderAnimatorComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x802B5D889F4E9C9, GameType.DS)]
    public class ShaderAnimatorComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<ShaderAnimatorResourceBase>> AttributeAnimatorResources;
        [RTTI.Member(4, 0x30, "Logic")] public bool StartAtRandomTime;
    }

    [RTTI.Serializable(0x3A18A80E16A8C53F, GameType.DS)]
    public class ShaderAnimatorInstance : ObjectAttributeAnimatorInstance
    {
    }

    [RTTI.Serializable(0x30D3A22E4BB1ADD1, GameType.DS)]
    public class ShaderAnimatorResourceBase : ObjectAttributeAnimatorResource
    {
        [RTTI.Member(7, 0x30, "Animator")] public String VariableID;
    }

    [RTTI.Serializable(0xF36860919A59AFDF, GameType.DS)]
    public class ShaderDataDesc : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public ERenderPlatform RenderPlatform;
        [RTTI.Member(3, 0x24)] public EProgramTypeMask ProgramTypeMask;
        [RTTI.Member(4, 0x28)] public EShaderInstancingMode ShaderInstancingMode;
        [RTTI.Member(5, 0x29)] public ESRTCreationMode SRTCreationMode;
        [RTTI.Member(6, 0x2C)] public int RenderTargetCount;
        [RTTI.Member(7, 0x30)] public Array<SRTEntry> SRTEntries;
        [RTTI.Member(8, 0x40)] public Array<VertexStreamBindingDesc> VertexStreamBindingsDescs;
        [RTTI.Member(9, 0x50)] public Array<StreamOutDesc> StreamOutDescs;
        [RTTI.Member(11, 0x60)] public EProgramTypeMask FunctionShaderTableProgramTypeMask;
        [RTTI.Member(10, 0x70)] public ShaderResourceValidationSet ValidationFlags;
        [RTTI.Member(16, 0x4F0, "UsedShaderBindings")] public Array<uint32> UsedComputeBindings;
        [RTTI.Member(14, 0x500, "UsedShaderBindings")] public Array<uint32> UsedGeometryBindings;
        [RTTI.Member(13, 0x510, "UsedShaderBindings")] public Array<uint32> UsedVertexBindings;
        [RTTI.Member(15, 0x520, "UsedShaderBindings")] public Array<uint32> UsedPixelBindings;
    }

    [RTTI.Serializable(0x8C90698866D5CA5C, GameType.DS)]
    public class ShaderFVector3AnimatorResource : ShaderAnimatorResourceBase
    {
        [RTTI.Member(9, 0x38, "Animator")] public Ref<AnimationTrackLinearFVector3> AnimationTrack;
    }

    [RTTI.Serializable(0x265936DBCD801405, GameType.DS)]
    public class ShaderFVector4AnimatorResource : ShaderAnimatorResourceBase
    {
        [RTTI.Member(9, 0x38, "Animator")] public Ref<AnimationTrackLinearFVector4> AnimationTrack;
    }

    [RTTI.Serializable(0x66B55BEE48E29461, GameType.DS)]
    public class ShaderFloatAnimatorResource : ShaderAnimatorResourceBase
    {
        [RTTI.Member(9, 0x38, "Animator")] public Ref<AnimationTrackLinearFloatGame> AnimationTrackGame;
    }

    [RTTI.Serializable(0x32529367276793DF, GameType.DS)]
    public class ShaderFromFileResource : ShaderResource
    {
    }

    [RTTI.Serializable(0x77565958D445206A, GameType.DS)]
    public class ShaderFromGraphResource : ShaderResource
    {
        [RTTI.Member(3, 0x28, "Compute")] public EComputeThreadDistribution ThreadDistribuation;
    }

    [RTTI.Serializable(0x1DA05DAED1D3A692, GameType.DS)]
    public class ShaderProgramResourceSet
    {
        [RTTI.Member(0, 0x0)] public uint128 Buffers;
        [RTTI.Member(1, 0x10)] public uint16 CBuffers;
        [RTTI.Member(2, 0x12)] public uint16 Samplers;
        [RTTI.Member(3, 0x14)] public uint16 RWBuffers;
    }

    [RTTI.Serializable(0x55E5763A0D11FBD2, GameType.DS)]
    public class ShaderProjMatrixAnimatorResource : ShaderAnimatorResourceBase
    {
        [RTTI.Member(9, 0x38, "Animator")] public Ref<AnimationTrackLinearFVector3> TranslationTrack;
        [RTTI.Member(10, 0x40, "Animator")] public Ref<AnimationTrackLinearFVector3> ScalingTrack;
        [RTTI.Member(11, 0x48, "Animator")] public Ref<AnimationTrackLinearFVector4> RotationTrack;
    }

    [RTTI.Serializable(0xD5A3C77C8C860D1, GameType.DS)]
    public class ShaderResourceValidationSet
    {
        [RTTI.Member(0, 0x0)] public ShaderProgramResourceSet_36<ShaderProgramResourceSet> ResourceSet;
    }

    [RTTI.Serializable(0xF2A3A244CBB8033F, GameType.DS)]
    public class ShaderSamplerBinding
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingNameHash;
        [RTTI.Member(1, 0x4)] public HwSamplerData SamplerData;
    }

    [RTTI.Serializable(0xA00662A0A9649335, GameType.DS)]
    public class ShaderTextureBinding
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingNameHash;
        [RTTI.Member(1, 0x4)] public uint32 BindingSwizzleNameHash;
        [RTTI.Member(2, 0x8)] public uint32 SamplerNameHash;
        [RTTI.Member(3, 0xC)] public uint32 PackedData;
        [RTTI.Member(4, 0x10)] public Ref<Resource> TextureResource;
    }

    [RTTI.Serializable(0x8F8CA7168B07019D, GameType.DS)]
    public class ShaderVariableBinding
    {
        [RTTI.Member(3, 0x0)] public uint32 VariableData0;
        [RTTI.Member(4, 0x4)] public uint32 VariableData1;
        [RTTI.Member(5, 0x8)] public uint32 VariableData2;
        [RTTI.Member(6, 0xC)] public uint32 VariableData3;
        [RTTI.Member(0, 0x10)] public uint32 BindingNameHash;
        [RTTI.Member(1, 0x14)] public uint32 VariableIDHash;
        [RTTI.Member(2, 0x18)] public EShaderVariableType VariableType;
        [RTTI.Member(7, 0x20)] public Ref<ShaderAnimatorResourceBase> Animator;
    }

    [RTTI.Serializable(0xDDA7B13347C7C751, GameType.DS)]
    public class ShaderVariableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9644862A7D385428, GameType.DS)]
    public class ShaderVariableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE016E656E7D00803, GameType.DS)]
    public class ShaderVariableComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0x7DE06B5C5064C12F, GameType.DS)]
    public class ShaderVariableComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFE2843D4AAD255E7, GameType.DS)]
    public class ShadingGroup : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<RenderEffectResource> RenderEffect;
        [RTTI.Member(3, 0x28)] public uint8 MaterialType;
    }

    [RTTI.Serializable(0xEE084A3836A3F2DB, GameType.DS)]
    public class ShadowmapGeneratorSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Textures")] public Ref<Texture> BlackTexture;
        [RTTI.Member(4, 0x28, "Textures")] public Ref<Texture> WhiteTexture;
        [RTTI.Member(6, 0x30, "Shaders")] public Ref<ShaderResource> ShadowmapPrimeDepthShader;
        [RTTI.Member(7, 0x38, "Shaders")] public Ref<ShaderResource> ShadowmapInstancedShader;
    }

    [RTTI.Serializable(0xB80E86CF266E122, GameType.DS)]
    public class ShakeResource : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(6, 0x38, "General")] public float Duration;
        [RTTI.Member(7, 0x3C, "General")] public bool LoopingMode;
        [RTTI.Member(8, 0x40, "General")] public ELocationType LocationType;
        [RTTI.Member(9, 0x44, "General")] public float MinDistance;
        [RTTI.Member(10, 0x48, "General")] public float MaxDistance;
        [RTTI.Member(11, 0x50, "General")] public Ref<CurveResource> DistanceIntensityCurve;
        [RTTI.Member(12, 0x58, "General")] public Ref<CurveResource> DirectionDotProductIntensityCurve;
        [RTTI.Member(13, 0x60, "General")] public Ref<CurveResource> LifetimeIntensityCurve;
        [RTTI.Member(14, 0x68, "General")] public float PositionMultiplier;
        [RTTI.Member(15, 0x6C, "General")] public float AngularMultiplier;
        [RTTI.Member(16, 0x70, "General")] public float TimeMultiplier;
        [RTTI.Member(17, 0x78, "General")] public Array<Ref<ObjectAttributeAnimatorResource>> Animators;
        [RTTI.Member(18, 0x88, "General")] public float RollingMultiplier;
    }

    [RTTI.Serializable(0xF7FF216BA1F9DC43, GameType.DS)]
    public class Shape2D
    {
        [RTTI.Member(1, 0x0, "General")] public Array<Vec2Pack> Points;
    }

    [RTTI.Serializable(0x4264E13E453D8CDD, GameType.DS)]
    public class Shape2DExtrusion : Shape2D
    {
        [RTTI.Member(3, 0x0, "General")] public float Height;
    }

    [RTTI.Serializable(0x533803004539B318, GameType.DS)]
    public class Shape2DExtrusionAreaLandmark : AreaLandmark
    {
        [RTTI.BaseClass(0x90)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(13, 0xD0)] public Array<Vec2Pack> GroundPolygonTriangleVertices;
    }

    [RTTI.Serializable(0x2E2648399D12FC72, GameType.DS)]
    public class SharedPositionLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x9B7AC5EB742C104F, GameType.DS)]
    public class SharedPositionLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SharedPositionVariable> Variable;
    }

    [RTTI.Serializable(0x4D81FCE21EBB9701, GameType.DS)]
    public class SharedPositionVariable : Resource
    {
        [RTTI.Member(2, 0x20)] public WorldTransform WorldMatrix;
        [RTTI.Member(3, 0x60)] public bool RelativeToSequence;
    }

    [RTTI.Serializable(0x71C4037568EAEE52, GameType.DS)]
    public class ShieldComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x989EB9848713024, GameType.DS)]
    public class ShieldComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "HealthSettings")] public float Health;
        [RTTI.Member(5, 0x24, "HealthRegenerationSettings")] public float Delay;
        [RTTI.Member(6, 0x28, "HealthRegenerationSettings")] public float Speed;
        [RTTI.Member(7, 0x2C, "HealthRegenerationSettings")] public float MaxSpeed;
        [RTTI.Member(8, 0x30, "HealthRegenerationSettings")] public float Acceleration;
        [RTTI.Member(13, 0x34, "DamageSettings")] public float SeverityFactor;
        [RTTI.Member(10, 0x38, "DepletionSettings")] public bool RemoveOnDepletion;
        [RTTI.Member(11, 0x3C, "DepletionSettings")] public float DepletionCooldownDuration;
        [RTTI.Member(14, 0x40, "DamageSettings")] public Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
        [RTTI.Member(15, 0x48, "DamageSettings")] public Array<Ref<DamageTypeResource>> ExcludedDamageTypes;
        [RTTI.Member(16, 0x58, "DamageSettings")] public Array<DamageTypeMultiplier> DamageTypeMultipliers;
        [RTTI.Member(18, 0x68, "ShaderSettings")] public String EnabledShaderVariableName;
        [RTTI.Member(19, 0x70, "ShaderSettings")] public String HealthFactorShaderVariableName;
        [RTTI.Member(20, 0x78, "ShaderSettings")] public String CooldownFactorShaderVariableName;
        [RTTI.Member(22, 0x80, "Facts")] public Ref<BooleanFact> ActiveFact;
        [RTTI.Member(24, 0x88, "Private")] public Ref<FloatFact> HealthFact;
        [RTTI.Member(25, 0x90, "Private")] public Ref<IntegerFact> DisabledGameTimeFact;
        [RTTI.Member(26, 0x98, "Private")] public Ref<IntegerFact> LastDamageGameTimeFact;
        [RTTI.Member(27, 0xA0, "Private")] public Ref<FloatFact> RegenerationSpeedFact;
        [RTTI.Member(28, 0xA8, "Private")] public Ref<IntegerFact> LastRegenerationGameTimeFact;
    }

    [RTTI.Serializable(0x41F5F19689103FE8, GameType.DS)]
    public class ShieldComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFAE61686B1977742, GameType.DS)]
    public class ShoesConfig
    {
        [RTTI.Member(0, 0x0)] public float Life;
        [RTTI.Member(1, 0x4)] public float SoleGrassLife;
        [RTTI.Member(2, 0x8)] public float BarefootLife;
        [RTTI.Member(3, 0xC)] public float FirstDestroyLifeOfShoesA;
        [RTTI.Member(4, 0x10)] public float FirstDestroyLifeOfNomralBoots;
        [RTTI.Member(5, 0x14)] public float FirstDestroyLifeOfStableBootsLv1;
        [RTTI.Member(6, 0x18)] public float FirstDestroyLifeOfStableBootsLv2;
        [RTTI.Member(7, 0x1C)] public float FirstDestroyLifeOfStableBootsLv3;
        [RTTI.Member(8, 0x20)] public float FirstDestroyLifeOfMuleBoots;
        [RTTI.Member(9, 0x24)] public float FirstDestroyLifeOfTerroristBoots;
        [RTTI.Member(10, 0x28)] public float FirstDestroyLifeOfChiralBoots;
        [RTTI.Member(11, 0x2C)] public float RecoverLifeByRepair;
        [RTTI.Member(12, 0x30)] public float DecSpeedInWalk;
        [RTTI.Member(13, 0x34)] public float DecSpeedInWalk_AddEveryKg;
        [RTTI.Member(14, 0x38)] public float DecSpeedInRun;
        [RTTI.Member(15, 0x3C)] public float DecSpeedInRun_AddEveryKg;
        [RTTI.Member(16, 0x40)] public float DecSpeedInDash;
        [RTTI.Member(17, 0x44)] public float DecSpeedInDash_AddEveryKg;
        [RTTI.Member(18, 0x48)] public float DecValueOnJump;
        [RTTI.Member(19, 0x4C)] public float DecValueOnJump_AddEveryKg;
        [RTTI.Member(20, 0x50)] public float DecValueOnTumble;
        [RTTI.Member(21, 0x54)] public float DecValueOnTumble_AddEveryKg;
        [RTTI.Member(22, 0x58)] public float DecValueOnLanded;
        [RTTI.Member(23, 0x5C)] public float DecValueOnLanded_AddEveryKg;
        [RTTI.Member(24, 0x60)] public float DecValueOnSliding;
        [RTTI.Member(25, 0x64)] public float DecValueOnSliding_AddEveryKg;
        [RTTI.Member(26, 0x68)] public float DecValueOnSliping;
        [RTTI.Member(27, 0x6C)] public float DecValueOnSliping_AddEveryKg;
        [RTTI.Member(28, 0x70)] public float MinorInjuryMoveDistance;
        [RTTI.Member(29, 0x74)] public float LifeOfMinorInjuryOccurrence;
        [RTTI.Member(30, 0x78)] public float MinorInjuryOnJump;
        [RTTI.Member(31, 0x7C)] public float MinorInjuryOnTumble;
        [RTTI.Member(32, 0x80)] public float MinorInjuryOnLanded;
        [RTTI.Member(33, 0x84)] public float MinorInjuryOnSliding;
        [RTTI.Member(34, 0x88)] public float MinorInjuryOnSliping;
        [RTTI.Member(35, 0x8C)] public float SeriousInjuryOccurrenceMoveSpeed;
        [RTTI.Member(36, 0x90)] public float SeriousInjuryBloodDecSpeedInWalk;
        [RTTI.Member(37, 0x94)] public float SeriousInjuryBloodDecSpeedInRun;
        [RTTI.Member(38, 0x98)] public float SeriousInjuryBloodDecSpeedInDash;
        [RTTI.Member(39, 0x9C)] public float SeriousInjuryBloodDecSpeedOnJump;
        [RTTI.Member(40, 0xA0)] public float SeriousInjuryBloodDecSpeedOnTumble;
        [RTTI.Member(41, 0xA4)] public float SeriousInjuryBloodDecSpeedOnLanded;
        [RTTI.Member(42, 0xA8)] public float SeriousInjuryBloodDecSpeedOnSliding;
        [RTTI.Member(43, 0xAC)] public float SeriousInjuryBloodDecSpeedOnSliping;
        [RTTI.Member(44, 0xB0)] public int RecoverNailMinutes;
        [RTTI.Member(45, 0xB4)] public float FallDamageRateByShoesLevel2Or3;
        [RTTI.Member(46, 0xB8)] public float FatigueDamageRateByShoesLevel3;
    }

    [RTTI.Serializable(0x7927C9B04293471C, GameType.DS)]
    public class ShotEventResource : ReferencedSequenceEventResource
    {
        [RTTI.Member(17, 0x80, "Shot")] public Ref<CameraActorResource> ActiveCamera;
    }

    [RTTI.Serializable(0x10C7C54B61A065C4, GameType.DS)]
    public class ShowHUDOverlayEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xAF609529668C5F5B, GameType.DS)]
    public class ShowHUDOverlayEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public String HUDElement;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<UITexture> UITexture;
    }

    [RTTI.Serializable(0x9B1558F3C8B19AAF, GameType.DS)]
    public class SimpleAnimatingSkinnedMeshInstance : SkinnedMeshInstance
    {
        [RTTI.Member(9, 0x2B8, "Animation")] public Ref<SkeletonAnimationResource> DefaultAnimation;
        [RTTI.Member(10, 0x2D0, "Animation")] public Ref<PoseDeformerResource> PoseDeformer;
    }

    [RTTI.Serializable(0x6DF8C10567EA8A48, GameType.DS)]
    public class SimpleAnimationItemOverrideComponent : ItemOverrideComponent
    {
    }

    [RTTI.Serializable(0xCBC6EC100D23C3DC, GameType.DS)]
    public class SimpleAnimationItemOverrideComponentResource : ItemOverrideComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String ActiveAnimVarName;
        [RTTI.Member(4, 0x28, "Logic")] public String AbortAnimVarName;
        [RTTI.Member(5, 0x30, "Logic")] public String IsActiveAnimTagName;
        [RTTI.Member(6, 0x38, "Logic")] public String ItemIDAnimVarName;
        [RTTI.Member(7, 0x40, "Logic")] public bool ReplicateControlParameterToChildAnimationNetwork;
        [RTTI.Member(8, 0x41, "Logic")] public bool FullOverride;
        [RTTI.Member(9, 0x42, "Logic")] public bool ImmediateOverride;
    }

    [RTTI.Serializable(0x17C8820C97069E87, GameType.DS)]
    public class SimpleGeneratedMesh : GeometryObject
    {
    }

    [RTTI.Serializable(0xDBF51BEE8C7133FC, GameType.DS)]
    public class SimpleParticleSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x28526098B397235D, GameType.DS)]
    public class SimpleParticleSystemResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Vec3 SpawnOffset;
        [RTTI.Member(4, 0x30, "Logic")] public float ParticlesPerSecond;
        [RTTI.Member(5, 0x34, "Logic")] public float ParticleRadius;
        [RTTI.Member(7, 0x38, "Logic")] public float CoreCollisionRadius;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<CurveResource> ParticleGrowthCurve;
        [RTTI.Member(8, 0x48, "Logic")] public float LifeTime;
        [RTTI.Member(9, 0x4C, "Logic")] public float LifeTimeAfterCollision;
        [RTTI.Member(10, 0x50, "Logic")] public float ExitVelocity;
        [RTTI.Member(11, 0x54, "Logic")] public float ParticleSpread;
        [RTTI.Member(12, 0x58, "Logic")] public float GravityInfluence;
    }

    [RTTI.Serializable(0xD9AB74DE91CF6954, GameType.DS)]
    public class SimplePathMover : Mover
    {
    }

    [RTTI.Serializable(0x21FEB00BFE4918B0, GameType.DS)]
    public class SimplePathMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x3234F5E627A587DE, GameType.DS)]
    public class SimplePathMoverSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF339FECBEE432A7E, GameType.DS)]
    public class SimplePolygon
    {
        [RTTI.Member(0, 0x8)] public Array<Vec3Pack> Points;
    }

    [RTTI.Serializable(0x722A38B78DBE9CB2, GameType.DS)]
    public class SimpleSoundInstance : SoundInstance
    {
    }

    [RTTI.Serializable(0xF23CB1C99EB3325D, GameType.DS)]
    public class SimpleSoundResource : SoundResource
    {
        [RTTI.Member(41, 0x100, "Sound")] public Ref<WaveResource> Wave;
        [RTTI.Member(42, 0x108, "Sound")] public bool ProximityRadio;
        [RTTI.Member(43, 0x109, "Sound")] public bool ShouldAlsoPanToCenter;
    }

    [RTTI.Serializable(0x2A8A8301CEE6B120, GameType.DS)]
    public class SimpleStatModifierResource : StatModifierResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EModifiableStat ModifiedStat;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CurveResource> RatingToValue;
    }

    [RTTI.Serializable(0x11E1D1A40B933E66, GameType.DS)]
    public class Skeleton : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Joint> Joints;
        [RTTI.Member(8, 0x30, "General")] public HashMap<String_int> JointNameToIndexMap;
        [RTTI.Member(9, 0x40, "General")] public HashMap<uint32_int> JointNameHashToIndexMap;
        [RTTI.Member(4, 0x50, "General")] public Array<SkeletonAnimChannel> AnimationChannels;
        [RTTI.Member(10, 0x60, "General")] public HashMap<String_int> AnimChannelNameToHandleMap;
        [RTTI.Member(6, 0x70, "General")] public uint32 SkeletonLayoutHash;
        [RTTI.Member(7, 0x74, "General")] public uint32 SkeletonChannelLayoutHash;
        [RTTI.Member(5, 0x78, "General")] public Array<uint8> EdgeAnimSkeleton;
    }

    [RTTI.Serializable(0xA1AE45EB04AFF5FE, GameType.DS)]
    public class SkeletonAnimChannel
    {
        [RTTI.Member(0, 0x0)] public String AnimChannelName;
    }

    [RTTI.Serializable(0x20DCAD70645788A4, GameType.DS)]
    public class SkeletonAnimComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCAB6105ADFEA06B1, GameType.DS)]
    public class SkeletonAnimComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<SkeletonAnimationResource> SkeletonStartAnimationResource;
        [RTTI.Member(4, 0x28, "General")] public Ref<SkeletonAnimationResource> SkeletonAnimationResource;
        [RTTI.Member(5, 0x30, "General")] public Ref<SkeletonAnimationResource> SkeletonEndAnimationResource;
        [RTTI.Member(6, 0x38, "General")] public bool IsAutoDestroy;
        [RTTI.Member(7, 0x39, "General")] public bool IsLoopAdd;
        [RTTI.Member(9, 0x3A, "RandomStart")] public bool IsRandomStart;
        [RTTI.Member(12, 0x3B, "DelayStart")] public bool IsDelayStart;
        [RTTI.Member(10, 0x3C, "RandomStart")] public float RandomStartTimeRate;
        [RTTI.Member(13, 0x40, "DelayStart")] public float DelayStartTime;
    }

    [RTTI.Serializable(0x9FCEBA1490169F16, GameType.DS)]
    public class SkeletonAnimationEvent
    {
        [RTTI.Member(0, 0x0)] public float StartTime;
        [RTTI.Member(1, 0x4)] public float Duration;
        [RTTI.Member(2, 0x8)] public Ref<SkeletonAnimationEventPayload> Payload;
    }

    [RTTI.Serializable(0xF2449C27045D4D90, GameType.DS)]
    public class SkeletonAnimationEventMorpheme : SkeletonAnimationEventPayload
    {
        [RTTI.Member(2, 0x20)] public uint32 UserData;
    }

    [RTTI.Serializable(0x142E44039E688A2D, GameType.DS)]
    public class SkeletonAnimationEventPayload : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x8D74080411833C99, GameType.DS)]
    public class SkeletonAnimationEventPayloadSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x50E6EDCD8229496F, GameType.DS)]
    public class SkeletonAnimationEventSound : SkeletonAnimationEventPayload
    {
        [RTTI.Member(3, 0x20)] public JointID Joint;
        [RTTI.Member(4, 0x30)] public Vec3 Offset;
        [RTTI.Member(2, 0x40)] public Ref<SoundResource> Sound;
        [RTTI.Member(5, 0x48)] public bool LoopWhileActive;
    }

    [RTTI.Serializable(0x8C53B4E2F0A3C78, GameType.DS)]
    public class SkeletonAnimationEventSync : SkeletonAnimationEventPayload
    {
        [RTTI.Member(2, 0x20)] public uint32 UserData;
    }

    [RTTI.Serializable(0xB736B8435F1FE1D8, GameType.DS)]
    public class SkeletonAnimationEventText : SkeletonAnimationEventPayload
    {
        [RTTI.Member(2, 0x20)] public String Label;
    }

    [RTTI.Serializable(0xD70938EC5B11FC31, GameType.DS)]
    public class SkeletonAnimationEventsResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<SkeletonAnimationEvent> Events;
        [RTTI.Member(3, 0x30)] public Array<float> SyncTrack;
        [RTTI.Member(4, 0x40)] public float Duration;
    }

    [RTTI.Serializable(0x39A4A2EC923B67E8, GameType.DS)]
    public class SkeletonAnimationResource : Resource
    {
        [RTTI.BaseClass(0x20)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(11, 0x38, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(10, 0x40, "General")] public Array<uint8> EdgeAnimAnimation;
        [RTTI.Member(9, 0x50, "General")] public float SampleRate;
        [RTTI.Member(8, 0x54, "General")] public float Duration;
        [RTTI.Member(6, 0x58, "Animation")] public ELoopMode LoopMode;
        [RTTI.Member(13, 0x60, "General")] public Quat LocomotionDeltaRotation;
        [RTTI.Member(14, 0x70, "General")] public Vec3 LocomotionDeltaTranslation;
        [RTTI.Member(12, 0x80, "General")] public Ref<SkeletonAnimationEventsResource> Events;
        [RTTI.Member(15, 0x88, "General")] public Array<uint32> AnimEvent;
    }

    [RTTI.Serializable(0xA5A5512F0AA803AD, GameType.DS)]
    public class SkeletonAnimationResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF95259E7154F2739, GameType.DS)]
    public class SkeletonHelpers : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<OrientationHelper> Helpers;
        [RTTI.Member(3, 0x30)] public Array<uint> NameHashes;
        [RTTI.Member(4, 0x40, true)] public Array<Ref<SkeletonHelpers>> ReferencedHelpers;
    }

    [RTTI.Serializable(0x79AAB02BCB01DE28, GameType.DS)]
    public class SkeletonHelpersComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2BBEE1E82743DBA1, GameType.DS)]
    public class SkeletonHelpersComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xAE8C84AA401551E0, GameType.DS)]
    public class SkeletonHelpersComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool MustHaveModel;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(5, 0x30, "Logic")] public Array<Ref<SkeletonHelpers>> Helpers;
    }

    [RTTI.Serializable(0xA17A6430CA0883AF, GameType.DS)]
    public class SkeletonTargetDesc
    {
        [RTTI.Member(0, 0x0)] public String TargetName;
        [RTTI.Member(1, 0x8)] public Ref<Skeleton> Skeleton;
    }

    [RTTI.Serializable(0x3711AB01A537FD08, GameType.DS)]
    public class SkeletonTargetLink
    {
        [RTTI.Member(0, 0x0)] public SkeletonTargetDesc Target;
        [RTTI.Member(1, 0x10)] public String ParentTarget;
        [RTTI.Member(2, 0x18)] public String ParentLink;
    }

    [RTTI.Serializable(0xE58E0892B5D82518, GameType.DS)]
    public class SkeletonTargetTree : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<SkeletonTargetLink> Tree;
    }

    [RTTI.Serializable(0x172934AD09285313, GameType.DS)]
    public class SkinMaterial
    {
        [RTTI.Member(0, 0x0)] public FRGBColor TranslucencyColor;
        [RTTI.Member(1, 0xC)] public float ForwardSpecularWeight;
        [RTTI.Member(2, 0x10)] public float CubemapRoughnessMultiplier;
    }

    [RTTI.Serializable(0x118378C2F191097A, GameType.DS)]
    public class SkinnedMeshBoneBoundingBoxes : Resource
    {
        [RTTI.Member(3, 0x20)] public Array<BoundingBox3> BoneBoundingBoxes;
        [RTTI.Member(2, 0x30)] public Array<uint16> Indices;
        [RTTI.Member(4, 0x40)] public bool UsesIndices;
        [RTTI.Member(5, 0x41)] public bool Initialized;
    }

    [RTTI.Serializable(0xBCE84D96052C041E, GameType.DS)]
    public class SkinnedMeshIndexedJointBindings : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<uint16> JointIndexList;
        [RTTI.Member(3, 0x30)] public Array<Mat44> InverseBindMatrices;
        [RTTI.Member(4, 0x40)] public MurmurHashValue DataHash;
    }

    [RTTI.Serializable(0x6B499EE7FD66082E, GameType.DS)]
    public class SkinnedMeshInstance : GeometryObject
    {
        [RTTI.Member(7, 0xC8, "General")] public Ref<MeshResourceBase> Resource;
    }

    [RTTI.Serializable(0xC8D223289354D443, GameType.DS)]
    public class SkinnedMeshResource : MeshResourceBase
    {
        [RTTI.Member(7, 0x80, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(8, 0x88, "General")] public Ref<SkeletonHelpers> OrientationHelpers;
    }

    [RTTI.Serializable(0xB395512D337BD87C, GameType.DS)]
    public class SkinnedModel : Model
    {
    }

    [RTTI.Serializable(0x6DD45001EE9528D0, GameType.DS)]
    public class SkinnedModelLOD
    {
        [RTTI.Member(0, 0x0)] public float Distance;
        [RTTI.Member(1, 0x4)] public bool DisableHipsIK;
        [RTTI.Member(2, 0x5)] public bool DisableTerrainPredictionFootIK;
        [RTTI.Member(3, 0x6)] public bool DisableHeadIK;
        [RTTI.Member(4, 0x7)] public bool DisablePoseDeformer;
        [RTTI.Member(5, 0x8)] public bool DisableForceFields;
        [RTTI.Member(6, 0x9)] public bool LowDetailTerrainDetection;
        [RTTI.Member(7, 0xA)] public bool DisableAnimationManagerOnExternalAnimation;
    }

    [RTTI.Serializable(0xBB3F2CCF38951A72, GameType.DS)]
    public class SkinnedModelPBDTeleportSettings
    {
        [RTTI.Member(0, 0x0)] public String JointName;
        [RTTI.Member(1, 0x8)] public float MaxPositionDelta;
    }

    [RTTI.Serializable(0x54FB67EF4C52BEAF, GameType.DS)]
    public class SkinnedModelPoseDeformerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PoseDeformerResource> PoseDeformerResource;
        [RTTI.Member(5, 0x28, "PBDLod")] public float PBDLodDist1;
        [RTTI.Member(6, 0x2C, "PBDLod")] public float PBDLodDist2;
        [RTTI.Member(7, 0x30, "PBDLod")] public float PBDLodDist3;
    }

    [RTTI.Serializable(0x33A1C93DFE7870CC, GameType.DS)]
    public class SkinnedModelRep : ModelRep
    {
    }

    [RTTI.Serializable(0xBC79DACC10E13CB7, GameType.DS)]
    public class SkinnedModelResource : ModelResource
    {
        [RTTI.Member(10, 0x58, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(11, 0x60, "General")] public Array<SkinnedModelLOD> LODs;
        [RTTI.Member(12, 0x70, "General")] public bool DisableCollision;
        [RTTI.Member(14, 0x78, "General")] public Ref<SkinnedMeshBoneBoundingBoxes> InitialPoseBoneBounds;
        [RTTI.Member(15, 0x80, "General")] public Ref<Skeleton> InitialRepresentationSkeleton;
        [RTTI.Member(16, 0x88, "General")] public Array<SkinnedModelPBDTeleportSettings> PBDTeleportSettings;
        [RTTI.Member(17, 0x98, "General")] public Ref<SkinnedModelPoseDeformerResource> SkinnedModelPoseDeformerResource;
        [RTTI.Member(18, 0xA0, "General")] public Ref<SkinnedModelPoseDeformerResource> LogicalSkinnedModelPoseDeformerResource;
        [RTTI.Member(13, 0xA8, "General")] public Array<Ref<AbilityResource>> AbilityResources;
        [RTTI.Member(19, 0xB8, "General", true)] public Ref<AbilityAnimationResource> AbilityAnimationResource;
    }

    [RTTI.Serializable(0xC4B9E97DCE64EBD9, GameType.DS)]
    public class SkinnedModelSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4599C370ADA6912F, GameType.DS)]
    public class SkinnedPoint
    {
        [RTTI.Member(0, 0x0)] public Vec3 Point;
        [RTTI.Member(1, 0x10)] public int UserIndex;
        [RTTI.Member(2, 0x14)] public float Weight0;
        [RTTI.Member(3, 0x18)] public float Weight1;
        [RTTI.Member(4, 0x1C)] public float Weight2;
        [RTTI.Member(5, 0x20)] public uint16 BoneIndex0;
        [RTTI.Member(6, 0x22)] public uint16 BoneIndex1;
        [RTTI.Member(7, 0x24)] public uint16 BoneIndex2;
    }

    [RTTI.Serializable(0x5045FF2959A98201, GameType.DS)]
    public class SkinnedPointsResource : Resource
    {
        [RTTI.Member(3, 0x20)] public Array<SkinnedPoint> Points;
        [RTTI.Member(2, 0x30)] public Ref<Skeleton> Skeleton;
    }

    [RTTI.Serializable(0x6138B78C55F86AF2, GameType.DS)]
    public class SkipSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE3A7B9995A3E11E, GameType.DS)]
    public class SkipSequenceEventResource : SkipSequenceEventResourceBase
    {
        [RTTI.Member(8, 0x30, "Logic")] public ESkipBehavior SkipBehavior;
        [RTTI.Member(9, 0x34, "Logic")] public bool SkipConfirmationRequired;
        [RTTI.Member(13, 0x35, "Logic")] public bool DisableOnSubmission;
        [RTTI.Member(14, 0x36, "Logic")] public bool EnableExtendedLoadingStateCheck;
        [RTTI.Member(15, 0x37, "Logic")] public bool HideTelop;
        [RTTI.Member(16, 0x38, "Logic")] public float FadeInDelaySecondsAfterSkippingSequence;
        [RTTI.Member(10, 0x3C, "Logic")] public ESkipFade SkipFade;
        [RTTI.Member(12, 0x3D, "Logic")] public ESequenceFactContextType AutoSkipFactContextType;
        [RTTI.Member(11, 0x40, "Logic")] public Ref<BooleanFact> AutoSkipFact;
    }

    [RTTI.Serializable(0xA23BA985B8B0F9C2, GameType.DS)]
    public class SkipSequenceEventResourceBase : TimedEventResource
    {
    }

    [RTTI.Serializable(0xDDA3FAA153074C4D, GameType.DS)]
    public class SlideThroughWorldMover : Mover
    {
    }

    [RTTI.Serializable(0x9DD674927C6F6838, GameType.DS)]
    public class SlideThroughWorldMoverJoystickControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE77146BCC43FEF66, GameType.DS)]
    public class SlideThroughWorldMoverJoystickControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float MaxSpeed;
        [RTTI.Member(4, 0x24, "Logic")] public int SpeedSteps;
        [RTTI.Member(5, 0x28, "Logic")] public bool AllowPreviousEntityControl;
    }

    [RTTI.Serializable(0x3ABDCEDD1E6E231A, GameType.DS)]
    public class SlideThroughWorldMoverResource : MoverResource
    {
        [RTTI.Member(7, 0x28, "Logic")] public float MaxSlopeAngle;
        [RTTI.Member(8, 0x2C, "Logic")] public float MaxStepHeight;
        [RTTI.Member(9, 0x30, "Logic")] public float Gravity;
        [RTTI.Member(10, 0x40, "Logic")] public Vec3 JumpVelocity;
        [RTTI.Member(11, 0x50, "Logic")] public bool KeepOrientationWhenJumping;
    }

    [RTTI.Serializable(0xA996CEDFF1A77C, GameType.DS)]
    public class SliderTag : VisualTag
    {
    }

    [RTTI.Serializable(0x1EBA1AA5F04ABD0C, GameType.DS)]
    public class SliderWidget : Widget
    {
    }

    [RTTI.Serializable(0x32FD6431BD254500, GameType.DS)]
    public class SlowMotionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x16763FFE72DB0C83, GameType.DS)]
    public class SlowMotionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
    }

    [RTTI.Serializable(0x6848301B4DE20044, GameType.DS)]
    public class SlowMotionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB8ABB18F6CBD6946, GameType.DS)]
    public class SlowMotionEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(14, 0x40, "Logic")] public AnimatableValue AnimatableTimeScale;
        [RTTI.Member(15, 0x58, "Logic")] public AnimatableValue AnimatableCameraTimeScale;
        [RTTI.Member(12, 0x70, "Logic")] public float BlendInTransitionTime;
        [RTTI.Member(13, 0x74, "Logic")] public float BlendOutTransitionTime;
    }

    [RTTI.Serializable(0x57BC3CE0F42F7306, GameType.DS)]
    public class SlowMotionSettingResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float TimeScale;
        [RTTI.Member(4, 0x24, "Logic")] public float CameraTimeScale;
        [RTTI.Member(5, 0x28, "Logic")] public float BlendInTime;
        [RTTI.Member(6, 0x2C, "Logic")] public float BlendOutTime;
    }

    [RTTI.Serializable(0x1EBE3E277390FE31, GameType.DS)]
    public class SlowMotionSettingResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x15D1014B7936A22, GameType.DS)]
    public class SmartObjectArea : NavMeshArea
    {
        [RTTI.Member(9, 0xB0)] public Ref<AIMarker> CenterMarker;
        [RTTI.Member(11, 0xB8, "Audio")] public Ref<SoundResource> AreaSound;
        [RTTI.Member(12, 0xC0, "Audio")] public Vec3 SoundOffset;
        [RTTI.Member(13, 0xD0, "Audio")] public SoundShape SoundShape;
    }

    [RTTI.Serializable(0x46C4802811C8BCFA, GameType.DS)]
    public class SmartObjectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF2A26A71155F25D3, GameType.DS)]
    public class SmartObjectComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Radius;
        [RTTI.Member(4, 0x28, "Logic")] public Array<CPtr<SmartObjectDesireInfluence>> DesireInfluences;
        [RTTI.Member(5, 0x38, "Logic")] public float UseTime;
        [RTTI.Member(6, 0x3C, "Logic")] public float CooldownTime;
        [RTTI.Member(7, 0x40, "Logic")] public TagPropertyLinkCollection RequiredTags;
        [RTTI.Member(8, 0x50, "Logic")] public TagPropertyLinkCollection DisallowedTags;
    }

    [RTTI.Serializable(0x33CDAF75D62357EA, GameType.DS)]
    public class SmartObjectComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x60208F7CCB3F07D7, GameType.DS)]
    public class SmartObjectDesire : ResourceWithName
    {
        [RTTI.Member(4, 0x28)] public bool IsInvisibleActivity;
    }

    [RTTI.Serializable(0x16A374D0979174C6, GameType.DS)]
    public class SmartObjectDesireComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6C97FADB9705109C, GameType.DS)]
    public class SmartObjectDesireComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<SmartObjectDesireSetting> Desires;
    }

    [RTTI.Serializable(0x3BB4C61A74508DC6, GameType.DS)]
    public class SmartObjectDesireInfluence : CoreObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<SmartObjectDesire> Desire;
        [RTTI.Member(4, 0x28, "Logic")] public float InfluenceValue;
        [RTTI.Member(5, 0x2C, "Logic")] public bool IsSideDesire;
    }

    [RTTI.Serializable(0x2FBDBDDE4129A94E, GameType.DS)]
    public class SmartObjectDesireSetting
    {
        [RTTI.Member(0, 0x0)] public Ref<SmartObjectDesire> Desire;
        [RTTI.Member(1, 0x10)] public float TimeUntilDesired;
        [RTTI.Member(2, 0x14)] public bool RemoveAfterSatisfaction;
    }

    [RTTI.Serializable(0x5E3C198CDD4E6A3C, GameType.DS)]
    public class SmartObjectPriorityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x213126A866B652EA, GameType.DS)]
    public class SmartObjectPriorityComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int Priority;
    }

    [RTTI.Serializable(0xEE0ED211916AF2B9, GameType.DS)]
    public class SmoothAimLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x7E445815F3D5A8BE, GameType.DS)]
    public class SmoothAimLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> AimTargetLocator;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocatorResource> PositionLocator;
        [RTTI.Member(10, 0x40, "Logic")] public Ref<SmoothAimLocatorSettings> SmoothAimSettings;
        [RTTI.Member(11, 0x50, "Logic")] public FRect HardLimits;
        [RTTI.Member(12, 0x60, "Logic")] public FRect SoftLimits;
    }

    [RTTI.Serializable(0x6DA5D618F7E361A3, GameType.DS)]
    public class SmoothAimLocatorSettings : RTTIRefObject
    {
        [RTTI.Member(3, 0x20, "Logic")] public IRange MinMaxDelayFrames;
        [RTTI.Member(4, 0x30, "Logic")] public float FrequencyScreenX;
        [RTTI.Member(6, 0x34, "Logic")] public float FrequencyScreenY;
        [RTTI.Member(5, 0x40, "Logic")] public float DampingRatioScreenX;
        [RTTI.Member(7, 0x44, "Logic")] public float DampingRatioScreenY;
    }

    [RTTI.Serializable(0x661A6B4EF0A78175, GameType.DS)]
    public class SmoothedSoundState
    {
    }

    [RTTI.Serializable(0x3BE49036B1962E9B, GameType.DS)]
    public class SnowClearEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6D19E968D8C1F8D8, GameType.DS)]
    public class SnowClearEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x3438A7363B4921D6, GameType.DS)]
    public class SnowDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1BFC606296B057A4, GameType.DS)]
    public class SnowDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Animation")] public String SnowDepthAnimationVariableName;
        [RTTI.Member(4, 0x28, "Animation")] public float MaxValidBelowTerrainSampleDistance;
    }

    [RTTI.Serializable(0x31BA761F24859894, GameType.DS)]
    public class SnowInteractionSystem : EnvironmentInteractionSystem
    {
        [RTTI.Member(15, 0xE4, "Snow")] public float Snow_RangeBelow;
        [RTTI.Member(16, 0xE8, "Snow")] public float Snow_RangeAbove;
        [RTTI.Member(17, 0xEC, "Snow")] public float Snow_TemporalFilterFactor;
        [RTTI.Member(18, 0xF0, "Snow")] public float Snow_RefillRate;
        [RTTI.Member(10, 0xF4, "Mud")] public float Mud_RangeBelow;
        [RTTI.Member(11, 0xF8, "Mud")] public float Mud_RangeAbove;
        [RTTI.Member(12, 0xFC, "Mud")] public float Mud_TemporalFilterFactor;
        [RTTI.Member(13, 0x100, "Mud")] public float Mud_RefillRate;
        [RTTI.Member(20, 0x108, "WorldData")] public Array<Ref<WorldDataType>> WorldDataTypes;
        [RTTI.Member(5, 0x118, "Deformation")] public Array<ActiveInteractionRegion> ActiveWorldRegions;
        [RTTI.Member(6, 0x128, "Deformation")] public Ref<Texture> NormalTexture;
        [RTTI.Member(7, 0x130, "Deformation")] public float NormalTiling;
        [RTTI.Member(8, 0x134, "Deformation")] public float NormalIntensity;
        [RTTI.Member(3, 0x198, "Rendering")] public EnvironmentInteractionRenderSettings Rendering;
    }

    [RTTI.Serializable(0x317CCB38CDB6476, GameType.DS)]
    public class SnowInteractionSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> UpdateShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> ClearNormalShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> BatchSampleShader;
    }

    [RTTI.Serializable(0x9E4661998D0B9B78, GameType.DS)]
    public class SnowInteractionSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x6317BAC8B52FB4E1, GameType.DS)]
    public class SoldierAIController : HumanoidController
    {
    }

    [RTTI.Serializable(0x272E77C80C0473A6, GameType.DS)]
    public class SoldierJoystickController : HumanoidController
    {
    }

    [RTTI.Serializable(0xE5F287C8A1AF8C4D, GameType.DS)]
    public class SonicStunComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6538104B22131506, GameType.DS)]
    public class SonicStunComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB712A21C3EC42BAD, GameType.DS)]
    public class SonicStunComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(4, 0x28, "Logic")] public float StartRadius;
        [RTTI.Member(5, 0x2C, "Logic")] public float ConeAngle;
        [RTTI.Member(6, 0x30, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
    }

    [RTTI.Serializable(0x5E846155971FA4DE, GameType.DS)]
    public class SortedEvent : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int GroupIndex;
        [RTTI.Member(3, 0x2C)] public bool Participate;
        [RTTI.Member(4, 0x30)] public Ref<EventResource> EventResource;
        [RTTI.Member(5, 0x38)] public GGUUID OriginalUUID;
        [RTTI.Member(6, 0x48)] public Array<CPtr<SortedEvent>> DependentOn;
        [RTTI.Member(7, 0x58)] public Array<CPtr<SortedEvent>> DependentBy;
    }

    [RTTI.Serializable(0x676498A109E63AFB, GameType.DS)]
    public class SoundComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA313E8C85AC262E4, GameType.DS)]
    public class SoundComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xFC53CAA4469FE142, GameType.DS)]
    public class SoundComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Array<SoundParameterPODVariant> ConstantSoundParameters;
        [RTTI.Member(3, 0x30)] public Array<SoundParameterPODVariant> ImpactSoundParameters;
    }

    [RTTI.Serializable(0x7C18CA92F82EF4AA, GameType.DS)]
    public class SoundComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD59A044EB6C6A1D5, GameType.DS)]
    public class SoundEnvironment : WorldEnvironment
    {
        [RTTI.Member(5, 0x38)] public Array<Ref<EnvironmentSound>> Sounds;
        [RTTI.Member(6, 0x48)] public float SoundSpawnThreshold;
        [RTTI.Member(7, 0x4C)] public float SoundSpawnInterval;
        [RTTI.Member(8, 0x50)] public float SoundSpawnCountFactor;
        [RTTI.Member(9, 0x54)] public float MaxSoundsPerSpawnPoint;
        [RTTI.Member(10, 0x58)] public Ref<GraphProgramResource> SoundSpawnLogic;
        [RTTI.Member(11, 0x60)] public Array<IRange> SpawnPointRange;
    }

    [RTTI.Serializable(0xCF0FB7A7ECD0872B, GameType.DS)]
    public class SoundEnvironmentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4D0A59DCF294E2B1, GameType.DS)]
    public class SoundEventInstance : AudioEventInstance
    {
    }

    [RTTI.Serializable(0x216366E0FBE8E874, GameType.DS)]
    public class SoundEventResource : AudioEventResource
    {
        [RTTI.Member(15, 0x58, "Logic")] public Ref<SoundResource> SoundResource;
    }

    [RTTI.Serializable(0xA272CC76032E44E9, GameType.DS)]
    public class SoundFilterParameters
    {
    }

    [RTTI.Serializable(0x7FC28103CEBC534C, GameType.DS)]
    public class SoundGroup : Resource
    {
        [RTTI.Member(2, 0x21)] public ESoundGroupType Type;
        [RTTI.Member(3, 0x28)] public Ref<SubmixResource> Destination;
        [RTTI.Member(6, 0x30)] public bool PauseWhenGameIsPaused;
        [RTTI.Member(7, 0x31)] public bool SendToReverb;
        [RTTI.Member(4, 0x34)] public int Priority;
        [RTTI.Member(5, 0x38)] public int InstanceLimit;
    }

    [RTTI.Serializable(0x5C2B37CF67300726, GameType.DS)]
    public class SoundGroupList : CoreObject
    {
        [RTTI.Member(3, 0x20, "Groups")] public Array<Ref<SoundGroup>> Groups;
        [RTTI.Member(4, 0x40, "Groups")] public Ref<SoundGroup> ParentGroup;
        [RTTI.Member(5, 0x48, "Groups")] public Ref<SoundGroup> DefaultPlayerDialogueGroup;
        [RTTI.Member(6, 0x50, "Groups")] public Ref<SoundGroup> DefaultNpcDialogueGroup;
        [RTTI.Member(7, 0x58, "Groups")] public Ref<SoundGroup> DefaultMusicGroup;
        [RTTI.Member(8, 0x60, "Groups")] public Ref<SoundGroup> MetronomeGroup;
    }

    [RTTI.Serializable(0x3DAE233A6D4B42D9, GameType.DS)]
    public class SoundInstance : SoundInstanceBase
    {
    }

    [RTTI.Serializable(0x24F28A610A51E65B, GameType.DS)]
    public class SoundInstanceBase : WorldNode
    {
    }

    [RTTI.Serializable(0xF6D7C2BB166870C4, GameType.DS)]
    public class SoundInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2CEBAA43C5C4272F, GameType.DS)]
    public class SoundListener : WorldNode
    {
    }

    [RTTI.Serializable(0x835ED783463C969D, GameType.DS)]
    public class SoundListenerOverrideEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7A6C76D6C615C954, GameType.DS)]
    public class SoundListenerOverrideEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0xB7D31A66DBE50AFC, GameType.DS)]
    public class SoundManager : ObjectManager
    {
        [RTTI.Member(3, 0x68, "General")] public bool NoSound;
    }

    [RTTI.Serializable(0x890BA0407588EE24, GameType.DS)]
    public class SoundMasterBusResource : SubmixResource
    {
    }

    [RTTI.Serializable(0x775611BB45A98434, GameType.DS)]
    public class SoundMasterParametersResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public bool Default;
        [RTTI.Member(5, 0x24, "PreAmpGain")] public float PreAmpGain;
        [RTTI.Member(69, 0x28, "OutputGain")] public float Gain;
        [RTTI.Member(70, 0x2C, "OutputGain")] public float OutputGain_LfeGain;
        [RTTI.Member(7, 0x30, "ParametricEq")] public ESoundFilterMode Band1Mode;
        [RTTI.Member(8, 0x34, "ParametricEq")] public float Band1Gain;
        [RTTI.Member(9, 0x38, "ParametricEq")] public float Band1Frequency;
        [RTTI.Member(10, 0x3C, "ParametricEq")] public float Band1QValue;
        [RTTI.Member(11, 0x40, "ParametricEq")] public ESoundFilterMode Band2Mode;
        [RTTI.Member(12, 0x44, "ParametricEq")] public float Band2Gain;
        [RTTI.Member(13, 0x48, "ParametricEq")] public float Band2Frequency;
        [RTTI.Member(14, 0x4C, "ParametricEq")] public float Band2QValue;
        [RTTI.Member(15, 0x50, "ParametricEq")] public ESoundFilterMode Band3Mode;
        [RTTI.Member(16, 0x54, "ParametricEq")] public float Band3Gain;
        [RTTI.Member(17, 0x58, "ParametricEq")] public float Band3Frequency;
        [RTTI.Member(18, 0x5C, "ParametricEq")] public float Band3QValue;
        [RTTI.Member(19, 0x60, "ParametricEq")] public ESoundFilterMode Band4Mode;
        [RTTI.Member(20, 0x64, "ParametricEq")] public float Band4Gain;
        [RTTI.Member(21, 0x68, "ParametricEq")] public float Band4Frequency;
        [RTTI.Member(22, 0x6C, "ParametricEq")] public float Band4QValue;
        [RTTI.Member(24, 0x70, "Compressor")] public bool Enabled;
        [RTTI.Member(25, 0x74, "Compressor")] public float LookAheadInMs;
        [RTTI.Member(26, 0x78, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand1;
        [RTTI.Member(27, 0x80, "Compressor")] public float CrossOverFrequencyBand1Band2;
        [RTTI.Member(28, 0x88, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand2;
        [RTTI.Member(29, 0x90, "Compressor")] public float CrossOverFrequencyBand2Band3;
        [RTTI.Member(30, 0x98, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand3;
        [RTTI.Member(31, 0xA0, "Compressor")] public float CrossOverFrequencyBand3Band4;
        [RTTI.Member(32, 0xA8, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand4;
        [RTTI.Member(60, 0xB0, "UltraMaximizer")] public bool UltraMaximizerEnabled;
        [RTTI.Member(61, 0xB1, "UltraMaximizer")] public bool UltraMaximizerAutoRelease;
        [RTTI.Member(62, 0xB4, "UltraMaximizer")] public float UltraMaximizerThresholdInDb;
        [RTTI.Member(63, 0xB8, "UltraMaximizer")] public float UltraMaximizerOutputCeilingInDb;
        [RTTI.Member(64, 0xBC, "UltraMaximizer")] public float UltraMaximizerReleaseTimeInMs;
        [RTTI.Member(65, 0xC0, "UltraMaximizer")] public float UltraMaximizerLfeThresholdInDb;
        [RTTI.Member(66, 0xC4, "UltraMaximizer")] public float UltraMaximizerLfeOutputCeilingInDb;
        [RTTI.Member(67, 0xC8, "UltraMaximizer")] public float UltraMaximizerLfeReleaseTimeInMs;
        [RTTI.Member(34, 0xCC, "Equalizer24")] public bool EqualizerEnabled;
        [RTTI.Member(35, 0xD0, "Equalizer24")] public float EqualizerGain1;
        [RTTI.Member(36, 0xD4, "Equalizer24")] public float EqualizerGain2;
        [RTTI.Member(37, 0xD8, "Equalizer24")] public float EqualizerGain3;
        [RTTI.Member(38, 0xDC, "Equalizer24")] public float EqualizerGain4;
        [RTTI.Member(39, 0xE0, "Equalizer24")] public float EqualizerGain5;
        [RTTI.Member(40, 0xE4, "Equalizer24")] public float EqualizerGain6;
        [RTTI.Member(41, 0xE8, "Equalizer24")] public float EqualizerGain7;
        [RTTI.Member(42, 0xEC, "Equalizer24")] public float EqualizerGain8;
        [RTTI.Member(43, 0xF0, "Equalizer24")] public float EqualizerGain9;
        [RTTI.Member(44, 0xF4, "Equalizer24")] public float EqualizerGain10;
        [RTTI.Member(45, 0xF8, "Equalizer24")] public float EqualizerGain11;
        [RTTI.Member(46, 0xFC, "Equalizer24")] public float EqualizerGain12;
        [RTTI.Member(47, 0x100, "Equalizer24")] public float EqualizerGain13;
        [RTTI.Member(48, 0x104, "Equalizer24")] public float EqualizerGain14;
        [RTTI.Member(49, 0x108, "Equalizer24")] public float EqualizerGain15;
        [RTTI.Member(50, 0x10C, "Equalizer24")] public float EqualizerGain16;
        [RTTI.Member(51, 0x110, "Equalizer24")] public float EqualizerGain17;
        [RTTI.Member(52, 0x114, "Equalizer24")] public float EqualizerGain18;
        [RTTI.Member(53, 0x118, "Equalizer24")] public float EqualizerGain19;
        [RTTI.Member(54, 0x11C, "Equalizer24")] public float EqualizerGain20;
        [RTTI.Member(55, 0x120, "Equalizer24")] public float EqualizerGain21;
        [RTTI.Member(56, 0x124, "Equalizer24")] public float EqualizerGain22;
        [RTTI.Member(57, 0x128, "Equalizer24")] public float EqualizerGain23;
        [RTTI.Member(58, 0x12C, "Equalizer24")] public float EqualizerGain24;
        [RTTI.Member(74, 0x130, "SpeakerGains")] public float CenterGain;
        [RTTI.Member(72, 0x134, "SpeakerGains")] public float LeftFrontGain;
        [RTTI.Member(76, 0x138, "SpeakerGains")] public float LeftSurroundGain;
        [RTTI.Member(78, 0x13C, "SpeakerGains")] public float LeftBackSurroundGain;
        [RTTI.Member(79, 0x140, "SpeakerGains")] public float RightBackSurroundGain;
        [RTTI.Member(77, 0x144, "SpeakerGains")] public float RightSurroundGain;
        [RTTI.Member(73, 0x148, "SpeakerGains")] public float RightFrontGain;
        [RTTI.Member(75, 0x14C, "SpeakerGains")] public float SpeakerGains_LfeGain;
    }

    [RTTI.Serializable(0x4202A42A31BFB16F, GameType.DS)]
    public class SoundMixEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA0C5D1A959B0DBCC, GameType.DS)]
    public class SoundMixEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SoundMixResource> SoundMix;
        [RTTI.Member(9, 0x38, "Logic")] public float FadeInTime;
        [RTTI.Member(10, 0x3C, "Logic")] public float FadeOutTime;
    }

    [RTTI.Serializable(0x196C1F85F6DE66ED, GameType.DS)]
    public class SoundMixFader
    {
        [RTTI.Member(0, 0x0)] public Ref<SoundGroup> Group;
        [RTTI.Member(1, 0x8)] public LinearGainFloat Gain;
    }

    [RTTI.Serializable(0xC16C4A33C454A166, GameType.DS)]
    public class SoundMixResource : Resource
    {
        [RTTI.Member(3, 0x20, "Mix")] public Array<SoundMixFader> Faders;
    }

    [RTTI.Serializable(0x7E3F9D0387E6400C, GameType.DS)]
    public class SoundMixStateActivateRequest : CoreObject
    {
    }

    [RTTI.Serializable(0x989E91E363E80123, GameType.DS)]
    public class SoundMixStateEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1928368BDE6CF502, GameType.DS)]
    public class SoundMixStateEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SoundMixStateResource> SoundMixState;
    }

    [RTTI.Serializable(0x70B5B65D8C6160FC, GameType.DS)]
    public class SoundMixStateManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x5665DB33C4363963, GameType.DS)]
    public class SoundMixStateResource : Resource
    {
        [RTTI.Member(3, 0x20, "State")] public Ref<RelativeSoundMixResource> RelativeMix;
        [RTTI.Member(4, 0x28, "State")] public Array<Ref<SubmixPresetResource>> SubmixPresets;
        [RTTI.Member(5, 0x38, "State")] public float AttackTime;
    }

    [RTTI.Serializable(0xDAA5625F4456303F, GameType.DS)]
    public class SoundPadSpeakerMasterBusResource : SubmixResource
    {
    }

    [RTTI.Serializable(0x810D141CB9E554C9, GameType.DS)]
    public class SoundPadSpeakerMasterParametersResource : Resource
    {
        [RTTI.Member(3, 0x20, "MasterGain")] public float Gain;
        [RTTI.Member(4, 0x24, "MasterGain")] public float MixedToMainOutputGain;
        [RTTI.Member(6, 0x28, "UltraMaximizer")] public bool UltraMaximizerEnabled;
        [RTTI.Member(7, 0x29, "UltraMaximizer")] public bool UltraMaximizerAutoRelease;
        [RTTI.Member(8, 0x2C, "UltraMaximizer")] public float UltraMaximizerThresholdInDb;
        [RTTI.Member(9, 0x30, "UltraMaximizer")] public float UltraMaximizerOutputCeilingInDb;
        [RTTI.Member(10, 0x34, "UltraMaximizer")] public float UltraMaximizerReleaseTimeInMs;
    }

    [RTTI.Serializable(0x74746FE0E251B23A, GameType.DS)]
    public class SoundParameterPODVariant
    {
        [RTTI.Member(0, 0x0)] public String SoundParameterName;
        [RTTI.Member(1, 0x8)] public PODVariant Value;
    }

    [RTTI.Serializable(0x34AAC502DC844CE0, GameType.DS)]
    public class SoundProgramContext
    {
    }

    [RTTI.Serializable(0x686C8BDBEC28F192, GameType.DS)]
    public class SoundResource : ResourceWithName
    {
        [RTTI.BaseClass(0x28)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(40, 0x0, "Wwise", true)] public EWwiseGameObjectPositionType PositionType;
        [RTTI.Member(8, 0x40, "Sound")] public Ref<SoundGroup> Group;
        [RTTI.Member(9, 0x48, "Sound")] public LinearGainFloat DefaultVolume;
        [RTTI.Member(28, 0x4C, "Sound")] public float DefaultLfeVolume;
        [RTTI.Member(29, 0x50, "Sound")] public float DefaultAngle;
        [RTTI.Member(25, 0x54, "Sound")] public float DefaultFrequencyFactor;
        [RTTI.Member(36, 0x60, "Sound")] public SoundShape Shape;
        [RTTI.Member(21, 0x80, "Sound")] public LinearGainFloat WetLevel;
        [RTTI.Member(12, 0x84, "Sound")] public float MinDist;
        [RTTI.Member(10, 0x88, "Sound")] public float PressureLevel;
        [RTTI.Member(14, 0x8C, "Sound")] public float AttenuationLinearity;
        [RTTI.Member(15, 0x90, "Sound")] public float AttenuationSlope;
        [RTTI.Member(16, 0x94, "Sound")] public bool DefaultLooping;
        [RTTI.Member(11, 0x95, "Sound")] public bool UsesHDRSystem;
        [RTTI.Member(20, 0x96, "Sound")] public bool UsesRaycast;
        [RTTI.Member(30, 0x97, "Sound")] public bool AffectedByTimeScale;
        [RTTI.Member(17, 0x98, "Sound")] public ESoundInstanceLimitMode InstanceLimitMode;
        [RTTI.Member(18, 0x9C, "Sound")] public uint8 InstanceLimit;
        [RTTI.Member(19, 0x9D, "Sound")] public uint8 BitField;
        [RTTI.Member(27, 0xA0, "Sound")] public float InitialRMS;
        [RTTI.Member(22, 0xA4, "Sound")] public float WetMinRange;
        [RTTI.Member(23, 0xA8, "Sound")] public float WetMaxRange;
        [RTTI.Member(24, 0xAC, "Sound")] public float WetLevelBias;
        [RTTI.Member(26, 0xB0, "Sound")] public float PanModificationDistance;
        [RTTI.Member(31, 0xB4, "Sound")] public float OcclusionFactor;
        [RTTI.Member(32, 0xB8, "Sound")] public float ObstructionFactor;
        [RTTI.Member(33, 0xBC, "Sound")] public bool CancelSoundZoneOcclusionAndObstruction;
        [RTTI.Member(34, 0xC0, "Sound")] public float DopplerFactor;
        [RTTI.Member(35, 0xC4, "Sound")] public float MaxAzimuthDelta;
        [RTTI.Member(13, 0xE8, "Sound")] public float MaxDist;
        [RTTI.Member(37, 0xEC, "Sound")] public bool StopOnSkip;
        [RTTI.Member(38, 0xF0, "Sound")] public float SourcePositionExpansionFactor;
    }

    [RTTI.Serializable(0xA294229C60364BE7, GameType.DS)]
    public class SoundShape
    {
        [RTTI.Member(3, 0x0)] public float ConeInnerAngle;
        [RTTI.Member(7, 0x0)] public float CapsuleLength;
        [RTTI.Member(1, 0x0)] public Vec3 BoxSize;
        [RTTI.Member(6, 0x4)] public float CapsuleRadius;
        [RTTI.Member(4, 0x4)] public float ConeOuterAngle;
        [RTTI.Member(5, 0x8)] public float ConeOuterGainMultiplier;
        [RTTI.Member(2, 0xC)] public float SphereRadius;
        [RTTI.Member(0, 0x10)] public ESoundShape ShapeType;
    }

    [RTTI.Serializable(0xF35DB11037ED37EB, GameType.DS)]
    public class SoundSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x96A304D800CE0D81, GameType.DS)]
    public class SoundSystemGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD27162CD4923DD6F, GameType.DS)]
    public class SoundSystemSettings : CoreObject
    {
        [RTTI.Member(3, 0x20, "Settings")] public float SoundMixFadeTime;
        [RTTI.Member(4, 0x24, "Settings")] public float ElevationFactor;
        [RTTI.Member(5, 0x28, "Settings")] public float ElevationFactorForAmbisonics;
        [RTTI.Member(6, 0x2C, "Settings")] public float OcclusionVolumeFactor;
        [RTTI.Member(7, 0x30, "Settings")] public float OcclusionStrength;
        [RTTI.Member(8, 0x34, "Settings")] public float ObstructionVolumeFactor;
        [RTTI.Member(9, 0x38, "Settings")] public float ObstructionStrength;
        [RTTI.Member(10, 0x3C, "Settings")] public float SmallInstanceObstructionBoost;
        [RTTI.Member(11, 0x40, "Settings")] public float SmallInstanceObstructionBoostSlope;
        [RTTI.Member(12, 0x44, "Settings")] public float HighpassMinCutoffFrequency;
        [RTTI.Member(13, 0x48, "Settings")] public float HighpassMaxCutoffFrequency;
        [RTTI.Member(14, 0x4C, "Settings")] public float HighpassFilterQValue;
        [RTTI.Member(15, 0x50, "Settings")] public float HighpassFilterGain;
        [RTTI.Member(16, 0x54, "Settings")] public float HighpassMinDistance;
        [RTTI.Member(17, 0x58, "Settings")] public float HighpassMaxDistance;
        [RTTI.Member(18, 0x5C, "Settings")] public float DopplerFactor;
        [RTTI.Member(19, 0x60, "Settings")] public float WallProximityMaxDistance;
        [RTTI.Member(20, 0x64, "Settings")] public float ProximityRadioActivationDistancePercent;
        [RTTI.Member(21, 0x68, "Settings")] public float ProximityRadioActivationFadeTime;
        [RTTI.Member(22, 0x6C, "Settings")] public float RadioFilterCenterFrequency;
        [RTTI.Member(23, 0x70, "Settings")] public float RadioFilterBandwidth;
        [RTTI.Member(24, 0x74, "Settings")] public float RadioDistortionDrive;
        [RTTI.Member(25, 0x78, "Settings")] public float MasterVolumeSFX;
        [RTTI.Member(26, 0x7C, "Settings")] public float MasterVolumeMusic;
        [RTTI.Member(27, 0x80, "Settings")] public float MasterVolumeSpeech;
        [RTTI.Member(28, 0x84, "Settings")] public float MasterVolumeFMV;
        [RTTI.Member(29, 0x88, "Settings")] public float HDRWindowRange;
        [RTTI.Member(30, 0x8C, "Settings")] public float HDRWindowCompressor;
        [RTTI.Member(31, 0x90, "Settings")] public float HDRWindowAttackTime;
        [RTTI.Member(32, 0x94, "Settings")] public float HDRWindowReleaseTime;
        [RTTI.Member(33, 0x98, "Settings")] public float HDRSoundLowRMSThreshold;
        [RTTI.Member(34, 0x9C, "Settings")] public int AudibleSoundInstanceLimit;
        [RTTI.Member(35, 0xA0, "Settings")] public int DynamicAudibleInstanceLimitMin;
        [RTTI.Member(36, 0xA4, "Settings")] public float MaxDynamicBrbLoad;
        [RTTI.Member(37, 0xA8, "Settings")] public float MinimumAmbientFadeTime;
        [RTTI.Member(38, 0xAC, "Settings")] public float DefaultAmbientFadeTime;
        [RTTI.Member(56, 0xB0, "SpeakerAngles")] public int FrontLeftSpeakerAngle;
        [RTTI.Member(57, 0xB4, "SpeakerAngles")] public int FrontRightSpeakerAngle;
        [RTTI.Member(58, 0xC0, "SpeakerAngles")] public int SideLeftSpeakerAngle;
        [RTTI.Member(59, 0xC4, "SpeakerAngles")] public int SideRightSpeakerAngle;
        [RTTI.Member(60, 0xC8, "SpeakerAngles")] public int BackLeftSpeakerAngle;
        [RTTI.Member(61, 0xCC, "SpeakerAngles")] public int BackRightSpeakerAngle;
        [RTTI.Member(39, 0xD0, "Settings")] public float DialogReverbOutputGain;
        [RTTI.Member(40, 0xD4, "Settings")] public float DialogReverbSendGain;
        [RTTI.Member(41, 0xD8, "Settings")] public Ref<ReverbPresetResource> DialogReverbDefaultPreset;
        [RTTI.Member(44, 0xE0, "OcclusionFilter")] public float OcclusionFilter_MinFrequency;
        [RTTI.Member(45, 0xE4, "OcclusionFilter")] public float OcclusionFilter_MaxFrequency;
        [RTTI.Member(46, 0xE8, "OcclusionFilter")] public float OcclusionFilter_MinGain;
        [RTTI.Member(47, 0xEC, "OcclusionFilter")] public float OcclusionFilter_MaxGain;
        [RTTI.Member(48, 0xF0, "OcclusionFilter")] public float OcclusionFilter_Slope;
        [RTTI.Member(50, 0xF4, "ObstructionFilter")] public float ObstructionFilter_MinFrequency;
        [RTTI.Member(51, 0xF8, "ObstructionFilter")] public float ObstructionFilter_MaxFrequency;
        [RTTI.Member(52, 0xFC, "ObstructionFilter")] public float ObstructionFilter_MinGain;
        [RTTI.Member(53, 0x100, "ObstructionFilter")] public float ObstructionFilter_MaxGain;
        [RTTI.Member(54, 0x104, "ObstructionFilter")] public float ObstructionFilter_Slope;
        [RTTI.Member(42, 0x108, "Settings")] public Ref<SoundGroupList> GroupList;
    }

    [RTTI.Serializable(0x8220F5C198FDD6B1, GameType.DS)]
    public class SoundZoneDeactivationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE7E1B4058A0F82B3, GameType.DS)]
    public class SoundZoneDeactivationEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SoundZoneResource> SoundZoneResource;
        [RTTI.Member(9, 0x38, "Logic")] public bool KeepDeactivated;
    }

    [RTTI.Serializable(0x7329C2C50DBB3F98, GameType.DS)]
    public class SoundZoneInstance : WorldNode
    {
        [RTTI.Member(5, 0x80, "General")] public Ref<SoundZoneResource> Resource;
        [RTTI.Member(6, 0x98, "General")] public Array<Ref<SoundZoneLink>> Link;
    }

    [RTTI.Serializable(0xBC9CB891C30CDE0D, GameType.DS)]
    public class SoundZoneLink : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xC1ADB395906A4B43, GameType.DS)]
    public class SoundZoneResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public int Priority;
        [RTTI.Member(4, 0x24, "General")] public ESoundZoneShapeType ShapeType;
        [RTTI.Member(5, 0x28, "General")] public bool Is3D;
        [RTTI.Member(6, 0x29, "General")] public bool Active;
        [RTTI.Member(8, 0x2A, "General")] public bool OverridesDistances;
        [RTTI.Member(9, 0x2B, "General")] public bool RetriggerOnEnter;
        [RTTI.Member(10, 0x2C, "General")] public bool AutoSizeZoneInstance;
        [RTTI.Member(11, 0x2D, "General")] public bool OverrideMinDistance;
        [RTTI.Member(12, 0x30, "General")] public float SoundMinDistance;
        [RTTI.Member(7, 0x38, "General")] public Ref<SoundResource> Sound;
        [RTTI.Member(13, 0x40, "General")] public float InsideAngle;
        [RTTI.Member(14, 0x44, "General")] public float OutsideAngle;
        [RTTI.Member(15, 0x48, "General")] public float OutsideGain;
        [RTTI.Member(16, 0x50, "General")] public Vec3 InnerBoundsMax;
        [RTTI.Member(17, 0x60, "General")] public Vec3 InnerBoundsMin;
        [RTTI.Member(18, 0x70, "General")] public float InnerFraction;
        [RTTI.Member(19, 0x74, "General")] public float CapsuleRadius;
        [RTTI.Member(20, 0x78, "General")] public Ref<SoundMixResource> SoundMix;
        [RTTI.Member(21, 0x80, "General")] public bool OverrideInsideness;
        [RTTI.Member(22, 0x81, "General")] public bool IsInside;
        [RTTI.Member(23, 0x84, "General")] public RGBAColor DrawColor;
        [RTTI.Member(24, 0x88, "General")] public float OutsideOcclusion;
        [RTTI.Member(25, 0x8C, "General")] public float OutsideObstruction;
        [RTTI.Member(27, 0x90, "WwiseAuxBus")] public Ref<WwiseAuxBusResource> AuxBus;
        [RTTI.Member(30, 0x98, "WwiseState")] public Ref<WwiseStateResource> StateResource;
        [RTTI.Member(28, 0xA0, "WwiseAuxBus")] public uint8 Flags;
    }

    [RTTI.Serializable(0x5F79118D1DC9ED41, GameType.DS)]
    public class SpaColorConfig
    {
        [RTTI.Member(0, 0x0)] public float BloodRecoverSpeedMultiplier;
        [RTTI.Member(1, 0x4)] public float BloodRecoverLimitRate;
        [RTTI.Member(2, 0x8)] public float ConsciosnessRecoverSpeedMultiplier;
        [RTTI.Member(3, 0xC)] public float BBStressRecoverSpeedPerSec;
        [RTTI.Member(4, 0x10)] public float BBStressRecoverLimitRate;
        [RTTI.Member(5, 0x14)] public float StaminaRecoverRate;
        [RTTI.Member(6, 0x18)] public bool IsStaminaRecoveryIsLimitOver;
        [RTTI.Member(7, 0x1C)] public float FatigueRecoverRate;
        [RTTI.Member(8, 0x20)] public EDSPlayerFatigueLevelExported FatigueRecoverLimitLevel;
        [RTTI.Member(9, 0x24)] public float MulEatCrypto;
    }

    [RTTI.Serializable(0xB5EDE6A2D93C95B7, GameType.DS)]
    public class SparseSoundMixResource : SoundMixResource
    {
        [RTTI.Member(5, 0x30, "SparseMix")] public Ref<SoundMixResource> ParentMix;
    }

    [RTTI.Serializable(0x65C5698066A86DA3, GameType.DS)]
    public class SpawnAppearancePosition : WorldNode
    {
    }

    [RTTI.Serializable(0x23A1A4720EAC4372, GameType.DS)]
    public class SpawnCommand : WorldNode
    {
    }

    [RTTI.Serializable(0x65B8732238FB203D, GameType.DS)]
    public class SpawnFactOverride
    {
        [RTTI.Member(0, 0x0)] public UUIDRef<WorldNode> SpawnSource;
        [RTTI.Member(1, 0x10)] public Array<Ref<FactValueBase>> FactValues;
    }

    [RTTI.Serializable(0x52A69336E4CE6C5E, GameType.DS)]
    public class SpawnSetup : SpawnSetupConcrete
    {
        [RTTI.Member(22, 0xB0, "InventoryComponentOverrides")] public Ref<InventoryCollection> InventoryInitialItemsCollection;
        [RTTI.Member(24, 0xB8, "ControlledEntityOverrides")] public Ref<AIIndividualComponentResource> AIIndividualComponentResource;
        [RTTI.Member(26, 0xC0, "BodyVariantOverrides")] public Ref<BodyVariantInterface> BodyVariant;
        [RTTI.Member(28, 0xC8, "PropertyContainerOverrides")] public Ref<PropertyContainerResource> PropertyContainerResource;
        [RTTI.Member(30, 0xD0, "AIPropertyFactOverrides")] public Ref<AIPropertyFactComponentResource> AIPropertyFactComponentResource;
    }

    [RTTI.Serializable(0x8562317DF994288, GameType.DS)]
    public class SpawnSetupBase : Resource
    {
    }

    [RTTI.Serializable(0xAC07F286DEAB9668, GameType.DS)]
    public class SpawnSetupComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEE6484D31DE0F9B, GameType.DS)]
    public class SpawnSetupConcrete : SpawnSetupNonPlaceholder
    {
        [RTTI.BaseClass(0x30)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(7, 0x48)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(10, 0x50)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(12, 0x58, "EntityOverrides")] public Ref<AIFaction> AIFaction;
        [RTTI.Member(8, 0x60)] public Array<Ref<EntityComponentResource>> ExtraComponentResources;
        [RTTI.Member(9, 0x70)] public Array<Ref<FactValueBase>> Facts;
        [RTTI.Member(14, 0x80, "ComponentOverrides")] public Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
        [RTTI.Member(16, 0x90, "DestructibilityComponentOverrides")] public ETriState Invulnerable;
        [RTTI.Member(17, 0x94, "DestructibilityComponentOverrides")] public ETriState DieAtZeroHealth;
        [RTTI.Member(18, 0x98, "DestructibilityComponentOverrides")] public int MaxHealth;
        [RTTI.Member(19, 0xA0, "DestructibilityComponentOverrides")] public Ref<DestructibilityState> InitialDestructibilityState;
        [RTTI.Member(21, 0xA8, "CollisionOverrides")] public bool EnableCollisionInSequence;
    }

    [RTTI.Serializable(0x7139C1E9E1C7BCEA, GameType.DS)]
    public class SpawnSetupGroup : SpawnSetupNonPlaceholder
    {
        [RTTI.Member(4, 0x30)] public Array<SpawnSetupLink> SpawnSetupList;
    }

    [RTTI.Serializable(0x31ACC16E1F0702FD, GameType.DS)]
    public class SpawnSetupLink
    {
        [RTTI.Member(0, 0x0)] public float Weight;
        [RTTI.Member(1, 0x8)] public Ref<SpawnSetupBase> SpawnSetup;
    }

    [RTTI.Serializable(0x35CC6298EA617CB1, GameType.DS)]
    public class SpawnSetupNonPlaceholder : SpawnSetupBase
    {
        [RTTI.Member(2, 0x20)] public Ref<ConditionResource> Condition;
        [RTTI.Member(3, 0x28)] public Ref<EntityImpostorResource> Impostor;
    }

    [RTTI.Serializable(0x3EB8484980BAA20A, GameType.DS)]
    public class SpawnSetupNonPlaceholderSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE451110CC235107A, GameType.DS)]
    public class SpawnSetupOverride
    {
        [RTTI.Member(0, 0x0)] public UUIDRef<SpawnSetupPlaceholder> SpawnSetupPlaceholder;
        [RTTI.Member(1, 0x10)] public StreamingRef<SpawnSetupNonPlaceholder> SpawnSetup;
    }

    [RTTI.Serializable(0x6E4AB593659AE1BD, GameType.DS)]
    public class SpawnSetupPlaceholder : SpawnSetupBase
    {
    }

    [RTTI.Serializable(0x72A812D37D0AC3A4, GameType.DS)]
    public class SpawnSetupQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xFD72209E75E93592, GameType.DS)]
    public class SpawnSetupQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0xCE00C81E4B2104AE, GameType.DS)]
    public class SpawnSetupSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public Ref<SpawnSetupNonPlaceholder> SpawnSetup;
        [RTTI.Member(12, 0x60)] public bool IsInterpolationEnabled;
        [RTTI.Member(13, 0x61)] public bool KeepAlive;
    }

    [RTTI.Serializable(0xDF9046A3E223DB25, GameType.DS)]
    public class SpawnSetupSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xF82730BBF40AE72C, GameType.DS)]
    public class SpawnSetupStreamingHintComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFB65846B5AF94C3, GameType.DS)]
    public class SpawnSetupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7C435B52D10FDEB6, GameType.DS)]
    public class SpawnSoundNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x253FAB129C67153C, GameType.DS)]
    public class SpawnSoundNodeStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0x8B3A8436B7A680E4, GameType.DS)]
    public class SpawnSourceQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xD1CDC55E403EC3DA, GameType.DS)]
    public class SpawnSourceQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0xEA6A2BB6788DEF1E, GameType.DS)]
    public class SpawnWithMounterComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3D21F48E271E7A87, GameType.DS)]
    public class SpawnWithMounterComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> SpawnGraphProgramResource;
        [RTTI.Member(5, 0x28, "Spawn")] public Ref<SpawnSetupBase> MounterSpawnSetup;
    }

    [RTTI.Serializable(0x77F38396485473AA, GameType.DS)]
    public class Spawnpoint : SpawnpointBase
    {
        [RTTI.Member(28, 0x160, "Impostor")] public EEntityImpostorType ImpostorType;
        [RTTI.Member(29, 0x168, "Impostor")] public Ref<AIRoad> ImpostorRoute;
        [RTTI.Member(30, 0x170, "Impostor")] public EEntityImpostorDirection ImpostorRouteDirection;
        [RTTI.Member(31, 0x178, "Impostor")] public Ref<BooleanFact> ImpostorVisibleFact;
    }

    [RTTI.Serializable(0xBBCEF0874A242F6A, GameType.DS)]
    public class SpawnpointBase : ParentWorldNode
    {
        [RTTI.Member(11, 0x88, "Item")] public Ref<SpawnSetupBase> SpawnSetup;
        [RTTI.Member(12, 0x90, "Item")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(13, 0x98, "Item")] public Ref<EntityAction> InitialAction;
        [RTTI.Member(14, 0xA0, "Item")] public Array<Ref<SpawnCommand>> SpawnCommands;
        [RTTI.Member(7, 0xB0, "General")] public bool FactsArePersistent;
        [RTTI.Member(9, 0xB1, "SpawnConditions")] public bool AutoSpawn;
        [RTTI.Member(15, 0xC0, "Item")] public Array<Ref<EntityComponentResource>> ExtraComponents;
        [RTTI.Member(16, 0xD0, "Item")] public Array<Ref<FactValueBase>> Facts;
        [RTTI.Member(18, 0xE0, "Logic")] public ESpawnpointNavmeshPlacmentType NavMeshPlacementType;
        [RTTI.Member(19, 0xE4, "Logic")] public FRange NavMeshPlacementRange;
        [RTTI.Member(20, 0xEC, "Logic")] public bool PrepareNavmeshForSpawn;
        [RTTI.Member(21, 0xF0, "Logic")] public Array<Ref<SpawnAppearancePosition>> AppearancePositions;
        [RTTI.Member(22, 0x100, "Logic")] public bool PickAppearancePositionOutsidePlayerView;
        [RTTI.Member(23, 0x108, "Logic")] public Ref<CurveResource> AppearancePositionScoreOverDistance;
        [RTTI.Member(24, 0x130, "Logic")] public Ref<ConditionResource> SpawnCondition;
        [RTTI.Member(25, 0x140, "Logic")] public Ref<GraphProgramResource> SceneScript;
        [RTTI.Member(26, 0x150, "Logic")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0xFEA2BBA38570EB4D, GameType.DS)]
    public class SpawnpointBaseSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA8D3AC388103E9C, GameType.DS)]
    public class SpawnpointGame : Spawnpoint
    {
        [RTTI.Member(33, 0x1B0, "Logic")] public Ref<NPCScheduleResource> ScheduleResource;
        [RTTI.Member(34, 0x1B8, "Logic")] public Ref<EntityResource> StartSequenceNetwork;
    }

    [RTTI.Serializable(0xCAC2B9E653DD5340, GameType.DS)]
    public class SpawnpointGameSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x245C9D2CA1DCC2A9, GameType.DS)]
    public class SpawnpointSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(11, 0x58)] public StreamingRef<Spawnpoint> Spawnpoint;
    }

    [RTTI.Serializable(0xB40E36F5E244C6EA, GameType.DS)]
    public class SpawnpointSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x3DB7749FAD517B9E, GameType.DS)]
    public class SpawnpointSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xAF4A6D373409EE45, GameType.DS)]
    public class SpeakEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x7012E73314040C59, GameType.DS)]
    public class SpeakEventResource : PausableEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<LocatorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<SentenceResource> SentenceResource;
        [RTTI.Member(10, 0x48, "Logic")] public bool SuppressSubtitles;
        [RTTI.Member(11, 0x50, "Logic")] public String HelperName;
        [RTTI.Member(12, 0x58, "Logic")] public bool OverrideDelivery;
        [RTTI.Member(13, 0x59, "Logic")] public ESentenceDelivery OverrideDeliveryType;
        [RTTI.Member(14, 0x5A, "Logic")] public bool PausingEnabled;
        [RTTI.Member(15, 0x5C, "Logic")] public int BlendInNumFrames;
        [RTTI.Member(16, 0x60, "Logic")] public int BlendOutNumFrames;
    }

    [RTTI.Serializable(0xAFCC3A394320F0CF, GameType.DS)]
    public class SpeechTag : VisualTag
    {
    }

    [RTTI.Serializable(0x2EBCDC464A818855, GameType.DS)]
    public class SpeechWidget : Widget
    {
    }

    [RTTI.Serializable(0x3782AE6CB64BCE1D, GameType.DS)]
    public class SpeedModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x416F107A24370A19, GameType.DS)]
    public class SpeedModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float MovementModifier;
        [RTTI.Member(4, 0x24, "Logic")] public float PitchModifier;
        [RTTI.Member(5, 0x28, "Logic")] public float HeadingModifier;
        [RTTI.Member(6, 0x2C, "Logic")] public bool SlowMoCompensationMode;
    }

    [RTTI.Serializable(0xD44C1F6AE89295A7, GameType.DS)]
    public class SphereBasedActivationPolicy : EntityActivationPolicy
    {
        [RTTI.Member(5, 0x38, "Logic")] public float ActivationRadius;
        [RTTI.Member(6, 0x3C, "Logic")] public float DeactivationRadius;
    }

    [RTTI.Serializable(0x48C67343B76AA247, GameType.DS)]
    public class SpotLight : LightShadowed
    {
        [RTTI.Member(50, 0x2D0, "Color")] public float ConeAngle;
        [RTTI.Member(51, 0x2D4, "Color")] public float HotspotAngle;
        [RTTI.Member(52, 0x2D8, "Color")] public float NearRange;
        [RTTI.Member(53, 0x2DC, "Color")] public float FarRange;
        [RTTI.Member(54, 0x2E0, "Color")] public float DepthFadeRatio;
        [RTTI.Member(55, 0x2E4, "Color")] public bool FarRangeOverride;
        [RTTI.Member(57, 0x304, "General")] public float ShadowNearPlane;
    }

    [RTTI.Serializable(0x94601F6CCFEEE724, GameType.DS)]
    public class SpotLightResource : LightShadowedResource
    {
        [RTTI.Member(53, 0x160, "General")] public float ConeAngle;
        [RTTI.Member(54, 0x164, "General")] public float HotspotAngle;
        [RTTI.Member(58, 0x168, "General")] public float NearRange;
        [RTTI.Member(59, 0x16C, "General")] public float FarRange;
        [RTTI.Member(60, 0x170, "General")] public float DepthFadeRatio;
        [RTTI.Member(61, 0x174, "General")] public float ShadowNearPlane;
        [RTTI.Member(55, 0x178, "General")] public float ShadowConeAngle;
        [RTTI.Member(56, 0x17C, "General")] public float ShadowHotSpotAngle;
        [RTTI.Member(57, 0x180, "General")] public bool Focus;
        [RTTI.Member(62, 0x181, "General")] public bool FarRangeOverride;
        [RTTI.Member(63, 0x188, "General")] public Ref<Texture> ProjectorTexture;
        [RTTI.Member(64, 0x190, "General")] public Ref<Texture> AreaDiffuseTexture;
        [RTTI.Member(65, 0x198, "General")] public Ref<Texture> AreaSpecularTexture;
    }

    [RTTI.Serializable(0xB918A65225C50818, GameType.DS)]
    public class SpottableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFF6EC3D7D10F86B1, GameType.DS)]
    public class SpottableComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Logic")] public FSize VisibleScreenSpacePercentage;
        [RTTI.Member(3, 0x28, "Logic")] public float MaxSpottingDistance;
        [RTTI.Member(5, 0x2C, "Logic")] public bool AutoRemoveWhenSpotted;
    }

    [RTTI.Serializable(0xBE66D1784246958C, GameType.DS)]
    public class SpreadSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Spread")] public float SpreadFalloffSpeed;
        [RTTI.Member(4, 0x24, "Spread")] public float SpreadIncrementSpeed;
        [RTTI.Member(5, 0x28, "Spread")] public float MaximumSpread;
        [RTTI.Member(6, 0x30, "Spread")] public Ref<CurveResource> FirePressedSpreadCurve;
        [RTTI.Member(7, 0x38, "Spread")] public Ref<CurveResource> ChargeSpreadCurve;
    }

    [RTTI.Serializable(0xBDE7CBA3B0CBCC01, GameType.DS)]
    public class Spring : CoreObject
    {
    }

    [RTTI.Serializable(0x27CD0CDF773C6823, GameType.DS)]
    public class SpringAttr
    {
        [RTTI.Member(0, 0x0)] public float Stiffness;
        [RTTI.Member(1, 0x4)] public float Drag;
        [RTTI.Member(2, 0x8)] public float Mass;
        [RTTI.Member(3, 0xC)] public float Scale;
        [RTTI.Member(4, 0x10)] public float Clamp;
        [RTTI.Member(5, 0x14)] public int MaxPriority;
        [RTTI.Member(6, 0x18)] public ForceFieldProbeSpringMode Mode;
        [RTTI.Member(7, 0x1C)] public ForceFieldCategoryMask CategoryMask;
    }

    [RTTI.Serializable(0xA387064ACD08E048, GameType.DS)]
    public class SpringLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x1087476189E22C95, GameType.DS)]
    public class SpringLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> ParentLocatorResource;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<SpringLocatorSettings> SpringSettings;
    }

    [RTTI.Serializable(0xFD894531E7764C74, GameType.DS)]
    public class SpringLocatorSettings : RTTIRefObject
    {
        [RTTI.Member(4, 0x20, "Translation")] public float LinearWeightX;
        [RTTI.Member(7, 0x24, "Translation")] public float LinearWeightY;
        [RTTI.Member(10, 0x28, "Translation")] public float LinearWeightZ;
        [RTTI.Member(5, 0x30, "Translation")] public float LinearFrequencyX;
        [RTTI.Member(8, 0x34, "Translation")] public float LinearFrequencyY;
        [RTTI.Member(11, 0x38, "Translation")] public float LinearFrequencyZ;
        [RTTI.Member(6, 0x40, "Translation")] public float LinearDampingRatioX;
        [RTTI.Member(9, 0x44, "Translation")] public float LinearDampingRatioY;
        [RTTI.Member(12, 0x48, "Translation")] public float LinearDampingRatioZ;
        [RTTI.Member(15, 0x50, "Rotation")] public float AngularFrequencyX;
        [RTTI.Member(17, 0x54, "Rotation")] public float AngularFrequencyY;
        [RTTI.Member(19, 0x58, "Rotation")] public float AngularFrequencyZ;
        [RTTI.Member(16, 0x60, "Rotation")] public float AngularDampingRatioX;
        [RTTI.Member(18, 0x64, "Rotation")] public float AngularDampingRatioY;
        [RTTI.Member(20, 0x68, "Rotation")] public float AngularDampingRatioZ;
        [RTTI.Member(22, 0x70, "Rotation")] public float AlignPrimaryAxis;
        [RTTI.Member(23, 0x74, "Rotation")] public float AlignSecondaryAxis;
        [RTTI.Member(3, 0x78, "Translation")] public ESpringEvalSpace LinearEvaluationSpace;
        [RTTI.Member(14, 0x79, "Rotation")] public ESpringEvalSpace AngularEvaluationSpace;
        [RTTI.Member(21, 0x7A, "Rotation")] public ESpringAlignment AlignAxis;
    }

    [RTTI.Serializable(0xA9293561B9832507, GameType.DS)]
    public class SpringResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public float Frequency;
        [RTTI.Member(4, 0x24, "General")] public float Damping;
        [RTTI.Member(5, 0x28, "General")] public float MaximumStretch;
    }

    [RTTI.Serializable(0x4AB4C124E94AE0CF, GameType.DS)]
    public class StageActorResource : CreateEntityActorResource
    {
    }

    [RTTI.Serializable(0x8DD5F99AB7A8D1D5, GameType.DS)]
    public class StageCameraActorResource : CameraActorResource
    {
        [RTTI.Member(37, 0x108, "Stage")] public ECameraShotType CameraShotType;
        [RTTI.Member(38, 0x110, "Stage")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(39, 0x118, "Stage")] public EGender Gender;
        [RTTI.Member(40, 0x120, "Stage")] public Ref<EntityActorResource> SecondaryActorResource;
        [RTTI.Member(41, 0x128, "Stage")] public EGender SecondaryActorGender;
        [RTTI.Member(42, 0x129, "Stage")] public bool LeftOfTarget;
    }

    [RTTI.Serializable(0xF58CFFEA83A5B4DC, GameType.DS)]
    public class StaggerStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1A68C37EDBE541FE, GameType.DS)]
    public class StaggerStateComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String AnimVarName;
        [RTTI.Member(4, 0x28, "Logic")] public Array<String> AnimStateNames;
        [RTTI.Member(5, 0x38, "Logic")] public String IsActiveAnimTagName;
    }

    [RTTI.Serializable(0x4E6D6C7CC560212C, GameType.DS)]
    public class StaggerStateComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2AD1EAC1078E4293, GameType.DS)]
    public class StaminaAnimationSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String AnimTagName;
        [RTTI.Member(4, 0x28, "Logic")] public String ExclusionAnimationEventName;
        [RTTI.Member(5, 0x30, "Logic")] public float InstantCost;
        [RTTI.Member(6, 0x34, "Logic")] public float StaminaPerSecondWhileActive;
        [RTTI.Member(8, 0x38, "Logic")] public float RegenDelay;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<StaminaUsageType> StaminaUsageType;
    }

    [RTTI.Serializable(0xBBA8D4E63602C95A, GameType.DS)]
    public class StaminaComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x84827C09D5030C1B, GameType.DS)]
    public class StaminaComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EStaminaType Type;
        [RTTI.Member(4, 0x24, "Logic")] public int InitialStamina;
        [RTTI.Member(5, 0x28, "Logic")] public int MaxStamina;
        [RTTI.Member(6, 0x2C, "Logic")] public float RegenerationRate;
        [RTTI.Member(7, 0x30, "Logic")] public float ConsumptionRegenerationDelay;
        [RTTI.Member(8, 0x34, "Logic")] public float EmptyRegenerationDelay;
        [RTTI.Member(9, 0x38, "Logic")] public Array<Ref<StaminaAnimationSettings>> AnimationSettings;
    }

    [RTTI.Serializable(0xF324A8AEBF1E1C61, GameType.DS)]
    public class StaminaComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCDD3BACF23F0031, GameType.DS)]
    public class StaminaModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF1DF66BA23078913, GameType.DS)]
    public class StaminaModificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<StaminaModifier>> StaminaModifiers;
        [RTTI.Member(4, 0x30, "Logic")] public EStaminaType StaminaType;
    }

    [RTTI.Serializable(0xC7D550F0F269754F, GameType.DS)]
    public class StaminaModifier : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float StaminaPerSecond;
        [RTTI.Member(4, 0x24, "Logic")] public float CostRateMultiplier;
        [RTTI.Member(5, 0x28, "Logic")] public float BoostRateMultiplier;
        [RTTI.Member(6, 0x2C, "Logic")] public float RegenRateMultiplier;
        [RTTI.Member(7, 0x30, "Logic")] public float DrainRateMultiplier;
        [RTTI.Member(8, 0x34, "Logic")] public float AdditionalMax;
        [RTTI.Member(9, 0x38, "Logic")] public bool AdditionalMaxIsTransient;
        [RTTI.Member(10, 0x39, "Logic")] public bool RefillToMax;
        [RTTI.Member(11, 0x3C, "Logic")] public float Duration;
        [RTTI.Member(12, 0x40, "Logic")] public Ref<StaminaUsageType> StaminaUsageType;
    }

    [RTTI.Serializable(0x3F3F2AC0E143736A, GameType.DS)]
    public class StaminaModifierAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<StaminaModifier> StaminaModifier;
        [RTTI.Member(5, 0x30, "Logic")] public bool Add;
        [RTTI.Member(6, 0x34, "Logic")] public EStaminaType Type;
    }

    [RTTI.Serializable(0xC1296E6B8C9C1C86, GameType.DS)]
    public class StaminaUsageType : Resource
    {
    }

    [RTTI.Serializable(0x89B9CEF82790EA53, GameType.DS)]
    public class StartAndStopSceneEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4B32931DF69EDB05, GameType.DS)]
    public class StartAndStopSceneEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Event")] public UUIDRef<ScenePrefabInstance> SceneInstance;
    }

    [RTTI.Serializable(0x802C4E50275B3AF, GameType.DS)]
    public class StartAudiologNotification : PlayerInteractiveNotification
    {
    }

    [RTTI.Serializable(0xB528FA8AF6F54153, GameType.DS)]
    public class StartAudiologNotificationResource : PlayerInteractiveNotificationResource
    {
    }

    [RTTI.Serializable(0x994408B6AD85B951, GameType.DS)]
    public class StartSceneEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x1B73E637F57150E2, GameType.DS)]
    public class StartSceneEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Event")] public UUIDRef<ScenePrefabInstance> SceneInstance;
    }

    [RTTI.Serializable(0xF601CD1E86B8BE5A, GameType.DS)]
    public class StatDisplayEntry : StatDisplayEntryBase
    {
        [RTTI.Member(5, 0x28, "General")] public int StatBarValue;
    }

    [RTTI.Serializable(0x8FB48CB43981E963, GameType.DS)]
    public class StatDisplayEntryBase : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public EDisplayStatType DisplayStatType;
    }

    [RTTI.Serializable(0xA3D6A6E9AE611DF9, GameType.DS)]
    public class StatModification : RTTIObject
    {
        [RTTI.Member(0, 0x10)] public int Rating;
        [RTTI.Member(1, 0x18)] public Ref<StatModificationTypeResource> Type;
    }

    [RTTI.Serializable(0x127FE1A82A779A62, GameType.DS)]
    public class StatModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x91218CED5511164, GameType.DS)]
    public class StatModificationResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<StatModifierResource>> Modifiers;
    }

    [RTTI.Serializable(0x82EBC36CA16340EB, GameType.DS)]
    public class StatModificationSocketType : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<StatModificationSocketType> ParentType;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<UITexture> Icon;
    }

    [RTTI.Serializable(0xE0DF20ED3DD0905, GameType.DS)]
    public class StatModificationTypeCandidate : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<StatModificationTypeResource> PrimaryType;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<StatModificationTypeResource>> SecondaryTypes;
        [RTTI.Member(5, 0x38, "Logic")] public Array<Ref<StatModificationTypeResource>> TertiaryTypes;
    }

    [RTTI.Serializable(0x43ECCBF94976743C, GameType.DS)]
    public class StatModificationTypeResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<StatModificationResource> ModificationResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<ModifierStatDisplayEntry> StatDisplayEntry;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<StatModificationSocketType> RequiredSocketType;
    }

    [RTTI.Serializable(0x16DACB524F46E192, GameType.DS)]
    public class StatModifierResource : Resource
    {
    }

    [RTTI.Serializable(0xB51048A14D18A118, GameType.DS)]
    public class StateInGame : RTTIObject
    {
    }

    [RTTI.Serializable(0x9C42ED092EFED225, GameType.DS)]
    public class StateMachineTag : Tag
    {
    }

    [RTTI.Serializable(0x99869032BB746F4C, GameType.DS)]
    public class StateMatchmaking : RTTIObject
    {
    }

    [RTTI.Serializable(0xA015E71AC646AA37, GameType.DS)]
    public class StateObject
    {
    }

    [RTTI.Serializable(0xDD7826F820F3F282, GameType.DS)]
    public class StateObjectInstance : CoreObject
    {
    }

    [RTTI.Serializable(0x61C1F53F7D399D3A, GameType.DS)]
    public class StateObjectResource : Resource
    {
    }

    [RTTI.Serializable(0xF0B07012AF7018B8, GameType.DS)]
    public class StaticArtPartsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFA52B598D6EA594E, GameType.DS)]
    public class StaticArtPartsComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x86C0E9DEBE34C997, GameType.DS)]
    public class StaticConditionAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public bool Condition;
    }

    [RTTI.Serializable(0x7C0AD870A4F6B751, GameType.DS)]
    public class StaticMeshActorResource : ModelActorResource
    {
        [RTTI.Member(20, 0x60, "Logic")] public Ref<StaticModelResource> StaticModelResource;
    }

    [RTTI.Serializable(0xFEC621BA2753CA32, GameType.DS)]
    public class StaticMeshInstance : GeometryObject
    {
        [RTTI.Member(15, 0x0, "General", true)] public bool EnableShadows;
        [RTTI.Member(18, 0x0, "General", true)] public int8 EcotopeIndexOverrideValue;
        [RTTI.Member(16, 0x0, "General", true)] public bool EnableSunShadows;
        [RTTI.Member(17, 0x0, "General", true)] public float EcotopeEffectOverrideValue;
        [RTTI.Member(19, 0x0, "General", true)] public bool IgnoreLodDistanceMultiplier;
        [RTTI.Member(20, 0x0, "General", true)] public bool IgnoreAnnhilation;
        [RTTI.Member(7, 0xD0, "General")] public Ref<MeshResourceBase> Resource;
        [RTTI.Member(8, 0xD8, "General")] public MeshHierachyShaderOverrides MeshShaderOverrides;
        [RTTI.Member(9, 0x1A0, "General")] public int MeshInstanceTreeSize;
        [RTTI.Member(10, 0x1A4, "General")] public int MeshInstanceTreeDrawableSetupSize;
        [RTTI.Member(11, 0x1C0, "General")] public Array<uint8> RangedStreamingData;
        [RTTI.Member(12, 0x1D0, "General")] public uint16 RangedStreamingObjectCount;
        [RTTI.Member(13, 0x1D2, "General")] public uint16 StreamingResourceCount;
        [RTTI.Member(14, 0x1D4, "General")] public uint16 StreamingHandleCount;
        [RTTI.Member(21, 0x1E8, "General")] public uint32 PackedData;
    }

    [RTTI.Serializable(0xBD4CCD4658077591, GameType.DS)]
    public class StaticMeshSimulationInfo : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<StaticMeshSimulationModelPoint> ModelPoints;
        [RTTI.Member(3, 0x30)] public Array<StaticMeshSimulationModelLink> ModelLinks;
        [RTTI.Member(4, 0x40, true)] public Ref<Skeleton> SimulationSkeleton;
        [RTTI.Member(5, 0x48)] public float WeightInertia;
        [RTTI.Member(6, 0x4C)] public float WeightStiffness;
        [RTTI.Member(7, 0x50)] public float WeightCollider;
        [RTTI.Member(8, 0x54)] public float WeightOldOrientation;
        [RTTI.Member(9, 0x58)] public float WeightTurnToNeighbours;
        [RTTI.Member(10, 0x5C)] public float WeightMatchOrientation;
        [RTTI.Member(11, 0x60)] public float Gravity;
    }

    [RTTI.Serializable(0x597F9A8DA554599A, GameType.DS)]
    public class StaticMeshSimulationModelLink
    {
        [RTTI.Member(0, 0x0)] public int IndexA;
        [RTTI.Member(1, 0x4)] public int IndexB;
        [RTTI.Member(2, 0x10)] public Vec3 Vector;
    }

    [RTTI.Serializable(0x28FB792A7D2E103E, GameType.DS)]
    public class StaticMeshSimulationModelPoint
    {
        [RTTI.Member(0, 0x0)] public Quat Orientation;
        [RTTI.Member(1, 0x10)] public Vec3 Position;
        [RTTI.Member(2, 0x20)] public float ColliderInfluence;
        [RTTI.Member(3, 0x24)] public float OrientationSnap;
        [RTTI.Member(4, 0x28)] public float InvMass;
        [RTTI.Member(5, 0x2C)] public float MoveScale;
    }

    [RTTI.Serializable(0xF13BB14C42E33ECA, GameType.DS)]
    public class StaticModel : Model
    {
    }

    [RTTI.Serializable(0x756867469516C5CE, GameType.DS)]
    public class StaticModelActorResource : ModelActorResource
    {
        [RTTI.Member(20, 0x60, "Logic")] public Ref<StaticModelResource> StaticModelResource;
    }

    [RTTI.Serializable(0xC2FD6A2A9418DB5F, GameType.DS)]
    public class StaticModelRep : ModelRep
    {
    }

    [RTTI.Serializable(0x2507FD3E4B1F134D, GameType.DS)]
    public class StaticModelResource : ModelResource
    {
    }

    [RTTI.Serializable(0xB458C5E3F85732B7, GameType.DS)]
    public class StaticMultiModel : StaticModel
    {
    }

    [RTTI.Serializable(0x32531EDA5B90E453, GameType.DS)]
    public class StaticMultiModelRep : StaticModelRep
    {
    }

    [RTTI.Serializable(0x88767198656F90EF, GameType.DS)]
    public class StaticMultiModelResource : StaticModelResource
    {
        [RTTI.Member(10, 0x58)] public int NumBones;
    }

    [RTTI.Serializable(0x142EF9106B0C77BE, GameType.DS)]
    public class StaticSceneSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> _ZeroCountersQueryShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> _GenericQueryShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> _PersistentQueryShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> _TransientQueryShader;
        [RTTI.Member(7, 0x40)] public Ref<ShaderResource> _ShadowQueryShader;
        [RTTI.Member(6, 0x48)] public Ref<ShaderResource> _SunShadowQueryShader;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> _PersistentPackedQueryShader;
        [RTTI.Member(9, 0x58)] public Ref<ShaderResource> _TransientPackedQueryShader;
        [RTTI.Member(11, 0x60)] public Ref<ShaderResource> _ShadowPackedQueryShader;
        [RTTI.Member(10, 0x68)] public Ref<ShaderResource> _SunShadowPackedQueryShader;
        [RTTI.Member(13, 0x70, "DXC")] public Ref<ShaderResource> DXC_ZeroCountersQueryShader;
        [RTTI.Member(14, 0x78, "DXC")] public Ref<ShaderResource> DXC_GenericQueryShader;
        [RTTI.Member(15, 0x80, "DXC")] public Ref<ShaderResource> DXC_PersistentQueryShader;
        [RTTI.Member(16, 0x88, "DXC")] public Ref<ShaderResource> DXC_TransientQueryShader;
        [RTTI.Member(18, 0x90, "DXC")] public Ref<ShaderResource> DXC_ShadowQueryShader;
        [RTTI.Member(17, 0x98, "DXC")] public Ref<ShaderResource> DXC_SunShadowQueryShader;
        [RTTI.Member(19, 0xA0, "DXC")] public Ref<ShaderResource> DXC_PersistentPackedQueryShader;
        [RTTI.Member(20, 0xA8, "DXC")] public Ref<ShaderResource> DXC_TransientPackedQueryShader;
        [RTTI.Member(22, 0xB0, "DXC")] public Ref<ShaderResource> DXC_ShadowPackedQueryShader;
        [RTTI.Member(21, 0xB8, "DXC")] public Ref<ShaderResource> DXC_SunShadowPackedQueryShader;
    }

    [RTTI.Serializable(0xD8CF3454588ADB83, GameType.DS)]
    public class StatsDisplayResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<StatDisplayEntry>> Stats;
    }

    [RTTI.Serializable(0xE2E1413AA99B99BE, GameType.DS)]
    public class StatsProfile : RTTIRefObject
    {
        [RTTI.Member(2, 0x24)] public float SkillRating;
        [RTTI.Member(3, 0x28)] public float SkillRD;
    }

    [RTTI.Serializable(0x873767A7056839B, GameType.DS)]
    public class StealthComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6879C2BCBBB27BE8, GameType.DS)]
    public class StealthComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x5AFDEEF6DAB4136E, GameType.DS)]
    public class StencilBufferComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8E687F69DBD3AB9E, GameType.DS)]
    public class StencilBufferComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xA16285143678382E, GameType.DS)]
    public class StencilBufferComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public EStencilBufferValue StencilBufferValue;
    }

    [RTTI.Serializable(0x7A541CFD98CFD918, GameType.DS)]
    public class StickFunction : Resource
    {
        [RTTI.Member(2, 0x20)] public EStick Stick;
        [RTTI.Member(3, 0x28)] public Ref<CurveResource> StickCurve;
        [RTTI.Member(4, 0x30)] public Ref<CurveResource> DeadzoneCurve;
    }

    [RTTI.Serializable(0x9B0F4A890F9CEDBE, GameType.DS)]
    public class StopSceneEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x2D92EC1F7FDA8B96, GameType.DS)]
    public class StopSceneEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Event")] public UUIDRef<ScenePrefabInstance> SceneInstance;
    }

    [RTTI.Serializable(0xFCC66DC79C0A6FA6, GameType.DS)]
    public class StopSequenceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x4D7A1B7756FD9C7A, GameType.DS)]
    public class StopSequenceEventResource : EventResource
    {
    }

    [RTTI.Serializable(0xA6B3F6D2E9AFF9C8, GameType.DS)]
    public class StoredItemsRestoreState : RTTIRefObject
    {
        [RTTI.Member(2, 0x28, true)] public GGUUID StoreContext;
        [RTTI.Member(3, 0x38, true)] public Array<Ref<InventoryItemRestoreState>> StoredItems;
    }

    [RTTI.Serializable(0x3222B76DA88E1586, GameType.DS)]
    public class StreamOutDesc
    {
        [RTTI.Member(0, 0x0)] public String Desc;
        [RTTI.Member(1, 0x8)] public EProgramType ProgramType;
    }

    [RTTI.Serializable(0x58D6E8859DA52156, GameType.DS)]
    public class StreamingDataSource
    {
        [RTTI.Member(0, 0x0)] public AssetPath Location;
        [RTTI.Member(1, 0x10)] public GGUUID UUID;
        [RTTI.Member(2, 0x20)] public uint32 Channel;
        [RTTI.Member(3, 0x24)] public int32 Offset;
        [RTTI.Member(4, 0x28)] public int32 Length;
    }

    [RTTI.Serializable(0xB257573874C80631, GameType.DS)]
    public class StreamingProgramResource : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<GraphProgramResource> ActiveProgram;
        [RTTI.Member(4, 0x28, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0xF0BED228EC4DEF71, GameType.DS)]
    public class StreamingRefTarget
    {
        [RTTI.Member(1, 0x8, "General", true)] public String Location;
    }

    [RTTI.Serializable(0xE64B4D3F10A16A96, GameType.DS)]
    public class StreamingStrategyResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<String> BlacklistedTypes;
        [RTTI.Member(4, 0x30, "General")] public Array<String> WhitelistedTypes;
        [RTTI.Member(5, 0x40, "General")] public Array<UUIDRef<RTTIRefObject>> WhitelistedObjects;
    }

    [RTTI.Serializable(0x25591EC41134AEA2, GameType.DS)]
    public class StreamingTileLODResource : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public EStreamingLODLevel LODLevel;
        [RTTI.Member(4, 0x28, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0x81879C362F35924C, GameType.DS)]
    public class StreamingTileResource : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public IVec2 Coordinates;
        [RTTI.Member(4, 0x28, "General")] public Array<Ref<StreamingTileStateResource>> States;
    }

    [RTTI.Serializable(0x54E452351ACAE6D6, GameType.DS)]
    public class StreamingTileResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8C348AF2D505E5BC, GameType.DS)]
    public class StreamingTileStateResource : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<StreamingTileLODResource>> LODs;
    }

    [RTTI.Serializable(0x7639D40E12A8116A, GameType.DS)]
    public class StreamingTileStateResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE86F39E978DCD8D4, GameType.DS)]
    public class StringToolsGroup
    {
    }

    [RTTI.Serializable(0xC448DDC186FF05C5, GameType.DS)]
    public class StringToolsGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8545E5F3E1F9C7DD, GameType.DS)]
    public class String_AnimationNodeID
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public AnimationNodeID Value;
    }

    [RTTI.Serializable(0xED2DDF5E1671D631, GameType.DS)]
    public class String_GGUUID
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public GGUUID Value;
    }

    [RTTI.Serializable(0x6EDC83D89698FB0D, GameType.DS)]
    public class String_IssueCreationProperty
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public IssueCreationProperty Value;
    }

    [RTTI.Serializable(0x4296D11ED8FBA1D, GameType.DS)]
    public class String_IssueField
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public IssueField Value;
    }

    [RTTI.Serializable(0x41832F810EEA8D5A, GameType.DS)]
    public class String_OTGCDiscoverResponsePresence
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public OTGCDiscoverResponsePresence Value;
    }

    [RTTI.Serializable(0x236E41C75BC3A400, GameType.DS)]
    public class String_OTGCZygoDiscoverResponseEnv
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public OTGCZygoDiscoverResponseEnv Value;
    }

    [RTTI.Serializable(0x9E46CF03F14FE330, GameType.DS)]
    public class String_String
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public String Value;
    }

    [RTTI.Serializable(0xAA18E814E2AD77B2, GameType.DS)]
    public class String_WString
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public WString Value;
    }

    [RTTI.Serializable(0x60DC74B13859AB4B, GameType.DS)]
    public class String_double
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public double Value;
    }

    [RTTI.Serializable(0x2A251B5C42DFAE17, GameType.DS)]
    public class String_int
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public int Value;
    }

    [RTTI.Serializable(0x433BF27A3BA795D7, GameType.DS)]
    public class StunnedComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7203D1700E825448, GameType.DS)]
    public class StunnedComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xC0DB9BB2074CE636, GameType.DS)]
    public class StunnedComponentResource : EntityComponentResource
    {
        [RTTI.Member(5, 0x20, "Representation")] public Ref<BoneAttachedParticleSystemResource> StunParticleSystem;
        [RTTI.Member(6, 0x28, "Representation")] public String StunAnimVarName;
        [RTTI.Member(3, 0x30, "Logic")] public bool DeactivateMoverOnStun;
    }

    [RTTI.Serializable(0x6750C20D5BCB0805, GameType.DS)]
    public class StunnedComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x1EE938E0A7F25C8B, GameType.DS)]
    public class SubGoalPausableEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0xFCA3FFAF5E22BFF4, GameType.DS)]
    public class SubGoalPausableEventResource : PausableEventResource
    {
    }

    [RTTI.Serializable(0x76320E056F83D084, GameType.DS)]
    public class SubmixPresetEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x9E637C5C2E35AE9C, GameType.DS)]
    public class SubmixPresetEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SubmixPresetResource> SubmixPreset;
    }

    [RTTI.Serializable(0x372DD1DD4306C4A5, GameType.DS)]
    public class SubmixPresetResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<SubmixResource>> AffectedSubMixBusses;
        [RTTI.Member(4, 0x30, "General")] public Ref<SubmixResource> SideChainInput;
        [RTTI.Member(10, 0x38, "General")] public bool IsDominant;
        [RTTI.Member(5, 0x40, "General")] public float PreAmpGain;
        [RTTI.Member(6, 0x44, "General")] public float TotalVolume;
        [RTTI.Member(7, 0x48, "General")] public float LFEVolume;
        [RTTI.Member(8, 0x4C, "General")] public float Azimuth;
        [RTTI.Member(9, 0x50, "General")] public float Focus;
        [RTTI.Member(12, 0x54, "ParametricEq")] public ESoundFilterMode Band1Mode;
        [RTTI.Member(13, 0x58, "ParametricEq")] public float Band1Gain;
        [RTTI.Member(14, 0x5C, "ParametricEq")] public float Band1Frequency;
        [RTTI.Member(15, 0x60, "ParametricEq")] public float Band1QValue;
        [RTTI.Member(16, 0x64, "ParametricEq")] public ESoundFilterMode Band2Mode;
        [RTTI.Member(17, 0x68, "ParametricEq")] public float Band2Gain;
        [RTTI.Member(18, 0x6C, "ParametricEq")] public float Band2Frequency;
        [RTTI.Member(19, 0x70, "ParametricEq")] public float Band2QValue;
        [RTTI.Member(20, 0x74, "ParametricEq")] public ESoundFilterMode Band3Mode;
        [RTTI.Member(21, 0x78, "ParametricEq")] public float Band3Gain;
        [RTTI.Member(22, 0x7C, "ParametricEq")] public float Band3Frequency;
        [RTTI.Member(23, 0x80, "ParametricEq")] public float Band3QValue;
        [RTTI.Member(24, 0x84, "ParametricEq")] public ESoundFilterMode Band4Mode;
        [RTTI.Member(25, 0x88, "ParametricEq")] public float Band4Gain;
        [RTTI.Member(26, 0x8C, "ParametricEq")] public float Band4Frequency;
        [RTTI.Member(27, 0x90, "ParametricEq")] public float Band4QValue;
        [RTTI.Member(29, 0x98, "Compressor")] public bool Compressor_Enabled;
        [RTTI.Member(31, 0x99, "Compressor")] public bool UseSideChainInput;
        [RTTI.Member(32, 0x9A, "Compressor")] public bool UseChannelLinking;
        [RTTI.Member(33, 0x9B, "Compressor")] public uint8 BandCount;
        [RTTI.Member(30, 0x9C, "Compressor")] public float LookAheadInMs;
        [RTTI.Member(34, 0xA0, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand1;
        [RTTI.Member(35, 0xA8, "Compressor")] public float CrossOverFrequencyBand1Band2;
        [RTTI.Member(36, 0xB0, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand2;
        [RTTI.Member(37, 0xB8, "Compressor")] public float CrossOverFrequencyBand2Band3;
        [RTTI.Member(38, 0xC0, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand3;
        [RTTI.Member(39, 0xC8, "Compressor")] public float CrossOverFrequencyBand3Band4;
        [RTTI.Member(40, 0xD0, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand4;
        [RTTI.Member(42, 0xD8, "TubeAmp")] public bool TubeAmp_Enabled;
        [RTTI.Member(43, 0xDC, "TubeAmp")] public float TriodeDrive;
        [RTTI.Member(44, 0xE0, "TubeAmp")] public float PentodeDrive;
        [RTTI.Member(46, 0xE4, "WaveShaperDistortion")] public bool WaveShaperDistortion_Enabled;
        [RTTI.Member(47, 0xE8, "WaveShaperDistortion")] public float Drive;
        [RTTI.Member(48, 0xF4, "WaveShaperDistortion")] public float PositiveInputSaturation;
        [RTTI.Member(49, 0xF8, "WaveShaperDistortion")] public float NegativeInputSaturation;
        [RTTI.Member(50, 0xFC, "WaveShaperDistortion")] public float PositiveOutputSaturation;
        [RTTI.Member(51, 0x100, "WaveShaperDistortion")] public float NegativeOutputSaturation;
        [RTTI.Member(52, 0x104, "WaveShaperDistortion")] public float CoefficientA;
        [RTTI.Member(53, 0x108, "WaveShaperDistortion")] public float CoefficientB;
        [RTTI.Member(54, 0x10C, "WaveShaperDistortion")] public float CoefficientC;
        [RTTI.Member(55, 0x110, "WaveShaperDistortion")] public float CoefficientD;
        [RTTI.Member(57, 0x118, "ConvolutionReverb")] public Ref<ImpulseResponseResource> ImpulseResponse;
        [RTTI.Member(58, 0x120, "ConvolutionReverb")] public bool Reverse;
        [RTTI.Member(59, 0x124, "ConvolutionReverb")] public float StartOffset;
        [RTTI.Member(60, 0x128, "ConvolutionReverb")] public float StopOffset;
        [RTTI.Member(61, 0x12C, "ConvolutionReverb")] public float Gain;
        [RTTI.Member(62, 0x130, "ConvolutionReverb")] public float AttackTime;
        [RTTI.Member(63, 0x134, "ConvolutionReverb")] public int AttackAlpha;
        [RTTI.Member(64, 0x138, "ConvolutionReverb")] public float SustainTime;
        [RTTI.Member(65, 0x13C, "ConvolutionReverb")] public float ReleaseTime;
        [RTTI.Member(66, 0x140, "ConvolutionReverb")] public int ReleaseAlpha;
    }

    [RTTI.Serializable(0x826244CBF27285EF, GameType.DS)]
    public class SubmixResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public Ref<SubmixResource> Destination;
    }

    [RTTI.Serializable(0xE7BA2FC3AF9C0F3D, GameType.DS)]
    public class SubtitleEvent
    {
        [RTTI.Member(0, 0x0)] public WString SubtitleText;
        [RTTI.Member(1, 0x8)] public int FrameStart;
        [RTTI.Member(2, 0xC)] public int FrameEnd;
    }

    [RTTI.Serializable(0xCBF0C47A9736A48A, GameType.DS)]
    public class SubtitleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xBDFE431D66FAEA2F, GameType.DS)]
    public class SubtitleEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocalizedTextResource> Subtitle;
        [RTTI.Member(9, 0x38, "Logic")] public Ref<LocalizedTextResource> SpeakerName;
    }

    [RTTI.Serializable(0x36CA5B5162E29D90, GameType.DS)]
    public class SubtitleLanguageEvents
    {
        [RTTI.Member(0, 0x0)] public ELanguage Language;
        [RTTI.Member(1, 0x8)] public Array<SubtitleEvent> Events;
    }

    [RTTI.Serializable(0xD28B1D00A860891C, GameType.DS)]
    public class SubtitlesResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<SubtitleLanguageEvents> SubtitleEvents;
        [RTTI.Member(4, 0x30, "General")] public bool ForceSubtitles;
        [RTTI.Member(5, 0x34, "General")] public ESubtitlePosition Position;
    }

    [RTTI.Serializable(0xBC8494F56F9A2AAF, GameType.DS)]
    public class SummableQuestReward : QuestReward
    {
    }

    [RTTI.Serializable(0xA58BF31D689C7022, GameType.DS)]
    public class SunCascadeOccluderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3FE14ECEAC2FE018, GameType.DS)]
    public class SunCascadeOccluderComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3C23760ECEAC702A, GameType.DS)]
    public class SunCascadeOccluderComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xB229CD8F36908810, GameType.DS)]
    public class SunCascadeResourceSettings : SunCascadeSettings
    {
        [RTTI.Member(12, 0x30)] public int FilterTapCount;
    }

    [RTTI.Serializable(0x8DFA53C1C4C2F98B, GameType.DS)]
    public class SunCascadeSettings
    {
        [RTTI.Member(0, 0x0)] public float FilterSize;
        [RTTI.Member(1, 0x4)] public int ShadowMapSize;
        [RTTI.Member(2, 0x8)] public float ViewRelativeNearPlane;
        [RTTI.Member(3, 0xC)] public float ViewRelativeFarPlane;
        [RTTI.Member(4, 0x10)] public float DepthBias;
        [RTTI.Member(5, 0x14)] public float Distance;
        [RTTI.Member(6, 0x18)] public float MinimumObjectScreenSize;
        [RTTI.Member(7, 0x1C)] public float MinimumObjectShadowSize;
        [RTTI.Member(8, 0x20)] public int VolumetricsSampleCount;
        [RTTI.Member(9, 0x24)] public float OverrideLODDistance;
        [RTTI.Member(10, 0x28)] public float CameraBias;
        [RTTI.Member(11, 0x2C)] public ESunCascadeShadowmapOverride SunCascadeShadowmapOverride;
    }

    [RTTI.Serializable(0xF9D50A716BBDD8A2, GameType.DS)]
    public class SunLight : Light
    {
        [RTTI.Member(46, 0x0, "Color", true)] public Vec4 CascadeDepthBias;
        [RTTI.Member(44, 0x0, "Color", true)] public Vec4 CascadeFilterRanges;
        [RTTI.Member(45, 0x0, "Color", true)] public Vec4 ShadowMapSizeThreshold;
        [RTTI.Member(43, 0x0, "Color", true)] public Vec4 CascadeRanges;
        [RTTI.Member(37, 0x270, "Color")] public SunCascadeSettings CascadeSettings0;
        [RTTI.Member(38, 0x2A0, "Color")] public SunCascadeSettings CascadeSettings1;
        [RTTI.Member(39, 0x2D0, "Color")] public SunCascadeSettings CascadeSettings2;
        [RTTI.Member(40, 0x300, "Color")] public SunCascadeSettings CascadeSettings3;
        [RTTI.Member(41, 0x330, "Color")] public SunCascadeSettings CascadeSettings4;
        [RTTI.Member(42, 0x3C0, "Color")] public SunCascadeSettings CompartmentSettings;
    }

    [RTTI.Serializable(0x8A47B0BD5BDB0E83, GameType.DS)]
    public class SunLightResource : LightResource
    {
        [RTTI.Member(54, 0x0, "Color", true)] public Vec4 CascadeDepthBias;
        [RTTI.Member(51, 0x0, "Color", true)] public Vec4 CascadeRanges;
        [RTTI.Member(52, 0x0, "Color", true)] public Vec4 CascadeFilterRanges;
        [RTTI.Member(53, 0x0, "Color", true)] public Vec4 ShadowMapSizeThreshold;
        [RTTI.Member(40, 0x100, "Color")] public int CascadeCount;
        [RTTI.Member(41, 0x104, "Color")] public SunCascadeResourceSettings CascadeSettings0;
        [RTTI.Member(42, 0x138, "Color")] public SunCascadeResourceSettings CascadeSettings1;
        [RTTI.Member(43, 0x16C, "Color")] public SunCascadeResourceSettings CascadeSettings2;
        [RTTI.Member(44, 0x1A0, "Color")] public SunCascadeResourceSettings CascadeSettings3;
        [RTTI.Member(45, 0x1D4, "Color")] public SunCascadeResourceSettings CascadeSettings4;
        [RTTI.Member(46, 0x208, "Color")] public bool EnableCompartmentShadows;
        [RTTI.Member(47, 0x20C, "Color")] public SunCascadeResourceSettings CompartmentSettings;
        [RTTI.Member(48, 0x240, "Color")] public SunLongDistanceShadowSettings LongDistanceShadowSettings;
        [RTTI.Member(49, 0x258, "Color")] public Ref<Texture> LongDistanceShadowMap;
        [RTTI.Member(50, 0x260, "Color")] public float LongDistanceShadowFlatBlendWeight;
    }

    [RTTI.Serializable(0xE04D8DECEA8409BF, GameType.DS)]
    public class SunLongDistanceShadowSettings
    {
        [RTTI.Member(0, 0x8)] public Array<BoundingSphere> ShadowBounds;
    }

    [RTTI.Serializable(0x51B76B2E985C3D87, GameType.DS)]
    public class SurfaceFormat
    {
        [RTTI.Member(0, 0x0)] public int Width;
        [RTTI.Member(1, 0x4)] public int Height;
        [RTTI.Member(2, 0x8)] public EPixelFormat PixelFormat;
    }

    [RTTI.Serializable(0x9FCA839A3D5FA38B, GameType.DS)]
    public class SusceptibleToDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6C1E42A1E48CA30B, GameType.DS)]
    public class SusceptibleToDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(4, 0x30, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(5, 0x38, "Logic")] public bool OnlyFromEnemies;
        [RTTI.Member(6, 0x39, "Logic")] public bool OnlyFromPlayer;
        [RTTI.Member(7, 0x3A, "Logic")] public bool SendTelemetry;
        [RTTI.Member(8, 0x3C, "Logic")] public float DamageAmount;
        [RTTI.Member(9, 0x40, "Logic")] public bool FilterDamageByHeading;
        [RTTI.Member(10, 0x44, "Logic")] public float FilterDamageByHeadingAngle;
        [RTTI.Member(11, 0x48, "Logic")] public float FilterDamageByHeadingRange;
    }

    [RTTI.Serializable(0xB66E8DE3E2443EF7, GameType.DS)]
    public class SuspendPlayerControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6A6555E24B97385C, GameType.DS)]
    public class SuspendPlayerControlEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public Array<EControlType> ControlTypes;
        [RTTI.Member(10, 0x50, "Logic")] public bool Crouch;
        [RTTI.Member(11, 0x51, "Logic")] public bool StowWeapon;
        [RTTI.Member(12, 0x52, "Logic")] public bool SuspendMenu;
    }

    [RTTI.Serializable(0x1BD644997DEC6BC0, GameType.DS)]
    public class SweptHeightfieldSunShadowSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> UpdateSunShadowCasterComputeShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> UpdateSunShadowVolumeComputeShader;
        [RTTI.Member(4, 0x30)] public Ref<WorldDataType> HeightTerrainWDType;
        [RTTI.Member(5, 0x38)] public Ref<WorldDataType> FlattenedHeightWDType;
        [RTTI.Member(6, 0x40)] public Ref<WorldDataType> ExtraHeightWDType;
    }

    [RTTI.Serializable(0xEC43C54E1998059, GameType.DS)]
    public class SwimStatePerkMapping : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<PerkLevel> PerkLevel;
        [RTTI.Member(1, 0x10)] public float AdditionalBreathingTime;
    }

    [RTTI.Serializable(0xA0C31C6D0F552421, GameType.DS)]
    public class SwitchStateAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<DestructibilityPartStateResource>> RandomNextStates;
    }

    [RTTI.Serializable(0xB22BEE8FC3F2DE53, GameType.DS)]
    public class SystemAssets : Resource
    {
    }

    [RTTI.Serializable(0xDEA5E910717EB8C7, GameType.DS)]
    public class SystemAssetsList : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<SystemAssets>> List;
        [RTTI.Member(3, 0x30)] public Array<StreamingRef<SystemAssets>> ListDependent;
    }

    [RTTI.Serializable(0x2C2E2FB7B9D988D5, GameType.DS)]
    public class SystemParams
    {
        [RTTI.Member(0, 0x0, true)] public ELanguage SpokenLanguage;
        [RTTI.Member(1, 0x4, true)] public ELanguage WrittenLanguage;
        [RTTI.Member(2, 0x8, true)] public bool TelemetryEnabled;
        [RTTI.Member(3, 0x10, true)] public Array<ScriptGameGlobal> GameGlobals;
        [RTTI.Member(4, 0x20, true)] public float GammaCorrection;
        [RTTI.Member(5, 0x24, true)] public int PhotoModeOverlayIndex;
        [RTTI.Member(6, 0x28, true)] public int PhotoModeBorderIndex;
        [RTTI.Member(7, 0x2C, true)] public int PhotoModeSmallLogoIndex;
        [RTTI.Member(8, 0x30, true)] public int PhotoModeColorizeIndex;
        [RTTI.Member(9, 0x34, true)] public float PhotoModeColorizeIntensity;
        [RTTI.Member(10, 0x38, true)] public bool PhotoModeVignetteEnabled;
        [RTTI.Member(11, 0x3C, true)] public int PhotoModeVignetteSizeIndex;
        [RTTI.Member(12, 0x40, true)] public float PhotoModeVignetteIntensity;
        [RTTI.Member(13, 0x44, true)] public bool PhotoModeDepthOfFieldEnabled;
        [RTTI.Member(14, 0x48, true)] public int PhotoModeDepthOfFieldFocusDistance;
        [RTTI.Member(15, 0x4C, true)] public float PhotoModeDepthOfFieldAperture;
        [RTTI.Member(16, 0x50, true)] public bool PhotoModeGrainEnabled;
        [RTTI.Member(17, 0x54, true)] public float PhotoModeGrainIntensity;
        [RTTI.Member(18, 0x58, true)] public float PhotoModeOverExposure;
        [RTTI.Member(19, 0x5C, true)] public bool PhotoModeGreetingsEnabled;
        [RTTI.Member(20, 0x64, true)] public bool PhotoModeOpticalEnabled;
        [RTTI.Member(21, 0x68, true)] public int PhotoModeOpticalIndex;
        [RTTI.Member(22, 0x6C, true)] public float PhotoModeOpticalIntensity;
        [RTTI.Member(23, 0x80, true)] public EPS4ProRenderMode PS4ProRenderMode;
        [RTTI.Member(24, 0x84, true)] public bool HDREnabled;
    }

    [RTTI.Serializable(0x42A673CF415B607C, GameType.DS)]
    public class SystemQuestTrigger : QuestTrigger
    {
    }

    [RTTI.Serializable(0x9A39895C0D852C8F, GameType.DS)]
    public class SystemQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xB224142973089152, GameType.DS)]
    public class TabHeaderTag : VisualTag
    {
    }

    [RTTI.Serializable(0x9E3F8564027974CC, GameType.DS)]
    public class TabHeaderWidget : Widget
    {
    }

    [RTTI.Serializable(0xD05E9154F243FA7F, GameType.DS)]
    public class TabTag : VisualTag
    {
    }

    [RTTI.Serializable(0x73C9816DA5BD896C, GameType.DS)]
    public class TabWidget : Widget
    {
    }

    [RTTI.Serializable(0xCCE3AF1CF074CE78, GameType.DS)]
    public class TabboxTag : VisualTag
    {
    }

    [RTTI.Serializable(0x489283788AA8D33, GameType.DS)]
    public class TabboxWidget : Widget
    {
    }

    [RTTI.Serializable(0x2297C0F189E7B82B, GameType.DS)]
    public class TabpaneTag : VisualTag
    {
    }

    [RTTI.Serializable(0x19524D9135EEBB66, GameType.DS)]
    public class TabpaneWidget : Widget
    {
    }

    [RTTI.Serializable(0xF7FC495FA671CA8A, GameType.DS)]
    public class Tag : MenuNode
    {
    }

    [RTTI.Serializable(0xF7248ECB7BF5605D, GameType.DS)]
    public class TagEvent : MsgBase
    {
        [RTTI.Member(3, 0x14)] public bool Handled;
        [RTTI.Member(2, 0x15)] public bool Cancelled;
        [RTTI.Member(0, 0x18)] public CPtr<Tag> Sender;
        [RTTI.Member(1, 0x20)] public CPtr<Tag> Target;
    }

    [RTTI.Serializable(0xA5424C02DB4E425C, GameType.DS)]
    public class TagEventButtonPressAndHoldFinish : TagEventInput
    {
    }

    [RTTI.Serializable(0x519A0EEF801D8637, GameType.DS)]
    public class TagEventButtonPressAndHoldFinishSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x74E7393B7D04D4D9, GameType.DS)]
    public class TagEventButtonPressAndHoldStart : TagEventInput
    {
    }

    [RTTI.Serializable(0x31D149775F2AE7E8, GameType.DS)]
    public class TagEventButtonPressAndHoldStartSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x27F8F5BEC26A1209, GameType.DS)]
    public class TagEventButtonPressHoldAndReleaseFinish : TagEventInput
    {
    }

    [RTTI.Serializable(0xC0B2013B027E20C7, GameType.DS)]
    public class TagEventButtonPressHoldAndReleaseStart : TagEventInput
    {
    }

    [RTTI.Serializable(0x758E3A9F64DDEDBE, GameType.DS)]
    public class TagEventButtonReleased : TagEventInput
    {
    }

    [RTTI.Serializable(0x787287FACED8A47D, GameType.DS)]
    public class TagEventChildrenUpdated : TagEvent
    {
    }

    [RTTI.Serializable(0xAB0F22EE09777867, GameType.DS)]
    public class TagEventCreate : TagEvent
    {
    }

    [RTTI.Serializable(0x2BF4CBC3B18F7596, GameType.DS)]
    public class TagEventDataContextUpdated : TagEvent
    {
    }

    [RTTI.Serializable(0x1DCF95D54CDAB848, GameType.DS)]
    public class TagEventDataProviderUpdate : TagEvent
    {
        [RTTI.Member(4, 0x0)] public CPtr<DataNode> Data;
    }

    [RTTI.Serializable(0xA3CD2398E97AFF7B, GameType.DS)]
    public class TagEventDataProviderUpdateSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE7D28F000143436F, GameType.DS)]
    public class TagEventDeinitialize : TagEvent
    {
    }

    [RTTI.Serializable(0x2D2004CDA7551C43, GameType.DS)]
    public class TagEventFocusOff : TagEvent
    {
    }

    [RTTI.Serializable(0xE9222F49A2B7AE90, GameType.DS)]
    public class TagEventFocusOn : TagEvent
    {
    }

    [RTTI.Serializable(0x233CB2725F258CC3, GameType.DS)]
    public class TagEventInitialize : TagEvent
    {
    }

    [RTTI.Serializable(0xC481EFCB1FABAB3D, GameType.DS)]
    public class TagEventInput : TagEvent
    {
        [RTTI.Member(4, 0x28)] public EMenuInputFunction Function;
        [RTTI.Member(5, 0x30)] public CPtr<Tag> Handler;
        [RTTI.Member(6, 0x38)] public CPtr<Tag> RootElement;
    }

    [RTTI.Serializable(0x4572DF58AAD44351, GameType.DS)]
    public class TagEventInputSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB1B2A01BF7E5FEA1, GameType.DS)]
    public class TagEventMenuStateChanged : TagEvent
    {
    }

    [RTTI.Serializable(0x8E4C961F85AF7ABD, GameType.DS)]
    public class TagEventMouseInput : TagEvent
    {
    }

    [RTTI.Serializable(0x5EE3ED9FA942C011, GameType.DS)]
    public class TagEventPageOff : TagEvent
    {
        [RTTI.Member(4, 0x18)] public CPtr<Tag> PageRoot;
    }

    [RTTI.Serializable(0xEFE308053139A22F, GameType.DS)]
    public class TagEventPageOn : TagEvent
    {
        [RTTI.Member(4, 0x18)] public CPtr<Tag> PageRoot;
    }

    [RTTI.Serializable(0x609BA4665C3A41C6, GameType.DS)]
    public class TagEventSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDFAF5F2DF5F6B491, GameType.DS)]
    public class TagEventValueChanged : TagEvent
    {
        [RTTI.Member(4, 0x28)] public String OldValue;
        [RTTI.Member(5, 0x30)] public String NewValue;
    }

    [RTTI.Serializable(0x1D600BC139DAE32B, GameType.DS)]
    public class TagProperty : BoolProperty
    {
    }

    [RTTI.Serializable(0x13D709A88F3A99C2, GameType.DS)]
    public class TagPropertyLinkCollection
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<TagProperty>> Properties;
    }

    [RTTI.Serializable(0xA673663C70CDFBC7, GameType.DS)]
    public class TagPropertyValue : PropertyValue
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<TagProperty> Property;
    }

    [RTTI.Serializable(0x8CB4DAD8B8177D43, GameType.DS)]
    public class TalkComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAF9505CE690FAAF0, GameType.DS)]
    public class TalkComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x142414D7B6F193EE, GameType.DS)]
    public class TalkComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7C95CE67258AB427, GameType.DS)]
    public class TalkPriority : Resource
    {
        [RTTI.Member(2, 0x20)] public float Priority;
    }

    [RTTI.Serializable(0x93BFD208B9AB4F95, GameType.DS)]
    public class TalkPrioritySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x71E49D24478F77C5, GameType.DS)]
    public class TaperedCapsule
    {
        [RTTI.Member(0, 0x0)] public Vec3 From;
        [RTTI.Member(1, 0x10)] public Vec3 To;
        [RTTI.Member(2, 0x20)] public float FromRadius;
        [RTTI.Member(3, 0x24)] public float ToRadius;
    }

    [RTTI.Serializable(0x46C11F5A4354C770, GameType.DS)]
    public class TelemetryAlert : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int type;
        [RTTI.Member(3, 0x28)] public String title;
        [RTTI.Member(4, 0x30)] public String message;
        [RTTI.Member(5, 0x38)] public String context;
        [RTTI.Member(6, 0x40)] public String filename;
        [RTTI.Member(7, 0x48)] public int line_number;
    }

    [RTTI.Serializable(0x61488E582AA64863, GameType.DS)]
    public class TelemetryAssert : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String filename;
        [RTTI.Member(11, 0x58)] public int line_number;
        [RTTI.Member(12, 0x60)] public String condition;
        [RTTI.Member(13, 0x68)] public String message;
        [RTTI.Member(14, 0x70)] public String extra_info;
        [RTTI.Member(15, 0x78)] public Array<String> call_stack;
    }

    [RTTI.Serializable(0x7E7A99F24DB0337B, GameType.DS)]
    public class TelemetryBootStart : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String title_name;
        [RTTI.Member(3, 0x28)] public String issuer_id;
        [RTTI.Member(4, 0x30)] public String platform;
        [RTTI.Member(5, 0x38)] public String device_type;
        [RTTI.Member(6, 0x40)] public String build_version;
        [RTTI.Member(7, 0x48)] public bool is_trial;
        [RTTI.Member(8, 0x50)] public String build_type;
        [RTTI.Member(9, 0x58)] public int play_go_source;
        [RTTI.Member(10, 0x60)] public String host_name;
        [RTTI.Member(11, 0x68)] public String command_line;
    }

    [RTTI.Serializable(0xD969BBFAC5BE0398, GameType.DS)]
    public class TelemetryBootStartGame : TelemetryBootStart
    {
    }

    [RTTI.Serializable(0x591DA3AFC3B407F6, GameType.DS)]
    public class TelemetryBrowseProduct : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String ProductLabel;
    }

    [RTTI.Serializable(0xF7D0A1F30A4F9419, GameType.DS)]
    public class TelemetryCharacterUpgrade : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String Upgrade;
        [RTTI.Member(11, 0x58)] public int PlayerLevel;
    }

    [RTTI.Serializable(0xCE6871BCA531B2D7, GameType.DS)]
    public class TelemetryCollectableUnlocked : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID collectable;
        [RTTI.Member(11, 0x60)] public GGUUID type;
        [RTTI.Member(12, 0x70)] public int total_unlocked;
        [RTTI.Member(13, 0x80)] public Vec3 position;
    }

    [RTTI.Serializable(0x6B77DAEB64BD2170, GameType.DS)]
    public class TelemetryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD72D36755FF0189B, GameType.DS)]
    public class TelemetryComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool SpawnEvent;
        [RTTI.Member(4, 0x21, "Logic")] public bool KillEvent;
        [RTTI.Member(5, 0x22, "Logic")] public bool PositionUpdates;
        [RTTI.Member(6, 0x24, "Logic")] public float MinTimeBetweenPositionUpdates;
        [RTTI.Member(7, 0x28, "Logic")] public float MinDistanceBetweenPositionUpdates;
        [RTTI.Member(8, 0x2C, "Logic")] public ETelemetryDamageTracking IncomingDamageTracking;
        [RTTI.Member(9, 0x30, "Logic")] public float CombatTimeout;
    }

    [RTTI.Serializable(0x8428C960E54F66B, GameType.DS)]
    public class TelemetryCrash : TelemetryGamePositions
    {
        [RTTI.Member(12, 0x80)] public String error;
        [RTTI.Member(13, 0x88)] public String executable_name;
        [RTTI.Member(14, 0x90)] public Array<String> callstack;
        [RTTI.Member(15, 0xA8)] public String register_content;
        [RTTI.Member(16, 0xB0)] public String cpu_revision;
        [RTTI.Member(17, 0xB8)] public String context;
        [RTTI.Member(18, 0xC0)] public String asset_memory_layout;
        [RTTI.Member(19, 0xC8)] public String log;
        [RTTI.Member(20, 0xD0)] public String assertions;
    }

    [RTTI.Serializable(0xFA563729D331DF9D, GameType.DS)]
    public class TelemetryDSConfigSetting : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public Array<TelemetryDSPlayerProfileInfo> ds_player_prfile;
        [RTTI.Member(11, 0x60)] public uint64 missionID;
        [RTTI.Member(12, 0x68)] public ELanguage spoken_language;
        [RTTI.Member(13, 0x6C)] public ELanguage written_language;
    }

    [RTTI.Serializable(0xC6034221356F2919, GameType.DS)]
    public class TelemetryDSFinalResultEvent : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public uint32 slip_down;
        [RTTI.Member(11, 0x54)] public uint32 broken_boots;
        [RTTI.Member(12, 0x58)] public double drink_water;
        [RTTI.Member(13, 0x60)] public double blood_transfusion;
        [RTTI.Member(14, 0x68)] public uint32 eat_cryptbiosis;
        [RTTI.Member(15, 0x70)] public uint64 rest_time;
        [RTTI.Member(16, 0x78)] public int fabricate_item_count;
        [RTTI.Member(17, 0x7C)] public int fabricate_item_max;
        [RTTI.Member(18, 0x80)] public uint32 construction_count;
        [RTTI.Member(19, 0x84)] public uint32 construction_count_road;
        [RTTI.Member(20, 0x88)] public double moving_distance;
        [RTTI.Member(21, 0x90)] public uint64 play_time;
        [RTTI.Member(22, 0x98)] public uint32 completed_missoin;
        [RTTI.Member(23, 0x9C)] public uint32 completed_mission_main;
        [RTTI.Member(24, 0xA0)] public uint32 completed_mission_simple;
        [RTTI.Member(25, 0xA4)] public uint32 completed_mission_auto;
        [RTTI.Member(26, 0xA8)] public uint32 completed_mission_supply;
        [RTTI.Member(27, 0xAC)] public uint32 get_lost_baggage;
        [RTTI.Member(28, 0xB0)] public uint32 deliver_lost_baggage;
        [RTTI.Member(29, 0xB4)] public uint32 clear_simple_mission_premium_awesome;
        [RTTI.Member(30, 0xB8)] public uint32 clear_simple_mission_premium_legend;
        [RTTI.Member(31, 0xBC)] public uint32 clear_simple_mission_premium_lols;
        [RTTI.Member(32, 0xC0)] public uint32 delivery_baggage;
        [RTTI.Member(33, 0xC8)] public double delivery_baggage_weight;
        [RTTI.Member(34, 0xD0)] public uint32 dandle_bb;
        [RTTI.Member(35, 0xD4)] public uint32 received_like_bb;
        [RTTI.Member(36, 0xD8)] public float rriendship_bb;
        [RTTI.Member(37, 0xDC)] public uint8 friendly_delivery_point_lv1;
        [RTTI.Member(38, 0xDD)] public uint8 friendly_delivery_point_lv2;
        [RTTI.Member(39, 0xDE)] public uint8 friendly_delivery_point_lv3;
        [RTTI.Member(40, 0xDF)] public uint8 friendly_delivery_point_lv4;
        [RTTI.Member(41, 0xE0)] public uint8 friendly_delivery_point_lv5;
        [RTTI.Member(42, 0xE4)] public uint32 communicated_users;
        [RTTI.Member(43, 0xE8)] public int64 received_like;
        [RTTI.Member(44, 0xF0)] public int64 received_like_npc;
        [RTTI.Member(45, 0xF8)] public int64 received_like_online;
        [RTTI.Member(46, 0x100)] public int32 bridge_link_level;
        [RTTI.Member(47, 0x104)] public uint32 safety_level;
        [RTTI.Member(48, 0x108)] public uint32 service_level;
        [RTTI.Member(49, 0x10C)] public uint32 delivery_level;
        [RTTI.Member(50, 0x110)] public uint32 speed_level;
        [RTTI.Member(51, 0x118)] public int64 bridge_link_exp;
        [RTTI.Member(52, 0x120)] public int64 safety_level_exp;
        [RTTI.Member(53, 0x128)] public int64 service_level_exp;
        [RTTI.Member(54, 0x130)] public int64 delivery_level_exp;
        [RTTI.Member(55, 0x138)] public int64 speed_level_exp;
        [RTTI.Member(56, 0x140)] public uint32 rank;
        [RTTI.Member(57, 0x148)] public String nickname;
    }

    [RTTI.Serializable(0xB69B37D1398745A4, GameType.DS)]
    public class TelemetryDSGameOver : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public String GameOverType;
        [RTTI.Member(16, 0x98)] public String GameOverReason;
        [RTTI.Member(17, 0xA0)] public uint64 MissionId;
    }

    [RTTI.Serializable(0x74591E65F04DCDE1, GameType.DS)]
    public class TelemetryDSGazerFoundPlayer : TelemetryEntityPosition
    {
    }

    [RTTI.Serializable(0x2DD4EBF5CC3C2D95, GameType.DS)]
    public class TelemetryDSMissionEvent : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public String missiontype;
        [RTTI.Member(16, 0x98)] public String eventtype;
        [RTTI.Member(17, 0xA0)] public String extrainfo;
        [RTTI.Member(18, 0xA8)] public uint64 missionid;
        [RTTI.Member(19, 0xB0)] public String elapsedtime;
        [RTTI.Member(20, 0xB8)] public WString creatorname;
        [RTTI.Member(21, 0xC0)] public WString baggagename;
        [RTTI.Member(22, 0xC8)] public uint32 baggagecode;
        [RTTI.Member(23, 0xCC)] public uint8 baggageuniqid;
        [RTTI.Member(24, 0xCD)] public uint8 my_version;
    }

    [RTTI.Serializable(0xA32D1BCB264BE625, GameType.DS)]
    public class TelemetryDSMissionSuccessEvent : TelemetryDSMissionEvent
    {
        [RTTI.Member(25, 0xD0)] public int64 local_like;
        [RTTI.Member(26, 0xD8)] public int64 total_like;
        [RTTI.Member(27, 0xE0)] public int64 send_total_like;
        [RTTI.Member(28, 0xE8)] public int64 npc_send_total_like;
        [RTTI.Member(29, 0xF0)] public int32 level_speed;
        [RTTI.Member(30, 0xF4)] public int32 level_safety;
        [RTTI.Member(31, 0xF8)] public int32 level_delivery;
        [RTTI.Member(32, 0xFC)] public int32 level_service;
        [RTTI.Member(33, 0x100)] public int32 level_bridgeslink;
        [RTTI.Member(34, 0x104)] public float total_move;
        [RTTI.Member(35, 0x108)] public uint32 total_delivered_count;
        [RTTI.Member(36, 0x10C)] public float total_delivered_weight;
        [RTTI.Member(37, 0x110)] public int32 bb_affection_point_pure;
        [RTTI.Member(38, 0x118)] public String rank;
        [RTTI.Member(39, 0x120)] public String lowest_difficulty;
        [RTTI.Member(40, 0x128)] public String difficulty;
    }

    [RTTI.Serializable(0x2D487ED35A9C0A1F, GameType.DS)]
    public class TelemetryDSMuleFoundPlayer : TelemetryEntityPosition
    {
    }

    [RTTI.Serializable(0xE372ED96BD9C244, GameType.DS)]
    public class TelemetryDSMuleRaderFoundPlayer : TelemetryEntityPosition
    {
    }

    [RTTI.Serializable(0xDA32E6D4836F0655, GameType.DS)]
    public class TelemetryDSNpcDefeat : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public Vec3 player_pos;
        [RTTI.Member(16, 0xA0)] public String npc_type;
        [RTTI.Member(17, 0xA8)] public String defeat_reason;
        [RTTI.Member(18, 0xB0)] public String defeat_means;
    }

    [RTTI.Serializable(0x4FB6486626EE6788, GameType.DS)]
    public class TelemetryDSOnlineObject : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public String action;
        [RTTI.Member(16, 0x98)] public String detailed_action;
        [RTTI.Member(17, 0xA0)] public String type;
        [RTTI.Member(18, 0xA8)] public String sub_type;
        [RTTI.Member(19, 0xB0)] public String owner_id;
        [RTTI.Member(20, 0xB8)] public String owner_name;
        [RTTI.Member(21, 0xC0)] public int32 local_id;
        [RTTI.Member(22, 0xC4)] public int32 level;
        [RTTI.Member(23, 0xC8)] public Ref<TelemetryDSOnlineObjectLikeInfo> like_info;
        [RTTI.Member(24, 0xD0)] public Ref<TelemetryDSOnlineObjectAppendMaterialsInfo> append_materials_info;
    }

    [RTTI.Serializable(0xB536F2EB7C4C5114, GameType.DS)]
    public class TelemetryDSOnlineObjectAppendMaterialsInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x24)] public bool is_level_up;
        [RTTI.Member(3, 0x25)] public bool is_repair;
        [RTTI.Member(4, 0x28)] public HashMap<String_int> materials;
    }

    [RTTI.Serializable(0x9C41829312C4836E, GameType.DS)]
    public class TelemetryDSOnlineObjectLikeInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int32 current;
        [RTTI.Member(3, 0x24)] public int32 add;
        [RTTI.Member(4, 0x28)] public bool is_auto;
    }

    [RTTI.Serializable(0x299B647DD73143C7, GameType.DS)]
    public class TelemetryDSPickupLostBaggage : TelemetryEntityPosition
    {
    }

    [RTTI.Serializable(0xDD8D7733206F0975, GameType.DS)]
    public class TelemetryDSPlayerBasicAction : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public String action_name;
    }

    [RTTI.Serializable(0x9C8DA146E5C2167C, GameType.DS)]
    public class TelemetryDSPlayerDanglingAction : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public float BBLaughedTime;
        [RTTI.Member(16, 0x94)] public float BadShakeTime;
        [RTTI.Member(17, 0x98)] public float GoodShakeTime;
        [RTTI.Member(18, 0x9C)] public float NoShakeTime;
    }

    [RTTI.Serializable(0x5874F1C957929BAB, GameType.DS)]
    public class TelemetryDSPlayerExchangingShoesAction : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public uint8 ShoesId;
    }

    [RTTI.Serializable(0xBE49CAB56F501A01, GameType.DS)]
    public class TelemetryDSPlayerJump : TelemetryEntityPosition
    {
    }

    [RTTI.Serializable(0x9A8C8F5C7C7FF8BE, GameType.DS)]
    public class TelemetryDSPlayerNaturalAction : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public String action_name;
    }

    [RTTI.Serializable(0xCD915817BF7C2895, GameType.DS)]
    public class TelemetryDSPlayerPosition : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public float health;
        [RTTI.Member(16, 0x94)] public float stamina;
        [RTTI.Member(17, 0x98)] public float bb_stress;
        [RTTI.Member(19, 0x9C)] public bool ride_cart;
        [RTTI.Member(20, 0x9D)] public bool ride_zipline;
        [RTTI.Member(21, 0x9E)] public bool stop_breath;
        [RTTI.Member(22, 0x9F)] public bool drag_cart;
        [RTTI.Member(23, 0xA0)] public bool equip_mask;
        [RTTI.Member(24, 0xA1)] public bool equip_power_skeleton;
        [RTTI.Member(25, 0xA2)] public bool equip_balance_skeleton;
        [RTTI.Member(26, 0xA3)] public bool equip_speed_skeleton;
        [RTTI.Member(27, 0xA4)] public bool using_blood_pack;
        [RTTI.Member(18, 0xA8)] public EDSPlayerMoveTypeExported move_type;
    }

    [RTTI.Serializable(0x733A063DC0CBF9F6, GameType.DS)]
    public class TelemetryDSPlayerProfileInfo : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public uint8 index;
        [RTTI.Member(1, 0x10)] public String profile_name;
        [RTTI.Member(2, 0x18)] public uint8 value;
    }

    [RTTI.Serializable(0x615224D1E9F3B210, GameType.DS)]
    public class TelemetryDSSearchBaggage : TelemetryEntityPosition
    {
    }

    [RTTI.Serializable(0xE8CDA640912AB5B8, GameType.DS)]
    public class TelemetryDSServiceApiCall : TelemetryEntityPosition
    {
        [RTTI.Member(15, 0x90)] public String api;
        [RTTI.Member(16, 0x98)] public String group;
        [RTTI.Member(17, 0xA0)] public String request;
        [RTTI.Member(18, 0xA8)] public int32 http_status;
        [RTTI.Member(19, 0xB0)] public String response;
        [RTTI.Member(20, 0xB8)] public String zygo_id;
    }

    [RTTI.Serializable(0x9A1C704784743568, GameType.DS)]
    public class TelemetryDSVehicleRide : TelemetryEntityPosition
    {
        [RTTI.Member(16, 0x90)] public EVehicleType vehicle_type;
        [RTTI.Member(15, 0x94)] public bool is_ride_on;
    }

    [RTTI.Serializable(0x4408B1D58271A824, GameType.DS)]
    public class TelemetryDifficultyChanged : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String difficulty;
        [RTTI.Member(11, 0x58)] public String previous_difficulty;
    }

    [RTTI.Serializable(0xEC587B2111F3D7E6, GameType.DS)]
    public class TelemetryDiscoverableAreaStateSwitch : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String AreaName;
        [RTTI.Member(11, 0x58)] public String AreaType;
        [RTTI.Member(12, 0x60)] public WorldPosition AreaPosition;
        [RTTI.Member(13, 0x78)] public WorldPosition PlayerPosition;
        [RTTI.Member(14, 0x90)] public EDiscoveryState State;
    }

    [RTTI.Serializable(0xD4133F4144F2644A, GameType.DS)]
    public class TelemetryEntityDamageSummary : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID entity_id;
        [RTTI.Member(11, 0x60)] public GGUUID damage_type_id;
        [RTTI.Member(12, 0x70)] public GGUUID weapon_resouce_id;
        [RTTI.Member(13, 0x80)] public float part_damage_multiplier;
        [RTTI.Member(14, 0x84)] public float health_lost;
        [RTTI.Member(15, 0x88)] public bool killed;
    }

    [RTTI.Serializable(0xCCDAF5B42CC7673C, GameType.DS)]
    public class TelemetryEntityFellThroughWorld : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID EntityID;
        [RTTI.Member(11, 0x60)] public Vec3 Position;
    }

    [RTTI.Serializable(0x5D0D32F886C39468, GameType.DS)]
    public class TelemetryEntityKilled : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID EntityID;
        [RTTI.Member(11, 0x60)] public Vec3 Position;
        [RTTI.Member(12, 0x70)] public GGUUID ResourceID;
        [RTTI.Member(13, 0x80)] public GGUUID SpawnSetupID;
        [RTTI.Member(14, 0x90)] public GGUUID KillerEntityID;
        [RTTI.Member(15, 0xA0)] public String KillerFaction;
        [RTTI.Member(16, 0xB0)] public Vec3 KillerPosition;
        [RTTI.Member(17, 0xC0)] public GGUUID KillerSpawnSetupID;
        [RTTI.Member(18, 0xD0)] public GGUUID WeaponResourceID;
        [RTTI.Member(19, 0xE0)] public bool Headshot;
        [RTTI.Member(20, 0xE1)] public bool Zoomed;
        [RTTI.Member(21, 0xE2)] public bool Crouched;
        [RTTI.Member(22, 0xE4)] public float time_since_first_damage;
        [RTTI.Member(23, 0xE8)] public float non_combat_time_since_first_damage;
    }

    [RTTI.Serializable(0x6E6D19577B68C48B, GameType.DS)]
    public class TelemetryEntityPosition : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID EntityID;
        [RTTI.Member(11, 0x60)] public GGUUID ResourceID;
        [RTTI.Member(12, 0x70)] public Vec3 Position;
        [RTTI.Member(13, 0x80)] public float Heading;
        [RTTI.Member(14, 0x88)] public String level_id;
    }

    [RTTI.Serializable(0x76B4C4D8635EC785, GameType.DS)]
    public class TelemetryEntitySpawn : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID EntityID;
        [RTTI.Member(11, 0x60)] public Vec3 Pos;
        [RTTI.Member(12, 0x70)] public float Heading;
        [RTTI.Member(13, 0x74)] public GGUUID SpawnSourceID;
        [RTTI.Member(14, 0x84)] public GGUUID ResourceID;
        [RTTI.Member(15, 0x94)] public GGUUID SpawnSetupID;
        [RTTI.Member(16, 0xA8)] public String ClassName;
        [RTTI.Member(17, 0xB0)] public String EntityFaction;
    }

    [RTTI.Serializable(0x1D123A2FC9010B52, GameType.DS)]
    public class TelemetryEntityUsed : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID ResourceID;
        [RTTI.Member(11, 0x60)] public Vec3 Position;
    }

    [RTTI.Serializable(0xE9DCFE7A8172FD70, GameType.DS)]
    public class TelemetryErrorEvent : TelemetryNetworkStats
    {
        [RTTI.Member(39, 0xD8)] public int error_code;
        [RTTI.Member(40, 0xE0)] public String error_type;
        [RTTI.Member(41, 0xE8)] public String error_message;
    }

    [RTTI.Serializable(0x111F3A0B3EBCD2FA, GameType.DS)]
    public class TelemetryEvent : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public Ref<TelemetryHeader> Header;
        [RTTI.Member(3, 0x28)] public Ref<RTTIRefObject> Data;
    }

    [RTTI.Serializable(0xCD93B29433D6239D, GameType.DS)]
    public class TelemetryEventActionData : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID entity_id;
        [RTTI.Member(11, 0x60)] public Vec3 position;
        [RTTI.Member(12, 0x70)] public String event_name;
        [RTTI.Member(13, 0x78)] public String parameter1;
        [RTTI.Member(14, 0x80)] public String parameter2;
    }

    [RTTI.Serializable(0x70812012D4E49936, GameType.DS)]
    public class TelemetryEventList : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int Count;
        [RTTI.Member(3, 0x28)] public Array<Ref<TelemetryEvent>> Events;
    }

    [RTTI.Serializable(0x3D6FBA66E73C1A54, GameType.DS)]
    public class TelemetryFastTravel : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public Vec3 start_position;
        [RTTI.Member(11, 0x60)] public Vec3 end_position;
        [RTTI.Member(12, 0x70)] public float travel_time;
        [RTTI.Member(13, 0x74)] public float travel_distance;
    }

    [RTTI.Serializable(0x36698B9CED1A304D, GameType.DS)]
    public class TelemetryFrameStats : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String LevelID;
        [RTTI.Member(11, 0x58)] public int ActivePlayerCount;
        [RTTI.Member(12, 0x5C)] public int MinHeapFree;
        [RTTI.Member(13, 0x60)] public int MaxHeapFree;
        [RTTI.Member(14, 0x70)] public Vec3 PlayerPosition;
        [RTTI.Member(15, 0x80)] public float PlayerZDegrees;
        [RTTI.Member(16, 0x84)] public float scene_static_memory_pct;
        [RTTI.Member(17, 0x88)] public int scene_total_static_setups;
        [RTTI.Member(18, 0x8C)] public int scene_total_dynamic_setups;
        [RTTI.Member(19, 0x90)] public int scene_visible_setups;
        [RTTI.Member(20, 0x94)] public int scene_sun_shadow_setups;
        [RTTI.Member(21, 0x98)] public float scene_query_time;
        [RTTI.Member(22, 0x9C)] public float scene_sun_shadow_query_time;
    }

    [RTTI.Serializable(0xD40DF9B75BD84B6B, GameType.DS)]
    public class TelemetryGameBase : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public GGUUID game_id;
        [RTTI.Member(3, 0x30)] public float game_time;
        [RTTI.Member(4, 0x34)] public bool is_game_play;
        [RTTI.Member(5, 0x35)] public bool is_neo_mode;
        [RTTI.Member(7, 0x38)] public int story_progress;
        [RTTI.Member(6, 0x3C)] public EPlatform platform;
        [RTTI.Member(9, 0x40)] public float ds_submission_version;
        [RTTI.Member(8, 0x48)] public String build;
    }

    [RTTI.Serializable(0x326FA062623C0D35, GameType.DS)]
    public class TelemetryGameEnd : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String end_reason;
        [RTTI.Member(11, 0x58)] public String mode;
        [RTTI.Member(12, 0x60)] public String level_id;
        [RTTI.Member(13, 0x68)] public int local_player_count;
        [RTTI.Member(14, 0x6C)] public int player_count;
        [RTTI.Member(15, 0x70)] public int duration_secs;
        [RTTI.Member(16, 0x74)] public bool is_completed;
    }

    [RTTI.Serializable(0x330DF3A27432501D, GameType.DS)]
    public class TelemetryGameEndGame : TelemetryGameEnd
    {
    }

    [RTTI.Serializable(0xF9712053D245801C, GameType.DS)]
    public class TelemetryGamePositions : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public WorldPosition player_position;
        [RTTI.Member(11, 0x68)] public WorldPosition camera_position;
    }

    [RTTI.Serializable(0xE0628CC6061830C2, GameType.DS)]
    public class TelemetryGameStart : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String mode;
        [RTTI.Member(11, 0x58)] public String level_id;
        [RTTI.Member(12, 0x60)] public String WrittenLanguage;
        [RTTI.Member(13, 0x68)] public String SpokenLanguage;
    }

    [RTTI.Serializable(0x58CD9AE6FBBA3104, GameType.DS)]
    public class TelemetryGameStartGame : TelemetryGameStart
    {
    }

    [RTTI.Serializable(0x739995F81C193FAC, GameType.DS)]
    public class TelemetryHardwareProfile : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String openpsid;
        [RTTI.Member(3, 0x28)] public int language_setting;
        [RTTI.Member(4, 0x30)] public String tv_resolution;
        [RTTI.Member(5, 0x38)] public bool capable_3d;
        [RTTI.Member(6, 0x39)] public bool capable_hdr;
        [RTTI.Member(7, 0x3C)] public int refresh_rate;
        [RTTI.Member(8, 0x40)] public int hardware_revision;
    }

    [RTTI.Serializable(0xE3D2A2D246052E5E, GameType.DS)]
    public class TelemetryHardwareProfileGame : TelemetryHardwareProfile
    {
        [RTTI.Member(9, 0x48)] public String graphical_setting;
        [RTTI.Member(10, 0x50)] public bool hdr_setting;
    }

    [RTTI.Serializable(0x359261C44D99AAA, GameType.DS)]
    public class TelemetryHeader : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String user_id;
        [RTTI.Member(3, 0x28)] public String psn_account;
        [RTTI.Member(4, 0x30)] public String title_id;
        [RTTI.Member(5, 0x38)] public uint64 client_timestamp;
        [RTTI.Member(6, 0x40)] public int client_timezone;
        [RTTI.Member(7, 0x48)] public String session_id;
        [RTTI.Member(8, 0x50)] public String environment;
    }

    [RTTI.Serializable(0xFD1C7CD5FBC13C41, GameType.DS)]
    public class TelemetryInventoryAdded : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID ItemResourceID;
        [RTTI.Member(11, 0x60)] public GGUUID ItemOriginID;
        [RTTI.Member(12, 0x70)] public int Amount;
        [RTTI.Member(13, 0x74)] public int NewTotalAmount;
        [RTTI.Member(14, 0x78)] public int MaxFitAmount;
        [RTTI.Member(15, 0x7C)] public int InventorySlotsLeft;
        [RTTI.Member(16, 0x80)] public EInventoryCategory Category;
        [RTTI.Member(17, 0x90)] public Vec3 Location;
        [RTTI.Member(18, 0xA0)] public int PlayerLevel;
        [RTTI.Member(19, 0xA4)] public GGUUID QuestUUID;
    }

    [RTTI.Serializable(0x3754188842373F1E, GameType.DS)]
    public class TelemetryInventoryEntityActivation : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID InventoryEntityResourceID;
        [RTTI.Member(11, 0x60)] public bool Activated;
    }

    [RTTI.Serializable(0x227D3BCF84C414B6, GameType.DS)]
    public class TelemetryKillLagSample : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String ServerIp;
        [RTTI.Member(11, 0x58)] public String ServerRegion;
        [RTTI.Member(12, 0x60)] public String KillerRegion;
        [RTTI.Member(13, 0x68)] public int KillerRttMs;
        [RTTI.Member(14, 0x70)] public String VictimRegion;
        [RTTI.Member(15, 0x78)] public int VictimRttMs;
        [RTTI.Member(16, 0x80)] public String KillerOnlineID;
        [RTTI.Member(17, 0x88)] public String VictimOnlineID;
        [RTTI.Member(18, 0x90)] public int KillLagMs;
    }

    [RTTI.Serializable(0xBB86A455373FCF39, GameType.DS)]
    public class TelemetryLaunchAction : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String LaunchAction;
    }

    [RTTI.Serializable(0x88A09A2EA6EFE74E, GameType.DS)]
    public class TelemetryLoadingScreen : TelemetryGamePositions
    {
        [RTTI.Member(12, 0x80)] public String level;
        [RTTI.Member(13, 0x88)] public GGUUID event_uuid;
        [RTTI.Member(14, 0x98)] public String instigator;
        [RTTI.Member(15, 0xA0)] public String cause;
        [RTTI.Member(16, 0xA8)] public float loading_time_before_stall;
    }

    [RTTI.Serializable(0x83CAE9248A3AEAD2, GameType.DS)]
    public class TelemetryLootDrop : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID ItemResourceID;
        [RTTI.Member(11, 0x60)] public GGUUID ItemOriginSpawnSourceID;
        [RTTI.Member(12, 0x70)] public int Amount;
        [RTTI.Member(13, 0x80)] public Vec3 Location;
    }

    [RTTI.Serializable(0x770FFB27D5135276, GameType.DS)]
    public class TelemetryMenuDuration : TelemetryMenuScreen
    {
        [RTTI.Member(7, 0x38)] public float Duration;
        [RTTI.Member(5, 0x40)] public String TabID;
        [RTTI.Member(6, 0x48)] public String PreviousTabID;
    }

    [RTTI.Serializable(0xFB725BA6777F8696, GameType.DS)]
    public class TelemetryMenuScreen : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String menu_screen;
        [RTTI.Member(3, 0x28)] public String referrer_menu;
        [RTTI.Member(4, 0x30)] public String referrer;
    }

    [RTTI.Serializable(0xBD0835F0BE834963, GameType.DS)]
    public class TelemetryModificationItemApplied : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID AppliedToItemUUID;
        [RTTI.Member(11, 0x60)] public GGUUID ModificationItemUUID;
        [RTTI.Member(12, 0x70)] public String PrimaryStat;
        [RTTI.Member(13, 0x78)] public String SecondaryStat;
        [RTTI.Member(14, 0x80)] public String TertiaryStat;
        [RTTI.Member(15, 0x88)] public bool Removed;
        [RTTI.Member(16, 0x89)] public bool ReplacedExisting;
    }

    [RTTI.Serializable(0xFEBF64235CFF719C, GameType.DS)]
    public class TelemetryNetworkStats : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String mac_address;
        [RTTI.Member(11, 0x58)] public String router_manufacturer;
        [RTTI.Member(12, 0x60)] public String router_model_name;
        [RTTI.Member(13, 0x68)] public String router_model_number;
        [RTTI.Member(14, 0x70)] public uint server_ip;
        [RTTI.Member(15, 0x74)] public int nat_type;
        [RTTI.Member(16, 0x78)] public bool wifi;
        [RTTI.Member(17, 0x7C)] public int wifi_percentage;
        [RTTI.Member(18, 0x80)] public int wifi_security;
        [RTTI.Member(19, 0x84)] public int upstream_bandwith;
        [RTTI.Member(20, 0x88)] public int downstream_bandwith;
        [RTTI.Member(21, 0x8C)] public int mtu;
        [RTTI.Member(22, 0x90)] public int rtt;
        [RTTI.Member(23, 0x94)] public int reliable_messages_out;
        [RTTI.Member(24, 0x98)] public int unreliable_messages_out;
        [RTTI.Member(25, 0x9C)] public int messages_in;
        [RTTI.Member(26, 0xA0)] public int reliable_bytes_out;
        [RTTI.Member(27, 0xA4)] public int unreliable_bytes_out;
        [RTTI.Member(28, 0xA8)] public int bytes_in;
        [RTTI.Member(29, 0xAC)] public int upd_packets_out;
        [RTTI.Member(30, 0xB0)] public int upd_packets_in;
        [RTTI.Member(31, 0xB4)] public int udp_bytes_out;
        [RTTI.Member(32, 0xB8)] public int udp_bytes_in;
        [RTTI.Member(33, 0xBC)] public int udp_retransmits;
        [RTTI.Member(34, 0xC0)] public int udp_reliable_packets_out;
        [RTTI.Member(35, 0xC4)] public int udp_reliable_bytes_out;
        [RTTI.Member(36, 0xC8)] public float used_buffer_ratio;
        [RTTI.Member(37, 0xCC)] public float server_buffer_ratio;
        [RTTI.Member(38, 0xD0)] public float server_resend_ratio;
    }

    [RTTI.Serializable(0xBE98A3C22A23B585, GameType.DS)]
    public class TelemetryNpPlus : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public bool IsEligible;
    }

    [RTTI.Serializable(0x3B81ECA24B27571B, GameType.DS)]
    public class TelemetryObjectPlaced : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID EntityID;
        [RTTI.Member(11, 0x60)] public String Object;
        [RTTI.Member(12, 0x70)] public Vec3 ObjectPosition;
    }

    [RTTI.Serializable(0xC5BAD3CB15DA4E73, GameType.DS)]
    public class TelemetryPerkGained : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID perk_uuid;
        [RTTI.Member(11, 0x60)] public int perk_cost;
        [RTTI.Member(12, 0x64)] public int perk_points_remaining;
        [RTTI.Member(13, 0x68)] public int perk_points_total_spent;
    }

    [RTTI.Serializable(0x3496CE110F2909D3, GameType.DS)]
    public class TelemetryPerkPointsGained : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public EPerkPointGainReason reason;
        [RTTI.Member(11, 0x58)] public String reason_details;
        [RTTI.Member(12, 0x60)] public int perk_points_gained;
        [RTTI.Member(13, 0x64)] public int perk_points_available;
        [RTTI.Member(14, 0x68)] public int perk_points_total_spent;
        [RTTI.Member(15, 0x70)] public Vec3 player_position;
    }

    [RTTI.Serializable(0xE71E1C20F30780E9, GameType.DS)]
    public class TelemetryPhysicsStats : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String LevelID;
        [RTTI.Member(11, 0x58)] public bool CollapseDisabled;
        [RTTI.Member(12, 0x60)] public Vec3 PlayerPosition;
        [RTTI.Member(13, 0x70)] public int PeakStepMemory;
        [RTTI.Member(14, 0x74)] public int PeakPersistentMemory;
        [RTTI.Member(15, 0x78)] public int MaxBodies;
        [RTTI.Member(17, 0x7C)] public uint32 MaxBroadPhaseNodes;
        [RTTI.Member(16, 0x80)] public int MaxActiveBodies;
        [RTTI.Member(18, 0x84)] public int MaxRagdolls;
        [RTTI.Member(19, 0x88)] public int MaxRaycastsPerUpdate;
    }

    [RTTI.Serializable(0xCD31C4F8F3034DFC, GameType.DS)]
    public class TelemetryPlayerDoubleHit : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String PSNAccount;
        [RTTI.Member(11, 0x58)] public float Angle;
        [RTTI.Member(12, 0x5C)] public float TimeDiff;
        [RTTI.Member(13, 0x60)] public float Suspicion;
    }

    [RTTI.Serializable(0xC246EF9B6A62E0DB, GameType.DS)]
    public class TelemetryPlayerJoin : TelemetryGameBase
    {
        [RTTI.Member(10, 0x58)] public String player_type;
        [RTTI.Member(11, 0x60)] public bool is_using_3d;
        [RTTI.Member(12, 0x61)] public bool is_using_remote_play;
    }

    [RTTI.Serializable(0xF26376AA5AC851C9, GameType.DS)]
    public class TelemetryPlayerJoinGame : TelemetryPlayerJoin
    {
    }

    [RTTI.Serializable(0x29792330870562AA, GameType.DS)]
    public class TelemetryPlayerJump : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public Vec3 Position;
        [RTTI.Member(11, 0x60)] public Vec3 Velocity;
        [RTTI.Member(12, 0x70)] public Vec2 InputDirection;
    }

    [RTTI.Serializable(0x54AD7AE513307871, GameType.DS)]
    public class TelemetryPlayerKilled : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID EntityID;
        [RTTI.Member(11, 0x60)] public Vec3 Position;
        [RTTI.Member(12, 0x70)] public GGUUID KillerEntityID;
        [RTTI.Member(13, 0x80)] public String KillerFaction;
        [RTTI.Member(14, 0x90)] public Vec3 KillerPosition;
        [RTTI.Member(15, 0xA0)] public GGUUID WeaponResourceID;
        [RTTI.Member(16, 0xB0)] public String ComponentName;
        [RTTI.Member(17, 0xB8)] public bool Headshot;
        [RTTI.Member(18, 0xB9)] public bool Crouched;
        [RTTI.Member(19, 0xBA)] public GGUUID QuestUUID;
        [RTTI.Member(20, 0xCA)] public GGUUID KillerSpawnSetupID;
    }

    [RTTI.Serializable(0xE7821C1B70646598, GameType.DS)]
    public class TelemetryPlayerLeave : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String level_id;
        [RTTI.Member(11, 0x58)] public int duration_secs;
        [RTTI.Member(12, 0x68)] public String mode;
        [RTTI.Member(13, 0x70)] public int player_count;
    }

    [RTTI.Serializable(0x56FD9187051814F9, GameType.DS)]
    public class TelemetryPlayerLeaveGame : TelemetryPlayerLeave
    {
    }

    [RTTI.Serializable(0xE24CAA24093B80C9, GameType.DS)]
    public class TelemetryPlayerMuted : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String TargetID;
        [RTTI.Member(11, 0x58)] public bool Muted;
    }

    [RTTI.Serializable(0x5D354B0AAB12C7C, GameType.DS)]
    public class TelemetryPlayerNearDeath : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public Vec3 Position;
        [RTTI.Member(11, 0x60)] public uint8 Health;
    }

    [RTTI.Serializable(0x40B55A0AADCE7D88, GameType.DS)]
    public class TelemetryPlayerSpawn : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID EntityID;
        [RTTI.Member(11, 0x60)] public Vec3 Position;
        [RTTI.Member(12, 0x70)] public float Heading;
        [RTTI.Member(13, 0x78)] public String Faction;
        [RTTI.Member(14, 0x80)] public Array<GGUUID> InventoryItems;
    }

    [RTTI.Serializable(0x105372C34757F1B5, GameType.DS)]
    public class TelemetryQuestProgressed : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID QuestUUID;
        [RTTI.Member(11, 0x60)] public GGUUID QuestSectionUUID;
        [RTTI.Member(12, 0x70)] public GGUUID QuestTypeUUID;
        [RTTI.Member(13, 0x80)] public String SectionType;
        [RTTI.Member(14, 0x88)] public String ProgressionType;
        [RTTI.Member(15, 0x90)] public int TimeFromQuestStart;
        [RTTI.Member(16, 0x94)] public int TimeFromGameStart;
        [RTTI.Member(17, 0x98)] public int TimeFromLastProgress;
        [RTTI.Member(18, 0x9C)] public int NumberOfCompletedSections;
        [RTTI.Member(19, 0xA0)] public int NumberOfBlockedSections;
        [RTTI.Member(20, 0xA4)] public int TotalNumberOfSections;
        [RTTI.Member(21, 0xA8)] public int AmountOfQuestsInProgress;
        [RTTI.Member(22, 0xAC)] public int AmountOfQuestsCompleted;
        [RTTI.Member(23, 0xB0)] public int AmountOfQuestsFailed;
        [RTTI.Member(24, 0xB4)] public int PlayerLevel;
    }

    [RTTI.Serializable(0x714B43889FB80846, GameType.DS)]
    public class TelemetryRoadTrackingPosition : TelemetryEntityPosition
    {
    }

    [RTTI.Serializable(0xDB64EC95E4DB9CC3, GameType.DS)]
    public class TelemetrySaveGame : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public int size;
        [RTTI.Member(3, 0x28)] public String level;
        [RTTI.Member(4, 0x30)] public WorldPosition position;
    }

    [RTTI.Serializable(0xFF2FCEDEA92CE7CE, GameType.DS)]
    public class TelemetrySequenceNetwork : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID id;
        [RTTI.Member(11, 0x60)] public GGUUID partner;
        [RTTI.Member(12, 0x70)] public int sequence_played_count;
        [RTTI.Member(13, 0x74)] public float sequence_network_duration;
    }

    [RTTI.Serializable(0xF19440BFA09708DA, GameType.DS)]
    public class TelemetryShopTransaction : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID ItemResourceID;
        [RTTI.Member(11, 0x60)] public GGUUID MerchantSpawnSourceID;
        [RTTI.Member(12, 0x70)] public String TransactionType;
        [RTTI.Member(13, 0x78)] public int Amount;
        [RTTI.Member(14, 0x7C)] public int Price;
    }

    [RTTI.Serializable(0xC5EFC572DC41A31, GameType.DS)]
    public class TelemetryStartupStats : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public bool started_ok;
        [RTTI.Member(3, 0x28)] public double time_app_init;
        [RTTI.Member(4, 0x30)] public double time_conversion;
        [RTTI.Member(5, 0x38)] public double time_loading;
        [RTTI.Member(6, 0x40)] public double time_game;
        [RTTI.Member(7, 0x48)] public double time_menu;
        [RTTI.Member(8, 0x50)] public double time_system_ui;
    }

    [RTTI.Serializable(0xC07F820D72C921E, GameType.DS)]
    public class TelemetrySwitchFaction : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String OldFaction;
        [RTTI.Member(11, 0x58)] public String NewFaction;
    }

    [RTTI.Serializable(0x161F0AC5B3CEC5B, GameType.DS)]
    public class TelemetryTrophyUnlock : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public int trophy_id;
        [RTTI.Member(11, 0x54)] public int total_unlock_count;
        [RTTI.Member(12, 0x58)] public bool platinum_unlock;
    }

    [RTTI.Serializable(0x7046CBC458CF533B, GameType.DS)]
    public class TelemetryUserProfile : RTTIRefObject
    {
        [RTTI.Member(5, 0x20)] public String np_online_id;
        [RTTI.Member(6, 0x28)] public uint64 np_account_id;
        [RTTI.Member(7, 0x30)] public bool restrict_chat;
        [RTTI.Member(8, 0x31)] public bool restrict_ugm;
        [RTTI.Member(3, 0x38)] public String region;
        [RTTI.Member(4, 0x40)] public String language;
        [RTTI.Member(2, 0x48)] public String issuer_id;
    }

    [RTTI.Serializable(0x942760310C2EF13D, GameType.DS)]
    public class TelemetryVoiceChatStats : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public bool HasEnabledVoiceChat;
        [RTTI.Member(11, 0x54)] public int LocalTalkTimeMs;
        [RTTI.Member(12, 0x58)] public int LocalTimesTalked;
        [RTTI.Member(13, 0x5C)] public bool HasMutedAllPlayers;
        [RTTI.Member(14, 0x60)] public int NumPlayersMuted;
        [RTTI.Member(15, 0x64)] public int RemoteTalkTimeMs;
        [RTTI.Member(16, 0x68)] public int RemoteTimesTalked;
    }

    [RTTI.Serializable(0x5876B0F3CA509175, GameType.DS)]
    public class TelemetryWeaponFireSummary : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String entity_id;
        [RTTI.Member(11, 0x58)] public GGUUID weapon_resource_id;
        [RTTI.Member(12, 0x68)] public GGUUID ammo_resource_id;
        [RTTI.Member(13, 0x78)] public int ammo_fired;
    }

    [RTTI.Serializable(0x6D4503054B9FDB35, GameType.DS)]
    public class TelemetryWorldEncounterBase : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public GGUUID collection_id;
        [RTTI.Member(11, 0x60)] public GGUUID encounter_id;
        [RTTI.Member(12, 0x70)] public Vec3 encounter_position;
        [RTTI.Member(13, 0x80)] public Vec3 player_position;
        [RTTI.Member(14, 0x90)] public int player_level;
    }

    [RTTI.Serializable(0xFD6F247B33ADF51E, GameType.DS)]
    public class TelemetryWorldEncounterSelected : TelemetryWorldEncounterBase
    {
    }

    [RTTI.Serializable(0xCE837E0306334630, GameType.DS)]
    public class TelemetryWorldEncounterSpawned : TelemetryWorldEncounterBase
    {
    }

    [RTTI.Serializable(0xC4576B97084C1EF1, GameType.DS)]
    public class TelemetryXpGained : TelemetryGameBase
    {
        [RTTI.Member(10, 0x50)] public String xp_reason;
        [RTTI.Member(11, 0x58)] public GGUUID xp_trigger_resource_id;
        [RTTI.Member(12, 0x70)] public Vec3 position;
        [RTTI.Member(13, 0x80)] public int xp_gained_amount;
        [RTTI.Member(14, 0x84)] public int total_xp_amount;
    }

    [RTTI.Serializable(0xA8C806F365DBB578, GameType.DS)]
    public class TemplateTag : Tag
    {
    }

    [RTTI.Serializable(0x67C295E63640467, GameType.DS)]
    public class Terrain : GeometryObject
    {
        [RTTI.Member(12, 0xC0)] public Array<TerrainDataNode> TerrainDataNodes;
        [RTTI.Member(13, 0xD0)] public FRange TerrainHeightRange;
        [RTTI.Member(6, 0xD8)] public int TileCount;
        [RTTI.Member(7, 0xE0)] public IVec2 TileStart;
        [RTTI.Member(8, 0xE8)] public int TileSize;
        [RTTI.Member(9, 0xEC)] public int StartLodIndex;
        [RTTI.Member(10, 0xF0)] public float UpperBoundOffset;
        [RTTI.Member(11, 0xF4)] public float LowerBoundOffset;
        [RTTI.Member(14, 0x100)] public TerrainRenderPassSetup ShadingPassSetup;
        [RTTI.Member(15, 0x160)] public TerrainRenderPassSetup ShadowPassSetup;
        [RTTI.Member(16, 0x1C0)] public TerrainRenderPassSetup OcclusionPassSetup;
        [RTTI.Member(17, 0x220)] public TerrainRenderPassSetup DebugPassSetup;
        [RTTI.Member(18, 0x280)] public TerrainBakePassSetup RuntimeBakePassSetup;
    }

    [RTTI.Serializable(0xAB02795EA42983B2, GameType.DS)]
    public class TerrainBakePassSetup
    {
        [RTTI.Member(0, 0x0)] public TerrainBakePassSetupMaterial Indices;
        [RTTI.Member(1, 0x8)] public TerrainBakePassSetupMaterial Weights;
        [RTTI.Member(2, 0x10)] public Ref<VertexArrayResource> VertexArray;
    }

    [RTTI.Serializable(0xE49802B858EF820A, GameType.DS)]
    public class TerrainBakePassSetupMaterial
    {
        [RTTI.Member(0, 0x0)] public Ref<RenderEffectResource> RenderEffectResource;
    }

    [RTTI.Serializable(0x68F2743553CF38AC, GameType.DS)]
    public class TerrainDataNode
    {
        [RTTI.Member(0, 0x0)] public uint16 PackedData0;
        [RTTI.Member(1, 0x2)] public uint16 PackedData1;
        [RTTI.Member(2, 0x4)] public uint16 PackedData2;
    }

    [RTTI.Serializable(0x54A7C3C7A49217F3, GameType.DS)]
    public class TerrainHull : WorldNode
    {
        [RTTI.Member(5, 0x90, "General")] public Array<Vec3> Vertices;
        [RTTI.Member(7, 0xA0, "General")] public RGBAColor DebugColor;
        [RTTI.Member(6, 0xB0, "General")] public Shape2DExtrusion Shape2d;
    }

    [RTTI.Serializable(0x18B7466B65AFAFAB, GameType.DS)]
    public class TerrainInteractionLayerManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xE5DEA7EC475070C, GameType.DS)]
    public class TerrainInteractionLayerParams
    {
        [RTTI.Member(0, 0x0)] public Vec4 GridSize;
        [RTTI.Member(1, 0x10)] public Vec4 UVCentralAndOffset;
        [RTTI.Member(2, 0x20)] public Vec4 DiffParam;
    }

    [RTTI.Serializable(0xAD6D594C94B96538, GameType.DS)]
    public class TerrainInteractionLayerStampInstance : WorldNode
    {
        [RTTI.Member(4, 0x60)] public EStampGeomTyoe StampType;
    }

    [RTTI.Serializable(0xCBFBB63411299DE5, GameType.DS)]
    public class TerrainMaterial : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<RenderEffectResource> MaskRenderEffect;
        [RTTI.Member(3, 0x28)] public Ref<RenderEffectResource> TerrainRenderEffect;
        [RTTI.Member(4, 0x30)] public Ref<RenderEffectResource> BakeTerrainIDsRenderEffect;
        [RTTI.Member(5, 0x38)] public Ref<RenderEffectResource> BakeTerrainWeightsRenderEffect;
    }

    [RTTI.Serializable(0xA1AB5B01618BEF30, GameType.DS)]
    public class TerrainRenderPassLODDistanceSettings
    {
        [RTTI.Member(0, 0x0)] public float LODDistance;
        [RTTI.Member(1, 0x4)] public int MaterialLayerIndex;
    }

    [RTTI.Serializable(0x4C3D7D3F3266F8D, GameType.DS)]
    public class TerrainRenderPassMaterialLayer
    {
        [RTTI.Member(0, 0x0)] public ETerrainMaterialLODType MinimumTerrainLODType;
        [RTTI.Member(1, 0x8)] public Ref<RenderEffectResource> OriginalMaskRenderEffects;
        [RTTI.Member(2, 0x10)] public Ref<RenderEffectResource> BakedMaskRenderEffects;
        [RTTI.Member(3, 0x18)] public Ref<RenderEffectResource> RuntimeMergedMaskRenderEffects;
        [RTTI.Member(4, 0x20)] public Array<Ref<RenderEffectResource>> LodRenderEffects;
    }

    [RTTI.Serializable(0xB72203FD3E5C5DE2, GameType.DS)]
    public class TerrainRenderPassSetup
    {
        [RTTI.Member(0, 0x4)] public int VertexGridSize;
        [RTTI.Member(1, 0x8)] public DrawFlags DrawFlags;
        [RTTI.Member(2, 0xC)] public ESortOrder SortOrder;
        [RTTI.Member(3, 0x10)] public ETerrainBorderStitchingMode BorderStitchingMode;
        [RTTI.Member(4, 0x14)] public ETerrainTileCullingMode TileCullingMode;
        [RTTI.Member(6, 0x18)] public Array<TerrainRenderPassLODDistanceSettings> LODDistances;
        [RTTI.Member(5, 0x28)] public Array<TerrainRenderPassMaterialLayer> MaterialLayers;
        [RTTI.Member(7, 0x38)] public Array<float> LodDistancesSquared;
        [RTTI.Member(8, 0x48)] public Ref<VertexArrayResource> VertexArray;
        [RTTI.Member(9, 0x50)] public Array<Ref<IndexArrayResource>> IndexArrays;
    }

    [RTTI.Serializable(0x1BE9778227AB1F15, GameType.DS)]
    public class TerrainRuntimeBakeSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> CopyShader;
    }

    [RTTI.Serializable(0x3C31E4C959F31FB4, GameType.DS)]
    public class TerrainTileData : Resource
    {
        [RTTI.Member(2, 0x20)] public IVec2 GridCoordinates;
        [RTTI.Member(3, 0x28)] public int MinimumNodeSize;
        [RTTI.Member(4, 0x2C)] public ETerrainMaterialLODType MaterialLODType;
        [RTTI.Member(5, 0x30)] public int MaterialLODCount;
        [RTTI.Member(6, 0x40)] public TerrainTileMaterialData TerrainMaterialData;
        [RTTI.Member(7, 0x80)] public Ref<Texture> MaterialWeightMap;
        [RTTI.Member(8, 0x88)] public IVec4 mEcotopeCountPerTerrainMaterial;
        [RTTI.Member(9, 0x98)] public Array<uint8> mEcotopeIndicesPerTerrainMaterial;
        [RTTI.Member(18, 0xA8)] public Array<BoundingBox2> HoleBBoxes;
        [RTTI.Member(17, 0xB8)] public Ref<DataBufferResource> HoleDataBuffer;
        [RTTI.Member(13, 0xC0)] public FRange MappedHeightRange;
        [RTTI.Member(14, 0xC8)] public Array<TerrainDataNode> TileDataNodes;
        [RTTI.Member(15, 0xE0)] public BoundingBox3 BoundingBox;
        [RTTI.Member(16, 0x100)] public Ref<RenderDataStreamingHintData> StreamingHintData;
        [RTTI.Member(10, 0x110)] public Array<Ref<RenderEffectResource>> OriginalMaskRenderEffects;
        [RTTI.Member(11, 0x120)] public Array<Ref<RenderEffectResource>> BakedMaskRenderEffects;
        [RTTI.Member(12, 0x130)] public Array<Ref<RenderEffectResource>> RuntimeMergedMaskRenderEffects;
    }

    [RTTI.Serializable(0xB98CFE1786DA9378, GameType.DS)]
    public class TerrainTileGeometryObject : GeometryObject
    {
    }

    [RTTI.Serializable(0xDC38808F4645E0E4, GameType.DS)]
    public class TerrainTileMaterialData
    {
        [RTTI.Member(0, 0x0)] public String LookupDataPath;
        [RTTI.Member(1, 0x8)] public int LookupDataBlockSize;
        [RTTI.Member(2, 0x10)] public Ref<DataBufferResource> LookupValueBuffer;
        [RTTI.Member(3, 0x20)] public Vec4 LookupDataOffsets;
        [RTTI.Member(4, 0x30)] public Ref<DataBufferResource> LookupDataBuffer;
    }

    [RTTI.Serializable(0x2540B7C598B1D452, GameType.DS)]
    public class TestBoolFactAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<BooleanFact> Fact;
    }

    [RTTI.Serializable(0x9D5DF4BABB7A68FB, GameType.DS)]
    public class TestBoolPropertyAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<BoolPropertyBase> Property;
    }

    [RTTI.Serializable(0xF484C2A15AA49016, GameType.DS)]
    public class TestIntPropertyAction : ConditionalAction
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<IntPropertyBase> Property;
        [RTTI.Member(8, 0x40, "Logic")] public EComparator Comparator;
        [RTTI.Member(9, 0x44, "Logic")] public int Value;
    }

    [RTTI.Serializable(0x3C893B3973C9E190, GameType.DS)]
    public class TetheredAmmoPileComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x589579C2D0DC2C80, GameType.DS)]
    public class TetheredAmmoPileComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float TetherRadius;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<CurveResource> RoundsOverTime;
        [RTTI.Member(5, 0x30, "Logic")] public int TotalRoundsAvailable;
    }

    [RTTI.Serializable(0x7336632E32594525, GameType.DS)]
    public class TetheredAmmoPileComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF7481F9524AC084C, GameType.DS)]
    public class TextTag : VisualTag
    {
    }

    [RTTI.Serializable(0x78C69221C0C3BFD0, GameType.DS)]
    public class TextWidget : Widget
    {
    }

    [RTTI.Serializable(0x587774B3954AC917, GameType.DS)]
    public class TextureBindingWithHandle : ShaderTextureBinding
    {
        [RTTI.Member(5, 0x18)] public HwBindingHandle TextureBindingHandle;
        [RTTI.Member(6, 0x20)] public HwBindingHandle SwizzleBindingHandle;
    }

    [RTTI.Serializable(0xD85159E0D11DF656, GameType.DS)]
    public class TextureLUT : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public Array<TextureLUTEntry> Entries;
        [RTTI.Member(5, 0x30, "Settings")] public float KeyRange;
        [RTTI.Member(4, 0x38, "Settings")] public Array<RGBAColor> LookupData;
    }

    [RTTI.Serializable(0x6639770FCBD64DAE, GameType.DS)]
    public class TextureLUTEntry
    {
        [RTTI.Member(1, 0x0, "Settings")] public float Key;
        [RTTI.Member(2, 0x4, "Settings")] public float Value;
    }

    [RTTI.Serializable(0xA520F22B82BBF9A4, GameType.DS)]
    public class TextureMatrix
    {
        [RTTI.Member(0, 0x0)] public Vec2Pack Col0;
        [RTTI.Member(1, 0x8)] public Vec2Pack Col1;
        [RTTI.Member(2, 0x10)] public Vec2Pack Col2;
    }

    [RTTI.Serializable(0xA321E8C307328D2E, GameType.DS)]
    public class TextureSet : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<TextureSetEntry> Entries;
        [RTTI.Member(4, 0x30)] public ETexAddress MipMapAddressMode;
        [RTTI.Member(3, 0x38)] public Array<TextureSetTextureDesc> TextureDesc;
        [RTTI.Member(5, 0x48)] public Ref<TextureSetPreset> Preset;
    }

    [RTTI.Serializable(0xED2405F58FDC7F09, GameType.DS)]
    public class TextureSetEntry
    {
        [RTTI.Member(4, 0x0)] public EImageCompressionMethod CompressMethod;
        [RTTI.Member(5, 0x0)] public bool CreateMipMaps;
        [RTTI.Member(3, 0x0)] public ETexColorSpace ColorSpace;
        [RTTI.Member(1, 0x0)] public uint32 PackingInfo;
        [RTTI.Member(2, 0x0)] public int TextureType;
        [RTTI.Member(0, 0x8)] public Ref<Resource> Texture;
    }

    [RTTI.Serializable(0x46F0AC353457C10A, GameType.DS)]
    public class TextureSetPreset : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<TextureSetPresetPacking>> Packings;
        [RTTI.Member(3, 0x30)] public ETextureType TextureType;
        [RTTI.Member(4, 0x34)] public bool UseRoughnessRenormalizationPrefiltering;
    }

    [RTTI.Serializable(0x3DD0F885E284E41E, GameType.DS)]
    public class TextureSetPresetPacking : Resource
    {
        [RTTI.Member(2, 0x20)] public TextureSetPresetPackingChannel ChannelRed;
        [RTTI.Member(3, 0x28)] public TextureSetPresetPackingChannel ChannelGreen;
        [RTTI.Member(4, 0x30)] public TextureSetPresetPackingChannel ChannelBlue;
        [RTTI.Member(5, 0x38)] public TextureSetPresetPackingChannel ChannelAlpha;
        [RTTI.Member(6, 0x40)] public EPixelFormat PixelFormat;
        [RTTI.Member(7, 0x44)] public EImageCompressionMethod CompressionMethod;
        [RTTI.Member(8, 0x48)] public bool GammaSpace;
        [RTTI.Member(9, 0x49)] public bool CreateMipMaps;
    }

    [RTTI.Serializable(0x27E29697A4D785C, GameType.DS)]
    public class TextureSetPresetPackingChannel
    {
        [RTTI.Member(0, 0x0)] public ETextureSetType Type;
        [RTTI.Member(1, 0x4)] public ETextureSetChannel TypeChannel;
    }

    [RTTI.Serializable(0x7D742C51FC5E841C, GameType.DS)]
    public class TextureSetTextureDesc
    {
        [RTTI.Member(0, 0x0)] public ETextureSetType TextureType;
        [RTTI.Member(1, 0x8)] public String Path;
        [RTTI.Member(2, 0x10)] public bool Active;
        [RTTI.Member(3, 0x11)] public bool GammaSpace;
        [RTTI.Member(4, 0x14)] public ETextureSetStorageType StorageType;
        [RTTI.Member(5, 0x18)] public ETextureSetQualityType QualityType;
        [RTTI.Member(6, 0x1C)] public EImageCompressionMethod CompressionMethod;
        [RTTI.Member(7, 0x20)] public int Width;
        [RTTI.Member(8, 0x24)] public int Height;
        [RTTI.Member(9, 0x30)] public FRGBAColor DefaultColor;
    }

    [RTTI.Serializable(0x7E0A838CB66B65C8, GameType.DS)]
    public class TextureTag : VisualTag
    {
    }

    [RTTI.Serializable(0xBD62A797A2506E35, GameType.DS)]
    public class TextureWidget : Widget
    {
    }

    [RTTI.Serializable(0x18EA237A50653B5, GameType.DS)]
    public class Texture_2D_ReadWrite_HalfFloat
    {
    }

    [RTTI.Serializable(0x37322E994237A239, GameType.DS)]
    public class Texture_2D_ReadWrite_RGBAColorRev
    {
    }

    [RTTI.Serializable(0x31929E1BC327981A, GameType.DS)]
    public class Texture_2D_ReadWrite_UNorm16
    {
    }

    [RTTI.Serializable(0xB18084416F15584F, GameType.DS)]
    public class Texture_2D_ReadWrite_UNorm8
    {
    }

    [RTTI.Serializable(0x1FEE64C748590328, GameType.DS)]
    public class Texture_2D_ReadWrite_Vec4
    {
    }

    [RTTI.Serializable(0xD7DEB6FF30029A1E, GameType.DS)]
    public class Texture_2D_ReadWrite_float
    {
    }

    [RTTI.Serializable(0x5938089775F53690, GameType.DS)]
    public class Texture_2D_ReadWrite_uint16
    {
    }

    [RTTI.Serializable(0x33035529F7B828E, GameType.DS)]
    public class Texture_2D_ReadWrite_uint8
    {
    }

    [RTTI.Serializable(0xC2001CD77C11F7CA, GameType.DS)]
    public class Texture_2D_Read_HalfFloat
    {
    }

    [RTTI.Serializable(0x392FDF3DE7BD3B35, GameType.DS)]
    public class Texture_2D_Read_RGBAColorRev
    {
    }

    [RTTI.Serializable(0x3810E493F6118375, GameType.DS)]
    public class Texture_2D_Read_UNorm16
    {
    }

    [RTTI.Serializable(0xFB01769427A4A5F7, GameType.DS)]
    public class Texture_2D_Read_UNorm8
    {
    }

    [RTTI.Serializable(0xBF2CE506F5383A66, GameType.DS)]
    public class Texture_2D_Read_Vec4
    {
    }

    [RTTI.Serializable(0xEA472BC327364179, GameType.DS)]
    public class Texture_2D_Read_float
    {
    }

    [RTTI.Serializable(0x44FB9A072BB046DE, GameType.DS)]
    public class Texture_2D_Read_uint16
    {
    }

    [RTTI.Serializable(0xE92A46F4FE82D19C, GameType.DS)]
    public class Texture_2D_Read_uint8
    {
    }

    [RTTI.Serializable(0xAA90C22A199DFA6B, GameType.DS)]
    public class ThirdPersonPlayerCameraComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5D57A53771DB2DE1, GameType.DS)]
    public class ThirdPersonPlayerCameraComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Input")] public float InputZeroDelay;
        [RTTI.Member(4, 0x28, "Input")] public Ref<CurveResource> LookDampingCurveAfterBlock;
        [RTTI.Member(5, 0x30, "Input")] public int LookInputBuffer;
        [RTTI.Member(6, 0x38, "Input")] public Ref<CurveResource> LookInputDeltaToVelocity;
        [RTTI.Member(7, 0x40, "Input")] public Ref<CurveResource> LookSensitivityToHeadingScaler;
        [RTTI.Member(8, 0x48, "Input")] public Ref<CurveResource> LookSensitivityToPitchScaler;
    }

    [RTTI.Serializable(0x9020131CD15669FF, GameType.DS)]
    public class ThirdPersonPlayerCameraComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB21BDB0CBB66AB0A, GameType.DS)]
    public class ThresholdBasedContextualEmotion : ContextualEmotion
    {
        [RTTI.Member(10, 0x68, "Logic")] public float Threshold;
        [RTTI.Member(11, 0x70, "Logic")] public Ref<GraphProgramResource> StartGraph;
        [RTTI.Member(12, 0x78, "Logic")] public Ref<GraphProgramResource> StopGraph;
    }

    [RTTI.Serializable(0xD14FC3716DDECEEB, GameType.DS)]
    public class Throwable : Entity
    {
    }

    [RTTI.Serializable(0xE13628AEC9E45550, GameType.DS)]
    public class ThrowableMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0xED7EF9BE4CE89F6F, GameType.DS)]
    public class ThrowableMoverResource : PhysicsMoverResource
    {
        [RTTI.Member(17, 0x60, "Logic")] public bool AlignToPath;
        [RTTI.Member(18, 0x70, "Logic")] public Vec3 ForwardOverride;
        [RTTI.Member(19, 0x80, "Logic")] public Vec3 InitialSpin;
        [RTTI.Member(20, 0x90, "Logic")] public Vec3 RandomInitialSpin;
        [RTTI.Member(21, 0xA0, "Logic")] public float ApproximateCollisionRadius;
        [RTTI.Member(22, 0xB0, "Logic")] public Vec3 RandomConstantSpin;
        [RTTI.Member(23, 0xC0, "Logic")] public bool UseSimpleBallisticPhysics;
        [RTTI.Member(24, 0xC1, "Logic")] public bool ReportWaterImpactAsContactPoint;
        [RTTI.Member(25, 0xC4, "Logic")] public float GravityFactorPostContact;
        [RTTI.Member(26, 0xC8, "Logic")] public bool ShouldPierceThroughContacts;
        [RTTI.Member(28, 0xC9, "Homing")] public bool DynamicHoming;
        [RTTI.Member(29, 0xCC, "Homing")] public float DynamicHomingActivationTime;
        [RTTI.Member(30, 0xD0, "Homing")] public bool StaticHoming;
        [RTTI.Member(31, 0xD4, "Homing")] public float MaxHomingRotationSpeed;
        [RTTI.Member(32, 0xD8, "Homing")] public float VelocityHomingBarrier;
        [RTTI.Member(33, 0xDC, "Homing")] public float HomingAimOffset;
        [RTTI.Member(34, 0xE0, "Homing")] public float HomingVerticalAimOffset;
        [RTTI.Member(35, 0xE4, "Homing")] public bool CanBecomeDumb;
    }

    [RTTI.Serializable(0xC4B57722DCF9C372, GameType.DS)]
    public class ThrowableRep : EntityRep
    {
    }

    [RTTI.Serializable(0xE7C883C962756581, GameType.DS)]
    public class ThrowableResource : EntityResource
    {
        [RTTI.Member(70, 0x100, "VisualEffects")] public Ref<EffectComponentResource> TrailEffectComponent;
        [RTTI.Member(71, 0x108, "VisualEffects")] public bool RemoveTrailOnDestroy;
        [RTTI.Member(32, 0x110, "AI")] public Ref<AIAuralStimulusResource> BounceSoundStimulus;
        [RTTI.Member(33, 0x118, "AI")] public Ref<AIHapticStimulusResource> ContactHapticStimulus;
        [RTTI.Member(31, 0x120, "AI")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(34, 0x128, "AI")] public Ref<AIProjectileInfoMessageResource> ThrowableOriginInfoMessage;
        [RTTI.Member(35, 0x130, "AI")] public Ref<AIProjectileImpactMessageResource> ProjectileBounceMessage;
        [RTTI.Member(36, 0x138, "AI")] public bool CreateHapticStimuliOnce;
        [RTTI.Member(37, 0x139, "AI")] public bool CreateBounceSoundStimuliOnce;
        [RTTI.Member(38, 0x13A, "AI")] public bool CreateWhizzByStimulus;
        [RTTI.Member(39, 0x13B, "AI")] public bool IsVisualStimulusEmitter;
        [RTTI.Member(40, 0x140, "AI")] public String IdentifiedSignalType;
        [RTTI.Member(41, 0x148, "AI")] public bool EnableDangerArea;
        [RTTI.Member(42, 0x149, "AI")] public bool IsEnemyToAll;
        [RTTI.Member(43, 0x14A, "AI")] public bool AdoptEmitterFaction;
        [RTTI.Member(44, 0x14C, "AI")] public float ReachableRadius;
        [RTTI.Member(45, 0x150, "AI")] public float PerceivedDamageRadius;
        [RTTI.Member(54, 0x154, "Logic")] public bool ExplodeWhenDead;
        [RTTI.Member(46, 0x155, "AI")] public bool EnableTrajectoryDangerArea;
        [RTTI.Member(47, 0x158, "AI")] public float TrajectoryDangerAreaRadius;
        [RTTI.Member(49, 0x160, "Logic")] public Ref<ExplosionResource> ExplosionResource;
        [RTTI.Member(50, 0x168, "Logic")] public bool ActivateOnUse;
        [RTTI.Member(51, 0x16C, "Logic")] public float LifeTime;
        [RTTI.Member(55, 0x170, "Logic")] public float LifeTimeAfterExplode;
        [RTTI.Member(52, 0x174, "Logic")] public float RemovalDistance;
        [RTTI.Member(64, 0x178, "SpinOut")] public bool Enabled;
        [RTTI.Member(65, 0x17C, "SpinOut")] public float TimeToStart;
        [RTTI.Member(66, 0x180, "SpinOut")] public float FallAcceleration;
        [RTTI.Member(67, 0x184, "SpinOut")] public float LateralAcceleration;
        [RTTI.Member(68, 0x190, "SpinOut")] public Vec3 RotationSpeed;
        [RTTI.Member(73, 0x1A0, "Representation")] public float VisualPathOffsetBlendTime;
        [RTTI.Member(74, 0x1A8, "Representation")] public Ref<SoundResource> FlySoundResource;
        [RTTI.Member(53, 0x1B0, "Logic")] public bool RequiresContactPointValidate;
        [RTTI.Member(56, 0x1B8, "Logic")] public CPtr<EntityAction> ActionWhenExplode;
        [RTTI.Member(57, 0x1C0, "Logic")] public bool ExplodeOnLastCollisionPosition;
        [RTTI.Member(58, 0x1C4, "Logic")] public float BounceSpeedLimiter;
        [RTTI.Member(59, 0x1C8, "Logic")] public bool BounceFromHumanoids;
        [RTTI.Member(60, 0x1C9, "Logic")] public bool IgnoreCollisionWithPhysicsCapsules;
        [RTTI.Member(62, 0x1CC, "AI")] public float ThreatRemovalTime;
    }

    [RTTI.Serializable(0x782CC0299F7CC137, GameType.DS)]
    public class ThrowableSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD6EF9EB5C8A9ED2B, GameType.DS)]
    public class TileBasedStreamingStrategyInstanceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3C0D150DB02D8C80, GameType.DS)]
    public class TileBasedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(7, 0x50, "Grid")] public bool HintAllTiles;
        [RTTI.Member(8, 0x54, "Grid")] public int TileBorder;
        [RTTI.Member(9, 0x58, "Grid")] public ISize GridSize;
        [RTTI.Member(10, 0x60, "Grid")] public Array<Ref<StreamingTileResource>> Tiles;
        [RTTI.Member(11, 0x70, "Grid")] public int HighLODDiameter;
        [RTTI.Member(12, 0x74, "Grid")] public int LowLODDiameter;
        [RTTI.Member(13, 0x78, "Grid")] public int SuperLowLODDiameter;
    }

    [RTTI.Serializable(0x9A066C669448C058, GameType.DS)]
    public class TimeOfDayQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public int Hour;
        [RTTI.Member(4, 0x24, "Logic")] public int Minute;
        [RTTI.Member(5, 0x28, "Logic")] public bool TriggerImmediatelyIfLater;
    }

    [RTTI.Serializable(0xA54CB0F7375EF758, GameType.DS)]
    public class TimeOfDayQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x37FBF6B883EDA9D7, GameType.DS)]
    public class TimedEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x1C0183633B65E03A, GameType.DS)]
    public class TimedEventResource : EventResource
    {
        [RTTI.Member(6, 0x28, "Event")] public int StopFrame;
    }

    [RTTI.Serializable(0x9511035A5E2D2237, GameType.DS)]
    public class TimerQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0x3F6729D8F142C67F, GameType.DS)]
    public class TimerQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xFC1DF8DD2E7E4726, GameType.DS)]
    public class TimerTag : Tag
    {
    }

    [RTTI.Serializable(0x7F6E4DA0FC81842D, GameType.DS)]
    public class TimerTagEvent : TagEvent
    {
    }

    [RTTI.Serializable(0x76D414A61512B7D, GameType.DS)]
    public class ToastMessageTag : VisualTag
    {
    }

    [RTTI.Serializable(0xED5F3D4249F5A091, GameType.DS)]
    public class ToastMessageWidget : Widget
    {
    }

    [RTTI.Serializable(0x7B05514DD78B2437, GameType.DS)]
    public class ToneMappingSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Shaders")] public Ref<ShaderResource> LuminanceComputeShader;
        [RTTI.Member(4, 0x28, "Shaders")] public Ref<ShaderResource> ExposureComputeShader;
    }

    [RTTI.Serializable(0x829DB24DC968A63, GameType.DS)]
    public class ToolCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0x151929E2AC6E758B, GameType.DS)]
    public class TrackDamageOverTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x66CCE4B5B316C9F6, GameType.DS)]
    public class TrackDamageOverTimeComponentResource : EntityComponentResource
    {
        [RTTI.Member(4, 0x20, "Logic")] public float Time;
        [RTTI.Member(3, 0x24, "Logic")] public float Damage;
        [RTTI.Member(5, 0x28, "Logic")] public CPtr<EntityAction> ExceededAction;
        [RTTI.Member(6, 0x30, "Logic")] public Array<Ref<DamageTypeResource>> IgnoredDamageTypes;
    }

    [RTTI.Serializable(0xB672D8CE1237109A, GameType.DS)]
    public class TrackableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x632AC628C2889335, GameType.DS)]
    public class TrackableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE41EED8163B9444F, GameType.DS)]
    public class TrackableComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<EntityResource> TrackEntityResource;
        [RTTI.Member(4, 0x28, "Logic")] public float DistanceBetweenTrailPoints;
        [RTTI.Member(5, 0x2C, "Logic")] public float InitialTrackLength;
        [RTTI.Member(6, 0x30, "Logic")] public float InitialTrackSpeed;
        [RTTI.Member(7, 0x34, "Logic")] public float TrackEntityViewDistance;
        [RTTI.Member(8, 0x38, "Logic")] public float TrackLifetime;
    }

    [RTTI.Serializable(0xD96B9D989D37396A, GameType.DS)]
    public class TrackingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCB5EF819C5DE93DB, GameType.DS)]
    public class TrackingComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x102168671F6C1070, GameType.DS)]
    public class TrackingPath : Route
    {
        [RTTI.Member(9, 0xB8, "Logic")] public Ref<ConditionResource> DisplayCondition;
        [RTTI.Member(10, 0xC0, "Logic")] public Ref<TrackingPathSettings> PathSettings;
        [RTTI.Member(11, 0xC8, "Logic")] public Ref<GraphProgramResource> TaggedGraphProgram;
        [RTTI.Member(12, 0xD0, "Logic")] public Array<TrackingPathSegment> TrackingPathSegments;
        [RTTI.Member(13, 0xE0, "Logic")] public WorldBoundingBox3 BoundingBox;
        [RTTI.Member(14, 0x110, "Logic")] public float PathLength;
    }

    [RTTI.Serializable(0x34BC464CFC94D295, GameType.DS)]
    public class TrackingPathNode : RouteNode
    {
        [RTTI.Member(13, 0xC0, "Logic")] public Ref<TrackingPathSettings> OverridePathSettings;
        [RTTI.Member(14, 0xC8, "Logic")] public Array<Ref<TrackingPathSpecificFootstep>> SpecificFootsteps;
        [RTTI.Member(12, 0xD8, "Logic")] public bool GeneratePath;
    }

    [RTTI.Serializable(0xF283063DF0B49C36, GameType.DS)]
    public class TrackingPathQuestTrigger : QuestTrigger
    {
        [RTTI.Member(3, 0x20, "Logic")] public GGUUID TrackingPathUUID;
        [RTTI.Member(4, 0x30, "Logic")] public float CompletionRadius;
    }

    [RTTI.Serializable(0xE1641791AB9B0746, GameType.DS)]
    public class TrackingPathQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x4A0DB639E5CBC85E, GameType.DS)]
    public class TrackingPathSegment
    {
        [RTTI.Member(0, 0x0)] public Array<WorldPosition> PositionSamples;
        [RTTI.Member(1, 0x10)] public Array<TrackingPathSegmentTrail> TrailData;
        [RTTI.Member(2, 0x20)] public WorldBoundingBox3 BoundingBox;
        [RTTI.Member(3, 0x50)] public float Length;
        [RTTI.Member(4, 0x54)] public float DistanceFromStart;
        [RTTI.Member(5, 0x58)] public bool Isconnected;
    }

    [RTTI.Serializable(0x4B83833773F57EA, GameType.DS)]
    public class TrackingPathSegmentTrail
    {
        [RTTI.Member(0, 0x0)] public Array<WorldTransform> FootstepTransforms;
    }

    [RTTI.Serializable(0xBF95C0789531AD0E, GameType.DS)]
    public class TrackingPathSettings : Resource
    {
        [RTTI.Member(7, 0x20, "Sound")] public Ref<SoundResource> TagSound;
        [RTTI.Member(8, 0x28, "Sound")] public Ref<SoundResource> UnTagSound;
        [RTTI.Member(4, 0x30, "Logic")] public Array<Ref<TrackingPathTrailBaseResource>> Trails;
        [RTTI.Member(3, 0x40, "Logic")] public float Smoothness;
        [RTTI.Member(5, 0x44, "Logic")] public float MaxViewRange;
    }

    [RTTI.Serializable(0xCB113D0BF7FEBFDE, GameType.DS)]
    public class TrackingPathSpecificFootstep : WorldNode
    {
        [RTTI.Member(5, 0x60, "Logic")] public Ref<EntityResource> FootstepResource;
        [RTTI.Member(6, 0x68, "Logic")] public bool IsShownOutsideFocus;
    }

    [RTTI.Serializable(0x9F9450C0609FF1D5, GameType.DS)]
    public class TrackingPathSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA59084D70F7FB01D, GameType.DS)]
    public class TrackingPathTrailBaseResource : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Mat44 Matrix;
        [RTTI.Member(4, 0xA0, "Logic")] public FRange DistanceBetweenFootsteps;
        [RTTI.Member(5, 0xA8, "Logic")] public FRange HorizontalRotationAngle;
        [RTTI.Member(11, 0xB0, "UpNormalBlending")] public ETrackingPathUpBlendType UpBlendingType;
        [RTTI.Member(12, 0xB4, "UpNormalBlending")] public float UpBlendingFactor;
        [RTTI.Member(6, 0xB8, "Logic")] public float StartDistanceOffset;
        [RTTI.Member(7, 0xBC, "Logic")] public bool SnapToGround;
        [RTTI.Member(8, 0xBD, "Logic")] public bool IsShownOutsideFocus;
        [RTTI.Member(9, 0xC0, "Logic")] public float OffsetForBackAndForthPatrol;
    }

    [RTTI.Serializable(0xD209E17478DB631C, GameType.DS)]
    public class TrackingPathTrailEntityResource : TrackingPathTrailBaseResource
    {
        [RTTI.Member(14, 0xD0, "Logic")] public Array<Ref<EntityResource>> FootStepResources;
        [RTTI.Member(16, 0xE0, "Shader")] public String VariableNamePathLength;
        [RTTI.Member(17, 0xE8, "Shader")] public String VariableNameDistanceFromStart;
    }

    [RTTI.Serializable(0x3DF9B76E8D5E86AE, GameType.DS)]
    public class TrackingPathTrailMeshResource : TrackingPathTrailBaseResource
    {
        [RTTI.Member(14, 0xD0, "Logic")] public Array<Ref<StaticMeshResource>> Meshes;
    }

    [RTTI.Serializable(0x77DF8760EE28A7D9, GameType.DS)]
    public class TrackingPathTrailPrefabResource : TrackingPathTrailBaseResource
    {
        [RTTI.Member(14, 0xD0, "Logic")] public Array<Ref<PrefabResource>> Prefabs;
    }

    [RTTI.Serializable(0xFD4C031462552A5, GameType.DS)]
    public class TradeItemJobInfo : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public GGUUID TradingDefinitionUUID;
        [RTTI.Member(3, 0x38)] public GGUUID ItemUUID;
        [RTTI.Member(4, 0x48)] public Ref<LocalizedTextResource> ItemName;
        [RTTI.Member(5, 0x50)] public Ref<LocalizedTextResource> ItemDescription;
        [RTTI.Member(6, 0x58)] public Ref<UITexture> ItemIcon;
        [RTTI.Member(7, 0x60)] public Array<GGUUID> TradeInItemUUIIDs;
        [RTTI.Member(8, 0x70)] public Array<Ref<LocalizedTextResource>> TradeInItemNames;
        [RTTI.Member(9, 0x80)] public Array<int> TradeInItemAmounts;
    }

    [RTTI.Serializable(0xE2F58777FE6084EF, GameType.DS)]
    public class TradeItemsQuestTrigger : QuestTrigger
    {
        [RTTI.Member(4, 0x20, "Logic")] public Array<Ref<EntityResource>> Items;
        [RTTI.Member(3, 0x30, "Logic")] public Array<GGUUID> TraderSpawnSetupUUIDs;
        [RTTI.Member(5, 0x40, "Logic")] public int Amount;
        [RTTI.Member(7, 0x44, "Logic")] public bool GiveItems;
        [RTTI.Member(6, 0x45, "Logic")] public bool MustHaveBeenSpawnedThroughGroup;
    }

    [RTTI.Serializable(0x3E00E295A4F0DCF9, GameType.DS)]
    public class TradeItemsQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xD9A2ED977AAA5973, GameType.DS)]
    public class TrapComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x85500B8ED2E83A00, GameType.DS)]
    public class TrapComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "AI")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(4, 0x28, "AI")] public Ref<AIPathObjectCategory> PathObjectCategory;
    }

    [RTTI.Serializable(0xBFCD0B39AD4D8CF7, GameType.DS)]
    public class TravelArea : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Ref<TerrainHull> Hull;
    }

    [RTTI.Serializable(0xA4D617BBD772C207, GameType.DS)]
    public class Triangle2D
    {
        [RTTI.Member(0, 0x0)] public Vec2 V0;
        [RTTI.Member(1, 0x10)] public Vec2 V1;
        [RTTI.Member(2, 0x20)] public Vec2 V2;
    }

    [RTTI.Serializable(0x8D503E481C2B5C10, GameType.DS)]
    public class TriggerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x260E26C1E2D1954A, GameType.DS)]
    public class TriggerComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public Ref<PhysicsCollisionResource> PhysicsCollisionResource;
        [RTTI.Member(3, 0x28)] public String HelperNode;
    }

    [RTTI.Serializable(0x1EE8B92080AFCCBB, GameType.DS)]
    public class TriggerComponentResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEA01DFFCD43C0A89, GameType.DS)]
    public class TriggerComponentTrigger : CollisionTrigger
    {
    }

    [RTTI.Serializable(0xF641462A91171094, GameType.DS)]
    public class TriggerExposedActionAction : EntityAction
    {
        [RTTI.Member(4, 0x28, "Logic")] public String Action;
    }

    [RTTI.Serializable(0xED68C7224F6F7E31, GameType.DS)]
    public class TrophyResource : Resource
    {
        [RTTI.Member(2, 0x20)] public int ID;
        [RTTI.Member(3, 0x28)] public Ref<EntitlementResource> Entitlement;
        [RTTI.Member(4, 0x30)] public Ref<ConditionResource> UnlockCondition;
        [RTTI.Member(5, 0x38)] public String StatApiName;
    }

    [RTTI.Serializable(0xE10F55804F049E27, GameType.DS)]
    public class TrophyResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB7A06FA01FA42E8C, GameType.DS)]
    public class TrophySystem : CoreObject
    {
    }

    [RTTI.Serializable(0x74859FCEF78689F, GameType.DS)]
    public class TrophySystemResource : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<TrophyResource>> Trophies;
        [RTTI.Member(5, 0x40, "Requirements")] public Ref<TrophyResource> EquipmentModificationTrophy;
        [RTTI.Member(6, 0x48, "Requirements")] public Ref<TrophyResource> SpecalTrophy;
    }

    [RTTI.Serializable(0xEA715C6AAA9FC6BC, GameType.DS)]
    public class TrophySystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xCE870D61B914958C, GameType.DS)]
    public class TurbineContext : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String RegionID;
        [RTTI.Member(3, 0x28)] public String NodeID;
        [RTTI.Member(4, 0x30)] public String InstanceID;
        [RTTI.Member(5, 0x38)] public int GameID;
        [RTTI.Member(6, 0x40)] public String EncryptionKey;
        [RTTI.Member(7, 0x48)] public String ServerIP;
        [RTTI.Member(8, 0x50)] public int ServerPort;
    }

    [RTTI.Serializable(0x8EAEDD40CB4CD8AE, GameType.DS)]
    public class TwoJointIkBendConfig
    {
        [RTTI.Member(0, 0x0, true)] public String EndJoint;
        [RTTI.Member(1, 0x10)] public Mat44 BaseBindMatrix;
        [RTTI.Member(2, 0x50)] public Vec3 FixedVtx0;
        [RTTI.Member(3, 0x60)] public Vec3 FixedVtx1;
        [RTTI.Member(4, 0x70)] public Vec3 FixedVtx2;
        [RTTI.Member(5, 0x80)] public Vec3 FixedVtx3;
        [RTTI.Member(6, 0x90)] public int16 JointIdx0;
        [RTTI.Member(7, 0x92)] public int16 JointIdx1;
        [RTTI.Member(8, 0x94)] public int16 JointIdx2;
        [RTTI.Member(9, 0x98)] public float RelativeUpperExtent;
        [RTTI.Member(10, 0x9C)] public float LowerBendRatio;
        [RTTI.Member(11, 0xA0)] public float MotionDamping;
        [RTTI.Member(12, 0xA4)] public float Stiffness;
    }

    [RTTI.Serializable(0x10479B544210052C, GameType.DS)]
    public class Typeface : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public Array<Ref<TypefaceStyle>> Styles;
        [RTTI.Member(4, 0x30, "General")] public float Tracking;
        [RTTI.Member(5, 0x34, "General")] public float TrackingCJK;
    }

    [RTTI.Serializable(0xA97DB8552D3C3EB8, GameType.DS)]
    public class TypefaceStyle : Resource
    {
        [RTTI.Member(9, 0x20, "Shadow")] public Vec2 Offset;
        [RTTI.Member(6, 0x30, "General")] public FRGBAColor General_Color;
        [RTTI.Member(10, 0x40, "Shadow")] public FRGBAColor Shadow_Color;
        [RTTI.Member(4, 0x50, "General")] public Ref<FontResource> Font;
        [RTTI.Member(3, 0x58, "General")] public String StyleName;
        [RTTI.Member(5, 0x60, "General")] public float FontSize;
        [RTTI.Member(11, 0x64, "Shadow")] public float BlurSize;
        [RTTI.Member(12, 0x68, "Shadow")] public float Strength;
        [RTTI.Member(7, 0x6C, "General")] public float GlyphStrength;
    }

    [RTTI.Serializable(0x9DEF0098340113B7, GameType.DS)]
    public class UIDataBinding : RTTIObject
    {
    }

    [RTTI.Serializable(0x1303AE560875873A, GameType.DS)]
    public class UIEffect : RTTIObject
    {
    }

    [RTTI.Serializable(0xB08D62AB07ED7A96, GameType.DS)]
    public class UIEffectResource : Resource
    {
        [RTTI.Member(3, 0x20, "Shader")] public Ref<RenderEffectResource> RenderEffectResource;
        [RTTI.Member(4, 0x28, "Shader")] public RGBAColor Color;
        [RTTI.Member(5, 0x30, "Shader")] public FRect UVRect;
        [RTTI.Member(7, 0x40, "Bindings")] public Array<UITextureBindingOverride> Textures;
        [RTTI.Member(8, 0x50, "Bindings")] public Array<ShaderVariableBinding> ShaderVariables;
    }

    [RTTI.Serializable(0x83377D87079C8752, GameType.DS)]
    public class UIMarkerFilter : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(3, 0x28)] public Ref<UITexture> Icon;
    }

    [RTTI.Serializable(0xF022152F68D1888D, GameType.DS)]
    public class UIMarkerStackGroupType : Resource
    {
        [RTTI.Member(4, 0x20)] public Ref<HUDLogicGroupResource> HUDLogicGroup;
        [RTTI.Member(3, 0x28)] public int HUDHelperSortPosition;
        [RTTI.Member(2, 0x2C)] public int StackPriority;
    }

    [RTTI.Serializable(0x9B3E1D173CADE0A0, GameType.DS)]
    public class UIMarkerTag : Resource
    {
    }

    [RTTI.Serializable(0xCD294018F2E7822B, GameType.DS)]
    public class UITextureBindingOverride
    {
        [RTTI.Member(0, 0x0)] public String TextureName;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> Texture;
    }

    [RTTI.Serializable(0xEA380513EA7FC6AF, GameType.DS)]
    public class UNorm16
    {
        [RTTI.Member(0, 0x0)] public uint16 Value;
    }

    [RTTI.Serializable(0x8007BBF3B4078DAE, GameType.DS)]
    public class UNorm8
    {
        [RTTI.Member(0, 0x0)] public uint8 Value;
    }

    [RTTI.Serializable(0xD0D2E9791FF76933, GameType.DS)]
    public class UTFToolsGroup
    {
    }

    [RTTI.Serializable(0xF28B0A48BB5A068E, GameType.DS)]
    public class UTFToolsGroupSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFE1D4EB84DBDAD98, GameType.DS)]
    public class UpdateClanRequest : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Description;
    }

    [RTTI.Serializable(0xF0DC14C8DC72CA7E, GameType.DS)]
    public class UpgradeCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0xD7AD94A9939B83A3, GameType.DS)]
    public class UpgradeRecipe : CraftingRecipe
    {
        [RTTI.Member(9, 0x58, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(10, 0x60, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<LocalizedTextResource> DisplayDescription;
        [RTTI.Member(12, 0x70, "Logic")] public Ref<GraphProgramResource> UpgradeGraphProgram;
    }

    [RTTI.Serializable(0x39A22D5EB955C1D, GameType.DS)]
    public class UseLocation : CoreObject
    {
        [RTTI.Member(4, 0x60, "Private", true)] public CPtr<UseLocationResource> Resource;
        [RTTI.Member(3, 0x68, "Private", true)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x40BFDF32577A2355, GameType.DS)]
    public class UseLocationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDB36AEE88E1D5E0C, GameType.DS)]
    public class UseLocationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool IgnoreOwnership;
        [RTTI.Member(4, 0x21, "Logic")] public bool DisableAfterUse;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(6, 0x30, "Logic")] public String HelperName;
        [RTTI.Member(7, 0x38, "Logic")] public Array<Ref<UseLocationCondition>> UseLocationConditions;
        [RTTI.Member(8, 0x48, "Logic")] public CPtr<EntityAction> UseAction;
        [RTTI.Member(9, 0x50, "Logic")] public CPtr<EntityAction> UseActionOnUser;
        [RTTI.Member(10, 0x58, "Logic")] public CPtr<EntityAction> OnClaimedAction;
        [RTTI.Member(11, 0x60, "Logic")] public CPtr<EntityAction> OnClaimedActionOnUser;
        [RTTI.Member(12, 0x68, "Logic")] public CPtr<EntityAction> OnReleaseClaimAction;
    }

    [RTTI.Serializable(0xB1353BE59BC45B42, GameType.DS)]
    public class UseLocationCondition : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<LocalizedTextResource> FailMessage;
    }

    [RTTI.Serializable(0xEB8007394B490C64, GameType.DS)]
    public class UseLocationConditionCanPickUpExclusiveWieldItems : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x7C825DF80926D16D, GameType.DS)]
    public class UseLocationConditionFitsInInventory : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(4, 0x30)] public int Amount;
    }

    [RTTI.Serializable(0xAE4C2835F51BBFD2, GameType.DS)]
    public class UseLocationConditionHasBoolProperty : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public Ref<BoolPropertyBase> PropertyLink;
        [RTTI.Member(4, 0x30)] public bool Value;
    }

    [RTTI.Serializable(0xCED2AD400544D673, GameType.DS)]
    public class UseLocationConditionHasBooleanFact : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public Ref<BooleanFact> Fact;
        [RTTI.Member(4, 0x30)] public bool Value;
    }

    [RTTI.Serializable(0xCE0AC526E88010F6, GameType.DS)]
    public class UseLocationConditionHasInventoryItem : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public UUIDRef<EntityResource> Resource;
    }

    [RTTI.Serializable(0xD9E97418EEC2FF43, GameType.DS)]
    public class UseLocationConditionInventoryEmpty : UseLocationCondition
    {
        [RTTI.Member(4, 0x28, "Logic")] public bool Empty;
    }

    [RTTI.Serializable(0x810BFD02C0760158, GameType.DS)]
    public class UseLocationConditionIsAi : UseLocationCondition
    {
    }

    [RTTI.Serializable(0xB69D1648BBA875E9, GameType.DS)]
    public class UseLocationConditionIsAttachedToAnnotationWithTag : UseLocationCondition
    {
        [RTTI.Member(4, 0x28, "Logic")] public String Tag;
        [RTTI.Member(5, 0x30, "Logic")] public bool UsableEntityMustBeAnnotationOwner;
    }

    [RTTI.Serializable(0xCC024E5214E76F0C, GameType.DS)]
    public class UseLocationConditionIsEnemy : UseLocationCondition
    {
    }

    [RTTI.Serializable(0xEA17E4E1A1319C14, GameType.DS)]
    public class UseLocationConditionIsEntityReachable : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x46182D1569955778, GameType.DS)]
    public class UseLocationConditionIsEntityVisible : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x4A12DDE42BEA9A2, GameType.DS)]
    public class UseLocationConditionIsHumanoid : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x2F9C705A62FB180F, GameType.DS)]
    public class UseLocationConditionIsInstigator : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x26D40B9A04F8EA34, GameType.DS)]
    public class UseLocationConditionIsLookingAtLocation : UseLocationCondition
    {
        [RTTI.Member(3, 0x30)] public Vec3 LookAtPoint;
        [RTTI.Member(4, 0x40)] public float LookAtAngle;
    }

    [RTTI.Serializable(0x9FD0ED08D321CE23, GameType.DS)]
    public class UseLocationConditionIsPlayer : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x9EE5451E22A66C93, GameType.DS)]
    public class UseLocationConditionIsSpecifiedEntity : UseLocationCondition
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0x5C6474DA4CBA9E8, GameType.DS)]
    public class UseLocationConditionSet : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public Array<Ref<UseLocationCondition>> Conditions;
    }

    [RTTI.Serializable(0x6AF69CF6D2D2780D, GameType.DS)]
    public class UseLocationConditionUserHasBoolProperty : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public Ref<BoolPropertyBase> PropertyLink;
        [RTTI.Member(4, 0x30)] public bool Value;
    }

    [RTTI.Serializable(0x9D5AE7250F6F2CC, GameType.DS)]
    public class UseLocationConditionUserHasBooleanFact : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public Ref<BooleanFact> Fact;
        [RTTI.Member(4, 0x30)] public bool Value;
    }

    [RTTI.Serializable(0x266E542F2CC5CCFA, GameType.DS)]
    public class UseLocationConditionUserHasEnumFact : UseLocationCondition
    {
        [RTTI.Member(3, 0x28)] public Ref<EnumFact> Fact;
        [RTTI.Member(4, 0x30)] public Array<Ref<EnumFactEntry>> Values;
    }

    [RTTI.Serializable(0x8322F56D7B6985F1, GameType.DS)]
    public class UseLocationGame : UseLocation
    {
    }

    [RTTI.Serializable(0xCC5CD841FA426D8E, GameType.DS)]
    public class UseLocationGraphCondition : UseLocationCondition
    {
        [RTTI.Member(4, 0x28, "Logic")] public Ref<GraphProgramResource> Condition;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<OverrideGraphProgramResource> OverrideCondition;
    }

    [RTTI.Serializable(0xA573398FFB9F9C3D, GameType.DS)]
    public class UseLocationPriority : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public int Priority;
        [RTTI.Member(4, 0x24, "Logic")] public bool Exclusive;
    }

    [RTTI.Serializable(0x6B987D148EE8CDF1, GameType.DS)]
    public class UseLocationPromptUIDataBinding : UIDataBinding
    {
        [RTTI.Member(0, 0x8)] public CPtr<LocalizedTextResource> PromptMessage;
        [RTTI.Member(1, 0x10)] public CPtr<LocalizedTextResource> DisplayName;
    }

    [RTTI.Serializable(0x8C5D9AD11E6F4800, GameType.DS)]
    public class UseLocationResource : Resource
    {
        [RTTI.Member(12, 0x20, "Logic")] public BoundingBox3 Bounds;
        [RTTI.Member(11, 0x40, "Logic")] public Ref<UseLocationPriority> UsePriority;
        [RTTI.Member(3, 0x48, "General")] public bool IsUsableByPlayer;
        [RTTI.Member(4, 0x49, "General")] public bool IsUsableByAI;
        [RTTI.Member(5, 0x50, "General")] public Array<Ref<UseLocationCondition>> Conditions;
        [RTTI.Member(6, 0x60, "General")] public bool AutoUsePlayer;
        [RTTI.Member(7, 0x61, "General")] public bool AutoUseAi;
        [RTTI.Member(13, 0x62, "Logic")] public EUseLocationSelectionSortType SelectionSortType;
        [RTTI.Member(14, 0x64, "Logic")] public float UseTime;
        [RTTI.Member(15, 0x68, "Logic")] public bool IsUsableWhenInvisible;
        [RTTI.Member(16, 0x6C, "Logic")] public float MaxUseAngle;
        [RTTI.Member(17, 0x74, "Logic")] public FRange MaxHeightDifference;
        [RTTI.Member(18, 0x7C, "Logic")] public bool ShowInHud;
        [RTTI.Member(8, 0x80, "General")] public Ref<Texture> ActionIconTexture;
        [RTTI.Member(9, 0x88, "General")] public Ref<LocalizedTextResource> DisplayText;
        [RTTI.Member(19, 0x90, "Logic")] public bool WalkToUseLocation;
        [RTTI.Member(20, 0x94, "Logic")] public float MinWalkToUseLocationSpeed;
    }

    [RTTI.Serializable(0x66633BF713915FAC, GameType.DS)]
    public class UseLocationResourceGame : UseLocationResource
    {
        [RTTI.Member(24, 0xA0, "Logic")] public bool IsSpherical;
        [RTTI.Member(25, 0xA1, "Logic")] public bool NeedsToBeInFrontOfPlayer;
        [RTTI.Member(26, 0xA2, "Logic")] public bool NeedsLineOfSight;
        [RTTI.Member(27, 0xA3, "Logic")] public bool InterruptUseOnDamage;
        [RTTI.Member(22, 0xA4, "General")] public EUseLocationType Type;
        [RTTI.Member(28, 0xA8, "Logic")] public bool MustDismount;
        [RTTI.Member(29, 0xA9, "Logic")] public bool MustStowWeapons;
        [RTTI.Member(30, 0xAA, "Logic")] public bool WhenStowingDoItImmediate;
        [RTTI.Member(31, 0xAC, "Logic")] public EStance UseStance;
        [RTTI.Member(32, 0xB0, "Logic")] public EDeviceFunction UseFunction;
        [RTTI.Member(34, 0xB8, "Representation")] public Ref<SoundResource> UseDoneSound;
        [RTTI.Member(35, 0xC0, "Representation")] public bool ShowBusyIcon;
    }

    [RTTI.Serializable(0x9124123EE252F8CE, GameType.DS)]
    public class UseLocationSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5F80C5FDC88FF514, GameType.DS)]
    public class UseSpeedModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x70FCB12C9A28F91E, GameType.DS)]
    public class UseSpeedModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float UseSpeedModifier;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<UseLocationResource>> UseLocations;
    }

    [RTTI.Serializable(0x1C57B9E404358DD1, GameType.DS)]
    public class UserComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7488CEACA3081074, GameType.DS)]
    public class UserComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public BoundingBox3 UseBox;
    }

    [RTTI.Serializable(0x56551A3C8272880E, GameType.DS)]
    public class ValueStatDisplayEntry : StatDisplayEntry
    {
        [RTTI.Member(7, 0x30, "General")] public int StatNumberValue;
    }

    [RTTI.Serializable(0xAD4E3EF9881F2317, GameType.DS)]
    public class VantageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB16191EF12048BC4, GameType.DS)]
    public class VantageComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x92ABEE0B309A70E3, GameType.DS)]
    public class VantageComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<Texture> VantageTextureOverride;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<WorldNode> VantagePointOfInterest;
        [RTTI.Member(6, 0x40, "Logic")] public Vec3 VantageOffset;
    }

    [RTTI.Serializable(0xEA6F8052AFAC9851, GameType.DS)]
    public class VariableActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0x2A41989DFCE04C66, GameType.DS)]
    public class VariableActorResource : EntityActorResource
    {
        [RTTI.Member(20, 0x60, "Logic")] public Ref<SequenceEntityVariable> EntityVariable;
    }

    [RTTI.Serializable(0xB57292DB90FA185F, GameType.DS)]
    public class VariableBindingWithHandle : ShaderVariableBinding
    {
        [RTTI.Member(8, 0x30)] public HwBindingHandle VarBindingHandle;
    }

    [RTTI.Serializable(0x7657BD116F64443A, GameType.DS)]
    public class VariableLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xAE7196F4C2ABB3D1, GameType.DS)]
    public class VariableLocatorResource : LocatorResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SequenceLocatorVariable> LocatorVariable;
    }

    [RTTI.Serializable(0xAD2A14EC167879C4, GameType.DS)]
    public class VaultDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x35C8A7B4183D794D, GameType.DS)]
    public class VaultDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(17, 0x20, "Animation")] public Ref<MorphemeAnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(18, 0x28, "Animation", true)] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(19, 0x30, "Animation")] public Array<Ref<HumanoidVaultTransition>> Transitions;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<VaultSurfaceDetectionSettings> WalkJogVaultSurfaceDetectionSettings;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<VaultSurfaceDetectionSettings> SprintVaultSurfaceDetectionSettings;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<VaultSurfaceDetectionSettings> CrouchedVaultSurfaceDetectionSettings;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<VaultSurfaceDetectionSettings> SwimmingVaultSurfaceDetectionSettings;
        [RTTI.Member(12, 0x60, "Logic")] public Ref<BooleanFact> DisallowVaultableFact;
        [RTTI.Member(13, 0x68, "Logic")] public bool AllowVaultingOverDeadControlledEntities;
        [RTTI.Member(7, 0x6C, "Logic", true)] public float MaximumVaultOverDistanceJog;
        [RTTI.Member(8, 0x70, "Logic", true)] public float MaximumVaultOverDistanceSprint;
        [RTTI.Member(15, 0x78, "Logic")] public Array<Ref<MaterialTypeResource>> DisallowMaterials;
        [RTTI.Member(9, 0x88, "Logic", true)] public bool HasVerticalObstacleTransitions;
        [RTTI.Member(10, 0x89, "Logic", true)] public bool HasHorizontalObstacleTransitions;
        [RTTI.Member(11, 0x8A, "Logic", true)] public bool HasParkourableObstacleTransitions;
        [RTTI.Member(14, 0x8B, "Logic")] public bool AllowChainedVaults;
    }

    [RTTI.Serializable(0x71C67EAC94D83DFD, GameType.DS)]
    public class VaultSurfaceDetectionSettings : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float VerticalCollisionDetectionRadius;
        [RTTI.Member(4, 0x24, "Logic")] public float HorizontalCollisionDetectionRadius;
        [RTTI.Member(5, 0x28, "Logic")] public float CollisionAboveDetectionRadius;
        [RTTI.Member(6, 0x2C, "Logic")] public float MaxDifferenceWithInitialContact;
        [RTTI.Member(7, 0x30, "Logic")] public FRange CollisionDetectionHeightRange;
        [RTTI.Member(8, 0x38, "Logic")] public float VerticalCornerCollisionRadius;
        [RTTI.Member(9, 0x3C, "Logic")] public float VerticalCornerCollisionOffset;
        [RTTI.Member(10, 0x40, "Logic")] public float HorizontalCornerCollisionRadius;
        [RTTI.Member(11, 0x44, "Logic")] public float HorizontalCornerCollisionOffset;
        [RTTI.Member(12, 0x48, "Logic")] public Ref<CurveResource> VerticalCollisionCheckDistance;
        [RTTI.Member(13, 0x50, "Logic")] public Ref<CurveResource> HorizontalCollisionCheckDistance;
        [RTTI.Member(14, 0x58, "Logic")] public Ref<CurveResource> VaultOffCollisionCheckDistance;
        [RTTI.Member(15, 0x60, "Logic")] public float LandingCollisionDetectionRadius;
        [RTTI.Member(16, 0x68, "Logic")] public Ref<CurveResource> LandingFloorCheckForwardDistanceCurve;
        [RTTI.Member(17, 0x70, "Logic")] public float MinFloorHeightDifference;
    }

    [RTTI.Serializable(0x6B85BFAEC422A57E, GameType.DS)]
    public class Vec2Pack
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
    }

    [RTTI.Serializable(0xB3C6F55EB6EA365, GameType.DS)]
    public class Vec3Fact : Fact
    {
        [RTTI.Member(9, 0x30, "Logic")] public Vec3 DefaultValue;
    }

    [RTTI.Serializable(0xF4639D5A055C0365, GameType.DS)]
    public class Vec3FactValue : FactValueBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<Vec3Fact> TypedFact;
        [RTTI.Member(4, 0x30, "Logic")] public Vec3 TypedValue;
    }

    [RTTI.Serializable(0x96958ADF649DC40C, GameType.DS)]
    public class Vec3Pack
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
    }

    [RTTI.Serializable(0x2DC8551767BFE1BB, GameType.DS)]
    public class Vec3Property : Vec3PropertyBase
    {
        [RTTI.Member(11, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0xE322395C990AFBD8, GameType.DS)]
    public class Vec3PropertyBase : Vec3Fact
    {
    }

    [RTTI.Serializable(0xCA71FC6CC651EE3E, GameType.DS)]
    public class Vec3PropertyValue : PropertyValue
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<Vec3PropertyBase> Property;
        [RTTI.Member(4, 0x30, "General")] public Vec3 Value;
    }

    [RTTI.Serializable(0xAA82D9E5C7F57270, GameType.DS)]
    public class Vec4
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
        [RTTI.Member(3, 0xC)] public float W;
    }

    [RTTI.Serializable(0x938A0B7F8332D194, GameType.DS)]
    public class Vec4Pack
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
        [RTTI.Member(3, 0xC)] public float W;
    }

    [RTTI.Serializable(0x4BEB59F6BEE67994, GameType.DS)]
    public class VegetationCollisionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2326F2331A0BABB4, GameType.DS)]
    public class VegetationCollisionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String HelperNode;
        [RTTI.Member(4, 0x30, "Logic")] public Vec3 StartOffset;
        [RTTI.Member(5, 0x40, "Logic")] public Vec3 EndOffset;
        [RTTI.Member(6, 0x50, "Logic")] public float Radius;
        [RTTI.Member(7, 0x58, "Logic")] public Ref<CurveResource> RadiusByVelocityCurve;
        [RTTI.Member(8, 0x60, "Logic")] public bool AlignToEntity;
        [RTTI.Member(9, 0x61, "Logic")] public bool AttachToCamera;
        [RTTI.Member(10, 0x62, "Logic")] public bool UseHmanoidCapsule;
        [RTTI.Member(11, 0x63, "Logic")] public bool ApplyDownForce;
    }

    [RTTI.Serializable(0x13B9E3D56470A75D, GameType.DS)]
    public class VegetationCoverComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2BA4A2AF1064D9FB, GameType.DS)]
    public class VegetationCoverComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public bool DisableFootstepStimuliWhenHidden;
        [RTTI.Member(4, 0x21, "Logic")] public bool DisableBodyVisualStimuliWhenHidden;
        [RTTI.Member(5, 0x28, "Logic")] public Ref<GraphProgramResource> StealthCondition;
        [RTTI.Member(6, 0x30, "Logic")] public float EnterStealthAtmosphereRadius;
        [RTTI.Member(7, 0x34, "Logic")] public float ExitStealthAtmosphereRadius;
        [RTTI.Member(8, 0x38, "Logic")] public String HelperName;
        [RTTI.Member(9, 0x40, "Logic")] public bool ShouldAlignLineChecksWithWorld;
        [RTTI.Member(10, 0x48, "Logic")] public Array<String> LoweredVisualNodeBones;
    }

    [RTTI.Serializable(0x73D77FD5165C6FC3, GameType.DS)]
    public class VegetationCoverComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF3E9A514FFA0D278, GameType.DS)]
    public class VegetationInteractionSystem : EnvironmentInteractionSystem
    {
        [RTTI.Member(5, 0x40, "Logic")] public float InteractionHeight;
        [RTTI.Member(6, 0x44, "Logic")] public float TemporalImpactBias;
        [RTTI.Member(7, 0x48, "Logic")] public float TemporalFilterFactor;
        [RTTI.Member(8, 0x50, "Logic")] public Ref<CurveResource> RegrowthRateCurve;
        [RTTI.Member(10, 0x58, "WorldData")] public Array<Ref<WorldDataType>> WorldDataTypes;
        [RTTI.Member(3, 0x150, "Rendering")] public EnvironmentInteractionRenderSettings Rendering;
    }

    [RTTI.Serializable(0x4C564CA4C0C60EDF, GameType.DS)]
    public class VegetationInteractionSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> UpdateShader;
    }

    [RTTI.Serializable(0x5ECA5F3E3F689DE8, GameType.DS)]
    public class VehicleAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD0F492651B36BA29, GameType.DS)]
    public class VehicleAnimationEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(11, 0x38, "Logic")] public Ref<LocatorResource> PositionLocator;
        [RTTI.Member(9, 0x40, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(10, 0x48, "Logic")] public int ClipOffset;
        [RTTI.Member(12, 0x4C, "Logic")] public EVehicleType VehicleType;
        [RTTI.Member(13, 0x50, "Logic")] public int32 VehicleIdentifier;
        [RTTI.Member(14, 0x54, "Logic")] public bool TeleportAtTheStart;
    }

    [RTTI.Serializable(0xE016BE2D5CABAF3, GameType.DS)]
    public class VehicleEntity : Entity
    {
    }

    [RTTI.Serializable(0xE8C2475B85BCB08E, GameType.DS)]
    public class VehicleEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x34B0AE33F5728B26, GameType.DS)]
    public class VehicleEntityResource : EntityResource
    {
        [RTTI.Member(31, 0x100, "Wheel")] public float Radius;
        [RTTI.Member(32, 0x104, "Wheel")] public float Width;
        [RTTI.Member(33, 0x108, "Wheel")] public float Mass;
        [RTTI.Member(35, 0x10C, "Engine")] public float MaxTorque;
        [RTTI.Member(36, 0x110, "Engine")] public float MinRPM;
        [RTTI.Member(37, 0x114, "Engine")] public float OptRPM;
        [RTTI.Member(38, 0x118, "Engine")] public float MaxRPM;
        [RTTI.Member(39, 0x11C, "Engine")] public float TopSpeed;
        [RTTI.Member(40, 0x120, "Engine")] public float BurstAccelScale;
        [RTTI.Member(42, 0x124, "Suspension")] public float SuspensionLength;
        [RTTI.Member(70, 0x128, "Baggage")] public float BaggageWeightScale;
        [RTTI.Member(72, 0x12C, "Game")] public float Life;
        [RTTI.Member(73, 0x130, "Game")] public float Battery;
        [RTTI.Member(74, 0x134, "Game")] public float BatteryConsumptionSpeedByAccel;
        [RTTI.Member(75, 0x138, "Game")] public float BatteryNaturalCureSpeed;
        [RTTI.Member(76, 0x13C, "Game")] public float PenaltyTimeForDeadBattery;
        [RTTI.Member(77, 0x140, "Game")] public float BatteryBurstScale;
        [RTTI.Member(78, 0x144, "Game")] public float BatteryBaggageScale;
        [RTTI.Member(79, 0x148, "Game")] public float BatteryBaggageScaleLimit;
        [RTTI.Member(80, 0x14C, "Game")] public float DefenseRateDamageToBattery;
        [RTTI.Member(81, 0x150, "Game")] public float DefenseElectricByBattery;
        [RTTI.Member(85, 0x154, "Game")] public float PlantsSpeedScale;
        [RTTI.Member(63, 0x158, "Effect")] public float TimeBrokenToExplosion;
        [RTTI.Member(88, 0x15C, "Water")] public float WaterSpeedScaleDecel;
        [RTTI.Member(82, 0x160, "Game")] public Ref<AIVisualStimulusResource> VisualStimulusResource;
        [RTTI.Member(83, 0x168, "Game")] public Ref<AIAuralStimulusResource> AuralStimulusResource;
        [RTTI.Member(49, 0x170, "Effect")] public Ref<MaterialTypeResource> WheelMaterial;
        [RTTI.Member(50, 0x178, "Effect")] public Ref<MaterialTypeResource> WheelStuckMaterial;
        [RTTI.Member(45, 0x180, "Sound")] public Ref<MaterialTypeResource> CollideMaterial;
        [RTTI.Member(46, 0x188, "Sound")] public Ref<MaterialTypeResource> RubMaterial;
        [RTTI.Member(47, 0x190, "Sound")] public Ref<MaterialTypeResource> LandingMaterial;
        [RTTI.Member(51, 0x198, "Effect")] public Ref<MaterialTypeResource> WheelDeepWaterMaterial;
        [RTTI.Member(87, 0x1A0, "Water")] public Array<VehicleWaterSpeed> WaterSpeedScale;
        [RTTI.Member(44, 0x1B0, "Sound")] public Ref<DSVehicleSoundResource> VehicleSoundResource;
        [RTTI.Member(68, 0x1B8, "Effect")] public Ref<DSVehiclePaintResource> PaintResource;
        [RTTI.Member(56, 0x1C0, "Effect")] public Ref<EntityResource> WheelHologram;
        [RTTI.Member(57, 0x1C8, "Effect")] public Ref<BatteryColorResource> BatteryColor;
        [RTTI.Member(84, 0x1D0, "Game")] public Ref<DSVehicleCommonResource> VehicleCommonResource;
        [RTTI.Member(58, 0x1D8, "Effect")] public Ref<ArtPartsVariationResource> GoldApv;
        [RTTI.Member(59, 0x1E0, "Effect")] public Ref<ArtPartsVariationResource> SilverApv;
        [RTTI.Member(60, 0x1E8, "Effect")] public Ref<ArtPartsVariationResource> BrokenApv;
        [RTTI.Member(61, 0x1F0, "Effect")] public Ref<ArtPartsVariationResource> BrokenGoldApv;
        [RTTI.Member(62, 0x1F8, "Effect")] public Ref<ArtPartsVariationResource> BrokenSilverApv;
        [RTTI.Member(52, 0x200, "Effect")] public Ref<EffectComponentResource> SpeedEffectComponent;
        [RTTI.Member(53, 0x208, "Effect")] public Ref<EffectComponentResource> GrassEffectComponent;
        [RTTI.Member(54, 0x210, "Effect")] public Ref<EffectComponentResource> ShieldEffectComponent;
        [RTTI.Member(55, 0x218, "Effect")] public Ref<EffectComponentResource> DiveIntoWaterEffectComponent;
        [RTTI.Member(64, 0x220, "Effect")] public Array<Ref<AttachedLightsComponentResource>> AttachedLightComponents;
        [RTTI.Member(65, 0x230, "Effect")] public Array<Ref<AttachedLightsComponentResource>> BurstLightComponents;
        [RTTI.Member(66, 0x240, "Effect")] public Array<Ref<AttachedLightsComponentResource>> BurstMiddleLightComponents;
        [RTTI.Member(67, 0x250, "Effect")] public Array<Ref<AttachedLightsComponentResource>> BurstLowLightComponents;
    }

    [RTTI.Serializable(0xB769B2F52474E5BB, GameType.DS)]
    public class VehicleEntitySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x984C498EC2D04098, GameType.DS)]
    public class VehicleGameActor : DSGameActor
    {
    }

    [RTTI.Serializable(0xD6B8FD0BF1B22D75, GameType.DS)]
    public class VehicleGameActorLocator : DSGameActorLocator
    {
        [RTTI.Member(11, 0xB0, "Vehicle")] public StreamingRef<GameActorSpecificData> CustomSpecificData;
        [RTTI.Member(12, 0xB8, "Vehicle")] public Ref<DSHouseholdInfoResource> HouseHold;
        [RTTI.Member(13, 0xC0, "Vehicle")] public bool StartBatteryZero;
    }

    [RTTI.Serializable(0xA9882708C69A7326, GameType.DS)]
    public class VehicleGameActorUnit : DSGameActorUnit
    {
    }

    [RTTI.Serializable(0x15E3E7B1B959D4DF, GameType.DS)]
    public class VehicleGameActorUnitResource : DSGameActorUnitResource
    {
    }

    [RTTI.Serializable(0x67BBCFB84C9C89D4, GameType.DS)]
    public class VehicleMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0x5704BD262B6ABD90, GameType.DS)]
    public class VehicleMoverResource : PhysicsMoverResource
    {
    }

    [RTTI.Serializable(0xDA418EFB237F2D70, GameType.DS)]
    public class VehicleWaterSpeed
    {
        [RTTI.Member(0, 0x0)] public float Depth;
        [RTTI.Member(1, 0x4)] public float SpeedScale;
        [RTTI.Member(2, 0x8)] public float BatteryScale;
    }

    [RTTI.Serializable(0xB32D8C5365EF516B, GameType.DS)]
    public class VertexDeltaDeformation
    {
        [RTTI.Member(0, 0x0)] public Vec3 DeltaPos;
        [RTTI.Member(1, 0xC)] public uint8 DeltaNrmX;
        [RTTI.Member(2, 0xD)] public uint8 DeltaNrmY;
        [RTTI.Member(3, 0xE)] public uint8 DeltaNrmZ;
        [RTTI.Member(4, 0xF)] public uint8 VertexIndex;
    }

    [RTTI.Serializable(0x47C11FFCA2C84300, GameType.DS)]
    public class VertexSkin
    {
        [RTTI.Member(0, 0x0)] public int16 X;
        [RTTI.Member(1, 0x2)] public int16 Y;
        [RTTI.Member(2, 0x4)] public int16 Z;
        [RTTI.Member(3, 0x6)] public uint8 Weight1;
        [RTTI.Member(4, 0x7)] public uint8 Weight2;
        [RTTI.Member(5, 0x8)] public uint8 Weight3;
        [RTTI.Member(6, 0x9)] public uint8 Weight4;
        [RTTI.Member(7, 0xA)] public uint8 Weight5;
        [RTTI.Member(8, 0xB)] public uint8 Weight6;
        [RTTI.Member(9, 0xC)] public uint8 Weight7;
        [RTTI.Member(10, 0xD)] public CompressedUnitVector3B N;
        [RTTI.Member(11, 0x10)] public uint16 Bone0;
        [RTTI.Member(12, 0x12)] public uint16 Bone1;
        [RTTI.Member(13, 0x14)] public uint16 Bone2;
        [RTTI.Member(14, 0x16)] public uint16 Bone3;
        [RTTI.Member(15, 0x18)] public uint16 Bone4;
        [RTTI.Member(16, 0x1A)] public uint16 Bone5;
        [RTTI.Member(17, 0x1C)] public uint16 Bone6;
        [RTTI.Member(18, 0x1E)] public uint16 Bone7;
    }

    [RTTI.Serializable(0x692152594647BDB7, GameType.DS)]
    public class VertexSkinNBT
    {
        [RTTI.Member(0, 0x0)] public int16 X;
        [RTTI.Member(1, 0x2)] public int16 Y;
        [RTTI.Member(2, 0x4)] public int16 Z;
        [RTTI.Member(3, 0x6)] public uint8 Weight1;
        [RTTI.Member(4, 0x7)] public uint8 Weight2;
        [RTTI.Member(5, 0x8)] public uint8 Weight3;
        [RTTI.Member(6, 0x9)] public uint8 Weight4;
        [RTTI.Member(7, 0xA)] public uint8 Weight5;
        [RTTI.Member(8, 0xB)] public uint8 Weight6;
        [RTTI.Member(9, 0xC)] public uint8 Weight7;
        [RTTI.Member(10, 0xD)] public CompressedUnitVector3B N;
        [RTTI.Member(11, 0x10)] public uint16 Bone0;
        [RTTI.Member(12, 0x12)] public uint16 Bone1;
        [RTTI.Member(13, 0x14)] public uint16 Bone2;
        [RTTI.Member(14, 0x16)] public uint16 Bone3;
        [RTTI.Member(15, 0x18)] public uint16 Bone4;
        [RTTI.Member(16, 0x1A)] public uint16 Bone5;
        [RTTI.Member(17, 0x1C)] public uint16 Bone6;
        [RTTI.Member(18, 0x1E)] public uint16 Bone7;
        [RTTI.Member(19, 0x20)] public CompressedUnitVector3B B;
        [RTTI.Member(20, 0x23)] public CompressedUnitVector3B T;
    }

    [RTTI.Serializable(0x60B7BB0C1363B13A, GameType.DS)]
    public class VertexStreamBindingDesc
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String SemanticName;
        [RTTI.Member(2, 0x10)] public EVertexElement VertexElement;
        [RTTI.Member(3, 0x11)] public ESRTElementFormat DataFormat;
    }

    [RTTI.Serializable(0x7423E54FD9054BAE, GameType.DS)]
    public class ViewFrustumInfo
    {
        [RTTI.Member(1, 0x0, "Matrices")] public WorldTransform WorldTransform;
        [RTTI.Member(3, 0x40, "Planes")] public float Near;
        [RTTI.Member(4, 0x44, "Planes")] public float Far;
        [RTTI.Member(5, 0x48, "Planes")] public float Top;
        [RTTI.Member(6, 0x4C, "Planes")] public float Bottom;
        [RTTI.Member(7, 0x50, "Planes")] public float Left;
        [RTTI.Member(8, 0x54, "Planes")] public float Right;
        [RTTI.Member(10, 0x58, "Projection")] public EProjectionMode ProjectionMode;
    }

    [RTTI.Serializable(0x73E28B534E397A29, GameType.DS)]
    public class ViewportSetup
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float FOVMultiplier;
        [RTTI.Member(2, 0xC)] public float FPFOVMultiplier;
        [RTTI.Member(3, 0x10)] public Array<IRect> Viewports;
        [RTTI.Member(4, 0x20)] public Array<IRect> Clearports;
        [RTTI.Member(5, 0x30)] public bool LODFadingEnabled;
        [RTTI.Member(6, 0x34)] public float LODDistanceMultiplier;
        [RTTI.Member(7, 0x38)] public float TextureMipMapBias;
        [RTTI.Member(8, 0x3C)] public float LightingFOVScale;
        [RTTI.Member(9, 0x40)] public float LightingFOVBias;
        [RTTI.Member(10, 0x44)] public float MotionVectorScale;
    }

    [RTTI.Serializable(0x38AFE26F7E7FEC56, GameType.DS)]
    public class ViewportSetupsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Viewports")] public Array<ViewportSetup> ViewportSetups;
    }

    [RTTI.Serializable(0xFCDED8A81751608D, GameType.DS)]
    public class VignetteSettingsResource : Resource
    {
        [RTTI.Member(3, 0x20, "Settings")] public float InnerRadius;
        [RTTI.Member(4, 0x24, "Settings")] public float OuterRadius;
        [RTTI.Member(5, 0x28, "Settings")] public float Intensity;
        [RTTI.Member(6, 0x30, "Settings")] public FRGBAColor Color;
    }

    [RTTI.Serializable(0xB596828E88DFCDF3, GameType.DS)]
    public class VirtualRTTIAttribute : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String Description;
        [RTTI.Member(4, 0x28, "Logic")] public String AttributeName;
        [RTTI.Member(5, 0x30, "Logic")] public RTTIHandle Type;
        [RTTI.Member(6, 0x48, "Logic")] public String Group;
        [RTTI.Member(8, 0x50, "Logic")] public Ref<RTTIRefObject> DefaultObject;
        [RTTI.Member(7, 0x58, "Logic")] public String DefaultString;
    }

    [RTTI.Serializable(0x99139E060B005DB3, GameType.DS)]
    public class VirtualRTTICompound : VirtualRTTIResource
    {
        [RTTI.Member(6, 0x48, "Logic")] public Array<Ref<VirtualRTTIAttribute>> Attributes;
        [RTTI.Member(7, 0x58, "Logic")] public RTTIHandle BaseClass;
    }

    [RTTI.Serializable(0x61EEB907E90DB9CE, GameType.DS)]
    public class VirtualRTTIEnum : VirtualRTTIResource
    {
        [RTTI.Member(6, 0x48, "Logic")] public Array<Ref<VirtualRTTIEnumValue>> Values;
    }

    [RTTI.Serializable(0x7FCF2E9A46E85556, GameType.DS)]
    public class VirtualRTTIEnumValue : RTTIRefObject
    {
        [RTTI.Member(4, 0x20, "Logic")] public int Value;
        [RTTI.Member(5, 0x28, "Logic")] public String ValueName;
        [RTTI.Member(2, 0x30)] public String Description;
    }

    [RTTI.Serializable(0x7F33A9B1F93FC0E1, GameType.DS)]
    public class VirtualRTTIResource : RTTIRefObject
    {
        [RTTI.Member(2, 0x20)] public String DisplayName;
        [RTTI.Member(3, 0x28)] public FRGBColor DisplayColor;
        [RTTI.Member(4, 0x38)] public String Description;
    }

    [RTTI.Serializable(0x355E5347D83802D6, GameType.DS)]
    public class VisualTag : Tag
    {
    }

    [RTTI.Serializable(0xBECC2A215DCA0DBD, GameType.DS)]
    public class VitalStatusUIDataBinding : UIDataBinding
    {
        [RTTI.Member(0, 0x8)] public Ref<LocalizedTextResource> DisplayText;
        [RTTI.Member(1, 0x10)] public Ref<LocalizedTextResource> WeaponName;
    }

    [RTTI.Serializable(0xD2B6DD79F91E6216, GameType.DS)]
    public class VoiceComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x33B6688C1576191C, GameType.DS)]
    public class VoiceComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<VoiceSignalsResource>> Signals;
    }

    [RTTI.Serializable(0xD3CDBF5E36E44BAF, GameType.DS)]
    public class VoiceComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE676A549155DA53B, GameType.DS)]
    public class VoiceResource : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public int VoiceID;
        [RTTI.Member(6, 0x2C, "General")] public EGender Gender;
        [RTTI.Member(7, 0x30, "General")] public Ref<LocalizedTextResource> NameResource;
    }

    [RTTI.Serializable(0xF65943CE983AF14, GameType.DS)]
    public class VoiceResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4BFBDCB7D62D9C59, GameType.DS)]
    public class VoiceSignalsResource : Resource
    {
        [RTTI.Member(3, 0x20)] public Ref<VoiceResource> Voice;
        [RTTI.Member(2, 0x28)] public Array<Ref<AISignalResource>> AISignals;
    }

    [RTTI.Serializable(0xC5E8845736537FEE, GameType.DS)]
    public class VolumeLightArea : WorldNode
    {
        [RTTI.BaseClass(0x60)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(10, 0xA0, "General")] public float FadeRange;
    }

    [RTTI.Serializable(0xDF4CC1DF71D8DBD1, GameType.DS)]
    public class VolumeLightAreaManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xC5F84AF71DAD29AB, GameType.DS)]
    public class VolumeLightBufferSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> VolumeLight3DBufferInitShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> InitVolumeLightBuffersShader;
        [RTTI.Member(4, 0x30)] public Ref<ShaderResource> VolumeLightBlurShader;
        [RTTI.Member(5, 0x38)] public Ref<ShaderResource> VolumeLightBlurAndIntegrateShader;
        [RTTI.Member(6, 0x40)] public Ref<ShaderResource> GenerateVolumeLightAmountLookupShader;
        [RTTI.Member(7, 0x48)] public Ref<ShaderResource> IntegrateLightSamplingLightVolumeShader;
        [RTTI.Member(8, 0x50)] public Ref<ShaderResource> VolumeLightArea;
    }

    [RTTI.Serializable(0x739E741E51CC8391, GameType.DS)]
    public class VolumetricAnnotation : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String Identifier;
        [RTTI.Member(4, 0x30, "General")] public EVolumetricAnnotationGroup AnnotationGroup;
    }

    [RTTI.Serializable(0xE9652AAECAE827AA, GameType.DS)]
    public class VolumetricAnnotationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x806CED494C60F426, GameType.DS)]
    public class VolumetricAnnotationComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<VolumetricAnnotation>> Volumes;
    }

    [RTTI.Serializable(0xE9AC33CA8E2458AB, GameType.DS)]
    public class VoxelGeneratorSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Textures")] public Ref<Texture> LightVolumeSampleNoise1Texture;
        [RTTI.Member(4, 0x28, "Textures")] public Ref<Texture> LightVolumeSampleNoise2Texture;
        [RTTI.Member(5, 0x30, "Textures")] public Ref<Texture> LightVolumeSampleNoise3Texture;
        [RTTI.Member(7, 0x38, "Shaders")] public Ref<ShaderResource> VoxelExtractGBuffer;
        [RTTI.Member(8, 0x40, "Shaders")] public Ref<ShaderResource> VoxelExtractLitColor;
        [RTTI.Member(9, 0x48, "Shaders")] public Ref<ShaderResource> VoxelMetalEffect;
    }

    [RTTI.Serializable(0xC5154B79D8638B0, GameType.DS)]
    public class WalkAndTalkPath : Route
    {
    }

    [RTTI.Serializable(0x5A32303A0B582EF0, GameType.DS)]
    public class WalkAndTalkPathEventInstance : SubGoalPausableEventInstance
    {
    }

    [RTTI.Serializable(0x998DE21D9A1ACFA4, GameType.DS)]
    public class WalkAndTalkPathEventResource : SubGoalPausableEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public UUIDRef<WalkAndTalkPath> WalkAndTalkPath;
        [RTTI.Member(10, 0x50, "Logic")] public UUIDRef<WalkAndTalkPathNode> FromNode;
        [RTTI.Member(11, 0x60, "Logic")] public UUIDRef<WalkAndTalkPathNode> ToNode;
        [RTTI.Member(15, 0x70, "Distances")] public float IdealDistance;
        [RTTI.Member(16, 0x74, "Distances")] public float ContinueDistance;
        [RTTI.Member(17, 0x78, "Distances")] public float StopDistance;
        [RTTI.Member(19, 0x7C, "MovementOptions")] public bool WalkIfPlayerIsAhead;
        [RTTI.Member(13, 0x7D, "Event")] public bool PauseUntilArrival;
        [RTTI.Member(20, 0x7E, "MovementOptions")] public bool StopExactlyAtDestination;
        [RTTI.Member(23, 0x80, "Resources")] public Ref<AIContextHintResource> MoveHint;
        [RTTI.Member(22, 0x88, "Resources")] public Ref<AISignalResource> AttractSignal;
    }

    [RTTI.Serializable(0x14BEDAD1DA40B0B7, GameType.DS)]
    public class WalkAndTalkPathNode : RouteNode
    {
        [RTTI.Member(12, 0xC0, "Logic")] public String Label;
    }

    [RTTI.Serializable(0x8CC1DBC56794787, GameType.DS)]
    public class WalkAndTalkPathSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x72732A020CC456EB, GameType.DS)]
    public class WarpedAnimation : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public String AnimStateName;
        [RTTI.Member(4, 0x28, "General")] public Array<String> BoolAnimVarNames;
        [RTTI.Member(6, 0x38, "General")] public EWarpedAnimationBoolAnimVarTriggerType BoolAnimVarsTriggerType;
        [RTTI.Member(5, 0x40, "General")] public Array<FloatAnimationVariableValue> FloatAnimVars;
        [RTTI.Member(15, 0x50, "Displacement")] public AnimationEventID DisplacementAnimEvent;
        [RTTI.Member(7, 0x54, "General")] public AnimationEventID StaticExitAnimEvent;
        [RTTI.Member(10, 0x60, "General")] public WarpedAnimationMetrics Metrics;
        [RTTI.Member(8, 0xE0, "General")] public Ref<AnimationManagerResource> AnimationManagerResource;
        [RTTI.Member(9, 0xE8, "General", true)] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(11, 0xF0, "General")] public String DynamicAnimationVariableName;
        [RTTI.Member(12, 0xF8, "General")] public EWarpedAnimationDynamicVariableSource DynamicAnimationVariableSource;
        [RTTI.Member(13, 0xFC, "General")] public bool WarpingEnabled;
    }

    [RTTI.Serializable(0xCE2F48C1703FA4B3, GameType.DS)]
    public class WarpedAnimationMetrics
    {
        [RTTI.Member(0, 0x0)] public Mat44 RootTrajectory;
        [RTTI.Member(1, 0x40)] public float RootHeadingDelta;
        [RTTI.Member(2, 0x44)] public float Duration;
        [RTTI.Member(3, 0x48)] public float DisplacementStartTime;
        [RTTI.Member(4, 0x4C)] public float DisplacementEndTime;
        [RTTI.Member(5, 0x50)] public Vec3 AverageDisplacementVelocity;
        [RTTI.Member(6, 0x60)] public Vec3 PreBlendDisplacement;
        [RTTI.Member(7, 0x70)] public Vec3 PostBlendDisplacement;
    }

    [RTTI.Serializable(0x56B1193561777ADE, GameType.DS)]
    public class WaterDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x986EC3F938420076, GameType.DS)]
    public class WaterDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CurveResource> DepthToMovementModifierCurve;
    }

    [RTTI.Serializable(0x8181A8568CE0BD93, GameType.DS)]
    public class WaterDetectionComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB14D26407BA7FE6C, GameType.DS)]
    public class WaterEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x21995CEEF37B119B, GameType.DS)]
    public class WaterEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB645321B3C877E2A, GameType.DS)]
    public class WaterEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(2, 0x20)] public float MaxDistance;
        [RTTI.Member(3, 0x28)] public Array<WaterEffectResource> WaterEffectResources;
    }

    [RTTI.Serializable(0xA86814A3DB34017, GameType.DS)]
    public class WaterEffectResource
    {
        [RTTI.Member(0, 0x0)] public Ref<MaterialTypeResource> MaterialTypeResource;
        [RTTI.Member(1, 0x8)] public String StartHelper;
        [RTTI.Member(2, 0x10)] public String EndHelper;
        [RTTI.Member(3, 0x20)] public Vec3 StartOffset;
        [RTTI.Member(4, 0x30)] public Vec3 EndOffset;
        [RTTI.Member(5, 0x40)] public float EffectForce;
        [RTTI.Member(6, 0x44)] public float WaterSystemImpulseStrength;
        [RTTI.Member(7, 0x48)] public float WaterSystemImpulseRadius;
        [RTTI.Member(8, 0x4C)] public float WaterSystemImpulseInterval;
    }

    [RTTI.Serializable(0xA917698631E97C22, GameType.DS)]
    public class WaterInteractionSystem : EnvironmentInteractionSystem
    {
        [RTTI.Member(6, 0x19C, "Simulation")] public float DampingFactor;
        [RTTI.Member(7, 0x1A0, "Simulation")] public float SimulationWaveSpeed;
        [RTTI.Member(11, 0x1A4, "Simulation")] public float ConstantDamping;
        [RTTI.Member(8, 0x1A8, "Simulation")] public float ImpactStrengthScale;
        [RTTI.Member(9, 0x1B8, "Simulation")] public Ref<WorldDataType> FlowWorldData;
        [RTTI.Member(10, 0x1C0, "Simulation")] public float FlowDamping;
        [RTTI.Member(4, 0x1CA, "Resources")] public EEnvironmentInteractionTexRes TextureResolution;
        [RTTI.Member(3, 0x1CC, "Resources")] public EEnvironmentInteractionWorldSize WorldSize;
    }

    [RTTI.Serializable(0x3EE16414DA14860E, GameType.DS)]
    public class WaterInteractionSystemAssets : SystemAssets
    {
        [RTTI.Member(3, 0x20, "Textures")] public Ref<Texture> DefaultImpactTexture;
        [RTTI.Member(4, 0x28, "Textures")] public Ref<Texture> TarImpactTexture;
        [RTTI.Member(6, 0x30, "Shaders")] public Ref<ShaderResource> UpdateComputeShader;
        [RTTI.Member(7, 0x38, "Shaders")] public Ref<ShaderResource> ImpactShader;
        [RTTI.Member(8, 0x40, "Shaders")] public Ref<ShaderResource> ClearHeightShader;
        [RTTI.Member(9, 0x48, "Shaders")] public Ref<ShaderResource> ClearNormShader;
    }

    [RTTI.Serializable(0x2C886304B60D6EAA, GameType.DS)]
    public class WaterSurfaceLocatorBase : WorldNode
    {
        [RTTI.Member(4, 0x60)] public bool Enable;
        [RTTI.Member(5, 0x64)] public float CameraNear;
        [RTTI.Member(6, 0x68)] public float CameraFar;
        [RTTI.Member(7, 0x6C)] public float CameraFov;
        [RTTI.Member(8, 0x70)] public int Priority;
    }

    [RTTI.Serializable(0x34EFD4D6DB36E7C6, GameType.DS)]
    public class WaveNodeParameters
    {
    }

    [RTTI.Serializable(0x1F34EB91B1472563, GameType.DS)]
    public class WaveNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x241E802F1FC206C1, GameType.DS)]
    public class WaveNodeStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0x68EC23505A4A14D9, GameType.DS)]
    public class WeakPtrRTTITarget
    {
    }

    [RTTI.Serializable(0x80E4D547AB9F78DE, GameType.DS)]
    public class WeaponAccuracy : WeaponPart
    {
    }

    [RTTI.Serializable(0xD0ED7446CED61506, GameType.DS)]
    public class WeaponAccuracyResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AccuracySettings> AccuracySettings;
        [RTTI.Member(5, 0x28, "Spread")] public Ref<SpreadSettings> SpreadSettings;
        [RTTI.Member(7, 0x30, "Charged")] public Ref<ChargedValueFloat> RecoilRoundsMultiplier;
    }

    [RTTI.Serializable(0xE8C3AFE01F4B7520, GameType.DS)]
    public class WeaponAimArc : WeaponPart
    {
    }

    [RTTI.Serializable(0x199B54671687B3E1, GameType.DS)]
    public class WeaponAimArcRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xACC6DD4B26474766, GameType.DS)]
    public class WeaponAimArcResource : WeaponPartResource
    {
        [RTTI.Member(10, 0x20, "Representation")] public EShowArcType ShowArcType;
        [RTTI.Member(11, 0x21, "Representation")] public bool ShowArcWhenUnableToFire;
        [RTTI.Member(3, 0x28, "Representation")] public Ref<RenderEffectResource> AimArcRenderEffectResource;
        [RTTI.Member(4, 0x30, "Representation")] public float AimArcLength;
        [RTTI.Member(5, 0x34, "Representation")] public float AimArcWidth;
        [RTTI.Member(6, 0x38, "Representation")] public float AimArcTextureLength;
        [RTTI.Member(7, 0x3C, "Representation")] public RGBAColor AimArcColor;
        [RTTI.Member(8, 0x40, "Representation")] public float AimArcFadeInDistance;
        [RTTI.Member(9, 0x44, "Representation")] public float AimArcFadeOutDistance;
        [RTTI.Member(12, 0x48, "Representation")] public Ref<RenderEffectResource> AimArcDepthHelpersRenderEffectResource;
        [RTTI.Member(13, 0x50, "Representation")] public float AimArcDepthHelpersWidth;
        [RTTI.Member(14, 0x54, "Representation")] public float AimArcDepthHelpersHeight;
        [RTTI.Member(15, 0x58, "Representation")] public float AimArcDepthHelpersInitialDistance;
        [RTTI.Member(16, 0x5C, "Representation")] public float AimArcDepthHelpersInterval;
        [RTTI.Member(17, 0x60, "Representation")] public RGBAColor AimArcDepthHelpersColor;
        [RTTI.Member(18, 0x68, "Representation")] public Ref<RenderEffectResource> AimArcTargetRenderEffectResource;
        [RTTI.Member(19, 0x70, "Representation")] public float AimArcTargetSize;
        [RTTI.Member(20, 0x74, "Representation")] public float AimArcTargetOffset;
        [RTTI.Member(21, 0x78, "Representation")] public RGBAColor AimArcTargetColor;
        [RTTI.Member(22, 0x80, "Representation")] public Ref<EntityResource> EndPointEntityResource;
        [RTTI.Member(23, 0x90, "Representation")] public Vec3 EndPointEntityAlignNormal;
    }

    [RTTI.Serializable(0x52B38C04E15D8C3D, GameType.DS)]
    public class WeaponAmmoCharger : WeaponPart
    {
    }

    [RTTI.Serializable(0xF07E4883762C167B, GameType.DS)]
    public class WeaponAmmoChargerRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xE34373F978A15D32, GameType.DS)]
    public class WeaponAmmoChargerResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float RetainChargeDuration;
        [RTTI.Member(4, 0x24, "Logic")] public float DischargeDuration;
        [RTTI.Member(5, 0x28, "Logic")] public float RetainOverchargeDuration;
        [RTTI.Member(6, 0x2C, "Logic")] public float EmergencyDischargeDuration;
        [RTTI.Member(7, 0x30, "Logic")] public float RequiredChargedTime;
        [RTTI.Member(8, 0x38, "Logic")] public Array<Ref<ChargedAmmoResource>> ChargedAmmoResources;
        [RTTI.Member(9, 0x48, "Logic")] public int MaxSafeCharges;
        [RTTI.Member(22, 0x50, "Animation")] public String ChargeLevelAnimVarName;
        [RTTI.Member(23, 0x58, "Animation")] public String OverchargeAnimVarName;
        [RTTI.Member(10, 0x60, "Logic")] public Ref<DamageSettings> OverchargeDamage;
        [RTTI.Member(12, 0x68, "Sound")] public Ref<SoundResource> ChargeSound;
        [RTTI.Member(13, 0x78, "Sound")] public Ref<SoundResource> DischargeSound;
        [RTTI.Member(15, 0x80, "VisualEffects")] public Ref<ParticleSystemResource> ChargingParticles;
        [RTTI.Member(16, 0x88, "VisualEffects")] public String RechargeShaderVariableID;
        [RTTI.Member(18, 0x90, "Rumble")] public Ref<RumbleResource> ChargeRumbleResource;
        [RTTI.Member(19, 0x98, "Rumble")] public Ref<RumbleResource> RetainChargeRumbleResource;
        [RTTI.Member(20, 0xA0, "Rumble")] public Ref<RumbleResource> MaxChargeRumbleResource;
        [RTTI.Member(25, 0xA8, "StaminaUsage")] public Ref<StaminaUsageType> StaminaUsageType;
    }

    [RTTI.Serializable(0x8727B07FE1A082D6, GameType.DS)]
    public class WeaponAmmoTether : WeaponPart
    {
    }

    [RTTI.Serializable(0x6C642799F44F3873, GameType.DS)]
    public class WeaponAmmoTetherRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x944E21728E1BA568, GameType.DS)]
    public class WeaponAmmoTetherResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<GraphProgramResource> TetherGraph;
        [RTTI.Member(5, 0x28, "Animation")] public String TetherAnimVarName;
        [RTTI.Member(7, 0x30, "Representation")] public Ref<ParticleSystemResource> TetherParticles;
        [RTTI.Member(9, 0x38, "Sound")] public Ref<SoundResource> TetherSound;
        [RTTI.Member(11, 0x40, "Rumble")] public Ref<RumbleResource> TetherRumble;
    }

    [RTTI.Serializable(0xB45512932FBD899F, GameType.DS)]
    public class WeaponBowString : WeaponPart
    {
    }

    [RTTI.Serializable(0x63414CC71D562F41, GameType.DS)]
    public class WeaponBowStringRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xA3E43EE54A1A45CB, GameType.DS)]
    public class WeaponBowStringResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public String BowStringJoint;
        [RTTI.Member(4, 0x28, "Logic")] public String HandHelper;
        [RTTI.Member(5, 0x30, "Logic")] public String BowStringAnimVarName;
        [RTTI.Member(6, 0x38, "Logic")] public FRange BowStringAnimationRange;
        [RTTI.Member(7, 0x40, "Logic")] public String HoldStringAnimTagName;
        [RTTI.Member(8, 0x48, "Logic")] public String DrawStringAnimTagName;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<SoundResource> TensionSound;
    }

    [RTTI.Serializable(0xB5ECFB5B1B7AD98C, GameType.DS)]
    public class WeaponCharge : WeaponPart
    {
    }

    [RTTI.Serializable(0xE7B4FB0F999ECCC8, GameType.DS)]
    public class WeaponChargeRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x814E5041AD2D284A, GameType.DS)]
    public class WeaponChargeResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float InitialChargeMagnitude;
        [RTTI.Member(4, 0x24, "Logic")] public float MaximumChargeMagnitude;
        [RTTI.Member(5, 0x28, "Logic")] public float MinimumChargeToFire;
        [RTTI.Member(6, 0x2C, "Logic")] public float AutoFireOnChargeMagnitude;
        [RTTI.Member(7, 0x30, "Logic")] public bool AutoChargeUp;
        [RTTI.Member(8, 0x31, "Logic")] public bool ChargeToMinOnFireRequest;
        [RTTI.Member(9, 0x34, "Logic")] public float ChargeUpRate;
        [RTTI.Member(10, 0x38, "Logic")] public float ChargeDissipationRate;
        [RTTI.Member(11, 0x3C, "Logic")] public float ChargeAbortTime;
        [RTTI.Member(12, 0x40, "Logic")] public float MaxChargeHoldTime;
        [RTTI.Member(13, 0x44, "Logic")] public bool FireOnHoldTimeout;
        [RTTI.Member(14, 0x48, "Logic")] public float ChargeDelay;
        [RTTI.Member(15, 0x4C, "Logic")] public bool ChargeUpWhileFiring;
        [RTTI.Member(16, 0x50, "Logic")] public float PrepareFireTime;
        [RTTI.Member(17, 0x54, "Logic")] public EDischargeMethod DischargeMethod;
        [RTTI.Member(18, 0x58, "Logic")] public float DischargeTime;
        [RTTI.Member(19, 0x5C, "Logic")] public bool AbortChargeOnCancel;
        [RTTI.Member(20, 0x5D, "Logic")] public bool DelayDischargeToFireEnd;
        [RTTI.Member(21, 0x5E, "Logic")] public bool KeepChargeWhileFireRequested;
        [RTTI.Member(25, 0x60, "Sound")] public Ref<SoundResource> ChargeSound;
        [RTTI.Member(26, 0x68, "Sound")] public Ref<SoundResource> DischargeSound;
        [RTTI.Member(27, 0x70, "Sound")] public Ref<SoundResource> AbortSound;
        [RTTI.Member(29, 0x78, "VisualEffects")] public bool ContinueParticlesWhileCharged;
        [RTTI.Member(30, 0x80, "VisualEffects")] public Ref<ParticleSystemResource> ChargingParticles;
        [RTTI.Member(31, 0x88, "VisualEffects")] public String RechargeShaderVariableID;
        [RTTI.Member(33, 0x90, "Rumble")] public Ref<RumbleResource> ChargeRumbleResource;
        [RTTI.Member(34, 0x98, "Rumble")] public Ref<RumbleResource> MaxChargeRumbleResource;
        [RTTI.Member(38, 0xA0, "Animation")] public String ChargeActiveAnimVarName;
        [RTTI.Member(39, 0xA8, "Animation")] public Array<FloatAnimationVariableValue> ChargeAnimVars;
        [RTTI.Member(40, 0xB8, "Animation")] public String ChargeMagnitudeAnimVarName;
        [RTTI.Member(36, 0xC0, "AI")] public EAIBodyAlignmentMode BodyAlignmentMode;
        [RTTI.Member(42, 0xC8, "Animation")] public String PrepareFireAnimVarName;
        [RTTI.Member(41, 0xD0, "Animation")] public AnimationEventID IsActiveAnimEvent;
        [RTTI.Member(43, 0xD8, "Animation")] public Ref<ChargeAnimationReference> ChargeAnimReference;
        [RTTI.Member(22, 0xE0, "Logic")] public Ref<GraphProgramResource> OnStartChargingGraphProgram;
        [RTTI.Member(23, 0xE8, "Logic")] public Ref<GraphProgramResource> OnAbortChargingGraphProgram;
    }

    [RTTI.Serializable(0x205D3587459F737F, GameType.DS)]
    public class WeaponCook : WeaponPart
    {
    }

    [RTTI.Serializable(0x2FC82357714E4811, GameType.DS)]
    public class WeaponCookRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x1556334EBFA73D66, GameType.DS)]
    public class WeaponCookResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Sound")] public Ref<SoundResource> CookSound;
    }

    [RTTI.Serializable(0xEDA616AF04C1F80C, GameType.DS)]
    public class WeaponCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0xF365D73708BE99FE, GameType.DS)]
    public class WeaponMarkerIconSettings : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<UITexture> GestureIcon;
        [RTTI.Member(3, 0x28)] public Ref<UITexture> GestureBlinkIcon;
        [RTTI.Member(4, 0x30)] public bool VisibleInView;
        [RTTI.Member(5, 0x31)] public bool OnlyShowWhenPlayerTarget;
    }

    [RTTI.Serializable(0xC236BEBDD43A90C8, GameType.DS)]
    public class WeaponMarkerMapping : CoreObject
    {
        [RTTI.Member(2, 0x20)] public UUIDRef<MsgAIAttackId> AttackId;
        [RTTI.Member(3, 0x30)] public Ref<WeaponMarkerIconSettings> DisplaySettings;
    }

    [RTTI.Serializable(0x4254C86E2BCF303F, GameType.DS)]
    public class WeaponMode : EntityComponent
    {
    }

    [RTTI.Serializable(0x7CC5FE6EEE8E9195, GameType.DS)]
    public class WeaponModeResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "AI")] public UUIDRef<MsgAIAttackId> AttackMessageId;
        [RTTI.Member(4, 0x30, "AI")] public String WeaponIdentifier;
        [RTTI.Member(5, 0x38, "AI")] public Ref<AISignalType> IdentifierSignal;
        [RTTI.Member(6, 0x40, "AI")] public Ref<AIBodyPartBase> BodyPartResource;
        [RTTI.Member(7, 0x48, "AI")] public float MaxBoneAlignmentAngle;
    }

    [RTTI.Serializable(0xB9BA295982CB79B9, GameType.DS)]
    public class WeaponModeResourceSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7DC792FAD55CBF80, GameType.DS)]
    public class WeaponModeRestoreData : StateObject
    {
        [RTTI.Member(1, 0x8, "StateSaving")] public int WeaponModeIndex;
        [RTTI.Member(2, 0xC, "StateSaving")] public int RoundsInMagazine;
    }

    [RTTI.Serializable(0x87FC6936B815C699, GameType.DS)]
    public class WeaponModeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC5A56E053DB57F2E, GameType.DS)]
    public class WeaponOverheat : WeaponPart
    {
    }

    [RTTI.Serializable(0xA17358803AB6C8DB, GameType.DS)]
    public class WeaponOverheatRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xF66EC23A6059BC49, GameType.DS)]
    public class WeaponOverheatResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float OverheatTemperature;
        [RTTI.Member(4, 0x24, "Logic")] public float CooldownTemperature;
        [RTTI.Member(5, 0x28, "Logic")] public float TemperaturePerRound;
        [RTTI.Member(6, 0x2C, "Logic")] public float TemperaturePerSecondWhileOperating;
        [RTTI.Member(7, 0x30, "Logic")] public float OverheatPenalty;
        [RTTI.Member(8, 0x34, "Logic")] public float TemperatureFalloff;
        [RTTI.Member(9, 0x38, "Logic")] public bool MustReleaseTriggerWhenOverheated;
        [RTTI.Member(10, 0x3C, "Logic")] public float DamageOnOverheatFactor;
        [RTTI.Member(11, 0x40, "Logic")] public float DamageWhenOverheating;
        [RTTI.Member(13, 0x48, "SoundEffects")] public Ref<SoundResource> OverheatedSound;
        [RTTI.Member(14, 0x50, "SoundEffects")] public Ref<SoundResource> OverheatedFireSound;
        [RTTI.Member(16, 0x58, "VisualEffects")] public String TemperatureShaderVariableID;
        [RTTI.Member(17, 0x60, "VisualEffects")] public Ref<CurveResource> TemperatureShaderVariableCurve;
        [RTTI.Member(18, 0x68, "VisualEffects")] public Ref<ParticleSystemResource> OverheatedFireParticles;
    }

    [RTTI.Serializable(0xAB65A67FE4B3B350, GameType.DS)]
    public class WeaponPart : EntityComponent
    {
    }

    [RTTI.Serializable(0xE61A535BCBD51353, GameType.DS)]
    public class WeaponPartRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x6A37004C3D69FA7E, GameType.DS)]
    public class WeaponPartResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x3AB4B3E6FEB974B6, GameType.DS)]
    public class WeaponPreviewProjectile : WeaponPart
    {
    }

    [RTTI.Serializable(0x7AE18C6C35A25CC8, GameType.DS)]
    public class WeaponPreviewProjectileResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<AttachToHelperMoverResource> PrimaryAttachToWeaponMover;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<AttachToHelperMoverResource> SecondaryAttachToWeaponMover;
        [RTTI.Member(5, 0x30, "Logic")] public EPreviewProjectileCreateMode PreviewProjectileCreateMode;
        [RTTI.Member(6, 0x34, "Logic")] public bool ReloadPrimaryPreviewOnWield;
        [RTTI.Member(7, 0x35, "Logic")] public bool KeepPreviewInHand;
        [RTTI.Member(9, 0x38, "Animation")] public AnimationEventID LoadPreviewInHandAnimEvent;
        [RTTI.Member(10, 0x3C, "Animation")] public AnimationEventID ChamberPreviewInHandAnimEvent;
    }

    [RTTI.Serializable(0x8927F1CA534E4A38, GameType.DS)]
    public class WeaponSpin : WeaponPart
    {
    }

    [RTTI.Serializable(0x1EDD9301A16ADA37, GameType.DS)]
    public class WeaponSpinRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x7962FFB5B5C5519F, GameType.DS)]
    public class WeaponSpinResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public FRange FireDuration;
        [RTTI.Member(4, 0x28, "Logic")] public float MinSpinRateBeforeFiring;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<CurveResource> SpinUpCurve;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<CurveResource> SpinDownCurve;
        [RTTI.Member(7, 0x40, "Logic")] public float SpinAnglePerSecond;
        [RTTI.Member(8, 0x48, "Logic")] public Array<float> SpinStopAngles;
        [RTTI.Member(9, 0x58, "Logic")] public float SpinStopAnglePerSecond;
        [RTTI.Member(11, 0x60, "SoundEffects")] public Ref<SoundResource> SpinSound;
    }

    [RTTI.Serializable(0x2A75C830392FF7F2, GameType.DS)]
    public class WeaponSwitchEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x7108938E40A7840F, GameType.DS)]
    public class WeaponSwitchEventResource : PausableEventResource
    {
        [RTTI.Member(8, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(9, 0x40, "Logic")] public bool SwitchImmediately;
        [RTTI.Member(10, 0x41, "Logic")] public UUIDRef<EntityResource> SwitchWeapon;
        [RTTI.Member(11, 0x58, "Logic")] public Ref<AIWeaponPreference> SwitchWeaponPreference;
    }

    [RTTI.Serializable(0xC79D1147B5494, GameType.DS)]
    public class WeaponZoom : WeaponPart
    {
    }

    [RTTI.Serializable(0xC8C44BCCC14225FD, GameType.DS)]
    public class WeaponZoomRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xC215ED79C34DA478, GameType.DS)]
    public class WeaponZoomResource : WeaponPartResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Array<Ref<ZoomSetting>> ZoomSettings;
        [RTTI.Member(6, 0x30, "ZoomAnimation")] public Ref<CurveResource> AnimationCurve;
        [RTTI.Member(7, 0x38, "ZoomAnimation")] public Ref<CurveResource> TransitionCurve;
        [RTTI.Member(11, 0x40, "SoundEffects")] public Ref<SoundResource> ZoomedSound;
        [RTTI.Member(12, 0x48, "SoundEffects")] public Ref<SoundResource> TargetSound;
        [RTTI.Member(13, 0x50, "SoundEffects")] public Ref<SoundResource> TransitionSound;
        [RTTI.Member(8, 0x58, "ZoomAnimation")] public String ZoomInEvent;
        [RTTI.Member(9, 0x60, "ZoomAnimation")] public String ZoomOutEvent;
        [RTTI.Member(15, 0x68, "Representation")] public String ZoomShaderVariableID;
        [RTTI.Member(4, 0x70, "Logic")] public bool PlayerInvisible;
    }

    [RTTI.Serializable(0xC05CD737B5128C80, GameType.DS)]
    public class WeaponsContainerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBFF175549DDEF882, GameType.DS)]
    public class WeaponsContainerComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x827EF6EEBE010950, GameType.DS)]
    public class WeatherAmbienceCycle : AmbienceCycleBase
    {
    }

    [RTTI.Serializable(0xE2E06DDA0041775C, GameType.DS)]
    public class WeatherEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xED17509B28BF330C, GameType.DS)]
    public class WeatherEventResource : TimedEventResource
    {
        [RTTI.BaseClass(0x30)] public IScalableEvent @IScalableEvent;
        [RTTI.Member(12, 0x40, "General")] public Ref<WeatherSetup> WeatherSetup;
        [RTTI.Member(13, 0x48, "General")] public AnimatableValue BlendFactor;
        [RTTI.Member(14, 0x60, "General")] public bool DisableInSubspace;
    }

    [RTTI.Serializable(0xF7AFA3BC1F0D6571, GameType.DS)]
    public class WeatherGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x99FADF9D1530D58A, GameType.DS)]
    public class WeatherInfluenceFactor : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<CurveResource> TimeOfDayFactorCurve;
        [RTTI.Member(8, 0x28, "General")] public Ref<CurveResource> CloudDensityCurve;
        [RTTI.Member(4, 0x30, "General")] public Ref<CurveResource> PrecipitationFactorCurve;
        [RTTI.Member(5, 0x38, "General")] public Ref<CurveResource> WetnessCurve;
        [RTTI.Member(6, 0x40, "General")] public Ref<CurveResource> TemperatureCurve;
        [RTTI.Member(7, 0x48, "General")] public Ref<CurveResource> HumidityCurve;
    }

    [RTTI.Serializable(0x9A7ED8B672008047, GameType.DS)]
    public class WeatherLimitsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7815BF49D5D17384, GameType.DS)]
    public class WeatherLimitsEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Wind")] public float SpeedLimit;
    }

    [RTTI.Serializable(0x83A7D253C80D822C, GameType.DS)]
    public class WeatherSetup : ResourceWithName
    {
        [RTTI.BaseClass(0x28)] public StreamingRefTarget @StreamingRefTarget;
        [RTTI.Member(8, 0x40, "General")] public WeatherSetupSettings Settings;
        [RTTI.Member(9, 0x100, "General")] public Ref<WeatherAmbienceCycle> AmbienceCycle;
        [RTTI.Member(10, 0x108, "General")] public Ref<Texture> CustomWeatherMap;
    }

    [RTTI.Serializable(0x46B1CD31638A604E, GameType.DS)]
    public class WeatherSetupSettings
    {
        [RTTI.Member(7, 0x0, "Clouds")] public float CloudCoverage;
        [RTTI.Member(42, 0x0, "KJPCloud")] public bool CloudShadowRelaxation;
        [RTTI.Member(41, 0x0, "KJPCloud")] public bool CloudRainyMapNormalization;
        [RTTI.Member(8, 0x4, "Clouds")] public float CloudCoverageVariation;
        [RTTI.Member(9, 0x8, "Clouds")] public float CloudCoverageVariationFrequency;
        [RTTI.Member(10, 0xC, "Clouds")] public float CloudCoverageNoise1Amplitude;
        [RTTI.Member(11, 0x10, "Clouds")] public float CloudCoverageNoise1Frequency;
        [RTTI.Member(12, 0x14, "Clouds")] public float CloudCoverageNoise2Amplitude;
        [RTTI.Member(13, 0x18, "Clouds")] public float CloudCoverageNoise2Frequency;
        [RTTI.Member(14, 0x1C, "Clouds")] public float CloudConnectivity;
        [RTTI.Member(15, 0x20, "Clouds")] public float CloudDensityExponent;
        [RTTI.Member(16, 0x24, "Clouds")] public float CloudDensityScale;
        [RTTI.Member(17, 0x28, "Clouds")] public float CloudType;
        [RTTI.Member(18, 0x2C, "Clouds")] public float CloudTypeVariation;
        [RTTI.Member(19, 0x30, "Clouds")] public float CloudTypeVariationFrequency;
        [RTTI.Member(21, 0x34, "Clouds")] public float CloudScrollSpeed;
        [RTTI.Member(22, 0x38, "Clouds")] public float CloudAnvilAmount;
        [RTTI.Member(23, 0x3C, "Clouds")] public float CloudAnvilSkew;
        [RTTI.Member(24, 0x40, "Clouds")] public float CloudCustomWindDirectionBlendFactor;
        [RTTI.Member(25, 0x44, "Clouds")] public float CloudCustomWindDirection;
        [RTTI.Member(26, 0x48, "Clouds")] public float CloudCustomWindSpeed;
        [RTTI.Member(27, 0x4C, "Clouds")] public float LightningIntensityMin;
        [RTTI.Member(28, 0x50, "Clouds")] public float LightningIntensityMax;
        [RTTI.Member(29, 0x54, "Clouds")] public float LightningFrequency;
        [RTTI.Member(30, 0x58, "Clouds")] public float LightningRadius;
        [RTTI.Member(31, 0x5C, "Clouds")] public float LightningLifeTime;
        [RTTI.Member(32, 0x60, "Clouds")] public float LightningFarDistance;
        [RTTI.Member(33, 0x64, "Clouds")] public float LightningLocal;
        [RTTI.Member(5, 0x68, "General")] public float WetnessMaxLimit;
        [RTTI.Member(37, 0x6C, "KJPCloud")] public float CloudRainFallCoverage;
        [RTTI.Member(38, 0x70, "KJPCloud")] public float CloudSusceptibility;
        [RTTI.Member(39, 0x74, "KJPCloud")] public float CloudShadow;
        [RTTI.Member(40, 0x78, "KJPCloud")] public float CloudRainyMapInfluence;
        [RTTI.Member(35, 0x84, "KJPCloud")] public bool UseKJPCloudShaders;
        [RTTI.Member(36, 0x85, "KJPCloud")] public ECloudShaderType CloudShaderType;
        [RTTI.Member(49, 0x88, "Precipitation")] public float Precipitation;
        [RTTI.Member(50, 0x8C, "Precipitation")] public float PrecipitationVariation;
        [RTTI.Member(51, 0x90, "Precipitation")] public float PrecipitationVariationFrequency;
        [RTTI.Member(46, 0x94, "RainbowAndSundogs")] public float RainbowIntensity;
        [RTTI.Member(47, 0x98, "RainbowAndSundogs")] public float SundogIntensity;
        [RTTI.Member(20, 0x9C, "Clouds")] public float CirrusCloudDensity;
        [RTTI.Member(3, 0xA0, "General")] public float Humidity;
        [RTTI.Member(44, 0xA4, "KJPFog")] public float KJPFogWindInfluence;
        [RTTI.Member(1, 0xA8, "General")] public FRange WindSpeed;
        [RTTI.Member(2, 0xB0, "General")] public FRange WindDirectionAngle;
        [RTTI.Member(4, 0xB8, "General")] public FRange TemperatureLimits;
    }

    [RTTI.Serializable(0x7DEC518DA7DD5A50, GameType.DS)]
    public class WeatherSystemSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2D7C2130ED017CB4, GameType.DS)]
    public class WeightJoint
    {
        [RTTI.Member(0, 0x0)] public String Joint;
        [RTTI.Member(1, 0x8)] public float Weight;
    }

    [RTTI.Serializable(0xAC13B26B8BE30BB0, GameType.DS)]
    public class WeightedJointSetIDToJointSet
    {
        [RTTI.Member(0, 0x0)] public Ref<JointSetID> ID;
        [RTTI.Member(1, 0x8)] public Ref<WeightedJointSetResource> JointSet;
    }

    [RTTI.Serializable(0x1694417D0E6E967D, GameType.DS)]
    public class WeightedJointSetResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<WeightJoint> WeightsList;
    }

    [RTTI.Serializable(0xE4DC57FDB835EBBB, GameType.DS)]
    public class Widget : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4E74D899E0FD042C, GameType.DS)]
    public class WieldStowInventory : Inventory
    {
    }

    [RTTI.Serializable(0x4E1EAC6DD51737E, GameType.DS)]
    public class WieldStowInventoryResource : InventoryResource
    {
        [RTTI.Member(7, 0x38, "Dropping")] public Array<Ref<TagProperty>> InvalidDropTags;
        [RTTI.Member(8, 0x48, "Dropping")] public Ref<ConditionResource> CanDropCondition;
        [RTTI.Member(10, 0x50, "Wielding")] public String GunBoneHelperName;
    }

    [RTTI.Serializable(0x47130C9953F6F57C, GameType.DS)]
    public class WieldStowInventorySymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xEE59C9EB9DB2F5FD, GameType.DS)]
    public class WindSimulationForceField
    {
        [RTTI.Member(1, 0x0, "General")] public Ref<ForceFieldResource> ForceFieldResource;
        [RTTI.Member(2, 0x8, "General")] public float WindSpeed;
    }

    [RTTI.Serializable(0xAFC13D1D2E565B0E, GameType.DS)]
    public class WorldBoundingBox3
    {
        [RTTI.Member(0, 0x0)] public WorldPosition Min;
        [RTTI.Member(1, 0x18)] public WorldPosition Max;
    }

    [RTTI.Serializable(0x3D444A3E341AA67C, GameType.DS)]
    public class WorldBoundingSphere
    {
        [RTTI.Member(0, 0x0)] public WorldPosition Position;
        [RTTI.Member(1, 0x18)] public float Radius;
    }

    [RTTI.Serializable(0x518AA9C7FF6E5A1F, GameType.DS)]
    public class WorldDataArea : WorldDataShape
    {
    }

    [RTTI.Serializable(0x3832AECB93147C33, GameType.DS)]
    public class WorldDataAreaGroup : WorldDataAreaGroupBase
    {
    }

    [RTTI.Serializable(0x1B9ECA30EDB1004E, GameType.DS)]
    public class WorldDataAreaGroupBase : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<RTTIRefObject>> Stack;
    }

    [RTTI.Serializable(0x1FB76C6280CE3DDF, GameType.DS)]
    public class WorldDataAreaStack : WorldDataAreaGroupBase
    {
    }

    [RTTI.Serializable(0x36A3B1A552CDF5B1, GameType.DS)]
    public class WorldDataBakeSettings : Resource
    {
        [RTTI.Member(3, 0x20, "General")] public bool ReadsPreviousLayers;
        [RTTI.Member(4, 0x24, "General")] public EPixelFormat DataFormat;
        [RTTI.Member(5, 0x28, "General")] public EPixelFormat OpacityFormat;
        [RTTI.Member(6, 0x30, "General")] public String BakeShaderName;
        [RTTI.Member(7, 0x38, "General")] public String RotateShaderName;
        [RTTI.Member(8, 0x40, "General")] public EWorldDataBakeBlendMode DataBlendMode;
        [RTTI.Member(9, 0x44, "General")] public EWorldDataBakeBlendMode OpacityBlendMode;
    }

    [RTTI.Serializable(0x3AFF77DD96FD26FE, GameType.DS)]
    public class WorldDataEcotopeIndexMapEntry : WorldDataGeneratedMapEntry
    {
        [RTTI.Member(6, 0x40, "InputData", true)] public Ref<WorldDataEcotopeIndexTable> EcotopeIndexMapping;
        [RTTI.Member(7, 0x48, "InputData")] public Ref<WorldDataMap> EcotopeABCDMap;
        [RTTI.Member(8, 0x50, "InputData")] public Ref<WorldDataMap> EcotopeEFGHMap;
    }

    [RTTI.Serializable(0xE10D08F90D56AA3A, GameType.DS)]
    public class WorldDataEcotopeIndexMapping
    {
        [RTTI.Member(1, 0x0)] public int32 EcotopeIndex;
        [RTTI.Member(0, 0x8)] public Ref<WorldDataType> WorldDataType;
    }

    [RTTI.Serializable(0x714E31E8D9E97296, GameType.DS)]
    public class WorldDataEcotopeIndexTable : CoreObject
    {
        [RTTI.Member(3, 0x20, "General")] public Array<WorldDataEcotopeIndexMapping> Mappings;
    }

    [RTTI.Serializable(0x8EB8039D737C23C4, GameType.DS)]
    public class WorldDataGeneratedMap : WorldDataTextureMap
    {
    }

    [RTTI.Serializable(0xBE7CF4B30489A5E2, GameType.DS)]
    public class WorldDataGeneratedMapEntry : WorldDataTextureMapEntry
    {
    }

    [RTTI.Serializable(0x1A44014730760942, GameType.DS)]
    public class WorldDataGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x44C4DCD3722CE869, GameType.DS)]
    public class WorldDataMap : Resource
    {
        [RTTI.Member(3, 0x20, "MapData")] public IVec2 GridCoordinates;
    }

    [RTTI.Serializable(0x63DF69195207E49B, GameType.DS)]
    public class WorldDataMapGenerator : PlacementBase
    {
        [RTTI.Member(3, 0x28)] public Ref<WorldDataType> WorldDataType;
        [RTTI.Member(4, 0x30)] public ISize MinimumResolution;
        [RTTI.Member(5, 0x38)] public ESetDensityBehavior DensityBehavior;
    }

    [RTTI.Serializable(0xB73D9758B83FC9B0, GameType.DS)]
    public class WorldDataMapOverlay : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x33B524849438B409, GameType.DS)]
    public class WorldDataMapOverlaySystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ShaderResource> CopyAllTextureChannelsShader;
        [RTTI.Member(3, 0x28)] public Ref<ShaderResource> SwizzleCopyTextureShader;
    }

    [RTTI.Serializable(0xF118E758B35F5CC4, GameType.DS)]
    public class WorldDataPacking : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<WorldDataPackingMap> Maps;
    }

    [RTTI.Serializable(0x4BC4144FE531C434, GameType.DS)]
    public class WorldDataPackingMap
    {
        [RTTI.Member(0, 0x0)] public EPixelFormat TargetFormat;
        [RTTI.Member(1, 0x4)] public ISize TargetResolution;
        [RTTI.Member(2, 0xC)] public bool HasMipMaps;
        [RTTI.Member(3, 0x10)] public int StreamingMipCount;
        [RTTI.Member(4, 0x14)] public EImageCompressionMethod CompressionMethod;
        [RTTI.Member(5, 0x18)] public bool GammaSpace;
        [RTTI.Member(6, 0x1C)] public int ActiveLODMask;
        [RTTI.Member(7, 0x20)] public Array<WorldDataPackingMapEntry> Entries;
    }

    [RTTI.Serializable(0xADA6AF969417E6AC, GameType.DS)]
    public class WorldDataPackingMapEntry
    {
        [RTTI.Member(0, 0x0)] public String Type;
        [RTTI.Member(1, 0x8)] public ETextureChannel Channel;
    }

    [RTTI.Serializable(0xC311A2A2B98B6423, GameType.DS)]
    public class WorldDataPlacementMap : WorldDataGeneratedMap
    {
        [RTTI.Member(10, 0x78, "GeneratedMapData")] public Ref<DensityGraphProgram> DensityProgram;
        [RTTI.Member(11, 0x80, "GeneratedMapData")] public Ref<PlacementResourceRegister> PlacementRegister;
        [RTTI.Member(12, 0x88, "GeneratedMapData")] public Ref<PlacementTile> PlacementTile;
        [RTTI.Member(13, 0x90, "GeneratedMapData")] public Ref<WorldDataType> HeightDataType;
        [RTTI.Member(14, 0x98, "GeneratedMapData")] public Ref<WorldDataType> EcotopeIndexDataType;
    }

    [RTTI.Serializable(0xD93B1C5459B76155, GameType.DS)]
    public class WorldDataSampleRequestStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x30B8EC3EC17D4F5A, GameType.DS)]
    public class WorldDataSampleRequestStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0x790BC2D5C036FDD0, GameType.DS)]
    public class WorldDataShape : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "Logic")] public Array<Ref<WorldDataShapeNode>> Nodes;
    }

    [RTTI.Serializable(0xEBE7227F6FA9F4FB, GameType.DS)]
    public class WorldDataShapeNode : ParentWorldNode
    {
        [RTTI.Member(7, 0x70, "General")] public Vec3 Tangent;
        [RTTI.Member(8, 0x80, "General")] public Vec2 UV;
    }

    [RTTI.Serializable(0xEFE43563DEEF27AE, GameType.DS)]
    public class WorldDataSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<WorldDataType>> TypesArray;
        [RTTI.Member(3, 0x30)] public Ref<WorldDataPacking> Packing;
        [RTTI.Member(4, 0x38)] public Ref<ShaderResource> WorldDataProbeTextureCopyFloat;
        [RTTI.Member(5, 0x40)] public Ref<ShaderResource> WorldDataProbeTextureCopyInt;
        [RTTI.Member(6, 0x48)] public Ref<ShaderResource> WorldDataCacheCompute;
        [RTTI.Member(7, 0x50)] public Ref<Texture> BlackTexture;
        [RTTI.Member(8, 0x58)] public Ref<Texture> WhiteTexture;
    }

    [RTTI.Serializable(0x965CBE2204909294, GameType.DS)]
    public class WorldDataTerrainNormalMapEntry : WorldDataGeneratedMapEntry
    {
        [RTTI.Member(6, 0x40, "InputData")] public Ref<WorldDataMap> TerrainHeightMap;
    }

    [RTTI.Serializable(0xCD4E9D4A112D1EFE, GameType.DS)]
    public class WorldDataTextureMap : WorldDataMap
    {
        [RTTI.Member(6, 0x28, "TextureMapData")] public Ref<Texture> ResultTexture;
        [RTTI.Member(5, 0x30, "TextureMapData")] public Array<Ref<WorldDataTextureMapEntry>> Entries;
        [RTTI.Member(7, 0x40, "TextureMapData")] public Array<uint8> SurfaceCacheData;
        [RTTI.Member(8, 0x50, "TextureMapData")] public EPixelFormat SurfaceCacheFormat;
    }

    [RTTI.Serializable(0xB1FDBD01091420C8, GameType.DS)]
    public class WorldDataTextureMapEntry : Resource
    {
        [RTTI.Member(3, 0x20, "PackingData")] public Ref<WorldDataType> Type;
        [RTTI.Member(4, 0x28, "PackingData")] public ETextureChannel Channel;
    }

    [RTTI.Serializable(0xB4C445271685049C, GameType.DS)]
    public class WorldDataTile
    {
    }

    [RTTI.Serializable(0xF7E2A94C56E3856E, GameType.DS)]
    public class WorldDataType : ResourceWithName
    {
        [RTTI.Member(5, 0x28, "General")] public EWorldDataRttiType RttiType;
        [RTTI.Member(6, 0x2C, "General")] public EWorldDataAccessMode AccessMode;
        [RTTI.Member(7, 0x30, "General")] public EWorldDataDecodingMode DecodingMode;
        [RTTI.Member(8, 0x34, "General")] public EWorldDataTileBorderMode TileBorderMode;
        [RTTI.Member(9, 0x38, "General")] public ELayerBlendOperation BlendMode;
        [RTTI.Member(10, 0x40, "General")] public String DefaultValue;
        [RTTI.Member(11, 0x48, "General")] public FRange Range;
        [RTTI.Member(13, 0x50, "General")] public Ref<Texture> DefaultTexture;
        [RTTI.Member(12, 0x58, "General")] public EPixelFormat PaintPixelFormat;
        [RTTI.Member(14, 0x5C, "General")] public bool GenerateProbeTexture;
        [RTTI.Member(15, 0x60, "General")] public int ProbeTextureRange;
        [RTTI.Member(17, 0x68, "DataSetup")] public Array<WorldDataTypeInputLayer> InputLayers;
    }

    [RTTI.Serializable(0x8E1B4DD279784429, GameType.DS)]
    public class WorldDataTypeInputLayer
    {
        [RTTI.Member(1, 0x0, "General")] public String Name;
        [RTTI.Member(2, 0x8, "General")] public EWorldDataSourceDataMode SourceDataMode;
        [RTTI.Member(3, 0xC, "General")] public EWorldDataInputLayerApplyMode ApplyMode;
        [RTTI.Member(5, 0x10, "TextureData")] public String DataPath;
        [RTTI.Member(6, 0x18, "TextureData")] public ETextureChannel DataChannel;
        [RTTI.Member(7, 0x1C, "TextureData")] public bool DataGammaSpace;
        [RTTI.Member(8, 0x20, "TextureData")] public String OpacityPath;
        [RTTI.Member(10, 0x28, "BakeSettings")] public Ref<WorldDataBakeSettings> BakeSettings;
        [RTTI.Member(12, 0x30, "UI")] public String UIName;
        [RTTI.Member(14, 0x38, "UI")] public String UIDescription;
        [RTTI.Member(13, 0x40, "UI")] public String UIIcon;
    }

    [RTTI.Serializable(0x1938BB78B31A12E3, GameType.DS)]
    public class WorldDrawableMap : CoreObject
    {
        [RTTI.Member(5, 0x30, "Map")] public Ref<UIEffectResource> TileRenderEffect;
        [RTTI.Member(6, 0x38, "Map")] public Ref<UIEffectResource> NoGoAreaRenderEffect;
        [RTTI.Member(4, 0x40, "Map")] public MapTextureTile EmptyTileTextures;
        [RTTI.Member(10, 0x50, "Map")] public IVec2 Map_TopLeftTile;
        [RTTI.Member(11, 0x58, "Map")] public IVec2 Map_BottomRightTile;
        [RTTI.Member(14, 0x60, "Selection")] public IVec2 Selection_TopLeftTile;
        [RTTI.Member(15, 0x68, "Selection")] public IVec2 Selection_BottomRightTile;
        [RTTI.Member(3, 0x70, "Map")] public Array<MapTextureTileRow> MapTextureTiles;
        [RTTI.Member(7, 0x88, "Map")] public Ref<Texture> CloudsTexture;
        [RTTI.Member(8, 0x90, "Map")] public Ref<Texture> VignetteTexture;
        [RTTI.Member(9, 0x98, "Map")] public Ref<Texture> BorderTexture;
        [RTTI.Member(21, 0xA0, "CameraElevation")] public Ref<Texture> CameraElevationTexture;
        [RTTI.Member(22, 0xA8, "CameraElevation")] public Array<float> CameraElevation;
        [RTTI.Member(23, 0xB8, "CameraElevation")] public float MaxUnZoomAmount;
        [RTTI.Member(24, 0xBC, "CameraElevation")] public float HighestFogParallaxFactor;
        [RTTI.Member(12, 0xC0, "Map")] public Ref<MapProjectionSettings> ProjectionSettings;
        [RTTI.Member(17, 0x4E0, "Streaming")] public Array<Ref<Texture>> AdditionalTextures;
        [RTTI.Member(19, 0x508, "World")] public Ref<WorldMapZone> WorldZone;
    }

    [RTTI.Serializable(0xE4E192DA47741E5D, GameType.DS)]
    public class WorldEncounter : ParentWorldNode
    {
        [RTTI.Member(7, 0x78, "Encounters")] public Array<Ref<ScenePrefabInstance>> Scenes;
        [RTTI.Member(10, 0x88, "Activation")] public float Weight;
        [RTTI.Member(8, 0x90, "Encounters")] public Array<Ref<WorldEncounterCategory>> Categories;
    }

    [RTTI.Serializable(0x77FA4A5375424E59, GameType.DS)]
    public class WorldEncounterCategory : Resource
    {
        [RTTI.Member(3, 0x20, "Conditions")] public Ref<ConditionResource> ConditionResource;
        [RTTI.Member(5, 0x28, "MinimalTimeElapsedBetween")] public float TheSameEncounter;
        [RTTI.Member(6, 0x2C, "MinimalTimeElapsedBetween")] public float Encounters;
        [RTTI.Member(8, 0x30, "Activation")] public float Weight;
    }

    [RTTI.Serializable(0x4E76E9C82068383B, GameType.DS)]
    public class WorldEncounterCategoryInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xF5A40B5A268F5295, GameType.DS)]
    public class WorldEncounterCollection : ParentWorldNode
    {
        [RTTI.Member(9, 0x70, "Conditions")] public Ref<ConditionResource> ConditionResource;
        [RTTI.Member(10, 0x78, "Conditions")] public Ref<ConditionResource> DespawnConditionResource;
        [RTTI.Member(7, 0x80, "Encounters")] public Array<Ref<WorldEncounter>> WorldEncounters;
        [RTTI.Member(11, 0x90, "Conditions")] public bool StopOnConditionFail;
    }

    [RTTI.Serializable(0xCFF86B7E19C35F95, GameType.DS)]
    public class WorldEncounterManagerResource : Resource
    {
        [RTTI.Member(3, 0x20, "Conditions")] public Ref<ConditionResource> ActivateCondition;
        [RTTI.Member(4, 0x28, "Conditions")] public Ref<ConditionResource> DespawnCondition;
        [RTTI.Member(5, 0x30, "Conditions")] public float EncounterDenialRange;
    }

    [RTTI.Serializable(0xA9CC5F330DC5D79A, GameType.DS)]
    public class WorldEncounterManagerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3A00C692E6110C30, GameType.DS)]
    public class WorldEnvironment : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<WorldEnvironment> Parent;
        [RTTI.Member(3, 0x28)] public Ref<WorldDataType> WorldDataType;
        [RTTI.Member(4, 0x30)] public bool OverrideParent;
    }

    [RTTI.Serializable(0x60582144BE7BFB65, GameType.DS)]
    public class WorldMapZone : MapZone
    {
    }

    [RTTI.Serializable(0x621BC4F30D9D5E1, GameType.DS)]
    public class WorldMarker : WorldNode
    {
        [RTTI.Member(5, 0x60, "General")] public String Name;
    }

    [RTTI.Serializable(0x493C38099FE5F6DF, GameType.DS)]
    public class WorldMarkerSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x86C9FAD4999D5CE3, GameType.DS)]
    public class WorldNode : CoreObject
    {
        [RTTI.Member(3, 0x0, "General")] public WorldTransform Orientation;
    }

    [RTTI.Serializable(0x2478515AE8C24D07, GameType.DS)]
    public class WorldNodeOverridable : WorldNode
    {
        [RTTI.Member(5, 0x60, "Override")] public Ref<WorldNode> Overrider;
    }

    [RTTI.Serializable(0x94D53265526CE0BF, GameType.DS)]
    public class WorldNodeSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBBAA509D25D82AA5, GameType.DS)]
    public class WorldOrientedBox
    {
        [RTTI.Member(0, 0x0)] public WorldTransform WorldTransform;
        [RTTI.Member(1, 0x40)] public Vec3 Extents;
    }

    [RTTI.Serializable(0x3AC08FC4F650C450, GameType.DS)]
    public class WorldPositionFact : Fact
    {
        [RTTI.Member(9, 0x30, "Logic")] public WorldPosition DefaultValue;
    }

    [RTTI.Serializable(0x2076F118B2193EBC, GameType.DS)]
    public class WorldPositionFactValue : FactValueBase
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<WorldPositionFact> TypedFact;
        [RTTI.Member(4, 0x28, "Logic")] public WorldPosition TypedValue;
    }

    [RTTI.Serializable(0x8D367820371B20C7, GameType.DS)]
    public class WorldPositionProperty : WorldPositionPropertyBase
    {
        [RTTI.Member(11, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0xF3019EE37479B98E, GameType.DS)]
    public class WorldPositionPropertyBase : WorldPositionFact
    {
    }

    [RTTI.Serializable(0xD3F0AA1B088ECA21, GameType.DS)]
    public class WorldPositionPropertyValue : PropertyValue
    {
        [RTTI.Member(3, 0x20, "General")] public Ref<WorldPositionPropertyBase> Property;
        [RTTI.Member(4, 0x28, "General")] public WorldPosition Value;
    }

    [RTTI.Serializable(0x9BBA8BCECD8F91AB, GameType.DS)]
    public class Wwise : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x5698104215883BE8, GameType.DS)]
    public class WwiseAuxBus
    {
        [RTTI.Member(0, 0x0)] public WwiseName Bus;
        [RTTI.Member(1, 0x10)] public float Ratio;
    }

    [RTTI.Serializable(0xA10EDF2ECEC0481C, GameType.DS)]
    public class WwiseAuxBusResource : Resource
    {
        [RTTI.Member(2, 0x20)] public float FadeTime;
        [RTTI.Member(3, 0x24)] public float DryVolumeRatio;
        [RTTI.Member(4, 0x28)] public Array<WwiseAuxBus> WetAuxBusData;
    }

    [RTTI.Serializable(0xEB0930FE3433F89F, GameType.DS)]
    public class WwiseBankInstance : CoreObject
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<WwiseBankResource>> Banks;
    }

    [RTTI.Serializable(0x7F710C67E5CA785F, GameType.DS)]
    public class WwiseDefaultAuxBusResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<WwiseAuxBusResource> AuxBus;
    }

    [RTTI.Serializable(0xC8E67B053B112FD3, GameType.DS)]
    public class WwiseDefaultStateResources : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<WwiseStateResource>> StateResource;
    }

    [RTTI.Serializable(0x6867D59ADEE2053A, GameType.DS)]
    public class WwiseGameObject : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x22FBB7EBF7A61E2, GameType.DS)]
    public class WwiseID : Resource
    {
        [RTTI.Member(2, 0x20)] public uint32 Id;
    }

    [RTTI.Serializable(0x1ADBC1AFF724549, GameType.DS)]
    public class WwiseMultiPositionManager : CoreObject
    {
    }

    [RTTI.Serializable(0x6A6BD129EBCB42D1, GameType.DS)]
    public class WwiseName
    {
        [RTTI.Member(0, 0x8)] public uint32 Id;
    }

    [RTTI.Serializable(0x42109E5876FA4DF2, GameType.DS)]
    public class WwiseSimpleSoundInstance : SoundInstance
    {
    }

    [RTTI.Serializable(0x831CF8CE2070CA1F, GameType.DS)]
    public class WwiseSimpleSoundResource : SoundResource
    {
        [RTTI.Member(41, 0x100, "Wwise")] public WwiseName ExternalSourceCookie;
        [RTTI.Member(42, 0x110, "Wwise")] public uint8 Flags;
    }

    [RTTI.Serializable(0x1615B4238A9601FE, GameType.DS)]
    public class WwiseState
    {
        [RTTI.Member(0, 0x0)] public WwiseName Group;
        [RTTI.Member(1, 0x10)] public WwiseName StartState;
        [RTTI.Member(2, 0x20)] public WwiseName EndState;
        [RTTI.Member(3, 0x30)] public WwiseName SkipState;
    }

    [RTTI.Serializable(0x194095C26502D8D4, GameType.DS)]
    public class WwiseStateEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x45E3959260BAC6C5, GameType.DS)]
    public class WwiseStateEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Data")] public Ref<WwiseStateResource> StateResource;
        [RTTI.Member(9, 0x38, "Data")] public uint32 GroupId;
        [RTTI.Member(10, 0x3C, "Data")] public uint32 StartStateId;
        [RTTI.Member(11, 0x40, "Data")] public uint32 EndStateId;
        [RTTI.Member(12, 0x44, "Data")] public uint32 SkipStateId;
    }

    [RTTI.Serializable(0xD225E78AC517C64A, GameType.DS)]
    public class WwiseStateResource : Resource
    {
        [RTTI.BaseClass(0x20)] public WwiseState @WwiseState;
        [RTTI.Member(7, 0x60)] public bool IsUseForceMusicPlayerPause;
    }

    [RTTI.Serializable(0x6E11F7D0A303E534, GameType.DS)]
    public class WwiseSystemAssets : SystemAssets
    {
        [RTTI.Member(2, 0x20)] public Ref<ObjectCollection> InitBank;
        [RTTI.Member(3, 0x28)] public StreamingRef<ObjectCollection> SystemResident;
        [RTTI.Member(4, 0x30)] public StreamingRef<ObjectCollection> GameResident;
    }

    [RTTI.Serializable(0xB9B537099E705FAA, GameType.DS)]
    public class WwiseWemEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3DA75F66D26BF3C6, GameType.DS)]
    public class WwiseWemEventResource : TimedEventResource
    {
        [RTTI.Member(8, 0x30, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(9, 0x38, "Logic")] public bool _3D;
        [RTTI.Member(10, 0x39, "Logic")] public bool SoftFadeOut;
        [RTTI.Member(11, 0x3A, "Logic")] public bool AutoDestroy;
        [RTTI.Member(12, 0x3C, "Logic")] public float AutoDestroyDuration;
        [RTTI.Member(15, 0x40, "Data")] public bool ApplyTiming;
        [RTTI.Member(16, 0x41, "Data")] public bool IsMovieBackgroundSound;
        [RTTI.Member(17, 0x42, "Data")] public bool PauseOnLoading;
        [RTTI.Member(14, 0x48, "Data")] public Ref<WwiseWemSoundResource> WwiseWemSoundResource;
    }

    [RTTI.Serializable(0x8F8BA50D8B46CE52, GameType.DS)]
    public class WwiseWemSoundResource : WwiseSimpleSoundResource
    {
        [RTTI.Member(45, 0x120, "Wwise")] public Ref<WwiseWemResource> WemResource;
    }

    [RTTI.Serializable(0xB19291E38B1352CC, GameType.DS)]
    public class WwiseZoomParameterResource : Resource
    {
        [RTTI.Member(2, 0x20)] public Ref<CurveResource> ScaleCurveForDistanceToListener;
        [RTTI.Member(4, 0x28)] public Ref<CurveResource> ScaleCurveForDistanceToAim;
        [RTTI.Member(3, 0x30)] public float MaxDistanceFromListener;
        [RTTI.Member(5, 0x34)] public float MaxRadiusFromAim;
        [RTTI.Member(6, 0x38)] public float RadiusSizeBaseScale;
        [RTTI.Member(7, 0x3C)] public float MinDistanceFromListener;
    }

    [RTTI.Serializable(0x92F4B7010E1DB659, GameType.DS)]
    public class XpMultiplier : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public float Multiplier;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<LocalizedTextResource> Description;
    }

    [RTTI.Serializable(0xF64D4FEAFA30C334, GameType.DS)]
    public class XpMultiplierSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3C9AE9FC1BFFE23C, GameType.DS)]
    public class XpQuestReward : SummableQuestReward
    {
        [RTTI.Member(7, 0x38, "Logic")] public Ref<LevelBasedXpReward> XpReward;
        [RTTI.Member(8, 0x40, "Logic")] public Ref<LocalizedTextResource> XpReason;
    }

    [RTTI.Serializable(0x5BCBAF5B929CA7F8, GameType.DS)]
    public class XpRepresentationController : EntityComponent
    {
    }

    [RTTI.Serializable(0x573168E827DF2C4F, GameType.DS)]
    public class XpRepresentationControllerResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<PlayerNotificationResource> LevelUpNotification;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<PlayerNotificationResource> MaxLevelUpNotification;
        [RTTI.Member(5, 0x30, "Logic")] public Ref<PlayerNotificationResource> LevelUpRewardsWithPerksNotification;
        [RTTI.Member(6, 0x38, "Logic")] public Ref<PlayerNotificationResource> LevelUpRewardsWithoutPerksNotification;
        [RTTI.Member(7, 0x40, "Logic")] public Ref<PlayerNotificationPriority> LevelUpNotificationPriority;
        [RTTI.Member(8, 0x48, "Logic")] public Ref<PlayerNotificationPriority> RewardNotificationPriority;
        [RTTI.Member(10, 0x50, "Display")] public Ref<LocalizedTextResource> PerkRewardText;
        [RTTI.Member(12, 0x58, "Display")] public Ref<LocalizedTextResource> HealthRewardText;
        [RTTI.Member(11, 0x60, "Display")] public Ref<UITexture> UIPerkRewardIcon;
        [RTTI.Member(13, 0x68, "Display")] public Ref<UITexture> UIHealthRewardIcon;
    }

    [RTTI.Serializable(0xFD5B36E7DE24E0C3, GameType.DS)]
    public class XpTable : Resource
    {
        [RTTI.Member(2, 0x20)] public Array<Ref<XpTableEntry>> Entries;
        [RTTI.Member(3, 0x30)] public int MaxLevelNoEntitlements;
    }

    [RTTI.Serializable(0x1762F9C2AE124424, GameType.DS)]
    public class XpTableEntry : CoreObject
    {
        [RTTI.Member(2, 0x20)] public int RequiredXp;
        [RTTI.Member(3, 0x24)] public int PerkPoints;
        [RTTI.Member(4, 0x28)] public Array<Ref<EntityComponentResource>> Components;
        [RTTI.Member(5, 0x38)] public Ref<EntitlementResource> Entitlement;
    }

    [RTTI.Serializable(0xFFAA41DC07174ED7, GameType.DS)]
    public class ZiplineDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x476F33EF275BF949, GameType.DS)]
    public class ZiplineDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Vec3 HandOffset;
        [RTTI.Member(4, 0x30, "Logic")] public float DetectionRadius;
        [RTTI.Member(5, 0x34, "Logic")] public float CollisionRadius;
    }

    [RTTI.Serializable(0xD45838DCC412DDA, GameType.DS)]
    public class ZiplineDetectionComponentSymbols : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x25D4753C2D255674, GameType.DS)]
    public class ZoomSetting : Resource
    {
        [RTTI.Member(3, 0x20, "Logic")] public Ref<CameraPropertiesSetResource> CameraProperties;
        [RTTI.Member(4, 0x28, "Logic")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(5, 0x30, "Logic")] public float CrosshairAppearDelay;
        [RTTI.Member(6, 0x34, "Logic")] public float CrosshairZoomThreshold;
        [RTTI.Member(7, 0x38, "Logic")] public float MoveModifierWhenZoomed;
        [RTTI.Member(8, 0x3C, "Logic")] public float LookModifierWhenZoomed;
        [RTTI.Member(9, 0x40, "Logic")] public float LookModifierWhenZoomedMP;
        [RTTI.Member(10, 0x44, "Logic")] public float MoveModifierWhenFiring;
        [RTTI.Member(11, 0x48, "Logic")] public float LookModifierWhenFiring;
        [RTTI.Member(12, 0x4C, "Logic")] public float LookModifierWhenFiringMP;
        [RTTI.Member(13, 0x50, "Logic")] public float AimNoiseFactor;
        [RTTI.Member(14, 0x54, "Logic")] public float AimLagAimFactor;
        [RTTI.Member(15, 0x58, "Logic")] public float AimLagMoveFactor;
        [RTTI.Member(16, 0x5C, "Logic")] public float DelayBeforeReloading;
        [RTTI.Member(17, 0x60, "Logic")] public float InterpolationDuration;
        [RTTI.Member(18, 0x64, "Logic")] public float ActivationDelay;
        [RTTI.Member(21, 0x68, "Representation")] public Ref<ScreenEffectResource> ScreenEffect;
        [RTTI.Member(22, 0x70, "Representation")] public float ZoomShaderVariable;
        [RTTI.Member(19, 0x78, "Logic")] public Ref<AccuracyOverrideResource> AccuracyOverrideResource;
    }

    [RTTI.Serializable(0x2BA0CF27122ABF15, GameType.DS)]
    public class int_AnimationBoneMotion
    {
        [RTTI.Member(0, 0x0)] public int Key;
        [RTTI.Member(1, 0x8)] public AnimationBoneMotion Value;
    }

    [RTTI.Serializable(0x158820200C1076DF, GameType.DS)]
    public class int_int
    {
        [RTTI.Member(0, 0x0)] public int Key;
        [RTTI.Member(1, 0x4)] public int Value;
    }

    [RTTI.Serializable(0xE1C3ABA25ED99A90, GameType.DS)]
    public class uint32_int
    {
        [RTTI.Member(0, 0x0)] public uint32 Key;
        [RTTI.Member(1, 0x4)] public int Value;
    }

    [RTTI.Serializable(0xB9681CB137FF07D8, GameType.DS)]
    public class uint32_int32
    {
        [RTTI.Member(0, 0x0)] public uint32 Key;
        [RTTI.Member(1, 0x4)] public int32 Value;
    }

    [RTTI.Serializable(0x6439CEA1260D6D95, GameType.DS)]
    public class uint8_float
    {
        [RTTI.Member(0, 0x0)] public uint8 Key;
        [RTTI.Member(1, 0x4)] public float Value;
    }
}
