#pragma warning disable CS0649 // warning CS0649: 'member' is never assigned to, and will always have its default value 'value'.
#pragma warning disable CS0108 // warning CS0108: 'class' hides inherited member 'member'. Use the new keyword if hiding was intended.

namespace Decima.HZD
{
    using int8 = System.SByte;
    using uint8 = System.Byte;
    using int16 = System.Int16;
    using uint16 = System.UInt16;
    using int32 = System.Int32;
    using uint32 = System.UInt32;
    using int64 = System.Int64;
    using uint64 = System.UInt64;

    using wchar = System.Int16;
    using HalfFloat = System.UInt16;

    using MaterialType = System.UInt16;
    using AnimationTagID = System.UInt32;
    using AnimationStateID = System.UInt32;
    using AnimationEventID = System.UInt32;
    using PhysicsCollisionFilterInfo = System.UInt32;

    [RTTI.Serializable(0xC9253625679F824B)]
    public class AIAgent : CoreObject
    {
    }

    [RTTI.Serializable(0xA0CCD4893DD4B37C)]
    public class AIAlertForEntityMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xD6EA3ED65407699E)]
    public class AIArea : CoreObject
    {
    }

    [RTTI.Serializable(0xED9CFA1724DDB7D5)]
    public class AIAreaFilter
    {
        [RTTI.Member(0, 0x0)] public WorldPosition CenterPosition;
        [RTTI.Member(1, 0x18)] public float SquaredRadius;
    }

    [RTTI.Serializable(0xF9D51997F32F3996)]
    public class AIAreaGraph : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Array<Ref<AIArea>> Areas;
    }

    [RTTI.Serializable(0x5CBCBBCF3490E0A8)]
    public class AIAtmosphereBox : WorldNode
    {
        [RTTI.Member(0, 0x0, "General")] public float VisibilityDistance;
        [RTTI.Member(1, 0x74, "General")] public bool UsedForStealthGrass;
    }

    [RTTI.Serializable(0xDC3D43D192F22E9B)]
    public class AIAtmosphereBoxResource : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public Vec3 CenterOffset;
        [RTTI.Member(1, 0x40, "General")] public float Width;
        [RTTI.Member(2, 0x44, "General")] public float Depth;
        [RTTI.Member(3, 0x48, "General")] public float Height;
        [RTTI.Member(4, 0x4C, "General")] public float VisibilityDistance;
        [RTTI.Member(5, 0x50, "General")] public bool UsedForStealthGrass;
    }

    [RTTI.Serializable(0x19FD8E831E5113F5)]
    public class AIAttack : CoreObject
    {
    }

    [RTTI.Serializable(0xE8B50D75E7CD5AB1)]
    public class AIAttackResource : Resource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<BoolProperty> EnabledProperty;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<FloatProperty> HardCooldownProperty;
        [RTTI.Member(2, 0x38, "Properties")] public Ref<FloatProperty> SoftCooldownProperty;
        [RTTI.Member(3, 0x48, "Properties")] public FRange DamageWindow;
        [RTTI.Member(4, 0x50, "Properties")] public Array<Ref<AIProbabilityDataSetResource>> ProbabilityDataSets;
        [RTTI.Member(5, 0x60, "Properties")] public Array<Ref<TagProperty>> TargetExclusionTags;
    }

    [RTTI.Serializable(0x440E95D410A6EA03)]
    public class AIAuralSensor : AISensor
    {
        [RTTI.Member(0, 0x28, "Hearing")] public float UnitDetectionDistance;
        [RTTI.Member(1, 0x2C, "Hearing")] public float Range;
    }

    [RTTI.Serializable(0x8C4D3315BB02FDC9)]
    public class AIAuralStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0x9EE6CB149F71778C)]
    public class AIAuralStimulusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x580143F3571265D2)]
    public class AIAuralStimulusComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AIAuralStimulusResource> StimulusResource;
    }

    [RTTI.Serializable(0x27A2C3A5CE8A243E)]
    public class AIAuralStimulusResource : AIStimulusResource
    {
        [RTTI.Member(0, 0x50, "General")] public float Loudness;
        [RTTI.Member(1, 0x54, "General")] public bool DrownsOutOtherAuralStimuli;
    }

    [RTTI.Serializable(0xEF1D70CB25B047A6)]
    public class AIAvoidanceComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x43DCD4AB09C284B2)]
    public class AIAvoidanceComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public float LookaheadTime;
        [RTTI.Member(1, 0x30, "General")] public Array<BoundingSphere> ShapeSpheres;
    }

    [RTTI.Serializable(0x5E6533FDF6A8641E)]
    public class AIBehaviorGroup : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public Array<Ref<SpawnpointBase>> SpawnPoints;
        [RTTI.Member(1, 0x80, "General")] public Array<Ref<AIBehaviorGroupMember>> Members;
        [RTTI.Member(2, 0x90, "General")] public Array<Ref<SpawnCommand>> SpawnCommands;
        [RTTI.Member(3, 0xA0, "General")] public Array<Ref<EntityComponentResource>> ExtraComponents;
        [RTTI.Member(4, 0xB0, "General")] public bool AutoSpawn;
        [RTTI.Member(5, 0xB1, "General")] public bool JoinSceneGroup;
    }

    [RTTI.Serializable(0xB8AA4CF170323A31)]
    public class AIBehaviorGroupMember : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<SpawnSetupBase> SpawnSetup;
        [RTTI.Member(1, 0x28)] public IRange Amount;
        [RTTI.Member(2, 0x30)] public EAIBehaviorGroupMemberNavmeshPlacmentType NavmeshPlacementType;
        [RTTI.Member(3, 0x34)] public FRange SpawnRange;
        [RTTI.Member(4, 0x3C)] public FRange SpawnHeadingRange;
        [RTTI.Member(5, 0x48)] public Array<Ref<EntityComponentResource>> ExtraComponents;
        [RTTI.Member(6, 0x58)] public Array<Ref<SpawnCommand>> SpawnCommands;
    }

    [RTTI.Serializable(0xF85D0F326A451BE2)]
    public class AIBehaviorGroupMemberComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4FC5CD2D9485522A)]
    public class AIBeingClimbedHtnFactMessage : AIHtnFactMessage
    {
    }

    [RTTI.Serializable(0xD4A2CF8D25E1F13F)]
    public class AIBodyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4E47BD665AACF55)]
    public class AIBodyComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x49A8482B3AD35186)]
    public class AIBodyExplosiveLocation : CoreObject
    {
    }

    [RTTI.Serializable(0x59AE57751C8E3FDB)]
    public class AIBodyGoal : CoreObject
    {
    }

    [RTTI.Serializable(0x5D6050137609F011)]
    public class AIBodyGoalAimAt : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x834993EFEC0CF246)]
    public class AIBodyGoalAnimationAction : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xBEF99D81FC21FE82)]
    public class AIBodyGoalAttack : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x35800A3ADE6B3D34)]
    public class AIBodyGoalCloseCombat : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x78BA7316C360B18A)]
    public class AIBodyGoalContextualSpeech : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xBCE3A3E43EDB41B9)]
    public class AIBodyGoalCustomAction : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xC4D46A5A44FA03FF)]
    public class AIBodyGoalFaceTowards : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x4B60FF37AF4A01FE)]
    public class AIBodyGoalFacialExpression : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xD88AB485E5F419C2)]
    public class AIBodyGoalFly : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x73F11223330697C9)]
    public class AIBodyGoalGesture : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x9CE211FBA70E0749)]
    public class AIBodyGoalGlance : AIBodyGoalLookAt
    {
    }

    [RTTI.Serializable(0xBD582C422A2104E0)]
    public class AIBodyGoalHoldEntityAction : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x6571EE0023871B91)]
    public class AIBodyGoalHover : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x426B6563765FC6DC)]
    public class AIBodyGoalImmediateWeaponLoad : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xB6F4E798B2A34343)]
    public class AIBodyGoalLand : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xBB01598B7C9D830)]
    public class AIBodyGoalListen : AIBodyGoalLookAt
    {
    }

    [RTTI.Serializable(0x85E2674761EF6EFB)]
    public class AIBodyGoalLookAt : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0x5543F5626A9230E9)]
    public class AIBodyGoalMotionScatterBlendAnimation : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xB5E2BE809E0B460D)]
    public class AIBodyGoalMountObject : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x44D98BFCDBC43F3A)]
    public class AIBodyGoalMove : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xE9969FC0977E0005)]
    public class AIBodyGoalPerch : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x2350A6C575F8D655)]
    public class AIBodyGoalPlayMonitoredAnimation : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xFBCCA7593743B290)]
    public class AIBodyGoalSelectWeapon : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x15FE89D16F3453B6)]
    public class AIBodyGoalSetDesire : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x64381B112410932E)]
    public class AIBodyGoalShieldSelf : AIBodyGoalTarget
    {
    }

    [RTTI.Serializable(0xAB8D407EA3D771FE)]
    public class AIBodyGoalSpecialMove : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x25986E6170881F39)]
    public class AIBodyGoalStance : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xE8E44387F4A3D5CC)]
    public class AIBodyGoalStowWeapon : AIBodyGoal
    {
        [RTTI.Member(0, 0x28)] public CPtr<AIBodyInterface> Body;
    }

    [RTTI.Serializable(0x89342C240793D04B)]
    public class AIBodyGoalSwimFlee : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x67830E41A118B4B0)]
    public class AIBodyGoalSwimWander : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x63F000889947C30C)]
    public class AIBodyGoalTakeOff : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x6A5B69600ECD5E43)]
    public class AIBodyGoalTalk : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xC3481969F7A57025)]
    public class AIBodyGoalTarget : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xAFB714856E9DED18)]
    public class AIBodyGoalUnmountObject : AIBodyGoal
    {
    }

    [RTTI.Serializable(0xA4963F3D6B2B6027)]
    public class AIBodyGoalUseAttachableObject : AIBodyGoalUseObject
    {
    }

    [RTTI.Serializable(0xEF282BCC719F332)]
    public class AIBodyGoalUseInventoryItem : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x48CA0E7E78A40FD6)]
    public class AIBodyGoalUseObject : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x9D58B06EEE00F460)]
    public class AIBodyGoalWalk : AIBodyGoalMove
    {
    }

    [RTTI.Serializable(0x1EAB016020FDA55D)]
    public class AIBodyGoalWeaponLoad : AIBodyGoal
    {
    }

    [RTTI.Serializable(0x28E5DE61B6FAE9D5)]
    public class AIBodyHumanoid : CoreObject
    {
    }

    [RTTI.Serializable(0xF97C394E7640594E)]
    public class AIBodyInteractiveEntity : CoreObject
    {
    }

    [RTTI.Serializable(0x6F596DFC05AE70FA)]
    public class AIBodyInterface
    {
    }

    [RTTI.Serializable(0x72A06E01C19B745B)]
    public class AIBodyInterfaceGame : AIBodyInterface
    {
    }

    [RTTI.Serializable(0xFE205A59FB716297)]
    public class AIBodyPartBase : Resource
    {
    }

    [RTTI.Serializable(0xC341ED9726DD3231)]
    public class AIBodyPartResource : AIBodyPartBase
    {
    }

    [RTTI.Serializable(0x9074915484E46E4E)]
    public class AIBodyPartResourceSet : AIBodyPartBase
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<AIBodyPartResource>> BodyResources;
    }

    [RTTI.Serializable(0x9FE03842A6E5C5DD)]
    public class AIBodyPlayAnimationObject : CoreObject
    {
    }

    [RTTI.Serializable(0x9E59A1CE13F3921A)]
    public class AIBodySoldier : AIBodyHumanoid
    {
    }

    [RTTI.Serializable(0xF9450394489CB5B8)]
    public class AIBodyTurret : AIBodyInterfaceGame
    {
    }

    [RTTI.Serializable(0xE37FE42F8C67431E)]
    public class AIBodyTurretComponent : AIBodyComponent
    {
    }

    [RTTI.Serializable(0x3DBEE534607B2AF0)]
    public class AIBodyTurretComponentResource : AIBodyComponentResource
    {
    }

    [RTTI.Serializable(0xD80188BA64A9FF8)]
    public class AIBurstBasedWeaponOperationResource : AIWeaponOperationResource
    {
        [RTTI.Member(0, 0x28, "General")] public IRange NormalBurstSize;
        [RTTI.Member(1, 0x30, "General")] public IRange InitialBurstSize;
        [RTTI.Member(2, 0x38, "General")] public int BurstImproveCount;
        [RTTI.Member(3, 0x3C, "General")] public bool KeepRunningWhileWeaponIsOperating;
    }

    [RTTI.Serializable(0x811ACAAAFDA3CA4F)]
    public class AICargoCrabCrateComponent : AIUsableComponent
    {
        [RTTI.Member(0, 0x78)] public float BroadcastDistance;
    }

    [RTTI.Serializable(0x2D4F6277E730BE1)]
    public class AICargoCrabCrateComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x459BE2A68EF4257A)]
    public class AICloseCombatWeaponInterface : AIInventoryWeaponInterface
    {
    }

    [RTTI.Serializable(0x500700C09B84B51B)]
    public class AIColumnMemberFormation : AIMemberFormation
    {
    }

    [RTTI.Serializable(0x83662DF6260C8DE2)]
    public class AIColumnMemberFormationResource : AIMemberFormationResource
    {
        [RTTI.Member(0, 0x30, "Layout")] public int MembersPerRow;
    }

    [RTTI.Serializable(0x7A0C01C5D5B6A42C)]
    public class AICombatSituationMessageHandlerResource : Resource
    {
    }

    [RTTI.Serializable(0xEFA976BF27CB049E)]
    public class AICombatSituationMessageHandlerResourceSet : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<AICombatSituationMessageHandlerResource>> Handlers;
    }

    [RTTI.Serializable(0x663BFDDB40FB9008)]
    public class AICombatSituationResource : Resource
    {
        [RTTI.Member(0, 0x28, "AlertLevels")] public float DurationGettingHit;
        [RTTI.Member(1, 0x2C, "AlertLevels")] public float DurationUnderAttack;
        [RTTI.Member(2, 0x30, "AlertLevels")] public float DurationCombat;
        [RTTI.Member(3, 0x34, "AlertLevels")] public float DurationThreatsIdentified;
        [RTTI.Member(4, 0x38, "AlertLevels")] public float DurationPresenceConfirmed;
        [RTTI.Member(5, 0x3C, "AlertLevels")] public float DurationPresenceSuspected;
        [RTTI.Member(6, 0x40, "AlertLevels")] public EAlertLevel MinimumPropagatedLevel;
        [RTTI.Member(7, 0x44, "AlertLevels")] public EAlertLevel CorpseAlertLevel;
        [RTTI.Member(8, 0x48, "Threats")] public float SuspicionBuildupTime;
        [RTTI.Member(9, 0x4C, "Threats")] public float SuspicionFalloffTime;
        [RTTI.Member(10, 0x50, "Threats")] public float SuspicionMinimumDuration;
        [RTTI.Member(11, 0x54, "Threats")] public float ConfirmationBuildupTime;
        [RTTI.Member(12, 0x58, "Threats")] public float ConfirmationFalloffTime;
        [RTTI.Member(13, 0x5C, "Threats")] public float IdentificationBuildupTime;
        [RTTI.Member(14, 0x60, "Threats")] public float IdentificationFalloffTime;
        [RTTI.Member(15, 0x68, "MessageHandlers")] public Ref<AICombatSituationMessageHandlerResourceSet> MessageHandlerSet;
        [RTTI.Member(16, 0x70, "Threats")] public float RemovalTime;
        [RTTI.Member(17, 0x74, "Threats")] public float TpaDurationDeducedExact;
        [RTTI.Member(18, 0x78, "Threats")] public float TpaDurationDeducedRough;
        [RTTI.Member(19, 0x7C, "Threats")] public float ConfirmedLostRemovalTime;
        [RTTI.Member(20, 0x80, "Threats")] public bool TpaAlwaysKnowsExactPositions;
        [RTTI.Member(21, 0x84, "Threats")] public float DamageReceiverRemovalTime;
        [RTTI.Member(22, 0x88, "Threats")] public float AttackTargetHistoryRemovalTime;
        [RTTI.Member(23, 0x8C, "Threats")] public float AttackerRemovalTime;
        [RTTI.Member(24, 0x90, "Suppression")] public float Damping;
        [RTTI.Member(25, 0x94, "Suppression")] public float IncrementWhenHit;
        [RTTI.Member(26, 0x98, "Suppression")] public float IncrementNearbyImpact;
        [RTTI.Member(27, 0x9C, "Suppression")] public float NearbyImpactRadius;
        [RTTI.Member(28, 0xA0, "Suppression")] public float FriendlyFireSoundRange;
        [RTTI.Member(29, 0xA4, "DangerAreas")] public bool IsAfraidOfElectricity;
        [RTTI.Member(30, 0xA5, "DangerAreas")] public bool IsAfraidOfFire;
        [RTTI.Member(31, 0xA6, "DangerAreas")] public bool IsAfraidOfExplosion;
        [RTTI.Member(32, 0xA7, "DangerAreas")] public bool IsAfraidOfVehicle;
        [RTTI.Member(33, 0xA8, "DangerAreas")] public bool IsAfraidOfCryo;
        [RTTI.Member(34, 0xA9, "DangerAreas")] public bool IsAfraidOfSequence;
    }

    [RTTI.Serializable(0xD51F4E6C08FA20C7)]
    public class AIContextHintResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0xDD77445804326DED)]
    public class AIContextResource : Resource
    {
        [RTTI.Member(0, 0x38, "Obstacles")] public uint16 SoftObstacleCosts;
        [RTTI.Member(1, 0x3C, "Obstacles")] public int IgnoreDestructDamage;
        [RTTI.Member(2, 0x40, "Obstacles")] public int AvoidDestructDamage;
        [RTTI.Member(3, 0x44, "Obstacles")] public bool AvoidDynamicObstacles;
        [RTTI.Member(4, 0x48, "Obstacles")] public float MaxObstacleAvoidanceAngle;
        [RTTI.Member(5, 0x4C, "DangerAreaAvoidance")] public int32 PathDangerAreaCost;
        [RTTI.Member(6, 0x50, "GameplayAvoidance")] public int32 GameplayAreaCost;
        [RTTI.Member(7, 0x54, "StealthAreaAvoidance")] public int32 StealthAreaCost;
        [RTTI.Member(8, 0x58, "Movement")] public EMoveStanceChoice Stance;
        [RTTI.Member(9, 0x60, "Movement")] public Ref<AISkillContext> SkillContext;
        [RTTI.Member(10, 0x68, "Movement")] public FRange SpeedModifier;
        [RTTI.Member(11, 0x70, "Obstacles")] public FRange ObstableAvoidanceSpeedModifierRange;
        [RTTI.Member(12, 0x78, "Movement")] public bool ClampToDestination;
        [RTTI.Member(13, 0x7C, "Movement")] public float MinimumDuration;
        [RTTI.Member(14, 0x80, "Movement")] public int ClaimCost;
        [RTTI.Member(15, 0x84, "Movement")] public float SmoothTangentLengthModifier;
        [RTTI.Member(16, 0x88, "Aiming")] public Ref<AIScanContextResource> ScanResource;
        [RTTI.Member(17, 0x90, "Aiming")] public Ref<AIScanContextResource> AttackScanResource;
        [RTTI.Member(18, 0x98, "Carry")] public bool LowerWeapon;
        [RTTI.Member(19, 0xA0, "PathObjects")] public Array<Ref<AIPathObjectCategory>> AllowedCategories;
    }

    [RTTI.Serializable(0x466B76E2221EC85E)]
    public class AIContextResourceSet : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<AIContextResource>> AIContextResources;
        [RTTI.Member(1, 0x38, "General")] public Ref<AIContextResource> InitialContext;
    }

    [RTTI.Serializable(0x848F06107A40C2EF)]
    public class AIContextualSpeechEventMap : Resource
    {
        [RTTI.Member(0, 0x38, "General")] public Array<Ref<AIContextualSpeechEventMapPair>> ContextualSpeechEventPairs;
    }

    [RTTI.Serializable(0xC3BE52C878B3D211)]
    public class AIContextualSpeechEventMapPair : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String SignalName;
        [RTTI.Member(1, 0x30, "General")] public Ref<ContextualSpeechEvent> ContextualSpeechEvent;
    }

    [RTTI.Serializable(0xA6AF7D2F2F99388C)]
    public class AIControlledEntityInterface : AIWeaponInterfaceGame
    {
    }

    [RTTI.Serializable(0x18BF115111921DDD)]
    public class AICorpseFoundMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x915E8392DE2FC4CD)]
    public class AICorpseFoundMessageResource : AIDynamicDataMessageResource
    {
        [RTTI.Member(0, 0x28, "General")] public String CorpseIdentifier;
    }

    [RTTI.Serializable(0xA97F2B6EF0A3A475)]
    public class AICorpseMessageHandlerResource : AICombatSituationMessageHandlerResource
    {
    }

    [RTTI.Serializable(0x65707E640DB9B656)]
    public class AICoverManager : CoreObject
    {
        [RTTI.Member(0, 0x40, "Settings")] public Ref<AICoverNodeType> DefaultCoverNodeType;
    }

    [RTTI.Serializable(0x2998476C6193D85E)]
    public class AICoverNodeTile : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public IVec2 Coordinate;
        [RTTI.Member(1, 0x28, "General")] public Ref<AICoverNodeType> CoverNodeType;
        [RTTI.Member(2, 0x30, "Maps")] public Ref<AIStaticCoverMap> Prone;
        [RTTI.Member(3, 0x38, "Maps")] public Ref<AIStaticCoverMap> Crouched;
        [RTTI.Member(4, 0x40, "Maps")] public Ref<AIStaticCoverMap> Standing;
    }

    [RTTI.Serializable(0x5FCE7EC146906528)]
    public class AICoverNodeType : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x28, "Settings")] public Ref<AIStaticCoverMapSettings> Prone;
        [RTTI.Member(2, 0x30, "Settings")] public Ref<AIStaticCoverMapSettings> Crouched;
        [RTTI.Member(3, 0x38, "Settings")] public Ref<AIStaticCoverMapSettings> Standing;
    }

    [RTTI.Serializable(0xBEDE8296203C3827)]
    public class AICoverPlaneComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEEBEEF84CDE8933B)]
    public class AICoverPlaneComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x30, "General")] public Vec3 LocalBottomLeft;
        [RTTI.Member(1, 0x40, "General")] public Vec3 LocalTopRight;
    }

    [RTTI.Serializable(0xD3FB228AD22D010E)]
    public class AIDangerArea : CoreObject
    {
        [RTTI.Member(0, 0x38, "General")] public String Name;
        [RTTI.Member(1, 0x50, "General")] public float ExpiryTime;
    }

    [RTTI.Serializable(0xE9AF21DDD09E4F26)]
    public class AIDangerAreaBox : AIDangerArea
    {
        [RTTI.Member(0, 0x70)] public WorldOrientedBox Box;
    }

    [RTTI.Serializable(0xD74E9E455102F7FD)]
    public class AIDangerAreaCapsule : AIDangerArea
    {
        [RTTI.Member(0, 0x70)] public TaperedCapsule Capsule;
    }

    [RTTI.Serializable(0x9EC221C8AC625D00)]
    public class AIDangerAreaSphere : AIDangerArea
    {
        [RTTI.Member(0, 0x68)] public WorldBoundingSphere Sphere;
    }

    [RTTI.Serializable(0xF299C799A9D8E45C)]
    public class AIDarkBox : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public float LightIntensity;
    }

    [RTTI.Serializable(0x149112F396C8A1F4)]
    public class AIDefendArea : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "Logic")] public float IdleRadius;
        [RTTI.Member(1, 0x74, "Logic")] public float AcquisitionIdleRadiusModifier;
        [RTTI.Member(2, 0x78, "Logic")] public float CombatRadius;
        [RTTI.Member(3, 0x80, "Logic")] public Array<Ref<AIPatrolPath>> PatrolPaths;
    }

    [RTTI.Serializable(0x3DA07F69078D2462)]
    public class AIDefendAreaSet : ParentWorldNode
    {
        [RTTI.Member(0, 0x80, "General")] public String Name;
        [RTTI.Member(1, 0x88, "Logic")] public Array<Ref<AIDefendArea>> Nodes;
    }

    [RTTI.Serializable(0x89C500A0ECDD956A)]
    public class AIDiamondGroupFormation : AIGroupFormation
    {
    }

    [RTTI.Serializable(0x1551C0945760E58D)]
    public class AIDiamondGroupFormationResource : AIGroupFormationResource
    {
        [RTTI.Member(0, 0x38, "TagProperties")] public TagPropertyLink FormationCenterTag;
    }

    [RTTI.Serializable(0xDB09802B75F3306A)]
    public class AIDirectableAgent : AIAgent
    {
    }

    [RTTI.Serializable(0x71C9578DEBAA1ADB)]
    public class AIDynamicCoverManager : CoreObject
    {
    }

    [RTTI.Serializable(0xA58CC1140CE77722)]
    public class AIDynamicDataMessageResource : AIMessageResource
    {
    }

    [RTTI.Serializable(0xFD546CFBBE875CCE)]
    public class AIDynamicObstacleCircleResource : AIDynamicObstacleResource
    {
        [RTTI.Member(0, 0x34, "Shape")] public float Radius;
    }

    [RTTI.Serializable(0xBEB19E7D7AE502DF)]
    public class AIDynamicObstacleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3B1CFDEAD479C5B5)]
    public class AIDynamicObstacleComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AIDynamicObstacleResource> ObstacleResource;
        [RTTI.Member(1, 0x30, "AvoidanceSmoothing")] public bool SmoothAvoidance;
        [RTTI.Member(2, 0x34, "AvoidanceSmoothing")] public float AvoidanceAngularAcceleration;
        [RTTI.Member(3, 0x40, "DangerArea")] public Vec2 Scale;
        [RTTI.Member(4, 0x50, "DangerArea")] public int PathSegments;
    }

    [RTTI.Serializable(0xDEC2C53188D06291)]
    public class AIDynamicObstacleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x270A882F55962F3D)]
    public class AIDynamicObstacleEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<AIDynamicObstacleCircleResource> ObstacleResource;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<AIFaction> ObstacleFaction;
    }

    [RTTI.Serializable(0xC309AF0FE3789EAB)]
    public class AIDynamicObstacleRectangleResource : AIDynamicObstacleResource
    {
        [RTTI.Member(0, 0x34, "Shape")] public Vec2Pack HalfExtent;
        [RTTI.Member(1, 0x40, "Shape")] public Vec2 Center;
    }

    [RTTI.Serializable(0x32359BD04593F17A)]
    public class AIDynamicObstacleResource : Resource
    {
        [RTTI.Member(0, 0x50, "General")] public int AvoidancePriority;
    }

    [RTTI.Serializable(0x2C8C97D244DDCFF8)]
    public class AIEventMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x95B798AC42B4E45C)]
    public class AIEventMessageResource : AIMessageResource
    {
        [RTTI.Member(0, 0x28, "General")] public String EventId;
    }

    [RTTI.Serializable(0xE6F317E8E6FA4B46)]
    public class AIExportGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4BD4914D71201801)]
    public class AIExpressor
    {
    }

    [RTTI.Serializable(0x724113B1AC19B92D)]
    public class AIExpressorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAFB748A0ADAAFE41)]
    public class AIExpressorComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xA81742D3853236AD)]
    public class AIExtraAttackNodesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x19A24F0697477026)]
    public class AIExtraAttackNodesComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EAIAttackType UserDataAIAttackType;
        [RTTI.Member(1, 0x30, "Logic")] public Array<String> UserDataAttackNodeBones;
    }

    [RTTI.Serializable(0xCFBBDE5C4AADBDF9)]
    public class AIEyeColorHintResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0xB8A4E0ECEECC2413)]
    public class AIFaction : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public String ShortName;
        [RTTI.Member(1, 0x40, "General")] public RGBAColor Color;
        [RTTI.Member(2, 0x48, "General")] public Array<CPtr<AIFaction>> Enemies;
        [RTTI.Member(3, 0x58, "General")] public Array<CPtr<AIFaction>> FriendlyFactionsExludedForLOFChecks;
        [RTTI.Member(4, 0x68, "General")] public int ClaimGroup;
    }

    [RTTI.Serializable(0x761B37EE1E5F8E02)]
    public class AIFollowAnimationAimWeaponOperationInstance : AIWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0x3393F19806D57915)]
    public class AIFollowAnimationAimWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
    }

    [RTTI.Serializable(0x23E1460EE9FAAD72)]
    public class AIFollowTerrainWeaponOperationInstance : AISniperWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0xE78862AE568E0484)]
    public class AIFollowTerrainWeaponOperationResource : AISniperWeaponOperationResource
    {
    }

    [RTTI.Serializable(0x9C2D70C283BA03CA)]
    public class AIFormation : CoreObject
    {
    }

    [RTTI.Serializable(0x34DB2B921522CB4D)]
    public class AIFormationResource : Resource
    {
        [RTTI.Member(0, 0x28, "SubGroups")] public String FormationHint;
    }

    [RTTI.Serializable(0x5FE345983B70EF33)]
    public class AIGameplayArea : NavMeshObject
    {
    }

    [RTTI.Serializable(0x286E4489AEC50AAB)]
    public class AIGenericEventMessageHandlerResource : AICombatSituationMessageHandlerResource
    {
    }

    [RTTI.Serializable(0x14D16EDBA9CB7774)]
    public class AIGroup : AIDirectableAgent
    {
    }

    [RTTI.Serializable(0x9C8D10CB69B2CFF5)]
    public class AIGroupCombatCoordinationRolesDistributorResource : AIGroupRolesDistributorResource
    {
    }

    [RTTI.Serializable(0x67F66350C8C51525)]
    public class AIGroupFormation : AIFormation
    {
    }

    [RTTI.Serializable(0xEA26859A4BE29431)]
    public class AIGroupFormationResource : AIFormationResource
    {
        [RTTI.Member(0, 0x30, "SubGroups")] public Ref<AIMemberFormationResource> SubgroupFallBackFormationResource;
    }

    [RTTI.Serializable(0x989013778ADD4AE2)]
    public class AIGroupGraphProgramSpawnCommand : SpawnCommand
    {
        [RTTI.Member(0, 0x60)] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0xC9B12C721D99141D)]
    public class AIGroupHookHtnPlanner : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4E614158948FA1CB)]
    public class AIGroupHookHtnPlannerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AIHTNPlannerResource> PlannerResource;
    }

    [RTTI.Serializable(0x27E6D5044E6AAB99)]
    public class AIGroupImportanceBasedRolesDistributorResource : AIGroupRolesDistributorResource
    {
    }

    [RTTI.Serializable(0xAE351ECCFD284337)]
    public class AIGroupPath : CoreObject
    {
    }

    [RTTI.Serializable(0x7C05DC64171E9B69)]
    public class AIGroupResource : Resource
    {
        [RTTI.Member(0, 0x28, "Behaviour")] public Ref<AIGroupHookHtnPlannerResource> HookResource;
        [RTTI.Member(1, 0x30, "Roles")] public Array<Ref<AIGroupRoleDescriptorResource>> RoleDescriptors;
        [RTTI.Member(2, 0x40, "GroupInitialHierarchy")] public Array<Ref<AIGroupResource>> InitialGroupHierarchy;
        [RTTI.Member(3, 0x50, "Roles")] public Ref<AIGroupRolesDistributorResource> EssentialRolesDistributor;
        [RTTI.Member(4, 0x58, "Roles")] public Ref<AIGroupRolesDistributorResource> OptionalRolesDistributor;
        [RTTI.Member(5, 0x60, "Roles")] public Ref<AIGroupRolesValidatorResource> RolesValidator;
        [RTTI.Member(6, 0x68, "Behaviour")] public Array<String> SupportedBehaviorIDs;
        [RTTI.Member(7, 0x90, "General")] public String GroupID;
        [RTTI.Member(8, 0x98, "GroupMovement")] public Array<Ref<AIFormationResource>> Formations;
        [RTTI.Member(9, 0xA8, "Perception")] public bool SynchronizesThreatInfo;
    }

    [RTTI.Serializable(0xEF3BB36174E9FE3A)]
    public class AIGroupRole : RTTIObject
    {
    }

    [RTTI.Serializable(0x70A5CDDBA2A648EF)]
    public class AIGroupRoleDescriptorResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String ID;
        [RTTI.Member(1, 0x30, "Tags")] public Array<Ref<TagProperty>> InclusionTags;
        [RTTI.Member(2, 0x40, "Tags")] public Array<Ref<TagProperty>> ExclusionTags;
        [RTTI.Member(3, 0x50, "RoleInstancing")] public int EssentialInstancesCount;
        [RTTI.Member(4, 0x54, "RoleInstancing")] public int OptionalInstancesCount;
        [RTTI.Member(5, 0x60, "ParentDescriptor")] public Ref<AIGroupRoleDescriptorResource> InheritTagsFromParent;
    }

    [RTTI.Serializable(0xF6C729BC5CF904FC)]
    public class AIGroupRolesDistributorResource : Resource
    {
        [RTTI.Member(0, 0x28)] public String Identifier;
    }

    [RTTI.Serializable(0xB97F05B34966C174)]
    public class AIGroupRolesValidatorResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<RoleValidationRule> Rules;
    }

    [RTTI.Serializable(0xFF51D63A8C3C1937)]
    public class AIHTNPlannerDaemon : RTTIObject
    {
    }

    [RTTI.Serializable(0x519114017B35F90E)]
    public class AIHTNPlannerDaemonAgent : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0xC7F1B2634D8E367D)]
    public class AIHTNPlannerDaemonAirMovement : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x7AD566E7FB508376)]
    public class AIHTNPlannerDaemonAirMovementGame : AIHTNPlannerDaemonAirMovement
    {
    }

    [RTTI.Serializable(0x1B3BD8D10D1634D8)]
    public class AIHTNPlannerDaemonAlertLevel : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x9BED4011F8B4BFA9)]
    public class AIHTNPlannerDaemonAquatic : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xFCFD1030CD03E6B4)]
    public class AIHTNPlannerDaemonAquaticResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(0, 0x28, "DeepWater")] public float DeepWaterMinDepth;
        [RTTI.Member(1, 0x30, "DeepWater")] public Array<Vec2> WaterDepthMeasurePoints;
    }

    [RTTI.Serializable(0x540AAF758810BAE)]
    public class AIHTNPlannerDaemonAttackPicker : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x67399D3A09B90F82)]
    public class AIHTNPlannerDaemonBodyState : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC46A08B6879671F3)]
    public class AIHTNPlannerDaemonCargoCrabCrates : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x37CD8CE666A992F3)]
    public class AIHTNPlannerDaemonCollective : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x1720BD8F07AED644)]
    public class AIHTNPlannerDaemonCollectiveResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(0, 0x28, "AirNavigation")] public Array<GroupImportanceEntry> GroupImportances;
    }

    [RTTI.Serializable(0xEE0D8A4A19F96127)]
    public class AIHTNPlannerDaemonCombatHistory : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x8722385043D53B1C)]
    public class AIHTNPlannerDaemonCombatHistoryResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float NearbyThreatsDistance;
        [RTTI.Member(1, 0x2C, "Logic")] public float ThresholdToUnreachable;
        [RTTI.Member(2, 0x30, "Logic")] public float ThresholdToReachable;
    }

    [RTTI.Serializable(0xF186170D7F7E24D9)]
    public class AIHTNPlannerDaemonCoreObjects : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x60083161BB886DF3)]
    public class AIHTNPlannerDaemonCoreObjectsResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<Resource>> DirectlyLinkedResources;
        [RTTI.Member(1, 0x38, "Logic")] public Array<UUIDRef<CoreObject>> CoreObjectUUIDRefs;
        [RTTI.Member(2, 0x48, "Logic")] public Array<String> CoreObjectNames;
    }

    [RTTI.Serializable(0xDFEAD8249D4B4C3A)]
    public class AIHTNPlannerDaemonDebugDrawUtilities : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xB727AF4E0670F974)]
    public class AIHTNPlannerDaemonDefendArea : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x4888293365100831)]
    public class AIHTNPlannerDaemonDestructibles : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC70066841DBE9F65)]
    public class AIHTNPlannerDaemonFindAttackLocation : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x219D627223E87A18)]
    public class AIHTNPlannerDaemonFindCoverLocation : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x9D64A7A013F46638)]
    public class AIHTNPlannerDaemonFriendlies : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x4A76966B097EB70F)]
    public class AIHTNPlannerDaemonFriendliesGame : AIHTNPlannerDaemonFriendlies
    {
    }

    [RTTI.Serializable(0x7ECD019C0F56E1CE)]
    public class AIHTNPlannerDaemonFriendliesGameResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public BoolPropertyLink CanBeGreetedLink;
    }

    [RTTI.Serializable(0x700F143AC80DAAF8)]
    public class AIHTNPlannerDaemonGameInfo : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF46E32F0066594AB)]
    public class AIHTNPlannerDaemonGameplayArea : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xACBBB0214FC3AB9B)]
    public class AIHTNPlannerDaemonGroup : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x36E1D37187D8BE5)]
    public class AIHTNPlannerDaemonGroupCombatCircle : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xADF24F1D81388F89)]
    public class AIHTNPlannerDaemonGroupCombatSituation : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xBD44F97157D77EBB)]
    public class AIHTNPlannerDaemonGroupCoordination : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xA8B02E9D0AF4D22C)]
    public class AIHTNPlannerDaemonGroupCoordinationRequest : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xF3EB31B9245C42F9)]
    public class AIHTNPlannerDaemonGroupHierarchy : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x3A93671B6847BF72)]
    public class AIHTNPlannerDaemonGroupKnownThreats : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x2FAAE5A8C45467C4)]
    public class AIHTNPlannerDaemonGroupPositioning : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x92871A27445112D9)]
    public class AIHTNPlannerDaemonGroupRoles : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xFB28D4269BA8232F)]
    public class AIHTNPlannerDaemonGroupRolesDebug : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xF6A8FF9585F5C786)]
    public class AIHTNPlannerDaemonGroupRolesDebugResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(0, 0x28, "Default")] public Array<Ref<GroupRolesDebugResource>> RolesDebugInfo;
    }

    [RTTI.Serializable(0x5FDAC50E7A6F167D)]
    public class AIHTNPlannerDaemonGroupState : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0x384866B90629707F)]
    public class AIHTNPlannerDaemonGroupUtils : AIHTNPlannerDaemonGroup
    {
    }

    [RTTI.Serializable(0xB3F3EC03DF768FB0)]
    public class AIHTNPlannerDaemonIndividual : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xBB89533FBDDD956B)]
    public class AIHTNPlannerDaemonInventory : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x1D8E345DAFDA2413)]
    public class AIHTNPlannerDaemonMarkerEntity : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x3038BF7F27DF3DFC)]
    public class AIHTNPlannerDaemonNavMesh : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x96AB1B4DF89A468F)]
    public class AIHTNPlannerDaemonOWL : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x3A96E5559F4BD3BF)]
    public class AIHTNPlannerDaemonPathFinder : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC11E9C5C99B61E49)]
    public class AIHTNPlannerDaemonPerchPoints : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xCB4BAC22D8DB3837)]
    public class AIHTNPlannerDaemonPlayerInfo : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x927367C5599C4B01)]
    public class AIHTNPlannerDaemonPositionPicker : AIHTNPlannerDaemonPositionPickerAgent
    {
    }

    [RTTI.Serializable(0x2E9E4F2AF7A6E826)]
    public class AIHTNPlannerDaemonPositionPickerAgent : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x45A338755BAEF2E9)]
    public class AIHTNPlannerDaemonPositionPickerGame : AIHTNPlannerDaemonPositionPicker
    {
    }

    [RTTI.Serializable(0xF98180FF8A71BA28)]
    public class AIHTNPlannerDaemonProbabilitySet : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xD21D20E4780CDAA0)]
    public class AIHTNPlannerDaemonProperties : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF7183BAE030073F0)]
    public class AIHTNPlannerDaemonPropertiesResource : AIHTNPlannerDaemonResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<PropertyNameLinkMapEntry> PropertyNameIDMapping;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<PropertyContainerResource> ContainerResource;
        [RTTI.Member(2, 0x40, "Logic")] public bool EntityFactsEnabled;
    }

    [RTTI.Serializable(0xBD6CE47DBD7A28A4)]
    public class AIHTNPlannerDaemonResource : Resource
    {
    }

    [RTTI.Serializable(0x1161452F99D4E219)]
    public class AIHTNPlannerDaemonResourceSet : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<AIHTNPlannerDaemonResource>> DaemonResources;
    }

    [RTTI.Serializable(0xC9F90B1A0A361EBE)]
    public class AIHTNPlannerDaemonRobotState : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x219887F2070E44C6)]
    public class AIHTNPlannerDaemonRoute : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0xE7E278237DF1C8A4)]
    public class AIHTNPlannerDaemonRouteGame : AIHTNPlannerDaemonRoute
    {
    }

    [RTTI.Serializable(0x58876FB08FF410CD)]
    public class AIHTNPlannerDaemonSmartObjects : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x745DCE934790B7C2)]
    public class AIHTNPlannerDaemonSpecialMoves : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x55D916133DBD7167)]
    public class AIHTNPlannerDaemonTeamCoordination : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF71EDE4FD467730C)]
    public class AIHTNPlannerDaemonTeamMember : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xEF8362E6905715B4)]
    public class AIHTNPlannerDaemonTerrainInfo : AIHTNPlannerDaemonAgent
    {
    }

    [RTTI.Serializable(0x170CD50C0F4835C8)]
    public class AIHTNPlannerDaemonTerrainInfoIndividual : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xAFE81D57D53342C2)]
    public class AIHTNPlannerDaemonThreatReappearanceLocation : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xF0C445539FE119E1)]
    public class AIHTNPlannerDaemonUseLocations : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x4AE38FCAAE1FCAB0)]
    public class AIHTNPlannerDaemonVisibility : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x53C5721A0B614AC1)]
    public class AIHTNPlannerDaemonWildlife : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xD721FC91C48FED2A)]
    public class AIHTNPlannerResource : ProgramResource
    {
        [RTTI.Member(0, 0x60, "General")] public Array<String> DaemonNames;
        [RTTI.Member(1, 0x70, "General")] public Array<Ref<AIHTNPlannerDaemonResource>> DaemonResources;
        [RTTI.Member(2, 0x80, "General")] public Array<Ref<AIHTNPlannerDaemonResourceSet>> DaemonResourceSets;
        [RTTI.Member(3, 0x90, "General")] public String DomainFileName;
    }

    [RTTI.Serializable(0xEE4985F240A1537D)]
    public class AIHTNPrimitiveTask : RTTIObject
    {
    }

    [RTTI.Serializable(0x15AC0D61934F92DF)]
    public class AIHTNPrimitiveTaskAddBuddy : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6E10DF4943CE8DA3)]
    public class AIHTNPrimitiveTaskAgent : AIHTNPrimitiveTask
    {
    }

    [RTTI.Serializable(0xA94A4A32E555C7DC)]
    public class AIHTNPrimitiveTaskAirStrafe : AIHTNPrimitiveTaskFlySegment
    {
    }

    [RTTI.Serializable(0xFD3C0778A768FBE0)]
    public class AIHTNPrimitiveTaskAlertFor : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA05193F2AD5C8CDB)]
    public class AIHTNPrimitiveTaskApplyAntiStealthPatch : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xFF584C7DC04FB7EB)]
    public class AIHTNPrimitiveTaskAssumeAIContext : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x190CCE3CA7C16C22)]
    public class AIHTNPrimitiveTaskAssumeStance : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x430856CF575BB9EE)]
    public class AIHTNPrimitiveTaskBeginPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xD96FB135AAD504E4)]
    public class AIHTNPrimitiveTaskBeginSecondaryPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x1F77823987BA10A7)]
    public class AIHTNPrimitiveTaskBehaviorScopeIndividual : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xEC7A2413E3EBF8C7)]
    public class AIHTNPrimitiveTaskBehaviorScopedForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x693B380224DFDF99)]
    public class AIHTNPrimitiveTaskBehaviorScopedRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x278FB55550D75588)]
    public class AIHTNPrimitiveTaskBlackboardForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x73164C5E7ED44622)]
    public class AIHTNPrimitiveTaskBlackboardRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x40129E5FBD840EF5)]
    public class AIHTNPrimitiveTaskBroadcast : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xDEEC8448E19BD885)]
    public class AIHTNPrimitiveTaskClaimPosition : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x9EFA02F0D93D83A2)]
    public class AIHTNPrimitiveTaskClearAreaRestrictions : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xEED6B0023C359DB2)]
    public class AIHTNPrimitiveTaskClearOrder : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x34D7944E27FCE22E)]
    public class AIHTNPrimitiveTaskClearReservation : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x24AA5C7DD0173FC7)]
    public class AIHTNPrimitiveTaskCloseCombat : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x954F9DE75305CE4E)]
    public class AIHTNPrimitiveTaskConfirmAllThreatsLost : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x62A6349D0B7FD32F)]
    public class AIHTNPrimitiveTaskConfirmThreatLost : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xD05B12049EC5301E)]
    public class AIHTNPrimitiveTaskConvertRoleType : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x1889C68FC466D26B)]
    public class AIHTNPrimitiveTaskCreateSubgroup : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xE00E592D873932A6)]
    public class AIHTNPrimitiveTaskCreateSubgroupWithMembers : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xEE616185FD6445DE)]
    public class AIHTNPrimitiveTaskDelayDeathCamFade : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xFC21D54032D32B69)]
    public class AIHTNPrimitiveTaskDisableStagger : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x37A3AC45F68ED006)]
    public class AIHTNPrimitiveTaskDismountObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x33CD749BCF9F2FEF)]
    public class AIHTNPrimitiveTaskDiveRun : AIHTNPrimitiveTaskFlyLine
    {
    }

    [RTTI.Serializable(0x3035517DF66426C8)]
    public class AIHTNPrimitiveTaskDoAnimationAction : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x5429DB15A13DAA4D)]
    public class AIHTNPrimitiveTaskDoCustomAction : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xB1FC1B273A4D77B0)]
    public class AIHTNPrimitiveTaskDodgeGame : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x10DE06D4C13E2D20)]
    public class AIHTNPrimitiveTaskDraw : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x54D5344DDFFDBE9C)]
    public class AIHTNPrimitiveTaskEmergencyTeleportAbility : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6A1DA9E74989CC39)]
    public class AIHTNPrimitiveTaskEndCommandSequence : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x4DE58F3CC4FC06B8)]
    public class AIHTNPrimitiveTaskEndCoordinatedBehavior : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x387A465345417BAE)]
    public class AIHTNPrimitiveTaskEndPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x2C07697CD8CD80AB)]
    public class AIHTNPrimitiveTaskEndSecondaryPlan : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xF2AC4797FEC5E110)]
    public class AIHTNPrimitiveTaskEntityAction : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE7533131A0D460DA)]
    public class AIHTNPrimitiveTaskError : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xBD888714DBD9E834)]
    public class AIHTNPrimitiveTaskErrorUnsupportedOrder : AIHTNPrimitiveTaskError
    {
    }

    [RTTI.Serializable(0x93774A2D3711C967)]
    public class AIHTNPrimitiveTaskExpandHTNDecomposition : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xEBD9D3F9D4EEB6A5)]
    public class AIHTNPrimitiveTaskFaceTowards : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xBA553C428784450D)]
    public class AIHTNPrimitiveTaskFaceTowardsAndSelectWeapon : AIHTNPrimitiveTaskFaceTowards
    {
    }

    [RTTI.Serializable(0x381B3E56681F68CF)]
    public class AIHTNPrimitiveTaskFail : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE65C25CEAFE74C6F)]
    public class AIHTNPrimitiveTaskFireBurstAtDestructibilityPart : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0xEEE6EBF40B867C23)]
    public class AIHTNPrimitiveTaskFireBurstAtEntities : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x32CE11AC5C6A02)]
    public class AIHTNPrimitiveTaskFireBurstAtEntity : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x140FEE283D847049)]
    public class AIHTNPrimitiveTaskFireBurstAtPosition : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x4DBD1D5F2A849F1D)]
    public class AIHTNPrimitiveTaskFireBurstBlind : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x5474512F346A21CB)]
    public class AIHTNPrimitiveTaskFireBurstInDirection : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0xF705CF9B4F312F25)]
    public class AIHTNPrimitiveTaskFlyLine : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x7166E560AB213083)]
    public class AIHTNPrimitiveTaskFlySegment : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x12BE4BEB7D02749A)]
    public class AIHTNPrimitiveTaskForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xAF5C891C2DADCB9B)]
    public class AIHTNPrimitiveTaskGesture : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x4B6E2C6EA909DC02)]
    public class AIHTNPrimitiveTaskGlanceAt : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xF4AA690D135A9F7F)]
    public class AIHTNPrimitiveTaskGlanceAtEntity : AIHTNPrimitiveTaskGlanceAt
    {
    }

    [RTTI.Serializable(0xA98F07E3B0D1E80C)]
    public class AIHTNPrimitiveTaskGlanceAtLocator : AIHTNPrimitiveTaskGlanceAt
    {
    }

    [RTTI.Serializable(0x9B20E59D34DD5FC0)]
    public class AIHTNPrimitiveTaskGlanceAtPosition : AIHTNPrimitiveTaskGlanceAt
    {
    }

    [RTTI.Serializable(0x43FFFCBCAA867601)]
    public class AIHTNPrimitiveTaskGroup : AIHTNPrimitiveTask
    {
    }

    [RTTI.Serializable(0xEC4B619D739B4EC7)]
    public class AIHTNPrimitiveTaskGroupAssignToGroup : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xF8BDCD83A6DB4A96)]
    public class AIHTNPrimitiveTaskGroupAssignToRole : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x81CDB5F254992E58)]
    public class AIHTNPrimitiveTaskGroupMergeToGroup : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x4D8343BEB1147CEF)]
    public class AIHTNPrimitiveTaskGroupMergeToSubgroup : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xA312FDD8DB1C7E99)]
    public class AIHTNPrimitiveTaskGroupMessageToAllMembers : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xF98C9DBED9C488F1)]
    public class AIHTNPrimitiveTaskGroupRequestIndividualOwnership : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x10241A1AF2B034A7)]
    public class AIHTNPrimitiveTaskGroupSetState : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x3904C1BB4F255D87)]
    public class AIHTNPrimitiveTaskGroupTerminate : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x67FE4C0E75352B40)]
    public class AIHTNPrimitiveTaskGroupUpdateScriptedIndividuals : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0xA55FB9EA24DA478B)]
    public class AIHTNPrimitiveTaskHoldEntityAction : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x2D6D39664BF86665)]
    public class AIHTNPrimitiveTaskHoverSegment : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x66120E7F55AD7A0B)]
    public class AIHTNPrimitiveTaskImmediateReloadWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x72E3371A48F2FF59)]
    public class AIHTNPrimitiveTaskIndividual : AIHTNPrimitiveTask
    {
    }

    [RTTI.Serializable(0xF4A44F51B9D9D936)]
    public class AIHTNPrimitiveTaskIndividualFireWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x45D386E8874BFED9)]
    public class AIHTNPrimitiveTaskLand : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0xB2E3FDF6E77E9BE5)]
    public class AIHTNPrimitiveTaskLandAnimalFlee : AIHTNPrimitiveTaskLandAnimalMovement
    {
    }

    [RTTI.Serializable(0xFCCE24B919B268A)]
    public class AIHTNPrimitiveTaskLandAnimalMovement : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x66A0DB1038419512)]
    public class AIHTNPrimitiveTaskLandAnimalWander : AIHTNPrimitiveTaskLandAnimalMovement
    {
    }

    [RTTI.Serializable(0xCF3776991A8B0D4B)]
    public class AIHTNPrimitiveTaskLog : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x71D46575AADADA9)]
    public class AIHTNPrimitiveTaskLookAlongHelperNode : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xAFAC8B69E02D8ADA)]
    public class AIHTNPrimitiveTaskLookAlongPath : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6F38714F6288D6B7)]
    public class AIHTNPrimitiveTaskLowCrouchGame : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x20908901D6A553D3)]
    public class AIHTNPrimitiveTaskMessage : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x7356E5A4393ABE3A)]
    public class AIHTNPrimitiveTaskMountObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x40D4CB591F19EDD7)]
    public class AIHTNPrimitiveTaskMove : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x9AD753734B426D8F)]
    public class AIHTNPrimitiveTaskNotifyRevivingPlayer : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x9F03AFA421D9A52F)]
    public class AIHTNPrimitiveTaskOnAbort : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x8D37DAF218FA07AA)]
    public class AIHTNPrimitiveTaskOnAbortOrFail : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xEB21CC7E6A655231)]
    public class AIHTNPrimitiveTaskOnFail : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x582FB3FADD58AC50)]
    public class AIHTNPrimitiveTaskPauseGame : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xA5114051F4939D6)]
    public class AIHTNPrimitiveTaskPerch : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x27547C639CB27112)]
    public class AIHTNPrimitiveTaskPlaceEntity : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xEC96F1611D22ED64)]
    public class AIHTNPrimitiveTaskPlaceHolder : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA3E2AFA9AF15EF55)]
    public class AIHTNPrimitiveTaskPlanScopedForget : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x8EDBA3FE01F4784F)]
    public class AIHTNPrimitiveTaskPlanScopedRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x6BEBD96452643C61)]
    public class AIHTNPrimitiveTaskPlayMonitoredAnimation : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x7E264EFC770F58BB)]
    public class AIHTNPrimitiveTaskPlayMotionScatterBlendAnimation : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0xB7CCE503F789A286)]
    public class AIHTNPrimitiveTaskPlayWarpedAnimation : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x7B875479FBF2CBAF)]
    public class AIHTNPrimitiveTaskRaiseThreatLevel : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x74EFDEF8EE420D5C)]
    public class AIHTNPrimitiveTaskRegisterAttackExecuted : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA83E15420AEA1EF9)]
    public class AIHTNPrimitiveTaskReloadWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6218E0EBFCFC34EC)]
    public class AIHTNPrimitiveTaskRemember : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x1774C8CE119C2D9A)]
    public class AIHTNPrimitiveTaskRememberOnFail : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x5AF57C15AB6A8D8B)]
    public class AIHTNPrimitiveTaskRemoveBuddy : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x120544A4CCAB9384)]
    public class AIHTNPrimitiveTaskReportThreat : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x73E3D50AAEADA03F)]
    public class AIHTNPrimitiveTaskRequestCoordinatedBehavior : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x99BE202A06D1D49C)]
    public class AIHTNPrimitiveTaskRequestHealing : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA732806627396069)]
    public class AIHTNPrimitiveTaskRequestResponseToSignal : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x63D9E20C27623BD7)]
    public class AIHTNPrimitiveTaskRequestResponseToSpeechEvent : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x65E6E9E4B8A346D5)]
    public class AIHTNPrimitiveTaskReserveObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x67088B53CFDB92F6)]
    public class AIHTNPrimitiveTaskSatisfyDesire : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x540310BFFCDC0F)]
    public class AIHTNPrimitiveTaskScanPositionList : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xD1EA3459765250F4)]
    public class AIHTNPrimitiveTaskScavenge : AIHTNPrimitiveTaskCloseCombat
    {
    }

    [RTTI.Serializable(0xA84B30ED42D3BF2C)]
    public class AIHTNPrimitiveTaskSelectTarget : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA64058FEACA8E60A)]
    public class AIHTNPrimitiveTaskSelectWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xB73EF92DB67F24D4)]
    public class AIHTNPrimitiveTaskSendAttackMessage : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x65D927398679E742)]
    public class AIHTNPrimitiveTaskSendContextualSpeechMessage : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x7FF12DC010980908)]
    public class AIHTNPrimitiveTaskSendEventMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0xF0218372C3C5F83E)]
    public class AIHTNPrimitiveTaskSendOrderArrivedMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0x5624CA9B7AEF9E97)]
    public class AIHTNPrimitiveTaskSendOrderCompletedMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0xCC6B9F5E647B8A89)]
    public class AIHTNPrimitiveTaskSendOrderFailedMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0xE23B6DA451DEFD10)]
    public class AIHTNPrimitiveTaskSendPatrolPathMessage : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x186638C2D8710BC2)]
    public class AIHTNPrimitiveTaskSendSceneMessage : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x53C6B47DCC7A2257)]
    public class AIHTNPrimitiveTaskSendScriptMessageGame : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x5B8AD3663799CA63)]
    public class AIHTNPrimitiveTaskSendSequenceMessage : AIHTNPrimitiveTaskSendSceneMessage
    {
    }

    [RTTI.Serializable(0x474B8933B2A9368E)]
    public class AIHTNPrimitiveTaskSetAreaFilter : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x1A94AA06F880A288)]
    public class AIHTNPrimitiveTaskSetAreaRestrictions : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xF0450E0F83CED4BF)]
    public class AIHTNPrimitiveTaskSetCoordinatedBehaviorExpiryTime : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE34EAE0BBF28F0D0)]
    public class AIHTNPrimitiveTaskSetDeathCamTarget : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6B8AF7C41D38894F)]
    public class AIHTNPrimitiveTaskSetDesire : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA8AA92801290F3EC)]
    public class AIHTNPrimitiveTaskSetEngagementMode : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x45A10E00973657F5)]
    public class AIHTNPrimitiveTaskSetGroupFormation : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x5C3BD41C891A7186)]
    public class AIHTNPrimitiveTaskSetGroupPath : AIHTNPrimitiveTaskGroup
    {
    }

    [RTTI.Serializable(0x90FE46E0B57CD75D)]
    public class AIHTNPrimitiveTaskSetLockUser : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE77A2355357FC6CF)]
    public class AIHTNPrimitiveTaskSetMarkerEntity : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x1162F35D51E51D94)]
    public class AIHTNPrimitiveTaskSetPerception : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x9C4D659AF5C96B91)]
    public class AIHTNPrimitiveTaskSignal : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA1B937B9E9FD4197)]
    public class AIHTNPrimitiveTaskStartCommandSequence : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0xDD3707C9D4FDB14C)]
    public class AIHTNPrimitiveTaskStepAside : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0xBBC0EFEA4F7A01D4)]
    public class AIHTNPrimitiveTaskStopDelayingDeath : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x5D1C70C0F7E5EACA)]
    public class AIHTNPrimitiveTaskStowWeapon : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xBA3AE23475E7C8A7)]
    public class AIHTNPrimitiveTaskSuppressPositionList : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x449EE17CF945F8EF)]
    public class AIHTNPrimitiveTaskSwimFlee : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0x71C03EEDCEFAEA)]
    public class AIHTNPrimitiveTaskSwimWander : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0xA46279C4A497929B)]
    public class AIHTNPrimitiveTaskTakeOff : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xE52DD334D7A324AC)]
    public class AIHTNPrimitiveTaskTarget : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x20A9615C90174165)]
    public class AIHTNPrimitiveTaskTargetEntity : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x413EB86AC63FE3B1)]
    public class AIHTNPrimitiveTaskTargetHeading : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0xA4BC11AEC19D683A)]
    public class AIHTNPrimitiveTaskTargetLocalPitch : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x43AA423954D18221)]
    public class AIHTNPrimitiveTaskTargetLocator : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x4A8B7FDFB0C474DD)]
    public class AIHTNPrimitiveTaskTargetPoint : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0xF34DB449071B8E3B)]
    public class AIHTNPrimitiveTaskTargetThreat : AIHTNPrimitiveTaskTarget
    {
    }

    [RTTI.Serializable(0x51ED6F6E1CA82F3A)]
    public class AIHTNPrimitiveTaskTeleport : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x2BA114D822F45C80)]
    public class AIHTNPrimitiveTaskThrowGrenade : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x37A4A706AF2C0A39)]
    public class AIHTNPrimitiveTaskUpdateFactMessage : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x33097C4166F8C9E)]
    public class AIHTNPrimitiveTaskUseAttachableObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x80C66C956706FA23)]
    public class AIHTNPrimitiveTaskUseCover : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x36EF519252CF5BA8)]
    public class AIHTNPrimitiveTaskUseInventoryItem : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x6A5A4E4F500561F9)]
    public class AIHTNPrimitiveTaskUseItemOnEntity : AIHTNPrimitiveTaskIndividualFireWeapon
    {
    }

    [RTTI.Serializable(0x3451C1E5BDA358B9)]
    public class AIHTNPrimitiveTaskUseJumpLink : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x621D6673BB121D2E)]
    public class AIHTNPrimitiveTaskUseObject : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xA569B1A5CD837CA6)]
    public class AIHTNPrimitiveTaskUseObjects : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0x3E97D2C3DA246A9C)]
    public class AIHTNPrimitiveTaskWait : AIHTNPrimitiveTaskAgent
    {
    }

    [RTTI.Serializable(0x7426ECC48AE3636)]
    public class AIHTNPrimitiveTaskWalkSegment : AIHTNPrimitiveTaskMove
    {
    }

    [RTTI.Serializable(0xB951419E93664B52)]
    public class AIHTNPrimitiveTaskWalkToCloseCombat : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x7F7246CAE3E97AD4)]
    public class AIHTNPrimitiveTaskWalkToPositionSegment : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0x7876F7737A8620BD)]
    public class AIHTNPrimitiveTaskWalkToUseLocationSegment : AIHTNPrimitiveTaskWalkSegment
    {
    }

    [RTTI.Serializable(0xCB2BAE469A2CD17F)]
    public class AIHapticSensor : AISensor
    {
        [RTTI.Member(0, 0x28, "Touch")] public float PositionDetectDistance;
    }

    [RTTI.Serializable(0x87C2F409348BD0FC)]
    public class AIHapticStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0xCCD28A0E452B067D)]
    public class AIHapticStimulusResource : AIStimulusResource
    {
        [RTTI.Member(0, 0x50, "General")] public bool AffectsSuppression;
    }

    [RTTI.Serializable(0x7485CE27D36BC703)]
    public class AIHintSymbolResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String Hint;
    }

    [RTTI.Serializable(0x8B96F27763844AFF)]
    public class AIHtnFactMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xBBB85C7F98FC8EF6)]
    public class AIHtnPlannerDaemonAgentCommon : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0x143DEA05C21D9A09)]
    public class AIHtnPlannerDaemonBehaviorGroup : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0xC97024625C0B9883)]
    public class AIHtnPlannerDaemonIndividualCallTerms : AIHTNPlannerDaemonIndividual
    {
    }

    [RTTI.Serializable(0x1D4EF0E7F52E26E6)]
    public class AIHtnPlannerDaemonUtilityCallTerms : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0x3806A187572F98B8)]
    public class AIHtnPlannerDaemonUtilityCallTermsGame : AIHTNPlannerDaemon
    {
    }

    [RTTI.Serializable(0x54E4DF73851745FA)]
    public class AIHtnPrimitiveTaskForceAlertLevelNoThreats : AIHTNPrimitiveTaskIndividual
    {
    }

    [RTTI.Serializable(0xEDCD001F352D64B2)]
    public class AIHtnUpdateFactMessage : AIHtnFactMessage
    {
    }

    [RTTI.Serializable(0x561E70C631931BBE)]
    public class AIHumanoidSkillContext : AISkillContext
    {
        [RTTI.Member(0, 0x48, "General")] public bool MustSlideDownLadders;
        [RTTI.Member(1, 0x50, "General")] public String UpperBodyPosture;
    }

    [RTTI.Serializable(0x9255325A0AB90335)]
    public class AIIndividual : AIDirectableAgent
    {
    }

    [RTTI.Serializable(0x14E5F8A8157FE405)]
    public class AIIndividualHookHtnPlanner : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x88A9183EB45040C0)]
    public class AIIndividualHookHtnPlannerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AIHTNPlannerResource> PlannerResource;
    }

    [RTTI.Serializable(0x6FEEB5337B0DD45B)]
    public class AIIndividualResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AICombatSituationResource> CombatSituationResource;
        [RTTI.Member(1, 0x30, "Perception")] public Ref<AIPerceptionResource> Perception;
        [RTTI.Member(2, 0x38, "Skills")] public Ref<AISkillManagerResource> Skills;
        [RTTI.Member(3, 0x40, "Context")] public Ref<AIContextResourceSet> ResourceSet;
        [RTTI.Member(4, 0x48, "Weapons")] public Array<Ref<AIWeaponPreference>> Preferences;
        [RTTI.Member(5, 0x58, "Behaviour")] public Ref<AIIndividualHookHtnPlannerResource> HookResource;
        [RTTI.Member(6, 0x60, "Communication")] public bool CommunicateInitialThreatSpotted;
        [RTTI.Member(7, 0x64, "FindAttackLocationDaemon")] public float MaxCacheTimeForLoaResult;
        [RTTI.Member(8, 0x68, "FindAttackLocationDaemon")] public float MaxCacheTimeForStanceResult;
        [RTTI.Member(9, 0x6C, "FindAttackLocationDaemon")] public float MaxCacheTimeForLocationResult;
        [RTTI.Member(10, 0x70, "Communication")] public bool ReceivesThreatInformation;
        [RTTI.Member(11, 0x74, "Communication")] public float ReportSituationDistance;
        [RTTI.Member(12, 0x78, "Communication")] public float ReportRoughSituationDistance;
        [RTTI.Member(13, 0x7C, "Communication")] public bool ReportObservedExactThreats;
        [RTTI.Member(14, 0x80, "Communication")] public float ReportObservedExactThreatsDelay;
        [RTTI.Member(15, 0x84, "Communication")] public float ReportEnemySpottedDelay;
        [RTTI.Member(16, 0x88, "Communication")] public Ref<AIStimulusResource> CommunicateThreatInformationStimulusResource;
        [RTTI.Member(17, 0x90, "Communication")] public Ref<AIStimulusResource> CommunicateDeathStimulusResource;
        [RTTI.Member(18, 0x98, "Reload")] public float LowAmmo;
        [RTTI.Member(19, 0x9C, "RulesOfEngagement")] public float EngageDistance;
        [RTTI.Member(20, 0xA8, "General")] public float AlignBaseDelay;
        [RTTI.Member(21, 0xAC, "General")] public float AlignBaseAngle;
        [RTTI.Member(22, 0xB0, "Signals")] public bool ModifiesSignals;
        [RTTI.Member(23, 0xB8, "Attacks")] public Array<Ref<AIAttackResource>> AttackResources;
        [RTTI.Member(24, 0xC8, "Speech")] public Ref<AIContextualSpeechEventMap> ContextualSpeechEventMap;
    }

    [RTTI.Serializable(0x682EF184665C5881)]
    public class AIInventoryAmmoEjectorInterface : AIInventoryWeaponInterface
    {
    }

    [RTTI.Serializable(0x649B244E347B4F35)]
    public class AIInventoryBadgeAbilityInterface : AIInventoryWeaponInterface
    {
    }

    [RTTI.Serializable(0x5E5634AE28C283A8)]
    public class AIInventoryThrowableInterface : AIInventoryWeaponInterface
    {
    }

    [RTTI.Serializable(0x38DCAF48C39DE142)]
    public class AIInventoryWeaponInterface : AIWeaponInterfaceGame
    {
    }

    [RTTI.Serializable(0xCDD0C0A69205E09D)]
    public class AIJitterModifier : AIScanModifier
    {
    }

    [RTTI.Serializable(0x5C0BEF5BB2E3BC4C)]
    public class AIJumpLink : ParentWorldNode
    {
        [RTTI.Member(0, 0x70)] public Ref<WorldNode> Start;
        [RTTI.Member(1, 0x78)] public Ref<WorldNode> End;
        [RTTI.Member(2, 0x80)] public bool Bidirectional;
        [RTTI.Member(3, 0x88)] public Ref<AIPathObjectCategory> Category;
    }

    [RTTI.Serializable(0x45E4672E3421C23B)]
    public class AIJumpLinkObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x2BDD1101041C155D)]
    public class AIJumpsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC462D28DC7F295F4)]
    public class AIJumpsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<PlayWarpedAnimation>> Animations;
    }

    [RTTI.Serializable(0x6694E5C426C0635)]
    public class AILineWeaponOperationInstance : AIWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0x32AE716DBE57D5D)]
    public class AILineWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
        [RTTI.Member(0, 0x40, "General")] public Array<Vec3> AimPoints;
        [RTTI.Member(1, 0x50, "General")] public Ref<CurveResource> TrackingSpring;
        [RTTI.Member(2, 0x58, "General")] public Ref<CurveResource> VelocityAlongLine;
        [RTTI.Member(3, 0x60, "General")] public float StopTrackingAtFraction;
        [RTTI.Member(4, 0x64, "General")] public float MinimumDistanceFromShooter;
    }

    [RTTI.Serializable(0x11BB7C4FB8A696A4)]
    public class AILureCallMessage : AIMessage
    {
    }

    [RTTI.Serializable(0xCFE2808FD652D7A)]
    public class AIManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xD283BA7C59E533F6)]
    public class AIManagerGame : AIManager
    {
    }

    [RTTI.Serializable(0x3BEF53E70BFE3FE7)]
    public class AIManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AIGroupResource> CollectiveResource;
        [RTTI.Member(1, 0x30, "General")] public Ref<AITagsMappingResource> AITagsMappingResource;
        [RTTI.Member(2, 0x38, "Stimuli")] public Ref<AIHapticStimulusResource> CollisionHapticStimulus;
        [RTTI.Member(3, 0x40, "Stimuli")] public Ref<AIAuralStimulusResource> WhizzByAuralStimulus;
        [RTTI.Member(4, 0x48, "Factions")] public Array<Ref<AIFaction>> Factions;
        [RTTI.Member(5, 0x58, "Factions")] public Ref<AIFaction> DefaultFaction;
        [RTTI.Member(6, 0x60, "Factions")] public Ref<AIFaction> NeutralFaction;
    }

    [RTTI.Serializable(0xB56F56ECB18E26EE)]
    public class AIManagerResourceGame : AIManagerResource
    {
        [RTTI.Member(0, 0x68, "CombatDifficulty")] public Array<Ref<CurveResource>> AllowedMeleeAttackOverlap;
        [RTTI.Member(1, 0x78, "CombatDifficulty")] public Array<Ref<AISupportAttackTicketThresholds>> SupportAttackTicketThresholds;
        [RTTI.Member(2, 0x88, "TagProperties")] public TagPropertyLink RobotTagProperty;
    }

    [RTTI.Serializable(0x86D02689FFE844D3)]
    public class AIMarker : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public String Name;
        [RTTI.Member(1, 0x68, "AI")] public float Radius;
        [RTTI.Member(2, 0x6C, "AI")] public bool ZLocked;
        [RTTI.Member(3, 0x88, "AI")] public Ref<PropertyContainerResource> PropertyContainerResource;
    }

    [RTTI.Serializable(0x94E5E3CBBF3341CC)]
    public class AIMarkerLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x16D2546D2E36BDD1)]
    public class AIMarkerLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<AIMarker> AIMarker;
        [RTTI.Member(1, 0x40, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xC64FD6330FB7CA3E)]
    public class AIMeleeWeaponAttackTypeInterface : AIInventoryWeaponInterface
    {
    }

    [RTTI.Serializable(0x8A771CC90FFD908E)]
    public class AIMeleeWeaponComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD3669F94AB042EA3)]
    public class AIMeleeWeaponComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "AttackTypes")] public Array<Ref<MeleeWeaponAttackTypeResource>> AIAttacks;
        [RTTI.Member(1, 0x38, "Logic")] public float HitNoDamageStaggerImpactSeverity;
        [RTTI.Member(2, 0x3C, "Logic")] public float HitWorldFloorAngle;
    }

    [RTTI.Serializable(0x193C9E1211DF79CB)]
    public class AIMeleeWeaponInterface : AIControlledEntityInterface
    {
    }

    [RTTI.Serializable(0x4C05E801D4DDBA7)]
    public class AIMemberFormation : AIFormation
    {
    }

    [RTTI.Serializable(0x4E1978D6FBC5D911)]
    public class AIMemberFormationResource : AIFormationResource
    {
    }

    [RTTI.Serializable(0xA61F11EE83C89D38)]
    public class AIMessage : CoreObject
    {
    }

    [RTTI.Serializable(0xC227E08CE0017585)]
    public class AIMessageResource : Resource
    {
    }

    [RTTI.Serializable(0x7AE86C96EDD846AC)]
    public class AIMountableObject
    {
    }

    [RTTI.Serializable(0x400A3ABA9D657002)]
    public class AIMovementAttack : AIAttack
    {
    }

    [RTTI.Serializable(0x77086500A70C3E1B)]
    public class AIMovementAttackResource : AIAttackResource
    {
        [RTTI.Member(0, 0x70, "Settings")] public FRange Range;
    }

    [RTTI.Serializable(0x8F38FB294379D400)]
    public class AIMover
    {
    }

    [RTTI.Serializable(0x893870EC3450BDEA)]
    public class AIMoverComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x53C6096A9BAFACC8)]
    public class AIMoverComponentPostureSettings : AIMoverPostureSettings
    {
        [RTTI.Member(0, 0x48, "Animation")] public bool HasDirectionalStarts;
        [RTTI.Member(1, 0x49, "Animation")] public bool HasDirectionalStops;
        [RTTI.Member(2, 0x4A, "Animation")] public bool BodyHeadingCanDifferFromMoveHeading;
        [RTTI.Member(3, 0x4B, "Animation")] public bool PrefersToWalkForward;
        [RTTI.Member(4, 0x4C, "Animation")] public bool CanMoveInEveryHeadingDirection;
        [RTTI.Member(5, 0x4D, "Animation")] public bool HasTwoFeetStopping;
        [RTTI.Member(6, 0x50, "Animation")] public float MoveAngleModifier;
        [RTTI.Member(7, 0x54, "Animation")] public float MaxMoveAngle;
        [RTTI.Member(8, 0x58, "Animation")] public float MaxMoveHeading;
        [RTTI.Member(9, 0x5C, "Animation")] public FRange CycleSpeedRange;
        [RTTI.Member(10, 0x64, "Animation")] public int AnimationHeadingStepsAhead;
        [RTTI.Member(11, 0x68, "Animation")] public FRange QuickTurnEntrySpeedRange;
        [RTTI.Member(12, 0x70, "Animation")] public float QuickTurnEntrySpeedRangeModifier;
        [RTTI.Member(13, 0x74, "Animation")] public float QuickTurnAngleMaxOffset;
        [RTTI.Member(14, 0x78, "Animation")] public AnimationStateID StartStateID;
        [RTTI.Member(15, 0x7C, "Animation")] public AnimationStateID CycleStateID;
        [RTTI.Member(16, 0x80, "Animation")] public AnimationStateID StopStateID;
        [RTTI.Member(17, 0x84, "Animation")] public AnimationStateID TurnStateID;
        [RTTI.Member(18, 0x88, "Animation")] public AnimationStateID QuickTurnStateID;
    }

    [RTTI.Serializable(0xD92E5F17C4AF4D29)]
    public class AIMoverComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public bool PlaceOnGround;
        [RTTI.Member(1, 0x29, "General")] public bool UseContactNormal;
        [RTTI.Member(2, 0x2C, "General")] public float MaxTiltAngle;
        [RTTI.Member(3, 0x30, "General")] public float MaxSpeed;
        [RTTI.Member(4, 0x34, "General")] public float MaxTurnSpeed;
        [RTTI.Member(5, 0x38, "General")] public float TurnAcceleration;
        [RTTI.Member(6, 0x3C, "General")] public bool MoveAngleVariableAsRadians_HACK;
        [RTTI.Member(7, 0x40, "Animation")] public Array<Ref<AIMoverComponentPostureSettings>> Postures;
        [RTTI.Member(8, 0x50, "Animation")] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(9, 0x58, "Animation")] public String ActionMove;
        [RTTI.Member(10, 0x60, "Animation")] public String ActionTurn;
        [RTTI.Member(11, 0x68, "Animation")] public String ActionJump;
        [RTTI.Member(12, 0x70, "Animation")] public String ActionStop;
        [RTTI.Member(13, 0x78, "Animation")] public String ActionQuickTurn;
        [RTTI.Member(14, 0x80, "Animation")] public String VariableSpeed;
        [RTTI.Member(15, 0x88, "Animation")] public String VariableDesiredPosture;
        [RTTI.Member(16, 0x90, "Animation")] public String VariableCurrentPosture;
        [RTTI.Member(17, 0x98, "Animation")] public String VariableMoveHeading;
        [RTTI.Member(18, 0xA0, "Animation")] public String VariableMoveAngle;
        [RTTI.Member(19, 0xA8, "Animation")] public String VariableStartHeading;
        [RTTI.Member(20, 0xB0, "Animation")] public String VariableTurnAngle;
        [RTTI.Member(21, 0xB8, "Animation")] public String VariableQuickTurnAngle;
        [RTTI.Member(22, 0xC0, "Animation", true)] public String AnimTagStart;
        [RTTI.Member(23, 0xC8, "Animation", true)] public String AnimTagCycle;
        [RTTI.Member(24, 0xD0, "Animation", true)] public String AnimTagStop;
        [RTTI.Member(25, 0xD8, "Animation", true)] public String AnimTagTurn;
        [RTTI.Member(26, 0xE0, "Animation", true)] public String AnimTagQuickTurn;
        [RTTI.Member(27, 0xE8, "Animation")] public AnimationTagID StartTagID;
        [RTTI.Member(28, 0xEC, "Animation")] public AnimationTagID StopTagID;
        [RTTI.Member(29, 0xF0, "Animation")] public AnimationTagID CycleTagID;
        [RTTI.Member(30, 0xF4, "Animation")] public AnimationTagID TurnTagID;
        [RTTI.Member(31, 0xF8, "Animation")] public AnimationTagID QuickTurnTagID;
    }

    [RTTI.Serializable(0x3D57A32E7DCDBDD0)]
    public class AIMoverGame : AIMover
    {
    }

    [RTTI.Serializable(0xE0BE9459EB27D0B5)]
    public class AIMoverPostureSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Animation")] public String ID;
        [RTTI.Member(1, 0x38, "Animation")] public String AnimationTag;
        [RTTI.Member(2, 0x40, "Animation")] public AnimationTagID AnimationTagID;
        [RTTI.Member(3, 0x44, "Animation")] public bool NeedStartWhenBeingSwitchedTo;
        [RTTI.Member(4, 0x45, "Animation")] public bool NeedStopWhenBeingSwitchedFrom;
        [RTTI.Member(5, 0x46, "Animation")] public bool DoesNotPlanAheadWhenAboutToStop;
    }

    [RTTI.Serializable(0x710CFA972CA1E3CC)]
    public class AINavMeshComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEFCB8EA332C1DF13)]
    public class AINavMeshComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Radius;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<NavMeshBuilderSettings> Settings;
        [RTTI.Member(2, 0x38, "Logic")] public bool UseNavmeshForSpawning;
    }

    [RTTI.Serializable(0x2FA01ABCF1DDD93B)]
    public class AINoiseModifier : AIScanModifier
    {
    }

    [RTTI.Serializable(0x2D512B7A9DD580CC)]
    public class AIOWLSkillContext : AISkillContext
    {
        [RTTI.Member(0, 0x48, "General")] public EOWLMode Mode;
    }

    [RTTI.Serializable(0xB014F124EDEB821D)]
    public class AIObserver
    {
    }

    [RTTI.Serializable(0x228D5B2E4643B51E)]
    public class AIObserverComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x27F7A28FCA26CCB1)]
    public class AIObserverComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x45F07D41BA2B09E2)]
    public class AIObserverGame : AIObserver
    {
    }

    [RTTI.Serializable(0xCD5E193B8A0FF049)]
    public class AIObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x5F24CCFAA9F1DAD7)]
    public class AIPathObjectCategory : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public int Cost;
    }

    [RTTI.Serializable(0xD68576D6B38E39ED)]
    public class AIPathObjectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF4A46B1FEF1CC639)]
    public class AIPathObjectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AIPathObjectCategory> Category;
    }

    [RTTI.Serializable(0x35471F43D700D583)]
    public class AIPathObjectObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x2149CB7299CE866)]
    public class AIPatrolPath : Route
    {
        [RTTI.Member(0, 0xB0, "Logic")] public EAIPatrolPathType Type;
        [RTTI.Member(1, 0xB8, "Logic")] public Ref<AIContextHintResource> MovementContext;
    }

    [RTTI.Serializable(0x94B9F25E246B209D)]
    public class AIPatrolPathLookat : WorldNode
    {
        [RTTI.Member(0, 0x60, "Logic")] public float DelayTime;
    }

    [RTTI.Serializable(0x2BD86656CCE22B77)]
    public class AIPatrolPathNode : RouteNode
    {
        [RTTI.Member(0, 0x90, "Logic")] public Array<Ref<AIPatrolPathLookat>> LookAtTargets;
        [RTTI.Member(1, 0xA0, "Logic")] public Array<AIPatrolPathUseObject> UseObjects;
        [RTTI.Member(2, 0xB0, "Logic")] public float ObjectUseChance;
    }

    [RTTI.Serializable(0x2A22296429FED71)]
    public class AIPatrolPathUseObject
    {
        [RTTI.Member(0, 0x0, "Logic")] public Ref<EntityPlaceHolder> UseObject;
        [RTTI.Member(1, 0x8, "Logic")] public float UseTime;
    }

    [RTTI.Serializable(0x2271BF346E72A703)]
    public class AIPerception : CoreObject
    {
    }

    [RTTI.Serializable(0xB7F0161639E813FC)]
    public class AIPerceptionResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public bool IgnoreProjectiles;
        [RTTI.Member(1, 0x2C, "General")] public float PerceptionFalloffSpeed;
        [RTTI.Member(2, 0x30, "General")] public Array<Ref<AISensorSetResource>> SensorSets;
        [RTTI.Member(3, 0x40, "General")] public bool DisableRadarSensorsOnInitialize;
    }

    [RTTI.Serializable(0xC81193D93BBA90AA)]
    public class AIPerchMarker : AIMarker
    {
    }

    [RTTI.Serializable(0x9916EC968801775)]
    public class AIPerchingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC2048A2D9CC45D11)]
    public class AIPerchingComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Animation")] public String PerchedAnimationAction;
        [RTTI.Member(1, 0x30, "Animation")] public String CanPlayerPerchedStaggerAnimationAction;
    }

    [RTTI.Serializable(0xFA3035D9A2530BD4)]
    public class AIPlayerPerformanceFeedbackResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public float BuddyRange;
        [RTTI.Member(1, 0x2C, "General")] public float SpreeTimeOut;
        [RTTI.Member(2, 0x30, "General")] public int SmallSpreeSize;
        [RTTI.Member(3, 0x34, "General")] public int BigSpreeSize;
        [RTTI.Member(4, 0x38, "General")] public float BurstTimeOut;
        [RTTI.Member(5, 0x3C, "General")] public float BurstVeryGoodScore;
        [RTTI.Member(6, 0x40, "General")] public float BurstGoodScore;
        [RTTI.Member(7, 0x44, "General")] public float BurstOkScore;
        [RTTI.Member(8, 0x48, "General")] public int FriendlyFireMax;
        [RTTI.Member(9, 0x4C, "General")] public float FriendlyFireCounterTimeout;
        [RTTI.Member(10, 0x50, "General")] public float FriendlyFireResponseTimeout;
        [RTTI.Member(11, 0x54, "General")] public float PlayerHealthDrop;
    }

    [RTTI.Serializable(0xAFE41CBA594D1E72)]
    public class AIPositionList : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<WorldPosition> Positions;
    }

    [RTTI.Serializable(0x74E962685ECE49BC)]
    public class AIProbabilityDataSetResource : Resource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<FloatProperty> Probability;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<FloatProperty> DropOffRate;
        [RTTI.Member(2, 0x38, "Properties")] public Ref<FloatProperty> ResetTime;
        [RTTI.Member(3, 0x48, "Properties")] public String Name;
    }

    [RTTI.Serializable(0x9FBA9AD95A0BB958)]
    public class AIPropertyFactComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xED86AD6C11707C21)]
    public class AIPropertyFactComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Array<PropertyNameLinkMapEntry> PropertyNameIDMapping;
    }

    [RTTI.Serializable(0xE744E9569299A212)]
    public class AIProximitySensor : AISensor
    {
        [RTTI.Member(0, 0x28, "Proximity")] public float ProximityDistance;
    }

    [RTTI.Serializable(0x4043C6A50E2DAF8B)]
    public class AIRadarSensor : AISensor
    {
        [RTTI.Member(0, 0x28, "Radar")] public float RadarDistance;
    }

    [RTTI.Serializable(0xE838B9CF1D4B4D79)]
    public class AIRememberFactResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0x8542638C3326BDDF)]
    public class AIReservedObject
    {
    }

    [RTTI.Serializable(0xE6EB891B1ABC3BE3)]
    public class AIRoad : Road
    {
        [RTTI.Member(0, 0xD8, "Logic")] public EAIRoadUsableBy UsableBy;
        [RTTI.Member(1, 0xE0, "Logic")] public Ref<ConditionResource> Condition;
        [RTTI.Member(2, 0xE9, "Logic")] public bool ShowPathInWorldMap;
    }

    [RTTI.Serializable(0x4D1D4DDF32594A04)]
    public class AIRoadManager
    {
    }

    [RTTI.Serializable(0xF8D1CE687A3F56F2)]
    public class AIRoadManagerResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<ObjectCollection> RoadsObjectCollection;
    }

    [RTTI.Serializable(0xB5CCE760BDEBFE14)]
    public class AIRobotMountedSkillContext : AISkillContext
    {
    }

    [RTTI.Serializable(0xBAE237BA2DFEFF09)]
    public class AIRobotSkillContext : AISkillContext
    {
    }

    [RTTI.Serializable(0x4FFA33884772515)]
    public class AIScanContextResource : Resource
    {
        [RTTI.Member(0, 0x28, "ScanMotion")] public Ref<AIScanMotionResource> AimMotionResource;
        [RTTI.Member(1, 0x30, "ScanMotion")] public Ref<AIScanMotionResource> LookMotionResource;
        [RTTI.Member(2, 0x38, "Visual")] public Ref<AIScanExpressionParams> ScanExpressionParams;
        [RTTI.Member(3, 0x40, "AimTargetWhenLooking")] public float AimHeadingOffset;
        [RTTI.Member(4, 0x44, "AimTargetWhenLooking")] public float AimPitchOffset;
        [RTTI.Member(5, 0x48, "ScanRange")] public FRange Heading;
        [RTTI.Member(6, 0x50, "ScanRange")] public FRange Pitch;
    }

    [RTTI.Serializable(0xAC9E3DD547F3DBA2)]
    public class AIScanExpressionParams : Resource
    {
        [RTTI.Member(0, 0x28)] public float RandomWeight;
        [RTTI.Member(1, 0x2C)] public float LookatWeight;
    }

    [RTTI.Serializable(0x1FB3F92971745086)]
    public class AIScanJitterResource : AIScanMotionResource
    {
        [RTTI.Member(0, 0x58, "General")] public float WaitTime;
        [RTTI.Member(1, 0x5C, "General")] public float Speed;
        [RTTI.Member(2, 0x60, "General")] public float RandomRectStartingWidth;
        [RTTI.Member(3, 0x64, "General")] public float RandomRectStartingHeight;
        [RTTI.Member(4, 0x68, "General")] public float RandomRectEndingWidth;
        [RTTI.Member(5, 0x6C, "General")] public float RandomRectEndingHeight;
        [RTTI.Member(6, 0x70, "General")] public float TimeFromStartToEndRect;
    }

    [RTTI.Serializable(0x9B6C59DC7788A014)]
    public class AIScanModifier : CoreObject
    {
    }

    [RTTI.Serializable(0xF689BB01C42B9420)]
    public class AIScanMotion
    {
    }

    [RTTI.Serializable(0x6FAE1D17F9AE165C)]
    public class AIScanMotionResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public float SmoothFactor;
        [RTTI.Member(1, 0x30, "General")] public ResponseCurve SpeedForAngle;
        [RTTI.Member(2, 0x48, "General")] public FRange ComfortRange;
        [RTTI.Member(3, 0x50, "General")] public FRange ComfortRangeInMovement;
    }

    [RTTI.Serializable(0xD3DAE4C3FC9D676D)]
    public class AIScanNoiseResource : AIScanMotionResource
    {
        [RTTI.Member(0, 0x60, "General")] public Vec2 NoiseScale;
        [RTTI.Member(1, 0x70, "General")] public Vec2 NoiseClamp;
        [RTTI.Member(2, 0x80, "General")] public Vec2 NoiseSpeed;
    }

    [RTTI.Serializable(0x869EE9100BD1B2D5)]
    public class AIScanSweepResource : AIScanMotionResource
    {
        [RTTI.Member(0, 0x58, "General")] public float MaxSweepAngle;
        [RTTI.Member(1, 0x5C, "General")] public float SweepSpeed;
        [RTTI.Member(2, 0x60, "General")] public bool VerticalSweep;
    }

    [RTTI.Serializable(0xF45E762F1E6EDB38)]
    public class AISceneObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x270C911F4452498D)]
    public class AISensor : Resource
    {
    }

    [RTTI.Serializable(0xB7EAB72CD19D95B6)]
    public class AISensorSetResource : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public Array<Ref<AISensor>> Idle;
        [RTTI.Member(1, 0x40, "General")] public Array<Ref<AISensor>> PresenceSuspected;
        [RTTI.Member(2, 0x50, "General")] public Array<Ref<AISensor>> PresenceConfirmed;
        [RTTI.Member(3, 0x60, "General")] public Array<Ref<AISensor>> Alert;
        [RTTI.Member(4, 0x70, "General")] public float UnitImmediateSuspicionDistance;
        [RTTI.Member(5, 0x74, "General")] public float UnitImmediateConfirmationDistance;
        [RTTI.Member(6, 0x78, "General")] public float UnitImmediateIdentificationDistance;
    }

    [RTTI.Serializable(0xDEDD2F1387DB46C6)]
    public class AISignalManager
    {
    }

    [RTTI.Serializable(0x950DACB8D39F183E)]
    public class AISignalResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AISignalType> SignalType;
        [RTTI.Member(1, 0x30, "General")] public Ref<AISignalSettingsResource> Settings;
        [RTTI.Member(2, 0x38, "General")] public Ref<SentenceGroupResource> SentenceGroup;
    }

    [RTTI.Serializable(0xD62DD8B908B8A8EB)]
    public class AISignalSettingsResource : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public float Priority;
        [RTTI.Member(1, 0x34, "General")] public float Lifetime;
        [RTTI.Member(2, 0x38, "General")] public float Delay;
        [RTTI.Member(3, 0x40, "General")] public String GestureName;
        [RTTI.Member(4, 0x48, "General")] public EGestureDirection GestureDirection;
        [RTTI.Member(5, 0x4C, "General")] public ELookDirection LookDirection;
        [RTTI.Member(6, 0x50, "General")] public EFacialExpression FacialExpression;
    }

    [RTTI.Serializable(0xD58F8061AA8DB9D)]
    public class AISignalType : CoreObject
    {
    }

    [RTTI.Serializable(0xC3BB3AA691C7DB0B)]
    public class AISkillAimAt : AISkillBase
    {
    }

    [RTTI.Serializable(0x9DB03AB8A01913C4)]
    public class AISkillAimGame : AISkillAimAt
    {
    }

    [RTTI.Serializable(0x35288050B6148214)]
    public class AISkillAimTurnInAir : AISkillTurnInAir
    {
    }

    [RTTI.Serializable(0x28DBC4614717B23A)]
    public class AISkillAimTurnOnSpot : AISkillTurnOnSpotGame
    {
    }

    [RTTI.Serializable(0x79BF42AC1C95A27)]
    public class AISkillAnimationAction : AISkillBase
    {
    }

    [RTTI.Serializable(0x66013E85F78643B2)]
    public class AISkillBase : CoreObject
    {
    }

    [RTTI.Serializable(0x6DB5DA647FDB7F5F)]
    public class AISkillChangeStance : AISkillBase
    {
    }

    [RTTI.Serializable(0x80922C570C04D9BA)]
    public class AISkillCloseCombat : AISkillBase
    {
    }

    [RTTI.Serializable(0xDCADA22787C15A81)]
    public class AISkillContext : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String Posture;
        [RTTI.Member(1, 0x38, "General")] public float LookAheadDistance;
        [RTTI.Member(2, 0x3C, "General")] public float HeadingSpeedModifier;
        [RTTI.Member(3, 0x40, "General")] public int SegmentsToSmooth;
    }

    [RTTI.Serializable(0xF20F6CA1B6868DD5)]
    public class AISkillContextualSpeech : AISkillBase
    {
    }

    [RTTI.Serializable(0xD40168F68A222D6C)]
    public class AISkillCustomAction : AISkillBase
    {
    }

    [RTTI.Serializable(0x9EDD4759A5681246)]
    public class AISkillDismount : AISkillBase
    {
    }

    [RTTI.Serializable(0x2EFC345543D6CA08)]
    public class AISkillDodge : AISkillBase
    {
    }

    [RTTI.Serializable(0xF253C84B63D62526)]
    public class AISkillFaceGame : AISkillFaceTowards
    {
    }

    [RTTI.Serializable(0xD36945C1268839E7)]
    public class AISkillFaceInAir : AISkillBase
    {
    }

    [RTTI.Serializable(0x78A3CDC630817AC4)]
    public class AISkillFaceTowards : AISkillBase
    {
    }

    [RTTI.Serializable(0xC62C3809B5DAFE80)]
    public class AISkillFacialExpression : AISkillBase
    {
    }

    [RTTI.Serializable(0xA09898D674E29E4F)]
    public class AISkillFacialExpressionGame : AISkillFacialExpression
    {
    }

    [RTTI.Serializable(0xFF98D382B37E8BC6)]
    public class AISkillFire : AISkillUseGun
    {
    }

    [RTTI.Serializable(0xF4AAA437042AB443)]
    public class AISkillFireTurnInAir : AISkillTurnInAir
    {
    }

    [RTTI.Serializable(0xE0AB00749D3EBCAB)]
    public class AISkillFireTurnOnSpot : AISkillTurnOnSpotGame
    {
    }

    [RTTI.Serializable(0x2522B57076D44029)]
    public class AISkillFly : AISkillFlyBase
    {
    }

    [RTTI.Serializable(0x953C977B73CC144)]
    public class AISkillFlyBase : AISkillBase
    {
    }

    [RTTI.Serializable(0xF46EB06180426158)]
    public class AISkillGesture : AISkillBase
    {
    }

    [RTTI.Serializable(0xF9AC5375A2B93AE1)]
    public class AISkillGestureNotPossible : AISkillBase
    {
    }

    [RTTI.Serializable(0x1794C32671DF5AC)]
    public class AISkillGlance : AISkillLookGame
    {
    }

    [RTTI.Serializable(0x419440B5D6D9DF05)]
    public class AISkillGlanceUpperBody : AISkillLookUpperBody
    {
    }

    [RTTI.Serializable(0xC588A40A1325E49)]
    public class AISkillHoldEntityAction : AISkillBase
    {
    }

    [RTTI.Serializable(0x990932878EEC5279)]
    public class AISkillHover : AISkillFlyBase
    {
    }

    [RTTI.Serializable(0x7BE5A114511850EC)]
    public class AISkillImmediateWeaponLoad : AISkillBase
    {
    }

    [RTTI.Serializable(0xCFED78349CDBABAE)]
    public class AISkillLand : AISkillBase
    {
    }

    [RTTI.Serializable(0x56E72B4BF35F2016)]
    public class AISkillLoadWeapon : AISkillBase
    {
    }

    [RTTI.Serializable(0xC4568F8140A4F0A3)]
    public class AISkillLoadWeaponGame : AISkillLoadWeapon
    {
    }

    [RTTI.Serializable(0x140E765845DF57D5)]
    public class AISkillLookAt : AISkillBase
    {
    }

    [RTTI.Serializable(0xCB28F71F45D86E11)]
    public class AISkillLookFullBody : AISkillLookTurnOnSpot
    {
    }

    [RTTI.Serializable(0x54CBA5DD8DE3BC37)]
    public class AISkillLookGame : AISkillLookAt
    {
    }

    [RTTI.Serializable(0x5764511302F46401)]
    public class AISkillLookTalk : AISkillBase
    {
    }

    [RTTI.Serializable(0x2F8D23D06CF06645)]
    public class AISkillLookTalkGame : AISkillLookTalk
    {
    }

    [RTTI.Serializable(0x2E04EF6246FC3EA5)]
    public class AISkillLookTurnInAir : AISkillTurnInAir
    {
    }

    [RTTI.Serializable(0x3E8E21E992D73B90)]
    public class AISkillLookTurnOnSpot : AISkillTurnOnSpotGame
    {
    }

    [RTTI.Serializable(0x58F43D9F734F487F)]
    public class AISkillLookUpperBody : AISkillLookGame
    {
    }

    [RTTI.Serializable(0x83D92D076B486510)]
    public class AISkillLowCrouch : AISkillBase
    {
    }

    [RTTI.Serializable(0x8A92DE79CF1F29B3)]
    public class AISkillManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<String> BodyGoals;
        [RTTI.Member(1, 0x38, "General")] public Array<Ref<AISkillResource>> SkillBodyMapping;
        [RTTI.Member(2, 0x48, "General")] public Ref<AIBodyPartResourceSet> AvailableBodyParts;
    }

    [RTTI.Serializable(0xCD69B0DACD1A830C)]
    public class AISkillMountObject : AISkillBase
    {
    }

    [RTTI.Serializable(0x912E9E04CB114012)]
    public class AISkillPerch : AISkillBase
    {
    }

    [RTTI.Serializable(0x38F0A184A7AD50A4)]
    public class AISkillPickUp : AISkillBase
    {
    }

    [RTTI.Serializable(0xBC4D782D6132E727)]
    public class AISkillPlayMonitoredAnimation : AISkillBase
    {
    }

    [RTTI.Serializable(0x7D34ACA7112B1199)]
    public class AISkillPlayMotionScatterBlendAnimation : AISkillBase
    {
    }

    [RTTI.Serializable(0x131AF49ABC7D81E0)]
    public class AISkillPlayWarpedAnimation : AISkillBase
    {
    }

    [RTTI.Serializable(0xC7B392BD0E964CCF)]
    public class AISkillPrepareWalk : AISkillBase
    {
    }

    [RTTI.Serializable(0xC2F08048253BB7A8)]
    public class AISkillResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AIBodyPartBase> BodyPartResource;
    }

    [RTTI.Serializable(0xFCCC822A08C741ED)]
    public class AISkillSetDesire : AISkillBase
    {
    }

    [RTTI.Serializable(0xA588739FEFCCBFBA)]
    public class AISkillSimpleCloseCombat : AISkillBase
    {
    }

    [RTTI.Serializable(0xD1E840D35DAF1815)]
    public class AISkillSprint : AISkillWalk
    {
    }

    [RTTI.Serializable(0x1E5D7AEFE3563F0C)]
    public class AISkillStowWeapon : AISkillBase
    {
    }

    [RTTI.Serializable(0xFEBC53F8726B412B)]
    public class AISkillStowWeaponGame : AISkillStowWeapon
    {
    }

    [RTTI.Serializable(0x68FD3AD6EE7482DF)]
    public class AISkillSwimBase : AISkillBase
    {
    }

    [RTTI.Serializable(0x7C9CED3DD180858D)]
    public class AISkillSwimFlee : AISkillBase
    {
    }

    [RTTI.Serializable(0x1B4871F2B6B636E6)]
    public class AISkillSwimWander : AISkillBase
    {
    }

    [RTTI.Serializable(0xF23DC54EB6072644)]
    public class AISkillSwitchWeapon : AISkillBase
    {
    }

    [RTTI.Serializable(0x3871B095560239D)]
    public class AISkillSwitchWeaponGame : AISkillSwitchWeapon
    {
    }

    [RTTI.Serializable(0x48BA751FAB4289FA)]
    public class AISkillTakeOff : AISkillBase
    {
    }

    [RTTI.Serializable(0x573075F9269FC772)]
    public class AISkillTalk : AISkillBase
    {
    }

    [RTTI.Serializable(0xC4B293BE38D56CD0)]
    public class AISkillTalkGame : AISkillTalk
    {
    }

    [RTTI.Serializable(0x74D16492CF7F96E)]
    public class AISkillTeleport : AISkillBase
    {
    }

    [RTTI.Serializable(0xFBF9551BF3530EE8)]
    public class AISkillTurnInAir : AISkillBase
    {
    }

    [RTTI.Serializable(0x30EC329E98481C30)]
    public class AISkillTurnOnSpot : AISkillBase
    {
    }

    [RTTI.Serializable(0xBFEBCC1AD5513D47)]
    public class AISkillTurnOnSpotGame : AISkillTurnOnSpot
    {
    }

    [RTTI.Serializable(0x4E4AC48427FDC520)]
    public class AISkillUpperBodyGesture : AISkillGesture
    {
    }

    [RTTI.Serializable(0x8616EAE78C21FFCB)]
    public class AISkillUseAttachable : AISkillBase
    {
    }

    [RTTI.Serializable(0x23FDF4C6F3D7669)]
    public class AISkillUseExplosiveLocation : AISkillBase
    {
    }

    [RTTI.Serializable(0xC83C5D7A374686F2)]
    public class AISkillUseGun : AISkillBase
    {
    }

    [RTTI.Serializable(0xA411DA4EFB870063)]
    public class AISkillUseInventoryActionAbility : AISkillBase
    {
    }

    [RTTI.Serializable(0x5293058875C29E0D)]
    public class AISkillUseInventoryItem : AISkillBase
    {
    }

    [RTTI.Serializable(0xA724F2E5F411C1B6)]
    public class AISkillUseObject : AISkillBase
    {
    }

    [RTTI.Serializable(0xCA7C4945D0C113EE)]
    public class AISkillUsePlayAnimationObject : AISkillBase
    {
    }

    [RTTI.Serializable(0x5B915C642A6A3573)]
    public class AISkillUseSwitch : AISkillBase
    {
    }

    [RTTI.Serializable(0xEA82585E40485814)]
    public class AISkillWalk : AISkillBase
    {
    }

    [RTTI.Serializable(0x3FFA3D0DBC16EE91)]
    public class AISmellSensor : AISensor
    {
        [RTTI.Member(0, 0x28, "Smell")] public float UnitDetectionDistance;
        [RTTI.Member(1, 0x2C, "Smell")] public float SmellCapacity;
    }

    [RTTI.Serializable(0xC02CA918D01B6207)]
    public class AISmellStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0xCE732F1386F3762F)]
    public class AISmellStimulusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5DE9F309E38D3309)]
    public class AISmellStimulusComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AISmellStimulusResource> StimulusResource;
        [RTTI.Member(1, 0x30, "General")] public Ref<AIDynamicDataMessageResource> DynamicAIMessage;
    }

    [RTTI.Serializable(0x8D0BEAF67241A825)]
    public class AISmellStimulusResource : AIStimulusResource
    {
        [RTTI.Member(0, 0x50, "General")] public float SmellIntensity;
        [RTTI.Member(1, 0x54, "General")] public bool DrownsOutOtherSmellStimuli;
    }

    [RTTI.Serializable(0xB63B3AC2FDE774B6)]
    public class AISniperWeaponOperationInstance : AIWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0x1676425C8A17D9D2)]
    public class AISniperWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
        [RTTI.Member(0, 0x40, "General")] public bool HoldFireUntilAimed;
        [RTTI.Member(1, 0x44, "General")] public float MaximumDistance;
        [RTTI.Member(2, 0x48, "General")] public float MinimumDistance;
        [RTTI.Member(3, 0x4C, "General")] public float BestMaximumDistance;
        [RTTI.Member(4, 0x50, "General")] public float BestMinimumDistance;
        [RTTI.Member(5, 0x54, "General")] public float MaximumAngle;
        [RTTI.Member(6, 0x58, "General")] public int ImproveCount;
        [RTTI.Member(7, 0x5C, "General")] public float LoseAimTime;
        [RTTI.Member(8, 0x60, "General")] public float LoseAimDistance;
        [RTTI.Member(9, 0x64, "General")] public bool LoseAimAfterReload;
    }

    [RTTI.Serializable(0xA09F54BF58D847C3)]
    public class AISpreadWeaponOperationInstance : AIWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0x89551C503BF6ABB3)]
    public class AISpreadWeaponOperationResource : AIBurstBasedWeaponOperationResource
    {
        [RTTI.Member(0, 0x40, "General")] public float LoseAimTime;
        [RTTI.Member(1, 0x44, "General")] public float LoseAimVelocityDelta;
        [RTTI.Member(2, 0x48, "General")] public bool LoseAimAfterReload;
        [RTTI.Member(3, 0x4C, "Horizontal")] public float Horizontal_WorstAngle;
        [RTTI.Member(4, 0x50, "Horizontal")] public float Horizontal_BestAngle;
        [RTTI.Member(5, 0x54, "Horizontal")] public int Horizontal_ImproveCount;
        [RTTI.Member(6, 0x58, "Horizontal")] public float Horizontal_MaximumDistance;
        [RTTI.Member(7, 0x60, "Horizontal")] public Array<float> Horizontal_StartPositions;
        [RTTI.Member(8, 0x70, "Horizontal")] public float Horizontal_StopPosition;
        [RTTI.Member(9, 0x74, "Horizontal")] public FRange Horizontal_Velocity;
        [RTTI.Member(10, 0x7C, "Horizontal")] public float Horizontal_Smoothness;
        [RTTI.Member(11, 0x80, "Vertical")] public float Vertical_WorstAngle;
        [RTTI.Member(12, 0x84, "Vertical")] public float Vertical_BestAngle;
        [RTTI.Member(13, 0x88, "Vertical")] public int Vertical_ImproveCount;
        [RTTI.Member(14, 0x8C, "Vertical")] public float Vertical_MaximumDistance;
        [RTTI.Member(15, 0x90, "Vertical")] public Array<float> Vertical_StartPositions;
        [RTTI.Member(16, 0xA0, "Vertical")] public float Vertical_StopPosition;
        [RTTI.Member(17, 0xA4, "Vertical")] public FRange Vertical_Velocity;
        [RTTI.Member(18, 0xAC, "Vertical")] public float Vertical_Smoothness;
    }

    [RTTI.Serializable(0x7BF618EFFCA0173D)]
    public class AISpringArmOperationSettings : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public Vec3 StartPoint;
        [RTTI.Member(1, 0x40, "General")] public Vec3 EndPoint;
        [RTTI.Member(2, 0x50, "General")] public Vec3 RandomStartPointOffset;
        [RTTI.Member(3, 0x60, "General")] public Ref<CurveResource> Spring;
    }

    [RTTI.Serializable(0x31A5220DD6C2B3D0)]
    public class AISpringArmWeaponOperationInstance : AIWeaponOperationInstance
    {
    }

    [RTTI.Serializable(0xB68733466E202A08)]
    public class AISpringArmWeaponOperationResource : AITimeBasedWeaponOperationResource
    {
        [RTTI.Member(0, 0x30, "General")] public Array<Ref<AISpringArmOperationSettings>> TrackingSpring;
        [RTTI.Member(1, 0x40, "General")] public bool StopOperationAtEndPoint;
        [RTTI.Member(2, 0x41, "General")] public bool TrackThreat;
        [RTTI.Member(3, 0x42, "General")] public bool PerformLosTestWithFriendlies;
        [RTTI.Member(4, 0x43, "General")] public bool PerformLosTestWithWorld;
        [RTTI.Member(5, 0x44, "General")] public bool ClampLineToOrientationRange;
        [RTTI.Member(6, 0x45, "General")] public bool ClampAimToOrientationRange;
    }

    [RTTI.Serializable(0x547D94A5A7385B33)]
    public class AIStanceChanger
    {
    }

    [RTTI.Serializable(0xA1C116567578C461)]
    public class AIStaticCoverMap : CoreObject, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(0, 0x20, "Settings")] public BoundingBox3 ViewCellBounds;
        [RTTI.Member(1, 0x40, "Settings")] public EAICover LegacyViewCellLOS;
        [RTTI.Member(2, 0x48, "Settings")] public CoverCompressionDepthTable DepthTable;
        [RTTI.Member(3, 0x68, "Settings")] public IVec2 UncompressedResolutionFront;
        [RTTI.Member(4, 0x70, "Settings")] public IVec2 UncompressedResolutionRight;
        [RTTI.Member(5, 0x78, "Settings")] public IVec2 UncompressedResolutionBack;
        [RTTI.Member(6, 0x80, "Settings")] public IVec2 UncompressedResolutionLeft;
        [RTTI.Member(7, 0x88, "Settings")] public IVec2 UncompressedResolutionTop;
        [RTTI.Member(8, 0x90, "Settings")] public IVec2 UncompressedResolutionBottom;
        [RTTI.Member(9, 0x98, "Cover")] public Ref<AIPositionList> Positions;
        [RTTI.Member(10, 0xA0, "Cover")] public uint Stride;
        [RTTI.Member(11, 0xA4, "Cover")] public bool IsForObjects;
        [RTTI.Member(12, 0xA8, "Cover", true)] public BitstreamData Data;
    }

    [RTTI.Serializable(0x70E5B7F389530D87)]
    public class AIStaticCoverMapSettings : CoreObject
    {
        [RTTI.Member(0, 0x28, "Render")] public IVec2 PixelMapResolution;
        [RTTI.Member(1, 0x30, "Render")] public bool UseExtendedProjection;
        [RTTI.Member(2, 0x40, "Render")] public BoundingBox3 ViewCellBounds;
        [RTTI.Member(3, 0x60, "Render")] public EAICover LegacyViewCellLOS;
        [RTTI.Member(4, 0x68, "Compression")] public IVec2 UncompressedResolutionFront;
        [RTTI.Member(5, 0x70, "Compression")] public IVec2 UncompressedResolutionRight;
        [RTTI.Member(6, 0x78, "Compression")] public IVec2 UncompressedResolutionBack;
        [RTTI.Member(7, 0x80, "Compression")] public IVec2 UncompressedResolutionLeft;
        [RTTI.Member(8, 0x88, "Compression")] public IVec2 UncompressedResolutionTop;
        [RTTI.Member(9, 0x90, "Compression")] public IVec2 UncompressedResolutionBottom;
        [RTTI.Member(10, 0x98, "Compression")] public FRange DepthRange;
        [RTTI.Member(11, 0xA0, "Compression")] public float DepthCurve;
    }

    [RTTI.Serializable(0xA4F39BC42F3BDDE1)]
    public class AIStealthArea : NavMeshObject
    {
    }

    [RTTI.Serializable(0x11F882558AD0BE0E)]
    public class AIStimulus : RTTIObject
    {
    }

    [RTTI.Serializable(0x42E7207D50ABEC5E)]
    public class AIStimulusResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public float PerceptionSignature;
        [RTTI.Member(1, 0x2C, "General")] public EThreatState ImmediateStateChange;
        [RTTI.Member(2, 0x30, "General")] public EThreatState MaximumStateChange;
        [RTTI.Member(3, 0x34, "General")] public float Duration;
        [RTTI.Member(4, 0x38, "General")] public EAlertLevel FriendlyAlertLevel;
        [RTTI.Member(5, 0x3C, "General")] public EAlertLevel EnemyAlertLevel;
        [RTTI.Member(6, 0x40, "General")] public Array<Ref<AIMessageResource>> StimulusMessages;
    }

    [RTTI.Serializable(0xAE6BB1354F364476)]
    public class AISubmergedAuralSensor : AIAuralSensor
    {
        [RTTI.Member(0, 0x30, "LoudnessAmplifier")] public float SignatureMultiplier;
        [RTTI.Member(1, 0x34, "LoudnessAmplifier")] public float MultiplierDecay;
        [RTTI.Member(2, 0x38, "LoudnessAmplifier")] public bool DeducedExactDetection;
        [RTTI.Member(3, 0x3C, "LoudnessFilter")] public float MinimumStimulusSignature;
        [RTTI.Member(4, 0x40, "LoudnessFilter")] public float MaximumHearingHeight;
    }

    [RTTI.Serializable(0x208859AC9D03D093)]
    public class AISupportAttackTicketThresholds : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int OneTicketPlayerLevelThreshold;
        [RTTI.Member(1, 0x24)] public int TwoTicketsPlayerLevelThreshold;
    }

    [RTTI.Serializable(0x83A60051AC832D2C)]
    public class AISweepModifier : AIScanModifier
    {
    }

    [RTTI.Serializable(0x30BF7E9A16F18DFD)]
    public class AITagToIdentifierMap : Resource
    {
        [RTTI.Member(0, 0x28)] public String Identifier;
        [RTTI.Member(1, 0x38)] public TagPropertyLink Property;
    }

    [RTTI.Serializable(0xD1F01CB66FD7DDA4)]
    public class AITagsMappingResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<AITagToIdentifierMap>> Mapping;
    }

    [RTTI.Serializable(0x6F5B69E8FE7664A3)]
    public class AITerrainClaim
    {
    }

    [RTTI.Serializable(0x191E1DBA3FDBE614)]
    public class AITerrainManager : CoreObject
    {
        [RTTI.Member(0, 0x30, "Terrain")] public Ref<AICoverManager> Cover;
        [RTTI.Member(1, 0x50, "Areas")] public Ref<AIAreaGraph> AreaGraph;
    }

    [RTTI.Serializable(0x6B725E7C4931A2C7)]
    public class AIThreatInfoMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x1175336481920208)]
    public class AIThreatInformationData
    {
        [RTTI.Member(0, 0x0)] public int NumProjectiles;
        [RTTI.Member(1, 0x4)] public float TimePeriod;
        [RTTI.Member(2, 0x8)] public EBehaviorEscalation BehaviorEscalation;
        [RTTI.Member(3, 0x9)] public EAreaOfInvestigation AreaOfInvestigation;
        [RTTI.Member(4, 0xA)] public EAreaOfInvestigation AreaOfInvestigationIfEmitterClose;
        [RTTI.Member(5, 0xC)] public float EmitterCloseDistance;
        [RTTI.Member(6, 0x10)] public float AreaOfInvestigationRadius;
        [RTTI.Member(7, 0x14)] public float AntiStealthPatchRadius;
    }

    [RTTI.Serializable(0x8522D1417758DBF6)]
    public class AIThrowableOriginInfoMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x45D71415E312EEA5)]
    public class AIThrowableOriginInfoMessageHandlerResource : AICombatSituationMessageHandlerResource
    {
        [RTTI.Member(0, 0x28, "MessageHandler")] public Ref<AIMessageResource> MessageToHandle;
        [RTTI.Member(1, 0x30, "AI")] public Array<AIThreatInformationData> ThreatInformation;
        [RTTI.Member(2, 0x40, "AI")] public String EventId;
    }

    [RTTI.Serializable(0xF6D9E91B9BFD135C)]
    public class AIThrowableOriginInfoMessageResource : AIDynamicDataMessageResource
    {
        [RTTI.Member(0, 0x28, "General")] public String EventId;
    }

    [RTTI.Serializable(0xD45DA3A4ED73633E)]
    public class AITimeBasedWeaponOperationResource : AIWeaponOperationResource
    {
        [RTTI.Member(0, 0x28, "General")] public FRange RandomTimeInterval;
    }

    [RTTI.Serializable(0xE1CD0852D84BB5B9)]
    public class AIToggleSensorMessage : AIMessage
    {
    }

    [RTTI.Serializable(0x885B3A7A74BD875B)]
    public class AITrapObstacle : NavMeshObject
    {
    }

    [RTTI.Serializable(0x9786CF6F57A18B48)]
    public class AIUsableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7171CC98DD4C8C07)]
    public class AIUsableInteractiveComponent : AIUsableComponent
    {
    }

    [RTTI.Serializable(0x52C0BAD9871B4A16)]
    public class AIUsableObject
    {
    }

    [RTTI.Serializable(0xF1F7CFA917C1E002)]
    public class AIUsableSequenceNetworkComponent : AIUsableComponent
    {
    }

    [RTTI.Serializable(0x2B87E15B0B4DD7BF)]
    public class AIVisualSensor : AISensor
    {
        [RTTI.Member(0, 0x28, "Vision")] public float DirectUnitDetectionDistance;
        [RTTI.Member(1, 0x2C, "Vision")] public float DirectHeadingAngle;
        [RTTI.Member(2, 0x34, "Vision")] public float DirectPitchAngle;
        [RTTI.Member(3, 0x3C, "Vision")] public float DirectWidth;
        [RTTI.Member(4, 0x40, "Vision")] public float DirectHeight;
        [RTTI.Member(5, 0x48, "Vision")] public Ref<CurveResource> DirectPerpendicularFactor;
        [RTTI.Member(6, 0x50, "Vision")] public Ref<CurveResource> DirectHeadingSensitivity;
        [RTTI.Member(7, 0x58, "Vision")] public Ref<CurveResource> DirectPitchSensitivity;
        [RTTI.Member(8, 0x60, "Vision")] public float TerrainReappearanceWpsMaxDistance;
        [RTTI.Member(9, 0x64, "Vision")] public float PeripheralUnitDetectionDistance;
        [RTTI.Member(10, 0x68, "Vision")] public float PeripheralHeadingAngle;
        [RTTI.Member(11, 0x6C, "Vision")] public float PeripheralStimulusSizeModifier;
        [RTTI.Member(12, 0x70, "Vision")] public Ref<CurveResource> PeripheralPerpendicularFactor;
        [RTTI.Member(13, 0x78, "Vision")] public Ref<CurveResource> PeripheralHeadingSensitivity;
        [RTTI.Member(14, 0x80, "Vision")] public Ref<CurveResource> PeripheralPitchSensitivity;
        [RTTI.Member(15, 0x88, "Vision")] public float LightThreshold;
        [RTTI.Member(16, 0x8C, "Vision")] public float LightInfluence;
        [RTTI.Member(17, 0x90, "Vision")] public float AtmosphereInfluence;
        [RTTI.Member(18, 0x94, "Vision")] public float SeeThroughCloakDistance;
        [RTTI.Member(19, 0x98, "Vision")] public float SeeThroughCloakDistancePeripheral;
        [RTTI.Member(20, 0x9C, "Vision")] public float SeeThroughAtmosphereDistance;
        [RTTI.Member(21, 0xA0, "Vision")] public float SeeThroughAtmosphereDistancePeripheral;
        [RTTI.Member(22, 0xA4, "Vision")] public float NearbyFriendlyDistance;
        [RTTI.Member(23, 0xA8, "Vision")] public float NearbyFriendlyInterval;
        [RTTI.Member(24, 0xAC, "Vision")] public float TPAExactSeeThroughDistanceModifier;
    }

    [RTTI.Serializable(0x3B47ADDA766526E7)]
    public class AIVisualStimulus : AIStimulus
    {
    }

    [RTTI.Serializable(0xCBF7B4AA8BA4FF05)]
    public class AIVisualStimulusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE33AB08CAEF82747)]
    public class AIVisualStimulusComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AIVisualStimulusResource> StimulusResource;
    }

    [RTTI.Serializable(0x54CB70860215A9B2)]
    public class AIVisualStimulusResource : AIStimulusResource
    {
        [RTTI.Member(0, 0x50, "General")] public float Size;
        [RTTI.Member(1, 0x54, "General")] public float SizeWhenFocusedOn;
        [RTTI.Member(2, 0x58, "General")] public EAlertLevel MaxRelevantAlertLevel;
    }

    [RTTI.Serializable(0x218BF163F44EB061)]
    public class AIWeaponAccuracyHintResource : AIHintSymbolResource
    {
    }

    [RTTI.Serializable(0x633362085AC48478)]
    public class AIWeaponAttack : AIAttack
    {
    }

    [RTTI.Serializable(0xFE8985A666DC9D97)]
    public class AIWeaponAttackResource : AIAttackResource
    {
        [RTTI.Member(0, 0x70, "Weapon")] public Ref<AIWeaponPreference> WeaponPref;
        [RTTI.Member(1, 0x78, "Weapon")] public Array<Ref<AIWeaponPreference>> WeaponPrefVariants;
    }

    [RTTI.Serializable(0x59FEDB80F62A5C77)]
    public class AIWeaponCarrier
    {
    }

    [RTTI.Serializable(0x528CCF9ED6F178F9)]
    public class AIWeaponCarrierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDD584ACB407A2F03)]
    public class AIWeaponCarrierComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xC35D50ABC3E537EB)]
    public class AIWeaponCarrierGame : AIWeaponCarrier
    {
    }

    [RTTI.Serializable(0xE66CCF2A76D8A1C2)]
    public class AIWeaponInterface : RTTIObject
    {
    }

    [RTTI.Serializable(0xD38FFA0A2B7D31B5)]
    public class AIWeaponInterfaceGame : AIWeaponInterface
    {
    }

    [RTTI.Serializable(0x4DFB177F167BC5C7)]
    public class AIWeaponOperationInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x951EA5202DAC7BA5)]
    public class AIWeaponOperationResource : Resource
    {
    }

    [RTTI.Serializable(0x1AED67F539C1C3A3)]
    public class AIWeaponPreference : Resource
    {
        [RTTI.Member(0, 0x38, "General")] public String WeaponId;
        [RTTI.Member(1, 0x40, "General")] public Array<Ref<AIWeaponPreferenceSettings>> Settings;
    }

    [RTTI.Serializable(0x240E0DB92F95498D)]
    public class AIWeaponPreferenceSettings : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public FRange RecoveryTime;
        [RTTI.Member(1, 0x30, "General")] public FRange FirstAimTime;
        [RTTI.Member(2, 0x38, "General")] public FRange AimTime;
        [RTTI.Member(3, 0x40, "General")] public Ref<AIWeaponOperationResource> Operation;
    }

    [RTTI.Serializable(0x717C050DC14A158D)]
    public class AIWildlifeAnnotation : WorldNode
    {
    }

    [RTTI.Serializable(0xC9AB8168EC2E87F7)]
    public class AIWildlifeClimbPoint : AIWildlifeAnnotation
    {
        [RTTI.Member(0, 0x60)] public String ClimbAnimation;
    }

    [RTTI.Serializable(0x4CAD75C06DB8CFCF)]
    public class AIWildlifePerchPoint : AIWildlifeAnnotation
    {
        [RTTI.Member(0, 0x60)] public float MaxWindSpeed;
    }

    [RTTI.Serializable(0xD42063C6110FEE72)]
    public class Ability : RTTIObject
    {
    }

    [RTTI.Serializable(0x42357632CD48544C)]
    public class AbilityAnimation : Ability
    {
    }

    [RTTI.Serializable(0x4B34F08CCC651A6E)]
    public class AbilityAnimationResource : AbilityResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool CanBeOverriden;
        [RTTI.Member(1, 0x2C, "Logic")] public float MaxRandomTimeOffset;
        [RTTI.Member(2, 0x30, "Logic")] public Ref<AnimationManagerResource> AnimationManager;
    }

    [RTTI.Serializable(0x725D6A2FD1EB694C)]
    public class AbilityPoseDeformer : Ability
    {
    }

    [RTTI.Serializable(0xAC805A0FA4D88E60)]
    public class AbilityPoseDeformerResource : AbilityResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PoseDeformerResource> PoseDeformerResource;
        [RTTI.Member(1, 0x30, "PBDLod")] public float PBDLodDist1;
        [RTTI.Member(2, 0x34, "PBDLod")] public float PBDLodDist2;
        [RTTI.Member(3, 0x38, "PBDLod")] public float PBDLodDist3;
    }

    [RTTI.Serializable(0x5FDD4E826C2B9FB2)]
    public class AbilityResource : Resource
    {
    }

    [RTTI.Serializable(0x124E3EF76D660915)]
    public class AbilitySimpleAnimation : Ability
    {
    }

    [RTTI.Serializable(0x212A4E5778F4816E)]
    public class AbilitySimpleAnimationResource : AbilityResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<SkeletonAnimationResource> DefaultAnimationResource;
    }

    [RTTI.Serializable(0xF356545626DFE8A6)]
    public class AccuracyImprovementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5E25D6EDCDA9B1C4)]
    public class AccuracyImprovementComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float HorizontalSpreadReduction;
        [RTTI.Member(1, 0x2C, "Logic")] public float VerticalSpreadReduction;
        [RTTI.Member(2, 0x30, "Logic")] public float HorizontalRecoilReduction;
        [RTTI.Member(3, 0x34, "Logic")] public float VerticalRecoilReduction;
        [RTTI.Member(4, 0x38, "Logic")] public float RandomRecoilReduction;
    }

    [RTTI.Serializable(0x4635E66E8744644E)]
    public class AccuracyOverrideResource : Resource
    {
        [RTTI.Member(0, 0x28, "Accuracy")] public Ref<AccuracySettings> PrimaryAccuracySettingsSP;
        [RTTI.Member(1, 0x30, "Accuracy")] public Ref<AccuracySettings> PrimaryAccuracySettingsMP;
        [RTTI.Member(2, 0x38, "Accuracy")] public Ref<AccuracySettings> PrimaryAccuracySettingsAI;
        [RTTI.Member(3, 0x40, "Accuracy")] public Ref<AimDeviationResource> AimDeviationResource;
    }

    [RTTI.Serializable(0x385FA874928E0E17)]
    public class AccuracySettings : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<CurveResource> HorizontalSpread;
        [RTTI.Member(1, 0x30, "General")] public Ref<CurveResource> VerticalSpread;
        [RTTI.Member(2, 0x38, "General")] public Ref<CurveResource> HorizontalRecoil;
        [RTTI.Member(3, 0x40, "General")] public Ref<CurveResource> VerticalRecoil;
        [RTTI.Member(4, 0x48, "General")] public Ref<CurveResource> HorizontalSpreadFalloff;
        [RTTI.Member(5, 0x50, "General")] public Ref<CurveResource> VerticalSpreadFalloff;
        [RTTI.Member(6, 0x58, "General")] public Ref<CurveResource> HorizontalRecoilFalloff;
        [RTTI.Member(7, 0x60, "General")] public Ref<CurveResource> VerticalRecoilFalloff;
        [RTTI.Member(8, 0x68, "General")] public float FirstShotSpreadFactor;
        [RTTI.Member(9, 0x6C, "General")] public float FirstShotAccuracyMovementMax;
        [RTTI.Member(10, 0x70, "General")] public Ref<CurveResource> RandomRecoilCurveResource;
        [RTTI.Member(11, 0x78, "General")] public float RandomRecoilRecoverSpeed;
        [RTTI.Member(12, 0x7C, "General")] public float RandomRecoilRecoverSpeedBlendInTime;
        [RTTI.Member(13, 0x80, "General")] public float CursorRecoilFactor;
    }

    [RTTI.Serializable(0x5B7AA2AB4A1C4341)]
    public class Achievement : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public int AddedBonus;
        [RTTI.Member(1, 0x2C, "General")] public float MultiplierBonus;
        [RTTI.Member(2, 0x30, "General")] public Array<ScoreStatRequirement> Requirements;
        [RTTI.Member(3, 0x40, "Menu")] public String LocalizerKey;
        [RTTI.Member(4, 0x48, "Menu")] public String UnlockLocalizerKey;
        [RTTI.Member(5, 0x58, "Menu")] public String Icon;
    }

    [RTTI.Serializable(0x6DB81BD82F4AA4E0)]
    public class AchievementGroupResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<Achievement>> Achievements;
        [RTTI.Member(1, 0x38, "General")] public String LocalizerKey;
    }

    [RTTI.Serializable(0x745ED76D82AEFAA3)]
    public class AchievementsResource : Resource
    {
        [RTTI.Member(0, 0x38, "General")] public Array<Ref<AchievementGroupResource>> AchievementGroups;
    }

    [RTTI.Serializable(0x6BAE0B7D739D3118)]
    public class AcknowledgeMessageDelivered : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<String> MessageUUIDs;
    }

    [RTTI.Serializable(0xF9690F602F900E8B)]
    public class ActionAbilityUseCondition : Resource
    {
    }

    [RTTI.Serializable(0x10CBD8C1E6152DC6)]
    public class ActionAbilityUseConditionRadarNotScrambled : ActionAbilityUseCondition
    {
    }

    [RTTI.Serializable(0x36F08086D8E9728E)]
    public class ActionPerAnimationEvent
    {
        [RTTI.Member(0, 0x0)] public String EventID;
        [RTTI.Member(1, 0x8)] public Ref<EntityAction> Action;
        [RTTI.Member(2, 0x10)] public bool IsStarted;
    }

    [RTTI.Serializable(0x357656663AF71A3D)]
    public class ActivateByReactionToEpulseComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE3272F0EA36BB789)]
    public class ActivateByReactionToEpulseComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<DamageTypeResource> DamageTypeForEpulseResource;
        [RTTI.Member(1, 0x30, "Logic")] public CPtr<EntityAction> Action;
    }

    [RTTI.Serializable(0xBC389A5FDFCA3941)]
    public class ActivateRobotStateAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<RobotStateComponentResource> RobotState;
        [RTTI.Member(1, 0x38, "Logic")] public bool Activate;
    }

    [RTTI.Serializable(0xE4F08F09191B12CA)]
    public class ActivatingUseLocationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x32A3ECE748E9B150)]
    public class ActivatingUseLocationComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xFE6E316B328C4B21)]
    public class ActivatorReactsToDamageAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0x2303494057EB497D)]
    public class ActivePlaylistInfoRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int PageIndex;
        [RTTI.Member(1, 0x24)] public int PageSize;
        [RTTI.Member(2, 0x28)] public String RequiredTag;
    }

    [RTTI.Serializable(0x39395DDF95663B04)]
    public class ActiveSnowInteractionRegion
    {
        [RTTI.Member(0, 0x0)] public IVec2 MinTile;
        [RTTI.Member(1, 0x0)] public IVec2 MaxTile;
    }

    [RTTI.Serializable(0x5009E3555D469790)]
    public class ActiveStatModifierResource : StatModifierResource
    {
    }

    [RTTI.Serializable(0x7678AF9A460B8A77)]
    public class ActivityFeedEntry
    {
        [RTTI.Member(0, 0x0)] public String Language;
        [RTTI.Member(1, 0x8)] public String Text;
    }

    [RTTI.Serializable(0x8D2C84C9C394E7B6)]
    public class ActivityFeedItem
    {
        [RTTI.Member(0, 0x0)] public String ID;
        [RTTI.Member(1, 0x8)] public Array<ActivityFeedEntry> Entries;
    }

    [RTTI.Serializable(0x2286D92A126111F3)]
    public class ActivityFeedResourceCollection : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<ActivityFeedItem> Items;
    }

    [RTTI.Serializable(0x2DDD9D523D56125B)]
    public class ActivityFeedStatTriggerResource : Resource
    {
        [RTTI.Member(0, 0x28)] public String ActivityFeedMsgID;
        [RTTI.Member(1, 0x30)] public int ActivityFeedStoryID;
        [RTTI.Member(2, 0x34)] public EPlayerScoreStat PlayerStat;
        [RTTI.Member(3, 0x38)] public bool PerPlaylist;
        [RTTI.Member(4, 0x40, "Representation")] public String ActivityFeedSmallImgUrl;
        [RTTI.Member(5, 0x48, "Representation")] public String ActivityFeedSmallImgAspect;
        [RTTI.Member(6, 0x50, "Representation")] public String ActivityFeedLargeImgUrl;
        [RTTI.Member(7, 0x58, "Action")] public EActivityFeedTriggerAction ActivityFeedAction;
        [RTTI.Member(8, 0x60, "Action")] public String ActivityFeedActionArguments;
        [RTTI.Member(9, 0x68, "Action")] public String ActivityFeedActionButtonID;
    }

    [RTTI.Serializable(0x310E8660CF89DE88)]
    public class ActivityFeedSystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "Triggers")] public Array<Ref<ActivityFeedStatTriggerResource>> ActivityFeedTriggers;
        [RTTI.Member(1, 0x38, "ButtonCaptions")] public String JoinPlaylistButtonCaptionID;
        [RTTI.Member(2, 0x40, "ButtonCaptions")] public String StartMPGameButtonCaptionID;
        [RTTI.Member(3, 0x48, "ButtonCaptions")] public String OpenWebsiteGameButonCaptionID;
        [RTTI.Member(4, 0x50, "Unlocks")] public String RewardUnlockFeedMsgID;
        [RTTI.Member(5, 0x58, "Unlocks")] public String RewardUnlockFeedSmallImgUrl;
        [RTTI.Member(6, 0x60, "Unlocks")] public String RewardUnlockFeedSmallImgAspect;
        [RTTI.Member(7, 0x68, "Unlocks")] public String RewardUnlockFeedLargeImgUrl;
        [RTTI.Member(8, 0x70, "Challenges")] public String ChallengeFeedMsgID;
        [RTTI.Member(9, 0x78, "Challenges")] public String ChallengeFeedSmallImgUrl;
        [RTTI.Member(10, 0x80, "Challenges")] public String ChallengeFeedSmallImgAspect;
        [RTTI.Member(11, 0x88, "Challenges")] public String ChallengeFeedLargeImgUrl;
        [RTTI.Member(12, 0x90, "Challenges")] public Array<int> ChallengeMilestones;
        [RTTI.Member(13, 0xA0, "Friends")] public String PlayedWithFriendsFeedMsgID;
        [RTTI.Member(14, 0xA8, "Friends")] public String PlayedWithFriendsFeedSmallImgUrl;
        [RTTI.Member(15, 0xB0, "Friends")] public String PlayedWithFriendsFeedSmallImgAspect;
        [RTTI.Member(16, 0xB8, "Friends")] public String PlayedWithFriendsFeedLargeImgUrl;
        [RTTI.Member(17, 0xC0, "Friends")] public String FriendKilledFeedMsgID;
        [RTTI.Member(18, 0xC8, "Friends")] public String FriendKilledFeedSmallImgUrl;
        [RTTI.Member(19, 0xD0, "Friends")] public String FriendKilledFeedSmallImgAspect;
        [RTTI.Member(20, 0xD8, "Friends")] public String FriendKilledFeedLargeImgUrl;
        [RTTI.Member(21, 0xE0, "Friends")] public int FriendKilledMinimumValue;
        [RTTI.Member(22, 0xE8, "Friends")] public String FriendRevivedFeedMsgID;
        [RTTI.Member(23, 0xF0, "Friends")] public String FriendRevivedFeedSmallImgUrl;
        [RTTI.Member(24, 0xF8, "Friends")] public String FriendRevivedFeedSmallImgAspect;
        [RTTI.Member(25, 0x100, "Friends")] public String FriendRevivedFeedLargeImgUrl;
        [RTTI.Member(26, 0x108, "Friends")] public int FriendRevivedMinimumValue;
        [RTTI.Member(27, 0x110, "Playlist")] public String PlaylistCreatedFeedMsgID;
        [RTTI.Member(28, 0x118, "Playlist")] public String PlaylistCreatedFeedSmallImgUrl;
        [RTTI.Member(29, 0x120, "Playlist")] public String PlaylistCreatedFeedSmallImgAspect;
        [RTTI.Member(30, 0x128, "Playlist")] public String PlaylistCreatedFeedLargeImgUrl;
    }

    [RTTI.Serializable(0xA0FC34207F3BF3DC)]
    public class ActivityMedal : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> DisplayDescription;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<LocalizedTextResource> StartActivityFailureReason;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<GraphProgramResource> StartActivityConditionGraph;
    }

    [RTTI.Serializable(0x899820101DFC8502)]
    public class ActivityMedalQuestReward : QuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<UITexture> UIIcon;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(2, 0x50, "Logic")] public Ref<ActivityMedal> Medal;
        [RTTI.Member(3, 0x58, "Logic")] public EActivityMedalType MedalType;
        [RTTI.Member(4, 0x60, "Logic")] public Ref<UITexture> MedalIcon;
        [RTTI.Member(5, 0x68, "Logic")] public Ref<UITexture> NoMedalIcon;
        [RTTI.Member(6, 0x70, "Logic")] public String RequirementAmount;
        [RTTI.Member(7, 0x78, "Logic")] public Ref<LocalizedTextResource> RequirementText;
    }

    [RTTI.Serializable(0x2AA2531C4725AA54)]
    public class ActorBodyPoseSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0x509ACED1EBFE02A)]
    public class ActorFacePoseSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0x1CD5BC9DEF9BCD32)]
    public class ActorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xEC4DC97C960A3C2E)]
    public class ActorResource : LocatorResource
    {
    }

    [RTTI.Serializable(0x9003AE099F657412)]
    public class ActorSnapshot
    {
    }

    [RTTI.Serializable(0xC7E45C7916D1FC42)]
    public class ActorTransformSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0x73C9F8D48BC307C)]
    public class AddHUDElementAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<HUDElementResource> HUDElementResource;
    }

    [RTTI.Serializable(0x45E94E5E7981F423)]
    public class AddHealthSegmentAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<HealthSegmentResource> HealthSegment;
    }

    [RTTI.Serializable(0x558C42495A36DF65)]
    public class AddInventoryItemAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityResource> Item;
        [RTTI.Member(1, 0x38, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x204356D8721E8632)]
    public class AddItemToInventoryAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x38, "Logic")] public int Amount;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<EquipSlotType> EquipInSlot;
        [RTTI.Member(3, 0x48, "Logic")] public int EquipSlotIndex;
        [RTTI.Member(4, 0x4C, "Logic")] public bool SwitchToItem;
    }

    [RTTI.Serializable(0x89C640DDE4536D3B)]
    public class AddPlaylistRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<PlaylistData> PlaylistData;
        [RTTI.Member(1, 0x28)] public Array<String> Tags;
    }

    [RTTI.Serializable(0x9A746A4A8E56830A)]
    public class AddPlaylistResult : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String PlaylistID;
    }

    [RTTI.Serializable(0x6B79E1A17EF6EEFC)]
    public class AddXpAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<LevelBasedXpReward> XpReward;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<LocalizedTextResource> Reason;
    }

    [RTTI.Serializable(0x45095E959587E826)]
    public class AimAssistComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8977E36937177EFB)]
    public class AimAssistComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Collision")] public EPhysicsCollisionLayerGame AimCollisionLayer;
        [RTTI.Member(1, 0x2C, "Collision")] public int AimCollisionCount;
        [RTTI.Member(2, 0x30, "Collision")] public float AimCollisionRange;
        [RTTI.Member(3, 0x34, "Collision")] public float AimCollisionAngle;
        [RTTI.Member(4, 0x38, "Damping")] public float DampingEnabledIn;
        [RTTI.Member(5, 0x3C, "Damping")] public float DampingEnabledTime;
        [RTTI.Member(6, 0x40, "Damping")] public float DampingEnabledOut;
        [RTTI.Member(7, 0x44, "Damping")] public float DampingDisabledOut;
        [RTTI.Member(8, 0x48, "Damping")] public Ref<CurveResource> DampingOverMoveInputX;
        [RTTI.Member(9, 0x50, "Damping")] public Ref<CurveResource> DampingOverMoveInputY;
        [RTTI.Member(10, 0x58, "Damping")] public Ref<CurveResource> DampingOverRange;
    }

    [RTTI.Serializable(0xDAE7BCE7F839140B)]
    public class AimAtEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5D8F182A2A397029)]
    public class AimAtEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0x206B505D463F66E6)]
    public class AimAtLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xAE52CF5842260656)]
    public class AimAtLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> AimTargetLocator;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocator;
    }

    [RTTI.Serializable(0xC99BA1AA484FFA27)]
    public class AimDeviation
    {
    }

    [RTTI.Serializable(0x1EE77D24A495309E)]
    public class AimDeviationResource : Resource
    {
        [RTTI.Member(0, 0x28, "Sway")] public Ref<CurveResource> HorizontalSway;
        [RTTI.Member(1, 0x30, "Sway")] public Ref<CurveResource> VerticalSway;
        [RTTI.Member(2, 0x38, "Sway")] public Ref<CurveResource> MoveSpeedSwayCurve;
        [RTTI.Member(3, 0x40, "Sway")] public Ref<CurveResource> LookSpeedSwayCurve;
        [RTTI.Member(4, 0x48, "Sway")] public float CrouchSwayModifier;
        [RTTI.Member(5, 0x50, "Sway")] public Ref<CurveResource> TriggerPressureSwayCurve;
        [RTTI.Member(6, 0x58, "Sway")] public ESwayChange SwayOnActivate;
        [RTTI.Member(7, 0x5C, "Sway")] public ESwayChange SwayOnFire;
        [RTTI.Member(8, 0x60, "Sway")] public ESwayChange SwayOnChangeStance;
        [RTTI.Member(9, 0x68, "AimLag")] public Ref<SpringResource> HeadingSpring;
        [RTTI.Member(10, 0x70, "AimLag")] public Ref<SpringResource> PitchSpring;
        [RTTI.Member(11, 0x78, "AimLag")] public float HeadingMoveAimLagFactor;
        [RTTI.Member(12, 0x7C, "AimLag")] public float PitchMoveAimLagFactor;
        [RTTI.Member(13, 0x80, "AimLag")] public float HeadingLookAimLagFactor;
        [RTTI.Member(14, 0x84, "AimLag")] public float PitchLookAimLagFactor;
        [RTTI.Member(15, 0x90, "AimLag")] public Vec2 DynamicRecoil;
    }

    [RTTI.Serializable(0x69BABC7BCC10E469)]
    public class AimIKComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC8F5D82BE328DF85)]
    public class AimIKComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String AimIKAnimationVariableName_Primary;
        [RTTI.Member(1, 0x30, "Logic")] public String AimIKWeightAnimationVariableName_Primary;
        [RTTI.Member(2, 0x38, "Logic")] public String DisableAimIKEvent;
        [RTTI.Member(3, 0x40, "Logic")] public float IKWeightBlendDuration;
    }

    [RTTI.Serializable(0xC417EC2F16029195)]
    public class AimLagSettings : Resource
    {
        [RTTI.Member(0, 0x28, "AimLag")] public Ref<SpringResource> HeadingSpringResource;
        [RTTI.Member(1, 0x30, "AimLag")] public Ref<SpringResource> PitchSpringResource;
        [RTTI.Member(2, 0x38, "AimLag")] public float HeadingSpringAimForceFactor;
        [RTTI.Member(3, 0x3C, "AimLag")] public float HeadingSpringMoveForceFactor;
        [RTTI.Member(4, 0x40, "AimLag")] public float PitchSpringAimForceFactor;
        [RTTI.Member(5, 0x44, "AimLag")] public float PitchSpringMoveForceFactor;
    }

    [RTTI.Serializable(0x8BC368072B6ADB7)]
    public class AimLimitsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1FE28671AD1742C3)]
    public class AimLimitsEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public FRange HeadingLimits;
        [RTTI.Member(2, 0x48, "Logic")] public FRange PitchLimits;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<CurveResource> BlendCurve;
    }

    [RTTI.Serializable(0x9507855C91C7E74)]
    public class AimLockTargetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8D5DB5B471D28A1D)]
    public class AimLockTargetComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<DestructibilityPart>> LockableDestructibilityParts;
    }

    [RTTI.Serializable(0xD1DEAC76356770CB)]
    public class AimerWeapon : EntityComponent
    {
    }

    [RTTI.Serializable(0x8ED73752F16A9B8A)]
    public class AimerWeaponResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x370522436963A669)]
    public class AimingMagnetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8003925C5AA498B)]
    public class AimingMagnetComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "FixAim")] public Ref<CameraMagnetTagResource> FixTag;
        [RTTI.Member(1, 0x30, "FixAim")] public float FixWeight;
        [RTTI.Member(2, 0x34, "FixAim")] public float FixStrength;
        [RTTI.Member(3, 0x38, "FixAim")] public Ref<CurveResource> FixStrengthOverTime;
        [RTTI.Member(4, 0x40, "FixAim")] public Ref<CurveResource> FixRangeToStrength;
        [RTTI.Member(5, 0x48, "Collision")] public EPhysicsCollisionLayerGame AimCollisionLayer;
        [RTTI.Member(6, 0x4C, "Collision")] public float AimCollisionRangeMin;
        [RTTI.Member(7, 0x50, "Collision")] public float AimCollisionRangeMax;
    }

    [RTTI.Serializable(0x558ADBDF7BD1F15F)]
    public class AirMoverComponent : Mover
    {
    }

    [RTTI.Serializable(0xC0EF9794784A1635)]
    public class AirMoverComponentPostureSettings : AIMoverPostureSettings
    {
        [RTTI.Member(0, 0x48, "Animation")] public AnimationStateID LandingStateID;
    }

    [RTTI.Serializable(0x5CBD1C26E8CFBE27)]
    public class AirMoverComponentResource : MoverResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public float MaximumSpeed;
        [RTTI.Member(1, 0x34, "Logic")] public float MaximumTurnSpeed;
        [RTTI.Member(2, 0x38, "Logic")] public float MaximumAcceleration;
        [RTTI.Member(3, 0x3C, "Logic")] public float MaximumTurnAcceleration;
        [RTTI.Member(4, 0x40, "Animation")] public FRange RandomAnimationActionInterval;
        [RTTI.Member(5, 0x48, "Animation")] public String HoverAnimationAction;
        [RTTI.Member(6, 0x50, "Animation")] public String LocomotionTag;
        [RTTI.Member(7, 0x58, "Animation")] public String AdditiveTranslationTag;
        [RTTI.Member(8, 0x60, "Animation", true)] public String AnimTagLanding;
        [RTTI.Member(9, 0x68, "Animation")] public Array<Ref<AirMoverComponentPostureSettings>> Postures;
        [RTTI.Member(10, 0x78, "Animation")] public String VariableDesiredPosture;
        [RTTI.Member(11, 0x80, "Animation")] public Ref<AnimationManagerResource> AnimationManager;
        [RTTI.Member(12, 0x88, "Animation")] public AnimationTagID LandingTagID;
        [RTTI.Member(13, 0x90, "Animation")] public String VariableBankHeading;
        [RTTI.Member(14, 0x98, "Animation")] public String AnimVarClimbingStart;
        [RTTI.Member(15, 0xA0, "Animation")] public String AnimVarSpeed;
        [RTTI.Member(16, 0xA8, "Animation")] public String RandomFlyingAnimationAction;
        [RTTI.Member(17, 0xB0, "Animation")] public String QuickTurnAnimationAction;
        [RTTI.Member(18, 0xB8, "Animation")] public String QuickTurnDirectionVariable;
        [RTTI.Member(19, 0xC0, "HoverPushAnimation")] public float HoverPushThreshold;
        [RTTI.Member(20, 0xC8, "HoverPushAnimation")] public String HoverPushAnimationAction;
        [RTTI.Member(21, 0xD0, "HoverPushAnimation")] public String HoverPushDirectionVariable;
        [RTTI.Member(22, 0xD8, "HoverPushAnimation")] public int HoverPushLeftValue;
        [RTTI.Member(23, 0xDC, "HoverPushAnimation")] public int HoverPushRightValue;
        [RTTI.Member(24, 0xE0, "HoverPushAnimation")] public int HoverPushBackwardValue;
        [RTTI.Member(25, 0xE4, "HoverPushAnimation")] public int HoverPushForwardValue;
        [RTTI.Member(26, 0xE8, "HoverPushAnimation")] public int HoverPushDownValue;
        [RTTI.Member(27, 0xEC, "HoverPushAnimation")] public int HoverPushUpValue;
        [RTTI.Member(28, 0xF0, "Logic")] public bool Aquatic;
        [RTTI.Member(29, 0xF4, "Logic")] public float PhysicsCollisionSize;
        [RTTI.Member(30, 0xF8, "Logic")] public bool IsAgentAnOwl;
        [RTTI.Member(31, 0xFC, "Logic")] public float LookAheadTime;
        [RTTI.Member(32, 0x100, "Logic")] public float QuickTurnAngleThreshold;
    }

    [RTTI.Serializable(0x1E2621C8FA90F01A)]
    public class AirNavSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public float CellSize;
        [RTTI.Member(1, 0x2C, "General")] public uint32 TileResolution;
        [RTTI.Member(2, 0x30, "General")] public float AgentRadius;
        [RTTI.Member(3, 0x34, "General")] public int InitialPathQueryMipLevel;
    }

    [RTTI.Serializable(0x5AF32A7A5A225EB3)]
    public class AirNavigationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEA406E0BCB9CE218)]
    public class AirNavigationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<AirNavSettingsResource> Settings;
        [RTTI.Member(1, 0x30, "General")] public float GenerationExtents;
        [RTTI.Member(2, 0x34, "General")] public float RemovalExtents;
    }

    [RTTI.Serializable(0x79B7B65492FDE8B9)]
    public class Alert
    {
        [RTTI.Member(0, 0x0)] public AlertPart AlertPart;
        [RTTI.Member(1, 0x30)] public Array<String> ContextStack;
        [RTTI.Member(2, 0x40)] public EAlertType Type;
        [RTTI.Member(3, 0x54)] public EProcessReturnValue ProcessReturnValue;
    }

    [RTTI.Serializable(0x28214EFFB71C2F32)]
    public class AlertAIAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public float AIAlertRadius;
    }

    [RTTI.Serializable(0x3D4B5C84C50E03CE)]
    public class AlertPart
    {
        [RTTI.Member(0, 0x0)] public Array<String> Attributes;
        [RTTI.Member(1, 0x10)] public Array<AlertPart> Children;
        [RTTI.Member(2, 0x20)] public EAlertPartType Type;
        [RTTI.Member(3, 0x28)] public String Value;
    }

    [RTTI.Serializable(0xF83A0359993301AD)]
    public class AlignToUserComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDCA0277F9E8916FB)]
    public class AlignToUserComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xD7E4E30EC364C680)]
    public class AlphaPeg : PegBase
    {
        [RTTI.Member(0, 0x10, "General")] public float Alpha;
    }

    [RTTI.Serializable(0x5D8ABC5A43204A3C)]
    public class AlwaysActiveActivationPolicy : EntityActivationPolicy
    {
    }

    [RTTI.Serializable(0x62F2B6FA212AE84E)]
    public class AlwaysLoadedStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0x3C044275D70A124B)]
    public class AlwaysLoadedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(0, 0x58, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0xAA1380CF1A34420B)]
    public class AmbienceAttributeTrackBase : CoreObject
    {
        [RTTI.Member(0, 0x20)] public String AttributeName;
    }

    [RTTI.Serializable(0xA2A0261C73FA6FDA)]
    public class AmbienceBiasSettingsTrack : AmbienceSettingsTrack
    {
        [RTTI.Member(0, 0x38)] public Ref<WeatherInfluenceFactor> WeatherInfluenceFactor;
    }

    [RTTI.Serializable(0xBD1853CDCDE8A7D4)]
    public class AmbienceColorAttributeTrack : AmbienceAttributeTrackBase
    {
        [RTTI.Member(0, 0x28)] public Ref<Gradient> Gradient;
    }

    [RTTI.Serializable(0x43CE53EFC4F017D6)]
    public class AmbienceColorizeKeyframe
    {
        [RTTI.Member(0, 0x0)] public float Fraction;
        [RTTI.Member(1, 0x8)] public Ref<ColorizeSettingsResource> ColorizeSettings;
    }

    [RTTI.Serializable(0xA36B54C9460CFD51)]
    public class AmbienceColorizeTrack : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<AmbienceColorizeKeyframe> Keyframes;
    }

    [RTTI.Serializable(0xBE53434777EBA382)]
    public class AmbienceCurveAttributeKeyFrame
    {
        [RTTI.Member(0, 0x0)] public Ref<CurveResource> Curve;
        [RTTI.Member(1, 0x8)] public float Fraction;
    }

    [RTTI.Serializable(0x95B8151BD5148207)]
    public class AmbienceCurveAttributeTrack : AmbienceAttributeTrackBase
    {
        [RTTI.Member(0, 0x28)] public Array<AmbienceCurveAttributeKeyFrame> KeyFrames;
    }

    [RTTI.Serializable(0xACE2BE5671EF6723)]
    public class AmbienceCycle : AmbienceCycleBase
    {
        [RTTI.Member(0, 0x30)] public Ref<CurveResource> SunElevationAngle;
        [RTTI.Member(1, 0x38)] public Ref<CurveResource> SunAzimuthAngle;
        [RTTI.Member(2, 0x40)] public Ref<CurveResource> MoonElevationAngle;
        [RTTI.Member(3, 0x48)] public Ref<CurveResource> MoonAzimuthAngle;
        [RTTI.Member(4, 0x50)] public float MoonDistance;
        [RTTI.Member(5, 0x60)] public Vec4 SunToMoonFadeTimes;
        [RTTI.Member(6, 0x70)] public Ref<SunLightResource> SunLightResource;
        [RTTI.Member(7, 0x78)] public Ref<SunLightResource> MoonLightResource;
    }

    [RTTI.Serializable(0x1C69689808E79640)]
    public class AmbienceCycleBase : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<AmbienceSettingsKeyFrame>> AmbienceKeyFrames;
    }

    [RTTI.Serializable(0x388848394E3B4081)]
    public class AmbienceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xFC13A4EEBF1A4F4E)]
    public class AmbienceEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "General")] public Ref<AmbienceCycle> AmbienceCycle;
    }

    [RTTI.Serializable(0x9BE4EBB1350F1BF8)]
    public class AmbienceFloatAttributeTrack : AmbienceAttributeTrackBase
    {
        [RTTI.Member(0, 0x28)] public Ref<CurveResource> CurveResource;
    }

    [RTTI.Serializable(0xC58E7D2B8B96F089)]
    public class AmbienceGlobalRenderVariableValues : CoreObject
    {
        [RTTI.BaseClass(0x20)] public GlobalRenderVariableValues @GlobalRenderVariableValues;
    }

    [RTTI.Serializable(0x9E6FC71CF930A471)]
    public class AmbienceLightingSettings
    {
        [RTTI.Member(0, 0x0)] public float SunLightIntensityScale;
        [RTTI.Member(1, 0x4)] public float StaticIndirectScale;
        [RTTI.Member(2, 0x8)] public float SkyLightScale;
        [RTTI.Member(3, 0xC)] public float SkyLightDesaturate;
        [RTTI.Member(4, 0x10)] public float SunBounceScaleColorDesaturate;
    }

    [RTTI.Serializable(0xAE65B0664A79919C)]
    public class AmbienceLightingSettingsResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public AmbienceLightingSettings Settings;
    }

    [RTTI.Serializable(0x6B1644EF58E69ED9)]
    public class AmbienceManager : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<AmbienceCycle> BaseCycle;
        [RTTI.Member(1, 0x30)] public Ref<SunLightResource> SunLightResource;
        [RTTI.Member(2, 0x38)] public Ref<SunLightResource> MoonLightResource;
        [RTTI.Member(3, 0x40)] public Ref<StaticMeshInstance> MoonMeshInstance;
        [RTTI.Member(4, 0x48)] public Ref<StaticMeshInstance> NightSkyStarFieldMesh;
        [RTTI.Member(5, 0x50)] public Ref<StaticMeshInstance> NightSkyHorizonMesh;
        [RTTI.Member(6, 0xB8)] public float SunFlareLingerTime;
    }

    [RTTI.Serializable(0x1A5951CD9742520F)]
    public class AmbienceSettings : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<ExposureSettingsResource> ExposureSettings;
        [RTTI.Member(1, 0x28)] public Ref<LightShaftSettingsResource> LightShaftSettings;
        [RTTI.Member(2, 0x30)] public Ref<BloomSettingsResource> BloomSettings;
        [RTTI.Member(3, 0x38)] public Ref<AmbienceLightingSettingsResource> LightingSettings;
        [RTTI.Member(4, 0x40)] public Ref<ColorizeSettingsResource> ColorizeSettings;
        [RTTI.Member(5, 0x48)] public Ref<CloudRenderSettingsResource> CloudRenderSettings;
        [RTTI.Member(6, 0x50)] public Ref<AtmosphereSkySettingsResource> AtmosphereSkySettings;
        [RTTI.Member(7, 0x58)] public Ref<AtmosphereHazeSettingsResource> AtmosphereHazeSettings;
        [RTTI.Member(8, 0x60)] public Ref<AtmosphereFogSettingsResource> AtmosphereFogSettings;
        [RTTI.Member(9, 0x68)] public Ref<AmbienceGlobalRenderVariableValues> GlobalRenderVariableValues;
        [RTTI.Member(10, 0x70)] public Ref<RainbowAndSundogSettingsResource> RainbowAndSundogSettings;
        [RTTI.Member(11, 0x78)] public Ref<AuroraSettingsResource> AuroraSettings;
    }

    [RTTI.Serializable(0x673511A38AF875B1)]
    public class AmbienceSettingsKeyFrame : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<AmbienceSettings> AmbienceSettings;
        [RTTI.Member(1, 0x28)] public float TimeOfDay;
    }

    [RTTI.Serializable(0xE9C27FF65DD26346)]
    public class AmbienceSettingsTrack : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<AmbienceColorizeTrack> ColorizeTrack;
        [RTTI.Member(1, 0x28)] public Array<Ref<AmbienceAttributeTrackBase>> AttributeTracks;
    }

    [RTTI.Serializable(0xDE056B31F1897B26)]
    public class AmbienceSetup : CoreObject
    {
        [RTTI.Member(0, 0x20)] public DeprecatedAmbienceSettings Settings;
        [RTTI.Member(1, 0x2A0)] public Ref<AmbienceSettingsTrack> DayNightCycleSettingsTrack;
        [RTTI.Member(2, 0x2A8)] public Array<Ref<AmbienceBiasSettingsTrack>> BiasSettingsTracks;
        [RTTI.Member(3, 0x2B8)] public Ref<SunLightResource> SunLightResource;
        [RTTI.Member(4, 0x2C0)] public Ref<SunLightResource> MoonLightResource;
    }

    [RTTI.Serializable(0xDDA1D8F6E0D2E5D2)]
    public class AmbienceSetupCollection : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<AmbienceSetupCollectionEntry>> Entries;
    }

    [RTTI.Serializable(0xD4B186647AFBE775)]
    public class AmbienceSetupCollectionEntry : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<AmbienceSetup> AmbienceSetup;
        [RTTI.Member(1, 0x28)] public Ref<WeatherInfluenceFactor> WeatherInfluence;
    }

    [RTTI.Serializable(0xD9FD059AF0D01C44)]
    public class AmbienceSunAndMoonEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x60B3ADD988E3489B)]
    public class AmbienceSunAndMoonEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "General")] public Ref<SunLightResource> SunlightOverride;
        [RTTI.Member(1, 0x40, "General")] public bool SunAzimuthAngleOverrideEnabled;
        [RTTI.Member(2, 0x44, "General")] public float SunAzimuthAngleOverride;
        [RTTI.Member(3, 0x48, "General")] public bool SunElevationAngleOverrideEnabled;
        [RTTI.Member(4, 0x4C, "General")] public float SunElevationAngleOverride;
        [RTTI.Member(5, 0x50, "General")] public Ref<SunLightResource> MoonlightOverride;
        [RTTI.Member(6, 0x58, "General")] public bool MoonAzimuthAngleOverrideEnabled;
        [RTTI.Member(7, 0x5C, "General")] public float MoonAzimuthAngleOverride;
        [RTTI.Member(8, 0x60, "General")] public bool MoonElevationAngleOverrideEnabled;
        [RTTI.Member(9, 0x64, "General")] public float MoonElevationAngleOverride;
    }

    [RTTI.Serializable(0x37B6BB9D4675CB89)]
    public class Ammo : Entity
    {
    }

    [RTTI.Serializable(0x112E5A1B5F513A6E)]
    public class AmmoCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0xFF487C017B47BC17)]
    public class AmmoEjector : WeaponPart
    {
    }

    [RTTI.Serializable(0xF9EAD61241912D57)]
    public class AmmoEjectorRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xB3BAF3F61F3B9F1D)]
    public class AmmoEjectorResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x30, "Stats")] public Ref<StatsClassResource> StatsClassResource;
        [RTTI.Member(1, 0x38, "AI")] public String WeaponId;
        [RTTI.Member(2, 0x40, "AI")] public Ref<AIAuralStimulusResource> FireSoundStimulus;
        [RTTI.Member(3, 0x48, "VisualEffects")] public String FiringShaderVariableID;
        [RTTI.Member(4, 0x50, "VisualEffects")] public Ref<CurveResource> FiringShaderVariableCurve;
        [RTTI.Member(5, 0x58, "FireRate")] public int FireRate_BurstSize;
        [RTTI.Member(6, 0x5C, "FireRate")] public EWeaponTriggerType TriggerType;
        [RTTI.Member(7, 0x60, "Animation")] public String FireAnimationAction;
        [RTTI.Member(8, 0x68, "Animation")] public String ChamberAnimationAction;
        [RTTI.Member(9, 0x70, "Animation")] public Ref<FireDurationsAnimationReference> FireDurationsAnimReference;
        [RTTI.Member(10, 0x78, "FireRate")] public float FireDuration;
        [RTTI.Member(11, 0x7C, "FireRate")] public float ChamberRoundDuration;
        [RTTI.Member(12, 0x80, "FireRate")] public float AfterBurstFiringDuration;
        [RTTI.Member(13, 0x84, "FireRate")] public float AfterBurstDelay;
        [RTTI.Member(14, 0x88, "FireRate")] public float FireRequestHoldDenialTime;
        [RTTI.Member(15, 0x8C, "FireRate")] public float FireRequestTapDenialTime;
        [RTTI.Member(16, 0x90, "FireRate")] public bool ResetEjectLocationEveryBurst;
        [RTTI.Member(17, 0x91, "Homing")] public bool IsAutoHoming;
        [RTTI.Member(18, 0x92, "Homing")] public bool HomeInOnHumanoids;
        [RTTI.Member(19, 0x94, "Homing")] public float HomingLockConeAngle;
        [RTTI.Member(20, 0x98, "Homing")] public float MaximumLockingDistance;
        [RTTI.Member(21, 0x9C, "Homing")] public float KeepLockBehindCoverHeight;
        [RTTI.Member(22, 0xA0, "AI")] public float MinOffensiveRange;
        [RTTI.Member(23, 0xA4, "AI")] public float MaxOffensiveRange;
        [RTTI.Member(24, 0xA8, "VisualEffects")] public Ref<ShakeResource> ShakeResource;
        [RTTI.Member(25, 0xB0, "SoundEffects")] public Ref<SoundResource> FireSound;
        [RTTI.Member(26, 0xB8, "SoundEffects")] public Ref<SoundResource> FireLoopSound;
        [RTTI.Member(27, 0xC0, "VisualEffects")] public Ref<RumbleResource> FireRumbleResource;
        [RTTI.Member(28, 0xC8, "SoundEffects")] public Ref<SoundResource> ClickSound;
        [RTTI.Member(29, 0xD0, "VisualEffects")] public Ref<RumbleResource> ClickRumbleResource;
        [RTTI.Member(30, 0xD8, "SoundEffects")] public Ref<SoundResource> ChamberBulletSound;
        [RTTI.Member(31, 0xE0, "VisualEffects")] public float RandomTracerOffset;
        [RTTI.Member(32, 0xE4, "TrajectoryPrediction")] public float PredictionFactor;
        [RTTI.Member(33, 0xE8, "TrajectoryPrediction")] public float PredictionFactorAI;
        [RTTI.Member(34, 0xF0, "VisualEffects")] public Ref<ParticleSystemResource> FireParticles;
        [RTTI.Member(35, 0xF8, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonFireParticles;
        [RTTI.Member(36, 0x100, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonZoomedFireParticles;
        [RTTI.Member(37, 0x108, "VisualEffects")] public Ref<ParticleSystemResource> MuzzleSmokeParticles;
        [RTTI.Member(38, 0x110, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonMuzzleSmokeParticles;
        [RTTI.Member(39, 0x118, "VisualEffects")] public Ref<LightResource> FireLight;
        [RTTI.Member(40, 0x120, "VisualEffects")] public Ref<LightResource> FirstPersonFireLight;
        [RTTI.Member(41, 0x128, "VisualEffects")] public bool ThirdPersonFireLightIsReversed;
        [RTTI.Member(42, 0x130, "VisualEffects")] public Ref<CurveResource> FireLightIntensityCurve;
        [RTTI.Member(43, 0x138, "VisualEffects")] public bool FireLightIsLooping;
        [RTTI.Member(44, 0x13C, "VisualEffects")] public float FireLightLoopingFadeTime;
        [RTTI.Member(45, 0x140, "VisualEffects")] public Vec3 FirstPersonFireLightRandomOffset;
        [RTTI.Member(46, 0x150, "VisualEffects")] public Vec3 ThirdPersonFireLightRandomOffset;
        [RTTI.Member(47, 0x160, "VisualEffects")] public bool ApplyFireLightGunFlare;
        [RTTI.Member(48, 0x164, "VisualEffects")] public float MuzzleSmokeDelay;
        [RTTI.Member(49, 0x168, "VisualEffects")] public float MuzzleSmokeDuration;
        [RTTI.Member(50, 0x170, "VisualEffects")] public Ref<TerrainAimReticuleResource> TerrainAimReticule;
        [RTTI.Member(51, 0x178, "VisualEffects")] public Ref<TerrainAimReticuleResource> TerrainAimReticuleCanNotFire;
        [RTTI.Member(52, 0x180, "VisualEffects")] public Ref<TerrainAimReticuleResource> TerrainAimReticuleTargetArea;
        [RTTI.Member(53, 0x189, "VisualEffects")] public bool ShowTerrainAimReticuleOnlyWhenZoomed;
        [RTTI.Member(54, 0x18C, "FireRate")] public int FireRate_AmmoPerShot;
        [RTTI.Member(55, 0x190, "FireRate")] public EAmmoCostType AmmoCostType;
        [RTTI.Member(56, 0x198, "Charged")] public Ref<ChargedValueInt> Charged_AmmoPerShot;
        [RTTI.Member(57, 0x1A0, "Charged")] public Ref<ChargedValueInt> Charged_BurstSize;
        [RTTI.Member(58, 0x1A8, "Logic")] public bool IsUpgradedEjector;
        [RTTI.Member(59, 0x1A9, "Homing")] public bool PrioritiseAutoAim;
        [RTTI.Member(60, 0x1AA, "VisualEffects")] public bool EnableLaserBeamForPlayer;
        [RTTI.Member(61, 0x1AB, "VisualEffects")] public bool EnableLaserBeamForAI;
        [RTTI.Member(62, 0x1AC, "VisualEffects")] public EForcedToggleType PlayerFlashlightToggleType;
        [RTTI.Member(63, 0x1B0, "VisualEffects")] public bool EnableFlashlightForAI;
        [RTTI.Member(64, 0x1B8, "Logic")] public CPtr<EntityAction> FireStartedAction;
        [RTTI.Member(65, 0x1C0, "Logic")] public CPtr<EntityAction> FireStoppedAction;
    }

    [RTTI.Serializable(0x27B95368DF6AAF4)]
    public class AmmoEjectorWeapon : EntityComponent
    {
    }

    [RTTI.Serializable(0x1EA2EAA0BF437FCC)]
    public class AmmoEjectorWeaponRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x211F58967C9DDB5E)]
    public class AmmoEjectorWeaponResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AmmoEjectorResource> EjectorResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<MagazineResource> MagazineResource;
        [RTTI.Member(2, 0x38, "AI")] public Ref<AIBodyPartBase> BodyPartResource;
        [RTTI.Member(3, 0x40, "Logic")] public float FiringPhysicsImpulse;
        [RTTI.Member(4, 0x44, "Logic")] public float AimRaycastLength;
        [RTTI.Member(5, 0x48, "Logic")] public int AnimationId;
        [RTTI.Member(6, 0x4C, "Logic")] public bool IsSilenced;
        [RTTI.Member(7, 0x50, "Logic")] public CPtr<EntityAction> SelectedAction;
        [RTTI.Member(8, 0x58, "Logic")] public CPtr<EntityAction> DeselectedAction;
        [RTTI.Member(9, 0x60, "Logic")] public CPtr<EntityAction> SelectedActionOnUser;
        [RTTI.Member(10, 0x68, "Logic")] public CPtr<EntityAction> DeselectedActionOnUser;
        [RTTI.Member(11, 0x70, "EjectSettings")] public Array<Ref<EjectLocationResource>> EjectLocations;
        [RTTI.Member(12, 0x80, "EjectSettings")] public bool ForceThirdPersonEjectLocations;
        [RTTI.Member(13, 0x88, "Logic")] public Ref<WeaponAccuracyResource> AccuracyResource;
        [RTTI.Member(14, 0x90, "Logic")] public Ref<WeaponZoomResource> ZoomResource;
        [RTTI.Member(15, 0x98, "Logic")] public bool RequiresZoomModeToFire;
        [RTTI.Member(16, 0x99, "Logic")] public bool AllowZoomSwitchDuringFire;
        [RTTI.Member(17, 0xA0, "Logic")] public Ref<WeaponChargeResource> ChargeResource;
        [RTTI.Member(18, 0xA8, "Logic")] public bool CanChargeWhileOverheated;
        [RTTI.Member(19, 0xB0, "Logic")] public Ref<WeaponSpinResource> SpinResource;
        [RTTI.Member(20, 0xB8, "Logic")] public Ref<WeaponOverheatResource> OverheatResource;
        [RTTI.Member(21, 0xC0, "Logic")] public Ref<WeaponCookResource> CookResource;
        [RTTI.Member(22, 0xC8, "Logic")] public Ref<WeaponAmmoTetherResource> AmmoTetherResource;
        [RTTI.Member(23, 0xD0, "Logic")] public Array<Ref<WeaponPartResource>> AdditionalParts;
        [RTTI.Member(24, 0xE0, "ZoomLocking")] public float ZoomLockTargetRange;
        [RTTI.Member(25, 0xE8, "Aim")] public String AimFromHelper;
        [RTTI.Member(26, 0xF0, "Aim")] public FRange AimLimitHeading;
        [RTTI.Member(27, 0xF8, "Aim")] public FRange AimLimitPitch;
        [RTTI.Member(28, 0x100, "Aim")] public float VerticalAimOffsetAngle;
        [RTTI.Member(29, 0x104, "Logic")] public EWeaponStanceRaiseType StanceRaiseType;
        [RTTI.Member(30, 0x108, "Logic")] public float RaiseTimeout;
        [RTTI.Member(31, 0x10C, "AI")] public EWeaponStanceRaiseType AIStanceRaiseType;
        [RTTI.Member(32, 0x110, "AI")] public float AIRaiseTimeout;
        [RTTI.Member(33, 0x114, "AI")] public EAIBodyAlignmentMode BodyAlignmentMode;
        [RTTI.Member(34, 0x118, "AI")] public Ref<AISignalType> IdentifierSignal;
    }

    [RTTI.Serializable(0x55FBB244C44B0C49)]
    public class AmmoMutatorResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AmmoResource> OriginalAmmo;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<AmmoResource> ReplacementAmmo;
    }

    [RTTI.Serializable(0xF14FC664E566FE96)]
    public class AmmoRecipe : ItemRecipe
    {
        [RTTI.Member(0, 0x58, "Logic")] public Array<Ref<ItemDescriptionComponentResource>> WeaponDescriptionss;
        [RTTI.Member(1, 0x68, "Logic")] public Ref<LocalizedTextResource> AmmoPouchName;
    }

    [RTTI.Serializable(0xFD4FD9BEE9B59DA2)]
    public class AmmoResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<AmmoType> AmmoType;
        [RTTI.Member(1, 0x138, "Logic")] public Ref<InventoryWeaponResource> AutoManagedWeaponResource;
        [RTTI.Member(2, 0x140, "Logic")] public Ref<CurveResource> BurstDamageClampCurve;
        [RTTI.Member(3, 0x148, "Menu")] public Ref<UITexture> IconTexture;
        [RTTI.Member(4, 0x150, "HUD")] public FRGBAColor Color;
    }

    [RTTI.Serializable(0x80D7DDEAE673645E)]
    public class AmmoSlotResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AmmoResource> AmmoResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<AmmoEjectorWeaponResource> WeaponMode;
    }

    [RTTI.Serializable(0x744B314A1C3959CD)]
    public class AmmoSlotsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1854D03758897F26)]
    public class AmmoSlotsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<AmmoSlotResource>> AmmoSlots;
    }

    [RTTI.Serializable(0x5601AD0182BD8CE0)]
    public class AmmoType : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String ItemName;
        [RTTI.Member(1, 0x30, "Logic")] public String ItemDescription;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<Texture> IconTexture;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<EquipSlotType> EquipSlotType;
    }

    [RTTI.Serializable(0x76E58D35E451F3FF)]
    public class AnimatedEntityEventInstance : AnimationEventInstance
    {
    }

    [RTTI.Serializable(0x31003A942EED69D9)]
    public class AnimatedEntityEventResource : AnimationEventResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<ExternalAnimationConfiguration> AnimationConfiguration;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(2, 0x60, "Logic")] public int FeatherBlendInFrames;
        [RTTI.Member(3, 0x64, "Logic")] public int FeatherBlendOutFrames;
        [RTTI.Member(4, 0x68, "Logic")] public ERootBoneMode RootBoneMode;
    }

    [RTTI.Serializable(0xA48BE52259966F29)]
    public class AnimatedLightEventInstance : LightEventInstanceBase
    {
    }

    [RTTI.Serializable(0x502786C44188D56)]
    public class AnimatedLightEventResource : LightEventResourceBase
    {
        [RTTI.Member(0, 0x48, "Logic")] public UUIDRef<Light> Light;
    }

    [RTTI.Serializable(0xCD9EAA8E92F41298)]
    public class AnimatedLocatorInstance : LocatorInstance
    {
        [RTTI.Member(0, 0x60, "General")] public WorldTransform Orientation;
        [RTTI.Member(1, 0xE0, "General")] public CPtr<LocatorInstance> ParentLocator;
    }

    [RTTI.Serializable(0x86D45CAE02A4A643)]
    public class AnimatedLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> ParentLocator;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<CurveResource> TranslationX;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<CurveResource> TranslationY;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<CurveResource> TranslationZ;
        [RTTI.Member(4, 0x58, "Logic")] public Ref<CurveResource> RotationX;
        [RTTI.Member(5, 0x60, "Logic")] public Ref<CurveResource> RotationY;
        [RTTI.Member(6, 0x68, "Logic")] public Ref<CurveResource> RotationZ;
    }

    [RTTI.Serializable(0x4647F4BC5B67CE87)]
    public class AnimatedMeshEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC9209C7F0846E42A)]
    public class AnimatedMeshEventResource : ScaleableTimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<SkeletonAnimationResource> Animation;
        [RTTI.Member(2, 0x50, "Logic")] public Ref<SkinnedMeshResource> Mesh;
        [RTTI.Member(3, 0x58, "Logic")] public Ref<PoseDeformerResource> PoseDeformerResource;
        [RTTI.Member(4, 0x60, "Logic")] public bool UseRootBoneAnimation;
    }

    [RTTI.Serializable(0xE46EDF7481211260)]
    public class AnimatedPlayerCameraEventInstance : CameraActorInstance
    {
    }

    [RTTI.Serializable(0x48FE06D4288BC22E)]
    public class AnimatedPlayerCameraEventResource : CameraActorResource
    {
        [RTTI.Member(0, 0xB8, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(1, 0xC0, "Logic")] public int SlideInFrames;
        [RTTI.Member(2, 0xC4, "Logic")] public int SlideOutFrames;
        [RTTI.Member(3, 0xC8, "Logic")] public bool SyncPlayerLookAt;
    }

    [RTTI.Serializable(0xBC144AF5B1E98A8B)]
    public class AnimatedPositionLocatorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4E292DC9627836B9)]
    public class AnimatedPositionLocatorEventResource : ScaleableTimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<PathResource> PathResource;
    }

    [RTTI.Serializable(0xCB1CF2CCE3E5AB50)]
    public class AnimatedRenderZoneEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x39692BFCA099CC71)]
    public class AnimatedRenderZoneEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public UUIDRef<RenderZone> RenderZone;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<CurveResource> IntensityCurveResource;
    }

    [RTTI.Serializable(0x1ACB26F930AC3207)]
    public class AnimatedScreenEffectResource : ScreenEffectResource
    {
        [RTTI.Member(0, 0x38)] public Ref<CurveResource> BlendAnimationCurve;
    }

    [RTTI.Serializable(0x47BFFF0FCAF7866)]
    public class AnimatedShaderEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1D485685A5F2F6EA)]
    public class AnimatedShaderEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String ShaderVariable;
        [RTTI.Member(1, 0x40, "Logic")] public String ShaderVariableCensored;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<CurveResource> CurveResource;
        [RTTI.Member(4, 0x58, "Logic")] public bool AutoScaleCurve;
        [RTTI.Member(5, 0x59, "Logic")] public bool ResetOnStop;
        [RTTI.Member(6, 0x5C, "Logic")] public float ResetValue;
    }

    [RTTI.Serializable(0x9121314147168300)]
    public class AnimatedTexture : Texture, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(0, 0x38, "General")] public Array<AnimatedTextureFrame> Frames;
        [RTTI.Member(1, 0x48, "General")] public float TotalDuration;
        [RTTI.Member(2, 0x4C, "General", true)] public float DefaultDuration;
        [RTTI.Member(3, 0x55, "General")] public bool PausedByDefault;
    }

    [RTTI.Serializable(0xDCAC9874322AC4D6)]
    public class AnimatedTextureFrame
    {
        [RTTI.Member(0, 0x0)] public Ref<Texture> Texture;
        [RTTI.Member(1, 0x8)] public float Duration;
    }

    [RTTI.Serializable(0xF764EBAAA8575FAA)]
    public class AnimatedTextureManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x214EBE8428F8B8F2)]
    public class AnimationAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Animation;
        [RTTI.Member(1, 0x38, "Logic")] public EAnimationActionAction Action;
    }

    [RTTI.Serializable(0xD3F6CA628A229C6F)]
    public class AnimationActionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDFD3C5DBBCB4E066)]
    public class AnimationActionEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String Action;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> AnimatedEntityActorResource;
    }

    [RTTI.Serializable(0x688630E525098841)]
    public class AnimationBoneMotion
    {
        [RTTI.Member(0, 0x0)] public Array<Vec3Pack> MotionCurve;
        [RTTI.Member(1, 0x10)] public Array<float> RotationCurve;
    }

    [RTTI.Serializable(0x2C19406F42A387DE)]
    public class AnimationEventActionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5F49818B56957F58)]
    public class AnimationEventActionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<ActionPerAnimationEvent> ActionsPerEvent;
    }

    [RTTI.Serializable(0x888F2D4B94D3FA51)]
    public class AnimationEventEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDDB821B42C71C00B)]
    public class AnimationEventEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public int AnimationEventID;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> AnimatedEntityActorResource;
    }

    [RTTI.Serializable(0x218524C6351D83A6)]
    public class AnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x58FB3FC5CA60A80B)]
    public class AnimationEventResource : ScaleableTimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x48, "Logic")] public bool Loop;
    }

    [RTTI.Serializable(0xD6C580824ABC2977)]
    public class AnimationLinkResource : Resource
    {
        [RTTI.Member(0, 0x28, "Animation")] public Ref<SkeletonAnimationResource> SkeletonAnimation;
        [RTTI.Member(1, 0x30, "Animation")] public Ref<ExternalAnimationConfiguration> AnimationConfiguration;
        [RTTI.Member(2, 0x38, "Animation")] public ERootBoneMode RootBoneMode;
    }

    [RTTI.Serializable(0xEFB2BFD4AC26A4F5)]
    public class AnimationManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x4B18E58C9D21DA52)]
    public class AnimationManagerResource : Resource
    {
    }

    [RTTI.Serializable(0xF0EF0D31AA265278)]
    public class AnimationMarkUpEvent
    {
        [RTTI.Member(0, 0x0, "General")] public int UserData;
        [RTTI.Member(1, 0x4, "General")] public float Duration;
        [RTTI.Member(2, 0x8, "General")] public float Fraction;
    }

    [RTTI.Serializable(0x139823C4A0222D7E)]
    public class AnimationMarkUpTrack
    {
        [RTTI.Member(0, 0x0, "General")] public int UserData;
        [RTTI.Member(1, 0x4, "General")] public int ID;
        [RTTI.Member(2, 0x8, "General")] public Array<AnimationMarkUpEvent> Events;
    }

    [RTTI.Serializable(0xA3F15068E6CF99DC)]
    public class AnimationMotionBase : BaseResource
    {
    }

    [RTTI.Serializable(0xF8086FDB67EBA1FE)]
    public class AnimationMotionCurve : AnimationMotionBase
    {
        [RTTI.Member(0, 0x20)] public float Duration;
        [RTTI.Member(1, 0x24)] public float SampleTimeStep;
        [RTTI.Member(2, 0x28)] public HashMap<int_AnimationBoneMotion> BoneMotions;
        [RTTI.Member(3, 0x38)] public AnimationMarkUpTrack SynchEventTrack;
        [RTTI.Member(4, 0x50)] public Array<AnimationMarkUpTrack> EventTracks;
    }

    [RTTI.Serializable(0xD431C273D67B6175)]
    public class AnimationMotionDirectional : AnimationMotionBase
    {
        [RTTI.Member(0, 0x20)] public int AngleIndex;
        [RTTI.Member(1, 0x28)] public Array<float> AngleValues;
        [RTTI.Member(2, 0x38)] public FRange AngleRange;
        [RTTI.Member(3, 0x40)] public Array<Ref<AnimationMotionBase>> Direction;
    }

    [RTTI.Serializable(0xB6E8250FE734EC9E)]
    public class AnimationPoseMatchingAnimationData
    {
        [RTTI.Member(0, 0x0)] public EAnimationDirection Direction;
    }

    [RTTI.Serializable(0x3A4D8C38B3897ED5)]
    public class AnimationPoseMatchingBoneData
    {
        [RTTI.Member(0, 0x0)] public Vec3 PositionLs;
        [RTTI.Member(1, 0x10)] public Vec3 VelocityLs;
    }

    [RTTI.Serializable(0x6494543DDCC687AA)]
    public class AnimationPoseMatchingConfigData : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "Internal")] public Array<int> RelevantBonesIndices;
        [RTTI.Member(1, 0x38, "Logic")] public Array<float> PositionWeights;
        [RTTI.Member(2, 0x48, "Logic")] public Array<float> VelocityWeights;
        [RTTI.Member(3, 0x58, "Internal")] public int AligmentBoneIndex;
        [RTTI.Member(4, 0x5C, "Internal")] public bool FromRagdollSkeleton;
    }

    [RTTI.Serializable(0x5223DD844810F345)]
    public class AnimationPoseMatchingDataBase : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<AnimationPoseMatchingPose> PosesDb;
        [RTTI.Member(1, 0x30)] public Array<AnimationPoseMatchingAnimationData> AnimationData;
    }

    [RTTI.Serializable(0xBA35EB753BFCD745)]
    public class AnimationPoseMatchingPose
    {
        [RTTI.Member(0, 0x0)] public Array<AnimationPoseMatchingBoneData> BonesData;
        [RTTI.Member(1, 0x10)] public int AnimationIndex;
        [RTTI.Member(2, 0x14)] public float AnimationTime;
        [RTTI.Member(3, 0x20)] public Vec3 AligmentBonePositionMs;
        [RTTI.Member(4, 0x30)] public Vec3 AligmentBoneForwardDirectionMs;
        [RTTI.Member(5, 0x40)] public Vec3 RootBoneDeltaTranslation;
        [RTTI.Member(6, 0x50)] public Quat RootBoneDeltaRotation;
    }

    [RTTI.Serializable(0xC5FBECA21EB24144)]
    public class AnimationResourceTranslation
    {
        [RTTI.Member(0, 0x0)] public ELanguage Language;
        [RTTI.Member(1, 0x8)] public Ref<SkeletonAnimationResource> Animation;
    }

    [RTTI.Serializable(0xC31F0B0FB4C2E7D2)]
    public class AnimationSetMap : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<AnimationSetMapEntry> Entries;
    }

    [RTTI.Serializable(0xA5930E636BBE27E2)]
    public class AnimationSetMapEntry
    {
        [RTTI.Member(0, 0x0)] public AnimationTagSet Tags;
        [RTTI.Member(1, 0x10)] public String AnimationSetName;
    }

    [RTTI.Serializable(0xD02E8F5303DEAA17)]
    public class AnimationTagEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB6D3A8B02AAFD10B)]
    public class AnimationTagEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String AnimationTagName;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> AnimatedEntityActorResource;
    }

    [RTTI.Serializable(0xCF020E4F29DF18A8)]
    public class AnimationTagSet
    {
        [RTTI.Member(0, 0x0)] public Array<String> Set;
    }

    [RTTI.Serializable(0x9C7FD04E23AFFAD7)]
    public class AnimationTrackBase : Resource
    {
    }

    [RTTI.Serializable(0x39F8F3CA357077F1)]
    public class AnimationTrackKeyFrame_Quat : AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x10)] public Quat Value;
    }

    [RTTI.Serializable(0xFB94BDEDFD4027ED)]
    public class AnimationTrackKeyFrame_RGBAColor : AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x4)] public RGBAColor Value;
    }

    [RTTI.Serializable(0x6EB4981A2D43CB20)]
    public class AnimationTrackKeyFrame_Vec3 : AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x10)] public Vec3 Value;
    }

    [RTTI.Serializable(0xF6F8C4C62A2975F7)]
    public class AnimationTrackKeyFrame_Vec4 : AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x10)] public Vec4 Value;
    }

    [RTTI.Serializable(0x6A62DF3110CF9CFB)]
    public class AnimationTrackKeyFrame_WorldPosition : AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x8)] public WorldPosition Value;
    }

    [RTTI.Serializable(0xF91D79A68B30B15E)]
    public class AnimationTrackKeyFrame_bool : AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x4)] public bool Value;
    }

    [RTTI.Serializable(0x49740FA5997C953A)]
    public class AnimationTrackKeyFrame_float : AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x4)] public float Value;
    }

    [RTTI.Serializable(0x9A6DCC17F2320C90)]
    public class AnimationTrackKeyTime
    {
        [RTTI.Member(0, 0x0)] public float Time;
    }

    [RTTI.Serializable(0x868BDE3F16FFE97C)]
    public class AnimationTrackLinearBool : AnimationTrackBase
    {
        [RTTI.Member(0, 0x28, "Animation")] public Array<AnimationTrackKeyFrame_bool> KeyFrames;
    }

    [RTTI.Serializable(0x58BF5EF60D7B8171)]
    public class AnimationTrackLinearFQuat : AnimationTrackBase
    {
        [RTTI.Member(0, 0x28, "Animation")] public Array<AnimationTrackKeyFrame_Quat> KeyFrames;
    }

    [RTTI.Serializable(0x6B77AF8FC3DB1052)]
    public class AnimationTrackLinearFVector3 : AnimationTrackBase
    {
        [RTTI.Member(0, 0x28, "Animation")] public Array<AnimationTrackKeyFrame_Vec3> KeyFrames;
    }

    [RTTI.Serializable(0x73AF12A13B4B040C)]
    public class AnimationTrackLinearFVector4 : AnimationTrackBase
    {
        [RTTI.Member(0, 0x28, "Animation")] public Array<AnimationTrackKeyFrame_Vec4> KeyFrames;
    }

    [RTTI.Serializable(0xB723206F6CC5EDB7)]
    public class AnimationTrackLinearFloat : AnimationTrackBase
    {
        [RTTI.Member(0, 0x28, "Animation")] public Array<AnimationTrackKeyFrame_float> KeyFrames;
    }

    [RTTI.Serializable(0xDC76C1AEA06A1B99)]
    public class AnimationTrackLinearRGBAColor : AnimationTrackBase
    {
        [RTTI.Member(0, 0x28, "Animation")] public Array<AnimationTrackKeyFrame_RGBAColor> KeyFrames;
    }

    [RTTI.Serializable(0x17A7B01A72C76EB1)]
    public class AnimationTrackLinearWorldPosition : AnimationTrackBase
    {
        [RTTI.Member(0, 0x28, "Animation")] public Array<AnimationTrackKeyFrame_WorldPosition> KeyFrames;
    }

    [RTTI.Serializable(0x101E0E3EECF5411)]
    public class AnimationVariableEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8BBA75B30D15B6FA)]
    public class AnimationVariableEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String Variable;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> AnimatedEntityActorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<CurveResource> CurveResource;
        [RTTI.Member(3, 0x50, "Logic")] public bool AutoScaleCurve;
        [RTTI.Member(4, 0x54, "Logic")] public float Value;
    }

    [RTTI.Serializable(0xA0BC2593FE09A194)]
    public class AnimationVariableFloat
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0xB2C0F8006E9DFE74)]
    public class AnimationVariableSettings
    {
        [RTTI.Member(0, 0x0, "Logic")] public Array<AnimationVariableFloat> AnimationVariableFloat;
        [RTTI.Member(1, 0x10, "Logic")] public Array<String> AnimationAction;
    }

    [RTTI.Serializable(0x22152B64743D7211)]
    public class AnimationVariableValue
    {
        [RTTI.Member(0, 0x0)] public String Variable;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0xBE95DB563621EFA6)]
    public class AnnotatedRoute : Route
    {
        [RTTI.Member(0, 0xB0)] public Ref<AnnotatedRouteDecoration> Decoration;
        [RTTI.Member(1, 0xD8)] public Array<EAnnotationPrimitiveTag> AdditionalAnnotationTags;
    }

    [RTTI.Serializable(0xA6D34BD923B8C571)]
    public class AnnotatedRouteAnnotation
    {
        [RTTI.Member(0, 0x0)] public Array<EAnnotationPrimitiveTag> AnnotationTags;
        [RTTI.Member(1, 0x10)] public Vec3 Offset;
        [RTTI.Member(2, 0x20)] public Vec3 Normal;
    }

    [RTTI.Serializable(0x6396179FCABDCF39)]
    public class AnnotatedRouteAnnotationCollection : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<AnnotatedRouteAnnotation> Annotations;
    }

    [RTTI.Serializable(0xEBB3C4FD016A4977)]
    public class AnnotatedRouteDecoration : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AnnotatedRouteAnnotationCollection> AnnotationCollection;
        [RTTI.Member(1, 0x30, "Visuals")] public Ref<PrefabResource> RoutePrefabResource;
        [RTTI.Member(2, 0x38, "Visuals")] public Array<AnnotatedRoutePrefabShaderOverride> ScaleShaderOverrides;
        [RTTI.Member(3, 0x48, "Visuals")] public Array<AnnotatedRoutePrefabShaderOverride> OffsetShaderOverrides;
    }

    [RTTI.Serializable(0xEE9DF3DF063748CA)]
    public class AnnotatedRouteNode : RouteNode
    {
    }

    [RTTI.Serializable(0xE35989484EFD3FA1)]
    public class AnnotatedRoutePrefabShaderOverride
    {
        [RTTI.Member(0, 0x0, "Logic")] public String VariableID;
        [RTTI.Member(1, 0x8, "Logic")] public Ref<RTTIRefObject> Object;
    }

    [RTTI.Serializable(0x5E7009C3A25BF111)]
    public class AnnotationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x53AB4BB544465342)]
    public class AnnotationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<AttachedAnnotationResource>> AttachedAnnotations;
        [RTTI.Member(1, 0x38, "Parkour")] public bool OnlyPullUpOntoBalanceBeams;
        [RTTI.Member(2, 0x39, "Parkour")] public bool AllowAutomaticStepOffToOtherObject;
        [RTTI.Member(3, 0x3A, "Parkour")] public bool AllowAutomaticStepOnFromOtherObject;
        [RTTI.Member(4, 0x3B, "Parkour")] public bool AllowAutomaticStepOffToFloor;
        [RTTI.Member(5, 0x3C, "Parkour")] public bool AllowUnguidedJumpOff;
        [RTTI.Member(6, 0x40, "Parkour")] public Array<Vec3> AutomaticStepOffToFloorDetectionOffsetsOverride;
        [RTTI.Member(7, 0x50, "Parkour")] public bool UseProperlyAlignedCheckForAttachment;
        [RTTI.Member(8, 0x51, "Parkour")] public bool UseLinearApproachTrajectory;
        [RTTI.Member(9, 0x52, "Parkour")] public bool OverrideApproachTrajectorySettings;
        [RTTI.Member(10, 0x54, "Parkour")] public HumanoidAirControlCurvedTrajectorySettings CurvedTrajectorySettingsOverride;
        [RTTI.Member(11, 0x70, "Parkour")] public HumanoidAirControlLinearTrajectorySettings LinearTrajectorySettingsOverride;
    }

    [RTTI.Serializable(0x5CB8586C880B78BF)]
    public class AnnotationDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCBBF417E53B378B3)]
    public class AnnotationDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String CharacterCenterHelper;
        [RTTI.Member(1, 0x30, "Logic")] public float DetectionDepth;
        [RTTI.Member(2, 0x40, "Logic")] public Vec3 HandPosition;
        [RTTI.Member(3, 0x50, "Logic")] public Vec3 HandPositionSwimming;
        [RTTI.Member(4, 0x60, "Logic")] public Vec3 FeetGroundPosition;
        [RTTI.Member(5, 0x70, "Logic")] public float MaxOnGroundHandsAttachDistance;
        [RTTI.Member(6, 0x74, "Logic")] public float MaxOnGroundFeetAttachDistance;
        [RTTI.Member(7, 0x78, "Logic")] public float MaxInAirHandsAttachDistance;
        [RTTI.Member(8, 0x7C, "Logic")] public float MaxInAirFeetAttachDistance;
        [RTTI.Member(9, 0x80, "Logic")] public float AnnotationsDetectionRadius;
        [RTTI.Member(10, 0x90, "Logic")] public Vec3 BalanceBeamPullUpDetectionOffset;
        [RTTI.Member(11, 0xA0, "Logic")] public float BalanceBeamPullUpDetectionRadius;
        [RTTI.Member(12, 0xB0, "Logic")] public Vec3 LowerToClimbDetectionOffset;
        [RTTI.Member(13, 0xC0, "Logic")] public float LowerToClimbDetectionRadius;
    }

    [RTTI.Serializable(0x4299C965002CD118)]
    public class AnnotationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xFBB8965E108B054D)]
    public class AnnotationEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38)] public WString Label;
        [RTTI.Member(1, 0x40)] public WString Comment;
        [RTTI.Member(2, 0x50)] public FRGBAColor Color;
    }

    [RTTI.Serializable(0x9C3D3357A06AADF)]
    public class AnnotationGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x354783393DD1414F)]
    public class AnnotationInstance : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public Ref<AnnotationResource> Resource;
        [RTTI.Member(1, 0x68, "General")] public Array<CPtr<AnnotationPrimitiveInstance>> PrimitiveInstances;
        [RTTI.Member(2, 0x80, "Logic")] public bool Enabled;
    }

    [RTTI.Serializable(0x791ECB779DD33586)]
    public class AnnotationPoint : AnnotationPrimitive
    {
        [RTTI.Member(0, 0x40, "General")] public Vec3 Point;
    }

    [RTTI.Serializable(0xBA0697E6A28246D0)]
    public class AnnotationPolygon : AnnotationPrimitive
    {
        [RTTI.Member(0, 0x40, "General")] public Array<Vec3> Points;
    }

    [RTTI.Serializable(0xAD7E14E38B1D1EC9)]
    public class AnnotationPrimitive : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Array<String> Tags;
        [RTTI.Member(1, 0x30, "General")] public Vec3 Normal;
    }

    [RTTI.Serializable(0xA7C4A04D254AE36)]
    public class AnnotationPrimitiveInstance : CoreObject
    {
        [RTTI.Member(0, 0x40, "General")] public CPtr<AnnotationPrimitive> Primitive;
        [RTTI.Member(1, 0x48, "General")] public Ref<AnnotationInstance> Instance;
        [RTTI.Member(2, 0x50, "General")] public BoundingBox3 BoundingBox;
    }

    [RTTI.Serializable(0xFE4E6BFA7DF8F91A)]
    public class AnnotationPrimitivesGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x460C0C7C64593C5B)]
    public class AnnotationResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<AnnotationPrimitive>> Primitives;
    }

    [RTTI.Serializable(0x36C25B51E5FD32F7)]
    public class AnnotationSegment : AnnotationPrimitive
    {
        [RTTI.Member(0, 0x40, "General")] public Vec3 StartPoint;
        [RTTI.Member(1, 0x50, "General")] public Vec3 EndPoint;
    }

    [RTTI.Serializable(0xB5D8B8F112CE5642)]
    public class Application
    {
    }

    [RTTI.Serializable(0xFDE52CC3C14227D3)]
    public class ApplyForceEntity : Entity
    {
    }

    [RTTI.Serializable(0xE5A5F3899E3F94BE)]
    public class ApplyForceEntityResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Vec3 Force;
        [RTTI.Member(1, 0x140, "Logic")] public float LifeTime;
    }

    [RTTI.Serializable(0x3FFB0A546A8F6754)]
    public class ApplyPhysicsImpulseAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Vec3 Position;
        [RTTI.Member(1, 0x40, "Logic")] public bool ApplyAtCenterOfMass;
        [RTTI.Member(2, 0x50, "Logic")] public Vec3 Direction;
        [RTTI.Member(3, 0x60, "Logic")] public float Force;
        [RTTI.Member(4, 0x68, "Logic")] public Ref<RandomVectorResource> RandomImpulse;
        [RTTI.Member(5, 0x70, "Logic")] public bool ForceApplyToSelf;
        [RTTI.Member(6, 0x71, "Logic")] public bool UpwardsInWorldSpace;
        [RTTI.Member(7, 0x78, "Logic")] public Array<Ref<DestructibilityPart>> Parts;
        [RTTI.Member(8, 0x88, "Logic")] public bool Ragdoll;
    }

    [RTTI.Serializable(0x5C32F6E285108A16)]
    public class ArcComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA55E39C882E8E2BC)]
    public class ArcComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xD3483F3B04337ECD)]
    public class ArcEjector : DiscreteAmmoEjector
    {
    }

    [RTTI.Serializable(0x7D64802ABAD6B185)]
    public class ArcEjectorResource : DiscreteAmmoEjectorResource
    {
        [RTTI.Member(0, 0x230, "Default")] public float Range;
        [RTTI.Member(1, 0x234, "Default")] public float Angle;
        [RTTI.Member(2, 0x238, "Default")] public int HitCount;
        [RTTI.Member(3, 0x23C, "Default")] public float ExitVelocity;
        [RTTI.Member(4, 0x240, "Charged")] public Ref<ChargedValueFloat> RangeScaler;
        [RTTI.Member(5, 0x248, "Charged")] public Ref<ChargedValueFloat> AngleScaler;
        [RTTI.Member(6, 0x250, "Charged")] public Ref<ChargedValueInt> HitCountScaler;
        [RTTI.Member(7, 0x258, "Charged")] public Ref<ChargedValueFloat> DamageScaler;
        [RTTI.Member(8, 0x260, "Charged")] public Ref<ChargedValueFloat> ImpulseScaler;
        [RTTI.Member(9, 0x268, "Charged")] public Ref<ChargedValueFloat> SeverityScaler;
        [RTTI.Member(10, 0x270, "Damage")] public Ref<DamageSettings> DamageSettingsSP;
        [RTTI.Member(11, 0x278, "Damage")] public Ref<DamageSettings> DamageSettingsMP;
        [RTTI.Member(12, 0x280, "Damage")] public Ref<DamageSettings> DamageSettingsAI;
        [RTTI.Member(13, 0x288, "Targeting")] public EPhysicsCollisionLayerGame TargetCollisionLayer;
        [RTTI.Member(14, 0x28C, "Targeting")] public float TargetCollisionRadius;
        [RTTI.Member(15, 0x290, "Targeting")] public float DummyTargetSpacingMin;
        [RTTI.Member(16, 0x298, "Arc")] public Ref<EntityResource> ArcEntityResource;
    }

    [RTTI.Serializable(0x70CABA1F5E7F058E)]
    public class AreaBasedStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0x1052092F4DA9E877)]
    public class AreaBasedStreamingStrategyInstanceGame : AreaBasedStreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0xFB6B589D3F13DE93)]
    public class AreaBasedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(0, 0x58, "General")] public Ref<CollisionTrigger> HintTrigger;
        [RTTI.Member(1, 0x60, "General")] public Ref<CollisionTrigger> ActivateTrigger;
        [RTTI.Member(2, 0x68, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
        [RTTI.Member(3, 0x88, "PlayGo")] public bool ExcludeFromInitialChunk;
    }

    [RTTI.Serializable(0x921397E07300755A)]
    public class AreaBasedStreamingStrategyResourceGame : AreaBasedStreamingStrategyResource
    {
        [RTTI.Member(0, 0x90, "General")] public Ref<BooleanFact> HintedFact;
        [RTTI.Member(1, 0x98, "General")] public Ref<BooleanFact> ActiveFact;
        [RTTI.Member(2, 0xA0, "General")] public Ref<ConditionResource> EnableCondition;
    }

    [RTTI.Serializable(0x5466695C1E69CFF4)]
    public class AreaRestrictionSpawnCommand : SpawnCommand
    {
        [RTTI.Member(0, 0x60, "Logic")] public Array<Ref<NavMeshArea>> Areas;
    }

    [RTTI.Serializable(0x8E289F5C50DD5178)]
    public class ArmedPartDamageOnImpactComponent : DamageOnImpactComponent
    {
    }

    [RTTI.Serializable(0x3F07EAF1ECC127C8)]
    public class ArmedPartDamageOnImpactComponentResource : DamageOnImpactComponentResource
    {
        [RTTI.Member(0, 0x68, "Logic")] public Array<Ref<ModelPartResource>> ArmedModelParts;
        [RTTI.Member(1, 0x78, "VisualEffects")] public Ref<EffectComponentResource> ArmedEffects;
    }

    [RTTI.Serializable(0xA1E162EEB096C14A)]
    public class AssertReporterGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA8F21D46F9B3D3C5)]
    public class AssetPath
    {
        [RTTI.Member(0, 0x0)] public String Path;
    }

    [RTTI.Serializable(0x7CEB807C5F972B43)]
    public class AtmosphereBoxComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1DD56BB269BFC1BF)]
    public class AtmosphereBoxComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AIAtmosphereBoxResource> Resource;
        [RTTI.Member(1, 0x30, "Logic")] public String HelperName;
    }

    [RTTI.Serializable(0xA50C2E8059AA1311)]
    public class AtmosphereFogSettings
    {
        [RTTI.Member(0, 0x0, "GlobalFog")] public float FogDensity;
        [RTTI.Member(1, 0x4, "GlobalFog")] public float FogStartDistance;
        [RTTI.Member(2, 0x8, "GlobalFog")] public float FogEndDistance;
        [RTTI.Member(3, 0xC, "GlobalFog")] public float FogDistanceCurvature;
        [RTTI.Member(4, 0x10, "GlobalFog")] public float FogHeight;
        [RTTI.Member(5, 0x14, "GlobalFog")] public float FogHeightFallOffRate;
        [RTTI.Member(6, 0x18, "HeightmapFog")] public float HeightMapFogDensity;
        [RTTI.Member(7, 0x1C, "HeightmapFog")] public float HeightMapFogStartDistance;
        [RTTI.Member(8, 0x20, "HeightmapFog")] public float HeightMapFogEndDistance;
        [RTTI.Member(9, 0x24, "HeightmapFog")] public float HeightMapFogDistanceCurvature;
        [RTTI.Member(10, 0x28, "HeightmapFog")] public float HeightMapFogHeightBias;
        [RTTI.Member(11, 0x2C, "HeightmapFog")] public float HeightMapFogHeightScale;
        [RTTI.Member(12, 0x30, "GeneralFogSettings")] public FRGBAColor FogColor;
        [RTTI.Member(13, 0x40, "GeneralFogSettings")] public float FogAmbientAbsorptionRate;
        [RTTI.Member(14, 0x44, "GeneralFogSettings")] public float FogAmbientMinIntensity;
        [RTTI.Member(15, 0x48, "GeneralFogSettings")] public float FogAmbientMaxIntensity;
        [RTTI.Member(16, 0x4C, "GeneralFogSettings")] public float FogHenyeyGreenstein;
        [RTTI.Member(17, 0x50, "GeneralFogSettings")] public float FogGodRayMaxIntensity;
        [RTTI.Member(18, 0x54, "GeneralFogSettings")] public float FogGodRayAttackRate;
        [RTTI.Member(19, 0x58, "GeneralFogSettings")] public float FogGodRayAbsorptionRate;
        [RTTI.Member(20, 0x60, "FogCascadeSettings")] public float RenderQualityForCascade1;
        [RTTI.Member(21, 0x64, "FogCascadeSettings")] public float RenderQualityForCascade2;
        [RTTI.Member(22, 0x68, "FogCascadeSettings")] public float RenderQualityForCascade3;
        [RTTI.Member(23, 0x70, "FogCascadeSettings")] public bool FixSlices;
    }

    [RTTI.Serializable(0xAF74B56C0A4C580F)]
    public class AtmosphereFogSettingsResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public AtmosphereFogSettings Settings;
    }

    [RTTI.Serializable(0x90A95FD2A6FAF877)]
    public class AtmosphereHazeSettings
    {
        [RTTI.Member(0, 0x0)] public float HazeStartDistance;
        [RTTI.Member(1, 0x4)] public float HazeEndDistance;
        [RTTI.Member(2, 0x8)] public float HazeDensityCurvature;
    }

    [RTTI.Serializable(0xD1FB94E38F592B63)]
    public class AtmosphereHazeSettingsResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public AtmosphereHazeSettings Settings;
    }

    [RTTI.Serializable(0xD8548CD1BC71911)]
    public class AtmosphereSkySettings
    {
        [RTTI.Member(0, 0x0, "Sky")] public FRGBAColor SkyColor;
        [RTTI.Member(1, 0x10, "Sky")] public float SkyZenithIntensity;
        [RTTI.Member(2, 0x14, "Sky")] public float SkyHorizonIntensity;
        [RTTI.Member(3, 0x18, "Sky")] public float SkyGradientPower;
        [RTTI.Member(4, 0x1C, "Sky")] public float SkyBrightness;
        [RTTI.Member(5, 0x20, "Sky")] public FRange SkyFadeOffSunAngleRange;
        [RTTI.Member(6, 0x30, "Sunlight")] public FRGBAColor SunLightAbsorptionCoefficient;
        [RTTI.Member(7, 0x40, "Sunlight")] public float SunColorAbsorptionZenith;
        [RTTI.Member(8, 0x44, "Sunlight")] public float SunColorAbsorptionHorizon;
        [RTTI.Member(9, 0x48, "Sunlight")] public float SunColorAbsorptionGradientPower;
        [RTTI.Member(10, 0x4C, "Sunlight")] public FRange SunIntensityAngleFadeRange;
        [RTTI.Member(11, 0x54, "Sunlight")] public float SunShapeIntensity;
        [RTTI.Member(12, 0x58, "Sunlight")] public float SunShapeSize;
        [RTTI.Member(13, 0x60, "MieScattering")] public Vec3 MieScatteringPhases;
        [RTTI.Member(14, 0x70, "MieScattering")] public float MieIntensityGradientPower;
        [RTTI.Member(15, 0x74, "MieScattering")] public float MieColorAbsorptionZenith;
        [RTTI.Member(16, 0x78, "MieScattering")] public float MieColorAbsorptionHorizon;
        [RTTI.Member(17, 0x7C, "MieScattering")] public float MieColorGradientPower;
        [RTTI.Member(18, 0x80, "MieScattering")] public float MieBaseIntensity;
        [RTTI.Member(19, 0x84, "MieScattering")] public float MieLightShaftIntensity;
        [RTTI.Member(20, 0x88, "SunsetControl")] public float SunsetStartAngle;
        [RTTI.Member(21, 0x8C, "SunsetControl")] public float SunsetEndAngle;
    }

    [RTTI.Serializable(0xC61F7F27B95DBC1)]
    public class AtmosphereSkySettingsResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public AtmosphereSkySettings Settings;
    }

    [RTTI.Serializable(0x7DE4A439E1ED6952)]
    public class AtmosphericScattingSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public FRGBAColor SkyColor;
        [RTTI.Member(1, 0x10, "Settings")] public float SkyZenithIntensity;
        [RTTI.Member(2, 0x14, "Settings")] public float SkyHorizonIntensity;
        [RTTI.Member(3, 0x18, "Settings")] public float SkyGradientPower;
        [RTTI.Member(4, 0x1C, "Settings")] public float SkyBrightness;
        [RTTI.Member(5, 0x20, "Settings")] public FRange SkyFadeOffSunAngleRange;
        [RTTI.Member(6, 0x30, "SunlightColorControl")] public FRGBAColor SunLightAbsorptionCoefficient;
        [RTTI.Member(7, 0x40, "SunlightColorControl")] public float SunColorAbsorptionZenith;
        [RTTI.Member(8, 0x44, "SunlightColorControl")] public float SunColorAbsorptionHorizon;
        [RTTI.Member(9, 0x48, "SunlightColorControl")] public float SunColorAbsorptionGradientPower;
        [RTTI.Member(10, 0x4C, "SunlightColorControl")] public FRange SunIntensityAngleFadeRange;
        [RTTI.Member(11, 0x54, "SunlightColorControl")] public float SunShapeIntensity;
        [RTTI.Member(12, 0x58, "SunlightColorControl")] public float SunShapeSize;
        [RTTI.Member(13, 0x60, "MieScattering")] public Vec3 MieScatteringIntensity;
        [RTTI.Member(14, 0x70, "MieScattering")] public float MieIntensityGradientPower;
        [RTTI.Member(15, 0x74, "MieScattering")] public float MieColorAbsorptionZenith;
        [RTTI.Member(16, 0x78, "MieScattering")] public float MieColorAbsorptionHorizon;
        [RTTI.Member(17, 0x7C, "MieScattering")] public float MieColorGradientPower;
        [RTTI.Member(18, 0x80, "MieScattering")] public float MieBaseIntensity;
        [RTTI.Member(19, 0x84, "MieScattering")] public float MieLightShaftIntensity;
        [RTTI.Member(20, 0x88, "SunsetBehaviour")] public float SunsetStartAngle;
        [RTTI.Member(21, 0x8C, "SunsetBehaviour")] public float SunsetEndAngle;
        [RTTI.Member(22, 0x90, "Haze")] public float HazeStartDistance;
        [RTTI.Member(23, 0x94, "Haze")] public float HazeEndDistance;
        [RTTI.Member(24, 0x98, "Haze")] public float HazeDensityCurvature;
        [RTTI.Member(25, 0xA0, "GlobalFog")] public float FogDensity;
        [RTTI.Member(26, 0xA4, "GlobalFog")] public float FogStartDistance;
        [RTTI.Member(27, 0xA8, "GlobalFog")] public float FogEndDistance;
        [RTTI.Member(28, 0xAC, "GlobalFog")] public float FogDistanceCurvature;
        [RTTI.Member(29, 0xB0, "GlobalFog")] public float FogHeight;
        [RTTI.Member(30, 0xB4, "GlobalFog")] public float FogHeightFallOffRate;
        [RTTI.Member(31, 0xB8, "HeightmapFog")] public float HeightMapFogDensity;
        [RTTI.Member(32, 0xBC, "HeightmapFog")] public float HeightMapFogStartDistance;
        [RTTI.Member(33, 0xC0, "HeightmapFog")] public float HeightMapFogEndDistance;
        [RTTI.Member(34, 0xC4, "HeightmapFog")] public float HeightMapFogDistanceCurvature;
        [RTTI.Member(35, 0xC8, "HeightmapFog")] public float HeightMapFogHeightBias;
        [RTTI.Member(36, 0xCC, "HeightmapFog")] public float HeightMapFogHeightScale;
        [RTTI.Member(37, 0xD0, "GeneralFogSettings")] public FRGBAColor FogColor;
        [RTTI.Member(38, 0xE0, "GeneralFogSettings")] public float FogAmbientAbsorptionRate;
        [RTTI.Member(39, 0xE4, "GeneralFogSettings")] public float FogAmbientMinIntensity;
        [RTTI.Member(40, 0xE8, "GeneralFogSettings")] public float FogAmbientMaxIntensity;
        [RTTI.Member(41, 0xEC, "GeneralFogSettings")] public float FogHenyeyGreenstein;
        [RTTI.Member(42, 0xF0, "GeneralFogSettings")] public float FogGodRayMaxIntensity;
        [RTTI.Member(43, 0xF4, "GeneralFogSettings")] public float FogGodRayAttackRate;
        [RTTI.Member(44, 0xF8, "GeneralFogSettings")] public float FogGodRayAbsorptionRate;
    }

    [RTTI.Serializable(0x20998B3B7524EAAB)]
    public class AttachPhysicsInstanceComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEA5D09687FC6FEA5)]
    public class AttachPhysicsInstanceComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PhysicsResource> PhysicsResource;
        [RTTI.Member(1, 0x30, "Logic")] public bool NotifyNavMesh;
    }

    [RTTI.Serializable(0x1C39465BEFD9BFED)]
    public class AttachPhysicsRagdollToHelperMover : AttachToHelperMover
    {
    }

    [RTTI.Serializable(0x9F9DD57893E3818E)]
    public class AttachPhysicsRagdollToHelperMoverResource : AttachToHelperMoverResource
    {
        [RTTI.Member(0, 0x90, "Logic")] public int CollisionLayer;
    }

    [RTTI.Serializable(0x4AFD99906458D20D)]
    public class AttachToAimMatrixMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x61B922D78A287369)]
    public class AttachToAimMatrixMoverResource : AttachToEntityMoverResource
    {
    }

    [RTTI.Serializable(0x9F2F7E75060F8304)]
    public class AttachToEntityByPConstraintMover : Mover
    {
    }

    [RTTI.Serializable(0x7CFA2AD3D9ADE545)]
    public class AttachToEntityByPConstraintMoverResource : MoverResource
    {
        [RTTI.Member(0, 0x30, "Physics")] public Array<AttachmentPConstraint> Attachments;
        [RTTI.Member(1, 0x40, "Physics")] public Mat44 OffsetFromParent;
        [RTTI.Member(2, 0x80, "Physics")] public bool AttachToRagdoll;
        [RTTI.Member(3, 0x81, "Physics")] public bool UseParentMover;
        [RTTI.Member(4, 0x82, "Physics")] public bool UseChildMover;
    }

    [RTTI.Serializable(0xA2880593461DEE3C)]
    public class AttachToEntityMover : Mover
    {
    }

    [RTTI.Serializable(0xE47C389A15AA7696)]
    public class AttachToEntityMoverResource : MoverResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Mat44 LocalMatrix;
        [RTTI.Member(1, 0x70, "Logic")] public bool AlignToWorld;
        [RTTI.Member(2, 0x71, "Logic")] public bool MakeKeyframed;
    }

    [RTTI.Serializable(0xF774EB5A85593CB8)]
    public class AttachToHelperMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0xD314D92D22640ACD)]
    public class AttachToHelperMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(0, 0x80, "Logic")] public String Helper;
    }

    [RTTI.Serializable(0x3022A4CC19B13F5A)]
    public class AttachToHelperPositionMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x9052D217C2207A59)]
    public class AttachToHelperPositionMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(0, 0x80, "Logic")] public String Helper;
        [RTTI.Member(1, 0x88, "Logic")] public float Relaxation;
        [RTTI.Member(2, 0x8C, "Logic")] public float Dampening;
    }

    [RTTI.Serializable(0x4EDC7FB516342A6C)]
    public class AttachToPartMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0xA3B6FDE442102B)]
    public class AttachToPartMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(0, 0x80, "Logic")] public Ref<DestructibilityPart> DestructibilityPart;
    }

    [RTTI.Serializable(0x9B954471F9BC5A08)]
    public class AttachToSequenceLocatorMover : Mover
    {
    }

    [RTTI.Serializable(0x1BC2185A2DC95BF1)]
    public class AttachToSequenceLocatorMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xE5ECC1CC7D6E34A6)]
    public class AttachToWorldMatrixMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x1247C0212B6943CA)]
    public class AttachToWorldMatrixMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(0, 0x80, "Logic")] public bool AlignUp;
        [RTTI.Member(1, 0x84, "Logic")] public float Relaxation;
    }

    [RTTI.Serializable(0x3E44C8AFA04AD18)]
    public class AttachToWorldMatrixVerticalDampeningMover : AttachToEntityMover
    {
    }

    [RTTI.Serializable(0x4C55CAC30642D0DD)]
    public class AttachToWorldMatrixVerticalDampeningMoverResource : AttachToEntityMoverResource
    {
        [RTTI.Member(0, 0x80, "Logic")] public float Relaxation;
        [RTTI.Member(1, 0x84, "Logic")] public float Dampening;
    }

    [RTTI.Serializable(0x53FE33000B5FE056)]
    public class AttachableExplosive : Placeable
    {
    }

    [RTTI.Serializable(0xD72EDAB3A0DF01EA)]
    public class AttachableExplosiveResource : PlaceableResource
    {
        [RTTI.Member(0, 0x138, "Logic")] public Ref<ExplosionResource> ExplosionResource;
        [RTTI.Member(1, 0x140, "Logic")] public Vec3 ExplosionOffset;
        [RTTI.Member(2, 0x150, "Logic")] public String ScriptMessageID;
        [RTTI.Member(3, 0x158, "AI")] public float DangerAreaRadius;
    }

    [RTTI.Serializable(0xE02191E94AFD7841)]
    public class AttachableUseLocation : Entity
    {
    }

    [RTTI.Serializable(0x6C9F05000B0EC5C1)]
    public class AttachableUseLocationRep : EntityRep
    {
    }

    [RTTI.Serializable(0xA2A357F1710D84A1)]
    public class AttachableUseLocationResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<UseLocationResource> ArmUseLocation;
        [RTTI.Member(1, 0x138, "Logic")] public Ref<UseLocationResource> DisarmUseLocation;
        [RTTI.Member(2, 0x140, "Logic")] public Vec3 UseLocationOffset;
        [RTTI.Member(3, 0x150, "Logic")] public Vec3 AIWaypointSearchOffset;
        [RTTI.Member(4, 0x160, "Logic")] public float MaxUseAngle;
        [RTTI.Member(5, 0x168, "Logic")] public Ref<AttachableExplosiveResource> AttachableExplosiveResource;
        [RTTI.Member(6, 0x170, "Logic")] public bool IsEnabled;
        [RTTI.Member(7, 0x171, "Logic")] public bool ShouldBeRemovedOnUse;
        [RTTI.Member(8, 0x174, "Logic")] public float ArmTime;
        [RTTI.Member(9, 0x178, "Logic")] public float ArmResetTime;
        [RTTI.Member(10, 0x17C, "Logic")] public float DisarmTime;
        [RTTI.Member(11, 0x180, "Logic")] public float DisarmResetTime;
        [RTTI.Member(12, 0x184, "Logic")] public float AdditionalUserSpeedIncrease;
        [RTTI.Member(13, 0x188, "Logic")] public bool ShouldBeKilledOnExplode;
        [RTTI.Member(14, 0x190, "Representation")] public String DefendLocalizerTag;
        [RTTI.Member(15, 0x198, "Representation")] public String ArmLocalizerTag;
        [RTTI.Member(16, 0x1A0, "Representation")] public String DefuseLocalizerTag;
        [RTTI.Member(17, 0x1A8, "Properties")] public Ref<FloatProperty> ArmPercentageProperty;
        [RTTI.Member(18, 0x1B0, "Actions")] public CPtr<EntityAction> ExplosiveArmedAction;
        [RTTI.Member(19, 0x1B8, "Actions")] public CPtr<EntityAction> ExplosiveRemovedAction;
        [RTTI.Member(20, 0x1C0, "Actions")] public CPtr<EntityAction> EnabledAction;
        [RTTI.Member(21, 0x1C8, "Actions")] public CPtr<EntityAction> DisabledAction;
    }

    [RTTI.Serializable(0xD791D036CA09375E)]
    public class AttachedAnnotationResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AnnotationResource> Annotation;
        [RTTI.Member(1, 0x30, "Logic")] public String HelperName;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<ModelPartResource> ModelPartResource;
    }

    [RTTI.Serializable(0x261682B60DECDDC2)]
    public class AttachedDamageParticlesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x24B716B432B06F68)]
    public class AttachedDamageParticlesComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x93FD2405628C82FE)]
    public class AttachedDamageParticlesComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float LifeTime;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<DamageAreaResource> DamageAreaResource;
        [RTTI.Member(2, 0x38, "Logic")] public bool ShouldPreventDamageLoop;
        [RTTI.Member(3, 0x40, "Representation")] public Ref<BoneAttachedParticleSystemResource> BoneAttachedParticleSystemResource;
    }

    [RTTI.Serializable(0xE323EF9BC736226D)]
    public class AttachedLightBinding
    {
        [RTTI.Member(0, 0x0)] public String HelperNodeName;
        [RTTI.Member(1, 0x8)] public Ref<LightResource> LightResource;
        [RTTI.Member(2, 0x10)] public float FadeInTime;
        [RTTI.Member(3, 0x14)] public float FadeOutTime;
        [RTTI.Member(4, 0x18)] public bool HideInFirstPersonView;
        [RTTI.Member(5, 0x20)] public Array<String> VisibleToFactions;
    }

    [RTTI.Serializable(0xF6AC8F26F7404BDD)]
    public class AttachedLightsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3B815D99A446C8FB)]
    public class AttachedLightsComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x16CB996715A74D3E)]
    public class AttachedLightsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Lights")] public Array<AttachedLightBinding> LightBindings;
        [RTTI.Member(1, 0x38, "Lights")] public float MaxLightFadeOutTime;
    }

    [RTTI.Serializable(0xD35D3DE36CF830B8)]
    public class AttachmentPConstraint
    {
        [RTTI.Member(0, 0x0)] public String ParentPartName;
        [RTTI.Member(1, 0x8)] public Ref<DestructibilityPart> ParentPart;
        [RTTI.Member(2, 0x10)] public Mat44 ParentLocalMatrix;
        [RTTI.Member(3, 0x50)] public String ChildPartName;
        [RTTI.Member(4, 0x58)] public Ref<DestructibilityPart> ChildPart;
        [RTTI.Member(5, 0x60)] public Mat44 ChildLocalMatrix;
        [RTTI.Member(6, 0xA0)] public Ref<PhysicsConstraintResource> PConstraint;
    }

    [RTTI.Serializable(0xA7098C0551DD4A32)]
    public class AttackEventContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x90204FF5F41AD19F)]
    public class AttackEventContextGame : AttackEventContext
    {
    }

    [RTTI.Serializable(0x3AA134C4C8B20CDC)]
    public class AttackEventInfo : RTTIObject
    {
    }

    [RTTI.Serializable(0xBAC6F5BE106EDD76)]
    public class AttackEventInfoGame : RTTIObject
    {
    }

    [RTTI.Serializable(0x95E4F2644C0CC6FA)]
    public class AttackEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1111AEF650A98F32)]
    public class AttackEventManager
    {
    }

    [RTTI.Serializable(0x255D322F2BF22263)]
    public class AttackEventManagerGame : AttackEventManager
    {
    }

    [RTTI.Serializable(0xD57C8477B0C72983)]
    public class AttackEventManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<AttackEventTag>> Tags;
    }

    [RTTI.Serializable(0x409E5350FB4CECF7)]
    public class AttackEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(2, 0x48, "Logic")] public IRange BurstSize;
    }

    [RTTI.Serializable(0xD8B0862FBC1F90CF)]
    public class AttackEventTag : Resource
    {
    }

    [RTTI.Serializable(0xDDD634D077859F4D)]
    public class AttackerToVictimDamageModifier
    {
        [RTTI.Member(0, 0x0)] public String AttackerFactionName;
        [RTTI.Member(1, 0x8)] public bool AttackerIsPlayer;
        [RTTI.Member(2, 0x10)] public String VictimFactionName;
        [RTTI.Member(3, 0x18)] public bool VictimIsPlayer;
        [RTTI.Member(4, 0x1C)] public ESelfDamage SelfDamage;
        [RTTI.Member(5, 0x20)] public float DamageModifier;
        [RTTI.Member(6, 0x28)] public Ref<CurveResource> DamageModifierCurve;
        [RTTI.Member(7, 0x30)] public float SeverityModifier;
        [RTTI.Member(8, 0x38)] public Ref<CurveResource> SeverityModifierCurve;
        [RTTI.Member(9, 0x40)] public String WeaponResourceName;
        [RTTI.Member(10, 0x48)] public String VictimResourceName;
    }

    [RTTI.Serializable(0xD495C2EA37FD0F9B)]
    public class AttributeAnimatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8766C0302CDFA0D0)]
    public class AttributeAnimatorComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
    }

    [RTTI.Serializable(0xF714975BAA9EC85C)]
    public class AttributeAnimatorInstance : ObjectAttributeAnimatorInstance
    {
    }

    [RTTI.Serializable(0xCF3E0B8381197416)]
    public class AttributeAnimatorResourceBase : ObjectAttributeAnimatorResource
    {
        [RTTI.Member(0, 0x38, "Animator")] public String AttributeGroup;
        [RTTI.Member(1, 0x40, "Animator")] public String AttributeName;
    }

    [RTTI.Serializable(0x2F151610558E89ED)]
    public class AttributeBoolAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x48)] public Ref<AnimationTrackLinearBool> AnimationTrack;
    }

    [RTTI.Serializable(0x1E253C88983CF18E)]
    public class AttributeFVector3AnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x48, "Animator")] public Ref<AnimationTrackLinearFVector3> AnimationTrack;
    }

    [RTTI.Serializable(0x66EBB31165BBDFC9)]
    public class AttributeFVector4AnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x48, "Animator")] public Ref<AnimationTrackLinearFVector4> AnimationTrack;
    }

    [RTTI.Serializable(0x3A65B60391D00AE1)]
    public class AttributeFloatAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x48, "Animator")] public Ref<AnimationTrackLinearFloat> AnimationTrack;
    }

    [RTTI.Serializable(0x5E9376622A18B10A)]
    public class AttributeProjMatrixAnimatorInstance : AttributeAnimatorInstance
    {
    }

    [RTTI.Serializable(0x61EE2D4D74836D90)]
    public class AttributeProjMatrixAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x48, "Animator")] public Ref<AnimationTrackLinearFVector3> TranslationTrack;
        [RTTI.Member(1, 0x50, "Animator")] public Ref<AnimationTrackLinearFVector3> ScalingTrack;
        [RTTI.Member(2, 0x58, "Animator")] public Ref<AnimationTrackLinearFQuat> RotationTrack;
    }

    [RTTI.Serializable(0xB1B041866C1C3F95)]
    public class AttributeRGBAColorAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x48, "Animator")] public Ref<AnimationTrackLinearRGBAColor> ColorTrack;
    }

    [RTTI.Serializable(0xE4B617613A9FCD0B)]
    public class AttributeWorldTransformAnimatorInstance : AttributeAnimatorInstance
    {
    }

    [RTTI.Serializable(0x43864AF5C64F01AC)]
    public class AttributeWorldTransformAnimatorResource : AttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x48, "Animator")] public Ref<AnimationTrackLinearFVector3> TranslationTrack;
        [RTTI.Member(1, 0x50, "Animator")] public Ref<AnimationTrackLinearFVector3> ScalingTrack;
        [RTTI.Member(2, 0x58, "Animator")] public Ref<AnimationTrackLinearFQuat> RotationTrack;
    }

    [RTTI.Serializable(0x77B87043B7B0EC5D)]
    public class AudioEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x71050F9BC53C5134)]
    public class AudioEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(1, 0x40, "Logic")] public float Volume;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<CurveResource> VolumeCurveResource;
        [RTTI.Member(3, 0x50, "Logic")] public bool AutoScaleVolumeCurve;
        [RTTI.Member(4, 0x51, "Logic")] public bool _3D;
        [RTTI.Member(5, 0x52, "Logic")] public bool SoftFadeOut;
        [RTTI.Member(6, 0x53, "Logic")] public bool SyncToSequenceWithPitch;
    }

    [RTTI.Serializable(0xFBC13742C8320799)]
    public class AudioPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x704318A23C3BA977)]
    public class AudioPlayerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x1F2C74892894E98E)]
    public class AudioPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool CanCancelAudioLog;
        [RTTI.Member(1, 0x29, "Logic")] public bool ShouldPauseWhenWeaponSelectionActive;
        [RTTI.Member(2, 0x30, "Logic")] public Ref<SoundResource> AudioLogStartingSound;
        [RTTI.Member(3, 0x38, "Logic")] public Ref<SoundResource> AudioLogEndigSound;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<ConditionResource> CancelCondition;
        [RTTI.Member(5, 0x48, "Logic")] public Ref<BooleanFact> IsPlayingAudioLogFact;
    }

    [RTTI.Serializable(0x10A5CC7333A234EE)]
    public class AuroraSettings
    {
        [RTTI.Member(0, 0x0, "General")] public float Intensity;
    }

    [RTTI.Serializable(0x863AAA0CE94B7865)]
    public class AuroraSettingsResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public AuroraSettings Settings;
    }

    [RTTI.Serializable(0x6E1D227629C4B406)]
    public class AuroraStaticSettings : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public FRGBAColor BottomColor;
        [RTTI.Member(1, 0x30, "General")] public FRGBAColor TopColor;
        [RTTI.Member(2, 0x40, "General")] public float AnimationSpeed;
        [RTTI.Member(3, 0x44, "Shape")] public float ShapeAnimationSpeed;
        [RTTI.Member(4, 0x48, "Shape")] public float ShapeVariationFrequency;
        [RTTI.Member(5, 0x4C, "Intensity")] public float IntensityAnimationSpeed;
        [RTTI.Member(6, 0x50, "Intensity")] public float IntensityVariationFrequency;
        [RTTI.Member(7, 0x54, "Sharpness")] public float SharpnessAnimationSpeed;
        [RTTI.Member(8, 0x58, "Sharpness")] public float SharpnessVariationFrequency;
        [RTTI.Member(9, 0x5C, "Sharpness")] public float MinSharpness;
        [RTTI.Member(10, 0x60, "Sharpness")] public float MaxSharpness;
    }

    [RTTI.Serializable(0xAC04638DE6CC4997)]
    public class AutoAimHull : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float AutoAimRange;
        [RTTI.Member(1, 0x2C, "Logic")] public float AutoAimHorizontalAngle;
        [RTTI.Member(2, 0x30, "Logic")] public float AutoAimVerticalAngle;
        [RTTI.Member(3, 0x34, "Logic")] public float AutoAimConeRange;
        [RTTI.Member(4, 0x38, "Logic")] public float AutoAimEndRange;
        [RTTI.Member(5, 0x3C, "Logic")] public float AutoAimStartWidth;
        [RTTI.Member(6, 0x40, "Logic")] public float AutoAimStartHeight;
        [RTTI.Member(7, 0x48, "Private")] public ConvexHull InternalHull;
        [RTTI.Member(8, 0x70, "Private")] public BoundingBox3 BoundingBox;
    }

    [RTTI.Serializable(0xF40E4513CDE36208)]
    public class AutoManagedWeaponComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCC729B3A592D8B68)]
    public class AutonomousBehaviorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x88615D2EA3141DD0)]
    public class AutonomousBehaviorEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x316158892539C505)]
    public class AwarenessMarkerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB7ACD6EBB1E7F6D9)]
    public class AwarenessMarkerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Icons")] public Ref<AwarenessStateDisplaySettingsResource> FallbackAwarenessStateDisplaySettings;
        [RTTI.Member(1, 0x30, "Icons")] public Array<Ref<WeaponMarkerMapping>> WeaponMarkerMap;
        [RTTI.Member(2, 0x40, "Icons")] public Array<Ref<WeaponMarkerMapping>> TaggedWeaponMarkerMap;
        [RTTI.Member(3, 0x50, "Icons")] public Array<Ref<WeaponMarkerMapping>> GestureMarkerMap;
        [RTTI.Member(4, 0x60, "Icons")] public Array<Ref<WeaponMarkerMapping>> TaggedGestureMarkerMap;
        [RTTI.Member(5, 0x70, "Icons")] public Ref<LocationMarkerResource> LocationMarker;
    }

    [RTTI.Serializable(0x6325D57E002FF2BA)]
    public class AwarenessMarkerDisplaySettings : Resource
    {
        [RTTI.Member(0, 0x28)] public bool OnlyShowWhenPlayerTarget;
        [RTTI.Member(1, 0x29)] public bool VisibleInView;
        [RTTI.Member(2, 0x2C)] public float MaxDistance;
        [RTTI.Member(3, 0x30)] public Ref<UITexture> UIIcon;
        [RTTI.Member(4, 0x38)] public Ref<UITexture> UIOverlayImage;
        [RTTI.Member(5, 0x40)] public Ref<UITexture> UIBlinkImage;
        [RTTI.Member(6, 0x48)] public Ref<CurveResource> BlinkCurve;
        [RTTI.Member(7, 0x50)] public bool CanShowTagIcon;
        [RTTI.Member(8, 0x51)] public bool CanShowTypeClassIcon;
    }

    [RTTI.Serializable(0x6BD5A4CDDEBFC757)]
    public class AwarenessStateDisplaySettingsResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<AwarenessMarkerDisplaySettings> UndetectedAndHidden;
        [RTTI.Member(1, 0x30)] public Ref<AwarenessMarkerDisplaySettings> UndetectedAndHiddenTransition;
        [RTTI.Member(2, 0x38)] public Ref<AwarenessMarkerDisplaySettings> UndetectedAndPerceived;
        [RTTI.Member(3, 0x40)] public Ref<AwarenessMarkerDisplaySettings> UndetectedAndPerceivedTransition;
        [RTTI.Member(4, 0x48)] public Ref<AwarenessMarkerDisplaySettings> SuspectedAndHidden;
        [RTTI.Member(5, 0x50)] public Ref<AwarenessMarkerDisplaySettings> SuspectedAndHiddenTransition;
        [RTTI.Member(6, 0x58)] public Ref<AwarenessMarkerDisplaySettings> SuspectedAndPerceived;
        [RTTI.Member(7, 0x60)] public Ref<AwarenessMarkerDisplaySettings> SuspectedAndPerceivedTransition;
        [RTTI.Member(8, 0x68)] public Ref<AwarenessMarkerDisplaySettings> IdentifiedToSuspectedTransition;
        [RTTI.Member(9, 0x70)] public Ref<AwarenessMarkerDisplaySettings> IdentifiedAndPerceived;
        [RTTI.Member(10, 0x78)] public Ref<AwarenessMarkerDisplaySettings> Searching;
    }

    [RTTI.Serializable(0x6ED62073936BADF0)]
    public class BakeConfiguration : CoreObject
    {
    }

    [RTTI.Serializable(0x1749B682977D8E5D)]
    public class BakedInstanceData
    {
        [RTTI.Member(0, 0x4, "General")] public int InstanceCount;
        [RTTI.Member(1, 0x8, "General")] public int ChannelCount;
        [RTTI.Member(2, 0x18, "General")] public Ref<DataBufferResource> Resource;
    }

    [RTTI.Serializable(0x6D8BDCB260D82DE2)]
    public class BandwidthMeasurementService : RTTIObject
    {
    }

    [RTTI.Serializable(0xA2C1DA36D73DC46A)]
    public class BaseResource : CoreObject
    {
    }

    [RTTI.Serializable(0xA0EBC7E36E6A95B)]
    public class BaselineTimes : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public EDifficulty Difficulty;
        [RTTI.Member(1, 0xC)] public float FastTime;
        [RTTI.Member(2, 0x10)] public float BaselineTime;
        [RTTI.Member(3, 0x14)] public float SlowTime;
    }

    [RTTI.Serializable(0xC16EAFAF7B9DEFC)]
    public class BasicAnimationEventInstance : AnimationEventInstance
    {
    }

    [RTTI.Serializable(0x2657FC6511B1C392)]
    public class BasicAnimationEventResource : AnimationEventResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<AnimationLinkResource> AnimationLink;
    }

    [RTTI.Serializable(0xDE6C78D0EC55DD45)]
    public class BasicControlledEntityAIController : Controller
    {
    }

    [RTTI.Serializable(0xE66770D67FDD0E36)]
    public class BeamEjector : ContinuousAmmoEjector
    {
    }

    [RTTI.Serializable(0x4492E012CB882CB4)]
    public class BeamEjectorRep : ContinuousAmmoEjectorRep
    {
    }

    [RTTI.Serializable(0x20CC573A77B4C921)]
    public class BeamEjectorResource : ContinuousAmmoEjectorResource
    {
        [RTTI.Member(0, 0x1E0, "Logic")] public float Range;
        [RTTI.Member(1, 0x1E8, "Logic")] public Array<Ref<DamageSettings>> DamageSettingsSP;
        [RTTI.Member(2, 0x1F8, "Logic")] public Array<Ref<DamageSettings>> DamageSettingsMP;
        [RTTI.Member(3, 0x208, "Logic")] public Array<Ref<DamageSettings>> DamageSettingsAI;
        [RTTI.Member(4, 0x218, "Logic")] public Array<Ref<DamageSettings>> InitialHitDamageSettingsSP;
        [RTTI.Member(5, 0x228, "Logic")] public Array<Ref<DamageSettings>> InitialHitDamageSettingsMP;
        [RTTI.Member(6, 0x238, "Logic")] public Array<Ref<DamageSettings>> InitialHitDamageSettingsAI;
        [RTTI.Member(7, 0x248, "Logic")] public float MaxContinuousDamageDuration;
        [RTTI.Member(8, 0x24C, "Logic")] public bool ShareMaxDurationAcrossAllBeams;
        [RTTI.Member(9, 0x250, "Representation")] public Ref<LaserBeamResource> LaserBeamResource;
        [RTTI.Member(10, 0x258, "Representation")] public MaterialType ImpactMaterialType;
        [RTTI.Member(11, 0x25C, "Logic")] public int NumberOfBeams;
        [RTTI.Member(12, 0x260, "Logic")] public float SeperationAngle;
        [RTTI.Member(13, 0x264, "Logic")] public EIntersectionMethod IntersectionMethod;
        [RTTI.Member(14, 0x268, "Logic")] public float BeamCollisionRadius;
        [RTTI.Member(15, 0x26C, "Logic")] public bool UseEjectorDirection;
    }

    [RTTI.Serializable(0x24CF46669C17C89)]
    public class BinocularsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD4D39D020E3FEF10)]
    public class BinocularsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MaxTagRange;
    }

    [RTTI.Serializable(0x584E1E6E22E6D730)]
    public class BinocularsTaggableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB0E78F99C45F812B)]
    public class BinocularsTaggableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponents;
    }

    [RTTI.Serializable(0x4DA7A336F44776EE)]
    public class Biotope : BiotopeBase
    {
        [RTTI.Member(0, 0x28, "DensitySettings")] public Ref<CurveResource> AltitudeAffinity;
        [RTTI.Member(1, 0x30, "DensitySettings")] public Ref<CurveResource> SlopeAffinity;
        [RTTI.Member(2, 0x38, "DensitySettings")] public Ref<CurveResource> MaskAffinity;
        [RTTI.Member(3, 0x40, "DensitySettings")] public EMaskChannel MaskChannel;
        [RTTI.Member(4, 0x44, "DensitySettings")] public EHeightChannel HeightChannel;
        [RTTI.Member(5, 0x50, "Populations")] public Array<Ref<PopulationPlacement>> Placements;
    }

    [RTTI.Serializable(0xB012FF4A2B8BDF53)]
    public class BiotopeBase : Resource
    {
    }

    [RTTI.Serializable(0xDF8B3D4139363277)]
    public class BiotopeSet : BiotopeBase
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<BiotopeBase>> Biotopes;
        [RTTI.Member(1, 0x38)] public EMaskChannel MasterMask;
    }

    [RTTI.Serializable(0xF4222E8B92D481A6)]
    public class BitstreamData
    {
        [RTTI.Member(0, 0x0, true)] public Array<uint8> Data;
    }

    [RTTI.Serializable(0x811486F25B793F60)]
    public class BlendTargetDeformation
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public Array<PrimitiveDeltaDeformation> Deformations;
    }

    [RTTI.Serializable(0xB09B2B3CEFF3F9B1)]
    public class BlendedMeshEntry
    {
        [RTTI.Member(0, 0x0, "General")] public Ref<BlendedMeshResource> BlendedMesh;
        [RTTI.Member(1, 0x8, "General")] public float BlendDuration;
    }

    [RTTI.Serializable(0x37A05F8FDF1DF3C7)]
    public class BlendedMeshEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x987E2F8800BB44DE)]
    public class BlendedMeshEventResource : ScaleableTimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<MultiBlendedMeshResource> MultiBlendedMeshResource;
    }

    [RTTI.Serializable(0x5CB00C52143851B8)]
    public class BlendedMeshInstance : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
        [RTTI.Member(1, 0xC8, "General")] public Ref<BlendedMeshResource> Resource;
    }

    [RTTI.Serializable(0xBD8F55E7672174D0)]
    public class BlendedMeshResource : MeshResourceBase
    {
        [RTTI.Member(0, 0x80, "General")] public Array<Ref<RenderingPrimitiveResource>> PrimitivesMeshA;
        [RTTI.Member(1, 0x90, "General")] public Array<Ref<RenderingPrimitiveResource>> PrimitivesMeshB;
        [RTTI.Member(2, 0xA0, "General")] public Array<Ref<RenderEffectResource>> RenderEffects;
        [RTTI.Member(3, 0xB0, "General")] public Array<int> PrimitiveRenderEffectMapping;
        [RTTI.Member(4, 0xD8, "General")] public DrawFlags DrawFlags;
    }

    [RTTI.Serializable(0xA07F82D615119ABA)]
    public class BlindableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x87986F605B454482)]
    public class BlindableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CPtr<EntityAction> BlindedAction;
        [RTTI.Member(1, 0x30, "Logic")] public CPtr<EntityAction> UnBlindedAction;
        [RTTI.Member(2, 0x38, "Logic")] public float MaxBlindingAngle;
        [RTTI.Member(3, 0x3C, "Logic")] public float BlindableRadius;
        [RTTI.Member(4, 0x40, "Logic")] public String BlindingHelperName;
    }

    [RTTI.Serializable(0x8B602E45F1E03143)]
    public class BloodPuddleSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public FRange RandomInterval;
        [RTTI.Member(1, 0x30)] public float BloodPuddleLeadTime;
        [RTTI.Member(2, 0x34)] public IRange Amount;
        [RTTI.Member(3, 0x3C)] public float PlacementRadius;
        [RTTI.Member(4, 0x40)] public MaterialType MaterialType;
    }

    [RTTI.Serializable(0xCF6619C5DE80E4F)]
    public class BloomLookupData : Resource
    {
        [RTTI.Member(0, 0x28, "Data")] public Array<FRGBAColor> Data;
        [RTTI.Member(1, 0x38, "Data")] public int Stride;
        [RTTI.Member(2, 0x3C, "Data")] public int Size;
    }

    [RTTI.Serializable(0x24D06760FA7B8C25)]
    public class BloomSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public float BlackPoint;
        [RTTI.Member(1, 0x4, "Settings")] public float WhitePoint;
        [RTTI.Member(2, 0x8, "Settings")] public float Strength;
        [RTTI.Member(3, 0xC, "Settings")] public float ILRStrength;
        [RTTI.Member(4, 0x10, "Settings")] public float ILRSharpStrength;
        [RTTI.Member(5, 0x14, "Settings")] public uint ILRBlurCount;
        [RTTI.Member(6, 0x18, "Settings")] public Array<FRGBAColor> ILRElements;
        [RTTI.Member(7, 0x28, "Settings")] public Array<FRGBAColor> ILRSharpElements;
        [RTTI.Member(8, 0x38, "Settings")] public EPostProcessBlendMode BlendMode;
        [RTTI.Member(9, 0x40, "Settings")] public Ref<CurveResource> StrengthScaleOverDistance;
        [RTTI.Member(10, 0x48, "Settings")] public Ref<CurveResource> BlackPointOverDistance;
        [RTTI.Member(11, 0x50, "Settings")] public Ref<CurveResource> WhitePointOverDistance;
    }

    [RTTI.Serializable(0x2C30EB580C9FE343)]
    public class BloomSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public float BlackPoint;
        [RTTI.Member(1, 0x2C, "Settings")] public float WhitePoint;
        [RTTI.Member(2, 0x30, "Settings")] public float Strength;
        [RTTI.Member(3, 0x34, "Settings")] public float ILRStrength;
        [RTTI.Member(4, 0x38, "Settings")] public float ILRSharpStrength;
        [RTTI.Member(5, 0x3C, "Settings")] public uint ILRBlurCount;
        [RTTI.Member(6, 0x40, "Settings")] public Array<FRGBAColor> ILRElements;
        [RTTI.Member(7, 0x50, "Settings")] public Array<FRGBAColor> ILRSharpElements;
        [RTTI.Member(8, 0x60, "Settings")] public EPostProcessBlendMode BlendMode;
        [RTTI.Member(9, 0x68, "Settings")] public Ref<CurveResource> StrengthScaleOverDistance;
        [RTTI.Member(10, 0x70, "Settings")] public Ref<CurveResource> BlackPointOverDistance;
        [RTTI.Member(11, 0x78, "Settings")] public Ref<CurveResource> WhitePointOverDistance;
        [RTTI.Member(12, 0x80, "Settings")] public Ref<BloomLookupData> BloomTexture;
    }

    [RTTI.Serializable(0x36679006F125B45)]
    public class BlurSettingsResource : Resource
    {
        [RTTI.Member(0, 0x30, "Settings")] public Vec2 Position;
        [RTTI.Member(1, 0x40, "Settings")] public float InnerRadius;
        [RTTI.Member(2, 0x44, "Settings")] public float OuterRadius;
        [RTTI.Member(3, 0x48, "Settings")] public float Scale;
        [RTTI.Member(4, 0x50, "Settings")] public Vec2 MotionBlurScaleCenter;
        [RTTI.Member(5, 0x60, "Settings")] public float MotionBlurScaleInner;
        [RTTI.Member(6, 0x64, "Settings")] public float MotionBlurScaleOuter;
        [RTTI.Member(7, 0x68, "Settings")] public float MotionBlurScaleInnerRadius;
        [RTTI.Member(8, 0x6C, "Settings")] public float MotionBlurScaleOuterRadius;
    }

    [RTTI.Serializable(0x861846F318EAE682)]
    public class BodyPoseSwitchDisallowBoolProperty
    {
        [RTTI.Member(0, 0x0)] public BoolPropertyLink Link;
        [RTTI.Member(1, 0x8)] public bool TestValue;
    }

    [RTTI.Serializable(0x2D8153FA54D592C9)]
    public class BodyVariantComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBE65FFD5C3314FF3)]
    public class BodyVariantComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Array<StreamingRef<HumanoidBodyVariant>> Variants;
    }

    [RTTI.Serializable(0xF8FB881059F94B41)]
    public class BodyVariantHideHeadgearComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC16F3F23211A10B5)]
    public class BodyVariantHideHeadgearComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF15A7D85843BD9E1)]
    public class BodyVariantHideHeadgearComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<LodMeshResource>> LodMeshResources;
    }

    [RTTI.Serializable(0x95AA7941391F81DC)]
    public class BodyVariantRuntimeComponent : EntityComponent
    {
        [RTTI.Member(0, 0x60)] public StreamingRef<HumanoidBodyVariant> BodyVariant;
    }

    [RTTI.Serializable(0xD72468DA630C4009)]
    public class BodyVariantRuntimeComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xDE5502C9D51DC41E)]
    public class BokehSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public int IrisBladeCount;
        [RTTI.Member(1, 0x4, "Settings")] public float IrisRoundness;
        [RTTI.Member(2, 0x8, "Settings")] public float IrisRotation;
        [RTTI.Member(3, 0xC, "Settings")] public float IrisFalloff;
        [RTTI.Member(4, 0x10, "Settings")] public float SphericalAberrationLevel;
        [RTTI.Member(5, 0x14, "Settings")] public float SphericalAberrationPower;
        [RTTI.Member(6, 0x18, "Settings")] public float CatEyeRadius;
        [RTTI.Member(7, 0x1C, "Settings")] public float CatEyeStrength;
        [RTTI.Member(8, 0x20, "Settings")] public float CatEyeFalloff;
        [RTTI.Member(9, 0x24, "Settings")] public float NoiseFrequency;
        [RTTI.Member(10, 0x28, "Settings")] public float NoiseAmplitude;
        [RTTI.Member(11, 0x2C, "Settings")] public float ChromaticAberration;
    }

    [RTTI.Serializable(0xA78C863FAF7791B1)]
    public class BokehSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public BokehSettings BokehSettings;
        [RTTI.Member(1, 0x58, "Settings")] public Ref<Texture> Texture;
    }

    [RTTI.Serializable(0x6AED4402EC793C5F)]
    public class BoneAttachedParticleSystem : CoreObject
    {
    }

    [RTTI.Serializable(0xFA6177EF13E56D6F)]
    public class BoneAttachedParticleSystemLink
    {
        [RTTI.Member(0, 0x0)] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(1, 0x8)] public Ref<LightResource> LightResource;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> LightIntensityCurve;
        [RTTI.Member(3, 0x18)] public Ref<SoundResource> SoundResource;
        [RTTI.Member(4, 0x20)] public String BoneName;
        [RTTI.Member(5, 0x28)] public bool AlignToWorld;
        [RTTI.Member(6, 0x30)] public Mat44 OffsetMatrix;
    }

    [RTTI.Serializable(0x6965A6BB791D308B)]
    public class BoneAttachedParticleSystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<BoneAttachedParticleSystemLink> AttachedParticleSystems;
        [RTTI.Member(1, 0x38, "Logic")] public float LifeTime;
    }

    [RTTI.Serializable(0xA2BFF43EE833B0C)]
    public class BoneLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x49A009BC97F8EE5E)]
    public class BoneLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String BoneName;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(2, 0x50, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0x557144C701431B98)]
    public class BoneRemapEntry
    {
        [RTTI.Member(0, 0x0)] public int Name;
        [RTTI.Member(1, 0x4)] public bool ParentRemapped;
    }

    [RTTI.Serializable(0x49DB8ED4D1EB432C)]
    public class BoolProperty : BoolPropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x2A68CEDDC19C030A)]
    public class BoolPropertyBase : Property
    {
    }

    [RTTI.Serializable(0xA676D4C5481CAC93)]
    public class BoolPropertyLink : PropertyLinkBase
    {
        [RTTI.Member(0, 0x0)] public Ref<BoolPropertyBase> Property;
    }

    [RTTI.Serializable(0xA37488DFA8071E29)]
    public class BoolPropertyToSoundParameterMapping
    {
        [RTTI.Member(0, 0x0)] public Ref<BoolPropertyBase> Property;
        [RTTI.Member(1, 0x8)] public String SoundParameterName;
    }

    [RTTI.Serializable(0xB40D5D07E49C3282)]
    public class BooleanFact : Fact
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool DefaultValue;
    }

    [RTTI.Serializable(0x2959D183D46914D5)]
    public class BooleanFactConditionInstance : ConditionInstance
    {
    }

    [RTTI.Serializable(0x9B93416CB458B82)]
    public class BooleanFactConditionResource : ConditionResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Array<BooleanFactConditionSettings> Facts;
        [RTTI.Member(1, 0x48, "Logic")] public EBooleanFactOperator Operator;
    }

    [RTTI.Serializable(0x968C5AD618B5C45D)]
    public class BooleanFactConditionSettings
    {
        [RTTI.Member(0, 0x0, "Logic")] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x8, "Logic")] public bool IsInverted;
        [RTTI.Member(2, 0x9, "Logic")] public EBooleanFactConditionMode Mode;
    }

    [RTTI.Serializable(0x67EDEF78A9D12E0E)]
    public class BooleanFactQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x30, "Logic")] public bool Value;
    }

    [RTTI.Serializable(0xEFB5E8B8B68714EE)]
    public class BooleanFactQuestTriggerInstance : FactQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xC5A053AF64BD7E42)]
    public class BooleanFactSelectEventInstance : SelectEventInstance
    {
    }

    [RTTI.Serializable(0x6BCF108CEFD776BD)]
    public class BooleanFactSelectEventInstance2 : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5D9842A96CA973E)]
    public class BooleanFactSelectEventResource : SelectEventResource
    {
        [RTTI.Member(0, 0x38)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x40)] public ESequenceFactContextType FactContextType;
        [RTTI.Member(2, 0x48)] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(3, 0x50)] public Array<Ref<EventResource>> TrueEvents;
        [RTTI.Member(4, 0x60)] public Array<Ref<EventResource>> FalseEvents;
    }

    [RTTI.Serializable(0xD74F97AD20DC654E)]
    public class BooleanFactSelectEventResource2 : TimedEventResource
    {
        [RTTI.Member(0, 0x38)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x40)] public ESequenceFactContextType FactContextType;
        [RTTI.Member(2, 0x48)] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(3, 0x50)] public Array<Ref<EventResource>> TrueEvents;
        [RTTI.Member(4, 0x60)] public Array<Ref<EventResource>> FalseEvents;
    }

    [RTTI.Serializable(0xAD8FE12321A28A20)]
    public class BotNames : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<WString> IsaNames;
        [RTTI.Member(1, 0x38, "Logic")] public Array<WString> HghNames;
    }

    [RTTI.Serializable(0x9A59ED5CFB766EC3)]
    public class BoundingBox2
    {
        [RTTI.Member(0, 0x0)] public Vec2 Min;
        [RTTI.Member(1, 0x10)] public Vec2 Max;
    }

    [RTTI.Serializable(0x6CAF73469B380E32)]
    public class BoundingBox3
    {
        [RTTI.Member(0, 0x0)] public Vec3 Min;
        [RTTI.Member(1, 0x10)] public Vec3 Max;
    }

    [RTTI.Serializable(0xC6B136E851D6E31A)]
    public class BoundingBox3Pack
    {
        [RTTI.Member(0, 0x0)] public Vec3Pack Min;
        [RTTI.Member(1, 0xC)] public Vec3Pack Max;
    }

    [RTTI.Serializable(0x1B65EFA55EF18D8)]
    public class BoundingBoxBasedActivationPolicy : EntityActivationPolicy
    {
        [RTTI.Member(0, 0x40, "Logic")] public BoundingBox3 LocalActivationBox;
        [RTTI.Member(1, 0x60, "Logic")] public BoundingBox3 LocalDeactivationBox;
    }

    [RTTI.Serializable(0x5B2A8945F87FE9E3)]
    public class BoundingBoxVolumetricAnnotation : VolumetricAnnotation
    {
        [RTTI.Member(0, 0x40, "Logic")] public OrientedBox OrientedBox;
        [RTTI.Member(1, 0x90, "Logic")] public Mat44 OrientedBoxMatrix;
        [RTTI.Member(2, 0xD0, "Logic")] public Vec3 OrientedBoxMin;
        [RTTI.Member(3, 0xE0, "Logic")] public Vec3 OrientedBoxMax;
    }

    [RTTI.Serializable(0xD9995612305B47C0)]
    public class BoundingSphere
    {
        [RTTI.Member(0, 0x0)] public Vec3 Center;
        [RTTI.Member(1, 0xC)] public float Radius;
    }

    [RTTI.Serializable(0xA91E4E06B14D7B0D)]
    public class BoundingSphereVolumetricAnnotation : VolumetricAnnotation
    {
        [RTTI.Member(0, 0x40, "Logic")] public BoundingSphere BoundingSphere;
    }

    [RTTI.Serializable(0x64D93B70B2CC886B)]
    public class Breadcrumb : Resource
    {
    }

    [RTTI.Serializable(0x81122CA70A97FC02)]
    public class BuddyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x64091830BA6BAA21)]
    public class BuddyComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float TeleportThreshold;
        [RTTI.Member(1, 0x2C, "Logic")] public FRange TeleportPositionRange;
    }

    [RTTI.Serializable(0x358A3DFDD9237AB8)]
    public class BuddyContextualOrderResource : ContextualOrderResource
    {
        [RTTI.Member(0, 0xA0, "Logic")] public CPtr<EntityAction> ActionOnBuddy;
        [RTTI.Member(1, 0xA8, "Logic")] public bool CanBeOverruled;
    }

    [RTTI.Serializable(0x54600FF3BEBFBF9B)]
    public class BuddyModeSwitchAction : EntityAction
    {
    }

    [RTTI.Serializable(0xEBBD16E6B9CA29A1)]
    public class BuddyOrderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x980264E5E34C2FF1)]
    public class BuddyOrderComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<InventoryContextualOrderAbilityResource>> ContextualAbilities;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<BuddyContextualOrderResource> ReviveOrder;
    }

    [RTTI.Serializable(0x68483B9E9EBD2BD5)]
    public class BuddySequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(0, 0x48)] public Ref<BuddyComponentResource> BuddyComponentResource;
    }

    [RTTI.Serializable(0x6788F68D8A11A9E8)]
    public class BuddySequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xF07AC1C1EF359E2)]
    public class BuddySpawnpoint : Spawnpoint
    {
    }

    [RTTI.Serializable(0xC35DDE27314C9466)]
    public class BulletEjector : DiscreteAmmoEjector
    {
    }

    [RTTI.Serializable(0x56006CC0B8D15E7)]
    public class BulletEjectorRep : DiscreteAmmoEjectorRep
    {
    }

    [RTTI.Serializable(0x35D71CEAE39E838C)]
    public class BulletEjectorResource : DiscreteAmmoEjectorResource
    {
        [RTTI.Member(0, 0x240, "Damage")] public Ref<CurveResource> DamageOverDistanceCurveSP;
        [RTTI.Member(1, 0x248, "Damage")] public Ref<CurveResource> DamageOverDistanceCurveMP;
        [RTTI.Member(2, 0x250, "Damage")] public Ref<CurveResource> DamageOverDistanceCurveAI;
        [RTTI.Member(3, 0x258, "Physics")] public Ref<CurveResource> ImpactImpulseOverDistanceCurve;
        [RTTI.Member(4, 0x260, "Physics")] public Ref<CurveResource> ImpactImpulseOverDistanceCurveForHumanoids;
        [RTTI.Member(5, 0x268, "Physics")] public Ref<CurveResource> ImpactSeverityOverDistanceCurve;
        [RTTI.Member(6, 0x270, "Damage")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(7, 0x278, "Damage")] public int PenetrationPower;
        [RTTI.Member(8, 0x27C, "EjectSettings")] public float ExitVelocitySP;
        [RTTI.Member(9, 0x280, "EjectSettings")] public float ExitVelocityMP;
        [RTTI.Member(10, 0x284, "EjectSettings")] public float ExitVelocityAI;
        [RTTI.Member(11, 0x288, "AI")] public Ref<AIAuralStimulusResource> ImpactSoundStimulus;
        [RTTI.Member(12, 0x290, "AI")] public Ref<AIVisualStimulusResource> ImpactVisualStimulus;
        [RTTI.Member(13, 0x298, "VisualEffects")] public MaterialType BulletMaterialType;
        [RTTI.Member(14, 0x2A0, "VisualEffects")] public Ref<BulletTracerSettings> BulletTracerSettings;
        [RTTI.Member(15, 0x2A8, "Ricochet")] public float VelocityModifier;
        [RTTI.Member(16, 0x2AC, "Ricochet")] public float DamageModifier;
        [RTTI.Member(17, 0x2B0, "Ricochet")] public int MaximumHits;
        [RTTI.Member(18, 0x2B4, "Ricochet")] public float RandomRicochetAngle;
        [RTTI.Member(19, 0x2B8, "Ricochet")] public float ChanceModifier;
        [RTTI.Member(20, 0x2C0, "Impact")] public CPtr<EntityAction> Impact_BulletImpactAction;
        [RTTI.Member(21, 0x2C8, "Charged")] public Ref<ChargedValueFloat> DamageMultiplier;
        [RTTI.Member(22, 0x2D0, "Charged")] public Ref<ChargedValueEntityAction> Charged_BulletImpactAction;
    }

    [RTTI.Serializable(0xB9F895FD1E6CD893)]
    public class BulletSystem : Entity
    {
    }

    [RTTI.Serializable(0x4220B423F02C6B0C)]
    public class BulletSystemRep : EntityRep
    {
    }

    [RTTI.Serializable(0xDA853B181FD7FDA7)]
    public class BulletSystemResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Representation")] public int MaxWhizzSounds;
        [RTTI.Member(1, 0x138, "Representation")] public Ref<CurveResource> FirstPersonTracerManipulation;
        [RTTI.Member(2, 0x140, "Representation")] public MaterialType BloodSpatterMaterialType;
        [RTTI.Member(3, 0x148, "Representation")] public Array<MaterialType> FleshMaterialTypes;
        [RTTI.Member(4, 0x158, "PostFleshHit")] public float StartOffset;
        [RTTI.Member(5, 0x15C, "PostFleshHit")] public float EndOffset;
        [RTTI.Member(6, 0x160, "Logic")] public bool IsRicochetEnabled;
        [RTTI.Member(7, 0x168, "Representation")] public Ref<BulletTracerSettings> DefaultBulletTracerSettings;
    }

    [RTTI.Serializable(0xEECD61057C95E215)]
    public class BulletTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC3271CFE9C8016CB)]
    public class BulletTimeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Duration")] public int InitialAmountOfSegments;
        [RTTI.Member(1, 0x2C, "Duration")] public float DepletionTime;
        [RTTI.Member(2, 0x30, "Duration")] public float RechargeTime;
        [RTTI.Member(3, 0x38, "SlowMotion")] public Ref<SlowMotionSettingResource> SlowMotionSettings;
        [RTTI.Member(4, 0x40, "Duration")] public Array<PerkDurationMapping> UpgradeMapping;
    }

    [RTTI.Serializable(0xAAE61CFF1DD1A1DF)]
    public class BulletTracerSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Representation")] public float CirclePosition;
        [RTTI.Member(1, 0x30, "Representation")] public Ref<RenderEffectResource> LineRenderEffectsResource;
        [RTTI.Member(2, 0x38, "Representation")] public Ref<RenderEffectResource> CircleRenderEffectsResource;
        [RTTI.Member(3, 0x40, "Representation")] public Ref<SoundResource> WhizzSound;
        [RTTI.Member(4, 0x48, "Representation")] public float TracerLength;
        [RTTI.Member(5, 0x4C, "Representation")] public float TracerWidth;
        [RTTI.Member(6, 0x50, "Representation")] public RGBAColor TracerColor;
        [RTTI.Member(7, 0x54, "Representation")] public int TracerInterval;
        [RTTI.Member(8, 0x58, "Representation")] public int TracerTrailInterval;
        [RTTI.Member(9, 0x5C, "Representation")] public bool RandomTracerInterval;
        [RTTI.Member(10, 0x60, "Representation")] public float TracerFadeInDistance;
        [RTTI.Member(11, 0x68, "Representation")] public Ref<ParticleSystemResource> TrailParticleSystemResource;
    }

    [RTTI.Serializable(0x27FC5146C5429497)]
    public class ButtonIcon
    {
        [RTTI.Member(0, 0x0)] public EIconType Button;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> Texture;
        [RTTI.Member(2, 0x10)] public Ref<UITexture> HoldTexture;
    }

    [RTTI.Serializable(0xEC43E326766CBBCF)]
    public class ButtonIconCollection : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<ButtonIcon> ButtonIcons;
    }

    [RTTI.Serializable(0x7281FF6551E84F47)]
    public class ButtonInputEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x6160725BC232E41A)]
    public class ButtonInputEventResource : PausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Array<EDeviceFunction> Buttons;
        [RTTI.Member(2, 0x50, "Logic")] public Ref<PlayerNotificationResource> Notification;
        [RTTI.Member(3, 0x58, "Logic")] public float AISuccessChance;
        [RTTI.Member(4, 0x5C, "Logic")] public bool FailOnWrongButtonPress;
        [RTTI.Member(5, 0x60, "Logic")] public String SucceededVariable;
        [RTTI.Member(6, 0x68, "Logic")] public String FailedVariable;
        [RTTI.Member(7, 0x70, "Logic")] public String ReplicationID;
    }

    [RTTI.Serializable(0x1DD373C61862B856)]
    public class ButtonPressureOverride
    {
        [RTTI.Member(0, 0x0)] public EButton Button;
        [RTTI.Member(1, 0x4)] public uint8 Pressure;
    }

    [RTTI.Serializable(0xF98869C1B88849E8)]
    public class BuyBackComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x23257D0D60E7FE46)]
    public class BuyBackComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<UUIDRef<EntityResource>> BlacklistedItems;
        [RTTI.Member(1, 0x38, "Logic")] public ELootItemRarity MinimalItemRarity;
        [RTTI.Member(2, 0x3C, "Logic")] public int MaxItemCount;
        [RTTI.Member(3, 0x40, "Logic")] public float PriceModifier;
    }

    [RTTI.Serializable(0x16F9F6994A8BDE54)]
    public class BuyBackItemRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public Ref<ItemRestoreState> Item;
        [RTTI.Member(1, 0x30, "StateSaving", true)] public int TotalSellPrice;
    }

    [RTTI.Serializable(0x527946DBCC42AAD7)]
    public class CEffectsSettings : ProjectSettings
    {
        [RTTI.Member(0, 0x28)] public Ref<ImpactEffectSystemSettings> ImpactEffectSystemSettings;
    }

    [RTTI.Serializable(0xB321730BFFB5DEF2)]
    public class CPUProfileWindowGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2E17A9CD85FAE366)]
    public class CSoundSettings : ProjectSettings
    {
        [RTTI.Member(0, 0x28)] public Ref<GraphProgramResource> GuDaProgram;
    }

    [RTTI.Serializable(0x84100B92F9A18B35)]
    public class CachedHelperLocationsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC75BF38144DCFF43)]
    public class Camera : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public String Name;
        [RTTI.Member(1, 0x68, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        [RTTI.Member(2, 0x70, "Input")] public bool UseMouse;
        [RTTI.Member(3, 0x71, "Input")] public bool UseJoystick;
        [RTTI.Member(4, 0x72, "Input")] public bool UseKeyboard;
        [RTTI.Member(5, 0x74, "Frustum")] public float NearPlane;
        [RTTI.Member(6, 0x78, "Frustum")] public float FarPlane;
        [RTTI.Member(7, 0x7C, "Frustum")] public float FieldOfView;
        [RTTI.Member(8, 0x80, "Frustum")] public float ViewConeAspect;
        [RTTI.Member(9, 0x84, "Frustum")] public bool Perspective;
        [RTTI.Member(10, 0x88, "Frustum")] public float Zoom;
        [RTTI.Member(11, 0x8C, "Frustum")] public bool FOVAspectAdjust;
    }

    [RTTI.Serializable(0x73C540B6861C9505)]
    public class CameraActorInstance : EntityActorInstanceBase
    {
    }

    [RTTI.Serializable(0x2F2E5F7E4D917DD6)]
    public class CameraActorResource : ActorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<CameraEntityResource> CameraEntityResource;
        [RTTI.Member(2, 0x48, "Logic")] public int InTransitionFrames;
        [RTTI.Member(3, 0x4C, "Logic")] public ECameraTransitionFunction InTransitionFunction;
        [RTTI.Member(4, 0x50, "Logic")] public int OutTransitionFrames;
        [RTTI.Member(5, 0x54, "Logic")] public ECameraTransitionFunction OutTransitionFunction;
        [RTTI.Member(6, 0x58, "Logic")] public float TransitionDistanceThreshold;
        [RTTI.Member(7, 0x5C, "Logic")] public float TransitionAngleThreshold;
        [RTTI.Member(8, 0x60, "Logic")] public Ref<CurveResource> TransitionAngleToFrames;
        [RTTI.Member(9, 0x68, "Logic")] public Ref<CurveResource> FOV;
        [RTTI.Member(10, 0x70, "DepthOfField")] public Ref<LocatorResource> FocalPlaneLocatorResource;
        [RTTI.Member(11, 0x78, "DepthOfField")] public Ref<CurveResource> NearFuzzy;
        [RTTI.Member(12, 0x80, "DepthOfField")] public Ref<CurveResource> NearSharp;
        [RTTI.Member(13, 0x88, "DepthOfField")] public Ref<CurveResource> FarFuzzy;
        [RTTI.Member(14, 0x90, "DepthOfField")] public Ref<CurveResource> FarSharp;
        [RTTI.Member(15, 0x98, "DepthOfField")] public Ref<CurveResource> MaxFuzzyNear;
        [RTTI.Member(16, 0xA0, "DepthOfField")] public Ref<CurveResource> MaxFuzzyFar;
        [RTTI.Member(17, 0xA8, "Logic")] public int ClipOffset;
        [RTTI.Member(18, 0xAC, "Logic")] public float ClipSpeed;
        [RTTI.Member(19, 0xB0, "Game")] public bool UseGameCamera;
        [RTTI.Member(20, 0xB1, "Game")] public bool UseViewMagnets;
        [RTTI.Member(21, 0xB4, "Game")] public float WaitToUnbind;
    }

    [RTTI.Serializable(0xDD6A6F250E40F826)]
    public class CameraActorSnapshot : ActorSnapshot
    {
    }

    [RTTI.Serializable(0x1FB637928F5A0FFC)]
    public class CameraBlend : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x68B298E1F0F857A8)]
    public class CameraBlendBySettings : CameraBlend
    {
    }

    [RTTI.Serializable(0xA83C97887CF22AEE)]
    public class CameraBlendBySettingsRep : CameraBlendRep
    {
    }

    [RTTI.Serializable(0xAC407A3411432286)]
    public class CameraBlendDirectControl : CameraBlend
    {
    }

    [RTTI.Serializable(0x369C4B19813ABE29)]
    public class CameraBlendDirectControlRep : CameraBlend
    {
    }

    [RTTI.Serializable(0xE7D2767DFC2697AF)]
    public class CameraBlendRep : RTTIObject
    {
    }

    [RTTI.Serializable(0x59CE72895A9D15C8)]
    public class CameraBlendSettings : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x9845759059C188AE)]
    public class CameraBlendSettingsCurve : CameraBlendSettings
    {
    }

    [RTTI.Serializable(0xE04DD1D3A5D29F9D)]
    public class CameraBlendSettingsDuration : CameraBlendSettings
    {
    }

    [RTTI.Serializable(0xEB516E21EB7202AD)]
    public class CameraBlendSettingsMorphemeDurationEvent : CameraBlendSettings
    {
    }

    [RTTI.Serializable(0x6A73DB2DCC9558F)]
    public class CameraBlendSettingsMorphemeDurationEventRep : CameraBlendSettings
    {
    }

    [RTTI.Serializable(0x8465B788FB6D116B)]
    public class CameraCollision : CoreObject
    {
    }

    [RTTI.Serializable(0x25B002BC25C9E204)]
    public class CameraCollisionRail
    {
    }

    [RTTI.Serializable(0xCD0B4ECE48E28AAE)]
    public class CameraCollisionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Base")] public Ref<CameraCollisionResource> BaseCameraCollisionResource;
    }

    [RTTI.Serializable(0x9725CFD25F656ACA)]
    public class CameraDoFProperties : CameraPropertiesBase
    {
        [RTTI.Member(0, 0x20, "DepthOfField")] public float NearFuzzy;
        [RTTI.Member(1, 0x24, "DepthOfField")] public float NearSharp;
        [RTTI.Member(2, 0x28, "DepthOfField")] public float FarFuzzy;
        [RTTI.Member(3, 0x2C, "DepthOfField")] public float FarSharp;
        [RTTI.Member(4, 0x30, "DepthOfField")] public float MaxFuzzyNear;
        [RTTI.Member(5, 0x34, "DepthOfField")] public float MaxFuzzyFar;
    }

    [RTTI.Serializable(0x5319D981BC30070D)]
    public class CameraEntity : Entity
    {
        [RTTI.Member(0, 0x344, "Representation")] public float FOV;
        [RTTI.Member(1, 0x370, "DepthOfField")] public float NearFuzzy;
        [RTTI.Member(2, 0x374, "DepthOfField")] public float NearSharp;
        [RTTI.Member(3, 0x378, "DepthOfField")] public float FarFuzzy;
        [RTTI.Member(4, 0x37C, "DepthOfField")] public float FarSharp;
        [RTTI.Member(5, 0x380, "DepthOfField")] public float MaxFuzzyNear;
        [RTTI.Member(6, 0x384, "DepthOfField")] public float MaxFuzzyFar;
        [RTTI.Member(7, 0x3B4, "Representation")] public float NearPlane;
        [RTTI.Member(8, 0x3B8, "Representation")] public float FarPlane;
        [RTTI.Member(9, 0x3BC, "Representation")] public float StereoDepth;
    }

    [RTTI.Serializable(0x8C513F64C75FA9E8)]
    public class CameraEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0xAD0D052D5D73460E)]
    public class CameraEntityResource : EntityResource
    {
        [RTTI.Member(0, 0x150, "Logic")] public float CameraShakeMultiplier;
        [RTTI.Member(1, 0x154, "Representation")] public float FirstPersonNearPlane;
        [RTTI.Member(2, 0x158, "Representation")] public bool ShowFirstPersonModel;
        [RTTI.Member(3, 0x15C, "Representation")] public float NearPlane;
        [RTTI.Member(4, 0x160, "Representation")] public float FarPlane;
        [RTTI.Member(5, 0x164, "Representation")] public float StereoDepth;
        [RTTI.Member(6, 0x168, "Representation")] public EAAMode AAMode;
        [RTTI.Member(7, 0x16C, "Lighting")] public float FOV;
        [RTTI.Member(8, 0x190, "Logic")] public float Zoom;
        [RTTI.Member(9, 0x194, "Representation")] public float HorizontalFOV;
        [RTTI.Member(10, 0x198, "Representation")] public float HorizontalFirstPersonFOV;
        [RTTI.Member(11, 0x1C0, "DepthOfField")] public float NearFuzzy;
        [RTTI.Member(12, 0x1C4, "DepthOfField")] public float NearSharp;
        [RTTI.Member(13, 0x1C8, "DepthOfField")] public float FarFuzzy;
        [RTTI.Member(14, 0x1CC, "DepthOfField")] public float FarSharp;
        [RTTI.Member(15, 0x1D0, "DepthOfField")] public float MaxFuzzyNear;
        [RTTI.Member(16, 0x1D4, "DepthOfField")] public float MaxFuzzyFar;
    }

    [RTTI.Serializable(0x2244BFD103F6DD3)]
    public class CameraGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC510F0CCADF42303)]
    public class CameraHelpers : RTTIObject
    {
    }

    [RTTI.Serializable(0xFCADD46066EB49F)]
    public class CameraMagnet : CoreObject
    {
    }

    [RTTI.Serializable(0x16BB44CA1FEA93D4)]
    public class CameraMagnetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAFD506B6259ECF2)]
    public class CameraMagnetComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Default")] public Ref<CameraMagnetTagResource> Tag;
        [RTTI.Member(1, 0x30, "Default")] public float Weight;
        [RTTI.Member(2, 0x34, "Default")] public float Strength;
        [RTTI.Member(3, 0x38, "Position")] public String Helper;
        [RTTI.Member(4, 0x40, "Position")] public Vec3 Offset;
        [RTTI.Member(5, 0x50, "Springs")] public Ref<CurveResource> MagnetSpringX;
        [RTTI.Member(6, 0x58, "Springs")] public Ref<CurveResource> MagnetSpringY;
        [RTTI.Member(7, 0x60, "Springs")] public Ref<CurveResource> MagnetSpringZ;
        [RTTI.Member(8, 0x68, "Coop")] public bool CoopShared;
        [RTTI.Member(9, 0x69, "Events")] public bool RemoveOnDie;
        [RTTI.Member(10, 0x6C, "LookAt")] public MagnetLookAtSettings Settings;
    }

    [RTTI.Serializable(0x6B99C504C192EDB4)]
    public class CameraMagnetManager : CoreObject
    {
    }

    [RTTI.Serializable(0x9A8E521F45991CCA)]
    public class CameraMagnetManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Tags")] public Array<Ref<CameraMagnetTagResource>> CameraMagnetTagResources;
        [RTTI.Member(1, 0x38, "Pool")] public int MagnetPoolBase;
        [RTTI.Member(2, 0x3C, "Pool")] public int MagnetPoolMin;
        [RTTI.Member(3, 0x40, "Pool")] public int MagnetPoolMax;
    }

    [RTTI.Serializable(0x9247AF6834B5F11)]
    public class CameraMagnetParmResource : Resource
    {
        [RTTI.Member(0, 0x28, "Base")] public Ref<CameraMagnetParmResource> BaseCameraMagnetParmResource;
        [RTTI.Member(1, 0x30, "Base")] public Ref<CameraMagnetTagResource> Tag;
        [RTTI.Member(2, 0x38, "Weight")] public CameraParmFloat Weight;
        [RTTI.Member(3, 0x50, "Strength")] public CameraParmFloat Strength;
        [RTTI.Member(4, 0x68, "Weight")] public Ref<CurveResource> ViewRangeToWeight;
        [RTTI.Member(5, 0x70, "Weight")] public Ref<CurveResource> ViewAngleToWeight;
        [RTTI.Member(6, 0x78, "Weight")] public Ref<CurveResource> ViewHeadingToWeight;
        [RTTI.Member(7, 0x80, "Weight")] public Ref<CurveResource> ViewPitchToWeight;
        [RTTI.Member(8, 0x88, "Weight")] public Ref<CurveResource> OriginRangeToWeight;
        [RTTI.Member(9, 0x90, "Weight")] public Ref<CurveResource> OriginAngleToWeight;
        [RTTI.Member(10, 0x98, "Weight")] public Ref<CurveResource> OriginHeadingToWeight;
        [RTTI.Member(11, 0xA0, "Weight")] public Ref<CurveResource> OriginPitchToWeight;
        [RTTI.Member(12, 0xA8, "Strength")] public Ref<CurveResource> ViewRangeToStrength;
        [RTTI.Member(13, 0xB0, "Strength")] public Ref<CurveResource> ViewAngleToStrength;
        [RTTI.Member(14, 0xB8, "Strength")] public Ref<CurveResource> ViewHeadingToStrength;
        [RTTI.Member(15, 0xC0, "Strength")] public Ref<CurveResource> ViewPitchToStrength;
        [RTTI.Member(16, 0xC8, "Strength")] public Ref<CurveResource> OriginRangeToStrength;
        [RTTI.Member(17, 0xD0, "Strength")] public Ref<CurveResource> OriginAngleToStrength;
        [RTTI.Member(18, 0xD8, "Strength")] public Ref<CurveResource> OriginHeadingToStrength;
        [RTTI.Member(19, 0xE0, "Strength")] public Ref<CurveResource> OriginPitchToStrength;
    }

    [RTTI.Serializable(0xE4E3A21BFE1E143F)]
    public class CameraMagnetResult
    {
    }

    [RTTI.Serializable(0xC32AB6C4047E82BF)]
    public class CameraMagnetTagResource : Resource
    {
    }

    [RTTI.Serializable(0xD85FD758871F9804)]
    public class CameraManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x60C0A42F46023EE4)]
    public class CameraMiscProperties : CameraPropertiesBase
    {
        [RTTI.Member(0, 0x20, "Logic")] public float CameraShakeMultiplier;
        [RTTI.Member(1, 0x24, "Representation")] public float FirstPersonNearPlane;
        [RTTI.Member(2, 0x28, "Representation")] public bool ShowFirstPersonModel;
        [RTTI.Member(3, 0x2C, "Representation")] public float NearPlane;
        [RTTI.Member(4, 0x30, "Representation")] public float FarPlane;
        [RTTI.Member(5, 0x34, "Representation")] public float StereoDepth;
        [RTTI.Member(6, 0x38, "Representation")] public EAAMode AAMode;
        [RTTI.Member(7, 0x3C, "Lighting")] public float LightingFOV;
    }

    [RTTI.Serializable(0xA49902482E4E0FE)]
    public class CameraMode : CoreObject
    {
    }

    [RTTI.Serializable(0x923AB9A3F030680D)]
    public class CameraModeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Base")] public Ref<CameraModeResource> BaseCameraModeResource;
        [RTTI.Member(1, 0x30, "Collision")] public Ref<CameraCollisionResource> CameraCollisionResource;
        [RTTI.Member(2, 0x38, "LookMagnets")] public CameraParmMagnetParms LookMagnetParms;
        [RTTI.Member(3, 0x58, "LookMagnets")] public Ref<CurveResource> LookSpringHeading;
        [RTTI.Member(4, 0x60, "LookMagnets")] public Ref<CurveResource> LookSpringPitch;
        [RTTI.Member(5, 0x68, "LookMagnets")] public Ref<CurveResource> FocusHeadingSpeedToLookScaler;
        [RTTI.Member(6, 0x70, "LookMagnets")] public Ref<CurveResource> FocusPitchSpeedToLookScaler;
        [RTTI.Member(7, 0x78, "LookMagnets")] public Ref<CurveResource> ViewHeadingSpeedToLookScaler;
        [RTTI.Member(8, 0x80, "LookMagnets")] public Ref<CurveResource> ViewPitchSpeedToLookScaler;
        [RTTI.Member(9, 0x88, "FrameMagnets")] public CameraParmMagnetParms FrameMagnetParms;
        [RTTI.Member(10, 0xA8, "FrameMagnets")] public Ref<CurveResource> FrameSpringHeading;
        [RTTI.Member(11, 0xB0, "FrameMagnets")] public Ref<CurveResource> FrameSpringPitch;
        [RTTI.Member(12, 0xB8, "FrameMagnets")] public Ref<CurveResource> FocusHeadingSpeedToFrameScaler;
        [RTTI.Member(13, 0xC0, "FrameMagnets")] public Ref<CurveResource> FocusPitchSpeedToFrameScaler;
        [RTTI.Member(14, 0xC8, "FrameMagnets")] public Ref<CurveResource> ViewHeadingSpeedToFrameScaler;
        [RTTI.Member(15, 0xD0, "FrameMagnets")] public Ref<CurveResource> ViewPitchSpeedToFrameScaler;
        [RTTI.Member(16, 0xD8, "Magnets")] public Ref<CurveResource> MagnetResetSpringHeading;
        [RTTI.Member(17, 0xE0, "Magnets")] public Ref<CurveResource> MagnetResetSpringPitch;
        [RTTI.Member(18, 0xE8, "Magnets")] public Ref<CurveResource> FocusHeadingSpeedToMagnetResetScaler;
        [RTTI.Member(19, 0xF0, "Magnets")] public Ref<CurveResource> FocusPitchSpeedToMagnetResetScaler;
        [RTTI.Member(20, 0xF8, "Magnets")] public Ref<CurveResource> ViewHeadingSpeedToMagnetResetScaler;
        [RTTI.Member(21, 0x100, "Magnets")] public Ref<CurveResource> ViewPitchSpeedToMagnetResetScaler;
        [RTTI.Member(22, 0x108, "Magnets")] public Ref<CurveResource> ViewHeadingToMagnetHeadingMin;
        [RTTI.Member(23, 0x110, "Magnets")] public Ref<CurveResource> ViewHeadingToMagnetHeadingMax;
        [RTTI.Member(24, 0x118, "Magnets")] public Ref<CurveResource> ViewPitchToMagnetPitchMin;
        [RTTI.Member(25, 0x120, "Magnets")] public Ref<CurveResource> ViewPitchToMagnetPitchMax;
        [RTTI.Member(26, 0x128, "Aiming")] public CameraParmBool IsAiming;
        [RTTI.Member(27, 0x140, "HardAimMagnets")] public CameraParmMagnetParms HardAimMagnetParms;
        [RTTI.Member(28, 0x160, "HardAimMagnets")] public Ref<CurveResource> HardAimSpringHeading;
        [RTTI.Member(29, 0x168, "HardAimMagnets")] public Ref<CurveResource> HardAimSpringPitch;
        [RTTI.Member(30, 0x170, "HardAimMagnets")] public Ref<CurveResource> FocusHeadingSpeedToHardAimScaler;
        [RTTI.Member(31, 0x178, "HardAimMagnets")] public Ref<CurveResource> FocusPitchSpeedToHardAimScaler;
        [RTTI.Member(32, 0x180, "HardAimMagnets")] public Ref<CurveResource> ViewHeadingSpeedToHardAimScaler;
        [RTTI.Member(33, 0x188, "HardAimMagnets")] public Ref<CurveResource> ViewPitchSpeedToHardAimScaler;
        [RTTI.Member(34, 0x190, "Attachment")] public CameraParmFloat BaseSmoothing;
        [RTTI.Member(35, 0x1A8, "Attachment")] public CameraParmBool RotateWithBase;
        [RTTI.Member(36, 0x1C0, "EntityLookAt")] public CameraParmMagnetParms EntityLookAtMagnetParms;
    }

    [RTTI.Serializable(0xCF3E10C5ECD0C19F)]
    public class CameraModeScalers : CameraScalers
    {
        [RTTI.Member(0, 0x18)] public Array<Ref<CameraModeResource>> CameraModeResources;
    }

    [RTTI.Serializable(0xE694E21530AAA8FD)]
    public class CameraModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x18417AF9D5C52B71)]
    public class CameraModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CameraModifierResource> CameraModifierResource;
    }

    [RTTI.Serializable(0xAAD4389E5E93BE45)]
    public class CameraModifierResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float CameraModifierLifeTime;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<SelectResource> CameraModeSelector;
        [RTTI.Member(2, 0x38, "Scalers")] public CameraScalers CameraScalers;
        [RTTI.Member(3, 0x50, "Scalers")] public Array<CameraModeScalers> CameraModeScalers;
    }

    [RTTI.Serializable(0xFB10BEF7193E0B8A)]
    public class CameraOrbitFollow : CameraMode
    {
    }

    [RTTI.Serializable(0x20D1DACB4D7E8572)]
    public class CameraOrbitFollowResource : CameraModeResource
    {
        [RTTI.Member(0, 0x1E0, "Origin")] public CameraParmVec3 OriginPosOffset;
        [RTTI.Member(1, 0x200, "Origin")] public CameraParmVec3 OriginRotAxes;
        [RTTI.Member(2, 0x220, "Origin")] public CameraParmString OriginHelperName;
        [RTTI.Member(3, 0x238, "Origin")] public CameraParmBool OriginHelperOnPlayer;
        [RTTI.Member(4, 0x250, "Origin")] public CameraParmVec3 OriginHelperPosAxes;
        [RTTI.Member(5, 0x270, "Origin")] public CameraParmVec3 OriginHelperRotAxes;
        [RTTI.Member(6, 0x290, "Origin")] public CameraParmBool KeepOriginAboveWater;
        [RTTI.Member(7, 0x2A8, "Origin")] public CameraParmBool OrientOriginToDestination;
        [RTTI.Member(8, 0x2C0, "Default")] public CameraParmFloat DefaultFocusHeight;
        [RTTI.Member(9, 0x2D8, "Default")] public CameraParmFloat DefaultFocusRange;
        [RTTI.Member(10, 0x2F0, "Default")] public CameraParmFloat DefaultFocusOrbit;
        [RTTI.Member(11, 0x308, "Default")] public CameraParmFloat DefaultViewOrbit;
        [RTTI.Member(12, 0x320, "Default")] public CameraParmFloat DefaultViewPitch;
        [RTTI.Member(13, 0x338, "Default")] public Ref<CurveResource> DefaultSpringFocusHeight;
        [RTTI.Member(14, 0x340, "Default")] public Ref<CurveResource> DefaultSpringFocusRange;
        [RTTI.Member(15, 0x348, "Default")] public Ref<CurveResource> DefaultSpringFocusOrbit;
        [RTTI.Member(16, 0x350, "Default")] public Ref<CurveResource> DefaultSpringViewOrbit;
        [RTTI.Member(17, 0x358, "Default")] public Ref<CurveResource> DefaultSpringViewPitch;
        [RTTI.Member(18, 0x360, "Default")] public Ref<CurveResource> DefaultSpringViewRoll;
        [RTTI.Member(19, 0x368, "Focus")] public Ref<CurveResource> FocusSpringX;
        [RTTI.Member(20, 0x370, "Focus")] public Ref<CurveResource> FocusSpringY;
        [RTTI.Member(21, 0x378, "Focus")] public Ref<CurveResource> FocusSpringZ;
        [RTTI.Member(22, 0x380, "Focus")] public Ref<CurveResource> FocusSpringOrbit;
        [RTTI.Member(23, 0x390, "Focus")] public CameraParmVec3 FocusRangeMax;
        [RTTI.Member(24, 0x3B0, "Focus")] public CameraParmVec3 FocusRangeMin;
        [RTTI.Member(25, 0x3D0, "Input")] public Ref<CurveResource> InputToOrbit;
        [RTTI.Member(26, 0x3D8, "Input")] public CameraParmFloat InputAccelOrbitMax;
        [RTTI.Member(27, 0x3F0, "Input")] public CameraParmFloat InputAccelPitchMax;
        [RTTI.Member(28, 0x408, "Follow")] public CameraParmBool BreakFollowOnInput;
        [RTTI.Member(29, 0x420, "Follow")] public CameraParmFloat FollowDelay;
        [RTTI.Member(30, 0x438, "Follow")] public CameraParmFloat FollowDistance;
        [RTTI.Member(31, 0x450, "Follow")] public CameraParmBool FollowTargetRotation;
        [RTTI.Member(32, 0x468, "Follow")] public CameraParmFloat FollowOrbitBuffer;
        [RTTI.Member(33, 0x480, "Follow")] public Ref<CurveResource> FollowSpringOrbit;
        [RTTI.Member(34, 0x488, "Follow")] public Ref<CurveResource> FollowSpringPitch;
        [RTTI.Member(35, 0x490, "Follow")] public Ref<CurveResource> FollowSpeedToOrbitScalar;
        [RTTI.Member(36, 0x498, "Follow")] public Ref<CurveResource> FollowSpeedToPitchScalar;
        [RTTI.Member(37, 0x4A0, "Follow")] public CameraParmFloat FollowAccelOrbitMax;
        [RTTI.Member(38, 0x4B8, "Follow")] public CameraParmFloat FollowAccelPitchMax;
        [RTTI.Member(39, 0x4D0, "FOV")] public Ref<ResourceSelectorBase> FOVSelector;
    }

    [RTTI.Serializable(0x5443D62A7569AB7D)]
    public class CameraOrbitHull : CameraCollision
    {
    }

    [RTTI.Serializable(0xD3B27ECA5CF86A09)]
    public class CameraOrbitHullResource : CameraCollisionResource
    {
        [RTTI.Member(0, 0x30, "View")] public CameraParmFloat ViewPitchMin;
        [RTTI.Member(1, 0x48, "View")] public CameraParmFloat ViewPitchMax;
        [RTTI.Member(2, 0x60, "View")] public CameraParmFloat ViewRangeScalerMax;
        [RTTI.Member(3, 0x78, "View")] public Ref<CurveResource> ViewHeadingToRangeMax;
        [RTTI.Member(4, 0x80, "View")] public Ref<CurveResource> ViewPitchToRangeMax;
        [RTTI.Member(5, 0x88, "Collision")] public CameraParmCollisionLayer ViewObstructionLayer;
        [RTTI.Member(6, 0xA0, "Collision")] public CameraParmCollisionLayer ViewCollisionLayer;
        [RTTI.Member(7, 0xB8, "Rotation")] public Ref<CurveResource> RotationSpringOrbit;
        [RTTI.Member(8, 0xC0, "FocusProbe")] public CameraParmFloat FocusProbeRadius;
        [RTTI.Member(9, 0xD8, "FocusProbe")] public Ref<CurveResource> FocusProbeSpring;
        [RTTI.Member(10, 0xE0, "FocusProbe")] public Ref<CurveResource> FocusProbeOffsetToRangeScaler;
        [RTTI.Member(11, 0xE8, "ViewProbe")] public CameraParmFloat ViewProbeWidth;
        [RTTI.Member(12, 0x100, "RangeProbes")] public CameraParmFloat RangeProbeRadius;
        [RTTI.Member(13, 0x118, "RangeProbes")] public CameraParmInt RangeProbeHeadingSegments;
        [RTTI.Member(14, 0x130, "RangeProbes")] public CameraParmInt RangeProbePitchSegments;
        [RTTI.Member(15, 0x148, "RangeProbes")] public Ref<CurveResource> RangeProbeSpringPitch;
        [RTTI.Member(16, 0x150, "RangeProbes")] public Ref<CurveResource> RangeProbeSpringRange;
        [RTTI.Member(17, 0x158, "RangeProbes")] public Ref<CurveResource> RangeProbeSpringCollision;
        [RTTI.Member(18, 0x160, "SurfaceProbe")] public Ref<CurveResource> SurfaceProbeSpring;
        [RTTI.Member(19, 0x168, "AutoZoom")] public CameraParmFloat AutoZoomRadius;
        [RTTI.Member(20, 0x180, "AutoZoom")] public CameraParmVec3 AutoZoomOffset;
        [RTTI.Member(21, 0x1A0, "AutoZoom")] public Ref<CurveResource> AutoZoomRangeToScaler;
    }

    [RTTI.Serializable(0x9FD4142C21365BE4)]
    public class CameraParm
    {
        [RTTI.Member(0, 0x8)] public bool Override;
    }

    [RTTI.Serializable(0xF589B3CA07604B74)]
    public class CameraParmBool : CameraParm
    {
        [RTTI.Member(0, 0x10)] public bool Val;
    }

    [RTTI.Serializable(0xE198C756A7BE1E0D)]
    public class CameraParmCollisionLayer : CameraParm
    {
        [RTTI.Member(0, 0x10)] public EPhysicsCollisionLayerGame Val;
    }

    [RTTI.Serializable(0xDBA01396DD90C8DD)]
    public class CameraParmCurve : CameraParm
    {
        [RTTI.Member(0, 0x10)] public Ref<CurveResource> Val;
    }

    [RTTI.Serializable(0xF155163BFB210316)]
    public class CameraParmFloat : CameraParm
    {
        [RTTI.Member(0, 0x10)] public float Val;
    }

    [RTTI.Serializable(0x369316F4B6BC9992)]
    public class CameraParmInt : CameraParm
    {
        [RTTI.Member(0, 0x10)] public int Val;
    }

    [RTTI.Serializable(0x58CE091016C1360C)]
    public class CameraParmMagnetParms : CameraParm
    {
        [RTTI.Member(0, 0x10)] public Array<Ref<CameraMagnetParmResource>> Val;
    }

    [RTTI.Serializable(0xC0090F8B7A2E16B8)]
    public class CameraParmString : CameraParm
    {
        [RTTI.Member(0, 0x10)] public String Val;
    }

    [RTTI.Serializable(0xB955462C8B1B8A19)]
    public class CameraParmVec3 : CameraParm
    {
        [RTTI.Member(0, 0x10)] public Vec3 Val;
    }

    [RTTI.Serializable(0x980057ABB06796FD)]
    public class CameraPredictionManager : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xE1E15D661B0594BB)]
    public class CameraPropertiesBase : CoreObject
    {
    }

    [RTTI.Serializable(0x96CCBB83967BF91F)]
    public class CameraPropertiesSet : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xCB9F181672226166)]
    public class CameraPropertiesSetResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<CameraPropertiesBase>> Properties;
    }

    [RTTI.Serializable(0xA4EA0FF814FBA9EE)]
    public class CameraScalers
    {
        [RTTI.Member(0, 0x0)] public float OriginOffsetScaler;
        [RTTI.Member(1, 0x4)] public float OriginOffsetMin;
        [RTTI.Member(2, 0x8)] public float OriginOffsetMax;
        [RTTI.Member(3, 0xC)] public float FocusRangeScaler;
        [RTTI.Member(4, 0x10)] public float ViewRangeScaler;
    }

    [RTTI.Serializable(0x7BB0EFD52E25DA5A)]
    public class CameraSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public float FNumber;
        [RTTI.Member(1, 0x4, "Settings")] public float ShutterSpeed;
        [RTTI.Member(2, 0x8, "Settings")] public float ManualFocusDistance;
        [RTTI.Member(3, 0xC, "Settings")] public float FrameWidth;
    }

    [RTTI.Serializable(0x1E653DD58CCEDA8)]
    public class CameraSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public CameraSettings CameraSettings;
    }

    [RTTI.Serializable(0x1981AB1E7DF88290)]
    public class CameraShakeEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x624D0C1C20DFE15D)]
    public class CameraShakeEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<ShakeResource> ShakeResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0x2C1757E4019487C4)]
    public class CameraState : ViewFrustumInfo
    {
        [RTTI.Member(0, 0x60, "Frustum")] public Frustum BaseFrustum;
        [RTTI.Member(1, 0xD0, "Matrices")] public WorldTransform WorldToCamera;
        [RTTI.Member(2, 0x110, "Matrices")] public Mat44 CameraToProjected;
        [RTTI.Member(3, 0x150, "Matrices")] public Mat44 ProjectedToCamera;
        [RTTI.Member(4, 0x190, "Matrices")] public Mat44 WorldToProjected;
    }

    [RTTI.Serializable(0x6A33CDC7490AF210)]
    public class CameraVisibilityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9348DF23DA578711)]
    public class CameraVisibilityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<ResourceSelectorBase> CylinderSelector;
    }

    [RTTI.Serializable(0x30D0B276F9C94B4)]
    public class CameraVisibilityCylinderResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Height;
        [RTTI.Member(1, 0x2C, "Logic")] public float Radius;
    }

    [RTTI.Serializable(0x815DE4AC7BA4815C)]
    public class CameraZoomProperties : CameraPropertiesBase
    {
        [RTTI.Member(0, 0x20, "Logic")] public float Zoom;
        [RTTI.Member(1, 0x24, "Representation")] public float FOV;
        [RTTI.Member(2, 0x28, "Representation")] public float FirstPersonFOV;
    }

    [RTTI.Serializable(0xC612BB3CC01B11CF)]
    public class CancelDelayedActionAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<DelayedAction> Action;
    }

    [RTTI.Serializable(0xBA8F130D56FFF3D2)]
    public class Capsule
    {
        [RTTI.Member(0, 0x0)] public Vec3 From;
        [RTTI.Member(1, 0x10)] public Vec3 To;
        [RTTI.Member(2, 0x20)] public float Radius;
    }

    [RTTI.Serializable(0xF86FEFEE08C8185E)]
    public class CapsuleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF9A0E25CB90F557F)]
    public class CapsuleHull
    {
        [RTTI.Member(0, 0x0)] public Array<Capsule> Capsules;
    }

    [RTTI.Serializable(0x1C829761FA2CE00B)]
    public class CaptureAndHoldArea : SpawnArea
    {
    }

    [RTTI.Serializable(0xDC68936AA6E23DA2)]
    public class CaptureAndHoldAreaFactionSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CPtr<AIFaction> Faction;
        [RTTI.Member(1, 0x30, "Logic")] public int CapturePlayerCap;
        [RTTI.Member(2, 0x34, "Logic")] public int RecapturePlayerCap;
        [RTTI.Member(3, 0x38, "Logic")] public bool AllowBlockProgress;
        [RTTI.Member(4, 0x40, "Representation")] public String CaptureAnimationName;
    }

    [RTTI.Serializable(0x64F309D3F86A6787)]
    public class CaptureAndHoldAreaRep : EntityRep
    {
    }

    [RTTI.Serializable(0xBC479D4872177FEF)]
    public class CaptureAndHoldAreaResource : SpawnAreaResource
    {
        [RTTI.Member(0, 0x228, "Logic")] public Array<Ref<CaptureAndHoldAreaFactionSettings>> FactionSettings;
        [RTTI.Member(1, 0x238, "Logic")] public int PointsPerTick;
        [RTTI.Member(2, 0x23C, "Logic")] public float TickLength;
        [RTTI.Member(3, 0x240, "Logic")] public float CaptureDistance;
        [RTTI.Member(4, 0x248, "Representation")] public String PercentageUpVariableName;
        [RTTI.Member(5, 0x250, "Representation")] public String DefendLocalizerTag;
        [RTTI.Member(6, 0x258, "Representation")] public String NeutralizeLocalizerTag;
        [RTTI.Member(7, 0x260, "Representation")] public String CaptureLocalizerTag;
        [RTTI.Member(8, 0x268, "Lights")] public RGBAColor FriendlyColor;
        [RTTI.Member(9, 0x26C, "Lights")] public RGBAColor EnemyColor;
        [RTTI.Member(10, 0x270, "Lights")] public Array<Ref<LightResource>> LightResources;
        [RTTI.Member(11, 0x280, "Lights")] public Array<Mat44> LocalMatrices;
        [RTTI.Member(12, 0x290, "Representation")] public Ref<SoundResource> TuningSound;
    }

    [RTTI.Serializable(0xFE5E66ECB11EBDEB)]
    public class CaptureSpeedModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9524664857499955)]
    public class CaptureSpeedModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Modifier;
    }

    [RTTI.Serializable(0xFF13CEC40971C404)]
    public class Career : Resource
    {
        [RTTI.Member(0, 0x28)] public ECareer ID;
        [RTTI.Member(1, 0x30)] public Array<Ref<CareerUnlockResource>> PrimaryAbilities;
        [RTTI.Member(2, 0x40)] public Array<Ref<CareerUnlockResource>> SecondaryAbilities;
        [RTTI.Member(3, 0x50)] public Array<Ref<CareerUnlockResource>> TertiaryAbilities;
        [RTTI.Member(4, 0x60)] public Array<Ref<InventoryUnlockResource>> DefaultAbilities;
        [RTTI.Member(5, 0x70)] public Array<Ref<CareerUnlockResource>> BotPrimaryAbilities;
        [RTTI.Member(6, 0x80)] public Array<Ref<CareerUnlockResource>> BotSecondaryAbilities;
        [RTTI.Member(7, 0x90)] public Array<Ref<WeaponUnlockResource>> PrimaryWeapons;
        [RTTI.Member(8, 0xA0)] public Array<Ref<WeaponUnlockResource>> SecondaryWeapons;
        [RTTI.Member(9, 0xB0)] public Array<Ref<WeaponUnlockResource>> AuxiliaryWeapons;
        [RTTI.Member(10, 0xC0)] public Ref<WeaponUnlockResource> FallbackWeapon;
        [RTTI.Member(11, 0xC8)] public String CharacterModel;
        [RTTI.Member(12, 0xD0)] public Ref<ChallengeGroupResource> ChallengeGroup;
        [RTTI.Member(13, 0xD8)] public Array<Ref<CareerLoadout>> DefaultLoadouts;
    }

    [RTTI.Serializable(0x2E212152379E91D9)]
    public class CareerLoadout : Resource
    {
        [RTTI.Member(0, 0x28)] public String LocalizerNameKey;
        [RTTI.Member(1, 0x30)] public Ref<WeaponUnlockResource> PrimaryWeapon;
        [RTTI.Member(2, 0x38)] public Ref<WeaponUnlockResource> SecondaryWeapon;
        [RTTI.Member(3, 0x40)] public Ref<WeaponUnlockResource> AuxiliaryWeapon;
        [RTTI.Member(4, 0x48)] public Ref<CareerUnlockResource> PrimaryAbility;
        [RTTI.Member(5, 0x50)] public Ref<CareerUnlockResource> SecondaryAbility;
    }

    [RTTI.Serializable(0x712CD0FCAC7DFFB1)]
    public class CareerUnlockResource : Resource
    {
        [RTTI.Member(0, 0x30)] public String Description;
        [RTTI.Member(1, 0x38)] public bool DefaultUnlock;
        [RTTI.Member(2, 0x40)] public Ref<Texture> IconTexture;
        [RTTI.Member(3, 0x48)] public Ref<ChallengeGroupResource> ChallengeGroup;
    }

    [RTTI.Serializable(0x70A9D830106A9277)]
    public class CareerUnlockSystem : RTTIObject
    {
    }

    [RTTI.Serializable(0x9F1583D8A5ABF02A)]
    public class CareerUnlockSystemResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<Career>> Careers;
        [RTTI.Member(1, 0xA0)] public Ref<PlayerCardResource> PlayerCard;
    }

    [RTTI.Serializable(0x26D0086BD6CECDFA)]
    public class CarryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDBCAE204F8C5890C)]
    public class CarryComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int InventoryID;
    }

    [RTTI.Serializable(0xC08AE0FA48490DC0)]
    public class CenterLocationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x84F36D368F91C246)]
    public class CenterLocationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String HelperName;
        [RTTI.Member(1, 0x30, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xEB7D2566CF4CF10E)]
    public class Chaff : Throwable
    {
    }

    [RTTI.Serializable(0x799CCAE162C944C1)]
    public class ChaffComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x16FDBD34C8AD6F0F)]
    public class ChaffComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float OvershootExplodeRange;
    }

    [RTTI.Serializable(0xD35CEFBB63D201CB)]
    public class ChaffRep : ThrowableRep
    {
    }

    [RTTI.Serializable(0x5474CD663C06B739)]
    public class ChaffResource : ThrowableResource
    {
        [RTTI.Member(0, 0x210, "Logic")] public Ref<DamageAreaResource> DamageAreaResource;
    }

    [RTTI.Serializable(0xEC89E4660A4B490F)]
    public class Challenge : RTTIObject
    {
    }

    [RTTI.Serializable(0x95754ADD16DD0F30)]
    public class ChallengeAchievement : ChallengeCounted
    {
    }

    [RTTI.Serializable(0xEF1EDBB4A3B698F3)]
    public class ChallengeAchievementResource : ChallengeCountedResource
    {
        [RTTI.Member(0, 0x88, "Conditions")] public String AchievementName;
    }

    [RTTI.Serializable(0x6769ACCA183B0EFB)]
    public class ChallengeCounted : Challenge
    {
    }

    [RTTI.Serializable(0x8778A2146B9C6964)]
    public class ChallengeCountedResource : ChallengeResource
    {
        [RTTI.Member(0, 0x58, "Logic")] public String ChallengeID;
        [RTTI.Member(1, 0x60, "Logic")] public int Requirement;
        [RTTI.Member(2, 0x64, "Conditions")] public int TimesInASingleRound;
        [RTTI.Member(3, 0x68, "Conditions")] public bool GGPlaylistOnly;
        [RTTI.Member(4, 0x70, "Conditions")] public String LevelID;
        [RTTI.Member(5, 0x78, "Conditions")] public ECareer Career;
        [RTTI.Member(6, 0x80, "Menu")] public String Units;
    }

    [RTTI.Serializable(0x494D0A1EB1E7206A)]
    public class ChallengeGroup : Challenge
    {
    }

    [RTTI.Serializable(0x873414B42FB5354)]
    public class ChallengeGroupResource : ChallengeResource
    {
        [RTTI.Member(0, 0x58, "Logic")] public Array<Ref<ChallengeResource>> Challenges;
        [RTTI.Member(1, 0x68, "Menu")] public bool DisplayPostGame;
    }

    [RTTI.Serializable(0x12B04663AA0A6E58)]
    public class ChallengeKill : ChallengeCounted
    {
    }

    [RTTI.Serializable(0x32B16A4B0BE1AEE9)]
    public class ChallengeKillResource : ChallengeCountedResource
    {
        [RTTI.Member(0, 0x88, "Conditions")] public String StatsClass;
        [RTTI.Member(1, 0x90, "Conditions")] public Array<String> StatsClassPatternTags;
        [RTTI.Member(2, 0xA0, "Conditions")] public Array<EPlayerKilledDataBits> KillFlags;
    }

    [RTTI.Serializable(0x497E1DA3B2B9A4E2)]
    public class ChallengeManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<ChallengeResource>> Challenges;
        [RTTI.Member(1, 0x38, "General")] public Array<Ref<ChallengeGroupResource>> CategorizedChallenges;
        [RTTI.Member(2, 0x48, "General")] public Array<Ref<ChallengeGroupResource>> PlayerIconChallenges;
    }

    [RTTI.Serializable(0xD54705F1FB4326A0)]
    public class ChallengeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String ChallengeName;
        [RTTI.Member(1, 0x30, "Menu")] public String LocalizerTagDescription;
        [RTTI.Member(2, 0x38, "Logic")] public Array<Ref<CareerUnlockResource>> Unlocks;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<TrophyResource> Trophy;
        [RTTI.Member(4, 0x50, "Menu")] public Ref<Texture> IconTexture;
    }

    [RTTI.Serializable(0x75FDE1DED788CC98)]
    public class ChallengeStat : ChallengeCounted
    {
    }

    [RTTI.Serializable(0xBB31C0DDC620F6D3)]
    public class ChallengeStatResource : ChallengeCountedResource
    {
        [RTTI.Member(0, 0x88, "Conditions")] public EPlayerScoreStat Stat;
        [RTTI.Member(1, 0x8C, "Conditions")] public EPlayerScoreEntityStat EntityStat;
        [RTTI.Member(2, 0x90, "Conditions")] public String Type;
        [RTTI.Member(3, 0x98, "Conditions")] public Array<String> TypePatternTags;
    }

    [RTTI.Serializable(0x384AB6F85629BBCA)]
    public class ChallengesProfile : RTTIRefObject
    {
        [RTTI.Member(0, 0x28)] public HashMap<String_int> ChallengeProgressMap;
        [RTTI.Member(1, 0x38)] public HashMap<String_int> AchievementStatMap;
    }

    [RTTI.Serializable(0x531E56623A1C01F8)]
    public class ChangeInvulnerabilityEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3F2D5C7DFDDC7282)]
    public class ChangeInvulnerabilityEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool Invulnerable;
        [RTTI.Member(2, 0x41, "Logic")] public bool RestoreState;
    }

    [RTTI.Serializable(0x592FEAFA08E8A867)]
    public class ChangeJoystickInputLimitsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x70440E475302D29A)]
    public class ChangeJoystickInputLimitsEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<JoystickInputLocatorResource> JoystickInputLocatorResource;
        [RTTI.Member(1, 0x40, "Input")] public FRange HeadingLimits;
        [RTTI.Member(2, 0x48, "Input")] public FRange PitchLimits;
    }

    [RTTI.Serializable(0xED194C216B5D9637)]
    public class ChangeModelPartAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<ModelPartResource> OldModelPart;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<ModelPartResource> NewModelPart;
    }

    [RTTI.Serializable(0x96FD79F64D1DB0A4)]
    public class CharacterDescriptionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x36083A5413C37B27)]
    public class CharacterDescriptionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<CharacterTypeClass> CharacterTypeClass;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<UITexture> Icon;
    }

    [RTTI.Serializable(0x9AE67BC0DF6B94D2)]
    public class CharacterProgressionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3788E5D177B43B32)]
    public class CharacterProgressionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int InitialLevel;
        [RTTI.Member(1, 0x2C, "Logic")] public int InitialPerkPoints;
        [RTTI.Member(2, 0x30, "Logic")] public Ref<XpTable> XpTable;
        [RTTI.Member(3, 0x38, "Logic")] public Ref<PlayerNotificationResource> XpGainedNotification;
        [RTTI.Member(4, 0x50, "Logic")] public Array<Ref<PerkCategory>> PerkCategories;
        [RTTI.Member(5, 0x60, "Perks")] public Ref<TrophyResource> AllPerksAcquiredTrophy;
    }

    [RTTI.Serializable(0x4C4EFB2E3479D407)]
    public class CharacterProgressionSave : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "StateSave", true)] public int Xp;
        [RTTI.Member(1, 0x2C, "StateSave", true)] public int CurrentLevel;
        [RTTI.Member(2, 0x30, "StateSave", true)] public int AvailablePerkPoints;
        [RTTI.Member(3, 0x34, "StateSave", true)] public bool PerksUnlocked;
        [RTTI.Member(4, 0x38, "StateSave", true)] public Array<GGUUID> ChosenPerks;
        [RTTI.Member(5, 0x48, "StateSave", true)] public bool MaxXpPatched;
        [RTTI.Member(6, 0x4C, "StateSave", true)] public int GoldenXp;
    }

    [RTTI.Serializable(0x5241165A20CF2A75)]
    public class CharacterTypeClass : Resource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<AwarenessStateDisplaySettingsResource> AwarenessStateDisplaySettings;
        [RTTI.Member(1, 0x30, "Representation")] public Ref<UITexture> AwarenesMarkerIcon;
        [RTTI.Member(2, 0x38, "Representation")] public Ref<UITexture> UIFocusIcon;
    }

    [RTTI.Serializable(0xABF15720D9BA74AF)]
    public class CharacterUpgrade : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntityComponentResource>> Components;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<LocalizedTextResource> DisplayDescription;
        [RTTI.Member(4, 0x50, "Logic")] public CPtr<CharacterUpgradeSet> Set;
    }

    [RTTI.Serializable(0x6B0317ED49BB618)]
    public class CharacterUpgradeRecipe : CraftingRecipe
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<CharacterUpgrade> Upgrade;
    }

    [RTTI.Serializable(0xB30EB14177502798)]
    public class CharacterUpgradeSet : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<CharacterUpgrade>> Upgrades;
    }

    [RTTI.Serializable(0x290CC4F3642EB800)]
    public class ChargeAnimationReference : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ChargeDuration;
        [RTTI.Member(1, 0x2C, "Logic")] public float AnimatedChargeFraction;
    }

    [RTTI.Serializable(0xBE4C023677FD0BB7)]
    public class ChargedAmmoResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ChargeUpTime;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<EntityProjectileAmmoResource> ProjectileAmmo;
    }

    [RTTI.Serializable(0x9B7D8B85546CF1CD)]
    public class ChargedThresholdEntityAction
    {
        [RTTI.Member(0, 0x0, "Logic")] public float RequiredMagnitude;
        [RTTI.Member(1, 0x8, "Logic")] public CPtr<EntityAction> Value;
    }

    [RTTI.Serializable(0x113B054D8CF76A52)]
    public class ChargedThresholdFloat
    {
        [RTTI.Member(0, 0x0, "Logic")] public float RequiredMagnitude;
        [RTTI.Member(1, 0x4, "Logic")] public float Value;
    }

    [RTTI.Serializable(0xA29B4FFA8B0D082B)]
    public class ChargedThresholdInt
    {
        [RTTI.Member(0, 0x0, "Logic")] public float RequiredMagnitude;
        [RTTI.Member(1, 0x4, "Logic")] public int Value;
    }

    [RTTI.Serializable(0x8E14FC1C297C1A17)]
    public class ChargedValueCurve : ChargedValueFloat
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CurveResource> CurveResource;
    }

    [RTTI.Serializable(0x60D16FB5BE62E8EA)]
    public class ChargedValueEntityAction : Resource
    {
    }

    [RTTI.Serializable(0x581D0A8EF43E85D7)]
    public class ChargedValueFloat : Resource
    {
    }

    [RTTI.Serializable(0xFA75312912634AD1)]
    public class ChargedValueInt : Resource
    {
    }

    [RTTI.Serializable(0x5A97F6A25E0E4C65)]
    public class ChargedValueIntCurve : ChargedValueInt
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CurveResource> CurveResource;
    }

    [RTTI.Serializable(0x1A18BB8B73305CD0)]
    public class ChargedValueThresholdsEntityAction : ChargedValueEntityAction
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<ChargedThresholdEntityAction> Thresholds;
    }

    [RTTI.Serializable(0xF13A87E1A407D2E5)]
    public class ChargedValueThresholdsFloat : ChargedValueFloat
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<ChargedThresholdFloat> Thresholds;
    }

    [RTTI.Serializable(0x680D161D91ED3C6D)]
    public class ChargedValueThresholdsInt : ChargedValueInt
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<ChargedThresholdInt> Thresholds;
    }

    [RTTI.Serializable(0xD127084F76FEBD04)]
    public class CheckpointAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public ESaveGameType Type;
        [RTTI.Member(1, 0x31, "Logic")] public bool DisplayMessage;
    }

    [RTTI.Serializable(0x89A917E78323176A)]
    public class ChildEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x633E2764C6B231B9)]
    public class ChildEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<MoverResource> MoverResource;
        [RTTI.Member(2, 0x38, "Logic")] public String ChildName;
    }

    [RTTI.Serializable(0xA9A32EF9E4B053F7)]
    public class ChildEntityDescription
    {
        [RTTI.Member(0, 0x0)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x8)] public Ref<MoverResource> MoverResource;
        [RTTI.Member(2, 0x10)] public String Name;
    }

    [RTTI.Serializable(0x48747790C92947AB)]
    public class CinematicVehicleDeathAction : EntityAction
    {
    }

    [RTTI.Serializable(0xA1243FB67B964332)]
    public class ClanMatchReportKIN : ServerClanMatchReport
    {
        [RTTI.Member(0, 0x38)] public String PlaylistID;
        [RTTI.Member(1, 0x40)] public String GameID;
        [RTTI.Member(2, 0x48)] public String MapName;
        [RTTI.Member(3, 0x50)] public String ClanTagISA;
        [RTTI.Member(4, 0x58)] public String ClanTagHGH;
        [RTTI.Member(5, 0x60)] public String ClanNameISA;
        [RTTI.Member(6, 0x68)] public String ClanNameHGH;
        [RTTI.Member(7, 0x70)] public EClanMatchOutcome Outcome;
        [RTTI.Member(8, 0x78)] public Array<String> PlayersClanISA;
        [RTTI.Member(9, 0x88)] public Array<String> PlayersClanHGH;
        [RTTI.Member(10, 0x98)] public Array<Ref<ClanMissionReport>> PlayedMissions;
        [RTTI.Member(11, 0xA8)] public uint64 EndTime;
        [RTTI.Member(12, 0xB0)] public double PrevISAGLobalElo;
        [RTTI.Member(13, 0xB8)] public double NewISAGLobalElo;
        [RTTI.Member(14, 0xC0)] public double PrevISAPlaylistElo;
        [RTTI.Member(15, 0xC8)] public double NewISAPlaylistElo;
        [RTTI.Member(16, 0xD0)] public double PrevHGHGLobalElo;
        [RTTI.Member(17, 0xD8)] public double NewHGHGLobalElo;
        [RTTI.Member(18, 0xE0)] public double PrevHGHPlaylistElo;
        [RTTI.Member(19, 0xE8)] public double NewHGHPlaylistElo;
    }

    [RTTI.Serializable(0xD27FA2CC41A5E875)]
    public class ClanMatchReportRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ClanTag;
        [RTTI.Member(1, 0x28)] public String OpponentTag;
        [RTTI.Member(2, 0x30)] public int PageSize;
        [RTTI.Member(3, 0x38)] public uint64 StartTime;
        [RTTI.Member(4, 0x40)] public bool SortDescending;
    }

    [RTTI.Serializable(0xC99FCC1F783AAABC)]
    public class ClanMatchRequestKIN : MatchRequestKIN
    {
        [RTTI.Member(0, 0x68)] public String TargetClan;
    }

    [RTTI.Serializable(0x5817D45AA4E443DE)]
    public class ClanMissionReport : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public EMissionType MissionType;
        [RTTI.Member(1, 0x24)] public EClanMatchOutcome Result;
    }

    [RTTI.Serializable(0x3214C29FFD8ACFB5)]
    public class ClanPresence : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String OnlineID;
        [RTTI.Member(1, 0x28)] public String Presence;
        [RTTI.Member(2, 0x30)] public String PresenceData;
    }

    [RTTI.Serializable(0x1E560E9078D36C89)]
    public class ClanPresenceResult : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public bool IsPresenceSet;
        [RTTI.Member(1, 0x28)] public Array<Ref<ClanPresence>> PresenceList;
    }

    [RTTI.Serializable(0xB3DF9B7C698B2081)]
    public class ClanPresenceUpdateRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Presence;
        [RTTI.Member(1, 0x28)] public String PresenceData;
        [RTTI.Member(2, 0x30)] public bool ShouldReturnClanMemberPresence;
    }

    [RTTI.Serializable(0x3FA22BCCED0E5E61)]
    public class ClanService : RTTIObject
    {
    }

    [RTTI.Serializable(0xBC40A81D3639688B)]
    public class ClanUpdatedMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String MemberID;
        [RTTI.Member(1, 0x28)] public String ClanTag;
    }

    [RTTI.Serializable(0x1D866C741FFFFD7F)]
    public class ClapperBoardEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x166B5C9EAC3A2F18)]
    public class ClapperBoardEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public FRGBAColor Color;
        [RTTI.Member(1, 0x50, "Logic")] public FRGBAColor FontColor;
        [RTTI.Member(2, 0x60, "Logic")] public String Text;
    }

    [RTTI.Serializable(0x88972A3870D5E987)]
    public class ClearInstigatorFlagAction : EntityAction
    {
        [RTTI.Member(0, 0x30)] public Ref<InstigatorFlagResource> InstigatorFlagResource;
    }

    [RTTI.Serializable(0xA453E15339B915E5)]
    public class Client2ClientMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String SenderOnlineID;
        [RTTI.Member(1, 0x28)] public Ref<MessageData> MessageData;
    }

    [RTTI.Serializable(0xEC525A12F5DE35AB)]
    public class ClientConnectMessage : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x20B102859D6EA4A0)]
    public class ClientDisconnectMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Reason;
    }

    [RTTI.Serializable(0x1E97D9EC571D6AD7)]
    public class Climate : ClimateBase
    {
        [RTTI.Member(0, 0x30, "General")] public Array<Ref<ClimateWeatherState>> WeatherStates;
        [RTTI.Member(1, 0x40, "General")] public Ref<WorldDataType> WorldDataType;
    }

    [RTTI.Serializable(0x38B610271113C2F3)]
    public class ClimateBase : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Ref<AmbienceCycle> AmbienceCycle;
        [RTTI.Member(1, 0x28, "General")] public float NightTemperature;
        [RTTI.Member(2, 0x2C, "General")] public float DayTemperature;
    }

    [RTTI.Serializable(0xB81E2B8FA86BCBCD)]
    public class ClimateWeatherState : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Ref<WeatherSetup> WeatherSetup;
        [RTTI.Member(1, 0x28, "General")] public FRange DurationInMinutes;
        [RTTI.Member(2, 0x30, "General")] public float TransitionTime;
        [RTTI.Member(3, 0x34, "General")] public float Probability;
        [RTTI.Member(4, 0x38, "General")] public float TimeOfDayStart;
        [RTTI.Member(5, 0x3C, "General")] public float TimeOfDayEnd;
    }

    [RTTI.Serializable(0xFD870CBC73C1854)]
    public class CloudRenderSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public float Brightness;
        [RTTI.Member(1, 0x4, "Settings")] public float DirectLightBrightness;
        [RTTI.Member(2, 0x8, "Settings")] public float CirrusBrightness;
        [RTTI.Member(3, 0xC, "Settings")] public float SilverLiningSpread;
        [RTTI.Member(4, 0x10, "Settings")] public float SilverLiningIntensity;
        [RTTI.Member(5, 0x14, "Settings")] public float PrimaryScatteringPhase;
        [RTTI.Member(6, 0x18, "Settings")] public float ColorSaturation;
    }

    [RTTI.Serializable(0xE4BA7F673610E03D)]
    public class CloudRenderSettingsResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public CloudRenderSettings Settings;
    }

    [RTTI.Serializable(0x5A6BFABCB62E6970)]
    public class ClusterGrenade : Grenade
    {
    }

    [RTTI.Serializable(0x76F3D430BB8F4208)]
    public class ClusterGrenadeFragmentResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x30)] public Ref<RandomVectorResource> RandomPhysicsImpulse;
        [RTTI.Member(2, 0x40)] public Mat44 Offset;
        [RTTI.Member(3, 0x80)] public bool SpawnOffsetAlwaysUp;
    }

    [RTTI.Serializable(0x44DCE0450C92D32C)]
    public class ClusterGrenadeResource : GrenadeResource
    {
        [RTTI.Member(0, 0x230, "Logic")] public Array<Ref<ClusterGrenadeFragmentResource>> Fragments;
    }

    [RTTI.Serializable(0x4AFAD4269F0A24A5)]
    public class Collectable : CollectableEntryBase
    {
        [RTTI.Member(0, 0x98, "Logic")] public Ref<CollectableRegion> CollectableRegion;
        [RTTI.Member(1, 0xA0, "Logic")] public UUIDRef<WorldNode> LocationWorldNode;
        [RTTI.Member(2, 0xB0, "Logic")] public UUIDRef<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0x1FC18B9283C29687)]
    public class CollectableData : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Name;
        [RTTI.Member(1, 0x28)] public int Available;
        [RTTI.Member(2, 0x2C)] public int MaxAmount;
        [RTTI.Member(3, 0x30)] public String TimerID;
    }

    [RTTI.Serializable(0x406A285877E0DFB2)]
    public class CollectableDataCube : CollectableEntryBase
    {
        [RTTI.Member(0, 0x98, "Logic")] public Ref<CollectableRegion> CollectableRegion;
        [RTTI.Member(1, 0xA0, "Logic")] public StreamingRef<SentenceGroupResource> AudioEntry;
        [RTTI.Member(2, 0xC0, "Logic")] public Ref<PlayerOpenMenuNotificationResource> AudioDonePlayingNotification;
        [RTTI.Member(3, 0xC8, "Logic")] public UUIDRef<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0x413D55532E2A0AC3)]
    public class CollectableEntryBase : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<BooleanFact> IsUnlockedFact;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<LocalizedTextResource> TextEntry;
        [RTTI.Member(4, 0x48, "Logic")] public StreamingRef<UITexture> IconTexture;
        [RTTI.Member(5, 0x68, "Logic")] public StreamingRef<UITexture> PreviewIconTexture;
        [RTTI.Member(6, 0x88, "Logic")] public bool SuppressNotification;
        [RTTI.Member(7, 0x90, "Logic")] public Ref<PlayerNotificationResource> OverrideNotification;
    }

    [RTTI.Serializable(0xF515CDC6F436A49C)]
    public class CollectableManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CollectableSection> Collectables;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<CollectableSection> DataCubes;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<CollectableSection> Catalogue;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<CollectableSection> BlueGleam;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<GraphProgramResource> CollectableFoundGraphProgram;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<TagProperty> CollectableTag;
    }

    [RTTI.Serializable(0xA59E6D5D4C6DE17A)]
    public class CollectableRegion : Resource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<IntegerFact> FoundCounterFact;
    }

    [RTTI.Serializable(0x58FAD935CADEE33D)]
    public class CollectableRobot : CollectableEntryBase
    {
        [RTTI.Member(0, 0x98, "Logic")] public Array<UUIDRef<EntityResource>> EntityResources;
        [RTTI.Member(1, 0xA8, "Logic")] public Ref<IntegerFact> KillCountFact;
        [RTTI.Member(2, 0xB0, "Logic")] public Ref<RewardComponentResource> RewardComponentResource;
        [RTTI.Member(3, 0xB8, "Logic")] public Ref<UITexture> RobotPageTexture;
        [RTTI.Member(4, 0xC0, "Logic")] public Ref<UITexture> RobotPageTextureHighlighted;
        [RTTI.Member(5, 0xC8, "Logic")] public Ref<StatsDisplayResource> RobotStats;
        [RTTI.Member(6, 0xD0, "Logic")] public Ref<PerkLevel> RobotHackingPerk;
        [RTTI.Member(7, 0xD8, "Logic")] public bool IsMountable;
        [RTTI.Member(8, 0xDC, "Logic")] public ECollectableRobotEntryType Type;
        [RTTI.Member(9, 0xE0, "RobotParts")] public Array<Ref<MenuCatalogRobotPartResource>> RobotParts;
    }

    [RTTI.Serializable(0xFB7CCFF0DAB723BB)]
    public class CollectableSection : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<CollectableTypeContainer>> CollectableTypeContainer;
        [RTTI.Member(1, 0x38, "Menu")] public Array<Ref<CollectableRegion>> CollectableRegionOrder;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<IntegerFact> FoundCounterFact;
        [RTTI.Member(3, 0x50, "Menu")] public Ref<EnumFactValue> CompareQuestToUnlockCollectablesFact;
    }

    [RTTI.Serializable(0x4CFC3C7AB238E95C)]
    public class CollectableStyleMapping : Resource
    {
        [RTTI.Member(0, 0x28, "Properties")] public UUIDRef<CollectableType> CollectableTypeUUID;
        [RTTI.Member(1, 0x38, "Properties")] public Ref<MenuStyleClass> CollectableFoundStyleClass;
        [RTTI.Member(2, 0x40, "Properties")] public Ref<MenuStyleClass> CollectableLockedStyleClass;
    }

    [RTTI.Serializable(0x31B368F6DDBCB2B0)]
    public class CollectableType : Resource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(1, 0x30, "Representation")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<IntegerFact> FoundCounterFact;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<ConditionResource> MapUnlockedCondition;
        [RTTI.Member(4, 0x48, "Representation")] public EMenuBadgeCategory MenuBadgeCategory;
    }

    [RTTI.Serializable(0x23C869712CF96BE0)]
    public class CollectableTypeContainer : Resource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<CollectableType> CollectableType;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<PlayerNotificationResource> DiscoveredNotification;
        [RTTI.Member(2, 0x40, "Logic")] public bool IsNotificationRepeatable;
        [RTTI.Member(3, 0x44, "Logic")] public float NotificationDelay;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<LocationMarkerResource> LocationMarker;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<LocalizedTextResource> MarkerTitle;
        [RTTI.Member(6, 0x58, "Logic")] public Array<StreamingRef<CollectableEntryBase>> Collectables;
        [RTTI.Member(7, 0x68, "Logic")] public Ref<TrophyResource> FirstFoundTrophy;
        [RTTI.Member(8, 0x70, "Logic")] public Ref<TrophyResource> AllFoundTrophy;
        [RTTI.Member(9, 0x78, "Logic")] public Ref<EntitlementResource> DLCPackEntitlementKey;
        [RTTI.Member(10, 0x80, "Logic")] public String MenuTabCategory;
    }

    [RTTI.Serializable(0x9E5FC0A6E8D8704A)]
    public class CollectableVantage : Collectable
    {
        [RTTI.Member(0, 0xC0, "Logic")] public StreamingRef<SentenceGroupResource> AudioEntry;
        [RTTI.Member(1, 0xE0, "Logic")] public StreamingRef<UITexture> Texture;
    }

    [RTTI.Serializable(0x31AFB9512E94434D)]
    public class CollectablesViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xAC6C5C6278E48B11)]
    public class CollisionActionTrigger : CollisionTrigger
    {
        [RTTI.Member(0, 0xE8, "General")] public Ref<EntityAction> EnterAction;
        [RTTI.Member(1, 0xF0, "General")] public Ref<EntityAction> ExitAction;
    }

    [RTTI.Serializable(0x28344E1E3BB5E1A9)]
    public class CollisionGroup
    {
        [RTTI.Member(0, 0x0)] public Array<int> _CollisionGroup;
    }

    [RTTI.Serializable(0x8285D93A649A8ADA)]
    public class CollisionQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(0, 0x88, "Logic")] public Array<UUIDRef<CollisionTrigger>> CollisionTriggers;
        [RTTI.Member(1, 0x98, "Logic")] public bool TriggerOnExit;
    }

    [RTTI.Serializable(0x31BF31A96FC4835A)]
    public class CollisionQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0xDB597AD925709D30)]
    public class CollisionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Generated")] public Ref<PhysicsShapeResource> PhysicsShapeResource;
        [RTTI.Member(1, 0x30, "General")] public EPhysicsShapeType ShapeType;
    }

    [RTTI.Serializable(0x1467693833CF2C72)]
    public class CollisionResourceBox : CollisionResource
    {
        [RTTI.Member(0, 0x40, "General")] public BoundingBox3 LocalBounds;
        [RTTI.Member(1, 0x60, "General")] public MaterialType MaterialType;
    }

    [RTTI.Serializable(0x4010F973F0254178)]
    public class CollisionResourceSphere : CollisionResource
    {
        [RTTI.Member(0, 0x38, "General")] public float Radius;
        [RTTI.Member(1, 0x3C, "General")] public MaterialType MaterialType;
    }

    [RTTI.Serializable(0xA5B38AE190F649E2)]
    public class CollisionTrigger : PhysicsCollisionInstance
    {
        [RTTI.Member(0, 0x88, "General", true)] public WorldTransform Orientation;
        [RTTI.Member(1, 0xE0, "General")] public String Name;
    }

    [RTTI.Serializable(0x61E0C8F38F07D6D8)]
    public class ColorPeg : PegBase
    {
        [RTTI.Member(0, 0x10, "General")] public FRGBColor Color;
    }

    [RTTI.Serializable(0x337A9620AED04B23)]
    public class ColorScheme
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public RGBAColor Friendly;
        [RTTI.Member(2, 0xC)] public RGBAColor Enemy;
        [RTTI.Member(3, 0x10)] public RGBAColor PartyMember;
        [RTTI.Member(4, 0x14)] public RGBAColor Warning;
        [RTTI.Member(5, 0x18)] public RGBAColor FriendlyCrosshair;
        [RTTI.Member(6, 0x1C)] public RGBAColor EnemyCrosshair;
    }

    [RTTI.Serializable(0xE8502B1F3974B6CB)]
    public class ColorizeSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public FRGBAColor BiasColor;
        [RTTI.Member(1, 0x10, "Settings")] public FRGBAColor MidtoneColor;
        [RTTI.Member(2, 0x20, "Settings")] public FRGBAColor HighlightColor;
        [RTTI.Member(3, 0x30, "Settings")] public float BiasScale;
        [RTTI.Member(4, 0x34, "Settings")] public float MidtoneBoost;
        [RTTI.Member(5, 0x38, "Settings")] public float HighlightBoost;
        [RTTI.Member(6, 0x3C, "Settings")] public float Depth;
    }

    [RTTI.Serializable(0xAE3879ADCABFEC30)]
    public class ColorizeSettingsResource : Resource
    {
        [RTTI.Member(0, 0x38, "Settings")] public Array<ColorizeSettings> ColorizeSettings;
        [RTTI.Member(1, 0x48, "Settings")] public Array<FogSettings> FogSettings;
        [RTTI.Member(2, 0x58, "Settings")] public Ref<CurveResource> HueSaturationCurve;
        [RTTI.Member(3, 0x60, "Settings")] public MasterColorizeSettings MasterColorizeSettings;
        [RTTI.Member(4, 0xB0, "Settings")] public Filename MasterImageTemplate;
        [RTTI.Member(5, 0xB8, "Settings")] public float MasterGamma;
        [RTTI.Member(6, 0xBC, "Settings")] public float MasterGain;
        [RTTI.Member(7, 0xC0, "Settings")] public float MasterLift;
        [RTTI.Member(8, 0xD0, "Settings")] public FRGBAColor CubeMapMultiplier;
        [RTTI.Member(9, 0xE0, "Settings")] public Ref<Texture> ColorizeTexture;
        [RTTI.Member(10, 0xE8, "Settings")] public Ref<Texture> Rgb3dLookupTexture;
        [RTTI.Member(11, 0xF0, "Settings")] public FRGBAColor ForwardRenderingColorizeSettings;
        [RTTI.Member(12, 0x100, "Settings")] public EColorizeBlendMode BlendMode;
    }

    [RTTI.Serializable(0x7B653327CF90C97E)]
    public class CombatDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDE6B2B1885D6F10A)]
    public class CombatDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Facts")] public Ref<BooleanFact> IsNearEnemies;
        [RTTI.Member(1, 0x30, "Facts")] public Ref<BooleanFact> IsInCombat;
        [RTTI.Member(2, 0x38, "Logic")] public FRange NearbyEnemyRange;
        [RTTI.Member(3, 0x40, "EnemyThreats")] public float EnemyThreatDetectionRange;
        [RTTI.Member(4, 0x44, "Logic")] public float CombatCoolDownTime;
    }

    [RTTI.Serializable(0xD1AFB5E7F7DCCCAA)]
    public class CombatHonorResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String DescriptionTag;
        [RTTI.Member(1, 0x30, "Logic")] public int XPRequirement;
        [RTTI.Member(2, 0x38, "Logic")] public String Reward;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<Texture> IconTexture;
    }

    [RTTI.Serializable(0x64128C34C82BB628)]
    public class CombatHonorsManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xA4D8032F55B04C40)]
    public class CombatHonorsManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int MaxUnlockedCombatHonors;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<CombatHonorResource>> CombatHonors;
    }

    [RTTI.Serializable(0xA580520E0DEBBA9F)]
    public class CommerceManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xF48D9413CEA83423)]
    public class ComponentLifetimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA1E42E537D6471A5)]
    public class CompoundStatResource
    {
        [RTTI.Member(0, 0x10)] public String Name;
        [RTTI.Member(1, 0x18)] public Array<StatResource> Stats;
        [RTTI.Member(2, 0x28)] public EStatType Comparator;
    }

    [RTTI.Serializable(0xB4379713577D0555)]
    public class Compressed16Vector3
    {
        [RTTI.Member(0, 0x0)] public int16 X;
        [RTTI.Member(1, 0x2)] public int16 Y;
        [RTTI.Member(2, 0x4)] public int16 Z;
    }

    [RTTI.Serializable(0x391C214A28009A9F)]
    public class CompressedUnitVector3B
    {
        [RTTI.Member(0, 0x0)] public int8 X;
        [RTTI.Member(1, 0x1)] public int8 Y;
        [RTTI.Member(2, 0x2)] public int8 Z;
    }

    [RTTI.Serializable(0xBB8BE80F5DE1F95E)]
    public class CompressorConfigurationSet : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public float FullRangeThresholdInDb;
        [RTTI.Member(1, 0x24)] public float FullRangeRatio;
        [RTTI.Member(2, 0x28)] public float FullRangeAttackTimeInMs;
        [RTTI.Member(3, 0x2C)] public float FullRangeReleaseTimeInMs;
        [RTTI.Member(4, 0x30)] public float FullRangeMakeUpGainInDb;
        [RTTI.Member(5, 0x34)] public float FullRangePassThruGainInDb;
        [RTTI.Member(6, 0x38)] public float LFEThresholdInDb;
        [RTTI.Member(7, 0x3C)] public float LFERatio;
        [RTTI.Member(8, 0x40)] public float LFEAttackTimeInMs;
        [RTTI.Member(9, 0x44)] public float LFEReleaseTimeInMs;
        [RTTI.Member(10, 0x48)] public float LFEMakeUpGainInDb;
        [RTTI.Member(11, 0x4C)] public float LFEPassThruGainInDb;
    }

    [RTTI.Serializable(0x3CEA91BCAD49F327)]
    public class ConditionInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x944A9ED06F73A54A)]
    public class ConditionListenerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF39342F364F5F518)]
    public class ConditionListenerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<ConditionResource>> Conditions;
    }

    [RTTI.Serializable(0x9BFF3B12FFAEF6C1)]
    public class ConditionResource : Resource
    {
    }

    [RTTI.Serializable(0x1C60F3A8494EA9A7)]
    public class ConditionalAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(1, 0x38, "Logic")] public CPtr<EntityAction> ElseAction;
    }

    [RTTI.Serializable(0x1E974428FBAFF3C6)]
    public class ConditionalHealthBarComponentDisplaySettings
    {
        [RTTI.Member(0, 0x0)] public BoolPropertyLink ConditionalPropertyLink;
        [RTTI.Member(1, 0x8)] public HealthBarComponentDisplaySettings DisplaySettings;
    }

    [RTTI.Serializable(0x8C4591D4097F9F06)]
    public class ConditionalLookAtEventInstance : ConditionalLookEventInstance
    {
    }

    [RTTI.Serializable(0x9E56AAF9E485ACEE)]
    public class ConditionalLookAtEventResource : ConditionalLookEventResource
    {
        [RTTI.Member(0, 0x88, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0x14F789294501601E)]
    public class ConditionalLookEventInstance : LookEventInstance
    {
    }

    [RTTI.Serializable(0xA62811ED8E10E853)]
    public class ConditionalLookEventResource : LookEventResource
    {
        [RTTI.Member(0, 0x48, "Logic")] public Ref<LocatorResource> FallbackTargetLocatorResource;
        [RTTI.Member(1, 0x50, "Logic")] public FRange StartHeadingRange;
        [RTTI.Member(2, 0x58, "Logic")] public FRange StartPitchRange;
        [RTTI.Member(3, 0x60, "Logic")] public float StartDistance;
        [RTTI.Member(4, 0x64, "Logic")] public FRange ContinueHeadingRange;
        [RTTI.Member(5, 0x6C, "Logic")] public FRange ContinuePitchRange;
        [RTTI.Member(6, 0x74, "Logic")] public float ContinueDistance;
        [RTTI.Member(7, 0x78, "Logic")] public FRange LookTimeRange;
        [RTTI.Member(8, 0x80, "Logic")] public FRange CooldownTimeRange;
    }

    [RTTI.Serializable(0x77D5824F724E9360)]
    public class ConditionalLookEventStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1C154C18E4390CA6)]
    public class ConstructionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x116E950249A7FBE3)]
    public class ConstructionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xA85730B900605B74)]
    public class ConstructionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ConstructionTime;
        [RTTI.Member(1, 0x2C, "Logic")] public float DeconstructionTime;
        [RTTI.Member(2, 0x30, "Logic")] public CPtr<EntityAction> StartConstructionAction;
        [RTTI.Member(3, 0x38, "Logic")] public CPtr<EntityAction> FinishedConstructionAction;
        [RTTI.Member(4, 0x40, "Logic")] public CPtr<EntityAction> StartDeconstructionAction;
        [RTTI.Member(5, 0x48, "Logic")] public CPtr<EntityAction> FinishedDeconstructionAction;
        [RTTI.Member(6, 0x50, "Sound")] public Ref<SoundResource> ConstructingSoundResource;
        [RTTI.Member(7, 0x58, "Sound")] public Ref<SoundResource> DeconstructingSoundResource;
    }

    [RTTI.Serializable(0x5715A027353CFEDB)]
    public class ContactWithEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE8A6F7CD26EFDF96)]
    public class ContactWithEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CPtr<EntityAction> OnContactEntityAction;
    }

    [RTTI.Serializable(0xBDD4F4A43305BBA4)]
    public class ContentWidget : Widget
    {
    }

    [RTTI.Serializable(0x9A3C27670CBF1F36)]
    public class ContextualActionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6DEE89F04D9C6B5C)]
    public class ContextualActionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x6F92EEFC01469644)]
    public class ContextualActionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String AnimVarWarpHeadingName;
        [RTTI.Member(1, 0x30, "Logic")] public String AnimVarWarpPitchName;
        [RTTI.Member(2, 0x38, "Logic")] public String AnimVarWarpPosName;
        [RTTI.Member(3, 0x40, "Logic")] public String AnimVarWarpEnabledName;
        [RTTI.Member(4, 0x48, "Logic")] public String AnimVarVariantName;
        [RTTI.Member(5, 0x50, "Logic")] public String ContextualActionAnimationTag;
        [RTTI.Member(6, 0x58, "Logic")] public Array<Ref<AIFaction>> AlwaysEvaluateFactions;
        [RTTI.Member(7, 0x68, "Logic")] public Array<Ref<ContextualActionResource>> ContextualActions;
        [RTTI.Member(8, 0x80, "Logic")] public BoundingBox3 EnemySearchBoundingBox;
        [RTTI.Member(9, 0xA0, "Logic")] public float LineOfSightRadius;
        [RTTI.Member(10, 0xB0, "Logic")] public Vec3 DefaultLineOfSightEyeOffset;
        [RTTI.Member(11, 0xC0, "Logic")] public Vec3 ParkourWithHandsBracedLineOfSightEyeOffset;
        [RTTI.Member(12, 0xD0, "Logic")] public Vec3 ParkourWithHandsUnbracedLineOfSightEyeOffset;
        [RTTI.Member(13, 0xE0, "Logic")] public float PrimaryHUDCooldownDuration;
        [RTTI.Member(14, 0xE4, "Logic")] public float SecondaryHUDCooldownDuration;
    }

    [RTTI.Serializable(0x134707D61BF1C768)]
    public class ContextualActionCondition
    {
        [RTTI.Member(0, 0x0)] public bool OnGround;
        [RTTI.Member(1, 0x1)] public bool Jumping;
        [RTTI.Member(2, 0x2)] public bool Falling;
        [RTTI.Member(3, 0x3)] public bool VaultOff;
        [RTTI.Member(4, 0x4)] public bool Conversation;
        [RTTI.Member(5, 0x5)] public bool ParkouringFoot;
        [RTTI.Member(6, 0x6)] public bool ParkouringHandBraced;
        [RTTI.Member(7, 0x7)] public bool ParkouringHandUnbraced;
        [RTTI.Member(8, 0x8)] public bool Ziplining;
        [RTTI.Member(9, 0x9)] public bool HitResponse;
        [RTTI.Member(10, 0xA)] public bool Mounted;
        [RTTI.Member(11, 0xB)] public bool Combat;
        [RTTI.Member(12, 0xC)] public bool Tools;
        [RTTI.Member(13, 0xD)] public bool HeavyWeaponCarry;
        [RTTI.Member(14, 0xE)] public bool Melee;
        [RTTI.Member(15, 0xF)] public bool RequiresUseLocationForVictim;
        [RTTI.Member(16, 0x10)] public Array<ContextualActionRequiredBoolProperty> RequiredBoolProperties;
    }

    [RTTI.Serializable(0x77CAFB04469C77AC)]
    public class ContextualActionRequiredBoolProperty
    {
        [RTTI.Member(0, 0x0)] public BoolPropertyLink Link;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0x568F8126F3CD0943)]
    public class ContextualActionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public ContextualActionCondition Condition;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<GraphProgramResource> ConditionGraph;
        [RTTI.Member(2, 0x50, "Logic")] public Ref<GraphProgramResource> MountConditionGraph;
        [RTTI.Member(3, 0x58, "Logic")] public Ref<GraphProgramResource> StartGraph;
        [RTTI.Member(4, 0x60, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
        [RTTI.Member(5, 0x68, "Logic")] public Ref<GraphProgramResource> StopGraph;
        [RTTI.Member(6, 0x70, "Logic")] public Ref<GraphProgramResource> DelayStopGraph;
        [RTTI.Member(7, 0x80, "Logic")] public Array<int> AnimationVariantWeights;
        [RTTI.Member(8, 0x90, "Logic")] public Array<String> AnimationActions;
        [RTTI.Member(9, 0xA0, "Logic")] public Array<AnimationVariableValue> AnimationVariables;
        [RTTI.Member(10, 0xB0, "Logic")] public EContextualActionAnimationActions AnimationActionsTriggerType;
        [RTTI.Member(11, 0xB8, "Logic")] public Ref<LocalizedTextResource> ActionText;
        [RTTI.Member(12, 0xC0, "Logic")] public float CooldownDuration;
        [RTTI.Member(13, 0xC4, "Logic")] public float DelayStop;
        [RTTI.Member(14, 0xC8, "Logic")] public String MountModeIdentifier;
        [RTTI.Member(15, 0xD0, "Logic")] public EContextualActionButtonType Type;
        [RTTI.Member(16, 0xD1, "Logic")] public EContextualActionTriggerAction ActionsTriggerType;
        [RTTI.Member(17, 0xD8, "Logic")] public String ActionTriggerEventID;
        [RTTI.Member(18, 0xE0, "Logic")] public float MaxWarpDistance;
        [RTTI.Member(19, 0xE4, "Logic")] public EContextualActionDeviceFunctionType ContextualActionDeviceFunctionType;
        [RTTI.Member(20, 0xE5, "Logic")] public bool CheckForBlockingCollision;
        [RTTI.Member(21, 0xE8, "Logic")] public float CheckForBlockingCollisionRadius;
        [RTTI.Member(22, 0xF0, "Logic")] public Vec3 CheckForBlockingCollisionUpOffset;
        [RTTI.Member(23, 0x100, "Logic")] public EContextualActionSwitchToWeapon SwitchToWeapon;
        [RTTI.Member(24, 0x101, "Logic")] public bool FlinchStopsAction;
        [RTTI.Member(25, 0x102, "Logic")] public bool StaggerStopsAction;
        [RTTI.Member(26, 0x103, "Logic")] public bool KnockDownStopsAction;
        [RTTI.Member(27, 0x110, "Logic")] public Vec3 RelativeOffsetToTarget;
        [RTTI.Member(28, 0x120, "Logic")] public Array<String> AttackHelpers;
        [RTTI.Member(29, 0x130, "Logic")] public float MaxDistanceToAttackHelpers;
        [RTTI.Member(30, 0x134, "Logic")] public bool UseHelperOrientation;
        [RTTI.Member(31, 0x135, "Logic")] public bool ShouldBlendToOrientation;
        [RTTI.Member(32, 0x138, "Victim")] public Array<ContextualActionRequiredBoolProperty> RequiredBoolProperties;
        [RTTI.Member(33, 0x148, "Victim")] public bool RequiresAIIndividual;
        [RTTI.Member(34, 0x149, "Victim")] public bool VictimShouldDismountFromSequence;
        [RTTI.Member(35, 0x150, "Victim")] public ContextualActionVictimSettings Settings;
        [RTTI.Member(36, 0x168, "Victim")] public float MaxSlopeAngle;
        [RTTI.Member(37, 0x170, "Victim")] public Ref<DamageTypeGroup> IgnoreDamageTypeGroupCausedByVictim;
        [RTTI.Member(38, 0x178, "Logic")] public float HUDTextDisplayDuration;
        [RTTI.Member(39, 0x180, "Sound")] public Ref<SoundResource> ProgressSound;
        [RTTI.Member(40, 0x188, "Sound")] public String ProgressSoundHelperName;
        [RTTI.Member(41, 0x190, "Sound")] public bool ProgressSoundIs3D;
    }

    [RTTI.Serializable(0xB44701879096A8D)]
    public class ContextualActionVictimComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9B8344CB4E769414)]
    public class ContextualActionVictimComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x3FE288F832B36C90)]
    public class ContextualActionVictimSettings
    {
        [RTTI.Member(0, 0x0)] public bool PlaceOnNavMesh;
        [RTTI.Member(1, 0x1)] public bool PlaceOnGround;
        [RTTI.Member(2, 0x2)] public bool ForceUseContactNormalAsUp;
        [RTTI.Member(3, 0x3)] public bool DisablePerception;
        [RTTI.Member(4, 0x4)] public bool DisableModelUpdate;
        [RTTI.Member(5, 0x5)] public bool UpdateFloorSlope;
        [RTTI.Member(6, 0x8)] public Ref<DamageTypeResource> OnlyAllowedHitResponseDamageType;
        [RTTI.Member(7, 0x10)] public float RestoreAsVictimDelay;
    }

    [RTTI.Serializable(0x1B7695C35E54D349)]
    public class ContextualEmotion : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x28, "Logic")] public int AnimationVarValue;
        [RTTI.Member(2, 0x2C, "Logic")] public float Duration;
        [RTTI.Member(3, 0x30, "Logic")] public float CooldownDuration;
        [RTTI.Member(4, 0x34, "Logic")] public int Priority;
        [RTTI.Member(5, 0x38, "Logic")] public ContextualEmotionCondition Condition;
        [RTTI.Member(6, 0x68, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
    }

    [RTTI.Serializable(0x1BE5DFEBEAC5211)]
    public class ContextualEmotionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6A5BF44AB4E47B2A)]
    public class ContextualEmotionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String EmotionAnimationVarName;
        [RTTI.Member(1, 0x30, "Logic")] public float EmotionCooldownDuration;
        [RTTI.Member(2, 0x38, "Injured")] public Ref<ThresholdBasedContextualEmotion> Injured_ContextualEmotion;
        [RTTI.Member(3, 0x40, "Alerted")] public Ref<ThresholdBasedContextualEmotion> Alerted_ContextualEmotion;
        [RTTI.Member(4, 0x48, "OutOfBreath")] public Ref<ThresholdBasedContextualEmotion> OutOfBreath_ContextualEmotion;
        [RTTI.Member(5, 0x50, "OutOfWater")] public Ref<ThresholdBasedContextualEmotion> OutOfWater_ContextualEmotion;
        [RTTI.Member(6, 0x58, "Rainy")] public Ref<ThresholdBasedContextualEmotion> Rainy_ContextualEmotion;
        [RTTI.Member(7, 0x60, "Cold")] public Ref<ThresholdBasedContextualEmotion> Cold_ContextualEmotion;
        [RTTI.Member(8, 0x68, "Warm")] public Ref<ThresholdBasedContextualEmotion> Warm_ContextualEmotion;
        [RTTI.Member(9, 0x70, "Windy")] public Ref<ThresholdBasedContextualEmotion> Windy_ContextualEmotion;
        [RTTI.Member(10, 0x78, "PropertyBased")] public Array<Ref<PropertyBasedContextualEmotion>> PropertyBased_ContextualEmotion;
        [RTTI.Member(11, 0x88, "FactBased")] public Array<Ref<FactBasedContextualEmotion>> FactBased_ContextualEmotion;
    }

    [RTTI.Serializable(0xBDE2CEBCD82D30B6)]
    public class ContextualEmotionCondition
    {
        [RTTI.Member(0, 0x0)] public bool StandIdle;
        [RTTI.Member(1, 0x1)] public bool StandMove;
        [RTTI.Member(2, 0x2)] public bool Sprinting;
        [RTTI.Member(3, 0x3)] public bool CrouchIdle;
        [RTTI.Member(4, 0x4)] public bool CrouchMove;
        [RTTI.Member(5, 0x5)] public bool Starts;
        [RTTI.Member(6, 0x6)] public bool Stops;
        [RTTI.Member(7, 0x7)] public bool Banking;
        [RTTI.Member(8, 0x8)] public bool JumpFall;
        [RTTI.Member(9, 0x9)] public bool Zipline;
        [RTTI.Member(10, 0xA)] public bool ClimbHands;
        [RTTI.Member(11, 0xB)] public bool ClimbFoot;
        [RTTI.Member(12, 0xC)] public bool Swimming;
        [RTTI.Member(13, 0xD)] public bool FreeRunning;
        [RTTI.Member(14, 0xE)] public bool HunterMode;
        [RTTI.Member(15, 0xF)] public bool WieldStow;
        [RTTI.Member(16, 0x10)] public bool Aiming;
        [RTTI.Member(17, 0x11)] public bool Firing;
        [RTTI.Member(18, 0x12)] public bool Hitresponse;
        [RTTI.Member(19, 0x13)] public bool Tools;
        [RTTI.Member(20, 0x14)] public bool Melee;
        [RTTI.Member(21, 0x15)] public bool Mounted;
        [RTTI.Member(22, 0x16)] public bool WeaponCarry;
        [RTTI.Member(23, 0x17)] public bool HeavyWeaponCarry;
        [RTTI.Member(24, 0x18)] public bool ContextualAction;
        [RTTI.Member(25, 0x20)] public Array<String> DisallowTags;
    }

    [RTTI.Serializable(0x6D704808AB524EA8)]
    public class ContextualFactsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCEAE863D5B069E6B)]
    public class ContextualFactsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ResourceSelectorBase>> ContextualFactsSelectors;
    }

    [RTTI.Serializable(0x36D8A4040B30B95A)]
    public class ContextualOrderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x860F986E5FAAD641)]
    public class ContextualOrderComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ContextualOrderResource>> Orders;
    }

    [RTTI.Serializable(0xD3C9DB0472677DD0)]
    public class ContextualOrderModeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ContextualOrderResource>> EntityOrders;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<ContextualOrderResource>> WorldOrders;
        [RTTI.Member(2, 0x48, "Logic")] public Array<Ref<ContextualOrderResource>> SelfOrders;
        [RTTI.Member(3, 0x58, "Logic")] public CPtr<EntityAction> ActivateAction;
        [RTTI.Member(4, 0x60, "Logic")] public CPtr<EntityAction> DeactivateAction;
    }

    [RTTI.Serializable(0x488E6AAD21E023F1)]
    public class ContextualOrderResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> ValidityCheckingGraph;
        [RTTI.Member(1, 0x40, "Logic")] public UIRect IconRect;
        [RTTI.Member(2, 0x50, "Logic")] public UIRect CancelIconRect;
        [RTTI.Member(3, 0x60, "Logic")] public float DisabledTimeAfterUse;
        [RTTI.Member(4, 0x64, "Logic")] public float Range;
        [RTTI.Member(5, 0x68, "Logic")] public Ref<AISignalType> Signal;
        [RTTI.Member(6, 0x70, "Logic")] public Ref<AISignalType> CancelSignal;
        [RTTI.Member(7, 0x78, "Logic")] public bool PreventUseLocations;
        [RTTI.Member(8, 0x80, "Representation")] public Ref<Texture> RadialMenuTexture;
        [RTTI.Member(9, 0x88, "Representation")] public String StatusTextID;
        [RTTI.Member(10, 0x90, "Logic")] public CPtr<EntityAction> ActionOnPlayer;
        [RTTI.Member(11, 0x98, "Logic")] public CPtr<EntityAction> ActionOnTarget;
    }

    [RTTI.Serializable(0xB954BE4EB3BEC25F)]
    public class ContextualSpeechComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x88578FDA8DA887D7)]
    public class ContextualSpeechComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ConditionResource>> Conditions;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<ContextualSpeechEventMappingResource>> Events;
        [RTTI.Member(2, 0x48, "Logic")] public float MaxListenerDistance;
        [RTTI.Member(3, 0x4C, "Logic")] public bool IsEnabledWhenInSequence;
        [RTTI.Member(4, 0x4D, "Logic")] public bool IsEnabledWhenPlayerIsInSequence;
        [RTTI.Member(5, 0x4E, "Logic")] public bool ShouldStopTalkingInstantlyWhenInSequence;
        [RTTI.Member(6, 0x50, "Logic")] public float GlobalCooldown;
    }

    [RTTI.Serializable(0x3A3C0AF9D870A59E)]
    public class ContextualSpeechEvent : Resource
    {
    }

    [RTTI.Serializable(0x8AE81F307899630C)]
    public class ContextualSpeechEventMappingResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<ContextualSpeechEvent> Event;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<ContextualSpeechRuleResource>> Rules;
        [RTTI.Member(2, 0x40, "Logic")] public bool IgnoresGlobalCooldown;
        [RTTI.Member(3, 0x44, "Logic")] public float Cooldown;
        [RTTI.Member(4, 0x48, "Logic")] public bool IsCooldownGlobal;
        [RTTI.Member(5, 0x49, "Logic")] public bool CanPlayWhileInSlowMotion;
        [RTTI.Member(6, 0x4A, "Logic")] public bool EnableListenerSearch;
        [RTTI.Member(7, 0x4B, "Logic")] public bool SuppressSubtitles;
    }

    [RTTI.Serializable(0x3777A746AA40DC42)]
    public class ContextualSpeechRuleResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> Condition;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<ConditionResource>> FactConditions;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<GraphProgramResource> SideEffect;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<AISignalType> SignalType;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<AISignalType> ResponseType;
        [RTTI.Member(5, 0x58, "Logic")] public int Priority;
        [RTTI.Member(6, 0x5C, "Logic")] public int MaxRepeatCount;
        [RTTI.Member(7, 0x60, "Logic")] public int ChanceToPlay;
    }

    [RTTI.Serializable(0x47B51A14A44A887)]
    public class ContextualSpeechRuleSave : RTTIObject
    {
        [RTTI.Member(0, 0x10, true)] public GGUUID UUID;
        [RTTI.Member(1, 0x20, true)] public int RepeatCount;
    }

    [RTTI.Serializable(0x6942E2F5E5D6D4F)]
    public class ContextualSpeechSave : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, true)] public Array<ContextualSpeechRuleSave> Rules;
    }

    [RTTI.Serializable(0x353B2D32C58139BA)]
    public class ContextualTakeDownAttackResource : ContextualActionResource
    {
        [RTTI.Member(0, 0x1A0, "Settings")] public float MaximumChangeInVelocity;
        [RTTI.Member(1, 0x1A4, "Settings")] public float MaximumTurn;
        [RTTI.Member(2, 0x1A8, "Settings")] public float MaxTurnToTargetAngle;
        [RTTI.Member(3, 0x1AC, "Settings")] public float ExtraCapsuleRadiusWhileFalling;
        [RTTI.Member(4, 0x1B0, "Settings")] public bool ShouldSelectWithCamera;
        [RTTI.Member(5, 0x1C0, "Settings")] public Vec3 InitialJumpVelocity;
        [RTTI.Member(6, 0x1D0, "Settings")] public String CustomJumpAnimationStateName;
    }

    [RTTI.Serializable(0x5C8AF0C07BCF569A)]
    public class ContextualWarpedAttackResource : ContextualActionResource
    {
        [RTTI.Member(0, 0x1A0, "Logic")] public String AnimationState;
        [RTTI.Member(1, 0x1A8, "Logic")] public int ContactEventUserData;
        [RTTI.Member(2, 0x1B0, "Logic", true)] public String ContactJointName;
        [RTTI.Member(3, 0x1C0, "Logic")] public Vec3 ContactPosition;
        [RTTI.Member(4, 0x1D0, "Logic")] public Vec3 ContactWarpOffset;
        [RTTI.Member(5, 0x1E0, "Logic")] public bool KeepUpdatingOrientation;
        [RTTI.Member(6, 0x1E1, "Logic")] public bool KeepUpdatingWarpAnimationVariables;
        [RTTI.Member(7, 0x1E8, "Logic")] public Ref<SkinnedModelResource> ModelResource;
    }

    [RTTI.Serializable(0x32A0FBEF7F8C800)]
    public class ContinuousAmmoEjector : AmmoEjector
    {
    }

    [RTTI.Serializable(0xABEB0EA4DBEFFC5B)]
    public class ContinuousAmmoEjectorRep : AmmoEjectorRep
    {
    }

    [RTTI.Serializable(0x41B4AFECDA65632)]
    public class ContinuousAmmoEjectorResource : AmmoEjectorResource
    {
        [RTTI.Member(0, 0x1D0, "FireRate")] public float RoundsPerSecond;
    }

    [RTTI.Serializable(0x75D6EED0F48C5CDA)]
    public class ControllableZoomComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9525EB6AAAB374EF)]
    public class ControllableZoomComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF07C9CE0964A2827)]
    public class ControllableZoomComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CameraPropertiesSetResource> MinCameraProperties;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<CameraPropertiesSetResource> MaxCameraProperties;
        [RTTI.Member(2, 0x38, "Logic")] public float StartZoomFactor;
        [RTTI.Member(3, 0x3C, "Logic")] public float StartZoomBlendTime;
        [RTTI.Member(4, 0x40, "Logic")] public float ZoomSpeed;
        [RTTI.Member(5, 0x44, "Logic")] public float ZoomToTargetBlendTime;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(7, 0x50, "Logic")] public bool PlayerInvisible;
    }

    [RTTI.Serializable(0xADD2CA3346D09DD1)]
    public class ControlledEntity : Entity
    {
        [RTTI.Member(0, 0x0, "Logic")] public float MinAimPitch;
        [RTTI.Member(1, 0x0, "Logic")] public float MaxAimHeading;
        [RTTI.Member(2, 0x0, "Logic")] public float MinAimHeading;
        [RTTI.Member(3, 0x0, "Logic")] public float MaxAimPitch;
        [RTTI.Member(4, 0x2C2, "AI", true)] public bool AiIndividualCreated;
        [RTTI.Member(5, 0x2C3, "AI", true)] public bool AiIndividualAdded;
        [RTTI.Member(6, 0x2C8, "AI", true)] public Ref<AIIndividual> AIIndividual;
        [RTTI.Member(7, 0x2D0, "Logic", true)] public Ref<Controller> Controller;
        [RTTI.Member(8, 0x2D8, "Logic", true)] public WeakPtr<CameraEntity> Camera;
        [RTTI.Member(9, 0x2F0, "AI", true)] public bool ClaimsTerrain;
        [RTTI.Member(10, 0x398, "Logic", true)] public Array<WorldPosition> SafePositionHistory;
    }

    [RTTI.Serializable(0x667180E908054C67)]
    public class ControlledEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x4A73EEBA66E662E2)]
    public class ControlledEntityResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public String EyeBone;
        [RTTI.Member(1, 0x138, "Logic")] public float MinAimHeading;
        [RTTI.Member(2, 0x13C, "Logic")] public float MaxAimHeading;
        [RTTI.Member(3, 0x140, "Logic")] public float MaxAimHeadingSpeed;
        [RTTI.Member(4, 0x144, "Logic")] public float MaxAimHeadingAcceleration;
        [RTTI.Member(5, 0x148, "Logic")] public bool IsAimHeadingFullyRotatable;
        [RTTI.Member(6, 0x14C, "Logic")] public float MinAimPitch;
        [RTTI.Member(7, 0x150, "Logic")] public float MaxAimPitch;
        [RTTI.Member(8, 0x154, "Logic")] public float MaxAimPitchSpeed;
        [RTTI.Member(9, 0x158, "Logic")] public float MaxAimPitchAcceleration;
        [RTTI.Member(10, 0x15C, "Logic")] public bool NoInterpolationOnUpdateAim;
        [RTTI.Member(11, 0x160, "AI")] public float CollisionRadius;
        [RTTI.Member(12, 0x164, "AI")] public float ThreatPredictionClampRadius;
        [RTTI.Member(13, 0x168, "AI")] public String IdentifiedSignalType;
        [RTTI.Member(14, 0x170, "Logic")] public Ref<CameraEntityResource> CameraResource;
        [RTTI.Member(15, 0x178, "Logic")] public float CameraActivateDuration;
        [RTTI.Member(16, 0x17C, "Logic")] public float CameraDeactivateDuration;
        [RTTI.Member(17, 0x180, "Representation")] public Ref<HUDResource> HUDResource;
        [RTTI.Member(18, 0x188, "Logic")] public EPositionAimMode PreferredPositionAimMode;
        [RTTI.Member(19, 0x18C, "Logic")] public bool ResetAimTargetAfterLoading;
        [RTTI.Member(20, 0x190, "Logic")] public AnimationTagSet AnimationSetTags;
        [RTTI.Member(21, 0x1A0, "AI")] public Ref<AIIndividualResource> IndividualResource;
        [RTTI.Member(22, 0x1A8, "AI")] public float ClaimVolumeScaleForCombat;
        [RTTI.Member(23, 0x1AC, "AI")] public float ClaimVolumeHeight;
        [RTTI.Member(24, 0x1B0, "AI")] public bool AddToAIManager;
        [RTTI.Member(25, 0x1B4, "AI")] public float MinLinearSpeed;
        [RTTI.Member(26, 0x1B8, "AI")] public float MinimumOffensiveRange;
        [RTTI.Member(27, 0x1BC, "AI")] public float MaximumOffensiveRange;
        [RTTI.Member(28, 0x1C0, "AI")] public float OffensiveCapability;
        [RTTI.Member(29, 0x1C4, "AI")] public float DefensiveCapability;
        [RTTI.Member(30, 0x1C8, "AI")] public bool IncludeInChildLOFCheck;
        [RTTI.Member(31, 0x1D0, "AI")] public Array<String> VisualNodeBones;
        [RTTI.Member(32, 0x1E0, "AI")] public Array<String> LineAttackNodeBones;
        [RTTI.Member(33, 0x1F0, "AI")] public Array<String> BallisticAttackNodeBones;
        [RTTI.Member(34, 0x200, "Representation")] public bool EffectsAreCharacterBound;
    }

    [RTTI.Serializable(0x2AA0015E5A8453E2)]
    public class ControlledEntitySpawnInfo : EntitySpawnInfo
    {
    }

    [RTTI.Serializable(0x5AC9BF3884F5FF2)]
    public class ControlledFollowCameraEntity : FollowCameraEntity
    {
    }

    [RTTI.Serializable(0xBFCAF7DBD6873DA1)]
    public class ControlledFollowCameraEntityResource : FollowCameraEntityResource
    {
        [RTTI.Member(0, 0x250, "Logic")] public float TurnSpeed;
        [RTTI.Member(1, 0x254, "Logic")] public float PitchSpeed;
        [RTTI.Member(2, 0x258, "Logic")] public float TurnAccelerationFactor;
        [RTTI.Member(3, 0x25C, "Logic")] public float ParentTurnInheritanceFactor;
        [RTTI.Member(4, 0x260, "Logic")] public float ParentPitchInheritanceFactor;
        [RTTI.Member(5, 0x270, "Logic")] public Vec3 MinPitchOffset;
        [RTTI.Member(6, 0x280, "Logic")] public Vec3 CenterPitchOffset;
        [RTTI.Member(7, 0x290, "Logic")] public Vec3 MaxPitchOffset;
        [RTTI.Member(8, 0x2A0, "Logic")] public Vec3 MinHeadingOffset;
        [RTTI.Member(9, 0x2B0, "Logic")] public Vec3 CenterHeadingOffset;
        [RTTI.Member(10, 0x2C0, "Logic")] public Vec3 MaxHeadingOffset;
        [RTTI.Member(11, 0x2D0, "Logic")] public Vec3 PivotOffset;
        [RTTI.Member(12, 0x2E0, "Logic")] public Ref<JoystickInputModifierResource> JoystickInputModifierResource;
        [RTTI.Member(13, 0x2E8, "Logic")] public bool IgnoreEntityParentHeading;
        [RTTI.Member(14, 0x2F0, "Logic")] public Vec3 ForwardOffset;
        [RTTI.Member(15, 0x300, "Logic")] public Vec3 BackOffset;
        [RTTI.Member(16, 0x310, "Logic")] public Vec3 LeftOffset;
        [RTTI.Member(17, 0x320, "Logic")] public Vec3 RightOffset;
    }

    [RTTI.Serializable(0xF4D565FC322D48DA)]
    public class ControlledFollowCameraProperties : CameraPropertiesBase
    {
        [RTTI.Member(0, 0x20, "Logic")] public float TurnSpeed;
        [RTTI.Member(1, 0x24, "Logic")] public float PitchSpeed;
        [RTTI.Member(2, 0x28, "Logic")] public float TurnAccelerationFactor;
        [RTTI.Member(3, 0x2C, "Logic")] public float ParentTurnInheritanceFactor;
        [RTTI.Member(4, 0x30, "Logic")] public float ParentPitchInheritanceFactor;
    }

    [RTTI.Serializable(0xDAC88A9835052A3A)]
    public class Controller : CoreObject
    {
    }

    [RTTI.Serializable(0xC82E765C7CC99656)]
    public class ControllerConfig
    {
        [RTTI.Member(0, 0x0, true)] public int ControllerConfigID;
        [RTTI.Member(1, 0x8, true)] public Array<int> ControllerConfigIDPreferences;
        [RTTI.Member(2, 0x18, true)] public Array<float> HeadingSpeedFactor;
        [RTTI.Member(3, 0x28, true)] public Array<float> PitchSpeedFactor;
        [RTTI.Member(4, 0x38, true)] public bool LookInvertYAxis;
        [RTTI.Member(5, 0x39, true)] public bool LookInvertXAxis;
        [RTTI.Member(6, 0x40, true)] public Vec2 LookSensitivity;
        [RTTI.Member(7, 0x50, true)] public Vec2 LookSensitivityMouse;
        [RTTI.Member(8, 0x60, true)] public float CameraDistance;
        [RTTI.Member(9, 0x64, true)] public int32 ZoomSwitchMode;
        [RTTI.Member(10, 0x68, true)] public bool SprintToggle;
        [RTTI.Member(11, 0x69, true)] public bool CrouchToggle;
        [RTTI.Member(12, 0x6A, true)] public bool SwapSticks;
        [RTTI.Member(13, 0x6B, true)] public bool SwapL1L2;
        [RTTI.Member(14, 0x6C, true)] public bool SwapR1R2;
        [RTTI.Member(15, 0x6D, true)] public bool FlightInvertYAxis;
    }

    [RTTI.Serializable(0x76780B07BDD4C05C)]
    public class ControllerConfigResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public int ID;
        [RTTI.Member(1, 0x30, "General")] public Ref<LocalizedTextResource> Title;
        [RTTI.Member(2, 0x38, "General")] public bool IsDefault;
        [RTTI.Member(3, 0x3C, "General")] public EControllerScheme ControllerScheme;
        [RTTI.Member(4, 0x40, "General")] public ETriState DefaultZoomToggle;
        [RTTI.Member(5, 0x44, "General")] public ETriState DefaultCrouchToggle;
        [RTTI.Member(6, 0x48, "General")] public bool AllowShoulderSwapping;
        [RTTI.Member(7, 0x50, "General")] public Array<ControllerLegend> Legend;
        [RTTI.Member(8, 0xC0, "Functions")] public ControllerFunction PrimaryFire;
        [RTTI.Member(9, 0xD8, "Functions")] public ControllerFunction SwitchFire;
        [RTTI.Member(10, 0xF0, "Functions")] public ControllerFunction CycleToNextAmmoType;
        [RTTI.Member(11, 0x108, "Functions")] public ControllerFunction CycleToPreviousAmmoType;
        [RTTI.Member(12, 0x120, "Functions")] public ControllerFunction MeleePrimaryAttack;
        [RTTI.Member(13, 0x138, "Functions")] public ControllerFunction MeleeSecondaryAttack;
        [RTTI.Member(14, 0x150, "Functions")] public ControllerFunction SwitchZooming;
        [RTTI.Member(15, 0x168, "Functions")] public ControllerFunction SwitchZoomMode;
        [RTTI.Member(16, 0x180, "Functions")] public ControllerFunction Aim;
        [RTTI.Member(17, 0x198, "Functions")] public ControllerFunction SprintToggle;
        [RTTI.Member(18, 0x1B0, "Functions")] public ControllerFunction Jump;
        [RTTI.Member(19, 0x1C8, "Functions")] public ControllerFunction Use;
        [RTTI.Member(20, 0x1E0, "Functions")] public ControllerFunction Relocate;
        [RTTI.Member(21, 0x1F8, "Functions")] public ControllerFunction Loot;
        [RTTI.Member(22, 0x210, "Functions")] public ControllerFunction PickupWeapon;
        [RTTI.Member(23, 0x228, "Functions")] public ControllerFunction QuickThrowGesture;
        [RTTI.Member(24, 0x240, "Functions")] public ControllerFunction Reload;
        [RTTI.Member(25, 0x258, "Functions")] public ControllerFunction Crouch;
        [RTTI.Member(26, 0x270, "Functions")] public ControllerFunction Slide;
        [RTTI.Member(27, 0x288, "Functions")] public ControllerFunction TakeCover;
        [RTTI.Member(28, 0x2A0, "Functions")] public ControllerFunction Vault;
        [RTTI.Member(29, 0x2B8, "Functions")] public ControllerFunction DiveRoll;
        [RTTI.Member(30, 0x2D0, "Functions")] public ControllerFunction DropWeapon;
        [RTTI.Member(31, 0x2E8, "Functions")] public ControllerFunction NextWeapon;
        [RTTI.Member(32, 0x300, "Functions")] public ControllerFunction SwimUnderWater;
        [RTTI.Member(33, 0x318, "Functions")] public ControllerFunction FlashlightToggle;
        [RTTI.Member(34, 0x330, "Functions")] public ControllerFunction SlowMoToggle;
        [RTTI.Member(35, 0x348, "Functions")] public ControllerFunction CloseCombat;
        [RTTI.Member(36, 0x360, "Functions")] public ControllerFunction Block;
        [RTTI.Member(37, 0x378, "Functions")] public ControllerFunction Suicide;
        [RTTI.Member(38, 0x390, "Functions")] public ControllerFunction LockAim;
        [RTTI.Member(39, 0x3A8, "Functions")] public ControllerFunction SkipSequence;
        [RTTI.Member(40, 0x3C0, "Functions")] public ControllerFunction SpectatorToggleSpawnMenu;
        [RTTI.Member(41, 0x3D8, "Functions")] public ControllerFunction DropFromLedge;
        [RTTI.Member(42, 0x3F0, "Functions")] public ControllerFunction DropToLedge;
        [RTTI.Member(43, 0x408, "Functions")] public ControllerFunction Heal;
        [RTTI.Member(44, 0x420, "Functions")] public ControllerFunction GrabLeftHand;
        [RTTI.Member(45, 0x438, "Functions")] public ControllerFunction GrabRightHand;
        [RTTI.Member(46, 0x450, "Functions")] public ControllerFunction CounterBucking1;
        [RTTI.Member(47, 0x468, "Functions")] public ControllerFunction CounterBucking2;
        [RTTI.Member(48, 0x480, "Functions")] public ControllerFunction PrimaryContextualAction;
        [RTTI.Member(49, 0x498, "Functions")] public ControllerFunction SecondaryContextualAction;
        [RTTI.Member(50, 0x4B0, "Functions")] public ControllerFunction TertiaryContextualAction;
        [RTTI.Member(51, 0x4E0, "Functions")] public ControllerFunction AAGunPrimaryfire;
        [RTTI.Member(52, 0x4F8, "Functions")] public ControllerFunction AAGunSecondaryfire;
        [RTTI.Member(53, 0x510, "Functions")] public ControllerFunction AAGunSwitchZoom;
        [RTTI.Member(54, 0x528, "Functions")] public ControllerFunction SelectUp;
        [RTTI.Member(55, 0x558, "Functions")] public ControllerFunction SelectLeft;
        [RTTI.Member(56, 0x570, "Functions")] public ControllerFunction SelectRight;
        [RTTI.Member(57, 0x588, "Functions")] public ControllerFunction CharacterScreenCampaign;
        [RTTI.Member(58, 0x5A0, "Functions")] public ControllerFunction CharacterScreenOnline;
        [RTTI.Member(59, 0x5B8, "Functions")] public ControllerFunction OptionScreenCampaign;
        [RTTI.Member(60, 0x5D0, "Functions")] public ControllerFunction OptionScreenOnline;
        [RTTI.Member(61, 0x5E8, "Functions")] public ControllerFunction IngameMainMenu;
        [RTTI.Member(62, 0x600, "Functions")] public ControllerFunction ShowHud;
        [RTTI.Member(63, 0x618, "Functions")] public ControllerFunction MountHorse;
        [RTTI.Member(64, 0x630, "Functions")] public ControllerFunction DismountHorse;
        [RTTI.Member(65, 0x648, "Functions")] public ControllerFunction DismountHorseSpecial;
        [RTTI.Member(66, 0x660, "Functions")] public ControllerFunction MountSpeedUp;
        [RTTI.Member(67, 0x678, "Functions")] public ControllerFunction MountSpeedDown;
        [RTTI.Member(68, 0x690, "Functions")] public ControllerFunction MountRangedAttack;
        [RTTI.Member(69, 0x6A8, "Functions")] public ControllerFunction MountMeleeAttack;
        [RTTI.Member(70, 0x6C0, "Functions")] public ControllerFunction MountSecondaryMeleeAttack;
        [RTTI.Member(71, 0x6D8, "Functions")] public ControllerFunction HorseCall;
        [RTTI.Member(72, 0x6F0, "Functions")] public ControllerFunction InventoryNextweapon;
        [RTTI.Member(73, 0x708, "Functions")] public ControllerFunction InventoryStowweapon;
        [RTTI.Member(74, 0x720, "Functions")] public ControllerFunction InventorySelection;
        [RTTI.Member(75, 0x738, "Functions")] public ControllerFunction InventoryQuickSelection_1;
        [RTTI.Member(76, 0x750, "Functions")] public ControllerFunction InventoryQuickSelection_2;
        [RTTI.Member(77, 0x768, "Functions")] public ControllerFunction InventoryQuickSelection_3;
        [RTTI.Member(78, 0x780, "Functions")] public ControllerFunction InventoryQuickSelection_4;
        [RTTI.Member(79, 0x798, "Functions")] public ControllerFunction InventorySelectToolNext;
        [RTTI.Member(80, 0x7B0, "Functions")] public ControllerFunction InventorySelectToolPrev;
        [RTTI.Member(81, 0x7C8, "Functions")] public ControllerFunction InventoryUseTool;
        [RTTI.Member(82, 0x978, "Functions")] public ControllerFunction Tag;
        [RTTI.Member(83, 0x990, "Functions")] public ControllerFunction Untag;
        [RTTI.Member(84, 0x9A8, "Functions")] public ControllerFunction UntagAll;
        [RTTI.Member(85, 0x9C0, "Functions")] public ControllerFunction FocusMode;
        [RTTI.Member(86, 0x9D8, "Functions")] public ControllerFunction FocusTagStatusInfo;
        [RTTI.Member(87, 0x9F0, "Functions")] public ControllerFunction FocusWeaponSelect;
        [RTTI.Member(88, 0xA08, "Functions")] public ControllerFunction FocusUp;
        [RTTI.Member(89, 0xA20, "Functions")] public ControllerFunction FocusDown;
        [RTTI.Member(90, 0xA38, "Functions")] public ControllerFunction FocusLeft;
        [RTTI.Member(91, 0xA50, "Functions")] public ControllerFunction FocusRight;
        [RTTI.Member(92, 0xA68, "Functions")] public ControllerFunction BulletTime;
        [RTTI.Member(93, 0xA80, "Functions")] public ControllerFunction LureEnemy;
        [RTTI.Member(94, 0xA98, "Functions")] public ControllerFunction AudiologToggle;
        [RTTI.Member(95, 0xAE0, "Functions")] public ControllerFunction ManualSave;
        [RTTI.Member(96, 0xAF8, "Functions")] public ControllerFunction Keyboard_Movement_Forward;
        [RTTI.Member(97, 0xB10, "Functions")] public ControllerFunction Keyboard_Movement_Backward;
        [RTTI.Member(98, 0xB28, "Functions")] public ControllerFunction Keyboard_Movement_Left;
        [RTTI.Member(99, 0xB40, "Functions")] public ControllerFunction Keyboard_Movement_Right;
        [RTTI.Member(100, 0xB58, "Functions")] public ControllerFunction Keyboard_Run_Walk_Toggle;
        [RTTI.Member(101, 0xB70, "Functions")] public ControllerFunction Keyboard_Heavy_Attack_Toggle;
        [RTTI.Member(102, 0xB88, "Functions")] public ControllerFunction IngameMenuSkill;
        [RTTI.Member(103, 0xBA0, "Functions")] public ControllerFunction IngameMenuInventory;
        [RTTI.Member(104, 0xBB8, "Functions")] public ControllerFunction IngameMenuCraft;
        [RTTI.Member(105, 0xBD0, "Functions")] public ControllerFunction IngameMenuMap;
        [RTTI.Member(106, 0xBE8, "Functions")] public ControllerFunction IngameMenuQuests;
        [RTTI.Member(107, 0xC00, "Functions")] public ControllerFunction IngameMenuNotebook;
        [RTTI.Member(108, 0xC18, "Functions")] public ControllerFunction MountSpeedUpPC;
        [RTTI.Member(109, 0xC30, "Functions")] public ControllerFunction JumpPC;
        [RTTI.Member(110, 0xC48, "Functions")] public ControllerFunction RelocatePC;
        [RTTI.Member(111, 0xC60, "Functions")] public ControllerFunction VaultPC;
        [RTTI.Member(112, 0xC78, "Functions")] public ControllerFunction SkipSequencePC;
        [RTTI.Member(113, 0xC90, "Functions")] public ControllerFunction SuicidePC;
        [RTTI.Member(114, 0xCA8, "Functions")] public ControllerFunction ProtoCrossPC;
        [RTTI.Member(115, 0xCC0, "Functions")] public ControllerFunction FastSwapWeaponUp;
        [RTTI.Member(116, 0xCD8, "Functions")] public ControllerFunction FastSwapWeaponDown;
        [RTTI.Member(117, 0xCF0, "Functions")] public Ref<StickFunction> StickMove;
        [RTTI.Member(118, 0xCF8, "Functions")] public Ref<StickFunction> StickLook;
        [RTTI.Member(119, 0xD00, "Functions")] public Ref<StickFunction> StickInventorySelection;
        [RTTI.Member(120, 0xD08, "Functions")] public Ref<StickFunction> DialogueChoice;
        [RTTI.Member(121, 0xD10, "Functions")] public Ref<StickFunction> StickAnalogZoom;
        [RTTI.Member(122, 0xD18, "Functions")] public Ref<StickFunction> StickMoveMount;
        [RTTI.Member(123, 0xD20, "Functions")] public Ref<StickFunction> DialogueChoiceMouse;
    }

    [RTTI.Serializable(0xF92E7A253AC47032)]
    public class ControllerFunction
    {
        [RTTI.Member(0, 0x0)] public ETriggerType Trigger;
    }

    [RTTI.Serializable(0xDF67CF680A21D856)]
    public class ControllerLegend
    {
        [RTTI.Member(0, 0x0)] public EButton Button;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> SinglePlayerText;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> MultiPlayerText;
    }

    [RTTI.Serializable(0x1715F9C2F886EF8B)]
    public class ControllerMapContent
    {
        [RTTI.Member(0, 0x0)] public EGameFunctionGroup FunctionGroup;
        [RTTI.Member(1, 0x4)] public EControllerButtonType ButtonType;
        [RTTI.Member(2, 0x8)] public EMenuInputFunction MenuFunction;
        [RTTI.Member(3, 0x10)] public Array<EButton> Buttons;
    }

    [RTTI.Serializable(0x8AA9BEFB9EAC31A2)]
    public class ConvexHull
    {
        [RTTI.Member(0, 0x0)] public Array<Vec3Pack> Vertices;
        [RTTI.Member(1, 0x10)] public Array<ConvexHullTriangle> Triangles;
    }

    [RTTI.Serializable(0xC62B7B75348625E0)]
    public class ConvexHullTriangle
    {
        [RTTI.Member(0, 0x0)] public int Index0;
        [RTTI.Member(1, 0x4)] public int Index1;
        [RTTI.Member(2, 0x8)] public int Index2;
        [RTTI.Member(3, 0x10)] public PlaneEq Plane;
    }

    [RTTI.Serializable(0xB1DFFF577EBCB1A7)]
    public class ConvolutionReverbSubmixResource : ReverbSubmixResource
    {
    }

    [RTTI.Serializable(0x483216B5E6AB16DB)]
    public class CoreObject : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x2BAA181FD4855E8C)]
    public class CoreScript : CoreObject, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
    }

    [RTTI.Serializable(0x1D6ACA2786C58ADC)]
    public class CoreTelemetryService : RTTIObject
    {
    }

    [RTTI.Serializable(0xBEF0152AB6376B85)]
    public class CorpseStimuliComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3DE14D1E64E1A813)]
    public class CorpseStimuliComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<AISmellStimulusResource> SmellStimulus;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<AICorpseFoundMessageResource> CorpseFoundMessage;
        [RTTI.Member(3, 0x40, "Logic")] public float ActivationDelay;
    }

    [RTTI.Serializable(0x6747CCF8804D7CF3)]
    public class CountdownTimer : CoreObject
    {
        [RTTI.Member(0, 0x28)] public float Duration;
        [RTTI.Member(1, 0x2C)] public bool VisibleOnScreen;
        [RTTI.Member(2, 0x34)] public bool CountingUp;
        [RTTI.Member(3, 0x35)] public bool KeepRunningUp;
        [RTTI.Member(4, 0x36)] public bool Save;
        [RTTI.Member(5, 0x38)] public Ref<IntegerFact> DurationFact;
    }

    [RTTI.Serializable(0xF8596DFD73A58B08)]
    public class CountdownTimerSave : RTTIObject
    {
        [RTTI.Member(0, 0x10, "StateSaving", true)] public bool Running;
        [RTTI.Member(1, 0x14, "StateSaving", true)] public float Duration;
        [RTTI.Member(2, 0x18, "StateSaving", true)] public bool VisibleOnScreen;
        [RTTI.Member(3, 0x1C, "StateSaving", true)] public float ElapsedTime;
        [RTTI.Member(4, 0x20, "StateSaving", true)] public float BlinkStartTime;
    }

    [RTTI.Serializable(0x85B2C38935792194)]
    public class CoverCompressionDepthTable
    {
        [RTTI.Member(0, 0x0)] public Array<float> DepthValues;
    }

    [RTTI.Serializable(0xEDD3176F9D6752EA)]
    public class CraftingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x59C59F428757ABDB)]
    public class CraftingComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<CraftingRecipeGroup>> AmmoRecipeGroups;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<CraftingRecipeGroup>> ToolRecipeGroups;
        [RTTI.Member(2, 0x48, "Logic")] public Array<Ref<CraftingRecipeGroup>> UpgradeRecipeGroups;
        [RTTI.Member(3, 0x58, "Logic")] public Array<Ref<CraftingRecipeGroup>> TravelRecipeGroups;
        [RTTI.Member(4, 0x68, "Logic")] public String QuickCraftGesture;
        [RTTI.Member(5, 0x70, "Logic")] public Ref<PerkLevel> UpgradedCraftingPerk;
    }

    [RTTI.Serializable(0x3079DEAD95E34A4E)]
    public class CraftingQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<CraftingRecipe>> Recipes;
        [RTTI.Member(1, 0x38, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x5CA35209BE7C68C2)]
    public class CraftingQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xAC63285A6F697077)]
    public class CraftingRecipe : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> RecipeDescription;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<CraftingRecipeIngredient>> Ingredients;
    }

    [RTTI.Serializable(0x62D14A9D3A7F0770)]
    public class CraftingRecipeGroup : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> GroupName;
        [RTTI.Member(1, 0x30)] public Ref<LocalizedTextResource> GroupDescription;
        [RTTI.Member(2, 0x38)] public Ref<LocalizedTextResource> GroupCraftingTitle;
        [RTTI.Member(3, 0x40)] public Ref<UITexture> IconTexture;
        [RTTI.Member(4, 0x48)] public Array<Ref<CraftingRecipe>> Recipes;
        [RTTI.Member(5, 0x58)] public bool ShowInMenu;
    }

    [RTTI.Serializable(0xC68983CB857B9072)]
    public class CraftingRecipeIngredient : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<EntityResource> Item;
        [RTTI.Member(1, 0x30)] public int Amount;
    }

    [RTTI.Serializable(0x669EFFE7DA052306)]
    public class CraftingSave : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "StateSave", true)] public Array<GGUUID> UpgradeUUIDs;
        [RTTI.Member(1, 0x38, "StateSave", true)] public Array<GGUUID> UnlockedRecipes;
        [RTTI.Member(2, 0x48, "StateSave", true)] public Array<GGUUID> CraftedRecipes;
    }

    [RTTI.Serializable(0x2E91F539B607235B)]
    public class CraftingViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x94F6010184FB8A28)]
    public class CrashAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<CrashMoverResource> CrashMoverResource;
    }

    [RTTI.Serializable(0x9035C056DCCBF11B)]
    public class CrashComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x39554688E33769DD)]
    public class CrashComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xB373BFC84C9FB836)]
    public class CrashMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0xE8ABAA09A3587F89)]
    public class CrashMoverResource : PhysicsMoverResource
    {
        [RTTI.Member(0, 0x60, "General")] public float CrashTimeLimit;
        [RTTI.Member(1, 0x64, "General")] public float HomingDelay;
        [RTTI.Member(2, 0x68, "Targeting")] public ECrashMoverTargeting Mode;
        [RTTI.Member(3, 0x70, "Targeting")] public String AutoMarkerPrefix;
        [RTTI.Member(4, 0x78, "Targeting")] public FRange TargetDeviationRange;
        [RTTI.Member(5, 0x80, "Movement")] public float Velocity;
        [RTTI.Member(6, 0x84, "Movement")] public float UpImpulseTime;
        [RTTI.Member(7, 0x88, "Movement")] public float UpImpulseStrength;
        [RTTI.Member(8, 0x90, "Movement")] public Vec3 AngularImpulseStrength;
        [RTTI.Member(9, 0xA0, "Movement")] public float AngularImpulseTime;
        [RTTI.Member(10, 0xA4, "Movement")] public float AngularVelocityLimit;
        [RTTI.Member(11, 0xA8, "Humanoids")] public String AIMessage;
    }

    [RTTI.Serializable(0x51E195EBB7CFCB6E)]
    public class CreateClanRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Name;
        [RTTI.Member(1, 0x28)] public String Tag;
        [RTTI.Member(2, 0x30)] public String Description;
    }

    [RTTI.Serializable(0xEEAB04695088558F)]
    public class CreateComponentAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityComponentResource> ComponentResource;
        [RTTI.Member(1, 0x38, "Logic")] public bool PreventDuplicate;
        [RTTI.Member(2, 0x39, "Logic")] public bool AutoRemoveAtTransition;
    }

    [RTTI.Serializable(0xB5DFC7CA13990332)]
    public class CreateCrowdEventAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<CrowdEventResource> EventResource;
    }

    [RTTI.Serializable(0x33C93B8901E04BC6)]
    public class CreateDamageEntityAction : CreateEntityAction
    {
        [RTTI.Member(0, 0xF0, "Logic")] public EAttackEventLinkType AttackEventLinkType;
    }

    [RTTI.Serializable(0x88898E308BEDD840)]
    public class CreateDangerAreaAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public float Radius;
        [RTTI.Member(1, 0x34, "Logic")] public float ExpiryTime;
        [RTTI.Member(2, 0x38, "Logic")] public bool Attach;
        [RTTI.Member(3, 0x3C, "Logic")] public EAIDangerAreaType Type;
    }

    [RTTI.Serializable(0xD273F8CDA89ADDA7)]
    public class CreateEffectComponentAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EffectComponentResource> EffectComponentResource;
        [RTTI.Member(1, 0x40, "Logic")] public Mat44 Matrix;
        [RTTI.Member(2, 0x80, "Logic")] public Vec3 RandomRotation;
        [RTTI.Member(3, 0x90, "Logic")] public bool AutoRemoveAtTransition;
        [RTTI.Member(4, 0x91, "Logic")] public bool CreateRelativeToDamageLocation;
        [RTTI.Member(5, 0x92, "Logic")] public bool CreateRelativeToRoot;
        [RTTI.Member(6, 0x94, "Logic")] public float AlignWithReflectionVectorFactor;
    }

    [RTTI.Serializable(0x7B3D6E0DE90783D3)]
    public class CreateElectricityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<ElectricityEmitNodeResource> ElectricityEmitNodeResource;
        [RTTI.Member(1, 0x40, "Logic")] public Vec3 Position;
    }

    [RTTI.Serializable(0x2B31868F8838BD88)]
    public class CreateEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x38, "Logic")] public String HelperNode;
        [RTTI.Member(2, 0x40, "Logic")] public Mat44 Matrix;
        [RTTI.Member(3, 0x80, "Logic")] public Ref<RandomMatrixResourceBase> RandomMatrix;
        [RTTI.Member(4, 0x90, "Logic")] public Vec3 RandomRotation;
        [RTTI.Member(5, 0xA0, "Logic")] public bool PassOnDamageImpulse;
        [RTTI.Member(6, 0xA4, "Logic")] public float PassOnDamageImpulseFactor;
        [RTTI.Member(7, 0xB0, "Logic")] public Vec3 InitialPhysicsImpulse;
        [RTTI.Member(8, 0xC0, "Logic")] public Ref<RandomVectorResource> RandomPhysicsImpulse;
        [RTTI.Member(9, 0xC8, "Logic")] public bool PhysicsImpulseUpInWorldSpace;
        [RTTI.Member(10, 0xC9, "Logic")] public bool AutoRemoveAtTransition;
        [RTTI.Member(11, 0xCA, "Logic")] public bool CreateRelativeToDamageLocation;
        [RTTI.Member(12, 0xCB, "Logic")] public bool CreateRelativeToRoot;
        [RTTI.Member(13, 0xCC, "Logic")] public bool IgnoreRelativeRotation;
        [RTTI.Member(14, 0xD0, "Logic")] public float AlignWithReflectionVectorFactor;
        [RTTI.Member(15, 0xD4, "Logic")] public ECreateAsChild CreateAsChild;
        [RTTI.Member(16, 0xD8, "Logic")] public ECreateEntityFactionOverride FactionOverride;
        [RTTI.Member(17, 0xE0, "Logic")] public CPtr<EntityAction> EntityAction;
        [RTTI.Member(18, 0xE8, "Logic")] public ECreateEntityLifetime EntityLifetime;
    }

    [RTTI.Serializable(0x29058E4E70FD6CD3)]
    public class CreateEntityActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0xA0A2A87DE45E3502)]
    public class CreateEntityActorResource : EntityActorResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x80, "Logic")] public Ref<SpawnSetupConcrete> SpawnSetup;
        [RTTI.Member(2, 0x88, "Logic")] public bool LocalActor;
        [RTTI.Member(3, 0x89, "Logic")] public bool RemoveEntityOnUnBind;
        [RTTI.Member(4, 0x8A, "Logic")] public bool CensorSensitiveContent;
    }

    [RTTI.Serializable(0xAC798645815DEE32)]
    public class CreateExplosionAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<ExplosionResource> ExplosionResource;
        [RTTI.Member(1, 0x40, "Logic")] public Mat44 Matrix;
        [RTTI.Member(2, 0x80, "Logic")] public bool CreateRelativeToDamageLocation;
        [RTTI.Member(3, 0x81, "Logic")] public bool CopyDamageTypeFlagsFromContext;
        [RTTI.Member(4, 0x88, "Logic")] public String CreateRelativeToEntityHelper;
        [RTTI.Member(5, 0x90, "Logic")] public EAttackEventLinkType AttackEventLinkType;
    }

    [RTTI.Serializable(0x1F20CDC12022DD1D)]
    public class CreateGrenadeTriggerComponentAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<GrenadeTriggerComponentResource> ComponentResource;
        [RTTI.Member(1, 0x38, "Logic")] public bool TriggerWithThisAttackEvent;
    }

    [RTTI.Serializable(0x73D6D5DEC1294B2C)]
    public class CreditsColumn : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public WString Text;
        [RTTI.Member(1, 0x30, "General")] public Ref<MenuStyleClass> TextStyle;
        [RTTI.Member(2, 0x38, "General")] public Ref<MenuStyleClass> ColumnStyle;
        [RTTI.Member(3, 0x40, "General")] public Ref<UITexture> Texture;
    }

    [RTTI.Serializable(0x993D278B65361B3F)]
    public class CreditsRow : Resource
    {
        [RTTI.Member(0, 0x28, "Columns")] public Array<Ref<CreditsColumn>> Columns;
        [RTTI.Member(1, 0x38, "Columns")] public Ref<MenuStyleClass> RowStyle;
        [RTTI.Member(2, 0x40, "Columns")] public Ref<UITexture> Texture;
        [RTTI.Member(3, 0x48, "Columns")] public bool IsPartOfRobotFoundryCredits;
    }

    [RTTI.Serializable(0x73B1F3C970062210)]
    public class CrosshairColor : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x30, "Color")] public FRGBAColor Color;
    }

    [RTTI.Serializable(0xA4BCE8D24916B307)]
    public class CrowdComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2A2221D47ADAAC0D)]
    public class CrowdEventResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CrowdEventType EventType;
        [RTTI.Member(1, 0x2C, "Logic")] public float Radius;
        [RTTI.Member(2, 0x30, "Logic")] public float Duration;
        [RTTI.Member(3, 0x34, "Logic")] public int Priority;
    }

    [RTTI.Serializable(0x1C3A055C2172488F)]
    public class CrowdImpostorResource : EntityImpostorResource
    {
        [RTTI.Member(0, 0x48)] public Array<Ref<FactValue>> Facts;
    }

    [RTTI.Serializable(0x48C088C93DC4BB50)]
    public class CrowdManagerResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<CrowdSpawnManagerResource> CrowdSpawnManagerResource;
    }

    [RTTI.Serializable(0xAA45D1D88646B8CF)]
    public class CrowdMember : RTTIObject
    {
    }

    [RTTI.Serializable(0x9C27DC28C56F9095)]
    public class CrowdSequence : Entity
    {
    }

    [RTTI.Serializable(0xBF27AEC8FF5DB328)]
    public class CrowdSequenceResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<SequenceResource> SequenceResource;
        [RTTI.Member(1, 0x138, "Logic")] public float Weight;
    }

    [RTTI.Serializable(0x457E9B4A8F541B4A)]
    public class CrowdSpawnManager : CoreObject
    {
    }

    [RTTI.Serializable(0x57A180848459C786)]
    public class CrowdSpawnManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int MaxEntities;
        [RTTI.Member(1, 0x2C, "Logic")] public SpawnAlgorithmType SpawnAlgorithm;
        [RTTI.Member(2, 0x30, "Logic")] public String DefaultAIIndividualResourceName;
        [RTTI.Member(3, 0x38, "Logic")] public float StreamOutDistance;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<NavMeshBuilderSettings> NavMeshBuilderSettings;
        [RTTI.Member(5, 0x48, "Logic")] public Ref<EntityImpostorResource> DefaultImpostorResource;
    }

    [RTTI.Serializable(0x4FF97E7063155567)]
    public class CrowdZone : NavMeshArea
    {
        [RTTI.Member(0, 0xF0, "General")] public Array<CrowdZoneSpawnSetupLink> ConstantCrowdSpawnSetup;
        [RTTI.Member(1, 0x100, "General")] public Ref<SpawnSetupBase> CrowdSpawnSetup;
        [RTTI.Member(2, 0x108, "General")] public int MaxEntityCount;
    }

    [RTTI.Serializable(0xF0F98C9DD2C4315C)]
    public class CrowdZoneData : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xDBAE48228F07830A)]
    public class CrowdZoneManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xE095BA73D80C0A4B)]
    public class CrowdZoneSpawnSetupLink
    {
        [RTTI.Member(0, 0x0)] public int Amount;
        [RTTI.Member(1, 0x8)] public Ref<SpawnSetupBase> SpawnSetup;
    }

    [RTTI.Serializable(0xE98C3D5F11474DFF)]
    public class CubemapGBuffer : Resource
    {
        [RTTI.Member(0, 0x28, "Render")] public Ref<Texture> AlbedoTexture;
        [RTTI.Member(1, 0x30, "Render")] public Ref<Texture> NormalTexture;
        [RTTI.Member(2, 0x38, "Render")] public Ref<Texture> DepthTexture;
        [RTTI.Member(3, 0x40, "Render")] public Vec3 Position;
        [RTTI.Member(4, 0x50, "Render")] public float SkyLuminanceScale;
    }

    [RTTI.Serializable(0x505B9269AE3AB18F)]
    public class CubemapZone : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(1, 0x100, "General")] public float FadeDistance;
        [RTTI.Member(2, 0x104, "General")] public bool UseAsGlobal;
        [RTTI.Member(3, 0x105, "General")] public bool DisableRenormalization;
        [RTTI.Member(4, 0x108, "General")] public int Priority;
        [RTTI.Member(5, 0x10C, "General")] public float DefaultIntensity;
        [RTTI.Member(6, 0x110, "Render")] public int TextureResolution;
        [RTTI.Member(7, 0x114, "General")] public ECubemapZoneDataStorageMode StorageMode;
        [RTTI.Member(8, 0x118, "General")] public float StreamingActivationDistance;
        [RTTI.Member(9, 0x120, "Render")] public Ref<Texture> CubemapTexture;
    }

    [RTTI.Serializable(0xA594FAEE4B26B429)]
    public class CubemapZoneManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x3CC200D52CE9DC47)]
    public class CubemapbakeOnlyGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC668B09FA794005F)]
    public class CurveResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Vec2> Points;
        [RTTI.Member(1, 0x38, "General")] public Array<float> Tangents;
        [RTTI.Member(2, 0x58, "General")] public bool Smooth;
        [RTTI.Member(3, 0x88, "General", true)] public String HorizontalAxisName;
        [RTTI.Member(4, 0x90, "General", true)] public String VerticalAxisName;
    }

    [RTTI.Serializable(0x40E48BD894F27DD1)]
    public class CustomInstigatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA29CD0A813391689)]
    public class CustomInstigatorComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xBE44EA284E0F6EDA)]
    public class CustomQuestReward : QuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<GraphProgramResource> Graph;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<Texture> Icon;
        [RTTI.Member(2, 0x50, "Logic")] public Ref<UITexture> UIIcon;
        [RTTI.Member(3, 0x58, "Logic")] public Ref<LocalizedTextResource> DisplayName;
    }

    [RTTI.Serializable(0x4DF91FD99425A2E1)]
    public class DLCLocationMarkerResource : LocationMarkerResource
    {
        [RTTI.Member(0, 0xA0, "Logic")] public bool AutoDiscoveredWhenFogOfWarIsLifted;
    }

    [RTTI.Serializable(0xD4C9AFBFC7F766FA)]
    public class DLCManagerGameResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntitlementResource>> GOTYEntitlements;
        [RTTI.Member(1, 0x38, "Logic")] public Array<DLCReviewSaveWithEntitlements> DLCReviewSaves;
    }

    [RTTI.Serializable(0x212A6D5D88C9B17A)]
    public class DLCProductResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<DLCResource>> Packs;
        [RTTI.Member(1, 0x38)] public String ProductIdSuffix;
    }

    [RTTI.Serializable(0x9CE8EF01DC78DD0A)]
    public class DLCResource : Resource
    {
        [RTTI.Member(0, 0x28)] public int PackID;
        [RTTI.Member(1, 0x30)] public String PackName;
        [RTTI.Member(2, 0x38)] public String ProductIdSuffix;
    }

    [RTTI.Serializable(0xA92B2C6040AAE55D)]
    public class DLCReviewSaveResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> SaveTitle;
        [RTTI.Member(1, 0x30, "Logic")] public uint16 LevelID;
        [RTTI.Member(2, 0x38, "Logic")] public Array<uint8> SaveData;
    }

    [RTTI.Serializable(0x5C85034394C90A95)]
    public class DLCReviewSaveWithEntitlements
    {
        [RTTI.Member(0, 0x0, "Representation")] public Ref<LocalizedTextResource> MenuTitleText;
        [RTTI.Member(1, 0x8, "Logic")] public StreamingRef<DLCReviewSaveResource> ReviewSave;
        [RTTI.Member(2, 0x28, "Logic")] public Array<Ref<EntitlementResource>> RequiredEntitlements;
    }

    [RTTI.Serializable(0x2D54F201A61FA5D1)]
    public class DLCVariableActorResource : VariableActorResource
    {
        [RTTI.Member(0, 0x80, "Streaming")] public float Distance;
    }

    [RTTI.Serializable(0x90F9009DD4270C92)]
    public class DLCVoiceComponent : VoiceComponent
    {
    }

    [RTTI.Serializable(0x3FAF1CA93ABE8D9E)]
    public class DLCVoiceComponentResource : VoiceComponentResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public StreamingRef<VoiceSignalsResource> DLCSignals;
    }

    [RTTI.Serializable(0x1E2555B01102F012)]
    public class DRange
    {
        [RTTI.Member(0, 0x0)] public double Min;
        [RTTI.Member(1, 0x8)] public double Max;
    }

    [RTTI.Serializable(0xE5D50EE24C22D80D)]
    public class DamageActorEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xD0F710BD89CEFDE7)]
    public class DamageActorEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<LocatorResource> SourceLocatorResource;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(3, 0x48, "Logic")] public float DamageAmount;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<DestructibilityPart> DamagePart;
    }

    [RTTI.Serializable(0xE6368E56B30495DC)]
    public class DamageArea : Entity
    {
        [RTTI.Member(0, 0x0, "Logic")] public Vec3 BoxOverrideMax;
        [RTTI.Member(1, 0x0, "Logic")] public Vec3 BoxOverrideMin;
        [RTTI.Member(2, 0x0, "AI")] public Vec3 DangerAreaBoxOverrideMin;
        [RTTI.Member(3, 0x0, "AI")] public Vec3 DangerAreaBoxOverrideMax;
        [RTTI.Member(4, 0x330, "Logic")] public float DamagePerSecondOverride;
        [RTTI.Member(5, 0x334, "Logic")] public float RadiusOverride;
        [RTTI.Member(6, 0x360, "AI")] public float DangerAreaRadiusOverride;
        [RTTI.Member(7, 0x390, "Logic")] public CPtr<DamageTypeResource> DamageTypeResourceOverride;
    }

    [RTTI.Serializable(0xA617B06C0F166693)]
    public class DamageAreaResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Damage")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(1, 0x140, "Damage")] public bool IgnoreAttachedEntities;
        [RTTI.Member(2, 0x144, "Damage")] public float Interval;
        [RTTI.Member(3, 0x148, "Damage")] public float MaxContinuousDamageDuration;
        [RTTI.Member(4, 0x14C, "Damage")] public bool IrradiatingDamage;
        [RTTI.Member(5, 0x150, "Damage")] public float Radius;
        [RTTI.Member(6, 0x158, "Damage")] public Ref<CurveResource> RadiusOverTime;
        [RTTI.Member(7, 0x160, "Damage")] public bool RescaleDistanceCurvesToRadius;
        [RTTI.Member(8, 0x170, "Damage")] public BoundingBox3 Box;
        [RTTI.Member(9, 0x190, "Damage")] public float LifeTime;
        [RTTI.Member(10, 0x194, "Damage")] public bool UseParentInstigator;
        [RTTI.Member(11, 0x195, "Damage")] public bool ForceKill;
        [RTTI.Member(12, 0x196, "Damage")] public bool CheapCollisionCheck;
        [RTTI.Member(13, 0x198, "Damage")] public float Density;
        [RTTI.Member(14, 0x19C, "Damage")] public bool OnlyDamageEnemyFaction;
        [RTTI.Member(15, 0x19D, "Damage")] public bool ShouldIgnoreInstigator;
        [RTTI.Member(16, 0x19E, "Damage")] public bool BlockDamageByGeometry;
        [RTTI.Member(17, 0x19F, "Damage")] public bool MergeWithOverlappingAreas;
        [RTTI.Member(18, 0x1A0, "AI")] public bool IsDangerAreaDisabled;
        [RTTI.Member(19, 0x1A4, "AI")] public float DangerAreaRadius;
        [RTTI.Member(20, 0x1B0, "AI")] public BoundingBox3 DangerAreaBox;
    }

    [RTTI.Serializable(0x8F29B84184286E66)]
    public class DamageCausedReportComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6F10343B959E2947)]
    public class DamageCausedReportComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x9948C924332BB72F)]
    public class DamageDealtModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF45513F8D63FE1C6)]
    public class DamageDealtModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Filtering")] public TagPropertyLinkCollection RequiredTags;
        [RTTI.Member(1, 0x40, "Filtering")] public Array<Ref<DamageTypeResource>> DamageTypeResource;
        [RTTI.Member(2, 0x50, "Filtering")] public Array<GGUUID> TargetTypesUUIDs;
        [RTTI.Member(3, 0x60, "Filtering")] public Array<Ref<TagProperty>> DestructibilityPartTags;
        [RTTI.Member(4, 0x70, "Modifiers")] public float AmountMultiplier;
        [RTTI.Member(5, 0x74, "Modifiers")] public float AmountModifier;
        [RTTI.Member(6, 0x78, "Modifiers")] public float SeverityMultiplier;
        [RTTI.Member(7, 0x7C, "Modifiers")] public float SeverityModifier;
        [RTTI.Member(8, 0x80, "Logic")] public float AutoExpiryDuration;
    }

    [RTTI.Serializable(0x38B8AD82B9C1AFA8)]
    public class DamageEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(1, 0x40, "Logic")] public bool Kill;
        [RTTI.Member(2, 0x44, "Logic")] public float Amount;
        [RTTI.Member(3, 0x48, "Logic")] public float ImpactSeverity;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0xAA9A91868959E415)]
    public class DamageModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDB33F013B2FAA1AC)]
    public class DamageModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float DamageTakenModifier;
        [RTTI.Member(1, 0x2C, "Logic")] public float SeverityModifier;
        [RTTI.Member(2, 0x30, "Logic")] public bool MakeInvulnerable;
        [RTTI.Member(3, 0x34, "Logic")] public EDamageModifierTypeFilter DamageModifierTypeFilter;
        [RTTI.Member(4, 0x38, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(5, 0x48, "Logic")] public Array<Ref<TagProperty>> DestructibilityPartTags;
        [RTTI.Member(6, 0x58, "Logic")] public EDamageModifierTypeFilter PartTagsTypeFilter;
    }

    [RTTI.Serializable(0x1548213786666122)]
    public class DamageNullifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBB5090840FA709AE)]
    public class DamageNullifierComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x99B68DA095D88263)]
    public class DamageOnImpactComponent : ReactOnImpactComponent
    {
    }

    [RTTI.Serializable(0x3FB0D41DCB4D9C95)]
    public class DamageOnImpactComponentResource : ReactOnImpactComponentResource
    {
        [RTTI.Member(0, 0x30, "Damage")] public Array<Ref<DamageSettings>> DamageSettingsSP;
        [RTTI.Member(1, 0x40, "Damage")] public Array<Ref<DamageSettings>> DamageSettingsMP;
        [RTTI.Member(2, 0x50, "Damage")] public Array<Ref<DamageSettings>> DamageSettingsAI;
        [RTTI.Member(3, 0x60, "Damage")] public bool ForceKill;
        [RTTI.Member(4, 0x61, "Damage")] public bool OnlyDamageEnemyFaction;
    }

    [RTTI.Serializable(0x9DB3011CAB4F1EB2)]
    public class DamageOverTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCE0FD0E13A82E6CB)]
    public class DamageOverTimeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(1, 0x38, "Logic")] public float Duration;
        [RTTI.Member(2, 0x3C, "Logic")] public float Interval;
    }

    [RTTI.Serializable(0xF80FA08F889E5AF0)]
    public class DamagePassOnComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x53198DE01BEB3E38)]
    public class DamagePassOnComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool ShouldPassOnKillDamage;
        [RTTI.Member(1, 0x29, "Logic")] public bool IgnoreExplosions;
        [RTTI.Member(2, 0x2A, "Logic")] public bool IgnoreAreaDamage;
        [RTTI.Member(3, 0x2B, "Logic")] public bool SendDamageCaused;
    }

    [RTTI.Serializable(0x843454FA3D1E4B8B)]
    public class DamagePassOnData
    {
        [RTTI.Member(0, 0x0)] public Ref<DestructibilityPart> Part;
        [RTTI.Member(1, 0x8)] public float Multiplier;
    }

    [RTTI.Serializable(0xEAECC0960BB0EA3F)]
    public class DamageScoreEvent : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(1, 0x18)] public EScoreEvent ScoreEvent;
        [RTTI.Member(2, 0x1C)] public float TimeOut;
        [RTTI.Member(3, 0x20)] public int Points;
        [RTTI.Member(4, 0x24)] public bool OnKill;
        [RTTI.Member(5, 0x25)] public bool OnAssist;
        [RTTI.Member(6, 0x26)] public bool OnDamage;
    }

    [RTTI.Serializable(0xDB3FF56FDBBBDAEA)]
    public class DamageSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Damage")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x30, "Damage")] public float DamageAmount;
        [RTTI.Member(2, 0x34, "Physics")] public float ImpactSeverity;
        [RTTI.Member(3, 0x38, "Physics")] public float ImpactImpulse;
        [RTTI.Member(4, 0x3C, "Physics")] public float ImpactImpulseHumanoidFactor;
        [RTTI.Member(5, 0x40, "Damage")] public Ref<CurveResource> DamageOverDistance;
        [RTTI.Member(6, 0x48, "Physics")] public Ref<CurveResource> ImpactSeverityOverDistance;
        [RTTI.Member(7, 0x50, "Physics")] public Ref<CurveResource> ImpactImpulseOverDistance;
    }

    [RTTI.Serializable(0x6315E1A66AA4F144)]
    public class DamageStatDisplayEntry : StatDisplayEntry
    {
        [RTTI.Member(0, 0x38, "General")] public Ref<DamageSettings> DamageSettings;
    }

    [RTTI.Serializable(0x7B08FA713569E932)]
    public class DamageStatModifierResource : StatModifierResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<TagProperty>> AffectedPartTags;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<DamageTypeResource>> AffectedDamageTypeResources;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<DamageTypeGroup> AffectedDamageTypeGroup;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<CurveResource> RatingToDamageCurve;
        [RTTI.Member(4, 0x58, "Logic")] public Ref<CurveResource> RatingToSeverityCurve;
        [RTTI.Member(5, 0x60, "Logic")] public Ref<CurveResource> RatingToImpactImpulseCurve;
    }

    [RTTI.Serializable(0xED3629B5CED62855)]
    public class DamageTypeGroup : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<DamageTypeResource>> DamageTypeResources;
    }

    [RTTI.Serializable(0x844E0F2D968DBFEA)]
    public class DamageTypeMultiplier
    {
        [RTTI.Member(0, 0x0, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x8, "Logic")] public float Multiplier;
    }

    [RTTI.Serializable(0x15E8608E4DD6F3F4)]
    public class DamageTypeResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<DamageTypeResource> BaseDamageTypeResource;
        [RTTI.Member(1, 0x30, "AI")] public Ref<AIHapticStimulusResource> HapticStimulus;
        [RTTI.Member(2, 0x38, "General")] public ETriState EligibleForHeadshots;
    }

    [RTTI.Serializable(0x8B9934A6350CE18B)]
    public class DamageTypeResourceSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<DamageTypeResource> DefaultDamageTypeResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<DamageTypeResource> PhysicsDamageTypeResource;
    }

    [RTTI.Serializable(0xDB0ACEEACE91FE11)]
    public class DamageTypeResourceSettingsGame : DamageTypeResourceSettings
    {
        [RTTI.Member(0, 0x38, "Logic")] public Array<Ref<DamageTypeResource>> HeadshotDamageTypeResources;
        [RTTI.Member(1, 0x48, "Logic")] public Array<Ref<DamageTypeResource>> StealthKillDamageTypeResources;
        [RTTI.Member(2, 0x58, "Logic")] public Array<Ref<DamageTypeResource>> IgnoredByAIDamageTypeResources;
    }

    [RTTI.Serializable(0x8746F99529328C00)]
    public class DamageTypeStatsDisplayResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<DamageTypeResource> DamageType;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<StatDisplayEntry> StatDisplayEntry;
    }

    [RTTI.Serializable(0xBB8BB1020A8378B7)]
    public class DamageTypeToEntityStatMap
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(1, 0x10)] public EPlayerScoreEntityStat EntityStat;
    }

    [RTTI.Serializable(0x7D78B093306926D5)]
    public class DamagerIDAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<int> DamagerIDs;
    }

    [RTTI.Serializable(0x35F78209FCBF8E08)]
    public class DangerAreaCapsuleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1DEE132DBB5108A6)]
    public class DangerAreaCapsuleComponentResource : DangerAreaComponentResource
    {
        [RTTI.Member(0, 0x38)] public float RadiusBase;
        [RTTI.Member(1, 0x3C)] public float Length;
        [RTTI.Member(2, 0x40)] public float RadiusOut;
    }

    [RTTI.Serializable(0x72E21D71FA56BBAA)]
    public class DangerAreaComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public String HelperName;
        [RTTI.Member(1, 0x30)] public EAIDangerAreaType DangerType;
    }

    [RTTI.Serializable(0xE5DB553C071C9887)]
    public class DangerAreaOrientedBoxComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5BC1E69B473AA014)]
    public class DangerAreaOrientedBoxComponentResource : DangerAreaComponentResource
    {
        [RTTI.Member(0, 0x40)] public Vec3 Extents;
    }

    [RTTI.Serializable(0x1E1ED1803A2B5C3D)]
    public class DangerAreaSphereComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x17A177546D66FF8F)]
    public class DangerAreaSphereComponentResource : DangerAreaComponentResource
    {
        [RTTI.Member(0, 0x38)] public float Radius;
    }

    [RTTI.Serializable(0x2A753008990D4F78)]
    public class DataSource : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4E9B8DAB2F012294)]
    public class DataSourceAmmoCrafting : DataSource
    {
    }

    [RTTI.Serializable(0xDC1DADCED100CE0)]
    public class DataSourceAmmoInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x892F179466FD6AC1)]
    public class DataSourceAmmoRecipeGroups : DataSourceRecipeGroups
    {
    }

    [RTTI.Serializable(0xA7C87F2DB08868F8)]
    public class DataSourceBenchmarkResults : DataSource
    {
    }

    [RTTI.Serializable(0x4DE030A9AD0A32F5)]
    public class DataSourceCollectables : DataSource
    {
    }

    [RTTI.Serializable(0x606158B0DBB9FBD1)]
    public class DataSourceCollectablesResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Array<Ref<CollectableStyleMapping>> CollectableStyles;
        [RTTI.Member(1, 0x38, "Properties")] public Ref<MenuStyleClass> MarginRightStyleClass;
        [RTTI.Member(2, 0x40, "Properties")] public Ref<MenuStyleClass> MarginBottomStyleClass;
        [RTTI.Member(3, 0x48, "Properties")] public int NumberOfColumsPerRegion;
        [RTTI.Member(4, 0x4C, "Properties")] public UUIDRef<CollectableType> CollectableTypeVantages;
        [RTTI.Member(5, 0x5C, "Properties")] public UUIDRef<CollectableType> CollectableTypeArtifacts;
        [RTTI.Member(6, 0x6C, "Properties")] public UUIDRef<CollectableType> CollectableTypeTrees;
        [RTTI.Member(7, 0x7C, "Properties")] public UUIDRef<CollectableType> CollectableTypePlants;
        [RTTI.Member(8, 0x8C, "Properties")] public UUIDRef<CollectableType> CollectableTypeHolograms;
        [RTTI.Member(9, 0x9C, "Properties")] public UUIDRef<CollectableType> CollectableTypePaints;
        [RTTI.Member(10, 0xB0, "Properties")] public Ref<LocalizedTextResource> CollectablesRegionDescription;
    }

    [RTTI.Serializable(0x20BD5BFE4F4E5E00)]
    public class DataSourceControllerMapping : DataSource
    {
    }

    [RTTI.Serializable(0x88A2FAC97F54F8FC)]
    public class DataSourceControllerMappingResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x997E8DAAF8C7D38D)]
    public class DataSourceCredits : DataSource
    {
    }

    [RTTI.Serializable(0x1725F7AB7E228F8C)]
    public class DataSourceCreditsResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Array<Ref<CreditsRow>> CreditRows;
    }

    [RTTI.Serializable(0x32FEC1BC94556867)]
    public class DataSourceDataCubes : DataSource
    {
    }

    [RTTI.Serializable(0xE0B784D7596166A1)]
    public class DataSourceDataCubesResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Array<Ref<CollectableStyleMapping>> CollectableStyles;
        [RTTI.Member(1, 0x38, "Properties")] public int NumberOfColumsPerType;
        [RTTI.Member(2, 0x3C, "Properties")] public UUIDRef<CollectableType> CollectableTypeText;
        [RTTI.Member(3, 0x4C, "Properties")] public UUIDRef<CollectableType> CollectableTypeAudio;
        [RTTI.Member(4, 0x5C, "Properties")] public UUIDRef<CollectableType> CollectableTypeHologram;
        [RTTI.Member(5, 0x6C, "Properties")] public UUIDRef<CollectableType> CollectableTypeBook;
    }

    [RTTI.Serializable(0x6241806C6D08CBD6)]
    public class DataSourceDebugLoadingHints : DataSource
    {
    }

    [RTTI.Serializable(0x854E1FDC962727BF)]
    public class DataSourceEntitlements : DataSource
    {
    }

    [RTTI.Serializable(0x7BAACA604E63F4E2)]
    public class DataSourceEntitlementsResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<EntitlementResource> DLCPackEntitlementKey;
    }

    [RTTI.Serializable(0x222F45A1A9AEF35F)]
    public class DataSourceEntityInventory : DataSourceLootableInventory
    {
    }

    [RTTI.Serializable(0xEBBD12D2659460B6)]
    public class DataSourceEquipmentInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x46416B30D31629AB)]
    public class DataSourceEquipmentInventoryResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<EnumFactValue> CompareQuestToShowHackingPerkSetsFact;
        [RTTI.Member(1, 0x30, "Properties")] public Array<Ref<PerkSet>> HackingPerkSets;
        [RTTI.Member(2, 0x40, "Properties")] public Ref<PerkSet> DLCHackingPerkSet;
        [RTTI.Member(3, 0x48, "Properties")] public Ref<UITexture> WeaponEquippedIconTop;
        [RTTI.Member(4, 0x50, "Properties")] public Ref<UITexture> WeaponEquippedIconLeft;
        [RTTI.Member(5, 0x58, "Properties")] public Ref<UITexture> WeaponEquippedIconBottom;
        [RTTI.Member(6, 0x60, "Properties")] public Ref<UITexture> WeaponEquippedIconRight;
    }

    [RTTI.Serializable(0xC9FCB865A3C92748)]
    public class DataSourceFacts : DataSource
    {
    }

    [RTTI.Serializable(0x73C816080D560127)]
    public class DataSourceFactsResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Facts")] public Array<Ref<BooleanFact>> E3HandsOnBooleanFacts;
        [RTTI.Member(1, 0x38, "Facts")] public Ref<BooleanFact> E3TheatreDemoBooleanFact;
    }

    [RTTI.Serializable(0x67C029432BB814F9)]
    public class DataSourceFastTravelLoading : DataSource
    {
    }

    [RTTI.Serializable(0x71DD7D1024645C34)]
    public class DataSourceGame : DataSource
    {
    }

    [RTTI.Serializable(0x42A8388C0F49133B)]
    public class DataSourceGameLoading : DataSource
    {
    }

    [RTTI.Serializable(0xA0A1045C12AFC37F)]
    public class DataSourceGameStatistics : DataSource
    {
    }

    [RTTI.Serializable(0xAB9442134F0B5AB9)]
    public class DataSourceGameStatisticsResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<GameStatisticsGroup>> ProgressionGroups;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<GameStatisticsGroupContainer> DLC1ProgressionGroupContainer;
        [RTTI.Member(2, 0x40, "Logic")] public Array<Ref<GameStatisticsGroup>> StatisticsGroups;
    }

    [RTTI.Serializable(0x33FBEAD79F6CE155)]
    public class DataSourceGraphicsDisplayImage : DataSource
    {
    }

    [RTTI.Serializable(0x9D3DF1AD09BA8C6D)]
    public class DataSourceGraphicsDisplayImageResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x6C928D53A1F7B750)]
    public class DataSourceHealthWarning : DataSource
    {
    }

    [RTTI.Serializable(0xF7E9A2CDA43975A6)]
    public class DataSourceIntro : DataSource
    {
    }

    [RTTI.Serializable(0x1D956FF3500175CC)]
    public class DataSourceInventory : DataSource
    {
    }

    [RTTI.Serializable(0x618027E801B3F59E)]
    public class DataSourceInventoryCapacity : DataSource
    {
    }

    [RTTI.Serializable(0x68E288705F8B3E35)]
    public class DataSourceLanguageList : DataSource
    {
    }

    [RTTI.Serializable(0xBA7B64D78B942F42)]
    public class DataSourceLanguageListResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesEurope1;
        [RTTI.Member(1, 0x38, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesEurope2;
        [RTTI.Member(2, 0x48, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesEurope3;
        [RTTI.Member(3, 0x58, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesUS;
        [RTTI.Member(4, 0x68, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesLatinAmerica;
        [RTTI.Member(5, 0x78, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesJapan;
        [RTTI.Member(6, 0x88, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesAsia;
        [RTTI.Member(7, 0x98, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesChina;
        [RTTI.Member(8, 0xA8, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesUK;
        [RTTI.Member(9, 0xB8, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesGermany;
        [RTTI.Member(10, 0xC8, "AdditionalLanguages")] public Array<ELanguage> AdditionalLanguagesUSCombined;
    }

    [RTTI.Serializable(0x3CE2C9DB45E31D8A)]
    public class DataSourceLegend : DataSource
    {
    }

    [RTTI.Serializable(0x6C41137691538B28)]
    public class DataSourceLegendResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x1015E0D18440E648)]
    public class DataSourceLoading : DataSource
    {
    }

    [RTTI.Serializable(0x8894F9879035B428)]
    public class DataSourceLoadingText : DataSource
    {
    }

    [RTTI.Serializable(0x217ED8263052EF92)]
    public class DataSourceLocationMarker : DataSource
    {
    }

    [RTTI.Serializable(0xBF861F112BE6A68E)]
    public class DataSourceLootBoxInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x7547186285CAAB8)]
    public class DataSourceLootPackageInventory : DataSourceLootableInventory
    {
    }

    [RTTI.Serializable(0x2CDACAB941C3035E)]
    public class DataSourceLootableInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0xAC6CB9C072AA849C)]
    public class DataSourceMapIconFilter : DataSource
    {
    }

    [RTTI.Serializable(0x69A855A23A35919B)]
    public class DataSourceMapIconFilterResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> UnrevealedText;
    }

    [RTTI.Serializable(0x65EDA09952D3C70B)]
    public class DataSourceMapZone : DataSource
    {
    }

    [RTTI.Serializable(0xACD0C471AFA6371B)]
    public class DataSourceMenuBadgeCount : DataSource
    {
    }

    [RTTI.Serializable(0x7B7846A180AD2232)]
    public class DataSourceMenuFade : DataSource
    {
    }

    [RTTI.Serializable(0x4FFA973E4B647D48)]
    public class DataSourceMerchant : DataSource
    {
    }

    [RTTI.Serializable(0x251E4B7926DFEC6)]
    public class DataSourceMerchantResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Array<MenuInventorySortOrder> MerchantInventorySortOrder;
        [RTTI.Member(1, 0x38, "Properties")] public Ref<BooleanFact> ErrandsEnabledFact;
    }

    [RTTI.Serializable(0xF4576D691F3FEF49)]
    public class DataSourceModificationInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0xD39AD4F7326EEE6A)]
    public class DataSourceModify : DataSourceInventory
    {
    }

    [RTTI.Serializable(0xD2D4DDBE39D8C383)]
    public class DataSourceModifyResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PerkLevel> ModificationRecyclerPerk;
    }

    [RTTI.Serializable(0x1EE91A81E9667030)]
    public class DataSourceMonitor : DataSource
    {
    }

    [RTTI.Serializable(0x2013DBC3B00C0217)]
    public class DataSourceMonitorResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x57B247D384EF3465)]
    public class DataSourceMovie : DataSource
    {
    }

    [RTTI.Serializable(0xB581E2DCF698ECA7)]
    public class DataSourceNPManager : DataSource
    {
    }

    [RTTI.Serializable(0xB6D3CE44E2223DDC)]
    public class DataSourceNetManager : DataSource
    {
    }

    [RTTI.Serializable(0x732E65957682F922)]
    public class DataSourceNetworkError : DataSource
    {
    }

    [RTTI.Serializable(0xD610931C057A20EB)]
    public class DataSourceOutfitInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0xAB3AD669D1DE31CC)]
    public class DataSourceOutfitInventoryResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<LocalizedTextResource> CannotChangeOutfitDescription;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<BooleanFact> AloyHasDisguiseOn;
    }

    [RTTI.Serializable(0x2318ED78CE0AD775)]
    public class DataSourceOutfitSlot : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x6C87F89D1440F9C7)]
    public class DataSourcePhotoMode : DataSource
    {
    }

    [RTTI.Serializable(0xEBDF69C42E0B3F9B)]
    public class DataSourcePlayGo : DataSource
    {
    }

    [RTTI.Serializable(0x55420A8CEA21E4B0)]
    public class DataSourcePlayerCharacterPerks : DataSource
    {
    }

    [RTTI.Serializable(0x18206CEF1D24FA57)]
    public class DataSourcePlayerCharacterPerksResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public UUIDRef<PerkCategory> PerkCategoryProwler;
        [RTTI.Member(1, 0x38, "Properties")] public UUIDRef<PerkCategory> PerkCategoryBrave;
        [RTTI.Member(2, 0x48, "Properties")] public UUIDRef<PerkCategory> PerkCategoryForager;
        [RTTI.Member(3, 0x58, "Properties")] public UUIDRef<PerkCategory> PerkCategoryDLC;
        [RTTI.Member(4, 0x68, "Properties")] public Ref<MenuStyleClass> PerkTreeStyleProwler;
        [RTTI.Member(5, 0x70, "Properties")] public Ref<MenuStyleClass> PerkTreeStyleBrave;
        [RTTI.Member(6, 0x78, "Properties")] public Ref<MenuStyleClass> PerkTreeStyleForager;
        [RTTI.Member(7, 0x80, "Properties")] public Ref<MenuStyleClass> PerkTreeStyleDLC;
        [RTTI.Member(8, 0x88, "Properties")] public Ref<MenuStyleClass> PerkStyleAcquirable;
        [RTTI.Member(9, 0x90, "Properties")] public Ref<MenuStyleClass> PerkStyleHidden;
        [RTTI.Member(10, 0x98, "Properties")] public Ref<MenuStyleClass> PerkStyleLocked;
    }

    [RTTI.Serializable(0x6F7F246E821E3C0A)]
    public class DataSourcePlusCheck : DataSource
    {
    }

    [RTTI.Serializable(0xC8E84A367B5C2507)]
    public class DataSourceProcessSlotInfo : DataSource
    {
    }

    [RTTI.Serializable(0xE1115C30968C96D5)]
    public class DataSourceProcessSlotInfoResource : DataSourceResource
    {
    }

    [RTTI.Serializable(0x3968CBADD7B97564)]
    public class DataSourceQuests : DataSource
    {
    }

    [RTTI.Serializable(0x5946F8AF642F75B0)]
    public class DataSourceQuestsResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<QuestCategory> ErrandQuestCategory;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<QuestCategory> SideQuestCategory;
        [RTTI.Member(2, 0x38, "Properties")] public Ref<QuestCategory> MainQuestCategory;
        [RTTI.Member(3, 0x40, "Properties")] public Ref<QuestCategory> ActivityHuntingGroundCategory;
        [RTTI.Member(4, 0x48, "Properties")] public int DifficultyOffset;
        [RTTI.Member(5, 0x50, "Properties")] public Ref<EnumFactValue> CompareQuestToUnlockCategoriesFact;
        [RTTI.Member(6, 0x58, "Properties")] public Array<Ref<MedalQuestRewardDisplayEntry>> HuntingGroundQuestRewards;
        [RTTI.Member(7, 0x68, "Properties")] public Array<Ref<MedalQuestRewardDisplayEntry>> DLCHuntingGroundQuestRewards;
        [RTTI.Member(8, 0x78, "Properties")] public Ref<MenuStyleClass> HuntingGroundTrialCompletedStyleClass;
        [RTTI.Member(9, 0x80, "Properties")] public Ref<HuntingGroundTrialLog> DLCHuntingGroundTrialLog;
    }

    [RTTI.Serializable(0xD5DF72126C00E45D)]
    public class DataSourceRandomBackgroundResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Array<StreamingRef<UITexture>> TextureList;
    }

    [RTTI.Serializable(0xF3DB840B2007DC48)]
    public class DataSourceRecipeGroups : DataSource
    {
    }

    [RTTI.Serializable(0x72E1EAB64CB30BFC)]
    public class DataSourceRegion : DataSource
    {
    }

    [RTTI.Serializable(0xCFB58C7D183DAE2B)]
    public class DataSourceRegionResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<LocalizedTextResource> LegalLineEurope;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<LocalizedTextResource> LegalLineAmerica;
        [RTTI.Member(2, 0x38, "Properties")] public Ref<LocalizedTextResource> LegalLineEnglishGlobal;
        [RTTI.Member(3, 0x40, "Properties")] public Ref<LocalizedTextResource> LegalLineAsia;
        [RTTI.Member(4, 0x48, "Properties")] public Ref<LocalizedTextResource> LegalLineJapan;
        [RTTI.Member(5, 0x50, "Properties")] public Ref<LocalizedTextResource> LegalLineChina;
        [RTTI.Member(6, 0x58, "Properties")] public bool ShowTradeMarkEurope;
        [RTTI.Member(7, 0x59, "Properties")] public bool ShowTradeMarkUS;
        [RTTI.Member(8, 0x5A, "Properties")] public bool ShowTradeMarkAmerica;
        [RTTI.Member(9, 0x5B, "Properties")] public bool ShowTradeMarkAsia;
        [RTTI.Member(10, 0x5C, "Properties")] public bool ShowTradeMarkJapan;
        [RTTI.Member(11, 0x5D, "Properties")] public bool ShowTradeMarkChina;
        [RTTI.Member(12, 0x60, "Properties")] public Ref<UITexture> GGLogoEurope;
        [RTTI.Member(13, 0x68, "Properties")] public Ref<UITexture> GGLogoAmerica;
        [RTTI.Member(14, 0x70, "Properties")] public Ref<UITexture> GGLogoAsia;
        [RTTI.Member(15, 0x78, "Properties")] public Ref<UITexture> GGLogoJapan;
        [RTTI.Member(16, 0x80, "Properties")] public Ref<UITexture> GGLogoChina;
        [RTTI.Member(17, 0x88, "Properties")] public Ref<UITexture> DLC1LogoTM;
        [RTTI.Member(18, 0x90, "Properties")] public Ref<UITexture> DLC1LogoNoTM;
        [RTTI.Member(19, 0x98, "Properties")] public Ref<UITexture> DLC1LogoJapan;
        [RTTI.Member(20, 0xA0, "Properties")] public Ref<UITexture> DLC1LogoChina;
    }

    [RTTI.Serializable(0x9CE8E0A9257DFA3B)]
    public class DataSourceResource : Resource
    {
    }

    [RTTI.Serializable(0x2BF3BEB1001FE27E)]
    public class DataSourceResourceInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x85C7D522A84828E8)]
    public class DataSourceResourceInventoryResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "SortOrders")] public Ref<LocalizedTextResource> RarityAscName;
        [RTTI.Member(1, 0x30, "SortOrders")] public Ref<LocalizedTextResource> RarityDescName;
        [RTTI.Member(2, 0x38, "SortOrders")] public Ref<LocalizedTextResource> ItemSellValueAscName;
        [RTTI.Member(3, 0x40, "SortOrders")] public Ref<LocalizedTextResource> ItemSellValueDescName;
        [RTTI.Member(4, 0x48, "SortOrders")] public Ref<LocalizedTextResource> ItemCategoryName;
    }

    [RTTI.Serializable(0xF17BE8362AB2C5A8)]
    public class DataSourceRobotCatalogue : DataSource
    {
    }

    [RTTI.Serializable(0xC18E71E3C977B0F3)]
    public class DataSourceRobotCatalogueResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "PerkLevels")] public Ref<PerkLevel> GenericHackingPerk;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<DamageTypeStatsDisplayResource>> DamageTypeStatsDisplayResources;
        [RTTI.Member(2, 0x40, "PerkLevels")] public Array<Ref<PerkSet>> HackingPerkSets;
    }

    [RTTI.Serializable(0x8024425D8CEA3565)]
    public class DataSourceSaveGame : DataSource
    {
    }

    [RTTI.Serializable(0x63675A2352CF3255)]
    public class DataSourceSettings : DataSource
    {
    }

    [RTTI.Serializable(0x4056E4BAD83660F7)]
    public class DataSourceSettingsResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public Array<float> MusicVolumeValues;
        [RTTI.Member(1, 0x38, "Properties")] public Array<float> SpeechVolumeValues;
        [RTTI.Member(2, 0x48, "Properties")] public Array<float> SFXVolumeValues;
        [RTTI.Member(3, 0x58, "Properties")] public Array<float> GammaValues;
    }

    [RTTI.Serializable(0x5796879C2FDF27EF)]
    public class DataSourceSkipSequence : DataSource
    {
    }

    [RTTI.Serializable(0xF3EBAE499C09DFFE)]
    public class DataSourceSpecialItemInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0xD07CD81F6EFAD365)]
    public class DataSourceStats : DataSource
    {
    }

    [RTTI.Serializable(0x590C18058E521C5E)]
    public class DataSourceTermsAndConditions : DataSource
    {
    }

    [RTTI.Serializable(0x4549706E9B3D69BA)]
    public class DataSourceTermsAndConditionsResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "LocalizedTextEntries")] public Ref<LocalizedTextResource> EULAText;
    }

    [RTTI.Serializable(0xE0CE28D35A1A7B82)]
    public class DataSourceToolCrafting : DataSource
    {
    }

    [RTTI.Serializable(0xC0DA2B6574228F32)]
    public class DataSourceToolInventory : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x8E57460E6D739513)]
    public class DataSourceToolRecipeGroups : DataSourceRecipeGroups
    {
    }

    [RTTI.Serializable(0xB4ABCAB8ECE0B50C)]
    public class DataSourceToolSlots : DataSourceInventory
    {
    }

    [RTTI.Serializable(0xFE83C11F8AE1145F)]
    public class DataSourceTrial : DataSource
    {
    }

    [RTTI.Serializable(0xD13BC6316CC8A22E)]
    public class DataSourceTrophyCheck : DataSource
    {
    }

    [RTTI.Serializable(0x2F249E765C51BF2A)]
    public class DataSourceUpgradeCrafting : DataSource
    {
    }

    [RTTI.Serializable(0xC0B102AB42E4D844)]
    public class DataSourceUpgradeRecipeGroups : DataSourceRecipeGroups
    {
    }

    [RTTI.Serializable(0x23DA7CE9A514679A)]
    public class DataSourceWeaponAmmo : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x789380D1FDA25C07)]
    public class DataSourceWeaponSlots : DataSourceInventory
    {
    }

    [RTTI.Serializable(0x5250712E41A65729)]
    public class DataTag : Tag
    {
    }

    [RTTI.Serializable(0xBA185718C9CC7933)]
    public class DataTrackedQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0xE9FFD9CEB906C7D7)]
    public class DeactivateInventoryEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<InventoryEntityResource> AbilityResource;
    }

    [RTTI.Serializable(0x72832C4E167296B3)]
    public class DeathCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0xFE20C9C0D7D6BBAD)]
    public class DeathCameraEntityRep : CameraEntityRep
    {
    }

    [RTTI.Serializable(0x12F85A524B22F0E0)]
    public class DeathCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(0, 0x1D8, "Logic")] public float ActivateBlendTime;
        [RTTI.Member(1, 0x1DC, "Logic")] public float DeactivateBlendTime;
    }

    [RTTI.Serializable(0xF4132A13E50B0177)]
    public class DebugFlagAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String DebugFlag;
        [RTTI.Member(1, 0x48, "Logic")] public EDebugFlagDefault NonRuntimeDebugDefault;
    }

    [RTTI.Serializable(0x13BF1953598CF27A)]
    public class DebugSettings : RTTIObject
    {
    }

    [RTTI.Serializable(0x88CEE0AC20403135)]
    public class DebugToolGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE647628DADF179A5)]
    public class DecalManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x962A66A74541B42C)]
    public class DecalResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public int MaxDecals;
        [RTTI.Member(1, 0x2C, "General")] public int DecalThreshold;
        [RTTI.Member(2, 0x30, "General")] public bool RandomRotation;
        [RTTI.Member(3, 0x34, "General")] public float MinSize;
        [RTTI.Member(4, 0x38, "General")] public float MaxSize;
        [RTTI.Member(5, 0x3C, "General")] public float FadeInTime;
        [RTTI.Member(6, 0x44, "General")] public float FadeTime;
        [RTTI.Member(7, 0x4C, "General")] public bool FadeZeroToOne;
        [RTTI.Member(8, 0x4D, "General")] public bool ClipDecal;
        [RTTI.Member(9, 0x50, "General")] public float MaxUpClipAngle;
        [RTTI.Member(10, 0x58, "General")] public float OverlapRatio;
        [RTTI.Member(11, 0x5C, "General")] public bool AllowStretching;
        [RTTI.Member(12, 0x5D, "General")] public bool HeightInfoInColor;
        [RTTI.Member(13, 0x60, "General")] public EDecalAlignment Alignment;
        [RTTI.Member(14, 0x64, "General")] public EDecalProjectionMode ProjectionMode;
        [RTTI.Member(15, 0x68, "General")] public DrawableCullInfo CullInfo;
        [RTTI.Member(16, 0x70, "Rendering")] public Ref<RenderEffectResource> RenderEffectsResource;
        [RTTI.Member(17, 0x78, "Rendering")] public int mFrameCountU;
        [RTTI.Member(18, 0x7C, "Rendering")] public int mFrameCountV;
        [RTTI.Member(19, 0x80, "MeshInstancing")] public Ref<StaticMeshResource> MeshResource;
        [RTTI.Member(20, 0x8C, "MeshInstancing")] public float MeshSizeRescale;
        [RTTI.Member(21, 0x90, "MeshInstancing")] public float MeshVisualRadius;
        [RTTI.Member(22, 0x94, "MeshInstancing")] public bool MeshUsingWorldData;
        [RTTI.Member(23, 0x98, "MeshInstancing")] public Array<DecalShaderVariable> MeshShaderVariables;
    }

    [RTTI.Serializable(0x7EA5BF5FFAAEFBC4)]
    public class DecalShaderVariable
    {
        [RTTI.Member(0, 0x0, true)] public String VariableID;
        [RTTI.Member(1, 0x8)] public EDecalVariableSource Source;
        [RTTI.Member(2, 0xC)] public uint32 VariableIDHash;
        [RTTI.Member(3, 0x10)] public float Default;
    }

    [RTTI.Serializable(0xB36F74417118DABC)]
    public class DeconstructEntityAction : EntityAction
    {
    }

    [RTTI.Serializable(0x8361D451D55F5EB6)]
    public class DefendAreaUserComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x57105BDC7F56C798)]
    public class DefendSpawnCommand : SpawnCommand
    {
        [RTTI.Member(0, 0x60, "Logic")] public Ref<AIDefendAreaSet> DefendAreaSet;
    }

    [RTTI.Serializable(0x6FE71499CB6354EB)]
    public class DelayGravityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD47FB1B710B3DFE1)]
    public class DelayGravityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float DelayTime;
    }

    [RTTI.Serializable(0x7E7E4997B8ACAE8A)]
    public class DelayedAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(1, 0x38, "Logic")] public float Delay;
        [RTTI.Member(2, 0x3C, "Logic")] public float RandomDelay;
    }

    [RTTI.Serializable(0x112F385AE3432DED)]
    public class DelayedDeathComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x87517769AFC48527)]
    public class DelayedDeathComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String DelayDeathAnimationTag;
        [RTTI.Member(1, 0x30, "Logic")] public String DelayDeathAnimationAction;
    }

    [RTTI.Serializable(0xF33406203296F83E)]
    public class DelayedRemoveEntityComponent : EntityComponent
    {
        [RTTI.Member(0, 0x58, "Logic")] public float Delay;
    }

    [RTTI.Serializable(0x4BEFD921A5517EAF)]
    public class DelayedRemoveEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Delay;
    }

    [RTTI.Serializable(0x58DB3CE83A473653)]
    public class DelayedScriptMessage : ScriptMessage
    {
        [RTTI.Member(0, 0x68, "StateSaving", true)] public float TimeLeft;
    }

    [RTTI.Serializable(0xFEB100F7E49548AE)]
    public class DensityGraphProgram : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public uint64 WorldDataUsageMask;
        [RTTI.Member(1, 0x28)] public uint64 TextureUsageMask;
        [RTTI.Member(2, 0x40)] public Ref<ShaderResource> BakedShader;
        [RTTI.Member(3, 0x98)] public EDensityJobType BakedShaderJobType;
        [RTTI.Member(4, 0xA0)] public MurmurHashValue Hash;
    }

    [RTTI.Serializable(0x6169F1E9C1EB8DDE)]
    public class DensityNodeBase : Resource
    {
    }

    [RTTI.Serializable(0x629F0CA246CF8BF9)]
    public class DeprecatedAmbienceSettings
    {
        [RTTI.Member(0, 0x0)] public AtmosphericScattingSettings AtmosphereSettings;
        [RTTI.Member(1, 0x120)] public ExposureSettings ExposureSettings;
        [RTTI.Member(2, 0x190)] public LightShaftSettings LightShaftSettings;
        [RTTI.Member(3, 0x1E0)] public BloomSettings BloomSettings;
        [RTTI.Member(4, 0x240)] public CloudRenderSettings CloudRenderSettings;
        [RTTI.Member(5, 0x25C)] public float SunLightIntensityScale;
        [RTTI.Member(6, 0x260)] public float StaticIndirectScale;
        [RTTI.Member(7, 0x264)] public float SkyLightScale;
        [RTTI.Member(8, 0x268)] public float SkyLightDesaturate;
        [RTTI.Member(9, 0x26C)] public float SunElevationAngle;
        [RTTI.Member(10, 0x270)] public float SunAzimuthAngle;
        [RTTI.Member(11, 0x274)] public float MoonElevationAngle;
        [RTTI.Member(12, 0x278)] public float MoonAzimuthAngle;
        [RTTI.Member(13, 0x27C)] public float MoonDistance;
    }

    [RTTI.Serializable(0x26CC7024E816E5F9)]
    public class DepthOfFieldSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public float NearFuzzy;
        [RTTI.Member(1, 0x4, "Settings")] public float NearSharp;
        [RTTI.Member(2, 0x8, "Settings")] public float FarSharp;
        [RTTI.Member(3, 0xC, "Settings")] public float FarFuzzy;
        [RTTI.Member(4, 0x10, "Settings")] public float MaxFuzzyNear;
        [RTTI.Member(5, 0x14, "Settings")] public float MaxFuzzyFar;
        [RTTI.Member(6, 0x18, "Settings")] public EPostProcessBlendMode BlendMode;
    }

    [RTTI.Serializable(0x1CBE4058F5BF1D48)]
    public class DepthOfFieldSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public DepthOfFieldSettings DepthOfFieldSettings;
    }

    [RTTI.Serializable(0xE61496B143A7948F)]
    public class DerivedStatResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<CompoundStatResource> DerivedStats;
    }

    [RTTI.Serializable(0x6AE0A296C3FA208)]
    public class DestroyComponentAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityComponentResource> ComponentResource;
        [RTTI.Member(1, 0x38, "Logic")] public bool DestroyMultiple;
    }

    [RTTI.Serializable(0x2B26248B33CBB837)]
    public class Destructibility : EntityComponent
    {
    }

    [RTTI.Serializable(0x3D6A6EA3B4BBD6CB)]
    public class DestructibilityConstraint : Resource
    {
        [RTTI.Member(0, 0x28)] public bool Enabled;
        [RTTI.Member(1, 0x30)] public Ref<DestructibilityPart> PartA;
        [RTTI.Member(2, 0x38)] public Ref<DestructibilityPart> PartB;
        [RTTI.Member(3, 0x40)] public Ref<PhysicsConstraintResource> Resource;
        [RTTI.Member(4, 0x48)] public CPtr<EntityAction> BrokenAction;
        [RTTI.Member(5, 0x50)] public String ReferenceFrameHelperNode;
    }

    [RTTI.Serializable(0xEAEFD2965A2FEF44)]
    public class DestructibilityConstraintState : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<DestructibilityConstraint> Constraint;
        [RTTI.Member(1, 0x28)] public bool Enabled;
    }

    [RTTI.Serializable(0x88830A1231924841)]
    public class DestructibilityHitReaction : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<DamageTypeResource>> ReactOnDamageTypeResources;
        [RTTI.Member(1, 0x30)] public Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
        [RTTI.Member(2, 0x38)] public float DamageModifier;
        [RTTI.Member(3, 0x3C)] public float CoreDamageModifier;
        [RTTI.Member(4, 0x40)] public CPtr<EntityAction> HitAction;
        [RTTI.Member(5, 0x48)] public Ref<GraphProgramResource> HitProgram;
        [RTTI.Member(6, 0x50)] public Ref<OverrideGraphProgramResource> HitOverrideProgram;
        [RTTI.Member(7, 0x58)] public CPtr<EntityAction> TransitionAction;
        [RTTI.Member(8, 0x60)] public Ref<GraphProgramResource> TransitionProgram;
        [RTTI.Member(9, 0x68)] public Ref<OverrideGraphProgramResource> TransitionOverrideProgram;
        [RTTI.Member(10, 0x70)] public Ref<DestructibilityPartStateResource> TransitionPartState;
        [RTTI.Member(11, 0x78)] public bool SkipExecutionOnThroughTransition;
        [RTTI.Member(12, 0x80)] public Ref<EntityResource> DebrisEntityResource;
        [RTTI.Member(13, 0x88)] public Ref<GraphProgramResource> DebrisEntitySpawnProgram;
        [RTTI.Member(14, 0x90)] public Ref<OverrideGraphProgramResource> DebrisEntitySpawnOverrideProgram;
        [RTTI.Member(15, 0x98)] public float DebrisSpawnProbability;
        [RTTI.Member(16, 0x9C)] public float PassOnDamageImpulseFactor;
    }

    [RTTI.Serializable(0xF3A071B36219C695)]
    public class DestructibilityPart : DestructibilityPartBase
    {
        [RTTI.Member(0, 0x28)] public bool Enabled;
        [RTTI.Member(1, 0x2C)] public float Health;
        [RTTI.Member(2, 0x30)] public bool DamageSponge;
        [RTTI.Member(3, 0x34)] public float DamageToEntityMultiplier;
        [RTTI.Member(4, 0x38)] public bool ClampCoreDamageToPartHealth;
        [RTTI.Member(5, 0x39)] public bool LimitMaxCoreHealth;
        [RTTI.Member(6, 0x40)] public String BoneName;
        [RTTI.Member(7, 0x50)] public Mat44 LocalMatrix;
        [RTTI.Member(8, 0x90)] public Ref<RandomMatrixResourceBase> RandomLocalMatrix;
        [RTTI.Member(9, 0x98)] public Ref<DestructibilityPartStateResource> InitialState;
        [RTTI.Member(10, 0xA0)] public Array<Ref<TagProperty>> TagProperties;
    }

    [RTTI.Serializable(0xDF6A72DD01D7D4A9)]
    public class DestructibilityPartBase : Resource
    {
    }

    [RTTI.Serializable(0x67127788D5B7EA94)]
    public class DestructibilityPartState : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<DestructibilityPart> Part;
        [RTTI.Member(1, 0x28)] public float Health;
        [RTTI.Member(2, 0x2C)] public bool Enabled;
        [RTTI.Member(3, 0x30)] public Ref<DestructibilityPartStateResource> Resource;
        [RTTI.Member(4, 0x40)] public Mat44 OffsetMatrix;
    }

    [RTTI.Serializable(0xBA6D1D22741BEE33)]
    public class DestructibilityPartStateResource : Resource
    {
        [RTTI.Member(0, 0x28, "State")] public Ref<ModelPartResource> ModelPartResource;
        [RTTI.Member(1, 0x30, "State")] public float MinimumHealth;
        [RTTI.Member(2, 0x34, "State")] public float MinimumHealthFraction;
        [RTTI.Member(3, 0x38, "State")] public float MaximumHealth;
        [RTTI.Member(4, 0x3C, "State")] public float MaximumHealthFraction;
        [RTTI.Member(5, 0x40, "State")] public Array<Ref<DestructibilityHitReaction>> HitReactions;
        [RTTI.Member(6, 0x50, "State")] public Mat44 OffsetMatrix;
        [RTTI.Member(7, 0x90, "State")] public bool HasLockPosition;
        [RTTI.Member(8, 0x91, "AI")] public bool IsShootable;
        [RTTI.Member(9, 0x94, "PhysicsCollision")] public float ReceivedDamageFactor;
        [RTTI.Member(10, 0x98, "PhysicsCollision")] public float ReceivedImpulseFactor;
        [RTTI.Member(11, 0x9C, "PhysicsCollision")] public float MinReceivedDamage;
        [RTTI.Member(12, 0xA0, "PhysicsCollision")] public float AppliedDamageFactor;
        [RTTI.Member(13, 0xA4, "PhysicsCollision")] public float AppliedImpulseFactor;
        [RTTI.Member(14, 0xA8, "PhysicsCollision")] public float MinDamagerColliderMass;
        [RTTI.Member(15, 0xAC, "PhysicsCollision")] public float MaxAppliedDamage;
        [RTTI.Member(16, 0xB0, "State")] public CPtr<EntityAction> ActivateAction;
        [RTTI.Member(17, 0xB8, "State")] public CPtr<EntityAction> MaximumHealthAction;
        [RTTI.Member(18, 0xC0, "State")] public String HealthShaderVariableName;
        [RTTI.Member(19, 0xC8, "State")] public Ref<CurveResource> HealthShaderVariableCurve;
        [RTTI.Member(20, 0xD0, "State")] public bool ApplyHealthShaderOnPart;
        [RTTI.Member(21, 0xD8, "State")] public Array<Vec3> ElectricityConnectionPositions;
        [RTTI.Member(22, 0xE8, "State")] public CPtr<EntityAction> HealthChangedAction;
    }

    [RTTI.Serializable(0x1D5B6FEF9A52CBB2)]
    public class DestructibilityRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xC294F29914483371)]
    public class DestructibilityResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool Invulnerable;
        [RTTI.Member(1, 0x2C, "Logic")] public float InitialHealth;
        [RTTI.Member(2, 0x30, "Logic")] public bool DieAtZeroHealth;
        [RTTI.Member(3, 0x38, "Logic")] public Array<Ref<DestructibilityState>> InitialStates;
        [RTTI.Member(4, 0x48, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(5, 0x58, "Logic")] public Ref<DestructibilityPart> DefaultDamagePart;
        [RTTI.Member(6, 0x60, "Logic")] public Ref<DestructibilityPart> MainPhysicsPart;
        [RTTI.Member(7, 0x68, "Logic")] public Array<Ref<DestructibilityConstraint>> Constraints;
        [RTTI.Member(8, 0x78, "Logic")] public Array<Ref<AIFaction>> InvulnerableToFactions;
        [RTTI.Member(9, 0x88, "Logic")] public bool CanOnlyBeDamagedByPlayer;
        [RTTI.Member(10, 0x89, "Logic")] public bool RemoveWhenDead;
        [RTTI.Member(11, 0x8C, "Logic")] public float RemoveWhenDeadDelay;
        [RTTI.Member(12, 0x90, "Logic")] public bool KillChildsOnDestruction;
        [RTTI.Member(13, 0x98, "Logic")] public Ref<DamageTypeResource> KillChildsDamageTypeResource;
        [RTTI.Member(14, 0xA0, "PhysicsCollision")] public float ReceivedDamageFactor;
        [RTTI.Member(15, 0xA4, "PhysicsCollision")] public float ReceivedImpulseFactor;
        [RTTI.Member(16, 0xA8, "PhysicsCollision")] public float MinReceivedDamage;
        [RTTI.Member(17, 0xAC, "PhysicsCollision")] public float AppliedDamageFactor;
        [RTTI.Member(18, 0xB0, "PhysicsCollision")] public float AppliedImpulseFactor;
        [RTTI.Member(19, 0xB4, "PhysicsCollision")] public float MinDamagerColliderMass;
        [RTTI.Member(20, 0xB8, "PhysicsCollision")] public float MaxAppliedDamage;
        [RTTI.Member(21, 0xBC, "Logic")] public float LifeTime;
        [RTTI.Member(22, 0xC0, "Logic")] public float DamageTickTime;
        [RTTI.Member(23, 0xC4, "Logic")] public float DamagePerTick;
        [RTTI.Member(24, 0xC8, "Logic")] public float SelfDestructHealthLimit;
        [RTTI.Member(25, 0xD0, "Logic")] public CPtr<EntityAction> DeathAction;
        [RTTI.Member(26, 0xD8, "Logic")] public CPtr<EntityAction> HealthChangedAction;
        [RTTI.Member(27, 0xE0, "Network")] public bool UseSimpleNetworkReplication;
        [RTTI.Member(28, 0xE4, "AI")] public float FallDamageRange;
        [RTTI.Member(29, 0xE8, "AI")] public float ExplosionRange;
        [RTTI.Member(30, 0xEC, "AI")] public float LightRange;
        [RTTI.Member(31, 0xF0, "AI")] public String TargetSignal;
        [RTTI.Member(32, 0xF8, "Representation")] public Array<Ref<ModelPartMeshReplacementResource>> PartMeshReplacements;
        [RTTI.Member(33, 0x140, "Representation")] public Array<Ref<MeshResourceBase>> PartMeshResources;
    }

    [RTTI.Serializable(0x480D63C26C58C6D0)]
    public class DestructibilityState : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Health;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<DestructibilityPartState>> PartStates;
        [RTTI.Member(2, 0x40, "Logic")] public Array<Ref<DestructibilityConstraintState>> ConstraintStates;
    }

    [RTTI.Serializable(0xA40BCB547CDBDC6D)]
    public class DestructibilityTimeLineKey
    {
        [RTTI.Member(0, 0x0)] public float Time;
        [RTTI.Member(1, 0x4)] public float RandomTimeOffset;
        [RTTI.Member(2, 0x8)] public Array<CPtr<EntityAction>> Actions;
    }

    [RTTI.Serializable(0x8AD5F6CC87581E91)]
    public class DestructibilityTimeLineResource : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<DestructibilityTimeLineKey> Keys;
    }

    [RTTI.Serializable(0x6B4D1AEEC20ABD53)]
    public class DestructiblePartToHitLocationMapping
    {
        [RTTI.Member(0, 0x0)] public Ref<DestructibilityPart> Part;
        [RTTI.Member(1, 0x8)] public EHitLocation HitLocation;
    }

    [RTTI.Serializable(0x62ECA74A718A222A)]
    public class DeviceInfo : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String DeviceType;
        [RTTI.Member(1, 0x28)] public String Manufacturer;
        [RTTI.Member(2, 0x30)] public String ModelName;
        [RTTI.Member(3, 0x38)] public String ModelNumber;
    }

    [RTTI.Serializable(0x53C57490F535E605)]
    public class DieAction : EntityAction
    {
    }

    [RTTI.Serializable(0x8AA711CDB8223FE7)]
    public class DifficultyManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x79B44FB79B8E3722)]
    public class DifficultyManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<DifficultyRangeResource>> DifficultyRanges;
        [RTTI.Member(1, 0x38, "General")] public Array<Ref<ParTimeLevelInfo>> LevelParTimes;
        [RTTI.Member(2, 0x48, "DamageModifiers")] public Ref<GlobalDamageModifier> Campaign;
        [RTTI.Member(3, 0x50, "DamageModifiers")] public Ref<GlobalDamageModifier> Coop;
        [RTTI.Member(4, 0x58, "DamageModifiers")] public Ref<GlobalDamageModifier> OnlineFriendlyFireOn;
        [RTTI.Member(5, 0x60, "DamageModifiers")] public Ref<GlobalDamageModifier> OnlineFriendlyFireOff;
        [RTTI.Member(6, 0x68, "General")] public Array<BaselineTimes> BaselineTimes;
        [RTTI.Member(7, 0x78, "General")] public float SumOfAllNodeTimes;
        [RTTI.Member(8, 0x7C, "General")] public float ReviveDeathWeight;
        [RTTI.Member(9, 0x80, "Facts")] public Ref<EnumFact> DifficultyFact;
        [RTTI.Member(10, 0x88, "Facts")] public Ref<EnumFactValue> VeryEasyDifficultyValue;
        [RTTI.Member(11, 0x90, "Facts")] public Ref<EnumFactValue> EasyDifficultyValue;
        [RTTI.Member(12, 0x98, "Facts")] public Ref<EnumFactValue> MediumDifficultyValue;
        [RTTI.Member(13, 0xA0, "Facts")] public Ref<EnumFactValue> HardDifficultyValue;
        [RTTI.Member(14, 0xA8, "Facts")] public Ref<EnumFactValue> UltraHardDifficultyValue;
        [RTTI.Member(15, 0xB0, "Facts")] public Ref<EnumFactValue> ImpossibleDifficultyValue;
    }

    [RTTI.Serializable(0xAA86FBDA101D89)]
    public class DifficultyRangeResource : Resource
    {
        [RTTI.Member(0, 0x28)] public EDifficulty Difficulty;
        [RTTI.Member(1, 0x2C)] public float FastDifficulty;
        [RTTI.Member(2, 0x30)] public float BaselineDifficulty;
        [RTTI.Member(3, 0x34)] public float SlowDifficulty;
        [RTTI.Member(4, 0x38)] public float InitialConstrict;
    }

    [RTTI.Serializable(0x9A7BF359F143DA55)]
    public class DisableAnimationEventsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x13D751AF91097309)]
    public class DisableAnimationEventsEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0xB79EBF73063229F7)]
    public class DisableConstraintsAction : EnableConstraintsAction
    {
    }

    [RTTI.Serializable(0x39662D1A769BA3A7)]
    public class DisableEntityCollisionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x16B2B50B9D567165)]
    public class DisableEntityCollisionEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x65512E999BFA9B4)]
    public class DisableIKEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4F949213FF811FE8)]
    public class DisableIKEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool DisablePredictiveTerrain;
        [RTTI.Member(2, 0x41, "Logic")] public bool DisableHipIK;
        [RTTI.Member(3, 0x42, "Logic")] public bool DisableMoverTerrainCorrection;
    }

    [RTTI.Serializable(0x6B1080D71A3601EC)]
    public class DisableInventoryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x66D731EE628E355C)]
    public class DisableInventoryEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Enable;
        [RTTI.Member(1, 0x38, "Logic")] public String EntityName;
        [RTTI.Member(2, 0x40, "Logic")] public float CooldownDuration;
    }

    [RTTI.Serializable(0x51F1A07A2738E392)]
    public class DisableInventoryItemAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public EDisableItem Slot1;
        [RTTI.Member(1, 0x34, "Logic")] public EDisableItem Slot2;
        [RTTI.Member(2, 0x38, "Logic")] public EDisableItem Slot3;
        [RTTI.Member(3, 0x3C, "Logic")] public EDisableItem Slot4;
        [RTTI.Member(4, 0x40, "Logic")] public EDisableItem Slot5;
        [RTTI.Member(5, 0x44, "Logic")] public EDisableItem WeaponSwitching;
        [RTTI.Member(6, 0x48, "Logic")] public EDisableItem QuickThrow;
    }

    [RTTI.Serializable(0x5EC85D609D532BE7)]
    public class DisablePoseDeformerAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Disable;
    }

    [RTTI.Serializable(0x41D36A93074BA886)]
    public class DisableSensorsInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDA62F1BEC000E967)]
    public class DisableSensorsResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool DisableAural;
        [RTTI.Member(2, 0x41, "Logic")] public bool DisableVisual;
        [RTTI.Member(3, 0x42, "Logic")] public bool DisableHaptic;
        [RTTI.Member(4, 0x43, "Logic")] public bool DisableRadar;
        [RTTI.Member(5, 0x44, "Logic")] public bool DisableProximity;
    }

    [RTTI.Serializable(0x44E900755E224BE6)]
    public class DisassembleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC22DFAA420824559)]
    public class DisassembleComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ConversionModifier;
    }

    [RTTI.Serializable(0x844244137695CEEF)]
    public class DiscRocketMover : ThrowableMover
    {
    }

    [RTTI.Serializable(0x1F992CED789461FF)]
    public class DiscRocketMoverResource : ThrowableMoverResource
    {
        [RTTI.Member(0, 0xF0, "Launch")] public float LaunchDelay;
        [RTTI.Member(1, 0xF4, "Launch")] public float LaunchRange;
        [RTTI.Member(2, 0xF8, "Launch")] public float LaunchHeight;
        [RTTI.Member(3, 0xFC, "Launch")] public float LaunchBuffer;
        [RTTI.Member(4, 0x100, "Launch")] public Ref<CurveResource> LaunchSpringSpeed;
        [RTTI.Member(5, 0x108, "Hover")] public bool DynamicTargeting;
        [RTTI.Member(6, 0x10C, "Hover")] public float TargetingDuration;
        [RTTI.Member(7, 0x110, "Hover")] public Ref<CurveResource> TargetingSpringHeading;
        [RTTI.Member(8, 0x118, "Hover")] public Ref<CurveResource> TargetingSpringPitch;
        [RTTI.Member(9, 0x120, "Hover")] public EPhysicsCollisionLayerGame TargetingCollisionLayer;
        [RTTI.Member(10, 0x128, "Hover")] public Ref<LaserBeamResource> TargetingLaserResource;
        [RTTI.Member(11, 0x130, "Attack")] public float AttackBuffer;
        [RTTI.Member(12, 0x138, "Attack")] public Ref<CurveResource> AttackSpringSpeed;
        [RTTI.Member(13, 0x140, "Attack")] public CPtr<EntityAction> AttackAction;
    }

    [RTTI.Serializable(0xA8E9455A448365E3)]
    public class DiscoverableArea : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public String Name;
        [RTTI.Member(1, 0x78, "Generic")] public UUIDRef<Spawnpoint> EntitySpawnpoint;
        [RTTI.Member(2, 0x98, "Generic")] public EDiscoveryState InitialState;
        [RTTI.Member(3, 0xA0, "Generic")] public Ref<DiscoverableAreaResource> Resource;
        [RTTI.Member(4, 0xA8, "Generic")] public Ref<CollisionTrigger> DiscoveryTrigger;
        [RTTI.Member(5, 0xB0, "Generic")] public int Level;
        [RTTI.Member(6, 0xB4, "Generic")] public float LeavingDistance;
        [RTTI.Member(7, 0xB8, "Generic")] public float NearbyDistance;
        [RTTI.Member(8, 0xC0, "Generic")] public Ref<FogOfWarRevealArea> FogOfWarRevealArea;
        [RTTI.Member(9, 0xC8, "States")] public Array<Ref<DiscoverableAreaStateManipulator>> IndicatedManipulators;
        [RTTI.Member(10, 0xD8, "States")] public Array<Ref<DiscoverableAreaStateManipulator>> DiscoveredManipulators;
        [RTTI.Member(11, 0xE8, "States")] public Array<Ref<DiscoverableAreaStateManipulator>> CompletedManipulators;
        [RTTI.Member(12, 0xF8, "Generic")] public Ref<ConditionResource> EnableCondition;
        [RTTI.Member(13, 0x100, "States")] public DiscoverableAreaStateSettings Undiscovered;
        [RTTI.Member(14, 0x138, "States")] public DiscoverableAreaStateSettings Indicated;
        [RTTI.Member(15, 0x170, "States")] public DiscoverableAreaStateSettings Discovered;
        [RTTI.Member(16, 0x1A8, "States")] public DiscoverableAreaStateSettings Completed;
        [RTTI.Member(17, 0x1E0, "Generic")] public Ref<MappedInterior> Interior;
        [RTTI.Member(18, 0x208, "Generic")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(19, 0x210, "Generic")] public EMapZoomLevel VisibilityZoomLevel;
        [RTTI.Member(20, 0x211, "States")] public bool AutoDiscoverAreasInsideMyTrigger;
        [RTTI.Member(21, 0x212, "Generic")] public bool EnableDiscoveryTrigger;
    }

    [RTTI.Serializable(0x9D44706143F6364F)]
    public class DiscoverableAreaDLC : DiscoverableArea
    {
        [RTTI.Member(0, 0x220, "Generic")] public bool ForceShowOnWorldmap;
        [RTTI.Member(1, 0x221, "Generic")] public bool IgnoreSceneActivationCondition;
    }

    [RTTI.Serializable(0x35721663569699DF)]
    public class DiscoverableAreaInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xB5EEA637EEBC3627)]
    public class DiscoverableAreaPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAFB216CC6CF53DAC)]
    public class DiscoverableAreaPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "StateSettings")] public DiscoverableAreaSharedStateSettings Undiscovered;
        [RTTI.Member(1, 0x38, "StateSettings")] public DiscoverableAreaSharedStateSettings Indicated;
        [RTTI.Member(2, 0x48, "StateSettings")] public DiscoverableAreaSharedStateSettings Discovered;
        [RTTI.Member(3, 0x58, "StateSettings")] public DiscoverableAreaSharedStateSettings Completed;
        [RTTI.Member(4, 0x68, "EnteringLeaving")] public Ref<PlayerNotificationResource> EnteredNotification;
        [RTTI.Member(5, 0x70, "EnteringLeaving")] public Ref<PlayerNotificationResource> ExitedNotification;
        [RTTI.Member(6, 0x78, "StateSettings")] public Ref<LocalizedTextResource> CompletedAreaText;
        [RTTI.Member(7, 0x80, "StateSettings")] public Ref<EnumFact> StateFact;
        [RTTI.Member(8, 0x88, "EnteringLeaving")] public float AreaEnteredExitedNotificationTimer;
        [RTTI.Member(9, 0x8C, "Distances")] public float Nearby;
        [RTTI.Member(10, 0x90, "Distances")] public float Factor;
        [RTTI.Member(11, 0x94, "Distances")] public float Leaving;
        [RTTI.Member(12, 0x98, "Distances")] public float LeavingFactor;
    }

    [RTTI.Serializable(0x33420DAC13027FB)]
    public class DiscoverableAreaResource : Resource
    {
        [RTTI.Member(0, 0x28, "Generic")] public int Level;
        [RTTI.Member(1, 0x2C, "Generic")] public float NearbyDistance;
        [RTTI.Member(2, 0x30, "Generic")] public float LeavingDistance;
        [RTTI.Member(3, 0x38, "Generic")] public Ref<LocalizedTextResource> Type;
        [RTTI.Member(4, 0x40, "Generic")] public Ref<LocalizedTextResource> LocalizedDescription;
        [RTTI.Member(5, 0x48, "States")] public DiscoverableAreaStateSettings Undiscovered;
        [RTTI.Member(6, 0x80, "States")] public DiscoverableAreaStateSettings Indicated;
        [RTTI.Member(7, 0xB8, "States")] public DiscoverableAreaStateSettings Discovered;
        [RTTI.Member(8, 0xF0, "States")] public DiscoverableAreaStateSettings Completed;
        [RTTI.Member(9, 0x128, "Generic")] public bool ShowsEnteredExitedNotification;
        [RTTI.Member(10, 0x129, "Generic")] public bool ShowCompletedDescription;
        [RTTI.Member(11, 0x130, "Logic")] public Array<Ref<CollectableRobot>> CollectableRobots;
        [RTTI.Member(12, 0x140, "Logic")] public Ref<LocationMarkerResource> QuestMarker;
    }

    [RTTI.Serializable(0xC6BB34BB00563454)]
    public class DiscoverableAreaSharedStateSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<PlayerNotificationResource> Notification;
        [RTTI.Member(1, 0x8)] public Ref<EnumFactValue> FactValue;
    }

    [RTTI.Serializable(0xE59611F9B10492F1)]
    public class DiscoverableAreaStateManipulator : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<ConditionResource> Condition;
        [RTTI.Member(1, 0x38, "Logic")] public bool ShowUIMessages;
    }

    [RTTI.Serializable(0x89AD96709B7DEF57)]
    public class DiscoverableAreaStateSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocationMarkerResource> Marker;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> LocalizedMessage;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> LocalizedDetailedDescription;
        [RTTI.Member(3, 0x18)] public Ref<LevelBasedXpReward> XpReward;
        [RTTI.Member(4, 0x20)] public Ref<LocalizedTextResource> XpReason;
        [RTTI.Member(5, 0x28)] public Ref<AIMarker> FastTravelLocation;
        [RTTI.Member(6, 0x30)] public Ref<FastTravelSettingsResource> FastTravelSettings;
    }

    [RTTI.Serializable(0x531E08EC4E463A7D)]
    public class DiscreteAmmoEjector : AmmoEjector
    {
    }

    [RTTI.Serializable(0xF84485FE82E746B2)]
    public class DiscreteAmmoEjectorRep : AmmoEjectorRep
    {
    }

    [RTTI.Serializable(0x6E5141542811093C)]
    public class DiscreteAmmoEjectorResource : AmmoEjectorResource
    {
        [RTTI.Member(0, 0x1D0, "Logic")] public CPtr<EntityAction> Logic_EjectAction;
        [RTTI.Member(1, 0x1D8, "VisualEffects")] public Ref<ParticleSystemResource> CaseEjectParticles;
        [RTTI.Member(2, 0x1E0, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonCaseEjectParticles;
        [RTTI.Member(3, 0x1E8, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonZoomedCaseEjectParticles;
        [RTTI.Member(4, 0x1F0, "VisualEffects")] public float CaseEjectParticlesDelay;
        [RTTI.Member(5, 0x1F8, "Charged")] public Ref<ChargedValueEntityAction> Charged_EjectAction;
        [RTTI.Member(6, 0x200, "Charged")] public Ref<ChargedValueFloat> ExitVelocityMultiplier;
        [RTTI.Member(7, 0x208, "ScatterBurst")] public bool ScatterBurst;
        [RTTI.Member(8, 0x20C, "ScatterBurst")] public float ScatterBurstRadius;
        [RTTI.Member(9, 0x210, "ScatterBurst")] public float ScatterBurstAngleOffset;
        [RTTI.Member(10, 0x214, "ScatterBurst")] public float ScatterBurstAngleMin;
        [RTTI.Member(11, 0x218, "ScatterBurst")] public float ScatterBurstAngleMax;
        [RTTI.Member(12, 0x21C, "Targeting")] public bool FindWorldIfNoTarget;
        [RTTI.Member(13, 0x220, "Targeting")] public EPhysicsCollisionLayerGame FindWorldCollisionLayer;
    }

    [RTTI.Serializable(0x8AE3198D6A024FDE)]
    public class DismountAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Immediate;
    }

    [RTTI.Serializable(0x86737CEDA19AE3D)]
    public class DismountEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x128285468232E340)]
    public class DismountEventResource : PausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool DismountImmediately;
    }

    [RTTI.Serializable(0x2788AB993F177AE9)]
    public class DismountMode : MountDismountMode
    {
        [RTTI.Member(0, 0x60, "Logic")] public bool IsFallbackDismountMode;
    }

    [RTTI.Serializable(0x59B3E1A852C695CE)]
    public class DispensableCategoryResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int MaximumEntities;
        [RTTI.Member(1, 0x2C, "Logic")] public float NearRange;
        [RTTI.Member(2, 0x30, "Logic")] public float FarRange;
        [RTTI.Member(3, 0x34, "Logic")] public float MinimumTime;
    }

    [RTTI.Serializable(0x3A4D7C5745E3FE58)]
    public class DispensableEntityManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x4296FF249E6F0BAD)]
    public class DispensableEntityManagerSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<DispensableCategoryResource> DefaultCategory;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<DispensableCategoryResource>> Categories;
    }

    [RTTI.Serializable(0xD74AED10A484D11D)]
    public class DisplayStatDefinition : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<UITexture> UIStatIcon;
        [RTTI.Member(1, 0x30, "General")] public Ref<UITexture> UIStatIconLarge;
        [RTTI.Member(2, 0x38, "General")] public Ref<LocalizedTextResource> StatName;
        [RTTI.Member(3, 0x40, "General")] public Ref<LocalizedTextResource> Description;
    }

    [RTTI.Serializable(0xBEF889DA55D8AD45)]
    public class DoFApertureSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CurveResource> FocusBracketCurve;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<CurveResource> FocusFalloffCurve;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<CurveResource> MaxFuzzyNearCurve;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<CurveResource> MaxFuzzyFarCurve;
    }

    [RTTI.Serializable(0x493CD012F2A7339F)]
    public class DoubleKillComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8DBE61E0B5283D3A)]
    public class DoubleKillComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x1752E0F75EA5FB53)]
    public class DrawFlags
    {
        [RTTI.Member(0, 0x0, "General", true)] public float ShadowBiasMultiplier;
        [RTTI.Member(1, 0x0, "General", true)] public bool DisableOcclusionCulling;
        [RTTI.Member(2, 0x0, "General", true)] public bool DisableDepthOnlyPass;
        [RTTI.Member(3, 0x0, "General", true)] public EShadowBiasMode ShadowBiasMode;
        [RTTI.Member(4, 0x0, "General", true)] public EViewLayer ViewLayer;
        [RTTI.Member(5, 0x0, "General", true)] public EShadowCull ShadowCullMode;
        [RTTI.Member(6, 0x0, "General")] public uint32 Data;
        [RTTI.Member(7, 0x0, "General", true)] public EDrawPartType RenderType;
        [RTTI.Member(8, 0x0, "General", true)] public bool CastShadows;
    }

    [RTTI.Serializable(0x56958D1D4960FF90)]
    public class DrawableCullInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 Flags;
    }

    [RTTI.Serializable(0xFC9DED418B4201BB)]
    public class DrawableObjectInstance
    {
        [RTTI.Member(0, 0x1C)] public DrawableCullInfo CullInfo;
        [RTTI.Member(1, 0x20)] public float LodDistanceScale;
    }

    [RTTI.Serializable(0x7D01AAF21D702BD0)]
    public class DropListComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x259B2A1DF2852B55)]
    public class DropListComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntityResource>> InitialItems;
        [RTTI.Member(1, 0x38, "Logic")] public bool Enabled;
        [RTTI.Member(2, 0x40, "Logic")] public String SpawnHelperName;
        [RTTI.Member(3, 0x50, "Logic")] public Vec3 SpawnOffset;
    }

    [RTTI.Serializable(0x87B595960424C13)]
    public class DropSearchAndRetrieveObjectAction : EntityAction
    {
    }

    [RTTI.Serializable(0x31FB5727743986D)]
    public class DynamicHelperLocatorInstance : BoneLocatorInstance
    {
        [RTTI.Member(0, 0x1C0, "Locator")] public Array<CPtr<LocatorInstance>> DependentLocators;
    }

    [RTTI.Serializable(0xFC590E34DB289228)]
    public class DynamicHelperLocatorResource : BoneLocatorResource
    {
    }

    [RTTI.Serializable(0x68587408F392E7FA)]
    public class DynamicLibrary : Resource
    {
        [RTTI.Member(0, 0x28)] public Filename Filename;
        [RTTI.Member(1, 0x30)] public Array<uint8> Data;
    }

    [RTTI.Serializable(0x10330CF2842C237)]
    public class DynamicQuestManager : RTTIObject
    {
        [RTTI.Member(0, 0x30, "Saving", true)] public Array<CPtr<GeneratedQuestSave>> Saves;
    }

    [RTTI.Serializable(0x20A7A5E087E59B87)]
    public class DynamicSequenceEntityVariable : SequenceEntityVariable
    {
    }

    [RTTI.Serializable(0xAA8CF2E64FB641A0)]
    public class DynamicSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xB8574E68B0BB8A30)]
    public class DynamicSpawnEcotopeSetup : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public bool NeedsNavmesh;
        [RTTI.Member(1, 0x2C, "General")] public float Density;
        [RTTI.Member(2, 0x30, "General")] public float SpawnRadius;
        [RTTI.Member(3, 0x34, "General")] public float DespawnRadius;
        [RTTI.Member(4, 0x38, "General")] public Ref<SpawnSetupNonPlaceholder> SpawnSetup;
    }

    [RTTI.Serializable(0x6E141D4E3F12C88A)]
    public class DynamicSpawnManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<DynamicSpawnEcotopeSetup>> DynamicSpawnEcotopeSetups;
        [RTTI.Member(1, 0x38, "General")] public Ref<ConditionResource> EnableCondition;
    }

    [RTTI.Serializable(0x13EDCF2488EFC5E4)]
    public class DynamicSpawnStruct : RTTIObject
    {
    }

    [RTTI.Serializable(0xCBC7330A00301795)]
    public class EPlayerScoreStat_int
    {
        [RTTI.Member(0, 0x0)] public EPlayerScoreStat Key;
        [RTTI.Member(1, 0x4)] public int Value;
    }

    [RTTI.Serializable(0x3B4EC93B64D65AE1)]
    public class EchoScanComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCA823B355AD4A5A5)]
    public class EchoScanComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float AntiStealthPatchRadius;
    }

    [RTTI.Serializable(0x5CD5756431C8A131)]
    public class Ecotope : Resource
    {
        [RTTI.Member(0, 0x28)] public uint8 EcotopeIndex;
        [RTTI.Member(1, 0x30)] public Ref<PlacementBase> PlacementRoot;
        [RTTI.Member(2, 0x38)] public Ref<TerrainMaterial> TerrainMaterial;
    }

    [RTTI.Serializable(0x3B178A532F4FD277)]
    public class EcotopeMapping : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<Ecotope> Ecotope;
        [RTTI.Member(1, 0x30)] public Ref<WorldDataType> EcotopeMap;
    }

    [RTTI.Serializable(0xD02FCA5F3628AA2E)]
    public class EcotopeOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA1B023395575AAD9)]
    public class EcotopeOverrideComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xC3E3A18B4730665A)]
    public class EcotopeOverrideComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int8 EcotopeIndexOverrideValue;
        [RTTI.Member(1, 0x2C, "Logic")] public float EcotopeEffectOverrideValue;
    }

    [RTTI.Serializable(0xBAFCC185DEB0307B)]
    public class EcotopeTile : Resource
    {
        [RTTI.Member(0, 0x28)] public IVec2 GridCoordinates;
        [RTTI.Member(1, 0x30)] public Array<Ref<EcotopeMapping>> Ecotopes;
    }

    [RTTI.Serializable(0xB8E4B3F4AA98E1BE)]
    public class EditorMetaData : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xF8B0BA70D70CBABE)]
    public class EffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5446936E8B9B51E)]
    public class EffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x8E81A5C898F63BE7)]
    public class EffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "AttachLocation")] public String HelperNodeName;
        [RTTI.Member(1, 0x30, "AttachLocation")] public Mat44 LocalMatrix;
        [RTTI.Member(2, 0x70, "AttachLocation")] public bool AlignToWorld;
        [RTTI.Member(3, 0x74, "Logic")] public float LifeTime;
        [RTTI.Member(4, 0x78, "Logic")] public bool AutoDestroy;
        [RTTI.Member(5, 0x79, "Logic")] public bool AutoDestroyEntity;
        [RTTI.Member(6, 0x80, "SoundEffects")] public Ref<SoundResource> SoundResource;
        [RTTI.Member(7, 0x88, "SoundEffects")] public bool SoundIs3D;
        [RTTI.Member(8, 0x8C, "SoundEffects")] public float SoundPreDelay;
        [RTTI.Member(9, 0x90, "SoundEffects")] public float SoundPreDelayRandom;
        [RTTI.Member(10, 0x98, "SoundEffects")] public Ref<SoundMixStateResource> SoundMixStateResource;
        [RTTI.Member(11, 0xA0, "VisualEffects")] public bool ShowInFirstPersonView;
        [RTTI.Member(12, 0xA1, "VisualEffects")] public bool ShowInThirdPersonView;
        [RTTI.Member(13, 0xA8, "VisualEffects")] public Ref<ParticleSystemResource> ParticleResource;
        [RTTI.Member(14, 0xB0, "VisualEffects")] public float ParticlePreDelay;
        [RTTI.Member(15, 0xB4, "VisualEffects")] public float ParticlePreDelayRandom;
        [RTTI.Member(16, 0xB8, "VisualEffects")] public bool ParticlesLoseOwnershipOnDie;
        [RTTI.Member(17, 0xC0, "Physics")] public Ref<ForceFieldResource> ForceFieldResource;
        [RTTI.Member(18, 0xC8, "VisualEffects")] public Ref<ShakeResource> ShakeResource;
        [RTTI.Member(19, 0xD0, "VisualEffects")] public Ref<LightResource> LightResource;
        [RTTI.Member(20, 0xE0, "VisualEffects")] public Vec3 LightForward;
        [RTTI.Member(21, 0xF0, "VisualEffects")] public Vec3 LightPosition;
        [RTTI.Member(22, 0x100, "VisualEffects")] public Ref<CurveResource> LightIntensityCurve;
        [RTTI.Member(23, 0x108, "VisualEffects")] public Ref<CurveResource> LightRangeCurve;
        [RTTI.Member(24, 0x110, "VisualEffects")] public bool LightIsLooping;
        [RTTI.Member(25, 0x114, "VisualEffects")] public float LightVisibleThreshold;
        [RTTI.Member(26, 0x118, "VisualEffects")] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(27, 0x120, "VisualEffects")] public Ref<ScreenEffectResource> ScreenEffectResource;
        [RTTI.Member(28, 0x128, "VisualEffects")] public bool ScreenEffectIsGlobal;
        [RTTI.Member(29, 0x129, "Network")] public bool MustBeReplicated;
    }

    [RTTI.Serializable(0xDCDD805004D91620)]
    public class EjectEffectsLocationResource : Resource
    {
        [RTTI.Member(0, 0x28)] public String MuzzleFlashTP;
        [RTTI.Member(1, 0x30)] public String MuzzleFlashFP;
        [RTTI.Member(2, 0x38)] public String MuzzleSmokeTP;
        [RTTI.Member(3, 0x40)] public String MuzzleSmokeFP;
        [RTTI.Member(4, 0x48)] public String ChargeTP;
        [RTTI.Member(5, 0x50)] public String ChargeFP;
        [RTTI.Member(6, 0x58)] public String ChargeSoundTP;
        [RTTI.Member(7, 0x60)] public String ChargeSoundFP;
        [RTTI.Member(8, 0x68)] public String FireLightTP;
        [RTTI.Member(9, 0x70)] public String FireLightFP;
        [RTTI.Member(10, 0x78)] public String FireSoundTP;
        [RTTI.Member(11, 0x80)] public String FireSoundFP;
        [RTTI.Member(12, 0x88)] public String ReloadTP;
        [RTTI.Member(13, 0x90)] public String ReloadFP;
    }

    [RTTI.Serializable(0xB53BA2C0033A8EA1)]
    public class EjectLocationResource : Resource
    {
        [RTTI.Member(0, 0x28)] public String DirectionHelper;
        [RTTI.Member(1, 0x30)] public String BulletPlayer;
        [RTTI.Member(2, 0x38)] public String BulletAI;
        [RTTI.Member(3, 0x40)] public String TracerTP;
        [RTTI.Member(4, 0x48)] public String TracerFP;
        [RTTI.Member(5, 0x50)] public String CaseEjectTP;
        [RTTI.Member(6, 0x58)] public String CaseEjectFP;
        [RTTI.Member(7, 0x60)] public String PilotLightTP;
        [RTTI.Member(8, 0x68)] public String PilotLightFP;
        [RTTI.Member(9, 0x70)] public Array<Ref<EjectEffectsLocationResource>> EffectsLocations;
    }

    [RTTI.Serializable(0x354327426D79A1E4)]
    public class ElectricityBeam : GeometryObject
    {
    }

    [RTTI.Serializable(0xBFDF39DFDB2F5E1B)]
    public class ElectricityBeamComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7CE62FA07985E07)]
    public class ElectricityBeamComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x7EA20BBB8C595B4E)]
    public class ElectricityBeamComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<ElectricityBeamResource> ElectricityBeamResource;
        [RTTI.Member(1, 0x30, "Logic")] public float BeamSpeed;
        [RTTI.Member(2, 0x34, "Logic")] public float MaxRange;
        [RTTI.Member(3, 0x38, "Logic")] public float BreakBeamOnDistanceTreshold;
        [RTTI.Member(4, 0x40, "Logic")] public String HelperName;
        [RTTI.Member(5, 0x48, "Logic")] public String TargetHelperName;
        [RTTI.Member(6, 0x50, "Logic")] public CPtr<EntityAction> OnBeamConnectedTargetAction;
        [RTTI.Member(7, 0x58, "Logic")] public CPtr<EntityAction> OnBeamBrokenTargetAction;
    }

    [RTTI.Serializable(0x54A9A89636F8DA91)]
    public class ElectricityBeamResource : Resource
    {
        [RTTI.Member(0, 0x28, "VisualEffects")] public Ref<RenderEffectResource> LineRenderEffectsResource;
        [RTTI.Member(1, 0x30, "VisualEffects")] public Ref<ElectricityDrawSettings> ElectricityDrawSettings;
    }

    [RTTI.Serializable(0x870228C5DBC2FCCA)]
    public class ElectricityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFD6FD3A809E9017B)]
    public class ElectricityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<ElectricityNodeResource> ElectricityNodeResource;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<ElectricitySpawnEntityResource>> SpawnResources;
    }

    [RTTI.Serializable(0xFD2522156BBB708)]
    public class ElectricityDrawSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public int FPS;
        [RTTI.Member(1, 0x2C, "Settings")] public float LowFrequencyAmplitude;
        [RTTI.Member(2, 0x30, "Settings")] public float HighFrequencyAmplitude;
        [RTTI.Member(3, 0x34, "Settings")] public float SegmentsPerMeter;
        [RTTI.Member(4, 0x38, "Settings")] public float LineWidth;
        [RTTI.Member(5, 0x3C, "Settings")] public int FrameStep;
        [RTTI.Member(6, 0x40, "Settings")] public int TextureTileCount;
        [RTTI.Member(7, 0x44, "Settings")] public float MotionBlurShift;
    }

    [RTTI.Serializable(0x34D6E1A567124C71)]
    public class ElectricityDrawSettingsModifierResource : Resource
    {
        [RTTI.Member(0, 0x28)] public int Priority;
        [RTTI.Member(1, 0x2C)] public float Width;
        [RTTI.Member(2, 0x30)] public RGBAColor Color;
    }

    [RTTI.Serializable(0xEC6A6407B4DF52BE)]
    public class ElectricityEjector : ContinuousAmmoEjector
    {
    }

    [RTTI.Serializable(0xF32C1DF30D3487BC)]
    public class ElectricityEjectorRep : ContinuousAmmoEjectorRep
    {
    }

    [RTTI.Serializable(0xEED7DBB2CBA4C848)]
    public class ElectricityEjectorResource : ContinuousAmmoEjectorResource
    {
        [RTTI.Member(0, 0x1E0, "EmitNode")] public Ref<ElectricityNodeResource> EmitNode_NodeResource;
        [RTTI.Member(1, 0x1E8, "EmitNode")] public Ref<ElectricityEmitSettings> EmitNode_EmitSettings;
        [RTTI.Member(2, 0x1F0, "EmitSubNode")] public Ref<ElectricityNodeResource> EmitSubNode_NodeResource;
        [RTTI.Member(3, 0x1F8, "EmitSubNode")] public Ref<ElectricityEmitSettings> EmitSubNode_EmitSettings;
        [RTTI.Member(4, 0x200, "AI")] public float FiringDangerAreaStartOffset;
        [RTTI.Member(5, 0x204, "AI")] public float FiringDangerAreaDefaultLength;
        [RTTI.Member(6, 0x208, "AI")] public float FiringDangerAreaRadius;
        [RTTI.Member(7, 0x20C, "AI")] public float FiringDangerAreaDuration;
        [RTTI.Member(8, 0x210, "Logic")] public float AimNoiseFactor;
        [RTTI.Member(9, 0x214, "Logic")] public float AimNoiseSpeed;
        [RTTI.Member(10, 0x218, "Logic")] public float AimConeAngle;
        [RTTI.Member(11, 0x220, "VisualEffects")] public Array<Ref<ElectricityDrawSettings>> ElectricityDrawSettings;
        [RTTI.Member(12, 0x230, "VisualEffects")] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(13, 0x238, "VisualEffects")] public Ref<ParticleSystemResource> NoTargetParticleSystemResource;
        [RTTI.Member(14, 0x240, "VisualEffects")] public Ref<ParticleSystemResource> ParticleSystemTPResource;
        [RTTI.Member(15, 0x248, "VisualEffects")] public Ref<ParticleSystemResource> NoTargetParticleSystemTPResource;
        [RTTI.Member(16, 0x250, "VisualEffects")] public Ref<LightResource> TargetLightResource;
        [RTTI.Member(17, 0x258, "VisualEffects")] public float LightJitterRadius;
        [RTTI.Member(18, 0x25C, "VisualEffects")] public float LightJitterInterval;
        [RTTI.Member(19, 0x260, "EmitSubNode")] public float MinSubNodeDistance;
        [RTTI.Member(20, 0x264, "EmitSubNode")] public int MaxSubNodes;
        [RTTI.Member(21, 0x268, "EmitSubNode")] public float MinSubNodeStartOffset;
        [RTTI.Member(22, 0x270, "SoundEffects")] public Ref<SoundResource> TargetFireSound;
        [RTTI.Member(23, 0x278, "VisualEffects")] public Ref<RenderEffectResource> LineRenderEffectsResource;
        [RTTI.Member(24, 0x280, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0x6001AA82C8FDBDB)]
    public class ElectricityEmitNode : ElectricityNode
    {
    }

    [RTTI.Serializable(0x160982BEB1DB958)]
    public class ElectricityEmitNodeResource : ElectricityNodeResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<ElectricityEmitSettings> EmitSettings;
        [RTTI.Member(1, 0x48, "Logic")] public float EmitTime;
    }

    [RTTI.Serializable(0xE47739E128410055)]
    public class ElectricityEmitSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<float> DamageSet;
        [RTTI.Member(1, 0x38, "Logic")] public Array<float> JumpDistanceSet;
        [RTTI.Member(2, 0x48, "Logic")] public float ChargePerSecond;
        [RTTI.Member(3, 0x4C, "Logic")] public FRange ImpulseFrequencyRange;
        [RTTI.Member(4, 0x58, "Logic")] public Array<float> ImpulseSet;
        [RTTI.Member(5, 0x68, "Logic")] public Array<float> ImpactSeveritySet;
    }

    [RTTI.Serializable(0x1A0A296568D3A18C)]
    public class ElectricityEntity : Entity
    {
    }

    [RTTI.Serializable(0xFA4316B5B047E39A)]
    public class ElectricityEntityNode : ElectricityNode
    {
    }

    [RTTI.Serializable(0x3F0A7F1E3DE429D3)]
    public class ElectricityEntityNodeResource : ElectricityNodeResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<Vec3> ConnectionPositions;
        [RTTI.Member(1, 0x50, "Logic")] public Ref<DestructibilityPart> DamagePart;
        [RTTI.Member(2, 0x58, "Logic")] public Array<String> ConnectionBones;
        [RTTI.Member(3, 0x70, "Logic")] public Vec3 PositionOffset;
    }

    [RTTI.Serializable(0x80F65F0EE1BDA5C8)]
    public class ElectricityEntityResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Array<Ref<ElectricitySpawnEntityResource>> SpawnResources;
    }

    [RTTI.Serializable(0x8450A706AFD7DF3D)]
    public class ElectricityGrenade : Throwable
    {
    }

    [RTTI.Serializable(0xD984D84C2759627F)]
    public class ElectricityGrenadeRep : ThrowableRep
    {
    }

    [RTTI.Serializable(0xF72B2C19F4A1B419)]
    public class ElectricityGrenadeResource : ThrowableResource
    {
        [RTTI.Member(0, 0x210, "Logic")] public float DetonateTime;
        [RTTI.Member(1, 0x214, "Logic")] public float ElectricityTime;
        [RTTI.Member(2, 0x218, "Logic")] public Ref<ElectricityEmitSettings> EmitSettings;
        [RTTI.Member(3, 0x228, "VisualEffects")] public Ref<EffectComponentResource> EffectComponentResource;
        [RTTI.Member(4, 0x230, "VisualEffects")] public Ref<SoundResource> DetonateTimeSoundResource;
    }

    [RTTI.Serializable(0x18682AEB0E015885)]
    public class ElectricityGrid : Entity
    {
    }

    [RTTI.Serializable(0x5889CB5087642EA1)]
    public class ElectricityGridNode : ElectricityNode
    {
    }

    [RTTI.Serializable(0x14AF94FCEE0A326D)]
    public class ElectricityGridNodeResource : ElectricityNodeResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<Vec3> ConnectionPositions;
        [RTTI.Member(1, 0x50, "Logic")] public String ConnectedEntity;
        [RTTI.Member(2, 0x58, "Logic")] public int NodeID;
        [RTTI.Member(3, 0x60, "Logic")] public Array<int> ConnectedNodes;
        [RTTI.Member(4, 0x70, "Logic")] public Vec3 Position;
        [RTTI.Member(5, 0x80, "Logic")] public Quat Rotation;
        [RTTI.Member(6, 0x90, "Logic")] public bool HasInvisibleConnections;
        [RTTI.Member(7, 0x98, "Logic")] public Ref<EntityResource> JunctionEntity;
        [RTTI.Member(8, 0xA0, "Logic")] public bool DrawConnectionsAsElectricity;
    }

    [RTTI.Serializable(0x1AFEC99651A707F2)]
    public class ElectricityGridProperties : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<RenderEffectResource> CableRenderEffectsResource;
    }

    [RTTI.Serializable(0xAAB5A27710EF414)]
    public class ElectricityGridRep : EntityRep
    {
    }

    [RTTI.Serializable(0xBCEE842008C7C8E5)]
    public class ElectricityGridResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Array<Ref<ElectricityGridNodeResource>> Nodes;
    }

    [RTTI.Serializable(0xD87AC2C0590FD8BE)]
    public class ElectricityNode : RTTIObject
    {
    }

    [RTTI.Serializable(0x769C4D7A1EB58682)]
    public class ElectricityNodeManager : Entity
    {
    }

    [RTTI.Serializable(0x30EA89B53A34532D)]
    public class ElectricityNodeManagerRep : EntityRep
    {
    }

    [RTTI.Serializable(0x1B9B429AD7EE2B54)]
    public class ElectricityNodeManagerResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x138, "Logic")] public Ref<RenderEffectResource> LineRenderEffectsResource;
        [RTTI.Member(2, 0x140, "Representation")] public Ref<ElectricityDrawSettings> ElectricityDrawSettings;
        [RTTI.Member(3, 0x148, "Representation")] public Ref<LightResource> ConnectionLight;
        [RTTI.Member(4, 0x150, "Representation")] public int MaxConnectionLights;
        [RTTI.Member(5, 0x158, "Representation")] public Ref<ParticleSystemResource> ConnectionParticleEffect;
        [RTTI.Member(6, 0x160, "Representation")] public int MaxConnectionParticleEffects;
        [RTTI.Member(7, 0x164, "Representation")] public float LightJitterRadius;
        [RTTI.Member(8, 0x168, "Representation")] public float LightJitterInterval;
        [RTTI.Member(9, 0x16C, "Representation")] public float LightOffset;
        [RTTI.Member(10, 0x170, "Representation")] public FRange FlickerOffTimeRange;
        [RTTI.Member(11, 0x178, "Representation")] public FRange FlickerOnTimeRange;
        [RTTI.Member(12, 0x180, "Representation")] public Ref<SoundResource> BeamSoundResource;
    }

    [RTTI.Serializable(0xEFF4F39F33916B02)]
    public class ElectricityNodeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int MaxConnections;
        [RTTI.Member(1, 0x2C, "Logic")] public bool CanJumpTo;
        [RTTI.Member(2, 0x2D, "Logic")] public bool CanJumpFrom;
        [RTTI.Member(3, 0x30, "Logic")] public int GroupID;
        [RTTI.Member(4, 0x38, "Logic")] public Ref<ElectricityDrawSettingsModifierResource> DrawSettingsModifier;
    }

    [RTTI.Serializable(0xF9C42F2F38AC45C6)]
    public class ElectricitySetCanJumpFromAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool CanJumpFrom;
    }

    [RTTI.Serializable(0x16707D09384C6B21)]
    public class ElectricitySetCanJumpToAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool CanJumpTo;
    }

    [RTTI.Serializable(0x2ED07ADCD252E25A)]
    public class ElectricitySpawnEntityResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<DestructibilityPart> Part;
        [RTTI.Member(1, 0x30, "Logic")] public bool WhenElectricityIsActive;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0x97336D70DD4AFFBC)]
    public class EmbeddedFileResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<uint8> Data;
    }

    [RTTI.Serializable(0xA915C0F88AA2A35A)]
    public class EmitElectricityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<ElectricityEmitSettings> EmitSettings;
        [RTTI.Member(1, 0x38, "Logic")] public float EmitTime;
    }

    [RTTI.Serializable(0x1CA0220A5B22688B)]
    public class EmitterMeshShapeData
    {
        [RTTI.Member(0, 0x0)] public Array<EmitterVertex> Position;
        [RTTI.Member(1, 0x10)] public Ref<StaticMeshResource> Mesh;
    }

    [RTTI.Serializable(0xAA6B6813C125614C)]
    public class EmitterVertex
    {
        [RTTI.Member(0, 0x0)] public Vec3 Position;
        [RTTI.Member(1, 0x10)] public Vec3 Direction;
    }

    [RTTI.Serializable(0x7CF5995AA39F60FA)]
    public class EmptyPickUpAnimationTypeResource : PickUpAnimationTypeResource
    {
    }

    [RTTI.Serializable(0x71BA12FA75F89E8B)]
    public class EnableAttachedLightsAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0x58C4349416113F73)]
    public class EnableConstraintsAction : EntityAction
    {
        [RTTI.Member(0, 0x38, "Logic")] public Array<Ref<DestructibilityConstraint>> Constraints;
    }

    [RTTI.Serializable(0xFE6D97CF58F29F7C)]
    public class EnableContextualSpeechEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3EE6D2C4430450DD)]
    public class EnableContextualSpeechEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool EnableSpeech;
    }

    [RTTI.Serializable(0x153BFBE0E10B0F68)]
    public class EnableEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0xD6825DCA93F30E1B)]
    public class EnableExtraArmorAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<ExtraArmorComponentResource> ExtraArmorComponent;
        [RTTI.Member(1, 0x38, "Logic")] public bool Enable;
        [RTTI.Member(2, 0x39, "Logic")] public bool Reset;
    }

    [RTTI.Serializable(0x4CB31782A997E5EE)]
    public class EnableInteractiveEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0x49E2635AE28F4093)]
    public class EnableMaterialLayerAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String MaterialLayerName;
        [RTTI.Member(1, 0x38, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0x7FB31DA03A3DB4C9)]
    public class EnablePartsAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(1, 0x40, "Logic")] public bool Enable;
        [RTTI.Member(2, 0x41, "Logic")] public bool InitiallyActive;
        [RTTI.Member(3, 0x42, "Logic")] public bool ActOnCurrentPart;
    }

    [RTTI.Serializable(0x71D29D308E1478E0)]
    public class EnablePlayerControllerAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Enable;
        [RTTI.Member(1, 0x34, "Logic")] public EControlType Type;
    }

    [RTTI.Serializable(0xF8AEF6D9E4ED2FB8)]
    public class EnableShadowsAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0xC9BBFA6EDBB991A6)]
    public class EnableSoundPostProcessingAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool EnablePostProcessing;
    }

    [RTTI.Serializable(0xCBBB86E119F6ACA1)]
    public class EncounterDifficultyModifier : CoreObject
    {
        [RTTI.Member(0, 0x20)] public String Name;
        [RTTI.Member(1, 0x28)] public float TimeToStart;
        [RTTI.Member(2, 0x2C)] public int NumDeathsSP;
        [RTTI.Member(3, 0x30)] public int NumDeathsCoop;
        [RTTI.Member(4, 0x34)] public bool BothTimeAndDeathsNeeded;
        [RTTI.Member(5, 0x38)] public float DifficultyChange;
    }

    [RTTI.Serializable(0xF6DF9D9BE43843AF)]
    public class EnemyFactionAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0x8CD825376B1B6AB6)]
    public class EntitlementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6BB025C4A1A03CE8)]
    public class EntitlementComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntitlementResource> Entitlement;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0xF75174187BC7C7A)]
    public class EntitlementResource : Resource
    {
        [RTTI.Member(0, 0x28)] public String UnifiedEntitlementKey;
    }

    [RTTI.Serializable(0x6B5B170F51665F08)]
    public class Entity : CoreObject
    {
        [RTTI.Member(0, 0x0, "General", true)] public uint32 Flags;
        [RTTI.Member(1, 0x0, "Hierarchy", true)] public CPtr<Entity> Parent;
        [RTTI.Member(2, 0x38, "General")] public String Name;
        [RTTI.Member(3, 0x88, "General", true)] public uint32 UpdateStepTicks;
        [RTTI.Member(4, 0x120, "General")] public WorldTransform Orientation;
        [RTTI.Member(5, 0x180, "General")] public StreamingRef<EntityResource> Resource;
        [RTTI.Member(6, 0x1A0, "General", true)] public Ref<EntityActivationPolicy> ActivationPolicy;
        [RTTI.Member(7, 0x1E0, "Components", true)] public CPtr<Mover> Mover;
        [RTTI.Member(8, 0x1E8, "Components", true)] public CPtr<Model> Model;
        [RTTI.Member(9, 0x1F0, "Components", true)] public CPtr<Destructibility> Destructibility;
        [RTTI.Member(10, 0x228, "General", true)] public CPtr<AIFaction> Faction;
        [RTTI.Member(11, 0x288, "Components", true)] public EntityComponentContainer Components;
    }

    [RTTI.Serializable(0xE88A878937E8724D)]
    public class EntityAction : Resource
    {
        [RTTI.Member(0, 0x28)] public bool IsThreadSafe;
    }

    [RTTI.Serializable(0x7B00A534ABC852C)]
    public class EntityActionContext : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x3954672E9DFDE836)]
    public class EntityActionContextActivator : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xC6B6E943A86B9612)]
    public class EntityActionContextAttackEvent : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xD93D198E2361303D)]
    public class EntityActionContextComponentResource : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xB1256E35533CA08F)]
    public class EntityActionContextDamageType : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x503E1DE0D7DC1D17)]
    public class EntityActionContextElement : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x592E5D836FCD9958)]
    public class EntityActionContextInstigator : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x47F0D4E59A7C7575)]
    public class EntityActionContextModelPartIndex : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xA11F5B7CD040BE03)]
    public class EntityActionContextNormal : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x77334FDB3A99187A)]
    public class EntityActionContextPhysicsImpulse : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xD61DEEDF59638FDD)]
    public class EntityActionContextPosition : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x3CF9CA266A2F1828)]
    public class EntityActionContextRandomGenerator : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x9C81BD70A28CAF42)]
    public class EntityActionContextStreamingRef : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xDD1B12C20090DDB3)]
    public class EntityActionContextTransform : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0x85A725334E7263AC)]
    public class EntityActionContextTrigger : EntityActionContextElement
    {
    }

    [RTTI.Serializable(0xDEF3968C39BFE279)]
    public class EntityActionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x617F8BFEB57CAF30)]
    public class EntityActionEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> InstigatorActorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<EntityActorResource> ActivatorActorResource;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<EntityAction> EntityActionStart;
        [RTTI.Member(4, 0x58, "Logic")] public Ref<EntityAction> EntityActionStop;
    }

    [RTTI.Serializable(0x3BC8EA0B84A61BC5)]
    public class EntityActivationPolicy : Resource
    {
    }

    [RTTI.Serializable(0x5B5A3BFB434AEB2E)]
    public class EntityActorInstance : EntityActorInstanceBase
    {
    }

    [RTTI.Serializable(0xEC29E7F82E0785E8)]
    public class EntityActorInstanceBase : ActorInstance
    {
    }

    [RTTI.Serializable(0x95B662CEDC487B87)]
    public class EntityActorResource : ActorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String EntityName;
        [RTTI.Member(1, 0x40, "Logic")] public bool Invulnerable;
        [RTTI.Member(2, 0x41, "Logic")] public bool StopSequenceWhenEntityDies;
        [RTTI.Member(3, 0x42, "Logic")] public bool UnBindActorWhenEntityDies;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<AbilityAnimationResource> AbilityAnimation;
        [RTTI.Member(6, 0x58, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
        [RTTI.Member(7, 0x68, "Logic")] public int WaitUntilBindDuration;
        [RTTI.Member(8, 0x6C, "Logic")] public bool UnBindActorOnDamage;
        [RTTI.Member(9, 0x6D, "Logic")] public bool DismountActorOnBind;
        [RTTI.Member(10, 0x6E, "Logic")] public bool DismountActorOnUnBind;
        [RTTI.Member(11, 0x6F, "Logic")] public bool MakeIgnoredByAI;
        [RTTI.Member(12, 0x70, "Logic")] public bool EndOnFinalTransform;
    }

    [RTTI.Serializable(0xBDC68C923BEB6CBF)]
    public class EntityArrayComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x57D3293C7FACF8A4)]
    public class EntityArrayComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xB16DAB67B1C6DB1E)]
    public class EntityAwarenessQuestTrigger : EntityListQuestTrigger
    {
        [RTTI.Member(0, 0x40, "Logic")] public EAwarenessType AwarenessType;
    }

    [RTTI.Serializable(0xCBB197D85E6F36F3)]
    public class EntityAwarenessQuestTriggerInstance : EntityListQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xA6EB4DF82FDAB524)]
    public class EntityBasedQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x48, "Logic")] public Array<GGUUID> EntityTypeUUIDs;
        [RTTI.Member(1, 0x58, "Logic")] public Array<GGUUID> SpawnSetupUUID;
        [RTTI.Member(2, 0x68, "Logic")] public Array<GGUUID> SpawnSourceUUIDs;
        [RTTI.Member(3, 0x78, "Logic")] public int Amount;
        [RTTI.Member(4, 0x7C, "Logic")] public bool MustHaveBeenSpawnedThroughGroup;
    }

    [RTTI.Serializable(0x11068012818867F2)]
    public class EntityComponent : RTTIRefObject
    {
        [RTTI.Member(0, 0x30, "General", true)] public Ref<EntityComponentResource> Resource;
        [RTTI.Member(1, 0x48, "General", true)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x586A4426CAD07C0B)]
    public class EntityComponentContainer
    {
        [RTTI.Member(0, 0x0, true)] public Array<CPtr<EntityComponent>> Components;
    }

    [RTTI.Serializable(0x268C5ABD3EAEC98E)]
    public class EntityComponentRep : RTTIObject
    {
    }

    [RTTI.Serializable(0x9BD816AB5285B17C)]
    public class EntityComponentResource : Resource
    {
    }

    [RTTI.Serializable(0x46C897AF96D832B3)]
    public class EntityComponentSet : EntityComponent
    {
    }

    [RTTI.Serializable(0xA03C0DF215502A71)]
    public class EntityComponentSetResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResources;
        [RTTI.Member(1, 0x38, "Logic")] public EEntityComponentSetMode Mode;
    }

    [RTTI.Serializable(0xDBE082E3CB54027A)]
    public class EntityDeathQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(0, 0x80, "Logic")] public bool PerformInitialCheck;
    }

    [RTTI.Serializable(0xE1F7EA88B4636B8A)]
    public class EntityGraphProgramSpawnCommand : SpawnCommand
    {
        [RTTI.Member(0, 0x60)] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(1, 0x68)] public Ref<OverrideGraphProgramResource> OverrideGraphProgram;
    }

    [RTTI.Serializable(0x1F9CE9A892562421)]
    public class EntityGroupComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6B7436C3D07E816)]
    public class EntityGroupComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntityGroupMemberResource>> GroupMembers;
    }

    [RTTI.Serializable(0x63B53F9410F90D4F)]
    public class EntityGroupMemberComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x64A86DD0634E89AE)]
    public class EntityGroupMemberResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public StreamingRef<EntityResource> EntityResource;
        [RTTI.Member(1, 0x48, "General")] public int Amount;
        [RTTI.Member(2, 0x4C, "General")] public FRange SpawnRange;
        [RTTI.Member(3, 0x54, "General")] public FRange SpawnHeadingRange;
    }

    [RTTI.Serializable(0x6A9A16EC28D42406)]
    public class EntityImpostorResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<StaticMeshResource> MeshResource;
        [RTTI.Member(1, 0x30)] public float Speed;
        [RTTI.Member(2, 0x34)] public float MaxDrawDistance;
        [RTTI.Member(3, 0x38)] public bool AlignUpWithWorld;
    }

    [RTTI.Serializable(0x803240E973893502)]
    public class EntityImpostorResourceDLC : EntityImpostorResource
    {
        [RTTI.Member(0, 0x40)] public Ref<BooleanFact> VisibilityFact;
    }

    [RTTI.Serializable(0x51AEAF4694A59EBE)]
    public class EntityInstanceCollisionQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xB12E138DAE953323)]
    public class EntityInstanceDeathQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x9556C23A5F8A7F04)]
    public class EntityInstanceHitReactionQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xFA415C773E82B61B)]
    public class EntityInstanceObtainedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xBDE6BC0CF6C1D42)]
    public class EntityInstanceProperty : EntityInstancePropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x16BAF4FD2F34EA86)]
    public class EntityInstancePropertyBase : Property
    {
    }

    [RTTI.Serializable(0x1649A9D3812323B1)]
    public class EntityInstancePropertyValue : PropertyValue
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<EntityInstancePropertyBase> Property;
    }

    [RTTI.Serializable(0x4290130A3A220D98)]
    public class EntityInstanceScannedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xE90500672E78BFD5)]
    public class EntityInstanceSpottedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x453B5A3B7663E2B9)]
    public class EntityInstanceUsedQuestTriggerInstance : SpawnSetupQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x92C781073468D251)]
    public class EntityInventoryViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x7BDAE88F0020F703)]
    public class EntityLifetime
    {
    }

    [RTTI.Serializable(0x28A9149C2EAEFDA2)]
    public class EntityLifetimeGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x5F4DB879803C0A5B)]
    public class EntityListQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<UUIDRef<SpawnSetupNonPlaceholder>> SpawnSetups;
        [RTTI.Member(1, 0x38, "Logic")] public bool TriggerForAnyEntity;
    }

    [RTTI.Serializable(0x9915B0E4B7E729CA)]
    public class EntityListQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x1A59393D674DAD8A)]
    public class EntityPlaceHolder : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public String Name;
        [RTTI.Member(1, 0x68, "General")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(2, 0x70, "General")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
        [RTTI.Member(3, 0x88, "General", true)] public Ref<EntityActivationPolicy> ActivationPolicy;
        [RTTI.Member(4, 0x90, "General")] public Array<Ref<FactValue>> Facts;
        [RTTI.Member(5, 0xA0, "General", true)] public GGUUID OriginalUUID;
        [RTTI.Member(6, 0xB0, "General")] public int8 DestructibilityState;
        [RTTI.Member(7, 0xB2, "General")] public EFactContextLifetime FactsLifetime;
        [RTTI.Member(8, 0xB3, "General")] public EPhysicsInitMode PhysicsInitMode;
    }

    [RTTI.Serializable(0x71C254683E13FE36)]
    public class EntityPlaceHolderSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(0, 0x48)] public StreamingRef<EntityPlaceHolder> EntityPlaceHolder;
    }

    [RTTI.Serializable(0xF332BC88FE08592D)]
    public class EntityPlaceHolderSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x27F02D493A9B9886)]
    public class EntityPlacementPositionCheckerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x24D1A98A87BF3B26)]
    public class EntityPlacementPositionCheckerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float CollisionRadius;
        [RTTI.Member(1, 0x2C, "Logic")] public float CornerCollisionRadius;
        [RTTI.Member(2, 0x30, "Logic")] public float CornerCollisionOffset;
        [RTTI.Member(3, 0x34, "Logic")] public float MinPlacementHeight;
        [RTTI.Member(4, 0x38, "Logic")] public float MaxPlacementHeight;
        [RTTI.Member(5, 0x3C, "Logic")] public float PlacementDistance;
        [RTTI.Member(6, 0x40, "Logic")] public float MaxFloorHeightDifference;
        [RTTI.Member(7, 0x44, "Logic")] public bool PlaceOnPlacerPosition;
    }

    [RTTI.Serializable(0xFB6DC8CC0CFF5808)]
    public class EntityPlacerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB4DFE49F68F3536C)]
    public class EntityPlacerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntityPlacementPositionCheckerComponentResource> PositionChecker;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<PlayerConstructedEntityComponentResource> ConstructedComponentResource;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<EntityResource> PlacedEntity;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<EntityResource> PreviewEntity;
        [RTTI.Member(4, 0x48, "Logic")] public String PreviewShader;
        [RTTI.Member(5, 0x50, "Logic")] public bool LifeSpanClientOnly;
    }

    [RTTI.Serializable(0xA9B2A0734E7EE12C)]
    public class EntityProjectileAmmoResource : AmmoResource
    {
        [RTTI.Member(0, 0x160, "Logic")] public Ref<EntityResource> ProjectileResource;
        [RTTI.Member(1, 0x168, "Logic")] public Ref<GraphProgramResource> ProjectileDecoratorGraph;
        [RTTI.Member(2, 0x170, "Logic")] public Ref<OverrideGraphProgramResource> ProjectileDecoratorGraphOverride;
        [RTTI.Member(3, 0x178, "Logic")] public Ref<EntityResource> PreviewProjectileResource;
        [RTTI.Member(4, 0x180, "Logic")] public Ref<GraphProgramResource> PreviewDecoratorGraph;
        [RTTI.Member(5, 0x188, "Logic")] public Ref<OverrideGraphProgramResource> PreviewDecoratorGraphOverride;
        [RTTI.Member(6, 0x190, "Logic")] public Ref<GraphProgramResource> PreviewAbortedGraph;
        [RTTI.Member(7, 0x198, "Logic")] public Ref<OverrideGraphProgramResource> PreviewAbortedGraphOverride;
        [RTTI.Member(8, 0x1A0, "EjectSettings")] public Ref<CurveResource> ExitVelocityCurve;
        [RTTI.Member(9, 0x1A8, "EjectSettings")] public float InitialOffsetAngle;
        [RTTI.Member(10, 0x1AC, "Logic")] public float OverwriteImpactRadius;
        [RTTI.Member(11, 0x1B0, "Logic")] public Ref<PhysicsCollisionResource> FirstPhysicsCollisionResource;
        [RTTI.Member(12, 0x1E8, "AI")] public ETrajectorySolveMethod SolveMethod;
        [RTTI.Member(13, 0x1EC, "AI")] public bool UseLinearTargetReachableCheck;
        [RTTI.Member(14, 0x1F0, "AI")] public float TrajectorySimLength;
        [RTTI.Member(15, 0x1F4, "AI")] public float TrajectorySimAngle;
    }

    [RTTI.Serializable(0xFAEF08C0232ECBBE)]
    public class EntityProximityQuestTrigger : EntityListQuestTrigger
    {
        [RTTI.Member(0, 0x40, "Logic")] public float Distance;
        [RTTI.Member(1, 0x44, "Logic")] public bool TriggerWhenOutside;
    }

    [RTTI.Serializable(0xB2B3440DA49DC68F)]
    public class EntityProximityQuestTriggerInstance : EntityListQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x3D6B5E7805A46F7A)]
    public class EntityQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xE34DC0AE565D77DE)]
    public class EntityRep : RTTIObject
    {
        [RTTI.BaseClass(0x8)] public DrawableObjectInstance @DrawableObjectInstance;
    }

    [RTTI.Serializable(0x78C2D25A923D336D)]
    public class EntityResource : Resource
    {
        [RTTI.Member(0, 0x0, "Logic")] public bool ZoomLockable;
        [RTTI.Member(1, 0x0, "Logic")] public bool Lockable;
        [RTTI.Member(2, 0x38, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        [RTTI.Member(3, 0x40, "Logic")] public EEntityUpdateFrequency UpdateFrequency;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<EntityActivationPolicy> ActivationPolicy;
        [RTTI.Member(5, 0x58, "Logic")] public Ref<MoverResource> MoverResource;
        [RTTI.Member(6, 0x60, "Logic")] public Ref<ModelResource> ModelResource;
        [RTTI.Member(7, 0x68, "Logic")] public Ref<DestructibilityResource> DestructibilityResource;
        [RTTI.Member(8, 0x70, "Stats")] public Ref<StatsClassResource> StatsClassResource;
        [RTTI.Member(9, 0x78, "Logic")] public Array<ChildEntityDescription> ChildEntityResources;
        [RTTI.Member(10, 0x88, "Network")] public bool MustBeReplicated;
        [RTTI.Member(11, 0x89, "Logic")] public bool SlideOffFrom;
        [RTTI.Member(12, 0x8A, "Logic")] public bool JumpableFrom;
        [RTTI.Member(13, 0x90, "AI")] public Ref<AIFaction> DefaultFaction;
        [RTTI.Member(14, 0x98, "LOD")] public bool SkipUpdateWhenRepNotVisible;
        [RTTI.Member(15, 0x9C, "LOD")] public float MaxUpdateDistance;
        [RTTI.Member(16, 0xA0, "Logic")] public bool DisableCollisionWithParent;
        [RTTI.Member(17, 0xA8, "Logic")] public CPtr<EntityAction> InitialAction;
        [RTTI.Member(18, 0xB0, "Logic")] public CPtr<EntityAction> ContactAction;
        [RTTI.Member(19, 0xB8, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
        [RTTI.Member(20, 0xC8, "Logic")] public float EcotopeEffectOverrideValue;
        [RTTI.Member(21, 0xCC, "Logic")] public int8 EcotopeIndexOverrideValue;
    }

    [RTTI.Serializable(0xD5C409CFC4245A9E)]
    public class EntityResourceProperty : EntityResourcePropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x139EBEAA813053F7)]
    public class EntityResourcePropertyBase : Property
    {
    }

    [RTTI.Serializable(0x5C6C16E97487BF07)]
    public class EntityResourcePropertyValue : PropertyValue
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<EntityResourcePropertyBase> Property;
        [RTTI.Member(1, 0x30, "General")] public Ref<EntityResource> Value;
    }

    [RTTI.Serializable(0xB325D25327269594)]
    public class EntityResourceQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x5642C6A8DEFC3AE6)]
    public class EntityResourceQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0x542907D494C1E03B)]
    public class EntityResourceSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(0, 0x48)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x50, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
    }

    [RTTI.Serializable(0xEF7FC77DBEDF3898)]
    public class EntityResourceSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xA2338A4AAC097EFB)]
    public class EntityScannedQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(0, 0x80, "Logic")] public bool PerformInitialCheck;
        [RTTI.Member(1, 0x81, "Logic")] public bool AllowDoubleScanning;
    }

    [RTTI.Serializable(0x7934948450D1E68E)]
    public class EntityScoreSettings : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<StatsClassResource> StatsClass;
        [RTTI.Member(1, 0x10)] public int PointsPerKill;
        [RTTI.Member(2, 0x14)] public bool ApplyMultipliers;
        [RTTI.Member(3, 0x15)] public bool AllowKillAssists;
    }

    [RTTI.Serializable(0x75AB10BBDFEDC74E)]
    public class EntitySkinDescriptionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String DisplayNameId;
        [RTTI.Member(1, 0x30, "Logic")] public String DescriptionId;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<EntitySkinResource> EntitySkinResource;
        [RTTI.Member(3, 0x40, "Logic")] public String PreviewTexture;
        [RTTI.Member(4, 0x48, "Logic")] public String IconTexture;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<EntitlementResource> Entitlement;
    }

    [RTTI.Serializable(0x9A6CFD279AF4A97A)]
    public class EntitySkinManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntitySkinDescriptionResource>> SkinsSP;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<EntitySkinDescriptionResource>> SkinsMP;
    }

    [RTTI.Serializable(0x2D6F386F2D622A29)]
    public class EntitySkinResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String DisplayNameId;
        [RTTI.Member(1, 0x30, "Logic")] public Array<EntitySkinTextureAssignment> TextureAssignments;
    }

    [RTTI.Serializable(0x8FF32938D45E3CDC)]
    public class EntitySkinTextureAssignment
    {
        [RTTI.Member(0, 0x0)] public Ref<SkinnableComponentResource> SkinnableObject;
        [RTTI.Member(1, 0x8)] public Ref<Texture> Texture;
    }

    [RTTI.Serializable(0x1BBD32FEFA0F39C6)]
    public class EntitySoundGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x83E02FC6FE87C60A)]
    public class EntitySoundNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x8D65C0CE10CEE6CD)]
    public class EntitySoundNodeStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0x65199E7E9FEAD387)]
    public class EntitySpawnInfo : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x3F7DFEC3F7C9FE6A)]
    public class EntitySpawnedCollisionQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xDC308D5EA7861C6C)]
    public class EntitySpawnedDeathQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x6D32C57A4794F7DF)]
    public class EntitySpawnedHitReactionQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x9A0AB8EEE38C30AF)]
    public class EntitySpawnedObtainedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xA2C2E23F94E1AAF9)]
    public class EntitySpawnedScannedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x1ACF59F515F850FD)]
    public class EntitySpawnedSpottedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x59B4AE756118613D)]
    public class EntitySpawnedUsedQuestTriggerInstance : SpawnSourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xA6ADB6E7A5B4D298)]
    public class EntitySpottedQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(0, 0x80, "Logic")] public bool PerformInitialCheck;
        [RTTI.Member(1, 0x81, "Logic")] public UUIDRef<SpottableComponentResource> SpottableComponent;
    }

    [RTTI.Serializable(0x5300A41A9B05FC2C)]
    public class EntityState : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CPtr<EntityAction> EnterStateAction;
        [RTTI.Member(1, 0x30, "Logic")] public CPtr<EntityAction> ExitStateAction;
    }

    [RTTI.Serializable(0x245D8067EEFC5F97)]
    public class EntityStateAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public CPtr<EntityStateMachineResource> StateMachineResource;
        [RTTI.Member(1, 0x48, "Logic")] public CPtr<EntityState> State;
    }

    [RTTI.Serializable(0x631F31B85B383DC1)]
    public class EntityStateMachine : EntityComponent
    {
    }

    [RTTI.Serializable(0x38502CEFE2306425)]
    public class EntityStateMachineResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntityState> InitialState;
    }

    [RTTI.Serializable(0xF9583550F29FF2D6)]
    public class EntityStatistic
    {
        [RTTI.Member(0, 0x0, true)] public int8 StatClassID;
        [RTTI.Member(1, 0x1, true)] public int8 StatID;
        [RTTI.Member(2, 0x4, true)] public int Value;
    }

    [RTTI.Serializable(0xE3DD4FB52EF2F5E6)]
    public class EntitySticker : EntityComponent
    {
    }

    [RTTI.Serializable(0x1C3ECEE7F66F8797)]
    public class EntityStickerResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Vec3 StickNormal;
        [RTTI.Member(1, 0x40, "Logic")] public float StickOffset;
        [RTTI.Member(2, 0x44, "Logic")] public bool AlignWithSurface;
        [RTTI.Member(3, 0x48, "Logic")] public float ReleaseTime;
        [RTTI.Member(4, 0x4C, "Logic")] public bool ShouldBeDestroyedOnAutoRelease;
        [RTTI.Member(5, 0x4D, "Logic")] public bool CanStickOnce;
        [RTTI.Member(6, 0x4E, "Logic")] public bool CanStickToWorld;
        [RTTI.Member(7, 0x4F, "Logic")] public bool CanStickToHumans;
        [RTTI.Member(8, 0x50, "Logic")] public bool CanStickToEntities;
        [RTTI.Member(9, 0x51, "Logic")] public bool CanStickToFriendlies;
        [RTTI.Member(10, 0x52, "Logic")] public bool ShouldBeDispensableAfterStick;
        [RTTI.Member(11, 0x58, "Logic")] public Ref<DispensableCategoryResource> DispensableCategory;
        [RTTI.Member(12, 0x60, "Representation")] public Ref<SoundResource> StickSoundResource;
        [RTTI.Member(13, 0x68, "Logic")] public CPtr<EntityAction> StuckAction;
        [RTTI.Member(14, 0x70, "Logic")] public CPtr<EntityAction> StickIgnoredAction;
        [RTTI.Member(15, 0x78, "Logic")] public Ref<GraphProgramResource> StickConditionProgram;
        [RTTI.Member(16, 0x80, "Logic")] public bool HasCollisionWhileStuck;
        [RTTI.Member(17, 0x88, "Logic")] public Ref<MoverResource> UnstickMoverResource;
    }

    [RTTI.Serializable(0xEEFF76C9046F3C7A)]
    public class EntityTypeCollisionQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xCF6347251B018C09)]
    public class EntityTypeDeathQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xD2208B2CD9013090)]
    public class EntityTypeHitReactionQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x136DC434B7999A2F)]
    public class EntityTypeObtainedQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xBB13FBBAB90A8066)]
    public class EntityTypeScannedQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x46A76491C8C4AE9B)]
    public class EntityTypeSpottedQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xC552CA2BB65F0B3E)]
    public class EntityTypeUsedQuestTriggerInstance : EntityResourceQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x8BDD8244FF1B6899)]
    public class EntityUsedQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(0, 0x80, "Logic")] public bool PerformInitialCheck;
        [RTTI.Member(1, 0x81, "Logic")] public bool AllowDoubleUse;
    }

    [RTTI.Serializable(0x99A6ADD1BD056154)]
    public class EnumFact : Fact
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EnumFactValue> DefaultValue;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EnumFactDefinition> EnumDefinition;
    }

    [RTTI.Serializable(0x346C6A49DC185594)]
    public class EnumFactDefinition : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<EnumFactValue>> EnumValues;
    }

    [RTTI.Serializable(0x686542DF43A30E52)]
    public class EnumFactQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EnumFact> Fact;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<EnumFactValue> Value;
        [RTTI.Member(2, 0x38, "Logic")] public bool Not;
    }

    [RTTI.Serializable(0x4FBE9A32D71B94B6)]
    public class EnumFactQuestTriggerInstance : FactQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xB57725E85A124BC7)]
    public class EnumFactValue : Resource
    {
    }

    [RTTI.Serializable(0xA4E899CB6A14AA76)]
    public class EnvironmentSound : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<SoundResource> Sound;
        [RTTI.Member(1, 0x28)] public int MinInstanceCount;
        [RTTI.Member(2, 0x2C)] public int MaxInstanceCount;
        [RTTI.Member(3, 0x30)] public float MinElevation;
        [RTTI.Member(4, 0x34)] public float MaxElevation;
        [RTTI.Member(5, 0x38)] public float RespawnDistance;
        [RTTI.Member(6, 0x3C)] public float RespawnPoint;
        [RTTI.Member(7, 0x40)] public float MinDistance;
        [RTTI.Member(8, 0x50)] public BoundingBox3 Bounds;
    }

    [RTTI.Serializable(0x654683B0D8461761)]
    public class EnvironmentSoundGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB9EE17CAF8F1A061)]
    public class EquipSlot : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EquipSlotType> SlotType;
        [RTTI.Member(1, 0x30, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x493539AB6EDE943D)]
    public class EquipSlotType : Resource
    {
        [RTTI.Member(0, 0x28)] public EEquipSlotType SlotType;
    }

    [RTTI.Serializable(0xFDA45A7287F473A3)]
    public class EquipmentModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBCA6E8E2D9EFF53)]
    public class EquipmentModificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EquipmentModificationSocketResource>> DisplayedSockets;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<EntityResource>> PreSocketedModificationItems;
    }

    [RTTI.Serializable(0x4CA01FA6C5339D29)]
    public class EquipmentModificationItemComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3B2047B2B98BE259)]
    public class EquipmentModificationItemComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<StatModificationTypeCandidate>> StatCandidates;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<CurveResource> RatingSpread;
        [RTTI.Member(2, 0x40, "Splits")] public float SingleStatWeight;
        [RTTI.Member(3, 0x44, "Splits")] public float SecondaryStatWeight;
        [RTTI.Member(4, 0x48, "Splits")] public float TertiaryStatWeight;
        [RTTI.Member(5, 0x4C, "Splits")] public float SingleStatRatingThreshold;
        [RTTI.Member(6, 0x50, "Splits")] public float TripleStatRatingThreshold;
        [RTTI.Member(7, 0x54, "Splits")] public float PrimaryRatingMultiplierOnSecondary;
        [RTTI.Member(8, 0x58, "Splits")] public float PrimaryRatingMultiplierOnTertiary;
        [RTTI.Member(9, 0x5C, "Splits")] public float SecondaryRatingMultiplier;
        [RTTI.Member(10, 0x60, "Splits")] public float SecondaryRatingMultiplierOnTertiary;
        [RTTI.Member(11, 0x64, "Splits")] public float TertiaryRatingMultiplier;
        [RTTI.Member(12, 0x68, "Logic")] public EEquipmentModificationItemCategory Category;
        [RTTI.Member(13, 0x69, "Logic")] public bool UseGeneratedName;
    }

    [RTTI.Serializable(0xC3185CCEF016C6B7)]
    public class EquipmentModificationSocketResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<StatModificationSocketType>> AllowedSocketTypes;
    }

    [RTTI.Serializable(0xB7B8DE55F2C5236C)]
    public class EquipmentSlotComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x63C259DFEF41C5D0)]
    public class EquipmentSlotComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EquipSlot>> EquipSlots;
    }

    [RTTI.Serializable(0xC955309C308A2033)]
    public class EquipmentStatsDisplaySystem : CoreObject
    {
    }

    [RTTI.Serializable(0x57113800667B8C94)]
    public class EquipmentStatsDisplaySystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "DamageTypes")] public Ref<DamageTypeResource> Fire;
        [RTTI.Member(1, 0x30, "DamageTypes")] public Ref<DamageTypeResource> Cryo;
        [RTTI.Member(2, 0x38, "DamageTypes")] public Ref<DamageTypeResource> Shock;
        [RTTI.Member(3, 0x40, "DamageTypes")] public Ref<DamageTypeResource> Poison;
        [RTTI.Member(4, 0x48, "DamageTypes")] public Ref<DamageTypeResource> Tear;
        [RTTI.Member(5, 0x50, "Effectiveness")] public Ref<DisplayStatDefinition> DamageEffectiveness;
        [RTTI.Member(6, 0x58, "Effectiveness")] public Ref<DisplayStatDefinition> TearEffectiveness;
        [RTTI.Member(7, 0x60, "Effectiveness")] public Ref<DisplayStatDefinition> FireEffectiveness;
        [RTTI.Member(8, 0x68, "Effectiveness")] public Ref<DisplayStatDefinition> CryoEffectiveness;
        [RTTI.Member(9, 0x70, "Effectiveness")] public Ref<DisplayStatDefinition> ShockEffectiveness;
        [RTTI.Member(10, 0x78, "Effectiveness")] public Ref<DisplayStatDefinition> PoisonEffectiveness;
        [RTTI.Member(11, 0x80, "Resistances")] public Ref<DisplayStatDefinition> RangedDamageResistance;
        [RTTI.Member(12, 0x88, "Resistances")] public Ref<DisplayStatDefinition> MeleeDamageResistance;
        [RTTI.Member(13, 0x90, "Resistances")] public Ref<DisplayStatDefinition> FireResistance;
        [RTTI.Member(14, 0x98, "Resistances")] public Ref<DisplayStatDefinition> CryoResistance;
        [RTTI.Member(15, 0xA0, "Resistances")] public Ref<DisplayStatDefinition> ShockResistance;
        [RTTI.Member(16, 0xA8, "Resistances")] public Ref<DisplayStatDefinition> PoisonResistance;
        [RTTI.Member(17, 0xB0, "Effectiveness")] public Ref<DisplayStatDefinition> Stealth;
        [RTTI.Member(18, 0xB8, "Effectiveness")] public Ref<DisplayStatDefinition> Handling;
        [RTTI.Member(19, 0xC0)] public int ModificationBarSize;
    }

    [RTTI.Serializable(0x87EA50B4E837636F)]
    public class EquipmentViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x6CF80B13DAD48D74)]
    public class ErrorMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int ErrorCode;
    }

    [RTTI.Serializable(0x34164433A92D6D58)]
    public class EventDrivenStateMachineResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<EventHandlerDefinition>> GlobalEventHandlers;
    }

    [RTTI.Serializable(0xC8246B4FCB5303D4)]
    public class EventFunctionMapping
    {
        [RTTI.Member(0, 0x8)] public int FunctionIndex;
        [RTTI.Member(1, 0x10)] public String EventRTTIName;
    }

    [RTTI.Serializable(0xDE5972CD6243DCB2)]
    public class EventHandlerDefinition : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String MessageType;
        [RTTI.Member(1, 0x28, "General")] public EventHandlerNeedsUpdate NeedsUpdate;
        [RTTI.Member(2, 0x30, "General")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(3, 0x38, "General")] public Ref<OverrideGraphProgramResource> OverrideGraphProgram;
    }

    [RTTI.Serializable(0xAB96D13CDF1CB8EB)]
    public class EventInstance : CoreObject
    {
    }

    [RTTI.Serializable(0x32B5878C517EF584)]
    public class EventResource : Resource
    {
        [RTTI.Member(0, 0x28, "Event")] public bool Enabled;
        [RTTI.Member(1, 0x2C, "Event")] public int StartFrame;
    }

    [RTTI.Serializable(0x217D7693267DD212)]
    public class ExclusionArea : ParentWorldNode
    {
        [RTTI.Member(0, 0x70)] public Ref<TerrainHull> Hull;
    }

    [RTTI.Serializable(0x90C97CE9854A7E59)]
    public class ExecuteNodeGraphAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<OverrideGraphProgramResource> OverrideGraphProgram;
        [RTTI.Member(2, 0x40, "Logic")] public bool AllowMultiThreadedExecution;
    }

    [RTTI.Serializable(0x4EA95333E7CEFFB0)]
    public class ExecuteOnActivatorAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<EntityAction> Action;
    }

    [RTTI.Serializable(0x517D35221E1A2A17)]
    public class ExecuteOnChildAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(1, 0x38, "Logic")] public bool Recursive;
    }

    [RTTI.Serializable(0xB28BBB7765FC94B9)]
    public class ExecuteOnInstigatorAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<EntityAction> Action;
    }

    [RTTI.Serializable(0xC56B8810D9EB04FA)]
    public class ExecuteOnParentAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<EntityAction> Action;
    }

    [RTTI.Serializable(0x366A9A19F76C0869)]
    public class ExecuteOnSequenceAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<EntityAction> Action;
    }

    [RTTI.Serializable(0x10284AFC8095BA8A)]
    public class ExertionAnimationEvent : Resource
    {
        [RTTI.Member(0, 0x28, "EventLogic")] public String EventID;
        [RTTI.Member(1, 0x30, "EventLogic")] public EExertionAnimationEventTriggerType TriggerType;
        [RTTI.Member(2, 0x38, "EventLogic")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(3, 0x40, "EventLogic")] public float CooldownDuration;
    }

    [RTTI.Serializable(0x35BCC8A8E2F6A341)]
    public class ExertionEventComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCFE13B29159E5217)]
    public class ExertionEventComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ExertionAnimationEvent>> Events;
    }

    [RTTI.Serializable(0xE74377AEF4C13D8E)]
    public class ExplorationSystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float FogOfWarRevealDistance;
        [RTTI.Member(1, 0x2C, "Logic")] public float ExplorationStepTime;
        [RTTI.Member(2, 0x30, "Logic")] public float FogOfWarRevealTime;
        [RTTI.Member(3, 0x38, "Logic")] public Ref<LocationMarkerResource> CustomMarker;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<LocalizedTextResource> CustomMarkerTitle;
        [RTTI.Member(5, 0x48, "Logic")] public Ref<WorldDataType> TerrainHeightMapDataType;
        [RTTI.Member(6, 0x50, "Logic")] public Ref<WorldDataType> ObjectHeightMapDataType;
        [RTTI.Member(7, 0x58, "Logic")] public float CustomMarkerRemovalDistance;
        [RTTI.Member(8, 0x5C, "Logic")] public float MarkerHighlightTime;
        [RTTI.Member(9, 0x60, "Logic")] public Array<Ref<MapIconFilter>> MapIconFilters;
    }

    [RTTI.Serializable(0xA15022A3A2B34160)]
    public class Explosion : Entity
    {
    }

    [RTTI.Serializable(0xBCC8EC267F6808F4)]
    public class ExplosionOnContactComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAF2839005FE128A3)]
    public class ExplosionResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "VisualEffects")] public MaterialType ExplosionMaterialType;
        [RTTI.Member(1, 0x132, "VisualEffects")] public MaterialType ExplosionContactMaterialType;
        [RTTI.Member(2, 0x134, "VisualEffects")] public float ExplosionMaterialTypeRadius;
        [RTTI.Member(3, 0x138, "LineExplosion")] public bool LineExplosion;
        [RTTI.Member(4, 0x140, "LineExplosion")] public Vec3 Start;
        [RTTI.Member(5, 0x150, "LineExplosion")] public Vec3 End;
        [RTTI.Member(6, 0x160, "Logic")] public Array<Ref<DamageSettings>> DamageSettingsSP;
        [RTTI.Member(7, 0x170, "Logic")] public Array<Ref<DamageSettings>> DamageSettingsMP;
        [RTTI.Member(8, 0x180, "Logic")] public Array<Ref<DamageSettings>> DamageSettingsAI;
        [RTTI.Member(9, 0x190, "Logic")] public float ShockWaveSpeed;
        [RTTI.Member(10, 0x194, "Logic")] public float ShockWaveImpactSpeed;
        [RTTI.Member(11, 0x198, "Logic")] public bool AlignWithCollisionNormal;
        [RTTI.Member(12, 0x19C, "Logic")] public float SurfaceOffset;
        [RTTI.Member(13, 0x1A0, "AI")] public Ref<AIAuralStimulusResource> ExplosionSoundStimulus;
        [RTTI.Member(14, 0x1A8, "AI")] public Ref<AIThrowableOriginInfoMessageResource> OriginInfoMessage;
        [RTTI.Member(15, 0x1B0, "Logic")] public Ref<CurveResource> ExplosionShapeCurve;
        [RTTI.Member(16, 0x1B8, "Logic")] public bool ShapedExplosionIsHorizontal;
        [RTTI.Member(17, 0x1B9, "Logic")] public bool OnlyDamageEnemyFaction;
        [RTTI.Member(18, 0x1BA, "Logic")] public bool IgnoreInstigator;
        [RTTI.Member(19, 0x1BB, "Logic")] public bool AlwaysCollapseEntityHits;
        [RTTI.Member(20, 0x1BC, "AI")] public EAIDangerAreaType AIDangerAreaType;
        [RTTI.Member(21, 0x1C0, "AI")] public bool SetInstigatorOnPerceptionEvent;
    }

    [RTTI.Serializable(0x8DA9DF2581DF1253)]
    public class ExplosiveLocation : MountableEntity
    {
    }

    [RTTI.Serializable(0x9DCB897FA30BCA01)]
    public class ExplosiveLocationAiController : ExplosiveLocationController
    {
    }

    [RTTI.Serializable(0x388134753435FA54)]
    public class ExplosiveLocationController : InteractiveEntityController
    {
    }

    [RTTI.Serializable(0xF0494B800B19C3A7)]
    public class ExplosiveLocationIndicatorLight
    {
        [RTTI.Member(0, 0x0)] public String HelperNodeName;
        [RTTI.Member(1, 0x8)] public Ref<LightResource> LightResource;
        [RTTI.Member(2, 0x10)] public String ShaderVariableID;
    }

    [RTTI.Serializable(0x5DAE56D6F82FEFF1)]
    public class ExplosiveLocationJoystickController : ExplosiveLocationController
    {
    }

    [RTTI.Serializable(0xB8371B48E4BD7334)]
    public class ExplosiveLocationRep : InteractiveEntityRep
    {
    }

    [RTTI.Serializable(0x4FBD81770FB5EE4E)]
    public class ExplosiveLocationResource : MountableEntityResource
    {
        [RTTI.Member(0, 0x2F0, "ExplosiveLocation")] public float MinAngle;
        [RTTI.Member(1, 0x2F4, "ExplosiveLocation")] public float MaxAngle;
        [RTTI.Member(2, 0x2F8, "ExplosiveLocation")] public float MaxRotationSpeed;
        [RTTI.Member(3, 0x2FC, "ExplosiveLocation")] public bool CanBeDisarmed;
        [RTTI.Member(4, 0x300, "ExplosiveLocation")] public Ref<ModelPartResource> ExplosiveModelPartResource;
        [RTTI.Member(5, 0x308, "ExplosiveLocation")] public Ref<ModelPartResource> HandleModelPartResource;
        [RTTI.Member(6, 0x310, "ExplosiveLocation")] public Ref<ModelPartResource> PlaceHolderModelPartResource;
        [RTTI.Member(7, 0x320, "ExplosiveLocation")] public Vec3 PlaceHolderPosition;
        [RTTI.Member(8, 0x330, "ExplosiveLocation")] public Ref<ExplosionResource> ExplosionResource;
        [RTTI.Member(9, 0x340, "ExplosiveLocation")] public Mat44 ExplosionOffset;
        [RTTI.Member(10, 0x380, "ExplosiveLocation")] public Array<FRange> ArmRanges;
        [RTTI.Member(11, 0x390, "ExplosiveLocation")] public float ArmStepTime;
        [RTTI.Member(12, 0x394, "ExplosiveLocation")] public float AutoDetachTime;
        [RTTI.Member(13, 0x398, "Representation")] public Array<String> ArmShaderVariableIDs;
        [RTTI.Member(14, 0x3A8, "Representation")] public Array<String> HandleShaderVariableIDs;
        [RTTI.Member(15, 0x3B8, "Representation")] public Ref<CurveResource> UnarmedShaderVariableCurve;
        [RTTI.Member(16, 0x3C0, "Representation")] public float BlinkFrequency;
        [RTTI.Member(17, 0x3C8, "Representation")] public Ref<SoundResource> LightSound;
        [RTTI.Member(18, 0x3D0, "Representation")] public Ref<SoundResource> ArmStepSound;
        [RTTI.Member(19, 0x3D8, "Representation")] public Ref<SoundResource> ArmedSound;
        [RTTI.Member(20, 0x3E0, "Representation")] public Ref<SoundResource> DisarmedSound;
        [RTTI.Member(21, 0x3E8, "Representation")] public Ref<RumbleResource> ArmStepRumble;
        [RTTI.Member(22, 0x3F0, "Representation")] public Array<ExplosiveLocationIndicatorLight> IndicatorLights;
        [RTTI.Member(23, 0x400, "Representation")] public Ref<CurveResource> IndicatorBlinkCurve;
    }

    [RTTI.Serializable(0x5E7854BAA3D9673F)]
    public class ExplosiveTimerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2C4C14739E1D9FAE)]
    public class ExplosiveTimerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float CountdownDuration;
    }

    [RTTI.Serializable(0x1907E58DBE672BF7)]
    public class ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x91BB0344AA2A5EB)]
    public class ExportedSymbols
    {
    }

    [RTTI.Serializable(0xA8841E6C1706FC65)]
    public class ExposedEntityActionInfo
    {
        [RTTI.Member(0, 0x0)] public String Identifier;
        [RTTI.Member(1, 0x8)] public CPtr<EntityAction> EntityAction;
    }

    [RTTI.Serializable(0x6044E40CAC978735)]
    public class ExposedEntityActionsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1C5A695D4546BA74)]
    public class ExposedEntityActionsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<ExposedEntityActionInfo> ExposedEntityActions;
    }

    [RTTI.Serializable(0x4E01EDEF8C591126)]
    public class ExposedEventAttribute
    {
        [RTTI.Member(0, 0x0)] public Ref<EventResource> EventResource;
        [RTTI.Member(1, 0x8)] public String AttributeName;
        [RTTI.Member(2, 0x10)] public String ExposedName;
    }

    [RTTI.Serializable(0x46A932284DEA1A32)]
    public class ExposedEventAttributeList
    {
        [RTTI.Member(0, 0x0)] public Array<ExposedEventAttribute> ExposedEventAttributes;
    }

    [RTTI.Serializable(0x987751596455762E)]
    public class ExposedEventMapping
    {
        [RTTI.Member(0, 0x0)] public String ExposedName;
        [RTTI.Member(1, 0x8)] public Ref<EventResource> EventResource;
    }

    [RTTI.Serializable(0xD324C2628BB62C10)]
    public class ExposureSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public Vec2 ToneMappingCurveTangents;
        [RTTI.Member(1, 0x10, "Settings")] public Vec2 ToneMappingCurveTangentStrengths;
        [RTTI.Member(2, 0x20, "Settings")] public Vec2 ToneMappingRange;
        [RTTI.Member(3, 0x30, "Settings")] public float MinExposureValue;
        [RTTI.Member(4, 0x34, "Settings")] public float MaxExposureValue;
        [RTTI.Member(5, 0x38, "Settings")] public float MaxExposureIncrease;
        [RTTI.Member(6, 0x3C, "Settings")] public float MaxExposureDecrease;
        [RTTI.Member(7, 0x40, "Settings")] public float OverExposureValue;
        [RTTI.Member(8, 0x44, "Settings")] public float ExposureIncreaseRate;
        [RTTI.Member(9, 0x48, "Settings")] public float ExposureDecreaseRate;
        [RTTI.Member(10, 0x50, "Settings")] public FRect ExposureMeteringRectangle;
        [RTTI.Member(11, 0x60, "Settings")] public float WhiteBalanceStrength;
        [RTTI.Member(12, 0x64, "Settings")] public float WhiteBalanceMaxOutlier;
    }

    [RTTI.Serializable(0x2CC51DA11B2925)]
    public class ExposureSettingsResource : Resource
    {
        [RTTI.Member(0, 0x30, "Settings")] public Vec2 ToneMappingCurveTangents;
        [RTTI.Member(1, 0x40, "Settings")] public Vec2 ToneMappingCurveTangentStrengths;
        [RTTI.Member(2, 0x50, "Settings")] public Vec2 ToneMappingRange;
        [RTTI.Member(3, 0x60, "Settings")] public float MinExposureValue;
        [RTTI.Member(4, 0x64, "Settings")] public float MaxExposureValue;
        [RTTI.Member(5, 0x68, "Settings")] public float MaxExposureIncrease;
        [RTTI.Member(6, 0x6C, "Settings")] public float MaxExposureDecrease;
        [RTTI.Member(7, 0x70, "Settings")] public float OverExposureValue;
        [RTTI.Member(8, 0x74, "Settings")] public float ExposureIncreaseRate;
        [RTTI.Member(9, 0x78, "Settings")] public float ExposureDecreaseRate;
        [RTTI.Member(10, 0x80, "Settings")] public FRect ExposureMeteringRectangle;
        [RTTI.Member(11, 0x90, "Settings")] public float WhiteBalanceStrength;
        [RTTI.Member(12, 0x94, "Settings")] public float WhiteBalanceMaxOutlier;
    }

    [RTTI.Serializable(0x1EAE42D7009F298E)]
    public class ExternalAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF6C5B733326C84E6)]
    public class ExternalAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<ExternalAnimationConfiguration>> PoseConfigurations;
        [RTTI.Member(1, 0x38)] public Ref<SkeletonAnimationResource> DefaultAnimationResource;
        [RTTI.Member(2, 0x40)] public bool LoopDefaultAnimation;
    }

    [RTTI.Serializable(0xBC8B315698D8C5E0)]
    public class ExternalAnimationConfiguration : Resource
    {
        [RTTI.Member(0, 0x28)] public String StartSequenceVariableName;
        [RTTI.Member(1, 0x30)] public String PartialBlendWeightName;
        [RTTI.Member(2, 0x38)] public bool DisableAnimationManager;
        [RTTI.Member(3, 0x39)] public bool DisableAnimationManagerOnLOD;
    }

    [RTTI.Serializable(0xCF7855AB11CB86BF)]
    public class ExtraAmmoComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x65C3E53A2A530EDC)]
    public class ExtraAmmoComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ExtraAmmoModifier>> ExtraAmmoModifiers;
    }

    [RTTI.Serializable(0x3FDFF095F0C7AACF)]
    public class ExtraAmmoModifier : CoreObject
    {
        [RTTI.Member(0, 0x20)] public int ExtraRoundsPerMagazine;
        [RTTI.Member(1, 0x24)] public int ExtraRoundsTotal;
        [RTTI.Member(2, 0x28)] public Ref<AmmoType> AmmoType;
        [RTTI.Member(3, 0x30)] public TagPropertyLink RequiredTag;
    }

    [RTTI.Serializable(0xB630F8ED483329FA)]
    public class ExtraArmorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7697DE19A7295FF9)]
    public class ExtraArmorComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ExtraArmor;
        [RTTI.Member(1, 0x2C, "Logic")] public float DepletionDelay;
        [RTTI.Member(2, 0x30, "Logic")] public float DepletionRate;
        [RTTI.Member(3, 0x38, "Logic")] public CPtr<EntityAction> DepletedAction;
        [RTTI.Member(4, 0x40, "Logic")] public Array<Ref<DamageTypeResource>> ExcludedDamageTypes;
    }

    [RTTI.Serializable(0xA49B6149AB6A511B)]
    public class ExtraHealthComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFD5BD37B80B2CBA7)]
    public class ExtraHealthComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ExtraHealth;
        [RTTI.Member(1, 0x2C, "Logic")] public bool StartFilled;
    }

    [RTTI.Serializable(0x42D7495C1012D2BC)]
    public class EyeLookAtEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1FD346ADF245E7E4)]
    public class EyeLookAtEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0x2C4618B7FFF50B99)]
    public class FArc
    {
        [RTTI.Member(0, 0x0)] public FOrientation Start;
        [RTTI.Member(1, 0x4)] public FOrientation End;
    }

    [RTTI.Serializable(0xA8797159F1A749F0)]
    public class FOrientation
    {
        [RTTI.Member(0, 0x0)] public float Angle;
    }

    [RTTI.Serializable(0xDD93A3080511263D)]
    public class FRGBAColor
    {
        [RTTI.Member(0, 0x0)] public float R;
        [RTTI.Member(1, 0x4)] public float G;
        [RTTI.Member(2, 0x8)] public float B;
        [RTTI.Member(3, 0xC)] public float A;
    }

    [RTTI.Serializable(0xA6C28FAA559677E0)]
    public class FRGBColor
    {
        [RTTI.Member(0, 0x0)] public float R;
        [RTTI.Member(1, 0x4)] public float G;
        [RTTI.Member(2, 0x8)] public float B;
    }

    [RTTI.Serializable(0xD246FA10D3F617C6)]
    public class FRange
    {
        [RTTI.Member(0, 0x0)] public float Min;
        [RTTI.Member(1, 0x4)] public float Max;
    }

    [RTTI.Serializable(0x167B336446D5999B)]
    public class FRect
    {
        [RTTI.Member(0, 0x0)] public float Left;
        [RTTI.Member(1, 0x4)] public float Top;
        [RTTI.Member(2, 0x8)] public float Right;
        [RTTI.Member(3, 0xC)] public float Bottom;
    }

    [RTTI.Serializable(0x352CF045DF137051)]
    public class FSize
    {
        [RTTI.Member(0, 0x0)] public float Width;
        [RTTI.Member(1, 0x4)] public float Height;
    }

    [RTTI.Serializable(0x8F860DD22AFE03DD)]
    public class FaceTowardsEventInstance : AimAtEventInstance
    {
    }

    [RTTI.Serializable(0x1ABB56D369FA6EEF)]
    public class FaceTowardsEventResource : AimAtEventResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public float AlignBaseDelay;
    }

    [RTTI.Serializable(0x7A61596707A1D872)]
    public class FacialAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x99B1E8F267D60181)]
    public class FacialAnimationComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x35E56B79353B320F)]
    public class FacialAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<MeshResourceBase> FacialMesh;
        [RTTI.Member(1, 0x30, "Representation")] public Ref<Skeleton> FacialSkeleton;
        [RTTI.Member(2, 0x38, "Representation")] public Ref<SkinnedMeshBoneBoundingBoxes> BoneBoundingBoxes;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<SkeletonAnimationResource> FacialAnimation;
        [RTTI.Member(4, 0x48, "Representation")] public Array<FacialAnimationLOD> LODs;
        [RTTI.Member(5, 0x58, "Representation")] public Ref<PoseDeformerResource> PoseDeformer;
        [RTTI.Member(6, 0x70, "Representation")] public String HeadOrientationBone;
        [RTTI.Member(7, 0x80, "Representation")] public Vec3 HeadOrientationForward;
        [RTTI.Member(8, 0x90, "Representation")] public float HeadMaxVisibleAngle;
    }

    [RTTI.Serializable(0x4885D73C8856D0)]
    public class FacialAnimationEventInstance : FacialAnimationEventInstanceBase
    {
    }

    [RTTI.Serializable(0x10ACD3BD9B8ABA84)]
    public class FacialAnimationEventInstanceBase : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4E3A49471A175B8C)]
    public class FacialAnimationEventResource : FacialAnimationEventResourceBase
    {
        [RTTI.Member(0, 0x58, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
    }

    [RTTI.Serializable(0x3DC19CB49E3B5C3C)]
    public class FacialAnimationEventResourceBase : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public int ClipOffset;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<CurveResource> BlendCurveResource;
        [RTTI.Member(3, 0x50, "Logic")] public int BlendOutAfterEventNumFrames;
    }

    [RTTI.Serializable(0xCFF66B0048B438D2)]
    public class FacialAnimationLOD
    {
        [RTTI.Member(0, 0x0)] public float Distance;
        [RTTI.Member(1, 0x8)] public Ref<FacialAnimationProgramResource> ProgramResource;
        [RTTI.Member(2, 0x18)] public Ref<GraphProgramResource> OverrideAnimGraphProgramResource;
        [RTTI.Member(3, 0x20)] public bool DisablePoseDeformer;
        [RTTI.Member(4, 0x70)] public Array<int> CorrespondingJoints;
        [RTTI.Member(5, 0x80)] public Array<int> CorrespondingControls;
    }

    [RTTI.Serializable(0x75E46F96B977064F)]
    public class FacialAnimationProgramResource : ProgramResource
    {
        [RTTI.Member(0, 0x48, "Logic")] public Filename ProceduralRigSourceFile;
    }

    [RTTI.Serializable(0x9821D63AB7F998C1)]
    public class FacialEmotionAnimationResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
    }

    [RTTI.Serializable(0x19278DA4E26E7110)]
    public class FacialEmotionEventInstance : FacialAnimationEventInstanceBase
    {
    }

    [RTTI.Serializable(0xED01E02542247261)]
    public class FacialEmotionEventResource : FacialAnimationEventResourceBase
    {
    }

    [RTTI.Serializable(0xD2CFE22509B6A809)]
    public class FacialExpressionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5B9E6DFD3A70291B)]
    public class FacialExpressionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EFacialExpression FacialExpression;
    }

    [RTTI.Serializable(0x4F1049FB332624BA)]
    public class FacialPaintComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x39BE8AF6C0F264DC)]
    public class FacialPaintComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF9EFC8EF30BEEAB1)]
    public class FacialPaintComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Ref<RenderEffectShaderOverridesResource> DefaultShaderOverrides;
    }

    [RTTI.Serializable(0x2BDB7EDC9BE618C8)]
    public class Fact : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool Persistent;
    }

    [RTTI.Serializable(0x5CF202A1F85B6A9E)]
    public class FactBasedContextualEmotion : ContextualEmotion
    {
        [RTTI.Member(0, 0x70, "Logic")] public Ref<BooleanFact> Fact;
    }

    [RTTI.Serializable(0xD90A29AFF238E628)]
    public class FactCollectionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<FactValue>> Facts;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<FactCollectionResource>> FactCollections;
    }

    [RTTI.Serializable(0x2A7D008CFEDA40F7)]
    public class FactCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(0, 0xE8, "General")] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0xF0, "General")] public Array<Ref<BooleanFact>> Facts;
    }

    [RTTI.Serializable(0x64F0B9394F4E27A8)]
    public class FactContextDescription : RTTIObject
    {
        [RTTI.Member(0, 0x10, true)] public GGUUID Context;
        [RTTI.Member(1, 0x20, true)] public EFactType Type;
        [RTTI.Member(2, 0x28, true)] public String Description;
    }

    [RTTI.Serializable(0x67D4A915838B87EC)]
    public class FactDatabaseGlobalContext : CoreObject
    {
    }

    [RTTI.Serializable(0x2CC735E7A0B7281)]
    public class FactDatabaseResource : Resource
    {
        [RTTI.Member(0, 0x28, "EntityFacts")] public Ref<BooleanFact> IsDeadFact;
        [RTTI.Member(1, 0x30, "EntityFacts")] public Ref<BooleanFact> IsBenchmarkingFact;
    }

    [RTTI.Serializable(0xB82BD855EC5EB3BB)]
    public class FactMapping : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<IntegerFact> Fact;
        [RTTI.Member(1, 0x10)] public String Key;
    }

    [RTTI.Serializable(0xD83BD3456F45DBEF)]
    public class FactMusicPreset
    {
        [RTTI.Member(0, 0x0, "General")] public String PresetName;
        [RTTI.Member(1, 0x8, "General")] public String ExitPresetName;
        [RTTI.Member(2, 0x10, "General")] public Ref<EnumFactValue> FactValue;
    }

    [RTTI.Serializable(0x3E4BA0BBB05BBC7F)]
    public class FactMusicPresetCollection : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Array<FactMusicPreset> MusicPresets;
        [RTTI.Member(1, 0x30, "General")] public Ref<EnumFact> Fact;
    }

    [RTTI.Serializable(0xFCA921F937AB408)]
    public class FactPauseEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x3A23DBA497A59C2F)]
    public class FactPauseEventResource : PauseEventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public ESequenceFactContextType FactContextType;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<BooleanFact> UnpauseFact;
    }

    [RTTI.Serializable(0x7C02733D8C130263)]
    public class FactQuestTriggerInstance : SystemQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x356B8FD7711192EF)]
    public class FactValue : CoreObject
    {
        [RTTI.BaseClass(0x20)] public FactValueBase @FactValueBase;
    }

    [RTTI.Serializable(0xFD5EE84747BD695C)]
    public class FactValueBase
    {
        [RTTI.Member(0, 0x0)] public Ref<Fact> Fact;
        [RTTI.Member(1, 0x8)] public String Value;
    }

    [RTTI.Serializable(0x1041574294AFE4F7)]
    public class FactionAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String FactionName;
    }

    [RTTI.Serializable(0xE1881B57671D028B)]
    public class FactionOverride
    {
        [RTTI.Member(0, 0x0)] public Ref<AIFaction> FromFaction;
        [RTTI.Member(1, 0x8)] public Ref<AIFaction> ToFaction;
    }

    [RTTI.Serializable(0xC1291C147E502DAF)]
    public class FactionOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x223C6B30B340C4C6)]
    public class FactionOverrideComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<FactionOverride> FactionOverrides;
    }

    [RTTI.Serializable(0xE1D8499A01E9B5C7)]
    public class FactionScore : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0xC215F9215D1A7A02)]
    public class FactionSwitchRequestKIN : MatchRequest
    {
        [RTTI.Member(0, 0x38)] public String PlaylistID;
        [RTTI.Member(1, 0x40)] public String GameId;
        [RTTI.Member(2, 0x48)] public String TargetFaction;
    }

    [RTTI.Serializable(0xB67F63C4BCFD3284)]
    public class FastTravelSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> AllowCondition;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<OverrideGraphProgramResource> AllowOverrideCondition;
        [RTTI.Member(2, 0x38, "Cost")] public Ref<BooleanFact> ConsumeItemsFact;
        [RTTI.Member(3, 0x40, "Cost")] public Ref<EntityResource> ConsumedItemResource;
        [RTTI.Member(4, 0x48, "Cost")] public int ConsumedItemCount;
        [RTTI.Member(5, 0x4C, "Logic")] public float MinimalTravelDistance;
        [RTTI.Member(6, 0x50, "Logic")] public bool UseSafePlacement;
    }

    [RTTI.Serializable(0x49553B95EA6D8865)]
    public class FastTravelSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x1379206266B4BC63)]
    public class FastTravelSystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> StartedFastTravelGraph;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<GraphProgramResource> FinishedFastTravelGraph;
        [RTTI.Member(2, 0x38, "Representation")] public Ref<LocalizedTextResource> LocalizedDayText;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<BooleanFact> HUDDisplayFact;
        [RTTI.Member(4, 0x48, "Logic")] public float HUDDisplayTime;
        [RTTI.Member(5, 0x4C, "Logic")] public float MinimalFastTravelDistance;
        [RTTI.Member(6, 0x50, "Logic")] public Ref<CurveResource> LoadingTimeOverDistance;
        [RTTI.Member(7, 0x58, "Logic")] public Ref<CurveResource> ZoomLevelOverDistance;
        [RTTI.Member(8, 0x60, "Logic")] public Ref<CurveResource> MovementOffsetCurve;
        [RTTI.Member(9, 0x68, "Logic")] public Ref<IntegerFact> FastTravelCountFact;
        [RTTI.Member(10, 0x70, "Logic")] public Ref<BooleanFact> IsUsingFastTravelFact;
    }

    [RTTI.Serializable(0xC3CDBB757D43BBFD)]
    public class FireDurationsAnimationReference : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float FireDuration;
        [RTTI.Member(1, 0x2C, "Logic")] public float ChamberRoundDuration;
        [RTTI.Member(2, 0x30, "Logic")] public float AfterBurstFiringDuration;
    }

    [RTTI.Serializable(0x75780D8C3E0708D7)]
    public class FireSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x9A8B42CCED094E6A)]
    public class FireWeaponEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x96650BF0FBE2F0F4)]
    public class FireWeaponEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<ScriptedWeaponResource> ScriptedWeaponResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(2, 0x48, "Logic")] public String PositionHelperNode;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(4, 0x58, "Logic")] public String TargetHelperNode;
        [RTTI.Member(5, 0x60, "Logic")] public Ref<LocatorResource> TracePositionLocatorResource;
        [RTTI.Member(6, 0x68, "Logic")] public ENoProjectileTraceType NoProjectileTraceType;
    }

    [RTTI.Serializable(0x208D23D5ED87DC10)]
    public class FirstPersonCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0x70B42419A8014173)]
    public class FirstPersonCameraEntityRep : CameraEntityRep
    {
    }

    [RTTI.Serializable(0xCBA76068AC867BD1)]
    public class FirstPersonCameraEntityResource : CameraEntityResource
    {
    }

    [RTTI.Serializable(0x42C1AA88380AC494)]
    public class FirstPersonDeathCameraEntity : DeathCameraEntity
    {
    }

    [RTTI.Serializable(0x38329E9F5648BDCA)]
    public class FirstPersonDeathCameraEntityRep : DeathCameraEntityRep
    {
    }

    [RTTI.Serializable(0xE73424BC671841C6)]
    public class FirstPersonDeathCameraEntityResource : DeathCameraEntityResource
    {
        [RTTI.Member(0, 0x1E0, "Movement")] public float HeadSize;
        [RTTI.Member(1, 0x1E4, "Movement")] public float MinimalSpeed;
        [RTTI.Member(2, 0x1E8, "Movement")] public float MaximumSpeed;
        [RTTI.Member(3, 0x1EC, "Movement")] public float MaximumUpwardSpeed;
        [RTTI.Member(4, 0x1F0, "Movement")] public float HitImpulseFactor;
        [RTTI.Member(5, 0x1F4, "Movement")] public float GravityFactor;
        [RTTI.Member(6, 0x1F8, "Movement")] public float BounceRestitution;
        [RTTI.Member(7, 0x1FC, "Movement")] public bool LookAtKiller;
        [RTTI.Member(8, 0x200, "Movement")] public float LookAtKillerDelay;
        [RTTI.Member(9, 0x204, "Movement")] public float SideTiltAngle;
        [RTTI.Member(10, 0x208, "Movement")] public float ForwardTiltAngle;
        [RTTI.Member(11, 0x20C, "Movement")] public float BackwardTiltAngle;
        [RTTI.Member(12, 0x210, "Movement")] public Ref<CurveResource> TiltCurve;
        [RTTI.Member(13, 0x218, "Movement")] public Ref<CurveResource> LookAtCurve;
        [RTTI.Member(14, 0x220, "Movement")] public Ref<CurveResource> StopLookAtCurve;
        [RTTI.Member(15, 0x228, "Movement")] public float LookAtSmoothness;
        [RTTI.Member(16, 0x22C, "Movement")] public bool FollowAnimationWhenFalling;
        [RTTI.Member(17, 0x230, "Movement")] public float VerticalPlacementOffset;
        [RTTI.Member(18, 0x234, "Representation")] public bool HidePlayer;
        [RTTI.Member(19, 0x235, "Logic")] public bool SuspendController;
        [RTTI.Member(20, 0x238, "Movement")] public Ref<PathResource> GetUpCameraPath;
        [RTTI.Member(21, 0x240, "Representation")] public bool DisableHealthEffect;
        [RTTI.Member(22, 0x241, "Movement")] public bool LookUp;
    }

    [RTTI.Serializable(0xFC1AEBAD624F1E82)]
    public class FirstPersonHitEffectsResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<ShakeResource>> HitResponseShakes;
        [RTTI.Member(1, 0x38)] public Ref<CurveResource> HitEffectDistanceFactorCurve;
        [RTTI.Member(2, 0x40)] public Ref<CurveResource> HitEffectDamageFactorCurve;
        [RTTI.Member(3, 0x48)] public Ref<AnimatedScreenEffectResource> HitBloodScreenEffectResource;
        [RTTI.Member(4, 0x50)] public int Priority;
        [RTTI.Member(5, 0x54)] public bool IdenticalPriorityOverrides;
        [RTTI.Member(6, 0x58)] public float WeaponSpringVelocityAddition;
        [RTTI.Member(7, 0x60)] public Ref<RumbleResource> RumbleResource;
    }

    [RTTI.Serializable(0x55758C5A3093F356)]
    public class FixedPositionMover : Mover
    {
    }

    [RTTI.Serializable(0x639772DAF130C8D8)]
    public class FixedPositionMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x54D308E9BFD39065)]
    public class FlameThrowerEjector : ContinuousAmmoEjector
    {
    }

    [RTTI.Serializable(0x98017CAE62479440)]
    public class FlameThrowerEjectorRep : ContinuousAmmoEjectorRep
    {
    }

    [RTTI.Serializable(0xFD3C7325D61FAC28)]
    public class FlameThrowerEjectorResource : ContinuousAmmoEjectorResource
    {
        [RTTI.Member(0, 0x1E0, "Damage")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(1, 0x1F0, "Damage")] public float OwnerImmuneTime;
        [RTTI.Member(2, 0x1F8, "GroundFire")] public Ref<GraphProgramResource> GroundFireSelectionGraph;
        [RTTI.Member(3, 0x200, "GroundFire")] public Ref<OverrideGraphProgramResource> GroundFireSelectionOverrideGraph;
        [RTTI.Member(4, 0x208, "GroundFire")] public Ref<DamageAreaResource> DamageAreaResource;
        [RTTI.Member(5, 0x210, "GroundFire")] public float InactiveLifeTime;
        [RTTI.Member(6, 0x214, "GroundFire")] public int ParticlesRequired;
        [RTTI.Member(7, 0x218, "GroundFire")] public float MinParticleLifeTime;
        [RTTI.Member(8, 0x21C, "GroundFire")] public float BlockedFireDuration;
        [RTTI.Member(9, 0x220, "EjectSettings")] public float ExitVelocity;
        [RTTI.Member(10, 0x230, "AI")] public Vec3 FiringDangerAreaStartOffset;
        [RTTI.Member(11, 0x240, "AI")] public float FiringDangerAreaStartRadius;
        [RTTI.Member(12, 0x250, "AI")] public Vec3 FiringDangerAreaEndOffset;
        [RTTI.Member(13, 0x260, "AI")] public float FiringDangerAreaEndRadius;
        [RTTI.Member(14, 0x264, "AI")] public float FiringDangerAreaDuration;
        [RTTI.Member(15, 0x268, "Logic")] public Ref<SimpleParticleSystemResource> SimpleParticleSystemResource;
        [RTTI.Member(16, 0x270, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonParticleSystemResource;
        [RTTI.Member(17, 0x278, "VisualEffects")] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(18, 0x280, "VisualEffects")] public bool AlignParticlesWithAim;
        [RTTI.Member(19, 0x284, "VisualEffects")] public ESortOrder SortOrder;
        [RTTI.Member(20, 0x288, "VisualEffects")] public ESortMode SortMode;
        [RTTI.Member(21, 0x290, "VisualEffects")] public PilotLightSettings PilotLightSettings;
        [RTTI.Member(22, 0x2A8, "VisualEffects")] public PilotLightSettings FirstPersonPilotLightSettings;
        [RTTI.Member(23, 0x2C0, "VisualEffects")] public MaterialType ImpactMaterialType;
    }

    [RTTI.Serializable(0x1D9054716CCC885F)]
    public class FlickerLight : CoreObject
    {
        [RTTI.Member(0, 0x20)] public float JitterFactor;
        [RTTI.Member(1, 0x24)] public bool SineWave;
        [RTTI.Member(2, 0x28)] public float MinIntensity;
        [RTTI.Member(3, 0x2C)] public float MaxIntensity;
        [RTTI.Member(4, 0x30)] public float SineFrequency;
        [RTTI.Member(5, 0x34)] public float SineAmplitude;
        [RTTI.Member(6, 0x38)] public float SineBase;
        [RTTI.Member(7, 0x3C)] public bool SmoothInterpolate;
        [RTTI.Member(8, 0x40)] public float UpdateFrequency;
        [RTTI.Member(9, 0x44)] public uint RandomSeed;
    }

    [RTTI.Serializable(0x6DD282742FF6474)]
    public class FloatFact : Fact
    {
        [RTTI.Member(0, 0x30, "Logic")] public float DefaultValue;
    }

    [RTTI.Serializable(0xE9F5FCEA3D0B2243)]
    public class FloatFactQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<FloatFact> Fact;
        [RTTI.Member(1, 0x30, "Logic")] public float Value;
        [RTTI.Member(2, 0x34, "Logic")] public EFloatFactComparisonLogic CompareLogic;
        [RTTI.Member(3, 0x38, "Bounds")] public float NotifyMin;
        [RTTI.Member(4, 0x3C, "Bounds")] public float NotifyMax;
    }

    [RTTI.Serializable(0x5BFB7EA1CE528325)]
    public class FloatFactQuestTriggerInstance : FactQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xA5D856AEEC225E8A)]
    public class FloatProperty : FloatPropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x3EFFB7F768AC70A0)]
    public class FloatPropertyBase : Property
    {
    }

    [RTTI.Serializable(0x60622C1AE0B56501)]
    public class FloatPropertyLink : PropertyLinkBase
    {
        [RTTI.Member(0, 0x0)] public Ref<FloatPropertyBase> Property;
    }

    [RTTI.Serializable(0x8DB5833407F1C222)]
    public class FloorSlopeDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x29A7527905280363)]
    public class FloorSlopeDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String LongitudinalSlopeAngleAnimVarName;
        [RTTI.Member(1, 0x30, "Logic")] public String LateralSlopeAngleAnimVarName;
        [RTTI.Member(2, 0x38, "Logic")] public EFloorSlopeDetectionMethod DetectionMethod;
        [RTTI.Member(3, 0x3C, "Logic")] public FloorSlopeDetectionProbeSettings ProbeSettings;
        [RTTI.Member(4, 0x60, "Logic")] public FRange AllowedLongitudinalAngleRange;
        [RTTI.Member(5, 0x68, "Logic")] public FRange AllowedLateralAngleRange;
        [RTTI.Member(6, 0x70, "Logic")] public bool UseAmphibiousCollisionLayer;
        [RTTI.Member(7, 0x71, "Logic")] public bool ExcludeCollisionGroupEntity;
    }

    [RTTI.Serializable(0x212642190826C0BF)]
    public class FloorSlopeDetectionProbeSettings
    {
        [RTTI.Member(0, 0x0)] public float ProbeRadius;
        [RTTI.Member(1, 0x4)] public float PlaneExtension;
        [RTTI.Member(2, 0x8)] public bool AlignProbesToCollisionCapsule;
        [RTTI.Member(3, 0xC)] public float ProbeDistanceFront;
        [RTTI.Member(4, 0x10)] public float ProbeDistanceBack;
        [RTTI.Member(5, 0x14)] public float ProbeDistanceLeft;
        [RTTI.Member(6, 0x18)] public float ProbeDistanceRight;
        [RTTI.Member(7, 0x1C)] public FRange ProbeVerticalRange;
    }

    [RTTI.Serializable(0xC0B629D334E83D22)]
    public class FlowPuzzleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEC46FF414C693092)]
    public class FlowPuzzleNodeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF7F978705F623CB8)]
    public class FlowPuzzleNodeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<FlowPuzzleNodeSocket> Sockets;
        [RTTI.Member(1, 0x38, "Logic")] public bool IsBroken;
        [RTTI.Member(2, 0x3C, "Logic")] public float Range;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<EntityResource> ChildEntityResourceToRotate;
        [RTTI.Member(4, 0x48, "Logic")] public float RotateSpeed;
        [RTTI.Member(5, 0x4C, "Logic")] public float ConnectTime;
        [RTTI.Member(6, 0x50, "Logic")] public bool SetToSolvedWhenPuzzleIsSolved;
    }

    [RTTI.Serializable(0x7C28A24692110493)]
    public class FlowPuzzleNodeSocket
    {
        [RTTI.Member(0, 0x0)] public bool ProvidesFlow;
        [RTTI.Member(1, 0x1)] public bool IsEndpoint;
        [RTTI.Member(2, 0x4)] public int RelativeOrientation;
    }

    [RTTI.Serializable(0x1B948DB34A7B6136)]
    public class FlowPuzzleSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<EnumFact> NodeStateFact;
        [RTTI.Member(1, 0x30)] public Ref<EnumFactValue> OffStateFactValue;
        [RTTI.Member(2, 0x38)] public Ref<EnumFactValue> OnStateFactValue;
        [RTTI.Member(3, 0x40)] public Ref<EnumFactValue> HalfConnectedStateFactValue;
        [RTTI.Member(4, 0x48)] public Ref<EnumFactValue> ConnectedStateFactValue;
        [RTTI.Member(5, 0x50)] public Ref<EnumFactValue> SolvedStateFactValue;
        [RTTI.Member(6, 0x58)] public Ref<IntegerFact> OrientationFact;
        [RTTI.Member(7, 0x60)] public Ref<IntegerFact> DistanceToBrokenNodeFact;
        [RTTI.Member(8, 0x68)] public Ref<IntegerFact> FlowDirectionFact;
        [RTTI.Member(9, 0x70)] public Ref<IntegerFact> TotalNodeCountFact;
        [RTTI.Member(10, 0x78)] public Ref<IntegerFact> ConnectedNodeCountFact;
    }

    [RTTI.Serializable(0xF29CAFE34DBCAFA0)]
    public class FlyoverCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0x17A2A6106BD66CAB)]
    public class FlyoverCameraEntityRep : CameraEntityRep
    {
    }

    [RTTI.Serializable(0x93632BD2DE8F4099)]
    public class FlyoverCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(0, 0x1D8, "Logic")] public float ForwardSpeed;
        [RTTI.Member(1, 0x1DC, "Logic")] public float StrafeSpeed;
        [RTTI.Member(2, 0x1E0, "Logic")] public float UpDownSpeed;
        [RTTI.Member(3, 0x1E4, "Logic")] public float HeadingSpeed;
        [RTTI.Member(4, 0x1E8, "Logic")] public float PitchSpeed;
        [RTTI.Member(5, 0x1EC, "Logic")] public float MinPitch;
        [RTTI.Member(6, 0x1F0, "Logic")] public float MaxPitch;
        [RTTI.Member(7, 0x1F4, "Logic")] public float RollSpeed;
        [RTTI.Member(8, 0x1F8, "Logic")] public float MinRoll;
        [RTTI.Member(9, 0x1FC, "Logic")] public float MaxRoll;
    }

    [RTTI.Serializable(0x3766878D3CB9C3CC)]
    public class FlyoverDeathCameraEntity : DeathCameraEntity
    {
    }

    [RTTI.Serializable(0xA88623A70B0D41F6)]
    public class FlyoverDeathCameraEntityRep : DeathCameraEntityRep
    {
    }

    [RTTI.Serializable(0x74D4997FC49137B3)]
    public class FlyoverDeathCameraEntityResource : DeathCameraEntityResource
    {
        [RTTI.Member(0, 0x1E0, "Logic")] public float PlayerScreenPosition;
        [RTTI.Member(1, 0x1E4, "Logic")] public float TargetScreenPosition;
        [RTTI.Member(2, 0x1E8, "Logic")] public float DistanceFromPlayer;
        [RTTI.Member(3, 0x1EC, "Logic")] public float VerticalAngleIfSuicide;
        [RTTI.Member(4, 0x1F0, "Logic")] public bool TrackTargetWhenNotVisible;
        [RTTI.Member(5, 0x1F4, "Logic")] public float CameraSmoothness;
        [RTTI.Member(6, 0x1F8, "Logic")] public float GetUpCameraSmoothness;
        [RTTI.Member(7, 0x1FC, "Logic")] public float CameraCollisionRadius;
        [RTTI.Member(8, 0x200, "Logic")] public float MinHeightAbovePlayer;
        [RTTI.Member(9, 0x208, "Logic")] public Ref<CurveResource> GetUpDistanceCurve;
        [RTTI.Member(10, 0x210, "Logic")] public Array<String> LookAtTargetTypes;
    }

    [RTTI.Serializable(0x29C1FE20A6F2C6BE)]
    public class FocusAlertSignal : WorldNode
    {
        [RTTI.Member(0, 0x68, "Logic")] public Array<Ref<FocusScannedInfo>> FocusScannedInfo;
        [RTTI.Member(1, 0x78, "Logic")] public float DetectionRange;
        [RTTI.Member(2, 0x7C, "Entity")] public UUIDRef<Spawnpoint> Spawnpoint;
        [RTTI.Member(3, 0x90, "Entity")] public Vec3 EntityOffset;
    }

    [RTTI.Serializable(0x76390CEE7A9253CE)]
    public class FocusAlertSignalManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x6EBF5E50F281FC7E)]
    public class FocusCollisionTrigger : CollisionTrigger
    {
    }

    [RTTI.Serializable(0x5150CC78CBF57994)]
    public class FocusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE0BA167BD107650F)]
    public class FocusComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "OutlineEntity")] public Ref<EntityResource> OutlineEntityResource;
        [RTTI.Member(1, 0x30, "OutlineEntity")] public float OutlineEntityRemoveDelay;
        [RTTI.Member(2, 0x38, "OutlineEntity")] public Ref<FocusOutlineColorSettings> OutlineColorSettings;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<EntityAction> Activate;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<EntityAction> Deactivate;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<BooleanFact> ActiveFact;
        [RTTI.Member(6, 0x58, "Tagging")] public Ref<SoundResource> TaggedSoundEffect;
        [RTTI.Member(7, 0x60, "Tagging")] public Ref<SoundResource> UnTaggedSoundEffect;
        [RTTI.Member(8, 0x68, "Logic")] public float LookInputTreshHold;
        [RTTI.Member(9, 0x6C, "Logic")] public float MaxActivationDelay;
        [RTTI.Member(10, 0x70, "Representation")] public String AnimAction;
        [RTTI.Member(11, 0x78, "Representation")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(12, 0x80, "FocusTarget")] public float FocusTargetAngle;
        [RTTI.Member(13, 0x84, "FocusTarget")] public float FocusPatternSpeed;
        [RTTI.Member(14, 0x88, "FocusTarget")] public int FocusPatternRings;
        [RTTI.Member(15, 0x8C, "FocusTarget")] public float FocusPatternTime;
        [RTTI.Member(16, 0x90, "FocusTarget")] public float FocusAimDistanceWeight;
        [RTTI.Member(17, 0x94, "FocusTarget")] public float FocusAimAngleWeight;
        [RTTI.Member(18, 0x98, "Scanning")] public float ScanningDelay;
        [RTTI.Member(19, 0x9C, "Tagging")] public float TaggedPatrolPathRange;
        [RTTI.Member(20, 0xA0, "FocusModeTagging")] public float FocusModeTagRange;
        [RTTI.Member(21, 0xA4, "FocusModeTagging")] public float FocusModeTagFadeDistance;
        [RTTI.Member(22, 0xA8, "Tracking")] public float TrackingRange;
        [RTTI.Member(23, 0xB0, "Tracking")] public Ref<BooleanFact> IsTracksVisibleFact;
        [RTTI.Member(24, 0xB8, "Logic")] public Ref<BooleanFact> IsFocusAllowedInSequencesFact;
        [RTTI.Member(25, 0xC0, "FocusAlertSignal")] public Ref<SoundResource> SignalAlertSound;
        [RTTI.Member(26, 0xC8, "FocusAlertSignal")] public String SignalAlertSoundHelperName;
        [RTTI.Member(27, 0xD0, "FocusAlertSignal")] public float SignalScanningRadius;
        [RTTI.Member(28, 0xD4, "FocusAlertSignal")] public float SignalScanningDuration;
        [RTTI.Member(29, 0xD8, "FocusAlertSignal")] public Ref<BooleanFact> SignalScannedFact;
        [RTTI.Member(30, 0xE0, "FocusAlertSignal")] public Ref<ParticleSystemResource> SignalParticleSystemResource;
        [RTTI.Member(31, 0xE8, "FocusAlertSignal")] public Ref<ParticleSystemResource> SignalScannedParticleSystemResource;
        [RTTI.Member(32, 0xF0, "WorldIcons")] public Ref<HUDLogicGroupResource> WorldIconHUDLogicGroup;
        [RTTI.Member(33, 0xF8, "WorldIcons")] public Ref<BooleanFact> WorldIconsHiddenFact;
        [RTTI.Member(34, 0x100, "WorldIcons")] public float WorldIconsVisibleTimer;
    }

    [RTTI.Serializable(0xB34C6905E3270841)]
    public class FocusLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x957CFE66184EE208)]
    public class FocusLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x34528F330C52C56)]
    public class FocusOcclusionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1F6586A8929DB0EB)]
    public class FocusOcclusionComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x2D5F522C052B0FFF)]
    public class FocusOcclusionComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x98127895582262CE)]
    public class FocusOutlineColorSet
    {
        [RTTI.Member(0, 0x0)] public String FillColorShaderVariableName;
        [RTTI.Member(1, 0x10)] public FRGBAColor FillColor;
        [RTTI.Member(2, 0x20)] public String OutlineColorShaderVariableName;
        [RTTI.Member(3, 0x30)] public FRGBAColor OutlineColor;
    }

    [RTTI.Serializable(0xB7C8010A5E0E62E3)]
    public class FocusOutlineColorSettings : Resource
    {
        [RTTI.Member(0, 0x70, "Logic")] public FocusOutlineColorSet Value1;
        [RTTI.Member(1, 0xB0, "Logic")] public FocusOutlineColorSet Value2;
        [RTTI.Member(2, 0xF0, "Logic")] public FocusOutlineColorSet Value3;
        [RTTI.Member(3, 0x130, "Logic")] public FocusOutlineColorSet Value4;
        [RTTI.Member(4, 0x170, "Logic")] public FocusOutlineColorSet Value5;
        [RTTI.Member(5, 0x1B0, "Logic")] public FocusOutlineColorSet Value6;
    }

    [RTTI.Serializable(0x5F7580AECE030BD2)]
    public class FocusOutlineComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x26CC983033EAC59D)]
    public class FocusOutlineComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3BCE79AEF602F315)]
    public class FocusOutlineComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<FocusOutlineSettings> OutlineSettings;
        [RTTI.Member(1, 0x30, "Logic")] public String TaggedMaterialName;
    }

    [RTTI.Serializable(0x94827E7034DDFCB)]
    public class FocusOutlineSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EFocusTargetOutlineType Value;
        [RTTI.Member(1, 0x29, "Logic")] public EFocusTargetOutlineType TaggedValue;
        [RTTI.Member(2, 0x30, "Logic")] public FocusOutlineColorSet HighlightColorSet;
    }

    [RTTI.Serializable(0xD02D0FF27750DD02)]
    public class FocusScannableBase : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> LocalizerResource;
        [RTTI.Member(1, 0x30, "Modifiers")] public bool VulnerableToAllDamage;
        [RTTI.Member(2, 0x38, "Modifiers")] public Array<Ref<DamageTypeResource>> Vulnerabilities;
        [RTTI.Member(3, 0x48, "Modifiers")] public bool ResistantToAllDamage;
        [RTTI.Member(4, 0x50, "Modifiers")] public Array<Ref<DamageTypeResource>> Resistances;
    }

    [RTTI.Serializable(0x1EB7C8D78E0A9B36)]
    public class FocusScannableBody : FocusScannableBase
    {
        [RTTI.Member(0, 0x60, "HUD")] public Ref<UITexture> UIDisplayIcon;
        [RTTI.Member(1, 0x68, "HUD")] public Ref<UITexture> UIHighlightedIcon;
    }

    [RTTI.Serializable(0x9564FAF31AEA1EAC)]
    public class FocusScannableCategory : Resource
    {
        [RTTI.Member(0, 0x28, "Scanning")] public Ref<LocalizedTextResource> LocalizerResource;
        [RTTI.Member(1, 0x30, "Scanning")] public Array<Ref<FocusScannableObject>> ScannableObject;
        [RTTI.Member(2, 0x40, "Outline")] public Ref<FocusOutlineSettings> OutlineSettings;
        [RTTI.Member(3, 0x48, "HUD")] public Ref<UITexture> UIDisplayIcon;
        [RTTI.Member(4, 0x50, "HUD")] public Ref<UITexture> UIDestroyedIcon;
        [RTTI.Member(5, 0x58, "HUD")] public Ref<UITexture> UIHighlightedIcon;
        [RTTI.Member(6, 0x60, "HUD")] public Ref<UITexture> UIHiddenIcon;
    }

    [RTTI.Serializable(0xDBB442DCFD67907C)]
    public class FocusScannableObject : FocusScannableBase
    {
        [RTTI.Member(0, 0x60)] public Ref<ConditionResource> DisplayCondition;
        [RTTI.Member(1, 0x68)] public Ref<TagProperty> TagProperty;
    }

    [RTTI.Serializable(0x7B89DD5C0B129C0A)]
    public class FocusScannedInfo : Resource
    {
        [RTTI.Member(0, 0x28, "Scanning")] public Ref<LocalizedTextResource> ScannedTitle;
        [RTTI.Member(1, 0x30, "Scanning")] public Ref<LocalizedTextResource> ScannedSubTitle;
        [RTTI.Member(2, 0x38, "Scanning")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(3, 0x40, "Scanning")] public Ref<FocusTargetType> FocusTargetType;
        [RTTI.Member(4, 0x48, "Scanning")] public Array<Ref<FocusScannableCategory>> ScannableCategories;
        [RTTI.Member(5, 0x58, "Scanning")] public Ref<FocusScannableBody> ScannableBody;
        [RTTI.Member(6, 0x60, "Outline")] public Ref<FocusOutlineSettings> OutlineSettings;
        [RTTI.Member(7, 0x68, "Outline")] public Array<Ref<TagProperty>> OcclusionCullingDisabledTags;
        [RTTI.Member(8, 0x78, "Scanning")] public Ref<ConditionResource> ConditionResource;
    }

    [RTTI.Serializable(0x27FF98552A16D985)]
    public class FocusTargetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA6FC41E982818491)]
    public class FocusTargetComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<BooleanFact> FocusTargetInvalidFact;
        [RTTI.Member(1, 0x30, "Logic")] public bool IsTargetWhenFriendly;
        [RTTI.Member(2, 0x31, "Logic")] public bool IsTargetWhenDead;
        [RTTI.Member(3, 0x32, "Logic")] public bool IsTargetWhenLootable;
        [RTTI.Member(4, 0x33, "Logic")] public bool IsPlayerInSameFocusTriggerRequired;
        [RTTI.Member(5, 0x34, "Logic")] public float FocusTargetOverrideDistance;
        [RTTI.Member(6, 0x38, "Scanning")] public float ScanningDuration;
        [RTTI.Member(7, 0x40, "Scanning")] public Ref<CameraMagnetTagResource> ScanningPartCameraMagnetTagResource;
        [RTTI.Member(8, 0x48, "Scanning")] public Ref<FocusScannedInfo> DefaultScannedInfo;
        [RTTI.Member(9, 0x50, "Scanning")] public Array<Ref<FocusScannedInfo>> ConditionalScannedInfo;
        [RTTI.Member(10, 0x60, "Tagging")] public bool Taggable;
        [RTTI.Member(11, 0x68, "PatrolPath")] public Ref<TrackingPathSettings> TrackingPathSettings;
    }

    [RTTI.Serializable(0xBAE164D488660B15)]
    public class FocusTargetType : Resource
    {
        [RTTI.Member(0, 0x28, "Type")] public Ref<LocalizedTextResource> FriendlyName;
        [RTTI.Member(1, 0x30, "Type")] public Ref<LocalizedTextResource> HostileName;
        [RTTI.Member(2, 0x38, "Type")] public Ref<LocalizedTextResource> CorruptedName;
        [RTTI.Member(3, 0x40, "Type")] public Ref<LocalizedTextResource> DeadName;
        [RTTI.Member(4, 0x48, "Type")] public Ref<UITexture> UIIcon;
        [RTTI.Member(5, 0x50, "Type")] public FRGBAColor Color;
        [RTTI.Member(6, 0x60, "Info")] public Ref<LocalizedTextResource> DeadDescription;
        [RTTI.Member(7, 0x68, "Info")] public bool ShowModifiersWhenAlive;
        [RTTI.Member(8, 0x69, "Level")] public bool FriendlyLevelShown;
        [RTTI.Member(9, 0x6A, "Level")] public bool EnemyLevelShown;
        [RTTI.Member(10, 0x6B, "Level")] public bool FriendlyTypeIndicatorShown;
        [RTTI.Member(11, 0x6C, "Level")] public bool EnemyTypeIndicatorShown;
        [RTTI.Member(12, 0x6D, "Type")] public bool FactionIndicatorShown;
    }

    [RTTI.Serializable(0xC660CFC7926122B7)]
    public class FogOfWarRevealArea : ParentWorldNode
    {
        [RTTI.Member(0, 0x70)] public Ref<CollisionTrigger> Area;
    }

    [RTTI.Serializable(0xAD95CE46E2BD1395)]
    public class FogSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public FRGBAColor Color;
        [RTTI.Member(1, 0x10, "Settings")] public float Brightness;
        [RTTI.Member(2, 0x14, "Settings")] public float Depth;
    }

    [RTTI.Serializable(0x7C8CFA72B4357AEF)]
    public class FoliageMaterial
    {
        [RTTI.Member(0, 0x0)] public FRGBColor TranslucencyIntensity;
    }

    [RTTI.Serializable(0xA42A96A9C70C6B26)]
    public class FollowCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0x3DB2B1C1B50D1AF9)]
    public class FollowCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(0, 0x200, "Logic")] public Vec3 LocalCameraPosition;
        [RTTI.Member(1, 0x210, "Logic")] public float CollisionMovementSpeedIn;
        [RTTI.Member(2, 0x214, "Logic")] public float CollisionMovementSpeedOut;
        [RTTI.Member(3, 0x218, "Logic")] public float CollisionMovementDelay;
        [RTTI.Member(4, 0x220, "Logic")] public float CameraCollisionRadius;
        [RTTI.Member(5, 0x224, "Logic")] public float CameraKeepADistanceOf;
    }

    [RTTI.Serializable(0xB8D99D0FD322DE6D)]
    public class FollowCameraProperties : CameraPropertiesBase
    {
        [RTTI.Member(0, 0x20, "Logic")] public Vec3 LocalCameraPosition;
        [RTTI.Member(1, 0x30, "Logic")] public float CollisionMovementSpeedIn;
        [RTTI.Member(2, 0x34, "Logic")] public float CollisionMovementSpeedOut;
        [RTTI.Member(3, 0x38, "Logic")] public float CollisionMovementDelay;
    }

    [RTTI.Serializable(0xDB9EFAA168519219)]
    public class FontCharGlyphInfo : FontCharInfo
    {
        [RTTI.Member(0, 0x10)] public GlyphContourList GlyphContourList;
    }

    [RTTI.Serializable(0xB07FA204C489C9E7)]
    public class FontCharInfo
    {
        [RTTI.Member(0, 0x0)] public FontGlyphMetrics GlyphMetrics;
        [RTTI.Member(1, 0xC)] public wchar Char;
    }

    [RTTI.Serializable(0x47478D0384CA6A4A)]
    public class FontGlyphMetrics
    {
        [RTTI.Member(0, 0x0)] public Vec2Pack Bearing;
        [RTTI.Member(1, 0x8)] public float AdvanceWidth;
    }

    [RTTI.Serializable(0x43F4E395F9CE4BA4)]
    public class FontKerningPair
    {
        [RTTI.Member(0, 0x0)] public wchar First;
        [RTTI.Member(1, 0x2)] public wchar Second;
        [RTTI.Member(2, 0x4)] public float Kerning;
    }

    [RTTI.Serializable(0x2B2A73E2413BA60E)]
    public class FontResource : Resource
    {
        [RTTI.Member(0, 0x28)] public FontResourceData FontResourceData;
    }

    [RTTI.Serializable(0x96C487035331AED2)]
    public class FontResourceData
    {
        [RTTI.Member(0, 0x0)] public String TypefaceName;
        [RTTI.Member(1, 0x8)] public FontTextMetrics TextMetrics;
        [RTTI.Member(2, 0x18)] public Array<FontCharGlyphInfo> CharInfo;
        [RTTI.Member(3, 0x28)] public Array<FontKerningPair> KerningPairs;
    }

    [RTTI.Serializable(0xD772C0C6D53FCAB5)]
    public class FontTextMetrics
    {
        [RTTI.Member(0, 0x0)] public float Height;
        [RTTI.Member(1, 0x4)] public float Ascent;
        [RTTI.Member(2, 0x8)] public float Descent;
        [RTTI.Member(3, 0xC)] public float EmHeight;
    }

    [RTTI.Serializable(0xF2BC23844A70F90B)]
    public class FootPlacementComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4BB4BCE9B52E9CC8)]
    public class FootPlacementComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public String HipIKVariableName;
        [RTTI.Member(1, 0x30)] public String PredictiveTerrainName;
    }

    [RTTI.Serializable(0x7BCD7EE0AA9A0D62)]
    public class FootstepAuralStimulusResource : Resource
    {
        [RTTI.Member(0, 0x28)] public float MinimumSpeed;
        [RTTI.Member(1, 0x2C)] public float MaximumSpeed;
        [RTTI.Member(2, 0x30)] public Ref<AIAuralStimulusResource> AIAuralStimulusResource;
    }

    [RTTI.Serializable(0x87131808C2E9AB07)]
    public class ForceFieldEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4B2C2AA0CCC32C68)]
    public class ForceFieldEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<ForceFieldResource> ForceFieldResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0xBC5311C73AF2FA3F)]
    public class ForceFieldInstance : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public Ref<ForceFieldResource> Resource;
    }

    [RTTI.Serializable(0xC8011BE208F9D254)]
    public class ForceFieldManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x6BEAB563291FF330)]
    public class ForceFieldManagerSettings : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<WorldDataType> WaterHeightDataType;
        [RTTI.Member(1, 0x28)] public Ref<WorldDataType> WaterFlowDataType;
    }

    [RTTI.Serializable(0x1000A1FABAEBDA8E)]
    public class ForceFieldResource : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public ForceFieldSettings Settings;
    }

    [RTTI.Serializable(0x7CE2335A82FDBD2)]
    public class ForceFieldSettings
    {
        [RTTI.Member(0, 0x0, "General")] public uint8 EffectiveAxes;
        [RTTI.Member(1, 0x0, "General")] public EForceFieldShape Shape;
        [RTTI.Member(2, 0x4, "General")] public EForceBehaviour ForceBehaviour;
        [RTTI.Member(3, 0x8, "General")] public EForceType ForceType;
        [RTTI.Member(4, 0xC, "General")] public EForceFieldFlowDriver FlowDriver;
        [RTTI.Member(5, 0x10, "General")] public Mat44 Transform;
        [RTTI.Member(6, 0x90, "General")] public Quat ForceOrientation;
        [RTTI.Member(7, 0x120, "General")] public float FadeRange;
        [RTTI.Member(8, 0x124, "General")] public float Strength;
        [RTTI.Member(9, 0x128, "General")] public float TurbulenceAnimationSpeed;
        [RTTI.Member(10, 0x12C, "General")] public float TurbulenceSpatialVariation;
        [RTTI.Member(11, 0x130, "General")] public float TurbulenceAmount;
        [RTTI.Member(12, 0x150, "General")] public float TurbulenceShaping;
        [RTTI.Member(13, 0x154, "General")] public float TurbulenceVerticalAnimation;
        [RTTI.Member(14, 0x159, "General")] public uint8 Priority;
        [RTTI.Member(15, 0x15C, "General")] public float FlowAnimationSpeed;
        [RTTI.Member(16, 0x160, "General")] public float MaxFlowSpeed;
        [RTTI.Member(17, 0x164, "General")] public float MinFlowSpeed;
        [RTTI.Member(18, 0x168, "General")] public float FlowSpatialVariation;
        [RTTI.Member(19, 0x16C, "General")] public float MinFlowSpeedClamp;
        [RTTI.Member(20, 0x1A0, "General")] public EForceFieldFilter Filter;
        [RTTI.Member(21, 0x1A4, "General")] public bool DirectionMapUseWorldSpaceBounds;
        [RTTI.Member(22, 0x1B0, "General")] public BoundingBox2 DirectionMapWorldSpaceBounds;
        [RTTI.Member(23, 0x1D0, "General")] public Ref<Texture> DirectionMap;
    }

    [RTTI.Serializable(0xA7A3F8ECBD70E197)]
    public class ForceFieldSpringSettings : Resource
    {
        [RTTI.Member(0, 0x30)] public SpringAttr Special;
        [RTTI.Member(1, 0x50)] public SpringAttr Grass;
        [RTTI.Member(2, 0x70)] public SpringAttr Plant;
        [RTTI.Member(3, 0x90)] public SpringAttr Tree;
    }

    [RTTI.Serializable(0x4A487A35CFADDF1C)]
    public class ForceMinimumLodComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD2F0817458645647)]
    public class ForceMinimumLodComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xFCEA5EBDC26D7B94)]
    public class ForceMinimumLodComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int MinimumLodIndex;
    }

    [RTTI.Serializable(0x665DBECFBF35D711)]
    public class ForceSmartObjectAreaToHighLoDEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x275E06DCD2F26447)]
    public class ForceSmartObjectAreaToHighLoDEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public UUIDRef<SmartObjectArea> SmartObjectArea;
    }

    [RTTI.Serializable(0x3E52D287531635AB)]
    public class ForgetFactAction : MemoryFactActionBase
    {
    }

    [RTTI.Serializable(0xA926AE648E0A4A61)]
    public class Frustum
    {
        [RTTI.Member(0, 0x0)] public PlaneEq Plane0;
        [RTTI.Member(1, 0x10)] public PlaneEq Plane1;
        [RTTI.Member(2, 0x20)] public PlaneEq Plane2;
        [RTTI.Member(3, 0x30)] public PlaneEq Plane3;
        [RTTI.Member(4, 0x40)] public PlaneEq Plane4;
        [RTTI.Member(5, 0x50)] public PlaneEq Plane5;
        [RTTI.Member(6, 0x60)] public int PlaneCount;
    }

    [RTTI.Serializable(0x525CF4860A368A14)]
    public class FullBodyAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x15216F5542D69403)]
    public class FullBodyAnimationEventResource : FullBodyAnimationEventResourceBase
    {
        [RTTI.Member(0, 0x58, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(1, 0x60, "Logic")] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(2, 0x68, "Logic")] public ERootBoneMode RootBoneMode;
        [RTTI.Member(3, 0x6C, "Logic")] public bool NoMorpheme;
    }

    [RTTI.Serializable(0x889CDA4F667DF51)]
    public class FullBodyAnimationEventResourceBase : ScaleableTimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<CurveResource> TimeCurve;
        [RTTI.Member(2, 0x50, "Logic")] public bool Loop;
    }

    [RTTI.Serializable(0x28AEBFB60C98A91F)]
    public class GCoreGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA2950759F9745945)]
    public class GCoreSettings : ProjectSettings
    {
        [RTTI.Member(0, 0x28)] public Ref<FactDatabaseResource> FactDatabaseResource;
        [RTTI.Member(1, 0x30)] public Ref<DispensableEntityManagerSettings> DispensableEntityManagerSettings;
        [RTTI.Member(2, 0x38)] public Ref<PhysicsContactEffectSystemSettings> PhysicsContactEffectSystemSettings;
        [RTTI.Member(3, 0x40)] public Ref<AttachToWorldMatrixMoverResource> AttachToWorldMatrixMover;
        [RTTI.Member(4, 0x48)] public Ref<AttachToWorldMatrixMoverResource> AttachToWorldPositionMover;
        [RTTI.Member(5, 0x50)] public Ref<AttachToPartMoverResource> AttachToPartMover;
        [RTTI.Member(6, 0x58)] public Ref<AttachToHelperMoverResource> AttachToHelperMover;
        [RTTI.Member(7, 0x60)] public Ref<MounterMoverResource> MounterMover;
        [RTTI.Member(8, 0x68)] public Ref<SimplePathMoverResource> SimplePathMover;
        [RTTI.Member(9, 0x70)] public Ref<AttachPhysicsRagdollToHelperMoverResource> AttachPhysicsRagdollToHelperMover;
        [RTTI.Member(10, 0x78)] public Ref<AttachToHelperPositionMoverResource> AttachToHelperPositionMover;
    }

    [RTTI.Serializable(0x72751DB098EF99A1)]
    public class GGUUID_GGUUID
    {
        [RTTI.Member(0, 0x0)] public GGUUID Key;
        [RTTI.Member(1, 0x10)] public GGUUID Value;
    }

    [RTTI.Serializable(0x9204812C99E73E79)]
    public class GGUUID_SceneEntityImpostorInfo
    {
        [RTTI.Member(0, 0x0)] public GGUUID Key;
        [RTTI.Member(1, 0x10)] public SceneEntityImpostorInfo Value;
    }

    [RTTI.Serializable(0xB3C9DC719450B961)]
    public class GSequenceSettings : ProjectSettings
    {
        [RTTI.Member(0, 0x28)] public Ref<SequenceResourceBase> SubSequenceResource15Hz;
        [RTTI.Member(1, 0x30)] public Ref<SequenceResourceBase> SubSequenceResource30Hz;
        [RTTI.Member(2, 0x38)] public Ref<SequenceEntityResource> SequenceEntityResource15Hz;
        [RTTI.Member(3, 0x40)] public Ref<SequenceEntityResource> SequenceEntityResource30Hz;
        [RTTI.Member(4, 0x48)] public Ref<EntityResource> ModelActorEntityResource;
        [RTTI.Member(5, 0x50)] public Ref<AttachToSequenceLocatorMoverResource> AttachToSequenceLocatorMoverResource;
        [RTTI.Member(6, 0x58)] public Ref<DoFApertureSettings> DoFApertureSettings;
        [RTTI.Member(7, 0x60)] public Ref<FacialEmotionAnimationResource> FacialEmotionAnimationDefault;
    }

    [RTTI.Serializable(0x656D54EEADBE2E74)]
    public class GStreamingSettings : ProjectSettings
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<EntityActivationPolicy>> ActivationPolicies;
    }

    [RTTI.Serializable(0x2A3C7DB790214B9C)]
    public class Game : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Array<Ref<LevelGroup>> LevelGroups;
        [RTTI.Member(1, 0x30, "General")] public StreamingRef<ObjectCollection> SystemAssets;
        [RTTI.Member(2, 0x50, "General")] public StreamingRef<ObjectCollection> ApplicationAssets;
        [RTTI.Member(3, 0x70, "General")] public Array<StreamingRef<ProjectSettings>> ProjectSettingsList;
        [RTTI.Member(4, 0x80, "General")] public Array<Ref<VirtualRTTIResource>> VirtualRTTIDefinitions;
    }

    [RTTI.Serializable(0x56F25CE35265439A)]
    public class GameEventAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String GameEvent;
    }

    [RTTI.Serializable(0xB1513E0E54460428)]
    public class GameEventManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<InstigatorFlagStatMap> InstigatorFlagStatMaps;
        [RTTI.Member(1, 0x38, "Logic")] public Array<VictimPropertyStatMap> VictimPropertyStatMaps;
        [RTTI.Member(2, 0x48, "Logic")] public Array<DamageTypeToEntityStatMap> DamageTypeToEntityStatMaps;
        [RTTI.Member(3, 0x58, "Logic")] public Ref<StatsClassResource> PlayerStatsClass;
        [RTTI.Member(4, 0x60, "Logic")] public Ref<StatsClassResource> BaseCampGunStatsClass;
        [RTTI.Member(5, 0x68, "Logic")] public float RecentlyKilledFriendliesRememberTime;
        [RTTI.Member(6, 0x70, "Logic")] public Ref<InstigatorFlagResource> ZipLiningInstigatorFlag;
    }

    [RTTI.Serializable(0x96F8DE85203B82C7)]
    public class GameGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x310A176D13DCF34F)]
    public class GameInputJoystickResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public uint8 ButtonPressureForPress;
        [RTTI.Member(1, 0x30, "General")] public Array<ButtonPressureOverride> ButtonPressureOverrides;
        [RTTI.Member(2, 0x40, "Touchpad")] public int MaxHistoryCount;
        [RTTI.Member(3, 0x44, "Touchpad")] public int RequiredHistoryCount;
        [RTTI.Member(4, 0x48, "Touchpad")] public float HorizontalDistanceThreshold;
        [RTTI.Member(5, 0x4C, "Touchpad")] public float VerticalDistanceThreshold;
    }

    [RTTI.Serializable(0x549BAE0D8F988495)]
    public class GameLibSettings : ProjectSettings
    {
        [RTTI.Member(0, 0x28)] public Ref<DLCManagerGameResource> DLCManagerResource;
        [RTTI.Member(1, 0x30)] public Ref<BulletSystemResource> BulletSystemResource;
        [RTTI.Member(2, 0x38)] public Ref<RewardManagerResource> RewardManagerResource;
        [RTTI.Member(3, 0x40)] public Ref<PhotoModeResource> PhotoModeResource;
        [RTTI.Member(4, 0x48)] public Ref<FontResource> PreRenderedMovieSubtitleFont;
        [RTTI.Member(5, 0x50)] public float PreRenderedMovieSubtitleSize;
        [RTTI.Member(6, 0x58)] public Ref<InteractiveMoverResource> InteractiveMover;
        [RTTI.Member(7, 0x60)] public Ref<LocalizedTextResource> SequenceNetworkAlreadyBoundMessage;
        [RTTI.Member(8, 0x68)] public Ref<LocalizedTextResource> AutomaticSaveGameText;
        [RTTI.Member(9, 0x70)] public Ref<LocalizedTextResource> ManualSaveGameText;
        [RTTI.Member(10, 0x78)] public Ref<LocalizedTextResource> QuickSaveGameText;
        [RTTI.Member(11, 0x80)] public Ref<LocalizedTextResource> NewGamePlusSaveGameText;
        [RTTI.Member(12, 0x88)] public Ref<LocalizedTextResource> NewGamePlusStartPointSaveGameText;
        [RTTI.Member(13, 0x90)] public Ref<LocalizedTextResource> UserProfileText;
        [RTTI.Member(14, 0x98)] public Ref<LocalizedTextResource> SaveGameForNewerVersionText;
        [RTTI.Member(15, 0xA0)] public Ref<LocalizedTextResource> SaveGameForMissingDLCText;
        [RTTI.Member(16, 0xA8)] public Ref<BooleanFact> InCinematicFact;
        [RTTI.Member(17, 0xB0)] public Ref<InGameMenuResource> InGameMenuResource;
        [RTTI.Member(18, 0xB8)] public Ref<SoundMixStateResource> ManualSaveMixState;
        [RTTI.Member(19, 0xC0)] public Array<Ref<EntitlementResource>> DLCEntitlements;
        [RTTI.Member(20, 0xD0)] public Ref<FlowPuzzleSettings> FlowPuzzleSettings;
    }

    [RTTI.Serializable(0xA81AE12E1E23B127)]
    public class GameModeAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<EGameMode> GameModes;
    }

    [RTTI.Serializable(0x6DF02CC6DD205981)]
    public class GameMovie : RTTIObject
    {
    }

    [RTTI.Serializable(0x5DC9F1A184AF1D32)]
    public class GameRoundSettings : CoreObject
    {
        [RTTI.Member(0, 0x20)] public String LevelID;
    }

    [RTTI.Serializable(0xB4E64447FE66250F)]
    public class GameSchedule : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xCDC1E21F42169D2A)]
    public class GameScheduleEntry : RTTIObject
    {
    }

    [RTTI.Serializable(0xF320A31FAFA88ECD)]
    public class GameScheduleEntryResource : Resource
    {
        [RTTI.Member(0, 0x28)] public float StartTime;
        [RTTI.Member(1, 0x2C)] public float StartTimeVariation;
        [RTTI.Member(2, 0x30)] public int StartDay;
        [RTTI.Member(3, 0x34)] public float ContinuousPlanWaitTime;
    }

    [RTTI.Serializable(0x1E0FB5BBBB64A605)]
    public class GameScheduleResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<GameScheduleEntryResource>> Entries;
        [RTTI.Member(1, 0x38, "Logic")] public bool Continuous;
    }

    [RTTI.Serializable(0xD734459B8E0B143)]
    public class GameScript : CoreScript
    {
    }

    [RTTI.Serializable(0x9F57C34CE7EEBAC4)]
    public class GameSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Version")] public int VersionNumber;
        [RTTI.Member(1, 0x2C, "Difficulty")] public EDifficulty DefaultDifficulty;
        [RTTI.Member(2, 0x30, "Difficulty")] public Array<EDifficulty> DifficultySelection;
        [RTTI.Member(3, 0x40, "PlayerSettings")] public bool DefaultLateJoinersAllowed;
        [RTTI.Member(4, 0x48, "Missions")] public Array<MissionSettings> MissionSettings;
        [RTTI.Member(5, 0x58, "Missions")] public Array<int> MissionTimeLimitSelection;
        [RTTI.Member(6, 0x68, "PlayerSettings")] public bool DefaultMustEndGameWhenWinnerDecided;
        [RTTI.Member(7, 0x6C, "Timers")] public float DefaultDeathCamTime;
        [RTTI.Member(8, 0x70, "PlayerSettings")] public int DefaultSpawnLives;
        [RTTI.Member(9, 0x78, "PlayerSettings")] public Array<int> DefaultSpawnLiveSelection;
        [RTTI.Member(10, 0x88, "PlayerSettings")] public bool UseSpawnWaves;
        [RTTI.Member(11, 0x8C, "Timers")] public int DefaultRespawnTimer;
        [RTTI.Member(12, 0x90, "Timers")] public int DefaultGracePeriod;
        [RTTI.Member(13, 0x94, "Timers")] public int DefaultInactivityKickTime;
        [RTTI.Member(14, 0x98, "Timers")] public Array<int> RespawnTimerSelection;
        [RTTI.Member(15, 0xA8, "Timers")] public int DefaultTimeBetweenMissions;
        [RTTI.Member(16, 0xAC, "RankGroup")] public bool DefaultRankGroupEnabled;
        [RTTI.Member(17, 0xB0, "RankGroup")] public int DefaultRankGroup;
        [RTTI.Member(18, 0xB8, "Missions")] public Array<int> SearchAndDestroyChargesSelection;
        [RTTI.Member(19, 0xC8, "Missions")] public Array<int> CaptureAndHoldWinPointsSelection;
        [RTTI.Member(20, 0xD8, "Missions")] public Array<int> CaptureAndSecureWinPointsSelection;
        [RTTI.Member(21, 0xE8, "Missions")] public Array<int> SearchAndSafeguardPointsSelection;
        [RTTI.Member(22, 0xF8, "Missions")] public Array<int> SearchAndRetrieveObjectReturnCountSelection;
        [RTTI.Member(23, 0x108, "Missions")] public Array<int> InfiltrateAndRetrieveObjectReturnCountSelection;
        [RTTI.Member(24, 0x118, "Missions")] public Array<int> BodycountSelection;
        [RTTI.Member(25, 0x128, "Missions")] public int DefaultBodycountQuota;
        [RTTI.Member(26, 0x12C, "Missions")] public int DefaultCaHCaptureTime;
        [RTTI.Member(27, 0x130, "Missions")] public Array<int> CaHCaptureTimeSelection;
        [RTTI.Member(28, 0x140, "Missions")] public int DefaultCaCCaptureTimeInner;
        [RTTI.Member(29, 0x144, "Missions")] public int DefaultCaCCaptureTimeMiddle;
        [RTTI.Member(30, 0x148, "Missions")] public int DefaultCaCCaptureTimeOuter;
        [RTTI.Member(31, 0x14C, "Missions")] public int DefaultCaSCaptureTime;
        [RTTI.Member(32, 0x150, "Missions")] public int DefaultExplosivePlacing;
        [RTTI.Member(33, 0x158, "Missions")] public Array<int> ExplosivePlacingSelection;
        [RTTI.Member(34, 0x168, "Missions")] public int DefaultExplosiveDefusing;
        [RTTI.Member(35, 0x170, "Missions")] public Array<int> ExplosiveDefusingSelection;
        [RTTI.Member(36, 0x180, "Missions")] public int DefaultExplosiveDetonationTime;
        [RTTI.Member(37, 0x188, "Missions")] public Array<int> ExplosiveDetonationTimeSelection;
        [RTTI.Member(38, 0x198, "Timers")] public int DefaultPreGameLobbyWaitTime;
        [RTTI.Member(39, 0x1A0, "Timers")] public Array<int> PreGameLobbyWaitTimeSelection;
        [RTTI.Member(40, 0x1B0, "Timers")] public int DefaultPostGameLobbyWaitTime;
        [RTTI.Member(41, 0x1B4, "Careers")] public int SentryTurretAmount;
        [RTTI.Member(42, 0x1B8, "Careers")] public int SentryTurretLifeTime;
        [RTTI.Member(43, 0x1BC, "Careers")] public int SentryTurretDisabledTime;
        [RTTI.Member(44, 0x1C0, "Careers")] public int BoostDisabledTime;
        [RTTI.Member(45, 0x1C4, "Careers")] public int CaptureSpawnPointType1Speed;
        [RTTI.Member(46, 0x1C8, "Careers")] public int CaptureSpawnPointType2Speed;
        [RTTI.Member(47, 0x1CC, "Careers")] public int ReviveDisabledTime;
        [RTTI.Member(48, 0x1D0, "Careers")] public int ReviveDamageDisabledTime;
        [RTTI.Member(49, 0x1D4, "Careers")] public int HealthPackDisabledTime;
        [RTTI.Member(50, 0x1D8, "Weapons")] public bool DefaultFriendlyFireEnabled;
        [RTTI.Member(51, 0x1D9, "PlayerSettings")] public bool ShowEnemiesOnRadar;
        [RTTI.Member(52, 0x1DA, "PlayerSettings")] public bool ShowAmmoCounter;
        [RTTI.Member(53, 0x1DC, "PlayerSettings")] public EAmmoSettings AmmoSettings;
        [RTTI.Member(54, 0x1E0, "PlayerSettings")] public Array<int> WarzoneMaxPlayerCountSelection;
        [RTTI.Member(55, 0x200, "PlayerSettings")] public Array<int> OperationsMaxPlayerCountSelection;
        [RTTI.Member(56, 0x220, "PlayerSettings")] public int DefaultMaxPlayerSpectatorCount;
        [RTTI.Member(57, 0x224, "PlayerSettings")] public int DefaultMaxAdminSpectatorCount;
        [RTTI.Member(58, 0x228, "PlayerSettings")] public int DefaultMinClientCount;
        [RTTI.Member(59, 0x22C, "Clans")] public int DefaultClansMinPlayerCount;
        [RTTI.Member(60, 0x230, "PlayerSettings")] public int DefaultOperationsMaxPlayerCount;
        [RTTI.Member(61, 0x234, "PlayerSettings")] public int DefaultSkirmishMaxPlayerCount;
        [RTTI.Member(62, 0x238, "PlayerSettings")] public int DefaultWarzoneMaxPlayerCount;
        [RTTI.Member(63, 0x23C, "Clans")] public int DefaultClansForfeitTimer;
        [RTTI.Member(64, 0x240, "PlayerSettings")] public EPlayerHealthSettings DefaultPlayerHealthSettings;
        [RTTI.Member(65, 0x244, "PlayerSettings")] public EHealthRegenerationSettings DefaultHealthRegenerationSettings;
        [RTTI.Member(66, 0x248, "PlayerSettings")] public int DefaultMaxBotCount;
        [RTTI.Member(67, 0x250, "PlayerSettings")] public Array<int> MaxBotCountSelection;
        [RTTI.Member(68, 0x260, "PlayerSettings")] public EDifficulty DefaultBotDifficulty;
        [RTTI.Member(69, 0x268, "PlayerSettings")] public Array<EDifficulty> BotDifficultySelection;
        [RTTI.Member(70, 0x278, "PlayerSettings")] public bool DefaultSplitScreenGame;
        [RTTI.Member(71, 0x279, "PlayerSettings")] public bool DefaultBotzoneGame;
        [RTTI.Member(72, 0x27A, "PlayerSettings")] public bool DefaultPracticeGame;
        [RTTI.Member(73, 0x27C, "PlayerSettings")] public EGameMode DefaultGameMode;
        [RTTI.Member(74, 0x280, "PlayerSettings")] public bool DefaultIsCustomGame;
        [RTTI.Member(75, 0x281, "PlayerSettings")] public bool DefaultIsAdminCreatedGame;
        [RTTI.Member(76, 0x282, "PlayerSettings")] public bool DefaultCampaignScoringEnabled;
        [RTTI.Member(77, 0x284, "Timers")] public float PlayerAssistTimeOut;
        [RTTI.Member(78, 0x288, "Timers")] public float TimeEnemiesVisibleAfterFiring;
        [RTTI.Member(79, 0x28C, "SmartSpawning")] public int TimeOut;
        [RTTI.Member(80, 0x290, "PlayerSettings")] public ECloseCombatSettings CloseCombatSettings;
        [RTTI.Member(81, 0x294, "EarlyDeaths")] public float EarlyDeathDetectionDuration;
        [RTTI.Member(82, 0x298, "EarlyDeaths")] public int EarlyDeathPreventionDeathCount;
        [RTTI.Member(83, 0x29C, "PlayerSettings")] public int MaxCoopPlayerCount;
        [RTTI.Member(84, 0x2A0, "Careers")] public Array<ECareer> DisabledCareers;
        [RTTI.Member(85, 0x2B0, "UnlockResources")] public Array<String> DefaultDisabledUnlockResources;
        [RTTI.Member(86, 0x2C0, "CombatHonors")] public bool DefaultCombatHonorsEnabled;
        [RTTI.Member(87, 0x2C4, "Objectives")] public float NewObjectiveIconBlinkDuration;
        [RTTI.Member(88, 0x2C8, "PlaylistFilter")] public String FeaturedPlaylistTag;
        [RTTI.Member(89, 0x2D0, "PlaylistFilter")] public String GGPlaylistTag;
        [RTTI.Member(90, 0x2D8, "PlaylistFilter")] public String ClanTag;
        [RTTI.Member(91, 0x2E0, "PlaylistFilter")] public String NewbieTag;
        [RTTI.Member(92, 0x2E8, "PlaylistFilter")] public String LastPlayedTag;
        [RTTI.Member(93, 0x2F0, "PlaylistFilter")] public String RecentlyPlayedTag;
        [RTTI.Member(94, 0x2F8, "PlaylistFilter")] public String PopularTag;
        [RTTI.Member(95, 0x300, "PlaylistLeaderboardStats")] public int MaxPlaylistLeaderboardStats;
        [RTTI.Member(96, 0x308, "PlaylistLeaderboardStats")] public Array<EPlayerScoreStat> SelectableLeaderboardStats;
        [RTTI.Member(97, 0x318, "PlayerSettings")] public Array<String> DefaultChallengeRequirements;
        [RTTI.Member(98, 0x330, "ColorBlindSupport")] public Array<ColorScheme> ColorSchemes;
        [RTTI.Member(99, 0x340, "ColorBlindSupport")] public RGBAColor NeutralColor;
        [RTTI.Member(100, 0x345, "PlayerSettings")] public bool DefaultPartiesAllowed;
        [RTTI.Member(101, 0x348, "PlayerSettings")] public int FactionSwitchingMinPlayerDifference;
        [RTTI.Member(102, 0x34C, "StartSettings")] public bool AllowSaveGames;
        [RTTI.Member(103, 0x350, "StartSettings")] public String SpawnMarker;
        [RTTI.Member(104, 0x358, "StartSettings")] public String BenchmarkSpawnMarkerName;
        [RTTI.Member(105, 0x360, "StartSettings")] public Array<Ref<FactValue>> InitialFacts;
        [RTTI.Member(106, 0x370, "NewGamePlus")] public Ref<NewGamePlusSettingsResourceGame> NewGamePlusSettings;
    }

    [RTTI.Serializable(0xBD58AE1B21EDC043)]
    public class GameState : CoreObject
    {
    }

    [RTTI.Serializable(0x93C7D673C0BD7D5D)]
    public class GameStatisticsCategory : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> CategoryName;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<GameStatisticsWeightedEntry>> Entries;
        [RTTI.Member(2, 0x40, "Logic")] public EGameStatisticShowState ShowState;
        [RTTI.Member(3, 0x41, "Logic")] public bool DisplayedAsTime;
    }

    [RTTI.Serializable(0xEFE2E186168A91D8)]
    public class GameStatisticsEntryBase : Resource
    {
    }

    [RTTI.Serializable(0x2D5C5B07E4CE8E34)]
    public class GameStatisticsEntryBooleanFact : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<BooleanFact> BooleanFact;
    }

    [RTTI.Serializable(0x9C4ACEDD57B7F78E)]
    public class GameStatisticsEntryCollectableContainer : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public UUIDRef<CollectableTypeContainer> CollectableTypeContainer;
    }

    [RTTI.Serializable(0xEBCFCA48FB3E84C6)]
    public class GameStatisticsEntryDiscoverableAreas : GameStatisticsEntryBase
    {
    }

    [RTTI.Serializable(0x53D2F23E96C0B41)]
    public class GameStatisticsEntryEnumFact : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EnumFact> EnumFact;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<EnumFactValue> EnumFactValue;
        [RTTI.Member(2, 0x38, "Logic")] public bool AllowGreaterValues;
    }

    [RTTI.Serializable(0xF78DD4DE99807E98)]
    public class GameStatisticsEntryIntegerFact : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<IntegerFact> IntegerFact;
    }

    [RTTI.Serializable(0x9362D903F7D4D6F0)]
    public class GameStatisticsEntryIntegerFactValue : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<IntegerFact> IntegerFact;
        [RTTI.Member(1, 0x30, "Logic")] public int Value;
        [RTTI.Member(2, 0x34, "Logic")] public bool IncludeBiggerValues;
    }

    [RTTI.Serializable(0x7915206A56A7192D)]
    public class GameStatisticsEntryItem : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public UUIDRef<EntityResource> Item;
    }

    [RTTI.Serializable(0x73EAA802EDDE2C60)]
    public class GameStatisticsEntryOneOfItems : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<UUIDRef<EntityResource>> Items;
    }

    [RTTI.Serializable(0x5CC69BF88B8CFEA3)]
    public class GameStatisticsEntryQuestCategory : GameStatisticsEntryBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<QuestCategory> QuestCategory;
    }

    [RTTI.Serializable(0x3A659CE0F9432DBD)]
    public class GameStatisticsEntryTimePlayed : GameStatisticsEntryBase
    {
    }

    [RTTI.Serializable(0x7CD9AF983C5B087D)]
    public class GameStatisticsGroup : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> GroupName;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<GameStatisticsCategory>> Categories;
    }

    [RTTI.Serializable(0x6826CF76216B6DEF)]
    public class GameStatisticsGroupContainer : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntitlementResource> Entitlement;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<GameStatisticsGroup>> Groups;
    }

    [RTTI.Serializable(0xEC69C16310765B1A)]
    public class GameStatisticsWeightedEntry : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<GameStatisticsEntryBase>> Entries;
        [RTTI.Member(1, 0x38, "Logic")] public float TotalEntryWeight;
    }

    [RTTI.Serializable(0xF3D9531329483844)]
    public class GameStatsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2AA9A759B13A756E)]
    public class GameStatsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MultiKillDuration;
        [RTTI.Member(1, 0x30, "Logic")] public Array<GameStatsLootItemRarityToFactMapping> LootItemRartiyToCounterFacts;
    }

    [RTTI.Serializable(0x8D84D246662B56D4)]
    public class GameStatsDamageEntry : GameStatsEntryBase
    {
        [RTTI.Member(0, 0x38, "Player")] public Array<Ref<TagProperty>> PlayerProperties;
        [RTTI.Member(1, 0x48, "Player")] public Array<Ref<BooleanFact>> PlayerFacts;
        [RTTI.Member(2, 0x58, "Damager")] public Array<Ref<StatsClassResource>> DamagerStatsClass;
        [RTTI.Member(3, 0x68, "Damager")] public Array<Ref<DamageTypeResource>> DamageTypes;
        [RTTI.Member(4, 0x78, "Damager")] public Array<Ref<DamageTypeResource>> ExcludeDamageTypes;
        [RTTI.Member(5, 0x88, "Damager")] public HashSet<GGUUID> WeaponUUIDs;
        [RTTI.Member(6, 0x98, "Damager")] public HashSet<GGUUID> WeaponModeUUIDs;
        [RTTI.Member(7, 0xA8, "Damager")] public Array<EDamageFlagsGameExported> DamageFlags;
        [RTTI.Member(8, 0xB8, "Victim")] public Array<Ref<TagProperty>> VictimEntityProperties;
        [RTTI.Member(9, 0xC8, "Victim")] public Array<Ref<BooleanFact>> VictimFacts;
        [RTTI.Member(10, 0xD8, "Victim")] public Array<Ref<TagProperty>> VictimDestructibilityTags;
        [RTTI.Member(11, 0xE8, "Victim")] public Array<Ref<TagProperty>> VictimTransitionDestructibilityTags;
        [RTTI.Member(12, 0xF8, "Victim")] public Array<UUIDRef<HitReactionResource>> VictimHitReactions;
        [RTTI.Member(13, 0x108, "Victim")] public bool TriggerOnPinDown;
        [RTTI.Member(14, 0x109, "Victim")] public bool TriggerOnEntityStuckTo;
        [RTTI.Member(15, 0x10C, "Victim")] public int TriggerOnKillCount;
        [RTTI.Member(16, 0x110, "Victim")] public bool TriggerOncePerAttack;
        [RTTI.Member(17, 0x118, "Victim")] public String ExposedActionTrigger;
    }

    [RTTI.Serializable(0x40B96B090474FA60)]
    public class GameStatsEntryBase : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<BooleanFact> IsTrackedFact;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<IntegerFact> CounterFact;
    }

    [RTTI.Serializable(0xBE367B7C06592732)]
    public class GameStatsLootItemRarityToFactMapping
    {
        [RTTI.Member(0, 0x0, "Logic")] public Ref<IntegerFact> CounterFact;
        [RTTI.Member(1, 0x8, "Logic")] public ELootItemRarity ItemRarity;
    }

    [RTTI.Serializable(0x19D89C8897AF24CA)]
    public class GameStatsTrackingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6C93B424CACD581A)]
    public class GameStatsTrackingComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<GameStatsDamageEntry>> KillStats;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<GameStatsDamageEntry>> DamageStats;
        [RTTI.Member(2, 0x48, "Logic")] public Array<Ref<GameStatsDamageEntry>> HitReactionStats;
        [RTTI.Member(3, 0x58, "Logic")] public Array<Ref<GameStatsDamageEntry>> TransitionStats;
        [RTTI.Member(4, 0x68, "Logic")] public Array<Ref<GameStatsDamageEntry>> PinDownStats;
        [RTTI.Member(5, 0x78, "Logic")] public Array<Ref<GameStatsDamageEntry>> EntityStuckToStats;
        [RTTI.Member(6, 0x88, "Logic")] public Array<Ref<GameStatsDamageEntry>> ExposedActionStats;
    }

    [RTTI.Serializable(0xB55E502C67F0F189)]
    public class GameView : CoreObject
    {
    }

    [RTTI.Serializable(0x27F7C81A60506B7D)]
    public class GameViewGame : GameView
    {
    }

    [RTTI.Serializable(0xE3D7E5CA0EE686D2)]
    public class GameViewResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<HUDResource> DefaultHUDResource;
        [RTTI.Member(1, 0x30, "General")] public RGBAColor TargetDefaultColor;
        [RTTI.Member(2, 0x34, "General")] public RGBAColor TargetFriendlyColor;
        [RTTI.Member(3, 0x38, "General")] public RGBAColor TargetEnemyColor;
        [RTTI.Member(4, 0x3C, "General")] public RGBAColor TargetUnreachableColor;
        [RTTI.Member(5, 0x40, "VisualEffects")] public Ref<ScreenEffectResource> HealthScreenEffectResource;
        [RTTI.Member(6, 0x48, "VisualEffects")] public Ref<CurveResource> HealthScreenEffectVisibilityCurve;
        [RTTI.Member(7, 0x50, "VisualEffects")] public float HealthScreenEffectFadeOutDuration;
        [RTTI.Member(8, 0x54, "VisualEffects")] public float HealthScreenEffectFadeOutDelay;
        [RTTI.Member(9, 0x58, "RumbleEffects")] public float HealthLowRumblePct;
        [RTTI.Member(10, 0x60, "RumbleEffects")] public Ref<RumbleResource> HealthLowRumbleResource;
        [RTTI.Member(11, 0x68, "VisualEffects")] public Ref<ScreenEffectResource> MissionFailedScreenEffectResource;
        [RTTI.Member(12, 0x70, "VisualEffects")] public Ref<AnimatedScreenEffectResource> FadeOutScreenEffectResource;
        [RTTI.Member(13, 0x78, "VisualEffects")] public Ref<AnimatedScreenEffectResource> FadeInScreenEffectResourceWhite;
        [RTTI.Member(14, 0x80, "VisualEffects")] public Ref<AnimatedScreenEffectResource> FadeInScreenEffectResourceBlack;
        [RTTI.Member(15, 0x88, "VisualEffects")] public Ref<AnimatedScreenEffectResource> LoadingToGameFadeEffectResource;
        [RTTI.Member(16, 0x90, "VisualEffects")] public Ref<AnimatedScreenEffectResource> MenuToGameScreenEffectResource;
        [RTTI.Member(17, 0x98, "VisualEffects")] public Ref<AnimatedScreenEffectResource> SequenceFadeScreenEffectResource;
        [RTTI.Member(18, 0xA0, "SoundEffects")] public Ref<CurveResource> HealthLowPassSoundAmountCurve;
        [RTTI.Member(19, 0xA8, "SoundEffects")] public Ref<CurveResource> HealthDistortionDriveCurve;
        [RTTI.Member(20, 0xB0, "SoundEffects")] public Ref<CurveResource> HealthDistortionGainCurve;
        [RTTI.Member(21, 0xB8, "SoundEffects")] public float HealthLowPassFactorSpeed;
        [RTTI.Member(22, 0xBC, "SoundEffects")] public float HealthDistortionDriveFactorSpeed;
        [RTTI.Member(23, 0xC0, "SoundEffects")] public float HealthDistortionGainFactorSpeed;
        [RTTI.Member(24, 0xC4, "SoundEffects")] public float MissionFailedLowPassSoundAmount;
        [RTTI.Member(25, 0xC8, "SoundEffects")] public float MissionFailedLowPassFactorSpeed;
        [RTTI.Member(26, 0xCC, "SoundEffects")] public float MissionFailedDistortionDrive;
        [RTTI.Member(27, 0xD0, "SoundEffects")] public float MissionFailedDistortionDriveFactorSpeed;
        [RTTI.Member(28, 0xD4, "SoundEffects")] public float MissionFailedDistortionGain;
        [RTTI.Member(29, 0xD8, "SoundEffects")] public float MissionFailedDistortionGainFactorSpeed;
        [RTTI.Member(30, 0xDC, "SoundEffects")] public float RadioMessageRandomDelaySize;
        [RTTI.Member(31, 0xE0, "SoundEffects")] public Ref<SoundResource> ProximityRadioMessageStartSound;
        [RTTI.Member(32, 0xE8, "SoundEffects")] public Ref<SoundResource> ProximityRadioMessageBackgroundSound;
        [RTTI.Member(33, 0xF0, "SoundEffects")] public Ref<SoundResource> ProximityRadioMessageStopSound;
        [RTTI.Member(34, 0xF8, "SoundEffects")] public Ref<SoundMixStateResource> ProximityRadioMessageSoundMixState;
        [RTTI.Member(35, 0x100, "SoundEffects")] public Ref<SoundResource> PathPlanningSound;
        [RTTI.Member(36, 0x108, "Multiplayer")] public RGBAColor MapCaptureAndHoldColorNeutral;
        [RTTI.Member(37, 0x10C, "Multiplayer")] public RGBAColor MapCaptureAndHoldColorFriendly;
        [RTTI.Member(38, 0x110, "Multiplayer")] public RGBAColor MapCaptureAndHoldColorEnemy;
        [RTTI.Member(39, 0x114, "Display")] public float HorizontalReferenceFOV;
        [RTTI.Member(40, 0x118, "Stereo3D")] public Ref<CurveResource> StereoModifierDistanceCurve;
        [RTTI.Member(41, 0x120, "Stereo3D")] public Ref<CurveResource> RayLengthCurve;
        [RTTI.Member(42, 0x128, "Stereo3D")] public float AngleX;
        [RTTI.Member(43, 0x12C, "Stereo3D")] public float AngleZ;
        [RTTI.Member(44, 0x130, "Stereo3D")] public int RaycastsHorizontal;
        [RTTI.Member(45, 0x134, "Stereo3D")] public int RaycastsVertical;
    }

    [RTTI.Serializable(0x2E95ED7DDD0C513)]
    public class GearMovementSoundComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1247D2C1F9DBC09)]
    public class GearMovementSoundComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xFE0D7C5189A1825C)]
    public class GearMovementSoundComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<SoundResource> GearMovementSound;
        [RTTI.Member(1, 0x30, "Logic")] public String GearMovementSoundHelperName;
    }

    [RTTI.Serializable(0xEE6A681538FF72D6)]
    public class GenerateLootAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<LootSlot>> LootSlots;
    }

    [RTTI.Serializable(0xA34221D70353BA4)]
    public class GenericInstance : ParentWorldNode
    {
        [RTTI.BaseClass(0x70)] public RTTIRefObjectSet @RTTIRefObjectSet;
        [RTTI.Member(1, 0x98, "General")] public String Name;
    }

    [RTTI.Serializable(0x8672C6DC27BCD824)]
    public class GeometryObject : WorldNode
    {
        [RTTI.BaseClass(0x60)] public DrawableObjectInstance @DrawableObjectInstance;
    }

    [RTTI.Serializable(0x4EFBC295B3A0C1A6)]
    public class Gesture
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x10)] public int GestureType;
        [RTTI.Member(2, 0x14)] public FRange HeadingRange;
        [RTTI.Member(3, 0x1C)] public EGestureBodyParts BodyParts;
        [RTTI.Member(4, 0x20)] public GestureUsageMask UsageMask;
        [RTTI.Member(5, 0x24)] public bool RequiredForSignal;
    }

    [RTTI.Serializable(0xDCAA4A55BF25E4B4)]
    public class GestureCollectionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Gesture> Gestures;
    }

    [RTTI.Serializable(0xC7D257645421AE52)]
    public class GestureComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB598E2629C748C18)]
    public class GestureComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GestureCollectionResource> Gestures;
    }

    [RTTI.Serializable(0x3B82C49A2E69E1F6)]
    public class GestureEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x16F0D9064893825F)]
    public class GestureEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String GestureName;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<LocatorResource> LocatorResource;
    }

    [RTTI.Serializable(0x66747C202885E54)]
    public class GestureUsageMask
    {
        [RTTI.Member(0, 0x0)] public int32 _GestureUsageMask;
    }

    [RTTI.Serializable(0x33E2A7F9128E11E2)]
    public class GiveAmmoAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<InventoryWeaponResource> WeaponResource;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EntityProjectileAmmoResource> AmmoResource;
        [RTTI.Member(2, 0x40, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x6C26F03EDFF51BEE)]
    public class GliderControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB6F237F3A7E9F655)]
    public class GliderControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float HeadingSpeed;
        [RTTI.Member(1, 0x2C, "Logic")] public float PitchSpeed;
        [RTTI.Member(2, 0x30, "Logic")] public float RollSpeed;
        [RTTI.Member(3, 0x34, "Logic")] public float HorizontalRestoreSpeed;
        [RTTI.Member(4, 0x38, "Logic")] public float StallNoseDownSpeed;
        [RTTI.Member(5, 0x3C, "Logic")] public bool InvertYAxis;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<CameraEntityResource> Camera;
        [RTTI.Member(7, 0x48, "Logic")] public float CameraActivationDuration;
        [RTTI.Member(8, 0x4C, "Logic")] public float CameraDeactivationDuration;
        [RTTI.Member(9, 0x50, "Logic")] public bool AllowPreviousEntityControl;
    }

    [RTTI.Serializable(0x9D066C66F37A15B8)]
    public class GliderMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0x2E309E60A1A1ECB5)]
    public class GliderMoverResource : PhysicsMoverResource
    {
        [RTTI.Member(0, 0x60, "Logic")] public float LiftFactor;
        [RTTI.Member(1, 0x70, "Logic")] public Vec3 DragFactor;
        [RTTI.Member(2, 0x80, "Logic")] public float MaxSpeed;
        [RTTI.Member(3, 0x84, "Logic")] public float Gravity;
    }

    [RTTI.Serializable(0xB1128DFAA3CFA4B0)]
    public class GlobalDamageModifier : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x28, "General")] public Array<PlayerDamageModifierForDamageType> SpecificPlayerDamageDealtSettings;
        [RTTI.Member(2, 0x38, "General")] public PlayerDamageModifier PlayerDamageDealtSettings;
        [RTTI.Member(3, 0x58, "General")] public PlayerDamageModifier PlayerDamageTakenSettings;
        [RTTI.Member(4, 0x78, "General")] public Array<AttackerToVictimDamageModifier> FactionSettings;
    }

    [RTTI.Serializable(0xEB1E881E3642E927)]
    public class GlobalRenderVariableInfo
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float DefaultValue;
    }

    [RTTI.Serializable(0x83AADF670FAE7536)]
    public class GlobalRenderVariableInfoSet : CoreObject
    {
        [RTTI.Member(0, 0x20)] public GlobalRenderVariableInfo_GLOBAL_RENDER_VAR_COUNT<GlobalRenderVariableInfo> Variables;
    }

    [RTTI.Serializable(0x317FB0D3952A647E)]
    public class GlobalRenderVariableValues
    {
        [RTTI.Member(0, 0x0)] public float_GLOBAL_RENDER_VAR_COUNT<float> Values;
    }

    [RTTI.Serializable(0x3791E11136078110)]
    public class GlyphContour
    {
        [RTTI.Member(0, 0x0)] public Array<GlyphContourCmd> CommandList;
        [RTTI.Member(1, 0x10)] public Array<Vec2Pack> Points;
    }

    [RTTI.Serializable(0x7A8F545B73783111)]
    public class GlyphContourCmd
    {
        [RTTI.Member(0, 0x0)] public uint8 CmdData;
    }

    [RTTI.Serializable(0xC61E3BC02AB02FE3)]
    public class GlyphContourList
    {
        [RTTI.Member(0, 0x0)] public BoundingBox2 Bounds;
        [RTTI.Member(1, 0x20)] public Array<GlyphContour> GlyphContours;
    }

    [RTTI.Serializable(0x218556E0E9C20AB2)]
    public class GrabableObjectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBD73BDB9C99DBF77)]
    public class GrabableObjectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String GrabHelperName;
        [RTTI.Member(1, 0x30, "Logic")] public int GrabObjectAnimationVariable;
        [RTTI.Member(2, 0x38, "Logic")] public CPtr<EntityAction> ThrowAction;
    }

    [RTTI.Serializable(0xF8298F67758EC033)]
    public class Gradient : Resource
    {
        [RTTI.Member(0, 0x0, "General")] public int EndAlphaPegID;
        [RTTI.Member(1, 0x0, "General")] public int StartAlphaPegID;
        [RTTI.Member(2, 0x0, "General")] public int EndColorPegID;
        [RTTI.Member(3, 0x0, "General")] public int StartColorPegID;
        [RTTI.Member(4, 0x28, "General")] public Array<ColorPeg> ColorPegs;
        [RTTI.Member(5, 0x38, "General")] public Array<AlphaPeg> AlphaPegs;
        [RTTI.Member(6, 0x50, "General")] public int NumberOfSamples;
        [RTTI.Member(7, 0x68, "General")] public uint16 NextPegId;
    }

    [RTTI.Serializable(0x4CB657FF65834E3)]
    public class GrainSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public float Size;
        [RTTI.Member(1, 0x30, "Settings")] public Ref<TextureLUT> IntensityLUT;
    }

    [RTTI.Serializable(0x32352B2A3C55B24C)]
    public class GraphConditionAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<GraphProgramResource> Condition;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<OverrideGraphProgramResource> OverrideCondition;
        [RTTI.Member(2, 0x50, "Logic")] public bool AllowMultiThreadedExecution;
    }

    [RTTI.Serializable(0x4BCFE2A5DC4FA5A7)]
    public class GraphConditionInstance : ConditionInstance
    {
    }

    [RTTI.Serializable(0xA5283947471E4C9E)]
    public class GraphConditionResource : ConditionResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
    }

    [RTTI.Serializable(0xA732382298EDF87)]
    public class GraphProgramInstance : ProgramInstance
    {
    }

    [RTTI.Serializable(0x2C32BA3FF974EB98)]
    public class GraphProgramResource : ProgramResource
    {
        [RTTI.Member(0, 0x60, "Graph")] public Array<ProgramParameter> StateParameters;
        [RTTI.Member(1, 0x80, "Graph")] public Array<Ref<StateObjectResource>> StateResources;
        [RTTI.Member(2, 0x90, "Graph")] public Ref<NodeConstantsResource> ExposedDataResource;
        [RTTI.Member(3, 0x98, "Graph")] public Array<EventFunctionMapping> EventFunctionIndexMap;
    }

    [RTTI.Serializable(0x532C86021F40DEF4)]
    public class GraphProgramStreamingStrategyInstance : StreamingStrategyInstance
    {
    }

    [RTTI.Serializable(0x128E0047198766FE)]
    public class GraphProgramStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(0, 0x58, "General")] public Array<Ref<StreamingProgramResource>> StreamingPrograms;
    }

    [RTTI.Serializable(0x62D78F032F897A8)]
    public class GraphPropertyGameGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x97E3F649EF66C446)]
    public class GraphPropertyGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x991CF4C03BE48D87)]
    public class GraphSoundEvent
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float Time;
    }

    [RTTI.Serializable(0x7DC039FD4B2482EB)]
    public class GraphSoundGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x81658D0FD9903226)]
    public class GraphSoundInstance : SoundInstance
    {
    }

    [RTTI.Serializable(0xEAF9BDA916835480)]
    public class GraphSoundResource : SoundResource
    {
        [RTTI.Member(0, 0xF0, "Sound")] public uint8 VoiceLimit;
        [RTTI.Member(1, 0x2A0, "Sound")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(2, 0x2A8, "Sound")] public Array<GraphSoundEvent> Events;
        [RTTI.Member(3, 0x2B8, "Sound")] public EGraphSoundUpdateRate UpdateRate;
        [RTTI.Member(4, 0x2BC, "Sound")] public bool SaveVoiceStateOnSuspend;
    }

    [RTTI.Serializable(0x4A2252FC00AD5DDD)]
    public class GraphTag : TextureTag
    {
    }

    [RTTI.Serializable(0xD66880CC9D45D757)]
    public class GraphWidget : TextureWidget
    {
    }

    [RTTI.Serializable(0x37F0977B501460E7)]
    public class GraphicsGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2BF1ACC54DA4B706)]
    public class GrapplingHook : Throwable
    {
    }

    [RTTI.Serializable(0x6C17C2981464097C)]
    public class GrapplingHookComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x86BC57321DEA9BAA)]
    public class GrapplingHookComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x4C2C834495057BFE)]
    public class GrapplingHookComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MaxDistance;
        [RTTI.Member(1, 0x2C, "Logic")] public float ReelVelocity;
        [RTTI.Member(2, 0x30, "Logic")] public float ReelEmptyVelocity;
        [RTTI.Member(3, 0x34, "Logic")] public float ReelForce;
        [RTTI.Member(4, 0x38, "Logic")] public float GrappleDamage;
        [RTTI.Member(5, 0x40, "Logic")] public Ref<DamageTypeResource> GrappleDamageTypeResource;
        [RTTI.Member(6, 0x48, "Logic")] public String EjectLocationHelper;
        [RTTI.Member(7, 0x50, "Logic")] public float GrappledHumanoidRotationSpeed;
        [RTTI.Member(8, 0x54, "Logic")] public float GrappledHumanoidAimHeadingAngle;
        [RTTI.Member(9, 0x60, "Logic")] public Vec3 MovementModifier;
        [RTTI.Member(10, 0x70, "Representation")] public float RopeWidth;
        [RTTI.Member(11, 0x74, "Representation")] public float RopeTextureRepeat;
        [RTTI.Member(12, 0x78, "Representation")] public RGBAColor RopeColor;
        [RTTI.Member(13, 0x80, "Representation")] public Ref<RenderEffectResource> RopeRenderEffectResource;
    }

    [RTTI.Serializable(0xA72E8080772BB05C)]
    public class GrapplingHookEjector : GrenadeEjector
    {
    }

    [RTTI.Serializable(0xA1ED435675B95A97)]
    public class GrapplingHookEjectorResource : GrenadeEjectorResource
    {
    }

    [RTTI.Serializable(0x92811B50EFFD1E16)]
    public class GrapplingHookRep : ThrowableRep
    {
    }

    [RTTI.Serializable(0x88BC4D7D4160CFA3)]
    public class GrapplingHookResource : ThrowableResource
    {
        [RTTI.Member(0, 0x210, "Grappling")] public float MaxDistance;
        [RTTI.Member(1, 0x214, "Grappling")] public float ReelVelocity;
        [RTTI.Member(2, 0x218, "Grappling")] public float ReelEmptyVelocity;
        [RTTI.Member(3, 0x21C, "Grappling")] public float ReelForce;
        [RTTI.Member(4, 0x220, "Grappling")] public float GrappleDamage;
        [RTTI.Member(5, 0x228, "Grappling")] public Ref<DamageTypeResource> GrappleDamageTypeResource;
        [RTTI.Member(6, 0x230, "Grappling")] public String EjectLocationHelper;
        [RTTI.Member(7, 0x238, "Grappling")] public float GrappledHumanoidRotationSpeed;
        [RTTI.Member(8, 0x23C, "Grappling")] public float GrappledHumanoidAimHeadingAngle;
        [RTTI.Member(9, 0x240, "Grappling")] public Vec3 MovementModifier;
        [RTTI.Member(10, 0x250, "Grappling")] public bool ForceReelingGrappler;
        [RTTI.Member(11, 0x254, "Grappling")] public float ElectricityBuildUpSpeed;
        [RTTI.Member(12, 0x258, "VisualEffects")] public Ref<LightResource> ElectricityLightResource;
        [RTTI.Member(13, 0x260, "VisualEffects")] public float ElectricityLightJitterInterval;
        [RTTI.Member(14, 0x264, "VisualEffects")] public FRange ElectricityLightJitterIntensity;
        [RTTI.Member(15, 0x270, "VisualEffects")] public Ref<ElectricityBeamResource> ElectricityBeamResource;
    }

    [RTTI.Serializable(0x40CB38089B2806DB)]
    public class GrapplingHookTargetComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE9ED6B8F372A85AF)]
    public class GrapplingHookTargetComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public EEntityReelType ReelType;
        [RTTI.Member(1, 0x2C, "General")] public bool AutoUse;
    }

    [RTTI.Serializable(0xC6742F36D6233B45)]
    public class Grass : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "Maps")] public FRange HeightRange;
        [RTTI.Member(1, 0xC8, "Maps")] public ETextureChannel GrassMaskChannel;
        [RTTI.Member(2, 0xCC, "Maps")] public float MaskTreshold;
        [RTTI.Member(3, 0xD0, "General")] public Ref<GrassResource> Resource;
        [RTTI.Member(4, 0xD8, "Generated")] public uint32 NumVisibleLod;
        [RTTI.Member(5, 0xDC, "Generated")] public FRange MappedHeightRange;
        [RTTI.Member(6, 0xE8, "General")] public IVec2 Dimensions;
        [RTTI.Member(7, 0xF0, "Generated")] public BoundingBox3 DrawBounds;
        [RTTI.Member(8, 0x110, "Generated")] public Array<GrassNode> Nodes;
        [RTTI.Member(9, 0x120, "Generated")] public Array<GrassDrawInstance> DrawInstances;
        [RTTI.Member(10, 0x130, "Generated")] public Array<uint8> GrassHeight;
        [RTTI.Member(11, 0x140, "Generated")] public ISize GrassMaskSize;
        [RTTI.Member(12, 0x148, "Maps")] public Array<GrassTextureOverride> TextureOverrides;
        [RTTI.Member(13, 0x158, "Generated")] public MeshHierachyShaderOverrides MeshShaderOverrides;
    }

    [RTTI.Serializable(0x8A58F25E0976FECA)]
    public class GrassDrawInstance
    {
        [RTTI.Member(0, 0x0)] public Compressed16Vector3 Offset;
        [RTTI.Member(1, 0x6)] public uint16 ObjectIndex;
    }

    [RTTI.Serializable(0x223E0772BAFA71B9)]
    public class GrassManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xE689E5EDFFC46D33)]
    public class GrassNode
    {
        [RTTI.Member(0, 0x0)] public uint64 NodeData;
        [RTTI.Member(1, 0x8)] public int GrassPropertyOffset;
    }

    [RTTI.Serializable(0x148A7C6E0FB25189)]
    public class GrassPatch
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x8)] public float MaxDistance;
        [RTTI.Member(2, 0xC)] public int MaxInstance;
    }

    [RTTI.Serializable(0x28B0014290DEB443)]
    public class GrassResource : Resource
    {
        [RTTI.Member(0, 0x28, "Patches")] public GrassPatch Patch2x2;
        [RTTI.Member(1, 0x38, "Patches")] public GrassPatch Patch4x4;
        [RTTI.Member(2, 0x48, "Patches")] public GrassPatch Patch8x8;
        [RTTI.Member(3, 0x58, "Patches")] public GrassPatch Patch16x16;
        [RTTI.Member(4, 0x68, "Patches")] public GrassPatch Patch32x32;
        [RTTI.Member(5, 0x78, "Patches")] public GrassPatch Patch64x64;
        [RTTI.Member(6, 0x88, "Patches")] public GrassPatch Patch128x128;
        [RTTI.Member(7, 0x98, "Patches")] public GrassPatch Patch256x256;
        [RTTI.Member(8, 0xA8, "Patches")] public GrassPatch Patch512x512;
        [RTTI.Member(9, 0xB8, "Patches")] public bool ApplyPatchRotation;
        [RTTI.Member(10, 0xB9, "Cover")] public bool ProvidesCoverData;
        [RTTI.Member(11, 0xBC, "Cover")] public float MaxGrassCoverHeight;
    }

    [RTTI.Serializable(0x68995F9DEB870C18)]
    public class GrassTextureOverride
    {
        [RTTI.Member(0, 0x20)] public String Sampler;
        [RTTI.Member(1, 0x28)] public Ref<Texture> Texture;
    }

    [RTTI.Serializable(0x8EB62174D857517E)]
    public class GravityPocket : Entity
    {
    }

    [RTTI.Serializable(0x40DA86B34D26AAEB)]
    public class GravityPocketResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Physics")] public Ref<PhysicsGravityPocketResource> PhysicsGravityPocketResource;
    }

    [RTTI.Serializable(0x6EDA0446DD37B93B)]
    public class Grenade : Throwable
    {
    }

    [RTTI.Serializable(0x1F340F6694686E3F)]
    public class GrenadeEjector : DiscreteAmmoEjector
    {
    }

    [RTTI.Serializable(0x4781051EFC3E52C0)]
    public class GrenadeEjectorResource : DiscreteAmmoEjectorResource
    {
        [RTTI.Member(0, 0x230, "EjectSettings")] public float InitialOffsetAngle;
        [RTTI.Member(1, 0x240, "EjectSettings")] public Vec3 InitialOrientation;
        [RTTI.Member(2, 0x250, "EjectSettings")] public Vec3 RandomInitialOrientation;
        [RTTI.Member(3, 0x260, "EjectSettings")] public bool UseEjectorDirection;
        [RTTI.Member(4, 0x264, "Accuracy")] public float RandomImpactSphereRadius;
        [RTTI.Member(5, 0x268, "Logic")] public bool IgnoreOwnerVelocity;
        [RTTI.Member(6, 0x269, "EjectSettings")] public bool FiredStraightUp;
        [RTTI.Member(7, 0x270, "EjectSettings")] public Ref<CurveResource> PitchMappingCurve;
        [RTTI.Member(8, 0x278, "Logic")] public float MinRadius;
        [RTTI.Member(9, 0x27C, "AI")] public EAIAttackType AttackType;
        [RTTI.Member(10, 0x280, "TrajectoryAssist")] public float TrajectoryAssistMaxAdjustmentAngle;
        [RTTI.Member(11, 0x288, "TrajectoryAssist")] public Ref<CurveResource> TrajectoryAssistRadiusOverDistance;
        [RTTI.Member(12, 0x290, "Charged")] public Ref<ChargedValueFloat> TrajectoryAssistRadiusMultiplier;
        [RTTI.Member(13, 0x298, "TrajectoryAssist")] public Ref<TagProperty> TrajectoryAssistHighValuePartTag;
        [RTTI.Member(14, 0x2A0, "TrajectoryAssist")] public Ref<TagProperty> TrajectoryAssistIgnoreFactionPartTag;
        [RTTI.Member(15, 0x2A8, "TrajectoryAssist")] public float TrajectoryAssistHighValueRadiusModifier;
        [RTTI.Member(16, 0x2B0, "TrajectoryAssist")] public Ref<GraphProgramResource> TrajectoryAssistRadiusMultiplierGraph;
        [RTTI.Member(17, 0x2B8, "TrajectoryAssist")] public float TrajectoryAssistRadiusMultiplierForHumanoids;
    }

    [RTTI.Serializable(0x6021BBDC44F74D90)]
    public class GrenadeRep : ThrowableRep
    {
    }

    [RTTI.Serializable(0x48E5B03DAFCF332B)]
    public class GrenadeResource : ThrowableResource
    {
        [RTTI.Member(0, 0x210, "Logic")] public float DetonateTime;
        [RTTI.Member(1, 0x214, "Logic")] public float DetonateTimeVariation;
        [RTTI.Member(2, 0x218, "VisualEffects")] public Ref<SoundResource> DetonateTimeSoundResource;
        [RTTI.Member(3, 0x220, "Logic")] public bool ExplodeOnControlledEntityContact;
    }

    [RTTI.Serializable(0x978E9B224B6AE3A7)]
    public class GrenadeTriggerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF99A5DB6782E2E4F)]
    public class GrenadeTriggerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x4370FBBF01D377BE)]
    public class GrenadeTriggerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float DetonateTime;
        [RTTI.Member(1, 0x2C, "Logic")] public float DetonateTimeVariation;
        [RTTI.Member(2, 0x30, "SoundEffects")] public Ref<SoundResource> DetonateTimeSoundResource;
        [RTTI.Member(3, 0x38, "Logic")] public bool ExplodeOnControlledEntityContact;
        [RTTI.Member(4, 0x3C, "Logic")] public ETimerStartType TimerStartType;
    }

    [RTTI.Serializable(0xB93D07251648B94E)]
    public class GridPanelCellTag : VisualTag
    {
    }

    [RTTI.Serializable(0xE35E9131A90A13EB)]
    public class GridPanelCellWidget : Widget
    {
    }

    [RTTI.Serializable(0x9104B007633580B0)]
    public class GridPanelTag : VisualTag
    {
    }

    [RTTI.Serializable(0x369A970E14461387)]
    public class GridPanelWidget : Widget
    {
    }

    [RTTI.Serializable(0x50EA917DD67488DE)]
    public class GriefManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x8CE5AAAB935FE9E8)]
    public class GriefReason : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int reasonId;
        [RTTI.Member(1, 0x10)] public String reasonText;
    }

    [RTTI.Serializable(0x94CFD79BE483B7E)]
    public class GriefReasons : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<GriefReason> behaviorReasons;
        [RTTI.Member(1, 0x30)] public Array<GriefReason> contentReasons;
    }

    [RTTI.Serializable(0xF4315073073F0A0E)]
    public class GriefReportItem : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int reason;
        [RTTI.Member(1, 0x28)] public String consoleId;
        [RTTI.Member(2, 0x30)] public String contentId;
        [RTTI.Member(3, 0x38)] public String reportLanguageCode;
        [RTTI.Member(4, 0x40)] public int64 creationDate;
        [RTTI.Member(5, 0x48)] public String owner;
        [RTTI.Member(6, 0x50)] public String description;
        [RTTI.Member(7, 0x58)] public String extraInfo;
    }

    [RTTI.Serializable(0xC891D782F7A2C44D)]
    public class GroundProjectileMover : ThrowableMover
    {
    }

    [RTTI.Serializable(0x225A821F8A50D9F3)]
    public class GroundProjectileMoverResource : ThrowableMoverResource
    {
        [RTTI.Member(0, 0xF0, "Ground")] public Ref<CurveResource> DistanceOverTime;
        [RTTI.Member(1, 0xF8, "Ground")] public float GroundCheckRange;
        [RTTI.Member(2, 0xFC, "Ground")] public EPhysicsCollisionLayerGame GroundCheckLayer;
        [RTTI.Member(3, 0x100, "Ground")] public float HeightOffGround;
    }

    [RTTI.Serializable(0x40072979FEE279AE)]
    public class GroundToAirTransitionComponent : EntityComponent
    {
        [RTTI.Member(0, 0x58, true)] public EMovementStateGroundToAir MovementState;
        [RTTI.Member(1, 0x80, true)] public WorldPosition LandingPosition;
        [RTTI.Member(2, 0xC0, true)] public float TakeOffActivationTime;
    }

    [RTTI.Serializable(0x66C05A1306C1F900)]
    public class GroundToAirTransitionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<MoverResource> GroundMoverResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<AirMoverComponentResource> AirMoverResource;
        [RTTI.Member(2, 0x38, "Logic")] public Array<Ref<EntityComponentSetResource>> LandingConfigurations;
        [RTTI.Member(3, 0x48, "Logic")] public Array<Ref<EntityComponentSetResource>> TakeOffConfigurations;
        [RTTI.Member(4, 0x58, "Animation")] public String InAirAnimationAction;
        [RTTI.Member(5, 0x60, "Animation")] public String TakeOffAnimationAction;
        [RTTI.Member(6, 0x68, "Animation")] public String LandingAnimationAction;
        [RTTI.Member(7, 0x70, "Animation")] public String LandingPositionAnimVarName;
        [RTTI.Member(8, 0x78, "Animation")] public String LandingAngleAnimVarName;
        [RTTI.Member(9, 0x80, "Animation")] public String LandingOrientationAnimVarName;
        [RTTI.Member(10, 0x88, "Animation")] public String AnimTagOnGround;
        [RTTI.Member(11, 0x90, "Animation")] public String AnimTagInAir;
        [RTTI.Member(12, 0x98, "Animation", true)] public String AnimTagAirSpawnState;
        [RTTI.Member(13, 0xA0, "Animation")] public int AirSpawnStateID;
    }

    [RTTI.Serializable(0xC2046768F847F1A3)]
    public class GroupImportanceEntry
    {
        [RTTI.Member(0, 0x0)] public UUIDRef<AIGroupResource> AIGroupResource;
        [RTTI.Member(1, 0x10)] public int Importance;
    }

    [RTTI.Serializable(0x565C2389C42F5ACA)]
    public class GroupRolesDebugResource : Resource
    {
        [RTTI.Member(0, 0x28, "Default")] public Ref<AIGroupRoleDescriptorResource> RoleDescriptors;
        [RTTI.Member(1, 0x30, "Default")] public RGBAColor Color;
    }

    [RTTI.Serializable(0x347AC87ECD0A595B)]
    public class GroupSubmixRoutingResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<ESoundMasterVolumeGroup> Groups;
        [RTTI.Member(1, 0x38, "General")] public Ref<SubmixResource> Destination;
    }

    [RTTI.Serializable(0x498C8AC6CB92DFD2)]
    public class GuaranteedHitProjectileComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5D37B884D513E166)]
    public class GuaranteedHitProjectileComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x374C4E3384A8393D)]
    public class HUD : RTTIObject
    {
    }

    [RTTI.Serializable(0x65638D468FE011A1)]
    public class HUDAIStateLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xDA467512FE4A670E)]
    public class HUDAIStateLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "HUDElements")] public Ref<HUDImageResource> HidingImage;
        [RTTI.Member(1, 0x58, "HUDElements")] public Ref<HUDImageResource> VisibleImage;
        [RTTI.Member(2, 0x60, "HUDElements")] public Array<HUDLoudnessMapping> HUDLoudnessMappings;
        [RTTI.Member(3, 0x70, "Logic")] public Ref<BoolPropertyBase> StealthProperty;
    }

    [RTTI.Serializable(0xB54A87C64A8FAA7F)]
    public class HUDActionPromptLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x27C568FEFD09C50C)]
    public class HUDActionPromptLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDImageResource> BackgroundElement;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDImageResource> ButtonElement;
        [RTTI.Member(2, 0x60, "Logic")] public Ref<HUDShaderResource> HoldIndicatorElement;
        [RTTI.Member(3, 0x68, "Logic")] public Ref<HUDTextResource> ButtonPromptElement;
        [RTTI.Member(4, 0x70, "Logic")] public String HoldProgressShaderVariableName;
        [RTTI.Member(5, 0x80, "Logic")] public FRGBAColor FailedPromptColor;
        [RTTI.Member(6, 0x90, "Logic")] public float FailedPromptIconOpacity;
        [RTTI.Member(7, 0x98, "Logic")] public Ref<SoundResource> HoldIndicationSound;
    }

    [RTTI.Serializable(0xF21D8595D8A48CB3)]
    public class HUDAudiologPlayerLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xEE420640C8F7AFC2)]
    public class HUDAudiologPlayerLogicResource : HUDLogicResource
    {
    }

    [RTTI.Serializable(0x83B2C2AFA29AD022)]
    public class HUDBarLogic : HUDBarLogicBase
    {
    }

    [RTTI.Serializable(0xCEE2DFBC8354072B)]
    public class HUDBarLogicBase : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x2953B0C4F90B479)]
    public class HUDBarLogicBaseResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDImageResource> FrontBarImage;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDImageResource> BackBarImage;
        [RTTI.Member(2, 0x60, "Scaling")] public EScaleBehaviour FrontScaleBehaviour;
        [RTTI.Member(3, 0x64, "Scaling")] public float FrontScaleTime;
        [RTTI.Member(4, 0x68, "Scaling")] public float FrontScaleDelayTime;
        [RTTI.Member(5, 0x6C, "Scaling")] public EScaleBehaviour BackScaleBehaviour;
        [RTTI.Member(6, 0x70, "Scaling")] public float BackScaleTime;
        [RTTI.Member(7, 0x74, "Scaling")] public float BackScaleDelayTime;
        [RTTI.Member(8, 0x78, "Blinking")] public bool OnIncrease;
        [RTTI.Member(9, 0x7C, "Blinking")] public float OnIncreaseTime;
        [RTTI.Member(10, 0x80, "Blinking")] public FRGBAColor OnIncreaseColor;
        [RTTI.Member(11, 0x90, "Blinking")] public bool OnDecrease;
        [RTTI.Member(12, 0x94, "Blinking")] public float OnDecreaseTime;
        [RTTI.Member(13, 0xA0, "Blinking")] public FRGBAColor OnDecreaseColor;
        [RTTI.Member(14, 0xB0, "Blinking")] public float BelowPercentage;
        [RTTI.Member(15, 0xB4, "Blinking")] public float BelowPercentageTime;
        [RTTI.Member(16, 0xC0, "Blinking")] public FRGBAColor BelowPercentageColor;
        [RTTI.Member(17, 0xD0, "Blinking")] public float AbovePercentage;
        [RTTI.Member(18, 0xD4, "Blinking")] public float AbovePercentageTime;
        [RTTI.Member(19, 0xE0, "Blinking")] public FRGBAColor AbovePercentageColor;
        [RTTI.Member(20, 0xF0, "Curves")] public Ref<CurveResource> OnIncreaseCurve;
        [RTTI.Member(21, 0xF8, "Curves")] public Ref<CurveResource> OnDecreaseCurve;
        [RTTI.Member(22, 0x100, "Curves")] public Ref<CurveResource> BelowPercentageCurve;
        [RTTI.Member(23, 0x108, "Curves")] public Ref<CurveResource> AbovePercentageCurve;
        [RTTI.Member(24, 0x110, "Curves")] public Ref<CurveResource> BackScaleCurve;
        [RTTI.Member(25, 0x118, "Curves")] public Ref<CurveResource> FrontScaleCurve;
        [RTTI.Member(26, 0x120, "Logic")] public bool HideWhenFull;
        [RTTI.Member(27, 0x121, "Logic")] public bool HideWhenEmpty;
        [RTTI.Member(28, 0x124, "Logic")] public float DynamicVisibilityThreshold;
    }

    [RTTI.Serializable(0x54140D370AE90BF1)]
    public class HUDBarLogicResource : HUDBarLogicBaseResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0x5A9188C50CBCCB0)]
    public class HUDBreadcrumbHelper : HUDHelper
    {
    }

    [RTTI.Serializable(0xB5C9460E07985AF1)]
    public class HUDBulletTimeIndicatorLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x917E9D02821A7832)]
    public class HUDBulletTimeIndicatorLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDImageResource> BackgroundBarImage;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDImageResource> ForegroundBarImage;
        [RTTI.Member(2, 0x60, "Logic")] public Ref<CurveResource> FailedFlashCurve;
        [RTTI.Member(3, 0x68, "Logic")] public float ChargingOpacity;
    }

    [RTTI.Serializable(0x14201C00E26DBEE4)]
    public class HUDCompassMarkerLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xA1E5DCA2F792B93E)]
    public class HUDCompassMarkerLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public float CompassWidth;
        [RTTI.Member(1, 0x54, "Logic")] public float HeightDifferenceThreshold;
        [RTTI.Member(2, 0x58, "Logic")] public IVec2 StickOffset;
        [RTTI.Member(3, 0x60, "Logic")] public Ref<HUDImageResource> TemplateElement;
        [RTTI.Member(4, 0x68, "Logic")] public Ref<HUDTextResource> TextElement;
        [RTTI.Member(5, 0x70, "Cardinals")] public Array<Ref<HUDTextResource>> Cardinals;
        [RTTI.Member(6, 0x80, "Cardinals")] public Ref<CurveResource> CardinalFadeCurve;
        [RTTI.Member(7, 0x88, "Logic")] public Array<Ref<HUDElementResource>> NearbyColoredElements;
        [RTTI.Member(8, 0x98, "Logic")] public Ref<HUDLogicTimelineResource> NearbyIndicatorAppearTimeline;
        [RTTI.Member(9, 0xA0, "Logic")] public Ref<HUDLogicTimelineResource> NearbyIndicatorDisappearTimeline;
        [RTTI.Member(10, 0xA8, "Logic")] public Array<Ref<HUDElementResource>> LeavingAreaBlinkingElements;
        [RTTI.Member(11, 0xB8, "Logic")] public Ref<CurveResource> LeavingAreaBlinkingCurve;
        [RTTI.Member(12, 0xC0, "Logic")] public Ref<CurveResource> ColorChangeCurve;
        [RTTI.Member(13, 0xC8, "Logic")] public Ref<CurveResource> NewMarkerBlinkCurve;
    }

    [RTTI.Serializable(0x5A7C069E7A3D5659)]
    public class HUDCountdownTimerLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x846E0A48ADD1E3E8)]
    public class HUDCountdownTimerLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "AttachToEntity")] public float EllpiseRadiusX;
        [RTTI.Member(1, 0x54, "AttachToEntity")] public float EllpiseRadiusY;
        [RTTI.Member(2, 0x58, "TimerSettings")] public Ref<HUDTimerSettings> Settings;
    }

    [RTTI.Serializable(0xF40AD19BBDDEE95D)]
    public class HUDCrosshairBulletIndicatorSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public ECrosshairBulletIndicatorType BulletIndicatorType;
        [RTTI.Member(1, 0x30)] public Array<Ref<HUDImageResource>> BulletAvailableHUDImages;
        [RTTI.Member(2, 0x40)] public Array<Ref<HUDImageResource>> BulletUnavailableHUDImages;
        [RTTI.Member(3, 0x50)] public Ref<CurveResource> BulletEjectedScaleCurve;
    }

    [RTTI.Serializable(0xE0E402D3DB254A19)]
    public class HUDCrosshairChargeLevelIndicatorSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<HUDImageResource>> ChargeAvailableHUDImages;
        [RTTI.Member(1, 0x38)] public Array<Ref<HUDImageResource>> ChargeUnavailableHUDImages;
        [RTTI.Member(2, 0x48)] public Ref<CurveResource> ChargeAvailableScaleCurve;
        [RTTI.Member(3, 0x50)] public Ref<CurveResource> RetainingChargeScaleCurve;
    }

    [RTTI.Serializable(0x47DF8CF0AD14D2FE)]
    public class HUDCrosshairLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xE0FBF965D454D93A)]
    public class HUDCrosshairLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDCrosshairSettings> DefaultCrosshairSettings;
        [RTTI.Member(1, 0x58, "Colors")] public Ref<CrosshairColor> FriendlyColor;
        [RTTI.Member(2, 0x60, "Colors")] public Ref<CrosshairColor> EnemyColor;
        [RTTI.Member(3, 0x68, "Colors")] public Ref<CrosshairColor> NeutralColor;
        [RTTI.Member(4, 0x70, "Logic")] public float MaxSpreadSpeed;
        [RTTI.Member(5, 0x74, "Logic")] public float MaxDistanceExpandSpeed;
        [RTTI.Member(6, 0x78, "Logic")] public float MaxTargetIdentificationDistance;
        [RTTI.Member(7, 0x80, "Logic")] public Ref<HUDElementResource> RootElement;
    }

    [RTTI.Serializable(0xBA3EA1201F9BD55B)]
    public class HUDCrosshairPart : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<HUDElementResource> HUDElement;
        [RTTI.Member(1, 0x30, "Animation")] public Array<Ref<HUDCrosshairPartTimelineAnimationSettings>> TimelineAnimations;
        [RTTI.Member(2, 0x40, "Animation")] public Ref<HUDCrosshairPartSpreadAnimationSettings> SpreadAnimationSettings;
        [RTTI.Member(3, 0x48, "Animation")] public Ref<HUDCrosshairPartChargeAnimationSettings> ChargeAnimationSettings;
        [RTTI.Member(4, 0x50)] public IVec2 Offset;
        [RTTI.Member(5, 0x58)] public bool FactionColorChange;
        [RTTI.Member(6, 0x59, "Animation")] public ECrosshairPartAnimationTrigger DefaultAnimationTrigger;
    }

    [RTTI.Serializable(0xFDF2F93F281CDB01)]
    public class HUDCrosshairPartChargeAnimationSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public float Factor;
        [RTTI.Member(1, 0x2C)] public float Orientation;
        [RTTI.Member(2, 0x30)] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(3, 0x38)] public Ref<CurveResource> ScaleCurve;
        [RTTI.Member(4, 0x40)] public Ref<CurveResource> AmmoChargeBlendCurve;
        [RTTI.Member(5, 0x48)] public Ref<CurveResource> AmmoChargeScaleCurve;
    }

    [RTTI.Serializable(0x3736B4C39D25767A)]
    public class HUDCrosshairPartSpreadAnimationSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public float Factor;
        [RTTI.Member(1, 0x2C)] public float Orientation;
        [RTTI.Member(2, 0x30)] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(3, 0x38)] public Ref<CurveResource> ScaleCurve;
    }

    [RTTI.Serializable(0xFE32C02F54FBF300)]
    public class HUDCrosshairPartTimelineAnimationSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public ECrosshairPartAnimationTrigger AnimationTrigger;
        [RTTI.Member(1, 0x29)] public bool DoesLoop;
        [RTTI.Member(2, 0x30)] public Ref<HUDLogicTimelineResource> AnimationTimeLine;
    }

    [RTTI.Serializable(0x5838B510D6ECCAE3)]
    public class HUDCrosshairSettings : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<HUDCrosshairPart>> Parts;
        [RTTI.Member(1, 0x38, "General")] public Ref<HUDCrosshairBulletIndicatorSettings> BulletIndicatorSettings;
        [RTTI.Member(2, 0x40, "General")] public Ref<HUDCrosshairChargeLevelIndicatorSettings> ChargeLevelIndicatorSettings;
        [RTTI.Member(3, 0x48, "General")] public bool AlwaysDisplay;
        [RTTI.Member(4, 0x49, "General")] public bool ShowWhenUnableToFire;
        [RTTI.Member(5, 0x4A, "General")] public bool HideOnHighDifficulty;
        [RTTI.Member(6, 0x4C, "General")] public int MaxSpreadToPixelMapping;
        [RTTI.Member(7, 0x50, "General")] public int MaxChargeToPixelMapping;
        [RTTI.Member(8, 0x58, "General")] public Ref<CurveResource> ChargeAnimationProgressionCurve;
    }

    [RTTI.Serializable(0xCDF46515879786F2)]
    public class HUDDamageNumbersDisplaySettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<HUDTextResource> DefaultTextResource;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<HUDDamageTypeToColorResource>> DamageTypeToColorResources;
        [RTTI.Member(2, 0x40, "Vulnerabie")] public Ref<HUDTextResource> VulnerableHUDTextResource;
        [RTTI.Member(3, 0x48, "Vulnerabie")] public Ref<HUDImageResource> VulnerableIcon;
        [RTTI.Member(4, 0x50, "Vulnerabie")] public Array<Ref<TagProperty>> VulnerableTagProperties;
        [RTTI.Member(5, 0x60, "Resistance")] public Ref<HUDTextResource> ResistanceHUDTextResource;
        [RTTI.Member(6, 0x68, "Resistance")] public Ref<HUDImageResource> ResistanceIcon;
        [RTTI.Member(7, 0x70, "Resistance")] public Array<Ref<TagProperty>> ResistanceTagProperties;
        [RTTI.Member(8, 0x80, "Frozen")] public Ref<BooleanFact> FrozenFact;
        [RTTI.Member(9, 0x88, "Frozen")] public Array<Ref<DamageTypeResource>> FrozenDamageTypes;
        [RTTI.Member(10, 0x98, "Representation")] public Ref<CurveResource> MoveCurve;
        [RTTI.Member(11, 0xA0, "Representation")] public FRange DisplayTimeRange;
        [RTTI.Member(12, 0xA8, "Representation")] public FRange InitalOffsetRange;
        [RTTI.Member(13, 0xB0, "Representation")] public FRange MoveRange;
        [RTTI.Member(14, 0xB8, "Representation")] public FRange AngleRange;
    }

    [RTTI.Serializable(0xF9465A69948AD087)]
    public class HUDDamageNumbersLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xB1841D9354ABE76B)]
    public class HUDDamageNumbersLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Array<Ref<HUDDamageNumbersMergeSettingsResource>> MergeSettings;
    }

    [RTTI.Serializable(0x6F7801D6B142A131)]
    public class HUDDamageNumbersMergeSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<HUDDamageNumbersDisplaySettingsResource> DisplaySettings;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(2, 0x40, "Representation")] public float TextMergeTimer;
        [RTTI.Member(3, 0x44, "Representation")] public float TextMergeDistance;
    }

    [RTTI.Serializable(0x6C33611E08562FE3)]
    public class HUDDamageResistanceTimer
    {
        [RTTI.Member(0, 0x0)] public Ref<HUDShaderResource> TimerShader;
        [RTTI.Member(1, 0x8)] public Ref<DamageModifierComponentResource> DamageModifierComponent;
    }

    [RTTI.Serializable(0xA356C82FC1F66C2)]
    public class HUDDamageTypeToColorResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<DamageTypeResource> DamageType;
        [RTTI.Member(1, 0x30, "Logic")] public FRGBAColor Color;
    }

    [RTTI.Serializable(0x82A29B16BA9FE28D)]
    public class HUDDisclaimerLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x39DA1C381635916F)]
    public class HUDDisclaimerLogicResource : HUDLogicResource
    {
    }

    [RTTI.Serializable(0x76AA2EEF43433069)]
    public class HUDEffectSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<ScreenEffectResource> ScreenEffect;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> ScreenEffectCurve;
        [RTTI.Member(2, 0x10)] public Ref<CurveResource> ZoomCurve;
        [RTTI.Member(3, 0x18)] public Ref<CurveResource> FOVCurve;
    }

    [RTTI.Serializable(0x2D64885E4A6C6B1E)]
    public class HUDElement : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xACFA423195395E74)]
    public class HUDElementResource : Resource
    {
        [RTTI.Member(0, 0x28, "Snap")] public EHUDSnap Type;
        [RTTI.Member(1, 0x2C, "Snap")] public EHUDUnits UnitsPositionX;
        [RTTI.Member(2, 0x30, "Snap")] public EHUDUnits UnitsPositionY;
        [RTTI.Member(3, 0x34, "Snap")] public EHUDUnits UnitsSizeX;
        [RTTI.Member(4, 0x38, "Snap")] public EHUDUnits UnitsSizeY;
        [RTTI.Member(5, 0x40, "Snap")] public Vec3 Position;
        [RTTI.Member(6, 0x50, "Snap")] public ISize Size;
        [RTTI.Member(7, 0x58, "General")] public float FadeInTime;
        [RTTI.Member(8, 0x5C, "General")] public float FadeOutTime;
        [RTTI.Member(9, 0x60, "General")] public bool IsShown;
        [RTTI.Member(10, 0x61, "General")] public bool UseTRCScreenArea;
        [RTTI.Member(11, 0x68, "Aggregate")] public Array<Ref<HUDElementResource>> ChildElements;
        [RTTI.Member(12, 0x80, "General")] public FRGBAColor Color;
        [RTTI.Member(13, 0x90, "Snap")] public Vec3 Rotation;
        [RTTI.Member(14, 0xA0, "Snap")] public EHUDSnap RotationalPivot;
        [RTTI.Member(15, 0xA4, "General")] public bool IsOnForeground;
    }

    [RTTI.Serializable(0x4E9AC50AB81C0975)]
    public class HUDEnemyHealthBarLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x1FE5CA6F923FA94E)]
    public class HUDEnemyHealthBarLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public float MaxHealthBarDistance;
        [RTTI.Member(1, 0x54, "Logic")] public float DisplayTimer;
        [RTTI.Member(2, 0x58, "Logic")] public bool DisplayHealthWhenFull;
        [RTTI.Member(3, 0x60, "Logic")] public String HelperName;
        [RTTI.Member(4, 0x70, "Logic")] public Vec3 DefaultHelperOffset;
        [RTTI.Member(5, 0x80, "Logic")] public int SortPosition;
        [RTTI.Member(6, 0x88, "Logic")] public Ref<HUDElementResource> BarRootElement;
        [RTTI.Member(7, 0x90, "Logic")] public Ref<CurveResource> HealingBlinkCurve;
        [RTTI.Member(8, 0xA0, "Logic")] public FRGBAColor HealingColor;
    }

    [RTTI.Serializable(0xB9F0DE9E76C980AE)]
    public class HUDEntityHelper : HUDHelper
    {
    }

    [RTTI.Serializable(0xCAB22713619C4B8)]
    public class HUDFastTravelLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x406294B4195F6328)]
    public class HUDFastTravelLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDTextResource> LocationTextElement;
    }

    [RTTI.Serializable(0xA13E6A5224FBB1CA)]
    public class HUDFocusDamageModifierRepresentation
    {
        [RTTI.Member(0, 0x0, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x8, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(2, 0x10, "Logic")] public bool IsAllDamageTypes;
    }

    [RTTI.Serializable(0xC99ABF6279FAD1EF)]
    public class HUDFocusLevelDifferenceColor
    {
        [RTTI.Member(0, 0x0, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(1, 0x8, "Logic")] public int LevelDifference;
        [RTTI.Member(2, 0x10, "Logic")] public FRGBAColor Color;
    }

    [RTTI.Serializable(0xCC9901619E3325B)]
    public class HUDFocusLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xAC5B0871BF704897)]
    public class HUDFocusLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Representation")] public Ref<HUDShaderResource> ScanningProgressIndicator;
        [RTTI.Member(1, 0x58, "Representation")] public String ScanningProgressShaderVariableName;
        [RTTI.Member(2, 0x60, "Representation")] public Array<HUDFocusLevelDifferenceColor> LevelDifferenceColors;
        [RTTI.Member(3, 0x70, "Factions")] public Ref<HUDElementResource> FriendlyFactionElement;
        [RTTI.Member(4, 0x78, "Factions")] public Ref<HUDElementResource> HostileFactionElement;
        [RTTI.Member(5, 0x80, "Rumble")] public Ref<RumbleResource> ScanningRumble;
        [RTTI.Member(6, 0x88, "ScannedInfo")] public Array<HUDFocusDamageModifierRepresentation> DamageModifiers;
        [RTTI.Member(7, 0x98, "ScannedInfo")] public Ref<HUDElementResource> ScannedInfoElement;
        [RTTI.Member(8, 0xA0, "ScannedInfoHeader")] public Ref<HUDTextResource> TargetTitle;
        [RTTI.Member(9, 0xA8, "ScannedInfoHeader")] public Ref<HUDImageResource> TargetLevelIcon;
        [RTTI.Member(10, 0xB0, "ScannedInfoHeader")] public Ref<HUDTextResource> TargetLevelText;
        [RTTI.Member(11, 0xB8, "ScannedInfoHeader")] public Ref<HUDImageResource> TargetTypeIcon;
        [RTTI.Member(12, 0xC0, "ScannedInfoHeader")] public Ref<HUDTextResource> TargetType;
        [RTTI.Member(13, 0xC8, "ScannedInfoBodyModifiers")] public Ref<HUDImageResource> BodyHackPerkIconElement;
        [RTTI.Member(14, 0xD0, "ScannedInfoBodyModifiers")] public Ref<HUDImageResource> HackableIndicatorElement;
        [RTTI.Member(15, 0xD8, "ScannedInfoBodyModifiers")] public Ref<UITexture> UIBodyHackableIndicatorCorruptedTexture;
        [RTTI.Member(16, 0xE0, "ScannedInfoBodyModifiers")] public Ref<UITexture> UIBodyHackableIndicatorHackableTexture;
        [RTTI.Member(17, 0xE8, "ScannedInfoBodyModifiers")] public Ref<UITexture> UIBodyHackableIndicatorCCTexture;
        [RTTI.Member(18, 0xF0, "ScannedInfoBodyModifiers")] public Ref<UITexture> UIBodyHackableIndicatorInvalidTexture;
        [RTTI.Member(19, 0xF8, "ScannedInfoBodyModifiers")] public Ref<BoolProperty> IsCorruptedProperty;
        [RTTI.Member(20, 0x100, "ScannedInfoBodyModifiers")] public Ref<BooleanFact> IsCauldronControlledFact;
        [RTTI.Member(21, 0x108, "ScannedInfoBodyModifiers")] public Ref<LocalizedTextResource> CauldronControlledTypeName;
        [RTTI.Member(22, 0x110, "ScannedInfoBodyDescription")] public Ref<HUDElementResource> BodyDescriptionElement;
        [RTTI.Member(23, 0x118, "ScannedInfoBodyDescription")] public Ref<HUDTextResource> BodyDescriptionText;
        [RTTI.Member(24, 0x120, "ScannedInfoParts")] public Ref<HUDElementResource> PartsElement;
        [RTTI.Member(25, 0x128, "ScannedInfoParts")] public Ref<HUDElementResource> PartsIcons;
        [RTTI.Member(26, 0x130, "ScannedInfoParts")] public Ref<HUDImageResource> PartsIconTemplate;
        [RTTI.Member(27, 0x138, "ScannedInfoParts")] public int DistanceBetweenPartIcons;
        [RTTI.Member(28, 0x140, "ScannedInfoParts")] public Ref<HUDElementResource> PartsInfo;
        [RTTI.Member(29, 0x148, "ScannedInfoParts")] public bool HideScannedInfoPartInfoWhenEmpty;
        [RTTI.Member(30, 0x150, "ScannedInfoParts")] public Array<Ref<HUDImageResource>> PartVulnerabilityIcons;
        [RTTI.Member(31, 0x160, "ScannedInfoParts")] public Array<Ref<HUDImageResource>> PartResistanceIcons;
        [RTTI.Member(32, 0x170, "ScannedInfoParts")] public Ref<HUDTextResource> PartDescription;
        [RTTI.Member(33, 0x178, "ScannedInfoParts")] public Ref<HUDTextResource> PartBodyDescriptionText;
        [RTTI.Member(34, 0x180, "ButtonPrompts")] public Ref<HUDTextResource> TagTargetTextPrompt;
        [RTTI.Member(35, 0x188, "ButtonPrompts")] public Ref<LocalizedTextResource> TagTargetLocalizedText;
        [RTTI.Member(36, 0x190, "ButtonPrompts")] public Ref<LocalizedTextResource> UnTagTargetLocalizedText;
        [RTTI.Member(37, 0x198, "ButtonPrompts")] public Ref<HUDTextResource> TagPatrolPathTextPrompt;
        [RTTI.Member(38, 0x1A0, "ButtonPrompts")] public Ref<LocalizedTextResource> TagTrackLocalizedText;
        [RTTI.Member(39, 0x1A8, "ButtonPrompts")] public Ref<LocalizedTextResource> UnTagTrackLocalizedText;
    }

    [RTTI.Serializable(0x16BE783AC6675D37)]
    public class HUDGroupShowOption
    {
        [RTTI.Member(0, 0x0, true)] public GGUUID LogicGroupResourceUUID;
        [RTTI.Member(1, 0x10, true)] public EHUDShowOption HUDShowOption;
    }

    [RTTI.Serializable(0x1D40754F54C28D97)]
    public class HUDHealthStatusLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x22841A319D0E1E9)]
    public class HUDHealthStatusLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Elements")] public Ref<HUDTextResource> HealthValueText;
        [RTTI.Member(1, 0x58, "Elements")] public Ref<HUDImageResource> FullHealthBucketIconTemplate;
        [RTTI.Member(2, 0x60, "Animations")] public Ref<CurveResource> FullHealthBucketIconScaleCurve;
        [RTTI.Member(3, 0x68, "Poisoned")] public Array<Ref<HUDLogicGroupResource>> LogicGroupsToShowOnPoisoned;
        [RTTI.Member(4, 0x78, "Poisoned")] public Ref<HUDElementResource> PoisonedRoot;
        [RTTI.Member(5, 0x80, "Poisoned")] public Ref<HUDImageResource> PoisonBuildupMeterForeground;
        [RTTI.Member(6, 0x88, "Poisoned")] public Ref<HUDShaderResource> ActiveDurationMeter;
        [RTTI.Member(7, 0x90, "Poisoned")] public Ref<DamageTypeResource> PoisonDamageType;
        [RTTI.Member(8, 0x98, "Resistances")] public Array<HUDDamageResistanceTimer> ResistanceTimers;
    }

    [RTTI.Serializable(0xABCBA3C6A41FBFDD)]
    public class HUDHelper : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x6F54319A08F0812C)]
    public class HUDHitReactionLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x31D65F01A3A2A761)]
    public class HUDHitReactionLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDElementResource> HitReactionsRoot;
        [RTTI.Member(1, 0x58, "Logic")] public HitReactionMeterTemplate HitReactionMeterTemplate;
        [RTTI.Member(2, 0x78, "Logic")] public HitReactionMeterTemplate TiedownMeterTemplate;
        [RTTI.Member(3, 0x98, "Logic")] public HitReactionMeterTemplate OverheatMeterTemplate;
        [RTTI.Member(4, 0xB8, "Logic")] public Ref<HUDShaderResource> HackedDurationMeter;
        [RTTI.Member(5, 0xC0, "Logic")] public Ref<HUDShaderResource> MortallyWoundedDurationMeter;
        [RTTI.Member(6, 0xD0, "Logic")] public String HelperName;
        [RTTI.Member(7, 0xD8, "Logic")] public int HelperSortPosition;
        [RTTI.Member(8, 0xDC, "Logic")] public int DistanceBetweenHitReactionMeters;
        [RTTI.Member(9, 0xE0, "Logic")] public FloatPropertyLink HackedTimeLeftFactorProperty;
        [RTTI.Member(10, 0xE8, "Logic")] public float HackedIconHideTime;
        [RTTI.Member(11, 0xF0, "Logic")] public Ref<HUDEnemyHealthBarLogicResource> EnemyHealthBarLogic;
    }

    [RTTI.Serializable(0xBC6788ED692E3EB6)]
    public class HUDImage : HUDElement
    {
    }

    [RTTI.Serializable(0x40D2331341554A93)]
    public class HUDImageResource : HUDElementResource
    {
        [RTTI.Member(0, 0xB0, "Image")] public EHUDImageMode Mode;
        [RTTI.Member(1, 0xB8, "Image")] public Ref<UITexture> UITexture;
        [RTTI.Member(2, 0xC0, "Image")] public Ref<Texture> MaskTexture;
        [RTTI.Member(3, 0xC8, "Image")] public bool FlipHorizontal;
        [RTTI.Member(4, 0xC9, "Image")] public bool FlipVertical;
    }

    [RTTI.Serializable(0xF827A62EE695514C)]
    public class HUDLanguageFontSizeOverride
    {
        [RTTI.Member(0, 0x0)] public ELanguage Language;
        [RTTI.Member(1, 0x4)] public int FontSize;
    }

    [RTTI.Serializable(0x282205EAB0E6FEE0)]
    public class HUDLayer : HUDElement
    {
    }

    [RTTI.Serializable(0xBCEE0F2CCAAAF251)]
    public class HUDLayerResource : HUDElementResource
    {
        [RTTI.Member(0, 0xB0, "Logic")] public EHUDLayer Layer;
    }

    [RTTI.Serializable(0x4152C38E28079491)]
    public class HUDLogLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x84E0245DB68BA802)]
    public class HUDLogLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Dependency")] public Ref<HUDQuestObjectiveLogicResource> QuestLogicResource;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDImageResource> TemplateElement;
        [RTTI.Member(2, 0x60, "Logic")] public float FadeDuration;
        [RTTI.Member(3, 0x64, "Logic")] public float SlideSpeed;
        [RTTI.Member(4, 0x68, "Logic")] public Array<HUDLogNotification> NotificationTypes;
        [RTTI.Member(5, 0x78, "Logic")] public float EntryDisplayTime;
        [RTTI.Member(6, 0x7C, "Logic")] public float EntryDisplayDelay;
        [RTTI.Member(7, 0x80, "Logic")] public int SpacingBetweenEntries;
        [RTTI.Member(8, 0x84, "Logic")] public int MaxLogEntries;
        [RTTI.Member(9, 0x88, "Logic")] public float TimeBetweenAdds;
        [RTTI.Member(10, 0x8C, "Logic")] public ETickerAlignment TickerAlignment;
        [RTTI.Member(11, 0x8D, "Logic")] public bool DisplayEachEntryForFullDuration;
        [RTTI.Member(12, 0x90, "Logic")] public Array<Ref<UITexture>> UIBackgroundTextureArray;
    }

    [RTTI.Serializable(0xC12FED6FDA1D825A)]
    public class HUDLogNotification : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<HUDNotificationType> Type;
        [RTTI.Member(1, 0x10)] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(2, 0x20)] public FRGBAColor IconColor;
        [RTTI.Member(3, 0x30)] public FRGBAColor TextColor;
        [RTTI.Member(4, 0x40)] public Ref<SoundResource> Sound;
    }

    [RTTI.Serializable(0x7B09028777794CAF)]
    public class HUDLogicElementExpander : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0xAD403ADC2C79BAF2)]
    public class HUDLogicElementExpanderResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38)] public EHUDLogicElementExpanderPivot Pivot;
        [RTTI.Member(1, 0x3C)] public EHUDLogicElementExpanderAxes Axes;
        [RTTI.Member(2, 0x40)] public Ref<CurveResource> ScaleCurve;
    }

    [RTTI.Serializable(0xD54F6B35B915A226)]
    public class HUDLogicElementFader : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0xB8B093EFB8F86CF7)]
    public class HUDLogicElementFaderResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38)] public EHUDLogicElementFaderMode Mode;
        [RTTI.Member(1, 0x3C)] public bool RecurseChildrenToo;
        [RTTI.Member(2, 0x40)] public Ref<CurveResource> FadeCurve;
        [RTTI.Member(3, 0x48)] public bool OnlyFadeOutIfShown;
    }

    [RTTI.Serializable(0xD4C08A99BB2D95B5)]
    public class HUDLogicElementRotator : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0xD1EB849DCBAB32EB)]
    public class HUDLogicElementRotatorResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38)] public float RotationAmount;
        [RTTI.Member(1, 0x3C)] public float InitialRotation;
        [RTTI.Member(2, 0x40)] public Ref<CurveResource> RotationCurve;
    }

    [RTTI.Serializable(0x901F91BA113E4F73)]
    public class HUDLogicElementSlider : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x1B76BFD037F3DBAC)]
    public class HUDLogicElementSliderResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38)] public IVec2 SlideAmount;
        [RTTI.Member(1, 0x40)] public IVec2 Offset;
        [RTTI.Member(2, 0x48)] public Ref<CurveResource> HorizontalSlideAmountCurve;
        [RTTI.Member(3, 0x50)] public Ref<CurveResource> VerticalSlideAmountCurve;
    }

    [RTTI.Serializable(0xC473EC926846C90)]
    public class HUDLogicGroupContainerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<HUDLogicGroupResource>> HUDLogicGroupResources;
    }

    [RTTI.Serializable(0x9408365ACA5F3F81)]
    public class HUDLogicGroupResource : Resource
    {
        [RTTI.Member(0, 0x28, "Visibility")] public EHUDShowOption DefaultShowOption;
        [RTTI.Member(1, 0x29, "Visibility")] public EHUDShowOption DefaultShowOptionNewGamePlus;
        [RTTI.Member(2, 0x30, "Visibility")] public Ref<LocalizedTextResource> ListName;
        [RTTI.Member(3, 0x38, "Visibility")] public EDifficulty ForceAlwaysOffDifficulty;
        [RTTI.Member(4, 0x3C, "Visibility")] public bool DynamicAble;
        [RTTI.Member(5, 0x3D, "Visibility")] public bool AlwaysOnAble;
        [RTTI.Member(6, 0x3E, "Visibility")] public bool AlwaysOffAble;
        [RTTI.Member(7, 0x3F, "Visibility")] public bool FocusOnlyAble;
        [RTTI.Member(8, 0x40, "Visibility")] public float VisibilityTimer;
        [RTTI.Member(9, 0x44, "Visibility")] public float FadeTime;
        [RTTI.Member(10, 0x48, "Visibility")] public bool ShowOnTouch;
        [RTTI.Member(11, 0x50, "Visibility")] public Array<HUDShowDeviceMapping> ShowDeviceMappings;
        [RTTI.Member(12, 0x60, "InitialHighlight")] public Ref<CurveResource> HighlightCurveResource;
        [RTTI.Member(13, 0x70, "InitialHighlight")] public FRGBAColor HighlightColor;
    }

    [RTTI.Serializable(0xC19537EFE7A2686C)]
    public class HUDLogicInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x63D61DF54A199953)]
    public class HUDLogicResource : Resource
    {
        [RTTI.Member(0, 0x28, "ShouldBeDisplayed")] public Array<Ref<ConditionResource>> DisplayConditions;
        [RTTI.Member(1, 0x38, "ShouldBeDisplayed")] public bool WhenAlive;
        [RTTI.Member(2, 0x39, "ShouldBeDisplayed")] public bool WhenDead;
        [RTTI.Member(3, 0x3A, "ShouldBeDisplayed")] public bool InPartialHUD;
        [RTTI.Member(4, 0x40, "Elements")] public Ref<HUDElementResource> RootElement;
        [RTTI.Member(5, 0x48, "Logic")] public Ref<HUDLogicGroupResource> LogicGroupResource;
    }

    [RTTI.Serializable(0xD259337D4C2AB66B)]
    public class HUDLogicShaderVariableAnimator : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x3ADBF9AD890CC0E7)]
    public class HUDLogicShaderVariableAnimatorResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38)] public String VariableName;
        [RTTI.Member(1, 0x40)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0xFD4A90C8AD701443)]
    public class HUDLogicSoundItem : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0x45B276EE7EB8FDE)]
    public class HUDLogicSoundItemResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<SoundResource> Sound;
    }

    [RTTI.Serializable(0x685A8C6E43080A67)]
    public class HUDLogicTextFontSizer : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0xB139296C6CC53D77)]
    public class HUDLogicTextFontSizerResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x6543C5012496623F)]
    public class HUDLogicTimeline : HUDLogicTimelineItem
    {
    }

    [RTTI.Serializable(0xFA2B76F5CE2902B8)]
    public class HUDLogicTimelineItem : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xFA9F298BEEBB3664)]
    public class HUDLogicTimelineItemResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<HUDElementResource> Element;
        [RTTI.Member(1, 0x30)] public float Duration;
    }

    [RTTI.Serializable(0x4AA22EA7519CC65D)]
    public class HUDLogicTimelineKey : Resource
    {
        [RTTI.Member(0, 0x28)] public float StartTime;
        [RTTI.Member(1, 0x30)] public Ref<HUDLogicTimelineItemResource> Item;
    }

    [RTTI.Serializable(0xCD5AE8D9F3B857B0)]
    public class HUDLogicTimelineResource : HUDLogicTimelineItemResource
    {
        [RTTI.Member(0, 0x38)] public Array<Ref<HUDLogicTimelineKey>> Keys;
    }

    [RTTI.Serializable(0x6F990271CDBD00A0)]
    public class HUDLogicTimerGroup
    {
    }

    [RTTI.Serializable(0x5C59D53B87FA638)]
    public class HUDLoudnessMapping
    {
        [RTTI.Member(0, 0x0)] public float LoudnessLevel;
        [RTTI.Member(1, 0x8)] public Ref<HUDImageResource> LoudnessImage;
    }

    [RTTI.Serializable(0x7DC8DFC03106187C)]
    public class HUDMarkerHelper : HUDHelper
    {
    }

    [RTTI.Serializable(0x2079D003574734D5)]
    public class HUDNameComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB31903ADD45FF367)]
    public class HUDNameComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x4531C7D00D46D04E)]
    public class HUDNameComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<LocalizedTextResource> LocalizedName;
        [RTTI.Member(1, 0x30, "Representation")] public String PositionHelperName;
        [RTTI.Member(2, 0x38, "Representation")] public bool ShowInSequence;
        [RTTI.Member(3, 0x3C, "Representation")] public float MaxFriendlyDrawDistance;
        [RTTI.Member(4, 0x40, "Representation")] public float MaxEnemyDrawDistance;
        [RTTI.Member(5, 0x44, "Representation")] public ENameExposureType EnemyExposure;
        [RTTI.Member(6, 0x48, "Representation")] public ENameExposureType FriendlyExposure;
        [RTTI.Member(7, 0x4C, "Representation")] public bool HideWhenObscured;
    }

    [RTTI.Serializable(0x6A6ACFFC86FC7F31)]
    public class HUDNotificationType : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> TitleResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> TextResource;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<LocalizedTextResource> PromptResource;
    }

    [RTTI.Serializable(0x1F5604E50C5D6434)]
    public class HUDObjectIconsLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xADB946D8B2E76997)]
    public class HUDObjectIconsLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDTextResource> DistanceTextElementResource;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDImageResource> ImageElementResource;
        [RTTI.Member(2, 0x60, "Logic")] public Ref<HUDImageResource> WaypointElementResource;
        [RTTI.Member(3, 0x68, "Logic")] public String HelperName;
        [RTTI.Member(4, 0x70, "Logic")] public Vec3 BreadcrumbIconOffset;
        [RTTI.Member(5, 0x80, "Logic")] public int HelperSortPosition;
    }

    [RTTI.Serializable(0x57864698F6CFBE0B)]
    public class HUDObjectInfoPositionerLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xB93E26CC80A28C93)]
    public class HUDObjectInfoPositionerLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDElementResource> HelperElement;
        [RTTI.Member(1, 0x58, "Logic")] public float IconStackOffset;
    }

    [RTTI.Serializable(0x43E52758497BF6A4)]
    public class HUDObjectNamesLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x5EBC76B02B4E477F)]
    public class HUDObjectNamesLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public String ElementName;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDElementResource> PlayerNameTemplate;
    }

    [RTTI.Serializable(0xFFA54481D9F86849)]
    public class HUDPerkAbilityTemplate
    {
        [RTTI.Member(0, 0x0)] public EPerkAbility PerkAbility;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(2, 0x10)] public Ref<UITexture> UIInactiveIconTexture;
        [RTTI.Member(3, 0x18)] public Ref<LocalizedTextResource> LocalizedItemName;
    }

    [RTTI.Serializable(0x7F9473063B223441)]
    public class HUDPlayerChoiceLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x42CBEBBA603D9256)]
    public class HUDPlayerChoiceLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Elements")] public Ref<HUDTextResource> TitleText;
        [RTTI.Member(1, 0x58, "Elements")] public Ref<HUDPlayerChoiceOption> TopRightOption;
        [RTTI.Member(2, 0x60, "Elements")] public Ref<HUDPlayerChoiceOption> MiddleRightOption;
        [RTTI.Member(3, 0x68, "Elements")] public Ref<HUDPlayerChoiceOption> BottomRightOption;
        [RTTI.Member(4, 0x70, "Elements")] public Ref<HUDPlayerChoiceOption> BottomLeftOption;
        [RTTI.Member(5, 0x78, "Elements")] public Ref<HUDPlayerChoiceOption> MiddleLeftOption;
        [RTTI.Member(6, 0x80, "Elements")] public Ref<HUDPlayerChoiceOption> TopLeftOption;
        [RTTI.Member(7, 0x88, "Logic")] public float OptionFadeTime;
        [RTTI.Member(8, 0x90, "Elements")] public Ref<HUDImageResource> BackgroundImage;
        [RTTI.Member(9, 0x98, "Elements")] public Ref<HUDImageResource> OptionMarkImage;
    }

    [RTTI.Serializable(0x32AE1EDE38B439B2)]
    public class HUDPlayerChoiceOption : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<HUDPlayerChoiceOptionState> ChosenOption;
        [RTTI.Member(1, 0x30)] public Ref<HUDPlayerChoiceOptionState> NormalOption;
        [RTTI.Member(2, 0x38)] public Ref<HUDPlayerChoiceOptionState> SelectedOption;
    }

    [RTTI.Serializable(0x900765226EF3BAEC)]
    public class HUDPlayerChoiceOptionState : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<HUDImageResource> ImageElement;
        [RTTI.Member(1, 0x30)] public Ref<HUDTextResource> TextElement;
    }

    [RTTI.Serializable(0x913A3A5B48FE0104)]
    public class HUDPopupLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x15B1905D84D2266)]
    public class HUDPopupLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Array<Ref<HUDPopupMappingResource>> PopupMappings;
    }

    [RTTI.Serializable(0x3B201D86A85F99D8)]
    public class HUDPopupMapping
    {
    }

    [RTTI.Serializable(0xE875EEE67432004B)]
    public class HUDPopupMappingResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<HUDElementResource> ParentElement;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<HUDTextResource> TitleElement;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<HUDTextResource> TextElement;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<HUDTextResource> PromptElement;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<HUDImageResource> IconElement;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<HUDImageResource> RewardsBackground;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<HUDTextResource> RewardDescriptionTemplate;
        [RTTI.Member(7, 0x60, "Logic")] public Ref<HUDImageResource> RewardIconTemplate;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<HUDElementResource> RewardSlideAnimationRootTemplate;
        [RTTI.Member(9, 0x70, "Logic")] public Ref<HUDImageResource> RewardHighlightTemplate;
        [RTTI.Member(10, 0x78, "Logic")] public float RewardRevealAnimationTime;
        [RTTI.Member(11, 0x80, "Logic")] public Ref<CurveResource> RewardSlideAnimationCurve;
        [RTTI.Member(12, 0x88, "Logic")] public Ref<CurveResource> RewardHighlightAnimationCurve;
        [RTTI.Member(13, 0x90, "Logic")] public ERewardStackingDirection RewardStacking;
        [RTTI.Member(14, 0x98, "Logic")] public Ref<HUDElementResource> RewardParentElementTemplate;
        [RTTI.Member(15, 0xA0, "Logic")] public Array<Ref<HUDNotificationType>> NotificationTypes;
        [RTTI.Member(16, 0xB0, "Sound")] public Ref<SoundResource> FadeInSound;
        [RTTI.Member(17, 0xB8, "Sound")] public Ref<SoundResource> RewardSound;
        [RTTI.Member(18, 0xC0, "Sound")] public Ref<SoundResource> PromptSound;
        [RTTI.Member(19, 0xC8, "Sound")] public Ref<SoundResource> CombinedPromptAndFadeInSound;
        [RTTI.Member(20, 0xD0, "Logic")] public bool InvertRewardSlideCurve;
    }

    [RTTI.Serializable(0x541C96595D5C3FF9)]
    public class HUDQuestObjectiveLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x1A080D1585CD5E23)]
    public class HUDQuestObjectiveLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Elements")] public Ref<HUDTextResource> TitleText;
        [RTTI.Member(1, 0x58, "Elements")] public Ref<HUDTextResource> TrackerTitleText;
        [RTTI.Member(2, 0x60, "Elements")] public Ref<HUDElementResource> ObjectiveTemplate;
        [RTTI.Member(3, 0x68, "Elements")] public Ref<HUDTextResource> ObjectiveText;
        [RTTI.Member(4, 0x70, "Elements")] public Ref<HUDTextResource> ObjectiveStatusText;
        [RTTI.Member(5, 0x78, "Elements")] public Ref<HUDElementResource> ObjectiveHintTemplate;
        [RTTI.Member(6, 0x80, "Elements")] public Ref<HUDTextResource> ObjectiveHintText;
        [RTTI.Member(7, 0x88, "Elements")] public Ref<HUDImageResource> ObjectiveAddedImage;
        [RTTI.Member(8, 0x90, "Elements")] public Ref<HUDImageResource> ObjectiveUpdateImage;
        [RTTI.Member(9, 0x98, "Elements")] public Ref<HUDImageResource> ObjectiveCompletedImage;
        [RTTI.Member(10, 0xA0, "Elements")] public Ref<HUDImageResource> ObjectiveFailedImage;
        [RTTI.Member(11, 0xA8, "Elements")] public Ref<HUDElementResource> SubObjectiveTemplate;
        [RTTI.Member(12, 0xB0, "Elements")] public Ref<HUDTextResource> SubObjectiveText;
        [RTTI.Member(13, 0xB8, "Elements")] public Ref<HUDTextResource> SubObjectiveStatusText;
        [RTTI.Member(14, 0xC0, "Elements")] public Ref<HUDElementResource> SubObjectiveHintTemplate;
        [RTTI.Member(15, 0xC8, "Elements")] public Ref<HUDTextResource> SubObjectiveHintText;
        [RTTI.Member(16, 0xD0, "Elements")] public Ref<HUDImageResource> SubObjectiveAddedImage;
        [RTTI.Member(17, 0xD8, "Elements")] public Ref<HUDImageResource> SubObjectiveUpdateImage;
        [RTTI.Member(18, 0xE0, "Elements")] public Ref<HUDImageResource> SubObjectiveCompletedImage;
        [RTTI.Member(19, 0xE8, "Elements")] public Ref<HUDImageResource> SubObjectiveFailedImage;
        [RTTI.Member(20, 0xF0, "Elements")] public Ref<HUDElementResource> Prompt;
        [RTTI.Member(21, 0xF8, "UpdateObjective")] public Ref<SoundResource> ObjectiveChangeSound;
        [RTTI.Member(22, 0x100, "CompleteObjective")] public Ref<SoundResource> ObjectiveCompleteSound;
        [RTTI.Member(23, 0x108, "FailObjective")] public Ref<SoundResource> ObjectiveFailSound;
        [RTTI.Member(24, 0x110, "ShowObjective")] public Ref<SoundResource> NewObjectiveSound;
        [RTTI.Member(25, 0x118, "ShowTracker")] public Ref<CurveResource> ShowFadeCurve;
        [RTTI.Member(26, 0x120, "ShowTracker")] public Ref<CurveResource> ShowSlideCurve;
        [RTTI.Member(27, 0x128, "ShowTracker")] public Ref<CurveResource> HideFadeCurve;
        [RTTI.Member(28, 0x130, "ShowTracker")] public Ref<CurveResource> HideSlideCurve;
        [RTTI.Member(29, 0x138, "CompleteObjective")] public Ref<CurveResource> CompletedFlashCurve;
        [RTTI.Member(30, 0x140, "CompleteObjective")] public Ref<CurveResource> CompletedFadeCurve;
        [RTTI.Member(31, 0x148, "FailObjective")] public Ref<CurveResource> FailedFlashCurve;
        [RTTI.Member(32, 0x150, "FailObjective")] public Ref<CurveResource> FailedFadeCurve;
        [RTTI.Member(33, 0x158, "UpdateObjective")] public Ref<CurveResource> HideElementFadeCurve;
        [RTTI.Member(34, 0x160, "ShowObjective")] public Ref<CurveResource> NewFlashCurve;
        [RTTI.Member(35, 0x168, "ShowObjective")] public Ref<CurveResource> NewFadeCurve;
        [RTTI.Member(36, 0x170, "ShowObjective")] public Ref<CurveResource> NewSlideCurve;
        [RTTI.Member(37, 0x178, "UpdateObjective")] public Ref<CurveResource> UpdatedFlash;
        [RTTI.Member(38, 0x180, "Align")] public Ref<CurveResource> VerticalAlignSpeedCurve;
        [RTTI.Member(39, 0x188, "Logic")] public bool ShowActiveQuest;
        [RTTI.Member(40, 0x189, "Logic")] public bool ShouldShowCompletedObjectives;
        [RTTI.Member(41, 0x18A, "Logic")] public bool ShouldShowFailedObjectives;
        [RTTI.Member(42, 0x18C, "Notification")] public float VisibleDuration;
        [RTTI.Member(43, 0x190, "Design")] public float ObjectiveHorizontalOffset;
        [RTTI.Member(44, 0x194, "Design")] public float SubObjectiveHorizontalOffset;
        [RTTI.Member(45, 0x198, "Design")] public float OffsetTrackedUntracked;
        [RTTI.Member(46, 0x19C, "Design")] public float StatusObjectiveSpaceSize;
        [RTTI.Member(47, 0x1A0, "Logic")] public Ref<HUDQuestObjectiveLogicResource> DependencyResource;
        [RTTI.Member(48, 0x1A8, "Logic")] public Array<Ref<QuestType>> ForceVisibleQuestTypes;
        [RTTI.Member(49, 0x1B8, "Notification")] public Ref<LocalizedTextResource> OptionalPostfix;
    }

    [RTTI.Serializable(0x70665AE1D795F64C)]
    public class HUDRepairLogic : HUDBarLogic
    {
    }

    [RTTI.Serializable(0xD92C8FAC3E6DD361)]
    public class HUDRepairLogicResource : HUDBarLogicResource
    {
        [RTTI.Member(0, 0x140, "Logic")] public Ref<GraphProgramResource> RepairCostGraphProgram;
        [RTTI.Member(1, 0x148, "Logic")] public Ref<HUDTextResource> CurrentShardsElement;
    }

    [RTTI.Serializable(0x5A15FB27BEADEF2B)]
    public class HUDResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<HUDElementResource>> Elements;
        [RTTI.Member(1, 0x38, "General")] public Ref<HUDElementResource> RootElement;
        [RTTI.Member(2, 0x50, "General")] public Array<Ref<HUDLogicResource>> Logic;
        [RTTI.Member(3, 0x60, "General")] public Ref<ButtonIconCollection> ButtonIconCollection;
        [RTTI.Member(4, 0x68, "General")] public Ref<ImageMap> TextImageMap;
        [RTTI.Member(5, 0x70, "General")] public Ref<ImageMap> DLCTextImageMap;
        [RTTI.Member(6, 0x78, "General")] public Ref<ShaderResource> Shader;
        [RTTI.Member(7, 0x80, "General")] public Ref<ShaderResource> BlurShader;
        [RTTI.Member(8, 0x88, "General")] public float FOV;
        [RTTI.Member(9, 0x90, "General")] public Ref<EntitlementResource> DLCPackEntitlementKey;
    }

    [RTTI.Serializable(0x30A261BB4EC4684F)]
    public class HUDRestoreState : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public Array<GGUUID> HUDResources;
    }

    [RTTI.Serializable(0xFB17A935CC4E8230)]
    public class HUDRoadRouteHelper : HUDHelper
    {
    }

    [RTTI.Serializable(0x4CE7BAFDFB7F3182)]
    public class HUDSavingLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xFCC2FA6587A1077A)]
    public class HUDSavingLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDImageResource> SavingIcon;
        [RTTI.Member(1, 0x58, "Logic")] public float RotationSpeedPerSec;
    }

    [RTTI.Serializable(0xCE08BB1DF251AF3D)]
    public class HUDSceneObjectHelper : HUDHelper
    {
    }

    [RTTI.Serializable(0x81322EA36D54B899)]
    public class HUDShader : HUDElement
    {
    }

    [RTTI.Serializable(0x23D86F8D5DCB3C9D)]
    public class HUDShaderResource : HUDElementResource
    {
        [RTTI.Member(0, 0xB0, "Shader")] public Ref<UIEffectResource> Effect;
    }

    [RTTI.Serializable(0x3588DAAF4DB95EF7)]
    public class HUDShowDeviceMapping
    {
        [RTTI.Member(0, 0x0)] public EDeviceFunction DeviceFunction;
        [RTTI.Member(1, 0x4)] public EHUDDeviceShowOption HUDShowOption;
    }

    [RTTI.Serializable(0x5AEA1F2E64723BD9)]
    public class HUDSplashScreenLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xEF96219CD82A9044)]
    public class HUDSplashScreenLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Elements")] public Ref<HUDImageResource> ImageElement;
    }

    [RTTI.Serializable(0x8B7BC08C5FDC84E6)]
    public class HUDStaminaBarLogic : HUDBarLogic
    {
    }

    [RTTI.Serializable(0xFCEAAC268EF295EC)]
    public class HUDStaminaBarLogicResource : HUDBarLogicResource
    {
    }

    [RTTI.Serializable(0x2B634B098DAE4699)]
    public class HUDSubtitlesLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xAFD5E9B043C30B24)]
    public class HUDSubtitlesLogicNameRemapEntry
    {
        [RTTI.Member(0, 0x0)] public Ref<ConditionResource> Condition;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> DisplayNameTrue;
        [RTTI.Member(2, 0x10)] public Ref<LocalizedTextResource> DisplayNameFalse;
    }

    [RTTI.Serializable(0x66BD515879D59D5F)]
    public class HUDSubtitlesLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Elements")] public Array<Ref<HUDTextResource>> TextLines;
        [RTTI.Member(1, 0x60, "Background")] public Ref<HUDElementResource> Background;
        [RTTI.Member(2, 0x68, "Background")] public ISize BackgroundMargin;
        [RTTI.Member(3, 0x70, "Logic")] public Array<HUDSubtitlesLogicNameRemapEntry> RemappedNames;
        [RTTI.Member(4, 0x80, "Logic")] public float MaxDistanceToSpeakerRatio;
    }

    [RTTI.Serializable(0xE604AC707A0C0312)]
    public class HUDText : HUDElement
    {
    }

    [RTTI.Serializable(0xF86DA7059C57198D)]
    public class HUDTextLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x4976EE17528A0206)]
    public class HUDTextLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDTextResource> TextElement;
        [RTTI.Member(1, 0x58, "Logic")] public bool HideWhenEmpty;
        [RTTI.Member(2, 0x60, "Logic")] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0x518A204BAF9BD2D1)]
    public class HUDTextResource : HUDElementResource
    {
        [RTTI.Member(0, 0xB0, "Text")] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(1, 0xB8, "Text")] public WString Text;
        [RTTI.Member(2, 0xC0, "Text")] public Ref<Typeface> Typeface;
        [RTTI.Member(3, 0xC8, "Text")] public String Style;
        [RTTI.Member(4, 0xD0, "Text")] public int FontSize;
        [RTTI.Member(5, 0xD8, "Text")] public Array<HUDLanguageFontSizeOverride> FontSizeOverrides;
        [RTTI.Member(6, 0xE8, "Snap")] public EHUDTextMode Mode;
    }

    [RTTI.Serializable(0x1964FF4F3BE11B5)]
    public class HUDTexturePanLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xCFB095830B5356BF)]
    public class HUDTexturePanLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<GraphProgramResource> XDeltaProgram;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<GraphProgramResource> YDeltaProgram;
    }

    [RTTI.Serializable(0x2B3F184B461E2B40)]
    public class HUDTimelineBasedLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xDCF9742CB57DDF5)]
    public class HUDTimelineBasedLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<HUDLogicTimelineResource> AppearTimeline;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDLogicTimelineResource> DisappearTimeline;
    }

    [RTTI.Serializable(0x73EF36F6B5E253D7)]
    public class HUDTimerSettings : Resource
    {
        [RTTI.Member(0, 0x30, "Colors")] public FRGBAColor Text;
        [RTTI.Member(1, 0x40, "Colors")] public FRGBAColor TextBlink;
        [RTTI.Member(2, 0x50, "Colors")] public FRGBAColor TextFinished;
        [RTTI.Member(3, 0x60, "Timings")] public float BlinkStartTime;
        [RTTI.Member(4, 0x64, "Timings")] public float BlinkInterval;
        [RTTI.Member(5, 0x68, "Timings")] public float OnFinishDrawTime;
        [RTTI.Member(6, 0x6C, "Logic")] public bool ShowMilliseconds;
    }

    [RTTI.Serializable(0xA03AF57BE8562359)]
    public class HUDToolSelectionLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xEBAD4D6D5EC3A856)]
    public class HUDToolSelectionLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public Ref<EquipSlotType> SlotType;
        [RTTI.Member(1, 0x58, "RootElements")] public Ref<HUDElementResource> CurrentToolRoot;
        [RTTI.Member(2, 0x60, "RootElements")] public Ref<HUDElementResource> ToolListRoot;
        [RTTI.Member(3, 0x68, "Healing")] public Ref<HUDImageResource> NormalHealthIcon;
        [RTTI.Member(4, 0x70, "Healing")] public Ref<HUDImageResource> LowHealthBlinkIcon;
        [RTTI.Member(5, 0x78, "Healing")] public Ref<HUDImageResource> HealingFailedIcon;
        [RTTI.Member(6, 0x80, "Healing")] public Ref<CurveResource> LowHealthBlinkingCurve;
        [RTTI.Member(7, 0x88, "Healing")] public float HealthFactorThreshold;
        [RTTI.Member(8, 0x8C, "Healing")] public float BucketFactorThreshold;
        [RTTI.Member(9, 0x90, "Healing")] public Array<Ref<HUDLogicGroupResource>> LogicGroupsToShowOnLowHealth;
        [RTTI.Member(10, 0xA0, "CurrentTool")] public Ref<HUDImageResource> IconImageResource;
        [RTTI.Member(11, 0xA8, "CurrentTool")] public Ref<HUDImageResource> PreviousIconImageResource;
        [RTTI.Member(12, 0xB0, "CurrentTool")] public Ref<HUDImageResource> NextIconImageResource;
        [RTTI.Member(13, 0xB8, "CurrentTool")] public Ref<HUDImageResource> PreviousDummyIconImageResource;
        [RTTI.Member(14, 0xC0, "CurrentTool")] public Ref<HUDImageResource> NextDummyIconImageResource;
        [RTTI.Member(15, 0xC8, "CurrentTool")] public Ref<HUDTextResource> AmountTextResource;
        [RTTI.Member(16, 0xD0, "CurrentTool")] public Ref<CurveResource> UseItemBlinkCurve;
        [RTTI.Member(17, 0xD8, "CurrentTool")] public Ref<HUDImageResource> UseFailedImageResource;
        [RTTI.Member(18, 0xE0, "CurrentTool")] public Ref<CurveResource> ActionFailedFadeCurve;
        [RTTI.Member(19, 0xE8, "CurrentTool")] public Ref<HUDElementResource> CancelToolPrompt;
        [RTTI.Member(20, 0xF0, "Animations")] public Ref<HUDLogicTimelineResource> CyclePrevious2Timeline;
        [RTTI.Member(21, 0xF8, "Animations")] public Ref<HUDLogicTimelineResource> CyclePrevious3Timeline;
        [RTTI.Member(22, 0x100, "Animations")] public Ref<HUDLogicTimelineResource> CycleNext2Timeline;
        [RTTI.Member(23, 0x108, "Animations")] public Ref<HUDLogicTimelineResource> CycleNext3Timeline;
        [RTTI.Member(24, 0x110, "ToolList")] public Ref<HUDTextResource> Text;
        [RTTI.Member(25, 0x118, "ToolList")] public Ref<HUDImageResource> Icon;
        [RTTI.Member(26, 0x120, "ToolList")] public Ref<HUDImageResource> Cursor;
        [RTTI.Member(27, 0x128, "ToolList")] public float IconSpacing;
        [RTTI.Member(28, 0x12C, "Healing")] public float HealthBucketEmptyOpacity;
        [RTTI.Member(29, 0x130, "ToolList")] public float SelectionAnimationDuration;
        [RTTI.Member(30, 0x134, "ToolList")] public float SelectionAnimationScale;
        [RTTI.Member(31, 0x138, "Abilities")] public Array<HUDPerkAbilityTemplate> Abilities;
    }

    [RTTI.Serializable(0x87752A2A0691B9AE)]
    public class HUDVitalMessageAreaLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x65AADBF866EF33EB)]
    public class HUDVitalMessageAreaLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Elements")] public Ref<HUDTextResource> VitalStatusHUDText;
        [RTTI.Member(1, 0x58, "Elements")] public Ref<HUDTextResource> VitalMessageHUDText;
        [RTTI.Member(2, 0x60, "Elements")] public float VitalMessageDisplayTime;
        [RTTI.Member(3, 0x68, "Logic")] public Ref<CurveResource> BlinkCurve;
        [RTTI.Member(4, 0x70, "Logic")] public Ref<HUDLogicGroupResource> WeaponHUDLogicGroupResource;
    }

    [RTTI.Serializable(0x60E83F20D3D703B3)]
    public class HUDVitalStatusComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4DCA93EDC412C9CF)]
    public class HUDVitalStatusComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float DisplayTime;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> LowAmmoMessage;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<LocalizedTextResource> NoAmmoMessage;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<LocalizedTextResource> DropOnWieldMessage;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<TagProperty> IgnoreAmmoTag;
    }

    [RTTI.Serializable(0x535619C56909900C)]
    public class HUDWeaponChargeBarLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x2FE2D0717C7D4A02)]
    public class HUDWeaponChargeBarLogicResource : HUDLogicResource
    {
    }

    [RTTI.Serializable(0xC597E39AD73B80A4)]
    public class HUDWeaponSelectionLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0xEF3685CC0C45A38C)]
    public class HUDWeaponSelectionLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "RootElements")] public Ref<HUDElementResource> WeaponSelectClosedRoot;
        [RTTI.Member(1, 0x58, "RootElements")] public Ref<HUDElementResource> WeaponSelectOpenRoot;
        [RTTI.Member(2, 0x60, "ClosedWeaponWheel")] public Ref<HUDImageResource> ClosedSelectedWeaponImageResource;
        [RTTI.Member(3, 0x68, "ClosedWeaponWheel")] public Ref<HUDElementResource> ClosedSelectedAmmoImageResource;
        [RTTI.Member(4, 0x70, "OpenWeaponWheel")] public Ref<HUDElementResource> WeaponSelectOpenValidWeaponRoot;
        [RTTI.Member(5, 0x78, "OpenWeaponWheel")] public Ref<HUDElementResource> WeaponSelectOpenNoWeaponRoot;
        [RTTI.Member(6, 0x80, "OpenWeaponWheel")] public Ref<HUDImageResource> OpenSelectedWeaponImageResource;
        [RTTI.Member(7, 0x88, "OpenWeaponWheel")] public Ref<HUDTextResource> OpenSelectedWeaponNameTextResource;
        [RTTI.Member(8, 0x90, "OpenWeaponWheel")] public Ref<HUDTextResource> OpenSelectedAmmoNameTextResource;
        [RTTI.Member(9, 0x98, "OpenWeaponWheel")] public Array<Ref<HUDImageResource>> StatBarRootElements;
        [RTTI.Member(10, 0xA8, "OpenWeaponWheel")] public Array<Ref<HUDTextResource>> StatValueTextElements;
        [RTTI.Member(11, 0xB8, "OpenWeaponWheel")] public Array<Ref<HUDElementResource>> ModificationElements;
        [RTTI.Member(12, 0xC8, "OpenWeaponWheel")] public Array<HUDWeaponSlotTemplate> WeaponSlots;
        [RTTI.Member(13, 0xD8, "OpenWeaponWheel")] public Ref<HUDTextResource> QuickCraftingHeader;
        [RTTI.Member(14, 0xE0, "OpenWeaponWheel")] public Ref<HUDTextResource> QuickCraftingText;
        [RTTI.Member(15, 0xE8, "OpenWeaponWheel")] public Ref<HUDImageResource> QuickCraftingButton;
        [RTTI.Member(16, 0xF0, "OpenWeaponWheel")] public Ref<HUDShaderResource> QuickCraftingProgress;
        [RTTI.Member(17, 0xF8, "OpenWeaponWheel")] public Ref<HUDImageResource> QuickCraftingIngredientSlotTemplate;
        [RTTI.Member(18, 0x100, "OpenWeaponWheel")] public Ref<HUDElementResource> KeyboardNavigationRoot;
        [RTTI.Member(19, 0x108, "OpenWeaponWheel")] public Ref<HUDImageResource> KeyboardNavigationUp;
        [RTTI.Member(20, 0x110, "OpenWeaponWheel")] public Ref<HUDImageResource> KeyboardNavigationDown;
        [RTTI.Member(21, 0x118, "OpenWeaponWheel")] public Ref<HUDImageResource> KeyboardNavigationLeft;
        [RTTI.Member(22, 0x120, "OpenWeaponWheel")] public Ref<HUDImageResource> KeyboardNavigationRight;
        [RTTI.Member(23, 0x128, "Animations")] public Ref<HUDLogicTimelineResource> AppearTimeline;
        [RTTI.Member(24, 0x130, "Animations")] public Ref<HUDLogicTimelineResource> DisappearTimeline;
        [RTTI.Member(25, 0x138, "Animations")] public Ref<CurveResource> AmmoSelectedScaleCurve;
        [RTTI.Member(26, 0x140, "Animations")] public Ref<CurveResource> AmmoDeselectedScaleCurve;
        [RTTI.Member(27, 0x148, "Animations")] public Ref<CurveResource> AmmoCraftedScaleCurve;
        [RTTI.Member(28, 0x150, "Animations")] public Ref<CurveResource> AmmoCraftedFadeCurve;
        [RTTI.Member(29, 0x158, "Animations")] public Ref<CurveResource> CanCraftFadeCurve;
        [RTTI.Member(30, 0x160, "Animations")] public FRGBAColor AmmoCraftedBlinkColor;
        [RTTI.Member(31, 0x170, "Animations")] public Ref<LocalizedTextResource> AmmoCraftedMessage;
        [RTTI.Member(32, 0x178, "Animations")] public Ref<LocalizedTextResource> AmmoCraftingHeader;
        [RTTI.Member(33, 0x180, "Animations")] public Ref<LocalizedTextResource> AmmoCraftingUnavailableMessage;
        [RTTI.Member(34, 0x188, "Animations")] public Ref<LocalizedTextResource> AmmoCraftingCapacityUpgradeAvailable;
        [RTTI.Member(35, 0x190, "Animations")] public Ref<LocalizedTextResource> CraftingDisabled;
        [RTTI.Member(36, 0x198, "OpenWeaponWheel")] public float CraftingNotAvailableOpacity;
        [RTTI.Member(37, 0x19C, "OpenWeaponWheel")] public float AmmoBackgroundOpacity;
        [RTTI.Member(38, 0x1A0, "OpenWeaponWheel")] public float AmmoIconNotSelectedOpacity;
        [RTTI.Member(39, 0x1A4, "OpenWeaponWheel")] public int SpaceBetweenCraftingIngredients;
        [RTTI.Member(40, 0x1B0, "Animations")] public FRGBAColor OutOfAmmoIconColor;
        [RTTI.Member(41, 0x1C0, "Animations")] public FRGBAColor StatIncreaseColor;
        [RTTI.Member(42, 0x1D0, "Animations")] public FRGBAColor StatDecreaseColor;
        [RTTI.Member(43, 0x1E0, "Animations")] public FRGBAColor RarityCommonColor;
        [RTTI.Member(44, 0x1F0, "Animations")] public FRGBAColor RarityUncommonColor;
        [RTTI.Member(45, 0x200, "Animations")] public FRGBAColor RarityRareColor;
        [RTTI.Member(46, 0x210, "Animations")] public FRGBAColor RarityVeryRareColor;
        [RTTI.Member(47, 0x220, "Animations")] public Ref<BooleanFact> ChildAloyFact;
    }

    [RTTI.Serializable(0xE89D0232F6AE741)]
    public class HUDWeaponSlotTemplate
    {
        [RTTI.Member(0, 0x0)] public Ref<HUDImageResource> AmmoSlotsTripleBackground;
        [RTTI.Member(1, 0x8)] public Ref<HUDImageResource> AmmoSlotsDoubleBackground;
        [RTTI.Member(2, 0x10)] public Ref<HUDImageResource> AmmoSlotsSingleBackground;
        [RTTI.Member(3, 0x18)] public Ref<HUDImageResource> AmmoSlotsNoneBackground;
        [RTTI.Member(4, 0x20)] public Ref<HUDImageResource> AmmoSlotsTripleSelected;
        [RTTI.Member(5, 0x28)] public Ref<HUDImageResource> AmmoSlotsDoubleSelected;
        [RTTI.Member(6, 0x30)] public Ref<HUDImageResource> AmmoSlotsSingleSelected;
        [RTTI.Member(7, 0x38)] public Ref<HUDImageResource> AmmoSlotsNoneSelected;
        [RTTI.Member(8, 0x40)] public Array<Ref<HUDElementResource>> AmmoIconsTriple;
        [RTTI.Member(9, 0x50)] public Array<Ref<HUDElementResource>> AmmoIconsDouble;
        [RTTI.Member(10, 0x60)] public Ref<HUDElementResource> AmmoIconsSingle;
        [RTTI.Member(11, 0x68)] public Ref<HUDLogicTimelineResource> SelectAnimation;
    }

    [RTTI.Serializable(0x61CA2EF7E375D819)]
    public class HUDXpGainedLogic : HUDLogicInstance
    {
    }

    [RTTI.Serializable(0x4653D3FA13816FFF)]
    public class HUDXpGainedLogicResource : HUDLogicResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public String ElementName;
        [RTTI.Member(1, 0x58, "Logic")] public Ref<HUDTextResource> HUDTextXpGainedResource;
        [RTTI.Member(2, 0x60, "Logic")] public Ref<LocalizedTextResource> TotalXPText;
        [RTTI.Member(3, 0x68, "Logic")] public float DisplayDelay;
        [RTTI.Member(4, 0x6C, "Logic")] public float DelayBetweenXpNumbers;
        [RTTI.Member(5, 0x70, "Logic")] public Ref<CurveResource> MoveYCurve;
        [RTTI.Member(6, 0x78, "Logic")] public Ref<CurveResource> FadeCurve;
    }

    [RTTI.Serializable(0xB973D6131ECA799B)]
    public class HUDXpLogic : HUDBarLogicBase
    {
    }

    [RTTI.Serializable(0xF6AE729438EA6AC6)]
    public class HUDXpLogicResource : HUDBarLogicBaseResource
    {
        [RTTI.Member(0, 0x130, "GoldenBar")] public Ref<UITexture> FrontBarTexture;
        [RTTI.Member(1, 0x138, "GoldenBar")] public Ref<UITexture> BackBarTexture;
        [RTTI.Member(2, 0x140, "GoldenBar")] public Ref<UITexture> BackgroundTexture;
        [RTTI.Member(3, 0x148, "Bar")] public EXpBarVisibility Visibility;
        [RTTI.Member(4, 0x14C, "Bar")] public float VisibilityTimerXPGain;
        [RTTI.Member(5, 0x150, "Bar")] public float VisibilityTimerLevelGain;
        [RTTI.Member(6, 0x154, "Bar")] public float VisibilityLevelPercentageThreshold;
        [RTTI.Member(7, 0x158, "Logic")] public Ref<HUDImageResource> Background;
        [RTTI.Member(8, 0x160, "Logic")] public Ref<HUDTextResource> CurrentLevel;
        [RTTI.Member(9, 0x168, "Logic")] public Ref<HUDTextResource> NextLevel;
        [RTTI.Member(10, 0x170, "Logic")] public Ref<HUDTextResource> XpProgressionText;
        [RTTI.Member(11, 0x178, "EventTicker")] public Ref<HUDElementResource> TickerRootElement;
        [RTTI.Member(12, 0x180, "EventTicker")] public Ref<HUDElementResource> TickerTemplateElement;
        [RTTI.Member(13, 0x188, "EventTicker")] public Ref<CurveResource> VerticalSlideCurve;
        [RTTI.Member(14, 0x190, "EventTicker")] public Ref<CurveResource> VerticalExitCurve;
        [RTTI.Member(15, 0x198, "EventTicker")] public Ref<CurveResource> HorizontalEnterCurve;
        [RTTI.Member(16, 0x1A0, "EventTicker")] public float EntryDisplayTime;
        [RTTI.Member(17, 0x1A4, "EventTicker")] public float FirstEntryDisplayTime;
        [RTTI.Member(18, 0x1A8, "EventTicker")] public bool DisplayTimeOnlyForTopElement;
        [RTTI.Member(19, 0x1AC, "EventTicker")] public float EntryDisplayDelay;
        [RTTI.Member(20, 0x1B0, "EventTicker")] public int SpacingBetweenEntries;
        [RTTI.Member(21, 0x1B4, "EventTicker")] public int MaxTickerEntries;
        [RTTI.Member(22, 0x1B8, "EventTicker")] public float TimeBetweenAdds;
        [RTTI.Member(23, 0x1C0, "EventTicker")] public Array<HUDXpTickerNotification> NotificationTypes;
    }

    [RTTI.Serializable(0x8DE8EDAEEB46D729)]
    public class HUDXpTickerNotification : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<LevelBasedXpReward> EventType;
        [RTTI.Member(1, 0x10)] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(2, 0x18)] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(3, 0x20)] public FRGBAColor IconColor;
        [RTTI.Member(4, 0x30)] public FRGBAColor TextColor;
        [RTTI.Member(5, 0x40)] public Ref<SoundResource> Sound;
        [RTTI.Member(6, 0x48)] public Array<Ref<HUDNotificationType>> AfterNotificationTypes;
    }

    [RTTI.Serializable(0x75D20F1932187C29)]
    public class HackableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF5802D764DE7DDD0)]
    public class HackableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PerkLevel> RequiredPerkLevel;
    }

    [RTTI.Serializable(0x902E3A4D6D02C0B3)]
    public class HairBundle
    {
        [RTTI.Member(0, 0x0)] public Array<HairStrand> Strands;
        [RTTI.Member(1, 0x10)] public int Material;
    }

    [RTTI.Serializable(0x9B488DB5C8F52183)]
    public class HairInstance : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
        [RTTI.Member(1, 0xE0, "General")] public Ref<HairResource> Resource;
    }

    [RTTI.Serializable(0x9CC0FAD06E456315)]
    public class HairMaterial
    {
        [RTTI.Member(0, 0x0)] public FRGBColor SpecularColor;
        [RTTI.Member(1, 0x10)] public Vec2 AnisoRoughnessModifier;
        [RTTI.Member(2, 0x20)] public float TangentShift;
        [RTTI.Member(3, 0x24)] public float ConeAngleMultiplier;
        [RTTI.Member(4, 0x28)] public float SpecularIntensity;
        [RTTI.Member(5, 0x2C)] public float SpecularParameter;
    }

    [RTTI.Serializable(0xED253242DEC0B14B)]
    public class HairModelComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA0BE0A4B2F64AD04)]
    public class HairModelComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xCF7A87BD63D37B20)]
    public class HairModelComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<HairResource> HairResource;
    }

    [RTTI.Serializable(0xDB8D6B2203079D12)]
    public class HairPose
    {
        [RTTI.Member(0, 0x0)] public Array<HairBundle> Bundles;
    }

    [RTTI.Serializable(0x13712B5B1D9DD934)]
    public class HairResource : MeshResourceBase
    {
        [RTTI.Member(0, 0x80, "Geometry")] public Array<HairPose> Poses;
        [RTTI.Member(1, 0x90, "Simulation")] public Ref<HairSimMaterialList> MaterialList;
        [RTTI.Member(2, 0xA0, "Geometry")] public BoundingBox3 BoundingBox;
        [RTTI.Member(3, 0xC0, "Geometry")] public Mat44 LocalMatrix;
        [RTTI.Member(4, 0x100, "General")] public bool ReduceNumVertices;
        [RTTI.Member(5, 0x104, "General")] public int NumFollowStrands;
        [RTTI.Member(6, 0x108, "General")] public float MaxFollowRadius;
        [RTTI.Member(7, 0x110, "Collision")] public Array<BoundingSphere> Spheres;
        [RTTI.Member(8, 0x120, "Collision")] public Array<Capsule> Capsules;
        [RTTI.Member(9, 0x130, "Simulation")] public HairSimulationSettings SimulationSettings;
        [RTTI.Member(10, 0x148, "Geometry")] public Array<Ref<DataBufferResource>> InitialHairPositionsDataBufferResources;
        [RTTI.Member(11, 0x158, "Geometry")] public Ref<DataBufferResource> HairStrandTypeDataBufferResource;
        [RTTI.Member(12, 0x160, "Geometry")] public Ref<DataBufferResource> FollowHairRootOffsetDataBufferResource;
        [RTTI.Member(13, 0x168, "Geometry")] public Ref<DataBufferResource> HairRestLengthDataBuffer;
        [RTTI.Member(14, 0x170, "Geometry")] public Ref<DataBufferResource> HairRefVecsInLocalFrameDataBuffer;
        [RTTI.Member(15, 0x178, "Geometry")] public Ref<DataBufferResource> GlobalRotationsDataBuffer;
        [RTTI.Member(16, 0x180, "Geometry")] public Array<HairSkinnedMeshLod> MeshLods;
        [RTTI.Member(17, 0x190, "General")] public Array<float> LODMeshDistances;
        [RTTI.Member(18, 0x1A0, "Lighting")] public DrawFlags DrawFlags;
    }

    [RTTI.Serializable(0x232362224937E3C1)]
    public class HairSimMaterial
    {
        [RTTI.Member(0, 0x0)] public float Damping;
        [RTTI.Member(1, 0x4)] public float LocalStiffness;
        [RTTI.Member(2, 0x8)] public float GlobalStiffness;
        [RTTI.Member(3, 0xC)] public float GlobalMatchRange;
    }

    [RTTI.Serializable(0x9FF285658BAD75F0)]
    public class HairSimMaterialList : CoreObject
    {
        [RTTI.Member(0, 0x20, "Materials")] public Array<HairSimMaterial> Materials;
        [RTTI.Member(1, 0x30, "General")] public String Name;
    }

    [RTTI.Serializable(0x94C99B301B4BC83B)]
    public class HairSimulationSettings
    {
        [RTTI.Member(0, 0x0, "Common")] public bool IntegrationEnabled;
        [RTTI.Member(1, 0x1, "Common")] public bool LocalConstraintsEnabled;
        [RTTI.Member(2, 0x2, "Common")] public bool LengthConstraintsEnabled;
        [RTTI.Member(3, 0x3, "Common")] public bool CollisionDetectionEnabled;
        [RTTI.Member(4, 0x4, "Common")] public bool GuidesEnabled;
        [RTTI.Member(5, 0x8, "Common")] public int NumLocalShapeIterations;
        [RTTI.Member(6, 0xC, "Common")] public int NumLengthConstraintIterations;
        [RTTI.Member(7, 0x10, "Common")] public float Gravity;
        [RTTI.Member(8, 0x14, "Common")] public float WindInfluence;
    }

    [RTTI.Serializable(0x282E4F4C1900089B)]
    public class HairSkinnedMesh
    {
        [RTTI.Member(0, 0x20)] public Ref<RenderEffectResource> SkinnedRenderEffectResource;
        [RTTI.Member(1, 0x1B8)] public Ref<VertexArrayResource> SkinnedVertexArray;
        [RTTI.Member(2, 0x1C0)] public Ref<IndexArrayResource> SkinnedIndexArray;
        [RTTI.Member(3, 0x1C8)] public Ref<DataBufferResource> SkinnedPositionDataBufferResource;
        [RTTI.Member(4, 0x1D0)] public Ref<DataBufferResource> SkinnedBlendIndicesDataBufferResource;
        [RTTI.Member(5, 0x1D8)] public Ref<DataBufferResource> SkinnedBlendWeightsDataBufferResource;
    }

    [RTTI.Serializable(0x4D5B8F8532A613E6)]
    public class HairSkinnedMeshLod
    {
        [RTTI.Member(0, 0x20)] public Array<HairSkinnedMesh> SkinnedMeshes;
    }

    [RTTI.Serializable(0xF49A88A27352C1CB)]
    public class HairStrand
    {
        [RTTI.Member(0, 0x0)] public Array<Vec4> Vertices;
        [RTTI.Member(1, 0x10)] public bool IsGuide;
    }

    [RTTI.Serializable(0x6B149F6870025D5D)]
    public class HandleClanInviteRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public bool Accept;
        [RTTI.Member(1, 0x28)] public String Tag;
    }

    [RTTI.Serializable(0x33D947975C8BBD2E)]
    public class HandleParentAnimationEventComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCFECF4DB69ACE1B4)]
    public class HandleParentAnimationEventComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<ActionPerAnimationEvent> ActionsPerEvent;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EntityAction> OnDetachFromParentAction;
    }

    [RTTI.Serializable(0x768BF9D9D44368F6)]
    public class HarvesterComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x714B150A19EFC2A9)]
    public class HarvesterComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xDC21F07F5B540564)]
    public class HasComponentAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<EntityComponentResource> EntityComponentResource;
        [RTTI.Member(1, 0x48, "Logic")] public bool OnlyCheckType;
    }

    [RTTI.Serializable(0x2717772F7BB6FD50)]
    public class HasFirstPersonCameraAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0x8C198EB5FE2D120C)]
    public class HeadGestureEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x9375927C7420C7B1)]
    public class HeadGestureEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<HeadGestureSettings> HeadGestureSettings;
    }

    [RTTI.Serializable(0xBE234556245A3F05)]
    public class HeadGestureSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public AnimationVariableSettings AnimationVariableSettings;
        [RTTI.Member(1, 0x48, "Logic")] public float GestureDuration;
    }

    [RTTI.Serializable(0x671E7994BB015CED)]
    public class HeadLookAtEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3D0F781A2539E10C)]
    public class HeadLookAtEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<LookSpeedSettings> LookSpeedSettings;
    }

    [RTTI.Serializable(0x5A00D1F7BD8C4699)]
    public class HeadshotAllowedAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0x9AC42A1DD72D537A)]
    public class HealEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public float Amount;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<DestructibilityPart> Part;
        [RTTI.Member(2, 0x40, "Logic")] public bool ActOnCurrentPart;
    }

    [RTTI.Serializable(0x5EC4F26C0315490C)]
    public class HealOverTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD8987BAE8914195E)]
    public class HealthBarComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDAC3CAE3ED639183)]
    public class HealthBarComponentDisplaySettings
    {
        [RTTI.Member(0, 0x0)] public float MaxDisplayDistance;
        [RTTI.Member(1, 0x4)] public bool DisplayOnlyWhenHostile;
        [RTTI.Member(2, 0x5)] public bool HideWhenFullHealth;
        [RTTI.Member(3, 0x6)] public bool DisplayInCombat;
        [RTTI.Member(4, 0x7)] public bool DisplayOnDamage;
        [RTTI.Member(5, 0x8)] public float DisplayOnDamageTimer;
        [RTTI.Member(6, 0xC)] public bool DisplayWhenTargeted;
        [RTTI.Member(7, 0xD)] public bool DisplayByDefault;
    }

    [RTTI.Serializable(0xC28BF50FD263255B)]
    public class HealthBarComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float FadeOutDelay;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<HUDImageResource> HealthBarImageResource;
        [RTTI.Member(2, 0x38, "VisibleLogic")] public HealthBarComponentDisplaySettings DefaultDisplaySettings;
        [RTTI.Member(3, 0x48, "VisibleLogic")] public Array<ConditionalHealthBarComponentDisplaySettings> ConditionalDisplaySettings;
    }

    [RTTI.Serializable(0xAFA59B098E76A33F)]
    public class HealthBucketComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEBBBA1D69032468C)]
    public class HealthBucketComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x5C485F13DECE352C)]
    public class HealthBucketComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<SoundResource> HealSoundResource;
        [RTTI.Member(1, 0x30, "Logic")] public String HealGesture;
        [RTTI.Member(2, 0x38, "Representation")] public Ref<PlayerNotificationResource> HealthAddedNotification;
        [RTTI.Member(3, 0x40, "Levelable")] public Array<int> LevelableCapacities;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<GraphProgramResource> CapacityModifierProgram;
        [RTTI.Member(5, 0x58, "Logic")] public Ref<GraphProgramResource> ConversionRateGraphProgram;
        [RTTI.Member(6, 0x60, "Logic")] public Ref<GraphProgramResource> HealingRateGraphProgram;
    }

    [RTTI.Serializable(0xD6DA3F3CFB37B1BC)]
    public class HealthBucketRestoreState : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public float Content;
    }

    [RTTI.Serializable(0xB1AB431020AAE8AB)]
    public class HealthHUDNotificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x933F4BD2AB48A4BA)]
    public class HealthHUDNotificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PlayerNotificationResource> HealedNotification;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<PlayerNotificationResource> DamagedNotification;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<PlayerNotificationResource> FullHealthNotification;
    }

    [RTTI.Serializable(0xA2433612D14A7264)]
    public class HealthRegenerationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA0BCB6A7B8180FAD)]
    public class HealthRegenerationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Threshold;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<HealthRegenerationParamsBase> DefaultRegeneration;
    }

    [RTTI.Serializable(0x7D12DA6AB8EE6320)]
    public class HealthRegenerationDurationParams : HealthRegenerationParamsBase
    {
        [RTTI.Member(0, 0x30, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0x169E4AC80EE1FED5)]
    public class HealthRegenerationParams : HealthRegenerationParamsBase
    {
        [RTTI.Member(0, 0x30, "Logic")] public float InitialSpeed;
        [RTTI.Member(1, 0x34, "Logic")] public float MaximumSpeed;
        [RTTI.Member(2, 0x38, "Logic")] public float Acceleration;
    }

    [RTTI.Serializable(0x2DFD72403213636A)]
    public class HealthRegenerationParamsBase : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Delay;
    }

    [RTTI.Serializable(0xDA1B572CC362359F)]
    public class HealthSegmentResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float CriticalHealth;
        [RTTI.Member(1, 0x2C, "Logic")] public float NormalHealth;
        [RTTI.Member(2, 0x30, "Logic")] public Ref<SoundResource> LostSound;
        [RTTI.Member(3, 0x38, "Logic")] public Ref<SoundResource> CriticalSound;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<SoundResource> RecoverySound;
        [RTTI.Member(5, 0x48, "Logic")] public Ref<HealthRegenerationParams> RegenerationParams;
        [RTTI.Member(6, 0x50, "Logic")] public bool LimitRegenerationWhenLost;
        [RTTI.Member(7, 0x51, "Logic")] public bool ResetRegenerationWhenGained;
        [RTTI.Member(8, 0x54, "Logic")] public float HealthPackRechargeTime;
        [RTTI.Member(9, 0x58, "Logic")] public CPtr<EntityAction> ActivateAction;
        [RTTI.Member(10, 0x60, "Logic")] public CPtr<EntityAction> DeactivateAction;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<SoundMixStateResource> SoundMixState;
    }

    [RTTI.Serializable(0xB93EF831C401EA28)]
    public class HealthbucketConsumableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6FC26E8595F5D09A)]
    public class HealthbucketConsumableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool GoesStraightToHealthBucket;
        [RTTI.Member(1, 0x2C, "Logic")] public float MaxPlayerHealthPercentage;
    }

    [RTTI.Serializable(0x82F2D9EE84E47714)]
    public class HideActorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8A2115A503663678)]
    public class HideActorEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool HideMesh;
        [RTTI.Member(2, 0x41, "Logic")] public bool DisableCollision;
        [RTTI.Member(3, 0x42, "Logic")] public bool IncludeChildEntities;
        [RTTI.Member(4, 0x43, "Logic")] public bool DisableActorSounds;
    }

    [RTTI.Serializable(0xB64D883BD5F8D9FF)]
    public class HideAllPlayersEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xCD629F973CC7D11B)]
    public class HideAllPlayersEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x3390BEEA6064111)]
    public class HideHUDAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<HUDElementResource> HUDElementResource;
    }

    [RTTI.Serializable(0xB9A204B634EF2FB4)]
    public class HideHUDEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8C3B28FD23B8F6C9)]
    public class HideHUDEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Array<String> ExcludeElements;
        [RTTI.Member(1, 0x48, "Logic")] public float FadeInDuration;
        [RTTI.Member(2, 0x4C, "Logic")] public float FadeOutDuration;
    }

    [RTTI.Serializable(0xAA545F4BF8D6F5BD)]
    public class HideInventoryItemsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x3CFEA9018C4BB1C8)]
    public class HideInventoryItemsEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x66D899E3378CFC53)]
    public class HideMultiMeshPartEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xFBBF17A3E4EAFE2B)]
    public class HideMultiMeshPartEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<MultiMeshActorResource> MultiMeshActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Array<int> PartIndices;
    }

    [RTTI.Serializable(0x675496BD6B943A2B)]
    public class HighPriorityStreamingEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x872C0CA2BF6660AC)]
    public class HighPriorityStreamingEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x4DCA958FBF8EA68A)]
    public class HighestActivityFeedStatTriggerResource : ActivityFeedStatTriggerResource
    {
        [RTTI.Member(0, 0x70)] public int MinimumValue;
    }

    [RTTI.Serializable(0x74F43E9FDB0516C7)]
    public class HintedLightProbeCreationProperties
    {
        [RTTI.Member(0, 0x0)] public bool CreateLightProbeOnFloorBelow;
        [RTTI.Member(1, 0x4)] public float FloorLightProbeZOffset;
        [RTTI.Member(2, 0x8)] public bool CreateLightProbeOnSurface;
        [RTTI.Member(3, 0x9)] public bool CreateLightProbeOnCeilingAbove;
        [RTTI.Member(4, 0xC)] public float CeilingLightProbeZOffset;
    }

    [RTTI.Serializable(0x6ACC32B77494605B)]
    public class HitLocationMapping
    {
        [RTTI.Member(0, 0x0)] public EHitLocation Source;
        [RTTI.Member(1, 0x4)] public EHitLocation Target;
    }

    [RTTI.Serializable(0x47C80688B2018F21)]
    public class HitReactionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA3753006F84EAF6)]
    public class HitReactionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<HitReactionPartResource>> Parts;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<HitReactionSeverityModifier>> DefaultModifiers;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<GraphProgramResource> HitReactionSelectionProgram;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<OverrideGraphProgramResource> HitReactionSelectionOverrideProgram;
        [RTTI.Member(4, 0x58, "Logic")] public Array<Ref<HitReactionSet>> ReactionSets;
        [RTTI.Member(5, 0x68, "Logic")] public HashMap<GGUUID_GGUUID> DestructToReactionPart;
        [RTTI.Member(6, 0x88, "Logic")] public HashMap<String_GGUUID> JointNameToReactoinPart;
    }

    [RTTI.Serializable(0x90855BC54DE730F3)]
    public class HitReactionCooldown
    {
        [RTTI.Member(0, 0x0, "Logic")] public float LockedCooldown;
        [RTTI.Member(1, 0x4, "Logic")] public float EscalationTime;
    }

    [RTTI.Serializable(0xC53D68CC5824DF3D)]
    public class HitReactionCooldownResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<HitReactionCooldown> CooldownSequence;
        [RTTI.Member(1, 0x38, "Logic")] public int SharedCooldownId;
    }

    [RTTI.Serializable(0x105E7C40636CBFB5)]
    public class HitReactionDisplaySettingsResource : Resource
    {
        [RTTI.Member(0, 0x30, "Logic")] public FRGBAColor HUDColor;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<UITexture> UIHUDTexture;
        [RTTI.Member(2, 0x48, "Logic")] public bool OnlyShowDuration;
    }

    [RTTI.Serializable(0xEA5C717E1F57373C)]
    public class HitReactionMeterTemplate
    {
        [RTTI.Member(0, 0x0)] public Ref<HUDImageResource> HitReactionIcon;
        [RTTI.Member(1, 0x8)] public Ref<HUDImageResource> SeverityBuildupMeterBackground;
        [RTTI.Member(2, 0x10)] public Ref<HUDImageResource> SeverityBuildupMeterForeground;
        [RTTI.Member(3, 0x18)] public Ref<HUDShaderResource> ActiveDurationMeter;
    }

    [RTTI.Serializable(0x7756728B0905BD7B)]
    public class HitReactionPartResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<String> JointNames;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<DestructibilityPart>> DestructibilityParts;
        [RTTI.Member(2, 0x48, "Logic")] public int HitLocation;
    }

    [RTTI.Serializable(0x10B04C9F827395CA)]
    public class HitReactionQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(0, 0x80, "Logic")] public Array<GGUUID> HitReactionUUIDs;
    }

    [RTTI.Serializable(0xE59A0166E7245EF7)]
    public class HitReactionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ReactionLimit;
        [RTTI.Member(1, 0x2C, "Logic")] public float ReactionLimitFactor;
        [RTTI.Member(2, 0x30, "Logic")] public float ReactionLimitHealthFactor;
        [RTTI.Member(3, 0x34, "Logic")] public float DecayLimitFactor;
        [RTTI.Member(4, 0x38, "Logic")] public float ReactionThreshold;
        [RTTI.Member(5, 0x3C, "Logic")] public int ReactionPriority;
        [RTTI.Member(6, 0x40, "Logic")] public float ReactionDuration;
        [RTTI.Member(7, 0x44, "Logic")] public bool DisallowAccumulationWhileActive;
        [RTTI.Member(8, 0x48, "Logic")] public Ref<HitReactionCooldownResource> ReactionCooldown;
        [RTTI.Member(9, 0x50, "Logic")] public float CancellationDamageThreshold;
        [RTTI.Member(10, 0x54, "Logic")] public bool RememberReactionOnPriorityCancel;
        [RTTI.Member(11, 0x58, "Logic")] public EReactionPassThroughType ReactionPassThroughType;
        [RTTI.Member(12, 0x60, "Logic")] public Ref<GraphProgramResource> CheckAllowedGraphProgram;
        [RTTI.Member(13, 0x68, "Logic")] public Ref<OverrideGraphProgramResource> CheckAllowedGraphOverrideProgram;
        [RTTI.Member(14, 0x70, "Logic")] public Ref<GraphProgramResource> GraphProgram;
        [RTTI.Member(15, 0x78, "Logic")] public Ref<OverrideGraphProgramResource> OverrideGraphProgram;
        [RTTI.Member(16, 0x80, "Logic")] public Ref<GraphProgramResource> StopGraphProgram;
        [RTTI.Member(17, 0x88, "Logic")] public Ref<OverrideGraphProgramResource> OverrideStopGraphProgram;
        [RTTI.Member(18, 0x90, "Logic")] public Array<Ref<DamageTypeResource>> ThresholdIgnoredDamageTypes;
        [RTTI.Member(19, 0xA0, "Logic")] public bool SpawnDestructibilityDebris;
        [RTTI.Member(20, 0xA8, "Logic")] public Ref<DamageTypeResource> DebrisSpawnDamageTypeResource;
    }

    [RTTI.Serializable(0xEED4768740F54CFA)]
    public class HitReactionSeries : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD678DE4170F453BB)]
    public class HitReactionSeriesResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<DamageTypeResource>> ReactOnDamageTypeResources;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
        [RTTI.Member(2, 0x40, "Logic")] public Array<Ref<HitReactionResource>> HitReactions;
        [RTTI.Member(3, 0x50, "Logic")] public EHitReactionCycleMode HitReactionCycleMode;
        [RTTI.Member(4, 0x58, "Logic")] public Ref<HitReactionSeverityProperty> SeverityAccumulationProperty;
        [RTTI.Member(5, 0x60, "Logic")] public Array<Ref<HitReactionPartResource>> Parts;
        [RTTI.Member(6, 0x70, "Logic")] public bool IgnoreInconsequentialParts;
        [RTTI.Member(7, 0x71, "Logic")] public bool UsePartMultipliers;
        [RTTI.Member(8, 0x74, "Logic")] public EHitReactionAccumulationType AccumulationType;
        [RTTI.Member(9, 0x78, "Logic")] public bool AllowReactionOnDeadPart;
        [RTTI.Member(10, 0x79, "Logic")] public bool AllowReactionPostMortem;
        [RTTI.Member(11, 0x80, "Representation")] public Ref<HitReactionDisplaySettingsResource> DisplaySettings;
    }

    [RTTI.Serializable(0xCB3C1A4EE1726435)]
    public class HitReactionSet : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<HitReactionSeriesResource>> HitReactionSeries;
    }

    [RTTI.Serializable(0x7A73D327B1E7ADD6)]
    public class HitReactionSeverityModifier : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Multiplier;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<HitReactionPartResource>> ApplicableParts;
        [RTTI.Member(2, 0x40, "Logic")] public Array<Ref<DamageTypeResource>> ApplicableDamageTypeResources;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<DamageTypeGroup> ApplicableDamageTypeGroup;
        [RTTI.Member(4, 0x58, "Logic")] public float Duration;
        [RTTI.Member(5, 0x60, "Logic")] public Array<Ref<HitReactionSeriesResource>> RestrictedToSeries;
    }

    [RTTI.Serializable(0xABD69A7A43EEF520)]
    public class HitReactionSeverityProperty : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float DecayRate;
        [RTTI.Member(1, 0x30, "Logic")] public String AccumulationShaderVariableID;
        [RTTI.Member(2, 0x38, "Logic")] public float DecayDelay;
        [RTTI.Member(3, 0x40, "Logic")] public Array<Ref<HitReactionSeverityProperty>> LinkedDecaySeverityProperties;
    }

    [RTTI.Serializable(0x8525AE089BBFB14D)]
    public class HitReactionsGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x79A4DAF85E28198B)]
    public class HitResponse : EntityComponent
    {
    }

    [RTTI.Serializable(0xF83479BB671C0194)]
    public class HitResponseAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public float ImpactSeverity;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0x6D4E8356D88EE47)]
    public class HitResponseBehaviour : Resource
    {
        [RTTI.Member(0, 0x28, "Behaviour")] public HitResponseBehaviourInput Input;
        [RTTI.Member(1, 0x70, "Behaviour")] public Ref<HitResponseBehaviourOutput> Output;
    }

    [RTTI.Serializable(0x47E719BD40DEA04A)]
    public class HitResponseBehaviourInput
    {
        [RTTI.Member(0, 0x0)] public bool IsLethal;
        [RTTI.Member(1, 0x1)] public bool MortallyWounded;
        [RTTI.Member(2, 0x4)] public float MinImpactSeverity;
        [RTTI.Member(3, 0x8)] public Ref<DamageTypeGroup> DamageTypeGroup;
        [RTTI.Member(4, 0x10)] public Array<EHitDirection> HitDirections;
        [RTTI.Member(5, 0x20)] public FArc HitDirectionAngle;
        [RTTI.Member(6, 0x28)] public Array<EHitLocation> HitLocations;
        [RTTI.Member(7, 0x38)] public EMountedState MountedState;
        [RTTI.Member(8, 0x3C)] public FRange HealthRange;
    }

    [RTTI.Serializable(0xC8FC6D2972C71664)]
    public class HitResponseBehaviourOutput : Resource
    {
        [RTTI.Member(0, 0x28)] public EHitResponseType HitResponseType;
        [RTTI.Member(1, 0x2C)] public EAnimationDamageType AnimationReactionType;
        [RTTI.Member(2, 0x30)] public Array<int> AnimationVariants;
        [RTTI.Member(3, 0x40)] public int AnimationHitStrength;
        [RTTI.Member(4, 0x44)] public float Duration;
        [RTTI.Member(5, 0x48)] public float ImpulseFactor;
        [RTTI.Member(6, 0x4C)] public float OverridingImpulse;
        [RTTI.Member(7, 0x50)] public float RotateAimSpeedFactor;
        [RTTI.Member(8, 0x54)] public float RotateAimSpeedRecoverFactor;
        [RTTI.Member(9, 0x58)] public EPointOfAimRotation PointOfAimRotation;
        [RTTI.Member(10, 0x5C)] public float FallOffRate;
        [RTTI.Member(11, 0x60)] public float KeepOutputTime;
        [RTTI.Member(12, 0x64)] public bool AllowMoreSevereResponses;
        [RTTI.Member(13, 0x68)] public Ref<HumanoidDeadStateResource> CustomDeadStateResource;
        [RTTI.Member(14, 0x70)] public Ref<AISignalType> AISignalType;
        [RTTI.Member(15, 0x78)] public Ref<FirstPersonHitEffectsResource> FirstPersonHitEffectsResource;
        [RTTI.Member(16, 0x88)] public Ref<AttachedDamageParticlesComponentResource> AttachedParticlesResource;
        [RTTI.Member(17, 0x90)] public bool Force3rdPersonHitReaction;
        [RTTI.Member(18, 0x91)] public bool ForceStagger;
        [RTTI.Member(19, 0x92)] public bool AlignToImpact;
    }

    [RTTI.Serializable(0x22D21CAC871669F7)]
    public class HitResponseResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<HitResponseBehaviour>> Behaviours;
        [RTTI.Member(1, 0x38, "Logic")] public float FallOffRate;
        [RTTI.Member(2, 0x3C, "Logic")] public float RotateAimSpeedFallOff;
        [RTTI.Member(3, 0x40, "Logic")] public float MaxImpactSeverity;
        [RTTI.Member(4, 0x44, "Logic")] public float MaxImpulseLimit;
        [RTTI.Member(5, 0x48, "Logic")] public float MaxRagdollError;
        [RTTI.Member(6, 0x4C, "Logic")] public float MaxDistanceToCamera;
        [RTTI.Member(7, 0x50, "Logic")] public Array<DestructiblePartToHitLocationMapping> DestructiblePartToHitLocationMapping;
        [RTTI.Member(8, 0x60, "Logic")] public Array<EHitLocation> MappedHitLocations;
        [RTTI.Member(9, 0x70, "Logic")] public Ref<HumanoidDeadStateResource> DeadStateResource;
        [RTTI.Member(10, 0x78, "Logic")] public Ref<HumanoidCinematicDeathSystemResource> CinematicDeathSystemResource;
        [RTTI.Member(11, 0x80, "Logic")] public Ref<DamageTypeGroup> DisableZoomDamageTypeGroup;
        [RTTI.Member(12, 0x88, "Logic")] public float DisableZoomTime;
        [RTTI.Member(13, 0x8C, "Logic")] public float MortallyWoundedChance;
        [RTTI.Member(14, 0x90, "Logic")] public float MortallyWoundedMinTimeBetween;
        [RTTI.Member(15, 0x94, "Logic")] public FRange MortallyWoundedDistanceRange;
        [RTTI.Member(16, 0x9C, "Logic")] public float MovingThreshold;
        [RTTI.Member(17, 0xA0, "Logic")] public bool UseRagdoll;
        [RTTI.Member(18, 0xA8, "Logic")] public String StaggerDisabledAnimationTag;
        [RTTI.Member(19, 0xB0, "Logic")] public String HitResponseDisabledAnimationTag;
        [RTTI.Member(20, 0xB8, "Logic")] public Ref<DamageTypeGroup> IgnoredDamageTypes;
    }

    [RTTI.Serializable(0x7FA7714F345C47)]
    public class HorseCallComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF16E1C0C91D1F1FA)]
    public class HorseCallComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AIAuralStimulusResource> StimulusResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<AISignalType> CallSignal;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<GraphProgramResource> SpawnGraphProgramResource;
        [RTTI.Member(3, 0x40, "HUD")] public Ref<LocalizedTextResource> NoSpawnLocationFoundText;
        [RTTI.Member(4, 0x48, "HUD")] public Ref<LocalizedTextResource> InNoHorseAllowedAreaText;
        [RTTI.Member(5, 0x50, "HUD")] public Ref<LocationMarkerComponentResource> CallableHorseMarker;
        [RTTI.Member(6, 0x58, "HUD")] public float CallableHorseMarkerWaitTime;
        [RTTI.Member(7, 0x60, "Spawn")] public Array<StreamingRef<EntityResource>> Spawn_HorseEntityResources;
        [RTTI.Member(8, 0x70, "Spawn")] public FRange SpawnRange;
        [RTTI.Member(9, 0x78, "Spawn")] public float MinimumTeleportCloserDistance;
        [RTTI.Member(10, 0x80, "Spawn")] public Ref<NavMeshBuilderSettings> NavMeshSettings;
        [RTTI.Member(11, 0x88, "Spawn")] public Array<Ref<NavMeshAreaTag>> HorseNotAllowedNavMeshAreaTags;
        [RTTI.Member(12, 0x98, "Despawn")] public Ref<DispensableCategoryResource> Despawn_HorseEntityResources;
        [RTTI.Member(13, 0xA0, "Logic")] public Ref<PerkLevel> CallPerk;
        [RTTI.Member(14, 0xA8, "Logic")] public Ref<PerkLevel> HackPerk;
        [RTTI.Member(15, 0xB0, "Logic")] public Array<Ref<BooleanFact>> DisallowedFacts;
        [RTTI.Member(16, 0xC0, "Logic")] public Array<Ref<BooleanFact>> DisallowedGlobalFacts;
        [RTTI.Member(17, 0xD0, "Logic")] public Array<Ref<BoolProperty>> DisallowedProperties;
    }

    [RTTI.Serializable(0x9E70A2CDAF755790)]
    public class HorseCallRestoreState : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public GGUUID LastCalledHorseResourceUUID;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public EHorseRestoreState HorseRestoreState;
        [RTTI.Member(2, 0x39, "StateSaving", true)] public GGUUID HorseEntityUUID;
        [RTTI.Member(3, 0x50, "StateSaving", true)] public StreamingRef<EntityResource> HorseResource;
        [RTTI.Member(4, 0x70, "StateSaving", true)] public WorldTransform HorseWorldTransform;
    }

    [RTTI.Serializable(0x1F4AF3462D4A00B0)]
    public class HorseControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE7840B87C7C16086)]
    public class HorseControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Speed")] public float WaterSlowdownDepth;
        [RTTI.Member(1, 0x2C, "Speed")] public float WaterDismountDepth;
        [RTTI.Member(2, 0x30, "NavMesh")] public float ExtraNavMeshBubbleRadius;
        [RTTI.Member(3, 0x34, "Control")] public bool EnableRelativeToCamera;
        [RTTI.Member(4, 0x38, "Control")] public int RiderSpeedUpCount;
        [RTTI.Member(5, 0x3C, "Control")] public int RiderSpeedDownCount;
        [RTTI.Member(6, 0x40, "Control")] public float RiderSpeedInputTimeout;
        [RTTI.Member(7, 0x44, "Control")] public float RiderPostureToCurrentPostureSlowdownTime;
        [RTTI.Member(8, 0x48, "RiderSettings")] public int RiderPickUpMaximumPosture;
        [RTTI.Member(9, 0x50, "RiderSettings")] public BoundingBox3 RiderUseBox;
        [RTTI.Member(10, 0x70, "RiderSettings")] public float RiderUseBoxMoveAheadTime;
        [RTTI.Member(11, 0x78, "RiderSettings")] public Ref<PerkLevel> RiderPickUpAllowedPerk;
        [RTTI.Member(12, 0x80, "Control")] public int MaxAimPosture;
        [RTTI.Member(13, 0x84, "Control")] public float SlowdownStartTime;
        [RTTI.Member(14, 0x88, "Control")] public float SlowdownCycleTime;
        [RTTI.Member(15, 0x8C, "Control")] public float MoveMinimumStickThreshold;
        [RTTI.Member(16, 0x90, "Area")] public Array<Ref<NavMeshAreaTag>> HorseNotAllowedNavMeshAreaTags;
        [RTTI.Member(17, 0xA0, "Area")] public float HorseNotAllowedTriggerTextDistance;
        [RTTI.Member(18, 0xA8, "Area")] public Ref<LocalizedTextResource> HorseNotAllowedInAreaText;
        [RTTI.Member(19, 0xB0, "Jumps")] public Array<Ref<HorseJumpResource>> JumpResources;
        [RTTI.Member(20, 0xC0, "Speed")] public Array<Ref<PostureInfo>> Postures;
        [RTTI.Member(21, 0xD0, "Speed")] public float MaxLookAheadDistanceAllPostures;
        [RTTI.Member(22, 0xD4, "Roads")] public float BlendToRoadSegmentTime;
        [RTTI.Member(23, 0xD8, "Roads")] public float BlendToRoadHeadingTime;
        [RTTI.Member(24, 0xDC, "Roads")] public float OnRoadFactorBlendTime;
        [RTTI.Member(25, 0xE0, "Avoidance")] public Ref<AIDynamicObstacleResource> ObstacleAvoidanceResource;
        [RTTI.Member(26, 0xE8, "Dismount")] public Ref<DismountMode> DismountMode;
        [RTTI.Member(27, 0xF0, "Dismount")] public Ref<DismountMode> MovingDismountMode;
        [RTTI.Member(28, 0xF8, "Dismount")] public int MovingDismountModePosture;
        [RTTI.Member(29, 0x100, "Dismount")] public Ref<DismountMode> InWaterDismountMode;
        [RTTI.Member(30, 0x108, "Dismount")] public float InWaterDismountModeDepth;
        [RTTI.Member(31, 0x110, "Dismount")] public Ref<DismountMode> SpecialDismountMode;
        [RTTI.Member(32, 0x118, "Dismount")] public Ref<DismountMode> EmergencyDismountMode;
        [RTTI.Member(33, 0x120, "Speed")] public BoolPropertyLink InCityPropertyLink;
        [RTTI.Member(34, 0x128, "Speed")] public Ref<BooleanFact> ReduceMountSpeedFact;
        [RTTI.Member(35, 0x130, "Sound")] public Ref<SoundResource> AutomaticSlowdownSound;
        [RTTI.Member(36, 0x138, "Sound")] public String AutomaticSlowdownSoundHelperName;
    }

    [RTTI.Serializable(0xBC2F556E77E451FB)]
    public class HorseJumpResource : Resource
    {
        [RTTI.Member(0, 0x28, "Animation")] public Ref<WarpedAnimation> Animation;
        [RTTI.Member(1, 0x30, "Animation")] public Ref<WarpedAnimation> PreAnimation;
        [RTTI.Member(2, 0x38, "Animation")] public Ref<WarpedAnimation> PostAnimation;
        [RTTI.Member(3, 0x40, "Conditions")] public FRange AllowedWarpDistanceUp;
        [RTTI.Member(4, 0x48, "Conditions")] public FRange AllowedWarpDistanceForward;
        [RTTI.Member(5, 0x50, "Conditions")] public FRange AllowedWarpDistanceRight;
        [RTTI.Member(6, 0x58, "Conditions")] public int MaxPosture;
        [RTTI.Member(7, 0x5C, "Conditions")] public int MinPosture;
        [RTTI.Member(8, 0x60, "Conditions")] public ERequiredJumpMovementState RequiredMovementState;
        [RTTI.Member(9, 0x64, "Conditions")] public float CollisionRadius;
        [RTTI.Member(10, 0x68, "Conditions")] public float CollisionCapsuleLength;
        [RTTI.Member(11, 0x6C, "Conditions")] public bool CheckForObstacleCollision;
        [RTTI.Member(12, 0x70, "Animation")] public Array<Vec3> Trajectory;
        [RTTI.Member(13, 0x80, "Animation")] public Vec3 TrajectoryCollisionMidPoint;
        [RTTI.Member(14, 0x90, "Animation")] public float TrajectoryCollisionMidPointTimeFactor;
        [RTTI.Member(15, 0xA0, "Animation")] public Vec3 GroundContactAtTakeOff;
        [RTTI.Member(16, 0xB0, "Animation")] public Vec3 GroundContactAtLanding;
        [RTTI.Member(17, 0xC0, "Animation")] public float EarlyJumpStartDistance;
    }

    [RTTI.Serializable(0x5710E2F0EBB12F72)]
    public class HorseSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(0, 0x48)] public EPlayerNumber RiderPlayerNumber;
    }

    [RTTI.Serializable(0x506AF8E7A21A00CF)]
    public class HorseSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xFA7207BF03CC8086)]
    public class HtnAtom
    {
    }

    [RTTI.Serializable(0x65F723DB4C1CFC97)]
    public class HtnFactAssignment : RTTIObject
    {
    }

    [RTTI.Serializable(0x7C89783D1D589BB6)]
    public class HtnFactDatabase
    {
    }

    [RTTI.Serializable(0x3AF70DD4EE2E947A)]
    public class HtnSymbol
    {
    }

    [RTTI.Serializable(0xD2EDD0E2D605BDFE)]
    public class HulledMesh : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<PhysicsCollisionResource> Collider;
        [RTTI.Member(1, 0x30)] public Ref<WorldNode> AtmosphereBox;
        [RTTI.Member(2, 0x38)] public Ref<MeshResourceBase> MeshResource;
        [RTTI.Member(3, 0x40)] public CapsuleHull MeshHull;
        [RTTI.Member(4, 0x50)] public InstanceList Instances;
        [RTTI.Member(5, 0x80)] public float SkyDomeAttenuation_RadiusXY;
        [RTTI.Member(6, 0x84)] public float SkyDomeAttenuation_Height;
        [RTTI.Member(7, 0x90)] public Vec3 SkyDomeAttenuation_AverageVisiblePos;
    }

    [RTTI.Serializable(0xD31CA8A6175A040B)]
    public class Humanoid : ControlledEntity
    {
    }

    [RTTI.Serializable(0x77804E28F76AF37B)]
    public class HumanoidAIFallState : HumanoidFallState
    {
    }

    [RTTI.Serializable(0x4A36D4284837A533)]
    public class HumanoidAIFallStateResource : HumanoidFallStateResource
    {
    }

    [RTTI.Serializable(0xCBD2BF7AF5514F19)]
    public class HumanoidAIWalkState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xFD692BB2239F2DFA)]
    public class HumanoidAIWalkStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Posture")] public Array<HumanoidPostureToStanceCarryMapEntry> PostureToStanceCarryMap;
        [RTTI.Member(1, 0x80, "Movement")] public float SprintThreshold;
    }

    [RTTI.Serializable(0x692136F4B57B5690)]
    public class HumanoidAirControlComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAF02AC68BC63DD71)]
    public class HumanoidAirControlComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public float DetectionDurationAfterApex;
        [RTTI.Member(1, 0x2C, "General")] public float TrajectorySampleTimeStep;
        [RTTI.Member(2, 0x30, "General")] public String JumpTakeOffStateName;
        [RTTI.Member(3, 0x38, "General")] public HumanoidAirControlCurvedTrajectorySettings ParkourableCurvedTrajectorySettings;
        [RTTI.Member(4, 0x54, "General")] public HumanoidAirControlCurvedTrajectorySettings ZiplineCurvedTrajectorySettings;
        [RTTI.Member(5, 0x70, "General")] public HumanoidAirControlLinearTrajectorySettings LinearTrajectorySettings;
        [RTTI.Member(6, 0x7C, "TargetScoreCalculation")] public float DistanceToInitialTrajectoryWeight;
        [RTTI.Member(7, 0x80, "TargetScoreCalculation")] public float DistanceToInitialTakeOffWeight;
        [RTTI.Member(8, 0x84, "TargetScoreCalculation")] public float AngleBetweenTakeOffAndTargetWeight;
        [RTTI.Member(9, 0x88, "TargetScoreCalculation")] public float ScaleRatioWeight;
        [RTTI.Member(10, 0x8C, "Logic")] public bool AutoSnapToTarget;
    }

    [RTTI.Serializable(0x3ED33FC4E888E1C1)]
    public class HumanoidAirControlCurvedTrajectorySettings
    {
        [RTTI.Member(0, 0x0)] public FRange MaxChangeInVelocity;
        [RTTI.Member(1, 0x8)] public FRange MaxChangeInVelocitySprinting;
        [RTTI.Member(2, 0x10)] public FRange MaxDistanceBetweenOrignalTrajectoryAndTarget;
        [RTTI.Member(3, 0x18)] public float MaxChangeInTurnSpeed;
    }

    [RTTI.Serializable(0xF63554768CE24A31)]
    public class HumanoidAirControlLinearTrajectorySettings
    {
        [RTTI.Member(0, 0x0)] public float MinMoveSpeed;
        [RTTI.Member(1, 0x4)] public float MaxTargetDistance;
        [RTTI.Member(2, 0x8)] public float MaxTargetTurnAngle;
    }

    [RTTI.Serializable(0xD081C4DA2ED4B34D)]
    public class HumanoidBodyVariant : HumanoidBodyVariantInterface
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<ModelPartResource> ModelPartResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<AbilityPoseDeformerResource> AbilityPoseDeformerResource;
        [RTTI.Member(2, 0x48, "Logic")] public Array<Ref<EntityComponentResource>> EntityComponentResources;
        [RTTI.Member(3, 0x58, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
        [RTTI.Member(4, 0x68, "Logic")] public Array<Ref<RenderEffectShaderOverridesResource>> ShaderOverrides;
        [RTTI.Member(5, 0x80, "Logic")] public Pose BindPose;
        [RTTI.Member(6, 0xE0, "Logic")] public float DisablePoseDeformerOverride;
        [RTTI.Member(7, 0xE8, "Logic")] public Array<Ref<FactValue>> Facts;
        [RTTI.Member(8, 0xF8, "Logic")] public AnimationTagSet AnimationSetTags;
    }

    [RTTI.Serializable(0x9F7C6A1C78AF4DB7)]
    public class HumanoidBodyVariantGroup : HumanoidBodyVariantInterface
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<HumanoidBodyVariant>> Variants;
    }

    [RTTI.Serializable(0xD86809BA42AB7A06)]
    public class HumanoidBodyVariantInterface : Resource
    {
    }

    [RTTI.Serializable(0x975BA269FD390AD5)]
    public class HumanoidCinematicDeathSystem : EntityComponent
    {
    }

    [RTTI.Serializable(0x36DB0D3E3DE90EEA)]
    public class HumanoidCinematicDeathSystemResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool UsableByPlayer;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<HumanoidDirectionalStaggerStateResource> DirectionalStaggerStateResource;
    }

    [RTTI.Serializable(0x4503B20E53604F1E)]
    public class HumanoidController : Controller
    {
    }

    [RTTI.Serializable(0x77D2E597D6F17A80)]
    public class HumanoidDeadState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xF35690769A072D9B)]
    public class HumanoidDeadStateResource : HumanoidSubStateResource
    {
    }

    [RTTI.Serializable(0xA06A14BFAB1E342E)]
    public class HumanoidDirectionalStaggerState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x9D70B89F06FE4CA)]
    public class HumanoidDirectionalStaggerStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public float TimeOut;
    }

    [RTTI.Serializable(0xF1BB5C8BF520840B)]
    public class HumanoidDismountMode : DismountMode
    {
        [RTTI.Member(0, 0x68, "Logic")] public EStance Stance;
        [RTTI.Member(1, 0x6C, "Logic")] public EHumanoidDismountMovement HumanoidDismountMovement;
        [RTTI.Member(2, 0x70, "Logic")] public EStance AnimationEndStance;
        [RTTI.Member(3, 0x74, "Logic")] public bool HasCollision;
    }

    [RTTI.Serializable(0x1444484E1633F720)]
    public class HumanoidFallState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xB10ACCC0C628651B)]
    public class HumanoidFallStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public float JumpPitchBlendDuration;
        [RTTI.Member(1, 0x74, "Logic")] public float IncomingMomentumDeceleration;
        [RTTI.Member(2, 0x78, "Logic")] public FRange SprintForwardAngularRange;
        [RTTI.Member(3, 0x80, "Logic")] public FRange WalkForwardAngularRange;
        [RTTI.Member(4, 0x88, "Animation", true)] public String AnimTagDiveRollName;
        [RTTI.Member(5, 0x90, "Private")] public AnimationTagID AnimTagDiveRoll;
    }

    [RTTI.Serializable(0x90B8621E82505CE3)]
    public class HumanoidInventory : Inventory
    {
    }

    [RTTI.Serializable(0x3668B1B142384D9E)]
    public class HumanoidInventoryResource : InventoryResource
    {
        [RTTI.Member(0, 0x40, "Dropping")] public Ref<EquipSlotType> DefaultSlotTypeToDrop;
        [RTTI.Member(1, 0x48, "Dropping")] public EOnDeathDropLogic OnDeathDropLogic;
        [RTTI.Member(2, 0x50, "Dropping")] public Array<Ref<TagProperty>> InvalidDropTags;
        [RTTI.Member(3, 0x60, "Dropping")] public Ref<ConditionResource> CanDropCondition;
    }

    [RTTI.Serializable(0x3F2070AE47C00D54)]
    public class HumanoidJoystickWalkState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x4A79D45D4E1AFF7F)]
    public class HumanoidJoystickWalkStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public Ref<CurveResource> WalkTurnSpeedByVelocityCurve;
        [RTTI.Member(1, 0x78, "Logic")] public Ref<CurveResource> CrouchTurnSpeedByVelocityCurve;
        [RTTI.Member(2, 0x80, "Logic")] public Ref<CurveResource> CombatTurnSpeedByVelocityCurve;
        [RTTI.Member(3, 0x88, "Logic")] public Ref<CurveResource> CombatJumpingTurnSpeedByVelocityCurve;
        [RTTI.Member(4, 0x90, "Logic")] public Ref<CurveResource> MovementDirectionBlendStrengthCurve;
        [RTTI.Member(5, 0x98, "Logic")] public Ref<CurveResource> TorsoAngleBlendStrengthCurve;
        [RTTI.Member(6, 0xA0, "Logic")] public Ref<CurveResource> BankTurnVelocityCurve;
        [RTTI.Member(7, 0xA8, "Logic")] public Ref<CurveResource> BankSpeedFactorCurve;
        [RTTI.Member(8, 0xB0, "Logic")] public float BankValueGain;
        [RTTI.Member(9, 0xB4, "Logic")] public FRange SprintForwardAngularRange;
        [RTTI.Member(10, 0xBC, "Logic")] public FRange WalkForwardAngularRange;
        [RTTI.Member(11, 0xC4, "Aim")] public FRange AimRotationComfortRange;
        [RTTI.Member(12, 0xD0, "Animation", true)] public String AnimTagIdleName;
        [RTTI.Member(13, 0xD8, "Private")] public AnimationTagID AnimTagIdle;
        [RTTI.Member(14, 0xE0, "Animation", true)] public String AnimTagStartName;
        [RTTI.Member(15, 0xE8, "Private")] public AnimationTagID AnimTagStart;
        [RTTI.Member(16, 0xF0, "Animation", true)] public String AnimTagStartDirectionName;
        [RTTI.Member(17, 0xF8, "Private")] public AnimationTagID AnimTagStartDirection;
        [RTTI.Member(18, 0x100, "Animation", true)] public String AnimTagCycleName;
        [RTTI.Member(19, 0x108, "Private")] public AnimationTagID AnimTagCycle;
        [RTTI.Member(20, 0x110, "Animation", true)] public String AnimTagSprintName;
        [RTTI.Member(21, 0x118, "Private")] public AnimationTagID AnimTagSprint;
        [RTTI.Member(22, 0x120, "Animation", true)] public String AnimTagStopName;
        [RTTI.Member(23, 0x128, "Private")] public AnimationTagID AnimTagStop;
        [RTTI.Member(24, 0x130, "Animation", true)] public String AnimTagCrouchName;
        [RTTI.Member(25, 0x138, "Private")] public AnimationTagID AnimTagCrouch;
        [RTTI.Member(26, 0x140, "Animation", true)] public String AnimTagCombatName;
        [RTTI.Member(27, 0x148, "Private")] public AnimationTagID AnimTagCombat;
        [RTTI.Member(28, 0x150, "Aim", true)] public String Aim_AnimTagIsAimed;
        [RTTI.Member(29, 0x158, "Private")] public AnimationTagID AnimTagIsAimed;
        [RTTI.Member(30, 0x160, "Animation", true)] public String AnimTagTurningName;
        [RTTI.Member(31, 0x168, "Private")] public AnimationTagID AnimTagTurning;
        [RTTI.Member(32, 0x170, "Animation", true)] public String AnimTagTurn180Name;
        [RTTI.Member(33, 0x178, "Private")] public AnimationTagID AnimTagTurn180;
        [RTTI.Member(34, 0x180, "Animation", true)] public String AnimTagJumpName;
        [RTTI.Member(35, 0x188, "Private")] public AnimationTagID AnimTagJump;
        [RTTI.Member(36, 0x190, "Animation", true)] public String AnimTagDiveRollName;
        [RTTI.Member(37, 0x198, "Private")] public AnimationTagID AnimTagDiveRoll;
        [RTTI.Member(38, 0x1A0, "Animation", true)] public String AnimTagSlidingName;
        [RTTI.Member(39, 0x1A8, "Private")] public AnimationTagID AnimTagSliding;
        [RTTI.Member(40, 0x1B0, "Animation", true)] public String AnimTagTacticalToCombatName;
        [RTTI.Member(41, 0x1B8, "Private")] public AnimationTagID AnimTagTacticalToCombat;
        [RTTI.Member(42, 0x1C0, "Animation", true)] public String DefaultStandIdleAnimationStateName;
        [RTTI.Member(43, 0x1C8, "Private")] public AnimationStateID DefaultStandIdleAnimationState;
        [RTTI.Member(44, 0x1D0, "Animation", true)] public String DefaultCrouchIdleAnimationStateName;
        [RTTI.Member(45, 0x1D8, "Private")] public AnimationStateID DefaultCrouchIdleAnimationState;
        [RTTI.Member(46, 0x1DC, "Logic")] public float StartSmoothTime;
        [RTTI.Member(47, 0x1E0, "Logic")] public float StopSmoothTime;
        [RTTI.Member(48, 0x1E4, "Logic")] public float StartToMoveSmoothTime;
        [RTTI.Member(49, 0x1E8, "Logic")] public float TurnspeedWhileStarting;
        [RTTI.Member(50, 0x1EC, "Logic")] public float MaxCrouchWaterHeight;
        [RTTI.Member(51, 0x1F0, "Unlocks")] public Ref<PerkLevel> ExtendedDiveRollPerk;
        [RTTI.Member(52, 0x1F8, "Unlocks")] public String ExtendedDiveRollAnimName;
        [RTTI.Member(53, 0x200, "Logic")] public Array<int> JumpAnimationVariantWeights;
        [RTTI.Member(54, 0x210, "BumpIntoEnvironment")] public float BumpMaxAngleBetweenNormalAndInput;
        [RTTI.Member(55, 0x214, "BumpIntoEnvironment")] public float BumpMinTimeToStopMove;
        [RTTI.Member(56, 0x218, "BumpIntoEnvironment")] public float BumpMinTimeDiffBetweenActualAndDesiredVelocity;
        [RTTI.Member(57, 0x21C, "BumpIntoEnvironment")] public float BumpVerticalEpsilon;
        [RTTI.Member(58, 0x220, "BumpIntoEnvironment")] public float BumpForwardDistance;
        [RTTI.Member(59, 0x224, "BumpIntoEnvironment")] public float SlideMinDiffBetweenActualAndDesiredVelocity;
        [RTTI.Member(60, 0x228, "BumpIntoEnvironment")] public float SlideMinTimeDiffBetweenActualAndDesiredVelocity;
        [RTTI.Member(61, 0x22C, "BumpIntoEnvironment")] public float SlideMinHeight;
    }

    [RTTI.Serializable(0xD4D6527D7B03E913)]
    public class HumanoidKnockDownState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xA0E75E20ECE8AE36)]
    public class HumanoidKnockDownStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public bool AttachGunBoneToHandBone;
        [RTTI.Member(1, 0x78, "Logic")] public Ref<DamageTypeResource> FallingDamageTypeResource;
        [RTTI.Member(2, 0x80, "Animation", true)] public String AnimTagFallingOverName;
        [RTTI.Member(3, 0x88, "Private")] public AnimationTagID AnimTagFallingOver;
        [RTTI.Member(4, 0x90, "Animation", true)] public String AnimTagGettingUpName;
        [RTTI.Member(5, 0x98, "Private")] public AnimationTagID AnimTagGettingUp;
        [RTTI.Member(6, 0xA0, "Animation", true)] public String AnimTagWoundedName;
        [RTTI.Member(7, 0xA8, "Private")] public AnimationTagID AnimTagWounded;
    }

    [RTTI.Serializable(0xC27B8A3428CB957F)]
    public class HumanoidMountMode : MountMode
    {
        [RTTI.Member(0, 0x68, "Logic")] public EStance Stance;
        [RTTI.Member(1, 0x6C, "Logic")] public bool HasCollisionDuringMounting;
        [RTTI.Member(2, 0x6D, "Logic")] public bool HasCollisionDuringMounted;
    }

    [RTTI.Serializable(0xA2E18A1DF71E8EB8)]
    public class HumanoidMountState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x4CCC655B8CE037B4)]
    public class HumanoidMountStateRep : HumanoidSubStateRep
    {
    }

    [RTTI.Serializable(0x2ACAFE047286A508)]
    public class HumanoidMountStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public TagPropertyLink DisallowWeaponUseProperty;
    }

    [RTTI.Serializable(0x4FC51B7D00E8C9C9)]
    public class HumanoidMover : Mover
    {
    }

    [RTTI.Serializable(0x99C900E696796015)]
    public class HumanoidMoverResource : MoverResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public float MaxFallSpeed;
        [RTTI.Member(1, 0x34, "Logic")] public bool Vip;
        [RTTI.Member(2, 0x38, "Logic")] public float LeavingOnGroundStateDelay;
        [RTTI.Member(3, 0x3C, "Logic")] public bool CompensateForwardVelocityOnUphillSlope;
    }

    [RTTI.Serializable(0xFE16277C0E5531C9)]
    public class HumanoidParkourDismountMode : DismountMode
    {
    }

    [RTTI.Serializable(0xD326401AEDE1FF77)]
    public class HumanoidParkourState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xB2162FB1B367D482)]
    public class HumanoidParkourStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public String PerchedWalkStateName;
        [RTTI.Member(1, 0x78, "Animation", true)] public String TurningTag;
        [RTTI.Member(2, 0x80, "Animation")] public AnimationTagID TurningTagID;
        [RTTI.Member(3, 0x88, "Animation", true)] public String ParkouringTag;
        [RTTI.Member(4, 0x90, "Animation")] public AnimationTagID ParkouringTagID;
        [RTTI.Member(5, 0x94, "Logic")] public float AttachmentCoolDownDuration;
    }

    [RTTI.Serializable(0x51DBA86B0A566375)]
    public class HumanoidParkourTransition : Resource
    {
        [RTTI.Member(0, 0x28, "Conditions")] public HumanoidParkourTransitionCondition Pre;
        [RTTI.Member(1, 0x32, "Conditions")] public HumanoidParkourTransitionCondition Post;
        [RTTI.Member(2, 0x3C, "Conditions")] public EParkourTransitionType TransitionType;
        [RTTI.Member(3, 0x40, "Conditions")] public Ref<EnumFactValue> TransitionTypeFactValue;
        [RTTI.Member(4, 0x48, "Conditions")] public String TransitionAnnotationTag;
        [RTTI.Member(5, 0x50, "Animation")] public Ref<WarpedAnimation> WarpedAnimation;
        [RTTI.Member(6, 0x58, "Animation")] public Ref<WarpedAnimation> WarpedAnimationAlternative;
        [RTTI.Member(7, 0x60, "Animation")] public Ref<WarpedAnimation> UnchainedPostAnimation;
        [RTTI.Member(8, 0x68, "Animation")] public Ref<WarpedAnimation> ChainedJumpPostAnimation;
        [RTTI.Member(9, 0x70, "Conditions")] public FRange AllowedWarpDistanceUp;
        [RTTI.Member(10, 0x78, "Conditions")] public FRange AllowedWarpDistanceForward;
        [RTTI.Member(11, 0x80, "Conditions")] public FRange AllowedWarpDistanceRight;
        [RTTI.Member(12, 0x88, "Conditions")] public FRange AllowedWarpAngleDifference;
        [RTTI.Member(13, 0x90, "Conditions")] public bool OrientEntityTowardsDestination;
        [RTTI.Member(14, 0x91, "Conditions")] public bool RequiresJumpButtonPress;
        [RTTI.Member(15, 0x94, "Debugging")] public RGBAColor DebugColor;
        [RTTI.Member(16, 0x98, "Debugging")] public bool ShowInJumpTransitionsWindow;
        [RTTI.Member(17, 0x99, "Collision")] public EAnimationTransitionCollisionPath CollisionPathType;
        [RTTI.Member(18, 0x9C, "Collision")] public int CollisionPathAnimTrackUserData;
        [RTTI.Member(19, 0xA0, "Collision")] public int CollisionPathAnimEventUserData;
        [RTTI.Member(20, 0xA8, "Camera")] public Ref<CameraModeResource> CameraMode;
        [RTTI.Member(21, 0xB0, "Scoring")] public float AdditionalSearchScore;
        [RTTI.Member(22, 0xB4, "Animation")] public bool IgnorePostDisplacementEventMotionForMetrics;
    }

    [RTTI.Serializable(0xC891D09185DD5439)]
    public class HumanoidParkourTransitionCondition
    {
        [RTTI.Member(0, 0x0)] public bool OnFoot_Point;
        [RTTI.Member(1, 0x1)] public bool OnFoot_Bar_Perpendicular;
        [RTTI.Member(2, 0x2)] public bool OnFoot_Bar_Parallel;
        [RTTI.Member(3, 0x3)] public bool OnFoot_Ground_Standing;
        [RTTI.Member(4, 0x4)] public bool OnFoot_Ground_Crouched;
        [RTTI.Member(5, 0x5)] public bool Hanging_With_FootSupport;
        [RTTI.Member(6, 0x6)] public bool Hanging_Without_FootSupport;
        [RTTI.Member(7, 0x7)] public bool OnLadder_With_FootSupport;
        [RTTI.Member(8, 0x8)] public bool OnLadder_Without_FootSupport;
        [RTTI.Member(9, 0x9)] public bool IsAiming;
    }

    [RTTI.Serializable(0xCE9D904679E092EB)]
    public class HumanoidParkourTransitionMetrics
    {
        [RTTI.Member(0, 0x0)] public Mat44 TotalTransform;
        [RTTI.Member(1, 0x40)] public float TotalHeadingDelta;
        [RTTI.Member(2, 0x48)] public Array<Vec3> CollisionCapsulePath;
        [RTTI.Member(3, 0x60)] public Vec3 CollisionCapsulePathEndOffsetFromRootBone;
    }

    [RTTI.Serializable(0x6C110924E9910EAF)]
    public class HumanoidPostureToStanceCarryMapEntry
    {
        [RTTI.Member(0, 0x0)] public String PostureID;
        [RTTI.Member(1, 0x10)] public EStance Stance;
        [RTTI.Member(2, 0x14)] public ECarryModes CarryMode;
    }

    [RTTI.Serializable(0x4A9CF49EAFE8AE81)]
    public class HumanoidRep : ControlledEntityRep
    {
    }

    [RTTI.Serializable(0x1A51083F9FDA40A5)]
    public class HumanoidResource : ControlledEntityResource
    {
        [RTTI.Member(0, 0x208, "Logic", true)] public String RootBone;
        [RTTI.Member(1, 0x210, "Logic")] public String HeadBone;
        [RTTI.Member(2, 0x218, "Logic")] public String ChestBone;
        [RTTI.Member(3, 0x220, "Logic")] public String NeckBone;
        [RTTI.Member(4, 0x228, "Logic")] public String NeckRootBone;
        [RTTI.Member(5, 0x230, "Logic")] public String PelvisBone;
        [RTTI.Member(6, 0x238, "Logic")] public String WalkLeftBone;
        [RTTI.Member(7, 0x240, "Logic")] public String WalkRightBone;
        [RTTI.Member(8, 0x248, "Logic")] public String SlideFootBone;
        [RTTI.Member(9, 0x250, "Logic")] public String LeftHandIKAttachBone;
        [RTTI.Member(10, 0x258, "Logic")] public String RightHandIKAttachBone;
        [RTTI.Member(11, 0x260, "Logic")] public String LeftHandIKChannelName;
        [RTTI.Member(12, 0x268, "Logic")] public String RightHandIKChannelName;
        [RTTI.Member(13, 0x270, "Logic")] public String GunBone;
        [RTTI.Member(14, 0x278, "Logic")] public String HandBoneName;
        [RTTI.Member(15, 0x280, "Logic")] public String LeftLowerLegBoneName;
        [RTTI.Member(16, 0x288, "Logic")] public String RightLowerLegBoneName;
        [RTTI.Member(17, 0x290, "Logic")] public int RootBoneIndex;
        [RTTI.Member(18, 0x294, "Logic")] public int HeadBoneIndex;
        [RTTI.Member(19, 0x298, "Logic")] public int NeckBoneIndex;
        [RTTI.Member(20, 0x29C, "Logic")] public int NeckRootBoneIndex;
        [RTTI.Member(21, 0x2A0, "Logic")] public int HandBoneIndex;
        [RTTI.Member(22, 0x2A8, "Logic")] public Ref<DestructibilityPart> HeadPart;
        [RTTI.Member(23, 0x2B0, "Logic")] public Ref<DestructibilityPart> HelmetPart;
        [RTTI.Member(24, 0x2B8, "Logic")] public bool IsHeadshotAllowed;
        [RTTI.Member(25, 0x2BC, "Logic")] public float HeadshotDamageModifier;
        [RTTI.Member(26, 0x2C0, "Logic")] public float HeadshotMaxSpread;
        [RTTI.Member(27, 0x2C8, "Logic")] public Array<Ref<ModelPartResource>> BrokenHeadModelPartResources;
        [RTTI.Member(28, 0x2D8, "Logic")] public Array<Ref<DestructibilityPart>> LegParts;
        [RTTI.Member(29, 0x2E8, "Logic")] public float MaxStamina;
        [RTTI.Member(30, 0x2EC, "Logic")] public float InitialStamina;
        [RTTI.Member(31, 0x2F0, "Logic")] public float MinimalStaminaRequiredForSprint;
        [RTTI.Member(32, 0x2F4, "Logic")] public float StaminaIncrease;
        [RTTI.Member(33, 0x2F8, "Logic")] public float StaminaDecreaseSprint;
        [RTTI.Member(34, 0x2FC, "Logic")] public float SprintMaxWaterDepth;
        [RTTI.Member(35, 0x300, "Logic")] public float LandPredictionTime;
        [RTTI.Member(36, 0x304, "Logic")] public float JumpStaminaCost;
        [RTTI.Member(37, 0x308, "Logic")] public float JumpStaminaNeeded;
        [RTTI.Member(38, 0x30C, "Logic")] public float JumpOnForce;
        [RTTI.Member(39, 0x310, "Logic")] public float JumpOnLaunchTime;
        [RTTI.Member(40, 0x314, "Logic")] public float JumpMinForwardSpeed;
        [RTTI.Member(41, 0x318, "Logic")] public float JumpMaxWaterDepth;
        [RTTI.Member(42, 0x31C, "Logic")] public bool CanFireWhileJumping;
        [RTTI.Member(43, 0x320, "Logic")] public float DiveRollStaminaCost;
        [RTTI.Member(44, 0x328, "Logic")] public Ref<StaminaUsageType> SprintStaminaUsageType;
        [RTTI.Member(45, 0x330, "Logic")] public Ref<StaminaUsageType> JumpStaminaUsageType;
        [RTTI.Member(46, 0x338, "Logic")] public Ref<StaminaUsageType> DiveRollStaminaUsageType;
        [RTTI.Member(47, 0x340, "Logic")] public float LandDuration;
        [RTTI.Member(48, 0x344, "Logic")] public float MaxWalkSlope;
        [RTTI.Member(49, 0x348, "Logic")] public float MaxStepHeight;
        [RTTI.Member(50, 0x34C, "Logic")] public float StopSprintTime;
        [RTTI.Member(51, 0x350, "Logic")] public float AimNoiseFactor;
        [RTTI.Member(52, 0x354, "Logic")] public float SprintAimSpeedFactor;
        [RTTI.Member(53, 0x358, "Logic", true)] public float MaxAngleBetweenGunAndAim;
        [RTTI.Member(54, 0x35C, "Logic")] public float MaxAngleBetweenGunAndAimCos;
        [RTTI.Member(55, 0x360, "Logic")] public float MovementAcceleration;
        [RTTI.Member(56, 0x364, "Logic")] public float MovementDeceleration;
        [RTTI.Member(57, 0x368, "Logic")] public float HeadingAcceleration;
        [RTTI.Member(58, 0x36C, "Logic")] public float SlideToMountPositionSpeed;
        [RTTI.Member(59, 0x370, "Logic")] public Vec3 StandingEyePosition;
        [RTTI.Member(60, 0x380, "Logic")] public Vec3 CrouchEyePosition;
        [RTTI.Member(61, 0x390, "Logic")] public Vec3 StandAimOffset;
        [RTTI.Member(62, 0x3A0, "Logic")] public Vec3 CrouchAimOffset;
        [RTTI.Member(63, 0x3B0, "Logic")] public Ref<PhysicsCharacterMoverResource> PhysicsCharacterMoverResource;
        [RTTI.Member(64, 0x3B8, "Logic")] public float StanceSwitchDurationDown;
        [RTTI.Member(65, 0x3BC, "Logic")] public float StanceSwitchDurationUp;
        [RTTI.Member(66, 0x3C0, "Logic")] public float TurnSpeed;
        [RTTI.Member(67, 0x3C4, "Logic")] public float StandingSprintSpeed;
        [RTTI.Member(68, 0x3C8, "Logic")] public float StandingForwardSpeed;
        [RTTI.Member(69, 0x3CC, "Logic")] public float StandingBackwardSpeed;
        [RTTI.Member(70, 0x3D0, "Logic")] public float StandingStrafeSpeed;
        [RTTI.Member(71, 0x3D4, "Logic")] public float CrouchForwardSpeed;
        [RTTI.Member(72, 0x3D8, "Logic")] public float CrouchBackwardSpeed;
        [RTTI.Member(73, 0x3DC, "Logic")] public float CrouchStrafeSpeed;
        [RTTI.Member(74, 0x3E0, "Logic")] public float CombatStandingForwardSpeed;
        [RTTI.Member(75, 0x3E4, "Logic")] public float CombatStandingBackwardSpeed;
        [RTTI.Member(76, 0x3E8, "Logic")] public float CombatStandingStrafeSpeed;
        [RTTI.Member(77, 0x3EC, "Logic")] public float CombatCrouchForwardSpeed;
        [RTTI.Member(78, 0x3F0, "Logic")] public float CombatCrouchBackwardSpeed;
        [RTTI.Member(79, 0x3F4, "Logic")] public float CombatCrouchStrafeSpeed;
        [RTTI.Member(80, 0x3F8, "Logic")] public float MaxForwardSpeed;
        [RTTI.Member(81, 0x3FC, "Logic")] public float MaxBackwardSpeed;
        [RTTI.Member(82, 0x400, "Logic")] public float MaxStrafeSpeed;
        [RTTI.Member(83, 0x404, "Logic")] public float MaxSprintSpeed;
        [RTTI.Member(84, 0x408, "Logic")] public float MinStandingSpeedPlayer;
        [RTTI.Member(85, 0x40C, "Logic")] public float MinCrouchSpeedPlayer;
        [RTTI.Member(86, 0x410, "Logic")] public bool CanWalkAndAim;
        [RTTI.Member(87, 0x411, "Logic")] public bool HasInfiniteAmmo;
        [RTTI.Member(88, 0x420, "Logic")] public BoundingBox3 CrouchUseBox;
        [RTTI.Member(89, 0x440, "Logic")] public float PickupUseAngle;
        [RTTI.Member(90, 0x448, "Logic")] public Array<Ref<HumanoidSubStateResource>> SubStates;
        [RTTI.Member(91, 0x458, "MovementInterpolation")] public float HorizontalCatchUpGain;
        [RTTI.Member(92, 0x45C, "MovementInterpolation")] public float MaxCatchUpHorizontalDisplacement;
        [RTTI.Member(93, 0x460, "MovementInterpolation")] public float VerticalGain;
        [RTTI.Member(94, 0x468, "Representation")] public Ref<SoundResource> StowSound;
        [RTTI.Member(95, 0x470, "Representation")] public Ref<SoundResource> GearMovementSound;
        [RTTI.Member(96, 0x478, "Representation")] public Ref<SoundResource> InventoryUseChargeSound;
        [RTTI.Member(97, 0x480, "Representation")] public float FootstepTriggerHeight;
        [RTTI.Member(98, 0x484, "Representation")] public MaterialType FootstepDownMaterialType;
        [RTTI.Member(99, 0x486, "Representation")] public MaterialType FootstepUpMaterialType;
        [RTTI.Member(100, 0x488, "Representation")] public float SlowFootstepVelocityThreshold;
        [RTTI.Member(101, 0x48C, "Representation")] public MaterialType SlowFootstepDownMaterialType;
        [RTTI.Member(102, 0x48E, "Representation")] public MaterialType SlowFootstepUpMaterialType;
        [RTTI.Member(103, 0x490, "Representation")] public MaterialType SprintFootstepDownMaterialType;
        [RTTI.Member(104, 0x492, "Representation")] public MaterialType SprintFootstepUpMaterialType;
        [RTTI.Member(105, 0x494, "Representation")] public MaterialType CrouchFootstepDownMaterialType;
        [RTTI.Member(106, 0x496, "Representation")] public MaterialType CrouchFootstepUpMaterialType;
        [RTTI.Member(107, 0x498, "Representation")] public MaterialType FootstepDragMaterialType;
        [RTTI.Member(108, 0x49A, "Representation")] public MaterialType JumpMaterialType;
        [RTTI.Member(109, 0x49C, "Representation")] public MaterialType LandMaterialType;
        [RTTI.Member(110, 0x49E, "Representation")] public MaterialType FootSlideImpactMaterialType;
        [RTTI.Member(111, 0x4A0, "Representation")] public Ref<SoundResource> SlowBreathingSound;
        [RTTI.Member(112, 0x4A8, "Representation")] public Ref<SoundResource> MediumBreathingSound;
        [RTTI.Member(113, 0x4B0, "Representation")] public Ref<SoundResource> FastBreathingSound;
        [RTTI.Member(114, 0x4B8, "Representation")] public Ref<SoundResource> SpawnOnPartyMemberSound;
        [RTTI.Member(115, 0x4C0, "Logic")] public Ref<CurveResource> ImpactDamagePerMeterPerSecondCurve;
        [RTTI.Member(116, 0x4C8, "Logic")] public Ref<CurveResource> ImpactDamagePerFallingHeightCurve;
        [RTTI.Member(117, 0x4D0, "Logic")] public float MinDamageLinearVelocity;
        [RTTI.Member(118, 0x4D4, "Logic")] public float MinDamageAngularVelocity;
        [RTTI.Member(119, 0x4D8, "Logic")] public float MinDamageMass;
        [RTTI.Member(120, 0x4DC, "Logic")] public float ImpactImpulseHumanoidScale;
        [RTTI.Member(121, 0x4E0, "Logic")] public float DamageFactor;
        [RTTI.Member(122, 0x4E4, "Logic")] public float MinTimeForWalkingDamage;
        [RTTI.Member(123, 0x4E8, "Logic")] public float WalkingDamageFactor;
        [RTTI.Member(124, 0x4EC, "Logic")] public float WalkingDamageEndDelay;
        [RTTI.Member(125, 0x4F0, "Player")] public float DefaultAimDistance;
        [RTTI.Member(126, 0x4F8, "Representation")] public Ref<AISignalType> DeathSignalType;
        [RTTI.Member(127, 0x500, "Representation")] public Ref<AISignalType> HeadshotSignalType;
        [RTTI.Member(128, 0x508, "Representation")] public Ref<AISignalType> FallSignalType;
        [RTTI.Member(129, 0x510, "Representation")] public Ref<AISignalType> FallStopSignalType;
        [RTTI.Member(130, 0x518, "AI")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(131, 0x520, "AI")] public Ref<GraphProgramResource> VisualStimulusSelectorProgramResource;
        [RTTI.Member(132, 0x528, "AI")] public Ref<GraphProgramResource> FootstepStimulusSelectorProgramResource;
        [RTTI.Member(133, 0x530, "AI")] public Ref<AIAuralStimulusResource> FootStepSoundStimulus;
        [RTTI.Member(134, 0x538, "AI")] public float FootStepSoundStimulusCrouchModifier;
        [RTTI.Member(135, 0x53C, "AI")] public float QuietFootStepSoundStimulusModifier;
        [RTTI.Member(136, 0x540, "AI")] public float FootstepMinSpeed;
        [RTTI.Member(137, 0x544, "AI")] public float FootstepMaxSpeed;
        [RTTI.Member(138, 0x548, "AI")] public Ref<AIAuralStimulusResource> HitScreamSoundStimulus;
        [RTTI.Member(139, 0x550, "AI")] public Ref<AIAuralStimulusResource> DeathScreamSoundStimulus;
        [RTTI.Member(140, 0x558, "AI")] public Ref<AIAuralStimulusResource> SilentKillSoundStimulus;
        [RTTI.Member(141, 0x560, "AI")] public Ref<AIAuralStimulusResource> SprintFootStepSoundStimulus;
        [RTTI.Member(142, 0x568, "AI")] public Ref<AIAuralStimulusResource> DropDownSoundStimulus;
        [RTTI.Member(143, 0x570, "AI")] public float DropDownSoundStimulusTriggerAtSpeed;
        [RTTI.Member(144, 0x578, "Representation")] public Array<Ref<HumanoidBodyVariant>> BodyVariants;
        [RTTI.Member(145, 0x588, "Representation")] public int AnimationCharacterType;
        [RTTI.Member(146, 0x58C, "AI")] public float Deceleration;
        [RTTI.Member(147, 0x590, "AI")] public float EarlyStopDistance;
        [RTTI.Member(148, 0x594, "AI")] public EStance LowestAllowedStance;
        [RTTI.Member(149, 0x598, "Player")] public bool PlayStowAnimations;
        [RTTI.Member(150, 0x5A0, "HitResponse")] public Ref<HitResponseResource> HitResponseResource;
        [RTTI.Member(151, 0x5A8, "HitResponse")] public Array<DestructiblePartToHitLocationMapping> DestructiblePartToHitLocationMapping;
        [RTTI.Member(152, 0x5B8, "HitResponse")] public String AnimTagDeadName;
        [RTTI.Member(153, 0x5C0, "Representation")] public Ref<BloodPuddleSettings> BloodPuddleSettings;
        [RTTI.Member(154, 0x5C8, "Logic")] public Ref<DamageTypeResource> SlideDamageTypeResource;
        [RTTI.Member(155, 0x5D0, "Logic")] public float SlideDamage;
        [RTTI.Member(156, 0x5D4, "Logic")] public float SlideImpulse;
        [RTTI.Member(157, 0x5D8, "Logic")] public float SlideImpulseHumanoidFactor;
        [RTTI.Member(158, 0x5DC, "Logic")] public float SlideImpactSeverity;
        [RTTI.Member(159, 0x5E0, "Logic")] public float MaxSlideIncline;
        [RTTI.Member(160, 0x5E4, "Representation")] public float FPCameraOffsetWhenCrouching;
        [RTTI.Member(161, 0x5E8, "Representation")] public float FPCameraOffsetRelaxation;
        [RTTI.Member(162, 0x5EC, "Representation")] public float FPCameraOffsetGunLowered;
        [RTTI.Member(163, 0x5F0, "Logic")] public float GravityOverride;
        [RTTI.Member(164, 0x5F4, "Logic")] public float DragLowGravity;
        [RTTI.Member(165, 0x5F8, "Logic")] public float MovementModifierLowGravity;
        [RTTI.Member(166, 0x600, "Logic")] public Ref<DamageTypeResource> ImpactDamageTypeResource;
        [RTTI.Member(167, 0x608, "Logic")] public float MinSpeedForImpact;
        [RTTI.Member(168, 0x60C, "Network")] public bool StopReplicationWhenDead;
        [RTTI.Member(169, 0x610, "Jumping")] public float PlayerMaxAirTurnAngleInDegrees;
        [RTTI.Member(170, 0x618, "Jumping")] public Ref<CurveResource> PlayerMaxTurnSpeedWhileJumpingCurve;
        [RTTI.Member(171, 0x620, "Jumping")] public Ref<CurveResource> PlayerMaxTurnSpeedWhileJumpingHeadFirstCurve;
        [RTTI.Member(172, 0x628, "Jumping")] public bool PlayerUseAnimationDrivenJumping;
        [RTTI.Member(173, 0x629, "Jumping")] public bool PlayerKeepForwardMomentum;
        [RTTI.Member(174, 0x62C, "Jumping")] public float PlayerAirFriction;
        [RTTI.Member(175, 0x630, "Jumping")] public float PlayerAirBrakeAngleInDegrees;
        [RTTI.Member(176, 0x634, "Jumping")] public float PlayerAirBrakeFactor;
        [RTTI.Member(177, 0x638, "Jumping")] public float PlayerMinTakeOffForwardSpeed;
        [RTTI.Member(178, 0x63C, "Logic")] public float WaterDepthForWalkingToSwimmingTransition;
        [RTTI.Member(179, 0x640, "Logic")] public float WaterDepthForSwimmingToWalkingTransition;
    }

    [RTTI.Serializable(0x8884980DA1C6C65E)]
    public class HumanoidRopePullingState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x11C85BAA50BD0337)]
    public class HumanoidRopePullingStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public float MaxFallTime;
    }

    [RTTI.Serializable(0xD4CA6E57B394F0AB)]
    public class HumanoidRunningSlideState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xB82D865C49A37DA1)]
    public class HumanoidRunningSlideStateRep : HumanoidSubStateRep
    {
    }

    [RTTI.Serializable(0x140929C275689223)]
    public class HumanoidRunningSlideStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public Ref<CurveResource> TurnSpeedByVelocityCurve;
        [RTTI.Member(1, 0x78, "Logic")] public Ref<CurveResource> CombatTurnSpeedByVelocityCurve;
        [RTTI.Member(2, 0x80, "Logic")] public float MinSlideSpeed;
        [RTTI.Member(3, 0x84, "Logic")] public float InitialSlideSpeed;
        [RTTI.Member(4, 0x88, "Logic")] public Ref<CurveResource> DecelerationCurve;
        [RTTI.Member(5, 0x90, "Logic")] public float AbortSpeedThreshold;
        [RTTI.Member(6, 0x94, "Logic")] public bool UseAnimationDrivenDeceleration;
        [RTTI.Member(7, 0x98, "Logic", true)] public String AnimTagSlidingName;
        [RTTI.Member(8, 0xA0, "Private")] public AnimationTagID AnimTagSliding;
        [RTTI.Member(9, 0xA8, "Logic")] public Ref<CurveResource> SlideBrakeCurve;
        [RTTI.Member(10, 0xB0, "Logic")] public float SlideBrakeAngle;
        [RTTI.Member(11, 0xB8, "Logic")] public Ref<CurveResource> BankTurnVelocityCurve;
        [RTTI.Member(12, 0xC0, "Logic")] public Ref<CurveResource> BankSpeedFactorCurve;
        [RTTI.Member(13, 0xC8, "Logic")] public float BankValueGain;
        [RTTI.Member(14, 0xCC, "Logic")] public FRange ValidAimRange;
    }

    [RTTI.Serializable(0xC4DF6D25B82B6BF7)]
    public class HumanoidSlideState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0xC7FAA0E9863AD322)]
    public class HumanoidSlideStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public Ref<CurveResource> WalkTurnSpeedByVelocityCurve;
        [RTTI.Member(1, 0x78, "Logic")] public Ref<CurveResource> CrouchTurnSpeedByVelocityCurve;
        [RTTI.Member(2, 0x80, "Logic")] public Ref<CurveResource> AccelerationBySlopeAngelCurve;
        [RTTI.Member(3, 0x88, "Logic")] public float ActivateSlopeAngle;
        [RTTI.Member(4, 0x8C, "Logic")] public float DeactivateSlopeAngle;
        [RTTI.Member(5, 0x90, "Logic")] public float MinSpeed;
        [RTTI.Member(6, 0x94, "Logic")] public float MaxSpeed;
        [RTTI.Member(7, 0x98, "Logic")] public float ActivateDuration;
        [RTTI.Member(8, 0x9C, "Logic")] public float DeactivateDuration;
        [RTTI.Member(9, 0xA0, "Logic")] public float SpeedBlendFactor;
        [RTTI.Member(10, 0xA4, "Logic")] public float CollisionOffsetForward;
        [RTTI.Member(11, 0xA8, "Logic")] public float CollisionRadius;
        [RTTI.Member(12, 0xB0, "Logic")] public Array<EPhysicsCollisionLayerGame> DisallowedCollisionLayers;
        [RTTI.Member(13, 0xC0, "Actions")] public bool AllowCloseCombat;
        [RTTI.Member(14, 0xC1, "Actions")] public bool AllowDiveRoll;
    }

    [RTTI.Serializable(0x4D3264AF1710D92C)]
    public class HumanoidSpawnInfo : ControlledEntitySpawnInfo
    {
    }

    [RTTI.Serializable(0xC12FBD0227B56559)]
    public class HumanoidSpreadSettings : SpreadSettings
    {
        [RTTI.Member(0, 0x50, "Spread")] public Ref<CurveResource> MoveSpeedSpreadCurve;
        [RTTI.Member(1, 0x58, "Spread")] public Ref<CurveResource> ZoomedMoveSpeedSpreadCurve;
        [RTTI.Member(2, 0x60, "Spread")] public Ref<CurveResource> LookSpeedSpreadCurve;
        [RTTI.Member(3, 0x68, "Spread")] public Ref<CurveResource> ZoomOverTimeSpreadCurve;
        [RTTI.Member(4, 0x70, "Spread")] public float StanceCrouchSpread;
        [RTTI.Member(5, 0x74, "Spread")] public float StanceStandSpread;
        [RTTI.Member(6, 0x78, "Spread")] public float StanceCrouchZoomedSpread;
        [RTTI.Member(7, 0x7C, "Spread")] public float StanceStandZoomedSpread;
    }

    [RTTI.Serializable(0x4AAD3921FA6C3FBF)]
    public class HumanoidStaggerState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x7B91DB9D9BB085BF)]
    public class HumanoidStaggerStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public Array<String> AnimationStateNames;
    }

    [RTTI.Serializable(0x319B3A8C6D714F01)]
    public class HumanoidSubState : CoreObject
    {
    }

    [RTTI.Serializable(0x8FAF6036E7B9255F)]
    public class HumanoidSubStatePoseOverriddenByInteractiveEntity : HumanoidSubStateUsingInteractiveEntity
    {
    }

    [RTTI.Serializable(0x40FD1C1578DC4C19)]
    public class HumanoidSubStatePoseOverriddenByInteractiveEntityResource : HumanoidSubStateUsingInteractiveEntityResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public Ref<Skeleton> UserSkeleton;
        [RTTI.Member(1, 0x78, "Logic")] public String SubSkeletonName;
        [RTTI.Member(2, 0x80, "Logic")] public bool TransferControlToInteractiveEntity;
        [RTTI.Member(3, 0x81, "Logic")] public bool UseDefaultStance;
    }

    [RTTI.Serializable(0x1394B2A3A7D4DA32)]
    public class HumanoidSubStateRep : RTTIObject
    {
    }

    [RTTI.Serializable(0xC873F3927FF191D8)]
    public class HumanoidSubStateResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool SupportsStandIdle;
        [RTTI.Member(1, 0x29, "Logic")] public bool SupportsStandTactical;
        [RTTI.Member(2, 0x2A, "Logic")] public bool SupportsStandCombat;
        [RTTI.Member(3, 0x2B, "Logic")] public bool SupportsCrouchIdle;
        [RTTI.Member(4, 0x2C, "Logic")] public bool SupportsCrouchTactical;
        [RTTI.Member(5, 0x2D, "Logic")] public bool SupportsCrouchCombat;
        [RTTI.Member(6, 0x2E, "Logic")] public bool SupportsLCrouchIdle;
        [RTTI.Member(7, 0x2F, "Logic")] public bool SupportsLCrouchTactical;
        [RTTI.Member(8, 0x30, "Logic")] public bool SupportsLCrouchCombat;
        [RTTI.Member(9, 0x38, "Logic")] public CPtr<EntityAction> ActivateAction;
        [RTTI.Member(10, 0x40, "Logic")] public CPtr<EntityAction> DeactivateAction;
        [RTTI.Member(11, 0x48, "Logic")] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(12, 0x50, "Logic")] public EFacialExpression FacialExpression;
        [RTTI.Member(13, 0x54, "Logic")] public bool OverrideHumanoidFacialExpression;
        [RTTI.Member(14, 0x58, "Logic")] public Ref<SoundMixStateResource> SoundMixStateResource;
        [RTTI.Member(15, 0x60, "Logic")] public Array<HumanoidSubStateSupportedStanceCarryMapEntry> SupportedStanceCarryMap;
    }

    [RTTI.Serializable(0x2DC75985E7C1DC6B)]
    public class HumanoidSubStateSupportedStanceCarryMapEntry
    {
        [RTTI.Member(0, 0x0)] public EStance Stance;
        [RTTI.Member(1, 0x4)] public ECarryModes CarryMode;
    }

    [RTTI.Serializable(0xCB06DC5AE572E5A0)]
    public class HumanoidSubStateUsingInteractiveEntity : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x393ED75DA01C9B2F)]
    public class HumanoidSubStateUsingInteractiveEntityRep : HumanoidSubStateRep
    {
    }

    [RTTI.Serializable(0x4B22E97113DE1160)]
    public class HumanoidSubStateUsingInteractiveEntityResource : HumanoidSubStateResource
    {
    }

    [RTTI.Serializable(0xDBAC589EBFE886A0)]
    public class HumanoidSwimState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x2D46705E44FAC189)]
    public class HumanoidSwimStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public float SwimSpeed;
        [RTTI.Member(1, 0x74, "Logic")] public float SprintSwimSpeed;
        [RTTI.Member(2, 0x78, "Logic")] public float UnderWaterSwimDepth;
        [RTTI.Member(3, 0x80, "Unlocks")] public Ref<PerkLevel> SprintSwimPerk;
        [RTTI.Member(4, 0x88, "Unlocks")] public Array<SwimStatePerkMapping> PerkMapping;
        [RTTI.Member(5, 0x98, "Logic")] public Ref<CurveResource> SpeedToMaxVelocityChangeCurve;
        [RTTI.Member(6, 0xA0, "Logic")] public float MaxTurnAcceleration;
        [RTTI.Member(7, 0xA8, "Logic")] public Ref<CurveResource> SwimForwardSpeedToHeadingSpeedModifierCurve;
        [RTTI.Member(8, 0xB0, "Logic")] public Ref<CurveResource> SwimSprintForwardSpeedToHeadingSpeedModifierCurve;
        [RTTI.Member(9, 0xB8, "Logic")] public float UnderWaterMinStamina;
        [RTTI.Member(10, 0xBC, "Logic")] public float UnderwaterBreathingTime;
        [RTTI.Member(11, 0xC0, "Logic")] public float UnderWaterDamagePerSecond;
        [RTTI.Member(12, 0xC4, "Logic")] public float CurrentsBlendDuration;
        [RTTI.Member(13, 0xD0, "Logic")] public Vec3 SwimmingCollisionCapsuleOffset;
        [RTTI.Member(14, 0xE0, "Logic")] public Vec3 IdleCollisionCapsuleOffset;
        [RTTI.Member(15, 0xF0, "Logic")] public Ref<StaminaUsageType> UnderWaterStaminaUsageType;
        [RTTI.Member(16, 0xF8, "Animation")] public Ref<CurveResource> BankTurnVelocityCurve;
        [RTTI.Member(17, 0x100, "Logic")] public Ref<DamageTypeResource> DrowningDamageType;
        [RTTI.Member(18, 0x108, "Animation")] public String TransitionToSwimAnimationTagName;
        [RTTI.Member(19, 0x110, "Animation")] public String SwimmingAnimationTagName;
        [RTTI.Member(20, 0x118, "WaterFall")] public float WaterFallSlopeAngle;
        [RTTI.Member(21, 0x11C, "WaterFall")] public float WaterFallBlendInDuration;
        [RTTI.Member(22, 0x120, "WaterFall")] public float WaterFallBlendOutDuration;
        [RTTI.Member(23, 0x128, "Logic")] public Ref<BooleanFact> DisableMaxWaterCurrentClampFact;
    }

    [RTTI.Serializable(0xE6E234E0F71195E9)]
    public class HumanoidVaultState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x6252F4617FC94931)]
    public class HumanoidVaultStateResource : HumanoidSubStateResource
    {
    }

    [RTTI.Serializable(0xF6A0DBB66F3D7915)]
    public class HumanoidVaultTransition : Resource
    {
        [RTTI.Member(0, 0x28, "Animation")] public Ref<LocalizedTextResource> HUDText;
        [RTTI.Member(1, 0x30, "Conditions")] public Ref<HumanoidVaultTransitionCondition> Condition;
        [RTTI.Member(2, 0x38, "Animation", true)] public String VaultContactJointName;
        [RTTI.Member(3, 0x40, "Animation", true)] public int VaultDisplacementEventUserData;
        [RTTI.Member(4, 0x44, "Animation")] public float OverrideTurnSpeed;
        [RTTI.Member(5, 0x48, "Animation")] public bool AllowWield;
        [RTTI.Member(6, 0x50, "Animation")] public Ref<WarpedAnimation> StartAnimation;
        [RTTI.Member(7, 0x58, "Animation")] public Ref<WarpedAnimation> MidAnimation;
        [RTTI.Member(8, 0x60, "Animation")] public Ref<WarpedAnimation> EndAnimation;
        [RTTI.Member(9, 0x70, "Animation")] public Vec3 VaultContactPosition;
        [RTTI.Member(10, 0x80, "Animation")] public Vec3 VaultMidDisplacement;
        [RTTI.Member(11, 0x90, "Animation")] public Mat44 VaultMidTurn;
        [RTTI.Member(12, 0xD0, "Animation")] public Vec3 VaultObjectDepth;
        [RTTI.Member(13, 0xE0, "Animation")] public Vec3 VaultEndDisplacement;
        [RTTI.Member(14, 0xF0, "Animation")] public Vec3 VaultLandDisplacement;
        [RTTI.Member(15, 0x100, "Animation")] public Vec3 VaultContactWarpOffset;
        [RTTI.Member(16, 0x110, "Collision")] public Array<Vec3> CollisionCapsulePath;
        [RTTI.Member(17, 0x120, "Collision")] public EAnimationTransitionCollisionPath CollisionPathType;
        [RTTI.Member(18, 0x124, "Collision")] public int CollisionPathAnimTrackUserData;
        [RTTI.Member(19, 0x128, "Collision")] public int CollisionPathAnimEventUserData;
        [RTTI.Member(20, 0x130, "Conditions")] public Ref<BooleanFact> DisallowFact;
        [RTTI.Member(21, 0x138, "Camera")] public Ref<CameraModeResource> CameraMode;
    }

    [RTTI.Serializable(0x66605C5CEEC84FD4)]
    public class HumanoidVaultTransitionCondition : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EVaultObstacleType VaultObstacleType;
        [RTTI.Member(1, 0x2C, "Logic")] public EVaultType VaultType;
        [RTTI.Member(2, 0x30, "Logic")] public EDeviceFunction VaultButton;
        [RTTI.Member(3, 0x34, "Logic")] public bool NeedsLineOfSight;
        [RTTI.Member(4, 0x35, "Logic")] public bool RequiresSprinting;
        [RTTI.Member(5, 0x36, "Logic")] public bool RequiresSwimming;
        [RTTI.Member(6, 0x38, "Logic")] public EStance RequiredStance;
        [RTTI.Member(7, 0x3C, "Logic")] public ECarryModes RequiredCarryMode;
        [RTTI.Member(8, 0x40, "Logic")] public bool EndInFall;
        [RTTI.Member(9, 0x41, "Logic")] public bool EndInSwimming;
        [RTTI.Member(10, 0x42, "Logic")] public bool EndInParkour;
        [RTTI.Member(11, 0x44, "Logic")] public EVaultEndInParkourType EndParkourType;
        [RTTI.Member(12, 0x48, "Logic")] public EVaultEndInParkourAnnotationDirection EndParkourAnnotationDirection;
        [RTTI.Member(13, 0x4C, "Logic")] public bool Cancelable;
        [RTTI.Member(14, 0x50, "Logic")] public float MaxAngle;
        [RTTI.Member(15, 0x54, "Logic")] public FRange MovementStickInput;
        [RTTI.Member(16, 0x5C, "Logic")] public FRange SpeedRange;
        [RTTI.Member(17, 0x64, "Logic")] public FRange MaxHeightDifference;
        [RTTI.Member(18, 0x6C, "Logic")] public FRange MaxDisplacementDifferenceForward;
        [RTTI.Member(19, 0x74, "Logic")] public FRange MaxDisplacementDifferenceRight;
        [RTTI.Member(20, 0x7C, "Logic")] public FRange MaxDisplacementDifferenceUp;
        [RTTI.Member(21, 0x84, "Logic")] public FRange MaxLandingHeightDifference;
        [RTTI.Member(22, 0x8C, "Logic")] public float MinimumWaterDepth;
    }

    [RTTI.Serializable(0x68EF776F46EB92C5)]
    public class HumanoidZiplineState : HumanoidSubState
    {
    }

    [RTTI.Serializable(0x690FF6C502B3DF52)]
    public class HumanoidZiplineStateResource : HumanoidSubStateResource
    {
        [RTTI.Member(0, 0x70, "Logic")] public bool AllowControlDuringZipline;
        [RTTI.Member(1, 0x78, "Logic")] public String ZiplineAnimationVarName;
        [RTTI.Member(2, 0x80, "Logic")] public float MaxZiplineSpeed;
        [RTTI.Member(3, 0x84, "Logic")] public float MaxZiplineTurnSpeed;
        [RTTI.Member(4, 0x88, "Logic")] public float ZiplineAcceleration;
        [RTTI.Member(5, 0x8C, "Logic")] public float ZiplineBrakeFriction;
        [RTTI.Member(6, 0x90, "Logic")] public float ZiplineBrakeAngle;
        [RTTI.Member(7, 0x94, "Logic")] public float ZiplineAccelerateInputAngle;
        [RTTI.Member(8, 0x98, "Logic")] public float ZiplineAccelerateInputStickFactor;
        [RTTI.Member(9, 0x9C, "Logic")] public float MinZiplineBrakeSpeed;
        [RTTI.Member(10, 0xA0, "Logic")] public float AttachmentCoolDownDuration;
        [RTTI.Member(11, 0xA4, "Logic")] public float ZiplineDeactivateBoostFactor;
        [RTTI.Member(12, 0xA8, "Logic")] public float ZiplineDeactivateDistance;
        [RTTI.Member(13, 0xAC, "Logic")] public float ZiplineDeactivateSpeedDifference;
        [RTTI.Member(14, 0xB0, "Animation", true)] public String ZiplineMountTagName;
        [RTTI.Member(15, 0xB8, "Private")] public AnimationTagID ZiplineMountTag;
        [RTTI.Member(16, 0xC0, "Animation", true)] public String ZiplineDismountTagName;
        [RTTI.Member(17, 0xC8, "Private")] public AnimationTagID ZiplineDismountTag;
        [RTTI.Member(18, 0xD0, "Logic")] public Ref<CurveResource> ZiplineFrictionPerAngleCurve;
        [RTTI.Member(19, 0xD8, "Item")] public Ref<InventoryEntityResource> ZiplineIventoryItem;
    }

    [RTTI.Serializable(0x64939CF29A9E038D)]
    public class HuntingGroundTrialLog : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public UUIDRef<QuestResource> StartQuest;
        [RTTI.Member(1, 0x38, "General")] public UUIDRef<QuestResource> TrialQuest;
        [RTTI.Member(2, 0x48, "General")] public Array<UUIDRef<ActivityMedal>> Trials;
    }

    [RTTI.Serializable(0x6B866DFDFDA8F700)]
    public class HwBindingHandle
    {
        [RTTI.Member(0, 0x0)] public uint64 Handle;
    }

    [RTTI.Serializable(0xD2FE8B1F70AFC6AA)]
    public class HwSamplerData
    {
        [RTTI.Member(0, 0x0)] public uint32 PackedData;
    }

    [RTTI.Serializable(0xE75611FCC703A298)]
    public class IBLUsageFlags
    {
        [RTTI.Member(0, 0x0)] public uint32 Flags;
    }

    [RTTI.Serializable(0x33D63CF0BA1A833B)]
    public class IObjectActivationSet
    {
    }

    [RTTI.Serializable(0x85C95C43A2B391D2)]
    public class IParticleSysVar
    {
        [RTTI.Member(0, 0x0)] public int Value;
        [RTTI.Member(1, 0x4)] public int Variation;
    }

    [RTTI.Serializable(0xAD5617F78F37CA04)]
    public class IRange
    {
        [RTTI.Member(0, 0x0)] public int Min;
        [RTTI.Member(1, 0x4)] public int Max;
    }

    [RTTI.Serializable(0x403C6E2CF1C15C81)]
    public class IRect
    {
        [RTTI.Member(0, 0x0)] public int Left;
        [RTTI.Member(1, 0x4)] public int Top;
        [RTTI.Member(2, 0x8)] public int Right;
        [RTTI.Member(3, 0xC)] public int Bottom;
    }

    [RTTI.Serializable(0xD640C6671A9F54E9)]
    public class ISize
    {
        [RTTI.Member(0, 0x0)] public int Width;
        [RTTI.Member(1, 0x4)] public int Height;
    }

    [RTTI.Serializable(0x7A44EC1A57770EFF)]
    public class IVec3
    {
        [RTTI.Member(0, 0x0)] public int X;
        [RTTI.Member(1, 0x4)] public int Y;
        [RTTI.Member(2, 0x8)] public int Z;
    }

    [RTTI.Serializable(0xB7C0DB4F7320249B)]
    public class IgnoreCollisionByDamageTypeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB257F9ECCCE83378)]
    public class IgnoreCollisionByDamageTypeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypes;
    }

    [RTTI.Serializable(0xF205F8C411CB8D68)]
    public class IgnoreCollisionWithEntitiesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA15BF43D1BDBD5ED)]
    public class IgnoreCollisionWithEntitiesComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<CPtr<EntityResource>> EntityResourcesToIgnore;
    }

    [RTTI.Serializable(0x16AF386833567ADE)]
    public class IgnoreEntityEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x1F782EF649EC068E)]
    public class IgnoreEntityEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
    }

    [RTTI.Serializable(0x5DC1E5622460EBFD)]
    public class ImageMap : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<ImageMapEntry> Entries;
    }

    [RTTI.Serializable(0x51C07CE310588882)]
    public class ImageMapEntry
    {
        [RTTI.Member(0, 0x0, "General")] public String ID;
        [RTTI.Member(1, 0x8, "General")] public Ref<UITexture> Texture;
    }

    [RTTI.Serializable(0x46A52A09E738AF11)]
    public class ImpactEffectAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Settings")] public MaterialType MaterialType;
        [RTTI.Member(1, 0x38, "Settings")] public String HelperNode;
        [RTTI.Member(2, 0x40, "Settings")] public bool AlignToEntity;
        [RTTI.Member(3, 0x50, "Settings")] public Vec3 StartOffset;
        [RTTI.Member(4, 0x60, "Settings")] public Vec3 EndOffset;
        [RTTI.Member(5, 0x70, "Settings")] public EPhysicsCollisionLayerGame CollisionLayer;
    }

    [RTTI.Serializable(0xF690E249646B38B6)]
    public class ImpactEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC2A3F0BAAA2DF908)]
    public class ImpactEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x11567B1FE84E3F04)]
    public class ImpactEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Settings")] public MaterialType MaterialType;
        [RTTI.Member(1, 0x2C, "Settings")] public EContactType ContactType;
        [RTTI.Member(2, 0x30, "Settings")] public String HelperNode;
        [RTTI.Member(3, 0x40, "Settings")] public Vec3 StartOffset;
        [RTTI.Member(4, 0x50, "Settings")] public Vec3 EndOffset;
        [RTTI.Member(5, 0x60, "Settings")] public bool AlignToWorld;
        [RTTI.Member(6, 0x64, "Settings")] public float ContactForce;
        [RTTI.Member(7, 0x68, "Settings")] public Ref<CurveResource> RaycastFrequencyOverDistance;
    }

    [RTTI.Serializable(0xEF5F94FED31A7D6C)]
    public class ImpactEffectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x166B3FE4EF64894D)]
    public class ImpactEffectEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(1, 0x40, "Logic")] public MaterialType MaterialType;
        [RTTI.Member(2, 0x44, "Logic")] public float EffectMass;
        [RTTI.Member(3, 0x48, "Logic")] public float RayCastOffset;
        [RTTI.Member(4, 0x4C, "Logic")] public float RayCastLength;
        [RTTI.Member(5, 0x50, "Logic")] public EContactType ContactType;
    }

    [RTTI.Serializable(0xE9308EB5C421A963)]
    public class ImpactEffectLight
    {
        [RTTI.Member(0, 0x0)] public Ref<LightResource> LightResource;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> IntensityCurve;
        [RTTI.Member(2, 0x10)] public bool IsLooping;
        [RTTI.Member(3, 0x14)] public float Offset;
    }

    [RTTI.Serializable(0x5B68C058D61D7155)]
    public class ImpactEffectOverrideBox : WorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public String Name;
        [RTTI.Member(1, 0x78, "Logic")] public int Priority;
        [RTTI.Member(2, 0x7C, "Logic")] public EImpactEffectOverrideMode Mode;
        [RTTI.Member(3, 0x80, "Logic")] public Ref<ImpactEffectResourceCollection> Collection;
    }

    [RTTI.Serializable(0x664257B614CF9AD)]
    public class ImpactEffectParticles
    {
        [RTTI.Member(0, 0x0)] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(1, 0x8)] public float MaxLifeTime;
        [RTTI.Member(2, 0xC)] public float AlignToReflectionVectorFactor;
        [RTTI.Member(3, 0x10)] public Ref<CurveResource> CurveEmitterRatioResource;
    }

    [RTTI.Serializable(0x15CAEAE3C90CF614)]
    public class ImpactEffectRegionOverride
    {
        [RTTI.Member(0, 0x0)] public Array<ERegion> Regions;
        [RTTI.Member(1, 0x10)] public Array<ImpactEffectVariation> Variations;
    }

    [RTTI.Serializable(0xBDBEA8EB6E1B7109)]
    public class ImpactEffectResource : Resource
    {
        [RTTI.Member(0, 0x0, "Logic")] public bool UsableForCollidingAndBouncing;
        [RTTI.Member(1, 0x0, "Logic")] public bool UsableForCollidingAndResting;
        [RTTI.Member(2, 0x0, "Logic")] public bool UsableForRolling;
        [RTTI.Member(3, 0x0, "Logic")] public bool UsableForSliding;
        [RTTI.Member(4, 0x28, "Logic")] public MaterialType MaterialA;
        [RTTI.Member(5, 0x2A, "Logic")] public MaterialType MaterialB;
        [RTTI.Member(6, 0x30, "Effects")] public bool OverridesSound;
        [RTTI.Member(7, 0x31, "Effects")] public bool OverridesParticles;
        [RTTI.Member(8, 0x32, "Effects")] public bool OverridesDecal;
        [RTTI.Member(9, 0x33, "Effects")] public bool OverridesLight;
        [RTTI.Member(10, 0x34, "Effects")] public bool OverridesCameraShake;
        [RTTI.Member(11, 0x35, "Effects")] public bool OverridesRumble;
        [RTTI.Member(12, 0x36, "Effects")] public bool OverridesForceField;
        [RTTI.Member(13, 0x38, "Effects")] public float MaxDistanceToCamera;
        [RTTI.Member(14, 0x40, "Effects")] public Array<ImpactEffectVariation> Variations;
        [RTTI.Member(15, 0x50, "Effects")] public Array<ImpactEffectRegionOverride> RegionOverrides;
    }

    [RTTI.Serializable(0x507DD1C102D671B5)]
    public class ImpactEffectResourceCollection : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ImpactEffectResource>> Effects;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<ImpactEffectResourceCollection>> Collections;
        [RTTI.Member(2, 0x58, "Logic")] public Array<SerializableDecalMaterialTypeMask> DecalMaterialTypeMaskMap;
        [RTTI.Member(3, 0x68, "Logic", true)] public String MaterialTypeResourcesFilename;
    }

    [RTTI.Serializable(0xEE79DCC87FECC455)]
    public class ImpactEffectSound
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(1, 0x10)] public float VolumeFactor;
        [RTTI.Member(2, 0x14)] public float MassRangeLight;
        [RTTI.Member(3, 0x18)] public float MassRangeHeavy;
    }

    [RTTI.Serializable(0xB48D90AC96498C17)]
    public class ImpactEffectSystemSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ImpulseFactor;
        [RTTI.Member(1, 0x2C, "Logic")] public float ForceFactor;
        [RTTI.Member(2, 0x30, "Logic")] public float VelocityFactor;
        [RTTI.Member(3, 0x34, "Logic")] public float AngularVelocityFactor;
    }

    [RTTI.Serializable(0x11F891A69F4D7E8F)]
    public class ImpactEffectSystemSettingsGame : ImpactEffectSystemSettings
    {
        [RTTI.Member(0, 0x38, "Game")] public MaterialType AirMaterialType;
    }

    [RTTI.Serializable(0x26E7A9DAEB8AF531)]
    public class ImpactEffectVariation
    {
        [RTTI.Member(0, 0x0)] public ImpactEffectSound Sound;
        [RTTI.Member(1, 0x20)] public Array<ImpactEffectParticles> ParticleEffects;
        [RTTI.Member(2, 0x30)] public Ref<DecalResource> Decal;
        [RTTI.Member(3, 0x38)] public ImpactEffectLight Light;
        [RTTI.Member(4, 0x50)] public Ref<ShakeResource> CameraShakeResource;
        [RTTI.Member(5, 0x58)] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(6, 0x60)] public Ref<ForceFieldResource> ForceFieldResource;
    }

    [RTTI.Serializable(0x8F81E22CF5AB9D56)]
    public class ImpactMaterialTypeRemapComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8A1EF4B2B14E6BE3)]
    public class ImpactMaterialTypeRemapComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<MaterialTypeReplacement> MaterialTypeReplacements;
        [RTTI.Member(1, 0x38, "Logic")] public bool OnlyReplaceFirstPerson;
    }

    [RTTI.Serializable(0x48E6FCAD0B746D61)]
    public class ImpulseResponseResource : Resource
    {
        [RTTI.Member(0, 0x28, "ImpulseResponse")] public Array<uint8> Data;
        [RTTI.Member(1, 0x38, "Source")] public int NoiseFloorThreshold;
        [RTTI.Member(2, 0x3C, "Source")] public int RMSNormalizationLevel;
        [RTTI.Member(3, 0x40, "Source")] public bool ForReverbPreset;
    }

    [RTTI.Serializable(0xBC8F686C89534770)]
    public class InGameIDToTextResource
    {
        [RTTI.Member(0, 0x0)] public String InGameID;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> Resource;
    }

    [RTTI.Serializable(0x9D5A264D81BDA5D0)]
    public class InGameMenuResource : MenuResource
    {
        [RTTI.Member(0, 0xE0, "Properties")] public Ref<ButtonIconCollection> ButtonIconCollection;
        [RTTI.Member(1, 0xE8, "Properties")] public Ref<ImageMap> TextImageMap;
        [RTTI.Member(2, 0xF0, "Properties")] public Ref<ImageMap> DLCTextImageMap;
        [RTTI.Member(3, 0xF8, "Audio")] public Ref<SoundMixStateResource> GamePausedSoundMix;
        [RTTI.Member(4, 0x100, "Audio")] public Ref<SoundMixStateResource> GameRunningSoundMix;
        [RTTI.Member(5, 0x108, "Audio")] public Ref<SoundMixStateResource> MenuCollectableSoundMix;
        [RTTI.Member(6, 0x110, "Audio")] public Ref<SoundMixStateResource> MenuBinkSoundMix;
        [RTTI.Member(7, 0x118, "Properties")] public Ref<EntityAction> SaveGameAction;
        [RTTI.Member(8, 0x120, "Properties")] public Ref<MovieResource> MainMenuBackgroundMovie;
        [RTTI.Member(9, 0x128, "Properties")] public Array<MenuPageScreenEffect> MenuPageScreenEffects;
        [RTTI.Member(10, 0x138, "Properties")] public Ref<ConditionResource> CanOpenInGameMainMenuCondition;
        [RTTI.Member(11, 0x140, "Properties")] public Ref<EnumFactValue> ShowPlayGoLoadingMenuQuest;
        [RTTI.Member(12, 0x148, "Properties")] public Ref<BooleanFact> CreditsDoneFact;
        [RTTI.Member(13, 0x150, "Properties")] public Ref<MenuDLCAnimateItemRarityResource> MenuDLCAnimateItemRarityResource;
        [RTTI.Member(14, 0x158, "Pages")] public Ref<MenuPageBase> StartupIntro;
        [RTTI.Member(15, 0x160, "Pages")] public Ref<MenuPageBase> BasicLoading;
        [RTTI.Member(16, 0x168, "Pages")] public Ref<MenuPageBase> CampaignLoading;
        [RTTI.Member(17, 0x170, "Pages")] public Ref<MenuPageBase> FirstTimeBootupLoadingPage;
        [RTTI.Member(18, 0x178, "Pages")] public Ref<MenuPageBase> FirstTimeBootupIntroPage;
        [RTTI.Member(19, 0x180, "Pages")] public Ref<MenuPageBase> Movie;
        [RTTI.Member(20, 0x188, "Pages")] public Ref<MenuPageBase> SkipSequence;
        [RTTI.Member(21, 0x190, "Pages")] public Ref<MenuPageBase> IngameMainMenu;
        [RTTI.Member(22, 0x198, "Pages")] public Ref<MenuPageBase> IngameOptions;
        [RTTI.Member(23, 0x1A0, "Pages")] public Ref<MenuPageBase> IngameMerchant;
        [RTTI.Member(24, 0x1A8, "Pages")] public Ref<MenuPageBase> IngameLoot;
        [RTTI.Member(25, 0x1B0, "Pages")] public Ref<MenuPageBase> IngameCrafting;
        [RTTI.Member(26, 0x1B8, "Pages")] public Ref<MenuPageBase> IngamePerks;
        [RTTI.Member(27, 0x1C0, "Pages")] public Ref<MenuPageBase> IngameNotebook;
        [RTTI.Member(28, 0x1C8, "Pages")] public Ref<MenuPageBase> EndCredits;
        [RTTI.Member(29, 0x1D0, "Pages")] public Ref<MenuPageBase> Robot;
        [RTTI.Member(30, 0x1D8, "Pages")] public Ref<MenuPageBase> SkippedSequenceLoading;
        [RTTI.Member(31, 0x1E0, "Pages")] public Ref<MenuPageBase> IngameSaveProcess;
        [RTTI.Member(32, 0x1E8, "Pages")] public Ref<MenuPageBase> IngameMenuSkills;
        [RTTI.Member(33, 0x1F0, "Pages")] public Ref<MenuPageBase> IngameMenuInventory;
        [RTTI.Member(34, 0x1F8, "Pages")] public Ref<MenuPageBase> IngameMenuCrafting;
        [RTTI.Member(35, 0x200, "Pages")] public Ref<MenuPageBase> IngameMenuQuests;
        [RTTI.Member(36, 0x208, "Pages")] public Ref<MenuPageBase> IngameMenuNotebook;
        [RTTI.Member(37, 0x210, "Pages")] public Ref<MenuPageBase> QuitConfirmationDialog;
        [RTTI.Member(38, 0x218, "Pages")] public Ref<MenuPageBase> BenchmarkResults;
        [RTTI.Member(39, 0x220, "Pages")] public Ref<MenuPageBase> MainMenuSettings;
        [RTTI.Member(40, 0x228, "Entitlements")] public Ref<EntitlementResource> DLCPackEntitlementKey;
    }

    [RTTI.Serializable(0x76AFF683FE30C8BB)]
    public class InactiveEntity : RTTIObject
    {
    }

    [RTTI.Serializable(0x188B73067DAD2994)]
    public class IncapacitateWeaponAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Incapacitate;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EntityComponentResource> WeaponComponentResource;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<EjectLocationResource> EjectLocation;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<EjectEffectsLocationResource> EffectsLocation;
    }

    [RTTI.Serializable(0xAC172B3BCE560603)]
    public class IncreaseFloatPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public float ValueToAdd;
    }

    [RTTI.Serializable(0xE8AA4894AD325A61)]
    public class IncreaseIntPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public IntPropertyLink Property;
        [RTTI.Member(2, 0x40, "Logic")] public int ValueToAdd;
    }

    [RTTI.Serializable(0x9556EC2BA3456EE7)]
    public class IndirectLightingBakeZone : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(1, 0x100, "General")] public String Name;
        [RTTI.Member(2, 0x108, "General")] public ELightbakeZoneRestriction LightbakeZoneRestriction;
        [RTTI.Member(3, 0x10C, "General")] public ELightbakeZoneQuality LightbakeZoneQuality;
        [RTTI.Member(4, 0x110, "General")] public ELightbakeZoneOrientation LightbakeZoneOrientation;
        [RTTI.Member(5, 0x114, "General")] public ELightmapEncodeColorScale LightmapEncodeColorScale;
        [RTTI.Member(6, 0x118, "General")] public float CompositeOrder;
    }

    [RTTI.Serializable(0xE92D2611FF95B30A)]
    public class IndoorClimate : ClimateBase
    {
        [RTTI.Member(0, 0x30, "General")] public float OutdoorWindInfluence;
    }

    [RTTI.Serializable(0x3BB2216FF6F56111)]
    public class InitialPropertyValue
    {
        [RTTI.Member(0, 0x0)] public String Property;
        [RTTI.Member(1, 0x8)] public String Value;
    }

    [RTTI.Serializable(0x4E3748664BA4F2B9)]
    public class InitialTemplateVariable
    {
        [RTTI.Member(0, 0x0)] public String Variable;
        [RTTI.Member(1, 0x8)] public String Value;
    }

    [RTTI.Serializable(0xA9B9A5296138F926)]
    public class InstanceList
    {
        [RTTI.Member(0, 0x0)] public Array<Mat34> Transforms;
        [RTTI.Member(1, 0x20)] public Array<Vec4Pack> Data;
    }

    [RTTI.Serializable(0x16B760D43B4B39FB)]
    public class InstancedMeshInstance : GeometryObject, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
        [RTTI.Member(1, 0xC8, "General")] public Ref<InstancedMeshResource> Resource;
        [RTTI.Member(2, 0xD0, "General")] public int MeshInstanceTreeSize;
        [RTTI.Member(3, 0xE0, "General")] public int MeshInstanceTreeDrawableSetupSize;
    }

    [RTTI.Serializable(0xA5ED50DC10EEC66B)]
    public class InstancedMeshResource : MeshResourceBase
    {
        [RTTI.Member(0, 0x80, "General")] public Array<Ref<MeshResourceBase>> Meshes;
        [RTTI.Member(1, 0x90, "General")] public DrawFlags DrawFlags;
        [RTTI.Member(2, 0x98, "Private")] public BakedInstanceData BakedInstanceData;
    }

    [RTTI.Serializable(0x1F2B9D617DF7FDA6)]
    public class InstigatorData
    {
        [RTTI.Member(0, 0x0, "Logic")] public WeakPtr<Player> Player;
        [RTTI.Member(1, 0x18, "Logic")] public WeakPtr<Entity> Entity;
        [RTTI.Member(2, 0x30, "Logic")] public CPtr<AIFaction> Faction;
        [RTTI.Member(3, 0x38, "Logic")] public uint8 Flags;
    }

    [RTTI.Serializable(0x4239E16B2D09247C)]
    public class InstigatorFlagResource : Resource
    {
        [RTTI.Member(0, 0x28)] public int ID;
    }

    [RTTI.Serializable(0x4FCF54914C7D1CF1)]
    public class InstigatorFlagStatMap
    {
        [RTTI.Member(0, 0x0)] public EPlayerScoreStat Stat;
        [RTTI.Member(1, 0x8)] public Ref<InstigatorFlagResource> InstigatorFlag;
        [RTTI.Member(2, 0x10)] public Ref<ScoreResource> ScoreEvent;
        [RTTI.Member(3, 0x18)] public EPlayerKilledDataBits KillFlag;
    }

    [RTTI.Serializable(0x252E115A17D06766)]
    public class InstigatorFlagsResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<InstigatorFlagResource>> InstigatorFlags;
    }

    [RTTI.Serializable(0xF902BC82CA35F060)]
    public class IntProperty : IntPropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x3AC6A282FDB1892E)]
    public class IntPropertyBase : Property
    {
    }

    [RTTI.Serializable(0xDA7055AEE6B45BEC)]
    public class IntPropertyLink : PropertyLinkBase
    {
        [RTTI.Member(0, 0x0)] public Ref<IntPropertyBase> Property;
    }

    [RTTI.Serializable(0xD83841E650139F0B)]
    public class IntegerFact : Fact
    {
        [RTTI.Member(0, 0x30, "Logic")] public int DefaultValue;
    }

    [RTTI.Serializable(0xE025D78F8F9FA01D)]
    public class IntegerFactQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool MustBeTracked;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<IntegerFact> Fact;
        [RTTI.Member(2, 0x38, "Logic")] public int Value;
        [RTTI.Member(3, 0x3C, "Logic")] public EIntegerFactComparisonLogic CompareLogic;
        [RTTI.Member(4, 0x40, "Bounds")] public int NotifyMin;
        [RTTI.Member(5, 0x44, "Bounds")] public int NotifyMax;
    }

    [RTTI.Serializable(0x72F68B75FB1124EE)]
    public class IntegerFactQuestTriggerInstance : FactQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x836650FEDF2BC6CF)]
    public class InteractionEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD6840B1ED08366BC)]
    public class InteractionEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntityAction> CreateEffectAction;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<EntityAction> DeleteEffectAction;
        [RTTI.Member(2, 0x38, "Logic")] public Array<Ref<UseLocationResource>> UseLocations;
    }

    [RTTI.Serializable(0xB267D45434578E2)]
    public class InteractiveEntity : ControlledEntity
    {
        [RTTI.Member(0, 0x570, "Main")] public WorldTransform Origin;
    }

    [RTTI.Serializable(0xE06FBD06A4E954A8)]
    public class InteractiveEntityActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0xA5BF17462DCFEC74)]
    public class InteractiveEntityActorResource : EntityActorResource
    {
    }

    [RTTI.Serializable(0x8114F4D7736E9A1F)]
    public class InteractiveEntityController : Controller
    {
    }

    [RTTI.Serializable(0xF19783E114DC9F40)]
    public class InteractiveEntityIKTargetInfo
    {
        [RTTI.Member(0, 0x0)] public String ChannelName;
        [RTTI.Member(1, 0x8)] public int BoneIndex;
        [RTTI.Member(2, 0x10)] public String BoneName;
    }

    [RTTI.Serializable(0xD65F11B8D1016232)]
    public class InteractiveEntityRep : ControlledEntityRep
    {
    }

    [RTTI.Serializable(0x1DC1B0D9CB16A1E1)]
    public class InteractiveEntityResource : ControlledEntityResource
    {
        [RTTI.Member(0, 0x208, "Logic")] public Array<UseLocationInfo> UseLocations;
        [RTTI.Member(1, 0x218, "Logic")] public bool StartEnabled;
        [RTTI.Member(2, 0x219, "Logic")] public bool AlignToCameraOnDismount;
        [RTTI.Member(3, 0x21A, "Logic")] public bool FullUserPoseOverride;
        [RTTI.Member(4, 0x21C, "Logic")] public float MaxUseAngle;
        [RTTI.Member(5, 0x220, "Logic")] public Array<InteractiveEntityIKTargetInfo> IKTargets;
        [RTTI.Member(6, 0x230, "Logic")] public bool HeadIKEnabledByDefault;
        [RTTI.Member(7, 0x234, "Logic")] public float PoseOverrideBlendDuration;
        [RTTI.Member(8, 0x238, "Logic")] public float AttachBlendDuration;
        [RTTI.Member(9, 0x23C, "Logic")] public float DetachBlendDuration;
        [RTTI.Member(10, 0x240, "Logic")] public bool HidesUser;
        [RTTI.Member(11, 0x241, "Logic")] public bool HidesUserFromAI;
        [RTTI.Member(12, 0x242, "Logic")] public bool HidesUserPhysicsVolume;
        [RTTI.Member(13, 0x243, "Logic")] public bool PlayerInvulnerableInSinglePlayer;
        [RTTI.Member(14, 0x244, "Logic")] public bool AllowUsageWhenParentOrChildOfEnemyFaction;
        [RTTI.Member(15, 0x248, "Logic")] public Array<UserModeInfo> UserExitModes;
        [RTTI.Member(16, 0x258, "Logic")] public Array<Ref<HumanoidSubStateUsingInteractiveEntityResource>> HumanoidSubStateUsingInteractiveEntityResources;
        [RTTI.Member(17, 0x268, "Private")] public String UserPlacementJointName;
        [RTTI.Member(18, 0x270, "Logic")] public bool MustStowWeapons;
        [RTTI.Member(19, 0x271, "Logic")] public bool MustResetLook;
        [RTTI.Member(20, 0x272, "Logic")] public bool CanUserBeMortallyWounded;
        [RTTI.Member(21, 0x278, "Logic")] public CPtr<EntityAction> StartAttachAction;
        [RTTI.Member(22, 0x280, "Logic")] public CPtr<EntityAction> StopDetachAction;
        [RTTI.Member(23, 0x288, "Representation")] public bool OverridesUserName;
        [RTTI.Member(24, 0x28C, "Logic")] public EHitResponse HitResponse;
        [RTTI.Member(25, 0x290, "Logic")] public bool UseLocomotion;
    }

    [RTTI.Serializable(0x525297166C439F92)]
    public class InteractiveEntityScriptEnableEvent : RequestOwnershipEvent
    {
    }

    [RTTI.Serializable(0x70F51840F1AE25AF)]
    public class InteractiveMover : Mover
    {
    }

    [RTTI.Serializable(0xF13CE80EEE7D215F)]
    public class InteractiveMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xDED882D095904B70)]
    public class InterruptEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7B5CD205DABEC57A)]
    public class InterruptEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xE52DB546E2DD30D1)]
    public class InvalidatePhysicsContactsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC3B3EF8C76D0408C)]
    public class InvalidatePhysicsContactsComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xAB0DF86759B274DC)]
    public class Inventory : EntityComponent
    {
    }

    [RTTI.Serializable(0x4420EE38E447A321)]
    public class InventoryActionAbility : InventoryEntity
    {
    }

    [RTTI.Serializable(0xCD5D67CD4B8C9CE9)]
    public class InventoryActionAbilityResource : InventoryEntityResource
    {
        [RTTI.Member(0, 0x230, "Ability")] public CPtr<EntityAction> UseAction;
        [RTTI.Member(1, 0x238, "Ability")] public CPtr<EntityAction> DeactivateAction;
        [RTTI.Member(2, 0x240, "Ability")] public CPtr<EntityAction> OnDamageReceivedAction;
        [RTTI.Member(3, 0x248, "Ability")] public CPtr<EntityAction> OnPlayerKilledAction;
        [RTTI.Member(4, 0x250, "Ability")] public float Duration;
        [RTTI.Member(5, 0x258, "Ability")] public Ref<FloatProperty> EndTimeProperty;
        [RTTI.Member(6, 0x260, "Ability")] public bool AutoUse;
        [RTTI.Member(7, 0x261, "Ability")] public bool SingleShot;
        [RTTI.Member(8, 0x262, "Ability")] public bool UseAgainToDeactivate;
        [RTTI.Member(9, 0x268, "Ability")] public Ref<ActionAbilityUseCondition> UseCondition;
        [RTTI.Member(10, 0x270, "Ability")] public Ref<GraphProgramResource> EnabledGraphProgram;
        [RTTI.Member(11, 0x278, "Ability")] public bool SingleUse;
    }

    [RTTI.Serializable(0xE0C0DAAF7E5DAF7B)]
    public class InventoryAmmoEjector : InventoryWeapon
    {
    }

    [RTTI.Serializable(0x9FD3F79582E3567F)]
    public class InventoryAmmoEjectorRep : InventoryWeaponRep
    {
    }

    [RTTI.Serializable(0x3D8070027F38A962)]
    public class InventoryAmmoEjectorResource : InventoryWeaponResource
    {
        [RTTI.Member(0, 0x310, "Logic")] public Ref<CameraPropertiesSetResource> ReloadCameraProperties;
        [RTTI.Member(1, 0x318, "FlashLight")] public Ref<LightResource> LightResource;
        [RTTI.Member(2, 0x320, "FlashLight")] public Ref<LightResource> BlindingLightResource;
        [RTTI.Member(3, 0x328, "FlashLight")] public Ref<LightResource> LightResourceFP;
        [RTTI.Member(4, 0x330, "FlashLight")] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(5, 0x338, "FlashLight")] public String BoneFP;
        [RTTI.Member(6, 0x340, "FlashLight")] public String BoneTP;
        [RTTI.Member(7, 0x350, "FlashLight")] public Vec3 BoneOffsetFP;
        [RTTI.Member(8, 0x360, "FlashLight")] public Vec3 BoneOffsetTP;
        [RTTI.Member(9, 0x370, "FlashLight")] public Vec3 AILightShape;
        [RTTI.Member(10, 0x380, "FlashLight")] public float BlindingAngle;
        [RTTI.Member(11, 0x384, "FlashLight")] public float BlindingDistance;
        [RTTI.Member(12, 0x388, "FlashLight")] public bool CanBlindFriendlies;
        [RTTI.Member(13, 0x390, "FlashLight")] public CPtr<EntityAction> UserTurnsFlashLightOnAction;
        [RTTI.Member(14, 0x398, "FlashLight")] public CPtr<EntityAction> UserTurnsFlashLightOffAction;
        [RTTI.Member(15, 0x3A0, "Animation")] public float FireModeSwitchDuration;
        [RTTI.Member(16, 0x3A4, "Logic")] public bool ShouldUnloadWeaponOnModeSwitch;
        [RTTI.Member(17, 0x3A8, "Animation")] public int ScopeAnimationId;
        [RTTI.Member(18, 0x3B0, "Animation")] public Ref<ModelPartResource> OriginalScopePart;
        [RTTI.Member(19, 0x3B8, "Animation")] public Ref<ModelPartResource> ScopeReplacementPart;
        [RTTI.Member(20, 0x3C0, "Animation")] public float ScopeReplacementThreshold;
        [RTTI.Member(21, 0x3C8, "Animation")] public Ref<ModelPartResource> DotLaserPart;
        [RTTI.Member(22, 0x3D0, "Animation")] public bool HideDotLaserDuringReload;
        [RTTI.Member(23, 0x3D1, "Logic")] public bool FindTargetByRayCollision;
        [RTTI.Member(24, 0x3DC, "Logic")] public bool HasRecoverableRecoil;
        [RTTI.Member(25, 0x3E0, "Representation")] public Ref<LaserBeamResource> LaserBeam;
        [RTTI.Member(26, 0x3E8, "Representation")] public String LaserHelperFP;
        [RTTI.Member(27, 0x3F0, "Representation")] public String LaserHelperTP;
        [RTTI.Member(28, 0x3F8, "Representation")] public float LaserBeamMaxLength;
        [RTTI.Member(29, 0x3FC, "Representation")] public float LaserBeamMaxLengthFirstPerson;
        [RTTI.Member(30, 0x400, "Representation")] public float LaserBeamFalloffLengthFirstPerson;
        [RTTI.Member(31, 0x404, "Representation")] public bool AlignLaserWithAim;
        [RTTI.Member(32, 0x408, "SoundEffects")] public Ref<SoundResource> HoldThrowSound;
    }

    [RTTI.Serializable(0xF168258AD7F858A0)]
    public class InventoryCapacityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9B3DAB8E924881D1)]
    public class InventoryCapacityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int WeaponsCapacity;
        [RTTI.Member(1, 0x2C, "Logic")] public int ToolsCapacity;
        [RTTI.Member(2, 0x34, "Logic")] public int ModificationsCapacity;
        [RTTI.Member(3, 0x38, "Logic")] public int OutfitsCapacity;
        [RTTI.Member(4, 0x3C, "Logic")] public int ResourcesCapacity;
        [RTTI.Member(5, 0x49, "Logic")] public bool ToolsSingleSlotRestriction;
        [RTTI.Member(6, 0x4D, "Logic")] public bool ResourcesSingleSlotRestriction;
        [RTTI.Member(7, 0x50, "Logic")] public Array<Ref<TagProperty>> IgnoreTags;
        [RTTI.Member(8, 0x60, "UI")] public Ref<LocalizedTextResource> WeaponInventoryFullDescription;
        [RTTI.Member(9, 0x68, "UI")] public Ref<LocalizedTextResource> ToolInventoryFullDescription;
        [RTTI.Member(10, 0x70, "UI")] public Ref<LocalizedTextResource> AmmoPouchInventoryFullDescription;
        [RTTI.Member(11, 0x78, "UI")] public Ref<LocalizedTextResource> ModificationInventoryFullDescription;
        [RTTI.Member(12, 0x80, "UI")] public Ref<LocalizedTextResource> OutfitInventoryFullDescription;
        [RTTI.Member(13, 0x88, "UI")] public Ref<LocalizedTextResource> ResourceInventoryFullDescription;
        [RTTI.Member(14, 0xA0, "UI")] public Ref<LocalizedTextResource> WeaponCategoryName;
        [RTTI.Member(15, 0xA8, "UI")] public Ref<LocalizedTextResource> ToolCategoryName;
        [RTTI.Member(16, 0xB0, "UI")] public Ref<LocalizedTextResource> AmmoCategoryName;
        [RTTI.Member(17, 0xB8, "UI")] public Ref<LocalizedTextResource> ModificationCategoryName;
        [RTTI.Member(18, 0xC0, "UI")] public Ref<LocalizedTextResource> OutfitCategoryName;
        [RTTI.Member(19, 0xC8, "UI")] public Ref<LocalizedTextResource> ResourceCategoryName;
        [RTTI.Member(20, 0xD0, "UI")] public Ref<LocalizedTextResource> SpecialCategoryName;
        [RTTI.Member(21, 0xD8, "UI")] public Ref<LocalizedTextResource> LootBoxCategoryName;
    }

    [RTTI.Serializable(0x738F650722ED4E09)]
    public class InventoryCapacityModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDF8789B5770E5AFA)]
    public class InventoryCapacityModificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int WeaponsCapacityIncrease;
        [RTTI.Member(1, 0x2C, "Logic")] public int ToolsCapacityIncrease;
        [RTTI.Member(2, 0x34, "Logic")] public int ModificationsCapacityIncrease;
        [RTTI.Member(3, 0x38, "Logic")] public int OutfitsCapacityIncrease;
        [RTTI.Member(4, 0x3C, "Logic")] public int ResourcesCapacityIncrease;
        [RTTI.Member(5, 0x48, "IncreasedCapacity")] public Ref<PerkLevel> ModifierPerk;
        [RTTI.Member(6, 0x50, "IncreasedCapacity")] public float ModifierValue;
    }

    [RTTI.Serializable(0x88346EC71F50AE25)]
    public class InventoryCollection : Resource
    {
        [RTTI.Member(0, 0x28, "Inventory")] public Array<Ref<InventoryCollectionEquippableItemBase>> Items;
    }

    [RTTI.Serializable(0x8737C387AC9D5771)]
    public class InventoryCollectionEquippableAmmoItem : InventoryCollectionItemBase
    {
        [RTTI.Member(0, 0x30)] public Ref<AmmoResource> EntityResource;
    }

    [RTTI.Serializable(0x892F42836F56D0CD)]
    public class InventoryCollectionEquippableItem : InventoryCollectionEquippableItemBase
    {
        [RTTI.Member(0, 0x38)] public Ref<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0xF3FD66F3A3BF66F1)]
    public class InventoryCollectionEquippableItemBase : InventoryCollectionItemBase
    {
        [RTTI.Member(0, 0x30)] public bool ShouldBeEquipped;
        [RTTI.Member(1, 0x34)] public int EquipInSlot;
    }

    [RTTI.Serializable(0xE13FBB1FB564F049)]
    public class InventoryCollectionEquippableWeaponItem : InventoryCollectionEquippableItemBase
    {
        [RTTI.Member(0, 0x38)] public Ref<InventoryWeaponResource> EntityResource;
        [RTTI.Member(1, 0x40)] public Ref<InventoryCollectionEquippableAmmoItem> AmmoType;
    }

    [RTTI.Serializable(0x5ABF6FE4C570479)]
    public class InventoryCollectionItemBase : Resource
    {
        [RTTI.Member(0, 0x28)] public int Amount;
    }

    [RTTI.Serializable(0xC3B0619E3AD4016E)]
    public class InventoryCollectionMerchantFreeTradingItem : InventoryCollectionMerchantTradingItemBase
    {
    }

    [RTTI.Serializable(0x5177576DEF488272)]
    public class InventoryCollectionMerchantTradingItem : InventoryCollectionMerchantTradingItemBase
    {
        [RTTI.Member(0, 0x40)] public Array<Ref<InventoryCollectionMerchantTradingItemTradeListItem>> TradingItems;
        [RTTI.Member(1, 0x50)] public Array<Ref<MerchantTradeCostMultiplier>> TradeCostMultipliers;
    }

    [RTTI.Serializable(0x3F576065F2B4CFA)]
    public class InventoryCollectionMerchantTradingItemBase : InventoryCollectionItemBase
    {
        [RTTI.Member(0, 0x30)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x38)] public EMerchantSupplySettings SupplySettings;
    }

    [RTTI.Serializable(0x8A48A808702D0C75)]
    public class InventoryCollectionMerchantTradingItemTradeListItem : InventoryCollectionItemBase
    {
        [RTTI.Member(0, 0x30)] public Ref<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0x48FFBD94F42C9F29)]
    public class InventoryCollectionPackageComponent : InventoryPackageComponent
    {
    }

    [RTTI.Serializable(0xFA2E4E031321B009)]
    public class InventoryCollectionPackageComponentResource : InventoryPackageComponentResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<InventoryCollection> PackageCollection;
    }

    [RTTI.Serializable(0x6B3FBD0BBA0EBF8D)]
    public class InventoryContextualOrderAbility : InventoryEntity
    {
    }

    [RTTI.Serializable(0x4C6CA70EB86CC622)]
    public class InventoryContextualOrderAbilityRep : InventoryEntityRep
    {
    }

    [RTTI.Serializable(0x66DE8E7B596BD6FC)]
    public class InventoryContextualOrderAbilityResource : InventoryEntityResource
    {
        [RTTI.Member(0, 0x230, "Logic")] public float DefaultRange;
        [RTTI.Member(1, 0x240, "Logic")] public UIRect GenericDisabledIconRect;
        [RTTI.Member(2, 0x250, "Logic")] public Array<Ref<ContextualOrderModeResource>> Modes;
        [RTTI.Member(3, 0x260, "Logic")] public Ref<ContextualOrderModeResource> DefaultMode;
        [RTTI.Member(4, 0x268, "Logic")] public float WaypointFindRadius;
        [RTTI.Member(5, 0x26C, "Logic")] public float WaypointFindElevation;
        [RTTI.Member(6, 0x270, "Logic")] public bool DisplayIgnoresCrosshair;
        [RTTI.Member(7, 0x274, "Logic")] public float EntityTargetingConeAngle;
    }

    [RTTI.Serializable(0x9F964885902638D)]
    public class InventoryController : EntityComponent
    {
    }

    [RTTI.Serializable(0xE955F3A9E850F46B)]
    public class InventoryControllerRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x91B3373162191C0E)]
    public class InventoryControllerResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<ScreenEffectResource> ScreenEffectResource;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<EquipSlotType> ToolsSlotType;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<EquipSlotType> WeaponsSlotType;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<EquipSlotType> MeleeSlotType;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<EquipSlotType> HeavySlotType;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<EquipSlotType> TorsoSlotType;
        [RTTI.Member(7, 0x60, "Logic")] public Ref<EquipSlotType> UncategorisedSlotType;
        [RTTI.Member(8, 0x68, "Sound")] public Ref<SoundResource> SelectionActivatedSound;
        [RTTI.Member(9, 0x70, "Sound")] public Ref<SoundResource> SelectionChangedSound;
        [RTTI.Member(10, 0x78, "Sound")] public Ref<SoundResource> WeaponOrAmmoSwitchSound;
        [RTTI.Member(11, 0x80, "Sound")] public Ref<SoundResource> ToolSwitchSound;
        [RTTI.Member(12, 0x88, "Sound")] public Ref<SoundResource> ToolUseFailedSound;
        [RTTI.Member(13, 0x90, "Sound")] public Ref<SoundResource> QuickCraftSucceededSound;
        [RTTI.Member(14, 0x98, "Sound")] public Ref<SoundResource> QuickCraftFailedSound;
        [RTTI.Member(15, 0xA0, "Sound")] public Ref<SoundResource> QuickCraftingSound;
        [RTTI.Member(16, 0xA8, "Sound")] public Ref<SoundMixStateResource> SelectionSoundMixState;
        [RTTI.Member(17, 0xB0, "Logic")] public Ref<ContextualSpeechEvent> InventoryFullSpeechEvent;
        [RTTI.Member(18, 0xB8, "Animation")] public String RelaxedAnimationTag;
        [RTTI.Member(19, 0xC0, "Logic")] public Ref<ConditionResource> InputAllowedCondition;
        [RTTI.Member(20, 0xC8, "HUD")] public Ref<HUDLogicGroupResource> ToolSelectionHUDGroup;
        [RTTI.Member(21, 0xD0, "Logic")] public float DPadStopMovementTime;
        [RTTI.Member(22, 0xD4, "Logic")] public float ToolAimCameraDelay;
        [RTTI.Member(23, 0xD8, "Logic")] public Ref<BooleanFact> UseAimCameraForToolFact;
        [RTTI.Member(24, 0xE0, "Logic")] public float QuickCraftHoldTime;
        [RTTI.Member(25, 0xE4, "Logic")] public bool IsQuickCraftingEnabled;
        [RTTI.Member(26, 0xE8, "GameSpeed")] public float SelectionTimeScale;
        [RTTI.Member(27, 0xEC, "GameSpeed")] public float SelectionTimeScaleBlendInDuration;
        [RTTI.Member(28, 0xF0, "GameSpeed")] public float SelectionTimeScaleBlendOutDuration;
        [RTTI.Member(29, 0xF4, "Logic")] public float AngularDeadzonePerSlot;
        [RTTI.Member(30, 0xF8, "WieldDirective")] public float WeaponOperationTimeout;
        [RTTI.Member(31, 0xFC, "WieldDirective")] public float WeaponAutoWieldMinimumTime;
        [RTTI.Member(32, 0x100, "WieldDirective")] public float WeaponStowDelayAfterAutoWield;
        [RTTI.Member(33, 0x104, "WieldDirective")] public float AutoStowSlopeAngleThreshold;
        [RTTI.Member(34, 0x108, "WieldDirective")] public float WeaponAutoWieldCoolDown;
        [RTTI.Member(35, 0x110, "WieldDirective")] public Ref<ConditionResource> AutoWieldCondition;
        [RTTI.Member(36, 0x118, "Logic")] public Ref<BooleanFact> InventorySelectionActiveFact;
        [RTTI.Member(37, 0x120, "Logic")] public Ref<BooleanFact> ChildAloyFact;
        [RTTI.Member(38, 0x128, "Logic")] public Array<Ref<PerkLevel>> UnlockableAbilities;
    }

    [RTTI.Serializable(0xFC67CA6941BC4D93)]
    public class InventoryEntity : ViewDependentEntity
    {
    }

    [RTTI.Serializable(0xD0E4034EC88208E0)]
    public class InventoryEntityRep : ViewDependentEntityRep
    {
    }

    [RTTI.Serializable(0x6FDA539BFDFB1D56)]
    public class InventoryEntityResource : ViewDependentEntityResource
    {
        [RTTI.Member(0, 0x130, "HUD")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(1, 0x138, "Logic")] public Array<Ref<EquipSlotType>> EquipSlotTypes;
        [RTTI.Member(2, 0x148, "Logic")] public int InventoryId;
        [RTTI.Member(3, 0x150, "Logic")] public AnimationTagSet AnimationSetTags;
        [RTTI.Member(4, 0x160, "AI")] public String AIInventoryId;
        [RTTI.Member(5, 0x170, "Animation")] public float StowTime;
        [RTTI.Member(6, 0x174, "Animation")] public float QuickStowTime;
        [RTTI.Member(7, 0x178, "Animation")] public float NormalWieldTime;
        [RTTI.Member(8, 0x17C, "Animation")] public float QuickWieldTime;
        [RTTI.Member(9, 0x180, "Animation")] public String AdditionalWieldAnimation;
        [RTTI.Member(10, 0x188, "Logic")] public float StowedScale;
        [RTTI.Member(11, 0x190, "Logic")] public CPtr<EntityAction> WieldAction;
        [RTTI.Member(12, 0x198, "Logic")] public CPtr<EntityAction> StowAction;
        [RTTI.Member(13, 0x1A0, "Logic")] public CPtr<EntityAction> StartAimingAction;
        [RTTI.Member(14, 0x1A8, "Logic")] public CPtr<EntityAction> StopAimingAction;
        [RTTI.Member(15, 0x1B0, "Logic")] public CPtr<EntityAction> RemovedAction;
        [RTTI.Member(16, 0x1B8, "DisabledTimeAfterUse")] public float Time;
        [RTTI.Member(17, 0x1C0, "Handling")] public Vec3 StandAimOffset;
        [RTTI.Member(18, 0x1D0, "Handling")] public Vec3 CrouchAimOffset;
        [RTTI.Member(19, 0x1E0, "Handling")] public bool AttachAimToCamera;
        [RTTI.Member(20, 0x1E8, "Logic")] public String GunBoneOverride;
        [RTTI.Member(21, 0x1F0, "Representation")] public Ref<MoverResource> StowMoverResource;
        [RTTI.Member(22, 0x1F8, "Logic")] public String GunAimOverrideHelperName;
        [RTTI.Member(23, 0x200, "Logic")] public bool NeedsAimAlignment;
        [RTTI.Member(24, 0x201, "Logic")] public bool DisablesInventorySelection;
        [RTTI.Member(25, 0x202, "Logic")] public bool KeepWhenDead;
        [RTTI.Member(26, 0x208, "Representation")] public Ref<SoundResource> ActiveSound;
        [RTTI.Member(27, 0x210, "Logic")] public float ButtonActivationTime;
        [RTTI.Member(28, 0x214, "Logic")] public bool CanQuickThrow;
        [RTTI.Member(29, 0x215, "Logic")] public bool QuickThrowForDeployment;
        [RTTI.Member(30, 0x216, "Logic")] public bool AllowsMoving;
        [RTTI.Member(31, 0x217, "Logic")] public bool AllowMovingWhileOperating;
        [RTTI.Member(32, 0x218, "Logic")] public bool AllowsCrouching;
        [RTTI.Member(33, 0x219, "Logic")] public bool AllowsJumping;
        [RTTI.Member(34, 0x21A, "Logic")] public bool AllowsDiveRolling;
        [RTTI.Member(35, 0x21B, "Logic")] public bool AllowsVaulting;
        [RTTI.Member(36, 0x21C, "Logic")] public bool AllowsSliding;
        [RTTI.Member(37, 0x21D, "Logic")] public bool AllowsSprinting;
        [RTTI.Member(38, 0x21E, "Logic")] public bool StowOnExtendedMovement;
        [RTTI.Member(39, 0x21F, "Logic")] public bool CanActivateWhileFallingAndJumping;
        [RTTI.Member(40, 0x220, "Logic")] public bool CanWieldWhileMounted;
    }

    [RTTI.Serializable(0x554991CAA024CCEA)]
    public class InventoryGrenade : InventoryThrowable
    {
    }

    [RTTI.Serializable(0xBD79D3B2EEE7468D)]
    public class InventoryGrenadeRep : InventoryThrowableRep
    {
    }

    [RTTI.Serializable(0x233BD3842F2FED76)]
    public class InventoryGrenadeResource : InventoryThrowableResource
    {
        [RTTI.Member(0, 0x370, "Logic")] public float PlayerPullPinDetonateTime;
        [RTTI.Member(1, 0x378, "SoundEffects")] public Ref<SoundResource> PinPulledSound;
        [RTTI.Member(2, 0x380, "Rumbles")] public Ref<RumbleResource> PinPulledRumble;
        [RTTI.Member(3, 0x388, "Rumbles")] public float PinPulledRumbleDelay;
    }

    [RTTI.Serializable(0xD75253005A4278F2)]
    public class InventoryHUDNotificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5D6352C7E19BB43B)]
    public class InventoryHUDNotificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PlayerNotificationResource> ItemAddedNotification;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<PlayerNotificationResource> ItemRemovedNotification;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<PlayerNotificationResource> ItemEquippedNotification;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<PlayerNotificationResource> ItemUnequippedNotification;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<PlayerNotificationResource> ItemConstructedNotification;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<PlayerNotificationPriority> NotificationPriority;
    }

    [RTTI.Serializable(0x96722FECBCC851BC)]
    public class InventoryItemComponent : ItemDescriptionComponent
    {
    }

    [RTTI.Serializable(0x7EAD4DC913259B73)]
    public class InventoryItemComponentResource : ItemDescriptionComponentResource
    {
        [RTTI.Member(0, 0x80, "Logic")] public Array<Ref<EquipSlotType>> EquipSlotTypes;
        [RTTI.Member(1, 0x90, "Logic")] public bool IsDroppable;
        [RTTI.Member(2, 0x91, "Logic")] public bool UseSafePlacementForDrop;
        [RTTI.Member(3, 0x98, "Logic")] public Array<Ref<EntityComponentResource>> DroppedComponents;
        [RTTI.Member(4, 0xA8, "Logic")] public Ref<GraphProgramResource> DroppedComponentCondition;
        [RTTI.Member(5, 0xB0, "Logic")] public Array<Ref<EntityComponentResource>> PickedUpOnlyComponents;
        [RTTI.Member(6, 0xC0, "Sound")] public Ref<SoundResource> PickUpSound;
        [RTTI.Member(7, 0xC8, "Logic")] public Ref<EquipSlotType> AutoEquipSlotType;
        [RTTI.Member(8, 0xD0, "Logic")] public bool MustBeWieldedOrDropped;
        [RTTI.Member(9, 0xD1, "Logic")] public bool PreventSaveToInventory;
    }

    [RTTI.Serializable(0x940BA760435C346F)]
    public class InventoryLootPackageComponent : InventoryPackageComponent
    {
    }

    [RTTI.Serializable(0x784C39DB2503AD65)]
    public class InventoryLootPackageComponentResource : InventoryPackageComponentResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<LootSlot>> LootSlots;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<InventoryItemComponentResource> OpenedItemDescriptionComponent;
    }

    [RTTI.Serializable(0x57CB219ADE97E25A)]
    public class InventoryLootPackageViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x3DC81ECDAE8E48AF)]
    public class InventoryNodeGraphPackageComponent : InventoryPackageComponent
    {
    }

    [RTTI.Serializable(0x1995F4B3A5033213)]
    public class InventoryNodeGraphPackageComponentResource : InventoryPackageComponentResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<GraphProgramResource> UnpackGraphProgram;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<OverrideGraphProgramResource> UnpackOverrideGraphProgram;
    }

    [RTTI.Serializable(0xC31CDCC14AC963F6)]
    public class InventoryNothing : InventoryWeapon
    {
    }

    [RTTI.Serializable(0x7BAFC581BF3D10C1)]
    public class InventoryNothingResource : InventoryWeaponResource
    {
        [RTTI.Member(0, 0x310, "AI")] public String WeaponId;
        [RTTI.Member(1, 0x318, "AI")] public FRange OffensiveRange;
    }

    [RTTI.Serializable(0xECB2ED16803B5C3)]
    public class InventoryPackageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4411D314F95034A9)]
    public class InventoryPackageComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool ShouldBeAutoUnpacked;
    }

    [RTTI.Serializable(0x489DEDD06C6557EB)]
    public class InventoryPlaceEntityAbility : InventoryEntity
    {
    }

    [RTTI.Serializable(0xA1B7BF89118D5ED9)]
    public class InventoryPlaceEntityAbilityResource : InventoryEntityResource
    {
        [RTTI.Member(0, 0x238, "Logic")] public bool IsDisabledWhilePlacedObjectActive;
        [RTTI.Member(1, 0x239, "Logic")] public bool DestructWhenPlayerIsDead;
    }

    [RTTI.Serializable(0x4857DF33ED456937)]
    public class InventoryResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<InventoryCollection> InitialItemCollection;
        [RTTI.Member(1, 0x30, "General")] public Ref<DispensableCategoryResource> DroppedItemDispensableCategory;
        [RTTI.Member(2, 0x38, "General")] public bool DroppingEnabled;
    }

    [RTTI.Serializable(0x6FFB7202B0778038)]
    public class InventoryRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public Array<Ref<BuyBackItemRestoreState>> BuyBackItemList;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public Ref<ItemListRestoreState> InventoryItemList;
        [RTTI.Member(2, 0x40, "StateSaving", true)] public Ref<ItemListRestoreState> RememberedItemList;
        [RTTI.Member(3, 0x48, "StateSaving", true)] public Array<GGUUID> ItemsOnceReceived;
    }

    [RTTI.Serializable(0x43EDCD5797C9C9A0)]
    public class InventoryReviveAbility : InventoryWeapon
    {
    }

    [RTTI.Serializable(0x2AC0CA82CDDB7E5F)]
    public class InventoryReviveAbilityRep : InventoryWeaponRep
    {
    }

    [RTTI.Serializable(0x7D218AA452C9298)]
    public class InventoryReviveAbilityResource : InventoryWeaponResource
    {
        [RTTI.Member(0, 0x310, "Logic")] public float HealDistance;
        [RTTI.Member(1, 0x314, "Logic")] public float AimRadius;
        [RTTI.Member(2, 0x318, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(3, 0x320, "Logic")] public float Damage;
        [RTTI.Member(4, 0x324, "Logic")] public float ImpactImpulse;
        [RTTI.Member(5, 0x328, "Logic")] public float ImpactSeverity;
        [RTTI.Member(6, 0x32C, "Logic")] public float ReviveHealthPercentage;
        [RTTI.Member(7, 0x330, "Logic")] public bool CanHealFriends;
        [RTTI.Member(8, 0x338, "Logic")] public Array<ReviveAmmoSettings> AmmoSettings;
        [RTTI.Member(9, 0x348, "Representation")] public Ref<RenderEffectResource> LineRenderEffectsResource;
        [RTTI.Member(10, 0x350, "Representation")] public Ref<ElectricityDrawSettings> ElectricityDrawSettings;
        [RTTI.Member(11, 0x358, "Representation")] public String EffectHelperNodeNameTP;
        [RTTI.Member(12, 0x360, "Representation")] public String EffectHelperNodeNameFP;
        [RTTI.Member(13, 0x368, "Representation")] public float EffectDuration;
        [RTTI.Member(14, 0x370, "Representation")] public Ref<ParticleSystemResource> NoTargetParticleSystemResource;
        [RTTI.Member(15, 0x378, "AI")] public String WeaponId;
        [RTTI.Member(16, 0x380, "Representation")] public float ParticleEmitTime;
        [RTTI.Member(17, 0x388, "Representation")] public Ref<ParticleSystemResource> FirstPersonMuzzleFlash;
        [RTTI.Member(18, 0x390, "Representation")] public Ref<ParticleSystemResource> ThirdPersonMuzzleFlash;
    }

    [RTTI.Serializable(0x495894243B51EC4)]
    public class InventoryReviveDroneAbility : InventoryEntity
    {
    }

    [RTTI.Serializable(0xBACD8A45A1226220)]
    public class InventoryReviveDroneAbilityResource : InventoryEntityResource
    {
        [RTTI.Member(0, 0x230, "Revive")] public Ref<CurveResource> AimShapeCurve;
        [RTTI.Member(1, 0x238, "Revive")] public Ref<EntityResource> ReviveEntity;
        [RTTI.Member(2, 0x240, "Revive")] public CPtr<EntityAction> OnReviveAcceptedAction;
        [RTTI.Member(3, 0x248, "Revive")] public float RemoveReviveEntityTime;
    }

    [RTTI.Serializable(0x46634CA260D10E55)]
    public class InventoryThrowable : InventoryWeapon
    {
    }

    [RTTI.Serializable(0xD78ED84A62B63630)]
    public class InventoryThrowableRep : InventoryWeaponRep
    {
    }

    [RTTI.Serializable(0x44301399D76AD33C)]
    public class InventoryThrowableResource : InventoryWeaponResource
    {
        [RTTI.Member(0, 0x310, "Logic")] public bool PullPin;
        [RTTI.Member(1, 0x314, "Animation")] public FRange ReleaseTime;
        [RTTI.Member(2, 0x31C, "Animation")] public float PullPinDuration;
        [RTTI.Member(3, 0x320, "Logic")] public bool AutoRemoveOnUnequipWhenNoAmmo;
        [RTTI.Member(4, 0x324, "TrajectoryPrediction")] public float PredictionFactor;
        [RTTI.Member(5, 0x328, "TrajectoryPrediction")] public float PredictionFactorAI;
        [RTTI.Member(6, 0x340, "SoundEffects")] public Ref<SoundResource> ThrowSound;
        [RTTI.Member(7, 0x348, "SoundEffects")] public Ref<SoundResource> PullPinSound;
        [RTTI.Member(8, 0x350, "Animation")] public Ref<CurveResource> ThrowTypeCurve;
        [RTTI.Member(9, 0x358, "EjectSettings")] public Ref<CurveResource> ThrowForceChargeCurve;
        [RTTI.Member(10, 0x360, "EjectSettings")] public Ref<CurveResource> FirePressedSpreadCurve;
        [RTTI.Member(11, 0x368, "Animation")] public float SpinAnimationSpeed;
        [RTTI.Member(12, 0x36C, "Logic")] public bool SwitchWeaponAfterThrowing;
        [RTTI.Member(13, 0x36D, "Logic")] public bool CanUseGrabableObjects;
    }

    [RTTI.Serializable(0xF6CC1A58AC52A361)]
    public class InventoryUnlockResource : CareerUnlockResource
    {
        [RTTI.Member(0, 0x50)] public String Item;
        [RTTI.Member(1, 0x58)] public bool IsShared;
    }

    [RTTI.Serializable(0xAFC5DDA781803ADF)]
    public class InventoryWeapon : InventoryEntity
    {
    }

    [RTTI.Serializable(0x6372C6B62AAD7E9E)]
    public class InventoryWeaponRep : InventoryEntityRep
    {
    }

    [RTTI.Serializable(0xA69F36438B8E6B11)]
    public class InventoryWeaponResource : InventoryEntityResource
    {
        [RTTI.Member(0, 0x230, "AutoAim")] public Ref<AutoAimHull> AimHull;
        [RTTI.Member(1, 0x238, "AutoAim")] public Ref<CurveResource> AimShapeCurve;
        [RTTI.Member(2, 0x240, "Logic")] public bool ShouldRotateToAim;
        [RTTI.Member(3, 0x241, "Logic")] public bool CanBeUsedInfinitely;
        [RTTI.Member(4, 0x242, "Logic")] public bool ResetWeaponModeOnStow;
        [RTTI.Member(5, 0x244, "Handling")] public float CarrySpeedModifier;
        [RTTI.Member(6, 0x248, "AI")] public String CloseCombatWeaponId;
        [RTTI.Member(7, 0x250, "Logic")] public bool DropOnFireLastRound;
        [RTTI.Member(8, 0x251, "AutoAim")] public bool Enabled;
        [RTTI.Member(9, 0x258, "Logic")] public Ref<JoystickInputModifierResource> JoystickInputModifierResource;
        [RTTI.Member(10, 0x260, "Animation")] public Ref<AimLagSettings> AimLagSettings;
        [RTTI.Member(11, 0x268, "Logic")] public Ref<AimDeviationResource> AimDeviationResource;
        [RTTI.Member(12, 0x270, "Animation")] public float GestureRefocusTime;
        [RTTI.Member(13, 0x274, "Animation")] public float ToCombatSwitchTime;
        [RTTI.Member(14, 0x288, "Logic")] public bool CanOnlyFireAtHostiles;
        [RTTI.Member(15, 0x290, "Logic")] public Ref<RandomFireResource> OnDieRandomFireResource;
        [RTTI.Member(16, 0x2A0, "Animation")] public Mat44 HandBoneOffsetMatrix;
        [RTTI.Member(17, 0x2E0, "Logic")] public bool CanUseAimLock;
        [RTTI.Member(18, 0x2E1, "Logic")] public bool CanUseCrosshairLock;
        [RTTI.Member(19, 0x2E4, "Logic")] public float ZoomLockZoomDistanceOverride;
        [RTTI.Member(20, 0x2E8, "Logic")] public float ZoomLockUnzoomDistanceOverride;
        [RTTI.Member(21, 0x2F0, "AI")] public Ref<ContextualSpeechEvent> WeaponContextualSpeechEvent;
        [RTTI.Member(22, 0x2F8, "AI")] public bool IsSuitableForStaggerFire;
        [RTTI.Member(23, 0x2F9, "Logic")] public bool RequiresCombatToFire;
        [RTTI.Member(24, 0x2FA, "Logic")] public bool AllowHipFire;
        [RTTI.Member(25, 0x300, "HUD")] public Ref<HUDCrosshairSettings> CombatCrosshair;
    }

    [RTTI.Serializable(0x2DFB6AA524DE622C)]
    public class InverseWarpMountMode : MountMode
    {
    }

    [RTTI.Serializable(0x8A92864D1CAA8F61)]
    public class IsActivatorOfTypeAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String EntityType;
    }

    [RTTI.Serializable(0x4F9CB851980B1F12)]
    public class IsDamageTypeAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0xC8ADA94C16BE3BB5)]
    public class IsDeadAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0x64F939EBE0D29215)]
    public class IsEnemyOfInstigatorAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0xF818D0CC407945C)]
    public class IsInteractiveEntityEnabledAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0x208144B59CCA80BD)]
    public class IsMortallyWoundedAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0xF951C29DE65A8247)]
    public class IsOwnerAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0x9961DC4C6235F4F6)]
    public class IsPartDeadAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<DestructibilityPart> Part;
    }

    [RTTI.Serializable(0x13006153E80DBC12)]
    public class IsPlayerAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0xF004E9F7765E65D2)]
    public class IsSpecifiedEntityAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic", true)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x48, "Logic")] public GGUUID EntityResourceUUID;
        [RTTI.Member(2, 0x58, "Logic")] public String EntityName;
        [RTTI.Member(3, 0x60, "Logic")] public String EntityType;
    }

    [RTTI.Serializable(0x359B8490CB4D2179)]
    public class IsTrackingObjectiveAction : ConditionalAction
    {
    }

    [RTTI.Serializable(0xC9F1CC1AD078C37A)]
    public class IssueData : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Key;
        [RTTI.Member(1, 0x28)] public WString Assignee;
        [RTTI.Member(2, 0x30)] public WString Summary;
        [RTTI.Member(3, 0x38)] public WString Status;
        [RTTI.Member(4, 0x40)] public WString Priority;
        [RTTI.Member(5, 0x48)] public WorldPosition Location;
        [RTTI.Member(6, 0x60)] public WString Resolution;
        [RTTI.Member(7, 0x68)] public WString IssueType;
        [RTTI.Member(8, 0x70)] public WString CustomType;
    }

    [RTTI.Serializable(0xB6FF6796892286D4)]
    public class IssuePriorityMetadata : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public RGBAColor StatusColor;
        [RTTI.Member(1, 0x28)] public Array<uint8> IconPNG;
        [RTTI.Member(2, 0x38)] public WString Name;
        [RTTI.Member(3, 0x40)] public int ID;
    }

    [RTTI.Serializable(0x663849A65E983BB5)]
    public class IssueTrackingSettings : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String BaseAddress;
    }

    [RTTI.Serializable(0xF6BED8092FAD44D4)]
    public class IssueTrackingUser : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Name;
        [RTTI.Member(1, 0x28)] public String EmailAddress;
        [RTTI.Member(2, 0x30)] public WString DisplayName;
        [RTTI.Member(3, 0x38)] public bool Active;
    }

    [RTTI.Serializable(0xD6025BD5E0E3C0B5)]
    public class ItemDescriptionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEF4EF524BCFB1A68)]
    public class ItemDescriptionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> LocalizedItemName;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> LocalizedItemDescription;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<ItemPriceInfo> PriceInfo;
        [RTTI.Member(3, 0x40, "Logic")] public int ItemWeight;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<UITexture> UIIconInactiveTexture;
        [RTTI.Member(6, 0x58, "Logic")] public UUIDRef<UITexture> PreviewTexture;
        [RTTI.Member(7, 0x68, "Logic")] public Ref<LootItemDescriptionResource> LootItemDescriptionResource;
        [RTTI.Member(8, 0x70, "Logic")] public Ref<StatsDisplayResource> StatsDisplayResource;
        [RTTI.Member(9, 0x78, "Logic")] public Ref<MovieResource> Movie;
    }

    [RTTI.Serializable(0xDB4EA2690F974E8E)]
    public class ItemListRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public Array<Ref<ItemRestoreState>> Items;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public GGUUID ActiveItemId;
    }

    [RTTI.Serializable(0x83858BF1F03965F7)]
    public class ItemOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF94B7DDD3C5EE7F8)]
    public class ItemOverrideComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xA0CEA726B9DF97B7)]
    public class ItemPriceInfo : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int BuyPrice;
        [RTTI.Member(1, 0x2C, "Logic")] public int SellPrice;
    }

    [RTTI.Serializable(0x6C6F25D2EE5C4B04)]
    public class ItemQuestReward : QuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<EntityResource> Item;
        [RTTI.Member(1, 0x48, "Logic")] public int Amount;
        [RTTI.Member(2, 0x4C, "Logic")] public bool AllowOverflow;
    }

    [RTTI.Serializable(0x3D668F6CB69C6AA3)]
    public class ItemRecipe : CraftingRecipe
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<EntityResource> Item;
        [RTTI.Member(1, 0x48, "Logic")] public int Amount;
        [RTTI.Member(2, 0x4C, "Logic")] public int UpgradedAmount;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<MovieResource> Movie;
    }

    [RTTI.Serializable(0xDDDD9EEC6EBBF96)]
    public class ItemRestoreState : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public GGUUID ItemUUID;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public bool IsSceneObject;
        [RTTI.Member(2, 0x39, "StateSaving", true)] public bool IsCurrent;
        [RTTI.Member(3, 0x3C, "StateSaving", true)] public int EquipIndex;
        [RTTI.Member(4, 0x40, "StateSaving", true)] public Array<Ref<EquipSlotType>> EquipSlots;
        [RTTI.Member(5, 0x50, "StateSaving", true)] public Ref<EquipSlotType> CurrentEquipSlot;
        [RTTI.Member(6, 0x58, "StateSaving", true)] public float Amount;
        [RTTI.Member(7, 0x60, "StateSaving", true)] public StreamingRef<EntityResource> ItemResource;
        [RTTI.Member(8, 0x80, "StateSaving", true)] public Array<SocketedModificationItemRestoreState> SocketedModifications;
        [RTTI.Member(9, 0x90, "StateSaving", true)] public Array<StatModification> PermanentModifications;
        [RTTI.Member(10, 0xA0, "StateSaving", true)] public GGUUID QuestId;
    }

    [RTTI.Serializable(0xEAC9E6ADA9204DB)]
    public class JobQuestReward : QuestReward
    {
    }

    [RTTI.Serializable(0x99ED739351ED78EF)]
    public class JoinGameRequestKIN : MatchRequest
    {
        [RTTI.Member(0, 0x38)] public String BuildID;
        [RTTI.Member(1, 0x40)] public String PlaylistID;
        [RTTI.Member(2, 0x48)] public String GameID;
    }

    [RTTI.Serializable(0x9A836ECFD45C9C13)]
    public class JoinPlayerRequest : MatchRequest
    {
        [RTTI.Member(0, 0x38)] public String TargetOnlineID;
        [RTTI.Member(1, 0x40)] public bool MustJoinGroup;
    }

    [RTTI.Serializable(0xD7BC5E37D4EECD22)]
    public class JoinPlayerRequestKIN : JoinPlayerRequest
    {
        [RTTI.Member(0, 0x48)] public String BuildID;
    }

    [RTTI.Serializable(0x2333DE2EA1E43DAD)]
    public class JoinPlaylistMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String PlaylistID;
    }

    [RTTI.Serializable(0x1E45DAC5C8E62ADD)]
    public class Joint
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String Parent;
        [RTTI.Member(2, 0x10)] public int16 ParentIndex;
    }

    [RTTI.Serializable(0xB02A7BEE57269290)]
    public class JoystickActionsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xABAEC6ADDDCB6754)]
    public class JoystickActionsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<JoystickActionsPerFunction> JoystickActionsPerFunction;
    }

    [RTTI.Serializable(0x421CDA66390EC210)]
    public class JoystickActionsPerFunction
    {
        [RTTI.Member(0, 0x0)] public EDeviceFunction Function;
        [RTTI.Member(1, 0x8)] public CPtr<EntityAction> PressAction;
        [RTTI.Member(2, 0x10)] public CPtr<EntityAction> ReleaseAction;
        [RTTI.Member(3, 0x18)] public ESetFunctionHandled SetHandled;
    }

    [RTTI.Serializable(0xCA767EA87AEFC3A9)]
    public class JoystickInputLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xE2A3398FD2EBB9A2)]
    public class JoystickInputLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(2, 0x48, "Input")] public float HeadingSpeed;
        [RTTI.Member(3, 0x4C, "Input")] public FRange HeadingLimits;
        [RTTI.Member(4, 0x54, "Input")] public float PitchSpeed;
        [RTTI.Member(5, 0x58, "Input")] public FRange PitchLimits;
    }

    [RTTI.Serializable(0xAE40190A4BFA15E9)]
    public class JoystickInputModifier : CoreObject
    {
    }

    [RTTI.Serializable(0x61D0F98395FFF541)]
    public class JoystickInputModifierResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public float SoftlockConeAngle;
        [RTTI.Member(1, 0x2C, "General")] public float SoftlockConeAngleOffset;
        [RTTI.Member(2, 0x30, "General")] public Ref<CurveResource> SoftlockDistanceCurve;
        [RTTI.Member(3, 0x38, "General")] public Ref<CurveResource> SoftlockLookSpeedCurve;
        [RTTI.Member(4, 0x40, "General")] public float SoftlockPitchModifier;
        [RTTI.Member(5, 0x48, "General")] public Ref<CurveResource> DelayCurve;
        [RTTI.Member(6, 0x50, "General")] public Ref<CurveResource> AimAssistDistanceCurve;
        [RTTI.Member(7, 0x58, "General")] public Ref<CurveResource> AimAssistSpeedCurve;
        [RTTI.Member(8, 0x60, "General")] public float AimConeAngle;
        [RTTI.Member(9, 0x64, "General")] public float AimConeAngleOffset;
        [RTTI.Member(10, 0x68, "ShootAssist")] public float ConeAngle;
        [RTTI.Member(11, 0x6C, "ShootAssist")] public float ConeAngleOffset;
        [RTTI.Member(12, 0x70, "ShootAssist")] public Ref<CurveResource> ShootAssist_AssistCurve;
        [RTTI.Member(13, 0x78, "ZoomAssist")] public Ref<CurveResource> ZoomAssist_AssistCurve;
        [RTTI.Member(14, 0x80, "ZoomAssist")] public Ref<CurveResource> AimShapeCurve;
        [RTTI.Member(15, 0x88, "General")] public float MaxAimAssistFactorAcceleration;
        [RTTI.Member(16, 0x8C, "General")] public float MaxSoftLockFactorAcceleration;
        [RTTI.Member(17, 0x90, "General")] public float MinimalLookSpeedForAimAssist;
        [RTTI.Member(18, 0x94, "AimLock")] public float UnaimedRange;
        [RTTI.Member(19, 0x98, "AimLock")] public float AimedRange;
        [RTTI.Member(20, 0x9C, "AimLock")] public float LockTime;
    }

    [RTTI.Serializable(0x494E29BE191ED06C)]
    public class JumpEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7770B9303364364)]
    public class JumpEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LabelEventResource> JumpLabelResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LabelEventResource> ReturnLabelResource;
        [RTTI.Member(2, 0x48, "Logic")] public int BlendFrames;
    }

    [RTTI.Serializable(0x7790D2FF99295E86)]
    public class KeyboardMappingViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xA4BF7CC72DB52AAD)]
    public class KickPlayerRequest : MatchMessage
    {
        [RTTI.Member(0, 0x28)] public String TargetID;
        [RTTI.Member(1, 0x30)] public String GameID;
        [RTTI.Member(2, 0x38)] public bool CancelVote;
    }

    [RTTI.Serializable(0x5EEDE64ECC7617A5)]
    public class KickPlayerRequestKIN : KickPlayerRequest
    {
        [RTTI.Member(0, 0x40)] public String PlaylistID;
    }

    [RTTI.Serializable(0xFEB6DDDA03F788C8)]
    public class KickVotingManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xE475C09892E8627A)]
    public class KillEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Suicide;
    }

    [RTTI.Serializable(0xE2A48CBEC31ADED9)]
    public class KillEventResource : RemoveActorEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<DestructibilityPart> Part;
        [RTTI.Member(2, 0x48, "Logic")] public bool ShowEffects;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<LocatorResource> SourceLocatorResource;
        [RTTI.Member(4, 0x58, "Logic")] public float ImpulseModule;
    }

    [RTTI.Serializable(0xA690CC0B8AFCCEFD)]
    public class KillPartsAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(1, 0x40, "Logic")] public bool OverrideDamageType;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0x8CA56F90AA624EA5)]
    public class KnockDownDismountMode : DismountMode
    {
    }

    [RTTI.Serializable(0x646E269B3B24F112)]
    public class KnockDownStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x30F8029A0A88A5FD)]
    public class KnockDownStateComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String AnimationTag;
        [RTTI.Member(1, 0x30, "Logic")] public String GetUpAnimationTag;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<KnockDownStateEntryResource> DefaultKnockDown;
    }

    [RTTI.Serializable(0x648ED53C5964B709)]
    public class KnockDownStateEntry
    {
    }

    [RTTI.Serializable(0x341E8E74D962F01E)]
    public class KnockDownStateEntryResource : Resource
    {
        [RTTI.Member(0, 0x28, "AI")] public bool DisablePerception;
        [RTTI.Member(1, 0x30, "Logic")] public String Animation;
        [RTTI.Member(2, 0x38, "Logic")] public float DamageThreshold;
        [RTTI.Member(3, 0x3C, "Logic")] public float ActivationTimeOut;
        [RTTI.Member(4, 0x40, "Logic")] public Array<Ref<KnockDownStateEntryResource>> AllowedTransitions;
    }

    [RTTI.Serializable(0xE3A8E97DAEAD5932)]
    public class LabelEventResource : EventResource
    {
    }

    [RTTI.Serializable(0xFC9035D76544E33B)]
    public class LaserBeamInstance : GeometryObject
    {
    }

    [RTTI.Serializable(0x1CAF6F346E931154)]
    public class LaserBeamResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float BeamWidth;
        [RTTI.Member(1, 0x2C, "Logic")] public float DotRadius;
        [RTTI.Member(2, 0x30, "Representation")] public Ref<CurveResource> FadeOverDistanceCurve;
        [RTTI.Member(3, 0x38, "Representation")] public Ref<CurveResource> FadeOverDistanceCurveFirstPerson;
        [RTTI.Member(4, 0x40, "Representation")] public String RangeShaderVariable;
        [RTTI.Member(5, 0x48, "Representation")] public float RangeShaderThreshold;
        [RTTI.Member(6, 0x50, "Representation")] public Ref<RenderEffectResource> BeamRenderEffectsResource;
        [RTTI.Member(7, 0x58, "Representation")] public Ref<RenderEffectResource> DotRenderEffectsResource;
        [RTTI.Member(8, 0x60, "Representation")] public RGBAColor Color;
    }

    [RTTI.Serializable(0x9259C287E2FE1674)]
    public class LaserTriggerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x86D7F8C62C0C464A)]
    public class LaserTriggerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x9464FE6E52276094)]
    public class LaserTriggerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "VisualEffects")] public Ref<LaserBeamResource> LaserBeamResource;
        [RTTI.Member(1, 0x30, "VisualEffects")] public Ref<LightResource> LaserLightResource;
        [RTTI.Member(2, 0x38, "VisualEffects")] public Ref<LightResource> BlindingLaserLightResource;
        [RTTI.Member(3, 0x40, "VisualEffects")] public Ref<LaserBeamResource> FriendlyLaserBeamResource;
        [RTTI.Member(4, 0x48, "VisualEffects")] public Ref<LightResource> FriendlyLaserLightResource;
        [RTTI.Member(5, 0x50, "VisualEffects")] public Ref<LightResource> FriendlyBlindingLaserLightResource;
        [RTTI.Member(6, 0x58, "Logic")] public float MaxLaserLength;
        [RTTI.Member(7, 0x5C, "Logic")] public float LaserFalloffLength;
        [RTTI.Member(8, 0x60, "Logic")] public Vec3 LaserDirection;
        [RTTI.Member(9, 0x70, "Logic")] public Vec3 LaserOffset;
        [RTTI.Member(10, 0x80, "Logic")] public float SafetyTime;
        [RTTI.Member(11, 0x88, "Logic")] public CPtr<EntityAction> TriggerAction;
        [RTTI.Member(12, 0x90, "Logic")] public CPtr<EntityAction> TriggerActionOnTriggerer;
        [RTTI.Member(13, 0x98, "Logic")] public bool TriggeredByDeadEntities;
        [RTTI.Member(14, 0x99, "Logic")] public bool OnlyTriggeredByEnemies;
        [RTTI.Member(15, 0xA0, "Logic")] public Array<String> OnlyTriggeredByEntityTypes;
        [RTTI.Member(16, 0xC0, "Logic")] public float CoolDowntime;
        [RTTI.Member(17, 0xC8, "Logic")] public String HelperName;
        [RTTI.Member(18, 0xD0, "VisualEffects")] public bool CanBlindFriendlies;
        [RTTI.Member(19, 0xD2, "VisualEffects")] public MaterialType ImpactMaterialType;
    }

    [RTTI.Serializable(0x36F087322F622F92)]
    public class LayerGroupMask
    {
        [RTTI.Member(0, 0x0)] public uint64_PLACEMENT_LAYER_MASK_SIZE<uint64> MaskData;
    }

    [RTTI.Serializable(0xAC07752A8176B520)]
    public class LayerTag : Tag
    {
    }

    [RTTI.Serializable(0xDBB7D4FF9A3A8388)]
    public class LayeredIrradianceData : CoreObject
    {
        [RTTI.Member(0, 0x20)] public LightCollectionIdentifier Identifier;
        [RTTI.Member(1, 0x40)] public BoundingBox3 Bounds;
        [RTTI.Member(2, 0x70)] public Ref<Texture> ProbeAxis;
        [RTTI.Member(3, 0x80)] public Array<float> HeightDeltaRange;
        [RTTI.Member(4, 0x90)] public Ref<Texture> ProbeColorAleph;
        [RTTI.Member(5, 0x98)] public Ref<Texture> ProbeColorBeth;
        [RTTI.Member(6, 0xA0)] public Vec3 ProbeColorReconstructionScale;
    }

    [RTTI.Serializable(0x9C495FE1CA4D4894)]
    public class LayeredIrradianceDataForRegion : CoreObject
    {
        [RTTI.Member(0, 0x20)] public ELightbakeZoneRestriction LightbakeZoneRestriction;
        [RTTI.Member(1, 0x30)] public BoundingBox3 Region;
        [RTTI.Member(2, 0x50)] public WorldTransform WorldToLocal;
        [RTTI.Member(3, 0x90)] public WorldTransform LocalToWorld;
        [RTTI.Member(4, 0xD0)] public BoundingBox3 LocalBounds;
        [RTTI.Member(5, 0xF0)] public float CompositeOrder;
        [RTTI.Member(6, 0xF8)] public Array<Ref<LayeredIrradianceData>> IrradianceDataList;
        [RTTI.Member(7, 0x108)] public Ref<Texture> SharedSkyVis;
        [RTTI.Member(8, 0x110)] public Ref<Texture> SharedProbeHeightDelta;
        [RTTI.Member(9, 0x118)] public Array<float> SharedHeightDeltaRange;
        [RTTI.Member(10, 0x128)] public float ColumnSpacing;
    }

    [RTTI.Serializable(0x8C400B44F1B90B56)]
    public class LayeredIrradianceDataForTile : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<LayeredIrradianceDataForRegion>> LayeredIrradianceDataForRegionList;
    }

    [RTTI.Serializable(0xC5AFA4C8FD5DBB74)]
    public class LeadingMagnetComponent : CameraMagnetComponent
    {
    }

    [RTTI.Serializable(0x63871501C8117484)]
    public class LeadingMagnetComponentResource : CameraMagnetComponentResource
    {
        [RTTI.Member(0, 0x80, "Range")] public Ref<CurveResource> HeadingToRangeScaler;
        [RTTI.Member(1, 0x88, "Range")] public Ref<CurveResource> PitchToRangeScaler;
        [RTTI.Member(2, 0x90, "Range")] public Ref<CurveResource> SpeedToRangeScaler;
        [RTTI.Member(3, 0x98, "Height")] public Ref<CurveResource> HeadingToHeightScaler;
        [RTTI.Member(4, 0xA0, "Height")] public Ref<CurveResource> PitchToHeightScaler;
        [RTTI.Member(5, 0xA8, "Height")] public Ref<CurveResource> SpeedToHeightScaler;
        [RTTI.Member(6, 0xB0, "Elevation")] public EPhysicsCollisionLayerGame ElevationCollisionLayer;
        [RTTI.Member(7, 0xB4, "Elevation")] public float MaxElevationOffset;
    }

    [RTTI.Serializable(0x143C887474B6EEB5)]
    public class LegendIcon
    {
        [RTTI.Member(0, 0x0)] public ELegendButton Button;
        [RTTI.Member(1, 0x18)] public Ref<MenuTextureResource> Texture;
        [RTTI.Member(2, 0x30)] public Ref<MenuTextureResource> PressAndHoldTexture;
        [RTTI.Member(3, 0x38)] public EFloating Alignment;
    }

    [RTTI.Serializable(0x6991490159C0C003)]
    public class LegendTag : VisualTag
    {
    }

    [RTTI.Serializable(0x9A0443B5BE0812E2)]
    public class LegendWidget : Widget
    {
    }

    [RTTI.Serializable(0xD0F253D126FA1987)]
    public class LensFlareApertureSettings
    {
        [RTTI.Member(0, 0x0, "Shape")] public EApertureShape Type;
        [RTTI.Member(1, 0x8, "Shape")] public String TextureName;
        [RTTI.Member(2, 0x10, "Shape")] public float Orientation;
        [RTTI.Member(3, 0x14, "Shape")] public float OrientationRandom;
        [RTTI.Member(4, 0x18, "Shape")] public int PolygonSides;
        [RTTI.Member(5, 0x1C, "Shape")] public float PolygonRoundness;
        [RTTI.Member(6, 0x20, "Shape")] public float BladeNotching;
        [RTTI.Member(7, 0x24, "Appearance")] public float Smoothness;
        [RTTI.Member(8, 0x28, "Appearance")] public float SmoothnessRandom;
        [RTTI.Member(9, 0x2C, "Appearance")] public float OutlineIntensity;
        [RTTI.Member(10, 0x30, "Appearance")] public float OutlineThickness;
        [RTTI.Member(11, 0x34, "Appearance")] public float OutlineFeathering;
    }

    [RTTI.Serializable(0x7DC16885E68E025C)]
    public class LensFlareCompletionSettings
    {
        [RTTI.Member(0, 0x0)] public float Completion;
        [RTTI.Member(1, 0x4)] public float Feathering;
        [RTTI.Member(2, 0x8)] public float Rotation;
        [RTTI.Member(3, 0x10)] public ECompletionAutoRotate AutoRotate;
    }

    [RTTI.Serializable(0x3EC86A08DACE3202)]
    public class LensFlareElementResource : Resource
    {
        [RTTI.Member(0, 0x30, "Settings")] public LensFlareSettings GlobalSettings;
        [RTTI.Member(1, 0x80, "Settings")] public LensFlareElementSettings Settings;
        [RTTI.Member(2, 0x140, "Settings")] public LensFlareTriggerSettings TriggerSettings;
        [RTTI.Member(3, 0x1C0, "Settings")] public LensFlareCompletionSettings CompletionSettings;
        [RTTI.Member(4, 0x1D8, "Runtime")] public uint PointCount;
        [RTTI.Member(5, 0x1E0, "Runtime")] public Ref<ShaderResource> Shader;
        [RTTI.Member(6, 0x380, "Runtime")] public Array<uint32> ColorTableData;
        [RTTI.Member(7, 0x390, "Runtime")] public Ref<Texture> NoiseTable;
        [RTTI.Member(8, 0x398, "Runtime")] public Ref<Texture> ColorTable;
    }

    [RTTI.Serializable(0x1971EC80A72F7906)]
    public class LensFlareElementSettings
    {
        [RTTI.Member(0, 0x0, "Common")] public float Brightness;
        [RTTI.Member(1, 0x4, "Common")] public float Scale;
        [RTTI.Member(2, 0x10, "Common")] public Vec2 Stretch;
        [RTTI.Member(3, 0x20, "Common")] public Vec2 Distance;
        [RTTI.Member(4, 0x30, "Common")] public float Rotation;
        [RTTI.Member(5, 0x34, "Common")] public EElementAutoRotate AutoRotate;
        [RTTI.Member(6, 0x40, "Common")] public Vec2 Offset;
        [RTTI.Member(7, 0x50, "Common")] public EElementTranslation Translation;
        [RTTI.Member(8, 0x60, "Common")] public Vec2 CustomTranslation;
        [RTTI.Member(9, 0x70, "Common")] public float AspectRatio;
        [RTTI.Member(10, 0x74, "Colour")] public EElementColor ColorSource;
        [RTTI.Member(11, 0x80, "Colour")] public FRGBAColor Color1;
        [RTTI.Member(12, 0x90, "Colour")] public FRGBAColor Color2;
        [RTTI.Member(13, 0xA0, "Colour")] public float GradientLoops;
        [RTTI.Member(14, 0xA4, "Colour")] public float GradientOffset;
        [RTTI.Member(15, 0xA8, "Colour")] public bool ReverseGradient;
        [RTTI.Member(16, 0xAC, "Colour")] public float ColorRandom;
        [RTTI.Member(17, 0xB0, "Advanced")] public bool IgnoreGlobalBrightness;
        [RTTI.Member(18, 0xB1, "Advanced")] public bool IgnoreGlobalScale;
        [RTTI.Member(19, 0xB2, "Advanced")] public bool IgnoreGlobalRotation;
        [RTTI.Member(20, 0xB3, "Advanced")] public bool Ignore3DPerspective;
    }

    [RTTI.Serializable(0x6D404AF0B8437F42)]
    public class LensFlareGlintResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareGlintSettings GlintSettings;
    }

    [RTTI.Serializable(0xC1F532571E86FA9)]
    public class LensFlareGlintSettings
    {
        [RTTI.Member(0, 0x0, "Shape")] public int Complexity;
        [RTTI.Member(1, 0x4, "Shape")] public float Length;
        [RTTI.Member(2, 0x8, "Shape")] public float LengthRandom;
        [RTTI.Member(3, 0xC, "Shape")] public float Thickness;
        [RTTI.Member(4, 0x10, "Shape")] public float SpacingRandom;
        [RTTI.Member(5, 0x14, "Shape")] public float Orientation;
        [RTTI.Member(6, 0x18, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0x5C348DAA983F6589)]
    public class LensFlareGlowResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareGlowSettings GlowSettings;
    }

    [RTTI.Serializable(0x69330A82C538A4CA)]
    public class LensFlareGlowSettings
    {
        [RTTI.Member(0, 0x0, "Appearance")] public float Gamma;
    }

    [RTTI.Serializable(0x3285C16420FEF38B)]
    public class LensFlareHoopResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareHoopSettings HoopSettings;
    }

    [RTTI.Serializable(0x632748574D0E17AD)]
    public class LensFlareHoopSettings
    {
        [RTTI.Member(0, 0x0, "Appearance")] public int Complexity;
        [RTTI.Member(1, 0x4, "Appearance")] public bool Continuous;
        [RTTI.Member(2, 0x8, "Appearance")] public float Detail;
        [RTTI.Member(3, 0xC, "Appearance")] public float Length;
        [RTTI.Member(4, 0x10, "Appearance")] public float LineThickness;
        [RTTI.Member(5, 0x14, "Appearance")] public float LineSpacing;
        [RTTI.Member(6, 0x18, "Appearance")] public int RandomSeed;
    }

    [RTTI.Serializable(0x5BF9D13EC30DC6A4)]
    public class LensFlareInstance : WorldNode
    {
        [RTTI.Member(0, 0x68, "General")] public Ref<LensFlareResource> Resource;
        [RTTI.Member(1, 0x70, "General")] public CPtr<Light> Following;
        [RTTI.Member(2, 0x78, "General")] public float Brightness;
        [RTTI.Member(3, 0x7C, "General")] public bool Background;
        [RTTI.Member(4, 0x80, "General")] public Vec3 Offset;
        [RTTI.Member(5, 0x90, "General")] public FRGBAColor Tint;
        [RTTI.Member(6, 0xA0, "General")] public float Scale;
        [RTTI.Member(7, 0xA4, "Advanced")] public float VisibilityConeInnerAngle;
        [RTTI.Member(8, 0xA8, "Advanced")] public float VisibilityConeOuterAngle;
        [RTTI.Member(9, 0xAC, "Advanced")] public float OffscreenFadeInner;
        [RTTI.Member(10, 0xB0, "Advanced")] public float OffscreenFadeOuter;
        [RTTI.Member(11, 0xB4, "Advanced")] public float OcclusionSize;
        [RTTI.Member(12, 0xB8, "Advanced")] public float DepthBias;
        [RTTI.Member(13, 0xBC, "Advanced")] public bool UseLightColor;
        [RTTI.Member(14, 0xC0, "Internal")] public Vec2 VisibilityConeScaleBias;
        [RTTI.Member(15, 0xD0, "Internal")] public Vec2 OffscreenFadeScaleBias;
    }

    [RTTI.Serializable(0x24359949D42E2619)]
    public class LensFlareIrisResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareIrisSettings IrisSettings;
        [RTTI.Member(1, 0x3C0, "Settings")] public LensFlareApertureSettings ApertureSettings;
        [RTTI.Member(2, 0x3F8, "Settings")] public bool Singular;
        [RTTI.Member(3, 0x400, "Settings")] public Ref<Texture> Texture;
    }

    [RTTI.Serializable(0x4A58091EECF1077C)]
    public class LensFlareIrisSettings
    {
        [RTTI.Member(0, 0x0, "Layout")] public int ObjectCount;
        [RTTI.Member(1, 0x4, "Layout")] public float Spread;
        [RTTI.Member(2, 0x8, "Variations")] public float SpreadRandom;
        [RTTI.Member(3, 0xC, "Variations")] public float ScaleRandom;
        [RTTI.Member(4, 0x10, "Variations")] public float BrightnessRandom;
        [RTTI.Member(5, 0x14, "Variations")] public float RotationRandom;
        [RTTI.Member(6, 0x18, "Variations")] public float OffsetRandom;
        [RTTI.Member(7, 0x1C, "Variations")] public int RandomSeed;
    }

    [RTTI.Serializable(0x65A69DA01B48EFE5)]
    public class LensFlareManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x52DE84B2EA55ADB)]
    public class LensFlareResource : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public LensFlareSettings Settings;
        [RTTI.Member(1, 0x80, "General")] public Array<Ref<LensFlareElementResource>> Elements;
    }

    [RTTI.Serializable(0xB9646D07855017E2)]
    public class LensFlareRingResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareRingSettings RingSettings;
    }

    [RTTI.Serializable(0xA06441991E6788DE)]
    public class LensFlareRingSettings
    {
        [RTTI.Member(0, 0x0, "Shape")] public float Thickness;
        [RTTI.Member(1, 0x4, "Shape")] public float InsideFeathering;
        [RTTI.Member(2, 0x8, "Shape")] public float OutsideFeathering;
        [RTTI.Member(3, 0xC, "Shape")] public int DummyToFixEditor;
    }

    [RTTI.Serializable(0xCC7A242870EF9B2E)]
    public class LensFlareSettings
    {
        [RTTI.Member(0, 0x0, "General")] public float Scale;
        [RTTI.Member(1, 0x4, "General")] public float AspectRatio;
        [RTTI.Member(2, 0x10, "General")] public FRGBAColor Color;
        [RTTI.Member(3, 0x20, "General")] public int Seed;
        [RTTI.Member(4, 0x24, "Matte")] public int MatteBoxShape;
        [RTTI.Member(5, 0x28, "Matte")] public float MatteBoxStart;
        [RTTI.Member(6, 0x2C, "Matte")] public float MatteBoxFade;
        [RTTI.Member(7, 0x30, "Advanced")] public float Brightness;
        [RTTI.Member(8, 0x34, "Advanced")] public float OffscreenFadeInner;
        [RTTI.Member(9, 0x38, "Advanced")] public float OffscreenFadeOuter;
        [RTTI.Member(10, 0x3C, "Advanced")] public float VisibilityConeInnerAngle;
        [RTTI.Member(11, 0x40, "Advanced")] public float VisibilityConeOuterAngle;
        [RTTI.Member(12, 0x44, "Advanced")] public float OcclusionSize;
        [RTTI.Member(13, 0x48, "Advanced")] public float DepthBias;
        [RTTI.Member(14, 0x4C, "Advanced")] public bool UseLightColor;
    }

    [RTTI.Serializable(0xB7832CC4E169AC5B)]
    public class LensFlareShimmerResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareShimmerSettings ShimmerSettings;
    }

    [RTTI.Serializable(0xC1FAB9D9FECDBCBD)]
    public class LensFlareShimmerSettings
    {
        [RTTI.Member(0, 0x0, "Shape")] public int Complexity;
        [RTTI.Member(1, 0x4, "Shape")] public float Detail;
        [RTTI.Member(2, 0x8, "Shape")] public float Orientation;
        [RTTI.Member(3, 0xC, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0x22114FCB99B88A)]
    public class LensFlareSparkleResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareSparkleSettings SparkleSettings;
    }

    [RTTI.Serializable(0x912A883CA5BA8862)]
    public class LensFlareSparkleSettings
    {
        [RTTI.Member(0, 0x0, "Appearance")] public int Complexity;
        [RTTI.Member(1, 0x4, "Appearance")] public float Length;
        [RTTI.Member(2, 0x8, "Appearance")] public float LengthRandom;
        [RTTI.Member(3, 0xC, "Appearance")] public float Thickness;
        [RTTI.Member(4, 0x10, "Appearance")] public float ThicknessRandom;
        [RTTI.Member(5, 0x14, "Appearance")] public float BrightnessRandom;
        [RTTI.Member(6, 0x18, "Appearance")] public float Spread;
        [RTTI.Member(7, 0x1C, "Appearance")] public float SpreadRandom;
        [RTTI.Member(8, 0x20, "Appearance")] public float SpacingRandom;
        [RTTI.Member(9, 0x24, "Appearance")] public float ShapeOrientation;
        [RTTI.Member(10, 0x28, "Appearance")] public int RandomSeed;
    }

    [RTTI.Serializable(0xE07848EA01CCC566)]
    public class LensFlareSpikeBallResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareSpikeBallSettings SpikeBallSettings;
    }

    [RTTI.Serializable(0x661E1B1BC0E82E47)]
    public class LensFlareSpikeBallSettings
    {
        [RTTI.Member(0, 0x0, "Shape")] public int Complexity;
        [RTTI.Member(1, 0x4, "Shape")] public float Length;
        [RTTI.Member(2, 0x8, "Shape")] public float LengthRandom;
        [RTTI.Member(3, 0xC, "Shape")] public float Thickness;
        [RTTI.Member(4, 0x10, "Shape")] public float ThicknessRandom;
        [RTTI.Member(5, 0x14, "Shape")] public float BrightnessRandom;
        [RTTI.Member(6, 0x18, "Shape")] public float SpacingRandom;
        [RTTI.Member(7, 0x1C, "Shape")] public float Orientation;
        [RTTI.Member(8, 0x20, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0x9BE462083026FD67)]
    public class LensFlareStreakResource : LensFlareElementResource
    {
        [RTTI.Member(0, 0x3A0, "Settings")] public LensFlareStreakSettings StreakSettings;
    }

    [RTTI.Serializable(0x48FCC62C2D25854C)]
    public class LensFlareStreakSettings
    {
        [RTTI.Member(0, 0x0, "Shape")] public float Length;
        [RTTI.Member(1, 0x4, "Shape")] public float Thickness;
        [RTTI.Member(2, 0x8, "Shape")] public float CoreIntensity;
        [RTTI.Member(3, 0xC, "Shape")] public float Symmetry;
        [RTTI.Member(4, 0x10, "Shape")] public float FanEnds;
        [RTTI.Member(5, 0x14, "Shape")] public float FanFeathering;
        [RTTI.Member(6, 0x18, "Shape")] public int ReplicatorCopies;
        [RTTI.Member(7, 0x1C, "Shape")] public float ReplicatorAngle;
        [RTTI.Member(8, 0x20, "Shape")] public float ScaleRandom;
        [RTTI.Member(9, 0x24, "Shape")] public float SpacingRandom;
        [RTTI.Member(10, 0x28, "Shape")] public int RandomSeed;
    }

    [RTTI.Serializable(0x8D2905DDC96AB72)]
    public class LensFlareTriggerSettings
    {
        [RTTI.Member(0, 0x0, "Effects")] public bool EnableTrigger;
        [RTTI.Member(1, 0x4, "Effects")] public float BrightnessOffset;
        [RTTI.Member(2, 0x8, "Effects")] public float ScaleOffset;
        [RTTI.Member(3, 0x10, "Effects")] public Vec2 StretchOffset;
        [RTTI.Member(4, 0x20, "Effects")] public float RotationOffset;
        [RTTI.Member(5, 0x30, "Effects")] public FRGBAColor ColorShift;
        [RTTI.Member(6, 0x40, "Effects")] public ELensFlareTriggerType TriggerType;
        [RTTI.Member(7, 0x44, "Effects")] public ELensFlareTriggerMode TriggerMode;
        [RTTI.Member(8, 0x48, "Shape")] public bool InvertTrigger;
        [RTTI.Member(9, 0x4C, "Shape")] public float BorderWidth;
        [RTTI.Member(10, 0x50, "Shape")] public float Expansion;
        [RTTI.Member(11, 0x54, "Shape")] public float InnerFalloffRange;
        [RTTI.Member(12, 0x58, "Shape")] public float OuterFalloffRange;
        [RTTI.Member(13, 0x5C, "Shape")] public ELensFlareTriggerFalloff FalloffType;
        [RTTI.Member(14, 0x60, "Shape")] public Vec2 TriggerStretch;
        [RTTI.Member(15, 0x70, "Shape")] public Vec2 TriggerOffset;
    }

    [RTTI.Serializable(0x8EE8B64CC2B58D30)]
    public class Level : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x28, "General")] public EEntityUpdateFrequency UpdateFrequency;
        [RTTI.Member(2, 0x2C, "General")] public float BroadPhaseSize;
        [RTTI.Member(3, 0x30, "General")] public int MaxPhysicsBodies;
        [RTTI.Member(4, 0x34, "General")] public int MaxPhysicsMotions;
        [RTTI.Member(5, 0x38, "General")] public WorldPosition BroadPhaseOrigin;
        [RTTI.Member(6, 0x50, "General")] public WorldBoundingBox3 WorldBounds;
        [RTTI.Member(7, 0x80, "General")] public StreamingRef<LevelData> LevelData;
    }

    [RTTI.Serializable(0x619D58A19F15144)]
    public class LevelBasedXpReward : Resource
    {
        [RTTI.Member(0, 0x28, "XpPerLevel")] public Array<int> XpPerLevel;
    }

    [RTTI.Serializable(0x70540C4A1D6A2F97)]
    public class LevelData : CoreObject
    {
        [RTTI.Member(0, 0x20, "PlayGo")] public Ref<CollisionTrigger> InitialArea;
        [RTTI.Member(1, 0x28, "PlayGo")] public Ref<CollisionTrigger> HighDetailArea;
        [RTTI.Member(2, 0x30, "General")] public Array<Ref<StreamingStrategyResource>> StrategyResources;
        [RTTI.Member(3, 0x40, "DLC")] public Array<Ref<StreamingStrategyResource>> StrategyResourcesNonDLC1;
        [RTTI.Member(4, 0x50, "DLC")] public Array<Ref<StreamingStrategyResource>> StrategyResourcesDLC1;
        [RTTI.Member(5, 0x60, "DLC")] public Ref<GraphProgramResource> DLCProgramResource;
    }

    [RTTI.Serializable(0x403AEDA2FF627F90)]
    public class LevelGroup : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<Level>> Levels;
    }

    [RTTI.Serializable(0x74EC162A809DB5B)]
    public class LevelSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Player")] public Array<PlayerCharacterEntry> PlayerCharacters;
        [RTTI.Member(1, 0x38, "World")] public Ref<WorldStateResource> WorldState;
        [RTTI.Member(2, 0x40, "World")] public Ref<CollectableManagerResource> CollectableManager;
        [RTTI.Member(3, 0x48, "Map")] public Ref<EmbeddedFileResource> SessionImage;
        [RTTI.Member(4, 0x50, "SpawnMap")] public float Heading;
        [RTTI.Member(5, 0x54, "MissionDelays")] public float PreMissionDelay;
        [RTTI.Member(6, 0x58, "MissionDelays")] public float PostMissionDelay;
        [RTTI.Member(7, 0x60, "PostProcess")] public Ref<PostProcessSettingsResource> Settings;
        [RTTI.Member(8, 0x68, "HDROutput")] public float ShoulderBoost;
        [RTTI.Member(9, 0x6C, "HDROutput")] public float ShoulderSat;
        [RTTI.Member(10, 0x70, "HDROutput")] public float ShoulderMaxSat;
        [RTTI.Member(11, 0x78, "Effects")] public Ref<ScreenEffectResource> HealthScreenEffectResource;
        [RTTI.Member(12, 0x80, "Effects")] public Ref<ScreenEffectResource> MissionFailedScreenEffectResource;
        [RTTI.Member(13, 0x88, "Effects")] public Ref<AnimatedScreenEffectResource> FadeOutScreenEffectResource;
        [RTTI.Member(14, 0x90, "Effects")] public Ref<AnimatedScreenEffectResource> FadeInScreenEffectResource;
        [RTTI.Member(15, 0x98, "Effects")] public Ref<AnimatedScreenEffectResource> FellThroughWorldEffectResource;
        [RTTI.Member(16, 0xA0, "Effects")] public Ref<AnimatedScreenEffectResource> LoadingFadeInEffectResource;
        [RTTI.Member(17, 0xA8, "Effects")] public Ref<ImpactEffectResourceCollection> ImpactEffectResourceCollection;
        [RTTI.Member(18, 0xB0, "Effects")] public Ref<AuroraStaticSettings> AuroraSettings;
        [RTTI.Member(19, 0xB8, "View")] public float SplitscreenLODMultOverride;
        [RTTI.Member(20, 0xC0, "Effects")] public Ref<Texture> FogHeightMap;
        [RTTI.Member(21, 0xD0, "Effects")] public BoundingBox3 FogHeightMapBounds;
        [RTTI.Member(22, 0xF0, "ForceFieldSettings")] public Ref<ForceFieldSpringSettings> SpringSettings;
        [RTTI.Member(23, 0xF8, "ForceFieldSettings")] public Ref<ForceFieldManagerSettings> ForcefieldManagerSettings;
        [RTTI.Member(24, 0x100, "LocalInteractionSettings")] public Ref<SnowInteractionSettings> SnowInteractionSettings;
    }

    [RTTI.Serializable(0xD64646B44888B663)]
    public class LevelingCareerUnlockResource : CareerUnlockResource
    {
        [RTTI.Member(0, 0x50)] public Array<Ref<CareerUnlockResource>> CareerUnlockLevels;
    }

    [RTTI.Serializable(0xB2DA9E5EEA363172)]
    public class Light : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
        [RTTI.Member(1, 0xD0, "Color")] public FRGBAColor LightColor;
        [RTTI.Member(2, 0xE0, "Color")] public float Intensity;
        [RTTI.Member(3, 0xE4, "Interactivity")] public ELayerOperation LayerOp;
        [RTTI.Member(4, 0xE8, "Interactivity")] public bool CastShadows;
        [RTTI.Member(5, 0xEC, "Interactivity")] public ECastingShadowQuality CastingShadowQuality;
        [RTTI.Member(6, 0xF0, "Interactivity")] public EForwardShadowCastMode ForwardShadowCastMode;
        [RTTI.Member(7, 0xF4, "Interactivity")] public bool UsePreciseRendering;
        [RTTI.Member(8, 0xF5, "Interactivity")] public bool AffectFirstPersonOnly;
        [RTTI.Member(9, 0xF8, "General")] public EFalloffType FalloffType;
        [RTTI.Member(10, 0xFC, "General")] public ELightInfluenceAccuracy InfluenceAccuracy;
        [RTTI.Member(11, 0x110, "General")] public Vec4 AreaLightParams;
        [RTTI.Member(12, 0x120, "General")] public Ref<LightResource> Resource;
        [RTTI.Member(13, 0x128, "Attachments")] public Ref<LensFlareInstance> LensFlare;
        [RTTI.Member(14, 0x134, "General")] public float VolumeLightAmount;
        [RTTI.Member(15, 0x138, "General")] public float VolumeLightAmountMinScale;
        [RTTI.Member(16, 0x13C, "General")] public int VolumeLightSampleCount;
        [RTTI.Member(17, 0x140, "General")] public float VolumeHenyeyGreensteinG;
        [RTTI.Member(18, 0x144, "General")] public FRange DistanceFadeRange;
        [RTTI.Member(19, 0x14C, "General")] public FRange NearFadeRange;
        [RTTI.Member(20, 0x154, "General")] public bool RenderToLightSamplingBuffer;
        [RTTI.Member(21, 0x158, "General")] public FRange LightSamplingFadeRange;
        [RTTI.Member(22, 0x180, "Attachments")] public Ref<FlickerLight> FlickerLight;
    }

    [RTTI.Serializable(0x48E57196775CC9D1)]
    public class LightBakeOnlyVisible : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<String> _LightBakeOnlyVisible;
        [RTTI.Member(1, 0x30)] public Array<Ref<StaticMeshResource>> StaticMeshResourceList;
    }

    [RTTI.Serializable(0xC8BAB9E5649D3239)]
    public class LightCollectionIdentifier
    {
        [RTTI.Member(0, 0x0)] public ELightCollectionIdentifierMode Mode;
        [RTTI.Member(1, 0x8)] public String Identifier;
        [RTTI.Member(2, 0x10)] public float TimeOfDay;
    }

    [RTTI.Serializable(0x7AB790CD01A15BEF)]
    public class LightEventInstance : LightEventInstanceBase
    {
    }

    [RTTI.Serializable(0xED5952FE62A33302)]
    public class LightEventInstanceBase : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8E9A0949EA847991)]
    public class LightEventResource : LightEventResourceBase
    {
        [RTTI.Member(0, 0x48, "Logic")] public Ref<LightResource> LightResource;
        [RTTI.Member(1, 0x50, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(2, 0x60, "Logic")] public Vec3 LightForward;
    }

    [RTTI.Serializable(0x6398A930A39205EB)]
    public class LightEventResourceBase : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<CurveResource> IntensityCurveResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool LoopIntensity;
    }

    [RTTI.Serializable(0x8E6D2F00E15CE2E7)]
    public class LightProbe
    {
        [RTTI.Member(0, 0x0, "General")] public Vec3 Position;
        [RTTI.Member(1, 0x10, "General", true)] public Ref<Texture> Texture;
        [RTTI.Member(2, 0x20, "General")] public SHVector4x9 SHCoeffs;
        [RTTI.Member(3, 0xB0, "General")] public FRGBAColor Modifier;
    }

    [RTTI.Serializable(0x2B8B7E53E16D038C)]
    public class LightProbeExcludeZone : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(1, 0x100, "General")] public String Name;
    }

    [RTTI.Serializable(0x32B0424D3A1854D)]
    public class LightProbeHintSurface : GeometryObject
    {
        [RTTI.BaseClass(0xC0)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(1, 0x100, "General")] public String Name;
        [RTTI.Member(2, 0x108, "General")] public HintedLightProbeCreationProperties HintedLightProbeCreationProperties;
    }

    [RTTI.Serializable(0x28B9804A836B4177)]
    public class LightProbeSetResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public ELightProbeSetType SetType;
        [RTTI.Member(1, 0x30, "General", true)] public Array<LightProbe> LightProbes;
        [RTTI.Member(2, 0x40, "General", true)] public Array<Ref<LightProbeSetResource>> LightProbeSubsets;
        [RTTI.Member(3, 0x50, "General", true)] public Array<TetrahedronShadowMap> TetraShadowMapSet;
        [RTTI.Member(4, 0x60, "General")] public Array<uint8> ProbeTreeData;
        [RTTI.Member(5, 0x78, "General")] public Array<uint8> ProbeShData;
        [RTTI.Member(6, 0x88, "General")] public Ref<Texture> ProbeShTexture;
        [RTTI.Member(7, 0x90, "General")] public Array<Vec3> ProbePosList;
    }

    [RTTI.Serializable(0xD535B1D23822CE9E)]
    public class LightResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<ObjectAttributeAnimatorResourceBase> ObjectAttributeAnimatorResource;
        [RTTI.Member(1, 0x30, "General")] public ELightAreaType LightAreaType;
        [RTTI.Member(2, 0x40, "General")] public Vec4 AreaLightParams;
        [RTTI.Member(3, 0x50, "Color")] public FRGBAColor LightColor;
        [RTTI.Member(4, 0x60, "Color")] public float Intensity;
        [RTTI.Member(5, 0x64, "Interactivity")] public ELayerOperation LayerOp;
        [RTTI.Member(6, 0x68, "Color")] public bool EmitDiffuse;
        [RTTI.Member(7, 0x69, "Color")] public bool EmitSpecular;
        [RTTI.Member(8, 0x6A, "Interactivity")] public bool CastShadows;
        [RTTI.Member(9, 0x6A, "Interactivity", true)] public bool CastDynamicShadows;
        [RTTI.Member(10, 0x6C, "Interactivity")] public ECastingShadowQuality CastingShadowQuality;
        [RTTI.Member(11, 0x70, "Interactivity")] public EForwardShadowCastMode ForwardShadowCastMode;
        [RTTI.Member(12, 0x74, "Interactivity")] public bool UsePreciseRendering;
        [RTTI.Member(13, 0x75, "Interactivity")] public bool AffectFirstPersonOnly;
        [RTTI.Member(14, 0x78, "General")] public ELightInfluenceAccuracy InfluenceAccuracy;
        [RTTI.Member(15, 0x7C, "General")] public EFalloffType FalloffType;
        [RTTI.Member(16, 0x80, "Attachments")] public Vec3 CoronaOffset;
        [RTTI.Member(17, 0x90, "Attachments")] public Ref<LensFlareResource> LensFlare;
        [RTTI.Member(18, 0x98, "General")] public float VolumeLightAmount;
        [RTTI.Member(19, 0x9C, "General")] public float VolumeLightAmountMinScale;
        [RTTI.Member(20, 0xA0, "General")] public int VolumeLightSampleCount;
        [RTTI.Member(21, 0xA4, "General")] public float VolumeHenyeyGreensteinG;
        [RTTI.Member(22, 0xA8, "General")] public FRange DistanceFadeRange;
        [RTTI.Member(23, 0xB0, "General")] public FRange NearFadeRange;
        [RTTI.Member(24, 0xB8, "General")] public bool RenderToLightSamplingBuffer;
        [RTTI.Member(25, 0xBC, "General")] public FRange LightSamplingFadeRange;
        [RTTI.Member(26, 0xC8, "Attachments")] public Ref<FlickerLight> FlickerLight;
        [RTTI.Member(27, 0xD0, "General")] public String IntensityGlobalRenderVariableName;
        [RTTI.Member(28, 0xE0, "General")] public Ref<RenderEffectResource> RenderEffectsResource;
    }

    [RTTI.Serializable(0xE6A67C103CCE0902)]
    public class LightShadowed : Light
    {
        [RTTI.Member(0, 0x1B0, "Color")] public int ShadowMapSize;
        [RTTI.Member(1, 0x1B4, "Color")] public int FilterSamplesCount;
        [RTTI.Member(2, 0x1B8, "Color")] public float DepthBias;
        [RTTI.Member(3, 0x1BC, "Color")] public float FilterSize;
        [RTTI.Member(4, 0x1C0, "Color")] public float ScreenSizeThreshold;
        [RTTI.Member(5, 0x1C4, "Color")] public float ShadowMapSizeThreshold;
        [RTTI.Member(6, 0x1D0, "Color")] public Vec2 StopShadowCastingSizeRange;
        [RTTI.Member(7, 0x1E0, "Color")] public Vec2 StopShadowCastingDistanceRange;
        [RTTI.Member(8, 0x1F0, "Color")] public Vec4 ShadowMapSizeLODDistances;
        [RTTI.Member(9, 0x200, "Color")] public EShadowmapCacheForStaticGeometry ShadowmapCacheMethod;
    }

    [RTTI.Serializable(0xE01A1F890E4D6C62)]
    public class LightShadowedResource : LightResource
    {
        [RTTI.Member(0, 0x190, "General")] public int ShadowMapSize;
        [RTTI.Member(1, 0x194, "General")] public int FilterSamplesCount;
        [RTTI.Member(2, 0x198, "General")] public float DepthBias;
        [RTTI.Member(3, 0x19C, "General")] public float FilterSize;
        [RTTI.Member(4, 0x1A0, "General")] public float ScreenSizeThreshold;
        [RTTI.Member(5, 0x1A4, "General")] public float ShadowMapSizeThreshold;
        [RTTI.Member(6, 0x1B0, "General")] public Vec2 StopShadowCastingSizeRange;
        [RTTI.Member(7, 0x1C0, "General")] public Vec2 StopShadowCastingDistanceRange;
        [RTTI.Member(8, 0x1D0, "General")] public Vec4 ShadowMapSizeLODDistances;
        [RTTI.Member(9, 0x1E0, "General")] public EShadowmapCacheForStaticGeometry ShadowmapCacheMethod;
    }

    [RTTI.Serializable(0x9F241F51DDEC97A6)]
    public class LightShaftSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public bool Enabled;
        [RTTI.Member(1, 0x1, "Settings")] public bool UseAngularOffsetsDirectly;
        [RTTI.Member(2, 0x2, "Settings")] public bool UseTemporalFilter;
        [RTTI.Member(3, 0x4, "Settings")] public float HorizontalAngularOffset;
        [RTTI.Member(4, 0x8, "Settings")] public float VerticalAngularOffset;
        [RTTI.Member(5, 0xC, "Settings")] public float MaskPower;
        [RTTI.Member(6, 0x10, "Settings")] public float Intensity;
        [RTTI.Member(7, 0x14, "Settings")] public float FalloffAnglePower;
        [RTTI.Member(8, 0x20, "Settings")] public FRGBAColor BlendColor;
        [RTTI.Member(9, 0x30, "Settings")] public FRGBAColor MultiplyColor;
        [RTTI.Member(10, 0x40, "RadialBlurSettings")] public float Decay;
        [RTTI.Member(11, 0x44, "RadialBlurSettings")] public float DistanceMultiplier;
        [RTTI.Member(12, 0x48, "RadialBlurSettings")] public float Weight;
        [RTTI.Member(13, 0x4C, "RadialBlurSettings")] public float AttenuationMultiplier;
    }

    [RTTI.Serializable(0x8EAE8F56D7DA3B86)]
    public class LightShaftSettingsResource : Resource
    {
        [RTTI.Member(0, 0x30, "Settings")] public LightShaftSettings LightShaftSettings;
    }

    [RTTI.Serializable(0xBC8D9E71E69077CA)]
    public class LightbakeOnlyGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xBC00942BB68CBCBC)]
    public class LightingManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xC1077BB46BCF959E)]
    public class LightingRigComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF52E716681972C64)]
    public class LightingRigComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xD83E678C6A3D40D4)]
    public class LightingRigComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "VisualEffects")] public Ref<LightResource> LightResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<OverrideGraphProgramResource> OverrideLightRepPropertiesGraph;
    }

    [RTTI.Serializable(0xA77AA8910B2526EE)]
    public class LimitConcurrentEntitiesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFA41A83B55B0DE53)]
    public class LimitConcurrentEntitiesComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String Group;
        [RTTI.Member(1, 0x30, "Logic")] public int MaxAmount;
        [RTTI.Member(2, 0x34, "Logic")] public bool LimitIsPerPlayer;
    }

    [RTTI.Serializable(0xFAC54C35DEC29500)]
    public class LinearLUT_8
    {
        [RTTI.Member(0, 0x10)] public Vec3 Sample0;
        [RTTI.Member(1, 0x20)] public Vec3 Sample1;
        [RTTI.Member(2, 0x30)] public Vec3 Sample2;
        [RTTI.Member(3, 0x40)] public Vec3 Sample3;
        [RTTI.Member(4, 0x50)] public Vec3 Sample4;
        [RTTI.Member(5, 0x60)] public Vec3 Sample5;
        [RTTI.Member(6, 0x70)] public Vec3 Sample6;
        [RTTI.Member(7, 0x80)] public Vec3 Sample7;
    }

    [RTTI.Serializable(0x1A2D47F82DC49805)]
    public class LinkToEventInReferencedSequence
    {
        [RTTI.Member(0, 0x0)] public Ref<EventResource> EventResource;
        [RTTI.Member(1, 0x8)] public String AttributeName;
        [RTTI.Member(2, 0x10)] public Ref<EventResource> ReferencedEventResource;
    }

    [RTTI.Serializable(0x6440DE701C7804E3)]
    public class LinkedSoundParameterComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF919609437AE662E)]
    public class LinkedSoundParameterComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<LinkedSoundParameterGroup>> Groups;
    }

    [RTTI.Serializable(0xD29232A09AD17E48)]
    public class LinkedSoundParameterGroup : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<NameToSoundParameterMapping> AnimationEventToSoundParameterMapping;
        [RTTI.Member(1, 0x30)] public Array<NameToSoundParameterMapping> AnimationTagToSoundParameterMapping;
        [RTTI.Member(2, 0x40)] public Array<BoolPropertyToSoundParameterMapping> BoolPropertyToSoundParameterMapping;
        [RTTI.Member(3, 0x50)] public String AnythingSetSoundParameterName;
        [RTTI.Member(4, 0x58)] public String AnythingNotSetSoundParameterName;
    }

    [RTTI.Serializable(0x1DDA22A1A162EF6F)]
    public class LinkedUUIDComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9AAFCC7241715BC8)]
    public class ListItemTag : VisualTag
    {
    }

    [RTTI.Serializable(0x54BA1CB780AFED7D)]
    public class ListItemWidget : Widget
    {
    }

    [RTTI.Serializable(0x1022144B630DEBE6)]
    public class ListTag : VisualTag
    {
    }

    [RTTI.Serializable(0x21D8D83BFE98566F)]
    public class ListWidget : Widget
    {
    }

    [RTTI.Serializable(0xED3FF02F571EB2BF)]
    public class LoadingHint : Resource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<LocalizedTextResource> Hint;
        [RTTI.Member(1, 0x30, "Representation")] public Ref<LocalizedTextResource> Hint_keyboard;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<LoadingHintConditionBase> Condition;
        [RTTI.Member(3, 0x40, "Representation")] public float DisplayTime;
        [RTTI.Member(4, 0x44, "Logic")] public int Cooldown;
        [RTTI.Member(5, 0x48, "Logic")] public bool IsDLCOnly;
    }

    [RTTI.Serializable(0xAF641FAFAB86C35)]
    public class LoadingHintConditionAnd : LoadingHintConditionBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<LoadingHintConditionBase>> LoadingHintConditions;
    }

    [RTTI.Serializable(0x774863ACFC2ECD52)]
    public class LoadingHintConditionBase : Resource
    {
    }

    [RTTI.Serializable(0xA0F79C7A5D6B5A7)]
    public class LoadingHintConditionBooleanFact : LoadingHintConditionBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<BooleanFact> BooleanFact;
    }

    [RTTI.Serializable(0xAEAE9125075AEE8B)]
    public class LoadingHintConditionCauseOfDeath : LoadingHintConditionBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<UUIDRef<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(1, 0x38, "Logic")] public Array<UUIDRef<EntityResource>> KillerEntityResources;
        [RTTI.Member(2, 0x48, "Logic")] public Array<UUIDRef<EntityResource>> KillerWeaponResources;
    }

    [RTTI.Serializable(0x8329472C15B92F74)]
    public class LoadingHintConditionEntitlement : LoadingHintConditionBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntitlementResource> Entitlement;
    }

    [RTTI.Serializable(0xB855FA3260EFAA00)]
    public class LoadingHintConditionEnumFact : LoadingHintConditionBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EnumFact> EnumFact;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<EnumFactValue> EnumFactValue;
        [RTTI.Member(2, 0x38, "Logic")] public bool AllowGreaterValues;
        [RTTI.Member(3, 0x39, "Logic")] public bool AllowSmallerValues;
    }

    [RTTI.Serializable(0xD5514C9437F5A743)]
    public class LoadingHintConditionItemAcquired : LoadingHintConditionBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public UUIDRef<EntityResource> Item;
    }

    [RTTI.Serializable(0xC2C6ABEA06E2D5A6)]
    public class LoadingHintConditionNewGamePlus : LoadingHintConditionBase
    {
    }

    [RTTI.Serializable(0xF7ED9B3912E1FDDB)]
    public class LoadingHintConditionOr : LoadingHintConditionBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<LoadingHintConditionBase>> LoadingHintConditions;
    }

    [RTTI.Serializable(0x59DF073CFC432910)]
    public class LoadingHintGroup : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<LoadingHint>> LoadingHints;
        [RTTI.Member(1, 0x38, "Logic")] public int Priority;
        [RTTI.Member(2, 0x3C, "Logic")] public int MaxDisplayCountPerLoadingScreen;
        [RTTI.Member(3, 0x40, "Logic")] public int Cooldown;
    }

    [RTTI.Serializable(0xAC2686B4DD02F6AC)]
    public class LoadingHintSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x1250FBFC6BD354AF)]
    public class LoadingHintSystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<LoadingHintGroup>> LoadingHintGroups;
        [RTTI.Member(1, 0x3C, "Logic")] public float TimeBetweenHints;
    }

    [RTTI.Serializable(0xE9C898F780BD3294)]
    public class LocalizedAnimationResource : ResourceWithoutLegacyName
    {
        [RTTI.Member(0, 0x20, "General")] public Array<AnimationResourceTranslation> Animations;
    }

    [RTTI.Serializable(0xD522203CD5B7178F)]
    public class LocalizedShaderVariableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x598A61E32D7DF003)]
    public class LocalizedShaderVariableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xC2B2460A38E0669A)]
    public class LocalizedShaderVariableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<ELanguage> Languages;
        [RTTI.Member(1, 0x38, "Logic")] public String LanguageShaderVariable;
    }

    [RTTI.Serializable(0x77CBAE4136D6E19C)]
    public class LocalizedSoundPreset : CoreObject
    {
        [RTTI.Member(0, 0x20, "Sound")] public float DefaultVolume;
        [RTTI.Member(1, 0x24, "Sound")] public float DefaultLfeVolume;
        [RTTI.Member(2, 0x28, "Sound")] public float WetLevel;
        [RTTI.Member(3, 0x2C, "Sound")] public float MinDist;
        [RTTI.Member(4, 0x30, "Sound")] public float MaxDist;
        [RTTI.Member(5, 0x34, "Sound")] public float PressureLevel;
        [RTTI.Member(6, 0x38, "Sound")] public float AttenuationLinearity;
        [RTTI.Member(7, 0x3C, "Sound")] public float AttenuationSlope;
        [RTTI.Member(8, 0x40, "Sound")] public ESoundMasterVolumeGroup MasterVolumeGroup;
        [RTTI.Member(9, 0x44, "Sound")] public bool UsesHDRSystem;
        [RTTI.Member(10, 0x45, "Sound")] public bool AffectedByTimeScale;
        [RTTI.Member(11, 0x48, "Sound")] public float InitialRMS;
        [RTTI.Member(12, 0x4C, "Sound")] public float WetMinRange;
        [RTTI.Member(13, 0x50, "Sound")] public float WetMaxRange;
        [RTTI.Member(14, 0x54, "Sound")] public float WetLevelBias;
        [RTTI.Member(15, 0x58, "Sound")] public float PanModificationDistance;
        [RTTI.Member(16, 0x5C, "Sound")] public float OcclusionFactor;
        [RTTI.Member(17, 0x60, "Sound")] public float ObstructionFactor;
        [RTTI.Member(18, 0x64, "Sound")] public float DopplerFactor;
        [RTTI.Member(19, 0x68, "Sound")] public float MaxAzimuthDelta;
        [RTTI.Member(20, 0x6C, "Sound")] public bool ProximityRadio;
        [RTTI.Member(21, 0x6D, "Sound")] public bool ShouldAlsoPanToCenter;
        [RTTI.Member(22, 0x70, "MixState")] public Ref<SoundMixStateResource> SoundMixState;
        [RTTI.Member(23, 0x78, "Wave")] public EWaveDataEncodingHint DesiredEncoding;
        [RTTI.Member(24, 0x7C, "Wave")] public EWaveDataEncodingQuality EncodingQuality;
        [RTTI.Member(25, 0x80, "Obstruction")] public float ObstructionRadius;
    }

    [RTTI.Serializable(0x4890C7C94E2DEF9)]
    public class LocalizedTextSuggestionResource : Resource
    {
        [RTTI.Member(0, 0x28)] public String QAChangeID;
        [RTTI.Member(1, 0x30)] public String RecordType;
        [RTTI.Member(2, 0x38)] public String RecordKey;
        [RTTI.Member(3, 0x40)] public String RecordLanguage;
        [RTTI.Member(4, 0x48)] public WString OriginalSourceText;
        [RTTI.Member(5, 0x50)] public WString NewText;
        [RTTI.Member(6, 0x58)] public WString NewAnnotation;
        [RTTI.Member(7, 0x60)] public ETranslationStatus NewApproved;
        [RTTI.Member(8, 0x68)] public String DevTrackNr;
        [RTTI.Member(9, 0x70)] public String QACreatedOn;
        [RTTI.Member(10, 0x78)] public String QACreatedBy;
        [RTTI.Member(11, 0x80)] public int GGHandled;
        [RTTI.Member(12, 0x88)] public String GGHandledOn;
        [RTTI.Member(13, 0x90)] public String GGHandledBy;
        [RTTI.Member(14, 0x98)] public String GGHandledReason;
        [RTTI.Member(15, 0xA0)] public Ref<LocalizedTextResource> Record;
    }

    [RTTI.Serializable(0x42328F43C04745A1)]
    public class LocalizerCategory : CoreObject
    {
        [RTTI.Member(0, 0x20)] public bool ExportForTranslation;
        [RTTI.Member(1, 0x24)] public int OrderIndex;
    }

    [RTTI.Serializable(0x79B8AA048490B047)]
    public class LocalizerLevel : CoreObject
    {
        [RTTI.Member(0, 0x20)] public bool ExportForTranslation;
        [RTTI.Member(1, 0x24)] public int OrderIndex;
    }

    [RTTI.Serializable(0x9E31C7CEB4FD3E1E)]
    public class LocationAndUUID
    {
        [RTTI.Member(0, 0x0)] public String Location;
        [RTTI.Member(1, 0x8)] public GGUUID UUID;
    }

    [RTTI.Serializable(0x95BA8ACFBED51E39)]
    public class LocationMarker : ParentWorldNode
    {
        [RTTI.Member(0, 0x70)] public Ref<LocationMarkerResource> Resource;
        [RTTI.Member(1, 0x78, "Map")] public Ref<CollisionTrigger> Area;
        [RTTI.Member(2, 0x80, "Map")] public float AreaBufferSize;
        [RTTI.Member(3, 0x90, "Map")] public Vec2 AreaImageLocalOffset;
        [RTTI.Member(4, 0xA0, "Map")] public Vec2 AreaImageSize;
    }

    [RTTI.Serializable(0x91313635D2D5F84B)]
    public class LocationMarkerBreadcrumbingSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x30)] public float ApproachDistance;
        [RTTI.Member(2, 0x34)] public float SeekDistance;
        [RTTI.Member(3, 0x38)] public float MinDistance;
        [RTTI.Member(4, 0x3C)] public float PortalMarkerHeight;
        [RTTI.Member(5, 0x40)] public float RoadMarkerHeight;
        [RTTI.Member(6, 0x44)] public float AngleTestMinimumDistance;
        [RTTI.Member(7, 0x48)] public float MaxRoadSegmentAngle;
        [RTTI.Member(8, 0x4C)] public float MaxPlayerToNodeAngle;
    }

    [RTTI.Serializable(0x7F4BF20FD8A09F29)]
    public class LocationMarkerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEE4F763C6A2E6635)]
    public class LocationMarkerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocationMarkerResource> LocationMarker;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> MarkerText;
        [RTTI.Member(2, 0x38, "Logic")] public bool ShowWhenDead;
    }

    [RTTI.Serializable(0xFE4DB6653C1A5508)]
    public class LocationMarkerDiscovererSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> IndicatedText;
        [RTTI.Member(1, 0x30)] public float IndicatedDistance;
        [RTTI.Member(2, 0x34)] public float DefaultDiscoveryDistance;
        [RTTI.Member(3, 0x38, "MarkerStates")] public Ref<LocationMarkerState> Undiscovered;
        [RTTI.Member(4, 0x40, "MarkerStates")] public Ref<LocationMarkerState> Indicated;
        [RTTI.Member(5, 0x48, "MarkerStates")] public Ref<LocationMarkerState> Discovered;
    }

    [RTTI.Serializable(0xC65948F0A40DFD08)]
    public class LocationMarkerEntityInstance : LocationMarkerInstance
    {
    }

    [RTTI.Serializable(0x388B6921AC37C313)]
    public class LocationMarkerIconData : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<UITexture> UIIcon;
        [RTTI.Member(1, 0x28)] public Ref<UITexture> UIAreaIcon;
        [RTTI.Member(2, 0x30)] public float MaxDistance;
        [RTTI.Member(3, 0x34)] public bool Breadcrumb;
        [RTTI.Member(4, 0x38)] public int Index;
    }

    [RTTI.Serializable(0x3A6190D03BD9F6AE)]
    public class LocationMarkerInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD8A42A5E5D5A2DA0)]
    public class LocationMarkerInstanceStack : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x717839D71DB5F7AD)]
    public class LocationMarkerMarkerInstance : LocationMarkerInstance
    {
    }

    [RTTI.Serializable(0x3A6EFB938901BBFE)]
    public class LocationMarkerPriority
    {
        [RTTI.Member(0, 0x0, "Logic")] public int Priority;
        [RTTI.Member(1, 0x8, "Logic")] public Ref<LocationMarkerState> State;
    }

    [RTTI.Serializable(0xC882793700A4F0DC)]
    public class LocationMarkerRep : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xAB8B0AEF2843CCB5)]
    public class LocationMarkerRepCompass : LocationMarkerRep
    {
    }

    [RTTI.Serializable(0x30454D0967331462)]
    public class LocationMarkerRepCompassResource : LocationMarkerRepResource
    {
        [RTTI.Member(0, 0x58, "Logic")] public int SortOrder;
        [RTTI.Member(1, 0x5C, "Logic")] public bool IsSticky;
        [RTTI.Member(2, 0x5D, "Logic")] public bool DisplayInsideAreaIndicator;
    }

    [RTTI.Serializable(0x5F60D54ACF5D81BB)]
    public class LocationMarkerRepHUD : LocationMarkerRep
    {
    }

    [RTTI.Serializable(0x3725E1995EAEE094)]
    public class LocationMarkerRepHUDAwareness : LocationMarkerRepHUD
    {
    }

    [RTTI.Serializable(0x16FEF2CDA82B3A9C)]
    public class LocationMarkerRepHUDAwarenessResource : LocationMarkerRepHUDResource
    {
        [RTTI.Member(0, 0xA0, "Representation")] public Ref<HUDElementResource> RootElement;
        [RTTI.Member(1, 0xA8, "Representation")] public Ref<HUDImageResource> BackgroundImage;
        [RTTI.Member(2, 0xB0, "Representation")] public Ref<HUDImageResource> TaggedImage;
        [RTTI.Member(3, 0xB8, "Representation")] public Ref<HUDImageResource> TypeImage;
        [RTTI.Member(4, 0xC0, "Representation")] public Ref<HUDImageResource> OverlayImage;
        [RTTI.Member(5, 0xC8, "Representation")] public Ref<HUDImageResource> BlinkImage;
        [RTTI.Member(6, 0xD0, "Representation")] public Ref<HUDShaderResource> SearchTimeShader;
        [RTTI.Member(7, 0xD8, "Representation")] public Ref<HUDLogicGroupResource> LogicGroupResource;
    }

    [RTTI.Serializable(0x6A6A09D45F407B33)]
    public class LocationMarkerRepHUDResource : LocationMarkerRepResource
    {
        [RTTI.Member(0, 0x58, "Representation")] public Ref<HUDLogicGroupResource> HUDLogicGroup;
        [RTTI.Member(1, 0x60, "Representation")] public bool ShowInSequence;
        [RTTI.Member(2, 0x70, "Representation")] public Vec3 DefaultHelperPosition;
        [RTTI.Member(3, 0x80, "Representation")] public bool ShowDistance;
        [RTTI.Member(4, 0x81, "Representation")] public bool VisibleInView;
        [RTTI.Member(5, 0x82, "Representation")] public bool HideWhenNotInView;
        [RTTI.Member(6, 0x88, "Representation")] public Array<Ref<LocationMarkerState>> ForceShowOnBreadcrumbStates;
    }

    [RTTI.Serializable(0x5D48D4469F49A91A)]
    public class LocationMarkerRepMap : LocationMarkerRep
    {
    }

    [RTTI.Serializable(0x8EB43F54E7F59187)]
    public class LocationMarkerRepMapFastTravel : LocationMarkerRepMap
    {
    }

    [RTTI.Serializable(0xDB14EE070349A5)]
    public class LocationMarkerRepMapFastTravelResource : LocationMarkerRepMapResource
    {
    }

    [RTTI.Serializable(0xDC09D125DE791A94)]
    public class LocationMarkerRepMapResource : LocationMarkerRepResource
    {
        [RTTI.Member(0, 0x58, "Representation")] public int DrawOrder;
        [RTTI.Member(1, 0x5C, "Representation")] public float FadeTime;
        [RTTI.Member(2, 0x60, "Representation")] public Ref<MapRoadRenderSettingsResource> RoadSettings;
        [RTTI.Member(3, 0x68, "Representation")] public Ref<UITexture> UIHighlightTexture;
        [RTTI.Member(4, 0x70, "Representation")] public FRGBAColor HighlightColorLineair;
        [RTTI.Member(5, 0x80, "Representation")] public Ref<CurveResource> HighlightCurve;
        [RTTI.Member(6, 0x88, "Representation")] public float VerticalTextOffset;
        [RTTI.Member(7, 0x8C, "Representation")] public bool HasOrientation;
        [RTTI.Member(8, 0x8D, "Representation")] public bool CanBeSelected;
        [RTTI.Member(9, 0x8E, "Representation")] public bool UseExplorationQueueToReveal;
        [RTTI.Member(10, 0x90, "Representation")] public Array<Ref<LocationMarkerState>> DisplayWhenOffscreenOptionStates;
        [RTTI.Member(11, 0xA0, "Representation")] public Ref<CurveResource> AnimationScaleCurve;
        [RTTI.Member(12, 0xA8, "Filter")] public Ref<MapIconFilter> MapIconFilter;
        [RTTI.Member(13, 0xB0, "Filter")] public Array<Ref<LocationMarkerState>> StatesThatIgnoreFilter;
        [RTTI.Member(14, 0xC0, "Filter")] public bool ShouldRevealIconFilter;
        [RTTI.Member(15, 0xC8, "Filter")] public Array<Ref<MapIconFilter>> AdditionallyRevealedFilters;
        [RTTI.Member(16, 0xD8, "Areas")] public int MinimumScreenAreaSize;
        [RTTI.Member(17, 0xDC, "Representation")] public EMapZoomLevel ZoomVisibilityLevel;
    }

    [RTTI.Serializable(0x171A9F86584C72DF)]
    public class LocationMarkerRepResource : Resource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<UITexture> UIWaypointIcon;
        [RTTI.Member(1, 0x30, "Representation")] public Array<Ref<MarkerRepState>> WaypointedStates;
        [RTTI.Member(2, 0x40, "Representation")] public Array<Ref<MarkerRepState>> States;
        [RTTI.Member(3, 0x50, "Representation")] public bool ShouldBeDisplayedWhenFar;
        [RTTI.Member(4, 0x51, "Representation")] public bool ShouldBeDisplayedWhenNear;
        [RTTI.Member(5, 0x52, "Representation")] public bool ShouldBeDisplayedWhenInside;
        [RTTI.Member(6, 0x53, "Representation")] public bool HideFarMarkerWhenInvisible;
        [RTTI.Member(7, 0x54, "Representation")] public bool HideNearMarkerWhenInvisible;
        [RTTI.Member(8, 0x55, "Representation")] public bool HideInsideMarkerWhenInvisible;
        [RTTI.Member(9, 0x56, "Representation")] public bool HideWhenDead;
    }

    [RTTI.Serializable(0x9AED97E87FCAE2FE)]
    public class LocationMarkerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<LocationMarkerPriority> Priorities;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<LocationMarkerRepResource>> Representations;
        [RTTI.Member(2, 0x50, "Logic")] public Vec2 AreaSizeOverride;
        [RTTI.Member(3, 0x60, "Logic")] public Ref<ConditionResource> VisibilityConditionResource;
        [RTTI.Member(4, 0x68, "Logic")] public bool DefaultEnabled;
        [RTTI.Member(5, 0x69, "Logic")] public bool CanBeWaypointed;
        [RTTI.Member(6, 0x70, "Logic")] public Array<Ref<LocationMarkerState>> BreadcrumbingStates;
        [RTTI.Member(7, 0x80, "Logic")] public Array<Ref<LocationMarkerState>> DrawAreaStates;
        [RTTI.Member(8, 0x90, "Logic")] public Ref<LocationMarkerState> DefaultState;
        [RTTI.Member(9, 0x98, "Logic")] public bool HideWhenInDifferentMapZone;
    }

    [RTTI.Serializable(0x56E3049AA7D38496)]
    public class LocationMarkerResourceWithBreadcrumbingOverride : LocationMarkerResource
    {
        [RTTI.Member(0, 0xA0, "Logic")] public Ref<LocationMarkerBreadcrumbingSettings> BreadcrumbingOverride;
    }

    [RTTI.Serializable(0x73D1E858416176A)]
    public class LocationMarkerState : Resource
    {
    }

    [RTTI.Serializable(0xD543BBC7EFD91F3A)]
    public class LocationMarkerUpdaterSettings : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocationMarkerState> TrackedMarkerState;
        [RTTI.Member(1, 0x30)] public UUIDRef<HUDLogicGroupResource> QuestTracker;
        [RTTI.Member(2, 0x40)] public Array<Ref<LocationMarkerBreadcrumbingSettings>> BreadcrumbingSettings;
    }

    [RTTI.Serializable(0xCE864CD45B0FFBCA)]
    public class LocationProximityQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Distance;
        [RTTI.Member(1, 0x2C, "Logic")] public bool TriggerWhenOutside;
        [RTTI.Member(2, 0x2D, "Logic")] public UUIDRef<WorldNode> Node;
    }

    [RTTI.Serializable(0xEA365DBA88BD3C3)]
    public class LocationProximityQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x2E9A7005A31FBE5C)]
    public class LocatorInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE33F184DF34C5C95)]
    public class LocatorResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x34F5FA1B43A8DDE0)]
    public class LockableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x926BCAA4B72583B6)]
    public class LockableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Array<String> KindOF;
        [RTTI.Member(1, 0x48, "Logic")] public Array<String> Names;
    }

    [RTTI.Serializable(0x33AFF1FE57D90632)]
    public class LocomotionMover : Mover
    {
    }

    [RTTI.Serializable(0x69600FC0DF4C4651)]
    public class LocomotionMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xA534187C4B49615E)]
    public class LocomotionProviderInterface
    {
    }

    [RTTI.Serializable(0x744B5A860EEA956A)]
    public class LodDistanceOverrideComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x893E98CA35D94DBB)]
    public class LodDistanceOverrideComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x4EF897CCBA267EFA)]
    public class LodDistanceOverrideComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float LodDistanceScale;
    }

    [RTTI.Serializable(0x5F5D6D208C0B35B4)]
    public class LodMeshResource : MeshResourceBase
    {
        [RTTI.Member(0, 0x80, "Mesh")] public float MaxDistance;
        [RTTI.Member(1, 0x88, "Mesh")] public Array<LodMeshResourcePart> Meshes;
    }

    [RTTI.Serializable(0xDCB11F6F37633EF3)]
    public class LodMeshResourcePart
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x8)] public float Distance;
    }

    [RTTI.Serializable(0xC61EBD08E833AE3)]
    public class LookAtComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6C82F6AC836B5044)]
    public class LookAtEntitiesComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x84935EE838FB8910)]
    public class LookAtEntitiesComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CPtr<EntityAction> StartedLookingAtEntityAction;
        [RTTI.Member(1, 0x30, "Logic")] public CPtr<EntityAction> StoppedLookingAtEntityAction;
        [RTTI.Member(2, 0x38, "Logic")] public String EntityType;
        [RTTI.Member(3, 0x48, "Logic")] public float Range;
    }

    [RTTI.Serializable(0x6F0D594522A89FC1)]
    public class LookAtEntitiesEventInstance : ConditionalLookEventInstance
    {
    }

    [RTTI.Serializable(0x1BB904A51759E927)]
    public class LookAtEntitiesEventResource : ConditionalLookEventResource
    {
        [RTTI.Member(0, 0x88, "Logic")] public bool LookAtHumanoids;
        [RTTI.Member(1, 0x89, "Logic")] public bool LookAtPlayers;
        [RTTI.Member(2, 0x8A, "Logic")] public bool LookAtAmbientEvents;
    }

    [RTTI.Serializable(0x77AE824F29E1FB73)]
    public class LookAtEventInstance : LookEventInstance
    {
    }

    [RTTI.Serializable(0x7B98B766BD2876DC)]
    public class LookAtEventResource : LookEventResource
    {
        [RTTI.Member(0, 0x48, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0xB2811AC765656E4E)]
    public class LookAtTargetEventInstance : LookAtEventInstance
    {
    }

    [RTTI.Serializable(0xFB3D89389FB48E2B)]
    public class LookAtTargetEventResource : LookAtEventResource
    {
    }

    [RTTI.Serializable(0x27C656889E14FADD)]
    public class LookEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF6973A8B06E73AEC)]
    public class LookEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool JustGlance;
    }

    [RTTI.Serializable(0x2488889CBC55BF54)]
    public class LookIKComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7675985B0BCC0A8E)]
    public class LookIKComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool LookHeadingFullyRotational;
        [RTTI.Member(1, 0x2C, "Logic")] public FRange LookHeadingRange;
        [RTTI.Member(2, 0x34, "Logic")] public float LookHeadingAcceleration;
        [RTTI.Member(3, 0x38, "Logic")] public float LookHeadingSpeed;
        [RTTI.Member(4, 0x3C, "Logic")] public FRange LookPitchRange;
        [RTTI.Member(5, 0x44, "Logic")] public float LookPitchAcceleration;
        [RTTI.Member(6, 0x48, "Logic")] public float LookPitchSpeed;
        [RTTI.Member(7, 0x50, "Logic")] public String LookAtAnimVarName;
        [RTTI.Member(8, 0x58, "Logic")] public String LookIKTargetAnimVarName;
        [RTTI.Member(9, 0x60, "Logic")] public String LookIKWeightAnimVarName;
        [RTTI.Member(10, 0x68, "Logic")] public String LookPitchAnimVarName;
        [RTTI.Member(11, 0x70, "Logic")] public String LookHeadingAnimVarName;
        [RTTI.Member(12, 0x78, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(13, 0x80, "Logic")] public float IKWeightBlendDuration;
        [RTTI.Member(14, 0x84, "Logic")] public float IKWeightBlendOutDuration;
        [RTTI.Member(15, 0x88, "IK")] public String RootIKBone;
        [RTTI.Member(16, 0x90, "IK")] public String EndIKBone;
        [RTTI.Member(17, 0x98, "IK")] public FRange MaxIKHeadingRange;
        [RTTI.Member(18, 0xA0, "IK")] public FRange MaxIKPitchRange;
        [RTTI.Member(19, 0xA8, "Logic")] public String DisableLookIKAnimationTag;
    }

    [RTTI.Serializable(0x7FCBFC0EB0707995)]
    public class LookSpeedSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MaxRotationSpeed;
        [RTTI.Member(1, 0x2C, "Logic")] public float MaxRotationAcceleration;
        [RTTI.Member(2, 0x30, "Logic")] public float RotationSpeedDamping;
    }

    [RTTI.Serializable(0x4B7397C556844497)]
    public class LootContainerRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public GGUUID LootEntityResourceUUID;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public Array<Ref<LootItemRestoreState>> ItemsRemaining;
    }

    [RTTI.Serializable(0x6B9DD34BD83ADB76)]
    public class LootData : LootDataInterface
    {
        [RTTI.Member(0, 0x38, "Logic")] public Array<Ref<LootDataInterface>> LootItems;
        [RTTI.Member(1, 0x48, "Logic")] public int Amount;
        [RTTI.Member(2, 0x4C, "Logic")] public bool ItemsShouldBeUnique;
    }

    [RTTI.Serializable(0xCF07C5A99F746F89)]
    public class LootDataInterface : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Probability;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LootDataSettings> DataSettings;
    }

    [RTTI.Serializable(0xC0331A764211BE8F)]
    public class LootDataSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int RollBufferCount;
        [RTTI.Member(1, 0x2C, "Logic")] public float IncrementPercentage;
        [RTTI.Member(2, 0x30, "Logic")] public ELootDataIncrementType IncrementType;
    }

    [RTTI.Serializable(0xC56221C313345FD9)]
    public class LootItem : LootDataInterface
    {
        [RTTI.Member(0, 0x38)] public Ref<EntityResource> ItemResource;
    }

    [RTTI.Serializable(0xE1FE86E6E5A6F2E8)]
    public class LootItemDescriptionResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<LocalizedTextResource>> LootItemLocation;
        [RTTI.Member(1, 0x38, "General")] public Array<Ref<LocalizedTextResource>> LootItemUse;
        [RTTI.Member(2, 0x48, "General")] public ELootItemRarity LootItemRarity;
        [RTTI.Member(3, 0x4C, "General")] public ELootItemCategory LootItemCategory;
        [RTTI.Member(4, 0x50, "DLC")] public Array<Ref<LocalizedTextResource>> AdditionalLootItemLocation;
        [RTTI.Member(5, 0x60, "DLC")] public Array<Ref<LocalizedTextResource>> AdditionalLootItemUse;
    }

    [RTTI.Serializable(0xC13D714D24C8A14)]
    public class LootItemRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public StreamingRef<EntityResource> LootItem;
        [RTTI.Member(1, 0x48, "StateSaving", true)] public int AmountRemaining;
    }

    [RTTI.Serializable(0x6A45F279A53A5931)]
    public class LootPackageRestoreState : ItemRestoreState
    {
        [RTTI.Member(0, 0xB0, "StateSaving", true)] public Array<Ref<ItemRestoreState>> Items;
    }

    [RTTI.Serializable(0xA19AA6E50BD842C7)]
    public class LootSlot : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<LootDataInterface>> LootData;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<LootSlotSettings> Settings;
    }

    [RTTI.Serializable(0xD176199F0A8289F1)]
    public class LootSlotPerkSettings : RTTIObject
    {
        [RTTI.Member(0, 0x8, "Logic")] public Ref<PerkLevel> PerkLevel;
        [RTTI.Member(1, 0x10, "Logic")] public float PercentageChance;
    }

    [RTTI.Serializable(0x252ECBC40EBD406C)]
    public class LootSlotSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<LootSlotPerkSettings> LootSlotPerkSettings;
        [RTTI.Member(1, 0x38, "Logic")] public float DefaultPercentageChance;
    }

    [RTTI.Serializable(0xD0EBFF3E8812F562)]
    public class LureEnemyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE684591CC639E427)]
    public class LureEnemyComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AISignalType> LureGestureSignal;
        [RTTI.Member(1, 0x30, "Logic")] public float TargetConeAngle;
        [RTTI.Member(2, 0x34, "Logic")] public float MaxDistance;
    }

    [RTTI.Serializable(0xDDAF96126EBCD671)]
    public class Magazine : WeaponPart
    {
    }

    [RTTI.Serializable(0x4A04EC2D21FC5F98)]
    public class MagazineRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x8FE07830BBFD7FA4)]
    public class MagazineResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool InfiniteAmmo;
        [RTTI.Member(1, 0x29, "Logic")] public bool AlwaysFullMagOnLoad;
        [RTTI.Member(2, 0x2A, "Logic")] public bool InfiniteReserves;
        [RTTI.Member(3, 0x2C, "Logic")] public int RoundsPerMagazine;
        [RTTI.Member(4, 0x30, "Logic")] public bool ShouldAddAmmoToCurrentMag;
        [RTTI.Member(5, 0x38, "Logic")] public Ref<AmmoType> AmmoType;
        [RTTI.Member(6, 0x40, "Logic")] public Ref<AmmoResource> DefaultAmmoResource;
        [RTTI.Member(7, 0x48, "Logic")] public Array<Ref<AmmoMutatorResource>> AmmoMutators;
        [RTTI.Member(8, 0x58, "HUD")] public int AmmoLowWarningAmount;
        [RTTI.Member(9, 0x5C, "Logic")] public int InitialAmmo;
        [RTTI.Member(10, 0x60, "Reload")] public float RoundsPerCycle;
        [RTTI.Member(11, 0x68, "Reload")] public Ref<ReloadDurationSettings> ReloadDurationsNormal;
        [RTTI.Member(12, 0x70, "Reload")] public Ref<ReloadDurationSettings> ReloadDurationsRaised;
        [RTTI.Member(13, 0x78, "Reload")] public bool OneCyclePerReload;
        [RTTI.Member(14, 0x80, "Animations")] public Ref<ReloadDurationsAnimationReference> ReloadDurationsAnimationReference;
        [RTTI.Member(15, 0x88, "Animations")] public String ReloadAnimationTag;
        [RTTI.Member(16, 0x90, "SoundEffects")] public Ref<SoundResource> ReloadStartSound;
        [RTTI.Member(17, 0x98, "SoundEffects")] public Ref<SoundResource> ReloadCycleSound;
        [RTTI.Member(18, 0xA0, "SoundEffects")] public Ref<SoundResource> ReloadFinishSound;
        [RTTI.Member(19, 0xA8, "VisualEffects")] public Ref<ParticleSystemResource> ReloadParticles;
        [RTTI.Member(20, 0xB0, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonReloadParticles;
        [RTTI.Member(21, 0xB8, "VisualEffects")] public float ReloadParticlesDelay;
    }

    [RTTI.Serializable(0x5A468BCA6C6EF6F0)]
    public class MagnetLookAtSettings
    {
        [RTTI.Member(0, 0x0)] public bool Apply;
        [RTTI.Member(1, 0x4)] public float Duration;
        [RTTI.Member(2, 0x8)] public float CooldownTimer;
    }

    [RTTI.Serializable(0x78B2BFED07F2636A)]
    public class MapIconFilter : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(1, 0x30)] public Ref<UITexture> Icon;
    }

    [RTTI.Serializable(0x238BBD033CC286E7)]
    public class MapInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD2AA804FB8FBB115)]
    public class MapMarkerFontSettings
    {
        [RTTI.Member(0, 0x0)] public FRGBAColor FontColor;
        [RTTI.Member(1, 0x10)] public FRGBAColor ShadowColor;
        [RTTI.Member(2, 0x20)] public Vec2 ShadowOffset;
        [RTTI.Member(3, 0x30)] public Ref<FontResource> Font;
        [RTTI.Member(4, 0x38)] public int FontSize;
        [RTTI.Member(5, 0x3C)] public float ShadowOutlineOffset;
        [RTTI.Member(6, 0x40)] public ELanguage Language;
    }

    [RTTI.Serializable(0x55954E63D9B7F482)]
    public class MapProjectionSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Rendering")] public Ref<CurveResource> DepthScale;
        [RTTI.Member(1, 0x30, "Rendering")] public float DepthBias;
        [RTTI.Member(2, 0x34, "HeightData")] public float MaxDepth;
        [RTTI.Member(3, 0x38, "HeightData")] public float StoredDepthScale;
        [RTTI.Member(4, 0x3C, "Rendering")] public float RenderPlaneZ;
    }

    [RTTI.Serializable(0xA71A1D3CBB1DC912)]
    public class MapResource : Resource
    {
        [RTTI.Member(0, 0x28, "Selection")] public Ref<CurveResource> Selection_ZoomSpeed;
        [RTTI.Member(1, 0x30, "Selection")] public float DeadZone;
        [RTTI.Member(2, 0x34, "Selection")] public float MaxZoom;
        [RTTI.Member(3, 0x38, "Selection")] public float InitialZoom;
        [RTTI.Member(4, 0x3C, "Selection")] public bool AlwaysUseInitialZoom;
        [RTTI.Member(5, 0x40, "Selection")] public FRange InteriorMapZoom;
        [RTTI.Member(6, 0x48, "Selection")] public Ref<CurveResource> ScrollSpeed;
        [RTTI.Member(7, 0x50, "Selection")] public float ScrollDampeningFactor;
        [RTTI.Member(8, 0x58, "Selection")] public Ref<UITexture> SelectionImage;
        [RTTI.Member(9, 0x60, "Selection")] public float SelectionScale;
        [RTTI.Member(10, 0x64, "Selection")] public float SelectionRadius;
        [RTTI.Member(11, 0x68, "Selection")] public Ref<CurveResource> SelectionMagnetStrengthForSpeedCurve;
        [RTTI.Member(12, 0x70, "Touchpad")] public Ref<CurveResource> Touchpad_ZoomSpeed;
        [RTTI.Member(13, 0x78, "Touchpad")] public Ref<CurveResource> HorizontalScrollSpeed;
        [RTTI.Member(14, 0x80, "Touchpad")] public Ref<CurveResource> TouchVerticalScrollSpeed;
        [RTTI.Member(15, 0x88, "View")] public float WidthInWorldCoords;
        [RTTI.Member(16, 0x90, "Markers")] public Ref<Texture> OffscreenMarkerTexture;
        [RTTI.Member(17, 0x98, "Markers")] public int OffscreenMarkerBorderWidth;
        [RTTI.Member(18, 0xA0, "Markers")] public Ref<Texture> MarkerShadowBlobTexture;
        [RTTI.Member(19, 0xA8, "Markers")] public float MarkerShadowBlobSize;
        [RTTI.Member(20, 0xB0, "Markers")] public Ref<ShaderResource> MapAreaSDFShader;
        [RTTI.Member(21, 0xB8, "Markers")] public Ref<ShaderResource> MapRoadShader;
        [RTTI.Member(22, 0xC0, "ShowOnMap")] public float PanningSpeed;
        [RTTI.Member(23, 0xC8, "ShowOnMap")] public Ref<CurveResource> ZoomLevelForDistance;
        [RTTI.Member(24, 0xD0, "ShowOnMap")] public Ref<CurveResource> ShowOnMapZoomLevelTrajectory;
        [RTTI.Member(25, 0xD8, "ShowOnMap")] public Ref<CurveResource> ShowOnMapDistanceTrajectory;
        [RTTI.Member(26, 0xE4, "ZoomLevels")] public float Medium;
        [RTTI.Member(27, 0xE8, "ZoomLevels")] public float High;
        [RTTI.Member(28, 0xF0, "Markers")] public MapMarkerFontSettings TitleFontSettings;
        [RTTI.Member(29, 0x140, "Markers")] public Array<MapMarkerFontSettings> TitleFontSettingsOverrides;
        [RTTI.Member(30, 0x150, "Markers")] public MapMarkerFontSettings DetailsFontSettings;
        [RTTI.Member(31, 0x1A0, "Markers")] public Array<MapMarkerFontSettings> DetailsFontSettingsOverrides;
        [RTTI.Member(32, 0x1B0, "Markers")] public float OnDifferentMapOpacity;
        [RTTI.Member(33, 0x1B4, "Markers")] public float MarkerIconShadowSize;
        [RTTI.Member(34, 0x1B8, "Markers")] public float MarkerIconShadowOpacity;
        [RTTI.Member(35, 0x1C0, "Markers")] public Ref<UITexture> StairwellIcon;
    }

    [RTTI.Serializable(0x5CDE2E32AC4E5B88)]
    public class MapRoadRenderSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<UITexture> RoadTexture;
        [RTTI.Member(1, 0x30, "Logic")] public float RoadWidth;
        [RTTI.Member(2, 0x34, "Logic")] public float DistanceBetweenRoadSteps;
        [RTTI.Member(3, 0x38, "Logic")] public float Smoothness;
    }

    [RTTI.Serializable(0xE54BAD505ED0D6D4)]
    public class MapTag : VisualTag
    {
    }

    [RTTI.Serializable(0x5FE983D44570D433)]
    public class MapTextureTile
    {
        [RTTI.Member(0, 0x0)] public Ref<Texture> ColorTexture;
        [RTTI.Member(1, 0x8)] public Ref<Texture> DepthTexture;
    }

    [RTTI.Serializable(0x59EBC7AD0DBB2E62)]
    public class MapTextureTileRow
    {
        [RTTI.Member(0, 0x0)] public Array<MapTextureTile> Textures;
    }

    [RTTI.Serializable(0x4DDC990284016C88)]
    public class MapViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xBF0EF24E4AE853DD)]
    public class MapWidget : Widget
    {
    }

    [RTTI.Serializable(0x24EAC7C7ECFC6743)]
    public class MapZone : MapZoneBase
    {
        [RTTI.Member(0, 0x80)] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0x6B204677E2C11E3A)]
    public class MapZoneBase : ParentWorldNode
    {
    }

    [RTTI.Serializable(0xCA9F00058A38BF8F)]
    public class MapZonePortal : MapZoneBase
    {
        [RTTI.Member(0, 0x70, "Shared")] public Ref<MapZonePortalSide> SideA;
        [RTTI.Member(1, 0x78, "Shared")] public Ref<MapZonePortalSide> SideB;
    }

    [RTTI.Serializable(0xCCF13B499F134BF1)]
    public class MapZonePortalSide : WorldNode
    {
        [RTTI.Member(0, 0x80)] public Vec3 MarkerOffset;
        [RTTI.Member(1, 0x90)] public Ref<ConditionResource> Lock;
        [RTTI.Member(2, 0x98)] public UUIDRef<MapZone> Zone;
        [RTTI.Member(3, 0xC8)] public float ExtraTraversalCost;
        [RTTI.Member(4, 0xCC)] public bool IgnoreDistanceCost;
        [RTTI.Member(5, 0xCD)] public bool CanBeEnteredFromThisSide;
    }

    [RTTI.Serializable(0x8945CAABB315AA0F)]
    public class MapZoneRevealArea : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "Logic")] public Array<Ref<CollisionTrigger>> AreaTriggers;
        [RTTI.Member(1, 0x98, "Logic")] public EMapZoneRevealAreaMode TriggerMode;
    }

    [RTTI.Serializable(0xB668A7CE7940B841)]
    public class MapZoneSection : MapZone
    {
        [RTTI.Member(0, 0xB0)] public Array<Ref<MapZoneRevealArea>> RevealAreas;
        [RTTI.Member(1, 0xC8)] public bool IsStairwell;
    }

    [RTTI.Serializable(0xA511CD441527484E)]
    public class MappedExterior : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "Logic")] public Array<Ref<MapZoneSection>> Sections;
        [RTTI.Member(1, 0x80, "Logic")] public Array<Ref<MapZonePortal>> Portals;
    }

    [RTTI.Serializable(0x9AF0971ACA8A853E)]
    public class MappedFloor : ParentWorldNode
    {
        [RTTI.Member(0, 0x78, "Logic")] public bool UpdateFogOfWar;
        [RTTI.Member(1, 0x80, "Logic")] public Array<Ref<MapZoneSection>> Sections;
        [RTTI.Member(2, 0x98, "Logic")] public Array<MappedFloorTextureRect> Textures;
        [RTTI.Member(3, 0xA8, "Logic")] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0xD6AA52D89F80EABF)]
    public class MappedFloorTextureRect
    {
        [RTTI.Member(0, 0x0, "Logic")] public FRect Rectangle;
        [RTTI.Member(1, 0x10, "Logic")] public StreamingRef<Texture> Texture;
    }

    [RTTI.Serializable(0x1C110F8F1071C598)]
    public class MappedInterior : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "Logic")] public Array<Ref<MappedFloor>> Floors;
        [RTTI.Member(1, 0x80, "Logic")] public Array<Ref<MapZonePortal>> Portals;
        [RTTI.Member(2, 0xA0, "Logic")] public int MapInitialFloorIndex;
        [RTTI.Member(3, 0xA4, "Logic")] public EFloorNrDirection FloorIndexOrder;
        [RTTI.Member(4, 0xA8, "Logic")] public Ref<AmbienceCycle> BakeOverrideCycle;
    }

    [RTTI.Serializable(0xAC5C5F307EF02A00)]
    public class MarkerRepState : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocationMarkerState> MarkerState;
        [RTTI.Member(1, 0x30)] public Array<Ref<LocationMarkerIconData>> Icons;
        [RTTI.Member(2, 0x40)] public FRGBAColor Color;
    }

    [RTTI.Serializable(0xCCC7A7CA13D57149)]
    public class MasterBusSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<SoundMasterParametersResource>> SoundMasterParameters;
    }

    [RTTI.Serializable(0xC21A91B0F3EB4D5D)]
    public class MasterColorizeSettings
    {
        [RTTI.Member(0, 0x0, "Settings")] public FRGBAColor ShadowColor;
        [RTTI.Member(1, 0x10, "Settings")] public FRGBAColor MidtoneColor;
        [RTTI.Member(2, 0x20, "Settings")] public FRGBAColor HighlightColor;
        [RTTI.Member(3, 0x30, "Settings")] public float Contrast;
        [RTTI.Member(4, 0x34, "Settings")] public float Brightness;
        [RTTI.Member(5, 0x38, "Settings")] public float Gain;
        [RTTI.Member(6, 0x3C, "Settings")] public float Gamma;
        [RTTI.Member(7, 0x40, "Settings")] public float Depth;
    }

    [RTTI.Serializable(0xB95C6811B59F0376)]
    public class Mat34
    {
        [RTTI.Member(0, 0x0)] public Vec4Pack Row0;
        [RTTI.Member(1, 0x10)] public Vec4Pack Row1;
        [RTTI.Member(2, 0x20)] public Vec4Pack Row2;
    }

    [RTTI.Serializable(0x16FC45E819F7E789)]
    public class Mat44
    {
        [RTTI.Member(0, 0x0)] public Vec4 Col0;
        [RTTI.Member(1, 0x10)] public Vec4 Col1;
        [RTTI.Member(2, 0x20)] public Vec4 Col2;
        [RTTI.Member(3, 0x30)] public Vec4 Col3;
    }

    [RTTI.Serializable(0xA9BE1AA610ED5830)]
    public class MatchAssignment : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String RequestUUID;
        [RTTI.Member(1, 0x28)] public String OriginRequestUUID;
        [RTTI.Member(2, 0x30)] public int64 Version;
        [RTTI.Member(3, 0x38)] public String GameID;
    }

    [RTTI.Serializable(0xCDA947D77E942C1A)]
    public class MatchAssignmentHandler : RTTIObject
    {
    }

    [RTTI.Serializable(0x299FDCB0B0894A2)]
    public class MatchAssignmentKIN : MatchAssignment
    {
        [RTTI.Member(0, 0x40)] public Ref<TurbineContext> TurbineContext;
        [RTTI.Member(1, 0x48)] public String Faction;
        [RTTI.Member(2, 0x50)] public String BuildID;
        [RTTI.Member(3, 0x58)] public String PlaylistID;
        [RTTI.Member(4, 0x60)] public int PlaylistVersion;
        [RTTI.Member(5, 0x64)] public int CurrentRound;
        [RTTI.Member(6, 0x68)] public int64 GameCreationTime;
        [RTTI.Member(7, 0x70)] public bool IsSpectator;
    }

    [RTTI.Serializable(0x92A8B515FEF6082B)]
    public class MatchCancelRequest : MatchMessage
    {
        [RTTI.Member(0, 0x28)] public String TargetUUID;
    }

    [RTTI.Serializable(0x71C2CA99CB86388D)]
    public class MatchCancelRequestKIN : MatchCancelRequest
    {
        [RTTI.Member(0, 0x30)] public String Playlist;
    }

    [RTTI.Serializable(0x6C9DB5FBD5D3A41A)]
    public class MatchGame : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String GameID;
        [RTTI.Member(1, 0x28)] public int64 Version;
        [RTTI.Member(2, 0x30)] public int64 CreationTime;
        [RTTI.Member(3, 0x38)] public Array<Ref<MatchPlayerGroup>> PlayerGroups;
    }

    [RTTI.Serializable(0xFA617656FCA4C4BF)]
    public class MatchGameKIN : MatchGame
    {
        [RTTI.Member(0, 0x48)] public String BuildID;
        [RTTI.Member(1, 0x50)] public Ref<TurbineContext> TurbineContext;
        [RTTI.Member(2, 0x58)] public int CurrentRound;
        [RTTI.Member(3, 0x60)] public String PlaylistID;
        [RTTI.Member(4, 0x68)] public int MaxPlayerCount;
        [RTTI.Member(5, 0x6C)] public int CurrentRunTime;
        [RTTI.Member(6, 0x70)] public int ExpectedTimeRemaining;
        [RTTI.Member(7, 0x74)] public int NextRoundIndex;
        [RTTI.Member(8, 0x78)] public Array<Ref<MatchPlayerKIN>> Spectators;
    }

    [RTTI.Serializable(0x520F724384ED266E)]
    public class MatchGameUpdate : MatchMessage
    {
        [RTTI.Member(0, 0x28)] public Ref<MatchGame> Game;
    }

    [RTTI.Serializable(0xC66BBB3485CA79B2)]
    public class MatchGameUpdateKIN : MatchGameUpdate
    {
        [RTTI.Member(0, 0x30)] public String ClanISA;
        [RTTI.Member(1, 0x38)] public String ClanHGH;
    }

    [RTTI.Serializable(0x37BC07626563BA99)]
    public class MatchMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String UUID;
    }

    [RTTI.Serializable(0xF2F42296DF13874D)]
    public class MatchPlayer : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public WString AccountID;
    }

    [RTTI.Serializable(0xC60E8F8CA64B455C)]
    public class MatchPlayerGroup : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String RequestID;
        [RTTI.Member(1, 0x28)] public Array<Ref<MatchPlayer>> Players;
    }

    [RTTI.Serializable(0x1858627B8C480B3F)]
    public class MatchPlayerKIN : MatchPlayer
    {
        [RTTI.Member(0, 0x28)] public MatchSkillRating SkillRating;
        [RTTI.Member(1, 0x40)] public String Faction;
        [RTTI.Member(2, 0x48)] public int GameJoinTimeMs;
        [RTTI.Member(3, 0x4C)] public int XpEarned;
        [RTTI.Member(4, 0x50)] public Array<Ref<PingTime>> PingTimes;
        [RTTI.Member(5, 0x60)] public WString ClanTag;
    }

    [RTTI.Serializable(0xE9F04EA354B78C15)]
    public class MatchRequest : MatchMessage
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<MatchPlayer>> Players;
    }

    [RTTI.Serializable(0xAD9A889ACF70B218)]
    public class MatchRequestKIN : MatchRequest
    {
        [RTTI.Member(0, 0x38)] public String BuildID;
        [RTTI.Member(1, 0x40)] public Array<String> PreferredMaps;
        [RTTI.Member(2, 0x50)] public Array<String> AvailableMaps;
        [RTTI.Member(3, 0x60)] public String Playlist;
    }

    [RTTI.Serializable(0x28B02D0EF041C76F)]
    public class MatchRequestResult : MatchResult
    {
        [RTTI.Member(0, 0x20)] public String RequestUUID;
        [RTTI.Member(1, 0x28)] public float Progress;
        [RTTI.Member(2, 0x30)] public HashMap<String_double> Attributes;
        [RTTI.Member(3, 0x40)] public Array<Ref<MatchAssignment>> Assignments;
    }

    [RTTI.Serializable(0x6168EE4BD26923)]
    public class MatchResult : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x628864AFD54D3503)]
    public class MatchSkillRating : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public double Value;
        [RTTI.Member(1, 0x10)] public double RD;
    }

    [RTTI.Serializable(0x10434921AB3D9C5B)]
    public class MaterialLightingResource : Resource
    {
        [RTTI.Member(0, 0x30)] public HairMaterial HairMaterial;
        [RTTI.Member(1, 0x60)] public SkinMaterial SkinMaterial;
        [RTTI.Member(2, 0x74)] public FoliageMaterial FoliageMaterial;
        [RTTI.Member(3, 0x80)] public bool UseGGX;
    }

    [RTTI.Serializable(0xC24706D0392977E)]
    public class MaterialTypeReplacement
    {
        [RTTI.Member(0, 0x0)] public MaterialType MaterialType;
        [RTTI.Member(1, 0x2)] public MaterialType Replacement;
    }

    [RTTI.Serializable(0x2063933A503A2FCB)]
    public class MaterialTypeResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public MaterialType MaterialType;
        [RTTI.Member(1, 0x2A, "General")] public MaterialType BaseMaterialType;
        [RTTI.Member(2, 0x2C, "General")] public RGBAColor DebugColor;
        [RTTI.Member(3, 0x30, "General")] public EMaterialDebugType DebugType;
        [RTTI.Member(4, 0x34, "Options")] public bool BlocksVision;
        [RTTI.Member(5, 0x35, "Options")] public bool BlocksAIBulletFireTest;
        [RTTI.Member(6, 0x38, "Sound")] public float TransmissionLoss;
    }

    [RTTI.Serializable(0x3EEA66852C8E3960)]
    public class MaterialTypeResourceGame : MaterialTypeResource
    {
        [RTTI.Member(0, 0x40, "SpeedModifier")] public float StandSpeedModifier;
        [RTTI.Member(1, 0x44, "SpeedModifier")] public float CrouchSpeedModifier;
        [RTTI.Member(2, 0x48, "SpeedModifier")] public float FrictionModifier;
        [RTTI.Member(3, 0x4C, "Options")] public int BlockingPower;
        [RTTI.Member(4, 0x50, "Options")] public float Hardness;
        [RTTI.Member(5, 0x54, "Options")] public bool BlocksExplosion;
        [RTTI.Member(6, 0x58, "Options")] public Ref<CurveResource> RicochetProbabilityCurve;
    }

    [RTTI.Serializable(0x1A7314DFB4ECA7DB)]
    public class MedalQuestRewardDisplayEntry : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<UITexture> MedalIcon;
        [RTTI.Member(1, 0x30, "General")] public Ref<UITexture> RewardIcon;
        [RTTI.Member(2, 0x38, "General")] public Ref<LocalizedTextResource> RewardName;
    }

    [RTTI.Serializable(0x3782A93C151632C0)]
    public class MeleeAttackEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x1B5AE9CBE7CBF281)]
    public class MeleeAttackEventResource : PausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
    }

    [RTTI.Serializable(0xDAAD429257E4D054)]
    public class MeleeDamageBox : MeleeDamageShapeType
    {
        [RTTI.Member(0, 0x70)] public BoundingBox3 Box;
    }

    [RTTI.Serializable(0x406486774E331849)]
    public class MeleeDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x251D622FC835A97B)]
    public class MeleeDamageComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x78AD26FD3F3BDC8A)]
    public class MeleeDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<MeleeDamageShapeResource>> DamageShapes;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<AIAuralStimulusResource> AuralStimulusOnImpact;
        [RTTI.Member(2, 0x40, "Logic")] public String DamageLocationHelper;
        [RTTI.Member(3, 0x50, "Logic")] public Mat44 LocalMatrix;
        [RTTI.Member(4, 0x90, "Logic")] public Ref<MeleeDamageShapeType> Shape;
        [RTTI.Member(5, 0x98, "Logic")] public bool UseSweptDamage;
        [RTTI.Member(6, 0x99, "Logic")] public bool CanHitWorld;
        [RTTI.Member(7, 0xA0, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(8, 0xB0, "Logic")] public EMeleeDamageImpulseDirectionType ImpulseDirectionType;
        [RTTI.Member(9, 0xC0, "Logic")] public Vec3 EntityImpulseDirection;
        [RTTI.Member(10, 0xD0, "Logic")] public MaterialType DamageMaterialType;
        [RTTI.Member(11, 0xD2, "Logic")] public bool ApplyImpactAnimationOnParent;
        [RTTI.Member(12, 0xD4, "Logic")] public float ImpactAnimationSpeed;
        [RTTI.Member(13, 0xD8, "Logic")] public float ImpactAnimationDuration;
        [RTTI.Member(14, 0xDC, "Logic")] public float TargetImpactAnimationSpeed;
        [RTTI.Member(15, 0xE0, "Logic")] public float TargetImpactAnimationDuration;
        [RTTI.Member(16, 0xE8, "Logic")] public CPtr<EntityAction> DamageAction;
        [RTTI.Member(17, 0xF0, "Logic")] public Ref<GraphProgramResource> ModifyDamageGraphResource;
    }

    [RTTI.Serializable(0x8F79FDB609389E3C)]
    public class MeleeDamageDirectionalShapeCurve : MeleeDamageShapeType
    {
        [RTTI.Member(0, 0x70)] public Ref<CurveResource> ShapeCurve;
    }

    [RTTI.Serializable(0xD9F339901FCE886C)]
    public class MeleeDamageShapeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<MeleeDamageShapeType>> ShapeTypes;
        [RTTI.Member(1, 0x38, "Logic")] public bool UseSweptDamage;
        [RTTI.Member(2, 0x39, "Logic")] public bool CanHitWorld;
        [RTTI.Member(3, 0x40, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
        [RTTI.Member(4, 0x50, "Logic")] public EMeleeDamageImpulseDirectionType ImpulseDirectionType;
        [RTTI.Member(5, 0x60, "Logic")] public Vec3 EntityImpulseDirection;
        [RTTI.Member(6, 0x70, "Logic")] public MaterialType DamageMaterialType;
        [RTTI.Member(7, 0x72, "Logic")] public bool ApplyImpactAnimationOnParent;
        [RTTI.Member(8, 0x74, "Logic")] public float ImpactAnimationSpeed;
        [RTTI.Member(9, 0x78, "Logic")] public float ImpactAnimationDuration;
        [RTTI.Member(10, 0x7C, "Logic")] public float TargetImpactAnimationSpeed;
        [RTTI.Member(11, 0x80, "Logic")] public float TargetImpactAnimationDuration;
        [RTTI.Member(12, 0x88, "Logic")] public CPtr<EntityAction> DamageAction;
        [RTTI.Member(13, 0x90, "Logic")] public Ref<GraphProgramResource> ModifyDamageGraphResource;
    }

    [RTTI.Serializable(0xF9DF9FF5CC76E807)]
    public class MeleeDamageShapeType : Resource
    {
        [RTTI.Member(0, 0x28)] public String DamageLocationHelper;
        [RTTI.Member(1, 0x30)] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xCB7E843F033D9D87)]
    public class MeleeDamageSphere : MeleeDamageShapeType
    {
        [RTTI.Member(0, 0x70)] public float Radius;
    }

    [RTTI.Serializable(0xBFAFFEA324751C2C)]
    public class MeleeWeaponAnimation : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(1, 0x30)] public String AnimationStateName;
        [RTTI.Member(2, 0x38)] public String AnimationNodeName;
        [RTTI.Member(3, 0x40)] public Array<AnimationVariableValue> AnimationVariables;
        [RTTI.Member(4, 0x50)] public int UserEventID;
        [RTTI.Member(5, 0x58)] public String HitContactJointName;
        [RTTI.Member(6, 0x60)] public Vec3 HitContactPosition;
        [RTTI.Member(7, 0x70)] public Vec3 HitContactWarpOffset;
        [RTTI.Member(8, 0x80)] public float OverrideTurnSpeed;
        [RTTI.Member(9, 0x84)] public AnimationStateID StateID;
    }

    [RTTI.Serializable(0xFA5B754746919E7C)]
    public class MeleeWeaponAttackTypeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float StrikeQueuedMoveTimeout;
        [RTTI.Member(1, 0x2C, "Animation")] public float StrikeRequestDuration;
        [RTTI.Member(2, 0x30, "Animation")] public Array<String> StrikeChargeSuccessAnimationActions;
        [RTTI.Member(3, 0x40, "Animation")] public Array<String> StrikeAnimationActions;
        [RTTI.Member(4, 0x50, "Animation")] public String StrikeAnimationTag;
        [RTTI.Member(5, 0x58, "Logic")] public Ref<EntityComponentResource> DamageComponent;
        [RTTI.Member(6, 0x60, "Animation")] public Array<Ref<AIFaction>> AlwaysEvaluateFactions;
        [RTTI.Member(7, 0x70, "Animation")] public Ref<CurveResource> DistanceAutoAimAngleCurve;
        [RTTI.Member(8, 0x78, "Animation")] public float MaxAutoAimDistance;
        [RTTI.Member(9, 0x7C, "Animation")] public FRange MaxHeightDifference;
        [RTTI.Member(10, 0x84, "Animation")] public float WarpDistanceFromTarget;
        [RTTI.Member(11, 0x88, "Animation")] public float InAirMeleeStrikeRadius;
        [RTTI.Member(12, 0x90, "Animation")] public Vec3 InAirMeleeStrikeOffset;
        [RTTI.Member(13, 0xA0, "Animation")] public BoolPropertyLink AllowedPropertyLink;
        [RTTI.Member(14, 0xA8, "Animation")] public CPtr<EntityAction> StartAttackAction;
        [RTTI.Member(15, 0xB0, "Animation")] public CPtr<EntityAction> StopAttackAction;
        [RTTI.Member(16, 0xB8, "Animation")] public Array<Ref<MeleeWeaponAnimation>> MeleeWeaponAnimations;
        [RTTI.Member(17, 0xC8, "AI")] public Array<Ref<RobotMeleeWeaponExitState>> AnimationExitStates;
        [RTTI.Member(18, 0xD8, "AI")] public Ref<WarpedAnimation> WarpedAnimation;
        [RTTI.Member(19, 0xE0, "AI")] public Array<Ref<WarpedAnimation>> WarpedAnimations;
        [RTTI.Member(20, 0xF0, "AI")] public String AIAttackId;
        [RTTI.Member(21, 0x100, "AI")] public Vec3 DamagePosition;
        [RTTI.Member(22, 0x110, "AI")] public float DamageRadius;
        [RTTI.Member(23, 0x118, "AI")] public Array<Ref<VolumetricAnnotation>> TriggerVolumes;
        [RTTI.Member(24, 0x128, "AI")] public Array<Ref<VolumetricAnnotation>> ExclusionVolumes;
        [RTTI.Member(25, 0x138, "Logic")] public float MeleeMoveMaxTurnSpeed;
        [RTTI.Member(26, 0x13C, "Logic")] public float MeleeMoveSpeedModifier;
        [RTTI.Member(27, 0x140, "AI")] public float AdditionalCollisionRadius;
    }

    [RTTI.Serializable(0xBB73A32D715CCFFB)]
    public class MeleeWeaponComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5D3C201DF582276D)]
    public class MeleeWeaponComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB6B4AEECCDF27F8C)]
    public class MeleeWeaponComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<MeleeWeaponModeResource>> Modes;
        [RTTI.Member(1, 0x38, "Animation")] public float ModeSwitchDuration;
        [RTTI.Member(2, 0x40, "Logic")] public CPtr<EntityAction> StartBlockAction;
        [RTTI.Member(3, 0x48, "Logic")] public CPtr<EntityAction> StopBlockAction;
        [RTTI.Member(4, 0x50, "Logic")] public float MeleeMoveMaxTurn;
        [RTTI.Member(5, 0x54, "Logic")] public float HitNoDamageStaggerImpactSeverity;
        [RTTI.Member(6, 0x58, "Logic")] public float HitWorldFloorAngle;
        [RTTI.Member(7, 0x60, "Animation")] public String BlockTag;
        [RTTI.Member(8, 0x68, "Animation")] public String DirectionalAttackTag;
        [RTTI.Member(9, 0x70, "AI")] public float MinRange;
        [RTTI.Member(10, 0x74, "AI")] public float MaxRange;
        [RTTI.Member(11, 0x78, "Logic")] public float DirectionalAttackMovementOverride;
        [RTTI.Member(12, 0x7C, "Logic")] public float DirectionalAttackMovementOverrideDuration;
        [RTTI.Member(13, 0x80, "Animation")] public String MeleeSwingIndexAnimName;
        [RTTI.Member(14, 0x88, "Unlocks")] public String MeleeSkillLevelAnimVarName;
        [RTTI.Member(15, 0x90, "Unlocks")] public Array<Ref<PerkLevel>> MeleeSkillLevelPerks;
    }

    [RTTI.Serializable(0xE37F3F8E428D167F)]
    public class MeleeWeaponModeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Animation")] public int AnimationId;
        [RTTI.Member(1, 0x30, "Animation")] public BoolPropertyLink EnabledPropertyLink;
        [RTTI.Member(2, 0x38, "AttackTypes")] public Ref<MeleeWeaponAttackTypeResource> Primary;
        [RTTI.Member(3, 0x40, "AttackTypes")] public Ref<MeleeWeaponAttackTypeResource> Secondary;
        [RTTI.Member(4, 0x48, "AttackTypes")] public Array<Ref<MeleeWeaponAttackTypeResource>> AIAttacks;
    }

    [RTTI.Serializable(0xB6205CE39B718BD9)]
    public class MemoryFactActionBase : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Fact;
    }

    [RTTI.Serializable(0x4C54FD878518FBA5)]
    public class Menu : CoreObject
    {
    }

    [RTTI.Serializable(0xD7A70953AE74288)]
    public class MenuActionBackToPage : MenuActionOpenPage
    {
    }

    [RTTI.Serializable(0x57A985DA89250045)]
    public class MenuActionDisableNavigation : MenuActionResource
    {
    }

    [RTTI.Serializable(0xBEBCFD916B25EA47)]
    public class MenuActionEnableNavigation : MenuActionResource
    {
    }

    [RTTI.Serializable(0x2CD13F2B83628D7E)]
    public class MenuActionHideElement : MenuActionTagProperty
    {
    }

    [RTTI.Serializable(0x1F008BA6D91CA1C)]
    public class MenuActionOpenPage : MenuActionResource
    {
        [RTTI.Member(0, 0x20)] public UUIDRef<MenuPageBase> Page;
        [RTTI.Member(1, 0x48)] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(2, 0x58)] public CPtr<MenuElementResource> TargetElement;
    }

    [RTTI.Serializable(0xE06614234C9BB106)]
    public class MenuActionOpenVKB : MenuActionResource
    {
        [RTTI.Member(0, 0x20)] public Ref<LocalizedTextResource> Label;
        [RTTI.Member(1, 0x28)] public Ref<LocalizedTextResource> DefaultText;
        [RTTI.Member(2, 0x30)] public int MaxCharLength;
        [RTTI.Member(3, 0x34)] public int VKBOptions;
    }

    [RTTI.Serializable(0x7BF86215E86CC5B1)]
    public class MenuActionQuitMenu : MenuActionResource
    {
    }

    [RTTI.Serializable(0xAD7E56567A67D7F6)]
    public class MenuActionResource : CoreObject
    {
    }

    [RTTI.Serializable(0x6FB5B5B09684CEB9)]
    public class MenuActionScriptFunction : MenuActionResource
    {
        [RTTI.Member(0, 0x20)] public CPtr<MenuScriptResource> Script;
        [RTTI.Member(1, 0x28)] public String ScriptName;
        [RTTI.Member(2, 0x30)] public String Function;
        [RTTI.Member(3, 0x38)] public Array<String> Arguments;
    }

    [RTTI.Serializable(0x4D677C2F2304814B)]
    public class MenuActionSetFocus : MenuActionResource
    {
        [RTTI.Member(0, 0x20)] public EMenuActionFocusType Type;
        [RTTI.Member(1, 0x28)] public CPtr<MenuVisualResource> TargetElement;
        [RTTI.Member(2, 0x30)] public bool FindTargetInChildElements;
    }

    [RTTI.Serializable(0x532CE6EFBD3C7A76)]
    public class MenuActionShowElement : MenuActionTagProperty
    {
    }

    [RTTI.Serializable(0x1F1C65443F513F48)]
    public class MenuActionTagProperty : MenuActionResource
    {
        [RTTI.Member(0, 0x20)] public CPtr<MenuVisualResource> TargetElement;
    }

    [RTTI.Serializable(0xF44A1D77CFB1785F)]
    public class MenuAnimationInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x5A0D0023BABBE405)]
    public class MenuAnimationKeyFrame : Resource
    {
        [RTTI.Member(0, 0x28, "Properties")] public int FrameNumber;
        [RTTI.Member(1, 0x2C, "Properties")] public float Value;
        [RTTI.Member(2, 0x30, "Properties")] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x305BB3297BB8885A)]
    public class MenuAnimationResource : Resource
    {
        [RTTI.Member(0, 0x28, "Properties")] public EMenuAnimationTrigger Trigger;
        [RTTI.Member(1, 0x29, "Properties")] public bool TriggerInverseAnimation;
        [RTTI.Member(2, 0x2C, "Properties")] public ELoopMode LoopMode;
        [RTTI.Member(3, 0x30, "Properties")] public EMenuAnimationUpdateFrequency Frequency;
        [RTTI.Member(4, 0x34, "Properties")] public int Blendtime;
        [RTTI.Member(5, 0x38, "Properties")] public Array<Ref<MenuElementAnimationResource>> PropertyAnimations;
        [RTTI.Member(6, 0x48, "Logic")] public Ref<MenuActionResource> OnAnimationStart;
        [RTTI.Member(7, 0x50, "Logic")] public Ref<MenuActionResource> OnAnimationEnd;
    }

    [RTTI.Serializable(0x6C242F6D4D4621BA)]
    public class MenuArrayBinding : MenuDataBinding
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<MenuDataBinding>> Elements;
    }

    [RTTI.Serializable(0x59DB56AA6D033B21)]
    public class MenuBoolBinding : MenuDataBinding
    {
        [RTTI.Member(0, 0x20)] public bool Value;
    }

    [RTTI.Serializable(0x1CC182DB21D8DC1C)]
    public class MenuCatalogRobotPartResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> Name;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> Description;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<UITexture> Texture;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<UITexture> PreviewTexture;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<FocusScannableBase> PartScannableBase;
    }

    [RTTI.Serializable(0xCAFC54D8307C3422)]
    public class MenuDLCAnimateItemRarityResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<UUIDRef<LootItemDescriptionResource>> LootItemDescriptionResources;
    }

    [RTTI.Serializable(0xD6998361730921B3)]
    public class MenuDataBinding : CoreObject
    {
    }

    [RTTI.Serializable(0x8607CF8018ED0A24)]
    public class MenuDataResource : MenuElementResource
    {
        [RTTI.Member(0, 0x30, "Properties")] public Ref<DataSourceResource> DataSourceResource;
        [RTTI.Member(1, 0x38, "Properties")] public int RefreshTimeMs;
        [RTTI.Member(2, 0x40, "Properties")] public int CacheExpiryMs;
        [RTTI.Member(3, 0x44, "Properties")] public bool Static;
        [RTTI.Member(4, 0x45, "Properties")] public bool KeepAlive;
    }

    [RTTI.Serializable(0xD3DC2BBC36BE6CD7)]
    public class MenuDataSourceBinding : MenuDataBinding
    {
        [RTTI.Member(0, 0x20)] public String XPath;
        [RTTI.Member(1, 0x28)] public CPtr<MenuDataResource> DataResource;
    }

    [RTTI.Serializable(0x9661FDCBA33DF375)]
    public class MenuElementAnimationInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x71D7D4066DA8C4C7)]
    public class MenuElementAnimationResource : Resource
    {
    }

    [RTTI.Serializable(0xCA32184657A95EEF)]
    public class MenuElementResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public bool Ignored;
    }

    [RTTI.Serializable(0xF43B3894CDDB2341)]
    public class MenuEventBinding : CoreObject
    {
        [RTTI.Member(0, 0x20, "Logic")] public EMenuEvent Event;
        [RTTI.Member(1, 0x28, "Logic")] public Ref<MenuActionResource> Action;
    }

    [RTTI.Serializable(0x40B0D789D6A859CD)]
    public class MenuGraphDataBinding : MenuObjectBinding
    {
        [RTTI.Member(0, 0x20)] public Ref<UIGraphData> Value;
    }

    [RTTI.Serializable(0x631D061CDEA4988D)]
    public class MenuGraphResource : MenuTextureResource
    {
        [RTTI.Member(0, 0x130, "Properties")] public Ref<MenuDataBinding> GraphData;
    }

    [RTTI.Serializable(0xA19DF8E894201107)]
    public class MenuGridPanelCellResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public Ref<MenuDataBinding> Value;
    }

    [RTTI.Serializable(0x781DB886E9902EB7)]
    public class MenuGridPanelResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public WString DefaultValue;
        [RTTI.Member(2, 0x120, "Properties")] public Ref<MenuDataBinding> ColumnCount;
        [RTTI.Member(3, 0x128, "Properties")] public int RowCount;
        [RTTI.Member(4, 0x12C, "ScrollBehavior")] public int ScrollTopOffset;
        [RTTI.Member(5, 0x130, "ScrollBehavior")] public int ScrollBottomOffset;
        [RTTI.Member(6, 0x134, "ScrollBehavior")] public int ScrollRightOffset;
        [RTTI.Member(7, 0x138, "ScrollBehavior")] public int ScrollLeftOffset;
        [RTTI.Member(8, 0x13C, "ScrollBar")] public int HorizontalScrollbarOffset;
        [RTTI.Member(9, 0x140, "ScrollBehavior")] public float ScrollSpeedX;
        [RTTI.Member(10, 0x144, "ScrollBehavior")] public float ScrollSpeedY;
        [RTTI.Member(11, 0x148, "Properties")] public bool VerticalCycling;
        [RTTI.Member(12, 0x149, "ScrollBehavior")] public bool ScrollFading;
        [RTTI.Member(13, 0x14A, "ScrollBehavior")] public bool LockScroll;
        [RTTI.Member(14, 0x14B, "ScrollBar")] public bool ShowScrollbar;
        [RTTI.Member(15, 0x14C, "Properties")] public bool SkipDisabledCells;
    }

    [RTTI.Serializable(0xF94975EFA8B18C9F)]
    public class MenuGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2B42E5A0E3D31BC0)]
    public class MenuImageLoaderSystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<MenuStreamingTexturesResource>> StreamingTextures;
        [RTTI.Member(1, 0x38, "General")] public Ref<UITexture> FallbackTexture;
    }

    [RTTI.Serializable(0xC16E9801962ADE93)]
    public class MenuInventorySortOrder
    {
        [RTTI.Member(0, 0x0)] public EMenuInventorySortOrder SortOrder;
        [RTTI.Member(1, 0x8)] public Ref<LocalizedTextResource> LegendLabelText;
    }

    [RTTI.Serializable(0x4BD81AB6682A9C77)]
    public class MenuLayerResource : MenuElementResource
    {
        [RTTI.Member(0, 0x30, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x40, "Properties")] public CPtr<MenuElementResource> DefaultFocus;
        [RTTI.Member(2, 0x48, "Properties")] public bool ShowLegend;
        [RTTI.Member(3, 0x49, "Properties")] public bool HideMessage;
        [RTTI.Member(4, 0x4C, "Properties")] public float RotationY;
    }

    [RTTI.Serializable(0xFF2321B3B965DE03)]
    public class MenuLegendLabelResource : CoreObject
    {
        [RTTI.Member(0, 0x20, "Properties")] public ELegendButton Button;
        [RTTI.Member(1, 0x28, "Properties")] public Ref<MenuDataBinding> Text;
        [RTTI.Member(2, 0x30, "Properties")] public CPtr<MenuLegendResource> TargetLegend;
        [RTTI.Member(3, 0x38, "Properties")] public Ref<MenuDataBinding> Enabled;
    }

    [RTTI.Serializable(0x66D30B21089AEA49)]
    public class MenuLegendResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
    }

    [RTTI.Serializable(0xEAD720EAC4A0CBE8)]
    public class MenuListItemResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public Ref<MenuDataBinding> Selectable;
        [RTTI.Member(2, 0x120, "Properties")] public Ref<MenuDataBinding> Value;
    }

    [RTTI.Serializable(0xE9590CEF26F90E8D)]
    public class MenuListResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public Ref<MenuDataBinding> DefaultValue;
        [RTTI.Member(2, 0x120, "Properties")] public float ScrollSpeed;
        [RTTI.Member(3, 0x124, "Properties")] public bool ShowScrollBar;
        [RTTI.Member(4, 0x128, "Properties")] public float ScrollUpAreaRatio;
        [RTTI.Member(5, 0x12C, "Properties")] public float ScrollDownAreaRatio;
        [RTTI.Member(6, 0x130, "Properties")] public bool Wrapping;
        [RTTI.Member(7, 0x131, "Properties")] public bool ScrollFading;
    }

    [RTTI.Serializable(0x4995F333EA41CBA8)]
    public class MenuLocalizedTextBinding : MenuDataBinding
    {
        [RTTI.Member(0, 0x20)] public Ref<LocalizedTextResource> LocalizedText;
        [RTTI.Member(1, 0x28)] public Array<MenuLocalizedTextParameter> Parameters;
    }

    [RTTI.Serializable(0xFDB35CACB4F736A6)]
    public class MenuLocalizedTextParameter
    {
        [RTTI.Member(0, 0x0)] public String ParameterName;
        [RTTI.Member(1, 0x8)] public Ref<MenuDataBinding> ParameterValue;
    }

    [RTTI.Serializable(0xB476D16950ECFE62)]
    public class MenuLocalizerResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<InGameIDToTextResource> InGameIDToResources;
    }

    [RTTI.Serializable(0xDE6CB9633B182FCB)]
    public class MenuMapResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public Ref<MenuDataBinding> ShowSelector;
    }

    [RTTI.Serializable(0xEFB13832875A30C0)]
    public class MenuModule : Module
    {
    }

    [RTTI.Serializable(0xE94DD731194B391A)]
    public class MenuMovieEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x7FEBA9CAA64A128)]
    public class MenuMovieEventResource : PauseEventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public String MovieName;
        [RTTI.Member(1, 0x38, "Logic")] public String MovieStartFrame;
    }

    [RTTI.Serializable(0xC8969235F78A2C8E)]
    public class MenuMovieResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Ref<MenuDataBinding> Source;
        [RTTI.Member(1, 0x110, "Properties")] public Ref<MenuDataBinding> StartFrame;
        [RTTI.Member(2, 0x118, "Properties")] public Ref<MenuDataBinding> LoopFrame;
        [RTTI.Member(3, 0x120, "Properties")] public bool FullScreen;
        [RTTI.Member(4, 0x121, "Properties")] public bool StartFromLastKeyFrame;
        [RTTI.Member(5, 0x128, "Logic")] public Array<MovieFrameMenuActionBinding> FrameActions;
        [RTTI.Member(6, 0x138, "Logic")] public Ref<MenuActionResource> OnMovieEnd;
    }

    [RTTI.Serializable(0x84E546FF49DB0D2F)]
    public class MenuNode : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x171E72F055CDCB30)]
    public class MenuObjectBinding : MenuDataBinding
    {
    }

    [RTTI.Serializable(0xA8980D8745A46C84)]
    public class MenuPage : MenuPageBase
    {
        [RTTI.Member(0, 0x28, "Properties")] public String GUMFile;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<MenuLayerResource> PageRoot;
        [RTTI.Member(2, 0x38, "Properties")] public bool HasCursor;
        [RTTI.Member(3, 0x39, "Properties")] public bool HasErrorHandler;
        [RTTI.Member(4, 0x3A, "Properties")] public bool CanCloseMenu;
        [RTTI.Member(5, 0x3B, "Properties")] public bool DisplayHUD;
        [RTTI.Member(6, 0x3C, "Properties")] public EHAlign HUDHorizontalAlign;
        [RTTI.Member(7, 0x40, "Properties")] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(8, 0x50, "Properties")] public bool ForceOpaque;
        [RTTI.Member(9, 0x54, "Properties")] public float FadeInDuration;
        [RTTI.Member(10, 0x58, "Properties")] public float FadeOutDuration;
        [RTTI.Member(11, 0x60, "Properties")] public Ref<SoundResource> GameToMenuTransitionSound;
        [RTTI.Member(12, 0x68, "Properties")] public int TargetFrameRateOverride;
    }

    [RTTI.Serializable(0x47ADA9725CEBB9E3)]
    public class MenuPageBase : Resource
    {
    }

    [RTTI.Serializable(0x29F0EDC06D0EA471)]
    public class MenuPagePlatformSpecific : MenuPageBase
    {
        [RTTI.Member(0, 0x28, "Properties")] public Ref<MenuPage> PagePS4;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<MenuPage> PagePC;
    }

    [RTTI.Serializable(0xF3690418877A32CC)]
    public class MenuPageScreenEffect
    {
        [RTTI.Member(0, 0x0)] public UUIDRef<MenuPageBase> MenuPage;
        [RTTI.Member(1, 0x10)] public Ref<ScreenEffectResource> ScreenEffect;
    }

    [RTTI.Serializable(0x9BA12BBD3C90D5E8)]
    public class MenuPanelResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "ScrollBehavior")] public bool Scrollable;
        [RTTI.Member(2, 0x11C, "ScrollBehavior")] public EPanelScrollType ScrollType;
        [RTTI.Member(3, 0x120, "ScrollBehavior")] public bool ScrollbarAutoHide;
        [RTTI.Member(4, 0x121, "Properties")] public bool AdjustToSafeArea;
    }

    [RTTI.Serializable(0xB9D8FDAE064E8E86)]
    public class MenuPlatformSpecificElementResource : MenuElementResource
    {
        [RTTI.Member(0, 0x30, "Properties")] public Array<Ref<MenuElementResource>> ChildElementsPS4;
        [RTTI.Member(1, 0x40, "Properties")] public Array<Ref<MenuElementResource>> ChildElementsPC;
    }

    [RTTI.Serializable(0xAD6E2A0321B1BA9F)]
    public class MenuProgressBarBlockResource : MenuProgressBarResource
    {
        [RTTI.Member(0, 0x168, "Styles")] public Ref<MenuStyleClass> BarFilledPositive;
        [RTTI.Member(1, 0x170, "Styles")] public Ref<MenuStyleClass> BarFilledNegative;
    }

    [RTTI.Serializable(0xB2399E2C5E76FC3E)]
    public class MenuProgressBarResource : MenuSliderResource
    {
        [RTTI.Member(0, 0x130, "Properties")] public Ref<MenuDataBinding> CompareValue;
        [RTTI.Member(1, 0x138, "Properties")] public Ref<MenuDataBinding> BarFillTime;
        [RTTI.Member(2, 0x140, "Properties")] public bool ProgressTextVisible;
        [RTTI.Member(3, 0x148, "Styles")] public Ref<MenuStyleClass> Background;
        [RTTI.Member(4, 0x150, "Styles")] public Ref<MenuStyleClass> BarEmpty;
        [RTTI.Member(5, 0x158, "Styles")] public Ref<MenuStyleClass> BarFilled;
        [RTTI.Member(6, 0x160, "Styles")] public Ref<MenuStyleClass> BarNotch;
    }

    [RTTI.Serializable(0xBA1EFBA69ABF91E0)]
    public class MenuProjectionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Camera")] public float Distance;
        [RTTI.Member(1, 0x2C, "Camera")] public float FOV;
        [RTTI.Member(2, 0x30, "Panning")] public float PanAreaSize;
        [RTTI.Member(3, 0x34, "Panning")] public float MaxPanX;
        [RTTI.Member(4, 0x38, "Panning")] public float MaxPanY;
        [RTTI.Member(5, 0x3C, "Panning")] public float PanSpeed;
        [RTTI.Member(6, 0x40, "Rotation")] public float RotStrength;
        [RTTI.Member(7, 0x44, "Rotation")] public float MaxRot;
        [RTTI.Member(8, 0x48, "Rotation")] public float RotSpeed;
        [RTTI.Member(9, 0x4C, "Rotation")] public float FixedRot;
        [RTTI.Member(10, 0x50, "Debug")] public float DepthMultiplier;
    }

    [RTTI.Serializable(0xC526FD5552A3F0CE)]
    public class MenuPropertyAnimationResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<MenuAnimationKeyFrame>> KeyFrames;
    }

    [RTTI.Serializable(0x66D212783F6B923D)]
    public class MenuQuestTrigger : QuestTrigger
    {
    }

    [RTTI.Serializable(0xD6E0F0FF000C963)]
    public class MenuQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xE51FA67D2AAE898)]
    public class MenuRadialSectorResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public int StartAngle;
        [RTTI.Member(2, 0x11C, "Properties")] public int EndAngle;
    }

    [RTTI.Serializable(0x584E1A6B271CCC6B)]
    public class MenuRadialWheelResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
    }

    [RTTI.Serializable(0xFD6693F9BA33EEB8)]
    public class MenuResource : Resource
    {
        [RTTI.Member(0, 0x28, "Properties")] public ISize ScreenSize;
        [RTTI.Member(1, 0x30, "Properties")] public Ref<MenuLegendResource> DefaultLegend;
        [RTTI.Member(2, 0x38, "Properties")] public Ref<MenuToastMessageResource> DefaultToastMessage;
        [RTTI.Member(3, 0x40, "Properties")] public Ref<MenuToastMessageResource> TopRightToastMessage;
        [RTTI.Member(4, 0x48, "Properties")] public String GUMSourcePath;
        [RTTI.Member(5, 0x50, "Properties")] public Ref<MenuImageLoaderSystemResource> ImageLoaderResource;
        [RTTI.Member(6, 0x58, "Properties")] public Ref<MenuProjectionResource> ProjectionResource;
        [RTTI.Member(7, 0x60, "Properties")] public Array<Ref<MenuStyleClass>> StyleCollection;
        [RTTI.Member(8, 0x70, "Properties")] public Ref<MenuLocalizerResource> MenuLocalizerResource;
        [RTTI.Member(9, 0x78, "Properties")] public int PressAndHoldTime;
        [RTTI.Member(10, 0x80, "Properties")] public Ref<RumbleResource> PressAndHoldRumble;
        [RTTI.Member(11, 0x88, "ToastMessages")] public Ref<LocalizedTextResource> CensoredToastMessage;
        [RTTI.Member(12, 0x90, "ToastMessages")] public Ref<LocalizedTextResource> SanitizedToastMessage;
        [RTTI.Member(13, 0x98, "Audio")] public Array<Ref<SoundResource>> SoundResources;
        [RTTI.Member(14, 0xA8, "Audio")] public Ref<ReverbPresetResource> ReverbPreset;
        [RTTI.Member(15, 0xB0, "Pages")] public Ref<MenuPageBase> StartPage;
        [RTTI.Member(16, 0xB8, "Pages")] public Ref<MenuPageBase> ErrorPage;
        [RTTI.Member(17, 0xC0, "AdditionalPages")] public Array<Ref<MenuPageBase>> Pages;
    }

    [RTTI.Serializable(0xBEA988D7B2BF1F38)]
    public class MenuSaveDataDialog : RTTIObject
    {
    }

    [RTTI.Serializable(0x5B5D2F4D8AB6C07A)]
    public class MenuScriptResource : MenuElementResource
    {
        [RTTI.Member(0, 0x30, "Properties", true)] public String SourceCode;
        [RTTI.Member(1, 0x38, "Properties")] public String ConvertedSourceCode;
    }

    [RTTI.Serializable(0x8D80FD81435F69E)]
    public class MenuScrollingPanelResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public float ScrollingSpeed;
        [RTTI.Member(2, 0x120, "Logic")] public Ref<MenuActionResource> OnScrollingFinished;
    }

    [RTTI.Serializable(0xC92EC9A4F23F65E5)]
    public class MenuSelectViewItemResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public Ref<MenuDataBinding> Value;
    }

    [RTTI.Serializable(0x66263FAE7A9CC36F)]
    public class MenuSelectViewResource : MenuListItemResource
    {
        [RTTI.Member(0, 0x128, "Properties")] public Ref<MenuDataBinding> DefaultValue;
        [RTTI.Member(1, 0x131, "Properties")] public bool Wrapping;
        [RTTI.Member(2, 0x138, "Logic")] public Ref<MenuActionResource> OnChange;
    }

    [RTTI.Serializable(0x1C7CB89CD645F5D0)]
    public class MenuSentenceGroupResourceBinding : MenuObjectBinding
    {
        [RTTI.Member(0, 0x20)] public Ref<SentenceGroupResource> Value;
    }

    [RTTI.Serializable(0x82A3887CE83918A2)]
    public class MenuShaderPropertyAnimationResource : MenuPropertyAnimationResource
    {
        [RTTI.Member(0, 0x38)] public String TargetShaderVariable;
    }

    [RTTI.Serializable(0xA9473F4191DA04C6)]
    public class MenuSliderResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Ref<MenuDataBinding> MinValue;
        [RTTI.Member(1, 0x110, "Properties")] public Ref<MenuDataBinding> MaxValue;
        [RTTI.Member(2, 0x118, "Properties")] public Ref<MenuDataBinding> CurrentValue;
        [RTTI.Member(3, 0x120, "Properties")] public Ref<MenuDataBinding> Step;
        [RTTI.Member(4, 0x128, "Logic")] public Ref<MenuActionResource> OnChange;
    }

    [RTTI.Serializable(0xD563BD9B4D901308)]
    public class MenuSpeechResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Ref<MenuDataBinding> Source;
        [RTTI.Member(1, 0x110, "Properties")] public Ref<MenuDataBinding> SubtitleClass;
        [RTTI.Member(2, 0x118, "Properties")] public Ref<MenuDataBinding> ShowSubtitles;
        [RTTI.Member(3, 0x120, "Logic")] public Ref<MenuActionResource> OnSpeechEnd;
    }

    [RTTI.Serializable(0x9AE3585A18B3D4D3)]
    public class MenuStreamingTexture
    {
        [RTTI.Member(0, 0x0)] public String TextureName;
        [RTTI.Member(1, 0x8)] public StreamingRef<Texture> Texture;
    }

    [RTTI.Serializable(0xAAC27C79B4B476C)]
    public class MenuStreamingTexturesResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<MenuStreamingTexture> MenuStreamingTextures;
        [RTTI.Member(1, 0x38, "General")] public bool IsDLCOnly;
    }

    [RTTI.Serializable(0xC29CF1087461E4D5)]
    public class MenuStringBinding : MenuDataBinding
    {
        [RTTI.Member(0, 0x20)] public WString Value;
    }

    [RTTI.Serializable(0x6A398A27908B91D6)]
    public class MenuStyle : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String Selector;
        [RTTI.Member(1, 0x30, "General")] public String ElementType;
        [RTTI.Member(2, 0x38, "General")] public bool AppliedOnFocus;
        [RTTI.Member(3, 0x39, "General")] public bool AppliedOnDisabled;
        [RTTI.Member(4, 0x3A, "General")] public bool AppliedOnMouseHover;
        [RTTI.Member(5, 0x3B, "General")] public bool AppliedOnNoFocus;
        [RTTI.Member(6, 0x40, "General")] public Array<Ref<MenuStyle>> BaseStyles;
        [RTTI.Member(7, 0x50, "Properties")] public MenuStyleAttributeRGBAColor Color;
        [RTTI.Member(8, 0x58, "Properties")] public MenuStyleAttributeFloat opacity;
        [RTTI.Member(9, 0x60, "Properties")] public EOpacityMode opacity_mode;
        [RTTI.Member(10, 0x64, "Position")] public MenuStyleAttributeFloat top;
        [RTTI.Member(11, 0x6C, "Position")] public MenuStyleAttributeFloat left;
        [RTTI.Member(12, 0x74, "Alignment")] public EVerticalAlignment vertical_align;
        [RTTI.Member(13, 0x78, "Alignment")] public EFloating _float;
        [RTTI.Member(14, 0x7C, "Properties")] public EStacking stacking;
        [RTTI.Member(15, 0x80, "Alignment")] public MenuStyleAttributeInt margin_top;
        [RTTI.Member(16, 0x88, "Alignment")] public MenuStyleAttributeInt margin_left;
        [RTTI.Member(17, 0x90, "Alignment")] public MenuStyleAttributeInt margin_right;
        [RTTI.Member(18, 0x98, "Alignment")] public MenuStyleAttributeInt margin_bottom;
        [RTTI.Member(19, 0xA0, "Alignment")] public MenuStyleAttributeInt padding_top;
        [RTTI.Member(20, 0xA8, "Alignment")] public MenuStyleAttributeInt padding_left;
        [RTTI.Member(21, 0xB0, "Alignment")] public MenuStyleAttributeInt padding_right;
        [RTTI.Member(22, 0xB8, "Alignment")] public MenuStyleAttributeInt padding_bottom;
        [RTTI.Member(23, 0xC0, "Position")] public MenuStyleAttributeFloat width;
        [RTTI.Member(24, 0xC8, "Position")] public MenuStyleAttributeFloat height;
        [RTTI.Member(25, 0xD0, "Properties")] public MenuStyleAttributeInt border_width;
        [RTTI.Member(26, 0xD8, "Properties")] public MenuStyleAttributeRGBAColor border_color;
        [RTTI.Member(27, 0xE0, "Background")] public ETextureRepeat background_repeat_mm;
        [RTTI.Member(28, 0xE8, "Background")] public Ref<UITexture> background_texture_tl;
        [RTTI.Member(29, 0xF0, "Background")] public Ref<UITexture> background_texture_tm;
        [RTTI.Member(30, 0xF8, "Background")] public Ref<UITexture> background_texture_tr;
        [RTTI.Member(31, 0x100, "Background")] public Ref<UITexture> background_texture_ml;
        [RTTI.Member(32, 0x108, "Background")] public Ref<UITexture> background_texture_mm;
        [RTTI.Member(33, 0x110, "Background")] public Ref<UITexture> background_texture_mr;
        [RTTI.Member(34, 0x118, "Background")] public Ref<UITexture> background_texture_bl;
        [RTTI.Member(35, 0x120, "Background")] public Ref<UITexture> background_texture_bm;
        [RTTI.Member(36, 0x128, "Background")] public Ref<UITexture> background_texture_br;
        [RTTI.Member(37, 0x130, "Background")] public IVec2 background_image_tl_off;
        [RTTI.Member(38, 0x138, "Background")] public IVec2 background_image_tm_off;
        [RTTI.Member(39, 0x140, "Background")] public IVec2 background_image_tr_off;
        [RTTI.Member(40, 0x148, "Background")] public IVec2 background_image_ml_off;
        [RTTI.Member(41, 0x150, "Background")] public IVec2 background_image_mm_off;
        [RTTI.Member(42, 0x158, "Background")] public IVec2 background_image_mr_off;
        [RTTI.Member(43, 0x160, "Background")] public IVec2 background_image_bl_off;
        [RTTI.Member(44, 0x168, "Background")] public IVec2 background_image_bm_off;
        [RTTI.Member(45, 0x170, "Background")] public IVec2 background_image_br_off;
        [RTTI.Member(46, 0x178, "Background")] public MenuStyleAttributeFloat background_depth_offset;
        [RTTI.Member(47, 0x180, "Background")] public MenuStyleAttributeRGBAColor background_overlay_image_color;
        [RTTI.Member(48, 0x188, "Effects")] public ELayerOperation blend_mode;
        [RTTI.Member(49, 0x18C, "Effects")] public ELayerOperation text_blend_mode;
        [RTTI.Member(50, 0x190, "Effects")] public EWidgetLayer target_layer;
        [RTTI.Member(51, 0x194, "Effects")] public bool persp_projection;
        [RTTI.Member(52, 0x198, "Effects")] public MenuStyleAttributeFloat depth_offset;
        [RTTI.Member(53, 0x1A0, "Effects")] public MenuStyleAttributeFloat blur_amount;
        [RTTI.Member(54, 0x1A8, "Effects")] public EChildrenClipMode children_clip;
        [RTTI.Member(55, 0x1B0, "Effects")] public Ref<UIEffectResource> Shader;
        [RTTI.Member(56, 0x1B8, "Sounds")] public Ref<MenuStyleSound> sounds;
        [RTTI.Member(57, 0x1C0, "Animation")] public Array<Ref<MenuAnimationResource>> Animations;
        [RTTI.Member(58, 0x1D0, "General")] public bool ForceFullScreen;
    }

    [RTTI.Serializable(0x9FF75850BDB78986)]
    public class MenuStyleAttributeFloat
    {
        [RTTI.Member(0, 0x0)] public bool IsSet;
        [RTTI.Member(1, 0x4)] public float Value;
    }

    [RTTI.Serializable(0xA6DB4F85652BFF5E)]
    public class MenuStyleAttributeInt
    {
        [RTTI.Member(0, 0x0)] public bool IsSet;
        [RTTI.Member(1, 0x4)] public int Value;
    }

    [RTTI.Serializable(0xC33884ADAB9D4A83)]
    public class MenuStyleAttributeRGBAColor
    {
        [RTTI.Member(0, 0x0)] public bool IsSet;
        [RTTI.Member(1, 0x4)] public RGBAColor Value;
    }

    [RTTI.Serializable(0xA97CFBF2788C8450)]
    public class MenuStyleClass : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String ClassName;
        [RTTI.Member(1, 0x30, "General")] public Array<Ref<MenuStyle>> Styles;
    }

    [RTTI.Serializable(0xF091F703CAD2BB99)]
    public class MenuStyleClassBinding : MenuObjectBinding
    {
        [RTTI.Member(0, 0x20)] public Ref<MenuStyleClass> Value;
    }

    [RTTI.Serializable(0xBF0013360BF79017)]
    public class MenuStyleGraph : MenuStyle
    {
    }

    [RTTI.Serializable(0xE21F03B27A03B577)]
    public class MenuStyleLegend : MenuStyle
    {
        [RTTI.Member(0, 0x1D8, "Legend")] public MenuStyleAttributeFloat LabelTextureSpacing;
        [RTTI.Member(1, 0x1E0, "Legend")] public MenuStyleAttributeFloat ElementSpacing;
        [RTTI.Member(2, 0x1E8, "Legend")] public String PressAndHoldVariable;
        [RTTI.Member(3, 0x1F0, "Legend")] public Ref<UIEffectResource> PressAndHoldShader;
        [RTTI.Member(4, 0x1F8, "Legend")] public MenuStyleAttributeRGBAColor LabelTextureEnabledColor;
        [RTTI.Member(5, 0x200, "Legend")] public MenuStyleAttributeRGBAColor LabelTextureDisabledColor;
        [RTTI.Member(6, 0x208, "Legend")] public Array<LegendIcon> LegendIcons;
    }

    [RTTI.Serializable(0x6B124617E7F2B0EE)]
    public class MenuStyleProgressBarBlock : MenuStyle
    {
        [RTTI.Member(0, 0x1D8, "ProgressBarBlock")] public MenuStyleAttributeFloat OffsetX;
        [RTTI.Member(1, 0x1E0, "ProgressBarBlock")] public Array<ProgressBarBlock> BlockTextures;
        [RTTI.Member(2, 0x1F0, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor PositiveColor;
        [RTTI.Member(3, 0x1F8, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor NegativeColor;
        [RTTI.Member(4, 0x200, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor NeutralColor;
        [RTTI.Member(5, 0x208, "ProgressBarBlock")] public MenuStyleAttributeRGBAColor EmptyColor;
    }

    [RTTI.Serializable(0x71194EE5559CC2)]
    public class MenuStyleSelectView : MenuStyle
    {
        [RTTI.Member(0, 0x1D8, "SelectView")] public Ref<UITexture> PreviousItemTexture;
        [RTTI.Member(1, 0x1E0, "SelectView")] public MenuStyleAttributeInt PreviousItemWidth;
        [RTTI.Member(2, 0x1E8, "SelectView")] public Ref<UITexture> NextItemTexture;
        [RTTI.Member(3, 0x1F0, "SelectView")] public MenuStyleAttributeInt NextItemWidth;
        [RTTI.Member(4, 0x1F8, "SelectView")] public MenuStyleAttributeInt ItemChangeScrollTime;
    }

    [RTTI.Serializable(0xB3A6BA837E0DE0A4)]
    public class MenuStyleSelector
    {
        [RTTI.Member(0, 0x0)] public String TypeName;
        [RTTI.Member(1, 0x8)] public String ClassName;
        [RTTI.Member(2, 0x10)] public bool OnFocus;
        [RTTI.Member(3, 0x11)] public bool OnDisabled;
    }

    [RTTI.Serializable(0xACF98493369558AB)]
    public class MenuStyleSound : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<SoundResource> accept_handled;
        [RTTI.Member(1, 0x30)] public Ref<SoundResource> accept_unhandled;
        [RTTI.Member(2, 0x38)] public Ref<SoundResource> cancel_handled;
        [RTTI.Member(3, 0x40)] public Ref<SoundResource> cancel_unhandled;
        [RTTI.Member(4, 0x48)] public Ref<SoundResource> left_handled;
        [RTTI.Member(5, 0x50)] public Ref<SoundResource> left_unhandled;
        [RTTI.Member(6, 0x58)] public Ref<SoundResource> right_handled;
        [RTTI.Member(7, 0x60)] public Ref<SoundResource> right_unhandled;
        [RTTI.Member(8, 0x68)] public Ref<SoundResource> up_handled;
        [RTTI.Member(9, 0x70)] public Ref<SoundResource> up_unhandled;
        [RTTI.Member(10, 0x78)] public Ref<SoundResource> down_handled;
        [RTTI.Member(11, 0x80)] public Ref<SoundResource> down_unhandled;
        [RTTI.Member(12, 0x88)] public Ref<SoundResource> dpad_left_handled;
        [RTTI.Member(13, 0x90)] public Ref<SoundResource> dpad_left_unhandled;
        [RTTI.Member(14, 0x98)] public Ref<SoundResource> dpad_right_handled;
        [RTTI.Member(15, 0xA0)] public Ref<SoundResource> dpad_right_unhandled;
        [RTTI.Member(16, 0xA8)] public Ref<SoundResource> dpad_up_handled;
        [RTTI.Member(17, 0xB0)] public Ref<SoundResource> dpad_up_unhandled;
        [RTTI.Member(18, 0xB8)] public Ref<SoundResource> dpad_down_handled;
        [RTTI.Member(19, 0xC0)] public Ref<SoundResource> dpad_down_unhandled;
        [RTTI.Member(20, 0xC8)] public Ref<SoundResource> tableft_handled;
        [RTTI.Member(21, 0xD0)] public Ref<SoundResource> tableft_unhandled;
        [RTTI.Member(22, 0xD8)] public Ref<SoundResource> tabright_handled;
        [RTTI.Member(23, 0xE0)] public Ref<SoundResource> tabright_unhandled;
        [RTTI.Member(24, 0xE8)] public Ref<SoundResource> square_handled;
        [RTTI.Member(25, 0xF0)] public Ref<SoundResource> square_unhandled;
        [RTTI.Member(26, 0xF8)] public Ref<SoundResource> triangle_handled;
        [RTTI.Member(27, 0x100)] public Ref<SoundResource> triangle_unhandled;
        [RTTI.Member(28, 0x108)] public Ref<SoundResource> start_handled;
        [RTTI.Member(29, 0x110)] public Ref<SoundResource> start_unhandled;
        [RTTI.Member(30, 0x118)] public Ref<SoundResource> ingame_intel_handled;
        [RTTI.Member(31, 0x120)] public Ref<SoundResource> ingame_intel_unhandled;
        [RTTI.Member(32, 0x128)] public Ref<SoundResource> pressandhold_handled;
        [RTTI.Member(33, 0x130)] public Ref<SoundResource> pressandhold_unhandled;
        [RTTI.Member(34, 0x138)] public Ref<SoundResource> cursor_enter_handled;
        [RTTI.Member(35, 0x140)] public Ref<SoundResource> cursor_cursor_left_down_handled;
        [RTTI.Member(36, 0x148)] public Ref<SoundResource> cursor_cursor_left_click_handled;
        [RTTI.Member(37, 0x150)] public Ref<SoundResource> cursor_cursor_left_click_unhandled;
    }

    [RTTI.Serializable(0xECA6C0CF33F621D)]
    public class MenuStyleTabHeader : MenuStyle
    {
        [RTTI.Member(0, 0x1D8, "TabHeader")] public MenuStyleAttributeFloat TabMargin;
    }

    [RTTI.Serializable(0x5D2A0646E91F9571)]
    public class MenuStyleText : MenuStyle
    {
        [RTTI.Member(0, 0x1D8, "Font")] public Ref<Typeface> Family;
        [RTTI.Member(1, 0x1E0, "Font")] public ETextHAlignment Alignment;
        [RTTI.Member(2, 0x1E4, "Font")] public ETextOrientation Orientation;
        [RTTI.Member(3, 0x1E8, "Font")] public MenuStyleAttributeFloat Size;
        [RTTI.Member(4, 0x1F0, "Font")] public MenuStyleAttributeFloat CJKSize;
        [RTTI.Member(5, 0x1F8, "Font")] public MenuStyleAttributeFloat ArabicSize;
        [RTTI.Member(6, 0x200, "Font")] public MenuStyleAttributeFloat MinimumSize;
        [RTTI.Member(7, 0x208, "Font")] public bool AutoAdjustSizeForSafeArea;
        [RTTI.Member(8, 0x20C, "Font")] public float Leading;
        [RTTI.Member(9, 0x210, "Font")] public bool AdjustLineHeightForTextIcons;
        [RTTI.Member(10, 0x214, "Font")] public ETextWhiteSpace Whitespace;
        [RTTI.Member(11, 0x218, "Font")] public ETextOverflow Overflow;
        [RTTI.Member(12, 0x21C, "Font")] public ETextTransform Transform;
    }

    [RTTI.Serializable(0x333C169EA3788F04)]
    public class MenuTabHeaderResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x120, "Properties")] public IRect TabRect;
    }

    [RTTI.Serializable(0x802109BC3E01FA07)]
    public class MenuTabResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public Ref<MenuDataBinding> Label;
    }

    [RTTI.Serializable(0x9FC13886E696B4D4)]
    public class MenuTabboxResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public EMenuInputFunction PrevTabFunction;
        [RTTI.Member(2, 0x11C, "Properties")] public EMenuInputFunction NextTabFunction;
        [RTTI.Member(3, 0x120, "Properties")] public Ref<Texture> PreviousTabIcon;
        [RTTI.Member(4, 0x128, "Properties")] public Ref<Texture> NextTabIcon;
        [RTTI.Member(5, 0x130, "Logic")] public Ref<MenuActionResource> OnNextTab;
        [RTTI.Member(6, 0x138, "Logic")] public Ref<MenuActionResource> OnPreviousTab;
    }

    [RTTI.Serializable(0x56C09A07FE73B107)]
    public class MenuTabpaneResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
        [RTTI.Member(1, 0x118, "Properties")] public bool DefaultPane;
        [RTTI.Member(2, 0x120, "Properties")] public CPtr<MenuVisualResource> DefaultFocus;
    }

    [RTTI.Serializable(0x40F2C51C32600B16)]
    public class MenuTemplateResource : MenuElementResource
    {
        [RTTI.Member(0, 0x30, "Properties")] public Ref<MenuDataResource> DataSource;
        [RTTI.Member(1, 0x38, "Properties")] public String XPath;
        [RTTI.Member(2, 0x40, "Properties")] public Array<Ref<MenuElementResource>> TemplateElements;
    }

    [RTTI.Serializable(0x68089960BF1C9F23)]
    public class MenuTextResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Ref<MenuDataBinding> Text;
        [RTTI.Member(1, 0x110, "Properties")] public ETextHAlignment HorizontalAlign;
        [RTTI.Member(2, 0x114, "AutoScroll")] public float ScrollVelocity;
        [RTTI.Member(3, 0x118, "AutoScroll")] public float ScrollPreDelay;
        [RTTI.Member(4, 0x11C, "AutoScroll")] public float ScrollPostDelay;
        [RTTI.Member(5, 0x120, "AutoScroll")] public float ScrollFadeDuration;
        [RTTI.Member(6, 0x124, "Properties")] public bool ForceLeftToRightTextRendering;
    }

    [RTTI.Serializable(0x9CC409385C3BA075)]
    public class MenuTextureBinding : MenuObjectBinding
    {
        [RTTI.Member(0, 0x20)] public Ref<UITexture> Value;
    }

    [RTTI.Serializable(0xC04406BE2F6192A5)]
    public class MenuTextureResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Ref<MenuDataBinding> Source;
        [RTTI.Member(1, 0x110, "Properties")] public Ref<MenuDataBinding> Texture;
        [RTTI.Member(2, 0x118, "Properties")] public Ref<UITexture> SourceLoading;
        [RTTI.Member(3, 0x120, "Properties")] public Ref<UITexture> SourceFailed;
        [RTTI.Member(4, 0x128, "Properties")] public float Scale;
        [RTTI.Member(5, 0x12C, "Properties")] public bool MaintainAspectRatio;
    }

    [RTTI.Serializable(0x1F99661FFCB95671)]
    public class MenuTimerResource : MenuElementResource
    {
        [RTTI.Member(0, 0x30, "Properties")] public int Countdown;
        [RTTI.Member(1, 0x34, "Properties")] public bool ResetOnInput;
        [RTTI.Member(2, 0x35, "Properties")] public bool StartPaused;
        [RTTI.Member(3, 0x38, "Logic")] public Ref<MenuActionResource> OnTimerEnd;
    }

    [RTTI.Serializable(0x75780A5BB966EAE7)]
    public class MenuToastMessageResource : MenuVisualResource
    {
        [RTTI.Member(0, 0x108, "Properties")] public Array<Ref<MenuElementResource>> ChildElements;
    }

    [RTTI.Serializable(0xB761937E45527A3B)]
    public class MenuVisualResource : MenuElementResource
    {
        [RTTI.Member(0, 0x30, "Properties")] public Ref<MenuDataBinding> Enabled;
        [RTTI.Member(1, 0x38, "Properties")] public Ref<MenuDataBinding> StyleClassNames;
        [RTTI.Member(2, 0x40, "Properties")] public Ref<MenuDataBinding> StyleClasses;
        [RTTI.Member(3, 0x48, "Properties")] public Ref<MenuDataBinding> Visible;
        [RTTI.Member(4, 0x50, "Properties")] public Ref<MenuDataBinding> AppearDisabled;
        [RTTI.Member(5, 0x58, "Effect")] public Ref<UIEffectResource> Shader;
        [RTTI.Member(6, 0x60, "Properties")] public int X;
        [RTTI.Member(7, 0x64, "Properties")] public int Y;
        [RTTI.Member(8, 0x68, "Properties")] public int Width;
        [RTTI.Member(9, 0x6C, "Properties")] public bool AutoWidth;
        [RTTI.Member(10, 0x70, "Properties")] public int MaxWidth;
        [RTTI.Member(11, 0x74, "Properties")] public int Height;
        [RTTI.Member(12, 0x78, "Properties")] public bool AutoHeight;
        [RTTI.Member(13, 0x7C, "Properties")] public int MaxHeight;
        [RTTI.Member(14, 0x80, "Properties")] public bool AutoSizeParent;
        [RTTI.Member(15, 0x81, "Logic")] public bool EnableMouseHold;
        [RTTI.Member(16, 0x84, "Properties")] public EFloating Align;
        [RTTI.Member(17, 0x88, "Properties")] public EVerticalAlignment Valign;
        [RTTI.Member(18, 0x90, "Properties")] public CPtr<MenuElementResource> FollowFocus;
        [RTTI.Member(19, 0x98, "Properties")] public bool EnableTemplateFollow;
        [RTTI.Member(20, 0xA0, "Properties")] public Array<CPtr<MenuVisualResource>> VisibleOnFocus;
        [RTTI.Member(21, 0xB0, "Properties")] public CPtr<MenuElementResource> FollowMouseHover;
        [RTTI.Member(22, 0xB8, "Properties")] public Array<CPtr<MenuVisualResource>> VisibleOnMouseHover;
        [RTTI.Member(23, 0xC8, "Properties")] public bool ForceDrawMenuOnTheCenter;
        [RTTI.Member(24, 0xC9, "Properties")] public bool ForceDrawMenuOnTheTop;
        [RTTI.Member(25, 0xD0, "Properties")] public String TemplateParent;
        [RTTI.Member(26, 0xD8, "Logic")] public Array<Ref<MenuEventBinding>> EventHandlers;
        [RTTI.Member(27, 0xE8, "Legend")] public Array<Ref<MenuLegendLabelResource>> Labels;
        [RTTI.Member(28, 0xF8, "Animation")] public Array<Ref<MenuAnimationResource>> Animations;
    }

    [RTTI.Serializable(0x2ADC138E1116268E)]
    public class MenuWidgetPropertyAnimationResource : MenuPropertyAnimationResource
    {
        [RTTI.Member(0, 0x38)] public EMenuAnimatableProperty TargetProperty;
    }

    [RTTI.Serializable(0xEB323E67279393FA)]
    public class MenuXPathAnimationInstance : MenuElementAnimationInstance
    {
    }

    [RTTI.Serializable(0x150A064C5279067E)]
    public class MenuXPathAnimationResource : MenuElementAnimationResource
    {
        [RTTI.Member(0, 0x28)] public String XPath;
        [RTTI.Member(1, 0x40)] public Array<Ref<MenuPropertyAnimationResource>> PropertyAnimations;
    }

    [RTTI.Serializable(0xB4FDA57B0A0C8D5E)]
    public class MerchantCollectionRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public GGUUID CollectionUUID;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public Array<MerchantItemRestoreState> Items;
        [RTTI.Member(2, 0x48, "StateSaving", true)] public float RestockTimer;
    }

    [RTTI.Serializable(0xBB0761D99D0DC5A)]
    public class MerchantComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x12F3957F23DEFCA3)]
    public class MerchantComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Display")] public Ref<LocalizedTextResource> Title;
        [RTTI.Member(1, 0x30, "Display")] public Ref<UITexture> Banner;
        [RTTI.Member(2, 0x38, "SellingToMerchant")] public int MaxSellPrice;
        [RTTI.Member(3, 0x3C, "Money")] public int MaxMoney;
        [RTTI.Member(4, 0x40, "BuyingFromMerchant")] public Array<Ref<MerchantPriceModifier>> BuyModifiers;
        [RTTI.Member(5, 0x50, "SellingToMerchant")] public Array<Ref<MerchantPriceModifier>> SellModifiers;
        [RTTI.Member(6, 0x60, "SellingToMerchant")] public Array<Ref<TagProperty>> SellingWhiteListTags;
        [RTTI.Member(7, 0x70, "SellingToMerchant")] public Array<Ref<TagProperty>> SellingBlacklistListTags;
        [RTTI.Member(8, 0x80, "SellingToMerchant")] public int BulkSellAmount;
        [RTTI.Member(9, 0x84, "Money")] public int MoneyRegenerationTimer;
        [RTTI.Member(10, 0x88, "Money")] public int MoneyRegenerationAmount;
        [RTTI.Member(11, 0x8C, "Money")] public float MoneyRegenerationRandomFactor;
        [RTTI.Member(12, 0x90, "BuyingFromMerchant")] public Array<Ref<MerchantTradingCollection>> TradingCollections;
    }

    [RTTI.Serializable(0x1BF4E36AD71E510D)]
    public class MerchantInventoryManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x60A8A6AF899A569)]
    public class MerchantItemRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public StreamingRef<EntityResource> EntityResource;
        [RTTI.Member(1, 0x48, "StateSaving", true)] public int Amount;
    }

    [RTTI.Serializable(0x73F33AF9E3255F6D)]
    public class MerchantPriceModifier : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<TagProperty>> TagProperties;
        [RTTI.Member(1, 0x38, "Logic")] public float PriceModifier;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<ConditionResource> EnabledCondition;
    }

    [RTTI.Serializable(0x2AF865384C4F2C80)]
    public class MerchantRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public GGUUID MerchantUUID;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public int CurrentMoney;
        [RTTI.Member(2, 0x3C, "StateSaving", true)] public float CurrentMoneyRegenerationTimer;
        [RTTI.Member(3, 0x40, "StateSaving", true)] public int MaxMoney;
        [RTTI.Member(4, 0x44, "StateSaving", true)] public int MoneyRegenerationTimer;
        [RTTI.Member(5, 0x48, "StateSaving", true)] public int MoneyRegenerationAmount;
        [RTTI.Member(6, 0x4C, "StateSaving", true)] public float MoneyRegenerationRandomFactor;
        [RTTI.Member(7, 0x50, "StateSaving", true)] public Array<MerchantCollectionRestoreState> MerchantCollections;
    }

    [RTTI.Serializable(0xE7C20981C6EFE1A2)]
    public class MerchantStockInfo : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<InventoryCollectionMerchantTradingItem>> MerchantItems;
    }

    [RTTI.Serializable(0x1115762952DBAF7)]
    public class MerchantTradeCostMultiplier : Resource
    {
        [RTTI.Member(0, 0x28)] public EDifficulty Difficulty;
        [RTTI.Member(1, 0x2C)] public float CurrencyMultiplier;
        [RTTI.Member(2, 0x30)] public float TradeItemsMultiplier;
    }

    [RTTI.Serializable(0xE4116723C65BD0BD)]
    public class MerchantTradingCollection : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<ConditionResource> EnabledCondition;
        [RTTI.Member(1, 0x30)] public int RestockTimer;
        [RTTI.Member(2, 0x38)] public Array<Ref<InventoryCollectionMerchantTradingItemBase>> Items;
    }

    [RTTI.Serializable(0x5092F757FEA658D7)]
    public class MerchantViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xC94E612392F34B3A)]
    public class MeshExportRegion : WorldNode
    {
        [RTTI.Member(0, 0x60)] public float MinimumLodDistance;
        [RTTI.Member(1, 0x64)] public float PlacementLodDistance;
        [RTTI.Member(2, 0x68)] public bool ExportTerrainGeometry;
        [RTTI.Member(3, 0x69)] public bool TerrainVertexColors;
        [RTTI.Member(4, 0x6A)] public bool ExportSceneGeometry;
        [RTTI.Member(5, 0x6B)] public bool ExportPlacementGeometry;
    }

    [RTTI.Serializable(0xC16AF83BCBB6E287)]
    public class MeshHierachyShaderOverrides
    {
        [RTTI.Member(0, 0x0)] public Array<MeshShaderOverrides> MeshOverrides;
    }

    [RTTI.Serializable(0xE42C90195DC81520)]
    public class MeshHierarchyInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 MITNodeSize;
        [RTTI.Member(1, 0x4)] public uint32 PrimitiveCount;
        [RTTI.Member(2, 0x8)] public uint16 MeshCount;
        [RTTI.Member(3, 0xA)] public uint16 StaticMeshCount;
        [RTTI.Member(4, 0xC)] public uint16 LodMeshCount;
        [RTTI.Member(5, 0xE)] public uint16 PackedData;
    }

    [RTTI.Serializable(0x200FBDA847816F63)]
    public class MeshInstanceLOD
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x8)] public int PrimitiveCount;
        [RTTI.Member(2, 0xC)] public int TriangleCount;
        [RTTI.Member(3, 0x10)] public float MaxDistance;
        [RTTI.Member(4, 0x14)] public uint MaxCellSize;
        [RTTI.Member(5, 0x18)] public uint MaxCellCount;
    }

    [RTTI.Serializable(0x38D33C0BCD71DEDB)]
    public class MeshInstanceManager : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "Generated")] public Array<MeshInstanceLOD> LODs;
        [RTTI.Member(1, 0xE0, "Generated")] public BoundingBox3 RootBounds;
        [RTTI.Member(2, 0x100, "Generated")] public BoundingBox3 CullBounds;
        [RTTI.Member(3, 0x120, "Generated")] public BoundingBox3 MeshBounds;
        [RTTI.Member(4, 0x140, "Generated")] public BoundingBox3 MeshExtents;
        [RTTI.Member(5, 0x160, "Generated")] public Array<float> LODDistances;
        [RTTI.Member(6, 0x170, "Generated")] public BakedInstanceData InstanceData;
        [RTTI.Member(7, 0x190, "Generated")] public Array<QuadTreeCell> InstanceTree;
        [RTTI.Member(8, 0x1A0, "Generated")] public Array<uint32> InstanceRemapTable;
        [RTTI.Member(9, 0x1B0, "Generated")] public int DrawableSetupBlockSize;
    }

    [RTTI.Serializable(0xB24DA8D1E0CB09D5)]
    public class MeshResourceBase : Resource
    {
        [RTTI.Member(0, 0x30)] public BoundingBox3 BoundingBox;
        [RTTI.Member(1, 0x50)] public DrawableCullInfo CullInfo;
        [RTTI.Member(2, 0x54)] public MeshHierarchyInfo MeshHierarchyInfo;
        [RTTI.Member(3, 0x70)] public uint StaticDataBlockSize;
    }

    [RTTI.Serializable(0xEB50020360172905)]
    public class MeshResourceOverrides
    {
        [RTTI.Member(0, 0x0)] public bool DisableStaticDecals;
    }

    [RTTI.Serializable(0xAE8A7BB17A246379)]
    public class MeshResourcePathStorage
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> RootMeshResource;
        [RTTI.Member(1, 0x8)] public Array<int> ChildPathIndices;
    }

    [RTTI.Serializable(0x8EACD2E697C650FC)]
    public class MeshShaderOverrides
    {
        [RTTI.Member(0, 0x0)] public MeshResourcePathStorage MeshResourcePath;
        [RTTI.Member(1, 0x18)] public int32 MITNodeHandle;
        [RTTI.Member(2, 0x20)] public Array<RenderEffectShaderOverrides> FxOverrides;
        [RTTI.Member(3, 0x30)] public MeshResourceOverrides MeshResourceOverrides;
    }

    [RTTI.Serializable(0x4B67F715C7276055)]
    public class MessageData : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x1961FEC7AAB09690)]
    public class MilestoneActivityFeedStatTriggerResource : ActivityFeedStatTriggerResource
    {
        [RTTI.Member(0, 0x70)] public Array<int> Milestones;
    }

    [RTTI.Serializable(0x873DB29E2A03B4E)]
    public class Mine : Placeable
    {
    }

    [RTTI.Serializable(0xE4A537972F2A03DA)]
    public class MineRep : EntityRep
    {
    }

    [RTTI.Serializable(0x90DFCECA42BBD41F)]
    public class MineResource : PlaceableResource
    {
        [RTTI.Member(0, 0x138, "Logic")] public Ref<ExplosionResource> ExplosionResource;
        [RTTI.Member(1, 0x140, "Logic")] public float SafetyTime;
        [RTTI.Member(2, 0x144, "Logic")] public float ExplosionDelay;
        [RTTI.Member(3, 0x150, "Logic")] public Vec3 ExplosionOffset;
        [RTTI.Member(4, 0x160, "Logic")] public Ref<UseLocationResource> TriggerUseLocation;
        [RTTI.Member(5, 0x168, "Logic")] public Ref<UseLocationResource> DisarmUseLocation;
        [RTTI.Member(6, 0x170, "AI")] public float TripwireDangerAreaRadius;
        [RTTI.Member(7, 0x178, "Representation")] public Ref<SoundResource> TriggerSound;
        [RTTI.Member(8, 0x180, "Logic")] public EMineMode Mode;
        [RTTI.Member(9, 0x184, "Logic")] public float MaxTriggerLength;
        [RTTI.Member(10, 0x190, "Logic")] public Vec3 LaserOffset;
        [RTTI.Member(11, 0x1A0, "Representation")] public Ref<LaserBeamResource> LaserBeam;
        [RTTI.Member(12, 0x1A8, "Logic")] public bool ShapedExplosion;
    }

    [RTTI.Serializable(0x1EBDA67F3268AE36)]
    public class MissileSilo : Entity
    {
    }

    [RTTI.Serializable(0xD48536CBB9A64B6E)]
    public class MissileSiloEjectAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String TargetName;
        [RTTI.Member(1, 0x38, "Logic")] public bool PlayerIsTarget;
    }

    [RTTI.Serializable(0x2D0DACAB678FE87C)]
    public class MissileSiloResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<AmmoEjectorWeaponResource> MissileWeaponResource;
    }

    [RTTI.Serializable(0x529D2FF08C14D08C)]
    public class Mission : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0xD53D00F9CE60B3A1)]
    public class MissionBodyCount : Mission
    {
    }

    [RTTI.Serializable(0x7BA272457DBB8AD6)]
    public class MissionBodyCountResource : MissionResource
    {
    }

    [RTTI.Serializable(0xE3475EE94BCDD454)]
    public class MissionCampaign : Mission
    {
    }

    [RTTI.Serializable(0x44BC2E895361984B)]
    public class MissionCampaignResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "MissionFailed")] public float DefaultDelay;
        [RTTI.Member(1, 0xB4, "MissionFailed")] public float MaxDelay;
        [RTTI.Member(2, 0xB8, "MissionFailed")] public bool EndWhenAllPlayersAreDead;
        [RTTI.Member(3, 0xC0, "ScriptFunctions")] public String InitFunction;
        [RTTI.Member(4, 0xC8, "ScriptFunctions")] public String ExitFunction;
    }

    [RTTI.Serializable(0x62F2FD14E99A3BD6)]
    public class MissionCaptureAndConnect : Mission
    {
    }

    [RTTI.Serializable(0x3081FE173B3D1979)]
    public class MissionCaptureAndConnectResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "CaptureAndConnect")] public Array<String> Objectives;
        [RTTI.Member(1, 0xC0, "CaptureAndConnect")] public Array<String> ObjectiveLineNames;
    }

    [RTTI.Serializable(0x361CBE46956167C0)]
    public class MissionCaptureAndHold : Mission
    {
    }

    [RTTI.Serializable(0xAFC9FF0897C8421E)]
    public class MissionCaptureAndHoldResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "CaptureAndHold")] public Array<String> Objectives;
        [RTTI.Member(1, 0xC0, "CaptureAndHold")] public Array<ObjectiveCount> ObjectivesPerPlayerCount;
        [RTTI.Member(2, 0xD0, "CaptureAndHold")] public int PointsPerTick;
        [RTTI.Member(3, 0xD4, "CaptureAndHold")] public float Tick;
        [RTTI.Member(4, 0xD8, "CaptureAndHold")] public String MissionObjectivesCallback;
        [RTTI.Member(5, 0xE0, "CaptureAndHold")] public Array<MissionEvent> MissionScoreEvents;
        [RTTI.Member(6, 0xF0, "CaptureAndHold")] public Array<MissionEvent> CounterMissionScoreEvents;
    }

    [RTTI.Serializable(0x438D82F326D4E1E5)]
    public class MissionCaptureAndSecure : Mission
    {
    }

    [RTTI.Serializable(0xE3FBF22572543AC1)]
    public class MissionCaptureAndSecureResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "CaptureAndSecure")] public Array<String> Objectives;
        [RTTI.Member(1, 0xC0, "CaptureAndSecure")] public float ObjectiveActiveTime;
        [RTTI.Member(2, 0xC4, "CaptureAndSecure")] public int PointsPerTick;
        [RTTI.Member(3, 0xC8, "CaptureAndSecure")] public float TickLength;
    }

    [RTTI.Serializable(0xEE023313DED2A4AE)]
    public class MissionCoop : Mission
    {
    }

    [RTTI.Serializable(0xE629582CFF963DEB)]
    public class MissionCoopResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "MissionFailed")] public float DefaultDelay;
        [RTTI.Member(1, 0xB4, "MissionFailed")] public float MaxDelay;
        [RTTI.Member(2, 0xB8, "MissionFailed")] public bool EndWhenAllPlayersAreDead;
        [RTTI.Member(3, 0xC0, "ScriptFunctions")] public String InitFunction;
        [RTTI.Member(4, 0xC8, "ScriptFunctions")] public String ExitFunction;
    }

    [RTTI.Serializable(0x371C4B873595BD64)]
    public class MissionEvent
    {
        [RTTI.Member(0, 0x0)] public int Value;
        [RTTI.Member(1, 0x8)] public String Event;
    }

    [RTTI.Serializable(0x2AE17D9B29AD2D2F)]
    public class MissionInfiltrateAndRetrieve : Mission
    {
    }

    [RTTI.Serializable(0x3AF44251FEF138BE)]
    public class MissionInfiltrateAndRetrieveResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "Mission")] public Ref<SearchAndRetrieveObjectResource> FlagResource;
        [RTTI.Member(1, 0xB8, "CounterMission")] public Ref<SearchAndRetrieveObjectResource> CounterFlagResource;
        [RTTI.Member(2, 0xC0, "Mission")] public String FlagSpawnPoint;
        [RTTI.Member(3, 0xC8, "CounterMission")] public String CounterFlagSpawnPoint;
        [RTTI.Member(4, 0xD0, "Mission")] public String Base;
        [RTTI.Member(5, 0xD8, "Mission")] public String BaseTrigger;
        [RTTI.Member(6, 0xE0, "CounterMission")] public String CounterBase;
        [RTTI.Member(7, 0xE8, "CounterMission")] public String CounterBaseTrigger;
        [RTTI.Member(8, 0xF0, "Scoring")] public int MissionPointsPerFlag;
        [RTTI.Member(9, 0xF4, "Logic")] public float RespawnDelay;
        [RTTI.Member(10, 0xF8, "Logic")] public float MissionTime;
        [RTTI.Member(11, 0x100, "TargetArrows")] public Ref<CurveResource> FriendlyTargetArrowFadeCurve;
        [RTTI.Member(12, 0x108, "TargetArrows")] public Ref<CurveResource> EnemyTargetArrowFadeCurve;
    }

    [RTTI.Serializable(0x78BBE6075A712774)]
    public class MissionManager : Entity
    {
    }

    [RTTI.Serializable(0xC85E1B50F815F1F5)]
    public class MissionManagerResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public bool StopOnFirstLostMission;
        [RTTI.Member(1, 0x131, "Logic")] public bool EnableRandomMissionSelection;
        [RTTI.Member(2, 0x138, "Representation")] public String WinMessage;
        [RTTI.Member(3, 0x140, "Representation")] public String LoseMessage;
        [RTTI.Member(4, 0x148, "Representation")] public String DrawMessage;
        [RTTI.Member(5, 0x150, "Representation")] public float FactionWinDisplayTime;
        [RTTI.Member(6, 0x158, "Sequences")] public String EndSequence;
        [RTTI.Member(7, 0x160, "Sequences")] public String EndSequenceMarker;
        [RTTI.Member(8, 0x168, "Logic")] public Array<Ref<MissionResource>> Missions;
    }

    [RTTI.Serializable(0xB223E0E5F0073077)]
    public class MissionResource : Resource
    {
        [RTTI.Member(0, 0x28, "EndConditions")] public float TimeLimit;
        [RTTI.Member(1, 0x2C, "EndConditions")] public int ObjectiveLimit;
        [RTTI.Member(2, 0x30, "Events")] public Array<MissionEvent> TimeLeftEvents;
        [RTTI.Member(3, 0x40, "Mission")] public Ref<AIFaction> Faction;
        [RTTI.Member(4, 0x48, "Mission")] public String MissionWinMessageTag;
        [RTTI.Member(5, 0x50, "Mission")] public String MissionLossMessageTag;
        [RTTI.Member(6, 0x58, "Mission")] public String MissionInitialSpawnPoint;
        [RTTI.Member(7, 0x60, "CounterMission")] public Ref<AIFaction> CounterFaction;
        [RTTI.Member(8, 0x68, "CounterMission")] public String CounterMissionWinMessageTag;
        [RTTI.Member(9, 0x70, "CounterMission")] public String CounterMissionLossMessageTag;
        [RTTI.Member(10, 0x78, "CounterMission")] public String CounterMissionInitialSpawnPoint;
        [RTTI.Member(11, 0x80, "Scoring")] public String MissionDrawMessageTag;
        [RTTI.Member(12, 0x88, "Script")] public String MissionTimeLeftCallback;
        [RTTI.Member(13, 0x90, "Events")] public Array<MissionEvent> FriendlyScoreEvents;
        [RTTI.Member(14, 0xA0, "Events")] public Array<MissionEvent> EnemyScoreEvents;
    }

    [RTTI.Serializable(0xF9C22143F6F98E86)]
    public class MissionSearchAndDestroy : Mission
    {
    }

    [RTTI.Serializable(0x5083BEE0A6D42D9E)]
    public class MissionSearchAndDestroyResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "Mission")] public Array<String> Attachables;
        [RTTI.Member(1, 0xC0, "Mission")] public Array<MissionEvent> AttachablesArmedEvents;
        [RTTI.Member(2, 0xD0, "Events")] public String ObjectivesLeftEventTag;
    }

    [RTTI.Serializable(0x3A592BFDA98A675D)]
    public class MissionSearchAndRetrieve : Mission
    {
    }

    [RTTI.Serializable(0x85C7341CCA17EF7B)]
    public class MissionSearchAndRetrieveResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "MissionCommon")] public Ref<SearchAndRetrieveObjectResource> SearchObjectResource;
        [RTTI.Member(1, 0xB8, "MissionCommon")] public Array<String> ObjectSpawnPoints;
        [RTTI.Member(2, 0xC8, "Mission")] public String Base;
        [RTTI.Member(3, 0xD0, "Mission")] public String BaseTrigger;
        [RTTI.Member(4, 0xD8, "CounterMission")] public String CounterBase;
        [RTTI.Member(5, 0xE0, "CounterMission")] public String CounterBaseTrigger;
        [RTTI.Member(6, 0xE8, "Scoring")] public int MissionPointsPerFlag;
        [RTTI.Member(7, 0xEC, "Logic")] public float SpawnDelay;
        [RTTI.Member(8, 0xF0, "Logic")] public float MissionTime;
        [RTTI.Member(9, 0xF4, "MissionCommon")] public EHomeBaseVisibility HomeBaseVisibility;
        [RTTI.Member(10, 0xF8, "TargetArrows")] public Ref<CurveResource> FriendlyTargetArrowFadeCurve;
        [RTTI.Member(11, 0x100, "TargetArrows")] public Ref<CurveResource> EnemyTargetArrowFadeCurve;
    }

    [RTTI.Serializable(0xE1738F191BF56277)]
    public class MissionSearchAndSafeguard : Mission
    {
    }

    [RTTI.Serializable(0xF586163FD8A75E56)]
    public class MissionSearchAndSafeguardResource : MissionResource
    {
        [RTTI.Member(0, 0xB0, "MissionCommon")] public Ref<SearchAndRetrieveObjectResource> SearchObjectResource;
        [RTTI.Member(1, 0xB8, "MissionCommon")] public Array<String> ObjectSpawnPoints;
        [RTTI.Member(2, 0xC8, "Scoring")] public float TimeUnit;
        [RTTI.Member(3, 0xCC, "Scoring")] public int MissionPointsPerTimeUnit;
        [RTTI.Member(4, 0xD0, "Logic")] public float SpawnDelay;
        [RTTI.Member(5, 0xD4, "Logic")] public float MissionTime;
        [RTTI.Member(6, 0xD8, "TargetArrows")] public Ref<CurveResource> FriendlyTargetArrowFadeCurve;
        [RTTI.Member(7, 0xE0, "TargetArrows")] public Ref<CurveResource> EnemyTargetArrowFadeCurve;
    }

    [RTTI.Serializable(0x532A0095526928DD)]
    public class MissionTest : MissionCampaign
    {
    }

    [RTTI.Serializable(0xC5494CCDFB10A82D)]
    public class MissionTestResource : MissionCampaignResource
    {
    }

    [RTTI.Serializable(0xCEA0113C5DE20465)]
    public class Model : EntityComponent
    {
    }

    [RTTI.Serializable(0x73B10A2FA84116DB)]
    public class ModelActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0x9CD339819583ED2D)]
    public class ModelActorResource : EntityActorResource
    {
    }

    [RTTI.Serializable(0xBCB6B7FC96C45283)]
    public class ModelLodBiasEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4554B3490354B78E)]
    public class ModelLodBiasEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Array<String> MeshInstances;
        [RTTI.Member(2, 0x50, "Logic")] public float LodDistanceScale;
    }

    [RTTI.Serializable(0x1C76313C0EFF4AA0)]
    public class ModelPartMeshReplacementResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<MeshResourceBase>> MeshResources;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<MeshResourceBase> ReplacementMeshResource;
        [RTTI.Member(2, 0x50, "Logic")] public String HelperName;
    }

    [RTTI.Serializable(0x8EA288ABF194DBD2)]
    public class ModelPartResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<MeshResourceBase> MeshResource;
        [RTTI.Member(1, 0x40, "General")] public Ref<SkinnedMeshBoneBoundingBoxes> BoneBoundingBoxes;
        [RTTI.Member(2, 0x48, "General")] public Ref<PhysicsCollisionResource> PhysicsResource;
        [RTTI.Member(3, 0x50, "General")] public bool IsSkinned;
        [RTTI.Member(4, 0x54, "General")] public EPhysicsMotionType PartMotionType;
        [RTTI.Member(5, 0x58, "General")] public String HelperNode;
    }

    [RTTI.Serializable(0xD5EC82045AD132E4)]
    public class ModelProxy : Model
    {
    }

    [RTTI.Serializable(0x900C886D84ACD803)]
    public class ModelProxyRemapEntry
    {
        [RTTI.Member(0, 0x0)] public String From;
        [RTTI.Member(1, 0x8)] public String To;
    }

    [RTTI.Serializable(0xCA6E0DADFD2561C8)]
    public class ModelProxyRep : ModelRep
    {
    }

    [RTTI.Serializable(0x4D11D8ACDA527964)]
    public class ModelProxyResource : ModelResource
    {
        [RTTI.Member(0, 0x60, "Logic")] public Ref<ModelResource> TargetModelResource;
        [RTTI.Member(1, 0x68, "Logic")] public Array<ModelProxyRemapEntry> ActionRemapTable;
        [RTTI.Member(2, 0x78, "Logic")] public Array<ModelProxyRemapEntry> VariableRemapTable;
    }

    [RTTI.Serializable(0xC6EAE3B68E1795A0)]
    public class ModelRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x1154CA654E2ABFCB)]
    public class ModelResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<ModelPartResource>> ModelPartResources;
        [RTTI.Member(1, 0x38, "General")] public EViewLayer ViewLayer;
        [RTTI.Member(2, 0x3C, "General")] public EActiveView ActiveView;
        [RTTI.Member(3, 0x40, "General")] public Array<Ref<SkeletonHelpers>> Helpers;
        [RTTI.Member(4, 0x50, "General")] public String LocationProviderID;
        [RTTI.Member(5, 0x58, "General")] public String HelperName;
    }

    [RTTI.Serializable(0x92962878FBAF5729)]
    public class ModificationItemRestoreState : ItemRestoreState
    {
        [RTTI.Member(0, 0xB0, "StateSaving", true)] public Array<StatModification> Modifications;
    }

    [RTTI.Serializable(0xF638C7D767B8FD5A)]
    public class ModificationViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xBCE2F0227E8281C4)]
    public class ModifierStatDisplayEntry : StatDisplayEntryBase
    {
        [RTTI.Member(0, 0x30, "General")] public Ref<CurveResource> StatModifierCurve;
        [RTTI.Member(1, 0x38, "General")] public float DesiredMinimumMultiplier;
        [RTTI.Member(2, 0x40, "General")] public Ref<LocalizedTextResource> ModifierName;
        [RTTI.Member(3, 0x48, "General")] public Ref<LocalizedTextResource> ModifierDescription;
    }

    [RTTI.Serializable(0x5D5F6675467E6B19)]
    public class Module : CoreObject
    {
    }

    [RTTI.Serializable(0xBFEDBE357DED36BB)]
    public class MoneyQuestReward : SummableQuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<int> Money;
    }

    [RTTI.Serializable(0xC76E18321B7BB409)]
    public class MonitoredAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF84C13B84F93927D)]
    public class MonitoredAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<MonitoredAnimationResource>> Animations;
    }

    [RTTI.Serializable(0xD777E4483774C2B4)]
    public class MonitoredAnimationResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String FriendlyName;
        [RTTI.Member(1, 0x30, "Logic")] public String AnimationAction;
        [RTTI.Member(2, 0x38, "Logic")] public Array<AnimationVariableValue> AnimationVariables;
        [RTTI.Member(3, 0x48, "Logic")] public String AnimationTag;
        [RTTI.Member(4, 0x50, "Logic")] public int DurationEventUserData;
        [RTTI.Member(5, 0x54, "Logic")] public bool NeedsTargetDependency;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<GraphProgramResource> OnStartGraph;
        [RTTI.Member(7, 0x60, "Logic")] public Ref<OverrideGraphProgramResource> OnStartGraphOverride;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<GraphProgramResource> OnStopGraph;
        [RTTI.Member(9, 0x70, "Logic")] public Ref<OverrideGraphProgramResource> OnStopGraphOverride;
        [RTTI.Member(10, 0x78, "Logic")] public Ref<GraphProgramResource> OnActiveUpdateGraph;
        [RTTI.Member(11, 0x80, "Logic")] public Ref<OverrideGraphProgramResource> OnActiveUpdateGraphOverride;
    }

    [RTTI.Serializable(0x2F1A3D44EC3B742)]
    public class MorphemeAnimationManager : AnimationManager
    {
    }

    [RTTI.Serializable(0xB8E67CB4A1B96187)]
    public class MorphemeAnimationManagerResource : AnimationManagerResource
    {
        [RTTI.Member(0, 0xB0, "Logic")] public Ref<MorphemeNetworkDefResource> MorphemeNetworkDef;
        [RTTI.Member(1, 0xB8, "Logic")] public Ref<AnimationSetMap> AnimationSetMap;
        [RTTI.Member(2, 0xC0, "Logic")] public int DefaultAnimationSet;
    }

    [RTTI.Serializable(0xEEE268C550A7F960)]
    public class MorphemeAnimationTargetMapping
    {
        [RTTI.Member(0, 0x0)] public String AnimationTarget;
        [RTTI.Member(1, 0x8)] public String SkeletonPrefix;
        [RTTI.Member(2, 0x10)] public Ref<Skeleton> Skeleton;
        [RTTI.Member(3, 0x18)] public Array<MorphemeAnimationTargetOffsetSizeCouple> Offsets;
    }

    [RTTI.Serializable(0x6660B3713DB4A678)]
    public class MorphemeAnimationTargetOffsetSizeCouple
    {
        [RTTI.Member(0, 0x0)] public uint32 Offset;
        [RTTI.Member(1, 0x4)] public uint32 Length;
    }

    [RTTI.Serializable(0x3292F00C1E66A832)]
    public class MorphemeAsset
    {
        [RTTI.Member(0, 0x0)] public Array<uint8> Data;
        [RTTI.Member(1, 0x10)] public uint32 AssetID;
        [RTTI.Member(2, 0x14)] public int32 AssetType;
        [RTTI.Member(3, 0x18)] public int64 AssetSize;
    }

    [RTTI.Serializable(0x344F9419F90D8E41)]
    public class MorphemeEventMappingsResource : Resource
    {
        [RTTI.Member(0, 0x68)] public Array<MorphemeTextEventMapping> TextEventMappings;
        [RTTI.Member(1, 0x78)] public Array<MorphemeSoundEventMapping> SoundEventMappings;
    }

    [RTTI.Serializable(0x9CB9B02442258EFD)]
    public class MorphemeNetworkDefResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<String> NodeNames;
        [RTTI.Member(1, 0x38, "Logic")] public Array<MorphemeAsset> MorphemeAssets;
        [RTTI.Member(2, 0x48, "Logic")] public Array<String> ControlParameters;
        [RTTI.Member(3, 0x58, "Logic")] public Array<String> Messages;
        [RTTI.Member(4, 0x78, "Logic")] public Array<Ref<MorphemeAnimationResource>> Animations;
        [RTTI.Member(5, 0x88, "Logic")] public HashMap<String_int> AnimationTags;
        [RTTI.Member(6, 0x98, "Logic")] public Ref<MorphemeEventMappingsResource> Mappings;
        [RTTI.Member(7, 0xA0, "Logic")] public Ref<SkeletonTargetTree> SkeletonTargetTree;
        [RTTI.Member(8, 0xA8, "Logic")] public Array<MorphemeAnimationTargetMapping> AnimationTargetMap;
        [RTTI.Member(9, 0xB8, "Logic")] public Array<MorphemeAnimationTargetOffsetSizeCouple> DefaultOffsets;
        [RTTI.Member(10, 0xC8, "Logic")] public int AnimSetNodeID;
        [RTTI.Member(11, 0x110, "Logic")] public HashMap<String_int> NodeNameIDMap;
        [RTTI.Member(12, 0x144, "Logic")] public bool EnableUpdateTrajectory;
        [RTTI.Member(13, 0x145, "Logic")] public bool EnableUpdateSampledEvents;
    }

    [RTTI.Serializable(0x29FD4FBCAD73775E)]
    public class MorphemeSoundEventMapping
    {
        [RTTI.Member(0, 0x0)] public AnimationEventID ID;
        [RTTI.Member(1, 0x8)] public Ref<SoundResource> Sound;
        [RTTI.Member(2, 0x10)] public String HelperName;
    }

    [RTTI.Serializable(0xF8561A1708E2C015)]
    public class MorphemeSoundEventRemapComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC85D28D17C10854D)]
    public class MorphemeSoundEventRemapComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<MorphemeSoundEventMapping> RemapMorphemeSoundEvents;
    }

    [RTTI.Serializable(0x442C8FE6C6BEF519)]
    public class MorphemeTextEventMapping
    {
        [RTTI.Member(0, 0x0)] public AnimationEventID ID;
        [RTTI.Member(1, 0x8)] public String Text;
    }

    [RTTI.Serializable(0x2EEAB514E2EF58CE)]
    public class MortallyWoundedComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB52CAB4C2A7CA040)]
    public class MortallyWoundedComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "NPC")] public float Chance;
        [RTTI.Member(1, 0x2C, "NPC")] public float MinTimeBetween;
        [RTTI.Member(2, 0x30, "NPC")] public FRange AllowedDistanceToPlayer;
        [RTTI.Member(3, 0x38, "NPC")] public float AcceptReviveDelay;
        [RTTI.Member(4, 0x3C, "Logic")] public bool AllowMortallyWoundedOnHeadshot;
        [RTTI.Member(5, 0x3D, "Logic")] public bool AllowMortallyWoundedOnSuicide;
        [RTTI.Member(6, 0x3E, "Logic")] public bool NeedReviverToGoMortallyWounded;
        [RTTI.Member(7, 0x40, "Logic")] public float MaxReviverDetectionDistance;
        [RTTI.Member(8, 0x44, "Revive")] public float ReviveTime;
        [RTTI.Member(9, 0x48, "Revive")] public Ref<UseLocationResource> ReviveUseLocation;
        [RTTI.Member(10, 0x50, "Revive")] public Vec3 ReviveUseLocationOffset;
        [RTTI.Member(11, 0x60, "Revive")] public int MaxReviveCount;
        [RTTI.Member(12, 0x64, "Revive")] public bool ReviveIconHiddenForMedic;
        [RTTI.Member(13, 0x68, "Logic")] public Array<Ref<DamageTypeResource>> InvalidDamageTypes;
        [RTTI.Member(14, 0x78, "Logic")] public float MinWoundedTimeBeforeSuicide;
        [RTTI.Member(15, 0x7C, "Logic")] public bool CanBeMercyKilled;
        [RTTI.Member(16, 0x80, "Logic")] public float MercyKillDelay;
        [RTTI.Member(17, 0x88, "Logic")] public String LocalizedMortallyWoundedSoundName;
        [RTTI.Member(18, 0x90, "Revive")] public String LocalizedWantsHealthSoundName;
        [RTTI.Member(19, 0x98, "CallForHealth")] public bool AutoWantHealthWhenWounded;
        [RTTI.Member(20, 0x99, "Revive")] public bool AutoAcceptsRevive;
        [RTTI.Member(21, 0x9A, "Revive")] public bool IsInvulnerableWhileStandingUp;
        [RTTI.Member(22, 0x9B, "CallForHealth")] public bool PlayAnimation;
        [RTTI.Member(23, 0xA0, "Logic")] public CPtr<EntityAction> OnMortallyWoundedAction;
        [RTTI.Member(24, 0xA8, "Revive")] public CPtr<EntityAction> OnReviveAction;
        [RTTI.Member(25, 0xB0, "Revive")] public float AutoReviveTime;
        [RTTI.Member(26, 0xB4, "Revive")] public float ReviveHealTarget;
        [RTTI.Member(27, 0xB8, "Revive")] public float ReviveRegenTarget;
        [RTTI.Member(28, 0xBC, "Revive")] public float ReviveRegenTime;
    }

    [RTTI.Serializable(0xA9AAE2B4E08AD3DC)]
    public class MortarStrike : Entity
    {
    }

    [RTTI.Serializable(0x19C3261E01A76252)]
    public class MortarStrikeRep : EntityRep
    {
    }

    [RTTI.Serializable(0x98667314BBDE550D)]
    public class MortarStrikeResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public float LeadTime;
        [RTTI.Member(1, 0x134, "Logic")] public float StrikeRadius;
        [RTTI.Member(2, 0x138, "Logic")] public Ref<ExplosionResource> ExplosionResource;
        [RTTI.Member(3, 0x140, "Logic")] public int NumberOfImpacts;
        [RTTI.Member(4, 0x144, "Logic")] public float ImpactMinDelay;
        [RTTI.Member(5, 0x148, "Logic")] public float ImpactMaxDelay;
        [RTTI.Member(6, 0x150, "Representation")] public Ref<SoundResource> WhistleSound;
        [RTTI.Member(7, 0x158, "Representation")] public float WhistleSoundDuration;
        [RTTI.Member(8, 0x15C, "Representation")] public float WhistleSoundHeightOffset;
    }

    [RTTI.Serializable(0x14A0C9AC19095672)]
    public class MotionTableContentsGenerationResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<String> ControlParameterNames;
        [RTTI.Member(1, 0x38, "General")] public Array<String> AnimationStates;
        [RTTI.Member(2, 0x48, "General")] public String SampleTag;
        [RTTI.Member(3, 0x50, "General")] public Array<String> AdditionalBoneNames;
        [RTTI.Member(4, 0x60, "General")] public bool ForceSampleFrequency30Hz;
    }

    [RTTI.Serializable(0xAE0FA244CA3EC77F)]
    public class MotionTableResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<MotionTableContentsGenerationResource> MotionTableContentGenerationResource;
        [RTTI.Member(1, 0x70, "General")] public Array<String> HashKeysMotionTableEntry;
        [RTTI.Member(2, 0x80, "General")] public Array<Ref<AnimationMotionBase>> MotionArray;
    }

    [RTTI.Serializable(0x908E98E470231F61)]
    public class MountDismountMode : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String Identifier;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<MountVariableRange>> MountVariableRanges;
        [RTTI.Member(2, 0x40, "Logic")] public String DisplacementEventName;
        [RTTI.Member(3, 0x48, "Logic")] public Array<MountPoint> MountPoints;
    }

    [RTTI.Serializable(0x12A64F895DA71C18)]
    public class MountEventInstance : MoveToEventInstance
    {
    }

    [RTTI.Serializable(0xAC9E4B0BC0FFA9ED)]
    public class MountEventResource : MoveToEventResource
    {
        [RTTI.Member(0, 0x68, "Logic")] public String UseLocationName;
        [RTTI.Member(1, 0x70, "Logic")] public bool ImmediateMount;
    }

    [RTTI.Serializable(0x3EB76C783C68B529)]
    public class MountMode : MountDismountMode
    {
        [RTTI.Member(0, 0x60, "Logic")] public float MaxWarpDistance;
    }

    [RTTI.Serializable(0xA2E3C88969846B60)]
    public class MountPlayAnimationObjectEventInstance : MoveToEventInstance
    {
    }

    [RTTI.Serializable(0xC039EEF080A69CC0)]
    public class MountPlayAnimationObjectEventResource : MoveToEventResource
    {
        [RTTI.Member(0, 0x68, "Logic")] public String UseLocationName;
        [RTTI.Member(1, 0x70, "Logic")] public bool ImmediateMount;
        [RTTI.Member(2, 0x71, "Logic")] public bool ImmediateAction;
        [RTTI.Member(3, 0x72, "Logic")] public bool SkipMountAnimation;
        [RTTI.Member(4, 0x73, "Logic")] public bool KillControlledEntityActor;
    }

    [RTTI.Serializable(0x34BBB779F76C4B18)]
    public class MountPoint
    {
        [RTTI.Member(0, 0x0, "Logic")] public Mat44 Transform;
        [RTTI.Member(1, 0x40, "Logic")] public Mat44 RootTransform;
        [RTTI.Member(2, 0x80, "Logic")] public Array<float> AnimationVariableValues;
        [RTTI.Member(3, 0x90, "Logic")] public Array<Vec3> Trajectory;
        [RTTI.Member(4, 0xA0, "Logic")] public float DisplacementStartTime;
        [RTTI.Member(5, 0xA4, "Logic")] public float DisplacementEndTime;
    }

    [RTTI.Serializable(0xD52A71D0B0F6CC00)]
    public class MountRiderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAC34110A4ED7FD1)]
    public class MountUseLocationsComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x582EED89D375E4A3)]
    public class MountUseLocationsComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<UseLocationConditionSet> UseLocationConditionSet;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<MountMode> MountMode;
        [RTTI.Member(3, 0x40, "Logic")] public bool RequestNetOwnership;
    }

    [RTTI.Serializable(0x4BB95FAD33CEBB29)]
    public class MountVariableRange : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String VariableName;
        [RTTI.Member(1, 0x30, "Logic")] public FRange VariableRange;
        [RTTI.Member(2, 0x38, "Logic")] public float VariableStep;
        [RTTI.Member(3, 0x3C, "Logic")] public bool IsControlledByMountableComponent;
    }

    [RTTI.Serializable(0x8195BD80471DE208)]
    public class MountableComponent : AIUsableComponent
    {
        [RTTI.Member(0, 0x80, true)] public EMountRequest MountRequest;
        [RTTI.Member(1, 0x81, true)] public EMountState MountState;
        [RTTI.Member(2, 0x88, true)] public CPtr<Entity> Mounter;
    }

    [RTTI.Serializable(0x5960F294AA6410A7)]
    public class MountableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<SkinnedModelResource> SkinnedModelResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<Skeleton> MounterSkeleton;
        [RTTI.Member(2, 0x38, "Logic")] public AnimationTagSet AnimationSetTags;
        [RTTI.Member(3, 0x48, "Logic")] public String MounterStateTag;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<MounterComponentResource> MounterComponentResource;
        [RTTI.Member(5, 0x58, "Logic")] public String MountAnimation;
        [RTTI.Member(6, 0x60, "Logic")] public String MountStateAnimationVariable;
        [RTTI.Member(7, 0x68, "Logic")] public String AttachHelper;
        [RTTI.Member(8, 0x70, "Logic")] public AnimationMountStateLogic AnimationMountStateLogic;
        [RTTI.Member(9, 0x78, "Logic")] public String MountingAnimationLogicName;
        [RTTI.Member(10, 0x80, "Logic")] public String MountedAnimationLogicName;
        [RTTI.Member(11, 0x88, "Logic")] public String DismountingAnimationLogicName;
        [RTTI.Member(12, 0x90, "Logic")] public String DismountedAnimationLogicName;
        [RTTI.Member(13, 0x98, "Logic")] public String BreakOutDismountAnimationEventName;
        [RTTI.Member(14, 0xA0, "Logic")] public Array<Ref<MountMode>> MountModes;
        [RTTI.Member(15, 0xB0, "Logic")] public Array<Ref<DismountMode>> DismountModes;
        [RTTI.Member(16, 0xC0, "Logic")] public Ref<DismountMode> MounterDeathDismountMode;
        [RTTI.Member(17, 0xC8, "Logic")] public CPtr<EntityAction> StartMountAction;
        [RTTI.Member(18, 0xD0, "Logic")] public CPtr<EntityAction> StopMountAction;
        [RTTI.Member(19, 0xD8, "Logic")] public CPtr<EntityAction> StartDismountAction;
        [RTTI.Member(20, 0xE0, "Logic")] public CPtr<EntityAction> StopDismountAction;
        [RTTI.Member(21, 0xE8, "Logic")] public TagPropertyLinkCollection TagProperties;
    }

    [RTTI.Serializable(0x3612FA8373BA7EF7)]
    public class MountableEntity : InteractiveEntity
    {
    }

    [RTTI.Serializable(0x8BC3C1A51D0C003D)]
    public class MountableEntityResource : InteractiveEntityResource
    {
        [RTTI.Member(0, 0x298, "Logic")] public Ref<CameraEntityResource> MountCameraResource;
        [RTTI.Member(1, 0x2A0, "Logic")] public float DismountCollisionTime;
        [RTTI.Member(2, 0x2A4, "Logic")] public bool ResetAnimationAfterDetach;
        [RTTI.Member(3, 0x2A8, "Representation")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(4, 0x2B0, "Logic")] public Array<UserDamageModifier> UserDamageModifiers;
        [RTTI.Member(5, 0x2C0, "Logic")] public bool MountDismountAnimation;
        [RTTI.Member(6, 0x2C8, "AI")] public Ref<AISkillManagerResource> MountedUserSkills;
        [RTTI.Member(7, 0x2D0, "Logic")] public bool AllowDismountAlways;
        [RTTI.Member(8, 0x2D8, "Logic")] public CPtr<EntityAction> StopAttachAction;
        [RTTI.Member(9, 0x2E0, "Logic")] public CPtr<EntityAction> StartDetachAction;
        [RTTI.Member(10, 0x2E8, "Logic")] public bool CanSwitchInventoryItem;
        [RTTI.Member(11, 0x2E9, "Logic")] public bool CanUserReload;
        [RTTI.Member(12, 0x2EA, "Logic")] public bool DoCollisionCheckOnMountPositions;
    }

    [RTTI.Serializable(0x591B6CECE878BDAF)]
    public class MountableEntityScriptMountEvent : RequestOwnershipEvent
    {
    }

    [RTTI.Serializable(0xB71DDB14560B92BD)]
    public class MounterComponent : EntityComponent
    {
        [RTTI.Member(0, 0x58, true)] public CPtr<MountableComponent> MountableComponent;
        [RTTI.Member(1, 0x60, true)] public CPtr<MoverResource> PreviousMoverResource;
    }

    [RTTI.Serializable(0x90677C75DAA75DBD)]
    public class MounterComponentGame : MounterComponent
    {
    }

    [RTTI.Serializable(0x63B354695F948B85)]
    public class MounterComponentGameResource : MounterComponentResource
    {
        [RTTI.Member(0, 0x48, "Logic")] public bool IsContextualActionAllowed;
        [RTTI.Member(1, 0x49, "Logic")] public bool ShouldUpdateNearbyAnnotations;
        [RTTI.Member(2, 0x4A, "Logic")] public bool IsVaultingAllowed;
        [RTTI.Member(3, 0x4B, "Logic")] public bool IsVegetationCoverAllowed;
    }

    [RTTI.Serializable(0x7858094AF3C4E895)]
    public class MounterComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CPtr<EntityAction> StartMountAction;
        [RTTI.Member(1, 0x30, "Logic")] public CPtr<EntityAction> StopMountAction;
        [RTTI.Member(2, 0x38, "Logic")] public CPtr<EntityAction> StartDismountAction;
        [RTTI.Member(3, 0x40, "Logic")] public CPtr<EntityAction> StopDismountAction;
    }

    [RTTI.Serializable(0xB378391BC0268369)]
    public class MounterMover : Mover
    {
    }

    [RTTI.Serializable(0xDE6ABC244F8C56F2)]
    public class MounterMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xBA160D9785CD7102)]
    public class MouseToolSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Select")] public Array<UUIDRef<EntityResource>> SelectBlackList;
    }

    [RTTI.Serializable(0x8E55093B8E465318)]
    public class MoveToEventInstance : SubGoalPausableEventInstance
    {
    }

    [RTTI.Serializable(0x1D8503DE55DF7E88)]
    public class MoveToEventResource : SubGoalPausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Array<Ref<LocatorResource>> TargetLocatorResources;
        [RTTI.Member(3, 0x58, "Logic")] public Ref<AIContextHintResource> MoveContext;
        [RTTI.Member(4, 0x60, "Logic")] public bool PauseUntilArrival;
        [RTTI.Member(5, 0x61, "Logic")] public bool StopExactlyAtDestination;
        [RTTI.Member(6, 0x62, "Logic")] public bool FaceToTargetRotation;
    }

    [RTTI.Serializable(0xBD67720A04DE6F05)]
    public class Mover : EntityComponent
    {
    }

    [RTTI.Serializable(0x8675EC902B98C6A3)]
    public class MoverResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool SupportsDynamicParts;
        [RTTI.Member(1, 0x29, "NetworkedPhysics")] public bool ShouldApplyImpulseOnRemote;
    }

    [RTTI.Serializable(0x69F5EE5C1668CECA)]
    public class MovieFade
    {
        [RTTI.Member(0, 0x0)] public int FadeFrame;
        [RTTI.Member(1, 0x4)] public int FadeDuration;
        [RTTI.Member(2, 0x8)] public int FadeDownDuration;
        [RTTI.Member(3, 0xC)] public int FadeUpDuration;
        [RTTI.Member(4, 0x10)] public EMovieFadePurpose FadePurpose;
    }

    [RTTI.Serializable(0x76D21F26190C1956)]
    public class MovieFrameMenuActionBinding
    {
        [RTTI.Member(0, 0x0)] public int FrameNumber;
        [RTTI.Member(1, 0x8)] public Ref<MenuActionResource> Action;
    }

    [RTTI.Serializable(0x76C45BC783701DD1)]
    public class MovieListResource : Resource
    {
        [RTTI.Member(0, 0x28)] public EMovieListType Type;
        [RTTI.Member(1, 0x30)] public Array<Ref<MovieResource>> Movies;
    }

    [RTTI.Serializable(0x15C3AA3D8BB35A59)]
    public class MovieResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<MovieSkipLocation> SkipLocations;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<SubtitlesResource> Subtitles;
        [RTTI.Member(2, 0x40, "Logic")] public Array<MovieFade> Fades;
        [RTTI.Member(3, 0x50, "Logic")] public bool Looping;
        [RTTI.Member(4, 0x51, "Logic")] public bool IsLoadingMovie;
        [RTTI.Member(5, 0x52, "Logic")] public bool CanBeSkipped;
        [RTTI.Member(6, 0x53, "Logic")] public bool ShouldRunIn30Hz;
        [RTTI.Member(7, 0x58, "Logic")] public String MovieFile;
        [RTTI.Member(8, 0x60, "Volume")] public float MasterVolume;
        [RTTI.Member(9, 0x64, "Volume")] public float MandS_FrontLeftRightVolume;
        [RTTI.Member(10, 0x68, "Volume")] public float MandS_CenterVolume;
        [RTTI.Member(11, 0x6C, "Volume")] public float MandS_LfeVolume;
        [RTTI.Member(12, 0x70, "Volume")] public float MandS_SurroundLeftRightVolume;
        [RTTI.Member(13, 0x74, "Volume")] public float VoiceVolume;
        [RTTI.Member(14, 0x78, "Variant")] public bool Has3DVariant;
        [RTTI.Member(15, 0x79, "Loading")] public bool TryPreloadAll;
        [RTTI.Member(16, 0x7C, "Loading")] public EMovieMemoryType MemoryType;
        [RTTI.Member(17, 0x80, "Logic")] public bool ControlGameSoundFade;
    }

    [RTTI.Serializable(0x4049C609F349EC75)]
    public class MovieSkipLocation
    {
        [RTTI.Member(0, 0x0)] public ESkipLocationType Type;
        [RTTI.Member(1, 0x4)] public int FrameOffset;
        [RTTI.Member(2, 0x8)] public int EndFrame;
    }

    [RTTI.Serializable(0xF8CF457B8F836EE8)]
    public class MovieTag : VisualTag
    {
    }

    [RTTI.Serializable(0xD7F5749E333EAE96)]
    public class MovieWidget : Widget
    {
    }

    [RTTI.Serializable(0xCB039A7B8AFECD78)]
    public class MsgAI : MsgScene
    {
        [RTTI.Member(0, 0x0)] public CPtr<Entity> Sender;
        [RTTI.Member(1, 0x38)] public String MessageId;
    }

    [RTTI.Serializable(0x72FCDF0F7684C7A5)]
    public class MsgAIAlertLevelChanged : MsgAI
    {
        [RTTI.Member(0, 0x40)] public EAlertLevel AlertLevel;
        [RTTI.Member(1, 0x44)] public EAlertLevel OldAlertLevel;
        [RTTI.Member(2, 0x48)] public bool HasAlertLevelIncreased;
    }

    [RTTI.Serializable(0x4D740E12D5105E2E)]
    public class MsgAIAttack : MsgScene
    {
        [RTTI.Member(0, 0x0)] public CPtr<Entity> Sender;
        [RTTI.Member(1, 0x0)] public CPtr<Entity> Target;
        [RTTI.Member(2, 0x20)] public EMsgAIAttackState State;
        [RTTI.Member(3, 0x58)] public Ref<AIWeaponPreference> Weapon;
    }

    [RTTI.Serializable(0x2910E70EB1C247F4)]
    public class MsgAIEvent : MsgAI
    {
        [RTTI.Member(0, 0x40)] public String CustomData;
    }

    [RTTI.Serializable(0x67D2B8544C982C77)]
    public class MsgAIGroupSpawned : MsgScene
    {
        [RTTI.Member(0, 0x20)] public Ref<AIBehaviorGroup> AIBehaviorGroup;
    }

    [RTTI.Serializable(0x97CD52398BFCACDD)]
    public class MsgAIOrderArrived : MsgAI
    {
    }

    [RTTI.Serializable(0x7DC840B5A67819ED)]
    public class MsgAIOrderCompleted : MsgAI
    {
    }

    [RTTI.Serializable(0x40FAC4EC331545F5)]
    public class MsgAIOrderFailed : MsgAI
    {
    }

    [RTTI.Serializable(0xB4E9F2DE3E0D6CF1)]
    public class MsgAIPatrolPathChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xC2DC73160525ADD8)]
    public class MsgAISequenceEvent : MsgAI
    {
        [RTTI.Member(0, 0x40)] public String EventData;
    }

    [RTTI.Serializable(0xAA0F8CA55A56BA31)]
    public class MsgAcquireIKTarget : MsgBase
    {
    }

    [RTTI.Serializable(0xCFA43BA4E09C9818)]
    public class MsgActiveViewportsChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x574DCE225A5A7401)]
    public class MsgAddCameraModifier : MsgBase
    {
    }

    [RTTI.Serializable(0x5F1D1B447FEAA4C5)]
    public class MsgAddComponent : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<EntityComponent> Component;
    }

    [RTTI.Serializable(0xC215F6890BF3D16F)]
    public class MsgAddHapticStimulus : MsgBase
    {
    }

    [RTTI.Serializable(0xFB790CD37C22BE9F)]
    public class MsgAddedToEntityManager : MsgBase
    {
    }

    [RTTI.Serializable(0x3A1DB3EC49FDC8B6)]
    public class MsgAddedToHealthBucket : MsgBase
    {
        [RTTI.Member(0, 0x18)] public float NewContent;
        [RTTI.Member(1, 0x1C)] public float Capacity;
        [RTTI.Member(2, 0x20)] public float AddedAmount;
    }

    [RTTI.Serializable(0xFDCA0939DD6B7AC9)]
    public class MsgAddedToInventory : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0x538A426C54BC231E)]
    public class MsgAdjustImpactProperties : MsgBase
    {
    }

    [RTTI.Serializable(0x8EECE4F58C2927CC)]
    public class MsgAmmoChargeLevelChanged : MsgWeaponModeBase
    {
        [RTTI.Member(0, 0x20)] public int CurrentCharge;
        [RTTI.Member(1, 0x24)] public int PreviousCharge;
        [RTTI.Member(2, 0x28)] public bool IsOvercharged;
    }

    [RTTI.Serializable(0x7ACC6C03B2025DDD)]
    public class MsgAnimationEvent : MsgBase
    {
        [RTTI.Member(0, 0x18)] public String ID;
        [RTTI.Member(1, 0x20)] public bool IsDurationEvent;
        [RTTI.Member(2, 0x21)] public bool IsStarted;
    }

    [RTTI.Serializable(0x8CBD7CDF36AC34BB)]
    public class MsgAnimationSoundEvent : MsgBase
    {
    }

    [RTTI.Serializable(0x83DD78D1981257BA)]
    public class MsgAnyObjectChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x600F16101640CEE5)]
    public class MsgArcComplete : MsgBase
    {
        [RTTI.Member(0, 0x18)] public WorldPosition To;
        [RTTI.Member(1, 0x30)] public WorldPosition From;
        [RTTI.Member(2, 0x48)] public WorldPosition Current;
        [RTTI.Member(3, 0x60)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x64)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x68)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0xE7FC3387C5A18)]
    public class MsgArcHit : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> HitEntity;
        [RTTI.Member(1, 0x18)] public WorldPosition To;
        [RTTI.Member(2, 0x30)] public WorldPosition From;
        [RTTI.Member(3, 0x48)] public WorldPosition Current;
        [RTTI.Member(4, 0x60)] public EArcTargetType ToType;
        [RTTI.Member(5, 0x64)] public EArcTargetType FromType;
        [RTTI.Member(6, 0x68)] public EArcTargetType CurrentType;
        [RTTI.Member(7, 0x88)] public WorldPosition Position;
        [RTTI.Member(8, 0xA0)] public Vec3 Normal;
    }

    [RTTI.Serializable(0x127544289A69B3A1)]
    public class MsgArcJump : MsgBase
    {
        [RTTI.Member(0, 0x18)] public WorldPosition To;
        [RTTI.Member(1, 0x30)] public WorldPosition From;
        [RTTI.Member(2, 0x48)] public WorldPosition Current;
        [RTTI.Member(3, 0x60)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x64)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x68)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0x48E7A0733DA06C9F)]
    public class MsgArcStart : MsgBase
    {
        [RTTI.Member(0, 0x18)] public WorldPosition To;
        [RTTI.Member(1, 0x30)] public WorldPosition From;
        [RTTI.Member(2, 0x48)] public WorldPosition Current;
        [RTTI.Member(3, 0x60)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x64)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x68)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0xB3EE3E2F36242232)]
    public class MsgArcUpdate : MsgBase
    {
        [RTTI.Member(0, 0x18)] public WorldPosition To;
        [RTTI.Member(1, 0x30)] public WorldPosition From;
        [RTTI.Member(2, 0x48)] public WorldPosition Current;
        [RTTI.Member(3, 0x60)] public EArcTargetType ToType;
        [RTTI.Member(4, 0x64)] public EArcTargetType FromType;
        [RTTI.Member(5, 0x68)] public EArcTargetType CurrentType;
    }

    [RTTI.Serializable(0x283021EB44EFF4A6)]
    public class MsgAttachToEntity : MsgBase
    {
    }

    [RTTI.Serializable(0xB1016A7FF9F71CCE)]
    public class MsgAttachedToInteractiveEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x8381E39F78B95495)]
    public class MsgAudioLogStartedPlaying : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x38)] public UUIDRef<SentenceGroupResource> SentenceGroup;
    }

    [RTTI.Serializable(0x7081AAD89774F43A)]
    public class MsgAudioLogStoppedPlaying : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x38)] public UUIDRef<SentenceGroupResource> SentenceGroup;
        [RTTI.Member(1, 0x48)] public bool Aborted;
    }

    [RTTI.Serializable(0x4365D2FC747FA5C3)]
    public class MsgBase : RTTIObject
    {
    }

    [RTTI.Serializable(0x6620E8FFA3F188CB)]
    public class MsgBooleanFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(0, 0x28)] public CPtr<BooleanFact> Fact;
        [RTTI.Member(1, 0x30)] public bool Value;
    }

    [RTTI.Serializable(0x4F49B0E233D11DFC)]
    public class MsgBuildMeshHierarchy : MsgBase
    {
    }

    [RTTI.Serializable(0x49D60EA9C6059277)]
    public class MsgCameraActorActivate : MsgCameraActorUpdate
    {
    }

    [RTTI.Serializable(0x5F0B903E85F204C1)]
    public class MsgCameraActorDeactivate : MsgCameraActorActivate
    {
    }

    [RTTI.Serializable(0xFA06DF13375F5D08)]
    public class MsgCameraActorUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xAC87BF054A30AC16)]
    public class MsgCanBeResurrected : MsgBase
    {
    }

    [RTTI.Serializable(0xA2DB8B4BD2B3805B)]
    public class MsgCanExpressGesture : MsgBase
    {
    }

    [RTTI.Serializable(0xBA3C3D8882629AD4)]
    public class MsgCanReceiveDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x86E7D3A468890928)]
    public class MsgCanSetCameraVisibility : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xE88A8F43A40A4297)]
    public class MsgChildEntityAdded : MsgBase
    {
    }

    [RTTI.Serializable(0x19657199C9328A2E)]
    public class MsgCombatHonorUnlocked : MsgBase
    {
        [RTTI.Member(0, 0x18)] public String RewardName;
    }

    [RTTI.Serializable(0x47909C5D9A0DBDDF)]
    public class MsgConditionChanged : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x38)] public UUIDRef<ConditionResource> ConditionResource;
        [RTTI.Member(1, 0x48)] public bool Value;
    }

    [RTTI.Serializable(0x55750B6ECBB4795A)]
    public class MsgConstructionFinished : MsgBase
    {
    }

    [RTTI.Serializable(0xC95C34981AFA8C67)]
    public class MsgContactPoint : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Collider;
    }

    [RTTI.Serializable(0x90F726CAE205563B)]
    public class MsgContactPointAdded : MsgContactPoint
    {
        [RTTI.Member(0, 0x0, true)] public MaterialType MaterialTypeA;
        [RTTI.Member(1, 0x0, true)] public MaterialType MaterialTypeB;
        [RTTI.Member(2, 0x50, true)] public WorldPosition Position;
        [RTTI.Member(3, 0x70, true)] public Vec3 Normal;
        [RTTI.Member(4, 0x80, true)] public float Distance;
        [RTTI.Member(5, 0xD0, true)] public float ProjectedVelocity;
        [RTTI.Member(6, 0xE0, true)] public Vec3 RelativeVelocity;
        [RTTI.Member(7, 0xF0, true)] public Vec3 RelativeAngularVelocity;
    }

    [RTTI.Serializable(0x34F6C334F7E5FD85)]
    public class MsgContactPointProcess : MsgContactPoint
    {
    }

    [RTTI.Serializable(0x3D5BBD71C05E0A50)]
    public class MsgContactPointRemoved : MsgContactPoint
    {
    }

    [RTTI.Serializable(0x608BDE1E58167BB1)]
    public class MsgContactPointValidate : MsgContactPoint
    {
    }

    [RTTI.Serializable(0x2F2D6F8C7B471EDC)]
    public class MsgCountdownTimer : MsgScene
    {
        [RTTI.Member(0, 0x20)] public CPtr<CountdownTimer> Timer;
    }

    [RTTI.Serializable(0xC1431C4EC6B0B071)]
    public class MsgCountdownTimerLapsed : MsgCountdownTimer
    {
    }

    [RTTI.Serializable(0xA868CA7CAB1056F9)]
    public class MsgCountdownTimerPaused : MsgCountdownTimer
    {
    }

    [RTTI.Serializable(0x53755E3F850AC014)]
    public class MsgCountdownTimerStarted : MsgCountdownTimer
    {
    }

    [RTTI.Serializable(0x2C35514E4873C205)]
    public class MsgCreateCollisionVolume : MsgBase
    {
    }

    [RTTI.Serializable(0xDC11541A901B2393)]
    public class MsgCreateComponent : MsgBase
    {
        [RTTI.Member(0, 0x18)] public Ref<EntityComponentResource> Resource;
    }

    [RTTI.Serializable(0xD693CD2D0BD152F5)]
    public class MsgDamage : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<AttackEventContext> AttackEvent;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> InstigatorEntity;
        [RTTI.Member(2, 0x0, true)] public WorldPosition Position;
        [RTTI.Member(3, 0x0, true)] public int MaterialType;
        [RTTI.Member(4, 0x0, true)] public CPtr<Entity> Victim;
        [RTTI.Member(5, 0x0, true)] public CPtr<InstigatorData> Instigator;
        [RTTI.Member(6, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(7, 0x0, true)] public CPtr<Player> InstigatorPlayer;
        [RTTI.Member(8, 0x0, true)] public float CoreAmount;
        [RTTI.Member(9, 0x0, true)] public CPtr<Entity> Damager;
        [RTTI.Member(10, 0x30, true)] public Vec3 Impulse;
        [RTTI.Member(11, 0x44, true)] public float ImpactSeverity;
        [RTTI.Member(12, 0x60, true)] public Vec3 Normal;
        [RTTI.Member(13, 0x74, true)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0x6309E3D5BD0D39A)]
    public class MsgDamageCaused : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Receiver;
        [RTTI.Member(1, 0x0, true)] public CPtr<AttackEventContext> AttackEvent;
        [RTTI.Member(2, 0x0)] public EDamageFlags DamageFlags;
        [RTTI.Member(3, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(4, 0x40)] public Vec3 ImpactImpulse;
        [RTTI.Member(5, 0x50)] public float ImpactImpulseHumanoidFactor;
        [RTTI.Member(6, 0x54)] public float ImpactSeverity;
        [RTTI.Member(7, 0x70)] public Vec3 Normal;
        [RTTI.Member(8, 0x84)] public int ModelPartIndex;
        [RTTI.Member(9, 0xC0)] public float DamageDone;
    }

    [RTTI.Serializable(0xD2EE350056F9ACD2)]
    public class MsgDamageCausedReport : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public float DamageDone;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> Receiver;
    }

    [RTTI.Serializable(0x6191F5CF5DE7A245)]
    public class MsgDamageReceivedThisFrame : MsgBase
    {
        [RTTI.Member(0, 0x18, true)] public float DamageReceived;
    }

    [RTTI.Serializable(0x8CE378143B71F880)]
    public class MsgDeconstructPlacedEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x6F4BE6DD48EB0F67)]
    public class MsgDestroyCollisionVolume : MsgBase
    {
    }

    [RTTI.Serializable(0xDE708EC64A75162B)]
    public class MsgDestructibilityPartHealthChanged : MsgBase
    {
        [RTTI.Member(0, 0x18)] public int ModelPartIndex;
        [RTTI.Member(1, 0x1C)] public float OldHealth;
        [RTTI.Member(2, 0x20)] public float NewHealth;
    }

    [RTTI.Serializable(0xDD9CFE809A403C0D)]
    public class MsgDestructibilityPartHit : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x38)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0xFF914232B873E1CB)]
    public class MsgDestructibilityPartTransition : MsgBase
    {
        [RTTI.Member(0, 0xB0)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0xF10CC90F8C26F58A)]
    public class MsgDetachFromEntity : MsgBase
    {
    }

    [RTTI.Serializable(0x2E90410835EC7E4C)]
    public class MsgDetachedFromInteractiveEntity : MsgBase
    {
    }

    [RTTI.Serializable(0xBC00C0ABDBDCF08F)]
    public class MsgDisableModelPartCollision : MsgBase
    {
    }

    [RTTI.Serializable(0x67CB0270279E4B8A)]
    public class MsgDrawFirstPersonInWorldSpace : MsgBase
    {
    }

    [RTTI.Serializable(0x520B2E35334A27A3)]
    public class MsgDropped : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xC896133F1742F4B1)]
    public class MsgEnableAttachedLights : MsgBase
    {
    }

    [RTTI.Serializable(0x38A9EA7ED1FD000F)]
    public class MsgEnableModelPart : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Model> Model;
        [RTTI.Member(1, 0x30, true)] public int ModelPartIndex;
        [RTTI.Member(2, 0x34, true)] public bool Enabled;
    }

    [RTTI.Serializable(0x9C1F105808B87D9)]
    public class MsgEnableModelPartCollision : MsgBase
    {
    }

    [RTTI.Serializable(0xCF92B32620AEF31B)]
    public class MsgEnabledChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x4A7EAB29D5091794)]
    public class MsgEndUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0x1F6C7899BB8F555D)]
    public class MsgEntityActivationPolicyChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x406A46319D7B7836)]
    public class MsgEntityAddedToScene : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x0, true)] public bool EntityWasSpawned;
        [RTTI.Member(1, 0x38)] public CPtr<WorldNode> Source;
    }

    [RTTI.Serializable(0x7DAE0EFC4D684633)]
    public class MsgEntityDelayedRemove : MsgBase
    {
    }

    [RTTI.Serializable(0x7D1BBA432A9E8FB6)]
    public class MsgEntityDie : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<EntityResource> WeaponResource;
        [RTTI.Member(1, 0x0, true)] public CPtr<InstigatorData> Instigator;
        [RTTI.Member(2, 0x0, true)] public CPtr<Entity> InstigatorEntity;
        [RTTI.Member(3, 0x0, true)] public WorldPosition Position;
        [RTTI.Member(4, 0x0, true)] public Vec3 Normal;
        [RTTI.Member(5, 0x0, true)] public int ModelPartIndex;
        [RTTI.Member(6, 0x0, true)] public MaterialType MaterialType;
        [RTTI.Member(7, 0x0, true)] public CPtr<Entity> Damager;
        [RTTI.Member(8, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(9, 0x0, true)] public float CoreAmount;
        [RTTI.Member(10, 0x0, true)] public float ImpactSeverity;
        [RTTI.Member(11, 0x0, true)] public CPtr<AttackEventContext> AttackEvent;
        [RTTI.Member(12, 0x0, true)] public CPtr<Player> InstigatorPlayer;
        [RTTI.Member(13, 0x0, true)] public Vec3 Impulse;
    }

    [RTTI.Serializable(0xDFE3C6EAF5A2D13D)]
    public class MsgEntityEjected : MsgWeaponModeBase
    {
        [RTTI.Member(0, 0x20)] public CPtr<Entity> EntityProjectile;
    }

    [RTTI.Serializable(0x39FD18843D085070)]
    public class MsgEntityEnterState : MsgStateMachineEnterState
    {
    }

    [RTTI.Serializable(0x17AAC9F270797304)]
    public class MsgEntityInit : MsgBase
    {
        [RTTI.Member(0, 0x0)] public bool IsInitMode;
    }

    [RTTI.Serializable(0x544584E18BAD2023)]
    public class MsgEntityKilled : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<AttackEventContext> AttackEvent;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> KilledEntity;
        [RTTI.Member(2, 0x0)] public EDamageFlags DamageFlags;
        [RTTI.Member(3, 0x0, true)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(4, 0x30)] public Vec3 ImpactImpulse;
        [RTTI.Member(5, 0x40)] public float ImpactImpulseHumanoidFactor;
        [RTTI.Member(6, 0x44)] public float ImpactSeverity;
        [RTTI.Member(7, 0x60)] public Vec3 Normal;
        [RTTI.Member(8, 0x74)] public int ModelPartIndex;
    }

    [RTTI.Serializable(0x4198348FE2F4BF90)]
    public class MsgEntityLeaveState : MsgStateMachineLeaveState
    {
    }

    [RTTI.Serializable(0x6B7E174A45FB29B5)]
    public class MsgEntityLive : MsgBase
    {
    }

    [RTTI.Serializable(0x15E6A3921B23A4DD)]
    public class MsgEntityOwnershipChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x74742F5DBD42F4E4)]
    public class MsgEntityPlaced : MsgBase
    {
    }

    [RTTI.Serializable(0x1FAA2D7CCA9052BA)]
    public class MsgEntityPostUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xE27E54B50C03BE63)]
    public class MsgEntityPreUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x4469B9AE6412816)]
    public class MsgEntityRemovedFromScene : MsgSceneEntityBase
    {
    }

    [RTTI.Serializable(0x7ECE5C4AB9FA86EA)]
    public class MsgEntityRepTeleported : MsgBase
    {
    }

    [RTTI.Serializable(0xABF46CB647087657)]
    public class MsgEntityRepUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xE16D3887B6686FD4)]
    public class MsgEntityRepUpdateVisualBounds : MsgBase
    {
    }

    [RTTI.Serializable(0x551F8A8DD70F9CF)]
    public class MsgEntitySpawnCanceled : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<SpawnpointBase> Spawnpoint;
    }

    [RTTI.Serializable(0x8B429EE1A3CFFB26)]
    public class MsgEntitySpotted : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> SpottedEntity;
        [RTTI.Member(1, 0x30)] public UUIDRef<SpottableComponentResource> SpottableComponentResource;
    }

    [RTTI.Serializable(0xB2CDA2E3032CB1F2)]
    public class MsgEntityStartSpawning : MsgBase
    {
    }

    [RTTI.Serializable(0xE263DDEA782BC2FB)]
    public class MsgEntityStuckTo : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> StickerEntity;
        [RTTI.Member(1, 0x20)] public MaterialType MaterialType;
    }

    [RTTI.Serializable(0xC342B957572E3EC1)]
    public class MsgEntityTeleported : MsgBase
    {
    }

    [RTTI.Serializable(0x6D2DABBBAB41CD26)]
    public class MsgEntityUnboundFromSequenceNetwork : MsgBase
    {
    }

    [RTTI.Serializable(0x43CEB43B053F0E1B)]
    public class MsgEntityUpdate : MsgBase
    {
        [RTTI.Member(0, 0x24)] public float DeltaTime;
    }

    [RTTI.Serializable(0xC6DEA60135670818)]
    public class MsgEntityUpdateVisualBounds : MsgBase
    {
    }

    [RTTI.Serializable(0x5616E26F0E7E7327)]
    public class MsgEntityVisualBoundsChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x2249A2324D7A7838)]
    public class MsgEnumFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(0, 0x28)] public CPtr<EnumFact> Fact;
        [RTTI.Member(1, 0x30)] public GGUUID Value;
    }

    [RTTI.Serializable(0x26C3E39135B9484B)]
    public class MsgEquipped : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xF4494186422ADEC7)]
    public class MsgEstimateTimeOfDeath : MsgBase
    {
    }

    [RTTI.Serializable(0xD29991D717CB9541)]
    public class MsgFactChangedBase : MsgBase
    {
        [RTTI.Member(0, 0x18)] public GGUUID Context;
    }

    [RTTI.Serializable(0xE6C0B700C6CA1A09)]
    public class MsgFactionChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x3B3AAD13C575EAFC)]
    public class MsgFinishedLooting : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x38)] public bool IsEmpty;
    }

    [RTTI.Serializable(0x516BF504AE3EC0F3)]
    public class MsgFinishedStow : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xD7DA7E969FB517B7)]
    public class MsgFinishedWield : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0x1A01519921DBBD24)]
    public class MsgFloatFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(0, 0x28)] public CPtr<FloatFact> Fact;
        [RTTI.Member(1, 0x30)] public float Value;
    }

    [RTTI.Serializable(0x30F07CB60F5AF8A2)]
    public class MsgFocusAlertSignalScanned : MsgScene
    {
        [RTTI.Member(0, 0x20)] public CPtr<FocusAlertSignal> FocusAlertSignal;
        [RTTI.Member(1, 0x28)] public bool FirstTime;
    }

    [RTTI.Serializable(0xD8C457111C9063EC)]
    public class MsgFocusCollisionTriggerUpdatesRequired : MsgBase
    {
    }

    [RTTI.Serializable(0xC34697FA60D07CA4)]
    public class MsgFocusHasAlertSignal : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x38)] public bool HasAlertSignal;
    }

    [RTTI.Serializable(0xAECAF158A13D027F)]
    public class MsgFocusModeDeactivated : MsgBase
    {
        [RTTI.Member(0, 0x18)] public bool IsVantageFocusActivated;
    }

    [RTTI.Serializable(0xA574F28D4E38C00A)]
    public class MsgFocusScanning : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x30)] public bool IsScanned;
        [RTTI.Member(2, 0x31)] public bool IsBeingScanned;
    }

    [RTTI.Serializable(0xE3BEABD07DF0C7E4)]
    public class MsgFocusStartScanningPart : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x30)] public bool ModelPartIndex;
    }

    [RTTI.Serializable(0x2CBA716C28A3D558)]
    public class MsgFocusTargetHighlighted : MsgBase
    {
    }

    [RTTI.Serializable(0x586ED3F0A5DF62B0)]
    public class MsgFocusTargetIsBeingScanned : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> ScanningEntity;
        [RTTI.Member(2, 0x50)] public bool IsBeingScanned;
    }

    [RTTI.Serializable(0x4B185F07F48D0B5B)]
    public class MsgFocusTargetScanned : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x38)] public bool IsScanned;
    }

    [RTTI.Serializable(0x6E24E53443221231)]
    public class MsgFocusTrackingPathFocused : MsgScene
    {
        [RTTI.Member(0, 0x20)] public CPtr<TrackingPath> TrackingPath;
        [RTTI.Member(1, 0x28)] public bool IsFocused;
    }

    [RTTI.Serializable(0x4D91013092F8455C)]
    public class MsgFocusVantageActivated : MsgBase
    {
    }

    [RTTI.Serializable(0x7D9EE1DEA1A9A943)]
    public class MsgGainHealthSegment : MsgBase
    {
    }

    [RTTI.Serializable(0xE01A786F579574FA)]
    public class MsgGetAdditiveCameraRotation : MsgBase
    {
    }

    [RTTI.Serializable(0xFADF53FF5B2830EB)]
    public class MsgGetAimAssist : MsgBase
    {
    }

    [RTTI.Serializable(0xD57023BC1015D0CE)]
    public class MsgGetAimParms : MsgBase
    {
    }

    [RTTI.Serializable(0xBEA71CE74B59D2CF)]
    public class MsgGetArmor : MsgBase
    {
    }

    [RTTI.Serializable(0x94D428B814FF3D4D)]
    public class MsgGetAttachedUser : MsgBase
    {
    }

    [RTTI.Serializable(0x6E155B04DFF41DE)]
    public class MsgGetConstructor : MsgBase
    {
    }

    [RTTI.Serializable(0xE0A2564A7416C458)]
    public class MsgGetCullInfo : MsgBase
    {
    }

    [RTTI.Serializable(0xE0A9ED6406B6D09E)]
    public class MsgGetDisguise : MsgBase
    {
    }

    [RTTI.Serializable(0xEEC9E5FF77CF9029)]
    public class MsgGetEntityLocationProvider : MsgBase
    {
    }

    [RTTI.Serializable(0x2258C433A485F4D1)]
    public class MsgGetEntityMatrixProvider : MsgGetEntityLocationProvider
    {
    }

    [RTTI.Serializable(0xC498D6B2BF295B29)]
    public class MsgGetEntityRepMatrixProvider : MsgGetEntityLocationProvider
    {
    }

    [RTTI.Serializable(0xE9570BDADB0491C5)]
    public class MsgGetEntityRepTransformProvider : MsgGetEntityLocationProvider
    {
    }

    [RTTI.Serializable(0x95007F34FEA7D7CA)]
    public class MsgGetEntityTransformProvider : MsgGetEntityLocationProvider
    {
    }

    [RTTI.Serializable(0x25A8F3208F7FAB34)]
    public class MsgGetExtraNodePosition : MsgBase
    {
    }

    [RTTI.Serializable(0xB3ED8B09FECF7870)]
    public class MsgGetExtraNodesAttackNodeCount : MsgBase
    {
    }

    [RTTI.Serializable(0x32C52C374E2708D8)]
    public class MsgGetHUD : MsgBase
    {
    }

    [RTTI.Serializable(0xD9D976F839A2147D)]
    public class MsgGetHUDName : MsgBase
    {
    }

    [RTTI.Serializable(0x42B080A50F5F9E0D)]
    public class MsgGetHUDTransparency : MsgBase
    {
    }

    [RTTI.Serializable(0x9B81EF9183768B14)]
    public class MsgGetLineExplosion : MsgBase
    {
    }

    [RTTI.Serializable(0x99D7DEC95C7DEA52)]
    public class MsgGetLootableItems : MsgBase
    {
    }

    [RTTI.Serializable(0x60C49F6D1FD37B12)]
    public class MsgGetMaxWaitingQueueSlots : MsgBase
    {
    }

    [RTTI.Serializable(0x5334F12D5F03304F)]
    public class MsgGetModelAbilities : MsgBase
    {
    }

    [RTTI.Serializable(0xCA10726585F5C0DA)]
    public class MsgGetMountPosition : MsgBase
    {
    }

    [RTTI.Serializable(0x97EDB21288D7175B)]
    public class MsgGetPushResponse : MsgBase
    {
    }

    [RTTI.Serializable(0x522B1E75A4E14EDC)]
    public class MsgGetQuest : MsgBase
    {
    }

    [RTTI.Serializable(0x2CBCBA9545FC38EA)]
    public class MsgGetUsability : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> User;
        [RTTI.Member(1, 0x20)] public CPtr<UseLocation> UseLocation;
        [RTTI.Member(2, 0x28)] public bool IsUsable;
    }

    [RTTI.Serializable(0xAAAB598D334D6789)]
    public class MsgGetUsabilityForUser : MsgBase
    {
    }

    [RTTI.Serializable(0xDFED0F4F3C5EF7DB)]
    public class MsgGetUseLocationByIndex : MsgBase
    {
    }

    [RTTI.Serializable(0xDFC9AB9955104E88)]
    public class MsgGetUseLocationBySectionName : MsgBase
    {
    }

    [RTTI.Serializable(0x125758E24F257D93)]
    public class MsgGetUseLocations : MsgBase
    {
    }

    [RTTI.Serializable(0xFF073EB4CFB53B06)]
    public class MsgGetUsePrecondition : MsgBase
    {
    }

    [RTTI.Serializable(0x8A49E16291F628F6)]
    public class MsgGetWaitingQueueLocation : MsgBase
    {
    }

    [RTTI.Serializable(0xA54254E811B5FCB4)]
    public class MsgGetXpLevel : MsgBase
    {
    }

    [RTTI.Serializable(0x975EF86FE903D517)]
    public class MsgGetZoomVisibilityLevel : MsgBase
    {
    }

    [RTTI.Serializable(0xC1DD2DB283D40CA8)]
    public class MsgGotPickedUp : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> User;
        [RTTI.Member(1, 0x20)] public CPtr<PickUpComponentBase> PickUpComponentBase;
    }

    [RTTI.Serializable(0x10AE4F6CAF4CCF88)]
    public class MsgGroupMemberDied : MsgBase
    {
    }

    [RTTI.Serializable(0xF35456808A89C177)]
    public class MsgHUDHidePopup : MsgBase
    {
    }

    [RTTI.Serializable(0x61D6074DD49C12CD)]
    public class MsgHUDShowNotification : MsgBase
    {
    }

    [RTTI.Serializable(0xB638AB7399E0C41D)]
    public class MsgHUDShowPopup : MsgHUDShowNotification
    {
    }

    [RTTI.Serializable(0x9D9A55C669688254)]
    public class MsgHUDUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x48953A8478120A7F)]
    public class MsgHackIsDisabled : MsgBase
    {
    }

    [RTTI.Serializable(0x10B8FDE6BB7819E0)]
    public class MsgHandleInput : MsgBase
    {
    }

    [RTTI.Serializable(0x18404AF0F536E26C)]
    public class MsgHeal : MsgBase
    {
    }

    [RTTI.Serializable(0x5216F5C53966225)]
    public class MsgHealthBucketRegenStarted : MsgBase
    {
    }

    [RTTI.Serializable(0x588C9BD802A800F)]
    public class MsgHitReactionTriggered : MsgBase
    {
    }

    [RTTI.Serializable(0x77D3C502F276271A)]
    public class MsgIncomingDelayedDamage : MsgBase
    {
        [RTTI.Member(0, 0x0)] public CPtr<Entity> Damager;
        [RTTI.Member(1, 0x0)] public CPtr<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(2, 0x18)] public float Delay;
        [RTTI.Member(3, 0x20)] public WorldPosition Origin;
        [RTTI.Member(4, 0x68)] public CPtr<AttackEventContext> AttackEvent;
    }

    [RTTI.Serializable(0xB5A29750053924A1)]
    public class MsgInit : MsgBase
    {
    }

    [RTTI.Serializable(0x57BB520DC9BFDA4E)]
    public class MsgInitMeshHierarchy : MsgBase
    {
    }

    [RTTI.Serializable(0xD7D25CF1512E86F6)]
    public class MsgInitModel : MsgBase
    {
    }

    [RTTI.Serializable(0xCB7A4E4358302D7B)]
    public class MsgInitMover : MsgBase
    {
    }

    [RTTI.Serializable(0x4BC94A18D86C3F43)]
    public class MsgInitSymbols : MsgBase
    {
    }

    [RTTI.Serializable(0x2BA908276DA9A979)]
    public class MsgInput : MsgBase
    {
    }

    [RTTI.Serializable(0x9927E6FB7F7E42EE)]
    public class MsgInstigatorFactionChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x1A160CFB9D02BA53)]
    public class MsgIntegerFactChanged : MsgFactChangedBase
    {
        [RTTI.Member(0, 0x28)] public CPtr<IntegerFact> Fact;
        [RTTI.Member(1, 0x30)] public int Value;
    }

    [RTTI.Serializable(0xE53FD3B6595D833A)]
    public class MsgInterruptGesture : MsgBase
    {
    }

    [RTTI.Serializable(0x944C9FA50CBF73CE)]
    public class MsgInventoryEntityActivated : MsgBase
    {
    }

    [RTTI.Serializable(0xBDD2B2915D3244EB)]
    public class MsgInventoryEntityDeactivated : MsgBase
    {
    }

    [RTTI.Serializable(0xB81084FB4E8EBB5D)]
    public class MsgInventoryFull : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xA9DA4D808C02B081)]
    public class MsgInventoryItemBase : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Item;
    }

    [RTTI.Serializable(0x713633B6556A455F)]
    public class MsgIsAimAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x3546AF366228DFF0)]
    public class MsgIsAllowedBase : MsgBase
    {
        [RTTI.Member(0, 0x18)] public bool Disallow;
    }

    [RTTI.Serializable(0xDFB28FCA27182C28)]
    public class MsgIsAllowedWithRequiredComponentBase : MsgBase
    {
        [RTTI.Member(0, 0x18)] public bool HasRequiredComponent;
        [RTTI.Member(1, 0x19)] public bool Disallow;
    }

    [RTTI.Serializable(0xBA84019A10178C85)]
    public class MsgIsAttackingAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xDB190867B369CE1F)]
    public class MsgIsBreakOutOfDismountRequested : MsgBase
    {
    }

    [RTTI.Serializable(0x5121064626D0B79E)]
    public class MsgIsCombatAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x324E66F5C756DEE0)]
    public class MsgIsContextualActionAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x3779094D888AF476)]
    public class MsgIsContextualSpeechAllowed : MsgIsAllowedWithRequiredComponentBase
    {
    }

    [RTTI.Serializable(0xD2ABC53370BDFF59)]
    public class MsgIsControllerMovementAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xAB63950BE52AE80E)]
    public class MsgIsDisabled : MsgBase
    {
    }

    [RTTI.Serializable(0xECAE7E788FE14DCE)]
    public class MsgIsDiveRollAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x8303474E7BAFF3B9)]
    public class MsgIsEntityDataStreamingIn : MsgBase
    {
    }

    [RTTI.Serializable(0xAA1C1518F5E7C64A)]
    public class MsgIsEntityLootable : MsgBase
    {
        [RTTI.Member(0, 0x18)] public bool IsLootable;
        [RTTI.Member(1, 0x19)] public bool HasRemainingLoot;
    }

    [RTTI.Serializable(0x2F1806A5FFCB4E73)]
    public class MsgIsFocusAllowed : MsgIsAllowedWithRequiredComponentBase
    {
    }

    [RTTI.Serializable(0xF0D1F5915E913006)]
    public class MsgIsInventoryActionDisabled : MsgBase
    {
    }

    [RTTI.Serializable(0x9640EE9E59D036FF)]
    public class MsgIsInventoryItemSwitchAllowed : MsgIsAllowedBase
    {
        [RTTI.Member(0, 0x20)] public CPtr<Entity> Item;
    }

    [RTTI.Serializable(0x393E7A778BE39AB6)]
    public class MsgIsJumpAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x98729FAD888C8085)]
    public class MsgIsLookIKAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x516F598E504D42B2)]
    public class MsgIsMeleeAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x32DF50A18D4629CB)]
    public class MsgIsMountingAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x5269114061B70590)]
    public class MsgIsOperating : MsgBase
    {
    }

    [RTTI.Serializable(0x1F590F6A415249DE)]
    public class MsgIsPerkAbilityAvailable : MsgBase
    {
    }

    [RTTI.Serializable(0xDEBF39D20F6BD45C)]
    public class MsgIsPerkLevelUnlocked : MsgBase
    {
    }

    [RTTI.Serializable(0x528E49DB222C6A6)]
    public class MsgIsPushResponseAllowed : MsgBase
    {
    }

    [RTTI.Serializable(0xCE604F188DF7447D)]
    public class MsgIsPushResponseTriggered : MsgBase
    {
    }

    [RTTI.Serializable(0xDEF8687C394AC45D)]
    public class MsgIsReloadAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x55360FBBA0D510E2)]
    public class MsgIsRotationWhileClaimingUseLocationAllowed : MsgIsAllowedWithRequiredComponentBase
    {
    }

    [RTTI.Serializable(0xFABCB6260643D0C3)]
    public class MsgIsSprintAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xD0BB3D6600AB1441)]
    public class MsgIsStanceChangeAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x313303701FE7B146)]
    public class MsgIsUseLocationClaimAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0x785FF78C69E6A8FB)]
    public class MsgIsVaultingAllowed : MsgIsAllowedBase
    {
    }

    [RTTI.Serializable(0xD71CF502B4DDBC8E)]
    public class MsgItemAddedToInventory : MsgSceneInventoryItemBase
    {
        [RTTI.Member(0, 0x50)] public int Amount;
        [RTTI.Member(1, 0x54)] public EInventoryItemAddType Type;
        [RTTI.Member(2, 0x55)] public bool Silent;
    }

    [RTTI.Serializable(0xF318692250EE14B9)]
    public class MsgItemFirstTimeInInventory : MsgBase
    {
    }

    [RTTI.Serializable(0x1AA7834608986F24)]
    public class MsgItemRemovedFromInventory : MsgSceneInventoryItemBase
    {
        [RTTI.Member(0, 0x50)] public int RemovedAmount;
        [RTTI.Member(1, 0x54)] public int RemainingAmount;
        [RTTI.Member(2, 0x58)] public EInventoryItemRemoveType Type;
        [RTTI.Member(3, 0x59)] public bool Silent;
        [RTTI.Member(4, 0x5A)] public bool WasInventoryFull;
    }

    [RTTI.Serializable(0xAA91C4BAE14B8FE7)]
    public class MsgItemScavenged : MsgItemTransferred
    {
    }

    [RTTI.Serializable(0x8466B323EAF8A166)]
    public class MsgItemTransferred : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> Source;
        [RTTI.Member(1, 0x20)] public CPtr<Entity> Target;
        [RTTI.Member(2, 0x28)] public CPtr<Entity> Item;
        [RTTI.Member(3, 0x30)] public int Amount;
    }

    [RTTI.Serializable(0x22DC62B70916FD10)]
    public class MsgJoystick : MsgInput
    {
    }

    [RTTI.Serializable(0x2DCD9EE9D9CD572A)]
    public class MsgKeyboard : MsgInput
    {
    }

    [RTTI.Serializable(0x9C35ECC67BE8494E)]
    public class MsgKnockedDown : MsgBase
    {
    }

    [RTTI.Serializable(0x83F6C1BAD09CA70F)]
    public class MsgLethalDamageApplied : MsgBase
    {
    }

    [RTTI.Serializable(0xAFEC69A4E0A21683)]
    public class MsgLevelChanged : MsgBase
    {
        [RTTI.Member(0, 0x18)] public int Level;
    }

    [RTTI.Serializable(0x7D2E3ED0AACDB4AF)]
    public class MsgLevelUp : MsgBase
    {
        [RTTI.Member(0, 0x18)] public int Level;
    }

    [RTTI.Serializable(0x41A69433D666C15D)]
    public class MsgLoseHealthSegment : MsgBase
    {
    }

    [RTTI.Serializable(0xF2DCB17EB45264E9)]
    public class MsgMarkerCanFastTravel : MsgBase
    {
    }

    [RTTI.Serializable(0xCB0E95AE998759CA)]
    public class MsgMarkerGetMappedInterior : MsgBase
    {
    }

    [RTTI.Serializable(0xAC2D83F8B352D098)]
    public class MsgMarkerOnStateChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x300D32A4634E0672)]
    public class MsgMeleeDamageHitEffects : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x20)] public WorldPosition HitPosition;
        [RTTI.Member(2, 0x40)] public Vec3 HitDirection;
        [RTTI.Member(3, 0x50)] public Vec3 HitNormal;
        [RTTI.Member(4, 0x60)] public int HitMaterialType;
        [RTTI.Member(5, 0x64)] public float DamageAmount;
        [RTTI.Member(6, 0x68)] public CPtr<DamageTypeResource> DamageTypeResource;
    }

    [RTTI.Serializable(0x7200A3770951DC92)]
    public class MsgMeleeDamageHitResult : MsgBase
    {
    }

    [RTTI.Serializable(0x888631FB183C4384)]
    public class MsgModelChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xF88C51545B2E3B43)]
    public class MsgModelPartsChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x7657E742266548C1)]
    public class MsgModelPartsWillBeChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x792FF60A690910EC)]
    public class MsgModelResourceChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x463FF740BAD55B8F)]
    public class MsgModificationSocketed : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xD67FCCBB428EB45D)]
    public class MsgModifyActiveViews : MsgBase
    {
    }

    [RTTI.Serializable(0xB9E12F2644975AF)]
    public class MsgModifyAnimatedPose : MsgBase
    {
    }

    [RTTI.Serializable(0x9E13971BFAF6947)]
    public class MsgModifyDamage : MsgBase
    {
    }

    [RTTI.Serializable(0x407F55476654CC21)]
    public class MsgModifyDamageFlags : MsgBase
    {
        [RTTI.Member(0, 0x18)] public EDamageFlagsGameExported DamageFlags;
    }

    [RTTI.Serializable(0xA9DF8F8DD9F2433C)]
    public class MsgModifyHumanoidMovement : MsgBase
    {
        [RTTI.Member(0, 0x20)] public Vec3 Movement;
        [RTTI.Member(1, 0x30)] public float TurnSpeed;
        [RTTI.Member(2, 0x34)] public bool ResetVerticalVelocity;
        [RTTI.Member(3, 0x38)] public CPtr<Humanoid> Humanoid;
        [RTTI.Member(4, 0x40)] public float DeltaTime;
    }

    [RTTI.Serializable(0x89FBA3266DE7EB40)]
    public class MsgModifyHumanoidMovementSpace : MsgBase
    {
    }

    [RTTI.Serializable(0xFDE6DEFB901C5A80)]
    public class MsgModifyLookAngleLimits : MsgBase
    {
    }

    [RTTI.Serializable(0x2516822FFBF4D6CC)]
    public class MsgModifyLookAngles : MsgBase
    {
    }

    [RTTI.Serializable(0x14A199CB5935A70B)]
    public class MsgModifyMaxLocalMovementSpeed : MsgBase
    {
        [RTTI.Member(0, 0x18)] public float ForwardSpeed;
        [RTTI.Member(1, 0x1C)] public float SprintSpeed;
        [RTTI.Member(2, 0x20)] public float BackwardSpeed;
        [RTTI.Member(3, 0x24)] public float StrafeSpeed;
        [RTTI.Member(4, 0x28)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0xB4465B461E8B3BCD)]
    public class MsgModifyModelLOD : MsgBase
    {
    }

    [RTTI.Serializable(0x7209EBD89930D33E)]
    public class MsgModifyModelRepLOD : MsgBase
    {
    }

    [RTTI.Serializable(0xA693C7B91D0855B)]
    public class MsgModifyOrientationSpeed : MsgBase
    {
        [RTTI.Member(0, 0x18)] public float HeadingSpeed;
        [RTTI.Member(1, 0x1C)] public float PitchSpeed;
        [RTTI.Member(2, 0x20)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x62787B3B643EE45A)]
    public class MsgModifyReloadSpeed : MsgBase
    {
        [RTTI.Member(0, 0x18)] public float ReloadSpeedModifier;
    }

    [RTTI.Serializable(0x7E22E7687DF19452)]
    public class MsgMountBase : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Mounter;
    }

    [RTTI.Serializable(0x47F4FE9D9575A372)]
    public class MsgMountBlockedFromArea : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> Rider;
        [RTTI.Member(1, 0x20)] public CPtr<Entity> Mount;
    }

    [RTTI.Serializable(0x6CC824042DB23A97)]
    public class MsgMountIsSlowingDownForSlope : MsgBase
    {
        [RTTI.Member(0, 0x18)] public int Posture;
    }

    [RTTI.Serializable(0x76E9F526A1DF33BB)]
    public class MsgMounterBase : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> MountableObject;
    }

    [RTTI.Serializable(0x2229E58CDDCEFE6B)]
    public class MsgMounterDetachedDuringDismount : MsgBase
    {
    }

    [RTTI.Serializable(0xE19C2407675228F6)]
    public class MsgMounterStartDismount : MsgMounterBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x7E6709793E42FDD)]
    public class MsgMounterStartMount : MsgMounterBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0xC5137E413C76815)]
    public class MsgMounterStopDismount : MsgMounterBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x9E8A880D28D4765E)]
    public class MsgMounterStopMount : MsgMounterBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0xAAD71A8B38875F3B)]
    public class MsgMouse : MsgInput
    {
    }

    [RTTI.Serializable(0x76A3933C8B5CE523)]
    public class MsgMoverArrived : MsgSceneEntityBase
    {
    }

    [RTTI.Serializable(0x3765F49072024416)]
    public class MsgNoAmmoWarning : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<AmmoResource> AmmoResource;
        [RTTI.Member(1, 0x20)] public bool CanCraftAmmo;
    }

    [RTTI.Serializable(0xF44A22959B80E1E6)]
    public class MsgObjectChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x1F8F483E90175F05)]
    public class MsgOnCraft : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<CraftingRecipe> Recipe;
        [RTTI.Member(1, 0x20)] public int Amount;
        [RTTI.Member(2, 0x24)] public bool Succeeded;
    }

    [RTTI.Serializable(0xD48E1814D2094F00)]
    public class MsgOnSentenceGroupFinished : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x38)] public UUIDRef<SentenceGroupResource> SentenceGroup;
        [RTTI.Member(1, 0x48)] public bool Aborted;
    }

    [RTTI.Serializable(0xAC5ADBD39532BCA0)]
    public class MsgOutsideBroadPhase : MsgBase
    {
    }

    [RTTI.Serializable(0x1CB4533DEE0EAE4A)]
    public class MsgOverrideObserverTransform : MsgBase
    {
    }

    [RTTI.Serializable(0x406C4A6379B25200)]
    public class MsgOverridePose : MsgBase
    {
    }

    [RTTI.Serializable(0xAAEC8FB928C6AFBD)]
    public class MsgPBDReset : MsgBase
    {
    }

    [RTTI.Serializable(0xE6F18D5E007CBF15)]
    public class MsgParentChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xE986F1D2ED4EAFD7)]
    public class MsgPatrolPathTagged : MsgBase
    {
        [RTTI.Member(0, 0x18)] public bool IsTagged;
    }

    [RTTI.Serializable(0x21A375B05A52D864)]
    public class MsgPerkLevelUnlocked : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<PerkLevel> Perk;
    }

    [RTTI.Serializable(0xDE4799796A4FA499)]
    public class MsgPickedUp : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0x22FA09B2AB26DE87)]
    public class MsgPickedUpEntity : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> PickedUpEntity;
        [RTTI.Member(1, 0x18)] public CPtr<PickUpComponentBase> PickUpComponentBase;
    }

    [RTTI.Serializable(0x1D5A31F9203755BA)]
    public class MsgPinDownStarted : MsgBase
    {
    }

    [RTTI.Serializable(0xDB214A51F4AC85C1)]
    public class MsgPlayerEquippedWithInventory : MsgBase
    {
    }

    [RTTI.Serializable(0x65148D07BBC7BCBC)]
    public class MsgPlayerFactionChanged : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Player> Player;
        [RTTI.Member(1, 0x20)] public CPtr<AIFaction> OldFaction;
    }

    [RTTI.Serializable(0xDDAF08476D21607F)]
    public class MsgPlayerKilled : MsgBase
    {
    }

    [RTTI.Serializable(0xCBD1C6E7BFD1F820)]
    public class MsgPlayerSpawned : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> SpawnedEntity;
        [RTTI.Member(1, 0x20)] public int Wave;
        [RTTI.Member(2, 0x24)] public bool IsFirstSpawn;
    }

    [RTTI.Serializable(0xE8E2DB70C1C814BA)]
    public class MsgPostAnimationManagerUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x54F78564D7E5463)]
    public class MsgPostLoad : MsgBase
    {
    }

    [RTTI.Serializable(0xCE2550815148A3A8)]
    public class MsgPostSpawnHumanoid : MsgBase
    {
    }

    [RTTI.Serializable(0xD2B786E14BDF3C0D)]
    public class MsgPrepareForRemoval : MsgBase
    {
    }

    [RTTI.Serializable(0x13A90BCDA8FAEEF6)]
    public class MsgProjectileExploded : MsgBase
    {
        [RTTI.Member(0, 0x18)] public WorldTransform WorldTransform;
    }

    [RTTI.Serializable(0x6C94E76A85CCE1B5)]
    public class MsgPropertiesUpdated : MsgBase
    {
    }

    [RTTI.Serializable(0x1BFD5F7314C32A76)]
    public class MsgQueryTentativeQueueSlot : MsgBase
    {
    }

    [RTTI.Serializable(0x3553C6F86BF30ABC)]
    public class MsgQuestObjectiveUpdated : MsgBase
    {
    }

    [RTTI.Serializable(0x35256F82321BB6CF)]
    public class MsgQuestProgress : MsgBase
    {
    }

    [RTTI.Serializable(0x4FC1B3986F163F20)]
    public class MsgQuestRewound : MsgBase
    {
    }

    [RTTI.Serializable(0x3CDB4C5CC4B433EC)]
    public class MsgReadBinary : RTTIObject
    {
    }

    [RTTI.Serializable(0xE13A43E4AA4867BD)]
    public class MsgRemoveCameraModifier : MsgBase
    {
    }

    [RTTI.Serializable(0x1B98A5D178BC1959)]
    public class MsgRemoveComponent : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<EntityComponent> Component;
    }

    [RTTI.Serializable(0xC3B7B6D9A4A6BA05)]
    public class MsgRemoveEntityGroupMember : MsgBase
    {
    }

    [RTTI.Serializable(0x665241C537B3BD23)]
    public class MsgRemovedFromInventory : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xF1804F5CED97FEBB)]
    public class MsgRequestGesture : MsgBase
    {
    }

    [RTTI.Serializable(0x3B7EF8224DE12B33)]
    public class MsgReserveQueueSlot : MsgBase
    {
    }

    [RTTI.Serializable(0x33ECF508278A79A3)]
    public class MsgResetAimAssist : MsgBase
    {
    }

    [RTTI.Serializable(0x2DA827AA533256F4)]
    public class MsgResetAimMagnets : MsgBase
    {
    }

    [RTTI.Serializable(0x3675DB2EF370EE37)]
    public class MsgResetPlayerCamera : MsgBase
    {
    }

    [RTTI.Serializable(0x9D708CFD2CABC16C)]
    public class MsgResolveBoolProperty : MsgResolvePropertyBase
    {
    }

    [RTTI.Serializable(0x4AB0C75112803D85)]
    public class MsgResolveCoreObject : MsgResolvePropertyBase
    {
    }

    [RTTI.Serializable(0x7775E0A0A5B61BBF)]
    public class MsgResolveFloatProperty : MsgResolvePropertyBase
    {
    }

    [RTTI.Serializable(0x53A36D14C3B912D5)]
    public class MsgResolveIntProperty : MsgResolvePropertyBase
    {
    }

    [RTTI.Serializable(0x10A6787ECE247821)]
    public class MsgResolvePropertyBase : MsgBase
    {
    }

    [RTTI.Serializable(0x429D2C7C05504D73)]
    public class MsgResolveStringProperty : MsgResolvePropertyBase
    {
    }

    [RTTI.Serializable(0x249C836A4924A6D8)]
    public class MsgResolveVec3Property : MsgResolvePropertyBase
    {
    }

    [RTTI.Serializable(0x3AD26EEE3F4557AB)]
    public class MsgResolveWorldPositionProperty : MsgResolvePropertyBase
    {
    }

    [RTTI.Serializable(0x7DF0440A303C0FE4)]
    public class MsgRestockMerchantCollection : MsgBase
    {
    }

    [RTTI.Serializable(0x7C23579638502E76)]
    public class MsgRopeAnchorAttached : MsgBase
    {
    }

    [RTTI.Serializable(0xA74DB5151F29B9A)]
    public class MsgRopeAnchorBase : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> Anchor;
    }

    [RTTI.Serializable(0x5BB4A1772FD0434D)]
    public class MsgRopeAnchorBreakFreeStart : MsgRopeAnchorBase
    {
        [RTTI.Member(0, 0x20)] public bool SingleShot;
        [RTTI.Member(1, 0x21)] public bool WillBePinned;
    }

    [RTTI.Serializable(0x315F0AE459CE596B)]
    public class MsgRopeAnchorBreakFreeStop : MsgBase
    {
    }

    [RTTI.Serializable(0x524C7F50366818B3)]
    public class MsgRopeAnchorBreakImminent : MsgBase
    {
    }

    [RTTI.Serializable(0xD92F0E1278F5AF50)]
    public class MsgRopeAnchorConnected : MsgBase
    {
        [RTTI.Member(0, 0x20)] public Vec3 Direction;
        [RTTI.Member(1, 0x30)] public float Length;
        [RTTI.Member(2, 0x34)] public bool SuccessfulConnection;
    }

    [RTTI.Serializable(0x954A0FAE92A8A86D)]
    public class MsgRopeAnchorInvalid : MsgBase
    {
    }

    [RTTI.Serializable(0x3E15ED83C98983EA)]
    public class MsgRopeAnchorMissed : MsgBase
    {
        [RTTI.Member(0, 0x18)] public bool FiredAtTarget;
    }

    [RTTI.Serializable(0x7CAC3D9861601EB7)]
    public class MsgRopeAnchorPinned : MsgRopeAnchorBase
    {
        [RTTI.Member(0, 0x20)] public float PinnedTimeRemaining;
    }

    [RTTI.Serializable(0xFC8874C0ABEBF27B)]
    public class MsgRopeAnchorPullback : MsgBase
    {
    }

    [RTTI.Serializable(0xB527550968BBB50D)]
    public class MsgRopeBroken : MsgBase
    {
    }

    [RTTI.Serializable(0x7719E1D63D9A14E9)]
    public class MsgRopeConnected : MsgBase
    {
    }

    [RTTI.Serializable(0x712A8CB5C9382A7)]
    public class MsgRopePathCreated : MsgBase
    {
    }

    [RTTI.Serializable(0x49F8D933A1F4E24)]
    public class MsgRoundEnded : MsgBase
    {
        [RTTI.Member(0, 0x18)] public int State;
    }

    [RTTI.Serializable(0x8681CB0E7F826449)]
    public class MsgSayContextualSpeech : MsgBase
    {
    }

    [RTTI.Serializable(0x61DBB3A104830EAB)]
    public class MsgSayContextualSpeechResponse : MsgBase
    {
    }

    [RTTI.Serializable(0x7DA1D323EE599A32)]
    public class MsgScene : MsgBase
    {
    }

    [RTTI.Serializable(0x88C7D90E31AF6FD9)]
    public class MsgSceneCustom : MsgScene
    {
        [RTTI.Member(0, 0x20)] public CPtr<SceneInstance> Sender;
        [RTTI.Member(1, 0x28)] public String ID;
    }

    [RTTI.Serializable(0x378F76BE63A6F26)]
    public class MsgSceneDoneSpawning : MsgScene
    {
    }

    [RTTI.Serializable(0xC535915197B153C9)]
    public class MsgSceneEnterState : MsgStateMachineEnterState
    {
    }

    [RTTI.Serializable(0xA70297EB71A83824)]
    public class MsgSceneEntityBase : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x48EF3253C4A84DAC)]
    public class MsgSceneEntitySpotted : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> SpotterEntity;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> SpottedEntity;
    }

    [RTTI.Serializable(0xA7F3CEAE06FA1CF5)]
    public class MsgSceneEntityUpdate : MsgSceneUpdate
    {
    }

    [RTTI.Serializable(0xE71F918DDF7815C)]
    public class MsgSceneInventoryItemBase : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Item;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x34E07207FCECE3CA)]
    public class MsgSceneIsStartableChanged : MsgBase
    {
    }

    [RTTI.Serializable(0xDCBCDF849709F429)]
    public class MsgSceneLeaveState : MsgStateMachineLeaveState
    {
    }

    [RTTI.Serializable(0x26AF834B06AF54EB)]
    public class MsgSceneMoved : MsgBase
    {
    }

    [RTTI.Serializable(0x15BCC9E8DF6466FA)]
    public class MsgSceneUpdate : MsgScene
    {
        [RTTI.Member(0, 0x20, true)] public float DeltaTime;
    }

    [RTTI.Serializable(0xF97A34DD80E32FD0)]
    public class MsgSelectedFocusModelChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x67BE2C936D5340F6)]
    public class MsgSequenceMessageStart : MsgScene
    {
        [RTTI.Member(0, 0x20)] public String Message;
    }

    [RTTI.Serializable(0x349D3224D158A234)]
    public class MsgSequenceMessageStop : MsgScene
    {
        [RTTI.Member(0, 0x20)] public String Message;
    }

    [RTTI.Serializable(0xFD892B94E3BCBB52)]
    public class MsgSequenceNetworkFinished : MsgBase
    {
    }

    [RTTI.Serializable(0xFCBF2979C393E7C4)]
    public class MsgSequenceNetworkNodeBase : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<SequenceNetworkNodeInstance> Node;
    }

    [RTTI.Serializable(0x322050FBA4AAC8CD)]
    public class MsgSequenceNetworkNodeFinished : MsgBase
    {
    }

    [RTTI.Serializable(0xFEAD28E0AC8821A9)]
    public class MsgSequenceNetworkNodeReached : MsgBase
    {
    }

    [RTTI.Serializable(0xE87C08D93D7FC3DD)]
    public class MsgSequenceNetworkNodeStarted : MsgBase
    {
    }

    [RTTI.Serializable(0x18DDB360C201AF42)]
    public class MsgSequenceNetworkStarted : MsgBase
    {
    }

    [RTTI.Serializable(0x795E4036AF2243A8)]
    public class MsgSequenceNetworkUseLocationActivated : MsgSequenceNetworkNodeBase
    {
    }

    [RTTI.Serializable(0x41B93B91147CDAF9)]
    public class MsgSequenceNetworkUseLocationDeactivated : MsgSequenceNetworkNodeBase
    {
    }

    [RTTI.Serializable(0xCE5890B926D9206)]
    public class MsgSetCameraVisibility : MsgBase
    {
    }

    [RTTI.Serializable(0x225F2C34191A3C39)]
    public class MsgSetFactorModelUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0x17E8FB4F3004461C)]
    public class MsgSetFloatValue : MsgBase
    {
    }

    [RTTI.Serializable(0x13AE02C3E9EDCEB4)]
    public class MsgShadowCastingChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x23DE7C14C7037A12)]
    public class MsgShieldActivated : MsgBase
    {
    }

    [RTTI.Serializable(0x7D1264F979F48479)]
    public class MsgShieldDeactivated : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<DamageTypeResource> LastReceivedDamageTypeResource;
    }

    [RTTI.Serializable(0x97D07C33B230EC82)]
    public class MsgShowPlayerNotification : MsgBase
    {
    }

    [RTTI.Serializable(0x4FA9CC1A73319FF)]
    public class MsgShowSplashScreen : MsgBase
    {
    }

    [RTTI.Serializable(0xB4ECBCFC84E1590E)]
    public class MsgSpawnedWave : MsgBase
    {
    }

    [RTTI.Serializable(0x286ECC9D16358CAF)]
    public class MsgSpeedModifierRemoved : MsgBase
    {
    }

    [RTTI.Serializable(0x1373FD09784B629F)]
    public class MsgSpotAndMarkDetectedEntity : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> DetectedEntity;
        [RTTI.Member(1, 0x20)] public CPtr<SpottableComponent> DetectedSpottableComponent;
        [RTTI.Member(2, 0x28)] public CPtr<Entity> SpotterEntity;
        [RTTI.Member(3, 0x30)] public float MaxDistance;
    }

    [RTTI.Serializable(0xB87680435832ADD)]
    public class MsgStaggered : MsgBase
    {
    }

    [RTTI.Serializable(0x3EDA925BBE5F51)]
    public class MsgStartAttach : MsgBase
    {
    }

    [RTTI.Serializable(0xF6A2317CF0522F0F)]
    public class MsgStartContextualEmotion : MsgBase
    {
    }

    [RTTI.Serializable(0xEA688C756C55623A)]
    public class MsgStartDetach : MsgBase
    {
    }

    [RTTI.Serializable(0x89AB7C2E68317B24)]
    public class MsgStartDismount : MsgMountBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x5F431749E8457A62)]
    public class MsgStartMount : MsgMountBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0xF855AAB0F5875A4)]
    public class MsgStartUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0xE14EA597D3B1F97D)]
    public class MsgStartedHealthRegeneration : MsgBase
    {
    }

    [RTTI.Serializable(0x83C312A472E045F9)]
    public class MsgStartedLooting : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> LootingEntity;
        [RTTI.Member(1, 0x50)] public ELootItemRarity ItemRarity;
    }

    [RTTI.Serializable(0x6EB602ED6249034E)]
    public class MsgStartedStow : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xF492780683734DB8)]
    public class MsgStartedWield : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0x90779E03E911C05B)]
    public class MsgStateMachineEnterState : MsgBase
    {
    }

    [RTTI.Serializable(0x5D16F32DA793259C)]
    public class MsgStateMachineLeaveState : MsgBase
    {
    }

    [RTTI.Serializable(0xAFF9A3CCE03B9A8A)]
    public class MsgStick : MsgBase
    {
        [RTTI.Member(0, 0x20)] public CPtr<Entity> ContactEntity;
        [RTTI.Member(1, 0x28)] public MaterialType MaterialType;
        [RTTI.Member(2, 0x30)] public WorldTransform WorldTransform;
        [RTTI.Member(3, 0x70)] public Vec3 Normal;
    }

    [RTTI.Serializable(0x4C9E09508F14D161)]
    public class MsgStickIgnored : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> IgnoredEntity;
        [RTTI.Member(1, 0x20)] public MaterialType MaterialType;
    }

    [RTTI.Serializable(0xA30F2A3DB218851F)]
    public class MsgStopBlending : MsgBase
    {
    }

    [RTTI.Serializable(0xF9142C3FB40438C5)]
    public class MsgStopDismount : MsgMountBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<DismountMode> DismountMode;
    }

    [RTTI.Serializable(0x65186560939BEB6A)]
    public class MsgStopMount : MsgMountBase
    {
        [RTTI.Member(0, 0x50, true)] public CPtr<MountMode> MountMode;
    }

    [RTTI.Serializable(0x152C7EE2518DC6A8)]
    public class MsgStopPlayerTool : MsgBase
    {
    }

    [RTTI.Serializable(0xA7DAB4890481168)]
    public class MsgStoppedHealthRegeneration : MsgBase
    {
        [RTTI.Member(0, 0x18)] public bool FinishedRegeneration;
    }

    [RTTI.Serializable(0xF7BD2D2D296A98AA)]
    public class MsgStunnedStatus : MsgBase
    {
    }

    [RTTI.Serializable(0x95F72BC93EF7C09A)]
    public class MsgTagged : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Entity;
        [RTTI.Member(1, 0x30)] public bool IsTagged;
        [RTTI.Member(2, 0x31)] public bool IsTaggedByFocusMode;
    }

    [RTTI.Serializable(0x58AFA99D239993EF)]
    public class MsgThreat : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> Observer;
    }

    [RTTI.Serializable(0xB72040AFCD3448FB)]
    public class MsgThreatIdentified : MsgThreat
    {
    }

    [RTTI.Serializable(0xF620E29B358F3EA2)]
    public class MsgThreatSuspected : MsgThreat
    {
    }

    [RTTI.Serializable(0x8AA94A675CD40513)]
    public class MsgTrigger : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x38)] public Ref<CollisionTrigger> Trigger;
    }

    [RTTI.Serializable(0xC8D3794EAF57AFA7)]
    public class MsgTriggerCustomEvent : MsgBase
    {
        [RTTI.Member(0, 0x18)] public String Identifier;
    }

    [RTTI.Serializable(0xAC8765ADF908BE10)]
    public class MsgTriggerEntered : MsgTrigger
    {
    }

    [RTTI.Serializable(0x6FCEB8C61CF01888)]
    public class MsgTriggerExited : MsgTrigger
    {
    }

    [RTTI.Serializable(0x17680B1C1B9E9F0D)]
    public class MsgTriggerExposedAction : MsgTriggerCustomEvent
    {
    }

    [RTTI.Serializable(0xAC890C024B46037B)]
    public class MsgTriggerPerkAbility : MsgBase
    {
    }

    [RTTI.Serializable(0xAC23227A0E93D035)]
    public class MsgTriggerRemoved : MsgTrigger
    {
    }

    [RTTI.Serializable(0x347993D0DD561509)]
    public class MsgUnequipped : MsgInventoryItemBase
    {
    }

    [RTTI.Serializable(0xA9E5E3C988332AE4)]
    public class MsgUnstick : MsgBase
    {
    }

    [RTTI.Serializable(0xBB87B633BCE338A2)]
    public class MsgUpdate : MsgBase
    {
    }

    [RTTI.Serializable(0xAB2A0F454C07685B)]
    public class MsgUpdateAINodeHelpers : MsgBase
    {
    }

    [RTTI.Serializable(0x5AB5B225D34B556D)]
    public class MsgUpdateAimAssist : MsgBase
    {
    }

    [RTTI.Serializable(0x1E21DB0A3DD1C438)]
    public class MsgUpdateAimMagnets : MsgBase
    {
    }

    [RTTI.Serializable(0xB877FF349FCB4F17)]
    public class MsgUpdateBaseTransform : MsgBase
    {
    }

    [RTTI.Serializable(0xB97231CEA47BE46F)]
    public class MsgUpdateBlending : MsgBase
    {
    }

    [RTTI.Serializable(0xAC1639A0DFC50B7F)]
    public class MsgUpdateGestureTarget : MsgBase
    {
    }

    [RTTI.Serializable(0x295A043D8F46EAD9)]
    public class MsgUpdateMeshHierarchy : MsgBase
    {
    }

    [RTTI.Serializable(0xDAAE7D9AE96C167C)]
    public class MsgUse : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> User;
        [RTTI.Member(1, 0x29)] public bool IsUsed;
    }

    [RTTI.Serializable(0xD46B921A60225940)]
    public class MsgUseAttemptFailed : MsgBase
    {
    }

    [RTTI.Serializable(0x43B79DF649806F57)]
    public class MsgUseCancelled : MsgBase
    {
    }

    [RTTI.Serializable(0x80867CE632211724)]
    public class MsgUseHealthBucket : MsgBase
    {
    }

    [RTTI.Serializable(0x42E94DB0B904E918)]
    public class MsgUseHealthPack : MsgBase
    {
    }

    [RTTI.Serializable(0xE01E477B9366CD82)]
    public class MsgUseInventoryItem : MsgBase
    {
    }

    [RTTI.Serializable(0xD9B5CC472BD8B0EC)]
    public class MsgUseLocationClaimed : MsgSceneEntityBase
    {
        [RTTI.Member(0, 0x0)] public CPtr<Entity> User;
    }

    [RTTI.Serializable(0x96A09B4328EFA00D)]
    public class MsgUseLocationClaimedReleased : MsgBase
    {
    }

    [RTTI.Serializable(0x84DAB5BD3AC23F96)]
    public class MsgUseLocationOwnershipFailed : MsgBase
    {
    }

    [RTTI.Serializable(0x9299AF7A845629EF)]
    public class MsgUseLocationReleaseClaim : MsgBase
    {
    }

    [RTTI.Serializable(0x2560736137EFC18C)]
    public class MsgUsePlayerTool : MsgBase
    {
    }

    [RTTI.Serializable(0x1593F1B87BC90466)]
    public class MsgUseSmartObjectBase : MsgScene
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> SmartObject;
        [RTTI.Member(1, 0x0, true)] public CPtr<Entity> User;
    }

    [RTTI.Serializable(0xCAA76C6F772923C8)]
    public class MsgUsedEntity : MsgBase
    {
        [RTTI.Member(0, 0x0, true)] public CPtr<Entity> UsedEntity;
    }

    [RTTI.Serializable(0x7975E373FCCAF1DB)]
    public class MsgUserEndUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0x6599990BD59F5847)]
    public class MsgUserStartUseSmartObject : MsgUseSmartObjectBase
    {
    }

    [RTTI.Serializable(0x3C3DE295F5479EA2)]
    public class MsgVisibilityChanged : MsgBase
    {
    }

    [RTTI.Serializable(0x341D6BD3DF3FFCFD)]
    public class MsgWeaponChargeAborted : MsgWeaponModeBase
    {
    }

    [RTTI.Serializable(0xA14A34E78BF04287)]
    public class MsgWeaponFired : MsgBase
    {
        [RTTI.Member(0, 0x18)] public CPtr<Entity> Weapon;
        [RTTI.Member(1, 0x20)] public bool Silenced;
    }

    [RTTI.Serializable(0x796CBA37A04344CF)]
    public class MsgWeaponModeBase : MsgBase
    {
    }

    [RTTI.Serializable(0x905B9148B8FB68A5)]
    public class MsgXpChange : MsgBase
    {
    }

    [RTTI.Serializable(0x88452E9E6ECC11AA)]
    public class MsgZoomIndexUpdated : MsgBase
    {
        [RTTI.Member(0, 0x18)] public int CurrentZoomIndex;
        [RTTI.Member(1, 0x1C)] public int PreviousZoomIndex;
    }

    [RTTI.Serializable(0x20D06AAD59600257)]
    public class MultiAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<CPtr<EntityAction>> Actions;
    }

    [RTTI.Serializable(0x8B6BFAEAEC9A86D7)]
    public class MultiBlendedMeshInstance : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
        [RTTI.Member(1, 0xC8, "General")] public Ref<MultiBlendedMeshResource> Resource;
    }

    [RTTI.Serializable(0x4574FA6543DB1BF)]
    public class MultiBlendedMeshResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<BlendedMeshEntry> BlendedMeshes;
    }

    [RTTI.Serializable(0x1E5B9ADDE8F1FD9B)]
    public class MultiMeshActorResource : ModelActorResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public Ref<SkinnedModelResource> SkinnedModelResource;
    }

    [RTTI.Serializable(0xB57FDC03AEE67814)]
    public class MultiMeshAnimationEventResource : FullBodyAnimationEventResourceBase
    {
        [RTTI.Member(0, 0x58, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
    }

    [RTTI.Serializable(0x6174587B926EDAD5)]
    public class MultiMeshResource : MeshResourceBase
    {
        [RTTI.Member(0, 0x80, "Mesh")] public Array<MultiMeshResourcePart> Parts;
    }

    [RTTI.Serializable(0x467B9AC953B5146A)]
    public class MultiMeshResourcePart
    {
        [RTTI.Member(0, 0x0)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x8)] public WorldTransform Transform;
    }

    [RTTI.Serializable(0x6635F9C24240C5B2)]
    public class MultiSpawnpoint : SpawnpointBase
    {
        [RTTI.Member(0, 0x160, "Item")] public int Amount;
    }

    [RTTI.Serializable(0x736A0CB40CCBCFBF)]
    public class MurmurHashValue
    {
        [RTTI.Member(0, 0x0)] public uint8 Data0;
        [RTTI.Member(1, 0x1)] public uint8 Data1;
        [RTTI.Member(2, 0x2)] public uint8 Data2;
        [RTTI.Member(3, 0x3)] public uint8 Data3;
        [RTTI.Member(4, 0x4)] public uint8 Data4;
        [RTTI.Member(5, 0x5)] public uint8 Data5;
        [RTTI.Member(6, 0x6)] public uint8 Data6;
        [RTTI.Member(7, 0x7)] public uint8 Data7;
        [RTTI.Member(8, 0x8)] public uint8 Data8;
        [RTTI.Member(9, 0x9)] public uint8 Data9;
        [RTTI.Member(10, 0xA)] public uint8 Data10;
        [RTTI.Member(11, 0xB)] public uint8 Data11;
        [RTTI.Member(12, 0xC)] public uint8 Data12;
        [RTTI.Member(13, 0xD)] public uint8 Data13;
        [RTTI.Member(14, 0xE)] public uint8 Data14;
        [RTTI.Member(15, 0xF)] public uint8 Data15;
    }

    [RTTI.Serializable(0x91F611CBBC3FED32)]
    public class MusicFactValue : EnumFactValue
    {
        [RTTI.Member(0, 0x28, "General")] public String ExitPresetName;
    }

    [RTTI.Serializable(0x33171B80F1A09BC1)]
    public class MusicPresetEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xB689571D88581935)]
    public class MusicPresetEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PresetName;
    }

    [RTTI.Serializable(0xEBB96BDA4F16E127)]
    public class MusicSubmixBinding
    {
        [RTTI.Member(0, 0x0)] public String TrackName;
        [RTTI.Member(1, 0x8)] public Ref<SubmixResource> Submix;
    }

    [RTTI.Serializable(0x5BF264F0651F3F3)]
    public class MusicSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x428F6D6124F730A1)]
    public class NPCSchedule : GameSchedule
    {
    }

    [RTTI.Serializable(0x7FA53DF9BD05686C)]
    public class NPCScheduleActivity : RTTIObject
    {
    }

    [RTTI.Serializable(0x61131A40106D38F0)]
    public class NPCScheduleActivityResource : Resource
    {
        [RTTI.Member(0, 0x28)] public CPtr<EntityAction> StartAction;
        [RTTI.Member(1, 0x30)] public CPtr<EntityAction> StopAction;
        [RTTI.Member(2, 0x38)] public bool IsImmediateAction;
        [RTTI.Member(3, 0x40)] public Ref<SmartObjectDesireComponentResource> SmartObjectDesireComponent;
    }

    [RTTI.Serializable(0xAE4A1F344A68CC2D)]
    public class NPCScheduleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x428D72E128404785)]
    public class NPCScheduleComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<NPCScheduleResource> NPCSchedule;
    }

    [RTTI.Serializable(0xD4F303CC74F4A9BA)]
    public class NPCScheduleEntry : GameScheduleEntry
    {
    }

    [RTTI.Serializable(0xC9A3A2B5286FB158)]
    public class NPCScheduleEntryResource : GameScheduleEntryResource
    {
        [RTTI.Member(0, 0x38)] public Ref<NPCScheduleLocationResource> Location;
        [RTTI.Member(1, 0x40)] public Ref<NPCScheduleActivityResource> Activity;
    }

    [RTTI.Serializable(0x6E96B5863A38847)]
    public class NPCScheduleLocation : RTTIObject
    {
    }

    [RTTI.Serializable(0x8F85349231976D66)]
    public class NPCScheduleLocationArea : NPCScheduleLocation
    {
    }

    [RTTI.Serializable(0xCCADFDAF8A6BAE07)]
    public class NPCScheduleLocationAreaResource : NPCScheduleLocationResource
    {
        [RTTI.Member(0, 0x28)] public Ref<SmartObjectArea> Area;
    }

    [RTTI.Serializable(0x327716D77DF31C7E)]
    public class NPCScheduleLocationResource : Resource
    {
    }

    [RTTI.Serializable(0x6D9C0437E52DB856)]
    public class NPCScheduleManager
    {
    }

    [RTTI.Serializable(0xA48C750704CB82AC)]
    public class NPCScheduleResource : GameScheduleResource
    {
    }

    [RTTI.Serializable(0x6482632D995712F2)]
    public class NPCScheduleResourceProperty : NPCScheduleResourcePropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0xA805A18E60515B9A)]
    public class NPCScheduleResourcePropertyBase : Property
    {
    }

    [RTTI.Serializable(0x1382E5F23F5036F1)]
    public class NPCScheduleResourcePropertyValue : PropertyValue
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<NPCScheduleResourcePropertyBase> Property;
        [RTTI.Member(1, 0x30, "General")] public Ref<NPCScheduleResource> Value;
    }

    [RTTI.Serializable(0x3ADEDA239F6CB7DD)]
    public class NameToSoundParameterMapping
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String SoundParameterName;
    }

    [RTTI.Serializable(0x3F56195C745AAEE8)]
    public class NamedDataSourceResource : DataSourceResource
    {
        [RTTI.Member(0, 0x28, "Properties")] public String DataSourceName;
    }

    [RTTI.Serializable(0x2E8C7DA194DFF0BA)]
    public class NavMesh : CoreObject
    {
        [RTTI.Member(0, 0x68, "General")] public Array<NavMeshTileInfo> TileInfoMap;
    }

    [RTTI.Serializable(0x25F0102A35613A4B)]
    public class NavMeshArea : ParentWorldNode
    {
        [RTTI.Member(0, 0x70)] public String AreaName;
        [RTTI.Member(1, 0x78)] public Ref<TerrainHull> Hull;
        [RTTI.Member(2, 0x80)] public Array<Ref<NavMeshAreaTag>> AreaTags;
    }

    [RTTI.Serializable(0x78A2ECB8FF63BDFB)]
    public class NavMeshAreaTag : Resource
    {
    }

    [RTTI.Serializable(0x15AF90DEDCADE25D)]
    public class NavMeshBuilder : CoreObject
    {
    }

    [RTTI.Serializable(0x1E890C65053642C5)]
    public class NavMeshBuilderSettings : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x28, "General")] public float CharacterRadius;
        [RTTI.Member(2, 0x2C, "General")] public float CharacterHeight;
        [RTTI.Member(3, 0x30, "General")] public float WalkableClimbWorld;
        [RTTI.Member(4, 0x34, "General")] public float VoxelSize;
        [RTTI.Member(5, 0x38, "General")] public int TileSize;
        [RTTI.Member(6, 0x3C, "General")] public float ShallowWaterLevel;
        [RTTI.Member(7, 0x40, "General")] public bool CanSwim;
        [RTTI.Member(8, 0x41, "General")] public bool EnableDetailMesh;
    }

    [RTTI.Serializable(0xA267DC0F3F997799)]
    public class NavMeshObject
    {
    }

    [RTTI.Serializable(0xC624327DCF08C22B)]
    public class NavMeshObjectAreaList
    {
        [RTTI.Member(0, 0x8)] public Array<int> AreaList;
    }

    [RTTI.Serializable(0x23086C3E6A3C3B6B)]
    public class NavMeshTileInfo
    {
        [RTTI.Member(0, 0x0)] public Array<NavMeshObjectAreaList> ObjectAreaList;
    }

    [RTTI.Serializable(0xDA5CF06310676470)]
    public class NearDeathModeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2E306A99E473CAE0)]
    public class NearDeathModeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Duration;
        [RTTI.Member(1, 0x2C, "Logic")] public float HealthThreshold;
        [RTTI.Member(2, 0x30, "Logic")] public float TimeScale;
        [RTTI.Member(3, 0x38, "Logic")] public CPtr<EntityAction> ActivateAction;
        [RTTI.Member(4, 0x40, "Logic")] public CPtr<EntityAction> DeactivateAction;
        [RTTI.Member(5, 0x48, "Logic")] public Ref<CameraPropertiesSetResource> CameraOverride;
        [RTTI.Member(6, 0x50, "Logic")] public float CameraInterpolationDuration;
    }

    [RTTI.Serializable(0x4F12B1A0BDD73EA6)]
    public class NetAttachableUseLocation : NetEntity
    {
    }

    [RTTI.Serializable(0x770EB30373D5DF63)]
    public class NetCaptureAndHoldArea : NetSpawnArea
    {
    }

    [RTTI.Serializable(0xD60339D719002A17)]
    public class NetControlledEntity : NetEntity
    {
    }

    [RTTI.Serializable(0xB7A9E426ACC0C904)]
    public class NetElectricityGrenade : NetThrowable
    {
    }

    [RTTI.Serializable(0xB402AE31106D85DD)]
    public class NetEntity : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0x2FA3045B01273CE7)]
    public class NetErrorHandlerGame : RTTIObject
    {
    }

    [RTTI.Serializable(0xED5B1C08E13F8697)]
    public class NetExplosion : NetEntity
    {
    }

    [RTTI.Serializable(0x63B57CDC16EE648B)]
    public class NetExplosiveLocation : NetMountableEntity
    {
    }

    [RTTI.Serializable(0x24DDF654DA3026DC)]
    public class NetHumanoid : NetControlledEntity
    {
    }

    [RTTI.Serializable(0x18261FD4A2B34EC4)]
    public class NetInteractiveEntity : NetControlledEntity
    {
    }

    [RTTI.Serializable(0xD175D676AE4EBE65)]
    public class NetInventoryEntity : NetEntity
    {
    }

    [RTTI.Serializable(0xC197BFB4E13BBB76)]
    public class NetManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xA35FA17871EB1762)]
    public class NetManagerGame : RTTIObject
    {
    }

    [RTTI.Serializable(0x4FCD8E693B2FABF8)]
    public class NetMine : NetEntity
    {
    }

    [RTTI.Serializable(0x824F2495740E510E)]
    public class NetMissionManager : NetEntity
    {
    }

    [RTTI.Serializable(0x651483FED83544B4)]
    public class NetMountableEntity : NetInteractiveEntity
    {
    }

    [RTTI.Serializable(0x96519E38468DEC3D)]
    public class NetMutex : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0xF5760F6AE3A45E5)]
    public class NetNpManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x2A044B6CB34D0C95)]
    public class NetPartyManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xFB099862CD9B9C93)]
    public class NetPlayAnimationObject : NetMountableEntity
    {
    }

    [RTTI.Serializable(0x54F0FA566E6B2FA5)]
    public class NetPlayer : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xC6E1464491D82295)]
    public class NetPlayerGame : NetPlayer
    {
    }

    [RTTI.Serializable(0x9BCE956A0BF86C87)]
    public class NetPlayerManager : RTTIObject
    {
    }

    [RTTI.Serializable(0xD16D3EB96EEBB7D)]
    public class NetReplicatedObject : RTTIObject
    {
    }

    [RTTI.Serializable(0x38EB6FE07C422B68)]
    public class NetRespawnEntity : NetEntity
    {
    }

    [RTTI.Serializable(0x7138219B241B13B7)]
    public class NetSearchAndRetrieveObject : NetEntity
    {
    }

    [RTTI.Serializable(0x8E657D9BF73D7B0A)]
    public class NetSequence : NetEntity
    {
    }

    [RTTI.Serializable(0x69F719F3C1EAAA99)]
    public class NetSessionManager : RTTIObject
    {
    }

    [RTTI.Serializable(0x2AF8A8A4310411E)]
    public class NetSignalGrenade : NetThrowable
    {
    }

    [RTTI.Serializable(0xB3A186130434784B)]
    public class NetSoldier : NetHumanoid
    {
    }

    [RTTI.Serializable(0x5210462C7ED8D4B7)]
    public class NetSpawnArea : NetEntity
    {
    }

    [RTTI.Serializable(0xCE63D8DA33F1DB06)]
    public class NetSwitch : NetInteractiveEntity
    {
    }

    [RTTI.Serializable(0xBF07B684CD5FBF9)]
    public class NetThrowable : NetEntity
    {
    }

    [RTTI.Serializable(0x762F407286ECA7B5)]
    public class NetTurret : NetControlledEntity
    {
    }

    [RTTI.Serializable(0x932BA43E1EA21EB9)]
    public class NetValve : NetMountableEntity
    {
    }

    [RTTI.Serializable(0xD330460F48989BBD)]
    public class NetworkLink : RTTIObject
    {
    }

    [RTTI.Serializable(0x7B1F38CACED6C823)]
    public class NewGamePlusSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Saving")] public Array<Ref<Fact>> SavedFacts;
        [RTTI.Member(1, 0x38, "Saving")] public Array<Ref<FactValue>> GlobalFactValues;
    }

    [RTTI.Serializable(0xDFE611C889BC101A)]
    public class NewGamePlusSettingsResourceGame : NewGamePlusSettingsResource
    {
        [RTTI.Member(0, 0x48, "Saving")] public Ref<LocalizedTextResource> SaveGameTitle;
        [RTTI.Member(1, 0x50, "Saving")] public Ref<AIMarker> SaveMarker;
        [RTTI.Member(2, 0x58, "Saving")] public Array<Ref<PerkLevel>> PerksToUnlearn;
        [RTTI.Member(3, 0x68, "Saving")] public Ref<IntegerFact> GameCompletionCountFact;
        [RTTI.Member(4, 0x70, "Saving")] public Ref<BooleanFact> DenyNewGamePlusSaveFact;
        [RTTI.Member(5, 0x78, "Inventory")] public Array<Ref<TagProperty>> IgnoreInventoryItemTags;
        [RTTI.Member(6, 0x88, "Inventory")] public bool SaveBuyBackItems;
        [RTTI.Member(7, 0x90, "QuestStart")] public Array<Ref<QuestType>> SupressNotificationsForQuestTypes;
    }

    [RTTI.Serializable(0x45D966D5F2DB23D9)]
    public class NodeConstantsInstance
    {
        [RTTI.Member(0, 0x0, "General")] public Ref<NodeConstantsResource> Resource;
    }

    [RTTI.Serializable(0xB7363AD8DC3B1FCF)]
    public class NodeConstantsResource : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<ProgramParameter> Parameters;
        [RTTI.Member(1, 0x40)] public Array<int> ExposedObjectsIndices;
        [RTTI.Member(2, 0x50)] public Array<int> ExposedUUIDRefIndices;
    }

    [RTTI.Serializable(0x2687FDEFCF449366)]
    public class NodeGraphAIBehaviorGroupVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<AIBehaviorGroup> Object;
    }

    [RTTI.Serializable(0x5FBABF1E859E99AA)]
    public class NodeGraphAdvancedTypesGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x8D689EB697F00BEE)]
    public class NodeGraphAttachedLightsComponentResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<AttachedLightsComponentResource> Object;
    }

    [RTTI.Serializable(0x5C4EF3D25F4B052D)]
    public class NodeGraphBoolVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public bool Value;
    }

    [RTTI.Serializable(0xFBAE529286D23DBC)]
    public class NodeGraphBooleanFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<BooleanFact> Object;
    }

    [RTTI.Serializable(0x9F3212A42325B422)]
    public class NodeGraphComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8DFB48FACF4FBFE3)]
    public class NodeGraphComponentLegacy : EntityComponent
    {
    }

    [RTTI.Serializable(0x8207E038821AAEDF)]
    public class NodeGraphComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(1, 0x30, "General")] public Ref<OverrideGraphProgramResource> OverrideGraphProgramResource;
    }

    [RTTI.Serializable(0x4BB1E1C5229DA05D)]
    public class NodeGraphComponentResourceLegacy : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<EventDrivenStateMachineResource> StateMachineResource;
    }

    [RTTI.Serializable(0xCA8DD7FCABB51F4E)]
    public class NodeGraphControlFlow
    {
    }

    [RTTI.Serializable(0xCC0C78A16F42D0F5)]
    public class NodeGraphCraftingRecipeUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public UUIDRef<CraftingRecipe> Object;
    }

    [RTTI.Serializable(0x706C561E5C2A9E0C)]
    public class NodeGraphCurveResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<CurveResource> Object;
    }

    [RTTI.Serializable(0x92204D02A5F24FB1)]
    public class NodeGraphDamageSettingsVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<DamageSettings> Object;
    }

    [RTTI.Serializable(0xC742362198048D12)]
    public class NodeGraphDestructibilityPartVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<DestructibilityPart> Object;
    }

    [RTTI.Serializable(0x598538348FBD6558)]
    public class NodeGraphEffectComponentResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<EffectComponentResource> Object;
    }

    [RTTI.Serializable(0x59663636CBF70636)]
    public class NodeGraphEntityComponentResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<EntityComponentResource> Object;
    }

    [RTTI.Serializable(0x250971FB56A2E037)]
    public class NodeGraphEntityPlaceHolderVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<EntityPlaceHolder> Object;
    }

    [RTTI.Serializable(0x113407851FCE810)]
    public class NodeGraphEntityResourceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public UUIDRef<EntityResource> Object;
    }

    [RTTI.Serializable(0xECB95A128A34F66A)]
    public class NodeGraphEntityResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<EntityResource> Object;
    }

    [RTTI.Serializable(0x6702F143C038C6CC)]
    public class NodeGraphEnumFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<EnumFact> Object;
    }

    [RTTI.Serializable(0x90F285C5EE01620E)]
    public class NodeGraphFRGBAColorVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x30)] public FRGBAColor Value;
    }

    [RTTI.Serializable(0x972C0CDFBE90F955)]
    public class NodeGraphFloatFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<FloatFact> Object;
    }

    [RTTI.Serializable(0xE7F19E0722DB661B)]
    public class NodeGraphFloatVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public float Value;
    }

    [RTTI.Serializable(0xA71769B7A68DE169)]
    public class NodeGraphGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xF1803EDBDD6B8476)]
    public class NodeGraphHumanoidBodyVariantInterfaceUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public UUIDRef<HumanoidBodyVariantInterface> Object;
    }

    [RTTI.Serializable(0xEB53519292C393EA)]
    public class NodeGraphHumanoidBodyVariantUUIDRefVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public UUIDRef<HumanoidBodyVariant> Object;
    }

    [RTTI.Serializable(0x8E110D2854135813)]
    public class NodeGraphIntVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public int Value;
    }

    [RTTI.Serializable(0xEBB19A86CD4129C5)]
    public class NodeGraphIntegerFactVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<IntegerFact> Object;
    }

    [RTTI.Serializable(0x5F291541B8D33C68)]
    public class NodeGraphMat44VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x30)] public Mat44 Value;
    }

    [RTTI.Serializable(0xD8486928A913EC44)]
    public class NodeGraphMemoryGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB1C3062F5F5C6F99)]
    public class NodeGraphModelPartResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<ModelPartResource> Object;
    }

    [RTTI.Serializable(0x2D1BF9157436F40C)]
    public class NodeGraphQuatVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x30)] public Quat Value;
    }

    [RTTI.Serializable(0x3DB348AC55D0A13B)]
    public class NodeGraphResourceVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<BaseResource> Object;
    }

    [RTTI.Serializable(0xF6D857E70B2A19AB)]
    public class NodeGraphSentenceGroupVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<SentenceGroupResource> Object;
    }

    [RTTI.Serializable(0xDF505E901914933E)]
    public class NodeGraphSpawnpointVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public Ref<Spawnpoint> Object;
    }

    [RTTI.Serializable(0xF10D3FFB13F214E3)]
    public class NodeGraphStringVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public String Value;
    }

    [RTTI.Serializable(0x38ED6FA6DD903D01)]
    public class NodeGraphVariableOverride : BaseResource
    {
        [RTTI.Member(0, 0x20)] public String VariableId;
    }

    [RTTI.Serializable(0xAD4F5E4B6EA80D88)]
    public class NodeGraphVec3VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x30)] public Vec3 Value;
    }

    [RTTI.Serializable(0x6FD32962DAFA41B8)]
    public class NodeGraphVec4VariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x30)] public Vec4 Value;
    }

    [RTTI.Serializable(0x42BBA679A6F5D6E4)]
    public class NodeGraphWorldPositionVariableOverride : NodeGraphVariableOverride
    {
        [RTTI.Member(0, 0x28)] public WorldPosition Value;
    }

    [RTTI.Serializable(0xE6AA2D288FA1B1B7)]
    public class NotAllowedInTemplate
    {
    }

    [RTTI.Serializable(0xFB803878204CD13A)]
    public class ObjectAttributeAnimatorInstance : CoreObject
    {
        [RTTI.Member(0, 0x20, "Animator")] public Ref<ObjectAttributeAnimatorResource> Resource;
    }

    [RTTI.Serializable(0xE67B66092B9E9796)]
    public class ObjectAttributeAnimatorManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x98E5E00BE8ADC451)]
    public class ObjectAttributeAnimatorResource : ObjectAttributeAnimatorResourceBase
    {
        [RTTI.Member(0, 0x30, "Animator")] public ELoopMode LoopMode;
    }

    [RTTI.Serializable(0xCFF118CB857CEFF0)]
    public class ObjectAttributeAnimatorResourceBase : Resource
    {
        [RTTI.Member(0, 0x28, "Animate")] public float AnimationDuration;
    }

    [RTTI.Serializable(0x55B8687CEDB33B9B)]
    public class ObjectAttributeAnimatorSetInstance : ObjectAttributeAnimatorInstance
    {
        [RTTI.Member(0, 0x38, "Animator")] public Array<Ref<ObjectAttributeAnimatorInstance>> ObjectAttributeAnimators;
    }

    [RTTI.Serializable(0xAF82B6113402BEE7)]
    public class ObjectAttributeAnimatorSetResource : ObjectAttributeAnimatorResource
    {
        [RTTI.Member(0, 0x38, "Animator")] public Array<Ref<ObjectAttributeAnimatorResource>> ObjectAttributeAnimators;
    }

    [RTTI.Serializable(0xA97082C73B2BC4BB)]
    public class ObjectCollection : CoreObject
    {
        [RTTI.BaseClass(0x20)] public RTTIRefObjectSet @RTTIRefObjectSet;
    }

    [RTTI.Serializable(0xB0DE2ADBC9DA5AE)]
    public class ObjectEvent
    {
    }

    [RTTI.Serializable(0xD807A33BA76DA009)]
    public class ObjectManager : CoreObject
    {
    }

    [RTTI.Serializable(0x33A514A2A9AF579E)]
    public class ObjectiveCount
    {
        [RTTI.Member(0, 0x0)] public int PlayerCount;
        [RTTI.Member(1, 0x4)] public int _ObjectiveCount;
    }

    [RTTI.Serializable(0x719178DC1A5C0766)]
    public class ObjectiveResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String BriefActiveDescription;
        [RTTI.Member(1, 0x30, "Logic")] public String FullActiveDescription;
        [RTTI.Member(2, 0x38, "Logic")] public String BriefCompletedDescription;
        [RTTI.Member(3, 0x40, "Logic")] public String FullCompletedDescription;
        [RTTI.Member(4, 0x48, "Logic")] public String BriefFailedDescription;
        [RTTI.Member(5, 0x50, "Logic")] public String FullFailedDescription;
        [RTTI.Member(6, 0x58, "Logic")] public String Identifier;
        [RTTI.Member(7, 0x60, "Logic")] public Ref<StoryArc> StoryArc;
        [RTTI.Member(8, 0x68, "Logic")] public int CompletedByNode;
        [RTTI.Member(9, 0x6C, "Logic")] public bool IsStoryObjective;
    }

    [RTTI.Serializable(0x47155A72ECFDD414)]
    public class ObjectiveSystem : CoreObject
    {
    }

    [RTTI.Serializable(0xCDD6D72C77E1B8D)]
    public class ObjectiveTargetArrowComponent : TargetArrowComponent
    {
    }

    [RTTI.Serializable(0x145B0472256B2A68)]
    public class ObjectiveTargetArrowComponentResource : TargetArrowComponentResource
    {
    }

    [RTTI.Serializable(0xDF3443EB0931EF7B)]
    public class ObstacleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5BE0822DDD5BC9D3)]
    public class ObstacleComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EObstacleType ObstacleType;
        [RTTI.Member(1, 0x2C, "Logic")] public EObstacleShape ObstacleShape;
        [RTTI.Member(2, 0x30, "Logic")] public BoundingBox3 LocalBoundingBox;
        [RTTI.Member(3, 0x50, "Logic")] public int SoftObstacleDestructDamage;
    }

    [RTTI.Serializable(0x7624B28D962C4F05)]
    public class ObtainItemsQuestTrigger : EntityBasedQuestTrigger
    {
        [RTTI.Member(0, 0x80, "Logic")] public bool MakeQuestItem;
        [RTTI.Member(1, 0x81, "Logic")] public bool PerformInitialCheck;
    }

    [RTTI.Serializable(0xD86B01618CA0925C)]
    public class Occluder
    {
        [RTTI.Member(0, 0x20, "OccluderDescription")] public SimplePolygon Polygon;
    }

    [RTTI.Serializable(0xF7C866489336816D)]
    public class OmniLight : LightShadowed
    {
        [RTTI.Member(0, 0x210, "General")] public float FadeRatio;
        [RTTI.Member(1, 0x214, "General")] public float Radius;
        [RTTI.Member(2, 0x218, "General")] public float ShadowConeAngle;
        [RTTI.Member(3, 0x21C, "General")] public float ShadowHotspotAngle;
        [RTTI.Member(4, 0x220, "General")] public float ShadowNearPlane;
    }

    [RTTI.Serializable(0x747A582F11B17577)]
    public class OmniLightResource : LightShadowedResource
    {
        [RTTI.Member(0, 0x1F0, "Color")] public float FadeRatio;
        [RTTI.Member(1, 0x1F4, "Color")] public float Radius;
        [RTTI.Member(2, 0x1F8, "Color")] public float ShadowConeAngle;
        [RTTI.Member(3, 0x1FC, "Color")] public float ShadowHotspotAngle;
        [RTTI.Member(4, 0x200, "Color")] public float ShadowNearPlane;
        [RTTI.Member(5, 0x204, "Color")] public bool OmniShadows;
    }

    [RTTI.Serializable(0x4861C2F5071BA07A)]
    public class OnlineLoadout : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public int ID;
        [RTTI.Member(1, 0x10)] public String Name;
        [RTTI.Member(2, 0x18)] public int CareerID;
        [RTTI.Member(3, 0x1C)] public int PrimaryWeapon;
        [RTTI.Member(4, 0x20)] public int SecondaryWeapon;
        [RTTI.Member(5, 0x24)] public int AuxiliaryWeapon;
        [RTTI.Member(6, 0x28)] public int PrimaryAbility;
        [RTTI.Member(7, 0x2C)] public int SecondaryAbility;
        [RTTI.Member(8, 0x30)] public int TertiaryAbility;
    }

    [RTTI.Serializable(0xC65F2B79E827A4F7)]
    public class OpenCloseTurretAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Open;
    }

    [RTTI.Serializable(0xA877FCCCC773252)]
    public class OpenMenuAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public UUIDRef<MenuPageBase> MenuPage;
        [RTTI.Member(1, 0x40, "Logic")] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(2, 0x50, "Logic")] public bool PauseGame;
    }

    [RTTI.Serializable(0xC70D49793BE72032)]
    public class OpenMenuParameter
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String Value;
    }

    [RTTI.Serializable(0xCE17BC94E52C3A23)]
    public class OpenMenuParameters : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<OpenMenuParameter> Parameters;
    }

    [RTTI.Serializable(0x4E53F3B8916885D2)]
    public class OpenMenuSystem : CoreObject
    {
    }

    [RTTI.Serializable(0x52D9C814286CB69B)]
    public class OrbitCameraActorInstance : EntityActorInstanceBase
    {
    }

    [RTTI.Serializable(0x71156D53995488B7)]
    public class OrbitCameraActorResource : ActorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<CameraEntityResource> CameraEntityResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PrimaryLookAt;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<LocatorResource> SecondaryLookAt;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<LocatorResource> PrimaryOrientation;
        [RTTI.Member(4, 0x60, "Logic")] public Vec3 TargetOffset;
        [RTTI.Member(5, 0x70, "Logic")] public Ref<CurveResource> Factor;
        [RTTI.Member(6, 0x78, "Logic")] public float SmoothTime;
        [RTTI.Member(7, 0x80, "Logic")] public Ref<CurveResource> Distance;
        [RTTI.Member(8, 0x88, "Logic")] public Ref<CurveResource> OrbitAngle;
        [RTTI.Member(9, 0x90, "Logic")] public Ref<CurveResource> VerticalOrbitAngle;
        [RTTI.Member(10, 0x98, "Logic")] public Ref<CurveResource> LookAtBias;
        [RTTI.Member(11, 0xA0, "Logic")] public Ref<CurveResource> FOV;
        [RTTI.Member(12, 0xA8, "Logic")] public Ref<CurveResource> ViewOffsetX;
        [RTTI.Member(13, 0xB0, "Logic")] public Ref<CurveResource> ViewOffsetY;
    }

    [RTTI.Serializable(0x23CFDA50594FA13)]
    public class OrientationHelper
    {
        [RTTI.Member(0, 0x0)] public Mat44 Matrix;
        [RTTI.Member(1, 0x40)] public String Name;
        [RTTI.Member(2, 0x48)] public int Index;
    }

    [RTTI.Serializable(0xE8420DA0BF05ADA3)]
    public class OrientedBox
    {
        [RTTI.Member(0, 0x0)] public Mat44 Matrix;
        [RTTI.Member(1, 0x40)] public Vec3 Extents;
    }

    [RTTI.Serializable(0xC20911490B57207)]
    public class OtherEntityLifetimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB221C212AC160F6C)]
    public class OutOfBoundsAreaTag
    {
        [RTTI.Member(0, 0x0)] public Ref<NavMeshAreaTag> NavMeshAreaTag;
        [RTTI.Member(1, 0x8)] public Ref<ConditionResource> ActiveCondition;
        [RTTI.Member(2, 0x10)] public bool AllowContextualSpeech;
        [RTTI.Member(3, 0x11)] public bool AllowTeleportWhenConditionChanged;
        [RTTI.Member(4, 0x12)] public bool AllowSuspendButtonInput;
    }

    [RTTI.Serializable(0x6CA84CDCA47AA2FA)]
    public class OutOfBoundsNavMeshArea : NavMeshArea
    {
        [RTTI.Member(0, 0x90)] public Ref<LocalizedTextResource> NotAllowedInAreaText;
    }

    [RTTI.Serializable(0x288CB323E997A4DC)]
    public class OutOfBoundsQueryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEC610664544CEDA9)]
    public class OutOfBoundsQueryComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<OutOfBoundsAreaTag> OutOfBoundsAreaTags;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<ContextualSpeechEvent> ContextualSpeechEvent;
    }

    [RTTI.Serializable(0x7D7A39DC5F540184)]
    public class OutfitCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0xA94A63D73771CEF0)]
    public class OverrideAirSceneRestrictionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6B6210AE84579AEE)]
    public class OverrideAirSceneRestrictionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public WorldPosition Position;
        [RTTI.Member(1, 0x40, "Logic")] public float Radius;
    }

    [RTTI.Serializable(0xD9E83879D88A3476)]
    public class OverrideAutoContextInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x9EA3404334F8505F)]
    public class OverrideAutoContextResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<AIContextHintResource> ContextHint;
    }

    [RTTI.Serializable(0xE1661CF7D668C00B)]
    public class OverrideCameraDoFEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x867A26B5D5C92319)]
    public class OverrideCameraDoFEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<CameraActorResource> CameraActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<CurveResource> Aperture;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<CurveResource> FocusDistance;
    }

    [RTTI.Serializable(0xA0A738449ACBF3CD)]
    public class OverrideCrosshairColorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x63D8F6B034D35C5B)]
    public class OverrideCrosshairColorComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Colors")] public Ref<CrosshairColor> FriendlyLockedColor;
        [RTTI.Member(1, 0x30, "Colors")] public Ref<CrosshairColor> EnemyLockedColor;
        [RTTI.Member(2, 0x38, "Colors")] public Ref<CrosshairColor> NoLockColor;
        [RTTI.Member(3, 0x40, "Colors")] public float IgnoreDistance;
    }

    [RTTI.Serializable(0x9DF8B53E0D5153C3)]
    public class OverrideDeathCamAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<DeathCameraEntityResource> DeathCam;
        [RTTI.Member(1, 0x38, "Logic")] public bool UseDeathCamOnce;
    }

    [RTTI.Serializable(0xF42C07B6AA789456)]
    public class OverrideEyeColorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x70DA20762EC279DB)]
    public class OverrideEyeColorEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<AIEyeColorHintResource> EyeColorResource;
    }

    [RTTI.Serializable(0xE27D23D67B441C37)]
    public class OverrideGraphProgramResource : BaseResource
    {
        [RTTI.Member(0, 0x38)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(1, 0x40)] public Array<Ref<NodeGraphVariableOverride>> VariableOverrides;
    }

    [RTTI.Serializable(0xE90D340F3C32CB65)]
    public class OverrideInventoryMainItemAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<InventoryEntityResource> InventoryEntity;
    }

    [RTTI.Serializable(0x51197D9790B4BE75)]
    public class OverrideMovementEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8C1D53ADF42B9C6D)]
    public class OverrideMovementEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> TargetLocatorResource;
        [RTTI.Member(2, 0x48, "Logic")] public String TargetHelperNode;
        [RTTI.Member(3, 0x50, "Logic")] public bool DoCollision;
    }

    [RTTI.Serializable(0xDE1B242BEAE9AAD4)]
    public class PBDBlastWaveAction : EntityAction
    {
        [RTTI.Member(0, 0x30)] public String HelperNode;
        [RTTI.Member(1, 0x38)] public float BlastSpeed;
        [RTTI.Member(2, 0x3C)] public float BlastRadius;
        [RTTI.Member(3, 0x40)] public float BlastForce;
    }

    [RTTI.Serializable(0x857DAE34C091FEC4)]
    public class PBDBodyResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<PBDVertexDesc> Vertices;
        [RTTI.Member(1, 0x38, "General")] public Array<PBDConstraintDesc> Constraints;
        [RTTI.Member(2, 0x48, "General")] public Array<uint16> TriangleIndexList;
        [RTTI.Member(3, 0x58, "General")] public float GlobalMotionDamping;
        [RTTI.Member(4, 0x5C, "General")] public float ForceFieldInfluence;
        [RTTI.Member(5, 0x60, "General")] public float Drag;
        [RTTI.Member(6, 0x64, "General")] public float Lift;
        [RTTI.Member(7, 0x68, "Cached")] public int ConstraintSizeRT;
    }

    [RTTI.Serializable(0xA2E40518E68C0161)]
    public class PBDConstraintDesc
    {
        [RTTI.Member(0, 0x0)] public EPBDConstraintDescType Type;
        [RTTI.Member(1, 0x4)] public float Stiffness;
        [RTTI.Member(2, 0x8)] public uint16 VtxIndex0;
        [RTTI.Member(3, 0xA)] public uint16 VtxIndex1;
        [RTTI.Member(4, 0xC)] public uint16 VtxIndex2;
        [RTTI.Member(5, 0xE)] public uint16 VtxIndex3;
    }

    [RTTI.Serializable(0x9BFC9D1246825F3C)]
    public class PBDDeformedSkinnedMesh : BaseResource
    {
        [RTTI.Member(0, 0x20)] public Ref<PBDBodyResource> PBDBodyResource;
        [RTTI.Member(1, 0x28)] public Ref<RegularSkinnedMeshResourceBase> SkinnedMesh;
        [RTTI.Member(2, 0x30)] public PBDPoseMapper PoseMapper;
        [RTTI.Member(3, 0x40)] public Ref<SkinnedPointsResource> SkinAttachedPoints;
    }

    [RTTI.Serializable(0xA6D8C48A6A618499)]
    public class PBDEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9F5BE5506780A184)]
    public class PBDEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float SphereRadius;
        [RTTI.Member(1, 0x30, "Logic")] public String HelperNode;
    }

    [RTTI.Serializable(0x2A97E759F9A00E66)]
    public class PBDGraphExtInput
    {
    }

    [RTTI.Serializable(0xA8DC6BBEC41D623E)]
    public class PBDGraphGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xDF699AF60AB3476E)]
    public class PBDGraphSimBody
    {
        [RTTI.Member(0, 0x0)] public Ref<PBDBodyResource> Body;
        [RTTI.Member(1, 0x8)] public Array<PBDVertexTopologyDesc> VtxTopologyList;
        [RTTI.Member(2, 0x18)] public Array<PBDVtxSkinBinding> VtxSkinBindingListRT;
    }

    [RTTI.Serializable(0xA9D8A583E4C98D29)]
    public class PBDNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x40D6E0DEF72B527)]
    public class PBDNodeStateResource : StateObjectResource
    {
        [RTTI.Member(0, 0x20)] public int SolverIterations;
        [RTTI.Member(1, 0x24)] public float SolverUpdateFreq;
        [RTTI.Member(2, 0x28)] public float Friction;
        [RTTI.Member(3, 0x2C)] public float Restitution;
        [RTTI.Member(4, 0x30)] public bool WorldMotionLimitEnabled;
        [RTTI.Member(5, 0x34)] public float WorldMotionLimit;
        [RTTI.Member(6, 0x38)] public float WorldMotionInfluence;
        [RTTI.Member(7, 0x40)] public Array<PBDGraphSimBody> BodyList;
        [RTTI.Member(8, 0x50)] public Ref<Skeleton> Skeleton;
        [RTTI.Member(9, 0x58)] public Array<Mat44> InvBindMatrices;
    }

    [RTTI.Serializable(0x63D4A4DF6C4B7DA5)]
    public class PBDPoseMapper
    {
        [RTTI.Member(0, 0x0)] public Array<float> VtxToMatrixMapping;
    }

    [RTTI.Serializable(0x3848124A4B784C75)]
    public class PBDVertexDesc
    {
        [RTTI.Member(0, 0x0)] public Vec3 Position;
        [RTTI.Member(1, 0x10)] public float Mass;
        [RTTI.Member(2, 0x14)] public float Area;
        [RTTI.Member(3, 0x18)] public float MaxDistance;
        [RTTI.Member(4, 0x1C)] public float Backstop;
    }

    [RTTI.Serializable(0xF9D1F83283770E2E)]
    public class PBDVertexTopologyDesc
    {
        [RTTI.Member(0, 0x0)] public Array<uint16> IdxList;
    }

    [RTTI.Serializable(0x6714FF0562C796B0)]
    public class PBDVtxSkinBinding
    {
        [RTTI.Member(0, 0x0)] public uint16_PBD_MAX_SKIN_WEIGHTS<uint16> InflIdx;
        [RTTI.Member(1, 0x8)] public uint8_PBD_MAX_SKIN_WEIGHTS<uint8> Weights;
    }

    [RTTI.Serializable(0x591428E700F463F0)]
    public class PCoreFuncGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x22CAF9094B56FE0C)]
    public class PCoreGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xFBE1144154AAC80A)]
    public class PGeometryGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB6F65A45EC61DAFA)]
    public class PMathGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xC02B7EC91CB8B08D)]
    public class PMathGroupGlobals : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xE6F65B5A11A5F783)]
    public class PODVariant
    {
        [RTTI.Member(0, 0x0)] public EPODVariantType Type;
        [RTTI.Member(1, 0x4)] public uint32 BinaryValue;
    }

    [RTTI.Serializable(0x649D196A09A3A7CB)]
    public class POSFuncGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x2252C14BDBB64E1C)]
    public class PadMappingViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x58A2A822D8FDF7EE)]
    public class PaintJob
    {
    }

    [RTTI.Serializable(0xA9B94E742C1A54F)]
    public class PanelTag : VisualTag
    {
    }

    [RTTI.Serializable(0xD58BFBB02392C95B)]
    public class PanelWidget : Widget
    {
    }

    [RTTI.Serializable(0xBB4DB2D5D96DD474)]
    public class ParTimeLevelInfo : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String LevelName;
        [RTTI.Member(1, 0x28)] public Array<ParTimeNodeInfo> NodeTimes;
    }

    [RTTI.Serializable(0xED509A75EF5E9FFB)]
    public class ParTimeNodeInfo : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public float Time;
        [RTTI.Member(1, 0xC)] public int NodeID;
        [RTTI.Member(2, 0x10)] public Array<float> RescaledTimes;
    }

    [RTTI.Serializable(0x27E3DA3ED61AE22C)]
    public class ParametricEqResource : Resource
    {
        [RTTI.Member(0, 0x28, "Params")] public ESoundFilterMode Mode;
        [RTTI.Member(1, 0x2C, "Params")] public float Gain;
        [RTTI.Member(2, 0x30, "Params")] public float Frequency;
        [RTTI.Member(3, 0x34, "Params")] public float QValue;
    }

    [RTTI.Serializable(0xD2E2F386990599D5)]
    public class ParentWorldNode : WorldNode
    {
        [RTTI.Member(0, 0x68, "General")] public bool ChildTransformsRelative;
    }

    [RTTI.Serializable(0x9332098620ECA520)]
    public class ParkourComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAD88356F1CE06A1E)]
    public class ParkourComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CurveResource> PerchedWalkSpeedCurve;
        [RTTI.Member(1, 0x38, "Logic")] public float PerchedWalkAcceleration;
        [RTTI.Member(2, 0x3C, "Logic")] public float PerchedWalkDeceleration;
        [RTTI.Member(3, 0x40, "Logic")] public float PerchedSprintSpeedMultiplier;
        [RTTI.Member(4, 0x48, "Logic")] public String ClimbIdleWithFootSupportStateName;
        [RTTI.Member(5, 0x50, "Logic")] public String ClimbIdleWithoutFootSupportStateName;
        [RTTI.Member(6, 0x60, "Logic")] public Vec3 ClimbIdleWithFootSupportOffset;
        [RTTI.Member(7, 0x70, "Logic")] public Vec3 ClimbIdleWithoutFootSupportOffset;
        [RTTI.Member(8, 0x80, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsOnFootToOnFootPerched;
        [RTTI.Member(9, 0xD0, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsOnFootToOnFootOnGround;
        [RTTI.Member(10, 0x120, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsOnFootToWithHands;
        [RTTI.Member(11, 0x170, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsWithHandsWithFootSupport;
        [RTTI.Member(12, 0x1C0, "Control")] public ParkourTransitionDetectionLimits TransitionLimitsWithHandsWithoutFootSupport;
        [RTTI.Member(13, 0x210, "Control")] public float MaxAngleBetweenInputAndJumpOnFoot;
        [RTTI.Member(14, 0x214, "Control")] public float MaxAngleBetweenInputAndJumpWithHands;
        [RTTI.Member(15, 0x220, "Logic")] public Vec3 CollisionCapsuleOffsetOnFoot;
        [RTTI.Member(16, 0x230, "Logic")] public Vec3 CollisionCapsuleOffsetWithHands;
        [RTTI.Member(17, 0x240, "Logic")] public Vec3 ReachOriginOffsetOnFoot;
        [RTTI.Member(18, 0x250, "Logic")] public Vec3 ReachOriginOffsetWithHands;
        [RTTI.Member(19, 0x260, "Logic")] public float CollisionTestOffsetBelowHangMoving;
        [RTTI.Member(20, 0x264, "Logic")] public float CollisionTestOffsetBelowHangIdle;
        [RTTI.Member(21, 0x268, "Logic", true)] public FRange AimComfortRangeIdle;
        [RTTI.Member(22, 0x270, "Logic")] public FRange AimComfortRangeIdleRadians;
        [RTTI.Member(23, 0x278, "Logic", true)] public FRange AimComfortRangeMoving;
        [RTTI.Member(24, 0x280, "Logic")] public FRange AimComfortRangeMovingRadians;
        [RTTI.Member(25, 0x288, "Animation")] public Array<Ref<HumanoidParkourTransition>> Transitions;
        [RTTI.Member(26, 0x298, "Animation")] public Array<HumanoidParkourTransitionMetrics> TransitionMetrics;
        [RTTI.Member(27, 0x2A8, "Animation")] public Ref<HumanoidParkourTransition> DefaultClimbEntryTransitionWithFootSupport;
        [RTTI.Member(28, 0x2B0, "Animation")] public Ref<HumanoidParkourTransition> DefaultClimbEntryTransitionWithoutFootSupport;
        [RTTI.Member(29, 0x2C0, "Animation")] public HumanoidParkourTransitionMetrics DefaultClimbEntryTransitionWithFootSupportMetrics;
        [RTTI.Member(30, 0x330, "Animation")] public HumanoidParkourTransitionMetrics DefaultClimbEntryTransitionWithoutFootSupportMetrics;
        [RTTI.Member(31, 0x3A0, "Logic")] public Array<String> AutoTraversableAnnotationTags;
        [RTTI.Member(32, 0x3B0, "AI")] public Ref<AIHapticStimulusResource> ClimbingHapticStimulus;
        [RTTI.Member(33, 0x3B8, "AI")] public Array<String> ParkourVisualNodeBones;
        [RTTI.Member(34, 0x3C8, "Logic")] public float LookDistance;
        [RTTI.Member(35, 0x3CC, "Logic")] public FRange StepOffAllowedHeightDifference;
        [RTTI.Member(36, 0x3D4, "Logic")] public float StepOffReattachmentPreventionRadius;
        [RTTI.Member(37, 0x3D8, "Logic")] public Array<Vec3> JumpOffTargetCollisionCheckStartOffsets;
        [RTTI.Member(38, 0x3E8, "Logic")] public float JumpOffTargetMaxHeight;
        [RTTI.Member(39, 0x3EC, "Logic")] public float JumpOffTargetScorePenalty;
        [RTTI.Member(40, 0x3F0, "Logic")] public float JumpOffTargetMaxForwardAngle;
        [RTTI.Member(41, 0x3F4, "Logic")] public float PullUpToGroundScorePenalty;
        [RTTI.Member(42, 0x3F8, "Logic")] public float PullUpToGroundAdditionalAllowedExtraHeight;
        [RTTI.Member(43, 0x400, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithFootSupportStandingAnimation;
        [RTTI.Member(44, 0x408, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithFootSupportCrouchedAnimation;
        [RTTI.Member(45, 0x418, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithoutFootSupportStandingAnimation;
        [RTTI.Member(46, 0x420, "Logic")] public Ref<WarpedAnimation> ClimbLedgeWithoutFootSupportCrouchedAnimation;
        [RTTI.Member(47, 0x430, "FootPlacement")] public ParkourLimbOffset LeftFootOffsetInIdle;
        [RTTI.Member(48, 0x450, "FootPlacement")] public ParkourLimbOffset RightFootOffsetInIdle;
        [RTTI.Member(49, 0x470, "FootPlacement")] public FRange FeetPushDistanceRange;
        [RTTI.Member(50, 0x478, "FootPlacement")] public float FootSupportDetectionRadius;
        [RTTI.Member(51, 0x47C, "FootPlacement")] public float SecondaryFootSupportOffset;
        [RTTI.Member(52, 0x480, "HandPlacement")] public ParkourLimbOffset LeftHandOffsetInIdleWithFootSupport;
        [RTTI.Member(53, 0x4A0, "HandPlacement")] public ParkourLimbOffset RightHandOffsetInIdleWithFootSupport;
        [RTTI.Member(54, 0x4C0, "HandPlacement")] public ParkourLimbOffset LeftHandOffsetInIdleWithoutFootSupport;
        [RTTI.Member(55, 0x4E0, "HandPlacement")] public ParkourLimbOffset RightHandOffsetInIdleWithoutFootSupport;
        [RTTI.Member(56, 0x500, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckStartWithFootSupport;
        [RTTI.Member(57, 0x510, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckStartWithFootSupport;
        [RTTI.Member(58, 0x520, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckEndWithFootSupport;
        [RTTI.Member(59, 0x530, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckEndWithFootSupport;
        [RTTI.Member(60, 0x540, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckStartWithoutFootSupport;
        [RTTI.Member(61, 0x550, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckStartWithoutFootSupport;
        [RTTI.Member(62, 0x560, "HandPlacement")] public Vec3 LeftHandSupportCollisionCheckEndWithoutFootSupport;
        [RTTI.Member(63, 0x570, "HandPlacement")] public Vec3 RightHandSupportCollisionCheckEndWithoutFootSupport;
        [RTTI.Member(64, 0x580, "HandPlacement")] public Vec3 HandSupportLeftFingersOffset;
        [RTTI.Member(65, 0x590, "HandPlacement")] public Vec3 HandSupportRightFingersOffset;
        [RTTI.Member(66, 0x5A0, "HandPlacement")] public float HandSupportDetectionRadius;
        [RTTI.Member(67, 0x5A8, "Logic")] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(68, 0x5B0, "Logic")] public Array<Ref<DamageTypeResource>> IgnoredDamageTypesCausedByParkourableEntity;
        [RTTI.Member(69, 0x5C0, "Logic")] public float DeviationAngleSearchWeight;
        [RTTI.Member(70, 0x5C8, "Unlocks")] public Ref<PerkLevel> AimWhileParkouringPerk;
        [RTTI.Member(71, 0x5D0, "Logic")] public Ref<CurveResource> ViewAngleTransitionScoreCurve;
        [RTTI.Member(72, 0x5D8, "Logic")] public float PerchedOnPointMinTurnAngle;
        [RTTI.Member(73, 0x5DC, "Logic")] public float PerchedOnSegmentTurnAngleThreshold;
        [RTTI.Member(74, 0x5E0, "Logic")] public float MaxLedgeClimbOverDropHeight;
        [RTTI.Member(75, 0x5E4, "Logic")] public float MaxLedgeClimbOverSlopeAngle;
        [RTTI.Member(76, 0x5E8, "Logic")] public float LedgeClimbOverCapsuleZOffset;
        [RTTI.Member(77, 0x5EC, "Logic")] public float AutoDetachFromClimbDistanceIntoWater;
        [RTTI.Member(78, 0x5F0, "Logic")] public float AutoDetachFromPerchedDistanceIntoWater;
        [RTTI.Member(79, 0x5F8, "Facts")] public Ref<BooleanFact> IsTransitioningFact;
        [RTTI.Member(80, 0x600, "Facts")] public Ref<EnumFact> TransitionTypeFact;
        [RTTI.Member(81, 0x608, "Camera")] public Ref<CameraModeResource> DefaultCameraModeWithHandsWithFootSupport;
        [RTTI.Member(82, 0x610, "Camera")] public Ref<CameraModeResource> DefaultCameraModeWithHandsWithoutFootSupport;
        [RTTI.Member(83, 0x618, "Camera")] public Ref<CameraModeResource> DefaultCameraModeOnFoot;
        [RTTI.Member(84, 0x620, "Logic")] public float MaxClimbCollisionOnStaticAnnotationPushAwayDistance;
        [RTTI.Member(85, 0x624, "Logic")] public float MaxClimbCollisionOnMovingAnnotationPushAwayDistance;
        [RTTI.Member(86, 0x628, "HitResponse")] public float DetachWithHandsFlinchSeverity;
        [RTTI.Member(87, 0x62C, "Logic")] public ParkourInitialAttachmentSettings DisplacementSmoothAttachmentSettings;
        [RTTI.Member(88, 0x63C, "Logic")] public ParkourInitialAttachmentSettings TurnSmoothAttachmentSettings;
        [RTTI.Member(89, 0x64C, "Logic")] public float FacingDirectionSmoothFactor;
        [RTTI.Member(90, 0x650, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportInnerLeft;
        [RTTI.Member(91, 0x660, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportInnerLeft;
        [RTTI.Member(92, 0x670, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportOuterLeft;
        [RTTI.Member(93, 0x680, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportOuterLeft;
        [RTTI.Member(94, 0x690, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportInnerRight;
        [RTTI.Member(95, 0x6A0, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportInnerRight;
        [RTTI.Member(96, 0x6B0, "Animation")] public Vec3 ClimbCornerEndOffsetWithoutFootSupportOuterRight;
        [RTTI.Member(97, 0x6C0, "Animation")] public Vec3 ClimbCornerEndOffsetWithFootSupportOuterRight;
    }

    [RTTI.Serializable(0x5A7B714A7EFB9B90)]
    public class ParkourInitialAttachmentSettings
    {
        [RTTI.Member(0, 0x0)] public float DurationOnFoot;
        [RTTI.Member(1, 0x4)] public float DurationWithHandsWithFootSupport;
        [RTTI.Member(2, 0x8)] public float DurationWithHandsWithoutFootSupport;
        [RTTI.Member(3, 0xC)] public float FactorStrength;
    }

    [RTTI.Serializable(0x222450B01165F882)]
    public class ParkourLimbOffset
    {
        [RTTI.Member(0, 0x0)] public String JointName;
        [RTTI.Member(1, 0x10)] public Vec3 ResolvedOffset;
    }

    [RTTI.Serializable(0x3B4D7F67F258E013)]
    public class ParkourTransitionDetectionLimits
    {
        [RTTI.Member(0, 0x0)] public Array<Vec2> MeshVertices;
        [RTTI.Member(1, 0x10)] public EParkourTransitionLimitAxis MeshAxisX;
        [RTTI.Member(2, 0x11)] public EParkourTransitionLimitAxis MeshAxisY;
        [RTTI.Member(3, 0x18)] public Array<Triangle2D> MeshTriangles;
        [RTTI.Member(4, 0x28)] public EParkourTransitionLimitSimpleShape SimpleShapeType;
        [RTTI.Member(5, 0x30)] public Vec2 SimpleShapeRadius;
        [RTTI.Member(6, 0x40)] public EParkourTransitionLimitAxis SimpleShapeAxisX;
        [RTTI.Member(7, 0x41)] public EParkourTransitionLimitAxis SimpleShapeAxisY;
    }

    [RTTI.Serializable(0xD6DE84BF21FFEE51)]
    public class PartialAnimationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC61CE7391586C96C)]
    public class PartialAnimationEventResource : ScaleableTimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(2, 0x50, "Logic")] public Ref<CurveResource> BlendCurve;
        [RTTI.Member(3, 0x58, "Logic")] public Ref<PartialAnimationSettings> PartialAnimationSettings;
        [RTTI.Member(4, 0x60, "Logic")] public bool Loop;
    }

    [RTTI.Serializable(0xE21F303C4F35D7AE)]
    public class PartialAnimationSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public AnimationVariableSettings BoneSetSettings;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<ExternalAnimationConfiguration> AnimationConfiguration;
    }

    [RTTI.Serializable(0x3E92B19674193568)]
    public class ParticleControlledAttribute
    {
        [RTTI.Member(0, 0x0, "General")] public Ref<CurveResource> Curve;
        [RTTI.Member(1, 0x8, "General")] public EParticleControlledAttributeSource SourceValue;
        [RTTI.Member(2, 0x10, "General")] public String AttributeName;
    }

    [RTTI.Serializable(0xCFF7297B2B7EA598)]
    public class ParticleEmitter : Resource
    {
        [RTTI.Member(0, 0x0, "Settings")] public EEmitterShape Shape;
        [RTTI.Member(1, 0x0, "Settings")] public bool EmitOnSurface;
        [RTTI.Member(2, 0x2C, "Settings")] public EEmitAxis EmitAxis;
        [RTTI.Member(3, 0x30, "Settings")] public EParticleEmitRateUnits ParticleRateUnit;
        [RTTI.Member(4, 0x34, "Settings")] public int NumberOfStartParticles;
        [RTTI.Member(5, 0x38, "Settings")] public IParticleSysVar NumberOfStartParticlesVar;
        [RTTI.Member(6, 0x3C, "Settings")] public ParticleSysVar OffAxisVariable;
        [RTTI.Member(7, 0x44, "Settings")] public ParticleSysVar OffPlaneVariable;
        [RTTI.Member(8, 0x4C, "Settings")] public ParticleSysVar ParticleRateVariable;
        [RTTI.Member(9, 0x54, "Settings")] public float Delay;
        [RTTI.Member(10, 0x58, "Settings")] public float DelayVar;
        [RTTI.Member(11, 0x5C, "Settings")] public float Burst;
        [RTTI.Member(12, 0x60, "Settings")] public float BurstVar;
        [RTTI.Member(13, 0x64, "Settings")] public float Pause;
        [RTTI.Member(14, 0x68, "Settings")] public float PauseVar;
        [RTTI.Member(15, 0x6C, "Settings")] public float Duration;
        [RTTI.Member(16, 0x70, "Settings")] public float DurationVar;
        [RTTI.Member(17, 0x74, "Settings")] public ParticleSysVar EmitterLengthVar;
        [RTTI.Member(18, 0x7C, "Settings")] public ParticleSysVar EmitterWidthVar;
        [RTTI.Member(19, 0x84, "Settings")] public ParticleSysVar EmitterHeightVar;
        [RTTI.Member(20, 0x8C, "Settings")] public ParticleSysVar PositionX;
        [RTTI.Member(21, 0x94, "Settings")] public ParticleSysVar PositionY;
        [RTTI.Member(22, 0x9C, "Settings")] public ParticleSysVar PositionZ;
        [RTTI.Member(23, 0xA4, "Settings")] public ParticleSysVar RotationX;
        [RTTI.Member(24, 0xAC, "Settings")] public ParticleSysVar RotationY;
        [RTTI.Member(25, 0xB4, "Settings")] public ParticleSysVar RotationZ;
        [RTTI.Member(26, 0xC0, "Settings")] public float VelocityFactor;
        [RTTI.Member(27, 0xC4, "Settings")] public bool EmitInversed;
        [RTTI.Member(28, 0xD0, "Settings")] public Vec2 ClipRangeMinMax;
        [RTTI.Member(29, 0xE0, "Settings")] public Array<EmitterVertex> MeshEmitterVertices;
        [RTTI.Member(30, 0xF0, "Settings")] public EMeshEmitterSpawnOrder MeshEmitterSpawnOrder;
        [RTTI.Member(31, 0xF8, "Settings")] public Ref<StaticMeshResource> MeshEmitterMesh;
        [RTTI.Member(32, 0x100, "Settings")] public Ref<SoundResource> SoundResource;
        [RTTI.Member(33, 0x108, "Settings")] public Ref<GraphProgramResource> GraphProgramResource;
    }

    [RTTI.Serializable(0xDAFE7AE50E2404A3)]
    public class ParticleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF572848775C32E91)]
    public class ParticleEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<ParticleSystemResource> ParticleSystemResourceCensored;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(3, 0x50, "Logic")] public int FadeOutOffset;
        [RTTI.Member(4, 0x54, "Logic")] public bool SoftFadeOut;
        [RTTI.Member(5, 0x58, "Logic")] public Array<ParticleEventVirtualEmitter> VirtualEmitters;
    }

    [RTTI.Serializable(0x651D7F830A39485)]
    public class ParticleEventVirtualEmitter
    {
        [RTTI.Member(0, 0x0)] public int FrameOffset;
        [RTTI.Member(1, 0x10)] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0x8B0C728BA1FF71DD)]
    public class ParticleModifierSettings
    {
        [RTTI.Member(0, 0x0, "General")] public uint ActiveModifiers;
        [RTTI.Member(1, 0x8, "Size")] public Ref<CurveResource> SizeCurve;
        [RTTI.Member(2, 0x10, "Color")] public Ref<Gradient> ColorGradient;
        [RTTI.Member(3, 0x98, "Color")] public bool ModulateExternalColor;
        [RTTI.Member(4, 0x9C, "Rotation")] public ParticleSysVar RotationSpeedPitch;
        [RTTI.Member(5, 0xA4, "Rotation")] public ParticleSysVar RotationSpeedRoll;
        [RTTI.Member(6, 0xAC, "Rotation")] public ParticleSysVar RotationSpeedYaw;
        [RTTI.Member(7, 0xB4, "Rotation")] public float RotationFriction;
        [RTTI.Member(8, 0xC0, "Physics")] public Vec3 Gravity;
        [RTTI.Member(9, 0xD0, "Physics")] public ParticleSysValue Friction;
        [RTTI.Member(10, 0xE0, "Physics")] public bool UseFrictionCurve;
        [RTTI.Member(11, 0xE4, "Physics")] public float ForceFieldInfluence;
        [RTTI.Member(12, 0xE8, "Physics")] public float UseSurfaceRoundness;
        [RTTI.Member(13, 0xEC, "WaterInteraction")] public bool WaterInteractionEnabled;
        [RTTI.Member(14, 0xF0, "WaterInteraction")] public float WaterBuoyancyFactor;
        [RTTI.Member(15, 0xF4, "WaterInteraction")] public float WaterCollisionRadius;
        [RTTI.Member(16, 0xF8, "Physics")] public bool MoveWithCamera;
        [RTTI.Member(17, 0x100, "Brownian")] public ParticleSysValue BrownianMotion;
        [RTTI.Member(18, 0x110, "Brownian")] public float BrownianMotionFrequency;
        [RTTI.Member(19, 0x120, "Brownian")] public Vec3 BrownianMotionScale;
        [RTTI.Member(20, 0x130, "WorldCollision")] public EParticleCollisionMode CollisionMode;
        [RTTI.Member(21, 0x134, "WorldCollision")] public ParticleSysVar CollisionBounce;
        [RTTI.Member(22, 0x13C, "WorldCollision")] public ParticleSysVar CollisionSlide;
        [RTTI.Member(23, 0x144, "WorldCollision")] public bool StickOnImpact;
        [RTTI.Member(24, 0x145, "WorldCollision")] public bool DieOnImpact;
        [RTTI.Member(25, 0x148, "WorldCollision")] public float CollisionRadiusScale;
        [RTTI.Member(26, 0x14C, "WorldCollision")] public float CollisionDelay;
        [RTTI.Member(27, 0x150, "WorldCollision")] public float CollisionHardness;
        [RTTI.Member(28, 0x154, "WorldCollision")] public float CollisionDisableRange;
        [RTTI.Member(29, 0x158, "WorldCollision")] public MaterialType CollisionMaterialType;
        [RTTI.Member(30, 0x15A, "WorldCollision")] public int16 CollisionMask;
        [RTTI.Member(31, 0x15C, "WorldCollision")] public bool SpawnImpactEffects;
        [RTTI.Member(32, 0x160, "WorldCollision")] public float ImpactEffectVelocityThreshold;
        [RTTI.Member(33, 0x170, "FrustumTiling")] public Vec3 BoxSize;
        [RTTI.Member(34, 0x180, "FrustumTiling")] public float DepthOffset;
    }

    [RTTI.Serializable(0x8B8BD40B7690CE4E)]
    public class ParticlePropertySettings
    {
        [RTTI.Member(0, 0x0, "General")] public bool IsHighPriority;
        [RTTI.Member(1, 0x4, "General")] public EAxisType AxisLock;
        [RTTI.Member(2, 0x8, "General")] public ParticleSysVar LifeSpawn;
        [RTTI.Member(3, 0x10, "General")] public ParticleSysVar Velocity;
        [RTTI.Member(4, 0x18, "General")] public ParticleSysVar SizeSpawn;
        [RTTI.Member(5, 0x20, "General")] public ParticleSysVar AngleSpawnZ;
        [RTTI.Member(6, 0x28, "General")] public ParticleSysVar AngleSpawnX;
        [RTTI.Member(7, 0x30, "General")] public ParticleSysVar AngleSpawnY;
        [RTTI.Member(8, 0x40, "General")] public FRGBAColor BaseColor;
        [RTTI.Member(9, 0x50, "General")] public Array<Ref<ParticleSystemResource>> SpawningParticleSystems;
        [RTTI.Member(10, 0x60, "General")] public Array<Ref<PostProcessEffectorResource>> PostProcessEffectors;
        [RTTI.Member(11, 0x70, "General")] public Array<Ref<ForceFieldResource>> SpawningForceFields;
        [RTTI.Member(12, 0x80, "General")] public Array<Ref<StaticMeshResource>> SpawningMeshes;
        [RTTI.Member(13, 0x90, "General")] public Array<ParticleControlledAttribute> SpawnedMeshShaderVariables;
        [RTTI.Member(14, 0xA0, "General")] public bool SpawnLights;
        [RTTI.Member(15, 0xA1, "General")] public bool LightsEmitSpecular;
        [RTTI.Member(16, 0xA4, "General")] public float LightRangeScale;
        [RTTI.Member(17, 0xA8, "General")] public float LightIntensity;
        [RTTI.Member(18, 0xAC, "General")] public float LightColorSaturation;
        [RTTI.Member(19, 0xB0, "General")] public bool Spawn2DParticles;
        [RTTI.Member(20, 0xB4, "General")] public EParticleShape Shape;
        [RTTI.Member(21, 0xB8, "General")] public EParticlePivotAligment PivotAlignment;
        [RTTI.Member(22, 0xBC, "General")] public float Roundedness;
        [RTTI.Member(23, 0xC0, "General")] public float AspectRatio;
        [RTTI.Member(24, 0xC4, "General")] public bool VertexLighting;
        [RTTI.Member(25, 0xC8, "General")] public ESelfShadowMode SelfShadowMode;
        [RTTI.Member(26, 0xCC, "General")] public float SelfShadowStrength;
        [RTTI.Member(27, 0xD0, "General")] public ESortMode PerParticleSortMode;
        [RTTI.Member(28, 0xD4, "General")] public float LightingSaturation;
        [RTTI.Member(29, 0xD8, "General")] public float ParticleTranslucency;
        [RTTI.Member(30, 0xDC, "General")] public int MeshSubDivisions;
        [RTTI.Member(31, 0xE0, "Visibility")] public EParticleFadeMode FadeMode;
        [RTTI.Member(32, 0xE4, "Visibility")] public float FadeStartNear;
        [RTTI.Member(33, 0xE8, "Visibility")] public float FadeStartFar;
        [RTTI.Member(34, 0xEC, "Visibility")] public float FadeEndNear;
        [RTTI.Member(35, 0xF0, "Visibility")] public float FadeEndFar;
        [RTTI.Member(36, 0xF4, "General")] public bool UseObjectSpace;
        [RTTI.Member(37, 0xF8, "General")] public float MotionVectorScaleFactor;
        [RTTI.Member(38, 0x100, "General")] public Array<ParticleControlledAttribute> ParticleVertexAttributes;
    }

    [RTTI.Serializable(0x29E99D0D6B9F221D)]
    public class ParticleShaderVariable
    {
        [RTTI.Member(0, 0x0, "General")] public String VariableID;
        [RTTI.Member(1, 0x8, "General")] public float Value;
    }

    [RTTI.Serializable(0x163173D109A3C0AB)]
    public class ParticleSysValue
    {
        [RTTI.Member(0, 0x0)] public float Value;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> Curve;
    }

    [RTTI.Serializable(0x194294658B1F0803)]
    public class ParticleSysVar
    {
        [RTTI.Member(0, 0x0)] public float Value;
        [RTTI.Member(1, 0x4)] public float Variation;
    }

    [RTTI.Serializable(0x7C24817FF9D1EC2B)]
    public class ParticleSystemInstance : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
        [RTTI.Member(1, 0x250, "General")] public bool Active;
        [RTTI.Member(2, 0x270, "General")] public Ref<ParticleSystemResource> Resource;
    }

    [RTTI.Serializable(0xDD6660C40BA8CEBE)]
    public class ParticleSystemInstanceGame : ParticleSystemInstance
    {
    }

    [RTTI.Serializable(0xDBC784DD444B87D0)]
    public class ParticleSystemManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xC0EE855368DC3B93)]
    public class ParticleSystemResource : Resource
    {
        [RTTI.Member(0, 0x0, "Rendering")] public ESortOrder SortOrder;
        [RTTI.Member(1, 0x0, "Rendering")] public ESortMode SortMode;
        [RTTI.Member(2, 0x40, "Settings")] public ParticlePropertySettings PropertySettings;
        [RTTI.Member(3, 0x160, "Settings")] public ParticleModifierSettings ModifierSettings;
        [RTTI.Member(4, 0x2F0, "Objects")] public Array<Ref<ParticleSystemResource>> Resources;
        [RTTI.Member(5, 0x300, "Settings")] public bool SingleShot;
        [RTTI.Member(6, 0x301, "Settings")] public bool UseOcclusionCulling;
        [RTTI.Member(7, 0x304, "General")] public EParticleSystemUpdateMode UpdateMode;
        [RTTI.Member(8, 0x308, "General")] public float ClipDistance;
        [RTTI.Member(9, 0x30C, "General")] public float ClipDistanceNotVisible;
        [RTTI.Member(10, 0x310, "Objects")] public Array<Ref<ParticleEmitter>> Emitters;
        [RTTI.Member(11, 0x328, "Rendering")] public bool Stretch;
        [RTTI.Member(12, 0x329, "Rendering")] public bool RandomFlipU;
        [RTTI.Member(13, 0x32A, "Rendering")] public bool RandomFlipV;
        [RTTI.Member(14, 0x32C, "Rendering")] public float StretchFactor;
        [RTTI.Member(15, 0x330, "Rendering")] public bool UseConstantStretchFactor;
        [RTTI.Member(16, 0x331, "Rendering")] public bool UseScreenSpaceVelocityStretch;
        [RTTI.Member(17, 0x334, "Rendering")] public float TrailTextureScaleU;
        [RTTI.Member(18, 0x340, "Rendering")] public Ref<LightResource> LightResource;
        [RTTI.Member(19, 0x348, "Rendering")] public String LightIntensityGlobalRenderVarName;
        [RTTI.Member(20, 0x358, "Rendering")] public Ref<RenderEffectResource> RenderEffectResource;
        [RTTI.Member(21, 0x4F0, "Rendering")] public Ref<RenderEffectResource> LightSamplingRenderEffectRes;
        [RTTI.Member(22, 0x690, "Rendering")] public Array<ParticleShaderVariable> ShaderVariables;
        [RTTI.Member(23, 0x6A0, "Rendering")] public int DeltaU;
        [RTTI.Member(24, 0x6A4, "Rendering")] public int DeltaV;
        [RTTI.Member(25, 0x6A8, "Rendering")] public float SubTexAnimFreq;
        [RTTI.Member(26, 0x6AC, "Rendering")] public bool SubTexAnimRandom;
        [RTTI.Member(27, 0x6B0, "Rendering")] public int SubTexAnimStartFrame;
        [RTTI.Member(28, 0x6B4, "Rendering")] public EParticleSubTexAnimationSrc SubTexAnimAnimationSource;
        [RTTI.Member(29, 0x6B8, "Rendering")] public bool SubTexAnimUseSingleRow;
        [RTTI.Member(30, 0x6BC, "Rendering")] public int SubTexAnimSingleRowIndex;
        [RTTI.Member(31, 0x6C0, "General")] public Mat44 Orientation;
        [RTTI.Member(32, 0x708, "Rendering")] public float LodDistanceQuarterHalf;
        [RTTI.Member(33, 0x70C, "Rendering")] public float LodDistanceHalfFull;
        [RTTI.Member(34, 0x714, "Rendering")] public DrawableCullInfo CullInfo;
        [RTTI.Member(35, 0x718, "Rendering")] public bool UseLightSamplingBuffer;
        [RTTI.Member(36, 0x71C, "Rendering")] public ELightSamplingResolution LightSamplingResolution;
        [RTTI.Member(37, 0x720, "General")] public Ref<WeatherInfluenceFactor> WeatherInfluenceFactor;
        [RTTI.Member(38, 0x728, "General")] public Ref<GraphProgramResource> ProgramResource;
    }

    [RTTI.Serializable(0x1BA912A130FEF65C)]
    public class ParticleSystemSpeedModifierEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD41E2539E0DD04AF)]
    public class ParticleSystemSpeedModifierEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<CurveResource> CurveResource;
    }

    [RTTI.Serializable(0xE7ED0B32DDF73E51)]
    public class PartyMatchmakingInfo : RTTIObject
    {
    }

    [RTTI.Serializable(0xDD3205E84C7E92AB)]
    public class PartyMatchmakingService : RTTIObject
    {
    }

    [RTTI.Serializable(0x7FA5FD2436C4D8C0)]
    public class PatchCollisionVolume : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int NotBeforeBuildNumber;
        [RTTI.Member(1, 0x24)] public int NotAfterBuildNumber;
        [RTTI.Member(2, 0x28)] public String LevelID;
        [RTTI.Member(3, 0x30)] public int CollisionLayer;
        [RTTI.Member(4, 0x38)] public String Transform;
    }

    [RTTI.Serializable(0x9817BFA8FD400E68)]
    public class PatchedSpeakEventResource : SpeakEventResource
    {
        [RTTI.Member(0, 0x58, "Logic")] public Ref<SkeletonAnimationResource> OverrideAnimationResource;
    }

    [RTTI.Serializable(0xF6A41D771A49E379)]
    public class PathElement
    {
        [RTTI.Member(0, 0x0)] public Vec3Pack Position;
        [RTTI.Member(1, 0xC)] public float Time;
        [RTTI.Member(2, 0x10)] public Quat Rotation;
        [RTTI.Member(3, 0x20)] public Vec3Pack Scaling;
        [RTTI.Member(4, 0x2C)] public float Distance;
    }

    [RTTI.Serializable(0xD505769BB928ACB1)]
    public class PathHelperNodeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xED2C5C5AB45843FF)]
    public class PathHelperNodeComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xAEC97CD5FF5830DF)]
    public class PathHelperNodeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<PathHelperNodeResource>> PathHelpers;
        [RTTI.Member(1, 0x38, "Logic")] public String LocationProviderID;
    }

    [RTTI.Serializable(0xBDC4122A059A4F3F)]
    public class PathHelperNodeResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String ParentHelperName;
        [RTTI.Member(1, 0x30, "General")] public Ref<PathResource> PathResource;
        [RTTI.Member(2, 0x38, "General")] public EPathMode PathMode;
        [RTTI.Member(3, 0x3C, "General")] public float Speed;
        [RTTI.Member(4, 0x40, "General")] public bool Looping;
    }

    [RTTI.Serializable(0x1444F7EEF3566A91)]
    public class PathLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xB8F3AE8DC4026BA6)]
    public class PathLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> PositionLocator;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(2, 0x48, "Logic")] public int ClipOffset;
        [RTTI.Member(3, 0x4C, "Logic")] public float ClipSpeed;
        [RTTI.Member(4, 0x50, "Logic")] public bool RelativeToSequence;
    }

    [RTTI.Serializable(0x4C985D672FA0E4CD)]
    public class PathMover : Mover
    {
    }

    [RTTI.Serializable(0x5A896588287245F0)]
    public class PathMoverResource : MoverResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(1, 0x38, "Logic")] public EPathMode PathMode;
        [RTTI.Member(2, 0x3C, "Logic")] public bool Looping;
        [RTTI.Member(3, 0x40, "Logic")] public float Speed;
        [RTTI.Member(4, 0x44, "Logic")] public bool HighSyncFreq;
        [RTTI.Member(5, 0x45, "Logic")] public bool AlignUpWithWorld;
    }

    [RTTI.Serializable(0x8D41A2831E1730D2)]
    public class PathResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<PathElement> Samples;
    }

    [RTTI.Serializable(0x486853BF8468A050)]
    public class PatrolSpawnCommand : SpawnCommand
    {
        [RTTI.Member(0, 0x60, "Logic")] public Ref<AIPatrolPath> PatrolPath;
    }

    [RTTI.Serializable(0xEE0E45E2F3D604E0)]
    public class PausableEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x65F976982A0CAA4B)]
    public class PausableEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Event")] public int PauseFrame;
    }

    [RTTI.Serializable(0x45B492401100B1A3)]
    public class PauseEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xF25303766FC61A10)]
    public class PauseEventResource : EventResource
    {
    }

    [RTTI.Serializable(0x8F05302D40DD71B0)]
    public class PegBase
    {
        [RTTI.Member(0, 0x0, "General")] public uint16 ID;
        [RTTI.Member(1, 0x8, "General")] public float Position;
    }

    [RTTI.Serializable(0x65B2A4FDC9AEA118)]
    public class PerTileVolumeSampler : CoreObject
    {
        [RTTI.Member(0, 0x20)] public BoundingBox3 Bounds;
        [RTTI.Member(1, 0x40)] public Ref<Texture> DistanceField;
        [RTTI.Member(2, 0x48)] public Ref<Texture> UpperLowerHeightField;
    }

    [RTTI.Serializable(0x6574758A107629BF)]
    public class Perk : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PerkLevel> FirstPerkLevel;
    }

    [RTTI.Serializable(0xBA858273D85DAB8C)]
    public class PerkCategory : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<Perk>> Perks;
        [RTTI.Member(2, 0x40, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0x7B6285C7F5D67D23)]
    public class PerkDurationMapping : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<PerkLevel> PerkLevel;
        [RTTI.Member(1, 0x10)] public int AdditionalSegments;
    }

    [RTTI.Serializable(0xB6E62803A5B65E3B)]
    public class PerkLevel : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int RequiredLevel;
        [RTTI.Member(1, 0x2C, "Logic")] public int Tier;
        [RTTI.Member(2, 0x30, "Logic")] public int Cost;
        [RTTI.Member(3, 0x38, "Logic")] public Array<Ref<EntityComponentResource>> ComponentResources;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<EntitlementResource> RequiredEntitlement;
        [RTTI.Member(5, 0x58, "Logic")] public Array<Ref<PerkLevel>> RequiredPerks;
        [RTTI.Member(6, 0x68, "Logic")] public Array<Ref<PerkLevel>> NextPerkLevel;
        [RTTI.Member(7, 0x78, "Logic")] public Ref<PerkLevel> ReplacedByPerkLevel;
        [RTTI.Member(8, 0x88, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(9, 0x90, "Logic")] public Ref<LocalizedTextResource> DisplayDescription;
        [RTTI.Member(10, 0x98, "Logic")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(11, 0xA0, "Logic")] public Ref<UITexture> UIFoundryIconLocked;
        [RTTI.Member(12, 0xA8, "Logic")] public Ref<UITexture> UIFoundryIconUnlocked;
        [RTTI.Member(13, 0xB0, "Logic")] public Ref<MovieResource> Movie;
    }

    [RTTI.Serializable(0x68CAE47293B7ED70)]
    public class PerkPointQuestReward : SummableQuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0xBBB431F58ABB51F9)]
    public class PerkQuestReward : QuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<PerkLevel> Perk;
    }

    [RTTI.Serializable(0xC65CD85E7DA9EA62)]
    public class PerkRewardGroup : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<CPtr<PerkSet>> PerkSets;
    }

    [RTTI.Serializable(0x8D195DD329FF7055)]
    public class PerkSet : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> DisplayName;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<Texture> IconNewlyObtained;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<Texture> IconObtained;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<Texture> IconNotObtained;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<UITexture> UIIconNewlyObtained;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<UITexture> UIIconObtained;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<UITexture> UIIconNotObtained;
        [RTTI.Member(7, 0x60, "Logic")] public Array<Ref<PerkLevel>> Perks;
        [RTTI.Member(8, 0x70, "Logic")] public Ref<PerkRewardGroup> Group;
    }

    [RTTI.Serializable(0x262F39CA748E1874)]
    public class PerkSetQuestReward : QuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<PerkSet> PerkSet;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<QuestRewardSet> QuestRewardSetForPerks;
    }

    [RTTI.Serializable(0x17A6848376D08B5D)]
    public class PerkUpgradeItemComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x9F0271B60AB40FC2)]
    public class PerkUpgradeItemComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<Perk> Perk;
        [RTTI.Member(1, 0x30, "Logic")] public int Levels;
    }

    [RTTI.Serializable(0xDE6AB40F783F0495)]
    public class PhotoMode : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x4BD7E9F7967EDA63)]
    public class PhotoModeBodyPoseLookAtSettings : CoreObject
    {
        [RTTI.Member(0, 0x20)] public bool LookAtAllowed;
        [RTTI.Member(1, 0x24)] public float WeightSpine;
        [RTTI.Member(2, 0x28)] public float WeightNeck;
        [RTTI.Member(3, 0x2C)] public float WeightHead;
    }

    [RTTI.Serializable(0x26381693D2218D04)]
    public class PhotoModeBodyPoseRequiredBooleanFact
    {
        [RTTI.Member(0, 0x0)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0x77C7986FEA06FA82)]
    public class PhotoModeBodyPoseSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public Ref<SkeletonAnimationResource> BodyAnimation;
        [RTTI.Member(2, 0x10)] public float Time;
        [RTTI.Member(3, 0x14)] public float Duration;
        [RTTI.Member(4, 0x18)] public float PlaybackSpeed;
        [RTTI.Member(5, 0x1C)] public bool Loop;
        [RTTI.Member(6, 0x1D)] public bool PingPong;
        [RTTI.Member(7, 0x20)] public int RepeatCount;
        [RTTI.Member(8, 0x24)] public float EndTime;
        [RTTI.Member(9, 0x28, "Requirements")] public Array<PhotoModeBodyPoseRequiredBooleanFact> Facts;
        [RTTI.Member(10, 0x38, "LookAt")] public float LookAtNeutralHeadingOffset;
        [RTTI.Member(11, 0x40, "LookAt")] public Ref<PhotoModeBodyPoseLookAtSettings> LookAtSettings;
        [RTTI.Member(12, 0x48, "SlopeAngle")] public bool AlignWithSlopeNormal;
        [RTTI.Member(13, 0x4C, "SlopeAngle")] public float MaxSlopeAngle;
    }

    [RTTI.Serializable(0xFF548D7DBD57B0A5)]
    public class PhotoModeColorizeSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public StreamingRef<ColorizeSettingsResource> ColorizeSettings;
    }

    [RTTI.Serializable(0x444386566CBDC0EE)]
    public class PhotoModeDepthOfFieldApertureSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0x6C1728DAA22D0913)]
    public class PhotoModeFacialExpressionSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public Ref<SkeletonAnimationResource> FacialAnimation;
        [RTTI.Member(2, 0x10)] public int Frame;
    }

    [RTTI.Serializable(0xAFEC2FF4D4468EF3)]
    public class PhotoModeLogoSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public String MenuVisibilityFlag;
    }

    [RTTI.Serializable(0xD4936379A1F81899)]
    public class PhotoModeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Conditions")] public Ref<ConditionResource> CanControlCameraCondition;
        [RTTI.Member(1, 0x30, "Conditions")] public Ref<BooleanFact> InPhotoModeFact;
        [RTTI.Member(2, 0x38, "Pan")] public FRange PanXRange;
        [RTTI.Member(3, 0x40, "Pan")] public float PanXSpeed;
        [RTTI.Member(4, 0x44, "Pan")] public FRange PanZRange;
        [RTTI.Member(5, 0x4C, "Pan")] public float PanZSpeed;
        [RTTI.Member(6, 0x50, "FOV")] public IRange FOVRange;
        [RTTI.Member(7, 0x58, "FOV")] public int FOVIncrement;
        [RTTI.Member(8, 0x5C, "ViewRoll")] public IRange ViewRollRange;
        [RTTI.Member(9, 0x64, "ViewRoll")] public int ViewRollIncrement;
        [RTTI.Member(10, 0x68, "ViewRange")] public FRange ViewRangeScaleMultiplierRange;
        [RTTI.Member(11, 0x70, "ViewRange")] public float ViewRangeScaleChangePerSecond;
        [RTTI.Member(12, 0x74, "TimeOfDay")] public int TimeOfDayIncrement;
        [RTTI.Member(13, 0x78, "TimeOfDay")] public Ref<CurveResource> TimeOfDayChangeCurve;
        [RTTI.Member(14, 0x80, "Overlays")] public Array<PhotoModeTextureSettings> OverlayTextures;
        [RTTI.Member(15, 0x90, "Borders")] public Array<PhotoModeTextureSettings> BorderTextures;
        [RTTI.Member(16, 0xA0, "Logos")] public Array<PhotoModeLogoSettings> SmallLogoSettings;
        [RTTI.Member(17, 0xB0, "Colorize")] public Array<PhotoModeColorizeSettings> ColorizeSettings;
        [RTTI.Member(18, 0xC0, "Vignette")] public Array<PhotoModeVignetteSizeSettings> VignetteSizeSettings;
        [RTTI.Member(19, 0xD0, "DepthOfField")] public Array<PhotoModeDepthOfFieldApertureSettings> ApertureSettings;
        [RTTI.Member(20, 0xE0, "DepthOfField")] public IRange FocusDistanceRange;
        [RTTI.Member(21, 0xE8, "DepthOfField")] public int FocusDistanceIncrement;
        [RTTI.Member(22, 0xF0, "DepthOfField")] public Ref<CurveResource> FocusBracketCurve;
        [RTTI.Member(23, 0xF8, "DepthOfField")] public Ref<CurveResource> FocusFalloffCurve;
        [RTTI.Member(24, 0x100, "DepthOfField")] public Ref<CurveResource> MaxFuzzyNearCurve;
        [RTTI.Member(25, 0x108, "DepthOfField")] public Ref<CurveResource> MaxFuzzyFarCurve;
        [RTTI.Member(26, 0x110, "Grain")] public Ref<GrainSettingsResource> GrainSettings;
        [RTTI.Member(27, 0x118, "Grain")] public Ref<GrainSettingsResource> EmptyGrainSettings;
        [RTTI.Member(28, 0x120, "Poses")] public Array<PhotoModeBodyPoseSettings> BodyPoses;
        [RTTI.Member(29, 0x130, "Poses")] public Array<BodyPoseSwitchDisallowBoolProperty> DisallowBodyPoseSwitchProperties;
        [RTTI.Member(30, 0x140, "Poses")] public Array<PhotoModeFacialExpressionSettings> FacialExpressions;
        [RTTI.Member(31, 0x150, "Greetings")] public Ref<GraphProgramResource> GreetingsTextGraphResource;
        [RTTI.Member(32, 0x158, "Greetings")] public Ref<LocalizedTextResource> GreetingsText;
        [RTTI.Member(33, 0x160, "Greetings")] public Ref<LocalizedTextResource> FallbackGreetingsText;
        [RTTI.Member(34, 0x168, "Greetings")] public Ref<LocalizedTextResource> DiscoverableAreaType;
    }

    [RTTI.Serializable(0xF77F4336379430F6)]
    public class PhotoModeTextureSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<LocalizedTextResource> OptionName;
        [RTTI.Member(1, 0x8)] public StreamingRef<UITexture> Texture_16_9;
        [RTTI.Member(2, 0x28)] public StreamingRef<UITexture> Texture_1_1;
        [RTTI.Member(3, 0x48)] public StreamingRef<UITexture> Texture_4_3;
        [RTTI.Member(4, 0x68)] public StreamingRef<UITexture> Texture_21_9;
        [RTTI.Member(5, 0x88)] public StreamingRef<UITexture> Texture_32_9;
        [RTTI.Member(6, 0xA8)] public Ref<MenuStyleClass> Style;
    }

    [RTTI.Serializable(0xA63860725DDB3FE4)]
    public class PhotoModeVignetteSizeSettings
    {
        [RTTI.Member(0, 0x0)] public float InnerRadius;
        [RTTI.Member(1, 0x4)] public float OuterRadius;
    }

    [RTTI.Serializable(0x297F2449ECFFB2F6)]
    public class PhysicsBallAndSocketConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(0, 0x40, "BallAndSocketConstraint")] public Vec3 Pivot;
    }

    [RTTI.Serializable(0xD52FFEC1D11EFF84)]
    public class PhysicsBoxPhantom : PhysicsPhantom
    {
    }

    [RTTI.Serializable(0xC841483BB9029400)]
    public class PhysicsCharacterMover : PhysicsInstance
    {
    }

    [RTTI.Serializable(0x8E050B88CE1B9024)]
    public class PhysicsCharacterMoverProxy : PhysicsCharacterMover
    {
    }

    [RTTI.Serializable(0xC7039BCE138C2FF0)]
    public class PhysicsCharacterMoverResource : PhysicsResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public float StandingHeight;
        [RTTI.Member(1, 0x3C, "Logic")] public float CrouchingHeight;
        [RTTI.Member(2, 0x40, "Logic")] public float MiniHeight;
        [RTTI.Member(3, 0x44, "Logic")] public float Radius;
        [RTTI.Member(4, 0x48, "Logic")] public float Mass;
        [RTTI.Member(5, 0x4C, "Logic")] public float Strength;
        [RTTI.Member(6, 0x50, "Logic")] public float InnerScale;
        [RTTI.Member(7, 0x54, "Logic")] public float ParkourRadius;
        [RTTI.Member(8, 0x58, "Logic")] public float ParkourHeight;
        [RTTI.Member(9, 0x5C, "Logic")] public float SwimmingRadius;
        [RTTI.Member(10, 0x60, "Logic")] public float SwimmingHeight;
        [RTTI.Member(11, 0x64, "Representation")] public MaterialType MaterialType;
    }

    [RTTI.Serializable(0x915079FE4B6A3DB7)]
    public class PhysicsCharacterMoverRigidBody : PhysicsCharacterMover
    {
    }

    [RTTI.Serializable(0x614101C23E96EF20)]
    public class PhysicsCollapsedCollisionResource : PhysicsCollisionResource
    {
    }

    [RTTI.Serializable(0xFA549AC01B52DFEE)]
    public class PhysicsCollisionGroupsResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<CollisionGroup> CollisionGroups;
    }

    [RTTI.Serializable(0x7E05F1859F9877E4)]
    public class PhysicsCollisionInstance : PhysicsInstance
    {
        [RTTI.Member(0, 0x88, "Physics")] public WorldTransform Orientation;
        [RTTI.Member(1, 0xC8, "Physics")] public bool Active;
    }

    [RTTI.Serializable(0x325766D1175671D7)]
    public class PhysicsCollisionResource : PhysicsResource
    {
        [RTTI.Member(0, 0x0, "General")] public PhysicsCollisionFilterInfo CollisionFilterInfo;
        [RTTI.Member(1, 0x40, "General")] public EPhysicsShapeType ShapeType;
        [RTTI.Member(2, 0x44, "General")] public EPhysicsQualityType QualityType;
        [RTTI.Member(3, 0x50, "General")] public Vec3 CenterOfMass;
        [RTTI.Member(4, 0x64, "General")] public float Mass;
        [RTTI.Member(5, 0x68, "General")] public float Density;
        [RTTI.Member(6, 0x6C, "General")] public float Restitution;
        [RTTI.Member(7, 0x70, "General")] public float Friction;
        [RTTI.Member(8, 0x74, "General")] public float LinearDamping;
        [RTTI.Member(9, 0x78, "General")] public float AngularDamping;
        [RTTI.Member(10, 0x7C, "General")] public float BuoyancyFactor;
        [RTTI.Member(11, 0x80, "General")] public float DragFactor;
        [RTTI.Member(12, 0x84, "General")] public float GravityFactor;
        [RTTI.Member(13, 0x90, "General")] public Vec3 CenterOfMassOffset;
        [RTTI.Member(14, 0xA0, "General")] public float MaxAngularVelocity;
        [RTTI.Member(15, 0xA4, "General")] public float MaxLinearVelocity;
        [RTTI.Member(16, 0xA8, "General")] public float MaxContactImpulse;
        [RTTI.Member(17, 0xB0, "Generated")] public Ref<PhysicsShapeResource> PhysicsShapeResource;
    }

    [RTTI.Serializable(0x53E69BD64F1838A5)]
    public class PhysicsConstraintInstance : CoreObject
    {
    }

    [RTTI.Serializable(0xD71F073AF69D2F1F)]
    public class PhysicsConstraintResource : PhysicsResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public float BreakThreshold;
    }

    [RTTI.Serializable(0xDC22CE9FC510147B)]
    public class PhysicsContactEffectSystemSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Global")] public int MaxObjectPairs;
        [RTTI.Member(1, 0x2C, "Global")] public float MinBounceImpulse;
        [RTTI.Member(2, 0x30, "Global")] public float ContactTimeUntilResting;
        [RTTI.Member(3, 0x34, "PerObjectPair")] public float MinDelayAfterBounce;
        [RTTI.Member(4, 0x38, "PerObjectPair")] public int MaxSlidingContacts;
        [RTTI.Member(5, 0x3C, "PerObjectPair")] public int MaxRollingContacts;
    }

    [RTTI.Serializable(0x8FCFFE974C1A5DF)]
    public class PhysicsDamageImpulseModifier
    {
        [RTTI.Member(0, 0x0)] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x8)] public float ImpulseModifier;
    }

    [RTTI.Serializable(0xAB2761AF63663C6C)]
    public class PhysicsFixedConstraintResource : PhysicsConstraintResource
    {
    }

    [RTTI.Serializable(0x15911E4F0DFC63A5)]
    public class PhysicsGravityPocket : PhysicsInstance
    {
    }

    [RTTI.Serializable(0x57FF97DE870A3A86)]
    public class PhysicsGravityPocketResource : PhysicsResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public bool CentricGravity;
        [RTTI.Member(1, 0x40, "Logic")] public Vec3 Gravity;
        [RTTI.Member(2, 0x50, "Logic")] public Vec3 GravityCenterLocalOffset;
        [RTTI.Member(3, 0x60, "Logic")] public bool Repulsive;
        [RTTI.Member(4, 0x61, "Logic")] public bool InteractWithRestingObjects;
        [RTTI.Member(5, 0x62, "Logic")] public bool UsePocketOrientation;
        [RTTI.Member(6, 0x68, "Logic")] public Ref<PhysicsCollisionResource> CollisionResource;
    }

    [RTTI.Serializable(0x3F071987468350E)]
    public class PhysicsHeightMapOffsetCollisionResource : PhysicsCollisionResource, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(0, 0xC0, "Physics")] public Ref<PhysicsCollisionResource> MapCollisionResource;
        [RTTI.Member(1, 0xC8, "Physics")] public float Offset;
    }

    [RTTI.Serializable(0x70984C2CF4D62844)]
    public class PhysicsHingeConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(0, 0x40, "HingeConstraint")] public Vec3 Pivot;
        [RTTI.Member(1, 0x50, "HingeConstraint")] public Vec3 Axis;
    }

    [RTTI.Serializable(0xF3239B41FF86D328)]
    public class PhysicsImpulseEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xAF716D383DD08706)]
    public class PhysicsImpulseEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<LocatorResource> SourceLocatorResource;
        [RTTI.Member(2, 0x40, "Logic")] public float ImpulseModule;
    }

    [RTTI.Serializable(0xF5B8B4F74AD083D3)]
    public class PhysicsInstance : CoreObject
    {
        [RTTI.Member(0, 0x0, "Physics")] public PhysicsCollisionFilterInfo CollisionFilterInfo;
        [RTTI.Member(1, 0x20, "Physics")] public Ref<PhysicsResource> Resource;
    }

    [RTTI.Serializable(0x4FBBD90194186A97)]
    public class PhysicsLimitedHingeConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(0, 0x40, "LimitedHingeConstraint")] public Vec3 Pivot;
        [RTTI.Member(1, 0x50, "LimitedHingeConstraint")] public Vec3 Axis;
        [RTTI.Member(2, 0x60, "LimitedHingeConstraint")] public float MaxFrictionTorque;
        [RTTI.Member(3, 0x64, "LimitedHingeConstraint")] public float MinAngularLimit;
        [RTTI.Member(4, 0x68, "LimitedHingeConstraint")] public float MaxAngularLimit;
        [RTTI.Member(5, 0x6C, "LimitedHingeConstraint")] public float AngularLimitsTauFactor;
        [RTTI.Member(6, 0x70, "LimitedHingeConstraint")] public Ref<PhysicsMotorResource> PhysicsMotorResource;
    }

    [RTTI.Serializable(0x2EA16422CA9F6C4)]
    public class PhysicsModelMover : Mover
    {
    }

    [RTTI.Serializable(0x3CAB9B75E0AE4232)]
    public class PhysicsModelMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0x8360B8245BE5C66)]
    public class PhysicsMotorResource : PhysicsResource
    {
    }

    [RTTI.Serializable(0x5E3542BF417F04A3)]
    public class PhysicsMover : Mover
    {
    }

    [RTTI.Serializable(0x5CBC4466E0309A0A)]
    public class PhysicsMoverResource : MoverResource
    {
        [RTTI.Member(0, 0x30, "General")] public bool InitiallyActive;
        [RTTI.Member(1, 0x34, "NetworkedPhysics")] public float IgnoreLimit;
        [RTTI.Member(2, 0x38, "NetworkedPhysics")] public float ImpulseLimit;
        [RTTI.Member(3, 0x3C, "NetworkedPhysics")] public float AngleIgnoreLimit;
        [RTTI.Member(4, 0x40, "NetworkedPhysics")] public float AngleImpulseLimit;
        [RTTI.Member(5, 0x44, "NetworkedPhysics")] public float InterpolatedTeleportLimit;
        [RTTI.Member(6, 0x48, "General")] public Array<PhysicsDamageImpulseModifier> DamageImpulseModifiers;
        [RTTI.Member(7, 0x58, "General")] public String BoneToReset;
    }

    [RTTI.Serializable(0x3F3D405D0A0D40BF)]
    public class PhysicsMultiShapeResource : PhysicsShapeResource
    {
        [RTTI.Member(0, 0x30, "General")] public Array<Ref<PhysicsShapeResource>> Parts;
    }

    [RTTI.Serializable(0xD370414E55629CF0)]
    public class PhysicsPhantom
    {
    }

    [RTTI.Serializable(0x203A0B65B2653DF)]
    public class PhysicsPositionMotorResource : PhysicsMotorResource
    {
        [RTTI.Member(0, 0x38, "PositionMotor")] public float MinForce;
        [RTTI.Member(1, 0x3C, "PositionMotor")] public float MaxForce;
        [RTTI.Member(2, 0x40, "PositionMotor")] public float Tau;
        [RTTI.Member(3, 0x44, "PositionMotor")] public float Damping;
        [RTTI.Member(4, 0x48, "PositionMotor")] public float ProportionalRecoveryVelocity;
        [RTTI.Member(5, 0x4C, "PositionMotor")] public float ConstantRecoveryVelocity;
    }

    [RTTI.Serializable(0xF58709ED2647E665)]
    public class PhysicsPrismaticConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(0, 0x40, "PrismaticConstraint")] public Vec3 Pivot;
        [RTTI.Member(1, 0x50, "PrismaticConstraint")] public Vec3 Axis;
        [RTTI.Member(2, 0x60, "PrismaticConstraint")] public float MinLinearLimit;
        [RTTI.Member(3, 0x64, "PrismaticConstraint")] public float MaxLinearLimit;
        [RTTI.Member(4, 0x68, "PrismaticConstraint")] public float MaxFrictionForce;
        [RTTI.Member(5, 0x70, "PrismaticConstraint")] public Ref<PhysicsMotorResource> PhysicsMotorResource;
    }

    [RTTI.Serializable(0xFCE5CEABA3B1BE47)]
    public class PhysicsRagdollConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(0, 0x40, "RagdollConstraint")] public Vec3 Pivot;
        [RTTI.Member(1, 0x50, "RagdollConstraint")] public Vec3 PlaneAxis;
        [RTTI.Member(2, 0x60, "RagdollConstraint")] public float PlaneMinAngularLimit;
        [RTTI.Member(3, 0x64, "RagdollConstraint")] public float PlaneMaxAngularLimit;
        [RTTI.Member(4, 0x68, "RagdollConstraint")] public Ref<PhysicsMotorResource> PlanePhysicsMotorResource;
        [RTTI.Member(5, 0x70, "RagdollConstraint")] public Vec3 TwistAxis;
        [RTTI.Member(6, 0x80, "RagdollConstraint")] public float TwistMinAngularLimit;
        [RTTI.Member(7, 0x84, "RagdollConstraint")] public float TwistMaxAngularLimit;
        [RTTI.Member(8, 0x88, "RagdollConstraint")] public Ref<PhysicsMotorResource> TwistPhysicsMotorResource;
        [RTTI.Member(9, 0x90, "RagdollConstraint")] public float ConeMin;
        [RTTI.Member(10, 0x94, "RagdollConstraint")] public float ConeMax;
        [RTTI.Member(11, 0x98, "RagdollConstraint")] public Ref<PhysicsMotorResource> ConePhysicsMotorResource;
        [RTTI.Member(12, 0xA0, "RagdollConstraint")] public float MaxFrictionTorque;
        [RTTI.Member(13, 0xA4, "RagdollConstraint")] public float AngularLimitsTauFactor;
        [RTTI.Member(14, 0xA8, "RagdollConstraint")] public float MaxLinearImpulse;
        [RTTI.Member(15, 0xAC, "RagdollConstraint")] public float MaxAngularImpulse;
    }

    [RTTI.Serializable(0xEF272AFA6F0D1920)]
    public class PhysicsRagdollInstance : PhysicsInstance
    {
    }

    [RTTI.Serializable(0xE547B6B54FE8B479)]
    public class PhysicsResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public float TimeItTakesToRefloat;
        [RTTI.Member(1, 0x2C, "General")] public float TimeStaysAfloat;
        [RTTI.Member(2, 0x30, "General")] public float TimeToSink;
        [RTTI.Member(3, 0x34, "General")] public float FactorForceFields;
    }

    [RTTI.Serializable(0x10703F68DACEEA67)]
    public class PhysicsSkeleton : PhysicsResource
    {
        [RTTI.Member(0, 0x38)] public Array<PhysicsSkeletonBone> Bones;
    }

    [RTTI.Serializable(0x48AEB53E8C327D72)]
    public class PhysicsSkeletonBone
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public int ParentIndex;
        [RTTI.Member(2, 0x10)] public Mat44 ReferencePose;
    }

    [RTTI.Serializable(0x9B657A5EE9B4D076)]
    public class PhysicsStiffSpringConstraintResource : PhysicsConstraintResource
    {
        [RTTI.Member(0, 0x40, "StiffSpringConstraint")] public Vec3 Pivot;
        [RTTI.Member(1, 0x50, "StiffSpringConstraint")] public float Length;
    }

    [RTTI.Serializable(0x397794A6F3EA56B0)]
    public class PhysicsVelocityMotorResource : PhysicsMotorResource
    {
        [RTTI.Member(0, 0x38, "VelocityMotor")] public float Tau;
        [RTTI.Member(1, 0x3C, "VelocityMotor")] public float VelocityTarget;
    }

    [RTTI.Serializable(0x59E945C542F9EA8B)]
    public class PhysicsWaterPool : PhysicsWaterPoolBase
    {
    }

    [RTTI.Serializable(0x5015F1A1603817EC)]
    public class PhysicsWaterPoolBase : PhysicsInstance
    {
        [RTTI.Member(0, 0x90, "General")] public WorldTransform WorldTransform;
    }

    [RTTI.Serializable(0xBE8795117F111BB2)]
    public class PhysicsWaterPoolBaseResource : PhysicsResource
    {
        [RTTI.Member(0, 0x38, "General")] public float Buoyancy;
        [RTTI.Member(1, 0x3C, "General")] public float FluidDensity;
        [RTTI.Member(2, 0x40, "General")] public float DragCoefficient;
        [RTTI.Member(3, 0x48, "General")] public Ref<PhysicsCollisionResource> CollisionResource;
    }

    [RTTI.Serializable(0xDD347A4AF0FFD597)]
    public class PhysicsWaterPoolFromHeightMap : PhysicsWaterPoolBase
    {
    }

    [RTTI.Serializable(0x8984B2BEDA77C1E2)]
    public class PhysicsWaterPoolFromHeightMapResource : PhysicsWaterPoolBaseResource
    {
    }

    [RTTI.Serializable(0xF26340358E9246D)]
    public class PhysicsWaterPoolResource : PhysicsWaterPoolBaseResource
    {
    }

    [RTTI.Serializable(0x6442AE87FFA13D2F)]
    public class PhysicsWorld : CoreObject
    {
    }

    [RTTI.Serializable(0xE5B574D30E6F542C)]
    public class PickUpAnimationAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<PickUpAnimationTypeResource> PickUpAnimationTypeResource;
    }

    [RTTI.Serializable(0x6321CDF85C595BEE)]
    public class PickUpAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xAD6946A34C7E9DE0)]
    public class PickUpAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Animation")] public String PickUpAnimationName;
        [RTTI.Member(1, 0x30, "Animation")] public String PickUpAngleAnimationName;
        [RTTI.Member(2, 0x38, "Animation")] public String PickUpHeightAnimationName;
        [RTTI.Member(3, 0x40, "Animation")] public String PickUpAnimationTag;
        [RTTI.Member(4, 0x48, "Animation")] public String PickUpTypeAnimationName;
        [RTTI.Member(5, 0x50, "Animation")] public String PickUpEventName;
        [RTTI.Member(6, 0x58, "Animation")] public float PickUpEventTimeout;
        [RTTI.Member(7, 0x60, "Loot")] public Ref<BooleanFact> IsLootingFact;
    }

    [RTTI.Serializable(0x64E7610B724CFA1A)]
    public class PickUpAnimationTypeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int PickUpType;
        [RTTI.Member(1, 0x2C, "Logic")] public bool IsPickUpWhileSwimmingAllowed;
        [RTTI.Member(2, 0x2D, "Logic")] public bool IsPickUpWhileRidingMountAllowed;
        [RTTI.Member(3, 0x2E, "Logic")] public EPickUpAnimationWieldDirective WieldDirective;
        [RTTI.Member(4, 0x30, "Logic")] public float MinimumPlayAnimationTime;
    }

    [RTTI.Serializable(0xCA9D54E0A33F4C39)]
    public class PickUpComponent : PickUpComponentBase
    {
    }

    [RTTI.Serializable(0x67DE99E4DDCC33E0)]
    public class PickUpComponentBase : EntityComponent
    {
    }

    [RTTI.Serializable(0xC834A53857E5D03)]
    public class PickUpComponentBaseRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x412B1FD5A4DABC11)]
    public class PickUpComponentBaseResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Loot")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(1, 0x30, "Loot")] public Vec3 UseLocationWSOffset;
        [RTTI.Member(2, 0x40, "Loot")] public Vec3 PickUpPositionLSOffsetForAnimation;
        [RTTI.Member(3, 0x50, "Loot")] public bool StowWeaponOnUse;
        [RTTI.Member(4, 0x58, "Loot")] public String HelperName;
        [RTTI.Member(5, 0x60, "Loot")] public Ref<EffectComponentResource> PickupEffectComponentResource;
        [RTTI.Member(6, 0x68, "Loot")] public Ref<PickUpAnimationTypeResource> PickUpAnimationTypeResource;
        [RTTI.Member(7, 0x70, "Loot")] public bool MustPlayPickUpAnimation;
        [RTTI.Member(8, 0x78, "Representation")] public Ref<SoundResource> PickupSoundResource;
        [RTTI.Member(9, 0x80, "Logic")] public Array<Ref<EntityComponentResource>> EnabledEntityComponentResources;
        [RTTI.Member(10, 0x90, "Water")] public float MaxUnderwaterDepth;
    }

    [RTTI.Serializable(0xB56E7147F8D2976A)]
    public class PickUpComponentResource : PickUpComponentBaseResource
    {
        [RTTI.Member(0, 0xA0, "PickUp")] public Ref<EntityResource> Item;
        [RTTI.Member(1, 0xA8, "PickUp")] public int Amount;
        [RTTI.Member(2, 0xB0, "PickUp")] public Ref<LocalizedTextResource> FullFailureMessage;
        [RTTI.Member(3, 0xB8, "PickUp")] public Ref<GraphProgramResource> PickUpAmountModifierGraphProgramResource;
        [RTTI.Member(4, 0xC0, "PickUp")] public Ref<PickUpReactivationType> ReactivationType;
    }

    [RTTI.Serializable(0x98063835E1CA7FFB)]
    public class PickUpControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x53236A50A4D544F8)]
    public class PickUpControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PerkLevel> HeavyPickUpPerk;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<ConditionResource> ShowAllPickupEffectsConditionResource;
    }

    [RTTI.Serializable(0xFCC397B393A92CD9)]
    public class PickUpGraphComponent : PickUpComponentBase
    {
    }

    [RTTI.Serializable(0xDB8F9747DEE824BB)]
    public class PickUpGraphComponentResource : PickUpComponentBaseResource
    {
        [RTTI.Member(0, 0xA0, "GraphPrograms")] public Ref<GraphProgramResource> EnabledGraph;
        [RTTI.Member(1, 0xA8, "GraphPrograms")] public Ref<OverrideGraphProgramResource> OverrideEnabledGraph;
        [RTTI.Member(2, 0xB0, "GraphPrograms")] public Ref<GraphProgramResource> UsabilityGraph;
        [RTTI.Member(3, 0xB8, "GraphPrograms")] public Ref<OverrideGraphProgramResource> OverrideUsabilityGraph;
        [RTTI.Member(4, 0xC0, "GraphPrograms")] public Ref<GraphProgramResource> UseGraph;
        [RTTI.Member(5, 0xC8, "GraphPrograms")] public Ref<OverrideGraphProgramResource> OverrideUseGraph;
    }

    [RTTI.Serializable(0xB1A5F879197F364D)]
    public class PickUpItemAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EquipSlotType> EquipInSlot;
        [RTTI.Member(1, 0x38, "Logic")] public int EquipSlotIndex;
        [RTTI.Member(2, 0x3C, "Logic")] public bool UniqueEquiped;
        [RTTI.Member(3, 0x3D, "Logic")] public bool SwitchToItem;
    }

    [RTTI.Serializable(0x780EDD9B4E832B98)]
    public class PickUpReactivationType : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int ReactivationTime;
    }

    [RTTI.Serializable(0x8A383F926B96314B)]
    public class PickupDatabaseComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBC15D793E47B69B0)]
    public class PilotLightSettings
    {
        [RTTI.Member(0, 0x0)] public Ref<ParticleSystemResource> ParticleSystemResource;
        [RTTI.Member(1, 0x8)] public Ref<SoundResource> SoundResource;
        [RTTI.Member(2, 0x10)] public Ref<LightResource> LightResource;
    }

    [RTTI.Serializable(0xF3A96D416297A908)]
    public class PinDownComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCEFD588149C95BA7)]
    public class PinDownComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float CombinedAnchorStrengthToPin;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<CurveResource>> RequiredAnchorStrengthToPinCurves;
        [RTTI.Member(2, 0x40, "Logic")] public float AnchorStrengthThreshold;
        [RTTI.Member(3, 0x48, "Logic")] public CPtr<EntityAction> AnchorAddedAction;
        [RTTI.Member(4, 0x50, "Logic")] public CPtr<EntityAction> TieDownAction;
        [RTTI.Member(5, 0x58, "Logic")] public CPtr<EntityAction> TieDownReleaseAction;
        [RTTI.Member(6, 0x60, "Logic")] public String DelayTiedownAnimationTag;
        [RTTI.Member(7, 0x68, "Logic")] public String PinnedControlParameter;
        [RTTI.Member(8, 0x70, "Logic")] public String PinnedAnimationTag;
        [RTTI.Member(9, 0x78, "Logic")] public float PinnedDuration;
        [RTTI.Member(10, 0x80, "Logic")] public Ref<CurveResource> PinnedDurationDifficultyCurve;
        [RTTI.Member(11, 0x88, "Logic")] public bool IgnoreTieDownWhileKnockedDown;
        [RTTI.Member(12, 0x8C, "Logic")] public float BreakFreeDuration;
        [RTTI.Member(13, 0x90, "Logic")] public int BreakFreeShortEventUserData;
        [RTTI.Member(14, 0x94, "Logic")] public int BreakFreeEventUserDataLeft;
        [RTTI.Member(15, 0x98, "Logic")] public int BreakFreeEventUserDataRight;
        [RTTI.Member(16, 0x9C, "Logic")] public int BreakFreeRopesPerEvent;
        [RTTI.Member(17, 0xA0, "Logic")] public float BreakFreeStartDelay;
        [RTTI.Member(18, 0xA4, "Logic")] public float AddedBreakFreeDelayPerRope;
        [RTTI.Member(19, 0xA8, "Logic")] public float ClampDelayOnFinalRope;
        [RTTI.Member(20, 0xB0, "Pullback")] public String PullbackControlParameter;
        [RTTI.Member(21, 0xB8, "Pullback")] public String PullbackAnimationTag;
        [RTTI.Member(22, 0xC0, "Pullback")] public Array<AnimationVariableValue> PullbackAdditionalAnimationVariables;
        [RTTI.Member(23, 0xD0, "Pullback")] public int NumPullbacksToStartBreak;
        [RTTI.Member(24, 0xD8, "Pullback")] public String BreakFreeControlParameter;
        [RTTI.Member(25, 0xE0, "Pullback")] public String BreakFreeAnimationTag;
        [RTTI.Member(26, 0xE8, "Logic")] public float BreakFreeDamageThreshold;
        [RTTI.Member(27, 0xEC, "Logic")] public float AIDamageThresholdMultiplier;
        [RTTI.Member(28, 0xF0, "Logic")] public float WaitForPinnedAnimationTime;
    }

    [RTTI.Serializable(0xC0495F56C0701E10)]
    public class PingListResult : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<ServerLocation>> Locations;
    }

    [RTTI.Serializable(0x3E09F4FDCDEEDF89)]
    public class PingService : RTTIObject
    {
    }

    [RTTI.Serializable(0xFDC7C82B0433BF5E)]
    public class PingTime : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Location;
        [RTTI.Member(1, 0x28)] public uint16 AverageTimeMs;
        [RTTI.Member(2, 0x2A)] public uint8 LossPercentage;
    }

    [RTTI.Serializable(0x525040EDDCB45216)]
    public class PivotFollowCameraEntity : FollowCameraEntity
    {
    }

    [RTTI.Serializable(0x69C61E5697CC0C6D)]
    public class PivotFollowCameraEntityResource : FollowCameraEntityResource
    {
        [RTTI.Member(0, 0x230, "Logic")] public Vec3 LocalPivotPosition;
        [RTTI.Member(1, 0x240, "Logic")] public float MinPitch;
        [RTTI.Member(2, 0x244, "Logic")] public float MaxPitch;
        [RTTI.Member(3, 0x248, "Logic")] public float PitchSpeed;
        [RTTI.Member(4, 0x24C, "Logic")] public float YawSpeed;
    }

    [RTTI.Serializable(0xB95065CE91125B1E)]
    public class PlacableMesh : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<MeshResourceBase> Mesh;
        [RTTI.Member(1, 0x30)] public Ref<PhysicsCollisionResource> Collider;
        [RTTI.Member(2, 0x38)] public Ref<WorldNode> AtmosphereBox;
        [RTTI.Member(3, 0x40)] public float RelativeDensity;
        [RTTI.Member(4, 0x44)] public float FootprintClampMin;
        [RTTI.Member(5, 0x48)] public float FootprintClampMax;
        [RTTI.Member(6, 0x4C)] public float Footprint;
        [RTTI.Member(7, 0x50)] public CapsuleHull CapsuleHull;
        [RTTI.Member(8, 0x60)] public EPlacementPrecision Precision;
    }

    [RTTI.Serializable(0x6FFB299EFFE06D7)]
    public class PlaceOnLocatorEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4035FB6EDB2ADCC2)]
    public class PlaceOnLocatorEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
        [RTTI.Member(2, 0x48, "Logic")] public float BlendInDuration;
    }

    [RTTI.Serializable(0x1CFCC7C24B6B6B1C)]
    public class Placeable : Entity
    {
    }

    [RTTI.Serializable(0x4C395570E6B9D1F8)]
    public class PlaceableResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public float MinOffensiveRange;
        [RTTI.Member(1, 0x134, "Logic")] public float MaxOffensiveRange;
    }

    [RTTI.Serializable(0xB13ECB06B9F256D0)]
    public class PlacementBakeData : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<PrefabBaseResource> Target;
        [RTTI.Member(1, 0x28)] public IVec2 TileIndex;
        [RTTI.Member(2, 0x30)] public Array<Mat34> Instances;
        [RTTI.Member(3, 0x40)] public Array<PlacementJobBakeLookup> Indices;
        [RTTI.Member(4, 0x50)] public EPlacementChunkSizeSetting ChunkSize;
        [RTTI.Member(5, 0x54)] public float PlacementDistance;
    }

    [RTTI.Serializable(0x1C4ABBC0D390AC01)]
    public class PlacementBakePrefabCollection : CoreObject
    {
        [RTTI.Member(0, 0x20, "General", true)] public Array<Ref<PrefabInstance>> Objects;
        [RTTI.Member(1, 0x30, "General")] public Array<Ref<PlacementLayer>> BakedLayers;
        [RTTI.Member(2, 0x40, "General")] public EPlacementChunkSizeSetting ChunkSize;
        [RTTI.Member(3, 0x44, "General")] public float PlacementDistance;
        [RTTI.Member(4, 0x48, "General")] public IVec2 TargetTile;
    }

    [RTTI.Serializable(0x9C1E7105F74CEAE2)]
    public class PlacementBase : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<DensityNodeBase> DensityGraph;
    }

    [RTTI.Serializable(0x1915623F271FFF58)]
    public class PlacementJobBakeLookup
    {
        [RTTI.Member(0, 0x0)] public PlacementJobIndex JobIndex;
        [RTTI.Member(1, 0x4)] public int InstanceStartIndex;
        [RTTI.Member(2, 0x8)] public int InstanceCount;
    }

    [RTTI.Serializable(0xB2C666EB19EFCB95)]
    public class PlacementJobIndex
    {
        [RTTI.Member(0, 0x0)] public uint32 Data;
    }

    [RTTI.Serializable(0xE605F6EC1EE0979D)]
    public class PlacementLayer : RTTIRefObject
    {
        [RTTI.Member(0, 0x50)] public float PlacementDistance;
        [RTTI.Member(1, 0x54)] public int CreationOrder;
        [RTTI.Member(2, 0x58)] public ELayerGroupingMask GroupingFlags;
        [RTTI.Member(3, 0x60)] public Ref<PlacementBakeData> BakedData;
        [RTTI.Member(4, 0x68)] public Ref<PlacementProceduralData> ProcData;
    }

    [RTTI.Serializable(0x8CA36C539F8A3DAE)]
    public class PlacementLayerGroup : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<PlacementResourceRegister> Register;
        [RTTI.Member(1, 0x30)] public Array<Ref<PlacementLayer>> Layers;
        [RTTI.Member(2, 0x40)] public Array<PlacementTriggerRange> TriggerRanges;
        [RTTI.Member(3, 0xA8)] public Ref<PlacementTile> ParentTile;
    }

    [RTTI.Serializable(0x2B9D634C4B5A2EBA)]
    public class PlacementProceduralData : RTTIRefObject
    {
        [RTTI.Member(0, 0x28)] public Ref<DensityGraphProgram> DensityProgram;
        [RTTI.Member(1, 0x30)] public Ref<PlacementBase> Placement;
        [RTTI.Member(2, 0x38)] public EPlacementChunkSizeSetting ChunkSizeSetting;
        [RTTI.Member(3, 0x3C)] public EPlacementUsageMask UsageMask;
        [RTTI.Member(4, 0x40)] public bool UseBlendedShadows;
        [RTTI.Member(5, 0x44)] public float StencilScale;
        [RTTI.Member(6, 0x48)] public float DensityScale;
        [RTTI.Member(7, 0x50)] public Ref<WorldDataType> HeightWorldDataType;
    }

    [RTTI.Serializable(0xD5733810CC0E68F4)]
    public class PlacementResourceRegister : Resource
    {
        [RTTI.Member(0, 0x30)] public Array<Ref<Texture>> Textures;
        [RTTI.Member(1, 0x40)] public Array<Ref<CurveResource>> Curves;
        [RTTI.Member(2, 0x50)] public Array<FRange> CurveRanges;
        [RTTI.Member(3, 0x60)] public Ref<Texture> CurveTexture;
        [RTTI.Member(4, 0x68)] public Ref<WorldDataPacking> WorldDataPacking;
    }

    [RTTI.Serializable(0x237D267A7E2E4B60)]
    public class PlacementTile : WorldNode
    {
        [RTTI.Member(0, 0x60)] public Ref<WorldDataType> HeightWorldData;
        [RTTI.Member(1, 0x68)] public Ref<PlacementLayerGroup> LayerGroup;
        [RTTI.Member(2, 0x70)] public Array<Ref<Texture>> LocalMaps;
        [RTTI.Member(3, 0x80)] public Ref<EcotopeTile> EcotopeTile;
        [RTTI.Member(4, 0x88)] public Ref<PlacementBase> Placement;
        [RTTI.Member(5, 0x90)] public Array<Ref<WorldDataPlacementMap>> GeneratedMaps;
        [RTTI.Member(6, 0xA0, true)] public Array<Ref<PlacementBakePrefabCollection>> BakedPlacements;
        [RTTI.Member(7, 0xB0, true)] public EDensityJobBakeType ShaderBakeType;
    }

    [RTTI.Serializable(0x2EC83B61996A3D9A)]
    public class PlacementTriggerRange
    {
        [RTTI.Member(0, 0x0)] public LayerGroupMask Mask;
        [RTTI.Member(1, 0x40)] public float Range;
    }

    [RTTI.Serializable(0x7074167B7A3DB8ED)]
    public class PlaneEq
    {
        [RTTI.Member(0, 0x0)] public Vec3 Normal;
        [RTTI.Member(1, 0xC)] public float Constant;
    }

    [RTTI.Serializable(0xFBBBA6AB487292B6)]
    public class PlatformSpecificElementTag : Tag
    {
    }

    [RTTI.Serializable(0x99E5A886085895C2)]
    public class PlayAnimationObject : MountableEntity
    {
        [RTTI.Member(0, 0x664, "Logic")] public float Height;
        [RTTI.Member(1, 0x668, "Logic")] public float Distance;
    }

    [RTTI.Serializable(0x45DD34DE2FD49719)]
    public class PlayAnimationObjectActorInstance : InteractiveEntityActorInstance
    {
    }

    [RTTI.Serializable(0xB09282AD969DDF6E)]
    public class PlayAnimationObjectActorResource : InteractiveEntityActorResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public Ref<PlayAnimationObjectResource> PlayAnimationObjectResource;
    }

    [RTTI.Serializable(0x18FD37F0795A2975)]
    public class PlayAnimationObjectAiController : InteractiveEntityController
    {
    }

    [RTTI.Serializable(0x7D4029486778CBD1)]
    public class PlayAnimationObjectJoystickController : InteractiveEntityController
    {
    }

    [RTTI.Serializable(0xEC63ACC39BB5BAA8)]
    public class PlayAnimationObjectRep : InteractiveEntityRep
    {
    }

    [RTTI.Serializable(0xF46708F2371E7559)]
    public class PlayAnimationObjectResource : MountableEntityResource
    {
        [RTTI.Member(0, 0x2F0, "Logic")] public bool AutoStartAction;
        [RTTI.Member(1, 0x2F4, "Logic")] public FRange HeightRange;
        [RTTI.Member(2, 0x2FC, "Logic")] public float Height;
        [RTTI.Member(3, 0x300, "Logic")] public float Distance;
        [RTTI.Member(4, 0x304, "Private")] public float ExitModeHeightDirection;
        [RTTI.Member(5, 0x308, "Logic")] public float DisabledAfterAnimationTime;
        [RTTI.Member(6, 0x30C, "Logic")] public float MinDistanceToPlayer;
        [RTTI.Member(7, 0x310, "Logic")] public bool IsPathAnimation;
        [RTTI.Member(8, 0x311, "Logic")] public bool IsDeathAnimation;
        [RTTI.Member(9, 0x314, "Logic")] public float InstantAttachRange;
        [RTTI.Member(10, 0x318, "Logic")] public bool KillUserOnDismount;
        [RTTI.Member(11, 0x31C, "Logic")] public EHitDirection RequiredHitDirection;
        [RTTI.Member(12, 0x320, "Logic")] public float FallScreamTime;
        [RTTI.Member(13, 0x324, "Logic")] public bool AlwaysCreateModel;
        [RTTI.Member(14, 0x325, "Private")] public bool MustCreateModelAtInit;
    }

    [RTTI.Serializable(0x90A7AC330E0F29F6)]
    public class PlayGoManagerGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xD03650896F09DCD2)]
    public class PlayScatterBlendAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x49F213D11AF248C5)]
    public class PlayScatterBlendAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ScatterBlendAnimation>> ScatterBlendAnimations;
    }

    [RTTI.Serializable(0x5F4CF0710139356E)]
    public class PlayWarpedAnimation : CoreObject
    {
        [RTTI.Member(0, 0x20)] public String Identifier;
        [RTTI.Member(1, 0x30)] public Ref<WarpedAnimation> WarpedAnimation;
        [RTTI.Member(2, 0x38)] public bool HasMovingEnd;
    }

    [RTTI.Serializable(0xDC61536FAAC6ADE1)]
    public class PlayWarpedAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB9F5EB82FA655AA2)]
    public class PlayWarpedAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<PlayWarpedAnimation>> WarpedAnimations;
    }

    [RTTI.Serializable(0x5722BF878192B6A3)]
    public class Player : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0x212C1D125FE78503)]
    public class PlayerActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0xB392F2AA62D6539F)]
    public class PlayerActorResource : EntityActorResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public EPlayerNumber PlayerNumber;
        [RTTI.Member(1, 0x80, "Logic")] public String PlayerName;
        [RTTI.Member(2, 0x88, "Logic")] public bool BindPlayerEntity;
    }

    [RTTI.Serializable(0xA7B144A16B6AA9D5)]
    public class PlayerCardResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<PlayerCardUnlockResource>> Icons;
        [RTTI.Member(1, 0x38)] public Ref<PlayerCardUnlockResource> DefaultIcon;
    }

    [RTTI.Serializable(0xD5EBAFDECF57BF37)]
    public class PlayerCardUnlockResource : CareerUnlockResource
    {
        [RTTI.Member(0, 0x50)] public EPlayerCardUnlockTier Tier;
    }

    [RTTI.Serializable(0x666E2BC33B0EE63C)]
    public class PlayerCharacterEntry
    {
        [RTTI.Member(0, 0x0)] public String ID;
        [RTTI.Member(1, 0x8)] public Ref<HumanoidResource> Character;
        [RTTI.Member(2, 0x10)] public Ref<ConditionResource> Condition;
    }

    [RTTI.Serializable(0xB9309ED4189CD477)]
    public class PlayerCollisionQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<UUIDRef<CollisionTrigger>> CollisionTriggers;
        [RTTI.Member(1, 0x40, "Logic")] public bool TriggerOnExit;
    }

    [RTTI.Serializable(0x9763EDCB921411C)]
    public class PlayerCollisionQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xEB552C5DDF9746F0)]
    public class PlayerConstructedEntityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFE26A289D50CBC8A)]
    public class PlayerConstructedEntityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float TimeLimit;
    }

    [RTTI.Serializable(0xCAFA680DD986824C)]
    public class PlayerConversationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFEE21D403DD2C82E)]
    public class PlayerConversationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<BooleanFact> IsActiveFact;
    }

    [RTTI.Serializable(0xE80AF16EC90B6492)]
    public class PlayerDamageModifier
    {
        [RTTI.Member(0, 0x0)] public float DamageModifier;
        [RTTI.Member(1, 0x8)] public Ref<CurveResource> DamageModifierCurve;
        [RTTI.Member(2, 0x10)] public float SeverityModifier;
        [RTTI.Member(3, 0x18)] public Ref<CurveResource> SeverityModifierCurve;
    }

    [RTTI.Serializable(0xB1E17A1F27B969D1)]
    public class PlayerDamageModifierForDamageType
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<DamageTypeResource>> DamageTypes;
        [RTTI.Member(1, 0x10)] public Ref<DamageTypeGroup> DamageTypeGroup;
        [RTTI.Member(2, 0x18)] public PlayerDamageModifier DamageModifier;
    }

    [RTTI.Serializable(0xA1AFAC5C2DE57366)]
    public class PlayerInputQueryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x90523D7869710725)]
    public class PlayerInputQueryComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<PlayerInputQueryOption> Options;
    }

    [RTTI.Serializable(0x7A12A18B8DF887A7)]
    public class PlayerInputQueryOption
    {
        [RTTI.Member(0, 0x0)] public String Description;
        [RTTI.Member(1, 0x8)] public CPtr<EntityAction> Action;
    }

    [RTTI.Serializable(0x64F6B911D2F6CD41)]
    public class PlayerInteractiveNotification : PlayerNotification
    {
    }

    [RTTI.Serializable(0x545B140F4DA24B37)]
    public class PlayerInteractiveNotificationResource : PlayerNotificationResource
    {
        [RTTI.Member(0, 0x48, "Interaction")] public EDeviceFunction Function;
        [RTTI.Member(1, 0x4C, "Interaction")] public EStickFunction StickFunction;
        [RTTI.Member(2, 0x50, "Interaction")] public float StickAngle;
        [RTTI.Member(3, 0x54, "Interaction")] public float StickRange;
        [RTTI.Member(4, 0x58, "Interaction")] public float StickValue;
        [RTTI.Member(5, 0x5C, "Interaction")] public float InputActiveTime;
        [RTTI.Member(6, 0x60, "Interaction")] public Ref<GraphProgramResource> InteractionGraph;
    }

    [RTTI.Serializable(0x4D8A99666BCC65A3)]
    public class PlayerLookAtPointLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x7DB65B81636FA670)]
    public class PlayerLookAtPointLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public EPlayerNumber PlayerNumber;
        [RTTI.Member(1, 0x40, "Logic")] public String PlayerName;
    }

    [RTTI.Serializable(0x5D271AA9FBBA4994)]
    public class PlayerLookAtTargetEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB01FD2C28A7AD9AD)]
    public class PlayerLookAtTargetEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<AIMarkerLocatorResource> AIMarkerLocatorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0x9E95624A1903D4D3)]
    public class PlayerNotification : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD79E6DE91BAA3334)]
    public class PlayerNotificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x547540CF79E84EDF)]
    public class PlayerNotificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float PopupDelay;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<ConditionResource>> DisplayConditions;
        [RTTI.Member(2, 0x40, "Logic")] public Array<Ref<PlayerNotificationPriority>> PlayerNotificationPriorities;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<HUDLogicGroupResource> TutorialHUDLogicGroupResource;
    }

    [RTTI.Serializable(0x579AEB216B51814E)]
    public class PlayerNotificationPriority : Resource
    {
    }

    [RTTI.Serializable(0xE9E22EC2B9B214F7)]
    public class PlayerNotificationResource : Resource
    {
        [RTTI.Member(0, 0x28, "HUD")] public Ref<HUDNotificationType> Notification;
        [RTTI.Member(1, 0x30, "HUD")] public Ref<HUDNotificationType> Notification_keyboard;
        [RTTI.Member(2, 0x38, "Popup")] public float DisplayTime;
        [RTTI.Member(3, 0x3C, "Log")] public float LogCacheDuration;
        [RTTI.Member(4, 0x40, "Popup")] public bool DisplaysPopup;
        [RTTI.Member(5, 0x41, "Popup")] public bool HideWhileInSequence;
    }

    [RTTI.Serializable(0x7D06801044AECD94)]
    public class PlayerOpenMenuNotification : PlayerInteractiveNotification
    {
    }

    [RTTI.Serializable(0x571AE9355D35814B)]
    public class PlayerOpenMenuNotificationResource : PlayerInteractiveNotificationResource
    {
        [RTTI.Member(0, 0x68, "Menu")] public UUIDRef<MenuPageBase> MenuPage;
        [RTTI.Member(1, 0x78, "Menu")] public Array<OpenMenuParameter> Parameters;
        [RTTI.Member(2, 0x88, "Menu")] public bool PauseGame;
    }

    [RTTI.Serializable(0x5707B352A14696EB)]
    public class PlayerParams
    {
        [RTTI.Member(0, 0x0, true)] public bool Subtitles;
        [RTTI.Member(1, 0x1, true)] public bool DrawCrosshair;
        [RTTI.Member(2, 0x2, true)] public uint8 DrawHUD;
        [RTTI.Member(3, 0x3, true)] public EHUDShowOption HUDMasterSwitch;
        [RTTI.Member(4, 0x8, true)] public Array<HUDGroupShowOption> HUDGroups;
        [RTTI.Member(5, 0x18, true)] public bool ShowHeadgear;
        [RTTI.Member(6, 0x1C, true)] public int FacePaintIndex;
        [RTTI.Member(7, 0x20, true)] public int FocusModelIndex;
        [RTTI.Member(8, 0x24, true)] public bool UseBreadcrumbing;
        [RTTI.Member(9, 0x25, true)] public bool UseBreadcrumbingForWaypoint;
        [RTTI.Member(10, 0x26, true)] public bool ShowMapLegend;
        [RTTI.Member(11, 0x28, true)] public Array<GGUUID> HiddenMapIconFilters;
        [RTTI.Member(12, 0x38, true)] public bool ShowHUDWhenTouchingTouchpad;
        [RTTI.Member(13, 0x39, true)] public bool CanUseSixaxisMotion;
        [RTTI.Member(14, 0x40, true)] public ControllerConfig ControllerConfig;
        [RTTI.Member(15, 0xB0, true)] public bool AimAssistEnabled;
        [RTTI.Member(16, 0xB1, true)] public bool HorseFollowsRoadsEnabled;
        [RTTI.Member(17, 0xB2, true)] public EMenuInventorySortOrder MerchantInventorySortOrder;
        [RTTI.Member(18, 0xB3, true)] public EPlayerResourceInventorySortOrder PlayerResourceInventorySortOrder;
        [RTTI.Member(19, 0xB4, true)] public EDifficulty Difficulty;
        [RTTI.Member(20, 0xB8, true)] public int32 LastPlayedGameMode;
        [RTTI.Member(21, 0xC0, true)] public Array<ControllerMapContent> USKeyboardMapping;
        [RTTI.Member(22, 0xD0, true)] public Array<ControllerMapContent> FrenchKeyboardMapping;
        [RTTI.Member(23, 0xE0, true)] public Array<ControllerMapContent> PS4Mapping;
        [RTTI.Member(24, 0xF0, true)] public Array<ControllerMapContent> XBOXMapping;
        [RTTI.Member(25, 0x100, true)] public Array<ControllerMapContent> STEAMMapping;
    }

    [RTTI.Serializable(0x2338A09D7A170015)]
    public class PlayerProfile : RTTIRefObject
    {
        [RTTI.Member(0, 0xF8, true)] public SystemParams SystemParams;
        [RTTI.Member(1, 0x290, true)] public Array<PlayerParams> PlayerParams;
    }

    [RTTI.Serializable(0xD39D261760EC21E1)]
    public class PlayerProfileOnline : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public OnlineLoadout CareerLoadout0;
        [RTTI.Member(1, 0x58)] public OnlineLoadout CareerLoadout1;
        [RTTI.Member(2, 0x90)] public OnlineLoadout CareerLoadout2;
        [RTTI.Member(3, 0xC8)] public OnlineLoadout CareerLoadout3;
        [RTTI.Member(4, 0x100)] public OnlineLoadout CareerLoadout4;
        [RTTI.Member(5, 0x138)] public OnlineLoadout CareerLoadout5;
        [RTTI.Member(6, 0x170)] public OnlineLoadout CareerLoadout6;
        [RTTI.Member(7, 0x1A8)] public OnlineLoadout CareerLoadout7;
        [RTTI.Member(8, 0x1E0)] public OnlineLoadout CareerLoadout8;
        [RTTI.Member(9, 0x218)] public OnlineLoadout CareerLoadout9;
        [RTTI.Member(10, 0x250)] public OnlineLoadout CareerLoadout10;
        [RTTI.Member(11, 0x288)] public OnlineLoadout CareerLoadout11;
        [RTTI.Member(12, 0x2C0)] public int32 LoadoutID;
        [RTTI.Member(13, 0x2C8)] public HashMap<String_int> ChallengesCompletedMap;
        [RTTI.Member(14, 0x2D8)] public int32 PlayerCardIconID;
        [RTTI.Member(15, 0x2DC)] public int AutomataSkinID;
    }

    [RTTI.Serializable(0xEDC26A352E141FD2)]
    public class PlayerRank
    {
        [RTTI.Member(0, 0x4)] public int RankGroup;
        [RTTI.Member(1, 0x8)] public int Score;
        [RTTI.Member(2, 0x10)] public String Title;
        [RTTI.Member(3, 0x18)] public uint8 UnlockPoints;
        [RTTI.Member(4, 0x20)] public Ref<Texture> Texture;
        [RTTI.Member(5, 0x28)] public int LoadingHintGroup;
        [RTTI.Member(6, 0x30)] public Array<int> LoadingHints;
    }

    [RTTI.Serializable(0xE93CA5F4B788EB87)]
    public class PlayerRanksResource : Resource
    {
        [RTTI.Member(0, 0x30, "General")] public Array<PlayerRank> PlayerRanks;
        [RTTI.Member(1, 0x40, "Representation")] public Ref<Texture> Texture;
    }

    [RTTI.Serializable(0x377C15B7E2CC5D19)]
    public class PlayerRepellingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x80F08C941E50D0B8)]
    public class PlayerRepellingComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public BoundingBox3 BoundingBox;
        [RTTI.Member(1, 0x50, "Logic")] public String HelperName;
        [RTTI.Member(2, 0x58, "Logic")] public float RepelSpeed;
    }

    [RTTI.Serializable(0x7CC7A51E24AA578)]
    public class PlayerRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x10, "StateSaving", true)] public String Name;
        [RTTI.Member(1, 0x18, "StateSaving", true)] public GGUUID UUID;
        [RTTI.Member(2, 0x28, "StateSaving", true)] public StreamingRef<EntityResource> EntityResource;
        [RTTI.Member(3, 0x48, "StateSaving", true)] public WorldTransform WorldTransform;
        [RTTI.Member(4, 0x88, "StateSaving", true)] public bool RestartOnSpawned;
        [RTTI.Member(5, 0x90, "StateSaving", true)] public Array<uint8> PropertyData;
        [RTTI.Member(6, 0xA0, "StateSaving", true)] public Ref<InventoryRestoreState> Inventory;
        [RTTI.Member(7, 0xA8, "StateSaving", true)] public Array<Ref<MerchantRestoreState>> MerchantsSave;
        [RTTI.Member(8, 0xB8, "StateSaving", true)] public Ref<RewardManagerRestoreState> RewardManagerSave;
        [RTTI.Member(9, 0xC0, "StateSaving", true)] public Ref<HealthBucketRestoreState> HealthBucket;
        [RTTI.Member(10, 0xC8, "StateSaving", true)] public Ref<HorseCallRestoreState> HorseCallRestoreState;
        [RTTI.Member(11, 0xD0, "StateSaving", true)] public Ref<CharacterProgressionSave> CharacterProgression;
        [RTTI.Member(12, 0xD8, "StateSaving", true)] public Ref<CraftingSave> CrafingSave;
        [RTTI.Member(13, 0xE0, "StateSaving", true)] public Ref<ContextualSpeechSave> ContextualSpeechSave;
        [RTTI.Member(14, 0xE8, "StateSaving", true)] public Ref<HUDRestoreState> HUDRestoreState;
        [RTTI.Member(15, 0xF0, "StateSaving", true)] public StreamingRef<HumanoidBodyVariant> BodyVariant;
    }

    [RTTI.Serializable(0xD5DCB46BD9D53802)]
    public class PlayerScore : NetReplicatedObject
    {
    }

    [RTTI.Serializable(0x9E3121EE87D71446)]
    public class PlayerSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(0, 0x48)] public EPlayerNumber PlayerNumber;
    }

    [RTTI.Serializable(0xF3D212C2FEFB2929)]
    public class PlayerSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xDCB22D4568350F9C)]
    public class PlayerSoundMixComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4BDBDC186F34216D)]
    public class PlayerSoundMixComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "MixStates")] public Ref<SoundMixStateResource> MortallyWoundedSoundMixState;
        [RTTI.Member(1, 0x30, "MixStates")] public Ref<SoundMixStateResource> DeathSoundMixState;
        [RTTI.Member(2, 0x38, "MixStates")] public Ref<SoundMixStateResource> SprintSoundMixState;
        [RTTI.Member(3, 0x40, "MixStates")] public Ref<SoundMixStateResource> ZoomedWeaponSoundMixState;
        [RTTI.Member(4, 0x48, "MixStates")] public Ref<SoundMixStateResource> ReloadingWeaponSoundMixState;
    }

    [RTTI.Serializable(0x6261B858664ED7E9)]
    public class PlayerTargetMarkerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x12E05A4706C801B9)]
    public class PlayerTargetMarkerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MaxMarkerDistance;
    }

    [RTTI.Serializable(0xF3C64CA65D60EC3B)]
    public class PlayerToolComponent : SimpleAnimationItemOverrideComponent
    {
    }

    [RTTI.Serializable(0x80764FDEFE565019)]
    public class PlayerToolComponentResource : SimpleAnimationItemOverrideComponentResource
    {
        [RTTI.Member(0, 0x50, "Logic")] public float UseAnimationTimeout;
        [RTTI.Member(1, 0x58, "Logic")] public String UseToolActivateEvent;
        [RTTI.Member(2, 0x60, "Logic")] public String StowActiveWeaponIfAttachedToHelper;
        [RTTI.Member(3, 0x68, "Logic")] public bool UseAnimationEventToTriggerFire;
    }

    [RTTI.Serializable(0x968CE7BF78D6D75F)]
    public class Playlist : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ID;
        [RTTI.Member(1, 0x28)] public Ref<PlaylistData> Data;
    }

    [RTTI.Serializable(0x1647B0069170A141)]
    public class PlaylistBuilder : RTTIObject
    {
    }

    [RTTI.Serializable(0x84EA7D8ED4102E92)]
    public class PlaylistData : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int Version;
    }

    [RTTI.Serializable(0x21AF0ACE4F6E0F77)]
    public class PlaylistDataVersionRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String PlaylistID;
        [RTTI.Member(1, 0x28)] public int Version;
    }

    [RTTI.Serializable(0x6CBDBFAB14482C7)]
    public class PlaylistFilter : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<PlaylistFilterPredicate>> Predicates;
    }

    [RTTI.Serializable(0xCAFA5509E1DDC2A5)]
    public class PlaylistFilterBuilder : RTTIObject
    {
    }

    [RTTI.Serializable(0x29B66E1F303C1E6D)]
    public class PlaylistFilterPredicate : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Key;
        [RTTI.Member(1, 0x28)] public EPlaylistFilterOperation Operation;
        [RTTI.Member(2, 0x30)] public Array<String> Values;
    }

    [RTTI.Serializable(0x33D2C5D31B4B274)]
    public class PlaylistHistory : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String PlaylistID;
        [RTTI.Member(1, 0x28)] public int64 StartTime;
        [RTTI.Member(2, 0x30)] public int64 EndTime;
    }

    [RTTI.Serializable(0x17E7D4C414CAF3ED)]
    public class PlaylistHistoryProfile : RTTIRefObject
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<PlaylistHistory>> PlaylistHistory;
        [RTTI.Member(1, 0x38)] public Array<Ref<PlaylistHistory>> ClanPlaylistHistory;
    }

    [RTTI.Serializable(0x84C2E34BE737E481)]
    public class PlaylistIDList : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<String> PlaylistIDs;
    }

    [RTTI.Serializable(0x32DDFFF5685EB50E)]
    public class PlaylistInfo : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ID;
        [RTTI.Member(1, 0x28)] public Array<Ref<PlaylistTag>> Tags;
        [RTTI.Member(2, 0x38)] public int PlayerCount;
    }

    [RTTI.Serializable(0x2BA60FCE77F0E78B)]
    public class PlaylistInfoByFilterRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<PlaylistFilter> Filter;
        [RTTI.Member(1, 0x28)] public int PageIndex;
        [RTTI.Member(2, 0x2C)] public int PageSize;
        [RTTI.Member(3, 0x30)] public String RequiredTag;
    }

    [RTTI.Serializable(0x3B78F305576FDF4D)]
    public class PlaylistInfoByTagsRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<String> Tags;
        [RTTI.Member(1, 0x30)] public String RequiredTag;
    }

    [RTTI.Serializable(0x6E7091C96A127C16)]
    public class PlaylistInfoResult : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<PlaylistInfo>> PlaylistInfo;
        [RTTI.Member(1, 0x30)] public int TotalPlaylists;
    }

    [RTTI.Serializable(0x76B1CE4D9CB8156F)]
    public class PlaylistLoader : RTTIObject
    {
    }

    [RTTI.Serializable(0x8A10BF287F638126)]
    public class PlaylistTag : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Tag;
        [RTTI.Member(1, 0x28)] public int CreationTime;
    }

    [RTTI.Serializable(0xF447FE18AD47E441)]
    public class PlaylistsResult : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<Playlist>> Playlists;
    }

    [RTTI.Serializable(0xA2BCB63F5BED479F)]
    public class PopulationPlacement : Resource
    {
        [RTTI.Member(0, 0x28, "Scaling")] public Ref<CurveResource> SizeByDensityCurve;
        [RTTI.Member(1, 0x30, "Scaling")] public Ref<CurveResource> SizeByMaskCurve;
        [RTTI.Member(2, 0x38, "Scaling")] public EMaskChannel SizeMaskChannel;
        [RTTI.Member(3, 0x40)] public Array<Ref<PlacableMesh>> PlacableMesh;
        [RTTI.Member(4, 0x50, "Placement")] public float Density;
        [RTTI.Member(5, 0x54, "Placement")] public ERotationType RotationType;
        [RTTI.Member(6, 0x58, "Placement")] public float WanderingStrength;
        [RTTI.Member(7, 0x5C, "Placement")] public float BaseElevation;
        [RTTI.Member(8, 0x60, "Placement")] public float ElevationVariance;
        [RTTI.Member(9, 0x64, "Tilting")] public float RandomTiltFactor;
        [RTTI.Member(10, 0x68, "Tilting")] public float UpTiltFactor;
        [RTTI.Member(11, 0x6C, "Tilting")] public float TerrainTiltFactor;
        [RTTI.Member(12, 0x70, "Scaling")] public float Size;
        [RTTI.Member(13, 0x74, "Scaling")] public float SizeVariance;
        [RTTI.Member(14, 0x78, "Interaction")] public ECollisionType CollisionType;
        [RTTI.Member(15, 0x7C, "Placement")] public int RandomSeed;
    }

    [RTTI.Serializable(0xE4D707BD70A00AB)]
    public class Portal
    {
        [RTTI.Member(0, 0x20, "PortalDescription")] public SimplePolygon Polygon;
        [RTTI.Member(1, 0x70, "PortalDescription")] public float CullingDistance;
        [RTTI.Member(2, 0x78, "PortalDescription")] public CPtr<Zone> FrontZone;
        [RTTI.Member(3, 0x80, "PortalDescription")] public CPtr<Zone> BackZone;
    }

    [RTTI.Serializable(0x91B21498B7B65AD6)]
    public class PoseDeformerBindingInfo
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingHandle;
        [RTTI.Member(1, 0x4)] public uint32 BindingType;
        [RTTI.Member(2, 0x8)] public int BindingIdx;
    }

    [RTTI.Serializable(0x646F248B7BB6BE11)]
    public class PoseDeformerResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(1, 0x30, "General")] public Ref<GraphProgramResource> DeformerProgram;
        [RTTI.Member(2, 0x38, "General")] public bool IsUsingPBD;
        [RTTI.Member(3, 0x40, "General")] public Array<PoseDeformerBindingInfo> InputBindings;
        [RTTI.Member(4, 0x50, "General")] public Array<PoseDeformerBindingInfo> OutputBindings;
    }

    [RTTI.Serializable(0xDAD9E26A3AC96CFA)]
    public class PositionLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x545362855EB8CB5D)]
    public class PositionLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public WorldTransform WorldMatrix;
        [RTTI.Member(1, 0x78, "Logic")] public bool RelativeToSequence;
        [RTTI.Member(2, 0x79, "Logic")] public bool IsFixed;
    }

    [RTTI.Serializable(0x17800ABBBAE04003)]
    public class PostProcessEffectorInstance : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public Ref<PostProcessEffectorResource> Resource;
    }

    [RTTI.Serializable(0x9D0A113523DE42A4)]
    public class PostProcessEffectorManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x4C845E31A02C9891)]
    public class PostProcessEffectorResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<PostProcessSettingsResource> PostProcessSettings;
        [RTTI.Member(1, 0x30, "General")] public float FadeRange;
        [RTTI.Member(2, 0x34, "General")] public float DistanceFactor;
        [RTTI.Member(3, 0x38, "General")] public float LookAtFactor;
        [RTTI.Member(4, 0x3C, "General")] public float LookAtPower;
        [RTTI.Member(5, 0x40, "General")] public float LookIntoFactor;
        [RTTI.Member(6, 0x44, "General")] public float LookIntoPower;
        [RTTI.Member(7, 0x48, "General")] public int Priority;
        [RTTI.Member(8, 0x4C, "General")] public bool UseScreenVisibilityQuery;
        [RTTI.Member(9, 0x50, "General")] public int ScreenVisibilityQuerySize;
        [RTTI.Member(10, 0x54, "General")] public float MinScreenVisibilityFactor;
    }

    [RTTI.Serializable(0xD44E0532329DBBE1)]
    public class PostProcessMotionBlurScaleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5A3F23A67B009DD9)]
    public class PostProcessMotionBlurScaleEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<CurveResource> CurveResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool AutoScaleCurve;
    }

    [RTTI.Serializable(0x97EF6AD9E7284B50)]
    public class PostProcessSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public Ref<ColorizeSettingsResource> ColorizeSettings;
        [RTTI.Member(1, 0x30, "Settings")] public Ref<GrainSettingsResource> GrainSettings;
        [RTTI.Member(2, 0x38, "Settings")] public Ref<BlurSettingsResource> BlurSettings;
        [RTTI.Member(3, 0x40, "Settings")] public Ref<BloomSettingsResource> BloomSettings;
        [RTTI.Member(4, 0x48, "Settings")] public Ref<DepthOfFieldSettingsResource> DepthOfFieldSettings;
        [RTTI.Member(5, 0x50, "Settings")] public Ref<VignetteSettingsResource> VignetteSettings;
        [RTTI.Member(6, 0x58, "Settings")] public Ref<ExposureSettingsResource> ExposureSettings;
        [RTTI.Member(7, 0x60, "Settings")] public Ref<SSAOSettingsResource> SSAOSettings;
        [RTTI.Member(8, 0x68, "Settings")] public Ref<BokehSettingsResource> BokehSettings;
        [RTTI.Member(9, 0x70, "Settings")] public Ref<CameraSettingsResource> CameraSettings;
        [RTTI.Member(10, 0x78, "Settings")] public Ref<LightShaftSettingsResource> SunShaftSettings;
    }

    [RTTI.Serializable(0xB457104E844EC55E)]
    public class PostureEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x88AD2FC71580BE72)]
    public class PostureEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<PostureSettings> PostureSettings;
    }

    [RTTI.Serializable(0xFFAE269AC152D8A6)]
    public class PostureInfo : Resource
    {
        [RTTI.Member(0, 0x28, "Postures")] public String Posture;
        [RTTI.Member(1, 0x38, "Postures")] public float Speed;
        [RTTI.Member(2, 0x3C, "AutoSteering")] public float LookAheadDistance;
        [RTTI.Member(3, 0x40, "AutoSteering")] public float UsePathInsteadOfJumpAngle;
        [RTTI.Member(4, 0x44, "AutoSteering")] public float PathSearchAngle;
        [RTTI.Member(5, 0x48, "Turning")] public float AngularAcceleration;
        [RTTI.Member(6, 0x4C, "Turning")] public float MaxAngularVelocity;
        [RTTI.Member(7, 0x50, "Turning")] public Ref<CurveResource> TurnAngleInputCurve;
        [RTTI.Member(8, 0x58, "Turning")] public float AngularDrag;
        [RTTI.Member(9, 0x5C, "ConditionProperties")] public bool AllowInCity;
        [RTTI.Member(10, 0x5D, "ConditionProperties")] public bool AllowInWater;
        [RTTI.Member(11, 0x5E, "ConditionProperties")] public bool AllowedWithRecudedSpeed;
        [RTTI.Member(12, 0x5F, "ConditionProperties")] public bool AllowInFocus;
        [RTTI.Member(13, 0x60, "ConditionProperties")] public bool OnlyAllowedOnRoad;
        [RTTI.Member(14, 0x64, "ConditionProperties")] public float MaxFloorSlopeAngle;
        [RTTI.Member(15, 0x68, "ConditionProperties")] public float MaxFloorSlopeCosAngle;
    }

    [RTTI.Serializable(0xB341820941F959C3)]
    public class PostureSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public AnimationVariableSettings AnimationVariableSettings;
    }

    [RTTI.Serializable(0x1D84C61A5D547C21)]
    public class PostureSwitchEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB556E0BB5F24D77F)]
    public class PostureSwitchEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public String TargetPosture;
    }

    [RTTI.Serializable(0x43B55EB2F028C666)]
    public class PotentialParkourTarget : PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0x26CC49132FC832E5)]
    public class PotentialTakeDownTarget : PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0xE019DDD24FA3492B)]
    public class PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0xCA54DF07F8ABFE75)]
    public class PotentialZiplineTarget : PotentialTrajectoryTarget
    {
    }

    [RTTI.Serializable(0x5A939946345314D9)]
    public class PrefabBaseInstance : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public Array<PrefabObjectOverrides> Overrides;
        [RTTI.Member(1, 0x98, "General", true)] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0x170A6DB0CCD35089)]
    public class PrefabBaseResource : BaseResource
    {
    }

    [RTTI.Serializable(0x9F60BF4DB3485DA2)]
    public class PrefabInstance : PrefabBaseInstance
    {
        [RTTI.Member(0, 0xB0, "General")] public Ref<PrefabResource> Prefab;
    }

    [RTTI.Serializable(0x1BD0B5C85A150531)]
    public class PrefabObjectOverrides
    {
        [RTTI.Member(0, 0x0)] public GGUUID RuntimeObject;
        [RTTI.Member(1, 0x10)] public Mat44 Orientation;
        [RTTI.Member(2, 0x50)] public bool IsRemoved;
        [RTTI.Member(3, 0x51)] public bool IsTransformOverridden;
        [RTTI.Member(4, 0x58)] public Array<PrefabPODAttributeOverride> AttributeOverrides;
        [RTTI.Member(5, 0x68)] public Array<PrefabShaderOverride> ShaderOverrides;
    }

    [RTTI.Serializable(0x3F19EAD8D34AB82A)]
    public class PrefabPODAttributeOverride
    {
        [RTTI.Member(0, 0x0)] public String Group;
        [RTTI.Member(1, 0x8)] public String Name;
        [RTTI.Member(2, 0x10)] public PODVariant Value;
    }

    [RTTI.Serializable(0xAB34641EA545AAD3)]
    public class PrefabResource : PrefabBaseResource
    {
        [RTTI.Member(0, 0x20, "General")] public Ref<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0x152A5417A7B22E74)]
    public class PrefabShaderOverride
    {
        [RTTI.Member(0, 0x0)] public String VariableID;
        [RTTI.Member(1, 0x8)] public int ElementCount;
        [RTTI.Member(2, 0x10)] public Vec4 Value;
    }

    [RTTI.Serializable(0x11A497DF175CC438)]
    public class PreferredInTemplate
    {
    }

    [RTTI.Serializable(0xF34A76FAD0A1E0D7)]
    public class PrefetchList : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Array<AssetPath> Files;
        [RTTI.Member(1, 0x30, "General")] public Array<int32> Sizes;
        [RTTI.Member(2, 0x40, "General")] public Array<int32> Links;
    }

    [RTTI.Serializable(0xADD0540B17F76140)]
    public class PresenceScrambleComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA4BCE592FD6D020E)]
    public class PresenceScrambleComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int MinRequiredSpotAndMarkLevel;
        [RTTI.Member(1, 0x2C, "Logic")] public bool ShowOnRadarWhenFiring;
        [RTTI.Member(2, 0x2D, "Logic")] public bool ShowOnRadarWhenInVehicle;
        [RTTI.Member(3, 0x2E, "Logic")] public bool ShowOnRadarWhenInExo;
        [RTTI.Member(4, 0x2F, "Logic")] public bool InvisibleToAutomata;
        [RTTI.Member(5, 0x30, "Logic")] public bool PreventTracking;
        [RTTI.Member(6, 0x34, "Logic")] public float ScrambleRadius;
    }

    [RTTI.Serializable(0xED67C83830947576)]
    public class PriceModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x421F04D81816CF9D)]
    public class PriceModificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Modification;
        [RTTI.Member(1, 0x2C, "Logic")] public EPriceModificationType Type;
        [RTTI.Member(2, 0x30, "Logic")] public Array<Ref<EntityResource>> ItemResources;
    }

    [RTTI.Serializable(0xB5B07AA8BF828CC)]
    public class PrimitiveBlendShapeMask
    {
        [RTTI.Member(0, 0x0)] public uint32 Mask0;
        [RTTI.Member(1, 0x4)] public uint32 Mask1;
        [RTTI.Member(2, 0x8)] public uint32 Mask2;
        [RTTI.Member(3, 0xC)] public uint32 Mask3;
    }

    [RTTI.Serializable(0xAAA8DF11F21BD936)]
    public class PrimitiveDeltaDeformation
    {
        [RTTI.Member(0, 0x0)] public Array<VertexDeltaDeformation> Deformations;
    }

    [RTTI.Serializable(0xEA70CC86694634CD)]
    public class PrimitiveResource : BaseResource
    {
        [RTTI.Member(0, 0x20)] public PrimitiveResourceFlags Flags;
        [RTTI.Member(1, 0x28)] public Ref<VertexArrayResource> VertexArray;
        [RTTI.Member(2, 0x30)] public Ref<IndexArrayResource> IndexArray;
        [RTTI.Member(3, 0x40)] public BoundingBox3 BoundingBox;
        [RTTI.Member(4, 0x60)] public int IndexOffset;
        [RTTI.Member(5, 0x68)] public Ref<SKDTreeResource> SKDTree;
        [RTTI.Member(6, 0x70)] public int StartIndex;
        [RTTI.Member(7, 0x74)] public int EndIndex;
        [RTTI.Member(8, 0x78)] public uint32 Hash;
    }

    [RTTI.Serializable(0x99BF87A938B7B813)]
    public class PrimitiveResourceFlags
    {
        [RTTI.Member(0, 0x0)] public uint32 Flags;
    }

    [RTTI.Serializable(0x2D40A3C29B1437F7)]
    public class PrimitiveSkinInfo
    {
        [RTTI.Member(0, 0x0)] public EPrimitiveSkinInfoType Type;
        [RTTI.Member(1, 0x4)] public ESkinnedVtxType SkinVtxTypes;
        [RTTI.Member(2, 0x8)] public PrimitiveBlendShapeMask BlendShapeMask;
        [RTTI.Member(3, 0x18)] public int VertexCount;
        [RTTI.Member(4, 0x1C)] public int VertexComputeNbtCount;
        [RTTI.Member(5, 0x20)] public Ref<DataBufferResource> VtxTriListBuffer;
        [RTTI.Member(6, 0x28)] public Array<VertexSkin> VerticesSkin;
        [RTTI.Member(7, 0x38)] public Array<VertexSkinNBT> VerticesSkinNBT;
    }

    [RTTI.Serializable(0x48344705B4F939AA)]
    public class PrimitivesGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x4954769C9EC68EFD)]
    public class ProbabilityAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public float Probability;
    }

    [RTTI.Serializable(0xE9547DE1A86AF381)]
    public class ProcessRobotActionAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<RobotActionResource> RobotActionResource;
        [RTTI.Member(1, 0x38, "Logic")] public bool Start;
        [RTTI.Member(2, 0x39, "Logic")] public bool SingleShot;
    }

    [RTTI.Serializable(0x37415BFBE4F969C2)]
    public class ProfileOwnerData : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String UUID;
        [RTTI.Member(1, 0x28)] public String ProfileOwnerName;
        [RTTI.Member(2, 0x30)] public Ref<RTTIRefObject> ProfileData;
    }

    [RTTI.Serializable(0xD58E119E091D4026)]
    public class ProfileStatus : ProfileOwnerData
    {
    }

    [RTTI.Serializable(0x8788FBEBD3642A4E)]
    public class ProfileUpdatedMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ProfileOwner;
    }

    [RTTI.Serializable(0x96D3715F988812DC)]
    public class ProgramInstance : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Ref<ProgramResource> Resource;
    }

    [RTTI.Serializable(0xEBFF0671A1C6A631)]
    public class ProgramParameter
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String TypeName;
        [RTTI.Member(2, 0x18)] public Array<uint8> DefaultData;
        [RTTI.Member(3, 0x30)] public Ref<RTTIRefObject> DefaultObject;
        [RTTI.Member(4, 0x38)] public UUIDRef<RTTIRefObject> DefaultObjectUUID;
        [RTTI.Member(5, 0x60)] public EDefaultDataStorageType DefaultDataStorageType;
        [RTTI.Member(6, 0x61)] public bool IsEvent;
    }

    [RTTI.Serializable(0xD6C386BFCE83A05)]
    public class ProgramResource : BaseResource
    {
        [RTTI.Member(0, 0x20, "Program")] public Array<ProgramResourceEntryPoint> EntryPointsData;
        [RTTI.Member(1, 0x38, "Program")] public uint64 StorageHash;
        [RTTI.Member(2, 0x40, "Program")] public bool CompileRuntimeDebug;
    }

    [RTTI.Serializable(0x76F814256AD281F7)]
    public class ProgramResourceEntryPoint
    {
        [RTTI.Member(0, 0x0)] public Array<ProgramParameter> InputParameters;
        [RTTI.Member(1, 0x20)] public Array<ProgramParameter> OutputParameters;
        [RTTI.Member(2, 0x40)] public String EntryPoint;
    }

    [RTTI.Serializable(0x22435212BD4C7C0E)]
    public class ProgressBarBlock
    {
        [RTTI.Member(0, 0x0)] public Ref<UITexture> BlockTexture;
        [RTTI.Member(1, 0x8)] public IVec2 BlockTextureOffset;
    }

    [RTTI.Serializable(0x4A5D7EA46BC64FC8)]
    public class ProgressBarBlockWidget : Widget
    {
    }

    [RTTI.Serializable(0xC7BB7BEBF48F05F4)]
    public class ProgressBarTag : SliderTag
    {
    }

    [RTTI.Serializable(0x8F3AEF249CD67C7C)]
    public class ProgressBarWidget : Widget
    {
    }

    [RTTI.Serializable(0x9923672542311E38)]
    public class ProjectSettings : Resource
    {
    }

    [RTTI.Serializable(0x7B7956C150ECEABB)]
    public class ProjectedMeshInstance : GeometryObject
    {
        [RTTI.Member(0, 0xE0, "General")] public Ref<MeshResourceBase> Resource;
        [RTTI.Member(1, 0xE8, "General")] public float ProjectionRange;
        [RTTI.Member(2, 0xEC, "General")] public float MaxProjectionAngle;
        [RTTI.Member(3, 0xF0, "General")] public RGBAColor ProjectionColor;
        [RTTI.Member(4, 0xF4, "General")] public EProjColorOperation ProjColorOperation;
        [RTTI.Member(5, 0xF8, "General")] public bool OverrideSortOrder;
        [RTTI.Member(6, 0xFC, "General")] public ESortOrder SortOrder;
        [RTTI.Member(7, 0x100, "General")] public int MeshInstanceTreeSize;
        [RTTI.Member(8, 0x110, "General")] public int MeshInstanceTreeDrawableSetupSize;
    }

    [RTTI.Serializable(0xA020D7C4DA16894D)]
    public class ProjectileTrailComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF1F1AF21F8B85E42)]
    public class ProjectileTrailComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xDCF2CFD94F18AC88)]
    public class ProjectileTrailComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "AttachLocation")] public String HelperNodeName;
        [RTTI.Member(1, 0x30, "Logic")] public float LifeTime;
        [RTTI.Member(2, 0x34, "Logic")] public bool DestroyOnContact;
        [RTTI.Member(3, 0x35, "Logic")] public bool DestroyOnStick;
        [RTTI.Member(4, 0x36, "Logic")] public bool DestroyOnStickIgnored;
        [RTTI.Member(5, 0x37, "Logic")] public bool DestroyOnExplode;
        [RTTI.Member(6, 0x38, "VisualEffects")] public Ref<ParticleSystemResource> ParticleResource;
    }

    [RTTI.Serializable(0xAAED89755C1E93DE)]
    public class Property : BaseResource
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x2C, "General")] public uint32 Flags;
    }

    [RTTI.Serializable(0x435B613DDED13EB2)]
    public class PropertyBasedContextualEmotion : ContextualEmotion
    {
        [RTTI.Member(0, 0x70, "Logic")] public BoolPropertyLink Property;
    }

    [RTTI.Serializable(0x7FCFD4622A2FFB9C)]
    public class PropertyBoxAtmosphereFactor : FloatPropertyBase
    {
    }

    [RTTI.Serializable(0x219D45037A96655C)]
    public class PropertyCanMove : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x45893922D5C9253E)]
    public class PropertyCanPlaceEntity : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x99C6BFF95C5A4389)]
    public class PropertyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x401ADA16F179A2C3)]
    public class PropertyComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Ref<PropertyContainerResource> ContainerResource;
    }

    [RTTI.Serializable(0x41FC62A6BF66B788)]
    public class PropertyContainer
    {
        [RTTI.Member(0, 0x8, "StateSaving", true)] public CPtr<PropertyContainerResource> Resource;
        [RTTI.Member(1, 0x10, "StateSaving", true)] public PropertyContainerData Data;
    }

    [RTTI.Serializable(0xCBC0371334E8B207)]
    public class PropertyContainerData
    {
        [RTTI.Member(0, 0x8)] public Array<uint8> POD;
        [RTTI.Member(1, 0x18)] public Array<String> StringTable;
        [RTTI.Member(2, 0x28)] public Array<Ref<CoreObject>> CoreObjects;
    }

    [RTTI.Serializable(0x87EB67D308A068B6)]
    public class PropertyContainerMapEntry
    {
        [RTTI.Member(0, 0x0)] public uint32 UID;
        [RTTI.Member(1, 0x4)] public int Offset;
    }

    [RTTI.Serializable(0xEC6A0CF50CB8E73F)]
    public class PropertyContainerResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<PropertyContainerMapEntry> Map;
        [RTTI.Member(1, 0x30)] public PropertyContainerData Data;
        [RTTI.Member(2, 0x68)] public uint32 ReplicatedDataSize;
        [RTTI.Member(3, 0x6C)] public uint32 PersistentDataStart;
        [RTTI.Member(4, 0x70)] public uint32 PersistentDataSize;
    }

    [RTTI.Serializable(0x33843DD2B0053238)]
    public class PropertyElectricityStamina : FloatPropertyBase
    {
    }

    [RTTI.Serializable(0xFC8E3C6B4858F4C5)]
    public class PropertyFlashLightEnabled : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x9F6A9CFF72BAB426)]
    public class PropertyFloorMaterial : IntPropertyBase
    {
    }

    [RTTI.Serializable(0x8D996A643E5DB186)]
    public class PropertyGrassHeight : FloatPropertyBase
    {
    }

    [RTTI.Serializable(0x97FFC11EDDA3F591)]
    public class PropertyInCombat : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x7045483040115610)]
    public class PropertyIsAiming : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x343E8802B8DBAF7B)]
    public class PropertyIsCrouching : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xB073BB0078B51B24)]
    public class PropertyIsCurrentlyIdentifiedByHumanoid : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xC43CAA0AB638C8F1)]
    public class PropertyIsCurrentlyIdentifiedThreat : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x37423057F848ED32)]
    public class PropertyIsDiveRolling : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x13B5BE107D676077)]
    public class PropertyIsFalling : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x17B553167812F8B3)]
    public class PropertyIsInBulletTime : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xAC53499DCF12479D)]
    public class PropertyIsInGrass : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x9883422684D9698D)]
    public class PropertyIsInParkourReaching : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x4E4BB8AD90FD7658)]
    public class PropertyIsInParkourTransition : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x3B0122B3B40EF538)]
    public class PropertyIsInStealth : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xEA9D2BFF89EE671F)]
    public class PropertyIsInVegetation : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x36105B279E1FE7FD)]
    public class PropertyIsJumping : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xEAC7AB3A50E81E75)]
    public class PropertyIsMeleeing : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x3F0A84C5F1A90C91)]
    public class PropertyIsMoving : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xE75E323DBCDF3AC1)]
    public class PropertyIsParkouring : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x291CA2BFC7581A6)]
    public class PropertyIsParkouringBraced : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x79AD4D916A85E4F)]
    public class PropertyIsParkouringOnFoot : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xB90D20A5F6DCE9B1)]
    public class PropertyIsPerformingContextualAction : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x953AB78EC16EA196)]
    public class PropertyIsPerformingTakeDown : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x4A796A525CB9ECC7)]
    public class PropertyIsScannedUsingFocus : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x74FC569156147470)]
    public class PropertyIsSliding : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x3A4CFB12A048F328)]
    public class PropertyIsSlidingToUseLocation : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x79C5D0DC8E1983C0)]
    public class PropertyIsSprinting : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x760EBA6AA9836A0)]
    public class PropertyIsSwimming : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xE65426BAF8E14DBE)]
    public class PropertyIsSwimmingUnderWater : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x82B4805259790FAE)]
    public class PropertyIsUsingFocusMode : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x69499B9076C119E0)]
    public class PropertyIsUsingHeavyWeapon : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xD1D3EEF6FFA4B814)]
    public class PropertyIsUsingPlayerTool : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x41DD13954B1D8F35)]
    public class PropertyIsVaulting : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xD14F45FCD53415D3)]
    public class PropertyIsVictimOfContextualAction : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xF54D23F0352A1C5B)]
    public class PropertyIsZiplining : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x40FFFB73A5EB78B1)]
    public class PropertyIsZooming : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x5A29707FBCCE2C1D)]
    public class PropertyLastLandingHeight : FloatPropertyBase
    {
    }

    [RTTI.Serializable(0x3520738F61B917BE)]
    public class PropertyLinkBase
    {
    }

    [RTTI.Serializable(0xF2499648EAEE2A22)]
    public class PropertyLinkCollectionBase
    {
        [RTTI.Member(0, 0x0)] public Array<uint32> UIDs;
    }

    [RTTI.Serializable(0xAE7FA1E6BDDD2E42)]
    public class PropertyMaxUsersPerLocation : IntPropertyBase
    {
    }

    [RTTI.Serializable(0x329B7CBA1843924F)]
    public class PropertyMountableIsMounted : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0xFC40DA9EBFE18F7A)]
    public class PropertyMounterIsMounted : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x8B8E3D077F6EEACA)]
    public class PropertyNameLinkMapEntry
    {
        [RTTI.Member(0, 0x10)] public int Type;
        [RTTI.Member(1, 0x18)] public Ref<Property> Property;
    }

    [RTTI.Serializable(0x54B2CE982D2BE351)]
    public class PropertyRadius : FloatPropertyBase
    {
    }

    [RTTI.Serializable(0x4CEA6AC1F32349C)]
    public class PropertyStamina : FloatPropertyBase
    {
    }

    [RTTI.Serializable(0xC2992434B7C29B86)]
    public class PropertyValue : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
    }

    [RTTI.Serializable(0x494014BD9CD1F641)]
    public class PropertyVaultType : IntPropertyBase
    {
    }

    [RTTI.Serializable(0xC3EA91B817895706)]
    public class ProximityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEAB30CD4A52A5524)]
    public class ProximityComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x80, "Filter")] public OrientedBox OrientedBox;
        [RTTI.Member(1, 0xD0, "Filter")] public bool AlignToWorld;
        [RTTI.Member(2, 0xD1, "Filter")] public bool IsSpherical;
        [RTTI.Member(3, 0xD8, "Logic")] public CPtr<EntityAction> EnterAction;
        [RTTI.Member(4, 0xE0, "Logic")] public CPtr<EntityAction> ExitAction;
        [RTTI.Member(5, 0xE8, "Filter")] public bool ExcludeAI;
        [RTTI.Member(6, 0xE9, "Filter")] public bool ExcludePlayer;
        [RTTI.Member(7, 0xF0, "Logic")] public CPtr<EntityAction> EnterActionOnTriggerer;
        [RTTI.Member(8, 0xF8, "Logic")] public CPtr<EntityAction> ExitActionOnTriggerer;
        [RTTI.Member(9, 0x100, "Filter")] public bool TriggerAlways;
        [RTTI.Member(10, 0x108, "Filter")] public String EntityType;
    }

    [RTTI.Serializable(0x3424711F1598A173)]
    public class ProximityIndicatorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x21030E6E7737358D)]
    public class ProximityIndicatorComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MaxRange;
        [RTTI.Member(1, 0x2C, "Logic")] public float IgnoreInstigatorDuration;
        [RTTI.Member(2, 0x30, "Logic")] public bool OnlyShowIfObserverCanBeDamagedByEntity;
    }

    [RTTI.Serializable(0x97937B77CBB80C17)]
    public class PushResponseComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x31F6F0FF129A56EF)]
    public class PushResponseComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Bounds")] public float HorizontalPadding;
        [RTTI.Member(1, 0x2C, "Bounds")] public float VerticalPadding;
        [RTTI.Member(2, 0x30, "Collision")] public EPhysicsCollisionLayerGame CollisionLayer;
        [RTTI.Member(3, 0x34, "Collision")] public int MaxHits;
        [RTTI.Member(4, 0x38, "HitResponse")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(5, 0x40, "HitResponse")] public EHitLocation HitLocation;
        [RTTI.Member(6, 0x44, "HitResponse")] public float Severity;
        [RTTI.Member(7, 0x48, "Filtering")] public float MaxFrequency;
    }

    [RTTI.Serializable(0xBCC4FC022A0456E1)]
    public class PushTriggerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x28E57DDAF05A42DB)]
    public class PushTriggerComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x384BE9B29478C1A3)]
    public class QuadTreeCell
    {
        [RTTI.Member(0, 0x0)] public uint128 Data;
    }

    [RTTI.Serializable(0x648796B00C99723E)]
    public class Quat
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
        [RTTI.Member(3, 0xC)] public float W;
    }

    [RTTI.Serializable(0xBECFDB1C94DD8E32)]
    public class QueryTriggersComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3E2F9A3E8958495B)]
    public class QueryTriggersComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x7FD22C39A7724712)]
    public class QuestCategory : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<UITexture> ActiveIcon;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<UITexture> InactiveIcon;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<LocalizedTextResource> CategoryName;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<LocalizedTextResource> OpenQuestsTitle;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<LocalizedTextResource> NoQuestsTitle;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<LocalizedTextResource> CompletedQuestsTitle;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<LocalizedTextResource> NewNotificationTitle;
        [RTTI.Member(7, 0x60, "Logic")] public Ref<LocalizedTextResource> UpdatedNotificationTitle;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<LocalizedTextResource> CompletedNotificationTitle;
        [RTTI.Member(9, 0x70, "Logic")] public Ref<LocalizedTextResource> FailedNotificationTitle;
    }

    [RTTI.Serializable(0xF58504FEA66B236)]
    public class QuestDebugInitializer : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> Program;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocationMarker> Location;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<QuestSection> QuestStart;
    }

    [RTTI.Serializable(0x941B53E40EBA740F)]
    public class QuestEntityObjective : QuestMarkerObjective
    {
        [RTTI.Member(0, 0xC0, "Logic")] public Array<GGUUID> SpawnSetupUUID;
        [RTTI.Member(1, 0xD0, "Logic")] public bool MustHaveBeenSpawnedThroughGroup;
    }

    [RTTI.Serializable(0xF761742046EE926B)]
    public class QuestEntityObjectiveInstance : QuestMarkerObjectiveInstance
    {
    }

    [RTTI.Serializable(0x86B64BB939ED7E15)]
    public class QuestGenerationSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> CraftObjectiveText;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> ObtainObjectiveText;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<LocalizedTextResource> ReturnToMerchantObjectiveText;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<LocalizedTextResource> MoneyObjectiveText;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<LocalizedTextResource> DefaultStatusText;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<LocalizedTextResource> CraftingJobName;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<LocalizedTextResource> CraftingJobDescription;
        [RTTI.Member(7, 0x60, "Logic")] public Ref<LocalizedTextResource> PurchaseJobName;
        [RTTI.Member(8, 0x68, "Logic")] public Ref<LocalizedTextResource> PurchaseJobDescription;
        [RTTI.Member(9, 0x70, "Logic")] public Ref<LocalizedTextResource> TradeJobName;
        [RTTI.Member(10, 0x78, "Logic")] public Ref<LocalizedTextResource> TradeJobDescription;
        [RTTI.Member(11, 0x80, "Logic")] public Ref<LocalizedTextResource> GatherItemsObejctiveText;
        [RTTI.Member(12, 0x88, "Logic")] public Ref<LocalizedTextResource> GatherMoneyObjectiveText;
        [RTTI.Member(13, 0x90, "Logic")] public Ref<QuestType> DynamicQuestType;
        [RTTI.Member(14, 0x98, "Logic")] public Ref<QuestCategory> JobQuestCategory;
    }

    [RTTI.Serializable(0x1D0DE42857FF7B14)]
    public class QuestInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x4FA5E8B82BCA09A0)]
    public class QuestItemComponent : EntityComponent
    {
        [RTTI.Member(0, 0x58, "StateSave", true)] public GGUUID QuestUUID;
    }

    [RTTI.Serializable(0x4E3D3F55F5AFE843)]
    public class QuestItemComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public UUIDRef<QuestResource> Quest;
    }

    [RTTI.Serializable(0xE776709228218F23)]
    public class QuestItemTrackingObjective : QuestObjective
    {
        [RTTI.Member(0, 0xB8, "Logic")] public Ref<EntityResource> ItemType;
        [RTTI.Member(1, 0xC0, "Logic")] public int Amount;
        [RTTI.Member(2, 0xC4, "Logic")] public bool PutMarker;
    }

    [RTTI.Serializable(0xDF4392E832569BD7)]
    public class QuestItemTrackingObjectiveInstance : QuestMarkerObjectiveInstance
    {
    }

    [RTTI.Serializable(0x296D57D5058E0F11)]
    public class QuestLocationObjective : QuestMarkerObjective
    {
        [RTTI.Member(0, 0xC0, "Logic")] public Array<GGUUID> WorldNodeUUIDs;
        [RTTI.Member(1, 0xD0, "Logic")] public Vec2 AreaOffset;
        [RTTI.Member(2, 0xE0, "Logic")] public Vec2 AreaSize;
        [RTTI.Member(3, 0xF0, "Logic")] public float AreaHeight;
        [RTTI.Member(4, 0xF4, "Logic")] public float AreaBuffer;
        [RTTI.Member(5, 0xF8, "Logic")] public Ref<LocationMarkerResource> MarkerResourceOverride;
    }

    [RTTI.Serializable(0x9C0DF43BAD716F10)]
    public class QuestLocationObjectiveInstance : QuestMarkerObjectiveInstance
    {
    }

    [RTTI.Serializable(0x36D59A78CB751FF1)]
    public class QuestMarkerObjective : QuestObjective
    {
        [RTTI.Member(0, 0xB8, "Logic")] public bool RemoveMarkersWhenTriggered;
        [RTTI.Member(1, 0xB9, "Logic")] public bool CountMarkers;
    }

    [RTTI.Serializable(0xE117E536CC3B1811)]
    public class QuestMarkerObjectiveInstance : QuestObjectiveInstance
    {
    }

    [RTTI.Serializable(0xFB3AF251819F7BA2)]
    public class QuestMessageHandler : RTTIObject
    {
    }

    [RTTI.Serializable(0x5811F32E7BCD7B06)]
    public class QuestMoneyTrackingObjective : QuestObjective
    {
        [RTTI.Member(0, 0xB8, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0x670D7B71533C7010)]
    public class QuestMoneyTrackingObjectiveInstance : QuestObjectiveInstance
    {
    }

    [RTTI.Serializable(0xEB92E807A0EE39F8)]
    public class QuestObjective : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<LocalizedTextResource> UIName;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<LocalizedTextResource> UIStatusText;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<LocalizedTextResource> UIDescription;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<LocalizedTextResource> Hint;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<LocalizedTextResource> Popup;
        [RTTI.Member(5, 0x58, "Logic")] public EQuestObjectiveType Type;
        [RTTI.Member(6, 0x5C, "Logic")] public bool ShowCompleted;
        [RTTI.Member(7, 0x5D, "Logic")] public bool ShowFailed;
        [RTTI.Member(8, 0x5E, "Logic")] public bool Notify;
        [RTTI.Member(9, 0x60, "Logic")] public EObjectiveUIVisibility UIVisibility;
        [RTTI.Member(10, 0x64, "Logic")] public EBehaviourOnHide BehaviourOnHide;
        [RTTI.Member(11, 0x68, "Logic")] public Ref<GraphProgramResource> ShowCondition;
        [RTTI.Member(12, 0x70, "Logic")] public EObjectiveCompleteFailLogic CompleteFailLogic;
        [RTTI.Member(13, 0x74, "Logic")] public EParentObjectiveVisibilityLogic ParentObjectiveLogic;
        [RTTI.Member(14, 0x78, "Logic")] public Array<CPtr<QuestSection>> QuestSections;
        [RTTI.Member(15, 0x88, "Logic")] public Array<CPtr<QuestObjective>> SubObjectives;
        [RTTI.Member(16, 0x98, "Logic")] public int Index;
        [RTTI.Member(17, 0x9C, "Logic")] public int SectionIndex;
        [RTTI.Member(18, 0xA0, "Logic")] public Array<FactMapping> ParserFacts;
        [RTTI.Member(19, 0xB0, "Logic")] public bool UpdateOnlyWhenTracked;
    }

    [RTTI.Serializable(0xFCDCE020AD9DC3C)]
    public class QuestObjectiveInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x8C26D94E566AEE61)]
    public class QuestObjectiveSave : RTTIObject
    {
        [RTTI.Member(0, 0x10, "StateSaving", true)] public WString StatusText;
        [RTTI.Member(1, 0x18, "StateSaving", true)] public float StatusValue;
        [RTTI.Member(2, 0x20, "StateSaving", true)] public Array<GGUUID> UUIDs;
        [RTTI.Member(3, 0x30, "StateSaving", true)] public Array<int> Values;
        [RTTI.Member(4, 0x40, "StateSaving", true)] public int TimeStamp;
    }

    [RTTI.Serializable(0x5E501D5746BE3AF8)]
    public class QuestProgressedQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<UUIDRef<QuestSection>> QuestSections;
    }

    [RTTI.Serializable(0xEF716ABFFA84CEC8)]
    public class QuestProgressedQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x6BDDDE268BE70D0E)]
    public class QuestResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<QuestDebugInitializer>> DebugInitializers;
        [RTTI.Member(1, 0x38, "Versioning")] public Ref<GraphProgramResource> PatchProgram;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(3, 0x48, "Story")] public Ref<LocalizedTextResource> UIName;
        [RTTI.Member(4, 0x58, "Story")] public Ref<LocalizedTextResource> UIDescription;
        [RTTI.Member(5, 0x68, "Story")] public int Priority;
        [RTTI.Member(6, 0x70, "Logic")] public Ref<QuestType> QuestType;
        [RTTI.Member(7, 0x78, "Story")] public Array<Ref<QuestSection>> StartSections;
        [RTTI.Member(8, 0x88, "Story")] public Ref<UITexture> UIIconTexture;
        [RTTI.Member(9, 0x90, "Logic")] public bool InitiallyAvailable;
        [RTTI.Member(10, 0x98, "Logic")] public Array<Ref<QuestCategory>> Categories;
        [RTTI.Member(11, 0xA8, "Logic")] public Ref<EnumFact> QuestStateFact;
        [RTTI.Member(12, 0xB0, "Logic")] public Ref<IntegerFact> RepeatCounterFact;
        [RTTI.Member(13, 0xB8, "Versioning")] public int Version;
        [RTTI.Member(14, 0xBC, "Logic")] public bool IsCountedForGameCompletion;
        [RTTI.Member(15, 0xC0, "Logic")] public int Level;
        [RTTI.Member(16, 0xC8, "Areas")] public Ref<SceneInstance> Scene;
    }

    [RTTI.Serializable(0x2185E7B59E041D19)]
    public class QuestReward : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<QuestRewardSet> RewardSet;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<GraphProgramResource> ConditionGraph;
        [RTTI.Member(2, 0x38, "Logic")] public bool Revealed;
    }

    [RTTI.Serializable(0x213CAC1964203935)]
    public class QuestRewardSet : Resource
    {
        [RTTI.Member(0, 0x28, "Rewards")] public Ref<PlayerNotificationResource> Rewards_Notification;
        [RTTI.Member(1, 0x30, "Rewards")] public Ref<PlayerNotificationPriority> Rewards_Priority;
        [RTTI.Member(2, 0x38, "Celebration")] public Ref<PlayerNotificationResource> Celebration_Notification;
        [RTTI.Member(3, 0x40, "Celebration")] public Ref<PlayerNotificationPriority> Celebration_Priority;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<LocalizedTextResource> SetName;
    }

    [RTTI.Serializable(0x572FFE2229081FD2)]
    public class QuestSection : Resource
    {
        [RTTI.Member(0, 0x28, "QuestFlow")] public Ref<QuestTrigger> Trigger;
        [RTTI.Member(1, 0x30, "QuestFlow")] public Array<Ref<QuestSection>> NextSections;
        [RTTI.Member(2, 0x40, "QuestFlow")] public Array<CPtr<QuestSection>> BlockSections;
        [RTTI.Member(3, 0x50, "QuestFlow")] public Array<Ref<QuestSection>> SubSections;
        [RTTI.Member(4, 0x60, "Logic")] public EQuestSectionCompletionType CompleteLogic;
        [RTTI.Member(5, 0x64, "Logic")] public EQuestSectionCompletionType BlockLogic;
        [RTTI.Member(6, 0x68, "Logic")] public EQuestSectionType SectionType;
        [RTTI.Member(7, 0x70, "QuestFlow")] public Ref<GraphProgramResource> ActivateCondition;
        [RTTI.Member(8, 0x78, "Logic")] public Ref<GraphProgramResource> OnActivateExecute;
        [RTTI.Member(9, 0x80, "QuestFlow")] public Ref<GraphProgramResource> CompleteCondition;
        [RTTI.Member(10, 0x88, "Logic")] public Ref<GraphProgramResource> OnCompleteExecute;
        [RTTI.Member(11, 0x90, "QuestFlow")] public Ref<GraphProgramResource> BlockCondition;
        [RTTI.Member(12, 0x98, "Logic")] public Ref<GraphProgramResource> OnBlockExecute;
        [RTTI.Member(13, 0xA0, "Logic")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(14, 0xA8, "Data")] public Ref<LocalizedTextResource> UILogEntry;
        [RTTI.Member(15, 0xB0, "Data")] public Ref<LocalizedTextResource> UIBlockedLogEntry;
        [RTTI.Member(16, 0xB8, "Data")] public Array<Ref<QuestReward>> Rewards;
        [RTTI.Member(17, 0xC8, "Goals")] public Ref<LocalizedTextResource> UICurrentQuestGoalTitle;
        [RTTI.Member(18, 0xD0, "Goals")] public Ref<LocalizedTextResource> UIQuestGoalDescription;
        [RTTI.Member(19, 0xD8, "Goals")] public Array<Ref<QuestObjective>> Objectives;
        [RTTI.Member(20, 0xE8, "Logic")] public Ref<EnumFact> QuestSectionStateFact;
        [RTTI.Member(21, 0xF0, "Data")] public CPtr<QuestResource> Quest;
        [RTTI.Member(22, 0xF8, "Logic")] public bool SaveOnComplete;
        [RTTI.Member(23, 0xF9, "Logic")] public bool ReuseLastSaveLocation;
        [RTTI.Member(24, 0x100, "Logic")] public Ref<AIMarker> RespawnMarker;
        [RTTI.Member(25, 0x108, "QuestFlow")] public bool Repeat;
        [RTTI.Member(26, 0x109, "QuestFlow")] public bool Required;
        [RTTI.Member(27, 0x10A, "Logic")] public bool SupressNotification;
    }

    [RTTI.Serializable(0x3F3345395ECBDE3D)]
    public class QuestSectionInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x85E7DE0D8178BE5C)]
    public class QuestSectionUpdateQueue : RTTIObject
    {
        [RTTI.Member(0, 0x50, "StateSave", true)] public Array<GGUUID> AddedQuestSections_Completion;
        [RTTI.Member(1, 0x60, "StateSave", true)] public Array<GGUUID> AddedQuestSections_Block;
    }

    [RTTI.Serializable(0xA3BEF2B6072CDC70)]
    public class QuestSystemResource : Resource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EnumFactValue> QuestUnavailableEnumValue;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EnumFactValue> QuestAvailableEnumValue;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<EnumFactValue> QuestInProgressEnumValue;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<EnumFactValue> QuestSucceededEnumValue;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<EnumFactValue> QuestFailedEnumValue;
        [RTTI.Member(5, 0x58, "Logic")] public Ref<EnumFactValue> QuestSectionUnavailableEnumValue;
        [RTTI.Member(6, 0x60, "Logic")] public Ref<EnumFactValue> QuestSectionAvailableEnumValue;
        [RTTI.Member(7, 0x68, "Logic")] public Ref<EnumFactValue> QuestSectionCompletedEnumValue;
        [RTTI.Member(8, 0x70, "Logic")] public Ref<EnumFactValue> QuestSectionBlockedEnumValue;
        [RTTI.Member(9, 0x78, "Logic")] public Ref<LocalizedTextResource> MoneyRewardText;
        [RTTI.Member(10, 0x80, "Logic")] public Ref<LocalizedTextResource> XpRewardText;
        [RTTI.Member(11, 0x88, "Logic")] public Ref<LocalizedTextResource> PerkPointRewardText;
        [RTTI.Member(12, 0x90, "Logic")] public Ref<LocalizedTextResource> RewardText;
        [RTTI.Member(13, 0x98, "Display")] public Ref<UITexture> UIMoneyRewardIcon;
        [RTTI.Member(14, 0xA0, "Display")] public Ref<UITexture> UIXpRewardIcon;
        [RTTI.Member(15, 0xA8, "Display")] public Ref<UITexture> UIPerkPointRewardIcon;
        [RTTI.Member(16, 0xB0, "Logic")] public Ref<QuestGenerationSettings> QuestGenerationSettings;
        [RTTI.Member(17, 0xB8, "Display")] public Ref<PlayerNotificationResource> PopupNotification;
        [RTTI.Member(18, 0xC0, "Logic")] public Array<Ref<QuestCategory>> QuestCategories;
        [RTTI.Member(19, 0xD0, "ActivityRewards")] public Ref<EnumFact> ActivityRewardFact;
        [RTTI.Member(20, 0xD8, "ActivityRewards")] public Ref<EnumFactValue> ActivityGoldenMedal;
        [RTTI.Member(21, 0xE0, "ActivityRewards")] public Ref<EnumFactValue> ActivitySilverMedal;
        [RTTI.Member(22, 0xE8, "ActivityRewards")] public Ref<EnumFactValue> ActivityBronzeMedal;
        [RTTI.Member(23, 0xF0, "ActivityRewards")] public Ref<EnumFactValue> ActivityNoMedal;
        [RTTI.Member(24, 0xF8, "Logic")] public Ref<EnumFact> MainQuestProgressFact;
        [RTTI.Member(25, 0x100, "Logic")] public Ref<QuestCategory> MainQuestCategory;
        [RTTI.Member(26, 0x108, "PerkSetRewards")] public Ref<BooleanFact> PerkSetFact;
        [RTTI.Member(27, 0x110, "Logic")] public Array<Ref<QuestType>> TrackingPriorityTypes;
        [RTTI.Member(28, 0x120, "ActivityRewards")] public Array<Ref<HuntingGroundTrialLog>> HuntingGroundTrialLogs;
        [RTTI.Member(29, 0x130, "MarkerSettings")] public Ref<LocationMarkerState> UndiscoveredMarkerState;
        [RTTI.Member(30, 0x138, "MarkerSettings")] public Ref<LocationMarkerState> DefaultMarkerState;
        [RTTI.Member(31, 0x140, "MarkerSettings")] public Ref<LocationMarkerState> TrackedMarkerState;
        [RTTI.Member(32, 0x148, "MarkerSettings")] public Ref<LocalizedTextResource> NewQuestMarkerText;
        [RTTI.Member(33, 0x150, "Playtest")] public UUIDRef<MenuPageBase> PostQuestMenu;
    }

    [RTTI.Serializable(0xD1F17BA1B57E72D0)]
    public class QuestTrackingPathObjective : QuestObjective
    {
        [RTTI.Member(0, 0xB8, "Logic")] public GGUUID TrackingPathUUID;
        [RTTI.Member(1, 0xC8, "Logic")] public Array<GGUUID> NodeUUIDs;
        [RTTI.Member(2, 0xD8, "Logic")] public float AreaRadius;
        [RTTI.Member(3, 0xDC, "Logic")] public float AreaHeight;
        [RTTI.Member(4, 0xE0, "Logic")] public float AreaBuffer;
    }

    [RTTI.Serializable(0x44B94B350181807A)]
    public class QuestTrackingPathObjectiveInstance : QuestObjectiveInstance
    {
    }

    [RTTI.Serializable(0x8F8A6C686424689E)]
    public class QuestTrackingQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool Tracked;
    }

    [RTTI.Serializable(0xB12E9BB5C049E5F4)]
    public class QuestTrackingQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xBB79AEC34480C8A6)]
    public class QuestTrackingRepresentationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6826FF96CDB9A875)]
    public class QuestTrackingRepresentationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EDeviceFunction Function;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<MenuPageBase> QuestMenu;
        [RTTI.Member(2, 0x38, "Logic")] public Array<Ref<PlayerNotificationResource>> QuestStartedNotifications;
        [RTTI.Member(3, 0x48, "Logic")] public Array<Ref<PlayerNotificationResource>> QuestEndedNotifications;
    }

    [RTTI.Serializable(0x20E373902C2351BD)]
    public class QuestTrigger : Resource
    {
    }

    [RTTI.Serializable(0x91BEA680A6EA9865)]
    public class QuestTriggerInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0xE21F991F815812A8)]
    public class QuestType : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool VisibleInMenu;
        [RTTI.Member(1, 0x29, "Repeating")] public bool Repeatable;
        [RTTI.Member(2, 0x2A, "Logic")] public bool Unique;
        [RTTI.Member(3, 0x2B, "Repeating")] public bool ClearLogOnRepeat;
        [RTTI.Member(4, 0x2C, "Logic")] public bool CanBeAbandoned;
        [RTTI.Member(5, 0x2D, "Logic")] public bool TrackingOnlyInsideArea;
        [RTTI.Member(6, 0x2E, "Logic")] public bool ForceTrackingOnStart;
        [RTTI.Member(7, 0x2F, "Logic")] public bool AllowAutoTrack;
        [RTTI.Member(8, 0x30, "Notifications")] public bool OnlyShowAreaNotificationsWhenTracked;
        [RTTI.Member(9, 0x31, "Logic")] public bool Tracked;
        [RTTI.Member(10, 0x32, "Playtest")] public bool ShowPostQuestMenu;
        [RTTI.Member(11, 0x33, "Display")] public bool MarkItemsInMenu;
        [RTTI.Member(12, 0x38, "Repeating")] public Array<int> RepeatCooldown;
        [RTTI.Member(13, 0x48, "Notifications")] public Ref<PlayerNotificationResource> ActiveStartedNotification;
        [RTTI.Member(14, 0x50, "Notifications")] public Ref<PlayerNotificationResource> InactiveStartedNotification;
        [RTTI.Member(15, 0x58, "Notifications")] public Ref<PlayerNotificationResource> CompletedNotification;
        [RTTI.Member(16, 0x60, "Notifications")] public Ref<PlayerNotificationResource> FailedNotification;
        [RTTI.Member(17, 0x68, "Notifications")] public Ref<PlayerNotificationResource> ActiveProgressedNotification;
        [RTTI.Member(18, 0x70, "Notifications")] public Ref<PlayerNotificationResource> InactiveProgressedNotification;
        [RTTI.Member(19, 0x78, "Notifications")] public Ref<PlayerNotificationResource> LeavingAreaNotification;
        [RTTI.Member(20, 0x80, "Notifications")] public Ref<PlayerNotificationResource> EnteredAreaNotification;
        [RTTI.Member(21, 0x88, "Notifications")] public Ref<PlayerNotificationResource> LeftAreaNotification;
        [RTTI.Member(22, 0x90, "Notifications")] public Ref<PlayerNotificationResource> DefaultRewardNotification;
        [RTTI.Member(23, 0x98, "Notifications")] public Ref<PlayerNotificationPriority> FinishedNotificationPriority;
        [RTTI.Member(24, 0xA0, "Notifications")] public Ref<PlayerNotificationPriority> ProgressedNotificationPriority;
        [RTTI.Member(25, 0xA8, "Notifications")] public Ref<PlayerNotificationPriority> StartedNotificationPriority;
        [RTTI.Member(26, 0xB0, "Notifications")] public Ref<PlayerNotificationPriority> ObjectivePopupNotificationPriority;
        [RTTI.Member(27, 0xB8, "Notifications")] public Ref<PlayerNotificationPriority> RewardNotificationPriority;
        [RTTI.Member(28, 0xC0, "Notifications")] public Ref<PlayerNotificationPriority> AreaNotificationPriority;
        [RTTI.Member(29, 0xC8, "Logic")] public Ref<LocationMarkerResource> StartMarker;
        [RTTI.Member(30, 0xD0, "Logic")] public Ref<LocationMarkerResource> ProgressMarker;
        [RTTI.Member(31, 0xD8, "Logic")] public Ref<LocationMarkerResource> EndMarker;
        [RTTI.Member(32, 0xF0, "Notifications")] public float LeavingAreaSize;
        [RTTI.Member(33, 0xF4, "Display")] public bool UseGoalForTracking;
    }

    [RTTI.Serializable(0xF2CB0B5D732194C2)]
    public class QuestsViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0x8A22E2E2260094E2)]
    public class QuickTimeEventComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBC588EAA03743F88)]
    public class QuickTimeEventComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MinimumButtonPressesPerSecond;
        [RTTI.Member(1, 0x2C, "Logic")] public float MaximumButtonPressesPerSecond;
        [RTTI.Member(2, 0x30, "Logic")] public int NumDesiredPresses;
        [RTTI.Member(3, 0x38, "Logic")] public CPtr<EntityAction> SucceedAction;
        [RTTI.Member(4, 0x40, "Logic")] public CPtr<EntityAction> FailAction;
        [RTTI.Member(5, 0x48, "Logic")] public CPtr<EntityAction> ButtonPressedAction;
    }

    [RTTI.Serializable(0xC1DABEE5BA19826)]
    public class RGBAColor
    {
        [RTTI.Member(0, 0x0)] public uint8 B;
        [RTTI.Member(1, 0x1)] public uint8 G;
        [RTTI.Member(2, 0x2)] public uint8 R;
        [RTTI.Member(3, 0x3)] public uint8 A;
    }

    [RTTI.Serializable(0xBA75946B4D0BB48C)]
    public class RGBAColorRev
    {
        [RTTI.Member(0, 0x0)] public uint8 R;
        [RTTI.Member(1, 0x1)] public uint8 G;
        [RTTI.Member(2, 0x2)] public uint8 B;
        [RTTI.Member(3, 0x3)] public uint8 A;
    }

    [RTTI.Serializable(0x4D753D7A6E243709)]
    public class RTTIBool : RTTIPrimitive
    {
        [RTTI.Member(0, 0x20)] public bool Value;
    }

    [RTTI.Serializable(0x7D861BBFD01B10B4)]
    public class RTTIDouble : RTTIPrimitive
    {
        [RTTI.Member(0, 0x20)] public double Value;
    }

    [RTTI.Serializable(0xCFB1369719142F5F)]
    public class RTTIFloat : RTTIPrimitive
    {
        [RTTI.Member(0, 0x20)] public float Value;
    }

    [RTTI.Serializable(0x13CD9A978CFD5778)]
    public class RTTIInt : RTTIPrimitive
    {
        [RTTI.Member(0, 0x20)] public int Value;
    }

    [RTTI.Serializable(0x78D1DE9110FD327A)]
    public class RTTIInt64 : RTTIPrimitive
    {
        [RTTI.Member(0, 0x20)] public int64 Value;
    }

    [RTTI.Serializable(0x69F066DDC22139DB)]
    public class RTTIObject
    {
    }

    [RTTI.Serializable(0xEDB0F042B8B5F2C1)]
    public class RTTIObjectTweak : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int NotBeforeBuildNumber;
        [RTTI.Member(1, 0x24)] public int NotAfterBuildNumber;
        [RTTI.Member(2, 0x28)] public Array<Ref<RTTIObjectTweakValue>> Values;
    }

    [RTTI.Serializable(0x768CC4FD58A828B6)]
    public class RTTIObjectTweakValue : CoreObject
    {
        [RTTI.Member(0, 0x20)] public UUIDRef<RTTIRefObject> RootObject;
        [RTTI.Member(1, 0x30)] public String RootUUID;
        [RTTI.Member(2, 0x38)] public String Path;
        [RTTI.Member(3, 0x40)] public String Value;
    }

    [RTTI.Serializable(0x4CCB282F88BB5684)]
    public class RTTIPrimitive : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xD6F59DFC154E3B73)]
    public class RTTIRefObject : RTTIObject
    {
        [RTTI.Member(0, 0xC, "General")] public GGUUID ObjectUUID;
    }

    [RTTI.Serializable(0x34C865BF4CC0C671)]
    public class RTTIRefObjectSet
    {
        [RTTI.Member(0, 0x18, "General")] public Array<Ref<RTTIRefObject>> Objects;
    }

    [RTTI.Serializable(0x793E1D23D6AAE237)]
    public class RTTIString : RTTIPrimitive
    {
        [RTTI.Member(0, 0x20)] public String Value;
    }

    [RTTI.Serializable(0xC2CF29C8F8B02F84)]
    public class RadarDomeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x7F7D0B90AF283F82)]
    public class RadarDomeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float PulseLength;
        [RTTI.Member(1, 0x30, "Logic")] public CPtr<EntityAction> ActivatedAction;
    }

    [RTTI.Serializable(0xE537C1418E7F21F2)]
    public class RadialSectorTag : VisualTag
    {
    }

    [RTTI.Serializable(0x56080317867338FB)]
    public class RadialSectorWidget : Widget
    {
    }

    [RTTI.Serializable(0xED3187E3A63A87F1)]
    public class RadialWheelTag : VisualTag
    {
    }

    [RTTI.Serializable(0x2DD3BA1A91423589)]
    public class RadialWheelWidget : Widget
    {
    }

    [RTTI.Serializable(0x8789A01EC6B9D662)]
    public class RagdollComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC925950080D6D771)]
    public class RagdollComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PhysicsRagdollResource> RagdollResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<PhysicsSkeleton> AnimatedPhysicsSkeleton;
        [RTTI.Member(3, 0x50, "Logic")] public float StressThreshold;
        [RTTI.Member(4, 0x58, "Attach")] public Array<String> AttachableHelpers;
    }

    [RTTI.Serializable(0x521D26386546061F)]
    public class RagdollMover : Mover
    {
    }

    [RTTI.Serializable(0xE4C983ECDBFC11A1)]
    public class RagdollMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xDA6650AC7210DD9F)]
    public class RainbowAndSundogSettings
    {
        [RTTI.Member(0, 0x0)] public float RainbowIntensity;
        [RTTI.Member(1, 0x4)] public float SundogIntensity;
    }

    [RTTI.Serializable(0x78B335100ACBF351)]
    public class RainbowAndSundogSettingsResource : CoreObject
    {
        [RTTI.Member(0, 0x20)] public RainbowAndSundogSettings Settings;
    }

    [RTTI.Serializable(0xB0A61DDA9BFDE4E5)]
    public class RandomAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<CPtr<EntityAction>> ActionsToChooseFrom;
    }

    [RTTI.Serializable(0x9F88A0AC6BF70D2D)]
    public class RandomFireResource : Resource
    {
        [RTTI.Member(0, 0x28)] public int Chance;
        [RTTI.Member(1, 0x2C)] public FRange StartDelayTimeRange;
        [RTTI.Member(2, 0x34)] public FRange DelayRange;
        [RTTI.Member(3, 0x3C)] public FRange FireTimeRange;
        [RTTI.Member(4, 0x44)] public float MaxTotalTime;
        [RTTI.Member(5, 0x48)] public bool OnlyWhenAlreadyFiring;
    }

    [RTTI.Serializable(0x8B34BB2B4D998E1A)]
    public class RandomMatrixListResource : RandomMatrixResourceBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Mat44> Matrices;
    }

    [RTTI.Serializable(0x97DFA46ED09411B)]
    public class RandomMatrixResource : RandomMatrixResourceBase
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<RandomVectorResource> Position;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<RandomVectorResource> Orientation;
    }

    [RTTI.Serializable(0x3856DBC8855EE62B)]
    public class RandomMatrixResourceBase : Resource
    {
    }

    [RTTI.Serializable(0x39BEDFB75815DA0)]
    public class RandomSimpleSoundResource : SimpleSoundResource
    {
        [RTTI.Member(0, 0x100, "RandomVariations")] public Array<Ref<WaveResource>> Waves;
    }

    [RTTI.Serializable(0x49D8876C1BD4C98E)]
    public class RandomVectorResource : Resource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Vec3 Min;
        [RTTI.Member(1, 0x40, "Logic")] public Vec3 Max;
    }

    [RTTI.Serializable(0x3FAF1A22A07AEAB2)]
    public class RangeFinderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x321E82778637EA67)]
    public class RangeFinderComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MaxRange;
    }

    [RTTI.Serializable(0xB685DD1A2F67CD7E)]
    public class ReactOnImpactComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x2FD2743C641852)]
    public class ReactOnImpactComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MinVelocity;
        [RTTI.Member(1, 0x2C, "Logic")] public bool RemoveAfterImpact;
        [RTTI.Member(2, 0x2D, "Logic")] public bool IgnoreCollisionWithInstigatorEntity;
        [RTTI.Member(3, 0x2E, "Representation")] public MaterialType MaterialType;
    }

    [RTTI.Serializable(0x7353160B2F4BC5C8)]
    public class RecordAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x71C858F1C9AEAE70)]
    public class ReduceIncomingAIDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x23FEACCF4DAF508C)]
    public class ReduceIncomingAIDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CurveResource> DamageMultiplierOverHealth;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<CurveResource> SeverityMultiplierOverHealth;
        [RTTI.Member(2, 0x38, "Logic")] public bool DenyKillingBlow;
        [RTTI.Member(3, 0x40, "Logic")] public Array<Ref<AIFaction>> ExcludeFactions;
        [RTTI.Member(4, 0x50, "Logic")] public Array<Ref<AIFaction>> IncludeFactions;
    }

    [RTTI.Serializable(0x5B7BF56868139C11)]
    public class ReferencedSequenceEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<SequenceResource> ReferencedSequenceResource;
        [RTTI.Member(1, 0x38, "Logic")] public Array<ExposedEventMapping> ExposedEventMapping;
        [RTTI.Member(2, 0x48, "Logic")] public Array<Ref<EventResource>> DisabledEventResources;
        [RTTI.Member(3, 0x58, "Logic")] public Array<LinkToEventInReferencedSequence> LinksToEventsInReferencedSequence;
    }

    [RTTI.Serializable(0x32FB1D71C008E84)]
    public class RegionalAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<ERegion> Regions;
    }

    [RTTI.Serializable(0x98681A4BAF459D6E)]
    public class RegularSkinnedMeshResource : RegularSkinnedMeshResourceBase
    {
        [RTTI.Member(0, 0xC0)] public Vec3 PositionBoundsScale;
        [RTTI.Member(1, 0xD0)] public Vec3 PositionBoundsOffset;
        [RTTI.Member(2, 0xE0)] public Ref<RegularSkinnedMeshResourceSkinInfo> SkinInfo;
        [RTTI.Member(3, 0xE8)] public Array<Ref<PrimitiveResource>> Primitives;
        [RTTI.Member(4, 0xF8)] public Array<Ref<RenderEffectResource>> RenderFxResources;
    }

    [RTTI.Serializable(0x96C53EF50E874D62)]
    public class RegularSkinnedMeshResourceBase : SkinnedMeshResource
    {
        [RTTI.Member(0, 0x0, "Lighting", true)] public EShadowCull ShadowCullMode;
        [RTTI.Member(1, 0x0, "Lighting", true)] public EViewLayer ViewLayer;
        [RTTI.Member(2, 0x0, "Lighting", true)] public bool CastShadows;
        [RTTI.Member(3, 0x0, "Lighting", true)] public bool CastDynamicShadows;
        [RTTI.Member(4, 0x0, "Lighting", true)] public EDrawPartType RenderType;
        [RTTI.Member(5, 0x90, "Lighting")] public DrawFlags DrawFlags;
        [RTTI.Member(6, 0x94, "Skinning")] public ESkinningDeformerType DeformerType;
        [RTTI.Member(7, 0x98, "Skinning")] public Ref<SkinnedMeshBoneBindings> SkinnedMeshBoneBindings;
        [RTTI.Member(8, 0xA0, "Skinning")] public Ref<SkinnedMeshBoneBoundingBoxes> SkinnedMeshBoneBoundingBoxes;
    }

    [RTTI.Serializable(0x451DBFC72F454971)]
    public class RegularSkinnedMeshResourceSkinInfo : BaseResource
    {
        [RTTI.Member(0, 0x20)] public Array<PrimitiveSkinInfo> Parts;
        [RTTI.Member(1, 0x30)] public Array<BlendTargetDeformation> BlendTargetDeforms;
    }

    [RTTI.Serializable(0x8F8FA93958766428)]
    public class RelativeGroupFader
    {
        [RTTI.Member(0, 0x0)] public ESoundMasterVolumeGroup Group;
        [RTTI.Member(1, 0x4)] public int Volume;
        [RTTI.Member(2, 0x8)] public int WetVolume;
        [RTTI.Member(3, 0xC)] public float Pitch;
        [RTTI.Member(4, 0x10)] public float Occlusion;
        [RTTI.Member(5, 0x14)] public bool IsDominant;
        [RTTI.Member(6, 0x15)] public bool IsLocked;
    }

    [RTTI.Serializable(0xECF47D1990F55FEA)]
    public class RelativePositionLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x13C7DC737B195A31)]
    public class RelativePositionLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> ParentLocatorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Mat44 LocalMatrix;
    }

    [RTTI.Serializable(0xD579F9D62E9052BE)]
    public class RelativeSoundMixResource : Resource
    {
        [RTTI.Member(0, 0x28, "Mix")] public Array<RelativeGroupFader> Faders;
        [RTTI.Member(1, 0x38, "Mix")] public bool IsSuperDominant;
    }

    [RTTI.Serializable(0xC3A417AC432DC7AE)]
    public class ReliableMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String UUID;
        [RTTI.Member(1, 0x28)] public Ref<RTTIRefObject> Message;
    }

    [RTTI.Serializable(0x994D33C4AAB96225)]
    public class ReloadDurationSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float StartDuration;
        [RTTI.Member(1, 0x2C, "Logic")] public float FirstCycleDuration;
        [RTTI.Member(2, 0x30, "Logic")] public float CycleDuration;
        [RTTI.Member(3, 0x34, "Logic")] public float FinishDuration;
    }

    [RTTI.Serializable(0x50544BE8425B3371)]
    public class ReloadDurationsAnimationReference : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<ReloadDurationSettings> ReloadDurationsNormal;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<ReloadDurationSettings> ReloadDurationsRaised;
    }

    [RTTI.Serializable(0x17C0B7119F2FE993)]
    public class RememberFactAction : MemoryFactActionBase
    {
        [RTTI.Member(0, 0x38, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0xEBB3BEE3CD05BD94)]
    public class RemoteUseAction : EntityAction
    {
    }

    [RTTI.Serializable(0xC0EFE4F835AFFE20)]
    public class RemoveActorEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x6C925304E78CDC46)]
    public class RemoveActorEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0xAB53C6CB3699CE8C)]
    public class RemoveEntitiesEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x314D1F61DF414D96)]
    public class RemoveEntitiesEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool RemoveDeadHumanoids;
        [RTTI.Member(1, 0x31, "Logic")] public bool RemoveExcessPickups;
    }

    [RTTI.Serializable(0xD02BDF61E2AF3993)]
    public class RemoveEntityAction : EntityAction
    {
    }

    [RTTI.Serializable(0xEEC01F0450506FEF)]
    public class RemoveHUDElementAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<HUDElementResource> HUDElementResource;
    }

    [RTTI.Serializable(0x9E6E58D0723B566E)]
    public class RemoveHealthSegmentAction : EntityAction
    {
    }

    [RTTI.Serializable(0xBF92FA63800181D9)]
    public class RemoveInventoryItemAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool DropPickUp;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EntityResource> EntityResource;
        [RTTI.Member(2, 0x40, "Logic")] public int Amount;
    }

    [RTTI.Serializable(0xFEF5BD4CBCB567E4)]
    public class RenderDataStreamingHintData : RTTIRefObject
    {
        [RTTI.Member(0, 0x20, "Settings")] public ERenderDataHintDataType DataType;
        [RTTI.Member(1, 0x28, "Settings")] public Array<RenderDataStreamingHintObject> HintObjects;
        [RTTI.Member(2, 0x38, "Settings")] public Array<RenderDataStreamingHintDataEntry> Entries;
    }

    [RTTI.Serializable(0xB6974273844D9605)]
    public class RenderDataStreamingHintDataArea : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Vec3> SampleLocations;
        [RTTI.Member(1, 0x30)] public WorldTransform Orientation;
        [RTTI.Member(2, 0x70)] public Shape2DExtrusion InputDataArea;
        [RTTI.Member(3, 0xB0)] public int MaxSampleLocations;
        [RTTI.Member(4, 0xC0)] public BoundingBox3 FinalDataArea;
        [RTTI.Member(5, 0xE0)] public Ref<RenderDataStreamingHintData> HintData;
        [RTTI.Member(6, 0xE8)] public Array<RenderDataStreamingHintDataKdtreeNode> KdTreeNodes;
    }

    [RTTI.Serializable(0x32CA922B6E402BDF)]
    public class RenderDataStreamingHintDataAreaResource : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public String Name;
        [RTTI.Member(1, 0x30, "Settings")] public String BinaryPath;
        [RTTI.Member(2, 0x38, "Settings")] public Array<Ref<RenderDataStreamingHintDataArea>> Areas;
    }

    [RTTI.Serializable(0x6F9113693B3D3036)]
    public class RenderDataStreamingHintDataEntry
    {
        [RTTI.Member(0, 0x0)] public Vec3 Location;
        [RTTI.Member(1, 0x10)] public uint32 StreamingMemorySize;
        [RTTI.Member(2, 0x18)] public uint32 ObjectCount;
        [RTTI.Member(3, 0x20)] public Array<uint16> LODData;
    }

    [RTTI.Serializable(0xDEFC089177439132)]
    public class RenderDataStreamingHintDataKdtreeNode
    {
        [RTTI.Member(0, 0x0)] public Vec3Pack Position;
        [RTTI.Member(1, 0xC)] public int32 PackedData;
    }

    [RTTI.Serializable(0x23E955DC696576C6)]
    public class RenderDataStreamingHintObject
    {
        [RTTI.Member(0, 0x0)] public MurmurHashValue DataHash;
    }

    [RTTI.Serializable(0xA6F006CC5BF1574D)]
    public class RenderEffectResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<RenderTechniqueSet> TechniqueSets;
        [RTTI.Member(1, 0x38, "General")] public ESortMode SortMode;
        [RTTI.Member(2, 0x3C, "General")] public ESortOrder SortOrder;
        [RTTI.Member(3, 0x40, "General")] public ERenderEffectType EffectType;
        [RTTI.Member(4, 0x44, "General")] public bool MakeAccumulationBufferCopy;
        [RTTI.Member(5, 0x48, "General")] public VertexElementSet BaseElementSet;
    }

    [RTTI.Serializable(0x46B0C2E627814397)]
    public class RenderEffectShaderOverrides
    {
        [RTTI.Member(0, 0x0)] public int PrimitiveIndex;
        [RTTI.Member(1, 0x8)] public Array<ShaderTextureBinding> ShaderTextureOverrides;
        [RTTI.Member(2, 0x18)] public Array<ShaderVariableBinding> ShaderVariableOverrides;
    }

    [RTTI.Serializable(0x5F789D3CF16BFCCE)]
    public class RenderEffectShaderOverridesResource : Resource
    {
        [RTTI.Member(0, 0x28)] public RenderEffectShaderOverrides ShaderOverrides;
    }

    [RTTI.Serializable(0xB35237763F8D9424)]
    public class RenderEffectSwapEntry
    {
        [RTTI.Member(0, 0x0)] public Ref<RenderEffectResource> OriginalRenderEffectResource;
        [RTTI.Member(1, 0x8)] public Ref<RenderEffectResource> NewRenderEffectResource;
        [RTTI.Member(2, 0x10)] public Array<GGUUID> UUIDsToSwap;
        [RTTI.Member(3, 0x20)] public ERegion Region;
    }

    [RTTI.Serializable(0xCD1DAF00F291C5D2)]
    public class RenderEffectSwapperResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<RenderEffectSwapEntry> Entries;
        [RTTI.Member(1, 0x38)] public Array<TextureStreamingHighLODSkipSet> TextureSkipEntries;
        [RTTI.Member(2, 0x48)] public Array<SequenceHighLODSkipSet> SequenceSkipEntries;
        [RTTI.Member(3, 0x58)] public Array<TerrainMaterialSwapEntry> TerrainMaterialSwapEntries;
    }

    [RTTI.Serializable(0x239F7B6CFAED0C5E)]
    public class RenderTechnique
    {
        [RTTI.Member(0, 0x0, "General")] public RenderTechniqueState RenderTechniqueState;
        [RTTI.Member(1, 0x8, "General")] public SRTBindingCache SRTBindingCache;
        [RTTI.Member(2, 0x38, "General")] public ERenderTechniqueType TechniqueType;
        [RTTI.Member(3, 0x40, "General")] public uint64 WorldDataBingingMask;
        [RTTI.Member(4, 0x48, "General")] public bool GPUSkinned;
        [RTTI.Member(5, 0x49, "General")] public bool WriteGlobalVertexCache;
        [RTTI.Member(6, 0x4A, "General")] public bool InitiallyEnabled;
        [RTTI.Member(7, 0x4C, "General")] public uint32 MaterialLayerID;
        [RTTI.Member(8, 0x50, "General")] public Array<SamplerBindingWithHandle> SamplerBindings;
        [RTTI.Member(9, 0x60, "General")] public Array<TextureBindingWithHandle> TextureBindings;
        [RTTI.Member(10, 0x70, "General")] public Array<VariableBindingWithHandle> VariableBindings;
        [RTTI.Member(11, 0x80, "General")] public Ref<ShaderResource> Shader;
        [RTTI.Member(12, 0xA0, "General")] public RenderTechniqueID ID;
    }

    [RTTI.Serializable(0x93A72255DEFBFD0A)]
    public class RenderTechniqueID
    {
        [RTTI.Member(0, 0x0)] public uint64 Hash;
    }

    [RTTI.Serializable(0x475F2D20E321421B)]
    public class RenderTechniqueSet
    {
        [RTTI.Member(0, 0x0, "General")] public Array<RenderTechnique> RenderTechniques;
        [RTTI.Member(1, 0x10, "General")] public ERenderTechniqueSetType Type;
        [RTTI.Member(2, 0x14, "General")] public ERenderEffectType EffectType;
        [RTTI.Member(3, 0x40, "General")] public uint32 AvailableTechniquesMask;
        [RTTI.Member(4, 0x44, "General")] public uint32 InitiallyEnabledTechniquesMask;
    }

    [RTTI.Serializable(0x72869318817B0B97)]
    public class RenderTechniqueState
    {
        [RTTI.Member(0, 0x0, "General", true)] public bool HasAlphaTest;
        [RTTI.Member(1, 0x0, "General", true)] public bool EnableDepthClamp;
        [RTTI.Member(2, 0x0, "General", true)] public uint32 ColorMask;
        [RTTI.Member(3, 0x0, "General")] public uint16 PackedData;
        [RTTI.Member(4, 0x0, "General", true)] public EAlphaDepth DepthTestFunc;
        [RTTI.Member(5, 0x0, "General", true)] public float DepthBias;
        [RTTI.Member(6, 0x0, "General", true)] public bool WriteDepth;
        [RTTI.Member(7, 0x0, "General", true)] public bool Wireframe;
        [RTTI.Member(8, 0x0, "General", true)] public ELayerOperation BlendMode;
        [RTTI.Member(9, 0x0, "General", true)] public ECull CullMode;
        [RTTI.Member(10, 0x0, "General", true)] public bool UseStencil;
        [RTTI.Member(11, 0x2, "General")] public HalfFloat PackedDepthBias;
        [RTTI.Member(12, 0x4, "General")] public uint32 PackedColorMask;
    }

    [RTTI.Serializable(0xCB56261CAB46329F)]
    public class RenderZone : WorldNode
    {
        [RTTI.BaseClass(0x60)] public Shape2DExtrusion @Shape2DExtrusion;
        [RTTI.Member(1, 0xA0, "Render")] public float FarPlane;
        [RTTI.Member(2, 0xA4, "General")] public float FadeDistance;
        [RTTI.Member(3, 0xA8, "General")] public ERenderZoneFadeRegion FadeRegion;
        [RTTI.Member(4, 0xAC, "General")] public int Priority;
        [RTTI.Member(5, 0xB0, "General")] public float DefaultIntensity;
        [RTTI.Member(6, 0xB8, "Render")] public Ref<Texture> CubemapTexture;
        [RTTI.Member(7, 0xC0, "Render")] public Ref<CubemapGBuffer> CubemapGBuffer;
        [RTTI.Member(8, 0xC8, "General")] public bool SkipStreamingHighLODs;
        [RTTI.Member(9, 0xD0, "Render")] public Vec4 ReflectionCubeIntensity;
        [RTTI.Member(10, 0xE0, "Render")] public bool ForceSunlightDisable;
        [RTTI.Member(11, 0xE4, "Render")] public EIndirectLightingHint IndirectLightingHint;
        [RTTI.Member(12, 0xF0, "Render")] public Vec3 SecondaryCompartmentShadowDetectionBoxExtents;
        [RTTI.Member(13, 0x100, "Render")] public Vec3 MaxSecondaryCompartmentShadoxBoxExtents;
        [RTTI.Member(14, 0x110, "GameSpecific")] public Ref<PostProcessSettingsResource> PostProcessSettings;
        [RTTI.Member(15, 0x120, "GameSpecific")] public ExposureSettings ExposureSettings;
        [RTTI.Member(16, 0x190, "GameSpecific")] public float ExposureSettingsWeight;
        [RTTI.Member(17, 0x198, "GameSpecific")] public Array<RenderZoneParticleEffect> ParticleEffects;
        [RTTI.Member(18, 0x1A8, "GameSpecific")] public Ref<ClimateBase> Climate;
        [RTTI.Member(19, 0x1B0, "Render")] public float MinSkyvisValue;
    }

    [RTTI.Serializable(0x8827034D60A9ABD)]
    public class RenderZoneManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x3F217FB9DD6EE3FD)]
    public class RenderZoneParticleEffect
    {
        [RTTI.Member(0, 0x0, "General")] public Ref<ParticleSystemResource> ParticleSystem;
        [RTTI.Member(1, 0x8, "General")] public float EmitRate;
    }

    [RTTI.Serializable(0xF32E55727166F8EC)]
    public class RenderingPrimitiveResource : PrimitiveResource
    {
        [RTTI.Member(0, 0x80, "General")] public Ref<RenderEffectResource> RenderEffects;
    }

    [RTTI.Serializable(0x9C87025AA4FF7E32)]
    public class ReplenishLoadoutAction : EntityAction
    {
    }

    [RTTI.Serializable(0xEF469AD94938B77B)]
    public class RequestOwnershipEvent : RTTIObject
    {
    }

    [RTTI.Serializable(0x5BC20068B324214C)]
    public class ResetDelayedActionAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<DelayedAction> Action;
    }

    [RTTI.Serializable(0x38CE3651C24FFDF)]
    public class ResistanceStatModifierResource : ActiveStatModifierResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<DamageModifierComponentResource> DamageModifierComponent;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<CurveResource> RatingToResistanceCurve;
    }

    [RTTI.Serializable(0x83E784D26B042AC8)]
    public class Resource : BaseResource
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
    }

    [RTTI.Serializable(0xA7AD4715C9D351C5)]
    public class ResourceSelectorBase : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<Resource> Resource;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<ResourceSelectorBase>> Selectors;
    }

    [RTTI.Serializable(0x6633274CEC82D32)]
    public class ResourceWithoutLegacyName : BaseResource
    {
    }

    [RTTI.Serializable(0x67414DABD18E86DC)]
    public class RespawnEntity : Entity
    {
        [RTTI.Member(0, 0x2E4, "Main")] public float RespawnDelay;
        [RTTI.Member(1, 0x2EC, "Main")] public int RespawnCount;
    }

    [RTTI.Serializable(0x31CC25951F4BFD35)]
    public class RespawnEntityResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Respawn")] public float Delay;
        [RTTI.Member(1, 0x138, "Respawn")] public Ref<EntityResource> Entity;
        [RTTI.Member(2, 0x140, "Respawn")] public String SpawnFunction;
        [RTTI.Member(3, 0x148, "Respawn")] public bool NeedsAI;
        [RTTI.Member(4, 0x14C, "Respawn")] public int Count;
        [RTTI.Member(5, 0x150, "Respawn")] public Ref<EntityResource> MayaSpawnEntity;
    }

    [RTTI.Serializable(0x58F591361AF10C5E)]
    public class RespawnEntityWithBoundingBox : RespawnEntity
    {
    }

    [RTTI.Serializable(0xD8C2C3BC17CB394C)]
    public class RespawnEntityWithBoundingBoxResource : RespawnEntityResource
    {
        [RTTI.Member(0, 0x160, "Respawn")] public BoundingBox3 BoundingBox;
    }

    [RTTI.Serializable(0x15EFD1BF2759BAA0)]
    public class ResponseCurve
    {
        [RTTI.Member(0, 0x0)] public float LowerInput;
        [RTTI.Member(1, 0x4)] public float Range;
        [RTTI.Member(2, 0x8)] public Array<float> Samples;
    }

    [RTTI.Serializable(0x7ABD0B09D6C1DC6)]
    public class ReturnEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x49A2CD34914298AE)]
    public class ReturnEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public int BlendFrames;
    }

    [RTTI.Serializable(0x4C014BCC50EA25F5)]
    public class ReverbPresetResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public bool EnableMfdnReverb;
        [RTTI.Member(1, 0x29, "General")] public bool EnableConvolutionReverb;
        [RTTI.Member(2, 0x30, "ReverbProperties")] public float EffectLevel;
        [RTTI.Member(3, 0x34, "ReverbProperties")] public float EarlyReflectionsDelay;
        [RTTI.Member(4, 0x38, "ReverbProperties")] public float EarlyReflectionsTimeFactor;
        [RTTI.Member(5, 0x3C, "ReverbProperties")] public float EarlyReflectionsLevel;
        [RTTI.Member(6, 0x40, "ReverbProperties")] public float EarlyReflectionsSlapback;
        [RTTI.Member(7, 0x44, "ReverbProperties")] public float EarlyReflectionsHFRatio;
        [RTTI.Member(8, 0x48, "ReverbProperties")] public float DecayTime;
        [RTTI.Member(9, 0x4C, "ReverbProperties")] public float DecayLevel;
        [RTTI.Member(10, 0x50, "ReverbProperties")] public float DecayHFRatio;
        [RTTI.Member(11, 0x54, "ReverbProperties")] public float DecayDiffusion;
        [RTTI.Member(12, 0x58, "ReverbProperties")] public float DiffuseTailHfReference;
        [RTTI.Member(13, 0x5C, "ReverbProperties")] public float EffectLowPassCutoff;
        [RTTI.Member(14, 0x60, "ReverbProperties")] public float EffectHighPassCutoff;
        [RTTI.Member(15, 0x64, "ReverbModification")] public float EarlyReflectionsDelayMod;
        [RTTI.Member(16, 0x68, "ReverbModification")] public float EarlyReflectionsTimeFactorMod;
        [RTTI.Member(17, 0x6C, "ReverbModification")] public float EarlyReflectionsLevelMod;
        [RTTI.Member(18, 0x70, "ReverbModification")] public float EarlyReflectionsSlapbackMod;
        [RTTI.Member(19, 0x74, "ReverbModification")] public float EarlyReflectionsHFRatioMod;
        [RTTI.Member(20, 0x78, "ConvolutionReverb")] public Ref<ImpulseResponseResource> ImpulseResponse;
        [RTTI.Member(21, 0x80, "ConvolutionReverb")] public bool Reverse;
        [RTTI.Member(22, 0x84, "ConvolutionReverb")] public float StartOffset;
        [RTTI.Member(23, 0x88, "ConvolutionReverb")] public float StopOffset;
        [RTTI.Member(24, 0x8C, "ConvolutionReverb")] public float Gain;
        [RTTI.Member(25, 0x90, "ConvolutionReverb")] public float AttackTime;
        [RTTI.Member(26, 0x94, "ConvolutionReverb")] public int AttackAlpha;
        [RTTI.Member(27, 0x98, "ConvolutionReverb")] public float SustainTime;
        [RTTI.Member(28, 0x9C, "ConvolutionReverb")] public float ReleaseTime;
        [RTTI.Member(29, 0xA0, "ConvolutionReverb")] public int ReleaseAlpha;
        [RTTI.Member(30, 0xA8, "DelayLine")] public float MaxAbsolutePitchDeviation;
        [RTTI.Member(31, 0xAC, "DelayLine")] public float LowPassCoefficient;
        [RTTI.Member(32, 0xB0, "DelayLine")] public EDelayLineTapIndex FeedbackTap;
        [RTTI.Member(33, 0xB4, "DelayLine")] public bool UseZeroDelayTap;
        [RTTI.Member(34, 0xB8, "DelayLine")] public float InputGain;
        [RTTI.Member(35, 0xBC, "DelayLine")] public float OutputGain;
        [RTTI.Member(36, 0xC0, "DelayLine")] public float FeedbackGain;
        [RTTI.Member(37, 0xC4, "DelayLine")] public float FeedforwardGain;
        [RTTI.Member(38, 0xC8, "DelayLine")] public float DelayTimeTap0;
        [RTTI.Member(39, 0xCC, "DelayLine")] public float DelayTimeTap1;
        [RTTI.Member(40, 0xD0, "DelayLine")] public float DelayTimeTap2;
        [RTTI.Member(41, 0xD4, "DelayLine")] public float DelayTimeTap3;
        [RTTI.Member(42, 0xD8, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap0;
        [RTTI.Member(43, 0xE0, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap1;
        [RTTI.Member(44, 0xE8, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap2;
        [RTTI.Member(45, 0xF0, "DelayLine")] public Ref<ParametricEqResource> Filter1Tap3;
        [RTTI.Member(46, 0xF8, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap0;
        [RTTI.Member(47, 0x100, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap1;
        [RTTI.Member(48, 0x108, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap2;
        [RTTI.Member(49, 0x110, "DelayLine")] public Ref<ParametricEqResource> Filter2Tap3;
        [RTTI.Member(50, 0x118, "General")] public bool RotateWithListener;
        [RTTI.Member(51, 0x11C, "General")] public float Focus;
        [RTTI.Member(52, 0x120, "General")] public float FadeTime;
        [RTTI.Member(53, 0x124, "General")] public bool SuppressDrySignal;
    }

    [RTTI.Serializable(0xFF95E20E79B207A1)]
    public class ReverbSubmixResource : SubmixResource
    {
    }

    [RTTI.Serializable(0xDB8D647965BC45D8)]
    public class ReviveAbilityWeapon : EntityComponent
    {
    }

    [RTTI.Serializable(0xAAA0135F14D28E40)]
    public class ReviveAbilityWeaponRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3ACFE96046D0A3D8)]
    public class ReviveAbilityWeaponResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AIBodyPartBase> BodyPartResource;
        [RTTI.Member(1, 0x30, "Logic")] public float FiringPhysicsImpulse;
        [RTTI.Member(2, 0x34, "Logic")] public float AimRaycastLength;
        [RTTI.Member(3, 0x38, "TrajectoryPrediction")] public float PredictionFactor;
        [RTTI.Member(4, 0x3C, "TrajectoryPrediction")] public float PredictionFactorAI;
        [RTTI.Member(5, 0x40, "Logic")] public float Range;
        [RTTI.Member(6, 0x44, "Logic")] public float ReviveHealthPercentage;
        [RTTI.Member(7, 0x48, "Logic")] public String WeaponId;
        [RTTI.Member(8, 0x50, "Logic")] public Ref<CurveResource> AimShapeCurve;
    }

    [RTTI.Serializable(0x9C81A1F51D34C083)]
    public class ReviveAmmoSettings
    {
        [RTTI.Member(0, 0x0)] public String Weapon;
        [RTTI.Member(1, 0x8)] public int Ammo;
        [RTTI.Member(2, 0xC)] public bool IsAuxiliaryWeapon;
    }

    [RTTI.Serializable(0xDCB13D20171DF91C)]
    public class RewardBonusRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public GGUUID RewardUUID;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public float Probability;
        [RTTI.Member(2, 0x3C, "StateSaving", true)] public int RollBufferCount;
    }

    [RTTI.Serializable(0x61F86C24082B1AE8)]
    public class RewardComponent : PickUpComponentBase
    {
    }

    [RTTI.Serializable(0x17B1BB6FF63D797E)]
    public class RewardComponentResource : PickUpComponentBaseResource
    {
        [RTTI.Member(0, 0xA0, "Loot")] public bool IsLootPersistent;
        [RTTI.Member(1, 0xA1, "Loot")] public bool IsLoootingAllowedWhileAlive;
        [RTTI.Member(2, 0xA2, "Loot")] public bool IsAdditionalLootRollsAllowed;
        [RTTI.Member(3, 0xA3, "Loot")] public bool ClearInventoryWhenAddingLoot;
        [RTTI.Member(4, 0xA4, "Loot")] public float AutoMenuCloseBufferDistance;
        [RTTI.Member(5, 0xA8, "Loot")] public UUIDRef<MenuPageBase> MenuPage;
        [RTTI.Member(6, 0xB8, "Loot")] public Array<Ref<LootSlot>> LootSlots;
        [RTTI.Member(7, 0xC8, "Exp")] public Ref<LevelBasedXpReward> XpReward;
        [RTTI.Member(8, 0xD0, "Exp")] public Ref<LocalizedTextResource> Reason;
        [RTTI.Member(9, 0xD8, "Loot")] public Array<RewardDestructibilityTagToLootItemMapping> LootableParts;
    }

    [RTTI.Serializable(0xC7DCEAFA497CD3DC)]
    public class RewardDestructibilityTagToLootItemMapping
    {
        [RTTI.Member(0, 0x0, "Logic")] public Ref<TagProperty> TagProperty;
        [RTTI.Member(1, 0x8, "Logic")] public Ref<EntityResource> LootItem;
    }

    [RTTI.Serializable(0xB268303462054031)]
    public class RewardManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "FacePaints")] public Array<Ref<UnlockableFacePaint>> UnlockableFacePaints;
        [RTTI.Member(1, 0x38, "FacePaints")] public Ref<LocalizedTextResource> NoFacePaintMenuText;
        [RTTI.Member(2, 0x40, "FocusModels")] public Array<Ref<UnlockableFocusModel>> UnlockableFocusModels;
        [RTTI.Member(3, 0x50, "Notifications")] public Ref<PlayerNotificationResource> RewardsUnlockedNotification;
        [RTTI.Member(4, 0x58, "Notifications")] public Ref<PlayerNotificationPriority> RewardsUnlockedNotificationPriority;
    }

    [RTTI.Serializable(0x6EB73AF078CD9447)]
    public class RewardManagerRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public Array<Ref<LootContainerRestoreState>> LootContainerStates;
        [RTTI.Member(1, 0x38, "StateSaving", true)] public Array<Ref<RewardBonusRestoreState>> RewardBonusStates;
        [RTTI.Member(2, 0x48, "StateSaving", true)] public uint RewardComponentSeed;
        [RTTI.Member(3, 0x4C, "StateSaving", true)] public uint LootPackageSeed;
    }

    [RTTI.Serializable(0xD7C86A01F71C50E5)]
    public class RingSegmentVolumetricAnnotation : VolumetricAnnotation
    {
        [RTTI.Member(0, 0x38, "Logic")] public FRange DistanceRange;
        [RTTI.Member(1, 0x40, "Logic")] public FRange DistanceRangeSquared;
        [RTTI.Member(2, 0x48, "Logic")] public float MaxAbsHeading;
        [RTTI.Member(3, 0x4C, "Logic")] public float MaxAbsHeadingCos;
        [RTTI.Member(4, 0x50, "Logic")] public FRange HeightRange;
        [RTTI.Member(5, 0x58, "Logic")] public float ReferenceHeading;
        [RTTI.Member(6, 0x60, "Logic")] public Quat ReferenceRotation;
    }

    [RTTI.Serializable(0x461A4B399D5A4B17)]
    public class Road : Route
    {
        [RTTI.Member(0, 0xB0, "Debug")] public FRGBAColor DebugColor;
        [RTTI.Member(1, 0xC0)] public ERoadBakeDataMode BakeMode;
    }

    [RTTI.Serializable(0xA14E7A972EA5BE9C)]
    public class RoadConnection
    {
    }

    [RTTI.Serializable(0x7BE3DF7E861C422)]
    public class RoadJunction
    {
    }

    [RTTI.Serializable(0x2219E73D2D02CBD8)]
    public class RoadLink : RoadConnection
    {
    }

    [RTTI.Serializable(0x6D176B79ED6EB855)]
    public class RoadNode : RouteNode
    {
        [RTTI.Member(0, 0xB0, "Logic")] public float Width;
        [RTTI.Member(1, 0xB4, "Logic")] public float HeightFalloff;
        [RTTI.Member(2, 0xB8, "Logic")] public float ProfileScale;
        [RTTI.Member(3, 0xBC, "Logic")] public float Mask0Tiling;
        [RTTI.Member(4, 0xC0, "Logic")] public float Mask1Tiling;
        [RTTI.Member(5, 0xC4, "Logic")] public float MaskHeightScale;
        [RTTI.Member(6, 0xC8, "Logic")] public float MaskBreakUpScale;
        [RTTI.Member(7, 0xCC, "Logic")] public ERoadNodeProfileType ProfileType;
        [RTTI.Member(8, 0xD0, "Logic")] public ERoadNodeSnapMode SnapMode;
    }

    [RTTI.Serializable(0x52348AAD245CDE28)]
    public class RobotAction : RTTIRefObject
    {
    }

    [RTTI.Serializable(0xC925CB6DDB2865C5)]
    public class RobotActionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x34FAAE49A306B440)]
    public class RobotActionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<RobotActionResource>> Actions;
    }

    [RTTI.Serializable(0xEAC2C74E0F307C53)]
    public class RobotActionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String ActionID;
        [RTTI.Member(1, 0x30, "Logic")] public EStaminaType StaminaType;
        [RTTI.Member(2, 0x34, "Logic")] public float StaminaCost;
        [RTTI.Member(3, 0x38, "Logic")] public float StaminaCostPerSecond;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<StaminaUsageType> StaminaUsageType;
    }

    [RTTI.Serializable(0xCD26EF7DD2788C12)]
    public class RobotFuriousStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0xE8ED079C38041659)]
    public class RobotFuriousStateComponentResource : RobotStateComponentResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public float StateCoolDownDuration;
        [RTTI.Member(1, 0x80, "Logic")] public Ref<StaminaModifier> StaminaDepletedModifier;
    }

    [RTTI.Serializable(0xCDE7D9F9F690099D)]
    public class RobotInjuredStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0x13D29A33A5A62D43)]
    public class RobotInjuredStateComponentResource : RobotStateComponentResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public float CriticallyInjuredHealthFactor;
        [RTTI.Member(1, 0x7C, "Logic")] public float RecoveredHealthFactor;
    }

    [RTTI.Serializable(0xC4DB887023084667)]
    public class RobotLowStabilityStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0x76763600C8B4E96B)]
    public class RobotLowStabilityStateComponentResource : RobotStateComponentResource
    {
    }

    [RTTI.Serializable(0xAE67F115F75E4FD)]
    public class RobotMeleeWeaponAnimationInfoBase : BaseResource
    {
    }

    [RTTI.Serializable(0xD5ABD2CB812FE5D0)]
    public class RobotMeleeWeaponAnimationInfoDirectional : RobotMeleeWeaponAnimationInfoBase
    {
        [RTTI.Member(0, 0x20)] public String AnimationVariableName;
        [RTTI.Member(1, 0x28)] public Array<RobotMeleeWeaponAnimationInfoValuePair> AttackValuePairs;
        [RTTI.Member(2, 0x38)] public bool Switch;
    }

    [RTTI.Serializable(0x4878BA049FA7768)]
    public class RobotMeleeWeaponAnimationInfoSource : RobotMeleeWeaponAnimationInfoBase
    {
        [RTTI.Member(0, 0x20)] public float Duration;
        [RTTI.Member(1, 0x24)] public float UpdateTargetDuration;
        [RTTI.Member(2, 0x28)] public float UpdateTargetOverrideDuration;
        [RTTI.Member(3, 0x2C)] public float PrimaryDamageTime;
        [RTTI.Member(4, 0x30)] public Vec3 PrimaryDamageBonePosition;
        [RTTI.Member(5, 0x40)] public Vec3 PrimaryDamagePosition;
        [RTTI.Member(6, 0x50)] public float PrimaryDamageRotation;
        [RTTI.Member(7, 0x54)] public float EndOfAllDamageTime;
        [RTTI.Member(8, 0x60)] public Vec3 PostDamageDisplacement;
        [RTTI.Member(9, 0x70)] public bool HasSupportForMovingEnd;
    }

    [RTTI.Serializable(0x123642BF1289E67)]
    public class RobotMeleeWeaponAnimationInfoValuePair
    {
        [RTTI.Member(0, 0x0)] public Ref<RobotMeleeWeaponAnimationInfoBase> AttackInfo;
        [RTTI.Member(1, 0x8)] public float Value;
    }

    [RTTI.Serializable(0xAE2E27FF10193A40)]
    public class RobotMeleeWeaponAttackState : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String StateName;
        [RTTI.Member(1, 0x30, "Logic")] public int StateID;
        [RTTI.Member(2, 0x34, "Logic")] public int AnimationEndSyncEvent;
        [RTTI.Member(3, 0x38, "Logic")] public int AnimationMovingEndDurationEventID;
        [RTTI.Member(4, 0x40, "Logic")] public String PrimaryDamageHelper;
        [RTTI.Member(5, 0x50, "Logic")] public Vec3 PrimaryDamageOffset;
        [RTTI.Member(6, 0x60, "Logic")] public int PrimaryDamageAnimationEvent;
        [RTTI.Member(7, 0x64, "Logic")] public bool PlansAheadWhenAboutToStop;
    }

    [RTTI.Serializable(0xD7EE04367F5BF816)]
    public class RobotMeleeWeaponComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC15E4479C4B55D49)]
    public class RobotMeleeWeaponComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String AnimationAction;
        [RTTI.Member(1, 0x30, "Logic")] public String BreakoutAnimationAction;
        [RTTI.Member(2, 0x38, "Logic")] public String SuccessAnimationAction;
        [RTTI.Member(3, 0x40, "Logic")] public float AnimationActionDuration;
        [RTTI.Member(4, 0x48, "Logic")] public String AnimationVariable;
        [RTTI.Member(5, 0x50, "Logic")] public float AnimationVariableValue;
        [RTTI.Member(6, 0x58, "Logic")] public Array<Ref<RobotMeleeWeaponAttackState>> AnimationAttackStates;
        [RTTI.Member(7, 0x68, "Logic")] public Array<Ref<RobotMeleeWeaponAnimationInfoBase>> AnimationInfo;
        [RTTI.Member(8, 0x78, "Logic")] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(9, 0x80, "Logic")] public String AnimationTag;
        [RTTI.Member(10, 0x88, "Logic")] public String DirectionAnimationVariable;
        [RTTI.Member(11, 0x90, "Logic")] public String DistanceAnimationVariable;
        [RTTI.Member(12, 0x98, "Logic")] public String MovingEnterAnimationVariable;
        [RTTI.Member(13, 0xA0, "Logic")] public CPtr<EntityAction> StartAction;
        [RTTI.Member(14, 0xA8, "Logic")] public CPtr<EntityAction> StopAction;
        [RTTI.Member(15, 0xB0, "Logic")] public CPtr<EntityAction> StartActionOnTarget;
        [RTTI.Member(16, 0xB8, "Logic")] public CPtr<EntityAction> StopActionOnTarget;
        [RTTI.Member(17, 0xC0, "Logic")] public CPtr<EntityAction> HitAction;
        [RTTI.Member(18, 0xC8, "Logic")] public Array<Ref<RobotMeleeWeaponDamageEvent>> DamageEvents;
        [RTTI.Member(19, 0xD8, "Logic")] public float DamageClamp;
        [RTTI.Member(20, 0xDC, "Logic")] public float DurationOverride;
        [RTTI.Member(21, 0xE0, "Logic")] public FRange DistanceClamp;
        [RTTI.Member(22, 0xE8, "Logic")] public Ref<WarpedAnimation> WarpedAnimation;
        [RTTI.Member(23, 0xF0, "Logic")] public String ForcedMountTag;
        [RTTI.Member(24, 0xF8, "Logic")] public String ForcedMountSuccessfulAnimation;
        [RTTI.Member(25, 0x100, "Logic")] public String ForcedMountBoxHelper;
        [RTTI.Member(26, 0x110, "Logic")] public BoundingBox3 ForcedMountBox;
        [RTTI.Member(27, 0x130, "Logic")] public Ref<MountMode> ForcedMountMode;
        [RTTI.Member(28, 0x138, "AI")] public String WeaponId;
        [RTTI.Member(29, 0x150, "AI")] public float DamageRadius;
        [RTTI.Member(30, 0x158, "AI")] public Array<Ref<VolumetricAnnotation>> TriggerVolumes;
        [RTTI.Member(31, 0x168, "AI")] public Array<Ref<VolumetricAnnotation>> ExclusionVolumes;
        [RTTI.Member(32, 0x178, "AI")] public Array<Ref<VolumetricAnnotation>> MeleeLimitationVolumes;
        [RTTI.Member(33, 0x18C, "Logic")] public bool AllowManualInterrupt;
        [RTTI.Member(34, 0x18D, "Logic")] public bool CanAttackCorpses;
        [RTTI.Member(35, 0x190, "Attach")] public String AttachTargetToHelperOnHit;
        [RTTI.Member(36, 0x198, "AI")] public EAttackNodePolicy AttackMode;
        [RTTI.Member(37, 0x19C, "AI")] public float CollisionRadiusOverride;
    }

    [RTTI.Serializable(0x8556B850ED35363A)]
    public class RobotMeleeWeaponDamageEvent : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public CPtr<EntityAction> StartDamageAction;
        [RTTI.Member(1, 0x30, "Logic")] public CPtr<EntityAction> StopDamageAction;
        [RTTI.Member(2, 0x38, "Logic")] public Array<Ref<EntityComponentResource>> DamageComponents;
        [RTTI.Member(3, 0x48, "Animation")] public String AnimationEvent;
    }

    [RTTI.Serializable(0x7DDE4D639B8CAB25)]
    public class RobotMeleeWeaponExitState : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String StateName;
        [RTTI.Member(1, 0x30, "Logic")] public int StateID;
        [RTTI.Member(2, 0x34, "Logic")] public float Duration;
        [RTTI.Member(3, 0x38, "Logic")] public int SyncEventIndex;
    }

    [RTTI.Serializable(0x27552FC80397B46F)]
    public class RobotMountedStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0x5C387242B7210B33)]
    public class RobotMountedStateComponentResource : RobotStateComponentResource
    {
    }

    [RTTI.Serializable(0x78E1D638B962E7)]
    public class RobotMountedWeaponComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8A821757234F9EB8)]
    public class RobotMountedWeaponComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<RobotMountedWeaponDescriptionResource>> RangedWeapons;
        [RTTI.Member(1, 0x38, "Logic")] public Array<Ref<RobotMountedWeaponInputMappingResource>> MeleeWeapons;
    }

    [RTTI.Serializable(0xCAF6991E1DC4DF85)]
    public class RobotMountedWeaponDescriptionResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntityComponentResource> WeaponComponentResource;
        [RTTI.Member(1, 0x30, "Logic")] public String Name;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<Texture> IconTexture;
    }

    [RTTI.Serializable(0x950E14D6672AE91C)]
    public class RobotMountedWeaponInputMappingResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EMountDeviceFunction DeviceFunction;
        [RTTI.Member(1, 0x2C, "Logic")] public EMountControlDirection RequiredControlDirection;
        [RTTI.Member(2, 0x30, "Logic")] public EMountMovementState RequiredMoveState;
        [RTTI.Member(3, 0x34, "Logic")] public IRange RequiredPostureRange;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<EntityComponentResource> WeaponComponentResource;
        [RTTI.Member(5, 0x48, "Logic")] public bool StandStillDuringAttack;
        [RTTI.Member(6, 0x50, "Logic")] public Ref<CurveResource> MeleeAimAssistAngleDistanceCurve;
    }

    [RTTI.Serializable(0xEBADF24D99447AC9)]
    public class RobotNotebookViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xBDE21FBE7A646841)]
    public class RobotPermaBlindStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0xE6A4DC39E2A10D89)]
    public class RobotPermaBlindStateComponentResource : RobotStateComponentResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public int NumberOfEyes;
    }

    [RTTI.Serializable(0xCEDB21CFC83526D1)]
    public class RobotReplenishingStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0x527A7389CA083452)]
    public class RobotReplenishingStateComponentResource : RobotStateComponentResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public float StaminaRegenerationDelay;
        [RTTI.Member(1, 0x7C, "Logic")] public EStaminaType StaminaType;
    }

    [RTTI.Serializable(0x474B526A0D6EFA62)]
    public class RobotStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x673D12ABBCAE2749)]
    public class RobotStateComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "AI")] public String StateSymbol;
        [RTTI.Member(1, 0x38, "AI")] public Array<String> AdditionalSymbols;
        [RTTI.Member(2, 0x58, "Logic")] public float Duration;
        [RTTI.Member(3, 0x5C, "AI")] public float StateEntryFactDuration;
        [RTTI.Member(4, 0x60, "AI")] public float StateExitFactDuration;
        [RTTI.Member(5, 0x68, "Logic")] public Ref<GraphProgramResource> ActivationGraph;
        [RTTI.Member(6, 0x70, "Logic")] public Ref<GraphProgramResource> DeactivationGraph;
    }

    [RTTI.Serializable(0x5DE351F53D0469F1)]
    public class RobotTempBlindStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0x16395198E7A2FF8D)]
    public class RobotTempBlindStateComponentResource : RobotStateComponentResource
    {
    }

    [RTTI.Serializable(0x3D224F47010674D0)]
    public class RobotTiredStateComponent : RobotStateComponent
    {
    }

    [RTTI.Serializable(0x6540E04E065F4648)]
    public class RobotTiredStateComponentResource : RobotStateComponentResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public EStaminaType StaminaType;
        [RTTI.Member(1, 0x7C, "Logic")] public float DamageThreshold;
    }

    [RTTI.Serializable(0x1A7EA5CD9CA082DE)]
    public class RobotTrackingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA178393BB0932748)]
    public class RobotTrackingComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x82CFE8E8CAA45EAA)]
    public class RobotTrackingComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<SoundResource> TrackingSound;
        [RTTI.Member(1, 0x30, "Representation")] public Ref<CurveResource> SoundVolumeOverDistance;
        [RTTI.Member(2, 0x38, "Representation")] public Ref<CurveResource> SoundFrequencyOverDistance;
        [RTTI.Member(3, 0x40, "Representation")] public Ref<CurveResource> SoundVolumePerAngle;
        [RTTI.Member(4, 0x48, "Representation")] public Ref<CurveResource> SoundFrequencyPerAngle;
        [RTTI.Member(5, 0x50, "Representation")] public String ShaderVariableName;
        [RTTI.Member(6, 0x58, "Representation")] public Ref<CurveResource> ShaderVariableAnimationCurve;
    }

    [RTTI.Serializable(0x6CBFDFB6E5480E67)]
    public class Rocket : Throwable
    {
    }

    [RTTI.Serializable(0x670B844F352777DB)]
    public class RocketLauncherWeapon : AmmoEjectorWeapon
    {
    }

    [RTTI.Serializable(0x9F5BA6CA96BA8E7F)]
    public class RocketLauncherWeaponRep : AmmoEjectorWeaponRep
    {
    }

    [RTTI.Serializable(0x4BE42BC399B7CB97)]
    public class RocketLauncherWeaponResource : AmmoEjectorWeaponResource
    {
        [RTTI.Member(0, 0x120, "Logic")] public bool UseAimTargetForHoming;
        [RTTI.Member(1, 0x121, "Logic")] public bool ZoomIsHoming;
        [RTTI.Member(2, 0x124, "Logic")] public float TimeToEnableHoming;
        [RTTI.Member(3, 0x128, "Logic")] public bool HomeInOnHumanoids;
        [RTTI.Member(4, 0x12C, "Logic")] public float HomingLockConeAngle;
        [RTTI.Member(5, 0x130, "Logic")] public bool AutomaticLocking;
        [RTTI.Member(6, 0x131, "Logic")] public bool RequiresLockTargetToFire;
        [RTTI.Member(7, 0x138, "Representation")] public Ref<SoundResource> LockingActiveSound;
        [RTTI.Member(8, 0x140, "Representation")] public Ref<SoundResource> LockingTargetFoundSound;
        [RTTI.Member(9, 0x148, "Representation")] public Ref<SoundResource> LockedSound;
        [RTTI.Member(10, 0x150, "Representation")] public Ref<SoundResource> TargetAcquiredSound;
    }

    [RTTI.Serializable(0x7640FC726D68CE44)]
    public class RocketMover : ThrowableMover
    {
    }

    [RTTI.Serializable(0x4CE1B57A91DEC26A)]
    public class RocketMoverResource : ThrowableMoverResource
    {
        [RTTI.Member(0, 0xF0, "Logic")] public float Acceleration;
        [RTTI.Member(1, 0xF4, "Logic")] public float MaxVelocity;
        [RTTI.Member(2, 0xF8, "Logic")] public float BurnoutTime;
        [RTTI.Member(3, 0xFC, "DelayedIgnition")] public bool Enable;
        [RTTI.Member(4, 0x100, "DelayedIgnition")] public float ActivationTime;
        [RTTI.Member(5, 0x104, "Homing")] public float FallToHomeTime;
        [RTTI.Member(6, 0x108, "Logic")] public float OvershootExplodeRange;
    }

    [RTTI.Serializable(0x67D610652514EE)]
    public class RocketRep : ThrowableRep
    {
    }

    [RTTI.Serializable(0xFF8F42160041322)]
    public class RocketResource : ThrowableResource
    {
        [RTTI.Member(0, 0x210, "Logic")] public float FuseTime;
        [RTTI.Member(1, 0x218, "VisualEffects")] public Ref<EffectComponentResource> IgnitionEffectComponent;
        [RTTI.Member(2, 0x220, "Bounce")] public float MinimumDistanceToTarget;
        [RTTI.Member(3, 0x224, "Bounce")] public float BounceAngleOffset;
        [RTTI.Member(4, 0x228, "Logic")] public float NoExplosionRemoveTime;
        [RTTI.Member(5, 0x230, "VisualEffects")] public Ref<LaserBeamResource> TargetLaser;
    }

    [RTTI.Serializable(0x13BD910BD0D4D9C5)]
    public class RoleValidationRule : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<AIGroupRoleDescriptorResource> RoleToValidate;
        [RTTI.Member(1, 0x18)] public String ReasonIdentifier;
        [RTTI.Member(2, 0x20)] public EToReassignRoleType DestinationRoleType;
        [RTTI.Member(3, 0x28)] public Ref<AIGroupRoleDescriptorResource> DestinationRole;
        [RTTI.Member(4, 0x30)] public EHierarchyLevelToReassignTo DestinationHierarchyLevel;
    }

    [RTTI.Serializable(0xBB3A53130811FEE4)]
    public class RootDevice : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<DeviceInfo> DeviceInfo;
    }

    [RTTI.Serializable(0x5F6663CE2FC7D265)]
    public class RopeAmmoResource : EntityProjectileAmmoResource
    {
        [RTTI.Member(0, 0x200, "Logic")] public Ref<RopeAnchorComponentResource> RopeAnchorComponentResource;
    }

    [RTTI.Serializable(0xA509DB02A870F5CB)]
    public class RopeAnchorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC816EFD4B260F6CB)]
    public class RopeAnchorComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Anchor")] public float PullbackSlack;
        [RTTI.Member(1, 0x2C, "Anchor")] public float BreakSlack;
        [RTTI.Member(2, 0x30, "Anchor")] public float TensileStrength;
        [RTTI.Member(3, 0x34, "Logic")] public ERopeMode RopeMode;
        [RTTI.Member(4, 0x38, "Logic")] public float AutoFireSecondAnchorTime;
        [RTTI.Member(5, 0x3C, "Logic")] public float AutoFireForwardOffset;
        [RTTI.Member(6, 0x40, "TripWire")] public float TripwireLifeTime;
        [RTTI.Member(7, 0x48, "TripWire")] public Ref<RopeManagerComponentResource> ConnectedRopeManager;
        [RTTI.Member(8, 0x50, "Anchor")] public Array<Ref<DamageSettings>> BreakingDamageSettings;
    }

    [RTTI.Serializable(0x6085E45346A8D2A0)]
    public class RopeAnchorEjector : GrenadeEjector
    {
    }

    [RTTI.Serializable(0x2678586E6245BBD0)]
    public class RopeAnchorEjectorRep : DiscreteAmmoEjectorRep
    {
    }

    [RTTI.Serializable(0x70625687084B49FF)]
    public class RopeAnchorEjectorResource : GrenadeEjectorResource
    {
        [RTTI.Member(0, 0x2C0, "Logic")] public float RetrievalTimeout;
        [RTTI.Member(1, 0x2C4, "Logic")] public float RetrievalSpeed;
        [RTTI.Member(2, 0x2C8, "Logic")] public Ref<RumbleResource> RetrievalRumble;
        [RTTI.Member(3, 0x2D0, "Logic")] public Ref<RopePullingComponentResource> PullingComponent;
        [RTTI.Member(4, 0x2D8, "Logic")] public Ref<GraphProgramResource> EvaluateTargetGraphResource;
    }

    [RTTI.Serializable(0xBAC91BEF277E1E37)]
    public class RopeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBD725973B698892A)]
    public class RopeManagerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6233CCD75F8A0ECA)]
    public class RopeManagerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool DispensableOnBroken;
        [RTTI.Member(1, 0x30, "Logic")] public String HelperNodeFirstEnd;
        [RTTI.Member(2, 0x38, "Logic")] public String HelperNodeSecondEnd;
        [RTTI.Member(3, 0x40, "Logic")] public float PullStrength;
        [RTTI.Member(4, 0x44, "Logic")] public float ForceStretchLength;
        [RTTI.Member(5, 0x48, "Logic")] public float MaxLength;
        [RTTI.Member(6, 0x4C, "Logic")] public float DamageStretchLength;
        [RTTI.Member(7, 0x50, "Logic")] public float DamageAmount;
        [RTTI.Member(8, 0x58, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(9, 0x60, "Logic")] public CPtr<EntityAction> FirstRopeEndContactAction;
        [RTTI.Member(10, 0x68, "Logic")] public CPtr<EntityAction> SecondRopeEndContactAction;
        [RTTI.Member(11, 0x70, "Logic")] public Ref<GraphProgramResource> FirstRopeEndBreakProgram;
        [RTTI.Member(12, 0x78, "Logic")] public Ref<GraphProgramResource> SecondRopeEndBreakProgram;
        [RTTI.Member(13, 0x80, "Logic")] public Ref<GraphProgramResource> FirstRopeEndRemoveProgram;
        [RTTI.Member(14, 0x88, "Logic")] public Ref<GraphProgramResource> SecondRopeEndRemoveProgram;
        [RTTI.Member(15, 0x90, "Representation")] public Ref<EntityResource> RopeEntityResource;
        [RTTI.Member(16, 0x98, "Logic")] public bool ExcludeInstigatorFromCollision;
        [RTTI.Member(17, 0x99, "Logic")] public bool OnlyCollideWithHostiles;
        [RTTI.Member(18, 0x9A, "Logic")] public bool AutoConnectByInstigator;
        [RTTI.Member(19, 0x9B, "Logic")] public bool BreakOnCollision;
        [RTTI.Member(20, 0xA0, "Representation")] public Ref<SoundResource> TensionSoundResource;
        [RTTI.Member(21, 0xA8, "Physics")] public Ref<PhysicsCollisionResource> PhysicsCollisionResource;
        [RTTI.Member(22, 0xB0, "Physics")] public float PhysicsCollisionThickness;
        [RTTI.Member(23, 0xB4, "Physics")] public float PhysicsCollisionHeight;
    }

    [RTTI.Serializable(0x7FD194A48B696CDA)]
    public class RopeMesh : GeometryObject
    {
    }

    [RTTI.Serializable(0x6AC3EDA3EEC0C3C7)]
    public class RopePathPointComponent : PickUpComponentBase
    {
    }

    [RTTI.Serializable(0x5584ADF336889D9F)]
    public class RopePathPointComponentResource : PickUpComponentBaseResource
    {
        [RTTI.Member(0, 0xA0, "Logic")] public Ref<AmmoType> RequiredAmmoType;
        [RTTI.Member(1, 0xA8, "Logic")] public Ref<TagProperty> RopeLauncherTag;
        [RTTI.Member(2, 0xB0, "Logic")] public Ref<RopeManagerComponentResource> RopeManagerComponentResource;
        [RTTI.Member(3, 0xB8, "Representation")] public Ref<LocalizedTextResource> RopeLauncherNotFoundFailMessage;
        [RTTI.Member(4, 0xC0, "Representation")] public Ref<LocalizedTextResource> RopeLauncherNotEquippedFailMessage;
        [RTTI.Member(5, 0xC8, "Logic")] public float AutoDetachRadius;
        [RTTI.Member(6, 0xCC, "Logic")] public float MinimumZiplineAngle;
        [RTTI.Member(7, 0xD0, "Logic")] public float RopeThickness;
    }

    [RTTI.Serializable(0x134AF5D5F4671858)]
    public class RopePathProgressComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD944DF71B9E0AC3A)]
    public class RopePullingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xED35935185611AAB)]
    public class RopePullingComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xC0E251CE6C81D04D)]
    public class RotMatrix
    {
        [RTTI.Member(0, 0x0)] public Vec3Pack Col0;
        [RTTI.Member(1, 0xC)] public Vec3Pack Col1;
        [RTTI.Member(2, 0x18)] public Vec3Pack Col2;
    }

    [RTTI.Serializable(0xDD0904F997A91048)]
    public class Route : WorldDataShape
    {
        [RTTI.Member(0, 0xA0, "General")] public String Name;
    }

    [RTTI.Serializable(0x7DC247BCF3E467CE)]
    public class RouteNode : WorldDataShapeNode
    {
    }

    [RTTI.Serializable(0x27F41FB4AB352766)]
    public class RumbleEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x5E6999DC6CD9A568)]
    public class RumbleEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<RumbleResource> RumbleResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0x544EFDD1292F0B3D)]
    public class RumbleResource : Resource
    {
        [RTTI.Member(0, 0x38, "General")] public float Duration;
        [RTTI.Member(1, 0x40, "General")] public Ref<CurveResource> SmallMotorCurve;
        [RTTI.Member(2, 0x48, "General")] public Ref<CurveResource> BigMotorCurve;
        [RTTI.Member(3, 0x50, "General")] public float FirstPointTime;
        [RTTI.Member(4, 0x54, "General")] public bool Is3D;
        [RTTI.Member(5, 0x58, "General")] public FRange Range;
        [RTTI.Member(6, 0x60, "General")] public bool IsLooping;
        [RTTI.Member(7, 0x61, "Occlusion")] public bool DoOcclusion;
        [RTTI.Member(8, 0x64, "Occlusion")] public float SmallMotorOcclusionMultiplier;
        [RTTI.Member(9, 0x68, "Occlusion")] public Ref<CurveResource> SmallMotorOcclusionCurve;
        [RTTI.Member(10, 0x70, "Occlusion")] public float BigMotorOcclusionMultiplier;
        [RTTI.Member(11, 0x78, "Occlusion")] public Ref<CurveResource> BigMotorOcclusionCurve;
    }

    [RTTI.Serializable(0x1140D335C0BB1E8E)]
    public class SHVector4x9
    {
        [RTTI.Member(0, 0x0)] public Vec4 SHVec0;
        [RTTI.Member(1, 0x10)] public Vec4 SHVec1;
        [RTTI.Member(2, 0x20)] public Vec4 SHVec2;
        [RTTI.Member(3, 0x30)] public Vec4 SHVec3;
        [RTTI.Member(4, 0x40)] public Vec4 SHVec4;
        [RTTI.Member(5, 0x50)] public Vec4 SHVec5;
        [RTTI.Member(6, 0x60)] public Vec4 SHVec6;
        [RTTI.Member(7, 0x70)] public Vec4 SHVec7;
        [RTTI.Member(8, 0x80)] public Vec4 SHVec8;
    }

    [RTTI.Serializable(0xA5F1EFC59AB0CF86)]
    public class SKDTree
    {
        [RTTI.Member(0, 0x0, "General")] public BoundingBox3 Bounds;
        [RTTI.Member(1, 0x20, "General")] public Array<SKDTreeNode> TreeData;
    }

    [RTTI.Serializable(0x66534260304788CD)]
    public class SKDTreeNode
    {
        [RTTI.Member(0, 0x0)] public float MaxLo;
        [RTTI.Member(1, 0x4)] public float MaxHi;
        [RTTI.Member(2, 0x8)] public uint16 PackedData0;
        [RTTI.Member(3, 0xA)] public uint16 PackedData1;
    }

    [RTTI.Serializable(0xBB6E3877EA37A4B5)]
    public class SKDTreeResource : BaseResource
    {
        [RTTI.Member(0, 0x20, "General")] public SKDTree SKDTree;
    }

    [RTTI.Serializable(0x3AE672EAD07A0FA7)]
    public class SPStatistics : StateObject
    {
        [RTTI.Member(0, 0x0, true)] public int GameStatistics;
        [RTTI.Member(1, 0xC, true)] public int PlayerStatistics_0;
        [RTTI.Member(2, 0x10, true)] public int PlayerStatistics_1;
        [RTTI.Member(3, 0x18, true)] public Array<String> EntityStatClasses;
        [RTTI.Member(4, 0x28, true)] public Array<EntityStatistic> EntityStatistics;
    }

    [RTTI.Serializable(0x196468A4AE1E221B)]
    public class SRTBindingCache
    {
        [RTTI.Member(0, 0x0)] public uint8 TextureBindingMask;
        [RTTI.Member(1, 0x2)] public uint16 BindingDataMask;
        [RTTI.Member(2, 0x8)] public uint64 SRTEntriesMask;
        [RTTI.Member(3, 0x10)] public Array<uint16> BindingDataIndices;
        [RTTI.Member(4, 0x20)] public Array<HwBindingHandle> SRTEntryHandles;
    }

    [RTTI.Serializable(0xBD337994F0FD85FD)]
    public class SRTElement
    {
        [RTTI.Member(0, 0x0)] public String SubSetName;
        [RTTI.Member(1, 0x0)] public String Name;
        [RTTI.Member(2, 0x18)] public int ResourceIndex;
        [RTTI.Member(3, 0x1C)] public int16 Offset;
        [RTTI.Member(4, 0x1E)] public int16 ArrayCount;
        [RTTI.Member(5, 0x20)] public ESRTElementType Type;
        [RTTI.Member(6, 0x21)] public ESRTElementFormat Format;
    }

    [RTTI.Serializable(0x3B7F49A1BC6FC850)]
    public class SRTEntry
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String ElementDescSetName;
        [RTTI.Member(2, 0x10)] public Array<SRTElement> Elements;
        [RTTI.Member(3, 0x20)] public uint8 ArrayCount;
        [RTTI.Member(4, 0x21)] public ESRTUpdateFrequency UpdateFrequency;
        [RTTI.Member(5, 0x22)] public ESRTStorageMode StorageMode;
        [RTTI.Member(6, 0x24)] public EProgramTypeMask ProgramTypeMask;
    }

    [RTTI.Serializable(0xC014F55E3EC563CA)]
    public class SSAOSettingsResource : Resource
    {
        [RTTI.Member(0, 0x30, "Settings")] public float Intensity;
        [RTTI.Member(1, 0x38, "Settings")] public float Directionality;
        [RTTI.Member(2, 0x40, "Settings")] public Vec3 Direction;
        [RTTI.Member(3, 0x50, "Settings")] public int RayNumber;
        [RTTI.Member(4, 0x54, "Settings")] public int RayStepsCount;
        [RTTI.Member(5, 0x58, "Settings")] public float Thickness;
        [RTTI.Member(6, 0x5C, "Settings")] public float BakedAOFactor;
        [RTTI.Member(7, 0x60, "Settings")] public Vec2 CosineWeightDistances;
        [RTTI.Member(8, 0x80, "Settings")] public Array<TextureLUTEntry> RadiusSettings;
    }

    [RTTI.Serializable(0x306C9A21CAC918C3)]
    public class SamplePatternResource : Resource
    {
        [RTTI.Member(0, 0x28, "Data")] public Array<Vec3> SamplePoints;
        [RTTI.Member(1, 0x40, "Data")] public Vec3 Range;
        [RTTI.Member(2, 0x50, "Data")] public Array<float> Distances;
    }

    [RTTI.Serializable(0x67A1923D7EBBD719)]
    public class SamplerBindingWithHandle : ShaderSamplerBinding
    {
        [RTTI.Member(0, 0x8)] public HwBindingHandle SamplerBindingHandle;
    }

    [RTTI.Serializable(0xA873825F09AC4C22)]
    public class SavePoint : AIMarker
    {
        [RTTI.Member(0, 0x90, "Logic")] public Ref<ConditionResource> Condition;
        [RTTI.Member(1, 0x98, "Logic")] public Ref<DiscoverableArea> DiscoverableArea;
    }

    [RTTI.Serializable(0xDFB4D0A138B00CAF)]
    public class SaveSystemViewController : RTTIObject
    {
    }

    [RTTI.Serializable(0xC9407FD84F13C791)]
    public class ScaleEntityFromAnimationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x72B62F492658C554)]
    public class ScaleEntityFromAnimationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String ScaleMessageName;
        [RTTI.Member(1, 0x30, "Logic")] public String ScaleMessagePresetName;
    }

    [RTTI.Serializable(0x46D13DFB608B40C8)]
    public class ScaleableTimedEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public int ClipOffset;
        [RTTI.Member(1, 0x3C, "Logic")] public float ClipSpeed;
    }

    [RTTI.Serializable(0x5F7C913D2E06A4B0)]
    public class ScatterBlendAnimation : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String Identifier;
        [RTTI.Member(1, 0x30, "General")] public String AnimationState;
        [RTTI.Member(2, 0x38, "General")] public Array<String> AnimationActions;
        [RTTI.Member(3, 0x48, "General")] public Array<String> AnimationVariableNames;
        [RTTI.Member(4, 0x58, "General")] public Ref<SkinnedModelResource> ModelResource;
    }

    [RTTI.Serializable(0xB7FA4F27F70AAD51)]
    public class ScavengeHelperComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8CA9B344177F16BA)]
    public class ScavengeHelperComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<ScavengeHelperResource>> Helpers;
    }

    [RTTI.Serializable(0xEDB0FFF6B11650D8)]
    public class ScavengeHelperResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String HelperName;
        [RTTI.Member(1, 0x30, "General")] public float Radius;
    }

    [RTTI.Serializable(0x4B963072C97B9C67)]
    public class SceneActivationCollisionTrigger : CollisionTrigger
    {
        [RTTI.Member(0, 0xE8, "General")] public ESceneActivationTriggerType TriggerType;
    }

    [RTTI.Serializable(0x4C8C2FD75FC5D3F7)]
    public class SceneComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xCCD92EC857811E85)]
    public class SceneComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool BroadcastToAllScenes;
    }

    [RTTI.Serializable(0x30508B1FA9C8B251)]
    public class SceneEntityImpostorInfo
    {
        [RTTI.Member(0, 0x0)] public Ref<EntityImpostorResource> ImpostorResource;
        [RTTI.Member(1, 0x8)] public Ref<AIRoad> ImpostorRoute;
        [RTTI.Member(2, 0x10)] public EEntityImpostorDirection ImpostorRouteDirection;
    }

    [RTTI.Serializable(0x878AE2623FBCF50C)]
    public class SceneEventListener
    {
    }

    [RTTI.Serializable(0xA59DE4F11A25009F)]
    public class SceneInstance : PrefabBaseInstance
    {
        [RTTI.Member(0, 0xE0, "General")] public String Name;
        [RTTI.Member(1, 0x168, "General")] public Array<SpawnSetupOverride> SpawnSetupOverrides;
        [RTTI.Member(2, 0x178, "General")] public Array<SpawnFactOverride> SpawnFactOverrides;
        [RTTI.Member(3, 0x188, "General")] public Ref<SceneResource> Prefab;
        [RTTI.Member(4, 0x1A8, "General")] public bool AutoStart;
        [RTTI.Member(5, 0x1A9, "General")] public bool ResetStartedOutsideActivationRadius;
        [RTTI.Member(6, 0x1AA, "General")] public EFactContextLifetime FactsLifetime;
        [RTTI.Member(7, 0x1B0, "General")] public Array<Ref<FactValue>> Facts;
        [RTTI.Member(8, 0x1C1, "Streaming")] public bool NeedsCollision;
        [RTTI.Member(9, 0x1C4, "Streaming")] public float EncounterRadius;
        [RTTI.Member(10, 0x1C8, "Streaming")] public float ActivationRadius;
        [RTTI.Member(11, 0x1E0, "Streaming")] public ESceneActivationType ActivationType;
        [RTTI.Member(12, 0x1F0, "General")] public EActivateConditionRelation ResourceActivateConditionRelation;
        [RTTI.Member(13, 0x1F8, "General")] public Ref<ConditionResource> StreamingCondition;
        [RTTI.Member(14, 0x208, "General")] public Ref<ConditionResource> ActivateCondition;
        [RTTI.Member(15, 0x303, "PlayGo")] public bool ExcludeFromInitialChunk;
    }

    [RTTI.Serializable(0x86C0C590A4DED32D)]
    public class SceneManager
    {
    }

    [RTTI.Serializable(0x4631256C425F8F09)]
    public class SceneMarkerData : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x19EFE33B18722F33)]
    public class SceneObjectInfo : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<SceneObjectInfoEntry> ObjectInfos;
        [RTTI.Member(1, 0x30)] public HashMap<GGUUID_SceneEntityImpostorInfo> EntityImpostors;
    }

    [RTTI.Serializable(0x9C701AB04870D0D6)]
    public class SceneObjectInfoEntry
    {
        [RTTI.Member(0, 0x0)] public GGUUID UUID;
        [RTTI.Member(1, 0x10)] public Mat44 LocalTransform;
    }

    [RTTI.Serializable(0x7D1712112362E2B4)]
    public class SceneObjectLocationMarker : LocationMarkerInstance
    {
    }

    [RTTI.Serializable(0xA9D989EB92239C2C)]
    public class SceneObjectLocationMarkerUpdater : SceneEventListener
    {
    }

    [RTTI.Serializable(0x75C9A1574E012D84)]
    public class SceneRemovalActivationPolicy : EntityActivationPolicy
    {
        [RTTI.Member(0, 0x38, "Logic")] public float DeactivationRadius;
    }

    [RTTI.Serializable(0x6BDCF662A3A5FB55)]
    public class SceneResource : PrefabBaseResource
    {
        [RTTI.Member(0, 0x20, "General")] public Ref<ConditionResource> ActivateCondition;
        [RTTI.Member(1, 0x28, "General")] public Array<Ref<SceneInstance>> SubScenes;
        [RTTI.Member(2, 0x38, "General")] public Ref<ObjectCollection> NonStreamingObjectCollection;
        [RTTI.Member(3, 0x48, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
        [RTTI.Member(4, 0x68, "General")] public StreamingRef<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(5, 0x88, "General")] public StreamingRef<OverrideGraphProgramResource> OverrideGraphProgramResource;
        [RTTI.Member(6, 0xA8, "Generated")] public Ref<SceneObjectInfo> GeneratedObjectInfo;
    }

    [RTTI.Serializable(0x93330B705251C8E4)]
    public class SceneSchedule : GameSchedule
    {
    }

    [RTTI.Serializable(0x15B0706D7C346B24)]
    public class SceneScheduleEntry : GameScheduleEntry
    {
    }

    [RTTI.Serializable(0x1DBB3867F2201D41)]
    public class SceneScheduleEntryResource : GameScheduleEntryResource
    {
        [RTTI.Member(0, 0x38)] public Ref<AIMarker> StartLocation;
        [RTTI.Member(1, 0x40)] public Ref<AIMarker> EndLocation;
    }

    [RTTI.Serializable(0x8E485171B26AEF87)]
    public class SceneScheduleResource : GameScheduleResource
    {
        [RTTI.Member(0, 0x40, "Scene")] public float SimulatedMovementSpeed;
    }

    [RTTI.Serializable(0xC995E61D4927E488)]
    public class ScheduledSceneInstance : SceneInstance
    {
        [RTTI.Member(0, 0x310, "Schedule")] public Ref<SceneScheduleResource> Schedule;
        [RTTI.Member(1, 0x320, "Schedule")] public EAIRoadUsableBy UsesRoads;
    }

    [RTTI.Serializable(0xD27CD7E2A63A0E1B)]
    public class ScorePointsMap : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<ScoreResource> ScoreResource;
        [RTTI.Member(1, 0x30)] public int Points;
    }

    [RTTI.Serializable(0x9CE3642995CF0EDB)]
    public class ScoreResource : Resource
    {
        [RTTI.Member(0, 0x28)] public EScoreEvent ScoreEvent;
        [RTTI.Member(1, 0x2C)] public EPlayerScoreStat PlayerScoreStat;
    }

    [RTTI.Serializable(0xE2BB2E72F378030D)]
    public class ScoreStatRequirement
    {
        [RTTI.Member(0, 0x0)] public EPlayerScoreStat ScoreStat;
        [RTTI.Member(1, 0x4)] public EPlayerScoreEntityStat EntityStat;
        [RTTI.Member(2, 0x8)] public String DerivedStat;
        [RTTI.Member(3, 0x10)] public EComparator Comparator;
        [RTTI.Member(4, 0x14)] public int CompareValue;
        [RTTI.Member(5, 0x18)] public String Type;
    }

    [RTTI.Serializable(0x1313F40BA85C758C)]
    public class ScoringResource : Resource
    {
        [RTTI.Member(0, 0x28, "Actions")] public int SuicidePenalty;
        [RTTI.Member(1, 0x2C, "Actions")] public int SuicideBaseGunPenalty;
        [RTTI.Member(2, 0x30, "Actions")] public int TeamkillPenalty;
        [RTTI.Member(3, 0x34, "Actions")] public int DoubleKill;
        [RTTI.Member(4, 0x38, "Actions")] public int TripleKill;
        [RTTI.Member(5, 0x3C, "Actions")] public int MultiKill;
        [RTTI.Member(6, 0x40, "Actions")] public int TwinKill;
        [RTTI.Member(7, 0x44, "Actions")] public int ManyKill;
        [RTTI.Member(8, 0x48, "Actions")] public int KillStreakThree;
        [RTTI.Member(9, 0x4C, "Actions")] public int KillStreakFive;
        [RTTI.Member(10, 0x50, "Actions")] public int KillStreakTen;
        [RTTI.Member(11, 0x54, "Actions")] public int KillStreakFifteen;
        [RTTI.Member(12, 0x58, "Actions")] public int KillStreakTwenty;
        [RTTI.Member(13, 0x5C, "Actions")] public int KillStreakStopper;
        [RTTI.Member(14, 0x60, "Actions")] public int KillStreakThreeCount;
        [RTTI.Member(15, 0x64, "Actions")] public int KillStreakFiveCount;
        [RTTI.Member(16, 0x68, "Actions")] public int KillStreakTenCount;
        [RTTI.Member(17, 0x6C, "Actions")] public int KillStreakFifteenCount;
        [RTTI.Member(18, 0x70, "Actions")] public int KillStreakTwentyCount;
        [RTTI.Member(19, 0x74, "Actions")] public int MultiKillTimer;
        [RTTI.Member(20, 0x78, "Actions")] public int CaptureAndHoldPerFlagCaptured;
        [RTTI.Member(21, 0x7C, "Actions")] public int CaptureAndHoldPerFlagCapturedPerPlayer;
        [RTTI.Member(22, 0x80, "Actions")] public int CaptureAndHoldPerFlagNeutralized;
        [RTTI.Member(23, 0x84, "Actions")] public int CaptureAndHoldPerFlagNeutralizedPerPlayer;
        [RTTI.Member(24, 0x88, "Actions")] public int CaptureAndHoldDefenderKill;
        [RTTI.Member(25, 0x8C, "Actions")] public int CaptureAndHoldAttackerKill;
        [RTTI.Member(26, 0x90, "Actions")] public int CaptureAndSecurePerFlagCaptured;
        [RTTI.Member(27, 0x94, "Actions")] public int CaptureAndSecurePerFlagCapturedPerPlayer;
        [RTTI.Member(28, 0x98, "Actions")] public int CaptureAndSecurePerFlagNeutralized;
        [RTTI.Member(29, 0x9C, "Actions")] public int CaptureAndSecurePerFlagNeutralizedPerPlayer;
        [RTTI.Member(30, 0xA0, "Actions")] public int CaptureAndSecureDefenderKill;
        [RTTI.Member(31, 0xA4, "Actions")] public int CaptureAndSecureAttackerKill;
        [RTTI.Member(32, 0xA8, "Actions")] public int CaptureAndConnectPerFlagCaptured;
        [RTTI.Member(33, 0xAC, "Actions")] public int CaptureAndConnectPerFlagCapturedPerPlayer;
        [RTTI.Member(34, 0xB0, "Actions")] public int CaptureAndConnectPerFlagNeutralized;
        [RTTI.Member(35, 0xB4, "Actions")] public int CaptureAndConnectPerFlagNeutralizedPerPlayer;
        [RTTI.Member(36, 0xB8, "Actions")] public int CaptureAndConnectDefenderKill;
        [RTTI.Member(37, 0xBC, "Actions")] public int CaptureAndConnectAttackerKill;
        [RTTI.Member(38, 0xC0, "Actions")] public int SearchAndRetrievePerFlagPickedUp;
        [RTTI.Member(39, 0xC4, "Actions")] public int SearchAndRetrievePerFlagRetrieved;
        [RTTI.Member(40, 0xC8, "Actions")] public int SearchAndRetrieveFlagCarrying;
        [RTTI.Member(41, 0xCC, "Actions")] public int SearchAndRetrieveDefenderKill;
        [RTTI.Member(42, 0xD0, "Actions")] public int SearchAndRetrieveAttackerKill;
        [RTTI.Member(43, 0xD4, "Actions")] public int SearchAndRetrieveCarrierKilled;
        [RTTI.Member(44, 0xD8, "Actions")] public int SearchAndRetrieveCarrierSavior;
        [RTTI.Member(45, 0xDC, "Actions")] public int InfiltrateAndRetrievePerFlagPickedUp;
        [RTTI.Member(46, 0xE0, "Actions")] public int InfiltrateAndRetrievePerFlagRetrieved;
        [RTTI.Member(47, 0xE4, "Actions")] public int InfiltrateAndRetrievePerFlagReturned;
        [RTTI.Member(48, 0xE8, "Actions")] public int InfiltrateAndRetrieveFlagCarrying;
        [RTTI.Member(49, 0xEC, "Actions")] public int InfiltrateAndRetrieveDefenderKill;
        [RTTI.Member(50, 0xF0, "Actions")] public int InfiltrateAndRetrieveAttackerKill;
        [RTTI.Member(51, 0xF4, "Actions")] public int InfiltrateAndRetrieveCarrierKilled;
        [RTTI.Member(52, 0xF8, "Actions")] public int InfiltrateAndRetrieveCarrierSavior;
        [RTTI.Member(53, 0xFC, "Actions")] public int SearchAndSafeGuardPerFlagPickedUp;
        [RTTI.Member(54, 0x100, "Actions")] public int SearchAndSafeGuardFlagCarrying;
        [RTTI.Member(55, 0x104, "Actions")] public int SearchAndSafeGuardCarrierKilled;
        [RTTI.Member(56, 0x108, "Actions")] public int SearchAndSafeGuardCarrierSavior;
        [RTTI.Member(57, 0x10C, "Actions")] public int SearchAndDestroyDemolitionMan;
        [RTTI.Member(58, 0x110, "Actions")] public int SearchAndDestroyDemolitionExpert;
        [RTTI.Member(59, 0x114, "Actions")] public int SearchAndDestroyPerArmedC4;
        [RTTI.Member(60, 0x118, "Actions")] public int SearchAndDestroyPerDisarmedC4;
        [RTTI.Member(61, 0x11C, "Actions")] public int SearchAndDestroyDefenderKill;
        [RTTI.Member(62, 0x120, "Actions")] public int SearchAndDestroyAttackerKill;
        [RTTI.Member(63, 0x124, "Actions")] public int BodyCountPerKill;
        [RTTI.Member(64, 0x128, "Actions")] public int DisguisedKill;
        [RTTI.Member(65, 0x12C, "Actions")] public int CoverKill;
        [RTTI.Member(66, 0x130, "Actions")] public int ThroughShieldKill;
        [RTTI.Member(67, 0x134, "Actions")] public int SaviorKill;
        [RTTI.Member(68, 0x138, "Actions")] public int RevengeKill;
        [RTTI.Member(69, 0x13C, "Actions")] public int PaybackKill;
        [RTTI.Member(70, 0x140, "Actions")] public int ZipLineKill;
        [RTTI.Member(71, 0x144, "Actions")] public int StunKill;
        [RTTI.Member(72, 0x148, "Actions")] public int StunKillAssist;
        [RTTI.Member(73, 0x14C, "Actions")] public int SpawnAssist;
        [RTTI.Member(74, 0x150, "Actions")] public int EnemyDeconstruction;
        [RTTI.Member(75, 0x154, "Actions")] public int Repair;
        [RTTI.Member(76, 0x158, "Actions")] public int Revive;
        [RTTI.Member(77, 0x15C, "Actions")] public int Hack;
        [RTTI.Member(78, 0x160, "Actions")] public int LevelEvent;
        [RTTI.Member(79, 0x164, "Actions")] public int FirstBlood;
        [RTTI.Member(80, 0x168, "Actions")] public int KnockOut;
        [RTTI.Member(81, 0x16C, "Actions")] public int MissionWin;
        [RTTI.Member(82, 0x170, "Actions")] public int LifeRemaining;
        [RTTI.Member(83, 0x174, "Actions")] public int LastPlayerRemaining;
        [RTTI.Member(84, 0x178, "Timers")] public float AssistTimeout;
        [RTTI.Member(85, 0x17C, "Timers")] public float RevengeTimeout;
        [RTTI.Member(86, 0x180, "Timers")] public float SaviorTimeout;
        [RTTI.Member(87, 0x184, "Timers")] public float ManyKillTimeout;
        [RTTI.Member(88, 0x188, "Timers")] public float FlagCarryingInterval;
        [RTTI.Member(89, 0x18C, "Timers")] public float ArmadilloTimeout;
        [RTTI.Member(90, 0x190, "Multipliers")] public float DefaultBodyshotKillMultiplier;
        [RTTI.Member(91, 0x194, "Multipliers")] public float DefaultHeadshotKillMultiplier;
        [RTTI.Member(92, 0x198, "Multipliers")] public float DefaultMeleeKillMultiplier;
        [RTTI.Member(93, 0x19C, "Multipliers")] public float DefaultExplosiveKillMultiplier;
        [RTTI.Member(94, 0x1A0, "Multipliers")] public float DefaultKillAssistMultiplier;
        [RTTI.Member(95, 0x1A4, "Multipliers")] public float DefaultMeleeKillAssistMultiplier;
        [RTTI.Member(96, 0x1A8, "Multipliers")] public float MercyKillMultiplier;
        [RTTI.Member(97, 0x1B0, "Multipliers")] public Array<WeaponScoreMultipliers> WeaponMultipliers;
        [RTTI.Member(98, 0x1C0, "Entities")] public Array<EntityScoreSettings> EntityScoreSettings;
        [RTTI.Member(99, 0x1D0, "UsedEntities")] public Array<UsedEntityScoreSettings> UsedEntityScoreSettings;
        [RTTI.Member(100, 0x1E0, "Events")] public Array<DamageScoreEvent> DamageScoreEventSettings;
        [RTTI.Member(101, 0x1F0, "Actions")] public Array<Ref<ScorePointsMap>> ScorePointsMap;
    }

    [RTTI.Serializable(0xEA86A48C46C6A0BF)]
    public class ScreenEffectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8DD7CDD707C905C0)]
    public class ScreenEffectEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<ScreenEffectResource> ScreenEffectResource;
        [RTTI.Member(1, 0x40, "Logic")] public float BlendWeight;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<CurveResource> BlendWeightCurveResource;
        [RTTI.Member(3, 0x50, "Logic")] public bool AutoScaleCurve;
    }

    [RTTI.Serializable(0x95F3A07434ABEAE0)]
    public class ScreenEffectResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<PostProcessSettingsResource> PostProcessSettingsResource;
        [RTTI.Member(1, 0x30)] public float BlendWeight;
        [RTTI.Member(2, 0x34)] public int Priority;
    }

    [RTTI.Serializable(0xAEEA23E8B097756D)]
    public class ScreenSpaceQueryResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<RenderEffectResource> RenderEffectsResource;
    }

    [RTTI.Serializable(0x22F9D24046A917EB)]
    public class ScreenSpaceVisibilityComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB1D81511EB3BB7D0)]
    public class ScreenSpaceVisibilityComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x5F92327E6F42FBB8)]
    public class ScreenSpaceVisibilityManager : RTTIObject
    {
        [RTTI.BaseClass(0x8)] public DrawableObjectInstance @DrawableObjectInstance;
    }

    [RTTI.Serializable(0x2D171B14B16F707)]
    public class ScriptGameGlobal
    {
        [RTTI.Member(0, 0x0, true)] public String Name;
        [RTTI.Member(1, 0x8, true)] public float Value;
    }

    [RTTI.Serializable(0xE231D5411AFA6F5)]
    public class ScriptInterface : CoreObject
    {
    }

    [RTTI.Serializable(0xFF31526A1FED56D7)]
    public class ScriptMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public String ID;
        [RTTI.Member(1, 0x30, "StateSaving", true)] public CPtr<RTTIObject> Sender;
        [RTTI.Member(2, 0x38, "StateSaving", true)] public String SenderName;
        [RTTI.Member(3, 0x40, "StateSaving", true)] public String SenderType;
        [RTTI.Member(4, 0x48, "StateSaving", true)] public CPtr<RTTIObject> Object;
        [RTTI.Member(5, 0x50, "StateSaving", true)] public String ObjectName;
        [RTTI.Member(6, 0x58, "StateSaving", true)] public String ObjectType;
        [RTTI.Member(7, 0x60, "StateSaving", true)] public String CustomData;
    }

    [RTTI.Serializable(0x5757296D86AF4E58)]
    public class ScriptMessageQueue : CoreObject
    {
        [RTTI.Member(0, 0x30, "StateSaving", true)] public Array<Ref<ScriptMessage>> Messages;
        [RTTI.Member(1, 0x40, "StateSaving", true)] public Array<Ref<ScriptMessage>> NewMessages;
        [RTTI.Member(2, 0x50, "StateSaving", true)] public Array<Ref<DelayedScriptMessage>> DelayedMessages;
    }

    [RTTI.Serializable(0xE33C05B63006748F)]
    public class ScriptPauseEventInstance : PauseEventInstance
    {
    }

    [RTTI.Serializable(0x55E68DFC46CD7BAB)]
    public class ScriptPauseEventResource : PauseEventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Message;
    }

    [RTTI.Serializable(0x1ACAA2901D923287)]
    public class ScriptPropertyAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x48, "Logic")] public String PropertyValue;
    }

    [RTTI.Serializable(0x16D036CEAFEBAE55)]
    public class ScriptPropertyComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xB0A77A0A26FD615C)]
    public class ScriptPropertyComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<InitialPropertyValue> InitialProperties;
    }

    [RTTI.Serializable(0xA7C81740A212275D)]
    public class ScriptPropertyGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x14BE20723C681D07)]
    public class ScriptTag : Tag
    {
    }

    [RTTI.Serializable(0x68978EBB5F453ACB)]
    public class ScriptedWeapon : Entity
    {
    }

    [RTTI.Serializable(0xAFFAEE9117B46880)]
    public class ScriptedWeaponResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public bool InfiniteReserves;
    }

    [RTTI.Serializable(0x3E9CFA44A1D303E6)]
    public class ScrollbarWidget : Widget
    {
    }

    [RTTI.Serializable(0x28FF030E38824DBE)]
    public class ScrollingPanelTag : VisualTag
    {
    }

    [RTTI.Serializable(0x66CC57B89A8522F6)]
    public class ScrollingPanelWidget : Widget
    {
    }

    [RTTI.Serializable(0x43D3E3F71F6B34DB)]
    public class SearchAndRetrieveBase : Entity
    {
    }

    [RTTI.Serializable(0x94357EEF44949D38)]
    public class SearchAndRetrieveBaseRep : EntityRep
    {
    }

    [RTTI.Serializable(0x7B2A9017DC309C0F)]
    public class SearchAndRetrieveBaseResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<UseLocationResource> UseLocation;
        [RTTI.Member(1, 0x138, "Logic")] public float DeliveredObjectLifeTime;
        [RTTI.Member(2, 0x140, "Logic")] public Array<String> ObjectHelperNodes;
        [RTTI.Member(3, 0x150, "Representation")] public String DefendLocalizerTag;
    }

    [RTTI.Serializable(0xCF172CB4F86C05F)]
    public class SearchAndRetrieveObject : Entity
    {
    }

    [RTTI.Serializable(0x9C1009A809033C79)]
    public class SearchAndRetrieveObjectRep : EntityRep
    {
    }

    [RTTI.Serializable(0x9BAC498774C87E8D)]
    public class SearchAndRetrieveObjectResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Ref<UseLocationResource> UseLocation;
        [RTTI.Member(1, 0x138, "Logic")] public Ref<ModelResource> AttachedModelResource;
        [RTTI.Member(2, 0x140, "Logic")] public float AntiCheatDropTime;
    }

    [RTTI.Serializable(0xF8B4363E8F072E69)]
    public class SecondaryCompartmentShadowEnablerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6D1D3DE6CD46A36E)]
    public class SecondaryCompartmentShadowEnablerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xC3873AF015A99DAD)]
    public class SecondaryCompartmentShadowEnablerComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x3235CC2C287B465B)]
    public class SegmentedHealthComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x55F5BDD2292C763E)]
    public class SegmentedHealthComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x15E07AE3C74C3B7B)]
    public class SegmentedHealthComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<HealthSegmentResource>> Segments;
    }

    [RTTI.Serializable(0x6657F1D4B7491F77)]
    public class SelectEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x7924AECA94C202CB)]
    public class SelectEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0x22C8F6CBE8097AB5)]
    public class SelectResource : ResourceSelectorBase
    {
    }

    [RTTI.Serializable(0x3E27EA3FE08B5F02)]
    public class SelectResourceByAnimTag : SelectResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public ESelectByPropertyContext Context;
        [RTTI.Member(1, 0x48, "Logic")] public Array<SelectResourceByAnimTagTest> Tests;
    }

    [RTTI.Serializable(0xD972F021063609D5)]
    public class SelectResourceByAnimTagTest
    {
        [RTTI.Member(0, 0x0)] public String Tag;
    }

    [RTTI.Serializable(0xAB8C48D97E044FB6)]
    public class SelectResourceByBool : SelectResourceByProperty
    {
        [RTTI.Member(0, 0x48, "Logic")] public Array<SelectResourceByBoolTest> Tests;
    }

    [RTTI.Serializable(0xCF941A479EC496E5)]
    public class SelectResourceByBoolFact : SelectResourceByFact
    {
        [RTTI.Member(0, 0x48, "Logic")] public Array<SelectResourceByBoolFactTest> Tests;
    }

    [RTTI.Serializable(0xD80FDC3E9A23A6A6)]
    public class SelectResourceByBoolFactTest
    {
        [RTTI.Member(0, 0x0)] public Ref<BooleanFact> Link;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0xBF3D78BB02769DFC)]
    public class SelectResourceByBoolTest
    {
        [RTTI.Member(0, 0x0)] public BoolPropertyLink Link;
        [RTTI.Member(1, 0x8)] public bool Value;
    }

    [RTTI.Serializable(0xA51B753871322881)]
    public class SelectResourceByCondition : SelectResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<Ref<ConditionResource>> Tests;
    }

    [RTTI.Serializable(0xA9682A71BDF9848D)]
    public class SelectResourceByEnumFact : SelectResourceByFact
    {
        [RTTI.Member(0, 0x48, "Logic")] public Array<SelectResourceByEnumFactTest> Tests;
    }

    [RTTI.Serializable(0xC54E9C98E65C91BA)]
    public class SelectResourceByEnumFactTest
    {
        [RTTI.Member(0, 0x0)] public Ref<EnumFact> Link;
        [RTTI.Member(1, 0x8)] public Ref<EnumFactValue> Value;
    }

    [RTTI.Serializable(0xBD69FD369294521B)]
    public class SelectResourceByFact : SelectResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public ESelectByFactContext Context;
    }

    [RTTI.Serializable(0x3479ECE7DB5857BD)]
    public class SelectResourceByFloat : SelectResourceByProperty
    {
        [RTTI.Member(0, 0x48, "Logic")] public Array<SelectResourceByFloatTest> Tests;
    }

    [RTTI.Serializable(0x7CCB380808AD691D)]
    public class SelectResourceByFloatTest
    {
        [RTTI.Member(0, 0x0)] public FloatPropertyLink Link;
        [RTTI.Member(1, 0x8)] public EComparator Compare;
        [RTTI.Member(2, 0xC)] public float Value;
    }

    [RTTI.Serializable(0x5CA181DFB064F0CF)]
    public class SelectResourceByGraphProgram : SelectResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Array<Ref<GraphProgramResource>> Tests;
    }

    [RTTI.Serializable(0xFB459817AAD447BC)]
    public class SelectResourceByInt : SelectResourceByProperty
    {
        [RTTI.Member(0, 0x48, "Logic")] public Array<SelectResourceByIntTest> Tests;
    }

    [RTTI.Serializable(0x6465622CBC272F02)]
    public class SelectResourceByIntTest
    {
        [RTTI.Member(0, 0x0)] public IntPropertyLink Link;
        [RTTI.Member(1, 0x8)] public EComparator Compare;
        [RTTI.Member(2, 0xC)] public int Value;
    }

    [RTTI.Serializable(0x1A2E2B88442F27C2)]
    public class SelectResourceByProperty : SelectResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public ESelectByPropertyContext Context;
    }

    [RTTI.Serializable(0x81F83FA281BE7913)]
    public class SelectViewItemTag : VisualTag
    {
    }

    [RTTI.Serializable(0x1C174AB710C6EC69)]
    public class SelectViewItemWidget : Widget
    {
    }

    [RTTI.Serializable(0x7C0F5F788D6FF30F)]
    public class SelectViewTag : ListItemTag
    {
    }

    [RTTI.Serializable(0xF4B075A966D9EE8)]
    public class SelectViewWidget : Widget
    {
    }

    [RTTI.Serializable(0xE6810C929758B783)]
    public class SendMessageEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDA184C9ED847DF32)]
    public class SendMessageEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String Message;
    }

    [RTTI.Serializable(0x635A01611FD069BB)]
    public class SendMessageToClientsRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<String> RecipientOnlineIDs;
        [RTTI.Member(1, 0x30)] public Ref<MessageData> MessageData;
    }

    [RTTI.Serializable(0x6ED60911B6764A1E)]
    public class SendScoreEventAction : EntityAction
    {
        [RTTI.Member(0, 0x30)] public Ref<ScoreResource> ScoreResource;
        [RTTI.Member(1, 0x38)] public bool SendToDamager;
        [RTTI.Member(2, 0x39)] public bool SendToConstructor;
        [RTTI.Member(3, 0x3A)] public bool IgnoreSelf;
    }

    [RTTI.Serializable(0xECFA6AAA28B3E78C)]
    public class SentenceGroupResource : Resource
    {
        [RTTI.Member(0, 0x38, "General")] public ESentenceGroupType Type;
        [RTTI.Member(1, 0x40, "General")] public Array<Ref<SentenceResource>> Sentences;
    }

    [RTTI.Serializable(0xE3BB874B04410B7C)]
    public class SentenceResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public ESentenceDelivery Delivery;
        [RTTI.Member(1, 0x2C, "General")] public float PostDelay;
        [RTTI.Member(2, 0x30, "General")] public bool ShowSubtitles;
        [RTTI.Member(3, 0x38, "General")] public Ref<LocalizedSimpleSoundResource> SimpleSound;
        [RTTI.Member(4, 0x40, "General")] public Ref<LocalizedAnimationResource> Animation;
        [RTTI.Member(5, 0x48, "General")] public Ref<LocalizedTextResource> Text;
        [RTTI.Member(6, 0x50, "General")] public Ref<VoiceResource> Voice;
    }

    [RTTI.Serializable(0x80EDBF3802C714A4)]
    public class Sequence : Entity
    {
    }

    [RTTI.Serializable(0xF411C34B852C4636)]
    public class SequenceActionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xBE7F1CEFFC778775)]
    public class SequenceActionEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityAction> EntityActionStart;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityAction> EntityActionStop;
    }

    [RTTI.Serializable(0xD4B6DCE94FB34562)]
    public class SequenceBlendSettings
    {
        [RTTI.Member(0, 0x0)] public int BlendFrames;
    }

    [RTTI.Serializable(0x96CAA6263881A58)]
    public class SequenceCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0xD816C3000DED19C2)]
    public class SequenceCameraEntityRep : CameraEntityRep
    {
    }

    [RTTI.Serializable(0x36F9E09F1CB5E7AB)]
    public class SequenceCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(0, 0x1D8, "Input")] public float HeadingSpeed;
        [RTTI.Member(1, 0x1DC, "Input")] public float MinHeading;
        [RTTI.Member(2, 0x1E0, "Input")] public float MaxHeading;
        [RTTI.Member(3, 0x1E4, "Input")] public float PitchSpeed;
        [RTTI.Member(4, 0x1E8, "Input")] public float MinPitch;
        [RTTI.Member(5, 0x1EC, "Input")] public float MaxPitch;
        [RTTI.Member(6, 0x1F0, "Representation")] public bool ThirdPerson;
    }

    [RTTI.Serializable(0x6E0167E5EB50F194)]
    public class SequenceComponent : EntityComponent
    {
        [RTTI.Member(0, 0x58, "Sequence", true)] public CPtr<Sequence> Sequence;
    }

    [RTTI.Serializable(0x6DD1C13EE7758CC3)]
    public class SequenceEntity : Entity
    {
    }

    [RTTI.Serializable(0x47CC7D25CFC437D4)]
    public class SequenceEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x8F64FDB53491B8)]
    public class SequenceEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0x2E1F820FD5E26364)]
    public class SequenceEntityVariable : CoreObject
    {
        [RTTI.Member(0, 0x20, "Logic")] public bool StopOnDeath;
        [RTTI.Member(1, 0x21, "Logic")] public bool StopOnDamage;
        [RTTI.Member(2, 0x22, "Logic")] public bool StopOnAlerted;
        [RTTI.Member(3, 0x23, "Logic")] public bool DismountOnAlertedOrDamage;
        [RTTI.Member(4, 0x28, "Logic")] public Array<Ref<BooleanFact>> IsActiveFacts;
        [RTTI.Member(5, 0x38, "Logic")] public Array<Ref<EntityComponentResource>> ExtraComponents;
    }

    [RTTI.Serializable(0x7AC9BFDD2D95D507)]
    public class SequenceEntityVariableInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0xCC820FB5306198F7)]
    public class SequenceHideBehaviorComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x88BA4EC2DF31D79B)]
    public class SequenceHideBehaviorComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public ESequenceHideBehavior HideBehavior;
    }

    [RTTI.Serializable(0x59A154B127DE919B)]
    public class SequenceHighLODSkipSet
    {
        [RTTI.Member(0, 0x0)] public Array<GGUUID> UUIDs;
    }

    [RTTI.Serializable(0x670D2D3AB32DAA7E)]
    public class SequenceInfoMission : RTTIObject
    {
    }

    [RTTI.Serializable(0xDA341468B31E71CF)]
    public class SequenceInfoPlayer : RTTIObject
    {
    }

    [RTTI.Serializable(0x71F1EF138DA559AF)]
    public class SequenceMessageAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Message;
    }

    [RTTI.Serializable(0x4B8730D3C5CA9639)]
    public class SequenceNetworkAIObstacle : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<AIDynamicObstacleCircleResource> ObstacleResource;
        [RTTI.Member(1, 0x30)] public Ref<AIFaction> ObstacleFaction;
    }

    [RTTI.Serializable(0x1E233DAE0E91AADD)]
    public class SequenceNetworkBooleanFactNode : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x28)] public ESequenceNetworkFactContextType FactContextType;
        [RTTI.Member(2, 0x30)] public Ref<SequenceNetworkNode> TrueNode;
        [RTTI.Member(3, 0x38)] public Ref<SequenceNetworkNode> FalseNode;
    }

    [RTTI.Serializable(0xBE339A8941E3C664)]
    public class SequenceNetworkBooleanFactNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x9E4550372AF212CC)]
    public class SequenceNetworkBranch : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public Array<CPtr<SequenceNetworkNode>> Nodes;
        [RTTI.Member(1, 0x30)] public ESequenceNetworkBranchSelectionMode NodeSelectionMode;
    }

    [RTTI.Serializable(0x9E5AAE8EF28B846A)]
    public class SequenceNetworkBranchInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x621321B2ABD0AD57)]
    public class SequenceNetworkComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE34B33F0ED166B86)]
    public class SequenceNetworkComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<SequenceNetworkResource> SequenceNetwork;
    }

    [RTTI.Serializable(0xC9B76C33E60BB634)]
    public class SequenceNetworkCondition : SequenceNetworkConditionBase
    {
        [RTTI.Member(0, 0x30)] public CPtr<GraphProgramResource> Condition;
    }

    [RTTI.Serializable(0x65D2A04856117249)]
    public class SequenceNetworkConditionBase : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public CPtr<SequenceNetworkNode> True;
        [RTTI.Member(1, 0x28)] public CPtr<SequenceNetworkNode> False;
    }

    [RTTI.Serializable(0x612ED5B314822B18)]
    public class SequenceNetworkConditionBaseInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0xBDF2CB4800EED822)]
    public class SequenceNetworkConditionInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x40F65F13B6D7DE73)]
    public class SequenceNetworkCrateCarryingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDE0281867B4E1E6E)]
    public class SequenceNetworkCrateCarryingComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Data")] public Ref<SequenceNetworkNode> WithCrateNode;
        [RTTI.Member(1, 0x30, "Data")] public Ref<SequenceNetworkNode> WithoutCrateNode;
        [RTTI.Member(2, 0x38, "Data")] public Ref<EntityResource> CrateResource;
        [RTTI.Member(3, 0x40, "Data")] public Ref<BooleanFact> CrateCarryingFact;
    }

    [RTTI.Serializable(0x4B4FFDEC05A8E9ED)]
    public class SequenceNetworkDismountMode
    {
        [RTTI.Member(0, 0x0)] public Ref<SequenceEntityVariable> Variable;
        [RTTI.Member(1, 0x8)] public WorldTransform DismountTransform;
        [RTTI.Member(2, 0x48)] public bool DismountTransformIsRelative;
        [RTTI.Member(3, 0x50)] public HashSet<GGUUID> ReachableFromNodes;
        [RTTI.Member(4, 0x60)] public HashSet<GGUUID> DismountingNodes;
        [RTTI.Member(5, 0x70)] public String Name;
    }

    [RTTI.Serializable(0xA197F6B7E90AAC21)]
    public class SequenceNetworkEnumFactNode : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public Ref<EnumFact> Fact;
        [RTTI.Member(1, 0x28)] public ESequenceNetworkFactContextType FactContextType;
        [RTTI.Member(2, 0x30)] public Array<Ref<SequenceNetworkEnumFactValueToNode>> ValuesToNodes;
    }

    [RTTI.Serializable(0x1A1D4C6A73F0C29A)]
    public class SequenceNetworkEnumFactNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x1924224E93E57E1A)]
    public class SequenceNetworkEnumFactValueToNode : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<EnumFactValue> Value;
        [RTTI.Member(1, 0x28)] public Ref<SequenceNetworkNode> Node;
    }

    [RTTI.Serializable(0xB30A6DF7782C5B81)]
    public class SequenceNetworkInstance : RTTIRefObject
    {
        [RTTI.Member(0, 0x50, "General")] public CPtr<SequenceNetworkResource> Resource;
    }

    [RTTI.Serializable(0x9E8DCB60203290EA)]
    public class SequenceNetworkInterruptHandler : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<InterruptEventResource> InterruptEvent;
        [RTTI.Member(1, 0x30)] public CPtr<SequenceNetworkNode> Node;
    }

    [RTTI.Serializable(0xFD172170165C02B0)]
    public class SequenceNetworkNode : CoreObject
    {
    }

    [RTTI.Serializable(0x88C1DCFA71106733)]
    public class SequenceNetworkNodeGraphNode : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(1, 0x28)] public CPtr<SequenceNetworkNode> NextNode;
    }

    [RTTI.Serializable(0xAA82AA12869D3D18)]
    public class SequenceNetworkNodeGraphNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x79A8370286D70445)]
    public class SequenceNetworkNodeInstance : RTTIObject
    {
    }

    [RTTI.Serializable(0x3ABAF71D1AF524F1)]
    public class SequenceNetworkOwnerSequenceEntityVariable : SequenceEntityVariable
    {
    }

    [RTTI.Serializable(0x3852778338F75950)]
    public class SequenceNetworkOwnerSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x3BAC118D86D5D42D)]
    public class SequenceNetworkPlayerChoiceEntry : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<LocalizedTextResource> DisplayLabel;
        [RTTI.Member(1, 0x28)] public CPtr<SequenceNetworkNode> Node;
        [RTTI.Member(2, 0x30)] public bool MarkWhenChosen;
        [RTTI.Member(3, 0x31)] public EPlayerChoiceLocation Location;
    }

    [RTTI.Serializable(0x4948C394678E3872)]
    public class SequenceNetworkPlayerChoiceNode : SequenceNetworkSequenceNodeBase
    {
        [RTTI.Member(0, 0x70)] public Array<Ref<SequenceNetworkPlayerChoiceEntry>> Entries;
        [RTTI.Member(1, 0x80)] public Ref<LocalizedTextResource> DisplayTitle;
    }

    [RTTI.Serializable(0x41C12C0886A6071B)]
    public class SequenceNetworkPlayerChoiceNodeInstance : SequenceNetworkSequenceNodeBaseInstance
    {
    }

    [RTTI.Serializable(0x7A63F5ADAC9DB37F)]
    public class SequenceNetworkPlayerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5A59443BCFFF2B0C)]
    public class SequenceNetworkPlayerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x982E7E2EA82AAFA8)]
    public class SequenceNetworkPlayerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Sound")] public Ref<SoundResource> SelectionChangedSound;
    }

    [RTTI.Serializable(0x3FF8669C2650EBCE)]
    public class SequenceNetworkQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<GGUUID> NodeUUIDs;
        [RTTI.Member(1, 0x38, "Logic")] public int AmountRequired;
        [RTTI.Member(2, 0x3C, "Logic")] public bool PerformInitialCheck;
    }

    [RTTI.Serializable(0x8FE1414C8A6A206A)]
    public class SequenceNetworkQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xFD8188CDA83E1EE0)]
    public class SequenceNetworkResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<SequenceNetworkNode> RootNode;
        [RTTI.Member(1, 0x30)] public Array<Ref<SequenceNetworkNode>> Nodes;
        [RTTI.Member(2, 0x40)] public ESequenceNetworkFactContextType NodeFactContext;
        [RTTI.Member(3, 0x48)] public Array<Ref<SequenceEntityVariable>> EntityVariables;
        [RTTI.Member(4, 0x58)] public Array<Ref<SharedPositionVariable>> SharedPositions;
        [RTTI.Member(5, 0x68)] public bool AutoStart;
        [RTTI.Member(6, 0x69)] public bool ResetWhenAborted;
        [RTTI.Member(7, 0x70)] public Ref<SequenceNetworkAIObstacle> AIObstacle;
        [RTTI.Member(8, 0x78, "Generated")] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(9, 0x80, "Generated")] public Array<SequenceNetworkDismountMode> DismountModes;
    }

    [RTTI.Serializable(0x35BD8359FB6AAD06)]
    public class SequenceNetworkSequenceNode : SequenceNetworkSequenceNodeBase
    {
        [RTTI.Member(0, 0x70)] public CPtr<SequenceNetworkNode> NextNode;
    }

    [RTTI.Serializable(0x90ADCBA0BD4C5F8D)]
    public class SequenceNetworkSequenceNodeBase : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public Ref<SequenceResource> Sequence;
        [RTTI.Member(1, 0x28)] public bool PlayOnce;
        [RTTI.Member(2, 0x2A)] public uint16 CameraPredictionQuality;
        [RTTI.Member(3, 0x2C)] public float CameraPredictionDistance;
        [RTTI.Member(4, 0x30)] public Ref<BooleanFact> Fact;
        [RTTI.Member(5, 0x38)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(6, 0x40)] public CPtr<SequenceNetworkNode> InterruptNode;
        [RTTI.Member(7, 0x48)] public Array<Ref<SequenceNetworkInterruptHandler>> InterruptHandlers;
        [RTTI.Member(8, 0x58)] public Array<Ref<SequenceNetworkTransition>> Transitions;
        [RTTI.Member(9, 0x68)] public bool NeedSequenceAdaptionHandle;
        [RTTI.Member(10, 0x69)] public bool ForceFarPlaneWhenCameraCut;
    }

    [RTTI.Serializable(0xB72C9AC68679E43B)]
    public class SequenceNetworkSequenceNodeBaseInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x8E0719DD5751F76C)]
    public class SequenceNetworkSequenceNodeInstance : SequenceNetworkSequenceNodeBaseInstance
    {
    }

    [RTTI.Serializable(0x6323B42607322607)]
    public class SequenceNetworkTeleportPlayerNode : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public CPtr<SequenceNetworkNode> NextNode;
        [RTTI.Member(1, 0x28)] public Ref<WorldNode> TeleportLocation;
    }

    [RTTI.Serializable(0xA3FEABEF50EC94DE)]
    public class SequenceNetworkTeleportPlayerNodeInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0x3C7766A599222BFC)]
    public class SequenceNetworkTransition : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public SequenceNetworkTransitionTarget Target;
        [RTTI.Member(1, 0x30)] public SequenceNetworkTransitionSource Source;
        [RTTI.Member(2, 0x40)] public SequenceBlendSettings Settings;
    }

    [RTTI.Serializable(0x7ACFCA8CA76D6A73)]
    public class SequenceNetworkTransitionSource
    {
        [RTTI.Member(0, 0x0)] public ESequenceNetworkTransitionSourceType Type;
        [RTTI.Member(1, 0x8)] public Ref<RTTIRefObject> Object;
    }

    [RTTI.Serializable(0x7197E2C12F6941E3)]
    public class SequenceNetworkTransitionTarget
    {
        [RTTI.Member(0, 0x0)] public ESequenceNetworkTransitionTargetType Type;
        [RTTI.Member(1, 0x8)] public Ref<SequenceNetworkSequenceNodeBase> SequenceNode;
    }

    [RTTI.Serializable(0x1542C84A7817E52D)]
    public class SequenceNetworkUseLocation : SequenceNetworkNode
    {
        [RTTI.Member(0, 0x20)] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(1, 0x30)] public Mat44 LocalMatrix;
        [RTTI.Member(2, 0x70)] public CPtr<SequenceNetworkNode> Node;
        [RTTI.Member(3, 0x78)] public CPtr<SequenceNetworkNode> ImmediateNode;
        [RTTI.Member(4, 0x80)] public Ref<SequenceEntityVariable> UserEntityVariable;
        [RTTI.Member(5, 0x88)] public Ref<SequenceEntityVariable> Owner;
        [RTTI.Member(6, 0x90)] public bool PlaceOnOwner;
        [RTTI.Member(7, 0x98)] public String PlaceOnOwnerHelper;
        [RTTI.Member(8, 0xA0)] public bool MoveSequenceNetworkToOwner;
        [RTTI.Member(9, 0xA1)] public bool PlaceOnAnimationStart;
        [RTTI.Member(10, 0xA8, "AI")] public Ref<SmartObjectComponentResource> SmartObjectComponentResource;
        [RTTI.Member(11, 0xB0, "AI")] public String SectionName;
        [RTTI.Member(12, 0xB8, "AI")] public bool AllowWhenMoving;
        [RTTI.Member(13, 0xBC, "AI")] public uint32 MountCost;
        [RTTI.Member(14, 0xC0, "AI")] public Ref<SequenceNetworkUseLocationGroup> Group;
        [RTTI.Member(15, 0xC8, "AI")] public ECrowdImpostorAnimationState ImpostorStance;
        [RTTI.Member(16, 0xD0, "Generated")] public WorldTransform AnimationStartTransform;
        [RTTI.Member(17, 0x110, "Generated")] public bool AnimationStartIsRelative;
        [RTTI.Member(18, 0x118, "Generated")] public WorldTransform ImmediateAnimationStartTransform;
        [RTTI.Member(19, 0x158, "Generated")] public bool ImmediateAnimationStartIsRelative;
        [RTTI.Member(20, 0x159, "Generated")] public bool HasImmediateAnimationStartTransform;
    }

    [RTTI.Serializable(0xB691E5DE29F337CF)]
    public class SequenceNetworkUseLocationGroup : Resource
    {
    }

    [RTTI.Serializable(0x23769953A32C993F)]
    public class SequenceNetworkUseLocationInstance : SequenceNetworkNodeInstance
    {
    }

    [RTTI.Serializable(0xFCB0A6288D480B40)]
    public class SequenceNetworkVariableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6832AAA128C186BE)]
    public class SequenceNetworkWantsDismountNode : SequenceNetworkConditionBase
    {
        [RTTI.Member(0, 0x30)] public Ref<SequenceEntityVariable> EntityVariable;
        [RTTI.Member(1, 0x38, "Generated")] public int DismountModeIndex;
    }

    [RTTI.Serializable(0xFB946BC90078988F)]
    public class SequenceNetworkWantsDismountNodeInstance : SequenceNetworkConditionBaseInstance
    {
    }

    [RTTI.Serializable(0x6A23B33182524A1)]
    public class SequenceRep : EntityRep
    {
    }

    [RTTI.Serializable(0x9094E282C7DA3267)]
    public class SequenceResource : SequenceResourceBase
    {
        [RTTI.Member(0, 0x130, "Network")] public bool SyncFrameCounter;
        [RTTI.Member(1, 0x131, "Logic")] public ESequenceLoopMode LoopMode;
        [RTTI.Member(2, 0x132, "Logic")] public bool AutoStart;
        [RTTI.Member(3, 0x133, "Logic")] public bool AutoDestroy;
        [RTTI.Member(4, 0x134, "Streaming")] public bool GenerateStreamingHintData;
        [RTTI.Member(5, 0x138, "Logic")] public Array<Ref<EventResource>> Events;
        [RTTI.Member(6, 0x148, "Logic")] public Array<Ref<LocatorResource>> Locators;
        [RTTI.Member(7, 0x158, "Logic")] public Array<Ref<ActorResource>> Actors;
        [RTTI.Member(8, 0x168)] public ExposedEventAttributeList ExposedEventAttributeList;
        [RTTI.Member(9, 0x178, "Private")] public int StopFrame;
        [RTTI.Member(10, 0x180, "Private")] public Array<Ref<SortedEvent>> SortedEvents;
        [RTTI.Member(11, 0x1B0, "Private")] public Array<CPtr<SetGlobalLodBiasEventResource>> GlobalLodEvents;
        [RTTI.Member(12, 0x1C0, "Private")] public Array<CPtr<SortedEvent>> EntityActorEvents;
        [RTTI.Member(13, 0x1D1, "Logic")] public bool SuppressUpdates;
        [RTTI.Member(14, 0x1D8, "Logic")] public Array<InitialTemplateVariable> InitialTemplateVariable;
        [RTTI.Member(15, 0x1E8, "Logic")] public Array<Ref<SequenceEntityVariable>> EntityVariables;
        [RTTI.Member(16, 0x1F8, "Streaming")] public Ref<RenderDataStreamingHintData> StreamingHintData;
        [RTTI.Member(17, 0x200, "Streaming")] public String StreamingHintDataPath;
        [RTTI.Member(18, 0x208, "Coop")] public String SecondPlayerStartMarker;
        [RTTI.Member(19, 0x210, "Coop")] public String SecondPlayerStopMarker;
        [RTTI.Member(20, 0x218, "Time")] public Ref<GraphProgramResource> FrameSource;
        [RTTI.Member(21, 0x220, "Time")] public float DurationOverrideInSec;
    }

    [RTTI.Serializable(0xAEBE8FDA527B5635)]
    public class SequenceResourceBase : EntityResource
    {
    }

    [RTTI.Serializable(0x45E8F7D93A560477)]
    public class SequenceTemplateVariableAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Variable;
        [RTTI.Member(1, 0x38, "Logic")] public String Value;
    }

    [RTTI.Serializable(0x66B9EAD8481C4E9)]
    public class SerializableDecalMaterialTypeMask
    {
        [RTTI.Member(0, 0x0)] public Ref<DecalResource> DecalResource;
        [RTTI.Member(1, 0x8)] public MaterialType MaterialTypeA;
        [RTTI.Member(2, 0xC)] public SerializableGeometryMaterialTypeMask MaterialTypeMask;
    }

    [RTTI.Serializable(0xDB8A06C37859B657)]
    public class SerializableGeometryMaterialTypeMask
    {
        [RTTI.Member(0, 0x0)] public uint32 Field0;
        [RTTI.Member(1, 0x4)] public uint32 Field1;
        [RTTI.Member(2, 0x8)] public uint32 Field2;
        [RTTI.Member(3, 0xC)] public uint32 Field3;
        [RTTI.Member(4, 0x10)] public uint32 Field4;
        [RTTI.Member(5, 0x14)] public uint32 Field5;
        [RTTI.Member(6, 0x18)] public uint32 Field6;
        [RTTI.Member(7, 0x1C)] public uint32 Field7;
    }

    [RTTI.Serializable(0xA35956924F3A12A)]
    public class ServerAddress : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String IP;
        [RTTI.Member(1, 0x28)] public int Port;
    }

    [RTTI.Serializable(0x3EB84BA9EADEADD7)]
    public class ServerClan : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Tag;
        [RTTI.Member(1, 0x28)] public String Name;
        [RTTI.Member(2, 0x38)] public int MaxSize;
        [RTTI.Member(3, 0x40)] public uint64 CreationTime;
        [RTTI.Member(4, 0x48)] public Array<Ref<ServerClanMember>> Members;
    }

    [RTTI.Serializable(0xE80F77FD38DCBF05)]
    public class ServerClanInvite : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String InviterID;
        [RTTI.Member(1, 0x28)] public String TargetID;
        [RTTI.Member(2, 0x30)] public String ClanTag;
        [RTTI.Member(3, 0x38)] public int64 CreationDate;
    }

    [RTTI.Serializable(0x6E3EB2BD6F666EA0)]
    public class ServerClanInviteList : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<ServerClanInvite>> Invites;
    }

    [RTTI.Serializable(0xEFB528DB1348E9FE)]
    public class ServerClanList : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<ServerClan>> Clan;
    }

    [RTTI.Serializable(0x4B84C908A709D9DD)]
    public class ServerClanMatchReport : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ClanTag;
        [RTTI.Member(1, 0x28)] public String OpponentTag;
        [RTTI.Member(2, 0x30)] public uint64 StartTime;
    }

    [RTTI.Serializable(0xFE35558CAE87AD02)]
    public class ServerClanMatchReportResponse : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<ServerClanMatchReport>> Reports;
    }

    [RTTI.Serializable(0x7D2099C49F894123)]
    public class ServerClanMember : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ID;
        [RTTI.Member(1, 0x28)] public ClanRole Role;
    }

    [RTTI.Serializable(0x77548F754C0E88FC)]
    public class ServerClanMemberTag : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String MemberID;
        [RTTI.Member(1, 0x28)] public String ClanTag;
    }

    [RTTI.Serializable(0xE8C213CFB74C6930)]
    public class ServerClanMemberTagList : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<ServerClanMemberTag>> Tags;
    }

    [RTTI.Serializable(0x76576DDEBC10B2E3)]
    public class ServerClanResponse : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<String> Errors;
        [RTTI.Member(1, 0x30)] public ClanStatus Status;
    }

    [RTTI.Serializable(0xDE1F2AF6464341E1)]
    public class ServerCollectableResponse : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public bool Success;
        [RTTI.Member(1, 0x28)] public Array<Ref<CollectableData>> Data;
    }

    [RTTI.Serializable(0xF9472615CBA73F57)]
    public class ServerCollectableTimer : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String TimerID;
        [RTTI.Member(1, 0x28)] public int64 StartTime;
        [RTTI.Member(2, 0x30)] public int64 Interval;
    }

    [RTTI.Serializable(0x3464987846610F77)]
    public class ServerCollectableTimerResponse : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public uint64 CurrentServerTimeInMs;
        [RTTI.Member(1, 0x28)] public Array<Ref<ServerCollectableTimer>> Timers;
    }

    [RTTI.Serializable(0x3C55C2307808CFE9)]
    public class ServerCollection : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<RTTIRefObject>> Items;
    }

    [RTTI.Serializable(0xFF27EF76C1F2E98F)]
    public class ServerConnectionRule : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ID;
        [RTTI.Member(1, 0x28)] public Array<int> RetryIntervals;
        [RTTI.Member(2, 0x38)] public int RetryMax;
        [RTTI.Member(3, 0x3C)] public int ConnectTimeout;
        [RTTI.Member(4, 0x40)] public int ResponseTimeout;
    }

    [RTTI.Serializable(0xBF74B4B33751C37B)]
    public class ServerHeartBeat : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x2D8188C21973F4A0)]
    public class ServerInfo : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Environment;
        [RTTI.Member(1, 0x28)] public EServerType ServerType;
        [RTTI.Member(2, 0x30)] public String ServerVersion;
        [RTTI.Member(3, 0x38)] public String ServerBuildNumber;
        [RTTI.Member(4, 0x40)] public String ServerBuildDate;
        [RTTI.Member(5, 0x48)] public String SystemSettingsVersion;
        [RTTI.Member(6, 0x50)] public String SystemSettingsClientVersion;
        [RTTI.Member(7, 0x58)] public uint64 ClusterID;
        [RTTI.Member(8, 0x60)] public uint64 Timestamp;
    }

    [RTTI.Serializable(0x15785F765C1CA7E2)]
    public class ServerLocation : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Location;
        [RTTI.Member(1, 0x28)] public Array<Ref<ServerAddress>> Servers;
    }

    [RTTI.Serializable(0x9EE3DB6536ACCF11)]
    public class ServerProfileOwnerList : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<ProfileOwnerData>> Profile;
        [RTTI.Member(1, 0x30)] public HashMap<String_String> LogContext;
    }

    [RTTI.Serializable(0x7BD512AEE84853A2)]
    public class ServerProfileUpdateResult : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ProfileOwner;
        [RTTI.Member(1, 0x28)] public String UUID;
        [RTTI.Member(2, 0x30)] public EProfileUpdateStatus StatusCode;
    }

    [RTTI.Serializable(0x502D95E717798884)]
    public class ServerSetting : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Key;
        [RTTI.Member(1, 0x28)] public Ref<RTTIRefObject> Value;
        [RTTI.Member(2, 0x30)] public int64 Version;
    }

    [RTTI.Serializable(0xD80002D73721311)]
    public class ServerSettingVersion : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int64 KnownVersion;
        [RTTI.Member(1, 0x28)] public int64 TargetVersion;
    }

    [RTTI.Serializable(0xC6A71967E7E40B64)]
    public class ServerSettingsList : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<ServerSetting>> Entry;
        [RTTI.Member(1, 0x30)] public int64 Version;
    }

    [RTTI.Serializable(0xAC011BC8CD0A8D9E)]
    public class ServerSystemSettingsVersionMessage : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int64 Version;
    }

    [RTTI.Serializable(0xCCB04EFCB9243FF9)]
    public class ServerTimeUnit : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int64 TimeMs;
    }

    [RTTI.Serializable(0x258E01447F5664B3)]
    public class ServerURN : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ID;
        [RTTI.Member(1, 0x28)] public String Rule;
        [RTTI.Member(2, 0x30)] public String URN;
        [RTTI.Member(3, 0x38)] public String ContentType;
        [RTTI.Member(4, 0x40)] public EHTTPRequestMethod Method;
    }

    [RTTI.Serializable(0x4D2905427528B4)]
    public class SetAiStimuliModifierAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public float Modifer;
    }

    [RTTI.Serializable(0x52242A9F234E6EB5)]
    public class SetAnimationVariableAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String AnimationVariableName;
        [RTTI.Member(1, 0x38, "Logic")] public float Value;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<CurveResource> ValuePerDamageCurve;
    }

    [RTTI.Serializable(0x201E828918D8323B)]
    public class SetBoolPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public BoolPropertyLink Property;
        [RTTI.Member(2, 0x40, "Logic")] public bool Value;
    }

    [RTTI.Serializable(0x168BF0880BC936E6)]
    public class SetBooleanFactAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x38, "Logic")] public bool Value;
        [RTTI.Member(2, 0x39, "Logic")] public bool Global;
    }

    [RTTI.Serializable(0xD7830AF5E1FDF4E4)]
    public class SetCloakAiBodyVisualStimuliAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Enable;
    }

    [RTTI.Serializable(0xAE5450BB1F13BCE0)]
    public class SetEnumFactAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EnumFact> Fact;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EnumFactValue> Value;
        [RTTI.Member(2, 0x40, "Logic")] public bool Global;
    }

    [RTTI.Serializable(0x7F531230A4AD5885)]
    public class SetFacialEmotionEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x76A830E8FD6327DD)]
    public class SetFacialEmotionEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<FacialEmotionAnimationResource> FacialEmotionAnimation;
    }

    [RTTI.Serializable(0x2620E6B538BB0B8E)]
    public class SetFactEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x3D0235C5306C3E37)]
    public class SetFactEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public ESequenceFactContextType FactContextType;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Array<FactValueBase> Facts;
        [RTTI.Member(3, 0x58, "Logic")] public bool RestoreFacts;
    }

    [RTTI.Serializable(0x373FFA1D2371C66B)]
    public class SetFactSpawnCommand : SpawnCommand
    {
        [RTTI.Member(0, 0x60, "Logic")] public String Fact;
    }

    [RTTI.Serializable(0x450C9E6E67BE5802)]
    public class SetFactionAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String FactionName;
        [RTTI.Member(1, 0x38, "Logic")] public EFactionSetMode FactionSetMode;
    }

    [RTTI.Serializable(0xAA434A70DDF91E2E)]
    public class SetFloatFactAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<FloatFact> Fact;
        [RTTI.Member(1, 0x38, "Logic")] public float Value;
        [RTTI.Member(2, 0x3C, "Logic")] public bool Global;
    }

    [RTTI.Serializable(0x9B76A4B555D1BEB1)]
    public class SetFloatFactEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x1B824312C1116EC7)]
    public class SetFloatFactEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public ESequenceFactContextType FactContextType;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(2, 0x48, "Logic")] public Ref<FloatFact> FloatFact;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<CurveResource> CurveResource;
        [RTTI.Member(4, 0x58, "Logic")] public bool RestoreFact;
    }

    [RTTI.Serializable(0x3F25B4EB24ED5EB4)]
    public class SetFloatPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public FloatPropertyLink Property;
        [RTTI.Member(2, 0x40, "Logic")] public float Value;
    }

    [RTTI.Serializable(0x38F6CF09F31EF288)]
    public class SetFocusEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x8856BBF4EDBADB97)]
    public class SetFocusEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool Active;
        [RTTI.Member(2, 0x41, "Logic")] public bool RestoreState;
    }

    [RTTI.Serializable(0x107EFC338AD4F424)]
    public class SetGlobalLodBiasEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xE7B27ED426D6D169)]
    public class SetGlobalLodBiasEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public float LodDistanceScale;
    }

    [RTTI.Serializable(0x829359324D409732)]
    public class SetInstigatorFlagAction : EntityAction
    {
        [RTTI.Member(0, 0x30)] public Ref<InstigatorFlagResource> InstigatorFlagResource;
    }

    [RTTI.Serializable(0x879537E1B2CFFE28)]
    public class SetIntPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public IntPropertyLink Property;
        [RTTI.Member(2, 0x40, "Logic")] public int Value;
    }

    [RTTI.Serializable(0xAC8B20678746EC4E)]
    public class SetIntegerFactAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<IntegerFact> Fact;
        [RTTI.Member(1, 0x38, "Logic")] public int Value;
        [RTTI.Member(2, 0x3C, "Logic")] public bool Global;
    }

    [RTTI.Serializable(0x338B6F9B338DA771)]
    public class SetMoverAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<MoverResource> Mover;
        [RTTI.Member(1, 0x38, "Logic")] public EMoverActionParentLinking ParentLinking;
    }

    [RTTI.Serializable(0xCD56E2D065711222)]
    public class SetPartsLocalOffsetAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Action")] public Array<Ref<DestructibilityPart>> Parts;
        [RTTI.Member(1, 0x40, "Action")] public bool ActOnCurrentPart;
        [RTTI.Member(2, 0x50, "Action")] public Mat44 Matrix;
        [RTTI.Member(3, 0x90, "Action")] public Ref<RandomMatrixResourceBase> RandomMatrix;
    }

    [RTTI.Serializable(0x5045A409CA27C670)]
    public class SetPathHelperNodeAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<PathHelperNodeComponentResource> ComponentResource;
        [RTTI.Member(1, 0x38, "Logic")] public String Name;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<PathResource> PathResource;
        [RTTI.Member(3, 0x48, "Logic")] public float Speed;
        [RTTI.Member(4, 0x4C, "Logic")] public float AccelerationTime;
        [RTTI.Member(5, 0x50, "Logic")] public bool Looping;
    }

    [RTTI.Serializable(0x29E792B7AB9C8FA0)]
    public class SetPoseDeformerPropertiesAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public float WorldMotionLimitMultiplier;
        [RTTI.Member(1, 0x34, "Logic")] public float WorldMotionInfluenceMultiplier;
    }

    [RTTI.Serializable(0x58C57D6F96585D3E)]
    public class SetScriptPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public String PropertyValue;
    }

    [RTTI.Serializable(0x815E9E86726F9522)]
    public class SetShaderVariableAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(1, 0x40, "Logic")] public bool ActOnCurrentPart;
        [RTTI.Member(2, 0x48, "Logic")] public String ShaderVariableID;
        [RTTI.Member(3, 0x50, "Logic")] public float Value;
        [RTTI.Member(4, 0x54, "Logic")] public FRange RandomValue;
        [RTTI.Member(5, 0x5C, "Logic")] public ERandomShaderVariableType Randomization;
        [RTTI.Member(6, 0x60, "Logic")] public float BlendUnitsPerSecond;
    }

    [RTTI.Serializable(0x8A1308DB8A4893D0)]
    public class SetShaderVariableFromDamageAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String VariableName;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<CurveResource> ValuePerDamageCurve;
    }

    [RTTI.Serializable(0x19A58B137A07FECB)]
    public class SetSpawnAreaEnabledAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool IsEnabled;
    }

    [RTTI.Serializable(0x421E9A2C8FFE3EF6)]
    public class SetStringPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public StringPropertyLink Property;
        [RTTI.Member(2, 0x40, "Logic")] public String Value;
    }

    [RTTI.Serializable(0x38ACA7AB216AAF5A)]
    public class SetSwitchStateAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool State;
    }

    [RTTI.Serializable(0x1BEE2BBD30A2521C)]
    public class SetTemplateVariableEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xB10A1BC45626BA68)]
    public class SetTemplateVariableEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Variable;
        [RTTI.Member(1, 0x38, "Logic")] public String Value;
    }

    [RTTI.Serializable(0x57DE0AD19A78EEFF)]
    public class SetTimeOfDayEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x4C848F4BA715F248)]
    public class SetTimeOfDayEventResouce : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public int Hour;
        [RTTI.Member(1, 0x3C, "Logic")] public int Minute;
        [RTTI.Member(2, 0x40, "Logic")] public bool SetTimeOfDay;
        [RTTI.Member(3, 0x41, "Logic")] public bool PauseTimeOfDay;
    }

    [RTTI.Serializable(0xD7D1C3116E124950)]
    public class SetVec3PropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public Vec3PropertyLink Property;
        [RTTI.Member(2, 0x40, "Logic")] public Vec3 Value;
    }

    [RTTI.Serializable(0xD39B4B333ABA6E79)]
    public class SetVisibilityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Visible;
    }

    [RTTI.Serializable(0x3B9726B06CA61BEA)]
    public class SetVolumeEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xA8E4C0C15B0FB8FF)]
    public class SetVolumeEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public float Volume;
        [RTTI.Member(1, 0x34, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0xEE1C8904952BF6AF)]
    public class SetWorldPositionPropertyAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x38, "Logic")] public WorldPositionPropertyLink Property;
        [RTTI.Member(2, 0x40, "Logic")] public WorldPosition Value;
    }

    [RTTI.Serializable(0xEABA9EF793191484)]
    public class SeverityStatDisplayEntry : StatDisplayEntry
    {
        [RTTI.Member(0, 0x38, "General")] public Ref<DamageSettings> DamageSettings;
    }

    [RTTI.Serializable(0xA9391772857671AB)]
    public class ShaderAnimationAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<DestructibilityPart>> ConvertedParts;
        [RTTI.Member(1, 0x40, "Logic")] public bool ActOnCurrentPart;
        [RTTI.Member(2, 0x48, "Logic")] public String ShaderVariableID;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<CurveResource> ShaderAnimationCurve;
        [RTTI.Member(4, 0x58, "Logic")] public bool IsLooping;
        [RTTI.Member(5, 0x5C, "Logic")] public float BlendUnitsPerSecond;
        [RTTI.Member(6, 0x60, "Logic")] public bool AnimateInRealTime;
    }

    [RTTI.Serializable(0x4AF2C370AAC1596A)]
    public class ShaderDataDesc
    {
        [RTTI.Member(0, 0x20)] public ERenderPlatform RenderPlatform;
        [RTTI.Member(1, 0x24)] public EProgramTypeMask ProgramTypeMask;
        [RTTI.Member(2, 0x28)] public EShaderInstancingMode ShaderInstancingMode;
        [RTTI.Member(3, 0x29)] public ESRTCreationMode SRTCreationMode;
        [RTTI.Member(4, 0x2C)] public int RenderTargetCount;
        [RTTI.Member(5, 0x30)] public Array<SRTEntry> SRTEntries;
        [RTTI.Member(6, 0x40)] public Array<VertexStreamBindingDesc> VertexStreamBindingsDescs;
        [RTTI.Member(7, 0x50)] public Array<StreamOutDesc> StreamOutDescs;
        [RTTI.Member(8, 0x60)] public EProgramTypeMask FunctionShaderTableProgramTypeMask;
        [RTTI.Member(9, 0x70)] public ShaderResourceValidationSet ValidationFlags;
        [RTTI.Member(10, 0x4F0, "UsedShaderBindings")] public Array<uint32> UsedComputeBindings;
        [RTTI.Member(11, 0x500, "UsedShaderBindings")] public Array<uint32> UsedGeometryBindings;
        [RTTI.Member(12, 0x510, "UsedShaderBindings")] public Array<uint32> UsedVertexBindings;
        [RTTI.Member(13, 0x520, "UsedShaderBindings")] public Array<uint32> UsedPixelBindings;
    }

    [RTTI.Serializable(0xA1377902FA471CD4)]
    public class ShaderFromFileResource : ShaderResource
    {
    }

    [RTTI.Serializable(0x832F091C38ED5E7C)]
    public class ShaderFromGraphResource : ShaderResource
    {
        [RTTI.Member(0, 0x30, "Compute")] public EComputeThreadDistribution ThreadDistribuation;
    }

    [RTTI.Serializable(0x1DA05DAED1D3A692)]
    public class ShaderProgramResourceSet
    {
        [RTTI.Member(0, 0x0)] public uint128 Buffers;
        [RTTI.Member(1, 0x10)] public uint16 CBuffers;
        [RTTI.Member(2, 0x12)] public uint16 Samplers;
        [RTTI.Member(3, 0x14)] public uint16 RWBuffers;
    }

    [RTTI.Serializable(0xD5A3C77C8C860D1)]
    public class ShaderResourceValidationSet
    {
        [RTTI.Member(0, 0x0)] public ShaderProgramResourceSet_36<ShaderProgramResourceSet> ResourceSet;
    }

    [RTTI.Serializable(0xF2A3A244CBB8033F)]
    public class ShaderSamplerBinding
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingNameHash;
        [RTTI.Member(1, 0x4)] public HwSamplerData SamplerData;
    }

    [RTTI.Serializable(0x2708527D470A1428)]
    public class ShaderTextureBinding
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingNameHash;
        [RTTI.Member(1, 0x4)] public uint32 BindingSwizzleNameHash;
        [RTTI.Member(2, 0x8)] public uint32 SamplerNameHash;
        [RTTI.Member(3, 0xC)] public uint32 PackedData;
        [RTTI.Member(4, 0x10)] public Ref<Resource> TextureResource;
    }

    [RTTI.Serializable(0xC9BC388938FC94E6)]
    public class ShaderVariableBinding
    {
        [RTTI.Member(0, 0x0)] public uint32 BindingNameHash;
        [RTTI.Member(1, 0x4)] public uint32 VariableIDHash;
        [RTTI.Member(2, 0x8)] public EShaderVariableType VariableType;
        [RTTI.Member(3, 0x10)] public uint32 VariableData0;
        [RTTI.Member(4, 0x14)] public uint32 VariableData1;
        [RTTI.Member(5, 0x18)] public uint32 VariableData2;
        [RTTI.Member(6, 0x1C)] public uint32 VariableData3;
    }

    [RTTI.Serializable(0xF785F8F8F2AC45B6)]
    public class ShaderVariableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x91E9203115FFA9C7)]
    public class ShaderVariableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x9083B428DCA2DB47)]
    public class ShaderVariableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> GraphProgram;
    }

    [RTTI.Serializable(0xBD7C8C7CCC247272)]
    public class ShakeResource : Resource
    {
        [RTTI.Member(0, 0x38, "General")] public float Duration;
        [RTTI.Member(1, 0x3C, "General")] public bool LoopingMode;
        [RTTI.Member(2, 0x40, "General")] public ELocationType LocationType;
        [RTTI.Member(3, 0x44, "General")] public float MinDistance;
        [RTTI.Member(4, 0x48, "General")] public float MaxDistance;
        [RTTI.Member(5, 0x50, "General")] public Ref<CurveResource> DistanceIntensityCurve;
        [RTTI.Member(6, 0x58, "General")] public Ref<CurveResource> DirectionDotProductIntensityCurve;
        [RTTI.Member(7, 0x60, "General")] public Ref<CurveResource> LifetimeIntensityCurve;
        [RTTI.Member(8, 0x68, "General")] public float PositionMultiplier;
        [RTTI.Member(9, 0x6C, "General")] public float AngularMultiplier;
        [RTTI.Member(10, 0x70, "General")] public float TimeMultiplier;
        [RTTI.Member(11, 0x78, "General")] public Array<Ref<ObjectAttributeAnimatorResource>> Animators;
    }

    [RTTI.Serializable(0xA90726A941372A93)]
    public class Shape2D
    {
        [RTTI.Member(0, 0x0, "General")] public Array<Vec2Pack> Points;
    }

    [RTTI.Serializable(0x7766D39511088450)]
    public class Shape2DExtrusion : Shape2D
    {
        [RTTI.Member(0, 0x30, "General")] public float Height;
    }

    [RTTI.Serializable(0x40EDC9A08B3535DC)]
    public class SharedObjectiveSystem : CoreObject
    {
    }

    [RTTI.Serializable(0xC1F27DF70D3151FC)]
    public class SharedPositionLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x2D9EF04FE8009F85)]
    public class SharedPositionLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<SharedPositionVariable> Variable;
    }

    [RTTI.Serializable(0x70F4B4C2F50559A3)]
    public class SharedPositionVariable : Resource
    {
        [RTTI.Member(0, 0x28)] public WorldTransform WorldMatrix;
        [RTTI.Member(1, 0x68)] public bool RelativeToSequence;
    }

    [RTTI.Serializable(0x232AFE8457D7C4DC)]
    public class ShieldComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x43B6314B511706E4)]
    public class ShieldComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "HealthSettings")] public float Health;
        [RTTI.Member(1, 0x2C, "HealthSettings")] public float VeryEasyHealthModifier;
        [RTTI.Member(2, 0x30, "HealthSettings")] public float EasyHealthModifier;
        [RTTI.Member(3, 0x34, "HealthSettings")] public float MediumHealthModifier;
        [RTTI.Member(4, 0x38, "HealthSettings")] public float HardHealthModifier;
        [RTTI.Member(5, 0x3C, "HealthSettings")] public float VeryHardHealthModifier;
        [RTTI.Member(6, 0x40, "HealthSettings")] public float ImpossibleHealthModifier;
        [RTTI.Member(7, 0x44, "HealthRegenerationSettings")] public float Delay;
        [RTTI.Member(8, 0x48, "HealthRegenerationSettings")] public float Speed;
        [RTTI.Member(9, 0x4C, "HealthRegenerationSettings")] public float MaxSpeed;
        [RTTI.Member(10, 0x50, "HealthRegenerationSettings")] public float Acceleration;
        [RTTI.Member(11, 0x54, "DamageSettings")] public float SeverityFactor;
        [RTTI.Member(12, 0x58, "DepletionSettings")] public bool RemoveOnDepletion;
        [RTTI.Member(13, 0x5C, "DepletionSettings")] public float DepletionCooldownDuration;
        [RTTI.Member(14, 0x60, "DamageSettings")] public Ref<DamageTypeGroup> ReactOnDamageTypeGroup;
        [RTTI.Member(15, 0x68, "DamageSettings")] public Array<Ref<DamageTypeResource>> ExcludedDamageTypes;
        [RTTI.Member(16, 0x78, "DamageSettings")] public Array<DamageTypeMultiplier> DamageTypeMultipliers;
        [RTTI.Member(17, 0x88, "DamageSettings")] public Array<Ref<AttackEventTag>> DamageOnDepletionAttackEventTags;
        [RTTI.Member(18, 0x98, "ShaderSettings")] public String EnabledShaderVariableName;
        [RTTI.Member(19, 0xA0, "ShaderSettings")] public String HealthFactorShaderVariableName;
        [RTTI.Member(20, 0xA8, "ShaderSettings")] public String CooldownFactorShaderVariableName;
        [RTTI.Member(21, 0xB0, "Facts")] public Ref<BooleanFact> ActiveFact;
        [RTTI.Member(22, 0xB8, "Private")] public Ref<FloatFact> HealthFact;
        [RTTI.Member(23, 0xC0, "Private")] public Ref<IntegerFact> DisabledGameTimeFact;
        [RTTI.Member(24, 0xC8, "Private")] public Ref<IntegerFact> LastDamageGameTimeFact;
        [RTTI.Member(25, 0xD0, "Private")] public Ref<FloatFact> RegenerationSpeedFact;
        [RTTI.Member(26, 0xD8, "Private")] public Ref<IntegerFact> LastRegenerationGameTimeFact;
    }

    [RTTI.Serializable(0x803FA437F1A8FD76)]
    public class ShotGunEjector : BulletEjector
    {
    }

    [RTTI.Serializable(0x7E476E0505FA36EF)]
    public class ShotGunEjectorResource : BulletEjectorResource
    {
        [RTTI.Member(0, 0x2E0, "Accuracy")] public int NumberOfPellets;
        [RTTI.Member(1, 0x2E4, "Accuracy")] public float HorizontalPelletSpread;
        [RTTI.Member(2, 0x2E8, "Accuracy")] public float VerticalPelletSpread;
        [RTTI.Member(3, 0x2F0, "Accuracy")] public Ref<CurveResource> SpreadCurve;
        [RTTI.Member(4, 0x2F8, "Accuracy")] public bool OnlyDamageOncePerBurst;
        [RTTI.Member(5, 0x2FA, "VisualEffects")] public MaterialType AlternateBulletMaterialType;
        [RTTI.Member(6, 0x2FC, "VisualEffects")] public int AlternateBulletMaterialTypeCount;
    }

    [RTTI.Serializable(0x3BC837314311BFE8)]
    public class ShowHUDAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<HUDElementResource> HUDElementResource;
    }

    [RTTI.Serializable(0xFDE0FF0894BFCBEA)]
    public class ShowHUDOverlayEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD7FC6E0D0A404B50)]
    public class ShowHUDOverlayEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String HUDElement;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<UITexture> UITexture;
    }

    [RTTI.Serializable(0x9E40E3C45DBB43B2)]
    public class SignalGrenade : Throwable
    {
    }

    [RTTI.Serializable(0xF4EAB698FD1C6452)]
    public class SignalGrenadeResource : ThrowableResource
    {
        [RTTI.Member(0, 0x210, "VisualEffects")] public Ref<EffectComponentResource> SmokeEffectComponent;
        [RTTI.Member(1, 0x218, "Logic")] public Ref<DamageAreaResource> DamageArea;
        [RTTI.Member(2, 0x220, "Logic")] public float DetonateTime;
        [RTTI.Member(3, 0x224, "VisualEffects")] public float SmokeTime;
        [RTTI.Member(4, 0x228, "Logic")] public String SmokeMessageId;
    }

    [RTTI.Serializable(0xE2F2F5F6416E3243)]
    public class SimpleAnimatedEntityEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x70CA02AB7F95D3F1)]
    public class SimpleAnimatedEntityEventResource : ScaleableTimedEventResource
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<SkeletonAnimationResource> AnimationResource;
        [RTTI.Member(2, 0x50, "Logic")] public ERootBoneMode RootBoneMode;
    }

    [RTTI.Serializable(0xAD3A21997D7484EF)]
    public class SimpleAnimatedKeyframe
    {
        [RTTI.Member(0, 0x0)] public int Frame;
        [RTTI.Member(1, 0x8)] public WorldTransform WorldTransform;
    }

    [RTTI.Serializable(0x4BD559772E69062A)]
    public class SimpleAnimatedLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x223AACCB41897578)]
    public class SimpleAnimatedLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> ParentLocator;
        [RTTI.Member(1, 0x40, "Logic")] public Array<SimpleAnimatedKeyframe> LocatorKeyframes;
    }

    [RTTI.Serializable(0x1386CF6249CD780E)]
    public class SimpleAnimatingSkinnedMeshInstance : SkinnedMeshInstance
    {
        [RTTI.Member(0, 0x288, "Animation")] public Ref<SkeletonAnimationResource> DefaultAnimation;
        [RTTI.Member(1, 0x2A0, "Animation")] public Ref<PoseDeformerResource> PoseDeformer;
    }

    [RTTI.Serializable(0x4A63811AE9E10A4F)]
    public class SimpleAnimationItemOverrideComponent : ItemOverrideComponent
    {
    }

    [RTTI.Serializable(0x68CA403693114837)]
    public class SimpleAnimationItemOverrideComponentResource : ItemOverrideComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String AnimationControlParameter;
        [RTTI.Member(1, 0x30, "Logic")] public String AbortAnimationControlParameter;
        [RTTI.Member(2, 0x38, "Logic")] public String AnimationTag;
        [RTTI.Member(3, 0x40, "Logic")] public String ItemIDAnimationVariableName;
        [RTTI.Member(4, 0x48, "Logic")] public bool ReplicateControlParameterToChildAnimationNetwork;
        [RTTI.Member(5, 0x49, "Logic")] public bool FullOverride;
        [RTTI.Member(6, 0x4A, "Logic")] public bool ImmediateOverride;
    }

    [RTTI.Serializable(0xA20D9FF62C31688)]
    public class SimpleGeneratedMesh : GeometryObject
    {
    }

    [RTTI.Serializable(0x40AB964F45509C64)]
    public class SimpleParticleSystem : CoreObject
    {
    }

    [RTTI.Serializable(0xA2AB0D16DE1CFE77)]
    public class SimpleParticleSystemResource : Resource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Vec3 SpawnOffset;
        [RTTI.Member(1, 0x40, "Logic")] public float ParticlesPerSecond;
        [RTTI.Member(2, 0x44, "Logic")] public float ParticleRadius;
        [RTTI.Member(3, 0x48, "Logic")] public float CoreCollisionRadius;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<CurveResource> ParticleGrowthCurve;
        [RTTI.Member(5, 0x58, "Logic")] public float LifeTime;
        [RTTI.Member(6, 0x5C, "Logic")] public float LifeTimeAfterCollision;
        [RTTI.Member(7, 0x60, "Logic")] public float ExitVelocity;
        [RTTI.Member(8, 0x64, "Logic")] public float ParticleSpread;
        [RTTI.Member(9, 0x68, "Logic")] public float GravityInfluence;
    }

    [RTTI.Serializable(0x1B826F7B7191530C)]
    public class SimplePathMover : Mover
    {
    }

    [RTTI.Serializable(0x62200A3EB3C5D482)]
    public class SimplePathMoverResource : MoverResource
    {
    }

    [RTTI.Serializable(0xF339FECBEE432A7E)]
    public class SimplePolygon
    {
        [RTTI.Member(0, 0x8)] public Array<Vec3Pack> Points;
    }

    [RTTI.Serializable(0x180CEF29ED81C7E5)]
    public class SimpleSoundInstance : SoundInstance
    {
    }

    [RTTI.Serializable(0x1207AD12ADF8E7ED)]
    public class SimpleSoundResource : SoundResource
    {
        [RTTI.Member(0, 0xF0, "Sound")] public Ref<WaveResource> Wave;
        [RTTI.Member(1, 0xF8, "Sound")] public bool ProximityRadio;
        [RTTI.Member(2, 0xF9, "Sound")] public bool ShouldAlsoPanToCenter;
    }

    [RTTI.Serializable(0xF071DFC11C33E1F0)]
    public class SimpleStatModifierResource : StatModifierResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EModifiableStat ModifiedStat;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<CurveResource> RatingToValue;
    }

    [RTTI.Serializable(0xB7289D0B501DEF01)]
    public class Skeleton : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Joint> Joints;
        [RTTI.Member(1, 0x38, "General")] public HashMap<String_int> JointNameToIndexMap;
        [RTTI.Member(2, 0x48, "General")] public Array<SkeletonAnimChannel> AnimationChannels;
        [RTTI.Member(3, 0x58, "General")] public HashMap<String_int> AnimChannelNameToHandleMap;
        [RTTI.Member(4, 0x68, "General")] public uint32 SkeletonLayoutHash;
        [RTTI.Member(5, 0x6C, "General")] public uint32 SkeletonChannelLayoutHash;
        [RTTI.Member(6, 0x70, "General")] public Array<uint8> EdgeAnimSkeleton;
    }

    [RTTI.Serializable(0xA1AE45EB04AFF5FE)]
    public class SkeletonAnimChannel
    {
        [RTTI.Member(0, 0x0)] public String AnimChannelName;
    }

    [RTTI.Serializable(0x83C802AE207FAC4B)]
    public class SkeletonAnimationResource : ResourceWithoutLegacyName
    {
        [RTTI.Member(0, 0x30, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(1, 0x38, "General")] public Array<uint8> EdgeAnimAnimation;
        [RTTI.Member(2, 0x48, "General")] public float Duration;
        [RTTI.Member(3, 0x4C, "Animation")] public ELoopMode LoopMode;
    }

    [RTTI.Serializable(0x5783A47975078DCB)]
    public class SkeletonHelpers : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<OrientationHelper> Helpers;
        [RTTI.Member(1, 0x38)] public Array<uint> NameHashes;
        [RTTI.Member(2, 0x48, true)] public Array<Ref<SkeletonHelpers>> ReferencedHelpers;
    }

    [RTTI.Serializable(0xC388D632C2C36510)]
    public class SkeletonHelpersComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF87F289C0B963979)]
    public class SkeletonHelpersComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x2D348E881626DA9C)]
    public class SkeletonHelpersComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String LocationProviderID;
        [RTTI.Member(1, 0x30, "Logic")] public bool MustHaveModel;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(3, 0x40, "Logic")] public Array<Ref<SkeletonHelpers>> Helpers;
    }

    [RTTI.Serializable(0xA17A6430CA0883AF)]
    public class SkeletonTargetDesc
    {
        [RTTI.Member(0, 0x0)] public String TargetName;
        [RTTI.Member(1, 0x8)] public Ref<Skeleton> Skeleton;
    }

    [RTTI.Serializable(0x3711AB01A537FD08)]
    public class SkeletonTargetLink
    {
        [RTTI.Member(0, 0x0)] public SkeletonTargetDesc Target;
        [RTTI.Member(1, 0x10)] public String ParentTarget;
        [RTTI.Member(2, 0x18)] public String ParentLink;
    }

    [RTTI.Serializable(0x42CE14CBA473D76E)]
    public class SkeletonTargetTree : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x28)] public Array<SkeletonTargetLink> Tree;
    }

    [RTTI.Serializable(0x172934AD09285313)]
    public class SkinMaterial
    {
        [RTTI.Member(0, 0x0)] public FRGBColor TranslucencyColor;
        [RTTI.Member(1, 0xC)] public float ForwardSpecularWeight;
        [RTTI.Member(2, 0x10)] public float CubemapRoughnessMultiplier;
    }

    [RTTI.Serializable(0x34C9A16E39BAE01F)]
    public class SkinnableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6CD9BA7393C20E4F)]
    public class SkinnableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xE3260286A5C95732)]
    public class SkinnableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String TextureBindingName;
    }

    [RTTI.Serializable(0x33885CF170B7D2C)]
    public class SkinnedMeshBoneBindings : BaseResource
    {
        [RTTI.Member(0, 0x20)] public Array<String> BoneNames;
        [RTTI.Member(1, 0x30)] public Array<uint16> JointIndexList;
        [RTTI.Member(2, 0x40)] public Array<Mat44> InverseBindMatrices;
        [RTTI.Member(3, 0x50)] public MurmurHashValue DataHash;
    }

    [RTTI.Serializable(0x13C80F973C99A5E2)]
    public class SkinnedMeshBoneBoundingBoxes : BaseResource
    {
        [RTTI.Member(0, 0x20)] public Array<BoundingBox3> BoneBoundingBoxes;
        [RTTI.Member(1, 0x30)] public Array<uint16> Indices;
        [RTTI.Member(2, 0x40)] public bool UsesIndices;
        [RTTI.Member(3, 0x41)] public bool Initialized;
    }

    [RTTI.Serializable(0x88BB43B0CFD14FA2)]
    public class SkinnedMeshInstance : GeometryObject
    {
        [RTTI.Member(0, 0xC0, "General")] public String Name;
        [RTTI.Member(1, 0xC8, "General")] public Ref<MeshResourceBase> Resource;
    }

    [RTTI.Serializable(0xA5B5C4D610891564)]
    public class SkinnedMeshResource : MeshResourceBase
    {
        [RTTI.Member(0, 0x80, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(1, 0x88, "General")] public Ref<SkeletonHelpers> OrientationHelpers;
    }

    [RTTI.Serializable(0xA89315959DF4E322)]
    public class SkinnedModel : Model
    {
    }

    [RTTI.Serializable(0x6DD45001EE9528D0)]
    public class SkinnedModelLOD
    {
        [RTTI.Member(0, 0x0)] public float Distance;
        [RTTI.Member(1, 0x4)] public bool DisableHipsIK;
        [RTTI.Member(2, 0x5)] public bool DisableTerrainPredictionFootIK;
        [RTTI.Member(3, 0x6)] public bool DisableHeadIK;
        [RTTI.Member(4, 0x7)] public bool DisablePoseDeformer;
        [RTTI.Member(5, 0x8)] public bool DisableForceFields;
        [RTTI.Member(6, 0x9)] public bool LowDetailTerrainDetection;
        [RTTI.Member(7, 0xA)] public bool DisableAnimationManagerOnExternalAnimation;
    }

    [RTTI.Serializable(0xBB3F2CCF38951A72)]
    public class SkinnedModelPBDTeleportSettings
    {
        [RTTI.Member(0, 0x0)] public String JointName;
        [RTTI.Member(1, 0x8)] public float MaxPositionDelta;
    }

    [RTTI.Serializable(0xACAF13FFAD18AF5F)]
    public class SkinnedModelRep : ModelRep
    {
    }

    [RTTI.Serializable(0x8D5A13C6B1CD1C2E)]
    public class SkinnedModelResource : ModelResource
    {
        [RTTI.Member(0, 0x60, "General")] public Ref<Skeleton> Skeleton;
        [RTTI.Member(1, 0x68, "General")] public Array<SkinnedModelLOD> LODs;
        [RTTI.Member(2, 0x78, "General")] public bool DisableCollision;
        [RTTI.Member(3, 0x79, "General")] public bool UpdateEntityWhilePlayingAnimation;
        [RTTI.Member(4, 0x80, "General")] public Ref<AbilityAnimationResource> AbilityAnimationResource;
        [RTTI.Member(5, 0x88, "General")] public Ref<AbilitySimpleAnimationResource> AbilitySimpleAnimation;
        [RTTI.Member(6, 0x90, "General")] public Array<Ref<AbilityResource>> AbilityResources;
        [RTTI.Member(7, 0xA0, "General")] public Pose InitialPose;
        [RTTI.Member(8, 0x100, "General")] public BoundingBox3 InitialPoseBounds;
        [RTTI.Member(9, 0x120, "General")] public Ref<Skeleton> InitialRepresentationSkeleton;
        [RTTI.Member(10, 0x128, "General")] public Array<SkinnedModelPBDTeleportSettings> PBDTeleportSettings;
        [RTTI.Member(11, 0x138, "General")] public Ref<MotionTableResource> MotionTableResource;
    }

    [RTTI.Serializable(0x4599C370ADA6912F)]
    public class SkinnedPoint
    {
        [RTTI.Member(0, 0x0)] public Vec3 Point;
        [RTTI.Member(1, 0x10)] public int UserIndex;
        [RTTI.Member(2, 0x14)] public float Weight0;
        [RTTI.Member(3, 0x18)] public float Weight1;
        [RTTI.Member(4, 0x1C)] public float Weight2;
        [RTTI.Member(5, 0x20)] public uint16 BoneIndex0;
        [RTTI.Member(6, 0x22)] public uint16 BoneIndex1;
        [RTTI.Member(7, 0x24)] public uint16 BoneIndex2;
    }

    [RTTI.Serializable(0xC148CE5C19C0C2F8)]
    public class SkinnedPointsResource : BaseResource
    {
        [RTTI.Member(0, 0x20)] public Array<SkinnedPoint> Points;
        [RTTI.Member(1, 0x30)] public Ref<Skeleton> Skeleton;
    }

    [RTTI.Serializable(0xAC50D295F91EC15)]
    public class SkipSequenceEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x23608681E8E8C9C1)]
    public class SkipSequenceEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public ESkipBehavior SkipBehavior;
        [RTTI.Member(1, 0x3C, "Logic")] public bool SkipConfirmationRequired;
    }

    [RTTI.Serializable(0x53713C114170D776)]
    public class SlideThroughWorldMover : Mover
    {
    }

    [RTTI.Serializable(0x5278D262ABB9BFAE)]
    public class SlideThroughWorldMoverJoystickControllerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFA1BF0CA107E7D0C)]
    public class SlideThroughWorldMoverJoystickControllerComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MaxSpeed;
        [RTTI.Member(1, 0x2C, "Logic")] public int SpeedSteps;
        [RTTI.Member(2, 0x30, "Logic")] public bool AllowPreviousEntityControl;
    }

    [RTTI.Serializable(0x1AB4A8B035EB9E55)]
    public class SlideThroughWorldMoverResource : MoverResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public float MaxSlopeAngle;
        [RTTI.Member(1, 0x34, "Logic")] public float MaxStepHeight;
        [RTTI.Member(2, 0x38, "Logic")] public float Gravity;
        [RTTI.Member(3, 0x40, "Logic")] public Vec3 JumpVelocity;
        [RTTI.Member(4, 0x50, "Logic")] public bool KeepOrientationWhenJumping;
    }

    [RTTI.Serializable(0x7404F6379D2D863C)]
    public class SliderTag : VisualTag
    {
    }

    [RTTI.Serializable(0xF0CF4AF6124F74D5)]
    public class SliderWidget : Widget
    {
    }

    [RTTI.Serializable(0x9B38D7454331E2F0)]
    public class SlowMotionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6155F8F3D7F1582C)]
    public class SlowMotionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> UpdateGraph;
    }

    [RTTI.Serializable(0xD5720F165D74D511)]
    public class SlowMotionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xEBC4083B0D246F0E)]
    public class SlowMotionEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public float TimeScale;
        [RTTI.Member(1, 0x3C, "Logic")] public float CameraTimeScale;
        [RTTI.Member(2, 0x40, "Logic")] public float BlendInTransitionTime;
        [RTTI.Member(3, 0x44, "Logic")] public float BlendOutTransitionTime;
    }

    [RTTI.Serializable(0x7CB9157A72A4C880)]
    public class SlowMotionSettingResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float TimeScale;
        [RTTI.Member(1, 0x2C, "Logic")] public float CameraTimeScale;
        [RTTI.Member(2, 0x30, "Logic")] public float BlendInTime;
        [RTTI.Member(3, 0x34, "Logic")] public float BlendOutTime;
    }

    [RTTI.Serializable(0xE5A329BCE88C913E)]
    public class SmartObjectArea : NavMeshArea
    {
        [RTTI.Member(0, 0x90)] public Ref<AIMarker> CenterMarker;
        [RTTI.Member(1, 0x98, "Audio")] public Ref<GraphSoundResource> AreaSound;
        [RTTI.Member(2, 0xA0, "Audio")] public Vec3 SoundOffset;
        [RTTI.Member(3, 0xB0, "Audio")] public SoundShape SoundShape;
    }

    [RTTI.Serializable(0x8941B1CE9D26EEF1)]
    public class SmartObjectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFD236DAB1C71060A)]
    public class SmartObjectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Radius;
        [RTTI.Member(1, 0x30, "Logic")] public Array<CPtr<SmartObjectDesireInfluence>> DesireInfluences;
        [RTTI.Member(2, 0x40, "Logic")] public float UseTime;
        [RTTI.Member(3, 0x44, "Logic")] public float CooldownTime;
        [RTTI.Member(4, 0x48, "Logic")] public TagPropertyLinkCollection RequiredTags;
        [RTTI.Member(5, 0x60, "Logic")] public TagPropertyLinkCollection DisallowedTags;
    }

    [RTTI.Serializable(0xFADE3EE0217861CB)]
    public class SmartObjectDesire : Resource
    {
        [RTTI.Member(0, 0x28)] public bool IsInvisibleActivity;
    }

    [RTTI.Serializable(0x2E4EC7A7A1F804C4)]
    public class SmartObjectDesireComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDB794E6EA5E3FEED)]
    public class SmartObjectDesireComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<SmartObjectDesireSetting> Desires;
    }

    [RTTI.Serializable(0xEF5A2BE94A79CAAC)]
    public class SmartObjectDesireInfluence : CoreObject
    {
        [RTTI.Member(0, 0x20, "Logic")] public Ref<SmartObjectDesire> Desire;
        [RTTI.Member(1, 0x28, "Logic")] public float InfluenceValue;
        [RTTI.Member(2, 0x2C, "Logic")] public bool IsSideDesire;
    }

    [RTTI.Serializable(0x2FBDBDDE4129A94E)]
    public class SmartObjectDesireSetting
    {
        [RTTI.Member(0, 0x0)] public Ref<SmartObjectDesire> Desire;
        [RTTI.Member(1, 0x10)] public float TimeUntilDesired;
        [RTTI.Member(2, 0x14)] public bool RemoveAfterSatisfaction;
    }

    [RTTI.Serializable(0x7BE10575B07805A5)]
    public class SmartObjectQueueComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5633F93AEA2B361B)]
    public class SmartObjectQueueComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xC9460BB4964EAFB9)]
    public class SmartObjectTimedInteractionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8F28B8DC21BCDAF2)]
    public class SmartObjectTimedInteractionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float AnimationDuration;
    }

    [RTTI.Serializable(0x686BBF10840E0FD7)]
    public class SmartObjectUsageArbiterComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5A3E2E35C8A1EE47)]
    public class SmartObjectUsageArbiterComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float ReserveTime;
    }

    [RTTI.Serializable(0x2AB590ED366CCD61)]
    public class SmoothAimLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0xD0531D7113C06228)]
    public class SmoothAimLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> AimTargetLocator;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<LocatorResource> PositionLocator;
        [RTTI.Member(2, 0x50, "Logic")] public FRect HardLimits;
        [RTTI.Member(3, 0x60, "Logic")] public FRect SoftLimits;
        [RTTI.Member(4, 0x70, "Logic")] public IRange MinMaxDelayFrames;
        [RTTI.Member(5, 0x78, "Logic")] public float SoftLimitsCompensationFactorMax;
        [RTTI.Member(6, 0x7C, "Logic")] public float SoftLimitsCompensationFactorIncrement;
    }

    [RTTI.Serializable(0x661A6B4EF0A78175)]
    public class SmoothedSoundState
    {
    }

    [RTTI.Serializable(0x149EFD3B367C406)]
    public class SnowClearEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xC519FE5A370D92F5)]
    public class SnowClearEventResource : TimedEventResource
    {
    }

    [RTTI.Serializable(0xE3A2BCFD6A3FD42B)]
    public class SnowDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD51BEDBA0F9FED6A)]
    public class SnowDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Animation")] public String SnowDepthAnimationVariableName;
        [RTTI.Member(1, 0x30, "Animation")] public float MaxValidBelowTerrainSampleDistance;
    }

    [RTTI.Serializable(0xBEBD64E47EAFEECA)]
    public class SnowInteractionDisablerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6D612E5CF6FBE2D2)]
    public class SnowInteractionDisablerComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB264A8512D8FC807)]
    public class SnowInteractionDisablerComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xE9AF609E8318BB0A)]
    public class SnowInteractionPositionEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xD84399F09FD8D4AB)]
    public class SnowInteractionPositionEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "General")] public Ref<LocatorResource> OverridePosition;
    }

    [RTTI.Serializable(0x58A3A8ACE5F5DF4)]
    public class SnowInteractionSettings : CoreObject
    {
        [RTTI.Member(0, 0x20, "Deformation")] public float MaxSnowDepth;
        [RTTI.Member(1, 0x24, "Filtering")] public float TemporalFilterFactor;
        [RTTI.Member(2, 0x28, "Precipitation")] public float SnowRefill;
        [RTTI.Member(3, 0x2C, "Deformation")] public int WorldSize;
        [RTTI.Member(4, 0x30, "Interaction", true)] public float LodDistance;
        [RTTI.Member(5, 0x34, "Interaction")] public float InteractionAreaFactor;
        [RTTI.Member(6, 0x38, "Interaction")] public int MaxNumObjects;
        [RTTI.Member(7, 0x3C, "Deformation", true)] public int DeformationTextureResolution;
        [RTTI.Member(8, 0x40, "Interaction", true)] public int InteractionTextureResolution;
        [RTTI.Member(9, 0x44, "Interaction")] public float PixelJitterFactor;
        [RTTI.Member(10, 0x48, "Interaction")] public float NonUniformExponent;
        [RTTI.Member(11, 0x50, "Interaction")] public Array<ActiveSnowInteractionRegion> ActiveWorldRegions;
    }

    [RTTI.Serializable(0x645E95E67F9FB99D)]
    public class SocketedModificationItemRestoreState : RTTIObject
    {
        [RTTI.Member(0, 0x28, "StateSaving", true)] public StreamingRef<EntityResource> ItemResource;
        [RTTI.Member(1, 0x48, "StateSaving", true)] public Array<StatModification> Modifications;
    }

    [RTTI.Serializable(0xFAD61D654F166B52)]
    public class Soldier : Humanoid
    {
    }

    [RTTI.Serializable(0x99B2E6C77557257A)]
    public class SoldierAIController : SoldierController
    {
    }

    [RTTI.Serializable(0xA112D232C9E9C94F)]
    public class SoldierController : HumanoidController
    {
    }

    [RTTI.Serializable(0x2715C1FBDA57F254)]
    public class SoldierJoystickController : SoldierController
    {
    }

    [RTTI.Serializable(0xB2936603BE33B0E0)]
    public class SoldierRep : HumanoidRep
    {
    }

    [RTTI.Serializable(0xCB23C23725A6DAFB)]
    public class SoldierResource : HumanoidResource
    {
        [RTTI.Member(0, 0x650, "Logic")] public Ref<InventoryReviveAbilityResource> AutoReviveResource;
        [RTTI.Member(1, 0x658, "Player")] public float MinHealthAfterRespawn;
        [RTTI.Member(2, 0x660, "Logic")] public Ref<CurveResource> LookAtSpeedCurveResource;
        [RTTI.Member(3, 0x668, "Logic")] public float LookAtSpeedFallOffAngle;
        [RTTI.Member(4, 0x66C, "Logic")] public float LookAtJoystickResistanceThreshold;
        [RTTI.Member(5, 0x670, "Representation")] public Ref<SoundResource> HealthLowSound;
        [RTTI.Member(6, 0x678, "Representation")] public float HealthSoundTriggerValue;
        [RTTI.Member(7, 0x680, "Representation")] public Ref<FirstPersonHitEffectsResource> FirstPersonBulletWhizzEffects;
        [RTTI.Member(8, 0x688, "Logic")] public Ref<JoystickInputModifierResource> JoystickInputModifierResource;
        [RTTI.Member(9, 0x690, "Player")] public float GunLowerDistance;
        [RTTI.Member(10, 0x698, "Representation")] public Ref<AnimatedScreenEffectResource> FlashScreenEffectResource;
        [RTTI.Member(11, 0x6A0, "Representation")] public HUDEffectSettings SprintEffect;
        [RTTI.Member(12, 0x6C0, "Logic")] public float SpawnInvulnerabilityTime;
    }

    [RTTI.Serializable(0x8B52EC195CECCFC4)]
    public class SoldierSpawnInfo : HumanoidSpawnInfo
    {
    }

    [RTTI.Serializable(0x2FAEFBCD7C0E951B)]
    public class SonicStunComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE12C5E7EEC14CE2E)]
    public class SonicStunComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x96219C9336E3988C)]
    public class SonicStunComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public MaterialType MaterialType;
        [RTTI.Member(1, 0x2C, "Logic")] public float StartRadius;
        [RTTI.Member(2, 0x30, "Logic")] public float ConeAngle;
        [RTTI.Member(3, 0x38, "Logic")] public Array<Ref<DamageSettings>> DamageSettings;
    }

    [RTTI.Serializable(0xE27729D271FFEC58)]
    public class SortedEvent : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int GroupIndex;
        [RTTI.Member(1, 0x2C)] public bool Participate;
        [RTTI.Member(2, 0x30)] public Ref<EventResource> EventResource;
        [RTTI.Member(3, 0x38)] public GGUUID OriginalUUID;
        [RTTI.Member(4, 0x48)] public Array<CPtr<SortedEvent>> DependentOn;
        [RTTI.Member(5, 0x58)] public Array<CPtr<SortedEvent>> DependentBy;
        [RTTI.Member(6, 0x68)] public Array<CPtr<SortedEvent>> DependentByHideEvents;
    }

    [RTTI.Serializable(0x58333E1A58CC01A)]
    public class SoundComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF2437FBC297E0DCA)]
    public class SoundComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xF4E500182CA939FD)]
    public class SoundComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Array<SoundParameterPODVariant> ConstantSoundParameters;
        [RTTI.Member(1, 0x38)] public Array<SoundParameterPODVariant> ImpactSoundParameters;
    }

    [RTTI.Serializable(0x4346DF5BB1950013)]
    public class SoundEnvironment : WorldEnvironment
    {
        [RTTI.Member(0, 0x40)] public Array<Ref<EnvironmentSound>> Sounds;
        [RTTI.Member(1, 0x50)] public float SoundSpawnThreshold;
        [RTTI.Member(2, 0x54)] public float SoundSpawnInterval;
        [RTTI.Member(3, 0x58)] public float SoundSpawnCountFactor;
        [RTTI.Member(4, 0x5C)] public float MaxSoundsPerSpawnPoint;
        [RTTI.Member(5, 0x60)] public Ref<GraphProgramResource> SoundSpawnLogic;
        [RTTI.Member(6, 0x68)] public Array<IRange> SpawnPointRange;
    }

    [RTTI.Serializable(0xAB9F379E932DCBAE)]
    public class SoundEventInstance : AudioEventInstance
    {
    }

    [RTTI.Serializable(0x10D7713CF573FD50)]
    public class SoundEventResource : AudioEventResource
    {
        [RTTI.Member(0, 0x58, "Logic")] public Ref<SoundResource> SoundResource;
    }

    [RTTI.Serializable(0xA272CC76032E44E9)]
    public class SoundFilterParameters
    {
    }

    [RTTI.Serializable(0xA9B57066F3030739)]
    public class SoundGroup
    {
        [RTTI.Member(0, 0x0)] public ESoundMasterVolumeGroup Group;
        [RTTI.Member(1, 0x4)] public bool PauseWhenGameIsPaused;
        [RTTI.Member(2, 0x8)] public int Priority;
        [RTTI.Member(3, 0xC)] public int InstanceLimit;
    }

    [RTTI.Serializable(0x4B411A82B8EDAA47)]
    public class SoundGroupSettingsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Groups")] public Array<SoundGroup> GroupPriorities;
    }

    [RTTI.Serializable(0x8D802DFF17C04F6A)]
    public class SoundInstance : SoundInstanceBase
    {
    }

    [RTTI.Serializable(0x2BC84AF3C51426DA)]
    public class SoundInstanceBase : WorldNode
    {
    }

    [RTTI.Serializable(0x2809551D3FAC570F)]
    public class SoundListener : WorldNode
    {
    }

    [RTTI.Serializable(0x3C4DDDA269C55302)]
    public class SoundListenerOverrideEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB43B1C00214E16DF)]
    public class SoundListenerOverrideEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> PositionLocatorResource;
    }

    [RTTI.Serializable(0x1AF2A0F37D36B193)]
    public class SoundManager : ObjectManager
    {
        [RTTI.Member(0, 0x68, "General")] public bool NoSound;
    }

    [RTTI.Serializable(0x999D64F52DC440C3)]
    public class SoundMasterBusResource : SubmixResource
    {
    }

    [RTTI.Serializable(0x910E0851ABBC4785)]
    public class SoundMasterParametersResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public bool Default;
        [RTTI.Member(1, 0x2C, "PreAmpGain")] public float PreAmpGain;
        [RTTI.Member(2, 0x30, "OutputGain")] public float Gain;
        [RTTI.Member(3, 0x34, "OutputGain")] public float OutputGain_LfeGain;
        [RTTI.Member(4, 0x38, "ParametricEq")] public ESoundFilterMode Band1Mode;
        [RTTI.Member(5, 0x3C, "ParametricEq")] public float Band1Gain;
        [RTTI.Member(6, 0x40, "ParametricEq")] public float Band1Frequency;
        [RTTI.Member(7, 0x44, "ParametricEq")] public float Band1QValue;
        [RTTI.Member(8, 0x48, "ParametricEq")] public ESoundFilterMode Band2Mode;
        [RTTI.Member(9, 0x4C, "ParametricEq")] public float Band2Gain;
        [RTTI.Member(10, 0x50, "ParametricEq")] public float Band2Frequency;
        [RTTI.Member(11, 0x54, "ParametricEq")] public float Band2QValue;
        [RTTI.Member(12, 0x58, "ParametricEq")] public ESoundFilterMode Band3Mode;
        [RTTI.Member(13, 0x5C, "ParametricEq")] public float Band3Gain;
        [RTTI.Member(14, 0x60, "ParametricEq")] public float Band3Frequency;
        [RTTI.Member(15, 0x64, "ParametricEq")] public float Band3QValue;
        [RTTI.Member(16, 0x68, "ParametricEq")] public ESoundFilterMode Band4Mode;
        [RTTI.Member(17, 0x6C, "ParametricEq")] public float Band4Gain;
        [RTTI.Member(18, 0x70, "ParametricEq")] public float Band4Frequency;
        [RTTI.Member(19, 0x74, "ParametricEq")] public float Band4QValue;
        [RTTI.Member(20, 0x78, "Compressor")] public bool Enabled;
        [RTTI.Member(21, 0x7C, "Compressor")] public float LookAheadInMs;
        [RTTI.Member(22, 0x80, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand1;
        [RTTI.Member(23, 0x88, "Compressor")] public float CrossOverFrequencyBand1Band2;
        [RTTI.Member(24, 0x90, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand2;
        [RTTI.Member(25, 0x98, "Compressor")] public float CrossOverFrequencyBand2Band3;
        [RTTI.Member(26, 0xA0, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand3;
        [RTTI.Member(27, 0xA8, "Compressor")] public float CrossOverFrequencyBand3Band4;
        [RTTI.Member(28, 0xB0, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand4;
        [RTTI.Member(29, 0xB8, "UltraMaximizer")] public bool UltraMaximizerEnabled;
        [RTTI.Member(30, 0xB9, "UltraMaximizer")] public bool UltraMaximizerAutoRelease;
        [RTTI.Member(31, 0xBC, "UltraMaximizer")] public float UltraMaximizerThresholdInDb;
        [RTTI.Member(32, 0xC0, "UltraMaximizer")] public float UltraMaximizerOutputCeilingInDb;
        [RTTI.Member(33, 0xC4, "UltraMaximizer")] public float UltraMaximizerReleaseTimeInMs;
        [RTTI.Member(34, 0xC8, "UltraMaximizer")] public float UltraMaximizerLfeThresholdInDb;
        [RTTI.Member(35, 0xCC, "UltraMaximizer")] public float UltraMaximizerLfeOutputCeilingInDb;
        [RTTI.Member(36, 0xD0, "UltraMaximizer")] public float UltraMaximizerLfeReleaseTimeInMs;
        [RTTI.Member(37, 0xD4, "Equalizer24")] public bool EqualizerEnabled;
        [RTTI.Member(38, 0xD8, "Equalizer24")] public float EqualizerGain1;
        [RTTI.Member(39, 0xDC, "Equalizer24")] public float EqualizerGain2;
        [RTTI.Member(40, 0xE0, "Equalizer24")] public float EqualizerGain3;
        [RTTI.Member(41, 0xE4, "Equalizer24")] public float EqualizerGain4;
        [RTTI.Member(42, 0xE8, "Equalizer24")] public float EqualizerGain5;
        [RTTI.Member(43, 0xEC, "Equalizer24")] public float EqualizerGain6;
        [RTTI.Member(44, 0xF0, "Equalizer24")] public float EqualizerGain7;
        [RTTI.Member(45, 0xF4, "Equalizer24")] public float EqualizerGain8;
        [RTTI.Member(46, 0xF8, "Equalizer24")] public float EqualizerGain9;
        [RTTI.Member(47, 0xFC, "Equalizer24")] public float EqualizerGain10;
        [RTTI.Member(48, 0x100, "Equalizer24")] public float EqualizerGain11;
        [RTTI.Member(49, 0x104, "Equalizer24")] public float EqualizerGain12;
        [RTTI.Member(50, 0x108, "Equalizer24")] public float EqualizerGain13;
        [RTTI.Member(51, 0x10C, "Equalizer24")] public float EqualizerGain14;
        [RTTI.Member(52, 0x110, "Equalizer24")] public float EqualizerGain15;
        [RTTI.Member(53, 0x114, "Equalizer24")] public float EqualizerGain16;
        [RTTI.Member(54, 0x118, "Equalizer24")] public float EqualizerGain17;
        [RTTI.Member(55, 0x11C, "Equalizer24")] public float EqualizerGain18;
        [RTTI.Member(56, 0x120, "Equalizer24")] public float EqualizerGain19;
        [RTTI.Member(57, 0x124, "Equalizer24")] public float EqualizerGain20;
        [RTTI.Member(58, 0x128, "Equalizer24")] public float EqualizerGain21;
        [RTTI.Member(59, 0x12C, "Equalizer24")] public float EqualizerGain22;
        [RTTI.Member(60, 0x130, "Equalizer24")] public float EqualizerGain23;
        [RTTI.Member(61, 0x134, "Equalizer24")] public float EqualizerGain24;
        [RTTI.Member(62, 0x138, "SpeakerGains")] public float CenterGain;
        [RTTI.Member(63, 0x13C, "SpeakerGains")] public float LeftFrontGain;
        [RTTI.Member(64, 0x140, "SpeakerGains")] public float LeftSurroundGain;
        [RTTI.Member(65, 0x144, "SpeakerGains")] public float LeftBackSurroundGain;
        [RTTI.Member(66, 0x148, "SpeakerGains")] public float RightBackSurroundGain;
        [RTTI.Member(67, 0x14C, "SpeakerGains")] public float RightSurroundGain;
        [RTTI.Member(68, 0x150, "SpeakerGains")] public float RightFrontGain;
        [RTTI.Member(69, 0x154, "SpeakerGains")] public float SpeakerGains_LfeGain;
    }

    [RTTI.Serializable(0x65AA7E40FA4EE5A7)]
    public class SoundMixEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x706B775A451BD826)]
    public class SoundMixEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<SoundMixResource> SoundMix;
        [RTTI.Member(1, 0x40, "Logic")] public float FadeInTime;
        [RTTI.Member(2, 0x44, "Logic")] public float FadeOutTime;
    }

    [RTTI.Serializable(0x3EAB42946C3588F3)]
    public class SoundMixFader
    {
        [RTTI.Member(0, 0x0)] public ESoundMasterVolumeGroup Group;
        [RTTI.Member(1, 0x4)] public float Gain;
    }

    [RTTI.Serializable(0x61FBC879FDB6AB66)]
    public class SoundMixResource : Resource
    {
        [RTTI.Member(0, 0x28, "Mix")] public Array<SoundMixFader> Faders;
    }

    [RTTI.Serializable(0x15A2BB7887164CCA)]
    public class SoundMixStateActivateRequest : CoreObject
    {
    }

    [RTTI.Serializable(0xF85FCA50D3CFE649)]
    public class SoundMixStateEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA9DA4CE3A3485846)]
    public class SoundMixStateEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<SoundMixStateResource> SoundMixState;
    }

    [RTTI.Serializable(0x524CE93ED8B7E592)]
    public class SoundMixStateManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x833B531A77302828)]
    public class SoundMixStateResource : Resource
    {
        [RTTI.Member(0, 0x28, "State")] public Ref<RelativeSoundMixResource> RelativeMix;
        [RTTI.Member(1, 0x30, "State")] public Array<Ref<SubmixPresetResource>> SubmixPresets;
        [RTTI.Member(2, 0x40, "State")] public float AttackTime;
    }

    [RTTI.Serializable(0x2C990B89CB43890)]
    public class SoundPadSpeakerMasterBusResource : SubmixResource
    {
    }

    [RTTI.Serializable(0xFD7FA385E6881250)]
    public class SoundPadSpeakerMasterParametersResource : Resource
    {
        [RTTI.Member(0, 0x28, "MasterGain")] public float Gain;
        [RTTI.Member(1, 0x2C, "MasterGain")] public float MixedToMainOutputGain;
        [RTTI.Member(2, 0x30, "UltraMaximizer")] public bool UltraMaximizerEnabled;
        [RTTI.Member(3, 0x31, "UltraMaximizer")] public bool UltraMaximizerAutoRelease;
        [RTTI.Member(4, 0x34, "UltraMaximizer")] public float UltraMaximizerThresholdInDb;
        [RTTI.Member(5, 0x38, "UltraMaximizer")] public float UltraMaximizerOutputCeilingInDb;
        [RTTI.Member(6, 0x3C, "UltraMaximizer")] public float UltraMaximizerReleaseTimeInMs;
    }

    [RTTI.Serializable(0x74746FE0E251B23A)]
    public class SoundParameterPODVariant
    {
        [RTTI.Member(0, 0x0)] public String SoundParameterName;
        [RTTI.Member(1, 0x8)] public PODVariant Value;
    }

    [RTTI.Serializable(0x34AAC502DC844CE0)]
    public class SoundProgramContext
    {
    }

    [RTTI.Serializable(0x37F25E537618CCA0)]
    public class SoundResource : Resource
    {
        [RTTI.Member(0, 0x38, "Sound")] public float DefaultVolume;
        [RTTI.Member(1, 0x3C, "Sound")] public float DefaultLfeVolume;
        [RTTI.Member(2, 0x40, "Sound")] public float DefaultAngle;
        [RTTI.Member(3, 0x44, "Sound")] public float DefaultFrequencyFactor;
        [RTTI.Member(4, 0x50, "Sound")] public SoundShape Shape;
        [RTTI.Member(5, 0x70, "Sound")] public float WetLevel;
        [RTTI.Member(6, 0x74, "Sound")] public float MinDist;
        [RTTI.Member(7, 0x78, "Sound")] public float PressureLevel;
        [RTTI.Member(8, 0x7C, "Sound")] public float AttenuationLinearity;
        [RTTI.Member(9, 0x80, "Sound")] public float AttenuationSlope;
        [RTTI.Member(10, 0x84, "Sound")] public ESoundMasterVolumeGroup MasterVolumeGroup;
        [RTTI.Member(11, 0x88, "Sound")] public bool DefaultLooping;
        [RTTI.Member(12, 0x89, "Sound")] public bool UsesHDRSystem;
        [RTTI.Member(13, 0x8A, "Sound")] public bool UsesRaycast;
        [RTTI.Member(14, 0x8B, "Sound")] public bool AffectedByTimeScale;
        [RTTI.Member(15, 0x8C, "Sound")] public ESoundInstanceLimitMode InstanceLimitMode;
        [RTTI.Member(16, 0x90, "Sound")] public uint8 InstanceLimit;
        [RTTI.Member(17, 0x94, "Sound")] public float InitialRMS;
        [RTTI.Member(18, 0x98, "Sound")] public float WetMinRange;
        [RTTI.Member(19, 0x9C, "Sound")] public float WetMaxRange;
        [RTTI.Member(20, 0xA0, "Sound")] public float WetLevelBias;
        [RTTI.Member(21, 0xA4, "Sound")] public float PanModificationDistance;
        [RTTI.Member(22, 0xA8, "Sound")] public float OcclusionFactor;
        [RTTI.Member(23, 0xAC, "Sound")] public float ObstructionFactor;
        [RTTI.Member(24, 0xB0, "Sound")] public float DopplerFactor;
        [RTTI.Member(25, 0xB4, "Sound")] public float MaxAzimuthDelta;
        [RTTI.Member(26, 0xE0, "Sound")] public float MaxDist;
    }

    [RTTI.Serializable(0xA133C6E1AB9B1276)]
    public class SoundShape
    {
        [RTTI.Member(0, 0x0)] public Vec3 BoxSize;
        [RTTI.Member(1, 0x0)] public float ConeInnerAngle;
        [RTTI.Member(2, 0x4)] public float ConeOuterAngle;
        [RTTI.Member(3, 0x8)] public float ConeOuterGainMultiplier;
        [RTTI.Member(4, 0xC)] public float SphereRadius;
        [RTTI.Member(5, 0x10)] public ESoundShape ShapeType;
    }

    [RTTI.Serializable(0x8A09F0848187A02B)]
    public class SoundSystem : CoreObject
    {
    }

    [RTTI.Serializable(0xFB1945F95504E245)]
    public class SoundSystemGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xA9558A0386EA2885)]
    public class SoundSystemSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public float SoundMixFadeTime;
        [RTTI.Member(1, 0x2C, "Settings")] public float ElevationFactor;
        [RTTI.Member(2, 0x30, "Settings")] public float ElevationFactorForAmbisonics;
        [RTTI.Member(3, 0x34, "Settings")] public float OcclusionVolumeFactor;
        [RTTI.Member(4, 0x38, "Settings")] public float OcclusionStrength;
        [RTTI.Member(5, 0x3C, "Settings")] public float ObstructionVolumeFactor;
        [RTTI.Member(6, 0x40, "Settings")] public float ObstructionStrength;
        [RTTI.Member(7, 0x44, "Settings")] public float SmallInstanceObstructionBoost;
        [RTTI.Member(8, 0x48, "Settings")] public float SmallInstanceObstructionBoostSlope;
        [RTTI.Member(9, 0x4C, "Settings")] public float HighpassMinCutoffFrequency;
        [RTTI.Member(10, 0x50, "Settings")] public float HighpassMaxCutoffFrequency;
        [RTTI.Member(11, 0x54, "Settings")] public float HighpassFilterQValue;
        [RTTI.Member(12, 0x58, "Settings")] public float HighpassFilterGain;
        [RTTI.Member(13, 0x5C, "Settings")] public float HighpassMinDistance;
        [RTTI.Member(14, 0x60, "Settings")] public float HighpassMaxDistance;
        [RTTI.Member(15, 0x64, "Settings")] public float DopplerFactor;
        [RTTI.Member(16, 0x68, "Settings")] public float WallProximityMaxDistance;
        [RTTI.Member(17, 0x6C, "Settings")] public float ProximityRadioActivationDistancePercent;
        [RTTI.Member(18, 0x70, "Settings")] public float ProximityRadioActivationFadeTime;
        [RTTI.Member(19, 0x74, "Settings")] public float RadioFilterCenterFrequency;
        [RTTI.Member(20, 0x78, "Settings")] public float RadioFilterBandwidth;
        [RTTI.Member(21, 0x7C, "Settings")] public float RadioDistortionDrive;
        [RTTI.Member(22, 0x80, "Settings")] public float MasterVolumeSFX;
        [RTTI.Member(23, 0x84, "Settings")] public float MasterVolumeMusic;
        [RTTI.Member(24, 0x88, "Settings")] public float MasterVolumeSpeech;
        [RTTI.Member(25, 0x8C, "Settings")] public float MasterVolumeFMV;
        [RTTI.Member(26, 0x90, "Settings")] public float HDRWindowRange;
        [RTTI.Member(27, 0x94, "Settings")] public float HDRWindowCompressor;
        [RTTI.Member(28, 0x98, "Settings")] public float HDRWindowAttackTime;
        [RTTI.Member(29, 0x9C, "Settings")] public float HDRWindowReleaseTime;
        [RTTI.Member(30, 0xA0, "Settings")] public float HDRSoundLowRMSThreshold;
        [RTTI.Member(31, 0xA4, "Settings")] public int AudibleSoundInstanceLimit;
        [RTTI.Member(32, 0xA8, "Settings")] public int DynamicAudibleInstanceLimitMin;
        [RTTI.Member(33, 0xAC, "Settings")] public float MaxDynamicBrbLoad;
        [RTTI.Member(34, 0xB0, "Settings")] public float MinimumAmbientFadeTime;
        [RTTI.Member(35, 0xB4, "Settings")] public float DefaultAmbientFadeTime;
        [RTTI.Member(36, 0xB8, "SpeakerAngles")] public int FrontLeftSpeakerAngle;
        [RTTI.Member(37, 0xBC, "SpeakerAngles")] public int FrontRightSpeakerAngle;
        [RTTI.Member(38, 0xC8, "SpeakerAngles")] public int SideLeftSpeakerAngle;
        [RTTI.Member(39, 0xCC, "SpeakerAngles")] public int SideRightSpeakerAngle;
        [RTTI.Member(40, 0xD0, "SpeakerAngles")] public int BackLeftSpeakerAngle;
        [RTTI.Member(41, 0xD4, "SpeakerAngles")] public int BackRightSpeakerAngle;
        [RTTI.Member(42, 0xD8, "Settings")] public float DialogReverbOutputGain;
        [RTTI.Member(43, 0xDC, "Settings")] public float DialogReverbSendGain;
        [RTTI.Member(44, 0xE0, "Settings")] public Ref<ReverbPresetResource> DialogReverbDefaultPreset;
        [RTTI.Member(45, 0xE8, "OcclusionFilter")] public float OcclusionFilter_MinFrequency;
        [RTTI.Member(46, 0xEC, "OcclusionFilter")] public float OcclusionFilter_MaxFrequency;
        [RTTI.Member(47, 0xF0, "OcclusionFilter")] public float OcclusionFilter_MinGain;
        [RTTI.Member(48, 0xF4, "OcclusionFilter")] public float OcclusionFilter_MaxGain;
        [RTTI.Member(49, 0xF8, "OcclusionFilter")] public float OcclusionFilter_Slope;
        [RTTI.Member(50, 0xFC, "ObstructionFilter")] public float ObstructionFilter_MinFrequency;
        [RTTI.Member(51, 0x100, "ObstructionFilter")] public float ObstructionFilter_MaxFrequency;
        [RTTI.Member(52, 0x104, "ObstructionFilter")] public float ObstructionFilter_MinGain;
        [RTTI.Member(53, 0x108, "ObstructionFilter")] public float ObstructionFilter_MaxGain;
        [RTTI.Member(54, 0x10C, "ObstructionFilter")] public float ObstructionFilter_Slope;
    }

    [RTTI.Serializable(0xE82650396659496B)]
    public class SoundZoneDeactivationEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xCAE3AC966A1A71B9)]
    public class SoundZoneDeactivationEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<SoundZoneResource> SoundZoneResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool KeepDeactivated;
    }

    [RTTI.Serializable(0xD574C33449C48A9C)]
    public class SoundZoneInstance : WorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public Ref<SoundZoneResource> Resource;
    }

    [RTTI.Serializable(0x54D5DCC3D873A05B)]
    public class SoundZoneResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public int Priority;
        [RTTI.Member(1, 0x2C, "General")] public ESoundZoneShapeType ShapeType;
        [RTTI.Member(2, 0x30, "General")] public bool Is3D;
        [RTTI.Member(3, 0x31, "General")] public bool Active;
        [RTTI.Member(4, 0x32, "General")] public bool OverridesDistances;
        [RTTI.Member(5, 0x33, "General")] public bool RetriggerOnEnter;
        [RTTI.Member(6, 0x34, "General")] public float SoundInstanceGain;
        [RTTI.Member(7, 0x38, "General")] public float RelativeSoundPressure;
        [RTTI.Member(8, 0x3C, "General")] public bool AutoSizeZoneInstance;
        [RTTI.Member(9, 0x3D, "General")] public bool OverrideAttenuationLinearity;
        [RTTI.Member(10, 0x3E, "General")] public bool OverridePanModDistance;
        [RTTI.Member(11, 0x3F, "General")] public bool OverrideMinDistance;
        [RTTI.Member(12, 0x40, "General")] public float SoundAttenuationLinearity;
        [RTTI.Member(13, 0x44, "General")] public float SoundPanModDistance;
        [RTTI.Member(14, 0x48, "General")] public float SoundMinDistance;
        [RTTI.Member(15, 0x50, "General")] public Ref<SoundResource> Sound;
        [RTTI.Member(16, 0x58, "General")] public float InsideAngle;
        [RTTI.Member(17, 0x5C, "General")] public float OutsideAngle;
        [RTTI.Member(18, 0x60, "General")] public float OutsideGain;
        [RTTI.Member(19, 0x70, "General")] public Vec3 InnerBoundsMax;
        [RTTI.Member(20, 0x80, "General")] public Vec3 InnerBoundsMin;
        [RTTI.Member(21, 0x90, "General")] public float InnerFraction;
        [RTTI.Member(22, 0x98, "General")] public String AmbientStreamName;
        [RTTI.Member(23, 0xA0, "General")] public float AmbientStreamGain;
        [RTTI.Member(24, 0xA8, "General")] public Ref<ReverbPresetResource> ReverbPreset;
        [RTTI.Member(25, 0xB0, "General")] public float ReverbGain;
        [RTTI.Member(26, 0xB8, "General")] public String MusicPresetName;
        [RTTI.Member(27, 0xC0, "General")] public Ref<SoundMixResource> SoundMix;
        [RTTI.Member(28, 0xC8, "General")] public Ref<SubmixPresetResource> SubmixPreset;
        [RTTI.Member(29, 0xD0, "General")] public Ref<ReverbPresetResource> DialogReverbPreset;
        [RTTI.Member(30, 0xD8, "General")] public bool OverrideInsideness;
        [RTTI.Member(31, 0xD9, "General")] public bool IsInside;
        [RTTI.Member(32, 0xDC, "General")] public RGBAColor DrawColor;
    }

    [RTTI.Serializable(0x417A4CD8341ABAC7)]
    public class SparseSoundMixResource : SoundMixResource
    {
        [RTTI.Member(0, 0x38, "SparseMix")] public Ref<SoundMixResource> ParentMix;
    }

    [RTTI.Serializable(0x2D86EEEFDA3A0BC0)]
    public class SpawnAppearancePosition : WorldNode
    {
    }

    [RTTI.Serializable(0xF4AA98C41FB73085)]
    public class SpawnArea : ControlledEntity
    {
    }

    [RTTI.Serializable(0xB16C6E5F8613DE17)]
    public class SpawnAreaResource : ControlledEntityResource
    {
        [RTTI.Member(0, 0x208, "Logic")] public bool IsEnabled;
        [RTTI.Member(1, 0x209, "Logic")] public bool EnableSpawning;
        [RTTI.Member(2, 0x20A, "Logic")] public bool CanChangeFaction;
        [RTTI.Member(3, 0x20B, "Logic")] public bool IsBaseCampArea;
        [RTTI.Member(4, 0x210, "Logic")] public Ref<CameraEntityResource> CameraEntityResource;
        [RTTI.Member(5, 0x218, "Logic")] public Ref<EntityAction> SpawnAction;
        [RTTI.Member(6, 0x220, "Prototype")] public float CamDistance;
    }

    [RTTI.Serializable(0x77BDB80E63B758B1)]
    public class SpawnCommand : WorldNode
    {
    }

    [RTTI.Serializable(0xF77D7A75F26D6C15)]
    public class SpawnFactOverride
    {
        [RTTI.Member(0, 0x0)] public UUIDRef<WorldNode> SpawnSource;
        [RTTI.Member(1, 0x10)] public Array<Ref<FactValue>> FactValues;
    }

    [RTTI.Serializable(0xD3725F42A39347A4)]
    public class SpawnSetup : SpawnSetupConcrete
    {
        [RTTI.Member(0, 0x88, "ComponentOverrides")] public Array<Ref<EntityComponentResource>> ComponentResourceOverrides;
        [RTTI.Member(1, 0x98, "InventoryComponentOverrides")] public Ref<InventoryCollection> InventoryInitialItemsCollection;
        [RTTI.Member(2, 0xA0, "ControlledEntityOverrides")] public Ref<AIIndividualResource> AIIndividualResource;
        [RTTI.Member(3, 0xA8, "HumanoidOverrides")] public Ref<HumanoidBodyVariantInterface> BodyVariant;
        [RTTI.Member(4, 0xB0, "PropertyContainerOverrides")] public Ref<PropertyContainerResource> PropertyContainerResource;
        [RTTI.Member(5, 0xB8, "AIPropertyFactOverrides")] public Ref<AIPropertyFactComponentResource> AIPropertyFactComponentResource;
    }

    [RTTI.Serializable(0x4D27E41BF9D92D6F)]
    public class SpawnSetupBase : Resource
    {
    }

    [RTTI.Serializable(0x8C0776969A4FF37E)]
    public class SpawnSetupComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x4E4322955A1385B3)]
    public class SpawnSetupConcrete : SpawnSetupNonPlaceholder
    {
        [RTTI.Member(0, 0x38)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x40)] public Ref<GraphProgramResource> GraphProgramResource;
        [RTTI.Member(2, 0x48, "EntityOverrides")] public Ref<AIFaction> AIFaction;
        [RTTI.Member(3, 0x50)] public Array<Ref<EntityComponentResource>> ExtraComponentResources;
        [RTTI.Member(4, 0x60)] public Array<Ref<FactValue>> Facts;
        [RTTI.Member(5, 0x70, "DestructibilityComponentOverrides")] public ETriState Invulnerable;
        [RTTI.Member(6, 0x74, "DestructibilityComponentOverrides")] public ETriState DieAtZeroHealth;
        [RTTI.Member(7, 0x78, "DestructibilityComponentOverrides")] public int MaxHealth;
        [RTTI.Member(8, 0x80, "DestructibilityComponentOverrides")] public Ref<DestructibilityState> InitialDestructibilityState;
    }

    [RTTI.Serializable(0xD00F2C3F0A240623)]
    public class SpawnSetupGroup : SpawnSetupNonPlaceholder
    {
        [RTTI.Member(0, 0x38)] public Array<SpawnSetupLink> SpawnSetupList;
    }

    [RTTI.Serializable(0x31ACC16E1F0702FD)]
    public class SpawnSetupLink
    {
        [RTTI.Member(0, 0x0)] public float Weight;
        [RTTI.Member(1, 0x8)] public Ref<SpawnSetupBase> SpawnSetup;
    }

    [RTTI.Serializable(0x76108279E7736291)]
    public class SpawnSetupNonPlaceholder : SpawnSetupBase
    {
        [RTTI.Member(0, 0x28)] public Ref<ConditionResource> Condition;
        [RTTI.Member(1, 0x30)] public Ref<EntityImpostorResource> Impostor;
    }

    [RTTI.Serializable(0x10776C770C53A952)]
    public class SpawnSetupOverride
    {
        [RTTI.Member(0, 0x0)] public UUIDRef<SpawnSetupPlaceholder> SpawnSetupPlaceholder;
        [RTTI.Member(1, 0x10)] public StreamingRef<SpawnSetupNonPlaceholder> SpawnSetupConcrete;
    }

    [RTTI.Serializable(0xE21AFE1CFF74847D)]
    public class SpawnSetupPlaceholder : SpawnSetupBase
    {
    }

    [RTTI.Serializable(0x72A812D37D0AC3A4)]
    public class SpawnSetupQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xFD72209E75E93592)]
    public class SpawnSetupQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0x7D1B4D66CD47D9C1)]
    public class SpawnSetupSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(0, 0x48)] public Ref<SpawnSetupNonPlaceholder> SpawnSetup;
    }

    [RTTI.Serializable(0xA0A4AFFDD1ED15F4)]
    public class SpawnSetupSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0xEF7F19299DA4B23A)]
    public class SpawnSoundNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0x52953E9FA61BAA70)]
    public class SpawnSoundNodeStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0x8B3A8436B7A680E4)]
    public class SpawnSourceQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xD1CDC55E403EC3DA)]
    public class SpawnSourceQuestTriggerInterface
    {
    }

    [RTTI.Serializable(0x44CF9D1A90CCE51E)]
    public class Spawnpoint : SpawnpointBase
    {
        [RTTI.Member(0, 0x160, "Impostor")] public EEntityImpostorType ImpostorType;
        [RTTI.Member(1, 0x168, "Impostor")] public Ref<AIRoad> ImpostorRoute;
        [RTTI.Member(2, 0x170, "Impostor")] public EEntityImpostorDirection ImpostorRouteDirection;
    }

    [RTTI.Serializable(0x40D2C85D85E2C7CA)]
    public class SpawnpointBase : ParentWorldNode
    {
        [RTTI.Member(0, 0x88, "General")] public String Name;
        [RTTI.Member(1, 0x90, "Item")] public Ref<SpawnSetupBase> SpawnSetup;
        [RTTI.Member(2, 0x98, "Item")] public Ref<EntityAction> InitialAction;
        [RTTI.Member(3, 0xA0, "Item")] public Array<Ref<SpawnCommand>> SpawnCommands;
        [RTTI.Member(4, 0xB0, "General")] public EFactContextLifetime FactsLifetime;
        [RTTI.Member(5, 0xB1, "SpawnConditions")] public bool AutoSpawn;
        [RTTI.Member(6, 0xB4, "SpawnConditions")] public float Radius;
        [RTTI.Member(7, 0xB8, "SpawnConditions")] public float DespawnRadius;
        [RTTI.Member(8, 0xC0, "Item")] public Array<Ref<EntityComponentResource>> ExtraComponents;
        [RTTI.Member(9, 0xD0, "Item")] public Array<Ref<FactValue>> Facts;
        [RTTI.Member(10, 0xE0, "Logic")] public ESpawnpointNavmeshPlacmentType NavMeshPlacementType;
        [RTTI.Member(11, 0xE4, "Logic")] public FRange NavMeshPlacementRange;
        [RTTI.Member(12, 0xEC, "Logic")] public bool PrepareNavmeshForSpawn;
        [RTTI.Member(13, 0xF0, "Logic")] public Array<Ref<SpawnAppearancePosition>> AppearancePositions;
        [RTTI.Member(14, 0x100, "Logic")] public bool PickAppearancePositionOutsidePlayerView;
        [RTTI.Member(15, 0x108, "Logic")] public Ref<CurveResource> AppearancePositionScoreOverDistance;
        [RTTI.Member(16, 0x130, "Logic")] public Ref<ConditionResource> SpawnCondition;
        [RTTI.Member(17, 0x140, "Logic")] public Ref<GraphProgramResource> SceneScript;
        [RTTI.Member(18, 0x150, "Logic", true)] public GGUUID OriginalUUID;
    }

    [RTTI.Serializable(0xD9A67B7355712BB5)]
    public class SpawnpointGame : Spawnpoint
    {
        [RTTI.Member(0, 0x1A0, "Logic")] public Ref<NPCScheduleResource> ScheduleResource;
        [RTTI.Member(1, 0x1A8, "Logic")] public Ref<EntityResource> StartSequenceNetwork;
    }

    [RTTI.Serializable(0xBEBE7A8D95C8BD49)]
    public class SpawnpointManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xBD417998BDC88ABE)]
    public class SpawnpointSequenceEntityVariable : SequenceEntityVariable
    {
        [RTTI.Member(0, 0x48)] public StreamingRef<Spawnpoint> Spawnpoint;
    }

    [RTTI.Serializable(0xD2DCCFB6AED8F643)]
    public class SpawnpointSequenceEntityVariableInstance : SequenceEntityVariableInstance
    {
    }

    [RTTI.Serializable(0x7EFB587CCF6BBA59)]
    public class SpeakEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x2F7BAE28BB56499C)]
    public class SpeakEventResource : PausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<LocatorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<SentenceResource> SentenceResource;
        [RTTI.Member(2, 0x48, "Logic")] public bool PausingEnabled;
        [RTTI.Member(3, 0x4C, "Logic")] public int BlendInNumFrames;
        [RTTI.Member(4, 0x50, "Logic")] public int BlendOutNumFrames;
    }

    [RTTI.Serializable(0xA2E8D9E25A8928B1)]
    public class SpectatorCameraEntity : CameraEntity
    {
    }

    [RTTI.Serializable(0xF2056517B9D7ED8B)]
    public class SpectatorCameraEntityResource : CameraEntityResource
    {
        [RTTI.Member(0, 0x1D8, "Movement")] public float HeadingSpeed;
        [RTTI.Member(1, 0x1DC, "Movement")] public float StrafeSpeed;
        [RTTI.Member(2, 0x1E0, "Movement")] public float VerticalSpeed;
        [RTTI.Member(3, 0x1E4, "Movement")] public float PitchSpeed;
        [RTTI.Member(4, 0x1E8, "Movement")] public float YawSpeed;
        [RTTI.Member(5, 0x1EC, "Movement")] public FRange PitchRange;
        [RTTI.Member(6, 0x1F4, "Movement")] public float YawRange;
        [RTTI.Member(7, 0x200, "Movement")] public Vec3 FollowOffset;
        [RTTI.Member(8, 0x210, "Representation")] public Ref<HUDResource> HUD;
    }

    [RTTI.Serializable(0x285A2B22006CD02E)]
    public class SpeechTag : VisualTag
    {
    }

    [RTTI.Serializable(0xFE9A4DB9FD014A3A)]
    public class SpeechWidget : Widget
    {
    }

    [RTTI.Serializable(0xE5703A96D734146E)]
    public class SpeedModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5C6C2F943195563F)]
    public class SpeedModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float MovementModifier;
        [RTTI.Member(1, 0x2C, "Logic")] public float PitchModifier;
        [RTTI.Member(2, 0x30, "Logic")] public float HeadingModifier;
        [RTTI.Member(3, 0x34, "Logic")] public bool SlowMoCompensationMode;
    }

    [RTTI.Serializable(0x42C932E14894A748)]
    public class SphereBasedActivationPolicy : EntityActivationPolicy
    {
        [RTTI.Member(0, 0x38, "Logic")] public float ActivationRadius;
        [RTTI.Member(1, 0x3C, "Logic")] public float DeactivationRadius;
    }

    [RTTI.Serializable(0xC4A3AEEECE730EE8)]
    public class SplashScreenNode : WorldNode
    {
        [RTTI.Member(0, 0x78)] public Ref<UITexture> SplashScreenImage;
        [RTTI.Member(1, 0x80)] public Ref<ConditionResource> Condition;
    }

    [RTTI.Serializable(0x110E823D0061452E)]
    public class SpotLight : LightShadowed
    {
        [RTTI.Member(0, 0x210, "Color")] public float ConeAngle;
        [RTTI.Member(1, 0x214, "Color")] public float HotspotAngle;
        [RTTI.Member(2, 0x218, "Color")] public float NearRange;
        [RTTI.Member(3, 0x21C, "Color")] public float FarRange;
        [RTTI.Member(4, 0x220, "Color")] public float DepthFadeRatio;
        [RTTI.Member(5, 0x224, "Color")] public bool FarRangeOverride;
    }

    [RTTI.Serializable(0xB95C330362CE47D5)]
    public class SpotLightResource : LightShadowedResource
    {
        [RTTI.Member(0, 0x1F0, "General")] public float ConeAngle;
        [RTTI.Member(1, 0x1F4, "General")] public float HotspotAngle;
        [RTTI.Member(2, 0x1F8, "General")] public float NearRange;
        [RTTI.Member(3, 0x1FC, "General")] public float FarRange;
        [RTTI.Member(4, 0x200, "General")] public float DepthFadeRatio;
        [RTTI.Member(5, 0x204, "General")] public bool FarRangeOverride;
        [RTTI.Member(6, 0x208, "General")] public Ref<Texture> ProjectorTexture;
        [RTTI.Member(7, 0x210, "General")] public Ref<Texture> AreaDiffuseTexture;
        [RTTI.Member(8, 0x218, "General")] public Ref<Texture> AreaSpecularTexture;
    }

    [RTTI.Serializable(0x8923EAFCF7E3FA5C)]
    public class SpottableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x86B5295F117FB660)]
    public class SpottableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public FSize VisibleScreenSpacePercentage;
        [RTTI.Member(1, 0x30, "Logic")] public float MaxSpottingDistance;
        [RTTI.Member(2, 0x34, "Logic")] public bool AutoRemoveWhenSpotted;
    }

    [RTTI.Serializable(0xA849C380CDF5E2E0)]
    public class SpreadSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Spread")] public float SpreadFalloffSpeed;
        [RTTI.Member(1, 0x2C, "Spread")] public float SpreadIncrementSpeed;
        [RTTI.Member(2, 0x30, "Spread")] public float MaximumSpread;
        [RTTI.Member(3, 0x38, "Spread")] public Ref<CurveResource> FirePressedSpreadCurve;
        [RTTI.Member(4, 0x40, "Spread")] public Ref<CurveResource> ChargeSpreadCurve;
    }

    [RTTI.Serializable(0xF3DAE68C2A21811A)]
    public class Spring : CoreObject
    {
    }

    [RTTI.Serializable(0x1DA2F6EB579C40DE)]
    public class SpringAttr
    {
        [RTTI.Member(0, 0x0)] public float Stiffness;
        [RTTI.Member(1, 0x4)] public float Drag;
        [RTTI.Member(2, 0x8)] public float Mass;
        [RTTI.Member(3, 0xC)] public float Scale;
        [RTTI.Member(4, 0x10)] public float Clamp;
        [RTTI.Member(5, 0x14)] public int MaxPriority;
    }

    [RTTI.Serializable(0xF64CE173603523C)]
    public class SpringResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public float Frequency;
        [RTTI.Member(1, 0x2C, "General")] public float Damping;
        [RTTI.Member(2, 0x30, "General")] public float MaximumStretch;
    }

    [RTTI.Serializable(0xF350E807F0E80236)]
    public class StackableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x3D3F929B93F5EA4E)]
    public class StackableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int DefaultAmount;
        [RTTI.Member(1, 0x2C, "Logic")] public bool DropStackAsSingleObject;
        [RTTI.Member(2, 0x30, "Logic")] public int StackLimit;
    }

    [RTTI.Serializable(0xDD41976A5E7458D9)]
    public class StageActorResource : CreateEntityActorResource
    {
    }

    [RTTI.Serializable(0xD9D879D9F4B896F7)]
    public class StageCameraActorResource : CameraActorResource
    {
        [RTTI.Member(0, 0xB8, "Stage")] public ECameraShotType CameraShotType;
        [RTTI.Member(1, 0xC0, "Stage")] public Ref<EntityActorResource> EntityActorResource;
        [RTTI.Member(2, 0xC8, "Stage")] public EGender Gender;
        [RTTI.Member(3, 0xD0, "Stage")] public Ref<EntityActorResource> SecondaryActorResource;
        [RTTI.Member(4, 0xD8, "Stage")] public EGender SecondaryActorGender;
        [RTTI.Member(5, 0xD9, "Stage")] public bool LeftOfTarget;
    }

    [RTTI.Serializable(0xCB1A94C160C89EBB)]
    public class StaggerStateComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x1BEF68E33F654121)]
    public class StaggerStateComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String Animation;
        [RTTI.Member(1, 0x30, "Logic")] public Array<String> AnimationStates;
        [RTTI.Member(2, 0x40, "Logic")] public String AnimationTag;
    }

    [RTTI.Serializable(0xEA87A9C1259353C3)]
    public class StaminaAnimationCost : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String AnimationTag;
        [RTTI.Member(1, 0x30, "Logic")] public float InstantCost;
        [RTTI.Member(2, 0x34, "Logic")] public float StaminaPerSecondWhileActive;
    }

    [RTTI.Serializable(0x648824B11198EAA2)]
    public class StaminaComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5F0C17FA1990D055)]
    public class StaminaComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EStaminaType Type;
        [RTTI.Member(1, 0x2C, "Logic")] public int InitialStamina;
        [RTTI.Member(2, 0x30, "Logic")] public int MaxStamina;
        [RTTI.Member(3, 0x34, "Logic")] public float RegenerationRate;
        [RTTI.Member(4, 0x38, "Logic")] public Array<Ref<StaminaAnimationCost>> AnimationCosts;
    }

    [RTTI.Serializable(0xA129C6C9ED39A080)]
    public class StaminaModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xEF756958B680FE3F)]
    public class StaminaModificationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<StaminaModifier>> StaminaModifiers;
        [RTTI.Member(1, 0x38, "Logic")] public EStaminaType StaminaType;
    }

    [RTTI.Serializable(0xA523887E53346FA4)]
    public class StaminaModifier : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float StaminaPerSecond;
        [RTTI.Member(1, 0x2C, "Logic")] public float CostRateMultiplier;
        [RTTI.Member(2, 0x30, "Logic")] public float BoostRateMultiplier;
        [RTTI.Member(3, 0x34, "Logic")] public float RegenRateMultiplier;
        [RTTI.Member(4, 0x38, "Logic")] public float DrainRateMultiplier;
        [RTTI.Member(5, 0x3C, "Logic")] public float AdditionalMax;
        [RTTI.Member(6, 0x40, "Logic")] public bool AdditionalMaxIsTransient;
        [RTTI.Member(7, 0x41, "Logic")] public bool RefillToMax;
        [RTTI.Member(8, 0x44, "Logic")] public float Duration;
        [RTTI.Member(9, 0x48, "Logic")] public String Identifier;
        [RTTI.Member(10, 0x50, "Logic")] public Ref<StaminaUsageType> StaminaUsageType;
    }

    [RTTI.Serializable(0x2B2A2C2407EB7EEF)]
    public class StaminaModifierAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<StaminaModifier> StaminaModifier;
        [RTTI.Member(1, 0x38, "Logic")] public bool Add;
        [RTTI.Member(2, 0x3C, "Logic")] public EStaminaType Type;
    }

    [RTTI.Serializable(0x5D46B3760A01F6D6)]
    public class StaminaUsageType : Resource
    {
    }

    [RTTI.Serializable(0xCEFA230A3191DB7)]
    public class StartAndStopSceneEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xB2E62560941820EC)]
    public class StartAndStopSceneEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Event")] public UUIDRef<SceneInstance> SceneInstance;
    }

    [RTTI.Serializable(0x80EA03D865C7B4D3)]
    public class StartAudiologNotification : PlayerInteractiveNotification
    {
    }

    [RTTI.Serializable(0xAC6CB285EC0B860F)]
    public class StartAudiologNotificationResource : PlayerInteractiveNotificationResource
    {
    }

    [RTTI.Serializable(0xD71BC73355136437)]
    public class StartSceneEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x4CE81C155BDAE373)]
    public class StartSceneEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Event")] public UUIDRef<SceneInstance> SceneInstance;
    }

    [RTTI.Serializable(0xFD27F9B634BED8B5)]
    public class StartSequenceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x68E7BFAC947663A4)]
    public class StartSequenceEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<SequenceResource> SequenceResource;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<AIMarker> Marker;
    }

    [RTTI.Serializable(0x84C1C86675B99B8B)]
    public class StatDisplayEntry : StatDisplayEntryBase
    {
        [RTTI.Member(0, 0x30, "General")] public int StatBarValue;
    }

    [RTTI.Serializable(0x7452273FBD2FB5B2)]
    public class StatDisplayEntryBase : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public EDisplayStatType DisplayStatType;
    }

    [RTTI.Serializable(0x27C9E16EDA623743)]
    public class StatModification : RTTIObject
    {
        [RTTI.Member(0, 0x10, "StateSaving", true)] public int Rating;
        [RTTI.Member(1, 0x18, "StateSaving", true)] public Ref<StatModificationTypeResource> Type;
    }

    [RTTI.Serializable(0xA7484DA64F7EB4A5)]
    public class StatModificationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x97422E97C7A661D2)]
    public class StatModificationResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<StatModifierResource>> Modifiers;
    }

    [RTTI.Serializable(0xE940250BC190B1E3)]
    public class StatModificationSocketType : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<StatModificationSocketType> ParentType;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<UITexture> Icon;
    }

    [RTTI.Serializable(0x59447BCF53008891)]
    public class StatModificationTypeCandidate : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<StatModificationTypeResource> PrimaryType;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<StatModificationTypeResource>> SecondaryTypes;
        [RTTI.Member(2, 0x40, "Logic")] public Array<Ref<StatModificationTypeResource>> TertiaryTypes;
        [RTTI.Member(3, 0x50, "Logic")] public float SelectionWeight;
        [RTTI.Member(4, 0x58, "Logic")] public Ref<GraphProgramResource> ConditionGraph;
        [RTTI.Member(5, 0x60, "Logic")] public Ref<UITexture> ItemOverrideIcon;
    }

    [RTTI.Serializable(0x1FE2FA1BF49E38)]
    public class StatModificationTypeResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<StatModificationResource> ModificationResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<ModifierStatDisplayEntry> StatDisplayEntry;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<StatModificationSocketType> RequiredSocketType;
    }

    [RTTI.Serializable(0xDDDA3EB7F5D8DBD8)]
    public class StatModifierResource : Resource
    {
    }

    [RTTI.Serializable(0x3A7F345C24C372CE)]
    public class StatResource
    {
        [RTTI.Member(0, 0x8)] public String Type;
        [RTTI.Member(1, 0x10)] public EPlayerScoreStat Stat;
        [RTTI.Member(2, 0x14)] public EPlayerScoreEntityStat EntityStat;
        [RTTI.Member(3, 0x18)] public EOperator Operator;
    }

    [RTTI.Serializable(0xB51048A14D18A118)]
    public class StateInGame : RTTIObject
    {
    }

    [RTTI.Serializable(0x99869032BB746F4C)]
    public class StateMatchmaking : RTTIObject
    {
    }

    [RTTI.Serializable(0xA015E71AC646AA37)]
    public class StateObject
    {
    }

    [RTTI.Serializable(0x8B934E9E7CC4F7A0)]
    public class StateObjectInstance : CoreObject
    {
    }

    [RTTI.Serializable(0x6B63E58333404267)]
    public class StateObjectResource : BaseResource
    {
    }

    [RTTI.Serializable(0xD5B434468F879C93)]
    public class StaticConditionAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public bool Condition;
    }

    [RTTI.Serializable(0xB8E1EEE047712137)]
    public class StaticMeshActorResource : ModelActorResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public Ref<StaticModelResource> StaticModelResource;
    }

    [RTTI.Serializable(0x3B945C8073AA4A01)]
    public class StaticMeshInstance : GeometryObject
    {
        [RTTI.Member(0, 0x0, "General", true)] public bool IgnoreLodDistanceMultiplier;
        [RTTI.Member(1, 0x0, "General", true)] public bool EnableShadows;
        [RTTI.Member(2, 0x0, "General", true)] public bool EnableSunShadows;
        [RTTI.Member(3, 0x0, "General", true)] public float EcotopeEffectOverrideValue;
        [RTTI.Member(4, 0x0, "General", true)] public int8 EcotopeIndexOverrideValue;
        [RTTI.Member(5, 0xC0, "General")] public String Name;
        [RTTI.Member(6, 0xC8, "General")] public Ref<MeshResourceBase> Resource;
        [RTTI.Member(7, 0xD0, "General")] public MeshHierachyShaderOverrides MeshShaderOverrides;
        [RTTI.Member(8, 0x180, "General")] public int MeshInstanceTreeSize;
        [RTTI.Member(9, 0x184, "General")] public int MeshInstanceTreeDrawableSetupSize;
        [RTTI.Member(10, 0x1A0, "General")] public Array<uint8> RangedStreamingData;
        [RTTI.Member(11, 0x1B0, "General")] public uint16 RangedStreamingObjectCount;
        [RTTI.Member(12, 0x1B2, "General")] public uint16 StreamingResourceCount;
        [RTTI.Member(13, 0x1B4, "General")] public uint16 StreamingHandleCount;
        [RTTI.Member(14, 0x1C8, "General")] public uint32 PackedData;
    }

    [RTTI.Serializable(0xEC711C9C5BD00A78)]
    public class StaticMeshResource : MeshResourceBase
    {
        [RTTI.Member(0, 0x0, "Lighting", true)] public EDrawPartType RenderType;
        [RTTI.Member(1, 0x0, "Lighting", true)] public bool CastDynamicShadows;
        [RTTI.Member(2, 0x0, "Lighting", true)] public bool CastShadows;
        [RTTI.Member(3, 0x0, "Lighting", true)] public EShadowCull ShadowCullMode;
        [RTTI.Member(4, 0x0, "Lighting", true)] public EViewLayer ViewLayer;
        [RTTI.Member(5, 0x80, "Lighting")] public DrawFlags DrawFlags;
        [RTTI.Member(6, 0x88, "MeshDescription")] public Array<Ref<PrimitiveResource>> Primitives;
        [RTTI.Member(7, 0xA8, "MeshDescription")] public Array<Ref<RenderEffectResource>> RenderEffects;
        [RTTI.Member(8, 0xB8, "MeshDescription")] public Ref<SkeletonHelpers> OrientationHelpers;
        [RTTI.Member(9, 0xC0, "MeshDescription")] public Ref<StaticMeshSimulationInfo> SimulationInfo;
        [RTTI.Member(10, 0xD0, "Lighting")] public bool SupportsInstanceRendering;
    }

    [RTTI.Serializable(0x736AFE97D3999282)]
    public class StaticMeshSimulationInfo : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<StaticMeshSimulationModelPoint> ModelPoints;
        [RTTI.Member(1, 0x38)] public Array<StaticMeshSimulationModelLink> ModelLinks;
        [RTTI.Member(2, 0x48, true)] public Ref<Skeleton> SimulationSkeleton;
        [RTTI.Member(3, 0x50, true)] public Ref<SkinnedMeshBoneBindings> SimulationBindings;
        [RTTI.Member(4, 0x58)] public float WeightInertia;
        [RTTI.Member(5, 0x5C)] public float WeightStiffness;
        [RTTI.Member(6, 0x60)] public float WeightCollider;
        [RTTI.Member(7, 0x64)] public float WeightOldOrientation;
        [RTTI.Member(8, 0x68)] public float WeightTurnToNeighbours;
        [RTTI.Member(9, 0x6C)] public float WeightMatchOrientation;
        [RTTI.Member(10, 0x70)] public float Gravity;
    }

    [RTTI.Serializable(0x597F9A8DA554599A)]
    public class StaticMeshSimulationModelLink
    {
        [RTTI.Member(0, 0x0)] public int IndexA;
        [RTTI.Member(1, 0x4)] public int IndexB;
        [RTTI.Member(2, 0x10)] public Vec3 Vector;
    }

    [RTTI.Serializable(0x28FB792A7D2E103E)]
    public class StaticMeshSimulationModelPoint
    {
        [RTTI.Member(0, 0x0)] public Quat Orientation;
        [RTTI.Member(1, 0x10)] public Vec3 Position;
        [RTTI.Member(2, 0x20)] public float ColliderInfluence;
        [RTTI.Member(3, 0x24)] public float OrientationSnap;
        [RTTI.Member(4, 0x28)] public float InvMass;
        [RTTI.Member(5, 0x2C)] public float MoveScale;
    }

    [RTTI.Serializable(0xA6B2140E7E7DFC4F)]
    public class StaticModel : Model
    {
    }

    [RTTI.Serializable(0x378E027AE93541CC)]
    public class StaticModelActorResource : ModelActorResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public Ref<StaticModelResource> StaticModelResource;
    }

    [RTTI.Serializable(0xEDADD3E3430BB836)]
    public class StaticModelRep : ModelRep
    {
    }

    [RTTI.Serializable(0x4BD3CB18F9D0C33)]
    public class StaticModelResource : ModelResource
    {
    }

    [RTTI.Serializable(0xA7C388E6B00260D4)]
    public class StatsClassResource : Resource
    {
        [RTTI.Member(0, 0x28, "Stats")] public String StatsClass;
        [RTTI.Member(1, 0x30, "Stats")] public Array<String> StatsClassTags;
    }

    [RTTI.Serializable(0x741C6EA0E5BC3F4B)]
    public class StatsDisplayResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<StatDisplayEntry>> Stats;
    }

    [RTTI.Serializable(0x144172AC44D6C05A)]
    public class StatsProfile : RTTIRefObject
    {
        [RTTI.Member(0, 0x28)] public HashMap<EPlayerScoreStat_int> ScoreStatMap;
        [RTTI.Member(1, 0x38)] public HashMap<EPlayerScoreStat_int> ActivityFeedStatMap;
        [RTTI.Member(2, 0x48)] public HashMap<String_int> EntityStatMap;
        [RTTI.Member(3, 0x58)] public float SkillRating;
        [RTTI.Member(4, 0x5C)] public float SkillRD;
    }

    [RTTI.Serializable(0xD9B0914E019B21AA)]
    public class StealthComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x25FD3A2821FA9665)]
    public class StealthComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xB0404EABC4556DE8)]
    public class StencilBufferComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5AFA85D1C2603E)]
    public class StencilBufferComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xA47C5904436F50F3)]
    public class StencilBufferComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public EStencilBufferValue StencilBufferValue;
    }

    [RTTI.Serializable(0xC7B616E18AA460F)]
    public class StickFunction : Resource
    {
        [RTTI.Member(0, 0x28)] public EStick Stick;
        [RTTI.Member(1, 0x30)] public Ref<CurveResource> StickCurve;
        [RTTI.Member(2, 0x38)] public Ref<CurveResource> DeadzoneCurve;
    }

    [RTTI.Serializable(0x9033E5EC15A3353C)]
    public class StopEmitElectricityAction : EntityAction
    {
    }

    [RTTI.Serializable(0xBCAFE8FCACD66BAE)]
    public class StopSceneEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0xAF42001FBEDCEE42)]
    public class StopSceneEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Event")] public UUIDRef<SceneInstance> SceneInstance;
    }

    [RTTI.Serializable(0x5B95FD68D3EB6E7B)]
    public class StopSequenceEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x5430E3F11BEBAC35)]
    public class StopSequenceEventResource : EventResource
    {
    }

    [RTTI.Serializable(0x67090F9210738844)]
    public class StoryArc : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String DisplayName;
        [RTTI.Member(1, 0x30, "Logic")] public int Priority;
        [RTTI.Member(2, 0x38, "Logic")] public String DescriptionID;
    }

    [RTTI.Serializable(0x3222B76DA88E1586)]
    public class StreamOutDesc
    {
        [RTTI.Member(0, 0x0)] public String Desc;
        [RTTI.Member(1, 0x8)] public EProgramType ProgramType;
    }

    [RTTI.Serializable(0x32D0935DA22500AA)]
    public class StreamingHintAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Streaming")] public String SectionName;
        [RTTI.Member(1, 0x38, "Streaming")] public String SpawnArea;
        [RTTI.Member(2, 0x40, "Streaming")] public String SpawnMarker;
    }

    [RTTI.Serializable(0xDB4B0A9858D71E9C)]
    public class StreamingProgramResource : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Ref<GraphProgramResource> ActiveProgram;
        [RTTI.Member(1, 0x28, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0xF0BED228EC4DEF71)]
    public class StreamingRefTarget
    {
        [RTTI.Member(0, 0x8, "General", true)] public String Location;
    }

    [RTTI.Serializable(0x63E59CE81CF859F)]
    public class StreamingStrategyResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<String> BlacklistedTypes;
        [RTTI.Member(1, 0x38, "General")] public Array<String> WhitelistedTypes;
        [RTTI.Member(2, 0x48, "General")] public Array<UUIDRef<RTTIRefObject>> WhitelistedObjects;
    }

    [RTTI.Serializable(0x4EC23BA299C51BCE)]
    public class StreamingTileLODResource : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public EStreamingLODLevel LODLevel;
        [RTTI.Member(1, 0x28, "General")] public StreamingRef<ObjectCollection> ObjectCollection;
    }

    [RTTI.Serializable(0xDA6B57CA4988B635)]
    public class StreamingTileResource : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public IVec2 Coordinates;
        [RTTI.Member(1, 0x28, "General")] public Array<Ref<StreamingTileStateResource>> States;
    }

    [RTTI.Serializable(0xD45D0D5AB1E9F962)]
    public class StreamingTileStateResource : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Array<Ref<StreamingTileLODResource>> LODs;
    }

    [RTTI.Serializable(0x119BADFD4A56C7FF)]
    public class StringProperty : StringPropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x64C53340B02F6ABB)]
    public class StringPropertyBase : Property
    {
    }

    [RTTI.Serializable(0x90E2B278F0AF1B49)]
    public class StringPropertyLink : PropertyLinkBase
    {
        [RTTI.Member(0, 0x0)] public Ref<StringPropertyBase> Property;
    }

    [RTTI.Serializable(0xE86F39E978DCD8D4)]
    public class StringToolsGroup
    {
    }

    [RTTI.Serializable(0xED2DDF5E1671D631)]
    public class String_GGUUID
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public GGUUID Value;
    }

    [RTTI.Serializable(0x9E46CF03F14FE330)]
    public class String_String
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public String Value;
    }

    [RTTI.Serializable(0x60DC74B13859AB4B)]
    public class String_double
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public double Value;
    }

    [RTTI.Serializable(0x2A251B5C42DFAE17)]
    public class String_int
    {
        [RTTI.Member(0, 0x0)] public String Key;
        [RTTI.Member(1, 0x8)] public int Value;
    }

    [RTTI.Serializable(0x5C2F2D3EB687E231)]
    public class StunnedComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x531CFBE689BF3613)]
    public class StunnedComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x3C5CB8A3D436488B)]
    public class StunnedComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<BoneAttachedParticleSystemResource> StunParticleSystem;
        [RTTI.Member(1, 0x30, "Representation")] public String StunAnimation;
        [RTTI.Member(2, 0x38, "Logic")] public bool DeactivateMoverOnStun;
    }

    [RTTI.Serializable(0xA0BB3A607344B17D)]
    public class SubGoalPausableEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x24543191D38923D7)]
    public class SubGoalPausableEventResource : PausableEventResource
    {
    }

    [RTTI.Serializable(0x8F15F93AA15F0AB6)]
    public class SubmixPresetEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xDCCD689BEA93863F)]
    public class SubmixPresetEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<SubmixPresetResource> SubmixPreset;
    }

    [RTTI.Serializable(0x5DE301D1481E433C)]
    public class SubmixPresetResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<SubmixResource>> AffectedSubMixBusses;
        [RTTI.Member(1, 0x38, "General")] public Ref<SubmixResource> SideChainInput;
        [RTTI.Member(2, 0x40, "General")] public bool IsDominant;
        [RTTI.Member(3, 0x48, "General")] public float PreAmpGain;
        [RTTI.Member(4, 0x4C, "General")] public float TotalVolume;
        [RTTI.Member(5, 0x50, "General")] public float LFEVolume;
        [RTTI.Member(6, 0x54, "General")] public float Azimuth;
        [RTTI.Member(7, 0x58, "General")] public float Focus;
        [RTTI.Member(8, 0x5C, "ParametricEq")] public ESoundFilterMode Band1Mode;
        [RTTI.Member(9, 0x60, "ParametricEq")] public float Band1Gain;
        [RTTI.Member(10, 0x64, "ParametricEq")] public float Band1Frequency;
        [RTTI.Member(11, 0x68, "ParametricEq")] public float Band1QValue;
        [RTTI.Member(12, 0x6C, "ParametricEq")] public ESoundFilterMode Band2Mode;
        [RTTI.Member(13, 0x70, "ParametricEq")] public float Band2Gain;
        [RTTI.Member(14, 0x74, "ParametricEq")] public float Band2Frequency;
        [RTTI.Member(15, 0x78, "ParametricEq")] public float Band2QValue;
        [RTTI.Member(16, 0x7C, "ParametricEq")] public ESoundFilterMode Band3Mode;
        [RTTI.Member(17, 0x80, "ParametricEq")] public float Band3Gain;
        [RTTI.Member(18, 0x84, "ParametricEq")] public float Band3Frequency;
        [RTTI.Member(19, 0x88, "ParametricEq")] public float Band3QValue;
        [RTTI.Member(20, 0x8C, "ParametricEq")] public ESoundFilterMode Band4Mode;
        [RTTI.Member(21, 0x90, "ParametricEq")] public float Band4Gain;
        [RTTI.Member(22, 0x94, "ParametricEq")] public float Band4Frequency;
        [RTTI.Member(23, 0x98, "ParametricEq")] public float Band4QValue;
        [RTTI.Member(24, 0xA0, "Compressor")] public bool Compressor_Enabled;
        [RTTI.Member(25, 0xA1, "Compressor")] public bool UseSideChainInput;
        [RTTI.Member(26, 0xA2, "Compressor")] public bool UseChannelLinking;
        [RTTI.Member(27, 0xA3, "Compressor")] public uint8 BandCount;
        [RTTI.Member(28, 0xA4, "Compressor")] public float LookAheadInMs;
        [RTTI.Member(29, 0xA8, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand1;
        [RTTI.Member(30, 0xB0, "Compressor")] public float CrossOverFrequencyBand1Band2;
        [RTTI.Member(31, 0xB8, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand2;
        [RTTI.Member(32, 0xC0, "Compressor")] public float CrossOverFrequencyBand2Band3;
        [RTTI.Member(33, 0xC8, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand3;
        [RTTI.Member(34, 0xD0, "Compressor")] public float CrossOverFrequencyBand3Band4;
        [RTTI.Member(35, 0xD8, "Compressor")] public Ref<CompressorConfigurationSet> CompressorBand4;
        [RTTI.Member(36, 0xE0, "TubeAmp")] public bool TubeAmp_Enabled;
        [RTTI.Member(37, 0xE4, "TubeAmp")] public float TriodeDrive;
        [RTTI.Member(38, 0xE8, "TubeAmp")] public float PentodeDrive;
        [RTTI.Member(39, 0xEC, "WaveShaperDistortion")] public bool WaveShaperDistortion_Enabled;
        [RTTI.Member(40, 0xF0, "WaveShaperDistortion")] public float Drive;
        [RTTI.Member(41, 0xFC, "WaveShaperDistortion")] public float PositiveInputSaturation;
        [RTTI.Member(42, 0x100, "WaveShaperDistortion")] public float NegativeInputSaturation;
        [RTTI.Member(43, 0x104, "WaveShaperDistortion")] public float PositiveOutputSaturation;
        [RTTI.Member(44, 0x108, "WaveShaperDistortion")] public float NegativeOutputSaturation;
        [RTTI.Member(45, 0x10C, "WaveShaperDistortion")] public float CoefficientA;
        [RTTI.Member(46, 0x110, "WaveShaperDistortion")] public float CoefficientB;
        [RTTI.Member(47, 0x114, "WaveShaperDistortion")] public float CoefficientC;
        [RTTI.Member(48, 0x118, "WaveShaperDistortion")] public float CoefficientD;
        [RTTI.Member(49, 0x120, "ConvolutionReverb")] public Ref<ImpulseResponseResource> ImpulseResponse;
        [RTTI.Member(50, 0x128, "ConvolutionReverb")] public bool Reverse;
        [RTTI.Member(51, 0x12C, "ConvolutionReverb")] public float StartOffset;
        [RTTI.Member(52, 0x130, "ConvolutionReverb")] public float StopOffset;
        [RTTI.Member(53, 0x134, "ConvolutionReverb")] public float Gain;
        [RTTI.Member(54, 0x138, "ConvolutionReverb")] public float AttackTime;
        [RTTI.Member(55, 0x13C, "ConvolutionReverb")] public int AttackAlpha;
        [RTTI.Member(56, 0x140, "ConvolutionReverb")] public float SustainTime;
        [RTTI.Member(57, 0x144, "ConvolutionReverb")] public float ReleaseTime;
        [RTTI.Member(58, 0x148, "ConvolutionReverb")] public int ReleaseAlpha;
    }

    [RTTI.Serializable(0x1DBEC3DB96B688B4)]
    public class SubmixResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<SubmixResource> Destination;
    }

    [RTTI.Serializable(0xE7BA2FC3AF9C0F3D)]
    public class SubtitleEvent
    {
        [RTTI.Member(0, 0x0)] public WString SubtitleText;
        [RTTI.Member(1, 0x8)] public int FrameStart;
        [RTTI.Member(2, 0xC)] public int FrameEnd;
    }

    [RTTI.Serializable(0x33C1C418B1E8576B)]
    public class SubtitleLanguageEvents
    {
        [RTTI.Member(0, 0x0)] public ELanguage Language;
        [RTTI.Member(1, 0x8)] public Array<SubtitleEvent> Events;
    }

    [RTTI.Serializable(0x5A3ECD4ADA693D7F)]
    public class SubtitlesResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<SubtitleLanguageEvents> SubtitleEvents;
        [RTTI.Member(1, 0x38, "General")] public bool ForceSubtitles;
        [RTTI.Member(2, 0x3C, "General")] public ESubtitlePosition Position;
    }

    [RTTI.Serializable(0xB87386E71EE93D60)]
    public class SummableQuestReward : QuestReward
    {
    }

    [RTTI.Serializable(0x6A3A0A827144CC60)]
    public class SunCascadeOccluderComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x76282341EADF501E)]
    public class SunCascadeOccluderComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xDF8ACD7B4A4BB540)]
    public class SunCascadeOccluderComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x1B498B599F8CFA02)]
    public class SunCascadeResourceSettings : SunCascadeSettings
    {
        [RTTI.Member(0, 0x60)] public int FilterTapCount;
    }

    [RTTI.Serializable(0x870CCD90934982F1)]
    public class SunCascadeScalabilitySettings
    {
        [RTTI.Member(0, 0x0)] public float ScalabilityCascadeDistanceLow;
        [RTTI.Member(1, 0x4)] public float ScalabilityCascadeDistanceMedium;
        [RTTI.Member(2, 0x8)] public float ScalabilityCascadeDistanceHigh;
        [RTTI.Member(3, 0xC)] public float ScalabilityCascadeDistanceUltra;
        [RTTI.Member(4, 0x10)] public float ScalabilityCascadeResolutionLow;
        [RTTI.Member(5, 0x14)] public float ScalabilityCascadeResolutionMedium;
        [RTTI.Member(6, 0x18)] public float ScalabilityCascadeResolutionHigh;
        [RTTI.Member(7, 0x1C)] public float ScalabilityCascadeResolutionUltra;
        [RTTI.Member(8, 0x20)] public float ScalabilityCascadeOverrideLODDistanceLow;
        [RTTI.Member(9, 0x24)] public float ScalabilityCascadeOverrideLODDistanceMedium;
        [RTTI.Member(10, 0x28)] public float ScalabilityCascadeOverrideLODDistanceHigh;
        [RTTI.Member(11, 0x2C)] public float ScalabilityCascadeOverrideLODDistanceUltra;
    }

    [RTTI.Serializable(0x3198260A4E5B1A99)]
    public class SunCascadeSettings
    {
        [RTTI.Member(0, 0x0)] public float FilterSize;
        [RTTI.Member(1, 0x4)] public float ViewRelativeNearPlane;
        [RTTI.Member(2, 0x8)] public float ViewRelativeFarPlane;
        [RTTI.Member(3, 0xC)] public float DepthBias;
        [RTTI.Member(4, 0x10)] public float MinimumObjectScreenSize;
        [RTTI.Member(5, 0x14)] public float MinimumObjectShadowSize;
        [RTTI.Member(6, 0x18)] public int VolumetricsSampleCount;
        [RTTI.Member(7, 0x1C)] public ESunCascadeShadowmapOverride SunCascadeShadowmapOverride;
        [RTTI.Member(8, 0x20)] public bool EnableCascadeDistanceScalability;
        [RTTI.Member(9, 0x21)] public bool EnableCascadeResolutionScalability;
        [RTTI.Member(10, 0x22)] public bool EnableCascadeLODDistanceOverrideScalability;
        [RTTI.Member(11, 0x24)] public float OverrideLODDistance;
        [RTTI.Member(12, 0x28)] public float Distance;
        [RTTI.Member(13, 0x2C)] public int ShadowMapSize;
        [RTTI.Member(14, 0x30)] public SunCascadeScalabilitySettings SunCascadeScalabilitySettings;
    }

    [RTTI.Serializable(0xB3470DF3CBE711E2)]
    public class SunDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x525848D22F1351CA)]
    public class SunDamageComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x14314DDC645D24F7)]
    public class SunExposureComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x622542E33B5B640)]
    public class SunExposureComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x5318E120185F7F95)]
    public class SunExposureComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float DamagePerSecond;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(2, 0x38, "Logic")] public float HeatIncreaseRate;
        [RTTI.Member(3, 0x3C, "Logic")] public float HeatDissipationRate;
        [RTTI.Member(4, 0x40, "Logic")] public int ExposurePhysicsLayer;
        [RTTI.Member(5, 0x48, "Representation")] public Ref<SoundResource> HeatSound;
        [RTTI.Member(6, 0x50, "Representation")] public Ref<SoundResource> DamageSound;
    }

    [RTTI.Serializable(0xA948FBD46C88BD67)]
    public class SunLight : Light
    {
        [RTTI.Member(0, 0x0, "Color", true)] public Vec4 CascadeRanges;
        [RTTI.Member(1, 0x0, "Color", true)] public Vec4 CascadeDepthBias;
        [RTTI.Member(2, 0x0, "Color", true)] public Vec4 CascadeFilterRanges;
        [RTTI.Member(3, 0x0, "Color", true)] public Vec4 ShadowMapSizeThreshold;
        [RTTI.Member(4, 0x1B0, "Color")] public SunCascadeSettings CascadeSettings0;
        [RTTI.Member(5, 0x210, "Color")] public SunCascadeSettings CascadeSettings1;
        [RTTI.Member(6, 0x270, "Color")] public SunCascadeSettings CascadeSettings2;
        [RTTI.Member(7, 0x2D0, "Color")] public SunCascadeSettings CascadeSettings3;
        [RTTI.Member(8, 0x330, "Color")] public SunCascadeSettings CascadeSettings4;
        [RTTI.Member(9, 0x480, "Color")] public SunCascadeSettings CompartmentSettings;
        [RTTI.Member(10, 0x4E0, "Color")] public SunCascadeSettings CompartmentSettingsSecondary;
    }

    [RTTI.Serializable(0x2F7AFFB2B6AC1299)]
    public class SunLightResource : LightResource
    {
        [RTTI.Member(0, 0x0, "Color", true)] public Vec4 ShadowMapSizeThreshold;
        [RTTI.Member(1, 0x0, "Color", true)] public Vec4 CascadeRanges;
        [RTTI.Member(2, 0x0, "Color", true)] public Vec4 CascadeFilterRanges;
        [RTTI.Member(3, 0x0, "Color", true)] public Vec4 CascadeDepthBias;
        [RTTI.Member(4, 0x190, "Color")] public int CascadeCount;
        [RTTI.Member(5, 0x194, "Color")] public SunCascadeResourceSettings CascadeSettings0;
        [RTTI.Member(6, 0x1F8, "Color")] public SunCascadeResourceSettings CascadeSettings1;
        [RTTI.Member(7, 0x25C, "Color")] public SunCascadeResourceSettings CascadeSettings2;
        [RTTI.Member(8, 0x2C0, "Color")] public SunCascadeResourceSettings CascadeSettings3;
        [RTTI.Member(9, 0x324, "Color")] public SunCascadeResourceSettings CascadeSettings4;
        [RTTI.Member(10, 0x388, "Color")] public bool EnableCompartmentShadows;
        [RTTI.Member(11, 0x38C, "Color")] public int CompartmentCount;
        [RTTI.Member(12, 0x390, "Color")] public SunCascadeResourceSettings CompartmentSettings;
        [RTTI.Member(13, 0x3F4, "Color")] public SunCascadeResourceSettings CompartmentSettingsSecondary;
        [RTTI.Member(14, 0x460, "Color")] public Vec3 SecondaryCompartmentEntityDetectionBoxExtents;
        [RTTI.Member(15, 0x470, "Color")] public Vec3 MaxSecondaryCompartmentShadowBoundingBoxExtents;
        [RTTI.Member(16, 0x480, "Color")] public bool UseSecondaryCompartmentShadowBoundingBoxLimit;
        [RTTI.Member(17, 0x488, "Color")] public SunLongDistanceShadowSettings LongDistanceShadowSettings;
        [RTTI.Member(18, 0x4A0, "Color")] public Ref<Texture> LongDistanceShadowMap;
    }

    [RTTI.Serializable(0x546679A70E4042D2)]
    public class SunLongDistanceShadowSettings
    {
        [RTTI.Member(0, 0x8)] public Array<BoundingSphere> ShadowBounds;
    }

    [RTTI.Serializable(0x2DC790F48620CF56)]
    public class SunShieldComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xBCCCAE0994A9E438)]
    public class SunShieldComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public FRange AllowedShieldRotationRange;
        [RTTI.Member(1, 0x30, "Logic")] public float FlipShieldRotationThreshold;
        [RTTI.Member(2, 0x34, "Logic")] public float ShieldRotationMaxSpeed;
    }

    [RTTI.Serializable(0xA1A46C3E12DC98C)]
    public class SunlightMover : AttachToHelperMover
    {
    }

    [RTTI.Serializable(0x9E9625DA9AABD559)]
    public class SunlightMoverResource : AttachToHelperMoverResource
    {
    }

    [RTTI.Serializable(0x51B76B2E985C3D87)]
    public class SurfaceFormat
    {
        [RTTI.Member(0, 0x0)] public int Width;
        [RTTI.Member(1, 0x4)] public int Height;
        [RTTI.Member(2, 0x8)] public EPixelFormat PixelFormat;
    }

    [RTTI.Serializable(0x7BF1A2FD82F3F531)]
    public class SusceptibleToDamageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x8ACA75C3B1509B4E)]
    public class SusceptibleToDamageComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<DamageTypeResource>> DamageTypeResources;
        [RTTI.Member(1, 0x38, "Logic")] public CPtr<EntityAction> Action;
        [RTTI.Member(2, 0x40, "Logic")] public bool OnlyFromEnemies;
        [RTTI.Member(3, 0x41, "Logic")] public bool OnlyFromPlayer;
        [RTTI.Member(4, 0x42, "Logic")] public bool SendTelemetry;
        [RTTI.Member(5, 0x44, "Logic")] public float DamageAmount;
        [RTTI.Member(6, 0x48, "Logic")] public bool FilterDamageByHeading;
        [RTTI.Member(7, 0x4C, "Logic")] public float FilterDamageByHeadingAngle;
        [RTTI.Member(8, 0x50, "Logic")] public float FilterDamageByHeadingRange;
    }

    [RTTI.Serializable(0x1E8E151A9853197F)]
    public class SuspendPlayerControlEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0x6E778B972E04AC9)]
    public class SuspendPlayerControlEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> PlayerActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public Array<EControlType> ControlTypes;
        [RTTI.Member(2, 0x50, "Logic")] public bool Crouch;
        [RTTI.Member(3, 0x51, "Logic")] public bool StowWeapon;
        [RTTI.Member(4, 0x52, "Logic")] public bool SuspendMenu;
    }

    [RTTI.Serializable(0xEC43C54E1998059)]
    public class SwimStatePerkMapping : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<PerkLevel> PerkLevel;
        [RTTI.Member(1, 0x10)] public float AdditionalBreathingTime;
    }

    [RTTI.Serializable(0xCB84683AEC76B5D2)]
    public class Switch : InteractiveEntity
    {
    }

    [RTTI.Serializable(0x5B04B451D08B9AC5)]
    public class SwitchEntityStateAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityStateMachineResource> StateMachineResource;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<EntityState> FromState;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<EntityState> ToState;
    }

    [RTTI.Serializable(0x28522102D7329142)]
    public class SwitchInventoryEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public CPtr<InventoryEntityResource> InventoryEntity;
        [RTTI.Member(1, 0x38, "Logic")] public bool Immediate;
        [RTTI.Member(2, 0x39, "Logic")] public bool ForceSwitch;
    }

    [RTTI.Serializable(0x8AEB6ED41BCAA542)]
    public class SwitchObstacleTypeAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public EObstacleType ObstacleType;
    }

    [RTTI.Serializable(0xFA7372EC4BFD9881)]
    public class SwitchRep : InteractiveEntityRep
    {
    }

    [RTTI.Serializable(0x322EEB5C01D2EA1E)]
    public class SwitchResource : InteractiveEntityResource
    {
        [RTTI.Member(0, 0x298, "Representation")] public String EnabledShaderVariableID;
        [RTTI.Member(1, 0x2A0, "Representation")] public Array<String> CustomShaderVariableIDs;
        [RTTI.Member(2, 0x2B0, "Representation")] public Ref<LightResource> SwitchOnLightResource;
        [RTTI.Member(3, 0x2B8, "Representation")] public Ref<LightResource> SwitchOffLightResource;
        [RTTI.Member(4, 0x2C0, "Representation")] public Ref<LightResource> SwitchDisabledLightResource;
        [RTTI.Member(5, 0x2C8, "Representation")] public Ref<LightResource> SwitchDeadLightResource;
        [RTTI.Member(6, 0x2D0, "Representation")] public Mat44 LightOrientation;
        [RTTI.Member(7, 0x310, "Logic")] public bool AwardPoints;
        [RTTI.Member(8, 0x311, "Logic")] public bool DisableAfterUse;
        [RTTI.Member(9, 0x318, "Logic")] public Ref<ElectricityEmitSettings> ElectricityEmitSettings;
        [RTTI.Member(10, 0x320, "Logic")] public CPtr<EntityAction> SwitchOnAction;
    }

    [RTTI.Serializable(0x7ECC3C6767F87062)]
    public class SwitchScriptSwitchOnEvent : RequestOwnershipEvent
    {
    }

    [RTTI.Serializable(0x8EAB7F1CC8DFCFFF)]
    public class SwitchStateAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Array<Ref<DestructibilityPartStateResource>> RandomNextStates;
    }

    [RTTI.Serializable(0x2C2E2FB7B9D988D5)]
    public class SystemParams
    {
        [RTTI.Member(0, 0x0, true)] public ELanguage SpokenLanguage;
        [RTTI.Member(1, 0x4, true)] public ELanguage WrittenLanguage;
        [RTTI.Member(2, 0x8, true)] public bool EULAEnabled;
        [RTTI.Member(3, 0x9, true)] public bool TelemetryEnabled;
        [RTTI.Member(4, 0x10, true)] public Array<ScriptGameGlobal> GameGlobals;
        [RTTI.Member(5, 0x20, true)] public float MusicVolume;
        [RTTI.Member(6, 0x24, true)] public float SpeechVolume;
        [RTTI.Member(7, 0x28, true)] public float SFXVolume;
        [RTTI.Member(8, 0x2C, true)] public bool WantsSystemBGM;
        [RTTI.Member(9, 0x30, true)] public int SoundMasterType;
        [RTTI.Member(10, 0x38, true)] public WString AudioOutputDeviceID;
        [RTTI.Member(11, 0x40, true)] public float GammaCorrection;
        [RTTI.Member(12, 0x44, true)] public int ColorSchemeID;
        [RTTI.Member(13, 0x48, true)] public bool StereoscopicEnabled;
        [RTTI.Member(14, 0x4C, true)] public float Stereoscopic3DScreenFactor;
        [RTTI.Member(15, 0x50, true)] public float StereoscopicDepthMultiplier;
        [RTTI.Member(16, 0x54, true)] public float StereoscopicFPDepthMultiplier;
        [RTTI.Member(17, 0x58, true)] public int Resolution;
        [RTTI.Member(18, 0x5C, true)] public int FieldOfView;
        [RTTI.Member(19, 0x60, true)] public int AdaptiveFPS;
        [RTTI.Member(20, 0x64, true)] public int FPSLimit;
        [RTTI.Member(21, 0x68, true)] public int FPSLimitIndex;
        [RTTI.Member(22, 0x6C, true)] public float RenderScale;
        [RTTI.Member(23, 0x70, true)] public int AspectRatioIndex;
        [RTTI.Member(24, 0x74, true)] public int ScreenMode;
        [RTTI.Member(25, 0x78, true)] public int Monitor;
        [RTTI.Member(26, 0x7C, true)] public int RefreshRate;
        [RTTI.Member(27, 0x80, true)] public int RefreshRateIndex;
        [RTTI.Member(28, 0x84, true)] public bool VsyncEnabled;
        [RTTI.Member(29, 0x88, true)] public int HDRBrightness;
        [RTTI.Member(30, 0x8C, true)] public int HDRWhitepoint;
        [RTTI.Member(31, 0x90, true)] public bool HUDToEdgesEnabled;
        [RTTI.Member(32, 0x94, true)] public float HUDScale;
        [RTTI.Member(33, 0x98, true)] public IVec2 DesiredResolution;
        [RTTI.Member(34, 0xA0, true)] public IVec2 DesiredWindowSize;
        [RTTI.Member(35, 0xA8, true)] public EGraphicsPreset Preset;
        [RTTI.Member(36, 0xAC, true)] public int Texture;
        [RTTI.Member(37, 0xB0, true)] public int Model;
        [RTTI.Member(38, 0xB4, true)] public int AnisotropicFilter;
        [RTTI.Member(39, 0xBC, true)] public int Shadow;
        [RTTI.Member(40, 0xC0, true)] public int Clouds;
        [RTTI.Member(41, 0xC4, true)] public int PPAA;
        [RTTI.Member(42, 0xC8, true)] public bool MotionBlurEnabled;
        [RTTI.Member(43, 0xCC, true)] public int AmbientOcclusion;
        [RTTI.Member(44, 0xD0, true)] public int Reflection;
        [RTTI.Member(45, 0xD8, true)] public String DisplayImage;
        [RTTI.Member(46, 0xE0, true)] public int PhotoModeOverlayIndex;
        [RTTI.Member(47, 0xE4, true)] public int PhotoModeBorderIndex;
        [RTTI.Member(48, 0xE8, true)] public int PhotoModeSmallLogoIndex;
        [RTTI.Member(49, 0xEC, true)] public int PhotoModeColorizeIndex;
        [RTTI.Member(50, 0xF0, true)] public float PhotoModeColorizeIntensity;
        [RTTI.Member(51, 0xF4, true)] public bool PhotoModeVignetteEnabled;
        [RTTI.Member(52, 0xF8, true)] public int PhotoModeVignetteSizeIndex;
        [RTTI.Member(53, 0xFC, true)] public float PhotoModeVignetteIntensity;
        [RTTI.Member(54, 0x100, true)] public bool PhotoModeDepthOfFieldEnabled;
        [RTTI.Member(55, 0x104, true)] public int PhotoModeDepthOfFieldFocusDistance;
        [RTTI.Member(56, 0x108, true)] public float PhotoModeDepthOfFieldAperture;
        [RTTI.Member(57, 0x10C, true)] public bool PhotoModeGrainEnabled;
        [RTTI.Member(58, 0x110, true)] public float PhotoModeGrainIntensity;
        [RTTI.Member(59, 0x114, true)] public float PhotoModeOverExposure;
        [RTTI.Member(60, 0x118, true)] public bool PhotoModeGreetingsEnabled;
        [RTTI.Member(61, 0x120, true)] public SPStatistics SPStatistics;
        [RTTI.Member(62, 0x158, true)] public bool GameFinished;
        [RTTI.Member(63, 0x15C, true)] public EDifficulty HighestCompletedNewGamePlusDifficulty;
        [RTTI.Member(64, 0x160, true)] public String ContinueGameState;
        [RTTI.Member(65, 0x168, true)] public String ContinueGameSettings;
        [RTTI.Member(66, 0x170, true)] public int ViewportIndex;
        [RTTI.Member(67, 0x178, true)] public Array<String> AuthenticatedPlaylistID;
        [RTTI.Member(68, 0x18C, true)] public EPS4ProRenderMode PS4ProRenderMode;
        [RTTI.Member(69, 0x190, true)] public bool HDREnabled;
    }

    [RTTI.Serializable(0x105214CAB14D8AF9)]
    public class SystemQuestTrigger : QuestTrigger
    {
    }

    [RTTI.Serializable(0x9A39895C0D852C8F)]
    public class SystemQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0xE77A48BA47C630AE)]
    public class TabHeaderTag : VisualTag
    {
    }

    [RTTI.Serializable(0xB10A90F25E3439BE)]
    public class TabHeaderWidget : Widget
    {
    }

    [RTTI.Serializable(0x2B20F2BCDB6AD74A)]
    public class TabTag : VisualTag
    {
    }

    [RTTI.Serializable(0x4292FC863A5108DD)]
    public class TabWidget : Widget
    {
    }

    [RTTI.Serializable(0x7400C93A0641CA6)]
    public class TabboxTag : VisualTag
    {
    }

    [RTTI.Serializable(0xF6C74526B0064D93)]
    public class TabboxWidget : Widget
    {
    }

    [RTTI.Serializable(0xDEE9D55E6B1B9C87)]
    public class TabpaneTag : VisualTag
    {
    }

    [RTTI.Serializable(0xB4873633949A22D2)]
    public class TabpaneWidget : Widget
    {
    }

    [RTTI.Serializable(0x6231F44FD58D7E6F)]
    public class Tag : MenuNode
    {
    }

    [RTTI.Serializable(0x52B557A4CB1CDA70)]
    public class TagEvent : RTTIObject
    {
    }

    [RTTI.Serializable(0xE10B783ED34C3DAA)]
    public class TagEventButtonPressAndHoldFinish : TagEventInput
    {
    }

    [RTTI.Serializable(0xBC31046C2810590F)]
    public class TagEventButtonPressAndHoldStart : TagEventInput
    {
    }

    [RTTI.Serializable(0x96EC8067FD0C9D4A)]
    public class TagEventChildrenUpdated : TagEvent
    {
    }

    [RTTI.Serializable(0x5EB9DE69D05CCABE)]
    public class TagEventControllerTypeChanged : TagEvent
    {
    }

    [RTTI.Serializable(0x3B9F54AFF7F1EED6)]
    public class TagEventCreate : TagEvent
    {
    }

    [RTTI.Serializable(0x7C09A1B63CE84F1B)]
    public class TagEventCursor : TagEvent
    {
    }

    [RTTI.Serializable(0xD921F19495D4A7DB)]
    public class TagEventDataInvalidate : TagEvent
    {
    }

    [RTTI.Serializable(0x8DFB9DFB6313794D)]
    public class TagEventDataUpdate : TagEvent
    {
    }

    [RTTI.Serializable(0xA676DAC9D3A0A8EA)]
    public class TagEventDeinitialize : TagEvent
    {
    }

    [RTTI.Serializable(0xEA32651B79A57FDE)]
    public class TagEventDownloadComplete : TagEvent
    {
    }

    [RTTI.Serializable(0xEB8F5A75AF6C81DC)]
    public class TagEventFocusOff : TagEvent
    {
    }

    [RTTI.Serializable(0x22A067646203ADAC)]
    public class TagEventFocusOn : TagEvent
    {
    }

    [RTTI.Serializable(0xF07E92767FF6F15F)]
    public class TagEventInitialize : TagEvent
    {
    }

    [RTTI.Serializable(0x712C2F1740B770A6)]
    public class TagEventInput : TagEvent
    {
    }

    [RTTI.Serializable(0x6C61A9F10A51D9C)]
    public class TagEventKeyBindFinished : TagEvent
    {
    }

    [RTTI.Serializable(0x4DDC2DD149BA92F7)]
    public class TagEventMenuStateChanged : TagEvent
    {
    }

    [RTTI.Serializable(0x89C112B0956554FB)]
    public class TagEventMouseHoverIn : TagEvent
    {
    }

    [RTTI.Serializable(0xB5228268DD5EE483)]
    public class TagEventPageOff : TagEvent
    {
    }

    [RTTI.Serializable(0x6FDA31B00A2A2144)]
    public class TagEventPageOn : TagEvent
    {
    }

    [RTTI.Serializable(0xD2D153B2950B34DD)]
    public class TagEventPlayUnhandledSound : TagEventInput
    {
    }

    [RTTI.Serializable(0x7228C6CFF77166A4)]
    public class TagEventUnpluggedMonitor : TagEvent
    {
    }

    [RTTI.Serializable(0x81830657DAFD5E00)]
    public class TagEventValueChanged : TagEvent
    {
    }

    [RTTI.Serializable(0x1ABB0DDA33FDEC79)]
    public class TagEventWindowMoved : TagEvent
    {
    }

    [RTTI.Serializable(0x8363DE3F10CA3486)]
    public class TagProperty : BoolPropertyBase
    {
    }

    [RTTI.Serializable(0x8E5A2094D434FDDA)]
    public class TagPropertyLink : PropertyLinkBase
    {
        [RTTI.Member(0, 0x0)] public Ref<TagProperty> Property;
    }

    [RTTI.Serializable(0xF48DDC4A84B0E781)]
    public class TagPropertyLinkCollection : PropertyLinkCollectionBase
    {
    }

    [RTTI.Serializable(0x1D10FC8FC6946502)]
    public class TalkComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5D4CD21AC1AB7603)]
    public class TalkComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x920580544F5B9C89)]
    public class TalkPriority : Resource
    {
        [RTTI.Member(0, 0x28)] public float Priority;
    }

    [RTTI.Serializable(0x71E49D24478F77C5)]
    public class TaperedCapsule
    {
        [RTTI.Member(0, 0x0)] public Vec3 From;
        [RTTI.Member(1, 0x10)] public Vec3 To;
        [RTTI.Member(2, 0x20)] public float FromRadius;
        [RTTI.Member(3, 0x24)] public float ToRadius;
    }

    [RTTI.Serializable(0x37967630E9A385A)]
    public class TargetArrow : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x1DE21386678B77E6)]
    public class TargetArrowComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6A8BA6E93E1C3707)]
    public class TargetArrowComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public ETargetArrowType Type;
        [RTTI.Member(1, 0x2C, "Logic")] public RGBAColor Color;
        [RTTI.Member(2, 0x30, "Logic")] public bool ShowDistance;
        [RTTI.Member(3, 0x34, "Logic")] public float Lifetime;
    }

    [RTTI.Serializable(0x2589EB5D1356659D)]
    public class TargetSelectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x914982BCE0D5A59B)]
    public class TargetSelectionComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x6621F6773B7EAF7B)]
    public class TargetableTargetArrowComponent : TargetArrowComponent
    {
    }

    [RTTI.Serializable(0xEF8D42D6167F50A3)]
    public class TargetableTargetArrowComponentResource : TargetArrowComponentResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public CPtr<EntityAction> TargetedAction;
        [RTTI.Member(1, 0x40, "Logic")] public CPtr<EntityAction> EndTargetedAction;
        [RTTI.Member(2, 0x48, "Logic")] public float TargetingDuration;
    }

    [RTTI.Serializable(0x40258F6511713292)]
    public class TelemetryAddedToHealthBucket : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String item_name;
        [RTTI.Member(1, 0x50)] public float amount_added;
        [RTTI.Member(2, 0x54)] public float new_total_amount;
        [RTTI.Member(3, 0x60)] public Vec3 position;
    }

    [RTTI.Serializable(0x146143BA0755BE3C)]
    public class TelemetryAlert : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int type;
        [RTTI.Member(1, 0x28)] public String title;
        [RTTI.Member(2, 0x30)] public String message;
        [RTTI.Member(3, 0x38)] public String context;
        [RTTI.Member(4, 0x40)] public String filename;
        [RTTI.Member(5, 0x48)] public int line_number;
    }

    [RTTI.Serializable(0x85EB8209358B2FF8)]
    public class TelemetryAssert : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String filename;
        [RTTI.Member(1, 0x50)] public int line_number;
        [RTTI.Member(2, 0x58)] public String condition;
        [RTTI.Member(3, 0x60)] public String message;
        [RTTI.Member(4, 0x68)] public String extra_info;
        [RTTI.Member(5, 0x70)] public Array<String> call_stack;
    }

    [RTTI.Serializable(0xF3D6198452D469D)]
    public class TelemetryBootStart : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String title_name;
        [RTTI.Member(1, 0x28)] public String issuer_id;
        [RTTI.Member(2, 0x30)] public String platform;
        [RTTI.Member(3, 0x38)] public String device_type;
        [RTTI.Member(4, 0x40)] public String build_version;
        [RTTI.Member(5, 0x48)] public bool is_trial;
        [RTTI.Member(6, 0x50)] public String build_type;
        [RTTI.Member(7, 0x58)] public int play_go_source;
        [RTTI.Member(8, 0x60)] public String host_name;
        [RTTI.Member(9, 0x68)] public String command_line;
    }

    [RTTI.Serializable(0xD7B2C0DF54D5CA4B)]
    public class TelemetryBootStartGame : TelemetryBootStart
    {
    }

    [RTTI.Serializable(0x4A6B672F9DB1DA79)]
    public class TelemetryBrowseProduct : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String ProductLabel;
    }

    [RTTI.Serializable(0x8B48BDE1D1FF58C2)]
    public class TelemetryCharacterUpgrade : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String UpgradeName;
        [RTTI.Member(1, 0x50)] public int PlayerLevel;
    }

    [RTTI.Serializable(0xEEA9489EB96F5365)]
    public class TelemetryCollectableUnlocked : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String name;
        [RTTI.Member(1, 0x50)] public String type;
        [RTTI.Member(2, 0x58)] public int total_unlocked;
        [RTTI.Member(3, 0x60)] public Vec3 position;
    }

    [RTTI.Serializable(0xC7DA31D464A47041)]
    public class TelemetryComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xE1763A96099EA3CA)]
    public class TelemetryComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool SpawnEvent;
        [RTTI.Member(1, 0x29, "Logic")] public bool KillEvent;
        [RTTI.Member(2, 0x2A, "Logic")] public bool PositionUpdates;
        [RTTI.Member(3, 0x2C, "Logic")] public float MinTimeBetweenPositionUpdates;
        [RTTI.Member(4, 0x30, "Logic")] public float MinDistanceBetweenPositionUpdates;
        [RTTI.Member(5, 0x34, "Logic")] public ETelemetryDamageTracking IncomingDamageTracking;
        [RTTI.Member(6, 0x38, "Logic")] public float CombatTimeout;
    }

    [RTTI.Serializable(0xA05C95C51826FB02)]
    public class TelemetryCorruptedFactDatabase : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String type;
        [RTTI.Member(1, 0x50)] public String context;
        [RTTI.Member(2, 0x58)] public int context_length;
        [RTTI.Member(3, 0x5C)] public int context_written_length;
        [RTTI.Member(4, 0x60)] public int float_length;
        [RTTI.Member(5, 0x64)] public int float_non_persistent_length;
        [RTTI.Member(6, 0x68)] public int float_written_length;
        [RTTI.Member(7, 0x70)] public Array<String> float_fact_values;
        [RTTI.Member(8, 0x80)] public Array<String> float_non_persistent_facts;
        [RTTI.Member(9, 0x90)] public int int_length;
        [RTTI.Member(10, 0x94)] public int int_non_persistent_length;
        [RTTI.Member(11, 0x98)] public int int_written_length;
        [RTTI.Member(12, 0xA0)] public Array<String> int_fact_values;
        [RTTI.Member(13, 0xB0)] public Array<String> int_non_persistent_facts;
        [RTTI.Member(14, 0xC0)] public int bool_length;
        [RTTI.Member(15, 0xC4)] public int bool_non_persistent_length;
        [RTTI.Member(16, 0xC8)] public int bool_written_length;
        [RTTI.Member(17, 0xD0)] public Array<String> bool_fact_values;
        [RTTI.Member(18, 0xE0)] public Array<String> bool_non_persistent_facts;
        [RTTI.Member(19, 0xF0)] public int enum_length;
        [RTTI.Member(20, 0xF4)] public int enum_non_persistent_length;
        [RTTI.Member(21, 0xF8)] public int enum_written_length;
        [RTTI.Member(22, 0x100)] public Array<String> enum_fact_values;
        [RTTI.Member(23, 0x110)] public Array<String> enum_non_persistent_facts;
    }

    [RTTI.Serializable(0x26A3CE1543BA7FD2)]
    public class TelemetryCraft : TelemetryInventoryItemsBase
    {
        [RTTI.Member(0, 0x58)] public String crafter_entity_id;
        [RTTI.Member(1, 0x60)] public String crafted_item_uuid;
        [RTTI.Member(2, 0x68)] public int crafted_amount;
    }

    [RTTI.Serializable(0x82C1431EF1F3335A)]
    public class TelemetryCrash : TelemetryGamePositions
    {
        [RTTI.Member(0, 0x78)] public String error;
        [RTTI.Member(1, 0x80)] public String executable_name;
        [RTTI.Member(2, 0x88)] public Array<String> callstack;
        [RTTI.Member(3, 0xA0)] public String register_content;
        [RTTI.Member(4, 0xA8)] public String cpu_revision;
        [RTTI.Member(5, 0xB0)] public String context;
        [RTTI.Member(6, 0xB8)] public String asset_memory_layout;
        [RTTI.Member(7, 0xC0)] public String log;
        [RTTI.Member(8, 0xC8)] public String assertions;
    }

    [RTTI.Serializable(0x7E00B04A9A8AE346)]
    public class TelemetryDifficultyChanged : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public EDifficulty difficulty;
        [RTTI.Member(1, 0x4C)] public EDifficulty previous_difficulty;
    }

    [RTTI.Serializable(0xAD66E382C13A2D6C)]
    public class TelemetryDiscoverableAreaStateSwitch : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String AreaName;
        [RTTI.Member(1, 0x50)] public String AreaType;
        [RTTI.Member(2, 0x58)] public WorldPosition AreaPosition;
        [RTTI.Member(3, 0x70)] public WorldPosition PlayerPosition;
        [RTTI.Member(4, 0x88)] public EDiscoveryState State;
    }

    [RTTI.Serializable(0x9070B62F8E23F938)]
    public class TelemetryEntityDamageSummary : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String entity_id;
        [RTTI.Member(1, 0x50)] public String damage_type_name;
        [RTTI.Member(2, 0x58)] public String weapon_id;
        [RTTI.Member(3, 0x60)] public String weapon_name;
        [RTTI.Member(4, 0x68)] public float part_damage_multiplier;
        [RTTI.Member(5, 0x6C)] public float health_lost;
    }

    [RTTI.Serializable(0x2CFA3C54FD1EE9F1)]
    public class TelemetryEntityFellThroughWorld : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String EntityID;
        [RTTI.Member(1, 0x50)] public Vec3 Position;
    }

    [RTTI.Serializable(0xCC444A5D8A9AE578)]
    public class TelemetryEntityKilled : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String entity_id;
        [RTTI.Member(1, 0x50)] public String entity_name;
        [RTTI.Member(2, 0x58)] public String entity_instance_id;
        [RTTI.Member(3, 0x60)] public Vec3 position;
        [RTTI.Member(4, 0x70)] public String resource_uuid;
        [RTTI.Member(5, 0x78)] public String resource_name;
        [RTTI.Member(6, 0x80)] public String spawn_setup_uuid;
        [RTTI.Member(7, 0x88)] public String killer_entity_id;
        [RTTI.Member(8, 0x90)] public String killer_entity_name;
        [RTTI.Member(9, 0x98)] public String killer_entity_instance_id;
        [RTTI.Member(10, 0xA0)] public String killer_faction;
        [RTTI.Member(11, 0xB0)] public Vec3 killer_position;
        [RTTI.Member(12, 0xC0)] public String killer_spawn_setup_uuid;
        [RTTI.Member(13, 0xC8)] public String weapon_resource_uuid;
        [RTTI.Member(14, 0xD0)] public String weapon_name;
        [RTTI.Member(15, 0xD8)] public String ComponentName;
        [RTTI.Member(16, 0xE0)] public String damage_type_resource_uuid;
        [RTTI.Member(17, 0xE8)] public bool headshot;
        [RTTI.Member(18, 0xE9)] public bool zoomed;
        [RTTI.Member(19, 0xEA)] public bool Crouched;
        [RTTI.Member(20, 0xEC)] public float time_since_first_damage;
        [RTTI.Member(21, 0xF0)] public float non_combat_time_since_first_damage;
    }

    [RTTI.Serializable(0x4F9DF2EDFCD4418D)]
    public class TelemetryEntityPosition : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String entity_id;
        [RTTI.Member(1, 0x50)] public String entity_name;
        [RTTI.Member(2, 0x58)] public String entity_instance_id;
        [RTTI.Member(3, 0x60)] public String resource_name;
        [RTTI.Member(4, 0x68)] public String resource_uuid;
        [RTTI.Member(5, 0x70)] public Vec3 position;
        [RTTI.Member(6, 0x80)] public Vec3 prev_position;
        [RTTI.Member(7, 0x90)] public float heading;
        [RTTI.Member(8, 0x98)] public double prev_game_time;
    }

    [RTTI.Serializable(0x8FC668C2684284CD)]
    public class TelemetryEntitySpawn : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String EntityID;
        [RTTI.Member(1, 0x50)] public Vec3 Pos;
        [RTTI.Member(2, 0x60)] public float Heading;
        [RTTI.Member(3, 0x68)] public String EntityName;
        [RTTI.Member(4, 0x70)] public String ResourceName;
        [RTTI.Member(5, 0x78)] public String SpawnSetupID;
        [RTTI.Member(6, 0x80)] public String ClassName;
        [RTTI.Member(7, 0x88)] public String EntityFaction;
    }

    [RTTI.Serializable(0xF7158F9C49B99803)]
    public class TelemetryEntityUsed : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String ResourceName;
        [RTTI.Member(1, 0x50)] public Vec3 Position;
    }

    [RTTI.Serializable(0xFA54ED0A315DB510)]
    public class TelemetryErrorEvent : TelemetryNetworkStats
    {
        [RTTI.Member(0, 0xD0)] public int error_code;
        [RTTI.Member(1, 0xD8)] public String error_type;
        [RTTI.Member(2, 0xE0)] public String error_message;
    }

    [RTTI.Serializable(0x1E9D49B0355EC62)]
    public class TelemetryEvent : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public Ref<TelemetryHeader> Header;
        [RTTI.Member(1, 0x28)] public Ref<RTTIRefObject> Data;
    }

    [RTTI.Serializable(0xFD464E3F0D121C74)]
    public class TelemetryEventAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Event;
        [RTTI.Member(1, 0x38, "Logic")] public String Parameter1;
        [RTTI.Member(2, 0x40, "Logic")] public String Parameter2;
    }

    [RTTI.Serializable(0x71998371386200FF)]
    public class TelemetryEventActionData : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String entity_id;
        [RTTI.Member(1, 0x50)] public Vec3 position;
        [RTTI.Member(2, 0x60)] public String event_name;
        [RTTI.Member(3, 0x68)] public String parameter1;
        [RTTI.Member(4, 0x70)] public String parameter2;
    }

    [RTTI.Serializable(0x99598652025A8EFD)]
    public class TelemetryEventList : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public int Count;
        [RTTI.Member(1, 0x28)] public Array<Ref<TelemetryEvent>> Events;
    }

    [RTTI.Serializable(0x92A5CB01621C097A)]
    public class TelemetryFastTravel : TelemetryGameBase
    {
        [RTTI.Member(0, 0x50)] public Vec3 start_position;
        [RTTI.Member(1, 0x60)] public Vec3 end_position;
        [RTTI.Member(2, 0x70)] public float travel_time;
        [RTTI.Member(3, 0x74)] public float travel_distance;
        [RTTI.Member(4, 0x78)] public bool has_skipped_to_destination;
    }

    [RTTI.Serializable(0xBE3656EDC401E173)]
    public class TelemetryFrameStats : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String LevelID;
        [RTTI.Member(1, 0x50)] public int ActivePlayerCount;
        [RTTI.Member(2, 0x54)] public int MinHeapFree;
        [RTTI.Member(3, 0x58)] public int MaxHeapFree;
        [RTTI.Member(4, 0x60)] public Vec3 PlayerPosition;
        [RTTI.Member(5, 0x70)] public float PlayerZDegrees;
        [RTTI.Member(6, 0x74)] public float scene_static_memory_pct;
        [RTTI.Member(7, 0x78)] public int scene_total_static_setups;
        [RTTI.Member(8, 0x7C)] public int scene_total_dynamic_setups;
        [RTTI.Member(9, 0x80)] public int scene_visible_setups;
        [RTTI.Member(10, 0x84)] public int scene_sun_shadow_setups;
        [RTTI.Member(11, 0x88)] public float scene_query_time;
        [RTTI.Member(12, 0x8C)] public float scene_sun_shadow_query_time;
    }

    [RTTI.Serializable(0xE5B37178A8EA6F2)]
    public class TelemetryGameBase : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String game_id;
        [RTTI.Member(1, 0x28)] public String level_uuid;
        [RTTI.Member(2, 0x30)] public String active_quest_uuid;
        [RTTI.Member(3, 0x38)] public String branch_id;
        [RTTI.Member(4, 0x40)] public double game_time;
    }

    [RTTI.Serializable(0xA0397C2A35035A6F)]
    public class TelemetryGameEnd : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String end_reason;
        [RTTI.Member(1, 0x50)] public String mode;
        [RTTI.Member(2, 0x58)] public String level_id;
        [RTTI.Member(3, 0x60)] public int local_player_count;
        [RTTI.Member(4, 0x64)] public int player_count;
        [RTTI.Member(5, 0x68)] public int duration_secs;
        [RTTI.Member(6, 0x6C)] public bool is_completed;
    }

    [RTTI.Serializable(0xEEAA130E70D75C1B)]
    public class TelemetryGameEndGame : TelemetryGameEnd
    {
    }

    [RTTI.Serializable(0x191731B98A22BF66)]
    public class TelemetryGamePositions : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public WorldPosition player_position;
        [RTTI.Member(1, 0x60)] public WorldPosition camera_position;
    }

    [RTTI.Serializable(0xDF223C9FD5FAE251)]
    public class TelemetryGameSettings : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public bool use_breadcrumbing;
        [RTTI.Member(1, 0x49)] public bool use_breadcrumbing_for_way_point;
        [RTTI.Member(2, 0x4A)] public bool show_headgear;
        [RTTI.Member(3, 0x50)] public String hud_visibility_master_switch;
        [RTTI.Member(4, 0x58)] public bool show_hud_when_touching_touchpad;
        [RTTI.Member(5, 0x59)] public bool inverted_look_x_axis;
        [RTTI.Member(6, 0x5A)] public bool inverted_look_y_axis;
        [RTTI.Member(7, 0x5B)] public bool inverted_flight_y_axis;
        [RTTI.Member(8, 0x5C)] public float look_sensitivity_x_axis;
        [RTTI.Member(9, 0x60)] public float look_sensitivity_y_axis;
        [RTTI.Member(10, 0x64)] public float mouse_look_sensitivity_x_axis;
        [RTTI.Member(11, 0x68)] public float mouse_look_sensitivity_y_axis;
        [RTTI.Member(12, 0x6C)] public bool aim_assist_enabled;
        [RTTI.Member(13, 0x6D)] public bool horse_follows_roads_enabled;
        [RTTI.Member(14, 0x6E)] public bool sprint_toggle;
        [RTTI.Member(15, 0x70)] public int controller_config_id;
        [RTTI.Member(16, 0x74)] public float music_volume;
        [RTTI.Member(17, 0x78)] public float speech_volume;
        [RTTI.Member(18, 0x7C)] public float sfx_volume;
        [RTTI.Member(19, 0x80)] public int sound_master_type;
        [RTTI.Member(20, 0x84)] public bool show_subtitles;
        [RTTI.Member(21, 0x88)] public String written_language;
        [RTTI.Member(22, 0x90)] public String spoken_language;
        [RTTI.Member(23, 0x98)] public String display_resoultion;
        [RTTI.Member(24, 0xA0)] public int filed_of_view;
        [RTTI.Member(25, 0xA4)] public int adaptive_fps;
        [RTTI.Member(26, 0xA8)] public int fps_limit;
        [RTTI.Member(27, 0xAC)] public float render_scare;
        [RTTI.Member(28, 0xB0)] public bool v_sync;
        [RTTI.Member(29, 0xB4)] public float view_brightness;
        [RTTI.Member(30, 0xB8)] public bool hdr_enabled;
        [RTTI.Member(31, 0xBC)] public float gamma_correction;
        [RTTI.Member(32, 0xC0)] public String texture_level;
        [RTTI.Member(33, 0xC8)] public String model_quality;
        [RTTI.Member(34, 0xD0)] public String anisotropic_filter;
        [RTTI.Member(35, 0xD8)] public String reflection_level;
        [RTTI.Member(36, 0xE0)] public String shadow_level;
        [RTTI.Member(37, 0xE8)] public String clouds_level;
        [RTTI.Member(38, 0xF0)] public String AALevel;
        [RTTI.Member(39, 0xF8)] public bool motion_blur_enable;
        [RTTI.Member(40, 0x100)] public String ambient_occlusion;
    }

    [RTTI.Serializable(0x836A3EB7E8E7167B)]
    public class TelemetryGameStart : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String mode;
        [RTTI.Member(1, 0x50)] public String level_id;
        [RTTI.Member(2, 0x58)] public String WrittenLanguage;
        [RTTI.Member(3, 0x60)] public String SpokenLanguage;
    }

    [RTTI.Serializable(0x9956678DAE4ACD9C)]
    public class TelemetryGameStartGame : TelemetryGameStart
    {
    }

    [RTTI.Serializable(0xBF4F605B75146234)]
    public class TelemetryHardwareProfile : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String openpsid;
        [RTTI.Member(1, 0x28)] public int language_setting;
        [RTTI.Member(2, 0x30)] public String tv_resolution;
        [RTTI.Member(3, 0x38)] public bool capable_3d;
        [RTTI.Member(4, 0x39)] public bool capable_hdr;
        [RTTI.Member(5, 0x3C)] public int refresh_rate;
        [RTTI.Member(6, 0x40)] public int hardware_revision;
    }

    [RTTI.Serializable(0xC810D870AD48C8D4)]
    public class TelemetryHardwareProfileGame : TelemetryHardwareProfile
    {
        [RTTI.Member(0, 0x48)] public String graphical_setting;
        [RTTI.Member(1, 0x50)] public bool hdr_setting;
    }

    [RTTI.Serializable(0x47642D8E041FFD9E)]
    public class TelemetryHeader : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String user_id;
        [RTTI.Member(1, 0x28)] public String psn_account;
        [RTTI.Member(2, 0x30)] public String title_id;
        [RTTI.Member(3, 0x38)] public uint64 client_timestamp;
        [RTTI.Member(4, 0x40)] public int client_timezone;
        [RTTI.Member(5, 0x48)] public String session_id;
        [RTTI.Member(6, 0x50)] public String environment;
        [RTTI.Member(7, 0x58)] public String build_version;
    }

    [RTTI.Serializable(0xA71A729B7C1AB7D0)]
    public class TelemetryInventoryAdded : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String item_resource_uuid;
        [RTTI.Member(1, 0x50)] public String item_name;
        [RTTI.Member(2, 0x58)] public String item_origin_uuid;
        [RTTI.Member(3, 0x60)] public String item_origin;
        [RTTI.Member(4, 0x68)] public int amount;
        [RTTI.Member(5, 0x6C)] public int new_total_amount;
        [RTTI.Member(6, 0x70)] public int max_fit_amount;
        [RTTI.Member(7, 0x74)] public int inventory_slots_left;
        [RTTI.Member(8, 0x78)] public EInventoryCategory category;
        [RTTI.Member(9, 0x79)] public EInventoryItemAddType Reason;
        [RTTI.Member(10, 0x80)] public Vec3 location;
        [RTTI.Member(11, 0x90)] public int player_level;
        [RTTI.Member(12, 0x98)] public String quest_uuid;
        [RTTI.Member(13, 0xA0)] public String QuestName;
    }

    [RTTI.Serializable(0x610BA1F2A12F4FC8)]
    public class TelemetryInventoryEntityActivation : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String InventoryEntityResourceName;
        [RTTI.Member(1, 0x50)] public bool Activated;
    }

    [RTTI.Serializable(0x5611B66E264E45C2)]
    public class TelemetryInventoryItemAmount
    {
        [RTTI.Member(0, 0x0)] public String item_uuid;
        [RTTI.Member(1, 0x8)] public int amount;
    }

    [RTTI.Serializable(0xD45F7D2F5EA385F)]
    public class TelemetryInventoryItemSummaryInfo
    {
        [RTTI.Member(0, 0x0)] public String ItemResourceUUID;
        [RTTI.Member(1, 0x8)] public int CurrentAmount;
        [RTTI.Member(2, 0xC)] public int AmountAddedSinceLastSummary;
        [RTTI.Member(3, 0x10)] public int AmountRemovedSinceLastSummary;
    }

    [RTTI.Serializable(0x6BB69D17912CA282)]
    public class TelemetryInventoryItemsBase : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public Array<TelemetryInventoryItemAmount> items;
    }

    [RTTI.Serializable(0xE0B4E6A8F94EA888)]
    public class TelemetryInventorySummary : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String EntityID;
        [RTTI.Member(1, 0x50)] public String EntityInstanceID;
        [RTTI.Member(2, 0x58)] public String Reason;
        [RTTI.Member(3, 0x60)] public Array<TelemetryInventoryItemSummaryInfo> Infos;
    }

    [RTTI.Serializable(0xF0D3C04D616FC7D9)]
    public class TelemetryKillLagSample : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String ServerIp;
        [RTTI.Member(1, 0x50)] public String ServerRegion;
        [RTTI.Member(2, 0x58)] public String KillerRegion;
        [RTTI.Member(3, 0x60)] public int KillerRttMs;
        [RTTI.Member(4, 0x68)] public String VictimRegion;
        [RTTI.Member(5, 0x70)] public int VictimRttMs;
        [RTTI.Member(6, 0x78)] public String KillerOnlineID;
        [RTTI.Member(7, 0x80)] public String VictimOnlineID;
        [RTTI.Member(8, 0x88)] public int KillLagMs;
    }

    [RTTI.Serializable(0x2CD5407F24578798)]
    public class TelemetryLaunchAction : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String LaunchAction;
    }

    [RTTI.Serializable(0xCB1C309A719931FD)]
    public class TelemetryLoadGame : TelemetryGamePositions
    {
        [RTTI.Member(0, 0x78)] public String save_id;
        [RTTI.Member(1, 0x80)] public String old_branch_id;
    }

    [RTTI.Serializable(0x79B89CF31F0BF47)]
    public class TelemetryLoadingScreen : TelemetryGamePositions
    {
        [RTTI.Member(0, 0x78)] public String level;
        [RTTI.Member(1, 0x80)] public String event_uuid;
        [RTTI.Member(2, 0x88)] public String instigator;
        [RTTI.Member(3, 0x90)] public String cause;
        [RTTI.Member(4, 0x98)] public float loading_time_before_stall;
    }

    [RTTI.Serializable(0x667AC996CFA51B31)]
    public class TelemetryLootDrop : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String ItemName;
        [RTTI.Member(1, 0x50)] public String ItemOrigin;
        [RTTI.Member(2, 0x58)] public int Amount;
        [RTTI.Member(3, 0x60)] public Vec3 Location;
    }

    [RTTI.Serializable(0xF6349914EBE6EE55)]
    public class TelemetryMenuDuration : TelemetryMenuScreen
    {
        [RTTI.Member(0, 0x38)] public float Duration;
        [RTTI.Member(1, 0x40)] public String TabID;
        [RTTI.Member(2, 0x48)] public String PreviousTabID;
    }

    [RTTI.Serializable(0x5B1C9AE31DA74860)]
    public class TelemetryMenuScreen : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String menu_screen;
        [RTTI.Member(1, 0x28)] public String referrer_menu;
        [RTTI.Member(2, 0x30)] public String referrer;
    }

    [RTTI.Serializable(0xCB39667DE8FDC362)]
    public class TelemetryModificationItemApplied : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String AppliedToItemName;
        [RTTI.Member(1, 0x50)] public String ModificationItemName;
        [RTTI.Member(2, 0x58)] public String PrimaryStat;
        [RTTI.Member(3, 0x60)] public String SecondaryStat;
        [RTTI.Member(4, 0x68)] public String TertiaryStat;
        [RTTI.Member(5, 0x70)] public bool Removed;
        [RTTI.Member(6, 0x71)] public bool ReplacedExisting;
    }

    [RTTI.Serializable(0x42980A9775262B6A)]
    public class TelemetryNetworkStats : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String mac_address;
        [RTTI.Member(1, 0x50)] public String router_manufacturer;
        [RTTI.Member(2, 0x58)] public String router_model_name;
        [RTTI.Member(3, 0x60)] public String router_model_number;
        [RTTI.Member(4, 0x68)] public uint server_ip;
        [RTTI.Member(5, 0x6C)] public int nat_type;
        [RTTI.Member(6, 0x70)] public bool wifi;
        [RTTI.Member(7, 0x74)] public int wifi_percentage;
        [RTTI.Member(8, 0x78)] public int wifi_security;
        [RTTI.Member(9, 0x7C)] public int upstream_bandwith;
        [RTTI.Member(10, 0x80)] public int downstream_bandwith;
        [RTTI.Member(11, 0x84)] public int mtu;
        [RTTI.Member(12, 0x88)] public int rtt;
        [RTTI.Member(13, 0x8C)] public int reliable_messages_out;
        [RTTI.Member(14, 0x90)] public int unreliable_messages_out;
        [RTTI.Member(15, 0x94)] public int messages_in;
        [RTTI.Member(16, 0x98)] public int reliable_bytes_out;
        [RTTI.Member(17, 0x9C)] public int unreliable_bytes_out;
        [RTTI.Member(18, 0xA0)] public int bytes_in;
        [RTTI.Member(19, 0xA4)] public int upd_packets_out;
        [RTTI.Member(20, 0xA8)] public int upd_packets_in;
        [RTTI.Member(21, 0xAC)] public int udp_bytes_out;
        [RTTI.Member(22, 0xB0)] public int udp_bytes_in;
        [RTTI.Member(23, 0xB4)] public int udp_retransmits;
        [RTTI.Member(24, 0xB8)] public int udp_reliable_packets_out;
        [RTTI.Member(25, 0xBC)] public int udp_reliable_bytes_out;
        [RTTI.Member(26, 0xC0)] public float used_buffer_ratio;
        [RTTI.Member(27, 0xC4)] public float server_buffer_ratio;
        [RTTI.Member(28, 0xC8)] public float server_resend_ratio;
    }

    [RTTI.Serializable(0xAD1A90D21C221121)]
    public class TelemetryNewGamePlusStarted : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public EDifficulty difficulty;
        [RTTI.Member(1, 0x4C)] public int player_level;
    }

    [RTTI.Serializable(0xAA9A0C497176478A)]
    public class TelemetryNpPlus : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public bool IsEligible;
    }

    [RTTI.Serializable(0x4EFF044FE46E0C7)]
    public class TelemetryObjectPlaced : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String EntityID;
        [RTTI.Member(1, 0x50)] public String Object;
        [RTTI.Member(2, 0x60)] public Vec3 ObjectPosition;
    }

    [RTTI.Serializable(0x8639DCFF67FE8292)]
    public class TelemetryPerkGained : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String perk_uuid;
        [RTTI.Member(1, 0x50)] public String perk_name;
        [RTTI.Member(2, 0x58)] public int perk_cost;
        [RTTI.Member(3, 0x5C)] public int perk_points_remaining;
        [RTTI.Member(4, 0x60)] public int perk_points_total_spent;
    }

    [RTTI.Serializable(0x3EACDC67C2B9BC35)]
    public class TelemetryPerkPointsGained : TelemetryGamePositions
    {
        [RTTI.Member(0, 0x78)] public EPerkPointGainReason reason;
        [RTTI.Member(1, 0x80)] public String reason_details;
        [RTTI.Member(2, 0x88)] public int perk_points_gained;
        [RTTI.Member(3, 0x8C)] public int perk_points_available;
        [RTTI.Member(4, 0x90)] public int perk_points_total_spent;
    }

    [RTTI.Serializable(0x8E00F3ADC5203AC7)]
    public class TelemetryPhysicsStats : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String LevelID;
        [RTTI.Member(1, 0x50)] public bool CollapseDisabled;
        [RTTI.Member(2, 0x60)] public Vec3 PlayerPosition;
        [RTTI.Member(3, 0x70)] public int PeakStepMemory;
        [RTTI.Member(4, 0x74)] public int PeakPersistentMemory;
        [RTTI.Member(5, 0x78)] public int MaxBodies;
        [RTTI.Member(6, 0x7C)] public uint32 MaxBroadPhaseNodes;
        [RTTI.Member(7, 0x80)] public int MaxActiveBodies;
        [RTTI.Member(8, 0x84)] public int MaxRagdolls;
        [RTTI.Member(9, 0x88)] public int MaxRaycastsPerUpdate;
    }

    [RTTI.Serializable(0x1E4D455F1F6CE844)]
    public class TelemetryPlayerDoubleHit : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String PSNAccount;
        [RTTI.Member(1, 0x50)] public float Angle;
        [RTTI.Member(2, 0x54)] public float TimeDiff;
        [RTTI.Member(3, 0x58)] public float Suspicion;
    }

    [RTTI.Serializable(0x947ADB22697878CA)]
    public class TelemetryPlayerJoin : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String psn_account;
        [RTTI.Member(1, 0x50)] public String player_type;
        [RTTI.Member(2, 0x58)] public bool is_using_3d;
        [RTTI.Member(3, 0x59)] public bool is_using_remote_play;
    }

    [RTTI.Serializable(0x40A7AEC0D31B62DD)]
    public class TelemetryPlayerJoinGame : TelemetryPlayerJoin
    {
    }

    [RTTI.Serializable(0xD35350AD7EB7E1A1)]
    public class TelemetryPlayerJump : TelemetryGameBase
    {
        [RTTI.Member(0, 0x50)] public Vec3 Position;
        [RTTI.Member(1, 0x60)] public Vec3 Velocity;
        [RTTI.Member(2, 0x70)] public Vec2 InputDirection;
    }

    [RTTI.Serializable(0xD2B3FCFA6DC6218)]
    public class TelemetryPlayerKilled : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String entity_id;
        [RTTI.Member(1, 0x50)] public String entity_name;
        [RTTI.Member(2, 0x58)] public String entity_instance_id;
        [RTTI.Member(3, 0x60)] public Vec3 position;
        [RTTI.Member(4, 0x70)] public String killer_entity_id;
        [RTTI.Member(5, 0x78)] public String killer_entity_name;
        [RTTI.Member(6, 0x80)] public String killer_entity_instance_id;
        [RTTI.Member(7, 0x88)] public String killer_faction;
        [RTTI.Member(8, 0x90)] public Vec3 killer_position;
        [RTTI.Member(9, 0xA0)] public String killer_scene_uuid;
        [RTTI.Member(10, 0xA8)] public String weapon_resource_uuid;
        [RTTI.Member(11, 0xB0)] public String weapon_name;
        [RTTI.Member(12, 0xB8)] public String ComponentName;
        [RTTI.Member(13, 0xC0)] public bool headshot;
        [RTTI.Member(14, 0xC1)] public bool Crouched;
        [RTTI.Member(15, 0xC8)] public String quest_uuid;
        [RTTI.Member(16, 0xD0)] public String QuestName;
        [RTTI.Member(17, 0xD8)] public String killer_spawn_setup_uuid;
    }

    [RTTI.Serializable(0x7F50CDFF2A9083DE)]
    public class TelemetryPlayerLeave : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String level_id;
        [RTTI.Member(1, 0x50)] public int duration_secs;
        [RTTI.Member(2, 0x58)] public String psn_account;
        [RTTI.Member(3, 0x60)] public String mode;
        [RTTI.Member(4, 0x68)] public int player_count;
    }

    [RTTI.Serializable(0x2AE79CD8DDB5CF89)]
    public class TelemetryPlayerLeaveGame : TelemetryPlayerLeave
    {
    }

    [RTTI.Serializable(0xCEFFAD7B34AE1FA8)]
    public class TelemetryPlayerLeveledUp : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public int player_level;
    }

    [RTTI.Serializable(0x604FB3CF0A023D5D)]
    public class TelemetryPlayerMuted : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String TargetID;
        [RTTI.Member(1, 0x50)] public bool Muted;
    }

    [RTTI.Serializable(0xE48B26EA7672AABD)]
    public class TelemetryPlayerNearDeath : TelemetryGameBase
    {
        [RTTI.Member(0, 0x50)] public Vec3 Position;
        [RTTI.Member(1, 0x60)] public uint8 Health;
    }

    [RTTI.Serializable(0x7ADF7A60E4EE3CD1)]
    public class TelemetryPlayerPosition : TelemetryEntityPosition
    {
        [RTTI.Member(0, 0xA0)] public bool is_riding_mount;
        [RTTI.Member(1, 0xA1)] public bool is_swimming;
        [RTTI.Member(2, 0xA2)] public bool is_underwater;
        [RTTI.Member(3, 0xA3)] public bool is_parkouring_with_hands;
        [RTTI.Member(4, 0xA4)] public bool is_parkouring_with_feet;
    }

    [RTTI.Serializable(0xE8FE5CAF5E1F74A3)]
    public class TelemetryPlayerSpawn : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String EntityID;
        [RTTI.Member(1, 0x50)] public Vec3 Position;
        [RTTI.Member(2, 0x60)] public float Heading;
        [RTTI.Member(3, 0x68)] public String Faction;
        [RTTI.Member(4, 0x70)] public Array<String> InventoryItems;
    }

    [RTTI.Serializable(0x4E93395CFBC35BE)]
    public class TelemetryPrivacySettings : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public bool enable;
    }

    [RTTI.Serializable(0xC604CFF6CE262721)]
    public class TelemetryQuestProgressed : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String quest_uuid;
        [RTTI.Member(1, 0x50)] public String QuestName;
        [RTTI.Member(2, 0x58)] public String quest_section_uuid;
        [RTTI.Member(3, 0x60)] public String QuestSectionName;
        [RTTI.Member(4, 0x68)] public String quest_type_uuid;
        [RTTI.Member(5, 0x70)] public String QuestType;
        [RTTI.Member(6, 0x78)] public String section_type;
        [RTTI.Member(7, 0x80)] public String progression_type;
        [RTTI.Member(8, 0x88)] public int time_from_quest_start;
        [RTTI.Member(9, 0x8C)] public int time_from_game_start;
        [RTTI.Member(10, 0x90)] public int time_from_last_progress;
        [RTTI.Member(11, 0x94)] public int number_of_completed_sections;
        [RTTI.Member(12, 0x98)] public int number_of_blocked_sections;
        [RTTI.Member(13, 0x9C)] public int total_number_of_sections;
        [RTTI.Member(14, 0xA0)] public int amount_of_quests_in_progress;
        [RTTI.Member(15, 0xA4)] public int amount_of_quests_completed;
        [RTTI.Member(16, 0xA8)] public int amount_of_quests_failed;
        [RTTI.Member(17, 0xAC)] public int player_level;
    }

    [RTTI.Serializable(0xE856D1AE561AC9EA)]
    public class TelemetrySaveGame : TelemetryGamePositions
    {
        [RTTI.Member(0, 0x78)] public String save_id;
        [RTTI.Member(1, 0x80)] public int size;
    }

    [RTTI.Serializable(0xF6BED874800DE4B0)]
    public class TelemetrySequenceNetwork : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String name;
        [RTTI.Member(1, 0x50)] public String network_uuid;
        [RTTI.Member(2, 0x58)] public String partner_uuid;
        [RTTI.Member(3, 0x60)] public String partner;
        [RTTI.Member(4, 0x68)] public int line_skip_count;
        [RTTI.Member(5, 0x6C)] public int line_played_count;
        [RTTI.Member(6, 0x70)] public int sequence_played_count;
        [RTTI.Member(7, 0x74)] public float sequence_network_duration;
        [RTTI.Member(8, 0x78)] public bool is_skipped;
    }

    [RTTI.Serializable(0x879F26E93AF3E304)]
    public class TelemetryShopSellTransaction : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String merchant_spawn_source_uuid;
        [RTTI.Member(1, 0x50)] public String item_resource_uuid;
        [RTTI.Member(2, 0x58)] public String sell_type;
        [RTTI.Member(3, 0x60)] public int amount;
        [RTTI.Member(4, 0x64)] public int price;
    }

    [RTTI.Serializable(0x4CD4812806048EE1)]
    public class TelemetryShopTradeTransaction : TelemetryInventoryItemsBase
    {
        [RTTI.Member(0, 0x58)] public String merchant_spawn_source_uuid;
        [RTTI.Member(1, 0x60)] public String trading_definition_uuid;
    }

    [RTTI.Serializable(0xB88807C14697CBCC)]
    public class TelemetryStartupStats : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public bool started_ok;
        [RTTI.Member(1, 0x28)] public double time_app_init;
        [RTTI.Member(2, 0x30)] public double time_conversion;
        [RTTI.Member(3, 0x38)] public double time_loading;
        [RTTI.Member(4, 0x40)] public double time_init;
        [RTTI.Member(5, 0x48)] public double time_game;
        [RTTI.Member(6, 0x50)] public double time_menu;
        [RTTI.Member(7, 0x58)] public double time_system_ui;
        [RTTI.Member(8, 0x60)] public double time_startup_total;
    }

    [RTTI.Serializable(0xB96C0B655DAD10A0)]
    public class TelemetrySwitchFaction : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String OldFaction;
        [RTTI.Member(1, 0x50)] public String NewFaction;
    }

    [RTTI.Serializable(0x9FD7F8E8F7D14A08)]
    public class TelemetryTrophyUnlock : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public int trophy_id;
        [RTTI.Member(1, 0x4C)] public int total_unlock_count;
        [RTTI.Member(2, 0x50)] public bool platinum_unlock;
        [RTTI.Member(3, 0x54)] public int return_code;
    }

    [RTTI.Serializable(0xB6C488B149AFE664)]
    public class TelemetryUserProfile : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String np_online_id;
        [RTTI.Member(1, 0x28)] public uint64 np_account_id;
        [RTTI.Member(2, 0x30)] public bool restrict_chat;
        [RTTI.Member(3, 0x31)] public bool restrict_ugm;
        [RTTI.Member(4, 0x38)] public String region;
        [RTTI.Member(5, 0x40)] public String language;
        [RTTI.Member(6, 0x48)] public String issuer_id;
    }

    [RTTI.Serializable(0x75EB9500199E6A23)]
    public class TelemetryVoiceChatStats : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public bool HasEnabledVoiceChat;
        [RTTI.Member(1, 0x4C)] public int LocalTalkTimeMs;
        [RTTI.Member(2, 0x50)] public int LocalTimesTalked;
        [RTTI.Member(3, 0x54)] public bool HasMutedAllPlayers;
        [RTTI.Member(4, 0x58)] public int NumPlayersMuted;
        [RTTI.Member(5, 0x5C)] public int RemoteTalkTimeMs;
        [RTTI.Member(6, 0x60)] public int RemoteTimesTalked;
    }

    [RTTI.Serializable(0x831A8C9F40175616)]
    public class TelemetryWeaponFireSummary : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String entity_id;
        [RTTI.Member(1, 0x50)] public String weapon_name;
        [RTTI.Member(2, 0x58)] public String ammo_name;
        [RTTI.Member(3, 0x60)] public int ammo_fired;
    }

    [RTTI.Serializable(0x6C1B422ABC8603AA)]
    public class TelemetryWeaponStats : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String WeaponName;
        [RTTI.Member(1, 0x50)] public Array<int> Stats;
    }

    [RTTI.Serializable(0xC2399EAE32D46046)]
    public class TelemetryWorldEncounterBase : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String collection_name;
        [RTTI.Member(1, 0x50)] public String encounter_name;
        [RTTI.Member(2, 0x60)] public Vec3 encounter_position;
        [RTTI.Member(3, 0x70)] public Vec3 player_position;
        [RTTI.Member(4, 0x80)] public int player_level;
    }

    [RTTI.Serializable(0xF3DA488410FC3017)]
    public class TelemetryWorldEncounterSelected : TelemetryWorldEncounterBase
    {
    }

    [RTTI.Serializable(0x64F1D97A4DDC802A)]
    public class TelemetryWorldEncounterSpawned : TelemetryWorldEncounterBase
    {
    }

    [RTTI.Serializable(0xCAB8532092131511)]
    public class TelemetryXpGained : TelemetryGameBase
    {
        [RTTI.Member(0, 0x48)] public String xp_reason_uuid;
        [RTTI.Member(1, 0x50)] public String xp_trigger_resource_uuid;
        [RTTI.Member(2, 0x58)] public String xp_trigger_name;
        [RTTI.Member(3, 0x60)] public Vec3 position;
        [RTTI.Member(4, 0x70)] public int xp_gained_amount;
        [RTTI.Member(5, 0x74)] public int total_xp_amount;
        [RTTI.Member(6, 0x78)] public int golden_xp_gained_amount;
        [RTTI.Member(7, 0x7C)] public int total_golden_xp_amount;
    }

    [RTTI.Serializable(0x9EB2C20D1AD2CFCC)]
    public class TeleportToAIProvidedPositionAction : EntityAction
    {
    }

    [RTTI.Serializable(0x4E1225F9EFB134D3)]
    public class TeleportToPlayerAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public float LowPriorityRange;
        [RTTI.Member(1, 0x38, "Logic")] public String HighPriorityTrigger;
    }

    [RTTI.Serializable(0xFDBEC2C6FFE2A5C1)]
    public class TemplateTag : Tag
    {
    }

    [RTTI.Serializable(0x74B3858807F45015)]
    public class Terrain : GeometryObject
    {
        [RTTI.Member(0, 0xC8)] public Array<TerrainDataNode> TerrainDataNodes;
        [RTTI.Member(1, 0xD8)] public FRange TerrainHeightRange;
        [RTTI.Member(2, 0xE0)] public int TileCount;
        [RTTI.Member(3, 0xE8)] public IVec2 TileStart;
        [RTTI.Member(4, 0xF8)] public TerrainRenderPassSetup ShadingPassSetup;
        [RTTI.Member(5, 0x158)] public TerrainRenderPassSetup ShadowPassSetup;
        [RTTI.Member(6, 0x1B8)] public TerrainRenderPassSetup OcclusionPassSetup;
        [RTTI.Member(7, 0x218)] public TerrainRenderPassSetup DebugPassSetup;
    }

    [RTTI.Serializable(0xE0E1A40F0813819D)]
    public class TerrainAimReticuleResource : Resource
    {
        [RTTI.Member(0, 0x28, "Representation")] public Ref<SpotLightResource> SpotLightResource;
        [RTTI.Member(1, 0x30, "Representation")] public float LightOffset;
        [RTTI.Member(2, 0x34, "Representation")] public float LightRotationSpeed;
        [RTTI.Member(3, 0x38, "Representation")] public Ref<ModelPartResource> ModelPartResource;
    }

    [RTTI.Serializable(0x68F2743553CF38AC)]
    public class TerrainDataNode
    {
        [RTTI.Member(0, 0x0)] public uint16 PackedData0;
        [RTTI.Member(1, 0x2)] public uint16 PackedData1;
        [RTTI.Member(2, 0x4)] public uint16 PackedData2;
    }

    [RTTI.Serializable(0xE9C41710A636E13F)]
    public class TerrainHull : WorldNode
    {
        [RTTI.Member(0, 0x60, "General")] public String Name;
        [RTTI.Member(1, 0x68, "General")] public ETerrainHullShape HullType;
        [RTTI.Member(2, 0xA0, "General")] public Array<Vec3> Vertices;
        [RTTI.Member(3, 0xB0, "General")] public RGBAColor DebugColor;
        [RTTI.Member(4, 0xC0, "General")] public Shape2DExtrusion Shape2d;
    }

    [RTTI.Serializable(0x39C5497B896E09BE)]
    public class TerrainMaterial : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<RenderEffectResource> MaskRenderEffect;
    }

    [RTTI.Serializable(0xB09133A7CDA7E441)]
    public class TerrainMaterialSwapEntry
    {
        [RTTI.Member(0, 0x0)] public Array<Ref<RenderEffectResource>> NewTerrainRER;
        [RTTI.Member(1, 0x10)] public Array<GGUUID> UUIDs;
    }

    [RTTI.Serializable(0xA1AB5B01618BEF30)]
    public class TerrainRenderPassLODDistanceSettings
    {
        [RTTI.Member(0, 0x0)] public float LODDistance;
        [RTTI.Member(1, 0x4)] public int MaterialLayerIndex;
    }

    [RTTI.Serializable(0xB0564622B99564A5)]
    public class TerrainRenderPassMaterialLayer
    {
        [RTTI.Member(0, 0x0)] public ETerrainMaterialLODType MinimumTerrainLODType;
        [RTTI.Member(1, 0x8)] public Ref<RenderEffectResource> RenderEffectResource;
    }

    [RTTI.Serializable(0x95E591FDD4C98345)]
    public class TerrainRenderPassSetup
    {
        [RTTI.Member(0, 0x4)] public int VertexGridSize;
        [RTTI.Member(1, 0x8)] public DrawFlags DrawFlags;
        [RTTI.Member(2, 0xC)] public ESortOrder SortOrder;
        [RTTI.Member(3, 0x10)] public ETerrainBorderStitchingMode BorderStitchingMode;
        [RTTI.Member(4, 0x14)] public ETerrainTileCullingMode TileCullingMode;
        [RTTI.Member(5, 0x18)] public Array<TerrainRenderPassLODDistanceSettings> LODDistances;
        [RTTI.Member(6, 0x28)] public Array<TerrainRenderPassMaterialLayer> MaterialLayers;
        [RTTI.Member(7, 0x38)] public Array<float> LodDistancesSquared;
        [RTTI.Member(8, 0x48)] public Ref<VertexArrayResource> VertexArray;
        [RTTI.Member(9, 0x50)] public Array<Ref<IndexArrayResource>> IndexArrays;
    }

    [RTTI.Serializable(0xF45C6BA16B2A4F32)]
    public class TerrainTileData : Resource
    {
        [RTTI.Member(0, 0x28)] public IVec2 GridCoordinates;
        [RTTI.Member(1, 0x30)] public int MinimumNodeSize;
        [RTTI.Member(2, 0x34)] public ETerrainMaterialLODType MaterialLODType;
        [RTTI.Member(3, 0x38)] public int MaterialLODCount;
        [RTTI.Member(4, 0x40)] public TerrainTileMaterialData TerrainMaterialData;
        [RTTI.Member(5, 0x80)] public Array<BoundingBox2> HoleBBoxes;
        [RTTI.Member(6, 0x90)] public Ref<DataBufferResource> HoleDataBuffer;
        [RTTI.Member(7, 0x98)] public FRange MappedHeightRange;
        [RTTI.Member(8, 0xA0)] public Array<TerrainDataNode> TileDataNodes;
        [RTTI.Member(9, 0xB0)] public BoundingBox3 BoundingBox;
        [RTTI.Member(10, 0xD0)] public Ref<RenderDataStreamingHintData> StreamingHintData;
        [RTTI.Member(11, 0xE0)] public Array<Ref<RenderEffectResource>> OriginalMaskRenderEffects;
        [RTTI.Member(12, 0xF0)] public Array<Ref<RenderEffectResource>> BakedMaskRenderEffects;
        [RTTI.Member(13, 0x100)] public Array<Ref<RenderEffectResource>> RuntimeMergedMaskRenderEffects;
    }

    [RTTI.Serializable(0xABA5CDE6A8DB2762)]
    public class TerrainTileGeometryObject : GeometryObject
    {
    }

    [RTTI.Serializable(0xDC38808F4645E0E4)]
    public class TerrainTileMaterialData
    {
        [RTTI.Member(0, 0x0)] public String LookupDataPath;
        [RTTI.Member(1, 0x8)] public int LookupDataBlockSize;
        [RTTI.Member(2, 0x10)] public Ref<DataBufferResource> LookupValueBuffer;
        [RTTI.Member(3, 0x20)] public Vec4 LookupDataOffsets;
        [RTTI.Member(4, 0x30)] public Ref<DataBufferResource> LookupDataBuffer;
    }

    [RTTI.Serializable(0x907FE59301ABC93A)]
    public class TestBoolPropertyAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x48, "Logic")] public BoolPropertyLink Property;
    }

    [RTTI.Serializable(0x975C0EEB87D0B72D)]
    public class TestFloatPropertyAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x48, "Logic")] public FloatPropertyLink Property;
        [RTTI.Member(2, 0x50, "Logic")] public EComparator Comparator;
        [RTTI.Member(3, 0x54, "Logic")] public float Value;
    }

    [RTTI.Serializable(0x11E82F7D9394DF95)]
    public class TestIntPropertyAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x48, "Logic")] public IntPropertyLink Property;
        [RTTI.Member(2, 0x50, "Logic")] public EComparator Comparator;
        [RTTI.Member(3, 0x54, "Logic")] public int Value;
    }

    [RTTI.Serializable(0xCF7268D5693AEC3D)]
    public class TestStringPropertyAction : ConditionalAction
    {
        [RTTI.Member(0, 0x40, "Logic")] public String PropertyName;
        [RTTI.Member(1, 0x50, "Logic")] public String Value;
    }

    [RTTI.Serializable(0xB182E6ECFCB2A0CB)]
    public class TetherComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x99C49B50E10EF27C)]
    public class TetheredAmmoPileComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x96A3DFCE8C6D736B)]
    public class TetheredAmmoPileComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float TetherRadius;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<CurveResource> RoundsOverTime;
        [RTTI.Member(2, 0x38, "Logic")] public int TotalRoundsAvailable;
    }

    [RTTI.Serializable(0x2BA24E0C47017AFF)]
    public class TetraFaceShadowMap
    {
        [RTTI.Member(0, 0x0)] public Array<float> ShadowMap;
    }

    [RTTI.Serializable(0xCE69271564963387)]
    public class TetrahedronShadowMap
    {
        [RTTI.Member(0, 0x0)] public TetraFaceShadowMap F0;
        [RTTI.Member(1, 0x10)] public TetraFaceShadowMap F1;
        [RTTI.Member(2, 0x20)] public TetraFaceShadowMap F2;
        [RTTI.Member(3, 0x30)] public TetraFaceShadowMap F3;
        [RTTI.Member(4, 0x40)] public Vec3 Pos0;
        [RTTI.Member(5, 0x50)] public Vec3 Pos1;
        [RTTI.Member(6, 0x60)] public Vec3 Pos2;
        [RTTI.Member(7, 0x70)] public Vec3 Pos3;
    }

    [RTTI.Serializable(0x2750C93B92E363A2)]
    public class TextTag : VisualTag
    {
    }

    [RTTI.Serializable(0x605E956DFC9458AD)]
    public class TextWidget : Widget
    {
    }

    [RTTI.Serializable(0xAC885AE064457499)]
    public class TextureBindingWithHandle : ShaderTextureBinding
    {
        [RTTI.Member(0, 0x18)] public HwBindingHandle TextureBindingHandle;
        [RTTI.Member(1, 0x20)] public HwBindingHandle SwizzleBindingHandle;
    }

    [RTTI.Serializable(0x292BBE12033D3857)]
    public class TextureLUT : Resource
    {
        [RTTI.Member(0, 0x28, "Settings")] public Array<TextureLUTEntry> Entries;
        [RTTI.Member(1, 0x38, "Settings")] public float KeyRange;
        [RTTI.Member(2, 0x40, "Settings")] public Array<RGBAColor> LookupData;
    }

    [RTTI.Serializable(0x6639770FCBD64DAE)]
    public class TextureLUTEntry
    {
        [RTTI.Member(0, 0x0, "Settings")] public float Key;
        [RTTI.Member(1, 0x4, "Settings")] public float Value;
    }

    [RTTI.Serializable(0xA520F22B82BBF9A4)]
    public class TextureMatrix
    {
        [RTTI.Member(0, 0x0)] public Vec2Pack Col0;
        [RTTI.Member(1, 0x8)] public Vec2Pack Col1;
        [RTTI.Member(2, 0x10)] public Vec2Pack Col2;
    }

    [RTTI.Serializable(0xE02735CED4F1CDF)]
    public class TextureSet : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<TextureSetEntry> Entries;
        [RTTI.Member(1, 0x38)] public ETexAddress MipMapAddressMode;
        [RTTI.Member(2, 0x40)] public Array<TextureSetTextureDesc> TextureDesc;
    }

    [RTTI.Serializable(0xED2405F58FDC7F09)]
    public class TextureSetEntry
    {
        [RTTI.Member(0, 0x0)] public EImageCompressionMethod CompressMethod;
        [RTTI.Member(1, 0x0)] public bool CreateMipMaps;
        [RTTI.Member(2, 0x0)] public ETexColorSpace ColorSpace;
        [RTTI.Member(3, 0x0)] public uint32 PackingInfo;
        [RTTI.Member(4, 0x0)] public int TextureType;
        [RTTI.Member(5, 0x8)] public Ref<Resource> Texture;
    }

    [RTTI.Serializable(0xF187D835B8BCB293)]
    public class TextureSetTextureDesc
    {
        [RTTI.Member(0, 0x0)] public ETextureSetType TextureType;
        [RTTI.Member(1, 0x8)] public String Path;
        [RTTI.Member(2, 0x10)] public bool Active;
        [RTTI.Member(3, 0x11)] public bool GammaSpace;
        [RTTI.Member(4, 0x14)] public ETextureSetStorageType StorageType;
        [RTTI.Member(5, 0x18)] public ETextureSetQualityType QualityType;
        [RTTI.Member(6, 0x1C)] public EImageCompressionMethod CompressionMethod;
        [RTTI.Member(7, 0x20)] public int Width;
        [RTTI.Member(8, 0x24)] public int Height;
        [RTTI.Member(9, 0x30)] public FRGBAColor DefaultColor;
    }

    [RTTI.Serializable(0xE05961F4A1C12C45)]
    public class TextureStreamingHighLODSkipSet
    {
        [RTTI.Member(0, 0x0)] public Array<GGUUID> UUIDsToSkip;
        [RTTI.Member(1, 0x10)] public Array<int> MipsToSkip;
    }

    [RTTI.Serializable(0xB4FB763DC1700CE4)]
    public class TextureTag : VisualTag
    {
    }

    [RTTI.Serializable(0x408CD6FFAF39440E)]
    public class TextureWidget : Widget
    {
    }

    [RTTI.Serializable(0x18EA237A50653B5)]
    public class Texture_2D_ReadWrite_HalfFloat
    {
    }

    [RTTI.Serializable(0x37322E994237A239)]
    public class Texture_2D_ReadWrite_RGBAColorRev
    {
    }

    [RTTI.Serializable(0x1FEE64C748590328)]
    public class Texture_2D_ReadWrite_Vec4
    {
    }

    [RTTI.Serializable(0xD7DEB6FF30029A1E)]
    public class Texture_2D_ReadWrite_float
    {
    }

    [RTTI.Serializable(0x5938089775F53690)]
    public class Texture_2D_ReadWrite_uint16
    {
    }

    [RTTI.Serializable(0x33035529F7B828E)]
    public class Texture_2D_ReadWrite_uint8
    {
    }

    [RTTI.Serializable(0xC2001CD77C11F7CA)]
    public class Texture_2D_Read_HalfFloat
    {
    }

    [RTTI.Serializable(0x392FDF3DE7BD3B35)]
    public class Texture_2D_Read_RGBAColorRev
    {
    }

    [RTTI.Serializable(0xBF2CE506F5383A66)]
    public class Texture_2D_Read_Vec4
    {
    }

    [RTTI.Serializable(0xEA472BC327364179)]
    public class Texture_2D_Read_float
    {
    }

    [RTTI.Serializable(0x44FB9A072BB046DE)]
    public class Texture_2D_Read_uint16
    {
    }

    [RTTI.Serializable(0xE92A46F4FE82D19C)]
    public class Texture_2D_Read_uint8
    {
    }

    [RTTI.Serializable(0x9977B2D93018036E)]
    public class ThirdPersonCameraFOV : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CurveResource> FOVSpring;
        [RTTI.Member(1, 0x30, "Logic")] public float FOV;
    }

    [RTTI.Serializable(0x53E1DF87625D6048)]
    public class ThirdPersonPlayerCameraComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x80B7B5154FE94F8A)]
    public class ThirdPersonPlayerCameraComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Input")] public float InputZeroDelay;
        [RTTI.Member(1, 0x30, "Input")] public Ref<CurveResource> LookDampingCurveAfterBlock;
        [RTTI.Member(2, 0x38, "Input")] public int LookInputBuffer;
        [RTTI.Member(3, 0x40, "Input")] public Ref<CurveResource> LookInputDeltaToVelocity;
        [RTTI.Member(4, 0x48, "Input")] public Ref<CurveResource> LookSensitivityToHeadingScaler;
        [RTTI.Member(5, 0x50, "Input")] public Ref<CurveResource> LookSensitivityToPitchScaler;
    }

    [RTTI.Serializable(0x28C57FCAA542DF3A)]
    public class ThresholdBasedContextualEmotion : ContextualEmotion
    {
        [RTTI.Member(0, 0x70, "Logic")] public float Threshold;
        [RTTI.Member(1, 0x78, "Logic")] public Ref<GraphProgramResource> StartGraph;
        [RTTI.Member(2, 0x80, "Logic")] public Ref<GraphProgramResource> StopGraph;
    }

    [RTTI.Serializable(0xC914D1B2D8D19199)]
    public class Throwable : Entity
    {
    }

    [RTTI.Serializable(0x221D97FBFED34665)]
    public class ThrowableMover : PhysicsMover
    {
    }

    [RTTI.Serializable(0x8491C63E4EE267D6)]
    public class ThrowableMoverResource : PhysicsMoverResource
    {
        [RTTI.Member(0, 0x68, "Logic")] public bool AlignToPath;
        [RTTI.Member(1, 0x70, "Logic")] public Vec3 ForwardOverride;
        [RTTI.Member(2, 0x80, "Logic")] public Vec3 InitialSpin;
        [RTTI.Member(3, 0x90, "Logic")] public Vec3 RandomInitialSpin;
        [RTTI.Member(4, 0xA0, "Logic")] public float ApproximateCollisionRadius;
        [RTTI.Member(5, 0xB0, "Logic")] public Vec3 RandomConstantSpin;
        [RTTI.Member(6, 0xC0, "Logic")] public bool UseSimpleBallisticPhysics;
        [RTTI.Member(7, 0xC1, "Logic")] public bool ReportWaterImpactAsContactPoint;
        [RTTI.Member(8, 0xC4, "Logic")] public float GravityFactorPostContact;
        [RTTI.Member(9, 0xC8, "Homing")] public bool DynamicHoming;
        [RTTI.Member(10, 0xCC, "Homing")] public float DynamicHomingActivationTime;
        [RTTI.Member(11, 0xD0, "Homing")] public bool StaticHoming;
        [RTTI.Member(12, 0xD4, "Homing")] public float MaxHomingRotationSpeed;
        [RTTI.Member(13, 0xD8, "Homing")] public float VelocityHomingBarrier;
        [RTTI.Member(14, 0xDC, "Homing")] public float HomingAimOffset;
        [RTTI.Member(15, 0xE0, "Homing")] public float HomingVerticalAimOffset;
        [RTTI.Member(16, 0xE4, "Homing")] public bool CanBecomeDumb;
    }

    [RTTI.Serializable(0x44A55874C3E98370)]
    public class ThrowableRep : EntityRep
    {
    }

    [RTTI.Serializable(0xFA22816E51EA382C)]
    public class ThrowableResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "VisualEffects")] public Ref<EffectComponentResource> TrailEffectComponent;
        [RTTI.Member(1, 0x138, "VisualEffects")] public bool RemoveTrailOnDestroy;
        [RTTI.Member(2, 0x140, "AI")] public Ref<AIAuralStimulusResource> BounceSoundStimulus;
        [RTTI.Member(3, 0x148, "AI")] public Ref<AIHapticStimulusResource> ContactHapticStimulus;
        [RTTI.Member(4, 0x150, "AI")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(5, 0x158, "AI")] public Ref<AIThrowableOriginInfoMessageResource> ThrowableOriginInfoMessage;
        [RTTI.Member(6, 0x160, "AI")] public Ref<AIThrowableOriginInfoMessageResource> ThrowableOriginInfoMessageOnImpact;
        [RTTI.Member(7, 0x168, "AI")] public Ref<AIThrowableOriginInfoMessageResource> ThrowableOriginInfoMessageOnContact;
        [RTTI.Member(8, 0x170, "AI")] public bool CreateHapticStimuliOnce;
        [RTTI.Member(9, 0x171, "AI")] public bool CreateBounceSoundStimuliOnce;
        [RTTI.Member(10, 0x172, "AI")] public bool CreateWhizzByStimulus;
        [RTTI.Member(11, 0x173, "AI")] public bool IsVisualStimulusEmitter;
        [RTTI.Member(12, 0x178, "AI")] public String IdentifiedSignalType;
        [RTTI.Member(13, 0x180, "AI")] public bool EnableDangerArea;
        [RTTI.Member(14, 0x181, "AI")] public bool IsEnemyToAll;
        [RTTI.Member(15, 0x182, "AI")] public bool AdoptEmitterFaction;
        [RTTI.Member(16, 0x184, "AI")] public float OffensiveCapability;
        [RTTI.Member(17, 0x188, "AI")] public float ReachableRadius;
        [RTTI.Member(18, 0x18C, "AI")] public float PerceivedDamageRadius;
        [RTTI.Member(19, 0x190, "Logic")] public bool ExplodeWhenDead;
        [RTTI.Member(20, 0x191, "AI")] public bool EnableTrajectoryDangerArea;
        [RTTI.Member(21, 0x194, "AI")] public float TrajectoryDangerAreaRadius;
        [RTTI.Member(22, 0x198, "Logic")] public Ref<ExplosionResource> ExplosionResource;
        [RTTI.Member(23, 0x1A0, "Logic")] public bool ActivateOnUse;
        [RTTI.Member(24, 0x1A4, "Logic")] public float LifeTime;
        [RTTI.Member(25, 0x1A8, "Logic")] public float LifeTimeAfterExplode;
        [RTTI.Member(26, 0x1AC, "Logic")] public float RemovalDistance;
        [RTTI.Member(27, 0x1B0, "SpinOut")] public bool Enabled;
        [RTTI.Member(28, 0x1B4, "SpinOut")] public float TimeToStart;
        [RTTI.Member(29, 0x1B8, "SpinOut")] public float FallAcceleration;
        [RTTI.Member(30, 0x1BC, "SpinOut")] public float LateralAcceleration;
        [RTTI.Member(31, 0x1C0, "SpinOut")] public Vec3 RotationSpeed;
        [RTTI.Member(32, 0x1D0, "Chaff")] public bool CanBeDistractedByChaff;
        [RTTI.Member(33, 0x1D4, "Chaff")] public float ChaffConeAngle;
        [RTTI.Member(34, 0x1D8, "Chaff")] public float ChaffConeRange;
        [RTTI.Member(35, 0x1DC, "Representation")] public float VisualPathOffsetBlendTime;
        [RTTI.Member(36, 0x1E0, "Representation")] public Ref<SoundResource> FlySoundResource;
        [RTTI.Member(37, 0x1E8, "Logic")] public bool RequiresContactPointValidate;
        [RTTI.Member(38, 0x1F0, "Logic")] public CPtr<EntityAction> ActionWhenExplode;
        [RTTI.Member(39, 0x1F8, "Logic")] public bool ExplodeOnLastCollisionPosition;
        [RTTI.Member(40, 0x1FC, "Logic")] public float BounceSpeedLimiter;
        [RTTI.Member(41, 0x200, "Logic")] public bool BounceFromHumanoids;
        [RTTI.Member(42, 0x201, "Logic")] public bool IgnoreCollisionWithPhysicsCapsules;
        [RTTI.Member(43, 0x204, "AI")] public float ThreatRemovalTime;
    }

    [RTTI.Serializable(0xECE1EF0CD1E0229C)]
    public class TieRopeAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<RopeManagerComponentResource> RopeManagerComponentResource;
    }

    [RTTI.Serializable(0x58834E044E7D8AA2)]
    public class TileBasedStreamingStrategyResource : StreamingStrategyResource
    {
        [RTTI.Member(0, 0x58, "Grid")] public bool HintAllTiles;
        [RTTI.Member(1, 0x5C, "Grid")] public int TileSize;
        [RTTI.Member(2, 0x60, "Grid")] public int TileBorder;
        [RTTI.Member(3, 0x64, "Grid")] public ISize GridSize;
        [RTTI.Member(4, 0x70, "Grid")] public Array<Ref<StreamingTileResource>> Tiles;
        [RTTI.Member(5, 0x80, "Grid")] public int HighLODDiameter;
        [RTTI.Member(6, 0x84, "Grid")] public int LowLODDiameter;
    }

    [RTTI.Serializable(0xA5ECD8A589C1004C)]
    public class TimeOfDayQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public int Hour;
        [RTTI.Member(1, 0x2C, "Logic")] public int Minute;
        [RTTI.Member(2, 0x30, "Logic")] public bool TriggerImmediatelyIfLater;
    }

    [RTTI.Serializable(0xA54CB0F7375EF758)]
    public class TimeOfDayQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x4C8913A1822CF416)]
    public class TimedEventInstance : EventInstance
    {
    }

    [RTTI.Serializable(0x32283560F9D7F57B)]
    public class TimedEventResource : EventResource
    {
        [RTTI.Member(0, 0x30, "Event")] public int StopFrame;
    }

    [RTTI.Serializable(0x2DC078D5775B97F1)]
    public class TimerQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Duration;
    }

    [RTTI.Serializable(0x3F6729D8F142C67F)]
    public class TimerQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x4ADAA6E6E72D9C3A)]
    public class TimerTag : Tag
    {
    }

    [RTTI.Serializable(0xAB4876E1FE0966DA)]
    public class ToastMessageTag : VisualTag
    {
    }

    [RTTI.Serializable(0xFD1F346C87AB8C7D)]
    public class ToastMessageWidget : Widget
    {
    }

    [RTTI.Serializable(0x829DB24DC968A63)]
    public class ToolCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0x93177A694025DBD)]
    public class ToolRestoreState : ItemRestoreState
    {
    }

    [RTTI.Serializable(0x5303AA2B039AE562)]
    public class TrackDamageOverTimeComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xC60729B51DED36C)]
    public class TrackDamageOverTimeComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Time;
        [RTTI.Member(1, 0x2C, "Logic")] public float Damage;
        [RTTI.Member(2, 0x30, "Logic")] public CPtr<EntityAction> ExceededAction;
        [RTTI.Member(3, 0x38, "Logic")] public Array<Ref<DamageTypeResource>> IgnoredDamageTypes;
    }

    [RTTI.Serializable(0xD91AF0EB764D42D9)]
    public class TrackObjectiveAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool EnableTracking;
    }

    [RTTI.Serializable(0x3C276F9A49895990)]
    public class TrackableComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFBA8965FC544469A)]
    public class TrackableComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x9284CDCCB2739DC)]
    public class TrackableComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<EntityResource> TrackEntityResource;
        [RTTI.Member(1, 0x30, "Logic")] public float DistanceBetweenTrailPoints;
        [RTTI.Member(2, 0x34, "Logic")] public float InitialTrackLength;
        [RTTI.Member(3, 0x38, "Logic")] public float InitialTrackSpeed;
        [RTTI.Member(4, 0x3C, "Logic")] public float TrackEntityViewDistance;
        [RTTI.Member(5, 0x40, "Logic")] public float TrackLifetime;
    }

    [RTTI.Serializable(0x77B1590C6BAE49F9)]
    public class TrackingComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x44AD8FD459EA8D79)]
    public class TrackingComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xD9BA327E8A0154B)]
    public class TrackingPath : Route
    {
        [RTTI.Member(0, 0xB8, "Logic")] public Ref<ConditionResource> DisplayCondition;
        [RTTI.Member(1, 0xC0, "Logic")] public Ref<TrackingPathSettings> PathSettings;
        [RTTI.Member(2, 0xC8, "Logic")] public Ref<GraphProgramResource> TaggedGraphProgram;
        [RTTI.Member(3, 0xD0, "Logic")] public Array<TrackingPathSegment> TrackingPathSegments;
        [RTTI.Member(4, 0xE0, "Logic")] public WorldBoundingBox3 BoundingBox;
        [RTTI.Member(5, 0x110, "Logic")] public float PathLength;
    }

    [RTTI.Serializable(0xDE4B0BA87921D83)]
    public class TrackingPathNode : RouteNode
    {
        [RTTI.Member(0, 0x90, "Logic")] public Ref<TrackingPathSettings> OverridePathSettings;
        [RTTI.Member(1, 0x98, "Logic")] public Array<Ref<TrackingPathSpecificFootstep>> SpecificFootsteps;
        [RTTI.Member(2, 0xA8, "Logic")] public bool GeneratePath;
    }

    [RTTI.Serializable(0xC3A49FE3D204CB4E)]
    public class TrackingPathQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public GGUUID TrackingPathUUID;
        [RTTI.Member(1, 0x38, "Logic")] public float CompletionRadius;
    }

    [RTTI.Serializable(0xE1641791AB9B0746)]
    public class TrackingPathQuestTriggerInstance : EntityQuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x4A0DB639E5CBC85E)]
    public class TrackingPathSegment
    {
        [RTTI.Member(0, 0x0)] public Array<WorldPosition> PositionSamples;
        [RTTI.Member(1, 0x10)] public Array<TrackingPathSegmentTrail> TrailData;
        [RTTI.Member(2, 0x20)] public WorldBoundingBox3 BoundingBox;
        [RTTI.Member(3, 0x50)] public float Length;
        [RTTI.Member(4, 0x54)] public float DistanceFromStart;
        [RTTI.Member(5, 0x58)] public bool Isconnected;
    }

    [RTTI.Serializable(0x4B83833773F57EA)]
    public class TrackingPathSegmentTrail
    {
        [RTTI.Member(0, 0x0)] public Array<WorldTransform> FootstepTransforms;
    }

    [RTTI.Serializable(0xE193C5B74D86566F)]
    public class TrackingPathSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Sound")] public Ref<SoundResource> TagSound;
        [RTTI.Member(1, 0x30, "Sound")] public Ref<SoundResource> UnTagSound;
        [RTTI.Member(2, 0x38, "Logic")] public Array<Ref<TrackingPathTrailBaseResource>> Trails;
        [RTTI.Member(3, 0x48, "Logic")] public float Smoothness;
        [RTTI.Member(4, 0x4C, "Logic")] public float MaxViewRange;
    }

    [RTTI.Serializable(0x39D76F5477894941)]
    public class TrackingPathSpecificFootstep : WorldNode
    {
        [RTTI.Member(0, 0x60, "Logic")] public Ref<EntityResource> FootstepResource;
        [RTTI.Member(1, 0x68, "Logic")] public bool IsShownOutsideFocus;
    }

    [RTTI.Serializable(0x52D9A103B65CAD9A)]
    public class TrackingPathTrailBaseResource : Resource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Mat44 Matrix;
        [RTTI.Member(1, 0xB0, "Logic")] public FRange DistanceBetweenFootsteps;
        [RTTI.Member(2, 0xB8, "Logic")] public FRange HorizontalRotationAngle;
        [RTTI.Member(3, 0xC0, "UpNormalBlending")] public ETrackingPathUpBlendType UpBlendingType;
        [RTTI.Member(4, 0xC4, "UpNormalBlending")] public float UpBlendingFactor;
        [RTTI.Member(5, 0xC8, "Logic")] public float StartDistanceOffset;
        [RTTI.Member(6, 0xCC, "Logic")] public bool SnapToGround;
        [RTTI.Member(7, 0xCD, "Logic")] public bool IsShownOutsideFocus;
        [RTTI.Member(8, 0xD0, "Logic")] public float OffsetForBackAndForthPatrol;
    }

    [RTTI.Serializable(0xECF612AB47D30723)]
    public class TrackingPathTrailEntityResource : TrackingPathTrailBaseResource
    {
        [RTTI.Member(0, 0xE0, "Logic")] public Array<Ref<EntityResource>> FootStepResources;
        [RTTI.Member(1, 0xF0, "Shader")] public String VariableNamePathLength;
        [RTTI.Member(2, 0xF8, "Shader")] public String VariableNameDistanceFromStart;
    }

    [RTTI.Serializable(0xBE8C712186F920DC)]
    public class TrackingPathTrailMeshResource : TrackingPathTrailBaseResource
    {
        [RTTI.Member(0, 0xE0, "Logic")] public Array<Ref<StaticMeshResource>> Meshes;
    }

    [RTTI.Serializable(0x24691484AAD7A2AC)]
    public class TrackingPathTrailPrefabResource : TrackingPathTrailBaseResource
    {
        [RTTI.Member(0, 0xE0, "Logic")] public Array<Ref<PrefabResource>> Prefabs;
    }

    [RTTI.Serializable(0xAAC15A37495E0223)]
    public class TradeItemsQuestTrigger : QuestTrigger
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<EntityResource>> Items;
        [RTTI.Member(1, 0x38, "Logic")] public Array<GGUUID> TraderSpawnSetupUUIDs;
        [RTTI.Member(2, 0x48, "Logic")] public int Amount;
        [RTTI.Member(3, 0x4C, "Logic")] public bool GiveItems;
        [RTTI.Member(4, 0x4D, "Logic")] public bool MustHaveBeenSpawnedThroughGroup;
    }

    [RTTI.Serializable(0x3E00E295A4F0DCF9)]
    public class TradeItemsQuestTriggerInstance : QuestTriggerInstance
    {
    }

    [RTTI.Serializable(0x10F83C0D54924456)]
    public class TrapComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x16D5FB1AA8AE1A68)]
    public class TrapComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x3E80A04120371492)]
    public class TravelArea : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Ref<TerrainHull> Hull;
    }

    [RTTI.Serializable(0x3A3B759CEA6D701F)]
    public class TraversalGroup : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public String Name;
        [RTTI.Member(1, 0x78, "Logic")] public Array<Ref<PrefabInstance>> Children;
    }

    [RTTI.Serializable(0xA4D617BBD772C207)]
    public class Triangle2D
    {
        [RTTI.Member(0, 0x0)] public Vec2 V0;
        [RTTI.Member(1, 0x10)] public Vec2 V1;
        [RTTI.Member(2, 0x20)] public Vec2 V2;
    }

    [RTTI.Serializable(0x4E6D1D50B63062A)]
    public class TriggerExposedActionAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Action;
    }

    [RTTI.Serializable(0xE1030E4AF8D4AD2E)]
    public class TriggerSoundMixAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<SoundMixResource> SoundMixResource;
        [RTTI.Member(1, 0x38, "Logic")] public bool OverrideMixZones;
        [RTTI.Member(2, 0x3C, "Logic")] public float FadeTime;
    }

    [RTTI.Serializable(0xA19538A907880072)]
    public class TrophyResource : Resource
    {
        [RTTI.Member(0, 0x28)] public int ID;
        [RTTI.Member(1, 0x30)] public Ref<EntitlementResource> Entitlement;
        [RTTI.Member(2, 0x38)] public Ref<ConditionResource> UnlockCondition;
    }

    [RTTI.Serializable(0x2B72B6C3FD5396B8)]
    public class TrophySystem : CoreObject
    {
    }

    [RTTI.Serializable(0x738DBDFF5BC418A4)]
    public class TrophySystemResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<TrophyResource>> Trophies;
        [RTTI.Member(1, 0x48, "Requirements")] public Ref<TrophyResource> EquipmentModificationTrophy;
        [RTTI.Member(2, 0x50, "Requirements")] public Ref<TrophyResource> SpearEquipmentModificationTrophy;
        [RTTI.Member(3, 0x58, "Requirements")] public Ref<TrophyResource> AllDLCPerksAcquiredTrophy;
    }

    [RTTI.Serializable(0xD01B7C6605DB3540)]
    public class TurbineContext : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String RegionID;
        [RTTI.Member(1, 0x28)] public String NodeID;
        [RTTI.Member(2, 0x30)] public String InstanceID;
        [RTTI.Member(3, 0x38)] public int GameID;
        [RTTI.Member(4, 0x40)] public String EncryptionKey;
        [RTTI.Member(5, 0x48)] public String ServerIP;
        [RTTI.Member(6, 0x50)] public int ServerPort;
    }

    [RTTI.Serializable(0x726763E4627853A2)]
    public class Turret : ControlledEntity
    {
    }

    [RTTI.Serializable(0xD5191C0A15C435CB)]
    public class TurretAiController : TurretController
    {
    }

    [RTTI.Serializable(0x74BAAA68DEBDE1A4)]
    public class TurretController : Controller
    {
    }

    [RTTI.Serializable(0x3E020DED669C39C9)]
    public class TurretRep : ControlledEntityRep
    {
    }

    [RTTI.Serializable(0xA11C961C12BE4198)]
    public class TurretResource : ControlledEntityResource
    {
        [RTTI.Member(0, 0x209, "Logic")] public bool InitiallyClosed;
        [RTTI.Member(1, 0x20A, "Logic")] public bool SelfDestructWhenAmmoEmpty;
        [RTTI.Member(2, 0x20B, "AI")] public bool GuessAITargetEntity;
        [RTTI.Member(3, 0x210, "AI")] public Ref<AIVisualStimulusResource> VisualStimulus;
        [RTTI.Member(4, 0x218, "Logic")] public String AimHelper;
        [RTTI.Member(5, 0x220, "SoundEffects")] public Ref<SoundResource> AimRotationSound;
        [RTTI.Member(6, 0x228, "Representation")] public Ref<TurretTargetingLasersResource> TurretTargetingLasersResource;
        [RTTI.Member(7, 0x230, "Logic")] public bool HidePhysicsWhenClosed;
        [RTTI.Member(8, 0x231, "Logic")] public bool SkipModelUpdateWhenClosed;
    }

    [RTTI.Serializable(0x7F9897B52252FC15)]
    public class TurretTargetingLasersResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LaserBeamResource> LaserBeamResource;
        [RTTI.Member(1, 0x30)] public int NumLasers;
        [RTTI.Member(2, 0x34)] public float ScanningLength;
        [RTTI.Member(3, 0x38)] public bool UseMaxTargetingLength;
        [RTTI.Member(4, 0x3C)] public float MaxTargetingLength;
        [RTTI.Member(5, 0x40)] public float TargetingFollowFactor;
        [RTTI.Member(6, 0x44)] public float TargetingFollowAcceleration;
        [RTTI.Member(7, 0x48)] public float TargetingFollowDeceleration;
    }

    [RTTI.Serializable(0x8EAEDD40CB4CD8AE)]
    public class TwoJointIkBendConfig
    {
        [RTTI.Member(0, 0x0, true)] public String EndJoint;
        [RTTI.Member(1, 0x10)] public Mat44 BaseBindMatrix;
        [RTTI.Member(2, 0x50)] public Vec3 FixedVtx0;
        [RTTI.Member(3, 0x60)] public Vec3 FixedVtx1;
        [RTTI.Member(4, 0x70)] public Vec3 FixedVtx2;
        [RTTI.Member(5, 0x80)] public Vec3 FixedVtx3;
        [RTTI.Member(6, 0x90)] public int16 JointIdx0;
        [RTTI.Member(7, 0x92)] public int16 JointIdx1;
        [RTTI.Member(8, 0x94)] public int16 JointIdx2;
        [RTTI.Member(9, 0x98)] public float RelativeUpperExtent;
        [RTTI.Member(10, 0x9C)] public float LowerBendRatio;
        [RTTI.Member(11, 0xA0)] public float MotionDamping;
        [RTTI.Member(12, 0xA4)] public float Stiffness;
    }

    [RTTI.Serializable(0x3885AF02C86A71F0)]
    public class Typeface : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Array<Ref<TypefaceStyle>> Styles;
        [RTTI.Member(1, 0x38, "General")] public float Tracking;
    }

    [RTTI.Serializable(0xF791ABF590F3ABB2)]
    public class TypefaceStyle : Resource
    {
        [RTTI.Member(0, 0x30, "Shadow")] public Vec2 Offset;
        [RTTI.Member(1, 0x40, "General")] public FRGBAColor General_Color;
        [RTTI.Member(2, 0x50, "Shadow")] public FRGBAColor Shadow_Color;
        [RTTI.Member(3, 0x60, "General")] public Ref<FontResource> Font;
        [RTTI.Member(4, 0x68, "General")] public String StyleName;
        [RTTI.Member(5, 0x70, "General")] public float FontSize;
        [RTTI.Member(6, 0x74, "Shadow")] public float BlurSize;
        [RTTI.Member(7, 0x78, "Shadow")] public float Strength;
    }

    [RTTI.Serializable(0x1303AE560875873A)]
    public class UIEffect : RTTIObject
    {
    }

    [RTTI.Serializable(0xAD2E81EBBB1CD54A)]
    public class UIEffectResource : Resource
    {
        [RTTI.Member(0, 0x28, "Shader")] public Ref<RenderEffectResource> RenderEffectResource;
        [RTTI.Member(1, 0x30, "Shader")] public RGBAColor Color;
        [RTTI.Member(2, 0x40, "Shader")] public FRect UVRect;
        [RTTI.Member(3, 0x50, "Bindings")] public Array<UITextureBindingOverride> Textures;
        [RTTI.Member(4, 0x60, "Bindings")] public Array<ShaderVariableBinding> ShaderVariables;
    }

    [RTTI.Serializable(0x4B39192B72338131)]
    public class UIGraphData : RTTIRefObject
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<float> GraphData;
        [RTTI.Member(1, 0x38, "Logic")] public float MinYView;
        [RTTI.Member(2, 0x3C, "Logic")] public float MaxYView;
    }

    [RTTI.Serializable(0x81850A88CA7D2FF9)]
    public class UIRect : IRect
    {
    }

    [RTTI.Serializable(0xCD294018F2E7822B)]
    public class UITextureBindingOverride
    {
        [RTTI.Member(0, 0x0)] public String TextureName;
        [RTTI.Member(1, 0x8)] public Ref<UITexture> Texture;
    }

    [RTTI.Serializable(0x17621276907D7EB1)]
    public class UnlockableFacePaint : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> MenuText;
        [RTTI.Member(1, 0x30)] public Ref<RenderEffectShaderOverridesResource> ShaderOverrides;
        [RTTI.Member(2, 0x38)] public EDifficulty NewGamePlusCompletedDifficulty;
    }

    [RTTI.Serializable(0x668B3C91CEA3F738)]
    public class UnlockableFocusModel : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> MenuText;
        [RTTI.Member(1, 0x30)] public EDifficulty NewGamePlusCompletedDifficulty;
    }

    [RTTI.Serializable(0x273D17A8F79FE68B)]
    public class UnmountEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x1A68EBFADF859943)]
    public class UnmountEventResource : PausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> InteractiveEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool MoveAfterDismount;
        [RTTI.Member(2, 0x48, "Logic")] public String PostureAfterDismount;
    }

    [RTTI.Serializable(0x811807D43222F32F)]
    public class UpdateClanRequest : RTTIRefObject
    {
        [RTTI.Member(0, 0x20)] public String Description;
    }

    [RTTI.Serializable(0x807E13D42439A2D1)]
    public class UpgradableStackableComponent : StackableComponent
    {
    }

    [RTTI.Serializable(0x740369B64007CE80)]
    public class UpgradableStackableComponentResource : StackableComponentResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<IntegerFact> UpgradeLevelFact;
        [RTTI.Member(1, 0x40, "Logic")] public Array<int> UpgradedLimits;
    }

    [RTTI.Serializable(0xF0DC14C8DC72CA7E)]
    public class UpgradeCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0xC6355B9420CC3CA6)]
    public class UpgradeRecipe : ItemRecipe
    {
    }

    [RTTI.Serializable(0x9DE0569F4D1CD95B)]
    public class UseInteractiveEntityAction : EntityAction
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Immediate;
        [RTTI.Member(1, 0x38, "Logic")] public String UseLocation;
    }

    [RTTI.Serializable(0x24EEAB700C50B1D3)]
    public class UseLocation : CoreObject
    {
        [RTTI.Member(0, 0x60, "Private", true)] public CPtr<UseLocationResource> Resource;
        [RTTI.Member(1, 0x68, "Private", true)] public CPtr<Entity> Entity;
    }

    [RTTI.Serializable(0x4441FA418BE132B5)]
    public class UseLocationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x909C1EE966539B74)]
    public class UseLocationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool IgnoreOwnership;
        [RTTI.Member(1, 0x29, "Logic")] public bool DisableAfterUse;
        [RTTI.Member(2, 0x30, "Logic")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(3, 0x38, "Logic")] public String HelperName;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<UseLocationConditionSet> UseLocationConditionSet;
        [RTTI.Member(5, 0x48, "Logic")] public CPtr<EntityAction> UseAction;
        [RTTI.Member(6, 0x50, "Logic")] public CPtr<EntityAction> UseActionOnUser;
        [RTTI.Member(7, 0x58, "Logic")] public CPtr<EntityAction> OnClaimedAction;
        [RTTI.Member(8, 0x60, "Logic")] public CPtr<EntityAction> OnClaimedActionOnUser;
        [RTTI.Member(9, 0x68, "Logic")] public CPtr<EntityAction> OnReleaseClaimAction;
    }

    [RTTI.Serializable(0xA0F039EB2C51454C)]
    public class UseLocationCondition : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<LocalizedTextResource> FailMessage;
    }

    [RTTI.Serializable(0x545F2169921C394D)]
    public class UseLocationConditionCanPickUpExclusiveWieldItems : UseLocationCondition
    {
    }

    [RTTI.Serializable(0xD37F373399AA2679)]
    public class UseLocationConditionFitsInInventory : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public Ref<EntityResource> EntityResource;
        [RTTI.Member(1, 0x38)] public int Amount;
    }

    [RTTI.Serializable(0xDAC2DF2FB8AE3A93)]
    public class UseLocationConditionHasBoolProperty : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public BoolPropertyLink PropertyLink;
        [RTTI.Member(1, 0x38)] public bool Value;
    }

    [RTTI.Serializable(0xCAF3AFADDB751595)]
    public class UseLocationConditionHasBooleanFact : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x38)] public bool Value;
    }

    [RTTI.Serializable(0x6BD8DE154D858321)]
    public class UseLocationConditionHasInventoryItem : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public String Name;
        [RTTI.Member(1, 0x38)] public CPtr<InventoryEntityResource> Resource;
        [RTTI.Member(2, 0x40)] public ECheckQuestItems CheckQuestItems;
    }

    [RTTI.Serializable(0xE9BB79A72ADD226A)]
    public class UseLocationConditionHasScriptProperty : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public String Name;
        [RTTI.Member(1, 0x38)] public String Value;
    }

    [RTTI.Serializable(0x54DB86AD22D838BA)]
    public class UseLocationConditionInventoryEmpty : UseLocationCondition
    {
        [RTTI.Member(0, 0x30, "Logic")] public bool Empty;
    }

    [RTTI.Serializable(0x72C7825A72E36FA8)]
    public class UseLocationConditionIsAi : UseLocationCondition
    {
    }

    [RTTI.Serializable(0xA8D4350F1690FF43)]
    public class UseLocationConditionIsAttachedToAnnotationWithTag : UseLocationCondition
    {
        [RTTI.Member(0, 0x30, "Logic")] public String Tag;
        [RTTI.Member(1, 0x38, "Logic")] public bool UsableEntityMustBeAnnotationOwner;
    }

    [RTTI.Serializable(0xD7B80C74B7D1988C)]
    public class UseLocationConditionIsEnemy : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x4A8C67F7B66E4396)]
    public class UseLocationConditionIsEntityReachable : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x8EFBFD785A1EBC62)]
    public class UseLocationConditionIsEntityVisible : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x79ADE02949BA729A)]
    public class UseLocationConditionIsHumanoid : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x55AECEE728B2D784)]
    public class UseLocationConditionIsInstigator : UseLocationCondition
    {
    }

    [RTTI.Serializable(0x19D89BC95A6B81A2)]
    public class UseLocationConditionIsLookingAtLocation : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public Vec3 LookAtPoint;
        [RTTI.Member(1, 0x40)] public float LookAtAngle;
    }

    [RTTI.Serializable(0xFFFE04CA09A8DCE1)]
    public class UseLocationConditionIsPlayer : UseLocationCondition
    {
    }

    [RTTI.Serializable(0xFB653AA93B5938A0)]
    public class UseLocationConditionIsSpecifiedEntity : UseLocationCondition
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<EntityResource> EntityResource;
    }

    [RTTI.Serializable(0x78026BEDFDB14FAE)]
    public class UseLocationConditionSet : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<UseLocationCondition>> RequiredConditions;
        [RTTI.Member(1, 0x38)] public Array<Ref<UseLocationCondition>> DisallowedConditions;
    }

    [RTTI.Serializable(0x1AAD591A3F43BCED)]
    public class UseLocationConditionUserHasBoolProperty : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public BoolPropertyLink PropertyLink;
        [RTTI.Member(1, 0x38)] public bool Value;
    }

    [RTTI.Serializable(0x654C3AC4887B0B53)]
    public class UseLocationConditionUserHasBooleanFact : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public Ref<BooleanFact> Fact;
        [RTTI.Member(1, 0x38)] public bool Value;
    }

    [RTTI.Serializable(0xB250325EADBFB212)]
    public class UseLocationConditionUserHasEnumFact : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public Ref<EnumFact> Fact;
        [RTTI.Member(1, 0x38)] public Ref<EnumFactValue> Value;
    }

    [RTTI.Serializable(0x303E92F79DF606E0)]
    public class UseLocationConditionUserHasScriptProperty : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public String Name;
        [RTTI.Member(1, 0x38)] public String Value;
    }

    [RTTI.Serializable(0x72911C6071B1A9FB)]
    public class UseLocationCondtionIsMounted : UseLocationCondition
    {
        [RTTI.Member(0, 0x30)] public bool FullyMounted;
    }

    [RTTI.Serializable(0x282F68B102473ADC)]
    public class UseLocationGame : UseLocation
    {
    }

    [RTTI.Serializable(0xCDD0BA540079B10F)]
    public class UseLocationGraphCondition : UseLocationCondition
    {
        [RTTI.Member(0, 0x30, "Logic")] public Ref<GraphProgramResource> Condition;
        [RTTI.Member(1, 0x38, "Logic")] public Ref<OverrideGraphProgramResource> OverrideCondition;
    }

    [RTTI.Serializable(0x4EA28B51044715A3)]
    public class UseLocationInfo
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x10)] public Ref<UseLocationConditionSet> ConditionSet;
        [RTTI.Member(2, 0x18)] public CPtr<EntityAction> UseAction;
        [RTTI.Member(3, 0x20)] public CPtr<EntityAction> UseActionOnUser;
        [RTTI.Member(4, 0x28)] public Ref<UseLocationResource> Resource;
        [RTTI.Member(5, 0x30)] public ERelativeUseLocationPosition RelativePosition;
        [RTTI.Member(6, 0x40)] public Vec3 Offset;
        [RTTI.Member(7, 0x50)] public Mat44 UseBoxMatrix;
        [RTTI.Member(8, 0x90)] public Array<UserModeInfo> UserModes;
        [RTTI.Member(9, 0xA0)] public bool HasLookAtPoint;
        [RTTI.Member(10, 0xB0)] public Vec3 LookAtPoint;
        [RTTI.Member(11, 0xC0)] public bool UsableByPlayer;
    }

    [RTTI.Serializable(0x358E7BF4D49CB3E5)]
    public class UseLocationLocatorInstance : LocatorInstance
    {
    }

    [RTTI.Serializable(0x86688CD6745AA531)]
    public class UseLocationLocatorResource : LocatorResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public String UseLocationName;
        [RTTI.Member(1, 0x40, "Logic")] public Ref<EntityActorResource> EntityActorResource;
    }

    [RTTI.Serializable(0xCFF8782B967C48AE)]
    public class UseLocationPriority : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public int Priority;
        [RTTI.Member(1, 0x2C, "Logic")] public bool Exclusive;
    }

    [RTTI.Serializable(0x17B0370E7A281416)]
    public class UseLocationResource : Resource
    {
        [RTTI.Member(0, 0x30, "Logic")] public BoundingBox3 Bounds;
        [RTTI.Member(1, 0x50, "Logic")] public Ref<UseLocationPriority> UsePriority;
        [RTTI.Member(2, 0x58, "General")] public bool IsUsableByPlayer;
        [RTTI.Member(3, 0x59, "General")] public bool IsUsableByAI;
        [RTTI.Member(4, 0x60, "General")] public Ref<UseLocationConditionSet> ConditionSet;
        [RTTI.Member(5, 0x68, "General")] public bool AutoUsePlayer;
        [RTTI.Member(6, 0x69, "General")] public bool AutoUseAi;
        [RTTI.Member(7, 0x6A, "Logic")] public EUseLocationSelectionSortType SelectionSortType;
        [RTTI.Member(8, 0x6C, "Logic")] public float UseTime;
        [RTTI.Member(9, 0x70, "Logic")] public bool IsUsableWhenInvisible;
        [RTTI.Member(10, 0x74, "Logic")] public float MaxUseAngle;
        [RTTI.Member(11, 0x7C, "Logic")] public FRange MaxHeightDifference;
        [RTTI.Member(12, 0x84, "Logic")] public bool ShowInHud;
        [RTTI.Member(13, 0x88, "General")] public Ref<Texture> ActionIconTexture;
        [RTTI.Member(14, 0x90, "General")] public Ref<LocalizedTextResource> DisplayText;
        [RTTI.Member(15, 0x98, "Logic")] public bool WalkToUseLocation;
        [RTTI.Member(16, 0x9C, "Logic")] public float MinWalkToUseLocationSpeed;
    }

    [RTTI.Serializable(0xB140DD9E513D42E1)]
    public class UseLocationResourceGame : UseLocationResource
    {
        [RTTI.Member(0, 0xA0, "Logic")] public bool IsSpherical;
        [RTTI.Member(1, 0xA1, "Logic")] public bool IsOnlyUsableByHumanoids;
        [RTTI.Member(2, 0xA2, "Logic")] public bool NeedsToBeInFrontOfPlayer;
        [RTTI.Member(3, 0xA3, "Logic")] public bool NeedsLineOfSight;
        [RTTI.Member(4, 0xA4, "Logic")] public bool InterruptUseOnDamage;
        [RTTI.Member(5, 0xA8, "General")] public EUseLocationType Type;
        [RTTI.Member(6, 0xAC, "Logic")] public bool MustDismount;
        [RTTI.Member(7, 0xAD, "Logic")] public bool MustStowWeapons;
        [RTTI.Member(8, 0xAE, "Logic")] public bool WhenStowingDoItImmediate;
        [RTTI.Member(9, 0xB0, "Logic")] public EStance UseStance;
        [RTTI.Member(10, 0xB4, "Logic")] public EDeviceFunction UseFunction;
        [RTTI.Member(11, 0xB8, "Logic")] public BoolPropertyLink AllowUseOverrideProperty;
        [RTTI.Member(12, 0xC0, "Representation")] public Ref<SoundResource> UseDoneSound;
        [RTTI.Member(13, 0xC8, "Representation")] public bool ShowBusyIcon;
    }

    [RTTI.Serializable(0x4A2DE7A671ADDA9F)]
    public class UseSpeedModifierComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x843C120756096BA9)]
    public class UseSpeedModifierComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float UseSpeedModifier;
        [RTTI.Member(1, 0x30, "Logic")] public Array<Ref<UseLocationResource>> UseLocations;
    }

    [RTTI.Serializable(0xFBE1E5F4D3DBED3F)]
    public class UsedEntityScoreSettings : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<StatsClassResource> StatsClass;
        [RTTI.Member(1, 0x10)] public int PointsPerKill;
        [RTTI.Member(2, 0x14)] public int PointsPerKillAssist;
    }

    [RTTI.Serializable(0x54B32F659E7DEAF7)]
    public class UserComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x27E9CB5FA7ABA6B4)]
    public class UserComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public BoundingBox3 UseBox;
    }

    [RTTI.Serializable(0x962D59A0E14D867B)]
    public class UserDamageModifier
    {
        [RTTI.Member(0, 0x0)] public Ref<DamageTypeResource> DamageTypeResource;
        [RTTI.Member(1, 0x8)] public float DamageFactor;
    }

    [RTTI.Serializable(0x30B6DB126F493687)]
    public class UserModeInfo
    {
        [RTTI.Member(0, 0x0)] public ECarryModes Carry;
        [RTTI.Member(1, 0x4)] public EStance Stance;
        [RTTI.Member(2, 0x8)] public bool Moving;
        [RTTI.Member(3, 0x9)] public bool Falling;
        [RTTI.Member(4, 0x10)] public String AnimationState;
        [RTTI.Member(5, 0x18)] public String AnimationTag;
        [RTTI.Member(6, 0x20)] public bool ForceToAnimState;
        [RTTI.Member(7, 0x24)] public int MountPosition;
        [RTTI.Member(8, 0x30)] public Mat44 AnimationMatrix;
        [RTTI.Member(9, 0x70)] public EMountDismountLocation Location;
        [RTTI.Member(10, 0x74)] public uint32 PathCost;
    }

    [RTTI.Serializable(0x4BF789B795CB64E6)]
    public class ValueStatDisplayEntry : StatDisplayEntry
    {
        [RTTI.Member(0, 0x38, "General")] public int StatNumberValue;
    }

    [RTTI.Serializable(0x9E2F48BBD378DBB3)]
    public class Valve : MountableEntity
    {
    }

    [RTTI.Serializable(0x710138314E5B3295)]
    public class ValveAiController : ValveController
    {
    }

    [RTTI.Serializable(0xBAA307AC249A5851)]
    public class ValveController : InteractiveEntityController
    {
    }

    [RTTI.Serializable(0x23BA2936BE43CB4C)]
    public class ValveJoystickController : ValveController
    {
    }

    [RTTI.Serializable(0xD813E5730153A88F)]
    public class ValveRep : InteractiveEntityRep
    {
    }

    [RTTI.Serializable(0xE5D0078AAAE07716)]
    public class ValveResource : MountableEntityResource
    {
        [RTTI.Member(0, 0x2F0, "Valve")] public float MinAngle;
        [RTTI.Member(1, 0x2F4, "Valve")] public float MaxAngle;
        [RTTI.Member(2, 0x2F8, "Valve")] public float InitialAngle;
        [RTTI.Member(3, 0x2FC, "Valve")] public float MinHandAngle;
        [RTTI.Member(4, 0x300, "Valve")] public float MaxHandAngle;
        [RTTI.Member(5, 0x304, "Valve")] public float MaxRotationSpeed;
        [RTTI.Member(6, 0x308, "Valve")] public String ValveBoneName;
        [RTTI.Member(7, 0x310, "Valve")] public float DisableValue;
        [RTTI.Member(8, 0x314, "Representation")] public float RepresentationMinHandAngle;
        [RTTI.Member(9, 0x318, "Representation")] public float RepresentationMaxHandAngle;
        [RTTI.Member(10, 0x320, "Representation")] public Ref<SoundResource> RotationSound;
        [RTTI.Member(11, 0x328, "Representation")] public Ref<RumbleResource> RotationRumble;
        [RTTI.Member(12, 0x330, "Representation")] public Ref<RumbleResource> EndRumble;
        [RTTI.Member(13, 0x338, "Representation")] public Ref<CurveResource> RumblePerValueCurve;
        [RTTI.Member(14, 0x340, "Representation")] public String ValueShaderVariableID;
    }

    [RTTI.Serializable(0x85086DAF59FF8BDA)]
    public class VantageComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD60F03CB22A8B1E5)]
    public class VantageComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0xB34064332C1EE620)]
    public class VantageComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<UseLocationResource> UseLocationResource;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<Texture> VantageTextureOverride;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<WorldNode> VantagePointOfInterest;
        [RTTI.Member(3, 0x40, "Logic")] public Vec3 VantageOffset;
    }

    [RTTI.Serializable(0x934401FAAE8B0367)]
    public class VariableActorInstance : EntityActorInstance
    {
    }

    [RTTI.Serializable(0xC26D6704B3133F98)]
    public class VariableActorResource : EntityActorResource
    {
        [RTTI.Member(0, 0x78, "Logic")] public Ref<SequenceEntityVariable> EntityVariable;
    }

    [RTTI.Serializable(0xB1976373A887B95B)]
    public class VariableBindingWithHandle : ShaderVariableBinding
    {
        [RTTI.Member(0, 0x20)] public HwBindingHandle VarBindingHandle;
    }

    [RTTI.Serializable(0x75E82001792C4123)]
    public class VaultDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDB7813D4E82DB654)]
    public class VaultDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Animation")] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(1, 0x30, "Animation")] public Array<Ref<HumanoidVaultTransition>> Transitions;
        [RTTI.Member(2, 0x40, "Logic")] public Ref<VaultSurfaceDetectionSettings> WalkJogVaultSurfaceDetectionSettings;
        [RTTI.Member(3, 0x48, "Logic")] public Ref<VaultSurfaceDetectionSettings> SprintVaultSurfaceDetectionSettings;
        [RTTI.Member(4, 0x50, "Logic")] public Ref<VaultSurfaceDetectionSettings> CrouchedVaultSurfaceDetectionSettings;
        [RTTI.Member(5, 0x58, "Logic")] public Ref<VaultSurfaceDetectionSettings> SwimmingVaultSurfaceDetectionSettings;
        [RTTI.Member(6, 0x60, "Logic")] public TagPropertyLink DisallowVaultableTagProperty;
        [RTTI.Member(7, 0x68, "Logic")] public bool AllowVaultingOverDeadControlledEntities;
        [RTTI.Member(8, 0x6C, "Logic", true)] public float MaximumVaultOverDistanceJog;
        [RTTI.Member(9, 0x70, "Logic", true)] public float MaximumVaultOverDistanceSprint;
        [RTTI.Member(10, 0x78, "Logic")] public Array<MaterialType> DisallowMaterials;
        [RTTI.Member(11, 0x88, "Logic", true)] public bool HasVerticalObstacleTransitions;
        [RTTI.Member(12, 0x89, "Logic", true)] public bool HasHorizontalObstacleTransitions;
        [RTTI.Member(13, 0x8A, "Logic", true)] public bool HasParkourableObstacleTransitions;
        [RTTI.Member(14, 0x8B, "Logic")] public bool AllowChainedVaults;
    }

    [RTTI.Serializable(0xF4648A55975DD022)]
    public class VaultSurfaceDetectionSettings : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float VerticalCollisionDetectionRadius;
        [RTTI.Member(1, 0x2C, "Logic")] public float HorizontalCollisionDetectionRadius;
        [RTTI.Member(2, 0x30, "Logic")] public float CollisionAboveDetectionRadius;
        [RTTI.Member(3, 0x34, "Logic")] public float MaxDifferenceWithInitialContact;
        [RTTI.Member(4, 0x38, "Logic")] public FRange CollisionDetectionHeightRange;
        [RTTI.Member(5, 0x40, "Logic")] public float VerticalCornerCollisionRadius;
        [RTTI.Member(6, 0x44, "Logic")] public float VerticalCornerCollisionOffset;
        [RTTI.Member(7, 0x48, "Logic")] public float HorizontalCornerCollisionRadius;
        [RTTI.Member(8, 0x4C, "Logic")] public float HorizontalCornerCollisionOffset;
        [RTTI.Member(9, 0x50, "Logic")] public Ref<CurveResource> VerticalCollisionCheckDistance;
        [RTTI.Member(10, 0x58, "Logic")] public Ref<CurveResource> HorizontalCollisionCheckDistance;
        [RTTI.Member(11, 0x60, "Logic")] public Ref<CurveResource> VaultOffCollisionCheckDistance;
        [RTTI.Member(12, 0x68, "Logic")] public float LandingCollisionDetectionRadius;
        [RTTI.Member(13, 0x70, "Logic")] public Ref<CurveResource> LandingFloorCheckForwardDistanceCurve;
        [RTTI.Member(14, 0x78, "Logic")] public float MinFloorHeightDifference;
    }

    [RTTI.Serializable(0x6B85BFAEC422A57E)]
    public class Vec2Pack
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
    }

    [RTTI.Serializable(0x4760E98FA8545BCF)]
    public class Vec3
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
    }

    [RTTI.Serializable(0x96958ADF649DC40C)]
    public class Vec3Pack
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
    }

    [RTTI.Serializable(0x40C0A682D38DA690)]
    public class Vec3Property : Vec3PropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x90E1D4F93D4496D5)]
    public class Vec3PropertyBase : Property
    {
    }

    [RTTI.Serializable(0x9418F74B748365DE)]
    public class Vec3PropertyLink : PropertyLinkBase
    {
        [RTTI.Member(0, 0x0)] public Ref<Vec3PropertyBase> Property;
    }

    [RTTI.Serializable(0xAA82D9E5C7F57270)]
    public class Vec4
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
        [RTTI.Member(3, 0xC)] public float W;
    }

    [RTTI.Serializable(0x938A0B7F8332D194)]
    public class Vec4Pack
    {
        [RTTI.Member(0, 0x0)] public float X;
        [RTTI.Member(1, 0x4)] public float Y;
        [RTTI.Member(2, 0x8)] public float Z;
        [RTTI.Member(3, 0xC)] public float W;
    }

    [RTTI.Serializable(0x4B792B94DD853565)]
    public class VegetationCollisionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xDE7726E094BD47E1)]
    public class VegetationCollisionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String HelperNode;
        [RTTI.Member(1, 0x30, "Logic")] public Vec3 StartOffset;
        [RTTI.Member(2, 0x40, "Logic")] public Vec3 EndOffset;
        [RTTI.Member(3, 0x50, "Logic")] public float Radius;
        [RTTI.Member(4, 0x58, "Logic")] public Ref<CurveResource> RadiusByVelocityCurve;
        [RTTI.Member(5, 0x60, "Logic")] public bool AlignToEntity;
        [RTTI.Member(6, 0x61, "Logic")] public bool AttachToCamera;
        [RTTI.Member(7, 0x62, "Logic")] public bool UseHmanoidCapsule;
        [RTTI.Member(8, 0x63, "Logic")] public bool ApplyDownForce;
    }

    [RTTI.Serializable(0x481DCE5CC99F176D)]
    public class VegetationCoverComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xF94DEF7AB4B4960E)]
    public class VegetationCoverComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public bool DisableFootstepStimuliWhenHidden;
        [RTTI.Member(1, 0x29, "Logic")] public bool DisableBodyVisualStimuliWhenHidden;
        [RTTI.Member(2, 0x30, "Logic")] public CPtr<EntityAction> OnActivateStealthAction;
        [RTTI.Member(3, 0x38, "Logic")] public CPtr<EntityAction> OnDeactivateStealthAction;
        [RTTI.Member(4, 0x40, "Logic")] public Ref<GraphProgramResource> StealthCondition;
        [RTTI.Member(5, 0x48, "Logic")] public float EnterStealthAtmosphereRadius;
        [RTTI.Member(6, 0x4C, "Logic")] public float ExitStealthAtmosphereRadius;
        [RTTI.Member(7, 0x50, "Logic")] public String HelperName;
        [RTTI.Member(8, 0x58, "Logic")] public bool ShouldAlignLineChecksWithWorld;
        [RTTI.Member(9, 0x60, "Logic")] public Array<String> LoweredVisualNodeBones;
    }

    [RTTI.Serializable(0x14495130261966AC)]
    public class VegetationInstance : WorldNode
    {
        [RTTI.BaseClass(0x60)] public RTTIRefObjectSet @RTTIRefObjectSet;
        [RTTI.Member(1, 0xA8)] public Ref<VegetationResource> Resource;
    }

    [RTTI.Serializable(0x469ECEBE245DC115)]
    public class VegetationResource : Resource
    {
        [RTTI.Member(0, 0x5B0)] public Array<Ref<BiotopeBase>> Biotopes;
        [RTTI.Member(1, 0x5C0)] public bool FlipMasks;
        [RTTI.Member(2, 0x5D0)] public BoundingBox3 Bounds;
        [RTTI.Member(3, 0x5F0)] public Array<Ref<HulledMesh>> CreatedMeshes;
    }

    [RTTI.Serializable(0xB32D8C5365EF516B)]
    public class VertexDeltaDeformation
    {
        [RTTI.Member(0, 0x0)] public Vec3 DeltaPos;
        [RTTI.Member(1, 0xC)] public uint8 DeltaNrmX;
        [RTTI.Member(2, 0xD)] public uint8 DeltaNrmY;
        [RTTI.Member(3, 0xE)] public uint8 DeltaNrmZ;
        [RTTI.Member(4, 0xF)] public uint8 VertexIndex;
    }

    [RTTI.Serializable(0x2765F3E5860613A8)]
    public class VertexElementSet
    {
        [RTTI.Member(0, 0x0)] public uint32 SetData;
    }

    [RTTI.Serializable(0x47C11FFCA2C84300)]
    public class VertexSkin
    {
        [RTTI.Member(0, 0x0)] public int16 X;
        [RTTI.Member(1, 0x2)] public int16 Y;
        [RTTI.Member(2, 0x4)] public int16 Z;
        [RTTI.Member(3, 0x6)] public uint8 Weight1;
        [RTTI.Member(4, 0x7)] public uint8 Weight2;
        [RTTI.Member(5, 0x8)] public uint8 Weight3;
        [RTTI.Member(6, 0x9)] public uint8 Weight4;
        [RTTI.Member(7, 0xA)] public uint8 Weight5;
        [RTTI.Member(8, 0xB)] public uint8 Weight6;
        [RTTI.Member(9, 0xC)] public uint8 Weight7;
        [RTTI.Member(10, 0xD)] public CompressedUnitVector3B N;
        [RTTI.Member(11, 0x10)] public uint16 Bone0;
        [RTTI.Member(12, 0x12)] public uint16 Bone1;
        [RTTI.Member(13, 0x14)] public uint16 Bone2;
        [RTTI.Member(14, 0x16)] public uint16 Bone3;
        [RTTI.Member(15, 0x18)] public uint16 Bone4;
        [RTTI.Member(16, 0x1A)] public uint16 Bone5;
        [RTTI.Member(17, 0x1C)] public uint16 Bone6;
        [RTTI.Member(18, 0x1E)] public uint16 Bone7;
    }

    [RTTI.Serializable(0x692152594647BDB7)]
    public class VertexSkinNBT
    {
        [RTTI.Member(0, 0x0)] public int16 X;
        [RTTI.Member(1, 0x2)] public int16 Y;
        [RTTI.Member(2, 0x4)] public int16 Z;
        [RTTI.Member(3, 0x6)] public uint8 Weight1;
        [RTTI.Member(4, 0x7)] public uint8 Weight2;
        [RTTI.Member(5, 0x8)] public uint8 Weight3;
        [RTTI.Member(6, 0x9)] public uint8 Weight4;
        [RTTI.Member(7, 0xA)] public uint8 Weight5;
        [RTTI.Member(8, 0xB)] public uint8 Weight6;
        [RTTI.Member(9, 0xC)] public uint8 Weight7;
        [RTTI.Member(10, 0xD)] public CompressedUnitVector3B N;
        [RTTI.Member(11, 0x10)] public uint16 Bone0;
        [RTTI.Member(12, 0x12)] public uint16 Bone1;
        [RTTI.Member(13, 0x14)] public uint16 Bone2;
        [RTTI.Member(14, 0x16)] public uint16 Bone3;
        [RTTI.Member(15, 0x18)] public uint16 Bone4;
        [RTTI.Member(16, 0x1A)] public uint16 Bone5;
        [RTTI.Member(17, 0x1C)] public uint16 Bone6;
        [RTTI.Member(18, 0x1E)] public uint16 Bone7;
        [RTTI.Member(19, 0x20)] public CompressedUnitVector3B B;
        [RTTI.Member(20, 0x23)] public CompressedUnitVector3B T;
    }

    [RTTI.Serializable(0x56C994DC52D6F42C)]
    public class VertexStreamBindingDesc
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public String SemanticName;
        [RTTI.Member(2, 0x10)] public EVertexElement VertexElement;
        [RTTI.Member(3, 0x11)] public ESRTElementFormat DataFormat;
    }

    [RTTI.Serializable(0x9A166AFA9C1066AC)]
    public class VictimPropertyStatMap
    {
        [RTTI.Member(0, 0x0)] public EPlayerScoreStat Stat;
        [RTTI.Member(1, 0x8)] public BoolPropertyLink Property;
        [RTTI.Member(2, 0x10)] public Ref<ScoreResource> ScoreEvent;
        [RTTI.Member(3, 0x18)] public EPlayerKilledDataBits KillFlag;
    }

    [RTTI.Serializable(0xDEF332645422FE2F)]
    public class ViewDependentEntity : Entity
    {
    }

    [RTTI.Serializable(0xF83C9F219E46AD1C)]
    public class ViewDependentEntityRep : EntityRep
    {
    }

    [RTTI.Serializable(0x6A3D54D6C88C30FB)]
    public class ViewDependentEntityResource : EntityResource
    {
    }

    [RTTI.Serializable(0x7423E54FD9054BAE)]
    public class ViewFrustumInfo
    {
        [RTTI.Member(0, 0x0, "Matrices")] public WorldTransform WorldTransform;
        [RTTI.Member(1, 0x40, "Planes")] public float Near;
        [RTTI.Member(2, 0x44, "Planes")] public float Far;
        [RTTI.Member(3, 0x48, "Planes")] public float Top;
        [RTTI.Member(4, 0x4C, "Planes")] public float Bottom;
        [RTTI.Member(5, 0x50, "Planes")] public float Left;
        [RTTI.Member(6, 0x54, "Planes")] public float Right;
        [RTTI.Member(7, 0x58, "Projection")] public EProjectionMode ProjectionMode;
    }

    [RTTI.Serializable(0xF9B4734E45899331)]
    public class ViewportSetup
    {
        [RTTI.Member(0, 0x0)] public String Name;
        [RTTI.Member(1, 0x8)] public float FOVMultiplier;
        [RTTI.Member(2, 0xC)] public float FPFOVMultiplier;
        [RTTI.Member(3, 0x10)] public Array<IRect> Viewports;
        [RTTI.Member(4, 0x20)] public Array<IRect> Clearports;
        [RTTI.Member(5, 0x30)] public float AspectRatioMultiplier;
        [RTTI.Member(6, 0x34)] public bool LODFadingEnabled;
        [RTTI.Member(7, 0x38)] public float LODDistanceMultiplier;
        [RTTI.Member(8, 0x3C)] public float TextureMipMapBias;
        [RTTI.Member(9, 0x40)] public float LightingFOVScale;
        [RTTI.Member(10, 0x44)] public float LightingFOVBias;
        [RTTI.Member(11, 0x48)] public float MotionVectorScale;
    }

    [RTTI.Serializable(0xF1595FBD10A4412C)]
    public class ViewportSetupsResource : Resource
    {
        [RTTI.Member(0, 0x28, "Viewports")] public Array<ViewportSetup> ViewportSetups;
    }

    [RTTI.Serializable(0xC06C5EBC4440BE84)]
    public class VignetteSettingsResource : Resource
    {
        [RTTI.Member(0, 0x30, "Settings")] public float InnerRadius;
        [RTTI.Member(1, 0x34, "Settings")] public float OuterRadius;
        [RTTI.Member(2, 0x40, "Settings")] public FRGBAColor Color;
    }

    [RTTI.Serializable(0x292296F1E282F5AC)]
    public class VirtualRTTIAttribute : CoreObject
    {
        [RTTI.Member(0, 0x20, "Logic")] public String AttributeName;
        [RTTI.Member(1, 0x28, "Logic")] public String Type;
        [RTTI.Member(2, 0x30, "Logic")] public String Group;
    }

    [RTTI.Serializable(0xD468A2EBDDFB6383)]
    public class VirtualRTTIResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<VirtualRTTIAttribute>> Attributes;
        [RTTI.Member(1, 0x38, "Logic")] public String BaseClass;
    }

    [RTTI.Serializable(0x729C1ECA8813A4C7)]
    public class VisualTag : Tag
    {
    }

    [RTTI.Serializable(0xC207409291D4B52F)]
    public class VoiceComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xA689B798C425CB52)]
    public class VoiceComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<VoiceSignalsResource>> Signals;
    }

    [RTTI.Serializable(0x945D109E1FBA43B6)]
    public class VoiceResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public int VoiceID;
        [RTTI.Member(1, 0x2C, "General")] public EGender Gender;
        [RTTI.Member(2, 0x30, "General")] public Ref<LocalizedTextResource> NameResource;
    }

    [RTTI.Serializable(0xAB22C29E4E06E8D3)]
    public class VoiceSignalsResource : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<VoiceResource> Voice;
        [RTTI.Member(1, 0x30)] public Array<Ref<AISignalResource>> AISignals;
    }

    [RTTI.Serializable(0xBC7F6C5220FC37E3)]
    public class VolumetricAnnotation : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String Identifier;
        [RTTI.Member(1, 0x30, "General")] public EVolumetricAnnotationGroup AnnotationGroup;
    }

    [RTTI.Serializable(0xE74CE21F70F9C918)]
    public class VolumetricAnnotationComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x61DF10A4F679474A)]
    public class VolumetricAnnotationComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<VolumetricAnnotation>> Volumes;
    }

    [RTTI.Serializable(0xEB3A230C69CAD12B)]
    public class WalkAndTalkPath : Route
    {
    }

    [RTTI.Serializable(0xCDDE45093954ABE7)]
    public class WalkAndTalkPathEventInstance : SubGoalPausableEventInstance
    {
    }

    [RTTI.Serializable(0x7D3AE170B2CE4B79)]
    public class WalkAndTalkPathEventResource : SubGoalPausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public UUIDRef<WalkAndTalkPath> WalkAndTalkPath;
        [RTTI.Member(2, 0x50, "Logic")] public UUIDRef<WalkAndTalkPathNode> FromNode;
        [RTTI.Member(3, 0x60, "Logic")] public UUIDRef<WalkAndTalkPathNode> ToNode;
        [RTTI.Member(4, 0x70, "Distances")] public float IdealDistance;
        [RTTI.Member(5, 0x74, "Distances")] public float ContinueDistance;
        [RTTI.Member(6, 0x78, "Distances")] public float StopDistance;
        [RTTI.Member(7, 0x7C, "MovementOptions")] public bool WalkIfPlayerIsAhead;
        [RTTI.Member(8, 0x7D, "Event")] public bool PauseUntilArrival;
        [RTTI.Member(9, 0x7E, "MovementOptions")] public bool StopExactlyAtDestination;
        [RTTI.Member(10, 0x80, "Resources")] public Ref<AIContextHintResource> MoveHint;
        [RTTI.Member(11, 0x88, "Resources")] public Ref<AISignalResource> AttractSignal;
    }

    [RTTI.Serializable(0x4BB67C0222A38CDE)]
    public class WalkAndTalkPathNode : RouteNode
    {
        [RTTI.Member(0, 0x90, "Logic")] public String Label;
    }

    [RTTI.Serializable(0x1F61C1B999BCD8F4)]
    public class WalletComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xD459E5F809AA1F8)]
    public class WalletComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public Ref<EntityResource> CurrencyEntity;
    }

    [RTTI.Serializable(0x57F7E9BC3F71B7D)]
    public class WarpedAnimation : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public String AnimationState;
        [RTTI.Member(1, 0x30, "General")] public Array<String> AnimationActions;
        [RTTI.Member(2, 0x40, "General")] public Array<AnimationVariableValue> AnimationVariables;
        [RTTI.Member(3, 0x50, "General")] public EWarpedAnimationActions AnimationActionsTriggerType;
        [RTTI.Member(4, 0x54, "Displacement")] public int DisplacementTrackUserData;
        [RTTI.Member(5, 0x58, "Displacement")] public int DisplacementEventUserData;
        [RTTI.Member(6, 0x5C, "General")] public int StaticExitTrackUserData;
        [RTTI.Member(7, 0x60, "General")] public int StaticExitEventUserData;
        [RTTI.Member(8, 0x70, "General")] public WarpedAnimationMetrics Metrics;
        [RTTI.Member(9, 0xF0, "General")] public Ref<SkinnedModelResource> ModelResource;
        [RTTI.Member(10, 0xF8, "General")] public String DynamicAnimationVariableName;
        [RTTI.Member(11, 0x100, "General")] public EWarpedAnimationDynamicVariableSource DynamicAnimationVariableSource;
    }

    [RTTI.Serializable(0xCE2F48C1703FA4B3)]
    public class WarpedAnimationMetrics
    {
        [RTTI.Member(0, 0x0)] public Mat44 RootTrajectory;
        [RTTI.Member(1, 0x40)] public float RootHeadingDelta;
        [RTTI.Member(2, 0x44)] public float Duration;
        [RTTI.Member(3, 0x48)] public float DisplacementStartTime;
        [RTTI.Member(4, 0x4C)] public float DisplacementEndTime;
        [RTTI.Member(5, 0x50)] public Vec3 AverageDisplacementVelocity;
        [RTTI.Member(6, 0x60)] public Vec3 PreBlendDisplacement;
        [RTTI.Member(7, 0x70)] public Vec3 PostBlendDisplacement;
    }

    [RTTI.Serializable(0x2D8C5D2871DDB9F2)]
    public class WaterDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x5ADF990A2B0FC638)]
    public class WaterDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CurveResource> DepthToMovementModifierCurve;
    }

    [RTTI.Serializable(0xA9109C9656B2B669)]
    public class WaterEffectComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0x6719E7B93A853BB2)]
    public class WaterEffectComponentRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x1F8238712B625EAB)]
    public class WaterEffectComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28)] public float MaxDistance;
        [RTTI.Member(1, 0x30)] public Array<WaterEffectResource> WaterEffectResources;
    }

    [RTTI.Serializable(0xC1F0CBA2D62F6D30)]
    public class WaterEffectResource
    {
        [RTTI.Member(0, 0x0)] public MaterialType MaterialType;
        [RTTI.Member(1, 0x8)] public String StartHelper;
        [RTTI.Member(2, 0x10)] public String EndHelper;
        [RTTI.Member(3, 0x20)] public Vec3 StartOffset;
        [RTTI.Member(4, 0x30)] public Vec3 EndOffset;
        [RTTI.Member(5, 0x40)] public float EffectForce;
        [RTTI.Member(6, 0x44)] public float WaterSystemImpulseStrength;
        [RTTI.Member(7, 0x48)] public float WaterSystemImpulseRadius;
        [RTTI.Member(8, 0x4C)] public float WaterSystemImpulseInterval;
    }

    [RTTI.Serializable(0xEB7E079366700C74)]
    public class WaterInstance : GeometryObject, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(0, 0xC8, "General")] public Ref<WaterResource> Resource;
        [RTTI.Member(1, 0xD0, "General")] public BoundingBox3 LocalBounds;
        [RTTI.Member(2, 0xF0, "General")] public float MaxWaterDepth;
        [RTTI.Member(3, 0xF4, "General")] public float Amplitude;
        [RTTI.Member(4, 0xF8, "General")] public float CullingDistance;
        [RTTI.Member(5, 0x120, "General")] public int MeshInstanceTreeSize;
        [RTTI.Member(6, 0x130, "General")] public int MeshInstanceTreeDrawableSetupSize;
        [RTTI.Member(7, 0x140, "General")] public Ref<WaterSystemResource> WaterSystemResource;
    }

    [RTTI.Serializable(0x8A386DEA4E50B40C)]
    public class WaterResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public Ref<RenderEffectResource> NearRenderEffectsResource;
        [RTTI.Member(1, 0x30, "General")] public Ref<RenderEffectResource> FarRenderEffectsResource;
        [RTTI.Member(2, 0x38, "General")] public ESortMode SortMode;
        [RTTI.Member(3, 0x3C, "General")] public ESortOrder SortOrder;
    }

    [RTTI.Serializable(0x8AE77AA93A675D28)]
    public class WaterSystemManager : ObjectManager
    {
    }

    [RTTI.Serializable(0x6A49B2FF4CCBDB45)]
    public class WaterSystemResource : Resource, RTTI.IExtraBinaryDataCallback
    {
        [RTTI.Member(0, 0x2C, "General")] public int MaxInteractiveTiles;
        [RTTI.Member(1, 0x30, "General")] public int WaterSystemDataSize;
    }

    [RTTI.Serializable(0x34EFD4D6DB36E7C6)]
    public class WaveNodeParameters
    {
    }

    [RTTI.Serializable(0xBED1AB1BB7215208)]
    public class WaveNodeStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0xC50B7E670666293C)]
    public class WaveNodeStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0xE65E360322A6C90B)]
    public class WeakPtrTarget
    {
    }

    [RTTI.Serializable(0x536BE8A55B5CF344)]
    public class Weapon
    {
    }

    [RTTI.Serializable(0x6A71F58CF8E6B54B)]
    public class WeaponAccuracy : WeaponPart
    {
    }

    [RTTI.Serializable(0x45C9A253332DF79)]
    public class WeaponAccuracyResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AccuracySettings> AccuracySettingsSP;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<AccuracySettings> AccuracySettingsMP;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<AccuracySettings> AccuracySettingsAI;
        [RTTI.Member(3, 0x40, "Spread")] public Ref<SpreadSettings> SpreadSettingsSP;
        [RTTI.Member(4, 0x48, "Spread")] public Ref<SpreadSettings> SpreadSettingsAI;
        [RTTI.Member(5, 0x50, "Charged")] public Ref<ChargedValueFloat> RecoilRoundsMultiplier;
    }

    [RTTI.Serializable(0x6A06B8B2ACC7F9ED)]
    public class WeaponAimArc : WeaponPart
    {
    }

    [RTTI.Serializable(0x3FC5160830BC3FD6)]
    public class WeaponAimArcRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x472F0891A4E34F41)]
    public class WeaponAimArcResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Representation")] public EShowArcType ShowArcType;
        [RTTI.Member(1, 0x29, "Representation")] public bool ShowArcWhenUnableToFire;
        [RTTI.Member(2, 0x30, "Representation")] public Ref<RenderEffectResource> AimArcRenderEffectResource;
        [RTTI.Member(3, 0x38, "Representation")] public float AimArcLength;
        [RTTI.Member(4, 0x3C, "Representation")] public float AimArcWidth;
        [RTTI.Member(5, 0x40, "Representation")] public float AimArcTextureLength;
        [RTTI.Member(6, 0x44, "Representation")] public RGBAColor AimArcColor;
        [RTTI.Member(7, 0x48, "Representation")] public float AimArcFadeInDistance;
        [RTTI.Member(8, 0x4C, "Representation")] public float AimArcFadeOutDistance;
        [RTTI.Member(9, 0x50, "Representation")] public Ref<RenderEffectResource> AimArcDepthHelpersRenderEffectResource;
        [RTTI.Member(10, 0x58, "Representation")] public float AimArcDepthHelpersWidth;
        [RTTI.Member(11, 0x5C, "Representation")] public float AimArcDepthHelpersHeight;
        [RTTI.Member(12, 0x60, "Representation")] public float AimArcDepthHelpersInitialDistance;
        [RTTI.Member(13, 0x64, "Representation")] public float AimArcDepthHelpersInterval;
        [RTTI.Member(14, 0x68, "Representation")] public RGBAColor AimArcDepthHelpersColor;
        [RTTI.Member(15, 0x70, "Representation")] public Ref<RenderEffectResource> AimArcTargetRenderEffectResource;
        [RTTI.Member(16, 0x78, "Representation")] public float AimArcTargetSize;
        [RTTI.Member(17, 0x7C, "Representation")] public float AimArcTargetOffset;
        [RTTI.Member(18, 0x80, "Representation")] public RGBAColor AimArcTargetColor;
        [RTTI.Member(19, 0x88, "Representation")] public Ref<EntityResource> EndPointEntityResource;
        [RTTI.Member(20, 0x90, "Representation")] public Vec3 EndPointEntityAlignNormal;
    }

    [RTTI.Serializable(0x32B5F6CC86557167)]
    public class WeaponAmmoCharger : WeaponPart
    {
    }

    [RTTI.Serializable(0x9A571FBC107A353C)]
    public class WeaponAmmoChargerRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x55797A7D8C9A0A26)]
    public class WeaponAmmoChargerResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float RetainChargeDuration;
        [RTTI.Member(1, 0x2C, "Logic")] public float DischargeDuration;
        [RTTI.Member(2, 0x30, "Logic")] public float RetainOverchargeDuration;
        [RTTI.Member(3, 0x34, "Logic")] public float EmergencyDischargeDuration;
        [RTTI.Member(4, 0x38, "Logic")] public float RequiredChargedTime;
        [RTTI.Member(5, 0x40, "Logic")] public Array<Ref<ChargedAmmoResource>> ChargedAmmoResources;
        [RTTI.Member(6, 0x50, "Logic")] public int MaxSafeCharges;
        [RTTI.Member(7, 0x54, "Logic")] public int ForcedDischargeCharges;
        [RTTI.Member(8, 0x58, "Animation")] public String ChargeLevelAnimVariableName;
        [RTTI.Member(9, 0x60, "Animation")] public String OverchargeAnimActionName;
        [RTTI.Member(10, 0x68, "Animation")] public String ChargeMagnitudeAnimVariableName;
        [RTTI.Member(11, 0x70, "Logic")] public Array<Ref<DamageSettings>> OverchargeDamage;
        [RTTI.Member(12, 0x80, "Sound")] public Ref<SoundResource> ChargeSound;
        [RTTI.Member(13, 0x90, "Sound")] public Ref<SoundResource> DischargeSound;
        [RTTI.Member(14, 0x98, "VisualEffects")] public Ref<ParticleSystemResource> ChargingParticles;
        [RTTI.Member(15, 0xA0, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonChargingParticles;
        [RTTI.Member(16, 0xA8, "VisualEffects")] public String RechargeShaderVariableID;
        [RTTI.Member(17, 0xB0, "Rumble")] public Ref<RumbleResource> ChargeRumbleResource;
        [RTTI.Member(18, 0xB8, "Rumble")] public Ref<RumbleResource> RetainChargeRumbleResource;
        [RTTI.Member(19, 0xC0, "Rumble")] public Ref<RumbleResource> MaxChargeRumbleResource;
    }

    [RTTI.Serializable(0xBC50DFA469AB1E44)]
    public class WeaponAmmoTether : WeaponPart
    {
    }

    [RTTI.Serializable(0x52EDFDA88FD2D675)]
    public class WeaponAmmoTetherRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x62C9C195FBEE61A1)]
    public class WeaponAmmoTetherResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<GraphProgramResource> TetherGraph;
        [RTTI.Member(1, 0x30, "Animation")] public String TetherControlParameter;
        [RTTI.Member(2, 0x38, "Representation")] public Ref<ParticleSystemResource> TetherParticles;
        [RTTI.Member(3, 0x40, "Sound")] public Ref<SoundResource> TetherSound;
        [RTTI.Member(4, 0x48, "Rumble")] public Ref<RumbleResource> TetherRumble;
    }

    [RTTI.Serializable(0x2DA1DF58DE9766C0)]
    public class WeaponAttachmentUnlockResource : CareerUnlockResource
    {
        [RTTI.Member(0, 0x50)] public EAttachmentType Type;
        [RTTI.Member(1, 0x58)] public String LocalizerName;
        [RTTI.Member(2, 0x60)] public Ref<StatsClassResource> StatsClass;
    }

    [RTTI.Serializable(0x642F580128E6F1A6)]
    public class WeaponBowString : WeaponPart
    {
    }

    [RTTI.Serializable(0xCF3914CE476FDD59)]
    public class WeaponBowStringRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x6D3D6070FA5620DE)]
    public class WeaponBowStringResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public String BowStringJoint;
        [RTTI.Member(1, 0x30, "Logic")] public String HandHelper;
        [RTTI.Member(2, 0x38, "Logic")] public String BowStringAnimationVariable;
        [RTTI.Member(3, 0x40, "Logic")] public FRange BowStringAnimationRange;
        [RTTI.Member(4, 0x48, "Logic")] public String HoldStringAnimationTag;
        [RTTI.Member(5, 0x50, "Logic")] public String DrawStringAnimationTag;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<SoundResource> TensionSound;
    }

    [RTTI.Serializable(0xE7FE0A25EBADC5D6)]
    public class WeaponCharge : WeaponPart
    {
    }

    [RTTI.Serializable(0x8EF30651165FADD6)]
    public class WeaponChargeRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xAAB194EE53B3DD7A)]
    public class WeaponChargeResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float InitialChargeMagnitude;
        [RTTI.Member(1, 0x2C, "Logic")] public float MaximumChargeMagnitude;
        [RTTI.Member(2, 0x30, "Logic")] public float MinimumChargeToFire;
        [RTTI.Member(3, 0x34, "Logic")] public float AutoFireOnChargeMagnitude;
        [RTTI.Member(4, 0x38, "Logic")] public bool AutoChargeUp;
        [RTTI.Member(5, 0x39, "Logic")] public bool ChargeToMinOnFireRequest;
        [RTTI.Member(6, 0x3C, "Logic")] public float ChargeUpRate;
        [RTTI.Member(7, 0x40, "Logic")] public float ChargeDissipationRate;
        [RTTI.Member(8, 0x44, "Logic")] public float ChargeAbortTime;
        [RTTI.Member(9, 0x48, "Logic")] public float MaxChargeHoldTime;
        [RTTI.Member(10, 0x4C, "Logic")] public bool FireOnHoldTimeout;
        [RTTI.Member(11, 0x50, "Logic")] public float ChargeDelay;
        [RTTI.Member(12, 0x54, "Logic")] public bool ChargeUpWhileFiring;
        [RTTI.Member(13, 0x58, "Logic")] public float PrepareFireTime;
        [RTTI.Member(14, 0x5C, "Logic")] public EDischargeMethod DischargeMethod;
        [RTTI.Member(15, 0x60, "Logic")] public float DischargeTime;
        [RTTI.Member(16, 0x64, "Logic")] public bool AbortChargeOnCancel;
        [RTTI.Member(17, 0x65, "Logic")] public bool DelayDischargeToFireEnd;
        [RTTI.Member(18, 0x66, "Logic")] public bool KeepChargeWhileFireRequested;
        [RTTI.Member(19, 0x68, "Sound")] public Ref<SoundResource> ChargeSound;
        [RTTI.Member(20, 0x70, "Sound")] public Ref<SoundResource> DischargeSound;
        [RTTI.Member(21, 0x78, "Sound")] public Ref<SoundResource> AbortSound;
        [RTTI.Member(22, 0x80, "VisualEffects")] public bool ContinueParticlesWhileCharged;
        [RTTI.Member(23, 0x88, "VisualEffects")] public Ref<ParticleSystemResource> ChargingParticles;
        [RTTI.Member(24, 0x90, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonChargingParticles;
        [RTTI.Member(25, 0x98, "VisualEffects")] public String RechargeShaderVariableID;
        [RTTI.Member(26, 0xA0, "Rumble")] public Ref<RumbleResource> ChargeRumbleResource;
        [RTTI.Member(27, 0xA8, "Rumble")] public Ref<RumbleResource> MaxChargeRumbleResource;
        [RTTI.Member(28, 0xB0, "Animation")] public String ChargeAnimationAction;
        [RTTI.Member(29, 0xB8, "Animation")] public Array<AnimationVariableValue> ChargeAnimationVariables;
        [RTTI.Member(30, 0xC8, "Animation")] public String ChargeMagnitudeAnimVariable;
        [RTTI.Member(31, 0xD0, "AI")] public EAIBodyAlignmentMode BodyAlignmentMode;
        [RTTI.Member(32, 0xD8, "Animation")] public String PrepareFireAnimationAction;
        [RTTI.Member(33, 0xE0, "Animation")] public int DurationEventUserData;
        [RTTI.Member(34, 0xE8, "Animation")] public Ref<ChargeAnimationReference> ChargeAnimReference;
        [RTTI.Member(35, 0xF0, "Logic")] public Ref<GraphProgramResource> OnStartChargingGraphProgram;
        [RTTI.Member(36, 0xF8, "Logic")] public Ref<GraphProgramResource> OnAbortChargingGraphProgram;
    }

    [RTTI.Serializable(0xB6DC829CB99ABCB3)]
    public class WeaponCombinationUnlockResource : InventoryUnlockResource
    {
        [RTTI.Member(0, 0x60)] public Array<Ref<WeaponAttachmentUnlockResource>> Attachments;
    }

    [RTTI.Serializable(0x2DD0DCC05554FE41)]
    public class WeaponCook : WeaponPart
    {
    }

    [RTTI.Serializable(0x34F0B38BD50A34DE)]
    public class WeaponCookRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x20C6AE39C5D49878)]
    public class WeaponCookResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Sound")] public Ref<SoundResource> CookSound;
    }

    [RTTI.Serializable(0xEDA616AF04C1F80C)]
    public class WeaponCraftingViewController : CraftingViewController
    {
    }

    [RTTI.Serializable(0x8F687D76221B1C72)]
    public class WeaponMarkerMapping : CoreObject
    {
        [RTTI.Member(0, 0x20)] public String WeaponId;
        [RTTI.Member(1, 0x28)] public Ref<AwarenessMarkerDisplaySettings> DisplaySettings;
    }

    [RTTI.Serializable(0x24B341D8E2633A5E)]
    public class WeaponModificationComponent : EquipmentModificationComponent
    {
    }

    [RTTI.Serializable(0xE302A0110F9CB013)]
    public class WeaponModificationComponentResource : EquipmentModificationComponentResource
    {
    }

    [RTTI.Serializable(0xEEE5236670D78C30)]
    public class WeaponOverheat : WeaponPart
    {
    }

    [RTTI.Serializable(0xEBD878C61C1303D4)]
    public class WeaponOverheatRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x191E14B9EA032DB9)]
    public class WeaponOverheatResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float OverheatTemperature;
        [RTTI.Member(1, 0x2C, "Logic")] public float CooldownTemperature;
        [RTTI.Member(2, 0x30, "Logic")] public float TemperaturePerRound;
        [RTTI.Member(3, 0x34, "Logic")] public float TemperaturePerSecondWhileOperating;
        [RTTI.Member(4, 0x38, "Logic")] public float OverheatPenalty;
        [RTTI.Member(5, 0x3C, "Logic")] public float TemperatureFalloff;
        [RTTI.Member(6, 0x40, "Logic")] public bool MustReleaseTriggerWhenOverheated;
        [RTTI.Member(7, 0x44, "Logic")] public float DamageOnOverheatFactor;
        [RTTI.Member(8, 0x48, "Logic")] public float DamageWhenOverheating;
        [RTTI.Member(9, 0x50, "SoundEffects")] public Ref<SoundResource> OverheatedSound;
        [RTTI.Member(10, 0x58, "SoundEffects")] public Ref<SoundResource> OverheatedFireSound;
        [RTTI.Member(11, 0x60, "VisualEffects")] public String TemperatureShaderVariableID;
        [RTTI.Member(12, 0x68, "VisualEffects")] public Ref<CurveResource> TemperatureShaderVariableCurve;
        [RTTI.Member(13, 0x70, "VisualEffects")] public Ref<ParticleSystemResource> FirstPersonOverheatedFireParticles;
        [RTTI.Member(14, 0x78, "VisualEffects")] public Ref<ParticleSystemResource> OverheatedFireParticles;
    }

    [RTTI.Serializable(0x1E60FF7514AAB2E7)]
    public class WeaponPart : EntityComponent
    {
    }

    [RTTI.Serializable(0x1AACC032065CF472)]
    public class WeaponPartRep : EntityComponentRep
    {
    }

    [RTTI.Serializable(0x6B3AC0FB1F44E2D0)]
    public class WeaponPartResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0xB60F059F1002E9C2)]
    public class WeaponPreviewProjectile : WeaponPart
    {
    }

    [RTTI.Serializable(0x5977BEBFAB2B984E)]
    public class WeaponPreviewProjectileResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<AttachToHelperMoverResource> PrimaryAttachToWeaponMover;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<AttachToHelperMoverResource> SecondaryAttachToWeaponMover;
        [RTTI.Member(2, 0x38, "Logic")] public EPreviewProjectileCreateMode PreviewProjectileCreateMode;
        [RTTI.Member(3, 0x3C, "Logic")] public bool ReloadPrimaryPreviewOnWield;
        [RTTI.Member(4, 0x3D, "Logic")] public bool KeepPreviewInHand;
        [RTTI.Member(5, 0x40, "Animation")] public int LoadPreviewInHandEventUserData;
        [RTTI.Member(6, 0x44, "Animation")] public int ChamberPreviewInHandEventUserData;
    }

    [RTTI.Serializable(0xBF970392EB703359)]
    public class WeaponRack : Entity
    {
        [RTTI.Member(0, 0x2C0, "General")] public String ItemOne;
        [RTTI.Member(1, 0x2C8, "General")] public String ItemTwo;
        [RTTI.Member(2, 0x2D0, "General")] public String ItemThree;
        [RTTI.Member(3, 0x2D8, "General")] public String ItemFour;
        [RTTI.Member(4, 0x2E0, "General")] public String ItemFive;
    }

    [RTTI.Serializable(0x1E5FA156D80DAD1B)]
    public class WeaponRackItem : Resource
    {
        [RTTI.Member(0, 0x28)] public String EntityResourceName;
        [RTTI.Member(1, 0x30)] public String HelperNodeName;
    }

    [RTTI.Serializable(0xEE997FC585392B5)]
    public class WeaponRackResource : EntityResource
    {
        [RTTI.Member(0, 0x130, "Logic")] public Array<Ref<WeaponRackItem>> Items;
    }

    [RTTI.Serializable(0xE8EAD34905343F08)]
    public class WeaponRestoreState : ItemRestoreState
    {
        [RTTI.Member(0, 0xB0, "StateSaving", true)] public int HeavyAmmoAmount;
    }

    [RTTI.Serializable(0xD5FAD53DD588ED5F)]
    public class WeaponScoreMultipliers : RTTIObject
    {
        [RTTI.Member(0, 0x8)] public Ref<StatsClassResource> StatsClass;
        [RTTI.Member(1, 0x10)] public float BodyshotKillMultiplier;
        [RTTI.Member(2, 0x14)] public float HeadshotKillMultiplier;
        [RTTI.Member(3, 0x18)] public float ExplosiveKillMultiplier;
        [RTTI.Member(4, 0x1C)] public float KillAssistMultiplier;
    }

    [RTTI.Serializable(0xD20A9F70E3713E47)]
    public class WeaponSpin : WeaponPart
    {
    }

    [RTTI.Serializable(0x94B284FDE5A7B051)]
    public class WeaponSpinRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0x96BF2F1C4AE5D2A9)]
    public class WeaponSpinResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public FRange FireDuration;
        [RTTI.Member(1, 0x30, "Logic")] public float MinSpinRateBeforeFiring;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<CurveResource> SpinUpCurve;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<CurveResource> SpinDownCurve;
        [RTTI.Member(4, 0x48, "Logic")] public float SpinAnglePerSecond;
        [RTTI.Member(5, 0x50, "Logic")] public Array<float> SpinStopAngles;
        [RTTI.Member(6, 0x60, "Logic")] public float SpinStopAnglePerSecond;
        [RTTI.Member(7, 0x68, "SoundEffects")] public Ref<SoundResource> SpinSound;
    }

    [RTTI.Serializable(0xB023D82E193B55D9)]
    public class WeaponSwitchEventInstance : PausableEventInstance
    {
    }

    [RTTI.Serializable(0x794936A0834AAA6D)]
    public class WeaponSwitchEventResource : PausableEventResource
    {
        [RTTI.Member(0, 0x38, "Logic")] public Ref<EntityActorResource> ControlledEntityActorResource;
        [RTTI.Member(1, 0x40, "Logic")] public bool SwitchImmediately;
        [RTTI.Member(2, 0x48, "Logic")] public String SwitchWeaponName;
        [RTTI.Member(3, 0x50, "Logic")] public Ref<AIWeaponPreference> SwitchWeaponPreference;
    }

    [RTTI.Serializable(0xCC61BFE9C1B667B4)]
    public class WeaponUnlockResource : InventoryUnlockResource
    {
        [RTTI.Member(0, 0x60)] public Array<Ref<WeaponCombinationUnlockResource>> Combinations;
        [RTTI.Member(1, 0x70)] public Array<Ref<WeaponAttachmentUnlockResource>> DefaultAttachments;
        [RTTI.Member(2, 0x80)] public Ref<StatsClassResource> StatsClass;
    }

    [RTTI.Serializable(0xEDFD164A15D109B)]
    public class WeaponZoom : WeaponPart
    {
    }

    [RTTI.Serializable(0xAA467B345A15BD68)]
    public class WeaponZoomRep : WeaponPartRep
    {
    }

    [RTTI.Serializable(0xB5C19CFF86CAA013)]
    public class WeaponZoomResource : WeaponPartResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Array<Ref<ZoomSetting>> ZoomSettings;
        [RTTI.Member(1, 0x38, "ZoomAnimation")] public Ref<CurveResource> AnimationCurve;
        [RTTI.Member(2, 0x40, "ZoomAnimation")] public Ref<CurveResource> TransitionCurve;
        [RTTI.Member(3, 0x48, "SoundEffects")] public Ref<SoundResource> ZoomedSound;
        [RTTI.Member(4, 0x50, "SoundEffects")] public Ref<SoundResource> TargetSound;
        [RTTI.Member(5, 0x58, "SoundEffects")] public Ref<SoundResource> TransitionSound;
        [RTTI.Member(6, 0x60, "ZoomAnimation")] public String ZoomInEvent;
        [RTTI.Member(7, 0x68, "ZoomAnimation")] public String ZoomOutEvent;
        [RTTI.Member(8, 0x70, "Representation")] public String ZoomShaderVariableID;
        [RTTI.Member(9, 0x78, "Logic")] public bool PlayerInvisible;
    }

    [RTTI.Serializable(0xED7657B9C9246227)]
    public class WeaponsContainer
    {
    }

    [RTTI.Serializable(0xF5C8B16B550F807B)]
    public class WeaponsContainerComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xFEEBCD0E7D6DC202)]
    public class WeaponsContainerComponentResource : EntityComponentResource
    {
    }

    [RTTI.Serializable(0x8A4D31ADB461F239)]
    public class WeatherAmbienceCycle : AmbienceCycleBase
    {
    }

    [RTTI.Serializable(0x649FB2EE77E323DF)]
    public class WeatherEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xF12376B213EBAD39)]
    public class WeatherEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "General")] public Ref<WeatherSetup> WeatherSetup;
    }

    [RTTI.Serializable(0xA7EE235438E4FFB2)]
    public class WeatherGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0xB5034A71A2803089)]
    public class WeatherInfluenceFactor : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public String Name;
        [RTTI.Member(1, 0x28, "General")] public Ref<CurveResource> TimeOfDayFactorCurve;
        [RTTI.Member(2, 0x30, "General")] public Ref<CurveResource> CloudDensityCurve;
        [RTTI.Member(3, 0x38, "General")] public Ref<CurveResource> PrecipitationFactorCurve;
        [RTTI.Member(4, 0x40, "General")] public Ref<CurveResource> WetnessCurve;
        [RTTI.Member(5, 0x48, "General")] public Ref<CurveResource> TemperatureCurve;
        [RTTI.Member(6, 0x50, "General")] public Ref<CurveResource> HumidityCurve;
    }

    [RTTI.Serializable(0x1EC78E733B565116)]
    public class WeatherLimitsEventInstance : TimedEventInstance
    {
    }

    [RTTI.Serializable(0xA51AEE13FF59C0F1)]
    public class WeatherLimitsEventResource : TimedEventResource
    {
        [RTTI.Member(0, 0x38, "Wind")] public float SpeedLimit;
    }

    [RTTI.Serializable(0x794E767E98ADBB40)]
    public class WeatherSetup : CoreObject
    {
        [RTTI.Member(0, 0x30, "General")] public String Name;
        [RTTI.Member(1, 0x38, "General")] public WeatherSetupSettings Settings;
        [RTTI.Member(2, 0xC0, "General")] public Ref<WeatherAmbienceCycle> AmbienceCycle;
        [RTTI.Member(3, 0xC8, "General")] public Ref<Texture> CustomWeatherMap;
    }

    [RTTI.Serializable(0x99A49AFDD138EF81)]
    public class WeatherSetupSettings
    {
        [RTTI.Member(0, 0x0, "Clouds")] public float CloudCoverage;
        [RTTI.Member(1, 0x4, "Clouds")] public float CloudCoverageVariation;
        [RTTI.Member(2, 0x8, "Clouds")] public float CloudCoverageVariationFrequency;
        [RTTI.Member(3, 0xC, "Clouds")] public float CloudCoverageNoise1Amplitude;
        [RTTI.Member(4, 0x10, "Clouds")] public float CloudCoverageNoise1Frequency;
        [RTTI.Member(5, 0x14, "Clouds")] public float CloudCoverageNoise2Amplitude;
        [RTTI.Member(6, 0x18, "Clouds")] public float CloudCoverageNoise2Frequency;
        [RTTI.Member(7, 0x1C, "Clouds")] public float CloudConnectivity;
        [RTTI.Member(8, 0x20, "Clouds")] public float CloudDensityExponent;
        [RTTI.Member(9, 0x24, "Clouds")] public float CloudDensityScale;
        [RTTI.Member(10, 0x28, "Clouds")] public float CloudType;
        [RTTI.Member(11, 0x2C, "Clouds")] public float CloudTypeVariation;
        [RTTI.Member(12, 0x30, "Clouds")] public float CloudTypeVariationFrequency;
        [RTTI.Member(13, 0x34, "Clouds")] public float CloudScrollSpeed;
        [RTTI.Member(14, 0x38, "Clouds")] public float CloudAnvilAmount;
        [RTTI.Member(15, 0x3C, "Clouds")] public float CloudAnvilSkew;
        [RTTI.Member(16, 0x40, "Clouds")] public float CloudCustomWindDirectionBlendFactor;
        [RTTI.Member(17, 0x44, "Clouds")] public float CloudCustomWindDirection;
        [RTTI.Member(18, 0x48, "Clouds")] public float CloudCustomWindSpeed;
        [RTTI.Member(19, 0x4C, "Clouds")] public float CloudHeightOffset;
        [RTTI.Member(20, 0x50, "Clouds")] public float CloudNoiseFrequency;
        [RTTI.Member(21, 0x54, "Precipitation")] public float Precipitation;
        [RTTI.Member(22, 0x58, "Precipitation")] public float PrecipitationVariation;
        [RTTI.Member(23, 0x5C, "Precipitation")] public float PrecipitationVariationFrequency;
        [RTTI.Member(24, 0x60, "RainbowAndSundogs")] public float RainbowIntensity;
        [RTTI.Member(25, 0x64, "RainbowAndSundogs")] public float SundogIntensity;
        [RTTI.Member(26, 0x68, "Clouds")] public float CirrusCloudDensity;
        [RTTI.Member(27, 0x6C, "General")] public float Humidity;
        [RTTI.Member(28, 0x70, "General")] public FRange WindSpeed;
        [RTTI.Member(29, 0x78, "General")] public FRange WindDirectionAngle;
        [RTTI.Member(30, 0x80, "General")] public FRange TemperatureLimits;
    }

    [RTTI.Serializable(0x173E0C16E86C8BD0)]
    public class Widget : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x632B782993D7A050)]
    public class WindBox : WorldNode
    {
        [RTTI.Member(0, 0x78, "General")] public String Name;
        [RTTI.Member(1, 0x80, "General")] public int Priority;
        [RTTI.Member(2, 0x84, "General")] public float Heading;
        [RTTI.Member(3, 0x88, "General")] public float HeadingDeviation;
        [RTTI.Member(4, 0x8C, "General")] public float Pitch;
        [RTTI.Member(5, 0xB0, "General")] public float MovementModifierAlong;
        [RTTI.Member(6, 0xB4, "General")] public float MovementModifierInto;
        [RTTI.Member(7, 0xB8, "General")] public float MovementImpact;
        [RTTI.Member(8, 0xBC, "General")] public float VisualImpact;
        [RTTI.Member(9, 0xC0, "General")] public float AnimationImpact;
        [RTTI.Member(10, 0xC4, "General")] public int WindGustID;
        [RTTI.Member(11, 0xC8, "General")] public Ref<SoundResource> Sound;
        [RTTI.Member(12, 0xD8, "General")] public bool MustBeReplicated;
    }

    [RTTI.Serializable(0xACF0C0B46D9F5ECB)]
    public class WindGust : CoreObject
    {
    }

    [RTTI.Serializable(0xC32D9850D64B4EC1)]
    public class WindGustResource : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public int ID;
        [RTTI.Member(1, 0x2C, "General")] public float Heading;
        [RTTI.Member(2, 0x40, "General")] public float Velocity;
        [RTTI.Member(3, 0x44, "General")] public FRange Duration;
        [RTTI.Member(4, 0x4C, "General")] public float FadeInTime;
        [RTTI.Member(5, 0x50, "General")] public float FadeOutTime;
        [RTTI.Member(6, 0x54, "General")] public FRange Delay;
        [RTTI.Member(7, 0x5C, "General")] public FRange MovementMultiplier;
        [RTTI.Member(8, 0x64, "General")] public FRange PhysicsImpactMultiplier;
        [RTTI.Member(9, 0x6C, "General")] public FRange RagdollImpactMultiplier;
        [RTTI.Member(10, 0x74, "General")] public FRange VisualImpactMultiplier;
        [RTTI.Member(11, 0x7C, "General")] public FRange AnimationImpactMultiplier;
    }

    [RTTI.Serializable(0xF578FB253A166409)]
    public class WindManager : ObjectManager
    {
    }

    [RTTI.Serializable(0xEE59C9EB9DB2F5FD)]
    public class WindSimulationForceField
    {
        [RTTI.Member(0, 0x0, "General")] public Ref<ForceFieldResource> ForceFieldResource;
        [RTTI.Member(1, 0x8, "General")] public float WindSpeed;
    }

    [RTTI.Serializable(0xAFC13D1D2E565B0E)]
    public class WorldBoundingBox3
    {
        [RTTI.Member(0, 0x0)] public WorldPosition Min;
        [RTTI.Member(1, 0x18)] public WorldPosition Max;
    }

    [RTTI.Serializable(0x3D444A3E341AA67C)]
    public class WorldBoundingSphere
    {
        [RTTI.Member(0, 0x0)] public WorldPosition Position;
        [RTTI.Member(1, 0x18)] public float Radius;
    }

    [RTTI.Serializable(0x2A430B95FBB2BA45)]
    public class WorldDataArea : WorldDataShape
    {
    }

    [RTTI.Serializable(0xFCC70F7D776AEAB9)]
    public class WorldDataAreaGroup : WorldDataAreaGroupBase
    {
    }

    [RTTI.Serializable(0x7176D0C787CA1FDA)]
    public class WorldDataAreaGroupBase : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<Ref<RTTIRefObject>> Stack;
    }

    [RTTI.Serializable(0x4C038D96B49D3794)]
    public class WorldDataAreaStack : WorldDataAreaGroupBase
    {
    }

    [RTTI.Serializable(0xF5DCE21987BAE3CB)]
    public class WorldDataBakeOnly : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x7359066B18A65205)]
    public class WorldDataBakeSettings : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public bool ReadsPreviousLayers;
        [RTTI.Member(1, 0x2C, "General")] public EPixelFormat DataFormat;
        [RTTI.Member(2, 0x30, "General")] public EPixelFormat OpacityFormat;
        [RTTI.Member(3, 0x38, "General")] public String BakeShaderName;
        [RTTI.Member(4, 0x40, "General")] public String RotateShaderName;
        [RTTI.Member(5, 0x48, "General")] public EWorldDataBakeBlendMode DataBlendMode;
        [RTTI.Member(6, 0x4C, "General")] public EWorldDataBakeBlendMode OpacityBlendMode;
    }

    [RTTI.Serializable(0xEEEA1EBEBDA3D8B2)]
    public class WorldDataEcotopeIndexMapEntry : WorldDataGeneratedMapEntry
    {
        [RTTI.Member(0, 0x38, "InputData", true)] public Ref<WorldDataEcotopeIndexTable> EcotopeIndexMapping;
        [RTTI.Member(1, 0x40, "InputData")] public Ref<WorldDataMap> EcotopeABCDMap;
        [RTTI.Member(2, 0x48, "InputData")] public Ref<WorldDataMap> EcotopeEFGHMap;
    }

    [RTTI.Serializable(0xE10D08F90D56AA3A)]
    public class WorldDataEcotopeIndexMapping
    {
        [RTTI.Member(0, 0x0)] public int32 EcotopeIndex;
        [RTTI.Member(1, 0x8)] public Ref<WorldDataType> WorldDataType;
    }

    [RTTI.Serializable(0x8BB588A1C83DBDD1)]
    public class WorldDataEcotopeIndexTable : CoreObject
    {
        [RTTI.Member(0, 0x20, "General")] public Array<WorldDataEcotopeIndexMapping> Mappings;
    }

    [RTTI.Serializable(0xA7C6EE3FEECCD751)]
    public class WorldDataGeneratedMap : WorldDataTextureMap
    {
    }

    [RTTI.Serializable(0x40CAA762F3FB8954)]
    public class WorldDataGeneratedMapEntry : WorldDataTextureMapEntry
    {
    }

    [RTTI.Serializable(0x7BD580D2BB3EF26B)]
    public class WorldDataGroup : ExportedSymbolGroup
    {
    }

    [RTTI.Serializable(0x3255B47FE22B3C6B)]
    public class WorldDataMap : Resource
    {
        [RTTI.Member(0, 0x28, "MapData")] public IVec2 GridCoordinates;
    }

    [RTTI.Serializable(0x44700C323D0B4475)]
    public class WorldDataPacking : CoreObject
    {
        [RTTI.Member(0, 0x20)] public Array<WorldDataPackingMap> Maps;
    }

    [RTTI.Serializable(0x4BC4144FE531C434)]
    public class WorldDataPackingMap
    {
        [RTTI.Member(0, 0x0)] public EPixelFormat TargetFormat;
        [RTTI.Member(1, 0x4)] public ISize TargetResolution;
        [RTTI.Member(2, 0xC)] public bool HasMipMaps;
        [RTTI.Member(3, 0x10)] public int StreamingMipCount;
        [RTTI.Member(4, 0x14)] public EImageCompressionMethod CompressionMethod;
        [RTTI.Member(5, 0x18)] public bool GammaSpace;
        [RTTI.Member(6, 0x1C)] public int ActiveLODMask;
        [RTTI.Member(7, 0x20)] public Array<WorldDataPackingMapEntry> Entries;
    }

    [RTTI.Serializable(0xADA6AF969417E6AC)]
    public class WorldDataPackingMapEntry
    {
        [RTTI.Member(0, 0x0)] public String Type;
        [RTTI.Member(1, 0x8)] public ETextureChannel Channel;
    }

    [RTTI.Serializable(0xD152CF32FAAFF667)]
    public class WorldDataPlacementMap : WorldDataGeneratedMap
    {
        [RTTI.Member(0, 0x80, "GeneratedMapData")] public Ref<DensityGraphProgram> DensityProgram;
        [RTTI.Member(1, 0x88, "GeneratedMapData")] public Ref<PlacementResourceRegister> PlacementRegister;
        [RTTI.Member(2, 0x90, "GeneratedMapData")] public Ref<PlacementTile> PlacementTile;
        [RTTI.Member(3, 0x98, "GeneratedMapData")] public Ref<WorldDataType> HeightDataType;
    }

    [RTTI.Serializable(0x7E3AC03C4232A0A6)]
    public class WorldDataSampleRequestStateInstance : StateObjectInstance
    {
    }

    [RTTI.Serializable(0xDD6FE0DE05A962E0)]
    public class WorldDataSampleRequestStateResource : StateObjectResource
    {
    }

    [RTTI.Serializable(0xAA218DDB881FD77F)]
    public class WorldDataShape : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "Logic")] public Array<Ref<WorldDataShapeNode>> Nodes;
    }

    [RTTI.Serializable(0x6BBD6E38842638E8)]
    public class WorldDataShapeNode : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public Vec3 Tangent;
        [RTTI.Member(1, 0x80, "General")] public Vec2 UV;
    }

    [RTTI.Serializable(0x17E7CBD936DCC47E)]
    public class WorldDataTerrainNormalMapEntry : WorldDataGeneratedMapEntry
    {
        [RTTI.Member(0, 0x38, "InputData")] public Ref<WorldDataMap> TerrainHeightMap;
    }

    [RTTI.Serializable(0x1026D74A58C61D2C)]
    public class WorldDataTextureMap : WorldDataMap
    {
        [RTTI.Member(0, 0x30, "TextureMapData")] public Ref<Texture> ResultTexture;
        [RTTI.Member(1, 0x38, "TextureMapData")] public Array<Ref<WorldDataTextureMapEntry>> Entries;
        [RTTI.Member(2, 0x48, "TextureMapData")] public Array<uint8> SurfaceCacheData;
        [RTTI.Member(3, 0x58, "TextureMapData")] public EPixelFormat SurfaceCacheFormat;
    }

    [RTTI.Serializable(0x203BC181D32F2A52)]
    public class WorldDataTextureMapEntry : Resource
    {
        [RTTI.Member(0, 0x28, "PackingData")] public Ref<WorldDataType> Type;
        [RTTI.Member(1, 0x30, "PackingData")] public ETextureChannel Channel;
    }

    [RTTI.Serializable(0xB4C445271685049C)]
    public class WorldDataTile
    {
    }

    [RTTI.Serializable(0x44153A852F9B775A)]
    public class WorldDataType : Resource
    {
        [RTTI.Member(0, 0x28, "General")] public EWorldDataRttiType RttiType;
        [RTTI.Member(1, 0x2C, "General")] public EWorldDataAccessMode AccessMode;
        [RTTI.Member(2, 0x30, "General")] public EWorldDataDecodingMode DecodingMode;
        [RTTI.Member(3, 0x34, "General")] public EWorldDataTileBorderMode TileBorderMode;
        [RTTI.Member(4, 0x38, "General")] public ELayerBlendOperation BlendMode;
        [RTTI.Member(5, 0x40, "General")] public String DefaultValue;
        [RTTI.Member(6, 0x48, "General")] public FRange Range;
        [RTTI.Member(7, 0x50, "General")] public Ref<Texture> DefaultTexture;
        [RTTI.Member(8, 0x58, "General")] public EPixelFormat PaintPixelFormat;
        [RTTI.Member(9, 0x5C, "General")] public bool GenerateProbeTexture;
        [RTTI.Member(10, 0x60, "General")] public int ProbeTextureRange;
        [RTTI.Member(11, 0x68, "DataSetup")] public Array<WorldDataTypeInputLayer> InputLayers;
    }

    [RTTI.Serializable(0xD4CEEE57098EDD7E)]
    public class WorldDataTypeInputLayer
    {
        [RTTI.Member(0, 0x0, "General")] public String Name;
        [RTTI.Member(1, 0x8, "General")] public EWorldDataSourceDataMode SourceDataMode;
        [RTTI.Member(2, 0xC, "General")] public EWorldDataInputLayerApplyMode ApplyMode;
        [RTTI.Member(3, 0x10, "TextureData")] public String DataPath;
        [RTTI.Member(4, 0x18, "TextureData")] public ETextureChannel DataChannel;
        [RTTI.Member(5, 0x1C, "TextureData")] public bool DataGammaSpace;
        [RTTI.Member(6, 0x20, "TextureData")] public String OpacityPath;
        [RTTI.Member(7, 0x28, "BakeSettings")] public Ref<WorldDataBakeSettings> BakeSettings;
        [RTTI.Member(8, 0x30, "UI")] public String UIName;
        [RTTI.Member(9, 0x38, "UI")] public String UIDescription;
        [RTTI.Member(10, 0x40, "UI")] public String UIIcon;
    }

    [RTTI.Serializable(0xE7058BFB9ACA35FC)]
    public class WorldDrawableMap : CoreObject
    {
        [RTTI.Member(0, 0x30, "Map")] public Ref<UIEffectResource> TileRenderEffect;
        [RTTI.Member(1, 0x38, "Map")] public Ref<UIEffectResource> NoGoAreaRenderEffect;
        [RTTI.Member(2, 0x40, "Map")] public MapTextureTile EmptyTileTextures;
        [RTTI.Member(3, 0x50, "Map")] public IVec2 Map_TopLeftTile;
        [RTTI.Member(4, 0x58, "Map")] public IVec2 Map_BottomRightTile;
        [RTTI.Member(5, 0x60, "Selection")] public IVec2 Selection_TopLeftTile;
        [RTTI.Member(6, 0x68, "Selection")] public IVec2 Selection_BottomRightTile;
        [RTTI.Member(7, 0x70, "Map")] public Array<MapTextureTileRow> MapTextureTiles;
        [RTTI.Member(8, 0x88, "Map")] public Ref<Texture> CloudsTexture;
        [RTTI.Member(9, 0x90, "Map")] public Ref<Texture> VignetteTexture;
        [RTTI.Member(10, 0x98, "Map")] public Ref<Texture> BorderTexture;
        [RTTI.Member(11, 0xA0, "CameraElevation")] public Ref<Texture> CameraElevationTexture;
        [RTTI.Member(12, 0xA8, "CameraElevation")] public Array<float> CameraElevation;
        [RTTI.Member(13, 0xB8, "CameraElevation")] public float MaxUnZoomAmount;
        [RTTI.Member(14, 0xBC, "CameraElevation")] public float HighestFogParallaxFactor;
        [RTTI.Member(15, 0xC0, "Map")] public Ref<MapProjectionSettings> ProjectionSettings;
        [RTTI.Member(16, 0x530, "Streaming")] public Array<Ref<Texture>> AdditionalTextures;
        [RTTI.Member(17, 0x570, "World")] public Ref<WorldMapZone> WorldZone;
    }

    [RTTI.Serializable(0xE8AC94DABDE73641)]
    public class WorldEncounter : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public String Name;
        [RTTI.Member(1, 0x80, "Encounters")] public Array<Ref<SceneInstance>> Scenes;
        [RTTI.Member(2, 0x90, "Activation")] public float Weight;
        [RTTI.Member(3, 0x98, "Encounters")] public Array<Ref<WorldEncounterCategory>> Categories;
    }

    [RTTI.Serializable(0x96D804B315D4BF33)]
    public class WorldEncounterCategory : Resource
    {
        [RTTI.Member(0, 0x28, "Conditions")] public Ref<ConditionResource> ConditionResource;
        [RTTI.Member(1, 0x30, "MinimalTimeElapsedBetween")] public float TheSameEncounter;
        [RTTI.Member(2, 0x34, "MinimalTimeElapsedBetween")] public float Encounters;
        [RTTI.Member(3, 0x38, "Activation")] public float Weight;
    }

    [RTTI.Serializable(0xB8B0067CA0F67231)]
    public class WorldEncounterCategoryInstance : RTTIRefObject
    {
    }

    [RTTI.Serializable(0x24DDCC4009224548)]
    public class WorldEncounterCollection : ParentWorldNode
    {
        [RTTI.Member(0, 0x70, "General")] public String Name;
        [RTTI.Member(1, 0x78, "Conditions")] public Ref<ConditionResource> ConditionResource;
        [RTTI.Member(2, 0x80, "Conditions")] public Ref<ConditionResource> DespawnConditionResource;
        [RTTI.Member(3, 0x88, "Conditions")] public bool StopOnConditionFail;
        [RTTI.Member(4, 0x90, "Encounters")] public Array<Ref<WorldEncounter>> WorldEncounters;
    }

    [RTTI.Serializable(0x5A9836D86C7B209A)]
    public class WorldEncounterManagerResource : Resource
    {
        [RTTI.Member(0, 0x28, "Conditions")] public Ref<ConditionResource> ActivateCondition;
        [RTTI.Member(1, 0x30, "Conditions")] public Ref<ConditionResource> DespawnCondition;
        [RTTI.Member(2, 0x38, "Conditions")] public float EncounterDenialRange;
    }

    [RTTI.Serializable(0xF76E2A5789499B8E)]
    public class WorldEnvironment : Resource
    {
        [RTTI.Member(0, 0x28)] public Ref<WorldEnvironment> Parent;
        [RTTI.Member(1, 0x30)] public Ref<WorldDataType> WorldDataType;
        [RTTI.Member(2, 0x38)] public bool OverrideParent;
    }

    [RTTI.Serializable(0x49B0C4595AC806FC)]
    public class WorldMapZone : MapZone
    {
    }

    [RTTI.Serializable(0x929BCA2B5557865F)]
    public class WorldNode : CoreObject
    {
        [RTTI.Member(0, 0x0, "General")] public WorldTransform Orientation;
    }

    [RTTI.Serializable(0xBBAA509D25D82AA5)]
    public class WorldOrientedBox
    {
        [RTTI.Member(0, 0x0)] public WorldTransform WorldTransform;
        [RTTI.Member(1, 0x40)] public Vec3 Extents;
    }

    [RTTI.Serializable(0xB7FA97B1A5E636C9)]
    public class WorldPosition
    {
        [RTTI.Member(0, 0x0)] public double X;
        [RTTI.Member(1, 0x8)] public double Y;
        [RTTI.Member(2, 0x10)] public double Z;
    }

    [RTTI.Serializable(0xEE48361B489F504B)]
    public class WorldPositionProperty : WorldPositionPropertyBase
    {
        [RTTI.Member(0, 0x0, "Flags", true)] public bool Replicated;
        [RTTI.Member(1, 0x0, "Flags", true)] public bool Persistent;
    }

    [RTTI.Serializable(0x2B2D2B68AB246D3D)]
    public class WorldPositionPropertyBase : Property
    {
    }

    [RTTI.Serializable(0x51A2D4713C9F3619)]
    public class WorldPositionPropertyLink : PropertyLinkBase
    {
        [RTTI.Member(0, 0x0)] public Ref<WorldPositionPropertyBase> Property;
    }

    [RTTI.Serializable(0x463EBB73980462A4)]
    public class WorldStateResource : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PropertyContainerResource> ContainerResource;
        [RTTI.Member(1, 0x30, "Time")] public float InitialTimeOfDay;
        [RTTI.Member(2, 0x34, "Time")] public float DurationOfOneDayInSeconds;
        [RTTI.Member(3, 0x38, "Time")] public bool InitialEnableDayNightCycle;
        [RTTI.Member(4, 0x39, "Time")] public bool RandomizeTimeOfDay;
    }

    [RTTI.Serializable(0x4DF16A9905F97F44)]
    public class XpMultiplier : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public float Multiplier;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<LocalizedTextResource> Description;
    }

    [RTTI.Serializable(0xE137FE0D4D6C43F9)]
    public class XpQuestReward : SummableQuestReward
    {
        [RTTI.Member(0, 0x40, "Logic")] public Ref<LevelBasedXpReward> XpReward;
        [RTTI.Member(1, 0x48, "Logic")] public Ref<LocalizedTextResource> XpReason;
    }

    [RTTI.Serializable(0x11C00604E952B814)]
    public class XpRepresentationController : EntityComponent
    {
    }

    [RTTI.Serializable(0x3BC176677135CC2)]
    public class XpRepresentationControllerResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<PlayerNotificationResource> LevelUpNotification;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<PlayerNotificationResource> MaxLevelUpNotification;
        [RTTI.Member(2, 0x38, "Logic")] public Ref<PlayerNotificationResource> GoldenLevelIntroductionNotification;
        [RTTI.Member(3, 0x40, "Logic")] public Ref<PlayerNotificationResource> LevelUpRewardsWithPerksNotification;
        [RTTI.Member(4, 0x48, "Logic")] public Ref<PlayerNotificationResource> LevelUpRewardsWithoutPerksNotification;
        [RTTI.Member(5, 0x50, "Logic")] public Ref<PlayerNotificationPriority> LevelUpNotificationPriority;
        [RTTI.Member(6, 0x58, "Logic")] public Ref<PlayerNotificationPriority> RewardNotificationPriority;
        [RTTI.Member(7, 0x60, "Logic")] public Ref<PlayerNotificationPriority> GoldenLevelIntroductionNotificationPriority;
        [RTTI.Member(8, 0x68, "Display")] public Ref<LocalizedTextResource> PerkRewardText;
        [RTTI.Member(9, 0x70, "Display")] public Ref<LocalizedTextResource> HealthRewardText;
        [RTTI.Member(10, 0x78, "Display")] public Ref<UITexture> UIPerkRewardIcon;
        [RTTI.Member(11, 0x80, "Display")] public Ref<UITexture> UIHealthRewardIcon;
    }

    [RTTI.Serializable(0x5D8856595D7C935C)]
    public class XpTable : Resource
    {
        [RTTI.Member(0, 0x28)] public Array<Ref<XpTableEntry>> Entries;
        [RTTI.Member(1, 0x38)] public int MaxLevelNoEntitlements;
        [RTTI.Member(2, 0x3C)] public int GoldenLevelXPAmount;
    }

    [RTTI.Serializable(0x65D5AF959762A59)]
    public class XpTableEntry : CoreObject
    {
        [RTTI.Member(0, 0x20)] public int RequiredXp;
        [RTTI.Member(1, 0x24)] public int PerkPoints;
        [RTTI.Member(2, 0x28)] public Array<Ref<EntityComponentResource>> Components;
        [RTTI.Member(3, 0x38)] public Ref<EntitlementResource> Entitlement;
    }

    [RTTI.Serializable(0xAA90848A8D921AA3)]
    public class ZiplineDetectionComponent : EntityComponent
    {
    }

    [RTTI.Serializable(0xACB2E430A71FC0C3)]
    public class ZiplineDetectionComponentResource : EntityComponentResource
    {
        [RTTI.Member(0, 0x30, "Logic")] public Vec3 HandOffset;
        [RTTI.Member(1, 0x40, "Logic")] public float DetectionRadius;
        [RTTI.Member(2, 0x44, "Logic")] public float CollisionRadius;
    }

    [RTTI.Serializable(0x83C66C736757EE67)]
    public class Zone
    {
        [RTTI.Member(0, 0x48, "ZoneDescription")] public Array<CPtr<Zone>> ExcludedZones;
        [RTTI.Member(1, 0x60, "ZoneDescription")] public OrientedBox Volume;
        [RTTI.Member(2, 0xB0, "ZoneDescription")] public BoundingBox3 Boundingbox;
        [RTTI.Member(3, 0xD0, "ZoneDescription")] public int Priority;
    }

    [RTTI.Serializable(0x5854994E1E6DB174)]
    public class ZoomSetting : Resource
    {
        [RTTI.Member(0, 0x28, "Logic")] public Ref<CameraPropertiesSetResource> CameraProperties;
        [RTTI.Member(1, 0x30, "Logic")] public Ref<HUDCrosshairSettings> Crosshair;
        [RTTI.Member(2, 0x38, "Logic")] public float CrosshairAppearDelay;
        [RTTI.Member(3, 0x3C, "Logic")] public float CrosshairZoomThreshold;
        [RTTI.Member(4, 0x40, "Logic")] public float MoveModifierWhenZoomed;
        [RTTI.Member(5, 0x44, "Logic")] public float LookModifierWhenZoomed;
        [RTTI.Member(6, 0x48, "Logic")] public float LookModifierWhenZoomedMP;
        [RTTI.Member(7, 0x4C, "Logic")] public float MoveModifierWhenFiring;
        [RTTI.Member(8, 0x50, "Logic")] public float LookModifierWhenFiring;
        [RTTI.Member(9, 0x54, "Logic")] public float LookModifierWhenFiringMP;
        [RTTI.Member(10, 0x58, "Logic")] public float AimNoiseFactor;
        [RTTI.Member(11, 0x5C, "Logic")] public float AimLagAimFactor;
        [RTTI.Member(12, 0x60, "Logic")] public float AimLagMoveFactor;
        [RTTI.Member(13, 0x64, "Logic")] public bool EnabledAutoAim;
        [RTTI.Member(14, 0x68, "Logic")] public Ref<AutoAimHull> AimHull;
        [RTTI.Member(15, 0x70, "Logic")] public Ref<CurveResource> AimShapeCurve;
        [RTTI.Member(16, 0x78, "Logic")] public float DelayBeforeReloading;
        [RTTI.Member(17, 0x7C, "Logic")] public float FirstPersonHitEffectFactor;
        [RTTI.Member(18, 0x80, "Logic")] public float InterpolationDuration;
        [RTTI.Member(19, 0x84, "Logic")] public float ActivationDelay;
        [RTTI.Member(20, 0x88, "Controls")] public Ref<JoystickInputModifierResource> JoystickInputModifierResource;
        [RTTI.Member(21, 0x90, "Controls")] public float SixaxisHorizontalAimCorrection;
        [RTTI.Member(22, 0x94, "Controls")] public float SixaxisVerticalAimCorrection;
        [RTTI.Member(23, 0x98, "Controls")] public float SixaxisHorizontalAimEdge;
        [RTTI.Member(24, 0x9C, "Controls")] public float SixaxisVerticalAimEdge;
        [RTTI.Member(25, 0xA0, "Controls")] public float SixaxisHorizontalAimEdgeSpeed;
        [RTTI.Member(26, 0xA4, "Controls")] public float SixaxisVerticalAimEdgeSpeed;
        [RTTI.Member(27, 0xA8, "Representation")] public Ref<ScreenEffectResource> ScreenEffect;
        [RTTI.Member(28, 0xB0, "Representation")] public float ZoomShaderVariable;
        [RTTI.Member(29, 0xB4, "Controls")] public ETriState MotionControlUseTetheredPitch;
        [RTTI.Member(30, 0xB8, "Controls")] public ETriState UsesSightForAiming;
        [RTTI.Member(31, 0xBC, "Controls")] public bool UsesScope;
        [RTTI.Member(32, 0xC0, "Logic")] public Ref<AccuracyOverrideResource> AccuracyOverrideResource;
    }

    [RTTI.Serializable(0x2BA0CF27122ABF15)]
    public class int_AnimationBoneMotion
    {
        [RTTI.Member(0, 0x0)] public int Key;
        [RTTI.Member(1, 0x8)] public AnimationBoneMotion Value;
    }
}
